import{d as e,g as t,c as o}from"../../nitro/nitro.mjs";import{u as s}from"./index5.mjs";import{m as r,s as i}from"./db/schema.mjs";import"node:buffer";import"node:process";import"node:timers";import"node:events";import"node:net";import"node:async_hooks";import"node:assert";import"node:util";import"node:url";import"node:stream";import"node:crypto";import"node:dns";import"node:string_decoder";const m=e((async e=>{const{page:m=1,limit:a=100}=t(e),n=Number(m),p=Math.min(Number(a),100);if(isNaN(n)||n<1||!Number.isInteger(n))throw o({statusCode:400,message:"Page must be a positive integer.."});if(isNaN(p)||p<1||!Number.isInteger(p))throw o({statusCode:400,message:"Limit must be a positive integer"});const d=(n-1)*p,u=s().select({name:r.name,slug:r.slug,artists:r.artists}).from(r).orderBy(i`${r.artists}->0->>'credit_name'`,r.name).limit(p).offset(d),c=s().select({count:i`count(*)`}).from(r),[g,[{count:l}]]=await Promise.all([u.execute(),c.execute()]);return{albums:g.map((e=>e)),pagination:{currentPage:n,pageSize:p,totalItems:Number(l)}}}));export{m as default};
//# sourceMappingURL=index.mjs.map
