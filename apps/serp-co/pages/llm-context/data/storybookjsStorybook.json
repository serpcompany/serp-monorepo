[
  {
    "owner": "storybookjs",
    "repo": "storybook",
    "content": "TITLE: Basic Story with Arguments\nDESCRIPTION: Demonstrates defining a story using args with the Button component in the primary state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"button-story-with-args.md\" />\n```\n\n----------------------------------------\n\nTITLE: Web Components Registration Form Testing with TypeScript\nDESCRIPTION: A TypeScript implementation for testing Web Components registration forms in Storybook. This story uses strongly-typed play functions to simulate user interactions with a form, including typing in fields and submitting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-registration-form',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: File Structure Example for Component Stories\nDESCRIPTION: Shows the recommended file structure for organizing component and story files together.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomponents/\n├─ Button/\n│  ├─ Button.js | ts | jsx | tsx | vue | svelte\n│  ├─ Button.stories.js | ts | jsx | tsx | svelte\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook ArgTypes Object\nDESCRIPTION: Defines a label argument type configuration object for Storybook components. Includes type definition, default value, description, table documentation, and control settings for the Storybook UI controls panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-generated-argtypes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst argTypes = {\n  label: {\n    name: 'label',\n    type: { name: 'string', required: false },\n    defaultValue: 'Hello',\n    description: 'demo description',\n    table: {\n      type: { summary: 'string' },\n      defaultValue: { summary: 'Hello' },\n    },\n    control: {\n      type: 'text',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main.js for Docs Addon\nDESCRIPTION: JavaScript configuration for adding the Docs addon to Storybook in the main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-docs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a React Component - TypeScript 4.9 Syntax\nDESCRIPTION: This TypeScript 4.9 snippet shows a Storybook configuration for a React component, using the satisfies operator for enhanced type safety. It leverages argTypes for property controls and a custom render function to assign computed props. Compatible with Storybook for React and TypeScript 4.9+, requiring proper typings for meta and story objects. Inputs and outputs mirror typical React argument-driven component stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_2\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\\n\\nimport { YourComponent } from './your-component';\\n\\nconst meta = {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes with options\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n} satisfies Meta<typeof YourComponent>;\\n\\nexport default meta;\\ntype Story = StoryObj<typeof meta>;\\n\\nconst someFunction = (valuePropertyA, valuePropertyB) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory: Story = {\\n  render: (args) => {\\n    const { propertyA, propertyB } = args;\\n    //\\uD83D\\uDC49 Assigns the function result to a variable\\n    const someFunctionResult = someFunction(propertyA, propertyB);\\n\\n    return <YourComponent {...args} someProperty={someFunctionResult} />;\\n  },\\n  args: {\\n    propertyA: 'Item One',\\n    propertyB: 'Another Item One',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Story with Figma Link in TypeScript\nDESCRIPTION: Defines a Storybook story for an Angular component (`MyComponent`) using TypeScript. It imports necessary types from `@storybook/angular`, defines metadata (`meta`) specifying the component, and exports an `Example` story with parameters linking to a Figma design file. This requires `@storybook/angular` and the corresponding Angular component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/angular/';\n\nimport { MyComponent } from './MyComponent.component';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CSF 3.0 Storybook Story using JavaScript\nDESCRIPTION: Shows how to create a Storybook story in JavaScript using the Component Story Format (CSF) 3.0. The snippet imports MyComponent and sets it up in the meta as the component to document, with a default story providing an arg for message. Suitable for any JavaScript-based project with Storybook set up.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-auto-title.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\n/**\n * Story written in CSF 3.0 with auto title generation\n * See https://storybook.js.org/docs/api/csf\n * to learn more about it.\n */\nexport default { component: MyComponent };\n\nexport const Default = {\n  args: { message: 'Hello world!' },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Svelte (Standard CSF) with JavaScript\nDESCRIPTION: Defines the metadata for Button component stories in a Svelte project using standard Component Story Format (CSF) in a JavaScript file. It imports the `Button.svelte` component and exports a default object specifying the component, `argTypes` for controls (like a color picker for `backgroundColor`), and default `args` (setting `primary` to true for all stories).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"svelte\" language=\"js\" tabTitle=\"CSF\"\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the main Storybook configuration file using TypeScript. It imports the StorybookConfig type, defines the configuration object, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-essentials-addon.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'], // 👈 Register addon-essentials\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Vue Story Implementation with TypeScript\nDESCRIPTION: Implements a Storybook story for a Vue component using TypeScript and setup function. Demonstrates proper typing with Meta and StoryObj.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nimport imageFile from './static/image.png';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nconst image = {\n  src: imageFile,\n  alt: 'my image',\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const WithAnImage: Story = {\n  render: () => ({\n    setup() {\n      //👇 Returns the content of the image object create above.\n      return { image };\n    },\n    template: `<img v-bind=\"image\"/>`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Decorating Angular Storybook Component - TypeScript\nDESCRIPTION: This snippet defines a Storybook story for MyComponent in Angular using TypeScript. It imports necessary Storybook functions and applies a decorator with useChannel to emit highlight events for specific HTML elements. Dependencies include '@storybook/angular' and 'storybook/preview-api'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { componentWrapperDecorator } from '@storybook/angular';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Highlighted: Story = {\n  decorators: [\n    componentWrapperDecorator((story) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n      });\n      return story;\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Angular in TypeScript\nDESCRIPTION: This snippet defines metadata for a Button component in Angular using TypeScript. It sets up the component, defines argTypes for a 'variant' prop with radio control, and exports the metadata.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Story Configuration\nDESCRIPTION: Shows a simple story configuration using JavaScript/JSX without type information. Suitable for React or other JavaScript frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const Simple = {\n  name: 'So simple!',\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Component-Level Args\nDESCRIPTION: Shows how to define default args at the component level that apply to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: Button,\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Storybook Documentation Page\nDESCRIPTION: YAML frontmatter configuration for a Storybook documentation page, setting the title, hiding the renderer selector, and configuring the sidebar order and title.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'How to document components'\nhideRendererSelector: true\nsidebar:\n  order: 4\n  title: Docs\n---\n```\n\n----------------------------------------\n\nTITLE: Stories Using Args\nDESCRIPTION: Demonstrates how to create multiple stories that build upon each other using shared args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"button-story-using-args.md\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in React with TypeScript\nDESCRIPTION: A TypeScript implementation of a React Button component with an interface defining the props. The component accepts properties for primary state, background color, size, label, and click handler, with detailed type definitions and default values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ButtonProps {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary?: boolean;\n  /**\n   * What background color to use\n   */\n  backgroundColor?: string;\n  /**\n   * How large should the button be?\n   */\n  size?: 'small' | 'medium' | 'large';\n  /**\n   * Button contents\n   */\n  label: string;\n  /**\n   * Optional click handler\n   */\n  onClick?: () => void;\n}\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button: React.FC<ButtonProps> = ({\n  primary = false,\n  size = 'medium',\n  backgroundColor,\n  label,\n  ...props\n}) => {\n  // the component implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Defining React Storybook Button Stories (TypeScript)\nDESCRIPTION: Defines Storybook stories for a React Button in TypeScript. Imports relevant types, establishes meta for the Button, and exports a Primary story with args, ensuring type safety for the Button's props. This is a straightforward and widely-used TS CSF pattern for React in Storybook. Dependencies: @storybook/react, the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for Framework-Specific Documentation Links\nDESCRIPTION: This code snippet uses conditional rendering tags to display framework-specific documentation links based on the renderer being used. It covers various frameworks including Qwik, React, SolidJS, Svelte, Vue, and Web Components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<IfRenderer renderer=\"qwik\">\n    * [Storybook's Qwik README](https://github.com/literalpie/storybook-framework-qwik) for more information on how to set up Storybook in your Qwik project.\n    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.\n  </IfRenderer>\n\n  <IfRenderer renderer=\"react\">\n    * Storybook's React Vite [framework documentation](./frameworks/react-vite.mdx) for more information on how to set up Storybook in your React project with Vite.\n    * Storybook's React Webpack [framework documentation](./frameworks/react-webpack5.mdx) for more information on how to set up Storybook in your React project with Webpack 5.\n    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.\n  </IfRenderer>\n\n  <IfRenderer renderer=\"solid\">\n    * [Storybook's SolidJS README](https://github.com/storybookjs/solidjs) for more information on how to set up Storybook in your SolidJS project.\n    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.\n  </IfRenderer>\n\n  <IfRenderer renderer=\"svelte\">\n    * Storybook's SvelteKit [framework documentation](./frameworks/sveltekit.mdx) for more information on how to set up Storybook in your SvelteKit project.\n    * Storybook's Svelte Vite [framework documentation](./frameworks/svelte-vite.mdx) for more information on how to set up Storybook in your Svelte project with Vite.\n    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.\n  </IfRenderer>\n\n  <IfRenderer renderer=\"vue\">\n    * Storybook's Vue 3 Vite [framework documentation](./frameworks/vue3-vite.mdx) for more information on how to set up Storybook in your Vue 3 project with Vite.\n    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.\n  </IfRenderer>\n\n  <IfRenderer renderer=\"web-components\">\n    * Storybook's Web Components Vite [framework documentation](./frameworks/web-components-vite.mdx) for more information on how to set up Storybook in your Web Components project with Vite.\n    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.\n  </IfRenderer>\n```\n\n----------------------------------------\n\nTITLE: Fetching API Data with Story-Level Loader\nDESCRIPTION: Example showing how to use a loader to fetch todo data from an API before rendering a story. The loaded data is combined with story args in the render context.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/loaders.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: TodoItem,\n  render: ({ loaded, ...args }) => <TodoItem {...args} {...loaded} />,\n};\n\nexport const Primary = {\n  loaders: [\n    async () => ({\n      todo: await fetch('/todos/1').then((r) => r.json()),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Component Stories in Storybook\nDESCRIPTION: Example showing how to write stories to document and test UI component variations using Component Story Format (CSF). The story demonstrates capturing different states of a component for testing and documentation purposes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/why-storybook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```js\nimport { Histogram } from './Histogram';\n\nexport default {\n  component: Histogram,\n  title: 'Histogram',\n};\n\n// Story that shows the default state\nexport const Default = {\n  args: {\n    dataPoints: [100, 800, 400],\n  },\n};\n\n// Story that shows a loading state\nexport const Loading = {\n  args: {\n    dataPoints: [],\n    loading: true,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Theme Provider in JavaScript\nDESCRIPTION: Sets up a global decorator in Storybook's preview that wraps all stories in a styled-components ThemeProvider. Allows dynamic theme switching through story parameters with a default light theme.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-provider-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\n// themes = { light, dark }\nimport * as themes from '../src/themes';\n\nexport default {\n  decorators: [\n    // 👇 Defining the decorator in the preview file applies it to all stories\n    (Story, { parameters }) => {\n      // 👇 Make it configurable by reading the theme value from parameters\n      const { theme = 'light' } = parameters;\n      return (\n        <ThemeProvider theme={themes[theme]}>\n          <Story />\n        </ThemeProvider>\n      );\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Button Story Metadata with `fn` Spy (TypeScript)\nDESCRIPTION: Defines Storybook metadata (`Meta<Button>`) for an Angular `Button` component using TypeScript. It imports necessary types from `@storybook/angular`, the `fn` utility from `storybook/test` for mocking, and the `Button` component. The `args` property uses `fn()` to create a spy for the `onClick` event, enabling interaction logging in the Storybook Actions panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { fn } from 'storybook/test';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked\n  args: { onClick: fn() },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the main Storybook file using TypeScript. It imports the StorybookConfig type, defines a config object with framework and stories patterns, and exports it.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Form Validation in React with Storybook Stories (JavaScript)\nDESCRIPTION: Implements form validation testing using @testing-library/react and @storybook/react's composeStories. Tests form validation by running the InvalidForm story and checking for invalid form state after submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fireEvent, render, screen } from '@testing-library/react';\n\nimport { composeStories } from '@storybook/react';\n\nimport * as stories from './LoginForm.stories'; // 👈 Our stories imported here.\n\nconst { InvalidForm } = composeStories(stories);\n\ntest('Checks if the form is valid', async () => {\n  // Renders the composed story\n  await InvalidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Svelte using Svelte CSF in TypeScript\nDESCRIPTION: This snippet demonstrates how to create stories for a Svelte Button component using Svelte CSF in TypeScript. It configures the component metadata, sets parameters, and defines a basic story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    /* 👇 The title prop is optional.\n     * See https://storybook.js.org/docs/configure/#configure-story-loading\n     * to learn how to generate automatic titles\n    */\n    title: 'Button',\n    component: Button,\n    parameters: {\n      myAddon: {\n        data: 'This data is passed to the addon',\n      },\n    },\n  });\n</script>\n\n<Story name=\"Basic\"/>\n```\n\n----------------------------------------\n\nTITLE: Typical Storybook Main Configuration File Structure\nDESCRIPTION: A basic example of a Storybook main.js configuration file showing the standard structure with essential properties like framework, stories, and addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"main-config-typical.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Svelte CSF with TypeScript (TS 4.9+)\nDESCRIPTION: Defines Button component story metadata within a Svelte file using TypeScript (4.9+) and the `@storybook/addon-svelte-csf` addon. It uses `defineMeta` to specify the `Button` component, configure `argTypes` (including a color control for `backgroundColor`), and set default `args` (`primary: true`). This leverages TypeScript within the `<script module>` block.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Creates specific argTypes\n    argTypes: {\n      backgroundColor: { control: 'color' },\n    },\n    args: {\n      //👇 Now all Button stories will be primary.\n      primary: true,\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Form Validation in Svelte with Storybook Stories\nDESCRIPTION: Implements form validation testing using @testing-library/svelte and @storybook/svelte's composeStories. Tests form validation by running the InvalidForm story and verifying the invalid form state after submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fireEvent, render, screen } from '@testing-library/svelte';\n\nimport { composeStories } from '@storybook/svelte';\n\nimport * as stories from './LoginForm.stories'; // 👈 Our stories imported here.\n\nconst { InvalidForm } = composeStories(stories);\n\nit('Checks if the form is valid', async () => {\n  // Renders the composed story\n  await InvalidForm.run();\n\n  await fireEvent.click(screen.getByText('Submit'));\n\n  const isFormValid = screen.getByTestId('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in React with Storybook (TypeScript 4.9+ Satisfies)\nDESCRIPTION: This TypeScript snippet defines React Button stories using the latest TypeScript 'satisfies' operator for robust type safety. It imports types from '@storybook/react', specifies meta using 'satisfies Meta', and exports stories with type-safe arguments. This pattern leverages modern TS features for improved maintainability in large codebases.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_4\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\\n\\nimport { Button } from './Button';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\\ntype Story = StoryObj<typeof meta>;\\n\\nexport const Primary: Story = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories for SolidJS with Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet defines Button stories for SolidJS in Storybook. The Button component is imported, the default export configures it as the story component, and three variants are defined, each with unique args. This code leverages Solid's JSX compatibility in a format familiar to React/Storybook developers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\\n\\nexport default {\\n  component: Button,\\n};\\n\\nexport const Primary = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in JavaScript\nDESCRIPTION: This JavaScript snippet configures the main Storybook settings within `.storybook/main.js`. It specifies the UI framework being used (placeholder `'@storybook/your-framework'`), defines the glob patterns for locating story files (`stories`), and uses the `previewHead` function to conditionally inject an analytics script tag into the preview's HTML `<head>` based on the presence of the `ANALYTICS_ID` environment variable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-head.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\".storybook/main.js\" renderer=\"common\" language=\"js\"\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  previewHead: (head) => `\n    ${head}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n```\n```\n\n----------------------------------------\n\nTITLE: React JavaScript Storybook Story with GraphQL Mocking\nDESCRIPTION: JavaScript implementation of React stories with GraphQL mocking using MSW and Apollo Client. Includes Apollo Provider setup and mock handlers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { graphql, HttpResponse, delay } from 'msw';\n\nimport { DocumentScreen } from './YourPage';\n\nconst mockedClient = new ApolloClient({\n  uri: 'https://your-graphql-endpoint',\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n  },\n});\n\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\nexport default {\n  component: DocumentScreen,\n  decorators: [\n    (Story) => (\n      <ApolloProvider client={mockedClient}>\n        <Story />\n      </ApolloProvider>\n    ),\n  ],\n};\n\nexport const MockedSuccess = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', () => {\n          return HttpResponse.json({\n            data: {\n              allInfo: {\n                ...TestData,\n              },\n            },\n          });\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', async () => {\n          await delay(800);\n          return HttpResponse.json({\n            errors: [\n              {\n                message: 'Access denied',\n              },\n            ],\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Margin Decorator in Svelte for Storybook\nDESCRIPTION: This snippet shows how to create a margin decorator in Svelte to add padding to component stories. It uses an auxiliary component to wrap stories with the required spacing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Template } from './Component.story.svelte';\n</script>\n\n<div style=\"padding: 3em;\">\n  <Template />\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Button Story Implementation (TypeScript)\nDESCRIPTION: Default story implementation for a Button component in React using CSF 3 format with TypeScript. Includes type definition for Story interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Default: Story = {\n  render: (args) => <Button {...args} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Button Story with TypeScript\nDESCRIPTION: Creates a Button component story for Vue 3 using TypeScript and CSF 3 format. Includes type safety and primary button configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = { component: Button };\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = { args: { primary: true } };\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for SolidJS with Storybook (TypeScript 4.9+ Satisfies)\nDESCRIPTION: This TypeScript snippet sets up Button stories for SolidJS using 'storybook-solidjs' and the 'satisfies' keyword to enforce strict typing. Primary, Secondary, and Tertiary variants use object spreads for argument inheritance. This pattern enables strong type checking and concise story configuration for SolidJS users.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_7\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\\n\\nimport { Button } from './Button';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\\ntype Story = StoryObj<typeof meta>;\\n\\nexport const Primary: Story = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: CSF 3 Default Render Function Usage\nDESCRIPTION: Illustrates the simplified CSF 3 syntax using default render functions for common component rendering patterns.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in JavaScript\nDESCRIPTION: JavaScript configuration file for Storybook that defines the framework, story patterns, and webpack builder settings. Includes options for file system caching and lazy compilation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    builder: {\n      name: '@storybook/builder-webpack5',\n      options: {\n        fsCache: true,\n        lazyCompilation: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Reusing Story Data in List Component Stories (JavaScript)\nDESCRIPTION: This snippet illustrates how to reuse story data from child ListItem components in the parent List component stories. It demonstrates a more maintainable approach by centralizing the story data and reusing it across multiple stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  component: List,\n};\n\nexport const OneItem = (args) => (\n  <List {...args}>\n    <ListItem {...Unchecked.args} />\n  </List>\n);\n\nexport const ManyItems = (args) => (\n  <List {...args}>\n    <ListItem {...Unchecked.args} />\n    <ListItem {...Unchecked.args} />\n    <ListItem {...Unchecked.args} />\n  </List>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Args in Addons\nDESCRIPTION: Shows how to use the useArgs hook in Storybook addons to read and update args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useArgs } from '@storybook/manager-api';\n\nconst [args, updateArgs, resetArgs] = useArgs();\n\nconst showError = () => {\n  updateArgs({ error: true });\n};\n\nconst resetError = () => {\n  updateArgs({ error: false });\n};\n\nconst resetAllArgs = () => {\n  resetArgs();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a React Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a Storybook story for a React component in JavaScript, including setting up argTypes for prop controls and using a custom render function to inject calculated props. It requires Storybook for React, a compatible React environment, and expects functional React components and standard JSX. Arguments are used to parametrize the story and control the rendered component's state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { YourComponent } from './your-component';\\n\\nexport default {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes with options\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n};\\n\\nconst someFunction = (valuePropertyA, valuePropertyB) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory = {\\n  render: (args) => {\\n    const { propertyA, propertyB } = args;\\n    //\\uD83D\\uDC49 Assigns the function result to a variable\\n    const someFunctionResult = someFunction(propertyA, propertyB);\\n\\n    return <YourComponent {...args} someProperty={someFunctionResult} />;\\n  },\\n  args: {\\n    propertyA: 'Item One',\\n    propertyB: 'Another Item One',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Component Story with CSF 2 in Storybook\nDESCRIPTION: This code snippet demonstrates how to define a Button component story using Component Story Format 2 in Storybook. It exports a default object that specifies the component title (which determines its location in the Storybook sidebar) and references the Button component itself. This is the foundation for adding specific stories for the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-title.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'components/Button',\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Main Configuration in TypeScript\nDESCRIPTION: Defines the core Storybook configuration including framework selection, story file patterns, and TypeScript settings. Sets up react-docgen for TypeScript documentation generation and specifies file patterns for MDX and stories files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-react-docgen.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    reactDocgen: 'react-docgen',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Button Story with Args Implementation\nDESCRIPTION: Example showing how to create a button story using args pattern for handling click events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nexport const Text = (args) => ({\n  template: '<Button @click=\"args.onClick\">Hello Button</Button>',\n  setup() {\n    return { args };\n  },\n});\nText.args = {\n  onClick: action('clicked'),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Angular Storybook Story with Interaction Tests in TypeScript\nDESCRIPTION: This snippet defines a Storybook story named `FilledForm` for an Angular `RegistrationForm` component using TypeScript. It utilizes the `play` function along with `@storybook/test` utilities (`within`, `userEvent`) to simulate user interaction by finding email and password inputs, typing values into them, and clicking the submit button within the story's canvas.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"RegistrationForm.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { RegistrationForm } from './RegistrationForm.component';\n\nconst meta: Meta<RegistrationForm> = {\n  component: RegistrationForm,\n};\n\nexport default meta;\ntype Story = StoryObj<RegistrationForm>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with GitHub Flavored Markdown in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook in TypeScript, including setting up the framework, specifying story locations, and adding the docs addon with remark-gfm plugin for GitHub Flavored Markdown support. It also includes type definitions for better type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-config-remark-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport remarkGfm from 'remark-gfm';\n\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    // Other addons go here\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        mdxPluginOptions: {\n          mdxCompileOptions: {\n            remarkPlugins: [remarkGfm],\n          },\n        },\n      },\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Svelte Storybook Story with Interaction Tests (Svelte CSF, TS)\nDESCRIPTION: This snippet demonstrates a Storybook story for a Svelte `RegistrationForm` using the Svelte CSF format, specifically targeting TypeScript 4.9. It defines the `FilledForm` story with a `play` function that simulates user interactions (typing email/password, clicking submit) using `@storybook/test` utilities.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"RegistrationForm.stories.svelte\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import RegistrationForm from './RegistrationForm.svelte';\n\n  const { Story } = defineMeta({\n    component: RegistrationForm,\n  });\n</script>\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"FilledForm\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Svelte CSF with JavaScript\nDESCRIPTION: Defines Button component story metadata within a Svelte file using JavaScript and the `@storybook/addon-svelte-csf` addon. It uses `defineMeta` to specify the `Button` component, configure `argTypes` (including a color control for `backgroundColor`), and set default `args` (`primary: true`). This pattern integrates CSF configuration directly into the `.svelte` file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"js\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Creates specific argTypes\n    argTypes: {\n      backgroundColor: { control: 'color' },\n    },\n    args: {\n      //👇 Now all Button stories will be primary.\n      primary: true,\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Generic Gizmo Component\nDESCRIPTION: This JavaScript code snippet configures Storybook controls for a generic Gizmo component that could be used with React, Vue, or other frameworks. It defines a comprehensive set of control types for various component properties with specific constraints and options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Gizmo } from './Gizmo';\n\nexport default {\n  component: Gizmo,\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Common Framework Pattern\nDESCRIPTION: Shows a framework-agnostic approach to setting component parameters using JavaScript. This pattern can be used across multiple frameworks in Storybook, setting the backgrounds parameter for a Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Interaction Test in Storybook (TypeScript - Web Components)\nDESCRIPTION: This TypeScript snippet sets up a Storybook story `ExampleAsyncStory` for a web component identified by the tag 'demo-my-component'. It includes a `play` function that simulates asynchronous user interaction using `userEvent` for typing and clicking, and `waitFor` to handle delays before interacting with a resulting error element. It requires Storybook types for Web Components (`@storybook/web-components`) and testing utilities (`storybook/test`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Expanding List Component Stories in Storybook (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create multiple stories for a List component, each with a different number of ListItem components. It shows how to render different functions for each story to showcase various scenarios.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nexport default {\n  component: List,\n};\n\nexport const Empty = (args) => <List {...args} />;\n\nexport const OneItem = (args) => (\n  <List {...args}>\n    <ListItem>Item 1</ListItem>\n  </List>\n);\n\nexport const ManyItems = (args) => (\n  <List {...args}>\n    <ListItem>Item 1</ListItem>\n    <ListItem>Item 2</ListItem>\n    <ListItem>Item 3</ListItem>\n  </List>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in React with Storybook (TypeScript)\nDESCRIPTION: This TypeScript code sets up React Button stories for Storybook using the standard Meta and StoryObj types. It defines meta info, exports the Button as a component, and sets up three variants with distinct args. TypeScript typing ensures correctness of provided props and enables IDE support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\\n\\nimport { Button } from './Button';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<typeof Button>;\\n\\nexport const Primary: Story = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic List Component Story in Storybook (JavaScript)\nDESCRIPTION: This snippet shows how to create a basic story for a List component that includes ListItem components. It demonstrates the initial setup for rendering multiple components together in a single story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nexport default {\n  component: List,\n};\n\nexport const Empty = (args) => <List {...args} />;\n\nexport const OneItem = (args) => (\n  <List {...args}>\n    <ListItem />\n  </List>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Vue with TypeScript\nDESCRIPTION: Implements Vue Button component stories using TypeScript with Vue 3 specific configurations. Shows accessible and inaccessible variants with render functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n// This is an accessible story\nexport const Accessible: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    primary: false,\n    label: 'Button',\n  },\n};\n// This is not\nexport const Inaccessible: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    ...Accessible.args,\n    backgroundColor: 'red',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Addons in Storybook Configuration (JavaScript/TypeScript)\nDESCRIPTION: Demonstrates how to register addons in Storybook's main.js or main.ts configuration file. It shows examples of adding addons with and without options, including the '@storybook/addon-essentials' and a custom addon with specific options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-addons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    '@storybook/addon-essentials',\n    {\n      name: '@storybook/addon-coverage',\n      options: {\n        istanbul: {\n          exclude: ['**/components/Header.js'],\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in TypeScript 4.9 for React with Satisfies Operator\nDESCRIPTION: Creates a Storybook story for a React Button component using TypeScript 4.9's satisfies operator for type safety. Defines three story variations with different labels while maintaining consistent component styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"Button\" />,\n};\n\nexport const Secondary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />,\n};\n\nexport const Tertiary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Snapshot Serializer\nDESCRIPTION: Implementation of a custom snapshot serializer to standardize HTML output and handle dynamic attributes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  test: (val) => typeof val === 'string',\n  print: (val) => val.replace(/css-[a-zA-Z0-9-]+/g, 'css-xxxxxxxx'),\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Snapshot Tests with Jest - JavaScript\nDESCRIPTION: This snippet sets up snapshot testing for Storybook stories in a JavaScript environment using Jest. It locates all story files using glob patterns, composes their stories with the specified renderer, and runs snapshot tests for each. Dependencies include 'path', 'glob', '@jest/globals', and '@storybook/your-renderer'. The main functions are 'compose', 'getAllStoryFiles', and the main Jest 'describe' and 'test' blocks. The expected input is a set of 'stories' or 'story' files, and the output comprises Jest snapshots; ensure a compatible renderer is used. The code expects at least one valid story per story module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/snapshot-tests-portable-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport path from 'path';\\nimport * as glob from 'glob';\\n\\nimport { describe, test, expect } from '@jest/globals';\\n\\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\\nimport { composeStories } from '@storybook/your-renderer';\\n\\nconst compose = (entry) => {\\n  try {\\n    return composeStories(entry);\\n  } catch (e) {\\n    throw new Error(\\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\\n    );\\n  }\\n};\\n\\nfunction getAllStoryFiles() {\\n  // Place the glob you want to match your stories files\\n  const storyFiles = glob.sync(\\n    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),\\n  );\\n\\n  return storyFiles.map((filePath) => {\\n    const storyFile = require(filePath);\\n    const storyDir = path.dirname(filePath);\\n    const componentName = path.basename(filePath).replace(/\\\\.(stories|story)\\\\.[^/.]+$/, '');\\n\\n    return { filePath, storyFile, storyDir, componentName };\\n  });\\n}\\n\\ndescribe('Stories Snapshots', () => {\\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\\n    const meta = storyFile.default;\\n    const title = meta.title || componentName;\\n\\n    describe(title, () => {\\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\\n\\n      if (stories.length <= 0) {\\n        throw new Error(\\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,\\n        );\\n      }\\n\\n      stories.forEach(({ name, story }) => {\\n        test(name, async () => {\\n          const mounted = render(story());\\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\\n          await new Promise((resolve) => setTimeout(resolve, 1));\\n          expect(mounted.container).toMatchSnapshot();\\n        });\\n      });\\n    });\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Addon Components with State Management in JavaScript/TypeScript\nDESCRIPTION: This code implements two main components for a Storybook addon: a Panel and a Tool component. Both components use the useAddonState hook to maintain state that persists across the addon. The Panel appears in the addon panel section while the Tool adds an interactive button to the toolbar with a lightning icon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useaddonstate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { useAddonState } from 'storybook/manager-api';\nimport { AddonPanel, IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\n\nexport const Panel = () => {\n  const [state, setState] = useAddonState('addon-unique-identifier', 'initial state');\n\n  return (\n    <AddonPanel key=\"custom-panel\" active=\"true\">\n      <Button onClick={() => setState('Example')}>\n        Click to update Storybook's internal state\n      </Button>\n    </AddonPanel>\n  );\n};\nexport const Tool = () => {\n  const [state, setState] = useAddonState('addon-unique-identifier', 'initial state');\n\n  return (\n    <IconButton\n      key=\"custom-toolbar\"\n      active=\"true\"\n      title=\"Enable my addon\"\n      onClick={() => setState('Example')}\n    >\n      <LightningIcon />\n    </IconButton>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook's main.ts file in TypeScript\nDESCRIPTION: This snippet shows the TypeScript version of the Storybook main configuration file. It uses the StorybookConfig type for type-checking and includes similar settings as the JavaScript version.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// .storybook/main.ts\n\nimport type { StorybookConfig } from '@storybook/react-webpack5';\n\nconst config: StorybookConfig = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Button Stories with CSF Syntax (JavaScript and TypeScript)\nDESCRIPTION: Uses Svelte's CSF syntax for configuring Storybook button stories either in JavaScript or TypeScript. The defineMeta API is used inside a <script module>, importing and passing the Svelte Button as a component. A <Story> component instance is defined with 'Primary' name and the usual button args. This approach provides a Svelte-centric, declarative method for defining stories. Requires @storybook/addon-svelte-csf, Svelte, and the Button Svelte component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story\n  name=\"Primary\"\n  args={{\n    primary: true,\n    label: 'Button'\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook's preview panel that defines color and date matchers for controls and customizes the docs page layout using addon-docs components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-template-function.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Title,\n  Subtitle,\n  Description,\n  Primary,\n  Controls,\n  Stories,\n} from '@storybook/addon-docs/blocks';\n\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      page: () => (\n        <>\n          <Title />\n          <Subtitle />\n          <Description />\n          <Primary />\n          <Controls />\n          <Stories />\n        </>\n      ),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Storybook Button Stories (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define Storybook stories for a Button component in Angular using TypeScript and Storybook's CSF API. It imports meta-types from @storybook/angular, specifies the Button component, and sets up a Primary story with 'primary' and 'label' arguments. The output is a Storybook interface for interactive UI testing in Angular projects. Dependencies include @storybook/angular and the Button Angular component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular/';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining React Storybook Button Stories with Type Satisfaction (TypeScript >=4.9)\nDESCRIPTION: Shows a TypeScript 4.9+ approach for Storybook React stories, using the 'satisfies' operator for stronger meta type-checking. After importing @storybook/react and the Button, it defines meta with the component, exports it, and sets up the Primary story with typical args type-checked. Dependencies: @storybook/react, the React Button component. Requires TypeScript 4.9+ for the 'satisfies' operator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_5\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook to a Specific Version\nDESCRIPTION: The 'upgrade' command updates your Storybook installation to the specified version. Options include performing a dry run, skipping checks, automatically confirming prompts, specifying a configuration directory, and choosing a package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nstorybook[@version] upgrade [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Agnostic Button Story Metadata with `fn` Spy (TypeScript 4.9+)\nDESCRIPTION: Defines Storybook metadata for a `Button` component in a framework-agnostic way using TypeScript 4.9+ syntax (`satisfies Meta<typeof Button>`). It imports `Meta` from a placeholder `@storybook/your-framework`, `fn` from `storybook/test` for mocking, and the `Button` component. The `args` property employs `fn()` to spy on the `onClick` event for action logging. The `satisfies` keyword provides type checking without widening the type of `meta`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\nimport { fn } from 'storybook/test';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked\n  args: { onClick: fn() },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: Basic Storybook configuration using JavaScript that sets up framework integration, story patterns, essential addons, documentation settings, and static directory mapping. Configuration file should be placed in .storybook/main.js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typical.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // Required\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  // Optional\n  addons: ['@storybook/addon-essentials'],\n  docs: {\n    autodocs: 'tag',\n  },\n  staticDirs: ['../public'],\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgType Categories in Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the `meta` configuration for a Button component story in Storybook, applicable to various frameworks (React, Vue, etc.). It uses the `argTypes` object to define controls for component properties and categorizes them ('Colors', 'Text', 'Events', 'Sizes') with optional subcategories using the `table` property. It imports the `Button` component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n        // Assigns the argTypes to a specific subcategory\n        subcategory: 'Button colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n        subcategory: 'Button style',\n      },\n    },\n    label: {\n      table: {\n        category: 'Text',\n        subcategory: 'Button contents',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n        subcategory: 'Button Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for an Angular Component - TypeScript\nDESCRIPTION: This snippet sets up a Storybook story for an Angular component using TypeScript, specifying component metadata and demonstrating how to use argTypes for control options. The story uses a render function that computes a result from supplied argument values and passes it as an extra property to the component. Requires @storybook/angular, correct Angular and Storybook configuration, with args passed as properties and return type conforming to Angular Storybook expectations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\\n\\nimport { YourComponent } from './your-component.component';\\n\\nconst meta: Meta<YourComponent> = {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes with options\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<YourComponent>;\\n\\nconst someFunction = (valuePropertyA: String, valuePropertyB: String) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory: Story = {\\n  render: (args) => {\\n    const { propertyA, propertyB } = args;\\n    //\\uD83D\\uDC49 Assigns the function result to a variable\\n    const someFunctionResult = someFunction(propertyA, propertyB);\\n    return {\\n      props: {\\n        ...args,\\n        someProperty: someFunctionResult,\\n      },\\n    };\\n  },\\n  args: { propertyA: 'Item One', propertyB: 'Another Item One' },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Component Button Story Metadata with TypeScript\nDESCRIPTION: Defines the metadata for a Button web component story using TypeScript. It imports `Meta` and `StoryObj` types from `@storybook/web-components`. The exported `meta` object is typed and specifies the component tag name (`demo-button`), `argTypes` (with a color control for `backgroundColor`), and default `args` (`primary: true`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  // 👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    // 👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript configuration for Storybook's main.ts file. This adds type safety by importing the StorybookConfig type, defining the framework, story patterns, and registering the same set of official Storybook addons with proper typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-full-individual-essentials-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-viewport',\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        csfPluginOptions: null,\n        mdxPluginOptions: {\n          mdxCompileOptions: {\n            remarkPlugins: [],\n          },\n        },\n      },\n    },\n    '@storybook/addon-controls',\n    '@storybook/addon-backgrounds',\n    '@storybook/addon-toolbars',\n    '@storybook/addon-measure',\n    '@storybook/addon-outline',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Registering React Button Story - Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates registering a Button component for Storybook in a React setting using explicit generics with Meta<typeof Button>. It requires '@storybook/react' and the local Button component. This enables strong type checking for the story metadata and the Button itself.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/react';\\n\\nimport { Button } from './Button';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Running CSF 2 to CSF 3 Migration Codemod\nDESCRIPTION: Command to automatically convert stories from CSF 2 format to CSF 3 format using Storybook's codemod tool. This migration is optional but recommended for better maintainability and features.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest migrate csf-2-to-3 \"stories/**/*.stories.@(js|jsx|ts|tsx)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Using defineMeta for Svelte Button in Svelte Script (TypeScript 4.9)\nDESCRIPTION: A Svelte <script module> block using TypeScript 4.9 syntax, this snippet sets up Storybook meta for a Svelte Button through defineMeta from @storybook/addon-svelte-csf. It features argTypes for both static and conditionally-enabled controls. Requires Svelte, @storybook/addon-svelte-csf, Button.svelte, and TypeScript 4.9 support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_4\n\nLANGUAGE: ts-4-9\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n    argTypes: {\\n      label: { control: 'text' }, // Always shows the control\\n      advanced: { control: 'boolean' },\\n      // Only enabled if advanced is true\\n      margin: { control: 'number', if: { arg: 'advanced' } },\\n      padding: { control: 'number', if: { arg: 'advanced' } },\\n      cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n    },\\n  });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for React in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook stories for a React Button component using JavaScript. It imports the Button component, sets up metadata, and defines a story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  args: {/* ... */},\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Stories in Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook that uses strongly-typed interfaces and an async function to dynamically find and load story files. This version imports types from Storybook packages and defines a properly typed async function that returns StoriesEntry objects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-with-logic.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\nimport type { StoriesEntry } from 'storybook/internal/types';\n\nasync function findStories(): Promise<StoriesEntry[]> {\n  // your custom logic returns a list of files\n}\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: async (list: StoriesEntry[]) => [\n    ...list,\n    // 👇 Add your found stories to the existing list of story files\n    ...(await findStories()),\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook's main.js file in JavaScript\nDESCRIPTION: This snippet demonstrates the basic structure of a Storybook main.js configuration file. It includes settings for stories, addons, and framework-specific options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\n\nmodule.exports = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  docs: {\n    autodocs: 'tag',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Storybook Toolbar Component with React\nDESCRIPTION: Implements a toolbar button component that toggles a global parameter and triggers UI refresh. Uses Storybook's hooks, icons, and internal components with React to create an interactive toolbar button that maintains state through Storybook's globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-consume-and-update-globaltype.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useCallback } from 'react';\nimport { OutlineIcon } from '@storybook/icons';\nimport { useGlobals } from 'storybook/manager-api';\nimport { addons } from 'storybook/preview-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { FORCE_RE_RENDER } from 'storybook/internal/core-events';\n\nconst ExampleToolbar = () => {\n  const [globals, updateGlobals] = useGlobals();\n\n  const isActive = globals['my-param-key'] || false;\n\n  // Function that will update the global value and trigger a UI refresh.\n  const refreshAndUpdateGlobal = () => {\n    // Updates Storybook global value\n    updateGlobals({\n      ['my-param-key']: !isActive,\n    }),\n      // Invokes Storybook's addon API method (with the FORCE_RE_RENDER) event to trigger a UI refresh\n      addons.getChannel().emit(FORCE_RE_RENDER);\n  };\n\n  const toggleOutline = useCallback(() => refreshAndUpdateGlobal(), [isActive]);\n\n  return (\n    <IconButton\n      key=\"Example\"\n      active={isActive}\n      title=\"Show a Storybook toolbar\"\n      onClick={toggleOutline}\n    >\n      <OutlineIcon />\n    </IconButton>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Angular with TypeScript\nDESCRIPTION: Angular-specific implementation of Button stories using TypeScript. Defines metadata and a primary button story with documentation overrides.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\n/**\n * Button stories\n * These stories showcase the button\n */\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    docs: {\n      description: {\n        component: 'Another description, overriding the comments',\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\n/**\n * Primary Button\n * This is the primary button\n */\nexport const Primary: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Another description on the story, overriding the comments',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Story Loading Configuration in Storybook\nDESCRIPTION: Standard configuration for loading stories in Storybook using glob patterns, where stories are colocated with their components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Story in Storybook (First Example)\nDESCRIPTION: Defines a Button component story in Storybook using TypeScript. Includes metadata configuration with title and component properties, custom parameters for an addon, and a Basic story with a render function that returns a Vue-like template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => ({\n    components: { Button },\n    template: '<Button label=\"Hello\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration in TypeScript\nDESCRIPTION: TypeScript configuration file that defines and exports Storybook settings with proper type definitions. Includes configuration for framework, story patterns, addons, and documentation options with type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-full-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  docs: {\n    //👇 See the table below for the list of supported options\n    defaultName: 'Documentation',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook ArgTypes for a Framework Component in TypeScript\nDESCRIPTION: Defines the metadata and `argTypes` for a `Gizmo` component using TypeScript and Storybook's generic framework typing (`@storybook/your-framework`). It demonstrates configuring various control types for component props like `boolean`, `number`, `range`, `object`, `file`, `radio`, `check`, `select`, `text`, `color`, and `date`. Requires importing `Meta` from the specific framework package and the `Gizmo` component itself.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Gizmo } from './Gizmo';\n\nconst meta: Meta<typeof Gizmo> = {\n  component: Gizmo,\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Svelte Page Story with TypeScript\nDESCRIPTION: Storybook story for Svelte Page component using TypeScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const Default: Story = {\n  play: async ({ mount, args }) => {\n    const note = await db.note.create({\n      data: { title: 'Mount inside of play' },\n    });\n\n    const canvas = await mount(\n      Page,\n      // 👇 Pass data that is created inside of the play function to the component\n      //   For example, a just-generated UUID\n      { props: { ...args, params: { id: String(note.id) } } },\n    );\n\n    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));\n  },\n  argTypes: {\n    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.\n    params: { control: { disable: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with SolidJS Hooks in TypeScript 4.9+\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Button component in SolidJS using hooks with TypeScript 4.9+ syntax. It imports both the type definitions and createSignal hook from SolidJS for proper typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { createSignal } from 'solid-js';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n * Example Button story with Solid Hooks.\n * See note below related to this example.\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Tests with Storybook Test Utilities in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the storybook/test package to create tests within a story's play function. It shows importing test utilities, defining a story with args, and writing a play function that simulates user interaction and checks expectations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Button.stories.ts\nimport { expect, fn, userEvent, within } from 'storybook/test';\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  args: {\n    onClick: fn(),\n  },\n};\n\nexport const Demo = {\n  play: async ({ args, canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByRole('button'));\n    await expect(args.onClick).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Storybook Button Stories with Type Satisfaction (TypeScript >=4.9)\nDESCRIPTION: Defines Storybook stories for Vue 3's Button component in TypeScript using satisfies for meta typing and a custom render function. Sets up Button metadata, uses a setup-based template for args, and adds Primary story for interactive documentation. Requires @storybook/vue3, Button.vue, and TypeScript 4.9+.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_15\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring Storybook's core settings in `.storybook/main.ts` using type safety. It imports `StorybookConfig` for type checking, sets the framework (placeholder `'@storybook/your-framework'`), specifies story file locations (`stories`), and conditionally adds an analytics script to the preview's HTML `<head>` via the `previewHead` function, depending on the `ANALYTICS_ID` environment variable. The configuration object `config` is explicitly typed before being exported.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-head.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\".storybook/main.ts\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  previewHead: (head) => `\n    ${head}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n\nexport default config;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook's main.js file that defines the framework, story file patterns, and documentation settings. This configuration uses ES modules syntax to export the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-default-name.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  docs: {\n    defaultName: 'Documentation',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a React Component - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates setting up Storybook stories for a React component, explicitly typing metadata and stories. ArgTypes define available prop options, and a custom render method injects a calculated property. Requires Storybook for React, working TypeScript setup, and proper type imports from '@storybook/react'. Inputs are controlled through story args, and outputs are driven by dynamically computed prop values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\\n\\nimport { YourComponent } from './your-component';\\n\\nconst meta: Meta<typeof YourComponent> = {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes with options\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<typeof YourComponent>;\\n\\nconst someFunction = (valuePropertyA, valuePropertyB) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory: Story = {\\n  render: (args) => {\\n    const { propertyA, propertyB } = args;\\n    //\\uD83D\\uDC49 Assigns the function result to a variable\\n    const someFunctionResult = someFunction(propertyA, propertyB);\\n\\n    return <YourComponent {...args} someProperty={someFunctionResult} />;\\n  },\\n  args: {\\n    propertyA: 'Item One',\\n    propertyB: 'Another Item One',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Play Function in Svelte CSF\nDESCRIPTION: Shows how to implement an async play function in Svelte using Component Story Format (CSF) with TypeScript. Uses the defineMeta helper and demonstrates proper story structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"AsyncExample\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Other steps\n\n    // Waits for the component to be rendered before querying the element\n    await canvas.findByRole('button', { name: / button label/i });\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main with defineMain\nDESCRIPTION: Demonstrates how to set up the main Storybook configuration using the type-safe defineMain function, specifying framework, stories pattern, and addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineMain } from '@storybook/your-framework/node';\n\nexport default defineMain({\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-a11y'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Head with Environment Detection\nDESCRIPTION: Demonstrates how to conditionally add scripts and styles to Storybook's preview head based on the environment. The function takes the existing head content and returns modified content with additional elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-preview-head.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  previewHead: (head) => (`\n    ${head}\n    ${process.env.NODE_ENV === 'development' ?\n      '<script src=\"dev-only.js\"></script>'\n      : ''}\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest with Storybook Annotations for React\nDESCRIPTION: Configuration for Jest tests that integrates Storybook annotations for React projects. Imports annotations from the local .storybook/preview and optional addon annotations, then uses setProjectAnnotations to register them for testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-set-project-annotations.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from '@jest/globals';\nimport { setProjectAnnotations } from '@storybook/react';\n// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this\nimport * as addonAnnotations from 'my-addon/preview';\nimport * as previewAnnotations from './.storybook/preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n\n// Supports beforeAll hook from Storybook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Button in Angular TypeScript\nDESCRIPTION: This TypeScript snippet imports the Button component and arrow icons, and sets up Storybook's metadata with argTypes for selecting arrow icons. Dependencies include Angular and Storybook's angular support package. It maps serialized options to complex values for Storybook control.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\nconst meta: Meta<Button> = {\n  component: Button,\n  argTypes: {\n    arrow: {\n      options: Object.keys(arrows), // An array of serializable values\n      mapping: arrows, // Maps serializable option values to complex arg values\n      control: {\n        type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n        labels: {\n          // 'labels' maps option values to string labels\n          ArrowUp: 'Up',\n          ArrowDown: 'Down',\n          ArrowLeft: 'Left',\n          ArrowRight: 'Right',\n        },\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Meta in TypeScript\nDESCRIPTION: Shows how to define and export Storybook meta information for a Svelte component using TypeScript, disabling the 'foo' control. Requires @storybook/svelte and the relevant component. Uses typing to ensure correctness and is suitable for Storybook Svelte projects using TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags for Web Components using JavaScript\nDESCRIPTION: This snippet shows how to configure story tags for a Web Components button using JavaScript. It demonstrates setting up default tags and adding specific tags to individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n  /*\n   * All stories in this file will have these tags applied:\n   * - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n};\n\nexport const ExperimentalFeatureStory = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for React (TypeScript 4.9+)\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a React Button component using TypeScript 4.9+. It uses the 'satisfies' operator for type checking and defines a 'Text' story with args and a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text = {\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story in TypeScript 4.9+\nDESCRIPTION: This snippet demonstrates how to set up a Button story using TypeScript 4.9+. It uses the 'satisfies' keyword to ensure type safety while defining the meta object with title, component, and parameters properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  parameters: {\n    myAddon: { disable: true }, // Disables the addon\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Settings in TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook's preview.ts file that disables inline story rendering in documentation. This example imports the Preview type from the framework-specific Storybook package and explicitly types the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-optout-inline.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      // Opt-out of inline rendering\n      story: { inline: false },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining CSF 3.0 Storybook Story in Angular using TypeScript\nDESCRIPTION: This snippet demonstrates creating a Storybook story using the Component Story Format (CSF) 3.0 in an Angular application with TypeScript. The MyComponent component is imported and set up as a meta object which conforms to the Meta interface. The default story is configured with args to customize the rendered component's message. Ensure @storybook/angular is installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-auto-title.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\n/**\n * Story written in CSF 3.0 with auto title generation\n * See https://storybook.js.org/docs/api/csf\n * to learn more about it.\n */\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Default: Story = {\n  args: { message: 'Hello world!' },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Vue with TypeScript (CSF 2)\nDESCRIPTION: Creates a default button story for Vue components using TypeScript and CSF 2 format. Uses StoryFn type for proper typing and Vue's setup function to pass args to the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Other imports and story implementation\nexport const Default: StoryFn<typeof Button> = (args) => ({\n  components: { Button },\n  setup() {\n    return { args };\n  },\n  template: '<Button v-bind=\"args\" />',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Button Component in TypeScript\nDESCRIPTION: This snippet shows how to set up and export a Storybook meta configuration for a Button component using TypeScript. It imports precise typing from Storybook, references the local Button component, and uses the \"satisfies\" operator for stricter type validation, ensuring the meta object conforms to Storybook expectations. The framework placeholder in the import path should be replaced with the actual framework name (e.g., 'react', 'vue3'). Intended for projects using Storybook and TypeScript with type-safe component story declarations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline-with-satisfies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\\nimport type { Meta } from '@storybook/<your-framework>';\\n\\nimport { Button } from './Button';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof Button>; // 👈 Satisfies operator being used for stricter type checking.\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Generic Component with TypeScript 4.9\nDESCRIPTION: This TypeScript code demonstrates how to configure Storybook controls for a generic component using TypeScript 4.9 syntax with the 'satisfies' operator. It includes a comment to replace the framework placeholder and defines various control types for component properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Gizmo } from './Gizmo';\n\nconst meta = {\n  component: Gizmo,\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n} satisfies Meta<typeof Gizmo>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with Loaders in Svelte (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for TodoItem in Svelte. It includes a default export with component definition, and a Primary story with render function and loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport TodoItem from './TodoItem.svelte';\n\nexport default {\n  component: TodoItem,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: (args, { loaded: { todo } }) => ({\n    Component: TodoItem,\n    props: {\n      ...args,\n      todo,\n    },\n  }),\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Svelte CSF Storybook Stories with TypeScript 4.9+\nDESCRIPTION: Demonstrates how to add decorators to Svelte stories using the Svelte CSF format with TypeScript 4.9+. This example uses the defineMeta helper and applies a MarginDecorator component as a decorator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n  import MarginDecorator from './MarginDecorator.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story\n  name=\"Primary\"\n  decorators={[\n    () => MarginDecorator\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Svelte Storybook - TypeScript\nDESCRIPTION: Exhibits Svelte component story setup using TypeScript, specifying custom controls (array and regex) for story parameterization. Utilizes Meta and StoryObj typings from '@storybook/svelte'. This pattern is tailored for Svelte projects desiring explicit type-checking and fine-grained control configuration. Inputs: Svelte component and TS story; outputs: stories with precise control exposure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof YourComponent>;\n\nexport const ArrayInclude: Story = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude: Story = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude: Story = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude: Story = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Button Story in Storybook for Web Components (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript configuration for a Storybook story targeting a Web Component. It imports `Meta` and `StoryObj` types. The `meta` object defines the `title` and specifies the Web Component using its tag name (`'demo-component'`) as the value for the `component` property. A typed basic story `Button` is exported.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nconst meta: Meta = {\n  title: 'Design System/Atoms/Button',\n  component: 'demo-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n// This is the only named export in the file, and it matches the component name\nexport const Button: Story = {};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Svelte using TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to set up story tags for a Svelte component using TypeScript 4.9. It shows the configuration of default tags and how to add specific tags to individual stories using the 'satisfies' operator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n  /*\n   * All stories in this file will have these tags applied:\n   * - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExperimentalFeatureStory: Story = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Login Form Inputs with Playwright - JavaScript\nDESCRIPTION: This JavaScript snippet defines an automated Playwright test that checks if the email and password fields of a Storybook-rendered login form contain default placeholder values. The snippet requires Playwright to be installed (with '@playwright/test') and assumes the test runs with access to a Storybook host on 'localhost:6006'. 'test' defines the suite, while 'expect' asserts retrieved input values match expected strings. Inputs are located via CSS selectors (#email and #password), and the final result is a passing/failing test based on value correctness. Limitations include the requirement of a local Storybook server and consistent field selectors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-playwright-test.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { test, expect } = require('@playwright/test');\n\ntest('Login Form inputs', async ({ page }) => {\n  await page.goto('http://localhost:6006/iframe.html?id=components-login-form--example');\n  const email = await page.inputValue('#email');\n  const password = await page.inputValue('#password');\n  await expect(email).toBe('email@provider.com');\n  await expect(password).toBe('a-random-password');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite Builder in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to configure Storybook's main settings in `.storybook/main.js`. It defines the project's framework (placeholder `@storybook/your-framework`), specifies the paths where story files (`*.mdx`, `*.stories.*`) are located relative to the configuration file, and configures the core settings to use the Vite builder (`@storybook/builder-vite`), pointing to a specific Vite configuration file (`../../../vite.config.js`). Requires the appropriate Storybook framework package and `@storybook/builder-vite`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-builder.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    builder: {\n      name: '@storybook/builder-vite',\n      options: {\n        viteConfigPath: '../../../vite.config.js',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting List Components with Subcomponents in Storybook\nDESCRIPTION: Example showing how to document List and ListItem components together using the subcomponents property. This allows documenting parent-child component relationships while maintaining component prop documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/stories-for-multiple-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"list-story-with-subcomponents.md\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook using CLI\nDESCRIPTION: Command to install Storybook in a project's root directory using the Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"create-command.md\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Stories in Angular with TypeScript\nDESCRIPTION: Angular implementation of Button stories using TypeScript, defining variants and a combination story with proper type annotations using StoryObj and Meta types from @storybook/angular.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './Button';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\nexport default meta;\n\ntype Story = StoryObj<Button>;\n\nexport const Variant1: Story = {\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 1 },\n};\n\nexport const Variant2: Story = {\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 2 },\n};\n\nexport const Combo: Story = {\n  tags: ['!test'],\n  render: () => ({\n    template: `\n      <div>\n        <demo-button [variant]=\"1\"></demo-button>\n        <demo-button [variant]=\"2\"></demo-button>\n      </div>\n    `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: This snippet defines a preview configuration object for Storybook in JavaScript. It sets up a global theme type with a toolbar selector for light and dark themes, and initializes the theme to 'light'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-configure-globaltypes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst preview = {\n  globalTypes: {\n    theme: {\n      description: 'Global theme for components',\n      toolbar: {\n        // The label to show for this toolbar item\n        title: 'Theme',\n        icon: 'circlehollow',\n        // Array of plain string values or MenuItem shape (see below)\n        items: ['light', 'dark'],\n        // Change title based on selected value\n        dynamicTitle: true,\n      },\n    },\n  },\n  initialGlobals: {\n    theme: 'light',\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Angular Storybook Play Function Example\nDESCRIPTION: Demonstrates implementing a Storybook play function for an Angular component that tests select option interactions with timing delays. Uses TypeScript with Angular-specific Meta and StoryObj types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport const ExampleChangeEvent: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const select = canvas.getByRole('listbox');\n\n    await userEvent.selectOptions(select, ['One Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Another Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Yet another item']);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook ArgTypes for a Generic Component in JavaScript/TypeScript\nDESCRIPTION: Defines the metadata and `argTypes` for a component (likely `Gizmo`) within a Storybook story file. It specifies various control types (`range`, `object`, `file`, `radio`, `check`, `select`, `text`, `color`, `date`) to manipulate component props interactively in the Storybook UI. This specific snippet seems incomplete as it only shows the latter half of the `argTypes` definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story in TypeScript\nDESCRIPTION: TypeScript implementation of a Storybook story for a TodoItem web component. Uses Meta and StoryObj types, includes data loading and render function configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-todo-item',\n  render: (args, { loaded: { todo } }) => TodoItem({ ...args, ...todo }),\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Svelte CSF Component Stories with TypeScript\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Svelte component using TypeScript and the Svelte CSF format. It uses defineMeta from the Svelte CSF addon and implements a play function that simulates user interactions with the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n  import { userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  play={async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Axe (JavaScript)\nDESCRIPTION: JavaScript implementation of Storybook test runner configuration that integrates axe-playwright for accessibility testing. Includes preVisit hook for injecting axe and postVisit hook for running accessibility checks on stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-disable.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getStoryContext } = require('@storybook/test-runner');\n\nconst { injectAxe, checkA11y } = require('axe-playwright');\n/*\n * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api\n * to learn more about the test-runner hooks API.\n */\nmodule.exports = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await getStoryContext(page, context);\n\n    // Do not run a11y tests on disabled stories.\n    if (storyContext.parameters?.a11y?.disable) {\n      return;\n    }\n    await checkA11y(page, 'body', {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Vue with JavaScript\nDESCRIPTION: Defines the metadata for Button component stories in a Vue project using JavaScript. It imports the `Button.vue` component and exports a default object specifying the component, `argTypes` for controls (like a color picker for `backgroundColor`), and default `args` (setting `primary` to true for all stories).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"vue\" language=\"js\"\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Button Story in TypeScript 4.9\nDESCRIPTION: This snippet demonstrates a generic Storybook story definition in TypeScript 4.9 (potentially with TSX) for a `Button` component. It imports `Meta` and `StoryObj` (using a placeholder '@storybook/your-framework'), imports the `Button` component, defines typed `meta` using the `satisfies` keyword, and exports a typed `Primary` story with `args` specifying `variant: 'primary'`. Replace 'your-framework' with the actual Storybook framework package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Vue in TypeScript\nDESCRIPTION: Implements a Storybook story for a Vue component using standard TypeScript syntax. Configures argTypes with options, creates a helper function, and demonstrates how to use Vue 3's composition API in the story render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport YourComponent from './YourComponent.vue';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  //👇 Creates specific argTypes with options\n  argTypes: {\n    propertyA: {\n      options: ['Item One', 'Item Two', 'Item Three'],\n      control: { type: 'select' }, // automatically inferred when 'options' is defined\n    },\n    propertyB: {\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n    },\n  },\n};\n\nconst someFunction = (valuePropertyA, valuePropertyB) => {\n  // Do some logic here\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  render: ({ args }) => {\n    const { propertyA, propertyB } = args;\n    //👇 Assigns the function result to a variable\n    const functionResult = someFunction(propertyA, propertyB);\n    return {\n      components: { YourComponent },\n      setup() {\n        return {\n          ...args,\n          //👇 Replaces arg variable with the override (without the need of mutation)\n          someProperty: functionResult,\n        };\n      },\n      template:\n        '<YourComponent :propertyA=\"propertyA\" :propertyB=\"propertyB\" :someProperty=\"someProperty\"/>',\n    };\n  },\n  args: {\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SolidJS Storybook Button Stories (TypeScript, TSX)\nDESCRIPTION: Defines SolidJS Button stories for Storybook using TypeScript and TSX. Provides type-safe meta and story configuration, and the Primary story includes prop defaults for the component. Ideal for Storybook users seeking TSX support in SolidJS. Dependencies: 'storybook-solidjs' and the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Vue with JavaScript\nDESCRIPTION: Creates a ButtonGroup story in Vue using JavaScript. Uses a render function to control how the component renders. Imports Button stories and composes them into a ButtonGroup with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonGroup from './ButtonGroup.vue';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nexport default {\n  component: ButtonGroup,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Pair = {\n  render: (args) => ({\n    components: { ButtonGroup },\n    setup() {\n      return { args };\n    },\n    template: '<ButtonGroup v-bind=\"args\" />',\n  }),\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports an object with methods to customize Vite, Webpack, and Babel configurations. Each method is asynchronous and receives the current config and options as parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-advanced-config-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  viteFinal: async (config, options) => {\n    // Update config here\n    return config;\n  },\n  webpackFinal: async (config, options) => {\n    // Change webpack config\n    return config;\n  },\n  babel: async (config, options) => {\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registration Form Story with Play Function\nDESCRIPTION: Example of a story implementing a play function to test a registration form component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect } from '@storybook/jest';\nimport { within, userEvent } from '@storybook/testing-library';\n\nexport const RegisterForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n    await userEvent.type(emailInput, 'example@email.com', {\n      delay: 100,\n    });\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    const submitButton = canvas.getByRole('button');\n    await userEvent.click(submitButton);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls Removal for Angular in TypeScript\nDESCRIPTION: Demonstrates how to create Storybook meta configuration for an Angular component in TypeScript, specifying that the component property 'foo' should not show up in Storybook's UI controls by using 'argTypes'. Requires @storybook/angular and type definitions. Expects a component import and disables a control by setting 'foo.control' to false; outputs a typed meta object suitable for export in Angular Storybook projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { YourComponent } from './YourComponent.component';\n\nconst meta: Meta<YourComponent> = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Basic Stories Configuration in main.js\nDESCRIPTION: Default stories configuration that excludes node_modules files from story loading.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [\"../**/*.stories.*\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Login Form Story with Play Function\nDESCRIPTION: A Storybook story implementing a login form component with a play function to simulate user interactions and form validation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const LoginForm = {\n  args: {\n    onSubmit: (username, password) => console.log(username, password),\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button');\n    await userEvent.click(loginButton);\n    \n    const usernameInput = canvas.getByLabelText('username', {\n      selector: 'input',\n    });\n    await userEvent.type(usernameInput, 'username@email.com', {\n      delay: 100,\n    });\n    \n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n    await userEvent.type(passwordInput, 'password', { delay: 100 });\n    await userEvent.click(loginButton);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Play Function with findBy Query\nDESCRIPTION: Example of using findBy queries in play functions for asynchronous elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const FindByExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const submitButton = await canvas.findByRole('button');\n    await userEvent.click(submitButton);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Storybook Errors in TypeScript\nDESCRIPTION: This snippet shows how to define and use custom Storybook errors. It includes examples of errors with static and dynamic messages, as well as how to import and throw these custom errors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/ERRORS.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Define a custom error with a numeric code and a static error message template.\nexport class StorybookIndexGenerationError extends StorybookError {\n  constructor() {\n    super({\n      category: Category.Generic,\n      code: 1,\n      message: `Storybook failed when generating an index for your stories. Check the stories field in your main.js`,\n    });\n  }\n}\n\n// Define a custom error with a numeric code and a dynamic error message based on properties from the constructor.\nexport class InvalidFileExtensionError extends StorybookError {\n  // extra properties are defined in the constructor via a data property, which is available in any class method\n  // always use this data Object notation!\n  constructor(public data: { extension: string }) {\n    super({\n      category: Category.Validation,\n      code: 2,\n      documentation: 'https://some-custom-documentation.com/validation-errors',\n      message: `Invalid file extension found: ${data.extension}.`,\n    });\n  }\n}\n\n// import the errors where you need them, i.e.\nimport {\n  StorybookIndexGenerationError,\n  InvalidFileExtensionError,\n} from '@storybook/core-events/server-errors';\n\nthrow StorybookIndexGenerationError();\n// \"SB_Generic_0001: Storybook failed when generating an index for your stories. Check the stories field in your main.js.\n\nthrow InvalidFileExtensionError({ extension: 'mtsx' });\n// \"SB_Validation_0002: Invalid file extension found: mtsx. More info: https://some-custom-documentation.com/validation-errors\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Story Args\nDESCRIPTION: Shows how to set basic arguments for a button component story using the CSF story key.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with definePreview\nDESCRIPTION: Shows how to configure the preview settings using definePreview function, including addon configuration and parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePreview } from '@storybook/your-framework';\nimport addonA11y from '@storybook/addon-a11y';\n\nexport default definePreview({\n  addons: [addonA11y()],\n  parameters: {\n    a11y: {\n      options: { xpath: true },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook Dependencies Command\nDESCRIPTION: Command to upgrade existing Storybook installation to version 8.0. This command analyzes breaking changes, upgrades dependencies, and runs automigrations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for React (TypeScript 4.9 with Satisfies Operator)\nDESCRIPTION: This code defines a Storybook story for a React component using TypeScript 4.9+'s 'satisfies' operator to ensure type safety of the meta object. The configuration includes advanced a11y rules, disabling specific validations, and allows for running accessibility checks manually. This approach requires '@storybook/react', and demonstrates using modern TypeScript for Storybook type-checking and meta validation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_2\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Stories using CSF with TypeScript\nDESCRIPTION: Defines stories for a Button component using Svelte with Component Story Format (CSF). Includes Primary, Secondary and Tertiary variants with different label options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: 'Button',\n    },\n  }),\n};\n\nexport const Secondary: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: '😄👍😍💯',\n    },\n  }),\n};\n\nexport const Tertiary: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: '📚📕📈🤓',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Modern Svelte Storybook Story Implementation\nDESCRIPTION: Demonstrates the updated approach using defineMeta from @storybook/addon-svelte-csf to create Storybook stories for Svelte components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-story-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    title: 'MyComponent',\n    component: MyComponent,\n  });\n</script>\n\n<Story name=\"Default\" />\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Storybook Button Stories with Types and Render Function (TypeScript)\nDESCRIPTION: This piece defines a Storybook CSF story for a Button in plain HTML, using TypeScript to provide stricter typing for props. It specifies the meta object for Storybook, a strong ButtonArgs type, and implements a custom render function that generates a button element with appropriate class and label. This approach is for Storybook HTML storying with type-safety, requiring @storybook/html for TypeScript and optionally a build setup for TS.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\ntype ButtonArgs = {\n  primary: boolean;\n  label: string;\n};\n\nconst meta: Meta<ButtonArgs> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonArgs>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args) => {\n    const btn = document.createElement('button');\n    btn.innerText = args.label;\n\n    const mode = args.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n    btn.className = ['storybook-button', 'storybook-button--medium', mode].join(' ');\n\n    return btn;\n  },\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Solid with TypeScript 4.9\nDESCRIPTION: This snippet shows how to create Storybook stories for a Solid Button component using TypeScript 4.9. It uses the 'satisfies' keyword for type checking, imports necessary types, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {\n  render: () => <Button label=\"Hello\" onClick={action('clicked')} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for HTML Button Component (JavaScript)\nDESCRIPTION: This snippet shows how to configure decorators for an HTML Button component in Storybook using JavaScript. It defines a decorator that wraps the story in a div with margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createButton } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  decorators: [\n    (story) => {\n      const decorator = document.createElement('div');\n      decorator.style.margin = '3em';\n      decorator.appendChild(story());\n      return decorator;\n    },\n  ],\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: (args) => createButton(args),\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Story Configuration in TypeScript\nDESCRIPTION: TypeScript configuration for Web Components stories with proper type definitions from @storybook/web-components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Simple: Story = {\n  name: 'So simple!',\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a Svelte Component using CSF - Svelte Syntax\nDESCRIPTION: This Svelte CSF (Component Story Format) snippet shows progressive story configuration and custom argument control setup for a Svelte component in Storybook. It employs the defineMeta helper from '@storybook/addon-svelte-csf' and demonstrates inline story logic via a template block, using a computed property in the template. The snippet requires @storybook/addon-svelte-csf and a Svelte-compatible Storybook environment. Args provide user-controlled property values driving component behavior.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  const { Story } = defineMeta({\\n      component: YourComponent,\\n      //\\uD83D\\uDC49 Creates specific argTypes\\n      argTypes: {\\n        propertyA: {\\n          options: ['Item One', 'Item Two', 'Item Three'],\\n          control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n        },\\n        propertyB: {\\n          options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n        },\\n      },\\n  });\\n\\n  const someFunction = (valuePropertyA, valuePropertyB) => {\\n    // Do some logic here\\n  };\\n</script>\\n\\n<Story\\n  name=\"ExampleStory\"\\n  args={{\\n    propertyA: 'Item One',\\n    propertyB: 'Another Item One',\\n  }}\\n>\\n  {#snippet children(args)}\\n    <YourComponent\\n      {...args}\\n      someProperty={someFunction(args.propertyA, args.propertyB)}\\n    />\\n  {/snippet}\\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Testing Form Validation in Vue with Storybook Stories (TypeScript)\nDESCRIPTION: Implements form validation testing using @testing-library/vue and @storybook/vue3's composeStories with TypeScript. Tests form validation by running the InvalidForm story and verifying the invalid form state after button click.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fireEvent, render, screen } from '@testing-library/vue';\n\nimport { composeStories } from '@storybook/vue3';\n\nimport * as stories from './LoginForm.stories'; // 👈 Our stories imported here.\n\nconst { InvalidForm } = composeStories(stories);\n\ntest('Checks if the form is valid', async () => {\n  // Renders the composed story\n  await InvalidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Button Component with Vitest and React Testing Library in Storybook\nDESCRIPTION: This code snippet demonstrates how to test a Button component using Vitest and React Testing Library in a Storybook context. It includes tests for rendering the primary button with default args and with overridden props, showcasing the usage of Storybook's run function and screen queries from React Testing Library.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-csf-factory-run.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from 'vitest';\nimport { screen } from '@testing-library/react';\n\n// Import all stories from the stories file\nimport * as stories from './Button.stories';\n\nconst { Primary, Secondary } = stories;\n\ntest('renders primary button with default args', async () => {\n  // The run function will mount the component and run all of Storybook's lifecycle hooks\n  await Primary.run();\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  // You can override props by passing them in the context argument of the run function\n  await Primary.run({ args: { ...Primary.composed.args, children: 'Hello world' } });\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Play Function with Select Events\nDESCRIPTION: Implementation of play function to test select component interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const SelectExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const select = await canvas.getByRole('listbox');\n    await userEvent.selectOptions(select, ['1']);\n    await expect(select.value).toBe('1');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in JavaScript\nDESCRIPTION: This snippet configures the Storybook test runner in JavaScript. It sets up image snapshot testing, defines a custom snapshots directory, and implements a post-visit hook for capturing screenshots after ensuring the page is ready.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-image-snapshot-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { waitForPageReady } = require('@storybook/test-runner');\n\nconst { toMatchImageSnapshot } = require('jest-image-snapshot');\n\nconst customSnapshotsDir = `${process.cwd()}/__snapshots__`;\n\n/** @type { import('@storybook/test-runner').TestRunnerConfig } */\nmodule.exports = {\n  setup() {\n    expect.extend({ toMatchImageSnapshot });\n  },\n  async postVisit(page, context) {\n    // Waits for the page to be ready before taking a screenshot to ensure consistent results\n    await waitForPageReady(page);\n\n    // To capture a screenshot for different browsers, add page.context().browser().browserType().name() to get the browser name to prefix the file name\n    const image = await page.screenshot();\n    expect(image).toMatchImageSnapshot({\n      customSnapshotsDir,\n      customSnapshotIdentifier: context.id,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type from the framework-specific package and defines a config object with methods to customize Vite, Webpack, and Babel configurations. Each method is asynchronous and typed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-advanced-config-example.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  viteFinal: async (config, options) => {\n    // Update config here\n    return config;\n  },\n  webpackFinal: async (config, options) => {\n    // Change webpack config\n    return config;\n  },\n  babel: async (config, options) => {\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Parameters in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports the default configuration for Storybook's preview by specifying control matchers for color and date fields using regular expressions. No external dependencies are required, but this file is intended to be used within a Storybook setup, typically as `.storybook/preview.js`. The configuration sets up which fields Storybook will treat as color pickers or date selectors in the UI, enhancing controls for component stories. Inputs are indirectly the Storybook story files, and the output is a tailored user interface for interacting with controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-controls-custom-matchers.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Controls Doc Block in MDX\nDESCRIPTION: Example of customizing the Controls doc block directly in MDX by excluding the 'style' prop using the block's props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Controls exclude={['style']}>\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for React (TypeScript)\nDESCRIPTION: This snippet shows how to create a Storybook story for a React Button component using TypeScript. It defines a Meta type, exports a default meta object, and creates a 'Text' story with args and a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Text = {\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Story-Level A11y Configuration\nDESCRIPTION: Configuration for customizing accessibility rules for individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Example = {\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the framework, story file locations, and enables automatic documentation generation for tagged stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-autodocs.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  docs: {\n    autodocs: 'tag',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte with TypeScript (Svelte CSF)\nDESCRIPTION: This snippet illustrates how to define Storybook stories for a Svelte Button component using Svelte CSF format with TypeScript. It uses the `defineMeta` function to set up the stories and defines primary and secondary variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n\n  const primaryArgs = {\n    primary: true,\n    label: 'Button',\n  }\n</script>\n\n<Story name=\"Primary\" args={primaryArgs} />\n\n<Story name=\"Secondary\" args={{...primaryArgs, primary: false}} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Configuration for React in TypeScript\nDESCRIPTION: This TypeScript snippet establishes a configuration object for Storybook in a React project, including paths for story files and customizing TypeScript's react-docgen behavior. It requires @storybook/your-framework and uses custom propFilter logic to omit props from dependencies in node_modules. Inputs include the project directory structure and framework presets, and the output is a config object exported for Storybook's use. The setup is extendable and expects the user to replace the framework placeholder with their specific renderer (e.g., react-webpack5).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-react-docgen-typescript-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    reactDocgen: 'react-docgen-typescript',\n    reactDocgenTypescriptOptions: {\n      shouldExtractLiteralValuesFromEnum: true,\n      // 👇 Default prop filter, which excludes props from node_modules\n      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Angular Component Story with Test Interactions\nDESCRIPTION: Implementation of Storybook stories for Angular components with test interactions using TypeScript. Demonstrates both userEvent click and fireEvent testing approaches.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { fireEvent, userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const ClickExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n\nexport const FireEventExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript 4.9+\nDESCRIPTION: Creates Button component story configuration using TypeScript 4.9+ with satisfies operator for type checking. Includes StoryObj type import and accessibility parameter configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-remove.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Meta, StoryObj } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  parameters: {\n    // 👇 Remove this once all stories pass accessibility tests\n    // a11y: { test: 'todo' },\n  },\n} satisfies Meta<typeof Button>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing SolidJS Storybook Stories with TypeScript 4.9+ Satisfies Operator\nDESCRIPTION: TypeScript 4.9+ implementation of LoginForm stories for SolidJS using the 'satisfies' operator. Creates type-safe stories with a play function that tests form interactions and validates results.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { expect, within, userEvent } from 'storybook/test';\n\nimport { LoginForm } from './LoginForm';\n\nconst meta = {\n  component: LoginForm,\n} satisfies Meta<typeof LoginForm>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const EmptyForm: Story = {};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript in SolidJS\nDESCRIPTION: SolidJS Storybook story for TodoItem using TypeScript with standard type annotations. Defines meta object with component and render function, and a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { TodoItem } from './TodoItem';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nconst meta: Meta<typeof TodoItem> = {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof TodoItem>;\n\nexport const Primary: Story = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript with Type Assertion\nDESCRIPTION: TypeScript implementation of Storybook preview configuration using explicit type annotation. It imports the Preview type from the appropriate renderer and defines global argTypes for the label property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-preview.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  argTypes: {\n    // 👇 All stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Enabling Autodocs Globally in Storybook Preview\nDESCRIPTION: Configures Storybook to automatically generate documentation for all stories by adding the 'autodocs' tag in the preview configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const tags = ['autodocs'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Controls with Toggle in Storybook\nDESCRIPTION: This snippet demonstrates how to use conditional controls with a toggle for advanced settings in Storybook. It uses the 'if' property to conditionally render controls based on the value of another control.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Toggle',\n  component: Toggle,\n  argTypes: {\n    label: { control: 'text' },\n    advanced: { control: 'boolean' },\n    // Only show these controls when advanced is true\n    margin: { control: 'number', if: { arg: 'advanced' } },\n    padding: { control: 'number', if: { arg: 'advanced' } },\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript version of Storybook configuration that includes type definitions and the same core settings as the JavaScript version. Uses StorybookConfig type for proper type checking and IDE support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typical.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  // Required\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  // Optional\n  addons: ['@storybook/addon-essentials'],\n  docs: {\n    autodocs: 'tag',\n  },\n  staticDirs: ['../public'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Component-Level Parameters in CSF\nDESCRIPTION: Shows how to define parameters that apply to all stories within a component using the default export in Component Story Format (CSF).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/parameters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.stories.js|jsx|ts|tsx|mdx\nexport default {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n        { name: 'blue', value: '#00f' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a Solid Component - JavaScript\nDESCRIPTION: This snippet defines a Storybook story for a SolidJS component using JavaScript, with argTypes for controls and a render method leveraging createSignal and createEffect to compute a derived prop. It relies on the solid-js library and assumes Storybook is configured for Solid. The arguments setup enables interaction, and the render function wires reactive logic consistent with Solid's paradigm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createSignal, createEffect } from 'solid-js';\\nimport { YourComponent } from './your-component';\\n\\nexport default {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes with options\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n};\\n\\nconst someFunction = (valuePropertyA, valuePropertyB) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory = {\\n  render: (args) => {\\n    const [someFunctionResult, setSomeFunctionResult] = createSignal();\\n\\n    //\\uD83D\\uDC49 Assigns the function result to a signal\\n    createEffect(() => {\\n      setSomeFunctionResult(someFunction(args.propertyA, args.propertyB));\\n    });\\n\\n    return <YourComponent {...args} someProperty={someFunctionResult()} />;\\n  },\\n  args: {\\n    propertyA: 'Item One',\\n    propertyB: 'Another Item One',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings with TypeScript\nDESCRIPTION: This TypeScript snippet defines the main configuration for a Storybook instance targeting a specified framework. It imports the framework-specific StorybookConfig type, sets the framework property placeholder (to be replaced based on actual usage such as react-webpack5 or vue3-webpack5), defines glob patterns for locating story files, and turns on strict TypeScript type checking. The configuration is exported as default, making it discoverable by Storybook at runtime. Dependencies include @storybook/your-framework and TypeScript support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-check.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-webpack5)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    check: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Storybook Decorator\nDESCRIPTION: Demonstrates how to use the makeDecorator API to create custom decorators for Storybook addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeDecorator } from '@storybook/preview-api';\n\nexport const withMyAddon = makeDecorator({\n  name: 'withMyAddon',\n  parameterName: 'myParameter',\n  wrapper: (getStory, context, { parameters }) => {\n    // Do something with the parameters\n    return getStory(context);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook 7 for Vue 2 Projects\nDESCRIPTION: Command to install the latest version of Storybook 7 for projects still using Vue 2, as Storybook no longer supports Vue 2 in newer versions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"storybook-init-v7.md\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Svelte Button Story - Storybook (TypeScript, type-satisfies)\nDESCRIPTION: This TypeScript (TypeScript 4.9+ syntax) code registers a Svelte Button component for Storybook, using Meta from '@storybook/svelte' and the 'satisfies' keyword for stricter type safety. It imports the Button component and exports a meta configuration, useful for improved developer tooling and code safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_12\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\\n\\nimport Button from './Button.svelte';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring React Storybook Preview with TypeScript and Styled Components\nDESCRIPTION: Sets up Storybook preview for React applications using standard TypeScript and styled-components. The Preview type ensures type safety while the decorator wraps stories in a ThemeProvider with themes from globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/react';\n\nimport { ThemeProvider } from 'styled-components';\n\nimport { MyThemes } from '../my-theme-folder/my-theme-file';\n\nconst preview: Preview = {\n  decorators: [\n    (Story, context) => {\n      const theme = MyThemes[context.globals.theme];\n      return (\n        <ThemeProvider theme={theme}>\n          <Story />\n        </ThemeProvider>\n      );\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Generic Button Component in JavaScript\nDESCRIPTION: This snippet configures Storybook metadata for a generic Button component (intended for frameworks like React or Vue), using JavaScript and ES module import/export syntax. It defines argTypes with both simple and conditional controls. The code assumes the existence of a Button component in the local directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\\n\\nexport default {\\n  component: Button,\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in React with TypeScript (TS 4.9+ satisfies)\nDESCRIPTION: Defines the metadata for Button component stories in a React project using TypeScript 4.9+. It imports the `Meta` type from `@storybook/react` and the `Button` component. It uses the `satisfies` operator for type checking the `meta` object, which specifies the component, `argTypes` (including a color control for `backgroundColor`), and default `args` (`primary: true`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"react\" language=\"ts-4-9\"\nimport type { Meta } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Story Sorting in JavaScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook's preview, setting up a custom story sorting order. It defines the order as 'Intro', 'Pages' (with nested 'Home', 'Login', 'Admin'), and 'Components'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    options: {\n      storySort: {\n        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Simulating User Click with userEvent in Storybook Play Function (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a Storybook story (`ClickExample`) for a generic component. It uses the `play` function, which receives the `canvasElement`, to simulate a user clicking a button element identified by its role using `@storybook/test`'s `userEvent.click` and `within` utilities. The interaction can be automatically logged in the Storybook Actions panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ClickExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in React with Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet sets up Button stories for React using Storybook. It imports the Button component, defines the default export with a 'component' field, and exports Primary/Secondary/Tertiary stories via object literals with 'args' property, leveraging argument spreading for variant inheritance. No custom renderers are used as React integrates natively with Storybook's CSF.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\\n\\nexport default {\\n  component: Button,\\n};\\n\\nexport const Primary = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Simulating Click with fireEvent in Storybook Play Function (TypeScript/Web Components)\nDESCRIPTION: This TypeScript snippet defines a Storybook story (`FireEventExample`) for a web component (`'demo-my-component'`). It uses types from `@storybook/web-components` and demonstrates employing the `play` function with `fireEvent.click` and `within` from `storybook/test` to simulate a click on an element identified by `data-testid`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const FireEventExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Angular with TypeScript\nDESCRIPTION: This code defines a Storybook story for a Histogram component in Angular using TypeScript. It exports a default meta object that specifies the component and a Default story with predefined args for data visualization properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { HistogramComponent } from './histogram.component';\n\nconst meta: Meta<HistogramComponent> = {\n  component: HistogramComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<HistogramComponent>;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Web Components Stories with TypeScript\nDESCRIPTION: This snippet shows how to create a Storybook story for a Web Component using TypeScript. It demonstrates how to import the proper types from @storybook/web-components and define a play function to simulate user interactions with custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ExampleStory: Story = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Common Frameworks CSF (TypeScript 4.9)\nDESCRIPTION: Defines Storybook metadata using standard CSF in TypeScript 4.9 syntax (`satisfies Meta`) for components in common frameworks (like React, Vue). It imports the component and necessary types, then configures `argTypes` to hide the 'foo' property from the Storybook args table. Requires replacing 'your-framework' with the actual framework name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"YourComponent.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { YourComponent } from './YourComponent';\n\nconst meta = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n} satisfies Meta<typeof YourComponent>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Web Components Storybook (JavaScript)\nDESCRIPTION: Exports default Storybook metadata for a Web Component identified by the tag name 'demo-button' using JavaScript. It configures conditional controls for `label` (text input) and `image` (select input) properties via `argTypes.if`, making them mutually exclusive.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  component: 'demo-button',\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Generic Storybook - TypeScript 4.9\nDESCRIPTION: Utilizes generic framework-agnostic typing for Storybook using TypeScript 4.9 syntax, with inline comments encouraging users to substitute their framework. The snippet shows how to use arrays and regex to include or exclude controls fields, leveraging strong typing throughout. Inputs: component in TS; outputs: meta-typed stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { YourComponent } from './YourComponent';\n\nconst meta = {\n  component: YourComponent,\n} satisfies Meta<typeof YourComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ArrayInclude: Story = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude: Story = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude: Story = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude: Story = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Simulating User Click with userEvent in Storybook Play Function (TypeScript/Web Components)\nDESCRIPTION: This TypeScript snippet defines a Storybook story (`ClickExample`) for a web component identified by `'demo-my-component'`. It leverages types from `@storybook/web-components` and uses the `play` function with `@storybook/test` utilities (`userEvent`, `within`) to simulate a user clicking a button element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ClickExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story using Standard CSF (TypeScript)\nDESCRIPTION: This snippet defines a Storybook story for a Svelte `Button` component using standard CSF format in a TypeScript file. It imports `Meta` and `StoryObj` from '@storybook/svelte', imports the `Button.svelte` component, defines the typed `meta` object associating it with the `Button` component, and exports a typed `Primary` story setting the `variant` argument to 'primary'. Requires a Svelte-compatible Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"svelte\" language=\"ts\" tabTitle=\"CSF\"\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Generic Button Component in TypeScript 4.9\nDESCRIPTION: This TypeScript 4.9 snippet provides an example Storybook meta definition for a generic Button component, with a placeholder for framework import. It uses the satisfies operator for strict typing and defines argTypes with conditional controls. Replace '@storybook/your-framework' with the real Storybook package for your framework and ensure the correct Button component is imported.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_6\n\nLANGUAGE: ts-4-9\nCODE:\n```\n// Replace your-framework with the name of your framework\\nimport type { Meta } from '@storybook/your-framework';\\n\\nimport { Button } from './Button';\\n\\nconst meta = {\\n  component: Button,\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Running the Storybook Upgrade Command\nDESCRIPTION: Command for upgrading Storybook to a specific version. The upgrade script will update all Storybook packages in the project and run relevant automigrations based on the version specified.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"storybook-upgrade.md\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with pnpm\nDESCRIPTION: This command uses pnpm's dlx feature to run the Storybook initialization script for version 7 or higher. It sets up Storybook in the current project using pnpm as the package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-init-v7.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@^7 init\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React List Component with TypeScript\nDESCRIPTION: This code configures Storybook stories for a React List component using standard TypeScript. It explicitly types the meta object and defines two stories: Empty and OneItem, with proper typing for the Story object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n};\nexport default meta;\n\ntype Story = StoryObj<typeof List>;\n\nexport const Empty: Story = {};\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with Figma Link (TS 4.9+)\nDESCRIPTION: Defines a Storybook story for a Svelte component (`MyComponent.svelte`) using TypeScript 4.9+ features. It imports types from `@storybook/svelte` and the component. It uses the `satisfies` keyword for type-checking the `meta` object and exports an `Example` story with parameters linking to a Figma design file. Requires `@storybook/svelte`, the Svelte component, and TypeScript 4.9 or newer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts\" renderer=\"svelte\" language=\"ts-4-9\"\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport MyComponent from './MyComponent.svelte';\n\n// More on default export: https://storybook.js.org/docs/svelte/writing-stories/introduction#default-export\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Web Components List Component with TypeScript\nDESCRIPTION: This code sets up Storybook stories for a Web Components List implementation using TypeScript and Lit. It registers custom element names, properly types the Story objects, and shows how to render nested web components in the OneItem story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  title: 'List',\n  component: 'demo-list',\n  subcomponents: { ListItem: 'demo-list-item' }, // 👈 Adds the ListItem component as a subcomponent\n};\nexport default meta;\n\ntype Story = StoryObj;\n\nexport const Empty: Story = {};\n\nexport const OneItem: Story = {\n  render: () => html`\n    <demo-list>\n      <demo-list-item></demo-list-item>\n    </demo-list>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Web Components in JavaScript\nDESCRIPTION: This snippet defines metadata for a Button component using Web Components in JavaScript. It sets up the component name and argTypes for the 'variant' prop, and exports the default metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Angular Storybook Stories with TypeScript\nDESCRIPTION: Shows how to add decorators to Angular Storybook stories, including a margin wrapper and embedding a component within a parent component that uses ng-content. Uses moduleMetadata to declare the parent component and componentWrapperDecorator to implement the decorators.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { componentWrapperDecorator, moduleMetadata } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nimport { Parent } from './parent.component'; // Parent contains ng-content\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = {\n  decorators: [componentWrapperDecorator((story) => `<div style=\"margin: 3em\">${story}</div>`)],\n};\n\nexport const InsideParent: Story = {\n  decorators: [\n    moduleMetadata({\n      declarations: [Parent],\n    }),\n    componentWrapperDecorator(Parent),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Button Story in JavaScript (JSX)\nDESCRIPTION: This snippet shows a generic Storybook story definition in JavaScript (potentially with JSX) for a `Button` component. It imports the `Button` component, defines the default export with the `component` metadata, and exports a `Primary` story with the `variant` argument set to 'primary'. This format is common across many frameworks like React, Vue, etc., when using JavaScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta for Generic Components in TypeScript (Common Renderer)\nDESCRIPTION: Provides a Storybook configuration example for generic frameworks in TypeScript, showing how to remove the 'foo' property from the controls. Requires replacing 'your-framework' with the actual framework, importing Meta from Storybook, and importing the component. Uses TypeScript typing for the exported meta object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { YourComponent } from './YourComponent';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Angular with TypeScript\nDESCRIPTION: Defines the metadata for Button component stories in an Angular project using TypeScript. It imports the `Meta` type from `@storybook/angular` and the `Button` component, then exports a default `meta` object specifying the component, `argTypes` for controls (like a color picker for `backgroundColor`), and default `args` (setting `primary` to true).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining List Stories for React Components in TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for React List components using TypeScript. It includes stories for empty, one item, and many items configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Empty: Story = {};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n\nexport const ManyItems: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n      <ListItem />\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook List Stories with Lit and Web Components in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to render List stories using Lit and web components. It imports 'repeat' from Lit to iterate over items and creates List stories 'Empty' and 'OneItem' using template literals. Dependencies include the Lit library for template rendering and Storybook for web components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { html } from 'lit';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  title: 'List',\n  component: 'demo-list',\n};\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate = {\n  render: ({ items, ...args }) => {\n    return html`\n      <demo-list>\n        ${repeat(items, (item) => html`<demo-list-item>${item}</demo-list-item>`)}\n      </demo-list>\n    `;\n  },\n};\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [\n      {\n        ...Unchecked.args,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to set up a Storybook story for a Svelte Page component using TypeScript 4.9. It imports the necessary types and component, and configures the story with type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Page from './Page.svelte';\n\nconst meta = {\n  component: Page,\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n} satisfies Meta<typeof Page>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Snapshot Tests Using Vitest (JavaScript)\nDESCRIPTION: This snippet initializes and runs snapshot tests for Storybook stories using Vitest in JavaScript. It dynamically imports all matching story files, composes their exported stories with the composeStories utility from @storybook/your-renderer, and executes a test suite that filters out stories or components based on provided regular expressions or Storyshots parameters. For each valid story, it runs the story, ensures rendering completion with a brief delay, and then performs a snapshot assertion on the DOM. Requires '@storybook/your-renderer', 'vitest', and compatible test environment. The main parameters are filtering options for suites, story names, and snapshot output directories. Inputs are discovered story files; outputs are test results with snapshot validation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-snapshot-test.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// @vitest-environment jsdom\n\nimport { describe, expect, test } from 'vitest';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nconst compose = (entry) => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your story files\n  const storyFiles = Object.entries(\n    import.meta.glob('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {\n      eager: true,\n    }),\n  );\n\n  return storyFiles.map(([filePath, storyFile]) => {\n    const storyDir = path.dirname(filePath);\n    const componentName = path.basename(filePath).replace(/\\.(stories|story)\\.[^/.]+$/, '');\n    return { filePath, storyFile, componentName, storyDir };\n  });\n}\n\n// Recreate similar options to Storyshots. Place your configuration below\nconst options = {\n  suite: 'Storybook Tests',\n  storyKindRegex: /^.*?DontTest$/,\n  storyNameRegex: /UNSET/,\n  snapshotsDirName: '__snapshots__',\n  snapshotExtension: '.storyshot',\n};\n\ndescribe(options.suite, () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName, storyDir }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {\n      // Skip component tests if they are disabled\n      return;\n    }\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile))\n        .map(([name, story]) => ({ name, story }))\n        .filter(({ name, story }) => {\n          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.\n          return !options.storyNameRegex?.test(name) && !story.parameters.storyshots?.disable;\n        });\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.\n        const testFn = story.parameters.storyshots?.skip ? test.skip : test;\n\n        testFn(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n\n          expect(document.body.firstChild).toMatchSnapshot();\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Navigation with Next.js Router Mock in TypeScript (Standard Syntax)\nDESCRIPTION: A Storybook story in standard TypeScript syntax that tests a form component's back navigation. It utilizes explicit type annotations for Meta and Story types, creating a test that verifies the router's back() method is called when the back button is clicked.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-mock.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getRouter } from '@storybook/nextjs/router.mock';\n\nimport MyForm from './my-form';\n\nconst meta: Meta<typeof MyForm> = {\n  component: MyForm,\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof MyForm>;\n\nexport const GoBack: Story = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n    const backBtn = await canvas.findByText('Go back');\n\n    await userEvent.click(backBtn);\n    // 👇 Assert that your component called back()\n    await expect(getRouter().back).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Reusing Story Definitions in Storybook Components\nDESCRIPTION: Demonstrates how to reuse story definitions between components by referencing args from one story in another, specifically reusing ListItem story args in List stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/stories-for-multiple-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"list-story-reuse-data.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Svelte Storybook using CSF (TypeScript 4.9+)\nDESCRIPTION: Exports default Storybook metadata for a Svelte `Button` component using TypeScript 4.9+'s `satisfies` keyword with the standard Component Story Format (CSF). It imports `Meta` type and the component, then defines conditional controls for `label` (text) and `image` (select) properties using `argTypes.if`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"CSF\"\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Vue with TypeScript\nDESCRIPTION: Defines the metadata for Button component stories in a Vue 3 project using standard TypeScript. It imports the `Meta` type from `@storybook/vue3` and the `Button.vue` component. The exported `meta` object is typed and specifies the component, `argTypes` (with a color control for `backgroundColor`), and default `args` (`primary: true`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"vue\" language=\"ts\"\nimport type { Meta } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in SolidJS with TypeScript\nDESCRIPTION: Demonstrates how to create a List component story in SolidJS using standard TypeScript. Uses storybook-solidjs for SolidJS-specific Storybook bindings and explicit type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 All ListItem stories are imported\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const ManyItems: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem {...Selected.args} />\n      <ListItem {...Unselected.args} />\n      <ListItem {...Unselected.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Web Components Stories with JavaScript\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Web Component using JavaScript. It shows how to define a play function to simulate user interactions with a custom element, targeting elements by test ID and role.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nexport default {\n  component: 'demo-my-component',\n};\n\nexport const ExampleStory = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing API Mocks in Web Components Storybook Stories\nDESCRIPTION: Example of implementing API mocking for Web Components in Storybook using MSW. Shows configuration for success and error scenarios with mock data handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { http, HttpResponse, delay } from 'msw';\n\nconst meta: Meta = {\n  component: 'demo-document-screen',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\nexport const MockedSuccess: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        http.get('https://your-restful-endpoint/', () => {\n          return HttpResponse.json(TestData);\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        http.get('https://your-restful-endpoint', async () => {\n          await delay(800);\n          return new HttpResponse(null, {\n            status: 403,\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Args for Component Slots\nDESCRIPTION: Example of using args to populate child component content through slots.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PageWithFooter = {\n  args: {\n    footer: (\n      <div>\n        <h2>Footer</h2>\n        <button>Click me</button>\n      </div>\n    ),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Accessibility Parameters in Storybook Preview - TypeScript\nDESCRIPTION: This TypeScript snippet sets up accessibility parameters in Storybook’s configuration file by exporting a Preview object. It specifies rule settings for 'autocomplete' and 'image-alt', and allows manual control of automatic checks via the 'manual' flag. It requires integration with a specific JavaScript framework and set up for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-global-config.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories for Common Frameworks with TypeScript 4.9\nDESCRIPTION: This snippet shows how to define Storybook stories for a Button component that can be used across various frameworks using TypeScript 4.9. It uses the 'satisfies' operator for type checking and defines two stories: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName: Story = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Writing TypeScript Stories in Storybook\nDESCRIPTION: Basic example of writing stories using TypeScript for improved type safety and code completion. This uses generic types Meta and StoryObj to infer component metadata and prop types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<CodeSnippets path=\"button-story-baseline.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in React with JavaScript\nDESCRIPTION: Defines the metadata for Button component stories in a React project using JavaScript. It imports the `Button` component and exports a default object specifying the component, `argTypes` for controls (like a color picker for `backgroundColor`), and default `args` (setting `primary` to true for all stories).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"react\" language=\"js\"\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Controls with Mutual Exclusion in Storybook\nDESCRIPTION: This snippet shows how to use conditional controls with mutual exclusion in Storybook. It demonstrates how to disable one control based on the value of another control using the 'if' property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Select',\n  component: Select,\n  argTypes: {\n    variant: {\n      control: { type: 'radio' },\n      options: ['primary', 'secondary'],\n    },\n    // This control only shows up when variant is NOT secondary\n    color: {\n      control: 'color',\n      if: { arg: 'variant', neq: 'secondary' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing React Storybook Stories in JavaScript\nDESCRIPTION: JavaScript implementation of LoginForm stories for React in Storybook. Includes empty and filled form states with a play function for testing user interactions and form submission validation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within, expect } from 'storybook/test';\n\nimport { LoginForm } from './LoginForm';\n\nexport default {\n  component: LoginForm,\n};\n\nexport const EmptyForm = {};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Styled Components Decorator\nDESCRIPTION: This snippet demonstrates how to set up a decorator in the Storybook preview file to wrap all stories with a Styled Components ThemeProvider. It also shows examples for Vue Fontawesome and Angular theme providers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nexport const decorators = [\n  (Story) => (\n    <ThemeProvider theme={/* Your theme object */}>\n      <Story />\n    </ThemeProvider>\n  ),\n];\n\n// If you're using Vue:\n/*\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\n\nlibrary.add(fas);\nVue.component('fa', FontAwesomeIcon);\n\nexport const decorators = [(story) => ({\n  components: { story },\n  template: '<div class=\"foo-theme\"><story /></div>'\n})]\n*/\n\n// If you're using Angular:\n/*\nimport { moduleMetadata } from '@storybook/angular';\nimport { ThemeModule } from './theme.module';\n\nexport const decorators = [\n  moduleMetadata({\n    imports: [ThemeModule],\n  }),\n];\n*/\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with Storybook and Jest\nDESCRIPTION: This code demonstrates how to test React components using Storybook's composeStories utility with Jest and React Testing Library. It imports story definitions from a Button.stories file, composes them into testable components, and runs tests with both default args and custom props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from '@jest/globals';\nimport { render, screen } from '@testing-library/react';\n// 👉 Using Next.js? Import from @storybook/nextjs instead\nimport { composeStories } from '@storybook/react';\n\n// Import all stories and the component annotations from the stories file\nimport * as stories from './Button.stories';\n\n// Every component that is returned maps 1:1 with the stories,\n// but they already contain all annotations from story, meta, and project levels\nconst { Primary, Secondary } = composeStories(stories);\n\ntest('renders primary button with default args', () => {\n  render(<Primary />);\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', () => {\n  // You can override props and they will get merged with values from the story's args\n  render(<Primary>Hello world</Primary>);\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Stories with Storybook CSF Syntax (JavaScript)\nDESCRIPTION: This Svelte code uses '@storybook/addon-svelte-csf' to define stories for a Button component. It adopts the Svelte-specific CSF DSL with the <Story> component to export Primary, Secondary, and Tertiary examples. Arguments are defined via props on Story elements, and meta is established via the module script block. Dependencies include '@storybook/addon-svelte-csf' and Button.svelte.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n  });\\n</script>\\n\\n<Story\\n  name=\"Primary\"\\n  args={{\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  }}\\n/>\\n\\n<Story\\n  name=\"Secondary\"\\n  args={{\\n    backgroundColor: '#ff0',\\n    label: '😄👍😍💯',\\n  }}\\n/>\\n\\n<Story\\n  name=\"Tertiary\"\\n  args={{\\n    backgroundColor:'#ff0',\\n    label: '📚📕📈🤓',\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript in main.ts\nDESCRIPTION: Example of a typical Storybook main.ts configuration file written in TypeScript as an ESM module. This provides the baseline configuration for Storybook with TypeScript support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<CodeSnippets path=\"main-config-typical.md\" />\n```\n\n----------------------------------------\n\nTITLE: Complex Custom Theme Implementation\nDESCRIPTION: Advanced theme configuration with custom color palettes, typography, and comprehensive branding settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/theming.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@storybook/theming';\n\nexport default create({\n  base: 'light',\n\n  colorPrimary: '#FF4785',\n  colorSecondary: '#1EA7FD',\n\n  // UI\n  appBg: '#F6F9FC',\n  appContentBg: '#FFFFFF',\n  appBorderColor: 'rgba(0,0,0,.1)',\n  appBorderRadius: 4,\n\n  // Typography\n  fontBase: '\"Nunito Sans\", -apple-system, \".SFNSText-Regular\", \"San Francisco\", BlinkMacSystemFont, \"Segoe UI\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n  fontCode: 'monospace',\n\n  // Text colors\n  textColor: '#333333',\n  textInverseColor: '#FFFFFF',\n  textMutedColor: '#666666',\n\n  // Toolbar default and active colors\n  barTextColor: '#999999',\n  barSelectedColor: '#1EA7FD',\n  barBg: '#FFFFFF',\n\n  // Form colors\n  inputBg: '#FFFFFF',\n  inputBorder: 'rgba(0,0,0,.1)',\n  inputTextColor: '#333333',\n  inputBorderRadius: 4,\n\n  brandTitle: 'My custom storybook',\n  brandUrl: 'https://example.com',\n  brandImage: './logo.png',\n  brandTarget: '_self',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in HTML with TypeScript\nDESCRIPTION: Implements Storybook stories for an HTML Button component using TypeScript. Uses a createButton function with typed arguments and configures a primary button story with custom naming.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\nimport { createButton, ButtonArgs } from './Button';\n\nconst meta: Meta<ButtonArgs> = {\n  render: (args) => createButton(args),\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonArgs>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Syntax Highlighting in JavaScript\nDESCRIPTION: This code sets up Storybook preview configuration in JavaScript. It imports and registers SCSS syntax highlighting using react-syntax-highlighter, and defines control matchers for colors and dates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-register-language-globally.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport scss from 'react-syntax-highlighter/dist/esm/languages/prism/scss';\n\n// Registers and enables scss language support\nSyntaxHighlighter.registerLanguage('scss', scss);\n\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Directory in Storybook (TypeScript)\nDESCRIPTION: A TypeScript configuration example for enabling Next.js App Directory support in Storybook's preview file. Imports the Preview type from @storybook/react and properly types the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Preview } from '@storybook/react';\n\nconst preview: Preview = {\n  // ...\n  parameters: {\n    // ...\n    nextjs: {\n      appDirectory: true,\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Vue List Component with TypeScript\nDESCRIPTION: This code configures Storybook stories for a Vue 3 List component using standard TypeScript. It explicitly types the meta object and Story type, and demonstrates two different stories with appropriate Vue templates for empty and populated lists.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n};\nexport default meta;\n\ntype Story = StoryObj<typeof List>;\n\nexport const Empty: Story = {\n  render: () => ({\n    components: { List },\n    template: '<List />',\n  }),\n};\n\nexport const OneItem: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { args }\n    }\n    template: '<List v-bind=\"args\"><ListItem /></List>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Storybook Story with Interaction Tests in JavaScript\nDESCRIPTION: This snippet provides a generic Storybook story definition in JavaScript, suitable for frameworks like React, Vue, etc. It defines a `FilledForm` story for a `RegistrationForm` component. The `play` function uses `userEvent` and `within` to automate form filling and submission, demonstrating interaction testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"RegistrationForm.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { userEvent, within } from 'storybook/test';\n\nimport { RegistrationForm } from './RegistrationForm';\n\nexport default {\n  component: RegistrationForm,\n};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Project Parameters in JavaScript/TypeScript\nDESCRIPTION: Example of specifying parameters at the project (global) level in the Storybook preview configuration file. These parameters apply to all stories in the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  backgrounds: {\n    values: [\n      { name: 'red', value: '#f00' },\n      { name: 'green', value: '#0f0' }\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Documentation for Angular Components\nDESCRIPTION: MDX example showing how to create component documentation that includes metadata, description, story, and ArgsTable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport { AppComponent } from './app.component';\n\n<Meta title='App Component' component={AppComponent} />\n\n# App Component\n\nSome **markdown** description, or whatever you want.\n\n<Story name='basic' height='400px'>{{\n  component: AppComponent,\n  props: {},\n}}</Story>\n\n## ArgsTable\n\n<ArgsTable of={AppComponent} />\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Vite Server in TypeScript for Storybook\nDESCRIPTION: This snippet defines two functions: 'bail' for closing the Vite server, and 'start' for initializing it. The 'start' function uses createViteServer to set up the server with provided options and returns an object with the bail function and total execution time.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-shutdown-server.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createViteServer } from './vite-server';\n\nlet server: ViteDevServer;\nexport async function bail(): Promise<void> {\n  return server?.close();\n}\n\nexport const start: ViteBuilder['start'] = async ({ options, server: devServer }) => {\n  // Remainder implementation goes here\n  server = await createViteServer(options as ExtendedOptions, devServer);\n\n  return {\n    bail,\n    totalTime: process.hrtime(startTime),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Svelte (Standard CSF) with TypeScript (TS 4.9+ satisfies)\nDESCRIPTION: Defines the metadata for Button component stories in a Svelte project using standard CSF in a TypeScript (4.9+) file. It imports the `Meta` type from `@storybook/svelte` and the `Button.svelte` component. It uses the `satisfies` operator for type checking the `meta` object, which specifies the component, `argTypes` (including a color control for `backgroundColor`), and default `args` (`primary: true`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"CSF\"\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with Storybook in HTML (JavaScript)\nDESCRIPTION: This JavaScript code defines Button stories for Storybook using the HTML renderer. It imports a Button factory, sets up a default export object (with an optional 'title' property), and exports three stories with 'args' and a 'render' function to delegate button rendering. This pattern is suitable for vanilla JS projects or web components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createButton } from './Button';\\n\\nexport default {\\n  /* 👇 The title prop is optional.\\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\\n   * to learn how to generate automatic titles\\n   */\\n  title: 'Button',\\n};\\n\\n/*\\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\\n * See https://storybook.js.org/docs/api/csf\\n * to learn how to use render functions.\\n */\\nexport const Primary = {\\n  render: (args) => createButton(args),\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary = {\\n  render: (args) => createButton(args),\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary = {\\n  render: (args) => createButton(args),\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Agnostic Button Story Metadata with `fn` Spy (TypeScript)\nDESCRIPTION: Defines Storybook metadata for a `Button` component in a framework-agnostic manner using standard TypeScript type annotations (`Meta<typeof Button>`). It imports `Meta` from a placeholder `@storybook/your-framework`, `fn` from `storybook/test` for mocking, and the `Button` component. The `args` configuration uses `fn()` to create a spy for the `onClick` handler, logging interactions in the Actions panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\nimport { fn } from 'storybook/test';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked\n  args: { onClick: fn() },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Angular Story Implementation with TypeScript\nDESCRIPTION: Implements a Storybook story for an Angular component that renders an image. Uses TypeScript with proper type definitions for Meta and StoryObj.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nimport imageFile from './static/image.png';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nconst image = {\n  src: imageFile,\n  alt: 'my image',\n};\n\nexport const WithAnImage: Story = {\n  render: () => ({\n    props: {\n      src: image.src,\n      alt: image.alt,\n    },\n    template: `<img src=\"{{src}}\" alt=\"{{alt}}\" />`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Components with Jest in JavaScript\nDESCRIPTION: A complete JavaScript implementation for automated testing of Storybook components using Jest. It discovers story files, composes them for testing, filters stories based on configuration, and creates snapshot tests for each story. The implementation includes error handling, filtering logic, and consistent snapshot generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-snapshot-test.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path';\nimport * as glob from 'glob';\n\nimport { describe, test, expect } from '@jest/globals';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nconst compose = (entry) => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your stories files\n  const storyFiles = glob.sync(\n    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),\n  );\n\n  return storyFiles.map((filePath) => {\n    const storyFile = require(filePath);\n    return { filePath, storyFile };\n  });\n}\n\n// Recreate similar options to Storyshots. Place your configuration below\nconst options = {\n  suite: 'Storybook Tests',\n  storyKindRegex: /^.*?DontTest$/,\n  storyNameRegex: /UNSET/,\n  snapshotsDirName: '__snapshots__',\n  snapshotExtension: '.storyshot',\n};\n\ndescribe(options.suite, () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {\n      // Skip component tests if they are disabled\n      return;\n    }\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile))\n        .map(([name, story]) => ({ name, story }))\n        .filter(({ name, story }) => {\n          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.\n          return !options.storyNameRegex.test(name) && !story.parameters.storyshots?.disable;\n        });\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.\n        const testFn = story.parameters.storyshots?.skip ? test.skip : test;\n\n        testFn(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          expect(document.body.firstChild).toMatchSnapshot();\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in TypeScript React\nDESCRIPTION: Demonstrates basic usage of the Button component, including handling click events and using the asChild prop for custom rendering. This snippet shows two common ways to use the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the onClick event handler\n<Button onClick={}>Hello world!</Button>\n\n  // Using the asChild prop to render a custom child\n  <Button asChild>\n    <a href=\"https://storybook.js.org\">Hello world!</a>\n  </Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Reset in Vue Storybook (TypeScript)\nDESCRIPTION: Vue implementation using TypeScript with Vue3 specific types. Shows highlight reset functionality with type-safe Meta and StoryObj definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-highlight-reset.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ResetHighlight: Story = {\n  decorators: [\n    () => {\n      const emit = useChannel({});\n      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\n      emit(HIGHLIGHT, {\n        elements: ['header', 'section', 'footer'],\n      });\n      return {\n        template: '<story />',\n      };\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Group Story with TypeScript in Storybook\nDESCRIPTION: Creates a story for a button group component that combines primary and secondary button stories. The configuration uses TypeScript with Storybook's Meta and Story types, allowing for composition of existing button stories with specific layout orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// 👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta: Meta = {\n  component: 'demo-button-group',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controls Block in MDX\nDESCRIPTION: Basic example showing how to import and use the Controls block with a Button component's stories in an MDX documentation file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Canvas, Controls } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories'\n\n<Meta of={ButtonStories} />\n\n<Canvas of={ButtonStories.Primary} />\n\n<Controls of={ButtonStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for SolidJS with Storybook (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates SolidJS Button stories using 'storybook-solidjs'. It sets up type-annotated meta information and Story type, then exports stories mirroring the Primary/Secondary/Tertiary pattern. Story objects are statically typed for safety and maintainability.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\\n\\nimport { Button } from './Button';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<typeof Button>;\\n\\nexport const Primary: Story = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in React with JavaScript\nDESCRIPTION: Implements React Button component stories using JavaScript. Defines accessible and inaccessible variants with background color control options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n};\n\n// This is an accessible story\nexport const Accessible = {\n  args: {\n    primary: false,\n    label: 'Button',\n  },\n};\n\n// This is not\nexport const Inaccessible = {\n  args: {\n    ...Accessible.args,\n    backgroundColor: 'red',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Story Block with Autoplay Prop\nDESCRIPTION: Shows how to use the Story block with the autoplay property enabled to automatically run the story's play function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Story of={ButtonStories.Basic} autoplay />\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in React with JavaScript\nDESCRIPTION: A React Button component implementation using JavaScript with PropTypes for type checking. The component accepts props for primary state, background color, size, label, and click handler, with JSDoc comments describing each property's purpose.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button = ({ primary, backgroundColor, size, label, ...props }) => {\n  // the component implementation\n};\n\nButton.propTypes = {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary: PropTypes.bool,\n  /**\n   * What background color to use\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in React with TypeScript\nDESCRIPTION: React button component using TypeScript with a defined interface for props. Includes default values for props and strongly typed component definition using React.FC generic type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ButtonProps {\n  /**\n   * Checks if the button should be disabled\n   */\n  isDisabled: boolean;\n  /**\n  The display content of the button\n  */\n  content: string;\n}\n\nexport const Button: React.FC<ButtonProps> = ({ isDisabled = false, content = '' }) => {\n  return (\n    <button type=\"button\" disabled={isDisabled}>\n      {content}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationBasedComponent Story in TypeScript with 'satisfies' Keyword\nDESCRIPTION: This snippet defines a story configuration for NavigationBasedComponent using TypeScript and the 'satisfies' keyword for type checking. It imports Meta and StoryObj types from Storybook React and sets up Next.js parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-override-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n      navigation: {\n        segments: ['dashboard', 'analytics'],\n      },\n    },\n  },\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Story Decorator with Context Usage\nDESCRIPTION: Example showing how to create a parameterized decorator that applies different layouts based on story parameters\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/decorators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const decorators = [\n  (Story, context) => {\n    switch (context.parameters.pageLayout) {\n      case 'page': {\n        return (\n          <div className=\"page\">\n            <div className=\"content\">\n              <Story />\n            </div>\n          </div>\n        );\n      }\n      case 'page-mobile': {\n        return (\n          <div className=\"page-mobile\">\n            <div className=\"content\">\n              <Story />\n            </div>\n          </div>\n        );\n      }\n      default: {\n        return <Story />;\n      }\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vite Builder\nDESCRIPTION: Command to install the Storybook Vite builder using npm or yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/builder-vite --save-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @storybook/builder-vite --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration example for Storybook's main.js file. This defines the framework to use, specifies file patterns for stories including MDX documentation, and adds the essentials addon package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-main-mdx-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: [\n    //👇 Your documentation written in MDX along with your stories goes here\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n  ],\n  addons: ['@storybook/addon-essentials'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook with Control Removal in TypeScript\nDESCRIPTION: Shows TypeScript Storybook meta definition for a web component, using the Meta type from '@storybook/web-components'. The meta object specifies a string tag for the component and disables the 'foo' property in controls. Suitable for projects using custom elements and Storybook with TypeScript, and requires @storybook/web-components as a dependency.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'your-component',\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Story Sorting in TypeScript\nDESCRIPTION: This snippet imports the Preview type from Storybook's framework-specific package and creates a preview configuration object. It sets up the same custom story sorting order as the JavaScript version, but with type safety provided by TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    options: {\n      storySort: {\n        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components'],\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Testing React Button Component with Vitest and Storybook\nDESCRIPTION: A Vitest test for a React Button component using Storybook's composeStories utility. It sets up the jsdom environment, imports the Primary story variant, runs it, and creates a snapshot test of the rendered output.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @vitest-environment jsdom\n\nimport { expect, test } from 'vitest';\n\nimport { composeStories } from '@storybook/react';\n\nimport * as stories from '../stories/Button.stories';\n\nconst { Primary } = composeStories(stories);\ntest('Button snapshot', async () => {\n  await Primary.run();\n  expect(document.body.firstChild).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Storybook Preview Configuration (TypeScript)\nDESCRIPTION: TypeScript version of Vue Storybook preview configuration using Vue3 types. Provides type-safe decorator implementation with template-based layout wrapping functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/vue3';\n\nconst preview: Preview = {\n  decorators: [\n    (_, { parameters }) => {\n      const { pageLayout } = parameters;\n      switch (pageLayout) {\n        case 'page':\n          return { template: '<div class=\"page-layout\"><story/></div>' };\n        case 'page-mobile':\n          return { template: '<div class=\"page-mobile-layout\"><story/></div>' };\n        default:\n          return { template: '<story/>' };\n      }\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Storybook Stories with TypeScript 4.9+ Satisfies Operator\nDESCRIPTION: TypeScript 4.9+ implementation of LoginForm stories for React using the 'satisfies' operator. Provides type-safe stories with a play function that tests form interaction and validation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { userEvent, within, expect } from 'storybook/test';\n\nimport { LoginForm } from './LoginForm';\n\nconst meta = {\n  component: LoginForm,\n} satisfies Meta<typeof LoginForm>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const EmptyForm: Story = {};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte with TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a Svelte Button component using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\nimport { action } from 'storybook/actions';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      label: 'Hello',\n    },\n    on: {\n      click: action('clicked'),\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Svelte Gizmo Component with TypeScript\nDESCRIPTION: This TypeScript code defines Storybook controls for a Svelte Gizmo component using the Component Story Format (CSF). It uses TypeScript's type system to ensure type safety with the Meta type, defining various control types with specific configuration parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Gizmo from './Gizmo.svelte';\n\nconst meta: Meta<typeof Gizmo> = {\n  component: Gizmo,\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Framework-Agnostic TypeScript Story Configuration with Type Annotation\nDESCRIPTION: TypeScript story configuration using explicit type annotations. Shows standard pattern for typing Storybook stories in any framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Simple: Story = {\n  name: 'So simple!',\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript with Type Satisfaction\nDESCRIPTION: TypeScript implementation of Storybook preview configuration using the 'satisfies' operator with TypeScript 4.9. It imports the Preview type from the appropriate renderer and sets up global argTypes for all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Preview } from '@storybook/your-renderer';\n\nconst preview = {\n  argTypes: {\n    // 👇 All stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n} satisfies Preview;\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in React with TypeScript 4.9+\nDESCRIPTION: Creates a ButtonGroup story in React using TypeScript 4.9+. Uses the 'satisfies' operator for type checking. Imports Button stories and composes them into a ButtonGroup with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { ButtonGroup } from '../ButtonGroup';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta = {\n  component: ButtonGroup,\n} satisfies Meta<typeof ButtonGroup>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Storybook Preview with TypeScript 4.9 and Styled Components\nDESCRIPTION: Sets up Storybook preview for React applications using TypeScript 4.9 and styled-components. The strongly-typed decorator applies the selected theme from globals context to all stories via ThemeProvider.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/react';\n\nimport { ThemeProvider } from 'styled-components';\n\nimport { MyThemes } from '../my-theme-folder/my-theme-file';\n\nconst preview: Preview = {\n  decorators: [\n    (Story, context) => {\n      const theme = MyThemes[context.globals.theme];\n      return (\n        <ThemeProvider theme={theme}>\n          <Story />\n        </ThemeProvider>\n      );\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte-Vite Framework in Storybook\nDESCRIPTION: Example of configuring the Svelte-Vite framework options in Storybook's main configuration file, showing how to set custom builder options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/svelte-vite',\n    options: {\n      builder: {\n        // Vite builder options\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Svelte Storybook Story with Interaction Tests (CSF, TS)\nDESCRIPTION: This snippet illustrates defining a Storybook story for a Svelte `RegistrationForm` component using standard CSF with TypeScript (specifically targeting TS 4.9). It defines meta information and the `FilledForm` story, which includes a `play` function to automate filling the form and clicking the submit button using `@storybook/test`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"RegistrationForm.stories.ts\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"CSF\"\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport RegistrationForm from './RegistrationForm.svelte';\n\nconst meta = {\n  component: RegistrationForm,\n} satisfies Meta<typeof RegistrationForm>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Story Parameters in JavaScript/TypeScript\nDESCRIPTION: Example of specifying parameters at the story level in a Storybook story file. These parameters apply only to the specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MyStory = {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object with type annotations, and exports it as the default configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-cross-origin-isolated.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    crossOriginIsolated: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing React Storybook Component with Vitest\nDESCRIPTION: This snippet demonstrates how to test a React Storybook component using Vitest. It imports the necessary dependencies, composes the stories, and runs a test that executes the Primary story's play function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-with-play-function.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test } from 'vitest';\nimport { composeStories } from '@storybook/react';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('renders and executes the play function', async () => {\n  // Mount story and run interactions\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for React (JavaScript)\nDESCRIPTION: This snippet provides a JavaScript example for creating a Storybook story with accessibility customization for a React component. Dependencies include a proper React component import and Storybook configuration support. 'ExampleStory' demonstrates setting up a11y parameters, customizing rules, disabling certain checks, and using the 'manual' flag for running accessibility tests on demand. The structure enables story-level flexibility and easy integration into React-based Storybook projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ExampleStory = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Document Screen with Apollo Client (TypeScript)\nDESCRIPTION: TypeScript version of React component using @apollo/client with strongly typed interfaces for the GraphQL query response data.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery, gql } from '@apollo/client';\n\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nconst AllInfoQuery = gql`\n  query AllInfo {\n    user {\n      userID\n      name\n    }\n    document {\n      id\n      userID\n      title\n      brief\n      status\n    }\n    subdocuments {\n      id\n      userID\n      title\n      content\n      status\n    }\n  }\n`;\n\ninterface Data {\n  allInfo: {\n    user: {\n      userID: number;\n      name: string;\n      opening_crawl: boolean;\n    };\n    document: {\n      id: number;\n      userID: number;\n      title: string;\n      brief: string;\n      status: string;\n    };\n    subdocuments: {\n      id: number;\n      userID: number;\n      title: string;\n      content: string;\n      status: string;\n    };\n  };\n}\n\nfunction useFetchInfo() {\n  const { loading, error, data } = useQuery<Data>(AllInfoQuery);\n\n  return { loading, error, data };\n}\n\nexport function DocumentScreen() {\n  const { loading, error, data } = useFetchInfo();\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>There was an error fetching the data!</p>;\n  }\n\n  return (\n    <PageLayout user={data.user}>\n      <DocumentHeader document={data.document} />\n      <DocumentList documents={data.subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next.js useParams Hook with Custom Segments in Storybook\nDESCRIPTION: This example demonstrates how to use the Next.js useParams hook in Storybook with custom segments. It shows how to configure the segments to return specific param values in the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// ParamsBasedComponent.js\nimport { useSelectedLayoutSegment, useSelectedLayoutSegments, useParams } from 'next/navigation';\n\nexport default function ParamsBasedComponent() {\n  const segment = useSelectedLayoutSegment(); // hello\n  const segments = useSelectedLayoutSegments(); // [\"hello\", \"nextjs\"]\n  const params = useParams(); // { slug: \"hello\", framework: \"nextjs\" }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Stories with TypeScript\nDESCRIPTION: This snippet shows how to set up story metadata for a Web Component in Storybook using TypeScript. It imports necessary types, defines the component's title, and sets tags for documentation and development visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Story with JavaScript\nDESCRIPTION: Shows the basic setup for a Storybook story using JavaScript. Demonstrates the simplified version without type definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n  title: 'components/MyComponent/MyComponent',\n};\n\nexport const Default = {\n  args: {\n    something: 'Something else',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in TypeScript for React\nDESCRIPTION: Creates a Storybook story for a React Button component using TypeScript with explicit type annotations. Defines three story variations using the render function to display buttons with different labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"Button\" />,\n};\n\nexport const Secondary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />,\n};\n\nexport const Tertiary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Story for Angular in TypeScript\nDESCRIPTION: This snippet sets up a Storybook story for an Angular Button component with type-checking for arguments. The dependencies include '@storybook/angular' and the Button component from './button.component'. The 'Primary' story is defined with an argument 'primary' set to true to ensure correct component properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\n//👇 Throws a type error if the args don't match the component props\nexport const Primary: Story = {\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath Imports in package.json\nDESCRIPTION: Configuration for subpath imports in package.json to support module mocking with different conditions for storybook, test, and default environments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"#lib/session\": {\n      \"storybook\": \"./lib/session.mock.ts\",\n      \"test\": \"./lib/session.mock.ts\",\n      \"default\": \"./lib/session.ts\"\n    },\n    \"#*\": {\n      \"storybook\": \"./*\",\n      \"test\": \"./*\",\n      \"default\": \"./*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Main Configuration with Vite Builder\nDESCRIPTION: Exports default Storybook configuration that specifies story file patterns, sets Vite as the builder, and provides environment-specific configurations through viteFinal hook. Allows separate configurations for development and production environments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-vite-final-env.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n  async viteFinal(config, { configType }) {\n    const { mergeConfig } = await import('vite');\n\n    if (configType === 'DEVELOPMENT') {\n      // Your development configuration goes here\n    }\n    if (configType === 'PRODUCTION') {\n      // Your production configuration goes here.\n    }\n    return mergeConfig(config, {\n      // Your environment configuration here\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in React with TypeScript\nDESCRIPTION: This snippet demonstrates creating Storybook stories for a Button component in React using standard TypeScript syntax. It properly types the meta object and story with Meta and StoryObj interfaces.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button primary label=\"Button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Stories with Storybook CSF Syntax (TypeScript 4.9+)\nDESCRIPTION: This Svelte code, using TypeScript 4.9+ features, sets up story definitions for a Button in Storybook using the Svelte CSF DSL via <Story>. It leverages '@storybook/addon-svelte-csf' and an imported Svelte Button, using defineMeta with type annotations. Story arguments are previewed as prop objects for each variant.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_11\n\nLANGUAGE: ts-4-9\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n  });\\n</script>\\n\\n<Story\\n  name=\"Primary\"\\n  args={{\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  }}\\n/>\\n\\n<Story\\n  name=\"Secondary\"\\n  args={{\\n    backgroundColor: '#ff0',\\n    label: '😄👍😍💯',\\n  }}\\n/>\\n\\n<Story\\n  name=\"Tertiary\"\\n  args={{\\n    backgroundColor:'#ff0',\\n    label: '📚📕📈🤓',\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Play Function for Web Components in TypeScript\nDESCRIPTION: This snippet shows how to create a Storybook play function for Web Components using TypeScript. It demonstrates type definitions and simulates user interactions with a custom element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  title: 'MyComponent',\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted: Story = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter email and password', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration File with TypeScript\nDESCRIPTION: Sets up the main Storybook configuration including story file patterns, framework specification, and TypeScript documentation generation settings using react-docgen-typescript. The configuration defines which files should be treated as stories and how TypeScript types should be processed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-react-docgen-typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    reactDocgen: 'react-docgen-typescript',\n    // Provide your own options if necessary.\n    // See https://storybook.js.org/docs/configure/typescript for more information.\n    reactDocgenTypescriptOptions: {},\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright Component Tests with React Storybook\nDESCRIPTION: This code demonstrates how to use Playwright for component testing with React Storybook. It imports stories from a portable stories file, creates a test instance, and shows how to mount components with default and custom props while making assertions on the rendered output.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTest } from '@storybook/react/experimental-playwright';\nimport { test as base } from '@playwright/experimental-ct-react';\n\n// See explanation below for `.portable` stories file\nimport stories from './Button.stories.portable';\n\nconst test = createTest(base);\n\ntest('renders primary button', async ({ mount }) => {\n  // The mount function will execute all the necessary steps in the story,\n  // such as loaders, render, and play function\n  await mount(<stories.Primary />);\n});\n\ntest('renders primary button with overridden props', async ({ mount }) => {\n  // You can pass custom props to your component via JSX\n  const component = await mount(<stories.Primary label=\"label from test\" />);\n  await expect(component).toContainText('label from test');\n  await expect(component.getByRole('button')).toHaveClass(/storybook-button--primary/);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Svelte Storybook Story with Interaction Tests (Svelte CSF, TS - Incomplete)\nDESCRIPTION: This snippet shows an incomplete Storybook story definition for a Svelte `RegistrationForm` using Svelte CSF format and TypeScript. It sets up the component and imports necessary utilities like `userEvent` and `within`. The `play` function simulates typing into email and password fields but is missing the final button click action and closing tags.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"RegistrationForm.stories.svelte\" renderer=\"svelte\" language=\"ts\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import RegistrationForm from './RegistrationForm.svelte';\n\n  const { Story } = defineMeta({\n    component: RegistrationForm,\n  });\n</script>\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"FilledForm\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for DocumentScreen with TypeScript (pre-4.9)\nDESCRIPTION: This snippet shows how to create a Storybook story for the DocumentScreen component using TypeScript versions before 4.9. It defines metadata using explicit type annotations and creates a 'Simple' story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { DocumentScreen } from './YourPage';\n\n// 👇 Imports the required stories\nimport * as PageLayout from './PageLayout.stories';\nimport * as DocumentHeader from './DocumentHeader.stories';\nimport * as DocumentList from './DocumentList.stories';\n\nconst meta: Meta<typeof DocumentScreen> = {\n  component: DocumentScreen,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof DocumentScreen>;\n\nexport const Simple: Story = {\n  args: {\n    user: PageLayout.Simple.args.user,\n    document: DocumentHeader.Simple.args.document,\n    subdocuments: DocumentList.Simple.args.documents,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Theme Provider in TypeScript\nDESCRIPTION: TypeScript version of the preview configuration that implements theme switching using styled-components ThemeProvider. Includes proper type definitions using the Preview type from @storybook/react.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-provider-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nimport type { Preview } from '@storybook/react';\nimport { ThemeProvider } from 'styled-components';\n\n// themes = { light, dark }\nimport * as themes from '../src/themes';\n\nconst preview: Preview = {\n  decorators: [\n    // 👇 Defining the decorator in the preview file applies it to all stories\n    (Story, { parameters }) => {\n      // 👇 Make it configurable by reading the theme value from parameters\n      const { theme = 'light' } = parameters;\n      return (\n        <ThemeProvider theme={themes[theme]}>\n          <Story />\n        </ThemeProvider>\n      );\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook List Stories using Vue and JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to define Storybook stories for a List component using Vue. The file sets up a meta configuration for the List component and uses a ListTemplate to define Empty and OneItem stories. Dependencies include Storybook for Vue and the List and ListItem components. The snippet demonstrates binding args using Vue's template syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nexport const ListTemplate: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { ...args };\n    },\n    template: `\n      <List v-bind=\"args\">\n        <div v-for=\"item in items\" :key=\"item.title\">\n          <ListItem :item=\"item\"/>\n        </div>\n      </List>\n    `,\n  }),\n};\n\nexport const Empty: Story = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\nexport const OneItem: Story = {\n  ...ListTemplate,\n  args: {\n    items: [\n      {\n        ...Unchecked.args,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Preview with importFn and getProjectAnnotations\nDESCRIPTION: This snippet outlines the initialization process for the Storybook Preview. It defines two key functions: importFn for asynchronous imports, and getProjectAnnotations for combining preview.js and addon config files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n- `importFn` - is an async `import()` function\n\n- `getProjectAnnotations` - is a simple function that evaluations `preview.js` and addon config files and combines them. If it errors, the Preview will show the error.\n```\n\n----------------------------------------\n\nTITLE: Defining a Storybook Story for Web Components in TypeScript\nDESCRIPTION: This snippet creates a Storybook story for a custom element 'demo-button' using web-components. It imports from '@storybook/web-components'. The 'Primary' story is defined with a 'primary' argument, showcasing integration with web-components and maintaining type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n//👇 Throws a type error if the args don't match the component props\nexport const Primary: Story = {\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Documentation Template in Storybook Preview\nDESCRIPTION: This code sets up a global configuration for Storybook that applies a custom MDX documentation template to all stories. It imports the DocumentationTemplate.mdx file and assigns it to the docs.page parameter, making it the default documentation layout for all components in the Storybook instance.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-mdx-template.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocumentationTemplate from './DocumentationTemplate.mdx';\n\nexport default {\n  parameters: {\n    docs: {\n      page: DocumentationTemplate,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SolidJS Storybook Button Stories (JavaScript)\nDESCRIPTION: Defines stories for the SolidJS Button component in JavaScript using Storybook. The Button is imported, and the default export specifies it as the component. The Primary story simply provides default arguments for Storybook controls, allowing easy testing of Button variations. Depends on SolidJS, Button component, and Storybook for Solid.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking GraphQL Queries in Storybook Stories with msw\nDESCRIPTION: This TypeScript snippet shows how to mock GraphQL queries in Storybook using msw (Mock Service Worker). It defines Storybook stories for success and error states and utilizes the graphql.query method to mock API responses based on provided handlers. Dependencies include msw and HttpResponse for mocking responses.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport { graphql, HttpResponse, delay } from 'msw';\n\nimport WrapperComponent from './ApolloWrapperClient.vue';\nimport DocumentScreen from './YourPage.vue';\n\nconst meta: Meta<typeof DocumentScreen> = {\n  component: DocumentScreen,\n  render: () => ({\n    components: { DocumentScreen, WrapperComponent },\n    template: '<WrapperComponent><DocumentScreen /></WrapperComponent>',\n  }),\n};\n\n//👇The mocked data that will be used in the story\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof DocumentScreen>;\n\nexport const MockedSuccess: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', () => {\n          return HttpResponse.json({\n            data: {\n              allInfo: {\n                ...TestData,\n              },\n            },\n          });\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', async () => {\n          await delay(800);\n          return HttpResponse.json({\n            errors: [\n              {\n                message: 'Access denied',\n              },\n            ],\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Document Screen Component (TypeScript)\nDESCRIPTION: TypeScript version of the Svelte Document Screen component with type annotations for props and status. Implements data fetching and conditional rendering logic.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { onMount } from 'svelte';\n\n  import PageLayout from './PageLayout.svelte';\n  import DocumentHeader from './DocumentHeader.svelte';\n  import DocumentList from './DocumentList.svelte';\n\n  export let user: Record<string, unknown> = {};\n  export let document: Record<string, unknown> = {};\n  export let subdocuments: Record<string, unknown>[] = [];\n  export let status: 'error' | 'loading' | 'success' = 'loading';\n\n  onMount(async () => {\n    await fetch('https://your-restful-endpoint')\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res;\n      })\n      .then((res) => res.json())\n      .then((data) => {\n        user = data.user;\n        status = 'success';\n        document = data.document;\n        subdocuments = data.subdocuments;\n      })\n      .catch(() => {\n        status = 'error';\n      });\n  });\n</script>\n\n{#if status === \"error\"}\n<p>There was an error fetching the data!</p>\n{:else if status === \"loading\"}\n<p>Loading...</p>\n{:else}\n<PageLayout {user}>\n  <DocumentHeader {document} />\n  <DocumentList documents=\"{subdocuments}\" />\n</PageLayout>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Snapshot Tests with Jest in TypeScript/JavaScript\nDESCRIPTION: This snippet defines a test suite that processes all story files, runs each story, and generates snapshot tests. It includes a 1ms delay to ensure consistent rendering before taking snapshots. The snapshots are saved in a specified directory structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-multi-snapshot-test.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ...Code omitted for brevity\n\ndescribe(options.suite, () => {\n  // 👇 Add storyDir in the arguments list\n  getAllStoryFiles().forEach(({ filePath, storyFile, storyDir }) => {\n    // ...Previously existing code\n    describe(title, () => {\n      // ...Previously existing code\n      stories.forEach(({ name, story }) => {\n        // ...Previously existing code\n        testFn(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n\n          // 👇 Define the path to save the snapshot to:\n          const snapshotPath = path.join(\n            storyDir,\n            options.snapshotsDirName,\n            `${componentName}${options.snapshotExtension}`\n          );\n          await expect(document.body.firstChild).toMatchFileSnapshot(snapshotPath);\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story Meta Using defineMeta - Storybook (Svelte, TypeScript, type-satisfies)\nDESCRIPTION: This Svelte and TypeScript snippet uses defineMeta from '@storybook/addon-svelte-csf' for Storybook CSF story registration, leveraging TypeScript 4.9+ features. It statically imports Button.svelte and sets up the story configuration using the extracted Story object for advanced story definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n  });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Storybook Stories with Play Function\nDESCRIPTION: Configuration for LoginForm stories in Angular using Storybook. Includes an empty form story and a filled form story with a play function that simulates user input, form submission, and validates the success message.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within, expect } from 'storybook/test';\n\nimport { LoginForm } from './LoginForm.component';\n\nconst meta: Meta<LoginForm> = {\n  component: LoginForm,\n};\n\nexport default meta;\ntype Story = StoryObj<LoginForm>;\n\nexport const EmptyForm: Story = {};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Angular\nDESCRIPTION: Angular implementation of Button stories with background configuration using TypeScript. Demonstrates setting default gray background for all stories and overriding with dark background for specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  globals: {\n    // 👇 Set background value for all component stories\n    backgrounds: { value: 'gray', grid: false },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const OnDark: Story = {\n  globals: {\n    // 👇 Override background value for this story\n    backgrounds: { value: 'dark' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Solid in TypeScript (4.9+)\nDESCRIPTION: This snippet demonstrates how to create stories for a Solid Button component using TypeScript 4.9+. It configures the component metadata with type inference, sets parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'this data is passed to the addon',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => <Button>Hello</Button>,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in Svelte CSF with TypeScript\nDESCRIPTION: Example of configuring accessibility parameters for a Svelte component using Component Story Format (CSF) in TypeScript. Demonstrates how to set accessibility rules, specify selectors, disable specific checks, and control manual testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport MyComponent from './MyComponent.svelte';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Solid in TypeScript\nDESCRIPTION: This snippet demonstrates creating stories for the Page component in Solid using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a LoggedIn story that reuses args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Page } from './Page';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Page>;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in SolidJS with TypeScript 4.9+ (Satisfies Operator)\nDESCRIPTION: Creates Storybook stories for a SolidJS Button component using TypeScript 4.9+ with the satisfies operator. Configures metadata and a primary button story with custom naming and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Standard CSF Svelte Storybook Stories with JavaScript\nDESCRIPTION: Shows how to add decorators to Svelte components using the standard Component Story Format (CSF). This example applies a MarginDecorator component as a decorator to the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\nimport MarginDecorator from './MarginDecorator.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  decorators: [() => MarginDecorator],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright Component Testing with Storybook for Vue\nDESCRIPTION: Configures Playwright's component testing for Vue integration with Storybook. Imports necessary annotations from Storybook preview and addons, then sets up the project annotations and beforeAll hook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-compose-stories.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-vue';\nimport { setProjectAnnotations } from '@storybook/vue3';\n// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this\nimport * as addonAnnotations from 'my-addon/preview';\nimport * as previewAnnotations from './.storybook/preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n\n// Supports beforeAll hook from Storybook\ntest.beforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Component Button in TypeScript using Lit\nDESCRIPTION: Custom button web component using Lit library in TypeScript with decorators. Uses property decorators for reactive properties and customElement decorator for component registration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n/**\n * @prop {string} content - The display label of the button\n * @prop {boolean} isDisabled - Checks if the button should be disabled\n * @summary This is a custom button element\n * @tag custom-button\n */\n\n@customElement('custom-button')\nexport class CustomButton extends LitElement {\n  @property()\n  content?: string = 'One';\n  @property()\n  isDisabled?: boolean = false;\n\n  render() {\n    return html` <button type=\"button\" ?disabled=${this.isDisabled}>${this.content}</button> `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for React Button Component (TypeScript 4.9+)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a React Button component in Storybook using TypeScript 4.9+. It uses the 'satisfies' keyword for type checking and defines a decorator that wraps the story in a div with margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs for Angular Button Component\nDESCRIPTION: TypeScript implementation for configuring auto-generated documentation for an Angular button component in Storybook. Shows how to enable autodocs globally and exclude specific stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './Button';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  //👇 Enables auto-generated documentation for this component and includes all stories in this file\n  tags: ['autodocs'],\n};\nexport default meta;\n\ntype Story = StoryObj<Button>;\n\nexport const UndocumentedStory: Story = {\n  // 👇 Removes this story from auto-generated documentation\n  tags: ['!autodocs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Ember\nDESCRIPTION: This code snippet sets up the Storybook preview configuration for an Ember project. It imports JSON documentation, sets it using the setJSONDoc function, and exports default parameters for controls, including matchers for colors and dates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setJSONDoc } from '@storybook/addon-docs/ember';\n\nimport docJson from '../dist/storybook-docgen/index.json';\nsetJSONDoc(docJson);\n\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Form Validation in Vue with Storybook Stories (JavaScript)\nDESCRIPTION: Implements form validation testing using @testing-library/vue and @storybook/vue3's composeStories. Tests form validation by running the InvalidForm story and verifying the invalid form state after button click.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fireEvent, render, screen } from '@testing-library/vue';\n\nimport { composeStories } from '@storybook/vue3';\n\nimport * as stories from './LoginForm.stories'; // 👈 Our stories imported here.\n\nconst { InvalidForm } = composeStories(stories);\n\ntest('Checks if the form is valid', async () => {\n  // Renders the composed story\n  await InvalidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes with TypeScript\nDESCRIPTION: Standard TypeScript implementation for theme switching in Storybook using data attributes. Provides type safety through Preview and Renderer types while configuring light and dark themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-data-attribute-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the framework you are using (e.g., react, vue3)\nimport { Preview, Renderer } from '@storybook/your-renderer';\nimport { withThemeByDataAttribute } from '@storybook/addon-themes';\n\nimport '../src/index.css'; // Your application's global CSS file\n\nconst preview: Preview = {\n  decorators: [\n    withThemeByDataAttribute<Renderer>({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n      attributeName: 'data-theme',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Directory Support in TypeScript 4.9+ Storybook\nDESCRIPTION: This TypeScript code example shows how to configure a Storybook story for Next.js app directory compatibility using TypeScript 4.9+ 'satisfies' operator. It imports Meta and StoryObj types from @storybook/react and uses the satisfies operator for type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true, // 👈 Set this\n    },\n  },\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Using Storybook's Channel for Communication\nDESCRIPTION: Shows how to use the addons.getChannel() method to communicate between the manager and preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from '@storybook/manager-api';\n\nconst channel = addons.getChannel();\nchannel.emit('my-event', { data: 'some data' });\nchannel.on('my-event', (data) => {\n  // Handle the event\n});\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Navigation Hooks in Storybook\nDESCRIPTION: This example shows how to use Next.js navigation hooks like useSelectedLayoutSegment, useSelectedLayoutSegments, and useParams in a Storybook component. It demonstrates the values returned by these hooks based on the configured segments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// NavigationBasedComponent.js\nimport { useSelectedLayoutSegment, useSelectedLayoutSegments, useParams } from 'next/navigation';\n\nexport default function NavigationBasedComponent() {\n  const segment = useSelectedLayoutSegment(); // dashboard\n  const segments = useSelectedLayoutSegments(); // [\"dashboard\", \"analytics\"]\n  const params = useParams(); // {}\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook in New Projects\nDESCRIPTION: Command to add Storybook 8.0 to a new project. Automatically detects project configuration and sets up appropriate renderer, builder, and meta-framework settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest init\n```\n\n----------------------------------------\n\nTITLE: Initializing Library in Storybook Preview\nDESCRIPTION: Example of initializing a library in Storybook's preview file before components render. Shows how to set up a Preview configuration with a library initialization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-rendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-renderer';\n\nimport { initialize } from '../lib/your-library';\n\ninitialize();\n\nconst preview: Preview = {\n  // ...\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Angular Renderer in TypeScript\nDESCRIPTION: Sets up Storybook story configuration for an Angular Button component. Defines metadata including the component reference and argTypes with a label control that has a custom description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  argTypes: {\n    // 👇 All Button stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Testing React Button Component with Storybook and Jest\nDESCRIPTION: This code snippet demonstrates how to test a React Button component using Storybook, Jest, and React Testing Library. It composes a story, simulates a click event, and verifies that the onClick handler is called.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-story.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { jest, test, expect } from '@jest/globals';\nimport { render, screen } from '@testing-library/react';\n// 👉 Using Next.js? Import from @storybook/nextjs instead\nimport { composeStory } from '@storybook/react';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\ntest('onclick handler is called', () => {\n  // Returns a story which already contains all annotations from story, meta and global levels\n  const Primary = composeStory(PrimaryStory, meta);\n\n  const onClickSpy = jest.fn();\n  await Primary.run({ args: { ...Primary.args, onClick: onClickSpy } });\n\n  const buttonElement = screen.getByRole('button');\n  buttonElement.click();\n  expect(onClickSpy).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Svelte using CSF in TypeScript\nDESCRIPTION: This snippet shows how to create stories for a Svelte Button component using Component Story Format (CSF) in TypeScript. It sets up the component metadata with explicit typing, defines parameters, and exports a basic story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'this data is passed to the addon',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in SolidJS with TypeScript 4.9+\nDESCRIPTION: Shows how to create a List component story in SolidJS using TypeScript 4.9 with the satisfies operator for improved type inference. Uses storybook-solidjs for SolidJS-specific Storybook bindings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ManyItems: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem {...Selected.args} />\n      <ListItem {...Unselected.args} />\n      <ListItem {...Unselected.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Next.js revalidatePath in Storybook JavaScript\nDESCRIPTION: Demonstrates how to create a Storybook story in JavaScript that mocks the Next.js revalidatePath function and tests its usage within a form submission scenario. Uses the play function for interaction testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-cache-mock.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, userEvent, within } from 'storybook/test';\nimport { revalidatePath } from '@storybook/nextjs/cache.mock';\n\nimport MyForm from './my-form';\n\nexport default {\n  component: MyForm,\n};\n\nexport const Submitted = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n\n    const submitButton = canvas.getByRole('button', { name: /submit/i });\n    await userEvent.click(saveButton);\n    // 👇 Use any mock assertions on the function\n    await expect(revalidatePath).toHaveBeenCalledWith('/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Storybook story for a Svelte Page component using TypeScript. It imports the necessary types and component, and configures the story with type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Page from './Page.svelte';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Preact with Vite in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook for Preact using Vite as the bundler in TypeScript. It imports the StorybookConfig type, defines a configuration object, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-framework-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/preact-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/preact-vite',\n    options: {\n      // ...\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in React with TypeScript 4.9\nDESCRIPTION: Implementation of Storybook stories for a List component in React using TypeScript 4.9 with the satisfies operator. It shows how to create properly typed stories with component composition and story templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * Seehttps://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate: Story = {\n  render: ({ items, ...args }) => {\n    return (\n      <List>\n        {items.map((item) => (\n          <ListItem {...item} />\n        ))}\n      </List>\n    );\n  },\n};\n\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [{ ...Unchecked.args }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing React Button Component with Storybook\nDESCRIPTION: This code demonstrates how to test a React Button component using Storybook's composeStories utility. It imports stories from a Button.stories file, creates testable components, and runs tests to verify rendering with both default and custom props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from 'vitest';\nimport { screen } from '@testing-library/react';\n// 👉 Using Next.js? Import from @storybook/nextjs instead\nimport { composeStories } from '@storybook/react';\n\n// Import all stories and the component annotations from the stories file\nimport * as stories from './Button.stories';\n\n// Every component that is returned maps 1:1 with the stories,\n// but they already contain all annotations from story, meta, and project levels\nconst { Primary, Secondary } = composeStories(stories);\n\ntest('renders primary button with default args', async () => {\n  await Primary.run();\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  // You can override props by passing them in the context argument of the run function\n  await Primary.run({ args: { ...Primary.args, children: 'Hello world' } });\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for React in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a React Button component using standard TypeScript syntax. It defines metadata with explicit typing and exports a story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Stories for MyForm in TypeScript 4.9+\nDESCRIPTION: This snippet creates Storybook stories for the MyForm component using TypeScript 4.9+. It uses the 'satisfies' keyword for type checking and includes tests for unauthenticated scenarios and navigation actions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-mock.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { redirect, getRouter } from '@storybook/nextjs/navigation.mock';\n\nimport MyForm from './my-form';\n\nconst meta = {\n  component: MyForm,\n  parameters: {\n    nextjs: {\n      // 👇 As in the Next.js application, next/navigation only works using App Router\n      appDirectory: true,\n    },\n  },\n} satisfies Meta<typeof MyForm>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Unauthenticated: Story = {\n  async play() {\n    // 👇 Assert that your component called redirect()\n    await expect(redirect).toHaveBeenCalledWith('/login', 'replace');\n  },\n};\n\nexport const GoBack: Story = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n    const backBtn = await canvas.findByText('Go back');\n\n    await userEvent.click(backBtn);\n    // 👇 Assert that your component called back()\n    await expect(getRouter().back).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Build Script\nDESCRIPTION: Configuration for package.json to add a script that builds Storybook documentation for production using the --docs flag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/build-documentation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build-storybook-docs\": \"storybook build --docs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in React with JavaScript\nDESCRIPTION: This code shows how to create a Storybook story for a Histogram component in React using JavaScript. It defines a default export with the component and a named export for the Default story with args for configuring the component's appearance and behavior.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Histogram } from './Histogram';\n\nexport default {\n  component: Histogram,\n};\n\nexport const Default = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Block for Plain Markdown Rendering in Storybook 7.0\nDESCRIPTION: Illustrates how to use the new Markdown block to render plain markdown content in Storybook 7.0 documentation. This replaces the previous use of the Description block for rendering markdown.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_90\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Markdown } from '@storybook/blocks';\nimport ReadMe from './README.md?raw';\n\n...\n\n<Markdown>{ReadMe}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Testing Login Form with TypeScript in Svelte\nDESCRIPTION: TypeScript version of the login form testing stories for Svelte, using type-safe story definitions and play functions for interaction testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\nimport { expect, userEvent, within } from 'storybook/test';\n\nimport LoginForm from './LoginForm.svelte';\n\nconst meta: Meta<typeof LoginForm> = {\n  component: LoginForm,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const EmptyForm: Story = {};\n\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n    await userEvent.click(canvas.getByRole('button'));\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Svelte (Standard CSF) with TypeScript\nDESCRIPTION: Defines the metadata for Button component stories in a Svelte project using standard CSF in a TypeScript file. It imports the `Meta` type from `@storybook/svelte` and the `Button.svelte` component. The exported `meta` object is typed and specifies the component, `argTypes` (with a color control for `backgroundColor`), and default `args` (`primary: true`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"svelte\" language=\"ts\" tabTitle=\"CSF\"\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Form Submission in Web Components with TypeScript\nDESCRIPTION: Implementation of a Form component story for Web Components using TypeScript. Demonstrates form testing with custom elements and play function for interaction testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { userEvent, waitFor, within, expect, fn } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'my-form-element',\n  args: {\n    // 👇 Use `fn` to spy on the onSubmit arg\n    onSubmit: fn(),\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted: Story = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter credentials', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n\n    // 👇 Now we can assert that the onSubmit arg was called\n    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Button Stories with Type Annotations\nDESCRIPTION: Framework-agnostic implementation using traditional TypeScript type annotations. Defines basic and primary button stories with explicit type declarations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/typed-csf-file.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, etc.)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\nexport default meta;\n\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {};\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Storybook Component with Vitest\nDESCRIPTION: This snippet shows how to test a Svelte Storybook component using Vitest. It follows the same pattern as the React example, importing dependencies, composing stories, and running a test that executes the Primary story's play function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-with-play-function.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from 'vitest';\nimport { composeStories } from '@storybook/svelte';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('renders and executes the play function', async () => {\n  // Mount story and run interactions\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the main Storybook file using TypeScript. It imports the StorybookConfig type, defines the framework, and specifies which story files to include.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-ordered.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Storybook Main Configuration\nDESCRIPTION: TypeScript version of the Storybook configuration with type definitions, defining framework, story patterns, and webpack configuration. Includes type safety and environment-specific webpack customization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-webpack-final.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      // Modify config for development\n    }\n    if (configType === 'PRODUCTION') {\n      // Modify config for production\n    }\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Vue List Component Stories in TypeScript\nDESCRIPTION: This snippet defines Storybook stories for a Vue 3 List component using TypeScript and CSF 3.0. It imports Storybook types (`Meta`, `StoryObj`) and Vue components (`List`, `ListItem`). Component metadata (`meta`) is defined, and typed stories (`Empty`, `OneItem`, `ManyItems`) are exported, using `render` functions that return Vue component options objects specifying components and template strings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './ListComponent.vue';\nimport ListItem from './ListItem.vue';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Empty: Story = {\n  render: () => ({\n    components: { List },\n    template: '<List/>',\n  }),\n};\n\nexport const OneItem: Story = {\n  render: () => ({\n    components: { List, ListItem },\n    template: `\n      <List>\n        <list-item/>\n      </List>`,\n  }),\n};\n\nexport const ManyItems: Story = {\n  render: () => ({\n    components: { List, ListItem },\n    template: `\n      <List>\n        <list-item/>\n        <list-item/>\n        <list-item/>\n      </List>`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Vitest Setup File for CSF Factories\nDESCRIPTION: Shows how to modify the Vitest setup file to use the new CSF Factories format. The changes include removing the setProjectAnnotations import, importing the preview directly, and updating the beforeAll hook to use the composed beforeAll from the preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport { beforeAll } from 'vitest';\n// 👇 No longer necessary\n- import { setProjectAnnotations } from '@storybook/react';\n- import * as addonAnnotations from 'my-addon/preview';\n+ import preview from './.storybook/preview';\n- import * as previewAnnotations from './.storybook/preview';\n\n// No longer necessary\n- const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n \n// Run Storybook's beforeAll hook\n+ beforeAll(preview.composed.beforeAll);\n- beforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Testing React Button Component with Vitest and React Testing Library\nDESCRIPTION: This code snippet demonstrates unit tests for a React Button component using Vitest and React Testing Library. It imports stories from a separate file and tests both default and overridden props for the Primary story. The tests ensure that the button renders correctly with different text content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-csf-factory-render.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from 'vitest';\nimport { render, screen } from '@testing-library/react';\n\n// Import all stories from the stories file\nimport * as stories from './Button.stories';\n\nconst { Primary, Secondary } = stories;\n\ntest('renders primary button with default args', async () => {\n  // Access the story's component via the .Component property\n  render(<Primary.Component />);\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  // You can override props by passing them directly to the story's component\n  render(<Primary.Component>Hello world</Primary.Component>);\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Web Components using TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a Web Components Checkbox element using TypeScript. It imports types from '@storybook/web-components' and defines a meta object and an 'Unchecked' story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'checkbox-element',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Unchecked: Story = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Document Screen Component with JavaScript\nDESCRIPTION: React component implementation using JavaScript that uses a custom hook for data fetching and handles loading/error states. Renders document data using PageLayout, DocumentHeader, and DocumentList components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\n\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nfunction useFetchData() {\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    setStatus('loading');\n    fetch('https://your-restful-endpoint')\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res;\n      })\n      .then((res) => res.json())\n      .then((data) => {\n        setStatus('success');\n        setData(data);\n      })\n      .catch(() => {\n        setStatus('error');\n      });\n  }, []);\n  return {\n    status,\n    data,\n  };\n}\nexport function DocumentScreen() {\n  const { status, data } = useFetchData();\n\n  const { user, document, subdocuments } = data;\n\n  if (status === 'loading') {\n    return <p>Loading...</p>;\n  }\n  if (status === 'error') {\n    return <p>There was an error fetching the data!</p>;\n  }\n  return (\n    <PageLayout user={user}>\n      <DocumentHeader document={document} />\n      <DocumentList documents={subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Svelte Button Component in JavaScript\nDESCRIPTION: This JavaScript snippet exports Storybook meta configuration for a Svelte Button component, referencing the Button.svelte file and configuring argTypes with both always-visible and conditional controls. No framework-specific syntax is used beyond ES module exports, so minimal dependencies are required beyond Storybook and Button.svelte. Expects the Svelte component and produces a standard Storybook meta export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.svelte';\\n\\nexport default {\\n  component: Button,\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Web Framework Options\nDESCRIPTION: TypeScript configuration for Storybook's React Native Web framework showing available options for plugin configuration, including Babel and React settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-native-web-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/react-native-web-vite',\n    options: {\n      pluginReactOptions: {\n        jsxRuntime: 'automatic' | 'classic',\n        jsxImportSource: string,\n        babel:{\n          plugins: Array<string | [string, any]>,\n          presets: Array<string | [string, any]>,\n        }\n        include: Array<string|RegExp>,\n        exclude: Array<string|RegExp>,\n      }\n      pluginBabelOptions: {\n        include: Array<string|RegExp>,\n        exclude: Array<string|RegExp>,\n        presets: Array<string|[string, any]>,\n        plugins: Array<string|[string, any]>,\n        presetReact?: {\n          runtime?: 'automatic' | 'classic';\n          importSource?: string;\n        };\n      }\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Web Components Registration Form Testing with JavaScript\nDESCRIPTION: A JavaScript implementation for testing a Web Components registration form in Storybook. This story uses play functions to simulate a user filling out a form with email and password inputs, then submitting it.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nexport default {\n  component: 'demo-registration-form',\n};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Angular Components in TypeScript\nDESCRIPTION: This snippet shows how to set up Storybook stories for an Angular component using TypeScript. It imports the necessary types, defines metadata including the component and argTypes, and exports the configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    value: { type: 'number' },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet exports the default Storybook configuration in JavaScript. It specifies the framework, story file patterns, and includes a Babel configuration function for development and production environments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-babel.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async babel(config, { configType }) {\n    if (configType === 'DEVELOPMENT') {\n      // Your development configuration goes here\n    }\n    if (configType === 'PRODUCTION') {\n      // Your production configuration goes here.\n    }\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Common TypeScript\nDESCRIPTION: This snippet shows how to set up story tags for a generic component using TypeScript. It demonstrates applying a global 'stable' tag and overriding it for a specific story, using a framework-agnostic approach.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const ExperimentalFeatureStory: Story = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Storybook Addon Panel with Parameters\nDESCRIPTION: Creates a React component that serves as a custom addon panel in Storybook. It uses the useParameter hook to retrieve custom parameters from the current story and renders different content based on whether a parameter is provided or uses the default value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useparameter.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { AddonPanel } from 'storybook/internal/components';\n\nimport { useParameter } from 'storybook/manager-api';\n\nexport const Panel = () => {\n  // Connects to Storybook's API and retrieves the value of the custom parameter for the current story\n  const value = useParameter('custom-parameter', 'initial value');\n\n  return (\n    <AddonPanel key=\"custom-panel\" active=\"true\">\n      {value === 'initial value' ? (\n        <h2>The story doesn't contain custom parameters. Defaulting to the initial value.</h2>\n      ) : (\n        <h2>You've set {value} as the parameter.</h2>\n      )}\n    </AddonPanel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: JavaScript configuration file for Storybook that sets up the framework, defines story patterns, and configures addons. Uses a helper function to resolve absolute paths for dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-pnpm-with-module-resolution.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path';\n\nconst getAbsolutePath = (packageName) =>\n  path.dirname(require.resolve(path.join(packageName, 'package.json')));\n\nexport default {\n  framework: {\n    // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n    name: getAbsolutePath('@storybook/your-framework'),\n    options: {},\n  },\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    //👇 Use getAbsolutePath when referencing Storybook's addons and frameworks\n    getAbsolutePath('@storybook/addon-essentials'),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook Metadata using Svelte and TypeScript 4.9\nDESCRIPTION: This TypeScript 4.9 code sets up Storybook metadata for a Svelte Button component. It utilizes argTypes for configuring arrow icon selection with mappings for Storybook's control. Dependencies include Svelte with TypeScript support and Storybook addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\n  const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\n  const { Story } = defineMeta({\n    component: Button,\n    argTypes: {\n      arrow: {\n        options: Object.keys(arrows), // An array of serializable values\n        mapping: arrows, // Maps serializable option values to complex arg values\n        control: {\n          type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n          labels: {\n            // 'labels' maps option values to string labels\n            ArrowUp: 'Up',\n            ArrowDown: 'Down',\n            ArrowLeft: 'Left',\n            ArrowRight: 'Right',\n          },\n        },\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Loading with Custom Glob Patterns in Storybook\nDESCRIPTION: This snippet demonstrates how to customize Storybook's story loading configuration to pull both .md and .js files from a specific directory using glob patterns in main.js|ts.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js|ts\n\nexport default {\n  // Your Storybook configuration\n  stories: ['../src/components/**/*.md', '../src/components/**/*.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Svelte Button Component (CSF with TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a Svelte Button component in Storybook using CSF with TypeScript. It defines a decorator that uses a MarginDecorator component and includes type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\nimport MarginDecorator from './MarginDecorator.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  decorators: [() => MarginDecorator],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Angular Storybook (TypeScript)\nDESCRIPTION: Defines Storybook metadata for an Angular `Button` component using TypeScript. It imports the component and `Meta` type, then exports a `meta` object specifying the component and configuring `argTypes` for `label` and `image` properties with conditional visibility using the `if` condition, ensuring only one control (text for label, select for image) is active at a time.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This JavaScript configuration file for Storybook defines the framework, story file patterns, and disables telemetry. It uses ES6 module syntax to export the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableTelemetry: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Form Component with TypeScript\nDESCRIPTION: TypeScript version of the Vue form component test suite using Vue Testing Library and Storybook's composeStories. Provides type safety while testing form validation states in a Vue environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/multiple-stories-test.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/vue';\n\nimport { composeStories } from '@storybook/vue3';\n\nimport * as FormStories from './LoginForm.stories';\n\nconst { InvalidForm, ValidForm } = composeStories(FormStories);\n\ntest('Tests invalid form state', async () => {\n  await InvalidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n\ntest('Tests filled form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in TypeScript with Satisfies Operator\nDESCRIPTION: Sets up Storybook stories for a Button component using TypeScript with the 'satisfies' operator (TS 4.9+). This approach provides type checking while still inferring the type from the meta object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    // 👇 All Button stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Documenting Button Component with Stories Reference in Storybook MDX\nDESCRIPTION: This MDX snippet creates documentation for a Button component by importing and referencing Button stories. It uses the 'of' prop in the Meta component to link to the imported stories, providing the same documentation structure as the previous example but with story integration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-baseline-example.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Controls } from '@storybook/addon-docs/blocks';\n\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n# Definition\n\nButton is a clickable interactive element that triggers a response.\n\nYou can place text and icons inside of a button.\n\nButtons are often used for form submissions and to toggle elements into view.\n\n## Usage\n\nThe component comes in different variants such as `primary`, `secondary`, `large` and `small` which you can use to alter the look and feel of the button.\n\n## Inputs\n\nButton has the following properties:\n\n<Controls />\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Story with Render Function and Args in TypeScript\nDESCRIPTION: This snippet exports a Storybook story named 'ExampleStory'. It includes a render function that uses lit-html to render a custom component, and sets default arguments for the story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ExampleStory: Story = {\n  render: ({ propertyA, propertyB }) => {\n    //👇 Assigns the function result to a variable\n    const someFunctionResult = someFunction(propertyA, propertyB);\n\n    return html`\n      <custom-component\n        .propertyA=${propertyA}\n        .propertyB=${propertyB}\n        .someProperty=${someFunctionResult}\n      ></custom-component>\n    `;\n  },\n  args: {\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with TypeScript 4.9+ (Satisfies Operator)\nDESCRIPTION: Creates Storybook stories for a Svelte Button component using TypeScript 4.9+ with the satisfies operator. Configures type-safe metadata and a primary button story with customized name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in React with TypeScript 4.9+ (Satisfies Operator)\nDESCRIPTION: Creates Storybook stories for a React Button component using TypeScript 4.9+ with the satisfies operator. Defines component metadata and a primary button story with custom naming and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Angular in TypeScript\nDESCRIPTION: This snippet shows how to create stories for an Angular Button component using TypeScript. It sets up the component metadata, defines parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'this data is passed to the addon',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => ({\n    template: `<app-button>hello</<app-button>`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs in Storybook 9.0 with JavaScript\nDESCRIPTION: Shows how to update the autodocs configuration from using the 'autodocs' option to using tags in Storybook 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\nexport default {\n- docs: { autodocs: true }\n};\n\n// In your CSF files:\n+ export default {\n+   tags: ['autodocs']\n+ };\n```\n\n----------------------------------------\n\nTITLE: Defining Button Story with Click Handler in CSF\nDESCRIPTION: Example showing how to create a button story with click event handling using traditional approach.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nexport const Text = () => ({\n  template: '<Button @click=\"log\">Hello Button</Button>',\n  methods: {\n    log: action('clicked')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with React Components using JavaScript\nDESCRIPTION: This JavaScript snippet configures a Storybook story for a React Server Component by importing the component and setting it as the default export with specified parameters. It requires the '@storybook/react' for managing metadata and component import capabilities. No inputs are required for this configuration, and it outputs JSX stories within the Storybook environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/rsc-parameter-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport MyServerComponent from './MyServerComponent';\n\nexport default {\n  component: MyServerComponent,\n  parameters: {\n    react: { rsc: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Vue with TypeScript 4.9\nDESCRIPTION: This snippet shows how to create Storybook stories for a Vue Button component using TypeScript 4.9. It uses the 'satisfies' keyword for type checking, imports necessary types, and defines a story with props and an action using the setup function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nimport { action } from 'storybook/actions';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text: Story = {\n  render: () => ({\n    components: { Button },\n    setup() {\n      return {\n        onClick: action('clicked'),\n      };\n    },\n    template: '<Button label=\"Hello\" @click=\"onClick\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte List Stories with CSF in TypeScript\nDESCRIPTION: Implements a Storybook story for a Svelte List component using the Component Story Format (CSF) in TypeScript with explicit type annotation. It includes type definitions and an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport List from './List.svelte';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Workspace with Storybook Plugin\nDESCRIPTION: Vitest workspace configuration that sets up the Storybook test plugin with custom options for the Storybook script and URL. Demonstrates how to use environment variables for dynamic configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineWorkspace([\n  // ...\n  {\n    // ...\n    {\n      plugins: [\n        storybookTest({\n          // ...\n          storybookScript: 'yarn storybook --ci',\n          storybookUrl: process.env.SB_URL\n        }),\n      ],\n    },\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Testing Form Validation in Angular with Storybook Stories\nDESCRIPTION: Implements form validation testing using @testing-library/angular and imported Storybook stories. Tests an invalid form submission by clicking the submit button and verifying the presence of an invalid form indicator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render, screen, fireEvent } from '@testing-library/angular';\n\nimport { FormComponent } from './LoginForm.component';\n\nimport { InvalidForm } from './Form.stories'; //👈 Our stories imported here.\n\ntest('Checks if the form is valid ', async () => {\n  await render(FormComponent, {\n    componentProperties: InvalidForm.args,\n  });\n\n  fireEvent.click(screen.getByText('Submit'));\n\n  const isFormValid = screen.getByTestId('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Svelte Button Component in TypeScript 4.9\nDESCRIPTION: This TypeScript 4.9 snippet demonstrates Storybook meta definition for a Svelte Button, using the satisfies operator for strict type compatibility with Meta<typeof Button>. It imports required types from @storybook/svelte and sets up argTypes with comments. Needs @storybook/svelte, Button.svelte, and TypeScript 4.9+. Keeps meta export strongly typed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_5\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\\n\\nimport Button from './Button.svelte';\\n\\nconst meta = {\\n  component: Button,\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with React Hooks in TypeScript\nDESCRIPTION: This snippet shows how to create a Storybook story for a Button component in React using hooks with standard TypeScript syntax. It demonstrates state management with hooks to create an interactive button with proper TypeScript typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\n\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n * Example Button story with React Hooks.\n * See note below related to this example.\n */\nconst ButtonWithHooks = () => {\n  // Sets the hooks for both the label and primary props\n  const [value, setValue] = useState('Secondary');\n  const [isPrimary, setIsPrimary] = useState(false);\n\n  // Sets a click handler to change the label's value\n  const handleOnChange = () => {\n    if (!isPrimary) {\n      setIsPrimary(true);\n      setValue('Primary');\n    }\n  };\n  return <Button primary={isPrimary} onClick={handleOnChange} label={value} />;\n};\n\nexport const Primary: Story = {\n  render: () => <ButtonWithHooks />,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Getting Started MDX Document for Storybook Project\nDESCRIPTION: A complete MDX document that provides a starting guide for both designers and developers working with Storybook. It includes sections on design resources (Figma, UI/UX guidelines, design assets) and development resources (coding standards, version control, development tools).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-standalone-page.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# Getting Started\n\nWelcome! Whether you're a designer or a developer, this guide will help you get started and connect you to the essential resources you need.\n\n## Table of Contents\n\n- [Design Resources](#design-resources)\n\n  - [Figma](#figma)\n  - [UI/UX Design Guidelines](#uiux-design-guidelines)\n  - [Design Assets](#design-assets)\n\n- [Development Resources](#development-resources)\n  - [Coding Standards](#coding-standards)\n  - [Version Control](#version-control)\n  - [Development Tools](#development-tools)\n\n---\n\n## Design Resources\n\n### Figma\n\n[Figma](https://www.figma.com/) is a collaborative design and prototyping tool. It's the heart of the design process, allowing designers to work together seamlessly.\n\n- **Get Access**: If you're not already part of the Figma project, request access from the project lead or manager.\n\n### UI/UX Design Guidelines\n\nBefore you dive into designing, familiarize yourself with our UI/UX design guidelines. They provide valuable insights into our design philosophy and standards.\n\n- [UI/UX Guidelines Document](https://your-design-guidelines-link.com)\n\n### Design Assets\n\nAll the essential design assets like logos, icons, and brand guidelines can be found in the Figma project. Ensure you have access and familiarize yourself with these assets for consistency.\n\n---\n\n## Development Resources\n\n### Coding Standards\n\nMaintaining a consistent code style is essential for collaborative development. Our coding standards document will guide you on best practices.\n\n- [Coding Standards Document](https://your-coding-standards-link.com)\n\n### Version Control\n\nWe use Git for version control. Make sure you have Git installed and are familiar with its basics.\n\n### Development Tools\n\nYour development environment is critical. Here are some tools and resources to help you set up your workspace:\n\n- **Code Editor**: We recommend using [Visual Studio Code](https://code.visualstudio.com/) for development. It's highly customizable and supports a wide range of extensions.\n\n- **Package Manager**: [npm](https://www.npmjs.com/) is the package manager we use for JavaScript projects. Install it to manage project dependencies.\n\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript configuration file for Storybook that includes type definitions and provides the same functionality as the JavaScript version with added type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-pnpm-with-module-resolution.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nimport path from 'path';\n\nconst getAbsolutePath = (packageName: string): any =>\n  path.dirname(require.resolve(path.join(packageName, 'package.json')));\n\nconst config: StorybookConfig = {\n  framework: {\n    // Replace your-framework with the same one you've imported above.\n    name: getAbsolutePath('@storybook/your-framework'),\n    options: {},\n  },\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    //👇 Use getAbsolutePath when referencing Storybook's addons and frameworks\n    getAbsolutePath('@storybook/addon-essentials'),\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Environment-based Vite Configuration in Storybook\nDESCRIPTION: Customizing Vite configuration based on the environment in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  async viteFinal(config, { configType }) {\n    if (configType === 'PRODUCTION') {\n      // customize for production\n      config.base = '/my-static-storybook/';\n    }\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Global BeforeAll Setup in Preview\nDESCRIPTION: Configuration of global beforeAll function in Storybook preview for project-wide setup\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async beforeAll() {\n    // One-time setup code\n    return () => {\n      // Optional cleanup code\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite Plugin for JSON Story Files in Storybook\nDESCRIPTION: A Vite plugin that transforms JSON story files into standard CSF (Component Story Format) files. The plugin intercepts virtual imports and dynamically creates story exports based on the JSON content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// vite-plugin-storybook-json-stories.ts\n\nimport type { PluginOption } from 'vite';\nimport fs from 'fs/promises';\n\nfunction JsonStoriesPlugin(): PluginOption {\n  return {\n    name: 'vite-plugin-storybook-json-stories',\n    load(id) {\n      if (!id.startsWith('virtual:jsonstories')) {\n        return;\n      }\n\n      const [, fileName, componentName] = id.split('--');\n      const content = JSON.parse(fs.readFileSync(fileName));\n\n      const { componentPath, stories } = getComponentStoriesFromJson(content, componentName);\n\n      return `\n        import ${componentName} from '${componentPath}';\n\n        export default { component: ${componentName} };\n\n        ${stories.map((story) => `export const ${story.name} = ${story.config};\\n`)}      \n      `;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSF 3.0 Storybook Story in Common Framework using TypeScript\nDESCRIPTION: This code snippet is for creating a Storybook story using CSF 3.0 in a common framework setup using TypeScript. It showcases setting up metadata and a default story. The story renders MyComponent with a specified message and requires the framework to support '@storybook/your-framework'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-auto-title.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\n/**\n * Story written in CSF 3.0 with auto title generation\n * See https://storybook.js.org/docs/api/csf\n * to learn more about it.\n */\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: { message: 'Hello world!' },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Button Stories with Storybook (TypeScript 4.9+ Satisfies)\nDESCRIPTION: This TypeScript 4.9+ snippet configures Svelte Button stories for Storybook using type-checked meta via 'satisfies' and StoryObj. It exports Primary/Secondary/Tertiary variants, all statically typed, matching Svelte's recommended patterns within Storybook CSF. This approach maximizes IDE support and code safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_12\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\\n\\nimport Button from './Button.svelte';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof meta>;\\n\\nexport default meta;\\ntype Story = StoryObj<typeof meta>;\\n\\nexport const Primary: Story = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Button Component in TypeScript\nDESCRIPTION: This code snippet sets up Storybook stories for a Button component. It imports necessary types, defines metadata, and exports an example story with specific props. The code is framework-agnostic and uses TypeScript 4.9 features.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline-with-satisfies-story-level.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Example = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Svelte using CSF in TypeScript\nDESCRIPTION: This snippet shows how to create stories for the Page component in Svelte using Component Story Format (CSF) in TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a LoggedIn story that reuses args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Page from './Page.svelte';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Page>;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing CSF Export Name Formatting in JavaScript\nDESCRIPTION: Test suite validating the storyNameFromExport function's ability to convert various export name formats into human-readable story titles. Tests include cases for simple names, camelCase, snake_case, and mixed formats with numbers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-with-storyname.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('should format CSF exports with sensible defaults', () => {\n  const testCases = {\n    name: 'Name',\n    someName: 'Some Name',\n    someNAME: 'Some NAME',\n    some_custom_NAME: 'Some Custom NAME',\n    someName1234: 'Some Name 1234',\n    someName1_2_3_4: 'Some Name 1 2 3 4',\n  };\n  Object.entries(testCases).forEach(([key, val]) => {\n    expect(storyNameFromExport(key)).toBe(val);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Agnostic Button Stories with TypeScript 4.9\nDESCRIPTION: Template for creating Button stories using TypeScript 4.9 features with the satisfies operator for improved type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      source: { language: 'tsx' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout for Web Components in JavaScript\nDESCRIPTION: JavaScript implementation for Web Components showing how to set up a story for a custom element ('demo-button'). The example demonstrates configuring the centered layout parameter for Web Components in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const WithLayout = {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Components in MDX for Storybook (Common Renderer)\nDESCRIPTION: An MDX file that documents Page, List, and ListItem components using Storybook's addon-docs. It imports stories from respective files and displays them with Meta, Canvas, and Story components. The document provides component descriptions and usage examples.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-file.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs/blocks';\n\nimport * as ListStories from './List.stories';\n\nimport * as ListItemStories from './ListItem.stories';\n\nimport * as PageStories from './Page.stories';\n\n<Meta of={PageStories} />\n\n# Page\n\nPage is a layout container that is used to position children in predetermined areas.\n\nIt's often used to apply consistent positioning for content across pages in an application\n\n## Usage\n\n<Canvas of={PageStories.Basic} />\n\n# List\n\nList is a grouping of related items. List can be ordered with multiple levels of nesting.\n\n## Usage\n\n<Story of={ListStories.Filled} />\n\n# List Item\n\nList items are used to group related content in a list. They must be nested within a List component.\n\n## Usage\n\n<Story of={ListItemStories.Starter} meta={ListItemStories} />\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript 4.9 'satisfies' Operator in Storybook Stories\nDESCRIPTION: Example of using TypeScript 4.9's 'satisfies' operator in component stories to ensure stricter type checking while preserving type inference for component props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<CodeSnippets path=\"button-story-baseline-with-satisfies.md\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Storybook Component with Vitest\nDESCRIPTION: This snippet illustrates how to test a Vue Storybook component using Vitest. It imports the required dependencies, composes the story, and runs a test that executes the Primary story's play function, following the same pattern as the React and Svelte examples.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-with-play-function.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from 'vitest';\nimport { composeStory } from '@storybook/vue3';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('renders and executes the play function', async () => {\n  // Mount story and run interactions\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: TypeScript configuration file for Storybook that includes type definitions, framework specification, story patterns, and webpack customization. Uses the StorybookConfig type for type safety and provides the same functionality as the JavaScript version with added type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-simplified-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    config.plugins.push(/* ... */);\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Play Function with TypeScript 4.9+ Syntax\nDESCRIPTION: This snippet demonstrates a Storybook play function using TypeScript 4.9+ syntax. It includes type satisfies for improved type checking and shows form interaction.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted: Story = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter email and password', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Directory Support in TypeScript Storybook\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure a Storybook story for a component that relies on Next.js app directory features using traditional type annotation. It uses the Meta type to provide type information for the story configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta: Meta<typeof NavigationBasedComponent> = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true, // 👈 Set this\n    },\n  },\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Tab to Storybook UI in JavaScript\nDESCRIPTION: Boilerplate code for creating a new Tab addon in Storybook. This snippet demonstrates how to register a tab and add it to Storybook's UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-addon-tab-example.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook's main.ts file that imports type definitions and defines the framework, story file patterns, and documentation settings. This configuration provides type safety for the Storybook configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-default-name.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  docs: {\n    defaultName: 'Documentation',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This code exports a default configuration object for Storybook. It specifies the framework, story file patterns, and addons including a custom webpack configuration for CSS processing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-addons.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    {\n      name: '@storybook/addon-styling-webpack',\n      options: {\n        rules: [\n          {\n            test: /\\.css$/,\n            use: [\n              'style-loader',\n              'css-loader',\n              {\n                loader: 'postcss-loader',\n                options: {\n                  implementation: require.resolve('postcss'),\n                },\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Vue List Component with TypeScript 4.9+\nDESCRIPTION: This code sets up Storybook stories for a Vue 3 List component using TypeScript 4.9 with the satisfies operator. It imports the Vue components, defines the meta configuration with proper typing, and creates stories with Vue-specific rendering templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\nconst meta = {\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n} satisfies Meta<typeof List>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Empty: Story = {\n  render: () => ({\n    components: { List },\n    template: '<List />',\n  }),\n};\n\nexport const OneItem: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { args }\n    }\n    template: '<List v-bind=\"args\"><ListItem /></List>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in React with JavaScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Button component in React using JavaScript. It defines a primary button story with specific props using JSX syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => <Button primary label=\"Button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook addons in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook's addons in a JavaScript file, specifically removing Next.js-related addons. It exports a default configuration object with an addons array.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-remove-addons.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  addons: [\n    // ...\n    // 👇 These can both be removed\n    // 'storybook-addon-next',\n    // 'storybook-addon-next-router',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Solid with JavaScript\nDESCRIPTION: Creates a Storybook story for a Solid.js List component using JavaScript. It imports the Unchecked story from ListItem stories and composes them in the render function similar to React syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport const OneItem = {\n  render: (args) => (\n    <List {...args}>\n      <Unchecked {...Unchecked.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in Angular with Storybook\nDESCRIPTION: Demonstrates how to compose a List component story in Angular using imported ListItem stories. The example uses moduleMetadata for component declarations and shows how to render a list with both selected and unselected items.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { List } from './list.component';\nimport { ListItem } from './list-item.component';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta: Meta<List> = {\n  component: List,\n  decorators: [\n    moduleMetadata({\n      declarations: [List, ListItem],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<List>;\n\nexport const ManyItems: Story = {\n  args: {\n    Selected: Selected.args.isSelected,\n    Unselected: Unselected.args.isSelected,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <app-list>\n        <app-list-item [isSelected]=\"Selected\"></app-list-item>\n        <app-list-item [isSelected]=\"Unselected\"></app-list-item>\n        <app-list-item [isSelected]=\"Unselected\"></app-list-item>\n      </app-list>\n    `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Story in TypeScript 4.9+ for Solid.js\nDESCRIPTION: This snippet defines a Storybook story for a List component in TypeScript 4.9+ for Solid.js. It uses the 'satisfies' operator for type inference and imports the Unchecked story from ListItem.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OneItem: Story = {\n  args: {\n    children: <Unchecked {...Unchecked.args} />,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Component Story with Accessibility Examples\nDESCRIPTION: Example showing how to write stories for both accessible and inaccessible button components to demonstrate accessibility testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Accessible = {\n  args: {\n    label: 'Accessible button',\n  },\n};\n\nexport const Inaccessible = {\n  args: {\n    label: ' ',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vue List Component Stories in TypeScript (TS 4.9)\nDESCRIPTION: This snippet defines Storybook stories for a Vue 3 List component using TypeScript (specifically targeting TS 4.9) and CSF 3.0. It imports necessary types (`Meta`, `StoryObj`) and components (`List`, `ListItem`). It defines component metadata (`meta`) and exports typed stories (`Empty`, `OneItem`, `ManyItems`), each utilizing a `render` function returning a Vue options object with components and a template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './ListComponent.vue';\nimport ListItem from './ListItem.vue';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Empty: Story = {\n  render: () => ({\n    components: { List },\n    template: '<List/>',\n  }),\n};\n\nexport const OneItem: Story = {\n  render: () => ({\n    components: { List, ListItem },\n    template: `\n      <List>\n        <list-item/>\n      </List>`,\n  }),\n};\n\nexport const ManyItems: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    template: `\n      <List>\n        <list-item/>\n        <list-item/>\n        <list-item/>\n      </List>`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for DocumentScreen in Angular with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for the DocumentScreen component in Angular using TypeScript. It imports necessary dependencies, defines metadata, and creates a 'Simple' story with args from other component stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { DocumentScreen } from './YourPage.component';\n\n// 👇 Imports the required stories\nimport * as PageLayout from './PageLayout.stories';\nimport * as DocumentHeader from './DocumentHeader.stories';\nimport * as DocumentList from './DocumentList.stories';\n\nconst meta: Meta<DocumentScreen> = {\n  component: DocumentScreen,\n};\n\nexport default meta;\ntype Story = StoryObj<DocumentScreen>;\n\nexport const Simple: Story = {\n  args: {\n    user: PageLayout.Simple.args.user,\n    document: DocumentHeader.Simple.args.document,\n    subdocuments: DocumentList.Simple.args.documents,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in Angular with TypeScript\nDESCRIPTION: Implementation of Storybook stories for a List component in Angular using TypeScript. It shows how to set up the component with proper metadata, import dependencies, create story templates, and define variations with different props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { List } from './list.component';\nimport { ListItem } from './list-item.component';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n  decorators: [\n    moduleMetadata({\n      declarations: [List, ListItem],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<List>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nconst ListTemplate: Story = {\n  render: (args) => ({\n    props: args,\n    template: `\n      <app-list>\n        <div *ngFor=\"let item of items\">\n          <app-list-item [item]=\"item\"></app-list-item>\n        </div>\n      </app-list>\n    `,\n  }),\n};\n\nexport const Empty: Story = {\n  ...ListTemplate,\n  args: { items: [] },\n};\n\nexport const OneItem: Story = {\n  ...ListTemplate,\n  args: {\n    items: [{ ...Unchecked.args }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite Builder in JavaScript\nDESCRIPTION: This snippet defines the main Storybook configuration, including story file patterns, addons, and Vite-specific settings. It also includes a custom Vite configuration function to add dependencies for pre-optimization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-aliasing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n  async viteFinal(config) {\n    // Merge custom configuration into the default config\n    const { mergeConfig } = await import('vite');\n\n    return mergeConfig(config, {\n      // Add dependencies to pre-optimization\n      optimizeDeps: {\n        include: ['storybook-dark-mode'],\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Button Metadata for Svelte in Storybook\nDESCRIPTION: This TypeScript snippet configures Storybook metadata for a Svelte Button component. It sets up argTypes with options and mappings for arrow icons. It needs TypeScript and Svelte's Storybook configuration to work seamlessly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    arrow: {\n      options: Object.keys(arrows), // An array of serializable values\n      mapping: arrows, // Maps serializable option values to complex arg values\n      control: {\n        type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n        labels: {\n          // 'labels' maps option values to string labels\n          ArrowUp: 'Up',\n          ArrowDown: 'Down',\n          ArrowLeft: 'Left',\n          ArrowRight: 'Right',\n        },\n      },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: React Button Story with TypeScript 4.9+\nDESCRIPTION: Creates a Button component story for React using TypeScript 4.9+ with satisfies operator and CSF 3 format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = { args: { primary: true } };\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Svelte Storybook (Meta Satisfies Syntax) - TypeScript 4.9\nDESCRIPTION: Shows advanced TypeScript (4.9+) usage by applying the 'satisfies' operator for stricter meta-typing on Svelte stories. Illustrates the same control configurations as other snippets. Requires '@storybook/svelte' and a Svelte component. Inputs: Svelte components + TS meta; outputs: stories with enhanced typing and custom control mappings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta = {\n  component: YourComponent,\n} satisfies Meta<typeof YourComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ArrayInclude: Story = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude: Story = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude: Story = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude: Story = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React-Docgen-Typescript Options in Storybook\nDESCRIPTION: Sets options for react-docgen-typescript-plugin when used for parsing React components in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    reactDocgen: 'react-docgen-typescript',\n    reactDocgenTypescriptOptions: {\n      shouldExtractLiteralValuesFromEnum: true,\n      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Storybook Main Configuration for Web Components\nDESCRIPTION: Configures Storybook's main.js file to use the Web Components framework with Vite as the bundler. This is the JavaScript version of the configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  framework: '@storybook/web-components-vite', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Custom Code Block Component in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook preview that imports the framework-specific Preview type and overrides the default code component with a custom CodeBlock component. This defines how code blocks appear in the documentation panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-code-renderer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { CodeBlock } from './CodeBlock';\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      components: {\n        code: CodeBlock,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Registering React Button Story - Storybook (TypeScript, type-satisfies)\nDESCRIPTION: This TypeScript snippet (using the 'satisfies' operator) registers a Button component for Storybook in React using strict type checking with the Meta type from '@storybook/react'. It requires TypeScript 4.9+ for 'satisfies'. The main inputs are the Button component and the Meta type, and it outputs a strictly typed story registration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_4\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta } from '@storybook/react';\\n\\nimport { Button } from './Button';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Storybook Main Config\nDESCRIPTION: Example of extending Storybook's main configuration file to define custom environment variables.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  env: (config) => ({\n    ...config,\n    EXAMPLE_VAR: 'An environment variable',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Story Properties in Tests\nDESCRIPTION: Shows how to override global Storybook configurations for specific tests using composeStory and composeStories functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport { composeStory } from '@storybook/react';\nimport Meta, { Primary } from './Button.stories';\n\nconst ButtonWithCustomProps = composeStory(Primary, Meta, {\n  args: {\n    label: 'Hello world',\n  },\n  decorators: [\n    (StoryFn) => (\n      <div style={{ margin: '3em' }}>\n        <StoryFn />\n      </div>\n    ),\n  ],\n});\n\ntest('renders button with overridden props', () => {\n  render(<ButtonWithCustomProps />);\n  expect(screen.getByRole('button')).toHaveTextContent(/hello world/i);\n});\n```\n\n----------------------------------------\n\nTITLE: React Button Story Implementation (JavaScript)\nDESCRIPTION: Default story implementation for a Button component in React using CSF 3 format. Uses JavaScript with React's spread props pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Default = {\n  render: (args) => <Button {...args} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for DocumentScreen with TypeScript 4.9+\nDESCRIPTION: This snippet demonstrates creating a Storybook story for the DocumentScreen component using TypeScript 4.9 or later. It uses the 'satisfies' keyword for type checking and defines metadata and a 'Simple' story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { DocumentScreen } from './YourPage';\n\n// 👇 Imports the required stories\nimport * as PageLayout from './PageLayout.stories';\nimport * as DocumentHeader from './DocumentHeader.stories';\nimport * as DocumentList from './DocumentList.stories';\n\nconst meta = {\n  component: DocumentScreen,\n} satisfies Meta<typeof DocumentScreen>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Simple: Story = {\n  args: {\n    user: PageLayout.Simple.args.user,\n    document: DocumentHeader.Simple.args.document,\n    subdocuments: DocumentList.Simple.args.documents,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework for Vue 3 with Vite in TypeScript\nDESCRIPTION: This snippet defines a TypeScript configuration for Storybook, importing the StorybookConfig type and setting up the framework as '@storybook/vue3-vite' with the docgen option set to 'vue-component-meta'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue-vite-framework-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/vue3-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/vue3-vite',\n    options: {\n      docgen: 'vue-component-meta',\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript for Common Frameworks\nDESCRIPTION: This code shows how to set up Storybook for a Button component using TypeScript in common frameworks like React, Vue, or Svelte. It uses the Meta generic type to provide type safety for the Button component configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component with TypeScript in Storybook\nDESCRIPTION: This snippet defines the metadata and argTypes for a Button component using TypeScript in Storybook. It explicitly types the meta object and categorizes various properties like backgroundColor, primary, label, onClick, and size into different groups for better organization in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n      },\n    },\n    // Assigns the argType to the Text category\n    label: {\n      table: {\n        category: 'Text',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining RightArrow Component for UI in React\nDESCRIPTION: Creates a React component that renders an SVG right arrow icon with inline styles.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const RightArrow = () => <svg \n    viewBox=\"0 0 14 14\" \n    width=\"8px\" \n    height=\"14px\" \n    style={{ \n      marginLeft: '4px',\n      display: 'inline-block',\n      shapeRendering: 'inherit',\n      verticalAlign: 'middle',\n      fill: 'currentColor',\n      'path fill': 'currentColor'\n    }}\n>\n  <path d=\"m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Autodocs Template in React\nDESCRIPTION: Demonstrates how to create a custom documentation template using React components and Doc Blocks, overriding the default template used by Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Title, Subtitle, Description, Primary, Controls, Stories } from '@storybook/blocks';\n\nexport const parameters = {\n  docs: {\n    page: () => (\n      <>\n        <Title />\n        <Subtitle />\n        <Description />\n        <Primary />\n        <Controls />\n        <Stories />\n      </>\n    ),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Vite Configuration in Storybook's main.js|ts\nDESCRIPTION: This snippet demonstrates how to use the viteFinal option to customize Vite configuration in Storybook. It shows how to modify the Vite config object, including adding plugins and adjusting settings based on the build type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-vite-final.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\nimport { mergeConfig } from 'vite';\n\nconst config: StorybookConfig = {\n  // Your existing Storybook configuration\n  viteFinal: async (config, { configType }) => {\n    // Merge custom configuration into the default config\n    return mergeConfig(config, {\n      // Use the same configuration for both dev and build\n      build: {\n        sourcemap: true,\n      },\n      // Add dependencies to pre-optimization\n      optimizeDeps: {\n        include: ['storybook-dark-mode'],\n      },\n      // Add custom plugins\n      plugins: [\n        // Example: add a custom plugin based on configType\n        configType === 'PRODUCTION' && customVitePluginForProduction(),\n      ],\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Angular Storybook Story with GraphQL Mocking\nDESCRIPTION: Configures Angular stories with GraphQL mocking using MSW and Apollo. Includes module metadata setup and mock handlers for both success and error scenarios.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { graphql, HttpResponse, delay } from 'msw';\n\nimport { DocumentHeader } from './DocumentHeader.component';\nimport { DocumentList } from './DocumentList.component';\nimport { PageLayout } from './PageLayout.component';\nimport { DocumentScreen } from './YourPage.component';\nimport { MockGraphQLModule } from './mock-graphql.module';\n\nconst meta: Meta<DocumentScreen> = {\n  component: DocumentScreen,\n  decorators: [\n    moduleMetadata({\n      declarations: [DocumentList, DocumentHeader, PageLayout],\n      imports: [CommonModule, HttpClientModule, MockGraphQLModule],\n    }),\n  ],\n};\n\nexport default meta;\n\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\ntype Story = StoryObj<DocumentScreen>;\n\nexport const MockedSuccess: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', () => {\n          return HttpResponse.json({\n            data: {\n              allInfo: {\n                ...TestData,\n              },\n            },\n          });\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', async () => {\n          await delay(800);\n          return HttpResponse.json({\n            errors: [\n              {\n                message: 'Access denied',\n              },\n            ],\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Button Story in TypeScript\nDESCRIPTION: This snippet defines a Storybook story for an Angular `Button` component using TypeScript. It imports `Meta` and `StoryObj` from '@storybook/angular' and the `Button` component itself. The `meta` object configures the story file to use the `Button` component, and the `Primary` export defines a specific story instance with the `variant` argument set to 'primary'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This snippet shows how to configure the main Storybook file using TypeScript. It imports the StorybookConfig type, defines the framework, story file patterns, and build options for testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-sourcemaps.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableSourcemaps: false,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Svelte (TypeScript)\nDESCRIPTION: This snippet shows how to create a Storybook story for a Svelte Button component using TypeScript. It defines a Meta type, exports a default meta object, and creates a 'Text' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\nimport { action } from 'storybook/actions';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text: Story = {\n  render: ({ label, click }) => ({\n    Component: Button,\n    props: {\n      label,\n    },\n    on: {\n      click,\n    },\n  }),\n  args: {\n    label: 'Hello',\n    click: action('clicked'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for Svelte (TypeScript 4.9 with Satisfies Operator)\nDESCRIPTION: This code sets up a Storybook story for a Svelte component using TypeScript 4.9's satisfies operator for precise type checking with '@storybook/svelte'. It demonstrates advanced configuration of the a11y addon, including disabling accessibility checks and restricting validation by CSS selector, as well as enabling manual accessibility test execution via the 'manual' global flag. Useful for Svelte teams seeking strict typing and contemporary Storybook integration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_7\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport MyComponent from './MyComponent.svelte';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Toolbar Addon Component in React\nDESCRIPTION: Implementation of a React component that creates a custom toolbar addon with a toggle button and keyboard shortcut. Uses Storybook Manager API to register keyboard shortcuts and internal components for UI elements. The addon includes a chevron icon button and configurable keyboard shortcuts.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useapi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useCallback } from 'react';\n\nimport { useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { ChevronDownIcon } from '@storybook/icons';\n\nexport const Panel = () => {\n  const api = useStorybookApi();\n\n  const toggleMyTool = useCallback(() => {\n    // Custom logic to toggle the addon here\n  }, []);\n\n  useEffect(() => {\n    api.setAddonShortcut('custom-toolbar-addon', {\n      label: 'Enable toolbar addon',\n      defaultShortcut: ['G'],\n      actionName: 'Toggle',\n      showInMenu: false,\n      action: toggleAddon,\n    });\n  }, [api]);\n\n  return (\n    <IconButton key=\"custom-toolbar\" active=\"true\" title=\"Show a toolbar addon\">\n      <ChevronDownIcon />\n    </IconButton>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in React (TypeScript)\nDESCRIPTION: TypeScript implementation of a Storybook story for the Page component in React. It extends the component props with a footer property and renders the Page with a footer element containing the provided footer text.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Page } from './Page';\n\ntype PagePropsAndCustomArgs = React.ComponentProps<typeof Page> & { footer?: string };\n\nconst meta: Meta<PagePropsAndCustomArgs> = {\n  component: Page,\n  render: ({ footer, ...args }) => (\n    <Page {...args}>\n      <footer>{footer}</footer>\n    </Page>\n  ),\n};\nexport default meta;\n\ntype Story = StoryObj<PagePropsAndCustomArgs>;\n\nexport const CustomFooter: Story = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Storybook Preview Configuration in TypeScript\nDESCRIPTION: TypeScript version of the Storybook preview configuration for React. Includes type definitions and framework-specific Preview interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\n\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { normal as NavigationNormal } from '../components/Navigation.stories';\n\nimport GlobalContainerContext from '../components/lib/GlobalContainerContext';\n\nconst context = {\n  NavigationContainer: NavigationNormal,\n};\n\nconst AppDecorator = (storyFn) => {\n  return (\n    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>\n  );\n};\n\nconst preview: Preview = {\n  decorators: [AppDecorator],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with React and Webpack in TypeScript\nDESCRIPTION: This snippet demonstrates configuring Storybook for a React project using Webpack, written in TypeScript. It imports a type definition for StorybookConfig and defines a configuration object adhering to this type. Exporting this configuration ensures that TypeScript developers can leverage type safety while setting up integration between Storybook, React, and Webpack.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-framework-options.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-webpack5';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {\n      // ...\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Composed Button Story in Vue - TypeScript\nDESCRIPTION: This snippet tests the 'Primary' composed Storybook story of a Button component for Vue 3 using TypeScript. It uses @testing-library/vue for rendering components and making assertions, and @storybook/vue3 to compose stories. The test checks that the 'button' role's text content matches the label value from the story, supporting maintainability and type safety. It depends on @testing-library/vue, @storybook/vue3, and valid TypeScript Button story exports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { render, screen } from '@testing-library/vue';\n\nimport { composeStories } from '@storybook/vue3';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('reuses args from composed story', () => {\n  render(Primary());\n\n  const buttonElement = screen.getByRole('button');\n  // Testing against values coming from the story itself! No need for duplication\n  expect(buttonElement.textContent).toEqual(Primary.args.label);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Handling in Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook that modifies webpack to use @svgr/webpack for SVG files. It imports the StorybookConfig type, finds and modifies the existing image rule to exclude SVGs, then adds a custom rule for SVG handling with proper type definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-configure-svgr.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/nextjs';\n\nconst config: StorybookConfig = {\n  // ...\n  webpackFinal: async (config) => {\n    config.module = config.module || {};\n    config.module.rules = config.module.rules || [];\n\n    // This modifies the existing image rule to exclude .svg files\n    // since you want to handle those files with @svgr/webpack\n    const imageRule = config.module.rules.find((rule) => rule?.['test']?.test('.svg'));\n    if (imageRule) {\n      imageRule['exclude'] = /\\.svg$/;\n    }\n\n    // Configure .svg files to be loaded with @svgr/webpack\n    config.module.rules.push({\n      test: /\\.svg$/,\n      use: ['@svgr/webpack'],\n    });\n\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Form Validation in Preact with Storybook Stories\nDESCRIPTION: Implements form validation testing using @testing-library/preact and imported Storybook stories. Tests an invalid form submission using the InvalidForm story and verifies the presence of an invalid form indicator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@testing-library/jest-dom/extend-expect';\n\nimport { h } from 'preact';\n\nimport { render, fireEvent } from '@testing-library/preact';\n\nimport { InvalidForm } from './LoginForm.stories'; //👈 Our stories imported here.\n\nit('Checks if the form is valid', async () => {\n  const { getByTestId, getByText } = render(<InvalidForm {...InvalidForm.args} />);\n\n  fireEvent.click(getByText('Submit'));\n\n  const isFormValid = getByTestId('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Web Components Login Form Story in TypeScript\nDESCRIPTION: TypeScript implementation of login form stories with proper type definitions using Meta and StoryObj types. Includes empty and filled form states with interaction testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, within, expect } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-login-form',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const EmptyForm: Story = {};\n\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    await userEvent.click(canvas.getByRole('button'));\n\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in JavaScript for React\nDESCRIPTION: Creates a Storybook story for a React Button component with three variations using JavaScript. Each story uses JSX in the render function to display buttons with different labels while maintaining consistent styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"Button\" />,\n};\n\nexport const Secondary = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />,\n};\n\nexport const Tertiary = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Reset in Angular Storybook\nDESCRIPTION: Angular implementation of a Storybook story that demonstrates how to reset and set element highlights using component wrapper decorators. Uses TypeScript with Angular-specific Meta and StoryObj types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-highlight-reset.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { componentWrapperDecorator } from '@storybook/angular';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const ResetHighlight: Story = {\n  decorators: [\n    componentWrapperDecorator((story) => {\n      const emit = useChannel({});\n      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\n      emit(HIGHLIGHT, {\n        elements: ['header', 'section', 'footer'],\n      });\n      return story;\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration file for Storybook that imports the StorybookConfig type, sets up the React-Vite framework with legacyRootApi enabled, and specifies story file paths. This typed configuration provides better IDE support and type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace react-vite with the framework you are using (e.g., react-webpack5)\nimport type { StorybookConfig } from '@storybook/react-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/react-vite',\n    options: {\n      legacyRootApi: true,\n    },\n  },\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Angular with TypeScript\nDESCRIPTION: Sets up a Storybook story for an Angular Button component using TypeScript. Defines a primary button story with custom naming and argument configuration for label and primary state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Backgrounds in JavaScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook, setting up background color options. It defines two background colors: red and green, with their respective hex values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-params.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Events with TypeScript in Vue Component\nDESCRIPTION: Shows how to define events with TypeScript types and JSDoc comments in a Vue component for better documentation in Storybook controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  type MyChangeEvent = 'change';\n\n  interface MyEvents {\n    /** Fired when item is changed */\n    (event: MyChangeEvent, item?: Item): void;\n    /** Fired when item is deleted */\n    (event: 'delete', id: string): void;\n    /** Fired when item is upserted into list */\n    (e: 'upsert', id: string): void;\n  }\n\n  const emit = defineEmits<MyEvents>();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Advanced MDX Story Example with Multiple Stories\nDESCRIPTION: A more complex MDX example showing how to define multiple Badge component stories with different variations. It demonstrates standalone stories, stories in Canvas for code snippets, and grouped stories in a single Canvas.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, Canvas } from '@storybook/addon-docs';\n\nimport { Badge } from './Badge';\nimport { Icon } from './Icon';\n\n<Meta title=\"MDX/Badge\" component={Badge} />\n\n# Badge\n\nLet's define a story for our `Badge` component:\n\n<Story name=\"positive\">\n  <Badge status=\"positive\">Positive</Badge>\n</Story>\n\nWe can drop it in a `Canvas` to get a code snippet:\n\n<Canvas>\n  <Story name=\"negative\">\n    <Badge status=\"negative\">Negative</Badge>\n  </Story>\n</Canvas>\n\nWe can even preview multiple stories in a block. This\ngets rendered as a group, but defines individual stories\nwith unique URLs and isolated snapshot tests.\n\n<Canvas>\n  <Story name=\"warning\">\n    <Badge status=\"warning\">Warning</Badge>\n  </Story>\n  <Story name=\"neutral\">\n    <Badge status=\"neutral\">Neutral</Badge>\n  </Story>\n  <Story name=\"error\">\n    <Badge status=\"error\">Error</Badge>\n  </Story>\n  <Story name=\"with icon\">\n    <Badge status=\"warning\">\n      <Icon icon=\"check\" inline />\n      with icon\n    </Badge>\n  </Story>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, sets up the framework, and configures SWC compiler options, including automatic runtime for React transforms.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc-jsx-transform.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the webpack-based framework you are using (e.g., react-webpack5)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/your-framework',\n    options: {},\n  },\n  swc: (config, options) => ({\n    jsc: {\n      transform: {\n        react: {\n          runtime: 'automatic',\n        },\n      },\n    },\n  }),\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Mock Provider in Storybook Preview\nDESCRIPTION: This snippet shows how to create a flexible decorator that reads the theme from story parameters. It allows for dynamic theme switching in individual stories without repeating the provider setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nconst lightTheme = {\n  // Light theme properties\n};\n\nconst darkTheme = {\n  // Dark theme properties\n};\n\nexport const decorators = [\n  (Story, context) => {\n    const theme = context.parameters.theme === 'dark' ? darkTheme : lightTheme;\n    return (\n      <ThemeProvider theme={theme}>\n        <Story />\n      </ThemeProvider>\n    );\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Non-Deployed Storybook in CI\nDESCRIPTION: YAML configuration for building Storybook and running tests against a local instance in a CI environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Test-runner: Build'\non: push\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: yarn\n      - name: Install Playwright\n        run: npx playwright install --with-deps\n      - name: Build Storybook\n        run: yarn build-storybook --quiet\n      - name: Serve Storybook and run tests\n        run: |\n          npx concurrently -k -s first -n \"SB,TEST\" -c \"magenta,blue\" \\\n            \"npx http-server storybook-static --port 6006 --silent\" \\\n            \"npx wait-on tcp:6006 && yarn test-storybook\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Loaders in Storybook Preview\nDESCRIPTION: Demonstrates how to set up global loaders in .storybook/preview.js that will run for all stories, providing shared data like current user information.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/loaders.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const loaders = [\n  async () => ({\n    currentUser: await fetch('/api/user').then((r) => r.json()),\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Angular Button Story Configuration with TypeScript\nDESCRIPTION: Configures a Storybook story for an Angular Button component using TypeScript. Sets up click action handlers and exports metadata for the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\nimport { action } from 'storybook/actions';\n\nimport Button from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  args: {\n    // 👇 Create an action that appears when the onClick event is fired\n    onClick: action('on-click'),\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Options for Storybook Integration in TypeScript\nDESCRIPTION: Exports a configuration object that defines how a custom framework integrates with Storybook. It retrieves the package.json information, specifies the framework name, path, and includes a required framework preset.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-server-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sync } from 'read-pkg-up';\n\nexport default {\n  packageJson: sync({ cwd: __dirname }).packageJson,\n  framework: 'my-framework',\n  frameworkPath: '@my-framework/storybook',\n  frameworkPresets: [require.resolve('./framework-preset-my-framework.js')],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Storybook Testing\nDESCRIPTION: Defines a complete GitHub Actions workflow that sets up Node.js, installs dependencies, builds Storybook, and runs tests. The workflow uses Playwright for testing and includes concurrent execution of the Storybook server and test suite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-local-build-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Storybook Tests'\n\non: push\n\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n      - name: Install dependencies\n        run: yarn\n      - name: Install Playwright\n        run: npx playwright install --with-deps\n      - name: Build Storybook\n        run: yarn build-storybook --quiet\n      - name: Serve Storybook and run tests\n        run: |\n          npx concurrently -k -s first -n \"SB,TEST\" -c \"magenta,blue\" \\\n            \"npx http-server storybook-static --port 6006 --silent\" \\\n            \"npx wait-on tcp:127.0.0.1:6006 && yarn test-storybook\"\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Vue with TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Vue Button component using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a story with props and an action using the setup function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nimport { action } from 'storybook/actions';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Text: Story = {\n  render: () => ({\n    components: { Button },\n    setup() {\n      return {\n        onClick: action('clicked'),\n      };\n    },\n    template: '<Button label=\"Hello\" @click=\"onClick\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Angular Storybook\nDESCRIPTION: This snippet demonstrates how to set up conditional controls in an Angular Storybook configuration. It shows various conditions for displaying controls based on the existence, truthiness, or specific values of the 'parent' argument using the 'if' property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    parent: { control: 'select', options: ['one', 'two', 'three'] },\n\n    // 👇 Only shown when `parent` arg exists\n    parentExists: { if: { arg: 'parent', exists: true } },\n\n    // 👇 Only shown when `parent` arg does not exist\n    parentDoesNotExist: { if: { arg: 'parent', exists: false } },\n\n    // 👇 Only shown when `parent` arg value is truthy\n    parentIsTruthy: { if: { arg: 'parent' } },\n    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },\n\n    // 👇 Only shown when `parent` arg value is not truthy\n    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },\n\n    // 👇 Only shown when `parent` arg value is 'three'\n    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },\n\n    // 👇 Only shown when `parent` arg value is not 'three'\n    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },\n\n    // Each of the above can also be conditional on the value of a globalType, e.g.:\n\n    // 👇 Only shown when `theme` global exists\n    parentExists: { if: { global: 'theme', exists: true } },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Button Stories with Type Satisfaction (TypeScript >=4.9)\nDESCRIPTION: This TypeScript 4.9+ example defines Svelte Button stories in Storybook using satisfies to ensure strict types for meta. Button is imported, and Primary provides the required args. Needs @storybook/svelte and the Svelte Button. TS 4.9+ required for satisfies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_12\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story with JavaScript\nDESCRIPTION: Button story configuration for Web Components using JavaScript. Demonstrates how to set up component stories for custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport const Basic = {\n  parameters: {\n    docs: {\n      canvas: { sourceState: 'shown' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Storybook refs Configuration\nDESCRIPTION: TypeScript type definition for the refs configuration option in Storybook's main configuration file. It defines the structure for configuring Storybook composition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-refs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ [key: string]:\n  | { title: string; url: string; expanded?: boolean, sourceUrl?: string }\n  | (config: { title: string; url: string; expanded?: boolean, sourceUrl: string }) => { title: string; url: string; expanded?: boolean, sourceUrl?: string }\n  | { disable: boolean }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Vue in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook stories for a Vue Button component using JavaScript. It imports the Button component, defines metadata with argTypes, and exports a story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n  argTypes: {\n    onClick: {},\n  },\n};\n\nexport const Text = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in SolidJS with JavaScript\nDESCRIPTION: Demonstrates how to create a List component story in SolidJS using JavaScript. This example shows how to reuse ListItem stories to compose a List with multiple child items.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nexport default {\n  component: List,\n};\n\nexport const ManyItems = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem {...Selected.args} />\n      <ListItem {...Unselected.args} />\n      <ListItem {...Unselected.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in SolidJS with TypeScript\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Histogram component in SolidJS using TypeScript. It provides type annotations for the meta configuration and story object, importing the necessary types from the storybook-solidjs package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Histogram } from './Histogram';\n\nconst meta: Meta<typeof Histogram> = {\n  component: Histogram,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Histogram>;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte CSF using JavaScript\nDESCRIPTION: Creates a Storybook story for a Svelte Button component using the Svelte CSF format with JavaScript. Uses the defineMeta helper from @storybook/addon-svelte-csf to define three story variations with different labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n\tconst { Story } = defineMeta({\n\t\tcomponent: Button,\n\t});\n</script>\n\n<Story name=\"Primary\">\n  <Button backgroundColor=\"#ff0\" label=\"Button\" />\n</Story>\n\n<Story name=\"Secondary\">\n  <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />\n</Story>\n\n<Story name=\"Tertiary\">\n  <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with NgRx Store Integration\nDESCRIPTION: This code sets up a Storybook story for an Angular component with NgRx store. It uses moduleMetadata decorator to import the StoreModule and declare the component, ensuring the store is properly injected when the story is rendered.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstoriesOf('ngrx|Store', module)\n  .addDecorator(\n    moduleMetadata({\n      imports: [StoreModule.forRoot({})],\n      declarations: [WithStoreComponent],\n    })\n  )\n  .add('With component', () => {\n    return {\n      component: WithStoreComponent,\n    };\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with Custom Package Manager\nDESCRIPTION: Command to install Storybook using a specific package manager, using the --package-manager flag to override automatic detection.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"create-command-custom-package-manager.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring React Storybook Preview with Styled Components Theme Provider\nDESCRIPTION: Sets up Storybook preview for React applications using styled-components. The decorator wraps each story in a ThemeProvider component, applying the theme selected via globals context.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ThemeProvider } from 'styled-components';\n\nimport { MyThemes } from '../my-theme-folder/my-theme-file';\n\nconst preview = {\n  decorators: [\n    (Story, context) => {\n      const theme = MyThemes[context.globals.theme];\n      return (\n        <ThemeProvider theme={theme}>\n          <Story />\n        </ThemeProvider>\n      );\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Navigation in Storybook using standard TypeScript syntax\nDESCRIPTION: A standard TypeScript implementation for a Storybook story with Next.js navigation parameters. This approach uses explicit type annotations for the meta object and Story type to configure the NavigationBasedComponent with navigation settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-override-in-story.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta: Meta<typeof NavigationBasedComponent> = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n    },\n  },\n};\nexport default meta;\n\ntype Story = StoryObj<typeof NavigationBasedComponent>;\n\n// If you have the actions addon,\n// you can interact with the links and see the route change events there\nexport const Example: Story = {\n  parameters: {\n    nextjs: {\n      navigation: {\n        pathname: '/profile',\n        query: {\n          user: '1',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story with Vue in TypeScript\nDESCRIPTION: Demonstrates implementing a Button story for Vue components using TypeScript with proper type annotations. Uses render functions to create component instances with specific props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => ({\n    components: { Button },\n    template: '<Button primary label=\"Button\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Snapshot Tests with Vitest in TypeScript\nDESCRIPTION: A TypeScript implementation for running snapshot tests on Storybook components using Vitest. This configuration provides type definitions for story files and uses import.meta.glob with TypeScript generics to properly type-check story imports. It sets up snapshot tests in a jsdom environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @vitest-environment jsdom\n\n// Replace your-framework with one of the supported Storybook frameworks (react, vue3)\nimport type { Meta, StoryFn } from '@storybook/your-framework';\n\nimport path from 'path';\nimport { describe, expect, test } from 'vitest';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\ntype StoryFile = {\n  default: Meta;\n  [name: string]: StoryFn | Meta;\n};\n\nconst compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your story files\n  const storyFiles = Object.entries(\n    import.meta.glob<StoryFile>('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {\n      eager: true,\n    })\n  );\n\n  return storyFiles.map(([filePath, storyFile]) => {\n    const storyDir = path.dirname(filePath);\n    const componentName = path.basename(filePath).replace(/\\.(stories|story)\\.[^/.]+$/, '');\n    return { filePath, storyFile, componentName, storyDir };\n  });\n}\n\ndescribe('Stories Snapshots', () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        test(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          // Defines the custom snapshot path location and file name\n          const customSnapshotPath = `./__snapshots__/${componentName}.spec.ts.snap`;\n          await expect(document.body.firstChild).toMatchFileSnapshot(customSnapshotPath);\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Story with TypeScript 4.9+\nDESCRIPTION: Shows how to configure a Storybook story using TypeScript 4.9+ with the satisfies operator for improved type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  component: MyComponent,\n  title: 'components/MyComponent/MyComponent',\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    something: 'Something else',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Vue 3 Component Story with TypeScript in Storybook\nDESCRIPTION: A complete example of how to set up a Storybook story for a Vue 3 component using TypeScript. It demonstrates importing the component, defining metadata, creating a Story type, and implementing a render function with proper component setup and template binding.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport YourComponent from './YourComponent.vue';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n};\n\n//👇 This default export determines where your story goes in the story list\nexport default meta;\ntype Story = StoryObj<typeof YourComponent>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { YourComponent },\n    setup() {\n      return { args };\n    },\n    template: '<YourComponent v-bind=\"args\" />',\n  }),\n  args: {\n    //👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in Solid with TypeScript 4.9\nDESCRIPTION: Implementation of Storybook stories for a List component in SolidJS using TypeScript 4.9 with the satisfies operator. It demonstrates how to create properly typed stories with component composition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * Seehttps://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate: Story = {\n  render: ({ items, ...args }) => {\n    return (\n      <List>\n        {items.map((item) => (\n          <ListItem {...item} />\n        ))}\n      </List>\n    );\n  },\n};\n\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [{ ...Unchecked.args }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React-Vite in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook for a React project using Vite in JavaScript. It exports a default configuration object specifying the framework name and leaving room for additional options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/react-vite',\n    options: {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Stories with Storybook CSF Syntax (TypeScript)\nDESCRIPTION: This Svelte/TypeScript code uses the CSF block syntax to define Button stories for Storybook. It relies on '@storybook/addon-svelte-csf', importing the Button.svelte component, and defines three stories through the <Story> element with type support. This approach is idiomatic to Svelte users wanting TypeScript type checking in stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n  });\\n</script>\\n\\n<Story\\n  name=\"Primary\"\\n  args={{\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  }}\\n/>\\n\\n<Story\\n  name=\"Secondary\"\\n  args={{\\n    backgroundColor: '#ff0',\\n    label: '😄👍😍💯',\\n  }}\\n/>\\n\\n<Story\\n  name=\"Tertiary\"\\n  args={{\\n    backgroundColor:'#ff0',\\n    label: '📚📕📈🤓',\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Storybook Story with Figma Link in JavaScript\nDESCRIPTION: Defines a Storybook story for a Vue component (`MyComponent.vue`) using JavaScript. It imports the Vue component, specifies it in the default export's `component` property, and exports an `Example` story which includes parameters linking to a Figma design file. Requires `@storybook/vue3` (or appropriate version) and the Vue component file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"MyComponent.stories.js\" renderer=\"vue\" language=\"js\"\nimport MyComponent from './MyComponent.vue';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nexport default {\n  component: MyComponent,\n};\n\nexport const Example = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Svelte CSF Format (Script Module)\nDESCRIPTION: Shows how to configure component-level parameters in Svelte using the CSF format with a script module. Uses the defineMeta helper from '@storybook/addon-svelte-csf' to create parameters for the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Creates specific parameters at the component level\n    parameters: {\n      backgrounds: {\n        default: 'dark',\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Storybook Builder API Interface\nDESCRIPTION: TypeScript interface defining the required methods and properties for a Storybook builder.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Builder {\n  start: (args: BuilderStartArgs) => Promise<void>;\n  build: (args: BuilderBuildArgs) => Promise<void>;\n  bail: (e?: Error) => Promise<void>;\n  corePresets?: string[];\n  overridePresets?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Storybook Deployment to GitHub Pages\nDESCRIPTION: This GitHub Actions workflow configuration automates the process of building and publishing a Storybook instance to GitHub Pages. The workflow runs when code is pushed to a specified branch, sets up the necessary permissions, prepares a Node.js environment, and uses a specialized action to handle the build and deployment of Storybook. It can be customized with different installation and build commands.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/ghp-github-action.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Workflow name\nname: Build and Publish Storybook to GitHub Pages\n\non:\n  # Event for the workflow to run on\n  push:\n    branches:\n      - 'your-branch-name' # Replace with the branch you want to deploy from\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\n# List of jobs\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    # Job steps\n    steps:\n      # Manual Checkout\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      # Set up Node\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n      #👇 Add Storybook build and deploy to GitHub Pages as a step in the workflow\n      - uses: bitovi/github-actions-storybook-to-github-pages@v1.0.3\n        with:\n          install_command: yarn install # default: npm ci\n          build_command: yarn build-storybook # default: npm run build-storybook\n          path: storybook-static # default: dist/storybook\n          checkout: false # default: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Svelte CSF Component Stories\nDESCRIPTION: This snippet shows how to create a Storybook story for a Svelte component using the Svelte CSF format. It uses defineMeta from the Svelte CSF addon and demonstrates how to implement a play function for simulating user interactions on the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"ExampleStory\"\n  play={async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet configures Storybook using TypeScript, importing the `StorybookConfig` type for better type safety. It sets up a configuration object specifying the framework and recognizes custom story files through an asynchronous `experimental_indexers` function. It extends existing indexers with a custom indexer targeting `.custom-stories` file pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/your-framework';\\n\\nconst config: StorybookConfig = {\\n  framework: '@storybook/your-framework',\\n  stories: [\\n    '../src/**/*.mdx',\\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',\\n    // 👇 Make sure files to index are included in `stories`\\n    '../src/**/*.custom-stories.@(js|jsx|ts|tsx)',\\n  ],\\n  experimental_indexers: async (existingIndexers) => {\\n    const customIndexer = {\\n      test: \\.custom-stories\\.[tj]sx?$/,\\n      createIndex: async (fileName) => {\\n        // See API and examples below...\\n      },\\n    };\\n    return [...existingIndexers, customIndexer];\\n  },\\n};\\n\\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Storybook in React (JavaScript)\nDESCRIPTION: This snippet shows how to configure a Storybook setup for a Button component in React using JavaScript. It imports the Button component, uses the withActions decorator, and sets up parameters for action handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nimport { withActions } from 'storybook/actions/decorator';\n\nexport default {\n  component: Button,\n  parameters: {\n    actions: {\n      handles: ['mouseover', 'click .btn'],\n    },\n  },\n  decorators: [withActions],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with TypeScript 4.9 Satisfies Operator\nDESCRIPTION: Framework-agnostic Button stories implementation using TypeScript 4.9's satisfies operator for improved type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\n/**\n * Button stories\n * These stories showcase the button\n */\nconst meta = {\n  component: Button,\n  parameters: {\n    docs: {\n      description: {\n        component: 'Another description, overriding the comments',\n      },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Primary Button\n * This is the primary button\n */\nexport const Primary: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Another description on the story, overriding the comments',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in React with TypeScript\nDESCRIPTION: Shows how to create a List component story in React using standard TypeScript. This example implements type safety through explicit type annotations with Meta and StoryObj generics.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const ManyItems: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem {...Selected.args} />\n      <ListItem {...Unselected.args} />\n      <ListItem {...Unselected.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Testing React Storybook Components with Jest\nDESCRIPTION: This snippet demonstrates how to set up a Jest test for a React Storybook component. It imports the necessary dependencies, composes the stories, and runs a test that executes the play function of the Primary story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-with-play-function.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@jest/globals';\n// 👉 Using Next.js? Import from @storybook/nextjs instead\nimport { composeStories } from '@storybook/react';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('renders and executes the play function', async () => {\n  // Mount story and run interactions\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Angular Stories with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for an Angular component with an interactive play function. It shows how to use userEvent and within utilities to interact with elements in the component by typing text and clicking a button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const ExampleStory: Story = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in React with TypeScript\nDESCRIPTION: This code shows how to create a Storybook story for a Histogram component in React using TypeScript. It uses type annotations to ensure type safety for the component and story objects, defining proper types for both the meta configuration and story object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Histogram } from './Histogram';\n\nconst meta: Meta<typeof Histogram> = {\n  component: Histogram,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Histogram>;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Snapshot Tests with Jest - TypeScript\nDESCRIPTION: This TypeScript snippet configures Jest snapshot testing for Storybook stories, providing enhanced typing for Storybook Meta and StoryFn. It uses file globbing to discover stories, strong typing to ensure correct story composition, and structured snapshot test generation. Required dependencies include 'path', 'glob', '@jest/globals', and typed Storybook modules matching '@storybook/your-framework' and '@storybook/your-renderer'. Input files are expected to follow Storybook conventions, and snapshot assertion is run against rendered output. Throws if no stories are found per module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/snapshot-tests-portable-stories.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with one of the supported Storybook frameworks (react, vue3)\\nimport type { Meta, StoryFn } from '@storybook/your-framework';\\n\\nimport path from 'path';\\nimport * as glob from 'glob';\\n\\nimport { describe, test, expect } from '@jest/globals';\\n\\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\\nimport { composeStories } from '@storybook/your-renderer';\\n\\ntype StoryFile = {\\n  default: Meta;\\n  [name: string]: StoryFn | Meta;\\n};\\n\\nconst compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {\\n  try {\\n    return composeStories(entry);\\n  } catch (e) {\\n    throw new Error(\\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\\n    );\\n  }\\n};\\n\\nfunction getAllStoryFiles() {\\n  // Place the glob you want to match your stories files\\n  const storyFiles = glob.sync(\\n    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),\\n  );\\n\\n  return storyFiles.map((filePath) => {\\n    const storyFile = require(filePath);\\n    const storyDir = path.dirname(filePath);\\n    const componentName = path.basename(filePath).replace(/\\\\.(stories|story)\\\\.[^/.]+$/, '');\\n\\n    return { filePath, storyFile, storyDir, componentName };\\n  });\\n}\\n\\ndescribe('Stories Snapshots', () => {\\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\\n    const meta = storyFile.default;\\n    const title = meta.title || componentName;\\n\\n    describe(title, () => {\\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\\n\\n      if (stories.length <= 0) {\\n        throw new Error(\\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,\\n        );\\n      }\\n\\n      stories.forEach(({ name, story }) => {\\n        test(name, async () => {\\n          await story.run();\\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\\n          await new Promise((resolve) => setTimeout(resolve, 1));\\n          expect(document.body.firstChild).toMatchSnapshot();\\n        });\\n      });\\n    });\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing React Storybook Stories with TypeScript\nDESCRIPTION: Standard TypeScript implementation of LoginForm stories for React in Storybook. Defines properly typed stories with a play function for testing user interactions with email input, password input, and form submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { userEvent, within, expect } from 'storybook/test';\n\nimport { LoginForm } from './LoginForm';\n\nconst meta: Meta<typeof LoginForm> = {\n  component: LoginForm,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof LoginForm>;\n\nexport const EmptyForm: Story = {};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing API Mocks in Angular Storybook Stories\nDESCRIPTION: Demonstrates how to mock REST API endpoints in Angular Storybook stories using MSW. Includes examples for successful response with test data and error response with delay.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { http, HttpResponse, delay } from 'msw';\n\nimport { DocumentScreen } from './YourPage.component';\n\nconst meta: Meta<DocumentScreen> = {\n  component: DocumentScreen,\n};\n\nexport default meta;\ntype Story = StoryObj<DocumentScreen>;\n\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\nexport const MockedSuccess: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        http.get('https://your-restful-endpoint/', () => {\n          return HttpResponse.json(TestData);\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        http.get('https://your-restful-endpoint', async () => {\n          await delay(800);\n          return new HttpResponse(null, {\n            status: 403,\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Icon-only Button in TypeScript React\nDESCRIPTION: Demonstrates how to create an icon-only button by removing the text and setting the padding prop to 'small'. This ensures the button maintains a square shape.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button padding=\"small\">\n  <FaceHappyIcon />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Button Stories with TypeScript\nDESCRIPTION: Sets up a Button component story for Angular using TypeScript with strongly typed Meta and Story objects. Includes documentation parameters with autoplay enabled.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      story: { autoplay: true },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Storybook Story with Figma Link in JavaScript\nDESCRIPTION: Defines a Storybook story for a React component (`MyComponent`) using JavaScript. It imports the component, sets it in the default export's `component` property, and exports an `Example` story with parameters linking to a Figma design file. This setup requires `@storybook/react` and the React component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"MyComponent.stories.js|jsx\" renderer=\"react\" language=\"js\"\nimport { MyComponent } from './MyComponent';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nexport default {\n  component: MyComponent,\n};\n\nexport const Example = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Story Format Setup with TypeScript\nDESCRIPTION: This snippet illustrates setting up a Svelte component for Storybook using TypeScript. It configures accessibility parameters and global settings for manual a11y checks, requiring Storybook's Svelte integration and Axe-core.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport MyComponent from './MyComponent.svelte';\n\nconst meta = {\n  component: MyComponent,\n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      manual: true,\n    },\n  },\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Highlight Channel in Vue (TypeScript)\nDESCRIPTION: Demonstrates using the highlight channel in Vue with TypeScript. This example imports types from @storybook/vue3-vite and creates a story with a decorator that highlights specific elements with custom styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-addon-custom-style.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const StyledHighlight: Story = {\n  decorators: [\n    () => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n        color: 'blue',\n        style: 'double', // 'dotted' | 'dashed' | 'solid' | 'double'\n      });\n      return {\n        template: '<story />',\n      };\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Solid with JavaScript\nDESCRIPTION: This snippet sets up the preview configuration for Solid in Storybook using JavaScript. It defines a decorator that wraps each story with a div element having a 3em margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook's preview that imports the Preview type from the framework-specific Storybook package. It defines control matchers for colors and dates and sets up a custom documentation container using the ExampleContainer component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-docs-container.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\n\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { DocsContainer } from '@storybook/addon-docs/blocks';\n\nconst ExampleContainer = ({ children, ...props }) => {\n  return <DocsContainer {...props}>{children}</DocsContainer>;\n};\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      container: ExampleContainer,\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in React with TypeScript\nDESCRIPTION: Implementation of Storybook stories for a List component in React using standard TypeScript. It demonstrates how to structure typed stories with component composition and reusable templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * Seehttps://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate: Story = {\n  render: ({ items, ...args }) => {\n    return (\n      <List>\n        {items.map((item) => (\n          <ListItem {...item} />\n        ))}\n      </List>\n    );\n  },\n};\n\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [{ ...Unchecked.args }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte with JavaScript (CSF)\nDESCRIPTION: This snippet shows how to create Storybook stories for a Svelte Button component using the Component Story Format (CSF) in JavaScript. It exports default metadata and defines primary and secondary stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata and Story Type in TypeScript\nDESCRIPTION: This snippet defines the metadata for a Storybook story, including component details and argTypes. It also exports the story type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default meta;\ntype Story = StoryObj;\n```\n\n----------------------------------------\n\nTITLE: Overriding Next.js Navigation Defaults in Storybook Preview\nDESCRIPTION: This code demonstrates how to override default navigation properties and mock navigation methods in the Storybook preview configuration file. It uses parameters and the beforeEach hook to customize the navigation behavior.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// .storybook/preview.ts\nimport { Preview } from '@storybook/react';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getRouter } from '@storybook/nextjs/navigation.mock';\n\nconst preview: Preview = {\n  parameters: {\n    nextjs: {\n      // 👇 Override the default navigation properties\n      navigation: {\n        pathname: '/app/',\n      },\n    },\n  },\n  async beforeEach() {\n    // 👇 Manipulate the default navigation method mocks\n    getRouter().push.mockImplementation(() => {\n      /* ... */\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Svelte using Svelte CSF with TypeScript 4.9+\nDESCRIPTION: Creates a ButtonGroup story in Svelte using Svelte CSF format with TypeScript 4.9+. Uses the defineMeta helper to define a story that composes Button stories into a ButtonGroup with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import ButtonGroup from './ButtonGroup.svelte';\n\n  //👇 Imports the Button stories\n  import * as ButtonStories from './Button.stories.svelte';\n\n  const { Story } = defineMeta({\n    component: ButtonGroup,\n  });\n</script>\n\n<Story\n  name=\"Pair\"\n  args={{\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Template Components for Story Generation\nDESCRIPTION: Demonstrates creating a template component for generating stories, enabling better args reuse and control through the Controls addon in composite components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/stories-for-multiple-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"list-story-template.md\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook List Stories using TypeScript with Lit and Web Components\nDESCRIPTION: This TypeScript snippet defines List stories in Storybook using Lit and web components. It sets up a meta configuration and creates a ListTemplate for Easy and OneItem stories, utilizing 'repeat' from Lit to render items. The snippet employs TypeScript types like Meta and StoryObj from Storybook's web-components API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\nimport { repeat } from 'lit/directives/repeat.js';\n\nconst meta: Meta = {\n  title: 'List',\n  component: 'demo-list',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate = {\n  render: ({ items, ...args }) => {\n    return html`\n      <demo-list>\n        ${repeat(items, (item) => html`<demo-list-item>${item}</demo-list-item>`)}\n      </demo-list>\n    `;\n  },\n};\n\nexport const Empty: Story = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem: Story = {\n  ...ListTemplate,\n  args: {\n    items: [\n      {\n        ...Unchecked.args,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Component Metadata with Web Components in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to define metadata for Storybook using web components. It imports the 'Meta' type from Storybook's web component library and sets up a 'demo-example' component with configurations that enable interactive numeric input for the 'value' property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      control: {\n        type: 'number',\n        min: 0,\n        max: 100,\n        step: 10,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the main Storybook configuration file using TypeScript. It defines the framework, story file patterns, and includes a custom Vite configuration function. The configuration is exported as a StorybookConfig object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-ts-configure.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async viteFinal(config, options) {\n    // Add your configuration here\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggleable Addon Panel in Storybook with React\nDESCRIPTION: This code creates a custom addon panel component that can be toggled on and off using Storybook's globals state. It uses the useGlobals hook to access and update the global state, and renders a button that toggles the panel's visibility based on a specific global parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useglobal.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\n\nimport { AddonPanel, Button } from 'storybook/internal/components';\n\nimport { useGlobals } from 'storybook/manager-api';\n\nexport const Panel = () => {\n  const [globals, updateGlobals] = useGlobals();\n\n  const isActive = globals['my-param-key'] || false; // 👈 Sets visibility based on the global value.\n\n  return (\n    <AddonPanel key=\"custom-panel\" active={isActive}>\n      <Button onClick={() => updateGlobals({ ['my-param-key']: !isActive })}>\n        {isActive ? 'Hide the addon panel' : 'Show the panel'}\n      </Button>\n    </AddonPanel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking GraphQL Queries in Svelte Storybook Stories\nDESCRIPTION: This snippet shows how to set up Storybook stories for a Svelte component, mocking GraphQL queries using MSW. It includes examples for both successful and error responses.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport { graphql, HttpResponse, delay } from 'msw';\n\nimport MockApolloWrapperClient from './MockApolloWrapperClient.svelte';\nimport DocumentScreen from './YourPage.svelte';\n\nconst meta = {\n  component: DocumentScreen,\n  decorators: [() => MockApolloWrapperClient],\n} satisfies Meta<typeof DocumentScreen>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n//👇The mocked data that will be used in the story\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\nexport const MockedSuccess: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', () => {\n          return HttpResponse.json({\n            data: {\n              allInfo: {\n                ...TestData,\n              },\n            },\n          });\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError: Story = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', async () => {\n          await delay(800);\n          return HttpResponse.json({\n            errors: [\n              {\n                message: 'Access denied',\n              },\n            ],\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MSW Addon in Storybook\nDESCRIPTION: Setup code to initialize the MSW addon and apply it globally to all stories using a project-level loader.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initialize, mswLoader } from 'msw-storybook-addon';\n\ninitialize();\n\nexport default {\n  loaders: [mswLoader],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring LCOV Coverage Report Generation\nDESCRIPTION: Command to generate LCOV format coverage reports from Storybook's JSON coverage output\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx nyc report --reporter=lcov --temp-dir coverage/storybook\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in JavaScript for SolidJS\nDESCRIPTION: Creates a Storybook story for a SolidJS Button component using JavaScript. Defines three story variations with different labels, leveraging SolidJS's JSX-like syntax to render the components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"Button\" />,\n};\n\nexport const Secondary = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />,\n};\n\nexport const Tertiary = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: React Component Story Implementation (JavaScript)\nDESCRIPTION: Shows how to create Storybook stories for React components using JavaScript. Includes a basic story and one with props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const Basic = {};\n\nexport const WithProp = {\n  render: () => <MyComponent prop=\"value\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Checking Options in Storybook\nDESCRIPTION: Sets options for the fork-ts-checker-webpack-plugin when TypeScript checking is enabled in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    check: true,\n    checkOptions: {\n      typescript: {\n        configOverwrite: {\n          include: [\"src/**/*\"]\n        }\n      }\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in TypeScript\nDESCRIPTION: This snippet defines the main configuration for Storybook in TypeScript. It imports the StorybookConfig type, specifies the framework, story file patterns, and build test options. The framework should be replaced with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-mdx.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableMDXEntries: false,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in React with TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a React Button component using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {\n  render: () => <Button label=\"Hello\" onClick={action('clicked')} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: This snippet is the TypeScript version of the Storybook configuration, defining the same settings and behaviors as the JavaScript version but utilizing TypeScript's type support. It specifies a framework, story locations, and adds a script to the HTML if an analytics ID is present. Import of 'StorybookConfig' type is necessary.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-body.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  previewBody: (body) => `\n    ${body}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Button Component with Storybook\nDESCRIPTION: This code demonstrates how to test a Vue Button component using Storybook's composeStories utility. It imports stories from a Button.stories file, composes them for testing, and runs tests to verify the component renders correctly with both default and custom props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-stories.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from 'vitest';\nimport { screen } from '@testing-library/vue';\nimport { composeStories } from '@storybook/vue3';\n\n// Import all stories and the component annotations from the stories file\nimport * as stories from './Button.stories';\n\n// Every component that is returned maps 1:1 with the stories,\n// but they already contain all annotations from story, meta, and project levels\nconst { Primary, Secondary } = composeStories(stories);\n\ntest('renders primary button with default args', async () => {\n  await Primary.run();\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  // You can override props by passing them in the context argument of the run function\n  await Primary.run({ args: { ...Primary.args, children: 'Hello world' } });\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Common Framework in TypeScript\nDESCRIPTION: This snippet sets up the Storybook configuration for a generic framework. It defines the framework, story patterns, and TypeScript settings. The framework needs to be specified by replacing 'your-framework' with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-extend-ts-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    check: false,\n    checkOptions: {},\n    skipCompiler: false,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a Solid Component - TypeScript\nDESCRIPTION: This TypeScript snippet details the configuration and rendering of a Storybook story for a SolidJS component, with explicit meta typing and use of argTypes for controls. The render function leverages Solid's createSignal and createEffect to update a prop reactively. Requires storybook-solidjs, solid-js, and an understanding of reactive prop passing. Inputs are driven by args, affecting the computed output via the reactive system.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSignal, createEffect } from 'solid-js';\\nimport type { Meta, StoryObj } from 'storybook-solidjs';\\n\\nimport { YourComponent } from './your-component';\\n\\nconst meta: Meta<typeof YourComponent> = {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes with options\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<typeof YourComponent>;\\n\\nconst someFunction = (valuePropertyA, valuePropertyB) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory: Story = {\\n  render: (args) => {\\n    const [someFunctionResult, setSomeFunctionResult] = createSignal();\\n\\n    //\\uD83D\\uDC49 Assigns the function result to a signal\\n    createEffect(() => {\\n      setSomeFunctionResult(someFunction(args.propertyA, args.propertyB));\\n    });\\n\\n    return <YourComponent {...args} someProperty={someFunctionResult()} />;\\n  },\\n  args: {\\n    propertyA: 'Item One',\\n    propertyB: 'Another Item One',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Accessibility Testing (TypeScript)\nDESCRIPTION: TypeScript implementation of Storybook test runner configuration with proper type definitions. Sets up automated accessibility testing using axe-playwright with pre-visit and post-visit hooks for axe injection and accessibility checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-configure.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\nimport { getStoryContext } from '@storybook/test-runner';\n\nimport { injectAxe, checkA11y, configureAxe } from 'axe-playwright';\n\n/*\n * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api\n * to learn more about the test-runner hooks API.\n */\nconst config: TestRunnerConfig = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await getStoryContext(page, context);\n\n    // Apply story-level a11y rules\n    await configureAxe(page, {\n      rules: storyContext.parameters?.a11y?.config?.rules,\n    });\n\n    const element = storyContext.parameters?.a11y?.element ?? 'body';\n    await checkA11y(page, element, {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Simulating Button Click with User Event in Storybook JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates simulating a user click on a button within a Storybook `play` function. It uses `canvas.getByRole` from `@testing-library/dom` to find a button element by its accessible role and name (matching the regex `/ button label/i`), and then employs `userEvent.click` from `@testing-library/user-event` to trigger the click event asynchronously. This is often used for interaction testing and demonstrating component behavior in Storybook, with results potentially logged in the Actions panel as indicated by the preceding comment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\nawait userEvent.click(canvas.getByRole('button', { name: / button label/i }));\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in JavaScript for Web Components\nDESCRIPTION: JavaScript implementation of accessibility testing configuration for web components in Storybook. Defines rules for autocomplete validation and image alt text checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Development Server with HMR Configuration\nDESCRIPTION: Creates and configures a Vite development server with middleware mode enabled and Hot Module Replacement (HMR) settings. Takes extended options and a dev server instance as parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-dev-server.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'vite';\n\nexport async function createViteServer(options: ExtendedOptions, devServer: Server) {\n  const { port } = options;\n  // Remainder server configuration\n\n  // Creates the server.\n  return createServer({\n    // The server configuration goes here\n    server: {\n      middlewareMode: true,\n      hmr: {\n        port,\n        server: devServer,\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SolidJS Storybook Story with Figma Link in JavaScript\nDESCRIPTION: Defines a Storybook story for a SolidJS component (`MyComponent`) using JavaScript. It imports the component, specifies it in the default export's `component` property, and exports an `Example` story which includes parameters linking to a Figma design file. Requires `storybook-solidjs` and the SolidJS component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"MyComponent.stories.js|jsx\" renderer=\"solid\" language=\"js\"\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const Example = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining React List Stories in TypeScript 4.9 with satisfies operator\nDESCRIPTION: Implements a Storybook story for a React List component using TypeScript 4.9 with the satisfies operator. It includes type definitions and an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Mocking GraphQL Queries in Vue Storybook Stories\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a Vue component, mocking GraphQL queries using MSW. It includes examples for both successful and error responses.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql, HttpResponse, delay } from 'msw';\n\nimport WrapperComponent from './ApolloWrapperClient.vue';\nimport DocumentScreen from './YourPage.vue';\n\nexport default {\n  component: DocumentScreen,\n  render: () => ({\n    components: { DocumentScreen, WrapperComponent },\n    template: '<WrapperComponent><DocumentScreen /></WrapperComponent>',\n  }),\n};\n\n//👇The mocked data that will be used in the story\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\nexport const MockedSuccess = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', () => {\n          return HttpResponse.json({\n            data: {\n              allInfo: {\n                ...TestData,\n              },\n            },\n          });\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('AllInfoQuery', async () => {\n          await delay(800);\n          return HttpResponse.json({\n            errors: [\n              {\n                message: 'Access denied',\n              },\n            ],\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in React with TypeScript 4.9+\nDESCRIPTION: Demonstrates creating a List component story in React using TypeScript 4.9 with the satisfies operator. This approach provides type safety while allowing type inference for the meta object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ManyItems: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem {...Selected.args} />\n      <ListItem {...Unselected.args} />\n      <ListItem {...Unselected.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Expanded Controls Mode Globally in Storybook\nDESCRIPTION: Shows how to enable expanded mode for controls globally in Storybook. This setting displays full documentation for each property in the Controls panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  controls: { expanded: true },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Standard CSF Svelte Storybook Stories with TypeScript\nDESCRIPTION: Shows how to add decorators to Svelte components using the standard CSF with TypeScript. This example applies a MarginDecorator component as a decorator to the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\nimport MarginDecorator from './MarginDecorator.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  decorators: [() => MarginDecorator],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Storybook Addon Configuration\nDESCRIPTION: Example showing incorrect configuration where an addon is registered but not listed in package.json dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in .storybook/main.js\nmodule.exports = {\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions', // <-- this addon is not listed in the package.json\n  ],\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@storybook/addon-links\": \"0.0.1\",\n    \"@storybook/addon-essentials\": \"0.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: This snippet defines the Storybook configuration using TypeScript. It imports the StorybookConfig type, sets the framework, specifies story file patterns, and configures webpack to use an alias for the src directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution-atsign-import.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  webpackFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve.alias,\n        '@': path.resolve(__dirname, '../src'),\n      };\n    }\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Refs in main.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the `.storybook/main.js` file. It sets the framework (requiring replacement with the actual framework used), defines the paths to story files using glob patterns, and utilizes the `refs` property to link to an external Storybook instance (the Storybook Design System in this example), enabling Storybook Composition. The `expanded` and `sourceUrl` options within the ref are optional.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    'design-system': {\n      title: 'Storybook Design System',\n      url: 'https://master--5ccbc373887ca40020446347.chromatic.com/',\n      expanded: false, // Optional, true by default\n      sourceUrl: 'https://github.com/storybookjs/storybook', // Optional\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Migration Codemods\nDESCRIPTION: The 'migrate' command applies codemod transformations to make your Storybook project compatible with specific versions. Options include listing available codemods, performing a dry run, specifying file patterns, setting parsers, and renaming affected files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nstorybook[@version] migrate [codemod] [options]\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in HTML with JavaScript\nDESCRIPTION: This code creates a Storybook story for a Histogram component using the HTML renderer with JavaScript. It uses a render function to call createHistogram with the provided args, demonstrating how to use render functions for HTML-based components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHistogram } from './Histogram';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Histogram',\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Default = {\n  render: (args) => createHistogram(args),\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story with Svelte Using CSF in TypeScript\nDESCRIPTION: Demonstrates how to implement a Button story in Svelte using TypeScript and the Component Story Format. This example uses render functions to control how the component renders with specific props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      primary: true,\n      label: 'Button',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Button Stories in TypeScript\nDESCRIPTION: Demonstrates how to set up a Button component story for Angular using TypeScript with proper type definitions and metadata configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      source: { language: 'tsx' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Test Files for CSF Factories\nDESCRIPTION: Demonstrates how to update a test file to work with CSF Factories by removing the composeStories import and directly using the imported stories. The Story object provides run and Component properties that can be used in tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nimport { test, expect } from 'vitest';\nimport { screen } from '@testing-library/react';\n- import { composeStories } from '@storybook/react';\n \n// Import all stories from the stories file\nimport * as stories from './Button.stories';\n \n+ const { Primary } = stories;\n- const { Primary } = composeStories(stories);\n \ntest('renders primary button with default args', async () => {\n  // The run function will mount the component and run all of Storybook's lifecycle hooks\n  await Primary.run();\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in React with TypeScript 4.9+ Syntax\nDESCRIPTION: This snippet shows how to create Storybook stories for a Button component in React using TypeScript 4.9+ with the 'satisfies' operator. It properly types the meta object and story with TypeScript interfaces.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button primary label=\"Button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Storybook Main Configuration\nDESCRIPTION: JavaScript configuration file for Storybook that defines the framework, story file patterns, and webpack configuration options. Allows for environment-specific webpack modifications.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-webpack-final.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      // Modify config for development\n    }\n    if (configType === 'PRODUCTION') {\n      // Modify config for production\n    }\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Solid Button Story - Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a Button story for Storybook using the Solid framework by importing Meta from 'storybook-solidjs' and exporting the Button as the component in the meta object. The Button component and Meta generic provide strong typing for the exported story definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from 'storybook-solidjs';\\n\\nimport { Button } from './Button';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript 4.9 and Satisfies in SolidJS\nDESCRIPTION: SolidJS Storybook story for TodoItem using TypeScript 4.9 with the 'satisfies' operator. Defines component and render function in meta, and a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { TodoItem } from './TodoItem';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nconst meta = {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,\n} satisfies Meta<typeof TodoItem>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Angular Gizmo Component\nDESCRIPTION: This TypeScript code defines Storybook controls for an Angular Gizmo component. It configures various control types including boolean, number, range, object, file, radio, checkbox, select, text, color, and date controls with specific parameters and constraints.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Gizmo } from './Gizmo.component';\n\nconst meta: Meta<Gizmo> = {\n  component: Gizmo,\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with React Hooks in TypeScript 4.9+\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Button component in React using hooks with TypeScript 4.9+ syntax (satisfies operator). It shows how to manage state with hooks to create an interactive button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\n\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n * Example Button story with React Hooks.\n * See note below related to this example.\n */\nconst ButtonWithHooks = () => {\n  // Sets the hooks for both the label and primary props\n  const [value, setValue] = useState('Secondary');\n  const [isPrimary, setIsPrimary] = useState(false);\n\n  // Sets a click handler to change the label's value\n  const handleOnChange = () => {\n    if (!isPrimary) {\n      setIsPrimary(true);\n      setValue('Primary');\n    }\n  };\n  return <Button primary={isPrimary} onClick={handleOnChange} label={value} />;\n};\n\nexport const Primary = {\n  render: () => <ButtonWithHooks />,\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Stories for MyForm in JavaScript\nDESCRIPTION: This snippet creates Storybook stories for the MyForm component in JavaScript. It includes tests for unauthenticated scenarios and navigation actions using Next.js mock functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-mock.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\nimport { redirect, getRouter } from '@storybook/nextjs/navigation.mock';\n\nimport MyForm from './my-form';\n\nexport default {\n  component: MyForm,\n  parameters: {\n    nextjs: {\n      // 👇 As in the Next.js application, next/navigation only works using App Router\n      appDirectory: true,\n    },\n  },\n};\n\nexport const Unauthenticated = {\n  async play() {\n    // 👇 Assert that your component called redirect()\n    await expect(redirect).toHaveBeenCalledWith('/login', 'replace');\n  },\n};\n\nexport const GoBack = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n    const backBtn = await canvas.findByText('Go back');\n\n    await userEvent.click(backBtn);\n    // 👇 Assert that your component called back()\n    await expect(getRouter().back).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Svelte Storybook Stories with CSF Format\nDESCRIPTION: Svelte Component Story Format (CSF) implementation for a LoginForm component. Uses the defineMeta helper from Svelte's Storybook addon to create stories with a play function that tests user interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n  import { expect, userEvent, within } from 'storybook/test';\n\n  import LoginForm from './LoginForm.svelte';\n\n  const { Story } = defineMeta({\n    component: LoginForm,\n  });\n</script>\n\n<Story name=\"EmptyForm\" />\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"FilledForm\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with TypeScript\nDESCRIPTION: Implements Storybook stories for a Svelte Button component using standard TypeScript. Defines typed component metadata and a primary button story with customized name and arguments configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in JavaScript\nDESCRIPTION: This snippet demonstrates the basic configuration for Storybook in a `.storybook/main.js` file. It exports an object defining the `framework` (which needs replacement with the actual framework being used, like '@storybook/react-webpack5'), the glob patterns for locating `stories` (including MDX and various JS/TS formats), and enables the `developmentModeForBuild` feature. This feature optimizes the build process for development environments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-development-mode-for-build.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  features: {\n    developmentModeForBuild: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Babel Configuration in Storybook (JavaScript/TypeScript)\nDESCRIPTION: This code snippet demonstrates how to customize Storybook's Babel configuration by modifying the 'babel' function in the main.js or main.ts file. It shows examples of adding plugins, presets, and overriding the entire configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-babel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  babel: async (config) => {\n    return {\n      ...config,\n      plugins: [...config.plugins, 'plugin-name'],\n    };\n  },\n};\n\n// Or\n\nexport default {\n  babel: (config) => {\n    config.plugins.push('plugin-name');\n    return config;\n  },\n};\n\n// Or\n\nexport default {\n  babel: () => {\n    return {\n      presets: ['@babel/preset-env'],\n      plugins: ['plugin-name'],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Reusing Story Args with Object Spread\nDESCRIPTION: Demonstrates how to reuse args between stories using JavaScript object spread syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PrimaryLongName = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports a default configuration object that specifies the framework, story file locations, and build options. The framework should be replaced with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-docgen.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableDocgen: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Web Component Button in JavaScript\nDESCRIPTION: This JavaScript snippet exports meta data for a web components-based Button story in Storybook. The component is referred to by its tag name ('demo-button'), and argTypes define both text and advanced controls, some of which are shown conditionally. Works with Storybook's web-components renderer, and requires the 'demo-button' custom element to be defined and registered.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport default {\\n  component: 'demo-button',\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Story in TypeScript 4.9+ for React\nDESCRIPTION: This snippet defines a Storybook story for a List component in TypeScript 4.9+ for React. It uses the 'satisfies' operator for type inference and imports the Unchecked story from ListItem.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OneItem: Story = {\n  args: {\n    children: <Unchecked {...Unchecked.args} />,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Preact with JavaScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a Button component in Preact using JavaScript. It imports the h function from Preact and defines a primary button story with specific props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsx h */\nimport { h } from 'preact';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => <Button primary label=\"Button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Sandbox Template (TypeScript)\nDESCRIPTION: Example of adding a new sandbox template to Storybook's CLI. This defines a Create React App template with JavaScript, including the script to generate the application environment and expected configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n'cra/default-js': {\n    name: 'Create React App (Javascript)',\n    script: 'npx create-react-app .',\n    inDevelopment: true,\n    expected: {\n      framework: '@storybook/cra',\n      renderer: '@storybook/react',\n      builder: '@storybook/builder-webpack5',\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Storybook CLI Options Usage Examples\nDESCRIPTION: Various examples of using Storybook CLI options, including setting port, host, configuration directory, log level, HTTPS, and other features.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstorybook dev --help\nstorybook dev -V\nstorybook dev -p 9009\nstorybook dev --exact-port 9009\nstorybook dev -h my-host.com\nstorybook dev -c .storybook\nstorybook dev --loglevel warn\nstorybook dev --https\nstorybook dev --ssl-ca my-certificate\nstorybook dev --ssl-cert my-ssl-certificate\nstorybook dev --ssl-key my-ssl-key\nstorybook dev --smoke-test\nstorybook dev --ci\nstorybook dev --no-open\nstorybook dev --quiet\nstorybook dev --debug\nstorybook dev --debug-webpack\nstorybook dev --stats-json /tmp/stats\nstorybook dev --no-version-updates\nstorybook dev --docs\nstorybook dev --initial-path=/docs/getting-started--docs\nstorybook dev --preview-url=http://localhost:1337/external-iframe.html\nstorybook dev --force-build-preview\nstorybook dev --disable-telemetry\nstorybook dev --enable-crash-reports\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Components Story with TypeScript in Storybook\nDESCRIPTION: A TypeScript example for setting up a Storybook story for a Web Component. It demonstrates importing Storybook types, defining metadata with proper TypeScript annotations, and creating a typed story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\n// This default export determines where your story goes in the story list\nconst meta: Meta = {\n  component: 'demo-your-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const FirstStory: Story = {\n  args: {\n    // 👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JSON Story Indexer in JavaScript\nDESCRIPTION: This snippet shows how to set up a custom indexer for JSON story files in Storybook using JavaScript. It defines the indexer function, specifies file patterns for stories, and adds the custom indexer to the existing indexers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-jsonstories.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'fs/promises';\n\nconst jsonStoriesIndexer = {\n  test: /stories\\.json$/,\n  createIndex: async (fileName) => {\n    const content = JSON.parse(fs.readFileSync(fileName));\n\n    const stories = generateStoryIndexesFromJson(content);\n\n    return stories.map((story) => ({\n      type: 'story',\n      importPath: `virtual:jsonstories--${fileName}--${story.componentName}`,\n      exportName: story.name,\n    }));\n  },\n};\n\nconst config = {\n  framework: '@storybook/your-framework',\n  stories: [\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n    // 👇 Make sure files to index are included in `stories`\n    '../src/**/*.stories.json',\n  ],\n  experimental_indexers: async (existingIndexers) => [...existingIndexers, jsonStoriesIndexer],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Solid with TypeScript\nDESCRIPTION: Defines the metadata for Button component stories in a SolidJS project using standard TypeScript. It imports `Meta` and `StoryObj` types from `storybook-solidjs` and the `Button` component. The exported `meta` object defines the component, `argTypes` (with a color control for `backgroundColor`), default `args` (`primary: true`), and includes a type definition for individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"Button.stories.ts|tsx\" renderer=\"solid\" language=\"ts\"\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Svelte Button Component (CSF)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a Svelte Button component in Storybook using CSF (Component Story Format). It defines a decorator that uses a MarginDecorator component to wrap the story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\nimport MarginDecorator from './MarginDecorator.svelte';\n\nexport default {\n  component: Button,\n  decorators: [() => MarginDecorator],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports an object that specifies the framework and the location of story files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-js-md-files.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../my-project/src/components/*.@(js|md)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook preview that imports the Preview type and sets controls parameter. Requires framework-specific Preview import to be configured.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-expanded-controls.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    controls: { expanded: true },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories with Dark Background in Common TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Button story using TypeScript in a framework-agnostic manner. It sets up a story with a dark background using story-level parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const OnDark: Story = {\n  // 👇 Story-level parameters\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Angular with TypeScript\nDESCRIPTION: Creates a Storybook story for an Angular Button component with three variations (Primary, Secondary, Tertiary) using TypeScript. Each story uses the render function to control how the component renders with different labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => ({\n    props: {\n      label: 'Button',\n      backgroundColor: '#ff0',\n    },\n  }),\n};\n\nexport const Secondary: Story = {\n  render: () => ({\n    props: {\n      label: '😄👍😍💯',\n      backgroundColor: '#ff0',\n    },\n  }),\n};\n\nexport const Tertiary: Story = {\n  render: () => ({\n    props: {\n      label: '📚📕📈🤓',\n      backgroundColor: '#ff0',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Stories with TypeScript\nDESCRIPTION: Shows how to create a Storybook story file for Angular components using TypeScript. Includes type definitions from @storybook/angular and demonstrates basic story structure with Meta and StoryObj types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Foo } from './Foo.component';\n\nconst meta: Meta<Foo> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Foo/Bar',\n  component: Foo,\n};\n\nexport default meta;\ntype Story = StoryObj<Foo>;\n\nexport const Baz: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Preset for Storybook Addon in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a local preset for a Storybook addon, including configuration for builders, Babel, and third-party integrations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  babel: async (config) => ({\n    ...config,\n    // custom babel config\n  }),\n  webpackFinal: async (config) => ({\n    ...config,\n    // custom webpack config\n  }),\n  // other configuration options\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Web Components with Vite in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook for a Web Components project using Vite as the bundler in TypeScript. It imports the StorybookConfig type, defines a typed configuration object, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-framework-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/web-components-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/web-components-vite',\n    options: {\n      // ...\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with TypeScript\nDESCRIPTION: Implements Storybook preview configuration using TypeScript, providing type safety through the Preview interface. The configuration includes MDX provider integration, custom design system components, and control matchers for colors and dates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-mdx-container.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { MDXProvider } from '@mdx-js/react';\n\nimport { DocsContainer } from '@storybook/addon-docs/blocks';\n\nimport * as DesignSystem from 'your-design-system';\n\nexport const MyDocsContainer = (props) => (\n  <MDXProvider\n    components={{\n      h1: DesignSystem.H1,\n      h2: DesignSystem.H2,\n    }}\n  >\n    <DocsContainer {...props} />\n  </MDXProvider>\n);\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      container: MyDocsContainer,\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Svelte with TypeScript\nDESCRIPTION: Demonstrates component parameter configuration in Svelte using TypeScript with the defineMeta helper from '@storybook/addon-svelte-csf'. The example sets the backgrounds parameter for a Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Creates specific parameters at the component level\n    parameters: {\n      backgrounds: {\n        default: 'dark',\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story for Web Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a Button story for Web Components using JavaScript. It defines a default export with the component name and parameters to disable a custom addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  parameters: {\n    myAddon: { disable: true }, // Disables the addon\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Vue with TypeScript 4.9+\nDESCRIPTION: Creates a ButtonGroup story in Vue using TypeScript 4.9+. Uses the 'satisfies' operator for type checking and a render function to control component rendering. Composes Button stories into a ButtonGroup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport ButtonGroup from './ButtonGroup.vue';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta = {\n  component: ButtonGroup,\n} satisfies Meta<typeof ButtonGroup>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Pair: Story = {\n  render: (args) => ({\n    components: { ButtonGroup },\n    setup() {\n      return { args };\n    },\n    template: '<ButtonGroup v-bind=\"args\" />',\n  }),\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Generic Storybook - TypeScript\nDESCRIPTION: Provides a generic TypeScript (not 4.9+) story setup for any framework, using Meta and StoryObj typings and showing how to specify included and excluded controls as either arrays or regex. A comment reminds users to replace placeholders for their specific framework. Inputs: component and framework name; outputs: stories fit for any compatible Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { YourComponent } from './YourComponent';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof YourComponent>;\n\nexport const ArrayInclude: Story = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude: Story = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude: Story = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude: Story = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook in TypeScript. It imports the StorybookConfig type, specifies the framework to use, and sets the location of story files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-configuration-src-dir.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Web Components in Storybook (TypeScript)\nDESCRIPTION: This snippet defines the metadata and argTypes for a Button component using Web Components in Storybook. It uses TypeScript and categorizes various properties like backgroundColor, primary, label, onClick, and size into different groups for better organization in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n      },\n    },\n    // Assigns the argType to the Text category\n    label: {\n      table: {\n        category: 'Text',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Objects with TypeScript\nDESCRIPTION: The main function for using the Storybook Instrumenter. It takes an object and options, and returns an instrumented version of the object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninstrument<TObj extends Record<string, any>>(obj: TObj, options: Options): TObj\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Common JavaScript Component Stories\nDESCRIPTION: This snippet shows a framework-agnostic approach to creating Storybook stories using JavaScript. It demonstrates how to use the play function to simulate user interactions with a component, applicable to various frameworks like React, Vue, etc.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ExampleStory = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories for Web Components with TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Web Components Button using TypeScript. It imports necessary types, sets up metadata, and defines a story with props and an action using the html function from 'lit'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { action } from 'storybook/actions';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'custom-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Text: Story = {\n  render: () => html`<custom-button label=\"Hello\" @click=${action('clicked')}></custom-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: React Page Story with TypeScript\nDESCRIPTION: Storybook story for React Page component using TypeScript. Creates a note in the database during play function and mounts the component with dynamic data. Includes user interaction testing and argument type controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Default: Story = {\n  play: async ({ mount, args }) => {\n    const note = await db.note.create({\n      data: { title: 'Mount inside of play' },\n    });\n\n    const canvas = await mount(\n      // 👇 Pass data that is created inside of the play function to the component\n      //   For example, a just-generated UUID\n      <Page {...args} params={{ id: String(note.id) }} />,\n    );\n\n    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));\n  },\n  argTypes: {\n    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.\n    params: { control: { disable: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Vue with TypeScript (TS 4.9+ satisfies)\nDESCRIPTION: Defines the metadata for Button component stories in a Vue 3 project using TypeScript 4.9+. It imports the `Meta` type from `@storybook/vue3` and the `Button.vue` component. It uses the `satisfies` operator for type checking the `meta` object, which specifies the component, `argTypes` (including a color control for `backgroundColor`), and default `args` (`primary: true`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"vue\" language=\"ts-4-9\"\nimport type { Meta } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic JavaScript Storybook Preview with Theme Support\nDESCRIPTION: Sets up a framework-agnostic Storybook preview with theme support using JavaScript. It imports themes from a custom file and implements a decorator that applies the selected theme from globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyThemes } from '../my-theme-folder/my-theme-file';\n\nconst preview = {\n  decorators: [\n    (story, context) => {\n      const selectedTheme = context.globals.theme || 'light';\n      const theme = MyThemes[selectedTheme];\n      // Your theme provider and other context providers goes in the return statement\n      return;\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Snapshot Tests with Vitest - TypeScript\nDESCRIPTION: This TypeScript snippet runs automated snapshot tests for Storybook stories using Vitest and strong typings for Meta and StoryFn. Story modules are discovered via import.meta.glob with typing support, and the composed stories are iteratively tested for snapshot consistency after running their setup. Requires 'vitest', 'path', and Storybook dependencies. Each discovered module must export at least one story, and snapshot tests validate the rendered output using the jsdom environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/snapshot-tests-portable-stories.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// @vitest-environment jsdom\\n\\n// Replace your-framework with one of the supported Storybook frameworks (react, vue3)\\nimport type { Meta, StoryFn } from '@storybook/your-framework';\\n\\nimport path from 'path';\\nimport { describe, expect, test } from 'vitest';\\n\\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\\nimport { composeStories } from '@storybook/your-renderer';\\n\\ntype StoryFile = {\\n  default: Meta;\\n  [name: string]: StoryFn | Meta;\\n};\\n\\nconst compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {\\n  try {\\n    return composeStories(entry);\\n  } catch (e) {\\n    throw new Error(\\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\\n    );\\n  }\\n};\\n\\nfunction getAllStoryFiles() {\\n  // Place the glob you want to match your story files\\n  const storyFiles = Object.entries(\\n    import.meta.glob<StoryFile>('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {\\n      eager: true,\\n    }),\\n  );\\n\\n  return storyFiles.map(([filePath, storyFile]) => {\\n    const storyDir = path.dirname(filePath);\\n    const componentName = path.basename(filePath).replace(/\\\\.(stories|story)\\\\.[^/.]+$/, '');\\n    return { filePath, storyFile, componentName, storyDir };\\n  });\\n}\\n\\ndescribe('Stories Snapshots', () => {\\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\\n    const meta = storyFile.default;\\n    const title = meta.title || componentName;\\n\\n    describe(title, () => {\\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\\n\\n      if (stories.length <= 0) {\\n        throw new Error(\\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,\\n        );\\n      }\\n\\n      stories.forEach(({ name, story }) => {\\n        test(name, async () => {\\n          await story.run();\\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\\n          await new Promise((resolve) => setTimeout(resolve, 1));\\n          expect(document.body.firstChild).toMatchSnapshot();\\n        });\\n      });\\n    });\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Vue with JavaScript\nDESCRIPTION: A Vue.js implementation of a Button component using the Options API. The component defines props with validation for the size property, emits click events, and provides detailed JSDoc comments for each property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<template> <!-- The component markup implementation --> </template>\n\n<script>\n  export default {\n    name: 'button',\n    props: {\n      /**\n       * Button contents\n       */\n      label: {\n        type: String,\n        required: true,\n      },\n      /**\n       * Is this the principal call to action on the page?\n       */\n      primary: {\n        type: Boolean,\n        default: false,\n      },\n      /**\n       * How large should the button be?\n       */\n      size: {\n        type: String,\n        default: 'medium',\n        validator: function (value) {\n          return ['small', 'medium', 'large'].indexOf(value) !== -1;\n        },\n      },\n      /**\n       * What background color to use\n       */\n      backgroundColor: {\n        type: String,\n      },\n    },\n    emits: ['click'],\n    setup(props, { emit }) {\n      props = reactive(props);\n      return {\n        /**\n         * Optional click handler\n         */\n        onClick() {\n          emit('click');\n        },\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Angular in TypeScript\nDESCRIPTION: This snippet shows how to set up Storybook stories for an Angular Button component using TypeScript. It imports necessary types, defines metadata, and exports a default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing API Mocks in React/Vue Storybook Stories\nDESCRIPTION: Shows how to configure API mocking in React or Vue Storybook stories using MSW. Includes example handlers for success and error scenarios with mock data.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { http, HttpResponse, delay } from 'msw';\n\nimport { DocumentScreen } from './YourPage';\n\nexport default {\n  component: DocumentScreen,\n};\n\nconst TestData = {\n  user: {\n    userID: 1,\n    name: 'Someone',\n  },\n  document: {\n    id: 1,\n    userID: 1,\n    title: 'Something',\n    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    status: 'approved',\n  },\n  subdocuments: [\n    {\n      id: 1,\n      userID: 1,\n      title: 'Something',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n      status: 'approved',\n    },\n  ],\n};\n\nexport const MockedSuccess = {\n  parameters: {\n    msw: {\n      handlers: [\n        http.get('https://your-restful-endpoint/', () => {\n          return HttpResponse.json(TestData);\n        }),\n      ],\n    },\n  },\n};\n\nexport const MockedError = {\n  parameters: {\n    msw: {\n      handlers: [\n        http.get('https://your-restful-endpoint', async () => {\n          await delay(800);\n          return new HttpResponse(null, {\n            status: 403,\n          });\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Settings in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook's preview settings in TypeScript. It imports the Preview type from the framework-specific Storybook package, sets up control matchers for colors and dates, and applies the dark theme to documentation. The configuration uses type safety with the Preview interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { themes, ensure } from 'storybook/theming';\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      theme: ensure(themes.dark), // The replacement theme to use\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Common Framework Storybook Stories with JavaScript\nDESCRIPTION: Sets up viewport configuration for a Button component using JavaScript in common frameworks like React or Vue. Configures a default tablet viewport at the component level and overrides it with a mobile viewport for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  globals: {\n    // 👇 Set viewport for all component stories\n    viewport: { value: 'tablet', isRotated: false },\n  },\n};\n\nexport const OnPhone = {\n  globals: {\n    // 👇 Override viewport for this story\n    viewport: { value: 'mobile1', isRotated: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components Storybook Button Stories (JavaScript)\nDESCRIPTION: Defines Storybook stories for a custom 'demo-button' Web Component using JavaScript. The default export specifies the custom element tag name; the Primary story provides arguments/props. This is simple and framework-agnostic, requiring only that 'demo-button' be registered on the page, plus Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Usage Guidelines in Storybook MDX\nDESCRIPTION: MDX component documentation that specifies best practices for button implementation, including when to use primary buttons and navigation links. The guidelines are structured using Dos and Donts components to clearly separate recommended practices from anti-patterns.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-dos-donts.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Guidelines>\n  <Dos>\n    - Use buttons for the main actions on your page\n    - Identify the primary action and make it `primary`\n  </Dos>\n  <Donts>\n    - Use a button when a link will do (e.g., for navigation-only actions)\n    - Use multiple `primary` buttons in a single UI state\n  </Donts>\n</Guidelines>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Vuetify Theme Decorator\nDESCRIPTION: A complete example of creating a custom theme decorator for Vuetify. This decorator hooks into Vuetify's theming system by accessing its global theme state and updating it based on the selected theme in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/withVuetifyTheme.decorator.js\nimport { DecoratorHelpers } from '@storybook/addon-themes';\nimport { useTheme } from 'vuetify';\n\nconst { initializeThemeState, pluckThemeFromContext } = DecoratorHelpers;\n\nexport const withVuetifyTheme = ({ themes, defaultTheme }) => {\n  initializeThemeState(Object.keys(themes), defaultTheme);\n\n  return (story, context) => {\n    const selectedTheme = pluckThemeFromContext(context);\n    const { themeOverride } = context.parameters.themes ?? {};\n\n    const selected = themeOverride || selectedTheme || defaultTheme;\n\n    return {\n      components: { story },\n      setup() {\n        const theme = useTheme();\n\n        theme.global.name.value = themes[selected];\n\n        return {\n          theme,\n        };\n      },\n      template: `<v-app><story /></v-app>`,\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Vue (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Vue Button component using TypeScript. It defines a Meta type, exports a default meta object, and creates a 'Primary' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nimport { action } from 'storybook/actions';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return {\n        ...args,\n        onClick: action('clicked'),\n      };\n    },\n    template: '<Button @click=\"onClick\" :label=\"label\" />',\n  }),\n  args: {\n    label: 'Hello',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Web Components Checkbox with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Storybook metadata for a Web Components Checkbox using TypeScript. It imports the Meta type from @storybook/web-components and defines the metadata object with title and component properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Design System/Atoms/Checkbox',\n  component: 'demo-checkbox',\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration in JavaScript\nDESCRIPTION: JavaScript configuration file that exports default Storybook settings including framework selection, story file patterns, essential addons, and documentation options. Used for setting up core Storybook functionality in JavaScript projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-full-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  docs: {\n    //👇 See the table below for the list of supported options\n    defaultName: 'Documentation',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in TypeScript for SolidJS\nDESCRIPTION: Creates a Storybook story for a SolidJS Button component using TypeScript with explicit type annotations. Uses the SolidJS-specific Meta and StoryObj types from storybook-solidjs to define three story variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"Button\" />,\n};\n\nexport const Secondary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />,\n};\n\nexport const Tertiary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: Basic JavaScript configuration for Storybook preview that sets the controls parameter to be expanded by default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-expanded-controls.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    controls: { expanded: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Common Frameworks using TypeScript 4.9\nDESCRIPTION: This snippet shows a framework-agnostic approach to creating Storybook stories for a Checkbox component using TypeScript 4.9. It uses the 'satisfies' operator and can be adapted for various frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Checkbox } from './Checkbox';\n\nconst meta = {\n  component: Checkbox,\n} satisfies Meta<typeof Checkbox>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Unchecked: Story = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Figma Components to Storybook Stories\nDESCRIPTION: Example of how to add a Figma design URL as a parameter to a Storybook story. This allows the design to be displayed alongside the story in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/design-integrations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MyStory = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with TypeScript\nDESCRIPTION: TypeScript version of Svelte Button stories using addon-svelte-csf. Demonstrates typed story configuration with background settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    globals: {\n      // 👇 Set background value for all component stories\n      backgrounds: { value: 'gray', grid: false },\n    },\n  });\n</script>\n\n<!-- 👇 Override background value for this story-->\n<Story\n  name=\"OnDark\"\n  globals={{\n    backgrounds: { value: \"dark\" },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Login Form Story Implementation\nDESCRIPTION: Implements a login form story with component template and play function for interaction testing. Uses Vue-style component declaration with simulated user interactions and DOM assertions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: { LoginForm },\n    template: `<LoginForm />`,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript 4.9 and Satisfies in React\nDESCRIPTION: React Storybook story for TodoItem using TypeScript 4.9 with the 'satisfies' operator. Defines component and render function in meta, and a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { TodoItem } from './TodoItem';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nconst meta = {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,\n} satisfies Meta<typeof TodoItem>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Button Story Configuration with TypeScript\nDESCRIPTION: Configures a basic Button story for Angular using TypeScript with Storybook. Includes type definitions and shows how to set up story parameters to display source code in the canvas.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      canvas: { sourceState: 'shown' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Web Components (JavaScript)\nDESCRIPTION: This snippet shows how to create a Storybook story for a Web Components Button using JavaScript. It uses the html template literal from Lit and defines a 'Text' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nimport { action } from 'storybook/actions';\n\nexport default {\n  component: 'custom-button',\n};\n\nexport const Text = {\n  render: ({ label, onClick }) =>\n    html`<custom-button label=\"${label}\" @click=${onClick}></custom-button>`,\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta with TypeScript Type Annotation\nDESCRIPTION: Configures Storybook meta using TypeScript with explicit type annotation. This example shows how to define meta configuration for any renderer while providing proper TypeScript type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    value: {\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Configuration in JavaScript\nDESCRIPTION: This JavaScript snippet exports the default configuration for Storybook, specifying the framework and story paths. Additionally, it includes a function to incorporate environment variables from existing configurations, supporting further customization via an \".env\" file or command line configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-env.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  /*\n   * 👇 The `config` argument contains all the other existing environment variables.\n   * Either configured in an `.env` file or configured on the command line.\n   */\n  env: (config) => ({\n    ...config,\n    EXAMPLE_VAR: 'An environment variable configured in Storybook',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in Web Components CSF with JavaScript\nDESCRIPTION: Example of configuring accessibility parameters for Web Components using Component Story Format (CSF) in JavaScript. Shows how to specify the component selector and set up accessibility testing rules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n};\n\nexport const ExampleStory = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Button Component with Storybook and Vitest\nDESCRIPTION: This code snippet illustrates testing a Vue Button component using Storybook's composeStory function and Vitest. It includes tests for rendering the button with default args and overridden props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-story.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { vi, test, expect } from 'vitest';\nimport { render, screen } from '@testing-library/vue';\nimport { composeStory } from '@storybook/vue3';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\n// Returns a story which already contains all annotations from story, meta and global levels\nconst Primary = composeStory(PrimaryStory, meta);\n\ntest('renders primary button with default args', async () => {\n  await Primary.run();\n\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  await Primary.run({ args: { ...Primary.args, label: 'Hello world' } });\n\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Custom Indexer in JavaScript\nDESCRIPTION: This code demonstrates how to configure Storybook to include a custom indexer (combosIndexer) using JavaScript. The combosIndexer matches files using the .stories.[tj]sx? extension, extracts the story title from filenames, and generates an array of entry objects for Storybook to process. Required dependencies include @storybook/your-framework and any story files matching the specified patterns; users must ensure their environment supports async indexer registration for experimental_indexers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-title.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst combosIndexer = {\n  test: \\/\\.stories\\.[tj]sx?\\$/,\n  createIndex: async (fileName, { makeTitle }) => {\n    // 👇 Grab title from fileName\n    const title = fileName.match(/\\/(.*)\\.stories/)[1];\n\n    // Read file and generate entries ...\n    let entries = [];\n    // Read file and generate entries...\n\n    return entries.map((entry) => ({\n      type: 'story',\n      // 👇 Use makeTitle to format the title\n      title: `${makeTitle(title)} Custom`,\n      importPath: fileName,\n      exportName: entry.name,\n    }));\n  },\n};\n\nconst config = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  experimental_indexers: async (existingIndexers) => [...existingIndexers, combosIndexer],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Stories\nDESCRIPTION: Defines Button stories using Web Components and Lit HTML. Creates stories with different label variations including emojis.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  render: () => html`<demo-button .backgroundColor=\"#ff0\" .label=\"Button\"></demo-button>`,\n};\n\nexport const Secondary: Story = {\n  render: () => html`<demo-button .backgroundColor=\"#ff0\" .label=\"😄👍😍💯\"></demo-button>`,\n};\n\nexport const Tertiary: Story = {\n  render: () => html`<demo-button .backgroundColor=\"#ff0\" .label=\"📚📕📈🤓\"></demo-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Vue with JavaScript\nDESCRIPTION: Creates a Storybook story for a Vue List component using JavaScript. It imports both List and ListItem components along with the Unchecked story, and uses Vue's template syntax in the render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem = {\n  args: {\n    ...Unchecked.args,\n  },\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      //👇 The args will now be passed down to the template\n      return { args };\n    },\n    template: '<List v-bind=\"args\"><ListItem v-bind=\"args\"/></List>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Panel Addon in Storybook Manager\nDESCRIPTION: Creates a custom panel addon using Storybook's addon API. The code registers a new panel with a title and renders a React component within the AddonPanel wrapper. Uses the types.PANEL type to specify the UI element type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-panel-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { AddonPanel } from 'storybook/internal/components';\n\nimport { useGlobals, addons, types } from 'storybook/manager-api';\n\naddons.register('my/panel', () => {\n  addons.add('my-panel-addon/panel', {\n    title: 'Example Storybook panel',\n    //👇 Sets the type of UI element in Storybook\n    type: types.PANEL,\n    render: ({ active }) => (\n      <AddonPanel active={active}>\n        <h2>I'm a panel addon in Storybook</h2>\n      </AddonPanel>\n    ),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTML List Stories in TypeScript\nDESCRIPTION: Implements a Storybook story for an HTML List component using TypeScript. It imports type definitions and the createList function, then defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\nimport { createList, ListArgs } from './List';\n\nconst meta: Meta<ListArgs> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n};\n\nexport default meta;\ntype Story = StoryObj<ListArgs>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {\n  render: (args) => createList(args),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet exports the Storybook configuration in TypeScript. It imports the StorybookConfig type, defines the framework, story file patterns, and includes a Babel configuration function for development and production environments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-babel.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async babel(config, { configType }) {\n    if (configType === 'DEVELOPMENT') {\n      // Your development configuration goes here\n    }\n    if (configType === 'PRODUCTION') {\n      // Your production configuration goes here.\n    }\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Locale Global Types\nDESCRIPTION: Shows how to implement a complex global type for internationalization with custom toolbar configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const globalTypes = {\n  locale: {\n    name: \"Locale\",\n    description: \"Internationalization locale\",\n    defaultValue: \"en\",\n    toolbar: {\n      icon: \"globe\",\n      items: [\n        { value: \"en\", right: \"🇺🇸\", title: \"English\" },\n        { value: \"fr\", right: \"🇫🇷\", title: \"Français\" },\n        { value: \"es\", right: \"🇪🇸\", title: \"Español\" },\n        { value: \"zh\", right: \"🇨🇳\", title: \"中文\" },\n        { value: \"kr\", right: \"🇰🇷\", title: \"한국어\" },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Toolbar Button Component in Storybook Addon\nDESCRIPTION: A React component that creates a toggleable toolbar button for the addon. Uses useGlobals and useStorybookApi hooks to manage state and register keyboard shortcuts. Implements a lightning icon button that can be toggled on/off.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolkit-types.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { memo, useCallback, useEffect } from 'react';\n\nimport { useGlobals, useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\n\nimport { ADDON_ID, PARAM_KEY, TOOL_ID } from './constants';\n\nexport const Tool = memo(function MyAddonSelector() {\n  const [globals, updateGlobals] = useGlobals();\n  const api = useStorybookApi();\n\n  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);\n\n  const toggleMyTool = useCallback(() => {\n    updateGlobals({\n      [PARAM_KEY]: !isActive,\n    });\n  }, [isActive]);\n\n  useEffect(() => {\n    api.setAddonShortcut(ADDON_ID, {\n      label: 'Toggle Measure [O]',\n      defaultShortcut: ['O'],\n      actionName: 'outline',\n      showInMenu: false,\n      action: toggleMyTool,\n    });\n  }, [toggleMyTool, api]);\n\n  return (\n    <IconButton key={TOOL_ID} active={isActive} title=\"Enable my addon\" onClick={toggleMyTool}>\n      <LightningIcon />\n    </IconButton>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Solid in TypeScript\nDESCRIPTION: This snippet shows how to create stories for a Solid Button component using TypeScript. It sets up the component metadata with explicit typing, defines parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'this data is passed to the addon',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => <Button>Hello</Button>,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Primary Block in MDX Documentation\nDESCRIPTION: Shows how to import and use the Primary block in a Storybook MDX documentation file to display the primary story from a stories file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-primary.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Primary } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Primary />\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in SolidJS with TypeScript\nDESCRIPTION: Creates a ButtonGroup story in SolidJS using TypeScript. The story imports Button component stories and composes them into a ButtonGroup with horizontal orientation. Uses explicit type annotations for meta and Story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { ButtonGroup } from '../ButtonGroup';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta: Meta<typeof ButtonGroup> = {\n  component: ButtonGroup,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ButtonGroup>;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Tab Addon in Storybook Manager\nDESCRIPTION: Implements a basic Storybook tab addon that renders a custom React component. Uses the addons.register() method to initialize the addon and addons.add() to create a new tab with specified type, title, and render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-tab-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { addons, types } from 'storybook/manager-api';\n\naddons.register('my-addon', () => {\n  addons.add('my-addon/tab', {\n    type: types.TAB,\n    title: 'Example Storybook tab',\n    render: () => (\n      <div>\n        <h2>I'm a tabbed addon in Storybook</h2>\n      </div>\n    ),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook test runner that implements post-visit snapshot testing. It captures the innerHTML of the story root element (#storybook-root) and compares it against stored snapshots.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-dom-snapshot-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async postVisit(page, context) {\n    // the #storybook-root element wraps the story. In Storybook 6.x, the selector is #root\n    const elementHandler = await page.$('#storybook-root');\n    const innerHTML = await elementHandler.innerHTML();\n    expect(innerHTML).toMatchSnapshot();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Accessible Button Story in Storybook\nDESCRIPTION: Creates an accessible Button story with non-primary styling and a 'Button' label. The story is exported as a named export with specific props defined in the args object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// This is an accessible story\nexport const Accessible: Story = {\n  args: {\n    primary: false,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Svelte using CSF with JavaScript\nDESCRIPTION: Creates a ButtonGroup story in Svelte using Component Story Format (CSF) with JavaScript. The story imports Button stories from a separate file and composes them into a ButtonGroup with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonGroup from '../ButtonGroup.svelte';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nexport default {\n  component: ButtonGroup,\n};\n\nexport const Pair = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Controls Doc Block via Parameters\nDESCRIPTION: Example of customizing the Controls doc block by filtering out the 'style' prop using Storybook parameters in the preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```js\n// .storybook/preview.js\n\nexport default {\n  parameters: {\n    docs: {\n      controls: {\n        exclude: ['style'],\n      },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Web Component Button in TypeScript\nDESCRIPTION: This TypeScript example defines meta data for a Button implemented as a web component in Storybook, using typing from @storybook/web-components. The component is referenced by string (custom element name), and argTypes specify which controls to show depending on the advanced setting. Requires @storybook/web-components and the registered custom element 'demo-button'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\\n\\nconst meta: Meta = {\\n  component: 'demo-button',\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Vue Button Stories with JavaScript\nDESCRIPTION: Implements Button component stories using Vue with plain JavaScript. Defines three stories with different emoji labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  render: () => ({\n    components: { Button },\n    template: '<Button backgroundColor=\"#ff0\" label=\"Button\" />',\n  }),\n};\n\nexport const Secondary = {\n  render: () => ({\n    components: { Button },\n    template: '<Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />',\n  }),\n};\n\nexport const Tertiary = {\n  render: () => ({\n    components: { Button },\n    template: '<Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />',\n  }),\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Workspace for React Storybook Testing\nDESCRIPTION: Sets up a Vitest workspace configuration for testing React Storybook components using Playwright. Includes browser testing setup and Storybook integration configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-workspace.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWorkspace } from 'vitest/config';\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nconst dirname =\n  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineWorkspace([\n  './vitest.config.ts',\n  {\n    extends: './vite.config.ts',\n    plugins: [\n      storybookTest({\n        configDir: path.join(dirname, '.storybook'),\n        storybookScript: 'yarn storybook --ci',\n      }),\n    ],\n    test: {\n      name: 'storybook',\n      browser: {\n        enabled: true,\n        provider: 'playwright',\n        headless: true,\n        instances: [{ browser: 'chromium' }],\n      },\n      setupFiles: ['./.storybook/vitest.setup.ts'],\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Angular Storybook Play Function Implementation\nDESCRIPTION: Demonstrates implementing play functions for Angular components in TypeScript, including individual and combined story scenarios. Uses the userEvent API for interaction testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const FirstStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');\n  },\n};\n\nexport const SecondStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('other-element'), 'another value');\n  },\n};\n\nexport const CombinedStories: Story = {\n  play: async ({ context, canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await FirstStory.play(context);\n    await SecondStory.play(context);\n    await userEvent.type(canvas.getByTestId('another-element'), 'random value');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in React with JavaScript\nDESCRIPTION: Implementation of Storybook stories for a List component in React using JavaScript. It demonstrates how to structure stories with component composition, import and reuse stories from other components, and create story templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate = {\n  render: ({ items, ...args }) => {\n    return (\n      <List>\n        {items.map((item) => (\n          <ListItem {...item} />\n        ))}\n      </List>\n    );\n  },\n};\n\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [\n      {\n        ...Unchecked.args,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing a Storybook Addon using the CLI\nDESCRIPTION: The 'add' command installs a Storybook addon and automatically configures your project for it. Options include specifying the configuration directory, package manager, skipping post-installation configuration, and enabling debug mode.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstorybook add [addon] [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Angular Storybook Stories\nDESCRIPTION: Sets up a Button component story in Angular with viewport configuration. Demonstrates setting a default tablet viewport for all stories and overriding it with a mobile viewport for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  globals: {\n    // 👇 Set viewport for all component stories\n    viewport: { value: 'tablet', isRotated: false },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const OnPhone: Story = {\n  globals: {\n    // 👇 Override viewport for this story\n    viewport: { value: 'mobile1', isRotated: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Web Components (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Web Components Button using TypeScript. It defines Meta and Story types, exports a default meta object, and creates a 'Text' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { action } from 'storybook/actions';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'custom-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Text: Story = {\n  render: ({ label, onClick }) =>\n    html`<custom-button label=\"${label}\" @click=${onClick}></custom-button>`,\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in React with TypeScript (CSF 2)\nDESCRIPTION: Creates a default button story for React components using TypeScript and CSF 2 format. Uses ComponentStory type to provide proper typing for the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Other imports and story implementation\nexport const Default: ComponentStory<typeof Button> = (args) => <Button {...args} />;\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters with TypeScript 4.9+ for Any Framework\nDESCRIPTION: Demonstrates component parameter configuration using TypeScript 4.9+ with the satisfies operator for any Storybook framework. The example shows a framework-agnostic approach using a placeholder that should be replaced with the actual framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Stories in TypeScript\nDESCRIPTION: This snippet shows how to set up Storybook stories for an Angular component using TypeScript. It demonstrates importing types from Storybook, defining metadata, and exporting a story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Foo } from './Foo.component';\n\nconst meta: Meta<Foo> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'OtherFoo/Bar',\n  component: Foo,\n  id: 'Foo/Bar', // Or 'foo-bar' if you prefer\n};\n\nexport default meta;\ntype Story = StoryObj<Foo>;\n\nexport const Baz: Story = {\n  name: 'Insert name here',\n};\n```\n\n----------------------------------------\n\nTITLE: Preact Component Story Implementation\nDESCRIPTION: Shows how to create a Storybook story for a Preact component using JSX syntax and the h function. Implements a basic layout structure with header and component rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsx h */\nimport { h } from 'preact';\n\nimport { Layout } from './Layout';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const Example = {\n  render: () => (\n    <Layout>\n      <header>\n        <h1>Example</h1>\n      </header>\n      <article>\n        <MyComponent />\n      </article>\n    </Layout>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Config in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook's main configuration file with type safety. Imports the StorybookConfig type and configures the Svelte CSF addon with legacy template support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your Svelte framework\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  // Other configuration\n  addons: [\n    {\n      name: '@storybook/addon-svelte-csf',\n      options: {\n        legacyTemplate: true, // Enables the legacy template syntax\n      },\n    },\n  ],\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Web Components Storybook (TypeScript)\nDESCRIPTION: Exports default Storybook metadata for a Web Component ('demo-button') using TypeScript. It imports the `Meta` type from `@storybook/web-components` and configures conditional controls for `label` (text) and `image` (select) properties using `argTypes.if`, ensuring only one is shown.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Svelte in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a Svelte Button component using standard TypeScript syntax. It imports types from '@storybook/svelte' and defines metadata with explicit typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story with TypeScript\nDESCRIPTION: Implements a Storybook story for a Web Components Button using TypeScript. Includes Angular Meta type and click action configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\nimport { action } from 'storybook/actions';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  args: {\n    // 👇 Create an action that appears when the onClick event is fired\n    onClick: action('on-click'),\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Web Components in JavaScript\nDESCRIPTION: Shows how to create a Storybook story for a Web Component using JavaScript and Lit. Configures argTypes with options, implements a helper function, and uses Lit's template literal syntax for rendering the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  component: 'custom-component',\n  //👇 Creates specific argTypes\n  argTypes: {\n    propertyA: {\n      options: ['Item One', 'Item Two', 'Item Three'],\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\n    },\n    propertyB: {\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n    },\n  },\n};\n\nconst someFunction = (valuePropertyA, valuePropertyB) => {\n  // Do some logic here\n};\n\nexport const ExampleStory = {\n  render: ({ propertyA, propertyB }) => {\n    //👇 Assigns the function result to a variable\n    const someFunctionResult = someFunction(propertyA, propertyB);\n\n    return html`\n      <custom-component\n        .propertyA=${propertyA}\n        .propertyB=${propertyB}\n        .someProperty=${someFunctionResult}\n      ></custom-component>\n    `;\n  },\n  args: {\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing argTypes in Storybook addon using useArgTypes hook\nDESCRIPTION: This snippet demonstrates how to import and use the useArgTypes hook from Storybook's manager API to access argTypes within a custom addon panel. The hook returns an object containing argTypes that can be destructured and used in the addon's functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-argtypes-with-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useArgTypes } from 'storybook/manager-api';\n\n// inside your panel\nconst { argTypes } = useArgTypes();\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook ArgTypes for a Web Component in JavaScript\nDESCRIPTION: Defines the metadata and `argTypes` for a Web Component named `gizmo-element` using JavaScript for Storybook. It sets up controls like `boolean`, `number`, `range`, `object`, `file`, `radio`, `check`, `select`, `text`, `color`, and `date` for the component's attributes/properties within the Storybook interface. The `component` property is set to the tag name of the web component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: 'gizmo-element',\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript 4.9+ Satisfies Operator\nDESCRIPTION: This code demonstrates how to set up Storybook with TypeScript 4.9+ using the 'satisfies' operator for type checking. It imports the Meta type from the framework-specific package and creates a type-safe metadata object for Button stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with TypeScript\nDESCRIPTION: Implements a Storybook story for a Button component using Svelte's CSF format with TypeScript support. Creates a 'Large' story variant with disabled background parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story\n  name=\"Large\"\n  parameters={{\n    backgrounds: { disable: true },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Executing Vite Build for Storybook in TypeScript\nDESCRIPTION: This function configures and executes the Vite build process for Storybook. It creates a base configuration, applies presets, processes environment variables, and triggers the Vite build with the final configuration. The function handles output directory settings, sourcemap generation, and environment variable processing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-build-server.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { build as viteBuild } from 'vite';\nimport { stringifyProcessEnvs } from './envs';\nimport { commonConfig } from './vite-config';\n\nimport type { EnvsRaw, ExtendedOptions } from './types';\n\nexport async function build(options: ExtendedOptions) {\n  const { presets } = options;\n\n  const baseConfig = await commonConfig(options, 'build');\n  const config = {\n    ...baseConfig,\n    build: {\n      outDir: options.outputDir,\n      emptyOutDir: false,\n      sourcemap: true,\n    },\n  };\n\n  const finalConfig = await presets.apply('viteFinal', config, options);\n\n  const envsRaw = await presets.apply<Promise<EnvsRaw>>('env');\n  // Stringify env variables after getting `envPrefix` from the final config\n  const envs = stringifyProcessEnvs(envsRaw, finalConfig.envPrefix);\n  // Update `define`\n  finalConfig.define = {\n    ...finalConfig.define,\n    ...envs,\n  };\n\n  await viteBuild(finalConfig);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Storybook Main Configuration for Web Components\nDESCRIPTION: Configures Storybook's main.ts file to use the Web Components framework with Vite as the bundler. This is the TypeScript version with proper type definitions imported from the framework package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/web-components-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  framework: '@storybook/web-components-vite', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Generic Storybook (JavaScript)\nDESCRIPTION: Exports default Storybook metadata for a generic framework (e.g., React, Vue) `Button` component in JavaScript. It imports the `Button` component and configures `argTypes` with conditional visibility for `label` (text input) and `image` (select input) properties using the `if` condition, making them mutually exclusive.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for an Angular Icon Component (TypeScript)\nDESCRIPTION: This TypeScript code defines Storybook stories for an Angular `Icon` component using the Component Story Format (CSF). It imports the `Icon` component, several icon definitions (`IconA` to `IconE`), and necessary types from `@storybook/angular` (`Meta`, `StoryObj`). An `iconMap` object is created to map icon names (strings) to their actual component definitions, allowing them to be used safely with Storybook's `argTypes`. The `meta` object configures the overall story, specifying the title, the component being documented (`Icon`), and defining controls for the `icon` prop using `argTypes` based on the keys of `iconMap`. A default export makes this configuration available to Storybook. A `Template` story of type `StoryObj<Icon>` is defined, which takes arguments (`args`), retrieves the selected icon component from `iconMap` based on the `icon` argument, and returns the configuration needed to render the `Icon` component with the selected icon and other passed arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-icons.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts filename=\"Icon.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport Icon from './icon.component';\n\nimport { IconA, IconB, IconC, IconD, IconE } from './icons';\n\n// Maps the icons to a JSON serializable object to be safely used with the argTypes\nconst iconMap = { IconA, IconB, IconC, IconD, IconE };\n\nconst meta: Meta<Icon> = {\n  title: 'My Story with Icons',\n  component: Icon,\n  argTypes: {\n    icon: {\n      options: Object.keys(iconMap),\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Icon>;\n\nconst Template: Story = (args) => {\n  // retrieves the appropriate icon passes it as a component prop\n  const { icon } = args;\n  const selectedIcon = iconMap[icon];\n  return {\n    component: Icon,\n    props: {\n      ...args,\n      icon: selectedIcon,\n    },\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components List Stories in JavaScript with Lit\nDESCRIPTION: This snippet defines Storybook stories for a Web Component named 'demo-list' using JavaScript and CSF 3.0. It utilizes the `html` template literal tag from the 'lit' library within the `render` function for each story (`Empty`, `OneItem`, `ManyItems`) to declaratively define the component's HTML structure for different states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  component: 'demo-list',\n};\n\nexport const Empty = {\n  render: () => html`<demo-list></demo-list>`,\n};\n\nexport const OneItem = {\n  render: () => html`\n    <demo-list>\n      <demo-list-item></demo-list-item>\n    </demo-list>\n  `,\n};\n\nexport const ManyItems = {\n  render: () => html`\n    <demo-list>\n      <demo-list-item></demo-list-item>\n      <demo-list-item></demo-list-item>\n      <demo-list-item></demo-list-item>\n    </demo-list>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Button with Icon in TypeScript React\nDESCRIPTION: Shows how to add an icon to the Button component. Icons should be imported from the @storybook/icons library and placed to the left of the button text.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Button>\n  <FaceHappyIcon />Button\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Angular in Storybook\nDESCRIPTION: This snippet defines the metadata and argTypes for a Button component in Angular using Storybook. It categorizes various properties like backgroundColor, primary, label, onClick, and size into different groups for better organization in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n      },\n    },\n    // Assigns the argType to the Text category\n    label: {\n      table: {\n        category: 'Text',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Component with Play Function\nDESCRIPTION: Example showing how to test an Angular component using Storybook's play function to simulate button clicks. Uses the within helper and userEvent for DOM interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const ExampleWithRole: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CSF 2 Story Function Example\nDESCRIPTION: Demonstrates a basic story function implementation in Component Story Format 2 (CSF 2).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = (args) => {\n  return <Button {...args} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Storybook Addon Decorator using makeDecorator\nDESCRIPTION: This code creates a decorator for a Storybook addon using the makeDecorator function. The decorator is configured with a name, parameter name, and a wrapper function that executes custom logic based on parameters. It's designed to be skipped if no parameters or options are provided.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-makedecorator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeDecorator } from 'storybook/preview-api';\n\nexport const withAddonDecorator = makeDecorator({\n  name: 'withSomething',\n  parameterName: 'CustomParameter',\n  skipIfNoParametersOrOptions: true\n  wrapper: (getStory, context, { parameters }) => {\n    /*\n    * Write your custom logic here based on the parameters passed in Storybook's stories.\n    * Although not advised, you can also alter the story output based on the parameters.\n    */\n    return getStory(context);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme Variables in Storybook\nDESCRIPTION: Example of creating a basic custom theme using Storybook's theming API with brand customization and light theme baseline.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/theming.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@storybook/theming';\n\nexport default create({\n  base: 'light',\n  brandTitle: 'My custom Storybook',\n  brandUrl: 'https://example.com',\n  brandImage: './logo.png',\n  brandTarget: '_self',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for React in TypeScript (4.9+)\nDESCRIPTION: This snippet shows how to create stories for a React Button component using TypeScript 4.9+. It sets up the component metadata with type inference, defines parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => <Button>Hello</Button>,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Documentation with MDX in Storybook (Svelte with Standard CSF)\nDESCRIPTION: This MDX file provides documentation for a Button component using Svelte renderer but with standard CSF stories. It imports from a generic Button.stories file, configures metadata, provides descriptive text about the button component, and shows a basic usage example.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-starter-example.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs/blocks';\n\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n# Button\n\nButton is a clickable interactive element that triggers a response.\n\nYou can place text and icons inside of a button.\n\nButtons are often used for form submissions and to toggle elements into view.\n\n## Usage\n\n<Story of={ButtonStories.Basic} />\n```\n\n----------------------------------------\n\nTITLE: Testing Login Form with JavaScript in Vue\nDESCRIPTION: Vue implementation of login form testing stories using JavaScript, demonstrating component rendering and interaction testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within, expect } from 'storybook/test';\n\nimport LoginForm from './LoginForm.vue';\n\nexport default {\n  component: LoginForm,\n};\n\nexport const EmptyForm = {\n  render: () => ({\n    components: { LoginForm },\n    template: `<LoginForm />`,\n  }),\n};\n\nexport const FilledForm = {\n  render: () => ({\n    components: { LoginForm },\n    template: `<LoginForm />`,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n    await userEvent.click(canvas.getByRole('button'));\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript 4.9 and Satisfies in Vue\nDESCRIPTION: Vue Storybook story for TodoItem using TypeScript 4.9 with the 'satisfies' operator. Defines component in meta and a Primary story with render function and loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport TodoItem from './TodoItem.vue';\n\nconst meta = {\n  component: TodoItem,\n} satisfies Meta<typeof TodoItem>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args, { loaded: { todo } }) => ({\n    components: { TodoItem },\n    setup() {\n      return { args, todo: todo };\n    },\n    template: '<TodoItem :todo=\"todo\" />',\n  }),\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining List Stories for Solid Components in TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for Solid.js List components using TypeScript. It includes stories for empty, one item, and many items configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Empty: Story = {};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n\nexport const ManyItems: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n      <ListItem />\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider Decorator in Solid Storybook (JavaScript)\nDESCRIPTION: Shows how to add a solid-styled-components ThemeProvider wrapper to Solid.js Storybook stories using JavaScript. Defines a theme object with a primary color and exports decorators directly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { ThemeProvider } from 'solid-styled-components';\n\nconst theme = {\n  colors: {\n    primary: 'hotpink',\n  },\n};\n\nexport const decorators = [\n  (Story) => (\n    <ThemeProvider theme={theme}>\n      <Story />\n    </ThemeProvider>\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story Implementation (JavaScript)\nDESCRIPTION: Default story implementation for a Button web component using CSF 3 format. Uses JavaScript with HTML template literal syntax and click event handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Default = {\n  render: (args) => html`<demo-button label=\"Hello\" @click=${action('clicked')}></demo-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Next.js in JavaScript\nDESCRIPTION: This snippet shows how to update the Storybook configuration in JavaScript to use Next.js as the framework. It involves changing the 'framework' property in the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  // framework: '@storybook/react-webpack5', 👈 Remove this\n  framework: '@storybook/nextjs', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Test-Only Stories in JavaScript/JSX\nDESCRIPTION: Demonstrates how to configure test-only stories using JavaScript/JSX in Storybook. Shows how to apply the test-only tag at both the component and story level using CSF format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-include-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n  tags: ['test-only'], // 👈 Provides the `test-only` tag to all stories in this file\n};\n\nexport const IncludeStory = {\n  //👇 Adds the `test-only` tag to this story to be included in the tests when enabled in the test-runner configuration\n  tags: ['test-only'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Custom Code Block Component in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook preview that overrides the default code component with a custom CodeBlock component. This affects how code snippets are rendered in Storybook documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-code-renderer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CodeBlock } from './CodeBlock';\n\nexport default {\n  parameters: {\n    docs: {\n      components: {\n        code: CodeBlock,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook ArgTypes for a Web Component in TypeScript\nDESCRIPTION: Defines the metadata and `argTypes` for a Web Component named `gizmo-element` using TypeScript and Storybook's Web Components typing (`@storybook/web-components`). It configures various control types (`boolean`, `number`, `range`, etc.) for the component's attributes/properties, providing type safety. Requires importing `Meta` from `@storybook/web-components`. The `component` property specifies the web component's tag name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'gizmo-element',\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue 3 Storybook Preview with TypeScript and Vuetify\nDESCRIPTION: Sets up Storybook preview for Vue 3 applications using TypeScript and Vuetify. Registers app plugins via setup and provides a type-safe decorator that applies the theme from globals to v-app container.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/vue3';\nimport { setup } from '@storybook/vue3';\n\nimport { VApp } from 'vuetify/components';\n\nimport { registerPlugins } from '../src/plugins';\n\nsetup((app) => {\n  // Registers your app's plugins including Vuetify into Storybook\n  registerPlugins(app);\n});\n\nconst preview: Preview = {\n  decorators: [\n    (story, context) => {\n      const theme = context.globals.theme || 'light';\n      return {\n        components: { story, VApp },\n        template: `\n          <v-app theme=\"${theme}\">\n            <div class=\"d-flex\">\n              <story/>\n            </div>\n          </v-app>\n      `,\n      };\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for React (JavaScript)\nDESCRIPTION: This snippet shows how to create a Storybook story for a React Button component using JavaScript. It defines a default export for the component and a 'Text' story with args and a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider Decorator in React Storybook (TypeScript)\nDESCRIPTION: Shows how to add a styled-components ThemeProvider wrapper to React Storybook stories using TypeScript. This version imports the Preview type from @storybook/react for type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nimport { Preview } from '@storybook/react';\n\nimport { ThemeProvider } from 'styled-components';\n\nconst preview: Preview = {\n  decorators: [\n    (Story) => (\n      <ThemeProvider theme=\"default\">\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </ThemeProvider>\n    ),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Story with CSF Format\nDESCRIPTION: Svelte-specific implementation using Component Story Format (CSF) showing delayed typing interactions with play function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"DelayedStory\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const exampleElement = canvas.getByLabelText('example-element');\n\n    await userEvent.type(exampleElement, 'random string', {\n      delay: 100,\n    });\n\n    const AnotherExampleElement = canvas.getByLabelText('another-example-element');\n    await userEvent.type(AnotherExampleElement, 'another random string', {\n      delay: 100,\n    });\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Storybook Addon Panel with Event Handling\nDESCRIPTION: Implements a React component for a Storybook addon panel that listens to story changes and can emit custom events. Uses the Storybook channel API for communication and includes basic UI elements from Storybook's internal components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-usechannel.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useChannel } from 'storybook/manager-api';\nimport { AddonPanel, Button } from 'storybook/internal/components';\nimport { STORY_CHANGED } from 'storybook/internal/core-events';\n\nexport const Panel = () => {\n  // Creates a Storybook API channel and subscribes to the STORY_CHANGED event\n  const emit = useChannel({\n    STORY_CHANGED: (...args) => console.log(...args),\n  });\n\n  return (\n    <AddonPanel key=\"custom-panel\" active=\"true\">\n      <Button onClick={() => emit('my-event-type', { sampleData: 'example' })}>\n        Emit a Storybook API event with custom data\n      </Button>\n    </AddonPanel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook in JavaScript. It specifies the framework to use and the location of story files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-configuration-src-dir.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Angular\nDESCRIPTION: This snippet defines a Storybook story for an Angular Button component. It uses the Meta and StoryObj types from @storybook/angular, and implements a render function with argsToTemplate helper for dynamic property binding.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { argsToTemplate } from '@storybook/angular';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Text: Story = {\n  render: (args) => ({\n    props: args,\n    template: `<storybook-button ${argsToTemplate(args)}></storybook-button>`,\n  }),\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Resolving TypeScript Module Paths in Storybook\nDESCRIPTION: Shows how to configure Storybook to resolve TypeScript module paths using tsconfig-paths-webpack-plugin. This resolves issues with module aliases defined in tsconfig.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nimport TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';\nimport path from 'path';\n\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  webpackFinal: async (config) => {\n    config.resolve.plugins = [\n      ...(config.resolve.plugins || []),\n      new TsconfigPathsPlugin({\n        extensions: config.resolve.extensions,\n      }),\n    ];\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding MDX Preview Block Component\nDESCRIPTION: Advanced example demonstrating how to replace Storybook's Preview block with a custom component in the docs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/theming.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyPreview } from './MyPreview';\n\naddParameters({\n  docs: {\n    components: {\n      Preview: MyPreview,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization in Storybook Preview using TypeScript (TS 4.9)\nDESCRIPTION: TypeScript implementation of internationalization settings for Storybook preview. Imports the Preview type from the framework-specific Storybook package and defines a locale selector in the toolbar with multiple language options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-locales-globaltype.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  globalTypes: {\n    locale: {\n      description: 'Internationalization locale',\n      toolbar: {\n        icon: 'globe',\n        items: [\n          { value: 'en', right: '🇺🇸', title: 'English' },\n          { value: 'fr', right: '🇫🇷', title: 'Français' },\n          { value: 'es', right: '🇪🇸', title: 'Español' },\n          { value: 'zh', right: '🇨🇳', title: '中文' },\n          { value: 'kr', right: '🇰🇷', title: '한국어' },\n        ],\n      },\n    },\n  },\n  initialGlobals: {\n    locale: 'en',\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte List Stories with Svelte CSF in TypeScript 4.9\nDESCRIPTION: Implements a Storybook story for a Svelte List component using Svelte CSF format in TypeScript 4.9. It uses the defineMeta function and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import List from './List.svelte';\n\n  const { Story } = defineMeta({\n    component: List,\n  });\n</script>\n\n<!-- Always an empty list, not super interesting -->\n<Story name=\"Empty\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Svelte using CSF in TypeScript (4.9+)\nDESCRIPTION: This snippet shows how to create stories for a Svelte Button component using Component Story Format (CSF) in TypeScript 4.9+. It sets up the component metadata with type inference, defines parameters, and exports a basic story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'this data is passed to the addon',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Colors in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook's preview settings in TypeScript. It imports the Preview type from the framework-specific Storybook package and sets up preset colors for controls. The configuration includes an array of colors in various formats.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-parameters-color-swatches.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      presetColors: [{ color: '#ff4785', title: 'Coral' }, 'rgba(0, 159, 183, 1)', '#fe4a49'],\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Common TypeScript 4.9 Format\nDESCRIPTION: This snippet shows how to create Storybook stories for a Button component using a common TypeScript 4.9 format. It can be adapted for various frameworks and uses the `satisfies` operator for type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for HTML Renderer with Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet leverages '@storybook/html' to define Button stories for Storybook. It imports Button types and a rendering factory, provides meta configuration, and exports stories with 'render' functions and argument variations. The setup aligns with CSF standards and adds static typing via TypeScript for button argument structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\\nimport { createButton, ButtonArgs } from './Button';\\n\\nconst meta: Meta<ButtonArgs> = {\\n  /* 👇 The title prop is optional.\\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\\n   * to learn how to generate automatic titles\\n   */\\n  title: 'Button',\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<ButtonArgs>;\\n\\n/*\\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\\n * See https://storybook.js.org/docs/api/csf\\n * to learn how to use render functions.\\n */\\nexport const Primary: Story = {\\n  render: (args) => createButton(args),\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  render: (args) => createButton(args),\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  render: (args) => createButton(args),\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook's main file using TypeScript. It imports the StorybookConfig type, sets the framework, specifies story locations, and enables crash reports for telemetry events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-enable-crash-reports.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for React in TypeScript 4.9\nDESCRIPTION: This snippet shows how to set up Storybook stories for a React Button component using TypeScript 4.9 syntax. It uses the 'satisfies' keyword for type inference and defines story types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Global State Handler in TypeScript\nDESCRIPTION: A higher-order function that wraps Storybook stories to apply outline styles based on global state. It handles both story and documentation modes, manages style injection and cleanup, and uses Storybook's hooks for global state management.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-use-global.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  Renderer,\n  PartialStoryFn as StoryFunction,\n  StoryContext,\n} from 'storybook/internal/types';\n\nimport { useEffect, useMemo, useGlobals } from 'storybook/preview-api';\nimport { PARAM_KEY } from './constants';\n\nimport { clearStyles, addOutlineStyles } from './helpers';\n\nimport outlineCSS from './outlineCSS';\n\nexport const withGlobals = (StoryFn: StoryFunction<Renderer>, context: StoryContext<Renderer>) => {\n  const [globals] = useGlobals();\n\n  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);\n\n  // Is the addon being used in the docs panel\n  const isInDocs = context.viewMode === 'docs';\n\n  const outlineStyles = useMemo(() => {\n    const selector = isInDocs ? `#anchor--${context.id} .docs-story` : '.sb-show-main';\n\n    return outlineCSS(selector);\n  }, [context.id]);\n  useEffect(() => {\n    const selectorId = isInDocs ? `my-addon-docs-${context.id}` : `my-addon`;\n\n    if (!isActive) {\n      clearStyles(selectorId);\n      return;\n    }\n\n    addOutlineStyles(selectorId, outlineStyles);\n\n    return () => {\n      clearStyles(selectorId);\n    };\n  }, [isActive, outlineStyles, context.id]);\n\n  return StoryFn();\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Button Story Implementation (JavaScript)\nDESCRIPTION: Implements a Button story for Vue using JavaScript and CSF 2 format. Uses Vue's component and template syntax with setup function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nexport const Primary = (args) => ({\n  components: { Button },\n  setup() {\n    return { args };\n  },\n  template: '<Button v-bind=\"args\" />',\n});\nPrimary.args = { primary: true };\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Axe (TypeScript)\nDESCRIPTION: TypeScript implementation of Storybook test runner configuration with type safety and axe-playwright integration for accessibility testing. Includes proper type definitions and the same functionality as the JavaScript version.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-disable.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\nimport { getStoryContext } from '@storybook/test-runner';\n\nimport { injectAxe, checkA11y } from 'axe-playwright';\n\n/*\n * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api\n * to learn more about the test-runner hooks API.\n */\nconst config: TestRunnerConfig = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await getStoryContext(page, context);\n\n    // Do not run a11y tests on disabled stories.\n    if (storyContext.parameters?.a11y?.disable) {\n      return;\n    }\n    await checkA11y(page, 'body', {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Svelte CSF (TypeScript 4.9)\nDESCRIPTION: Configures Storybook metadata for a Svelte component in a separate TypeScript file using standard CSF and TypeScript 4.9 syntax (specifically the `satisfies` operator for type checking `Meta`). It imports the component and `Meta` type, then hides the 'foo' property from the args table via `argTypes`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"YourComponent.stories.ts\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"CSF\"\nimport type { Meta } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n} satisfies Meta<typeof YourComponent>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Common JavaScript\nDESCRIPTION: Framework-agnostic JavaScript implementation of Button stories. Provides basic story configuration with background settings that works across different frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  globals: {\n    // 👇 Set background value for all component stories\n    backgrounds: { value: 'gray', grid: false },\n  },\n};\n\nexport const OnDark = {\n  globals: {\n    // 👇 Override background value for this story\n    backgrounds: { value: 'dark' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom DocsPage with Doc Blocks\nDESCRIPTION: Example of creating a custom DocsPage layout using individual documentation blocks and components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ArgsTable, Description, Primary, Stories, Subtitle, Title } from '@storybook/addon-docs';\nimport { DocgenButton } from '../../components/DocgenButton';\n\nexport default {\n  title: 'Addons/Docs/stories docs blocks',\n  component: DocgenButton,\n  parameters: {\n    docs: {\n      page: () => (\n        <>\n          <Title />\n          <Subtitle />\n          <Description />\n          <Primary />\n          <ArgsTable />\n          <Stories />\n        </>\n      ),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook Preact Configuration with Vite\nDESCRIPTION: Example showing how to add Preact-specific Vite plugins to Storybook configuration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n@preact/preset-vite\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Solid in TypeScript 4.9+\nDESCRIPTION: This snippet shows how to create stories for the Page component in Solid using TypeScript 4.9+. It uses the 'satisfies' keyword for type inference, imports necessary types and components, and defines a LoggedIn story with args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Page } from './Page';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta = {\n  component: Page,\n} satisfies Meta<typeof Page>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in React with JavaScript\nDESCRIPTION: Creates a ButtonGroup story in React using JavaScript. The story imports Button stories and reuses their args to create a pair of buttons in a horizontal orientation. Demonstrates component composition pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ButtonGroup } from '../ButtonGroup';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nexport default {\n  component: ButtonGroup,\n};\n\nexport const Pair = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This TypeScript configuration file for Storybook defines the framework, story file patterns, and disables telemetry. It imports the StorybookConfig type for type checking and uses ES6 module syntax to export the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableTelemetry: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet configures Storybook using JavaScript by specifying the framework and defining patterns for stories including custom story files. The central functionality involves creating an asynchronous indexer for files matching the `.custom-stories` pattern to enhance Storybook's file indexing capabilities.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: [\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n    // 👇 Make sure files to index are included in `stories`\n    '../src/**/*.custom-stories.@(js|jsx|ts|tsx)',\n  ],\n  experimental_indexers: async (existingIndexers) => {\n    const customIndexer = {\n      test: \\.custom-stories\\.[tj]sx?$/,\\n      createIndex: async (fileName) => {\\n        // See API and examples below...\\n      },\\n    };\\n    return [...existingIndexers, customIndexer];\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Runner for Accessibility Testing\nDESCRIPTION: Configuration file setup for the Storybook test runner to enable accessibility testing with axe-playwright. The code sets up preVisit and postVisit hooks to inject and execute accessibility tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/test-runner.js\nconst { injectAxe, checkA11y } = require('axe-playwright');\n\n/*\n * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api\n * to learn more about the test-runner hooks API.\n */\nmodule.exports = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page) {\n    await checkA11y(page, '#storybook-root', {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Document Screen Component (JavaScript)\nDESCRIPTION: Svelte implementation using JavaScript that handles document data fetching and display. Uses onMount for data fetching and conditional rendering for different states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { onMount } from 'svelte';\n\n  import PageLayout from './PageLayout.svelte';\n  import DocumentHeader from './DocumentHeader.svelte';\n  import DocumentList from './DocumentList.svelte';\n\n  export let user = {};\n  export let document = {};\n  export let subdocuments = [];\n  export let status = 'loading';\n\n  onMount(async () => {\n    await fetch('https://your-restful-endpoint')\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res;\n      })\n      .then((res) => res.json())\n      .then((data) => {\n        user = data.user;\n        status = 'success';\n        document = data.document;\n        subdocuments = data.subdocuments;\n      })\n      .catch(() => {\n        status = 'error';\n      });\n  });\n</script>\n\n{#if status === \"error\"}\n<p>There was an error fetching the data!</p>\n{:else if status === \"loading\"}\n<p>Loading...</p>\n{:else}\n<PageLayout {user}>\n  <DocumentHeader {document} />\n  <DocumentList documents=\"{subdocuments}\" />\n</PageLayout>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for React (TypeScript)\nDESCRIPTION: This example demonstrates a TypeScript-based React Storybook story configuration, using '@storybook/react' typing for strict structure. It includes advanced accessibility configuration for Axe rules, disables unwanted checks, and utilizes the 'manual' flag for accessibility testing control. The snippet is tailored for React projects that enforce TypeScript types on Storybook stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const ExampleStory: Story = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgType Categories in Storybook for Web Components (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the `meta` configuration for a Web Component ('demo-button') story in Storybook. It imports the `Meta` type from `@storybook/web-components` and defines the component using its tag name string. It organizes `argTypes` like `backgroundColor`, `primary`, `label`, `onClick`, and `size` into categories and subcategories using the `table` property for structured display in the controls panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n        // Assigns the argTypes to a specific subcategory\n        subcategory: 'Button colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n        subcategory: 'Button style',\n      },\n    },\n    label: {\n      table: {\n        category: 'Text',\n        subcategory: 'Button contents',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n        subcategory: 'Button Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in TypeScript 4.9 for SolidJS with Satisfies Operator\nDESCRIPTION: Creates a Storybook story for a SolidJS Button component using TypeScript 4.9's satisfies operator. Defines three story variations with the SolidJS-specific Meta and StoryObj types from storybook-solidjs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"Button\" />,\n};\n\nexport const Secondary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />,\n};\n\nexport const Tertiary: Story = {\n  render: () => <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: React Profile Page Context Provider Implementation\nDESCRIPTION: React implementation of a profile page component that provides user posts and friends containers through context. Uses React's Context API to maintain referential equality of context values between renders.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport ProfilePageContext from './ProfilePageContext';\nimport { ProfilePageContainer } from './ProfilePageContainer';\nimport { UserPostsContainer } from './UserPostsContainer';\nimport { UserFriendsContainer } from './UserFriendsContainer';\n\n//👇 Ensure that your context value remains referentially equal between each render.\nconst context = {\n  UserPostsContainer,\n  UserFriendsContainer,\n};\n\nexport const AppProfilePage = () => {\n  return (\n    <ProfilePageContext.Provider value={context}>\n      <ProfilePageContainer />\n    </ProfilePageContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Button Stories with Storybook (TypeScript)\nDESCRIPTION: This TypeScript code establishes Button stories for Svelte in Storybook using classic CSF. It imports required types, Button.svelte, exports meta, and provides static types for story exports. Primary, Secondary, and Tertiary stories all inherit typing and default argument objects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\\n\\nimport Button from './Button.svelte';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<typeof Button>;\\n\\nexport const Primary: Story = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Sharing Webpack Configuration Between Next.js and Storybook\nDESCRIPTION: Configuration to share Webpack rules between Next.js and Storybook by importing the Next.js configuration into Storybook's webpackFinal function in main.js|ts.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  webpackFinal: async (baseConfig) => {\n    const nextConfig = require('/path/to/next.config.js');\n\n    // merge whatever from nextConfig into the webpack config storybook will use\n    return { ...baseConfig, ...nextConfig };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Button Stories with Type Satisfaction\nDESCRIPTION: Framework-agnostic implementation using TypeScript 4.9's satisfies operator for type checking. Provides a template for implementing button stories across different renderers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/typed-csf-file.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, etc.)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic = {} satisfies Story;\n\nexport const Primary = {\n  args: {\n    primary: true,\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript 4.9+ Using satisfies Operator\nDESCRIPTION: Sets up a Storybook story for a Button component using TypeScript 4.9+ with the satisfies operator. Imports Meta type from a generic renderer and configures a label control with customized description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic = {\n  argTypes: {\n    // 👇 This story expects a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Component in TypeScript\nDESCRIPTION: Defines an Angular component with user, document, and subdocuments as @Input properties. The component displays these in a structured layout using Angular's template syntax. Dependencies include Angular core modules, and it requires valid user and document objects to function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'document-screen',\n  template: `\n    <page-layout [user]=\"user\">\n      <document-header [document]=\"document\"></document-header>\n      <document-list [documents]=\"subdocuments\"></document-list>\n    </page-layout>\n  `,\n})\nexport class DocumentScreen {\n  @Input()\n  user: any = { id: 0, name: 'Some User' };\n\n  @Input()\n  document: any = { id: 0, title: 'Some Title' };\n\n  @Input()\n  subdocuments: any = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Snapshot Tests with Jest in TypeScript\nDESCRIPTION: A TypeScript implementation for running snapshot tests on Storybook components using Jest. The script provides type definitions for story files and properly typed functions for finding and composing stories. It includes error handling and waits for component rendering before capturing snapshots.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with one of the supported Storybook frameworks (react, vue3)\nimport type { Meta, StoryFn } from '@storybook/your-framework';\n\nimport path from \"path\";\nimport * as glob from \"glob\";\n\n//👇 Augment expect with jest-specific-snapshot\nimport \"jest-specific-snapshot\";\n\nimport { describe, test, expect } from \"@jest/globals\";\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\ntype StoryFile = {\n  default: Meta;\n  [name: string]: StoryFn | Meta;\n};\n\nconst compose = (\n  entry: StoryFile\n): ReturnType<typeof composeStories<StoryFile>> => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your stories files\n  const storyFiles = glob.sync(\n    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),\n  );\n\n  return storyFiles.map((filePath) => {\n    const storyFile = require(filePath);\n    const storyDir = path.dirname(filePath);\n    const componentName = path\n      .basename(filePath)\n      .replace(/\\.(stories|story)\\.[^/.]+$/, \"\");\n\n    return { filePath, storyFile, storyDir, componentName };\n  });\n}\n\ndescribe(\"Stories Snapshots\", () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile)).map(\n        ([name, story]) => ({ name, story })\n      );\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        test(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          // Defines the custom snapshot path location and file name\n          const customSnapshotPath = `./__snapshots__/${componentName}.test.ts.snap`;\n          expect(document.body.firstChild).toMatchSpecificSnapshot(customSnapshotPath);\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Metadata in Storybook (TypeScript 4.9+)\nDESCRIPTION: Defines the default export for `Button.stories.ts` or `Button.stories.tsx` using TypeScript 4.9+'s `satisfies` operator for type checking. It imports `Meta` from a framework-specific Storybook package (`@storybook/your-framework` is a placeholder) and the `Button` component. The `meta` object configures the `title` and `component`, ensuring type compatibility with `Meta<typeof Button>`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Ordered Pages in Storybook\nDESCRIPTION: Demonstrates how to configure story sorting with a specific order for pages and nested components using arrays in the preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  options: {\n    storySort: {\n      order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing renderMain Function for Storybook Custom Framework Integration\nDESCRIPTION: Defines the main rendering function used by Storybook to display stories in the preview iframe. It takes a story function, executes it to get the story object, processes it through a framework-specific rendering function, and updates the root DOM element with the resulting HTML.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-framework-render-function.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootElement = document.getElementById('root');\n\nexport default function renderMain({ storyFn }: RenderMainArgs) {\n  const storyObj = storyFn();\n  const html = fn(storyObj);\n  rootElement.innerHTML = html;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Stories with JavaScript\nDESCRIPTION: This snippet demonstrates how to set up story metadata for a Web Component in Storybook using JavaScript. It defines the component's title and sets tags for documentation and development visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC in Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration example for customizing SWC in Storybook's main.ts file. It imports necessary types from @swc/core and Storybook, then defines a strongly-typed configuration object with framework settings and a swc function for custom configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Options } from '@swc/core';\n// Replace your-framework with the webpack-based framework you are using (e.g., react-webpack5)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/your-framework',\n    options: {},\n  },\n  swc: (config: Options, options): Options => {\n    return {\n      ...config,\n      // Apply your custom SWC configuration\n    };\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Button Story in Storybook (TypeScript)\nDESCRIPTION: This snippet shows a standard TypeScript approach for defining a Storybook story. It imports `Meta` and `StoryObj` types from a framework-specific Storybook package (represented by `@storybook/your-framework`) and the `ButtonComponent`. The `meta` object is explicitly typed using `Meta<typeof ButtonComponent>` and contains the configuration. A `Story` type alias is created using `StoryObj`, and a basic `Button` story is exported.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button as ButtonComponent } from './Button';\n\nconst meta: Meta<typeof ButtonComponent> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: ButtonComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ButtonComponent>;\n\n// This is the only named export in the file, and it matches the component name\nexport const Button: Story = {};\n```\n```\n\n----------------------------------------\n\nTITLE: Resetting MockDate in Storybook Preview using TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook that types the preview object and resets MockDate before each story renders. Uses the Preview type from the renderer-specific Storybook package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport { Preview } from '@storybook/your-renderer';\nimport MockDate from 'mockdate';\n\nconst preview: Preview = {\n  async beforeEach() {\n    MockDate.reset();\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Manager UI Settings in JavaScript\nDESCRIPTION: Sets up the Storybook Manager UI by importing the addons API and configuring various aspects of the interface including panel dimensions, sidebar behavior, and toolbar visibility options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-config-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from 'storybook/manager-api';\n\naddons.setConfig({\n  navSize: 300,\n  bottomPanelHeight: 300,\n  rightPanelWidth: 300,\n  panelPosition: 'bottom',\n  enableShortcuts: true,\n  showToolbar: true,\n  theme: undefined,\n  selectedPanel: undefined,\n  initialActive: 'sidebar',\n  sidebar: {\n    showRoots: false,\n    collapsedRoots: ['other'],\n  },\n  toolbar: {\n    title: { hidden: false },\n    zoom: { hidden: false },\n    eject: { hidden: false },\n    copy: { hidden: false },\n    fullscreen: { hidden: false },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Button Component with composeStory in Jest\nDESCRIPTION: This code demonstrates testing a Vue button component with Jest using Storybook's composeStory function. It imports a Primary story from Button.stories and tests it with different locale settings (English and Spanish), additionally importing the Vue testing library.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-override-globals.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@jest/globals';\nimport { render } from '@testing-library/vue';\nimport { composeStory } from '@storybook/vue3';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\ntest('renders in English', async () => {\n  const Primary = composeStory(\n    PrimaryStory,\n    meta,\n    { globals: { locale: 'en' } }, // 👈 Project annotations to override the locale\n  );\n\n  await Primary.run();\n});\n\ntest('renders in Spanish', async () => {\n  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });\n\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Async Storybook Story for Angular Component\nDESCRIPTION: This snippet defines a Storybook story for an Angular component named MyComponent. It uses TypeScript and includes a play function that simulates user interactions such as typing, clicking, and hovering. The story demonstrates how to use Storybook's testing utilities for DOM manipulation and asynchronous operations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Reset in React Storybook (JavaScript)\nDESCRIPTION: React implementation using JavaScript to demonstrate highlight reset functionality in Storybook stories. Uses decorators to manage highlight state through the useChannel API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-highlight-reset.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ResetHighlight = {\n  decorators: [\n    (storyFn) => {\n      const emit = useChannel({});\n      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\n      emit(HIGHLIGHT, {\n        elements: ['header', 'section', 'footer'],\n      });\n      return storyFn();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook's main file using JavaScript. It sets the framework, specifies story locations, and enables crash reports for telemetry events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-enable-crash-reports.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Robots Tag in Storybook Manager - HTML\nDESCRIPTION: This snippet adds a <meta> tag to the Storybook manager's head section to instruct search engines not to index the page. No dependencies are required as this is standard HTML and is used by placing it inside the .storybook/manager-head.html file. This configuration is useful for keeping Storybook instances private; the expected behavior is that compliant web crawlers will not index the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/seo-noindex.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\\\"robots\\\" content=\\\"noindex\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration example for Storybook's main.ts file. This imports the StorybookConfig type, defines the framework to use, specifies file patterns for stories including MDX documentation, and adds the essentials addon package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-main-mdx-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: [\n    //👇 Your documentation written in MDX along with your stories goes here\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n  ],\n  addons: ['@storybook/addon-essentials'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in React with TypeScript 4.9+ Satisfies Operator\nDESCRIPTION: This snippet demonstrates how to set up Button stories in React using TypeScript 4.9+ with the satisfies operator. It imports the Meta type from Storybook React, configures the component reference with TypeScript typing, and sets background parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-parameters.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from './Button';\n\nimport type { Meta } from '@storybook/react';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Svelte\nDESCRIPTION: A Svelte implementation of a Button component that uses export declarations for props and creates an event dispatcher for handling click events. The component includes reactive styling for background color and JSDoc comments for each property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { createEventDispatcher } from 'svelte';\n  /**\n   * Is this the principal call to action on the page?\n   */\n  export let primary = false;\n\n  /**\n   * What background color to use\n   */\n  export let backgroundColor = undefined;\n  /**\n   * How large should the button be?\n   */\n  export let size = 'medium';\n  /**\n   * Button contents\n   */\n  export let label = '';\n\n  $: style = backgroundColor ? `background-color: ${backgroundColor}` : '';\n\n  const dispatch = createEventDispatcher();\n\n  /**\n   * Optional click handler\n   */\n  export let onClick = (event) => {\n    dispatch('click', event);\n  };\n</script>\n\n<button type=\"button\" {style} on:click=\"{onClick}\">{label}</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for React in TypeScript 4.9+\nDESCRIPTION: This snippet demonstrates creating stories for the Page component in React using TypeScript 4.9+. It uses the 'satisfies' keyword for type inference, imports necessary types and components, and defines a LoggedIn story with args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Page } from './Page';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta = {\n  component: Page,\n} satisfies Meta<typeof Page>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Components with Jest in TypeScript\nDESCRIPTION: A complete TypeScript implementation for automated testing of Storybook components using Jest. It includes type definitions, story file discovery, composition, filtering, and snapshot testing. The TypeScript version adds strong type checking while maintaining the same functionality as the JavaScript implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-snapshot-test.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport * as glob from 'glob';\n\n// Replace your-framework with one of the supported Storybook frameworks (react, vue3)\nimport type { Meta, StoryFn } from '@storybook/your-framework';\n\nimport { describe, test, expect } from '@jest/globals';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\ntype StoryFile = {\n  default: Meta;\n  [name: string]: StoryFn | Meta;\n};\n\nconst compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your stories files\n  const storyFiles = glob.sync(\n    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),\n  );\n\n  return storyFiles.map((filePath) => {\n    const storyFile = require(filePath);\n    return { filePath, storyFile };\n  });\n}\n\n// Recreate similar options to Storyshots. Place your configuration below\nconst options = {\n  suite: 'Storybook Tests',\n  storyKindRegex: /^.*?DontTest$/,\n  storyNameRegex: /UNSET/,\n  snapshotsDirName: '__snapshots__',\n  snapshotExtension: '.storyshot',\n};\n\ndescribe(options.suite, () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {\n      // Skip component tests if they are disabled\n      return;\n    }\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile))\n        .map(([name, story]) => ({ name, story }))\n        .filter(({ name, story }) => {\n          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.\n          return !options.storyNameRegex.test(name) && !story.parameters.storyshots?.disable;\n        });\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.\n        const testFn = story.parameters.storyshots?.skip ? test.skip : test;\n\n        testFn(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          expect(document.body.firstChild).toMatchSnapshot();\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing React Button Component with Storybook and Vitest\nDESCRIPTION: This code snippet shows how to test a React Button component using Storybook's composeStory function and Vitest. It includes tests for rendering the button with default args and overridden props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-story.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { vi, test, expect } from 'vitest';\nimport { screen } from '@testing-library/react';\nimport { composeStory } from '@storybook/react';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\n// Returns a story which already contains all annotations from story, meta and global levels\nconst Primary = composeStory(PrimaryStory, meta);\n\ntest('renders primary button with default args', async () => {\n  await Primary.run();\n\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  await Primary.run({ args: { ...Primary.args, label: 'Hello world' } });\n\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for React in TypeScript\nDESCRIPTION: This snippet demonstrates how to create stories for a React Button component using TypeScript. It configures the component metadata with explicit typing, sets parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => <Button>Hello</Button>,\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Configuration in TypeScript\nDESCRIPTION: This TypeScript snippet defines and exports a configuration object for Storybook, specifying its framework and story locations. It uses TypeScript types for increased safety and provides a method to merge existing environment variables into Storybook's configuration. Dependencies include the Storybook package relevant to the chosen framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-env.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  /*\n   * 👇 The `config` argument contains all the other existing environment variables.\n   * Either configured in an `.env` file or configured on the command line.\n   */\n  env: (config) => ({\n    ...config,\n    EXAMPLE_VAR: 'An environment variable configured in Storybook',\n  }),\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook's preview panel that imports the Preview type, defines color and date matchers for controls, and customizes the docs page layout with addon-docs components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-template-function.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport {\n  Title,\n  Subtitle,\n  Description,\n  Primary,\n  Controls,\n  Stories,\n} from '@storybook/addon-docs/blocks';\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      page: () => (\n        <>\n          <Title />\n          <Subtitle />\n          <Description />\n          <Primary />\n          <Controls />\n          <Stories />\n        </>\n      ),\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in React with TypeScript\nDESCRIPTION: Defines the metadata for Button component stories in a React project using standard TypeScript. It imports `Meta` and `StoryObj` types from `@storybook/react` and the `Button` component. The exported `meta` object defines the component, `argTypes` (with a color control for `backgroundColor`), and default `args` (`primary: true`), and includes a type definition for individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"react\" language=\"ts\"\nimport type { Meta } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Addon Tool Component in TypeScript/React\nDESCRIPTION: A memoized React component that implements a Storybook addon tool. It uses the Storybook API to manage global state, handle toggle functionality, and register keyboard shortcuts. The component renders as an icon button with a lightning icon that can be toggled on/off, with the state persisted in Storybook's globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-tool-initial-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { memo, useCallback, useEffect } from 'react';\n\nimport { useGlobals, useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\n\nimport { ADDON_ID, PARAM_KEY, TOOL_ID } from './constants';\n\nexport const Tool = memo(function MyAddonSelector() {\n  const [globals, updateGlobals] = useGlobals();\n  const api = useStorybookApi();\n\n  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);\n\n  const toggleMyTool = useCallback(() => {\n    updateGlobals({\n      [PARAM_KEY]: !isActive,\n    });\n  }, [isActive]);\n\n  useEffect(() => {\n    api.setAddonShortcut(ADDON_ID, {\n      label: 'Toggle Addon [8]',\n      defaultShortcut: ['8'],\n      actionName: 'myaddon',\n      showInMenu: false,\n      action: toggleMyTool,\n    });\n  }, [toggleMyTool, api]);\n\n  return (\n    <IconButton key={TOOL_ID} active={isActive} title=\"Enable my addon\" onClick={toggleMyTool}>\n      <LightningIcon />\n    </IconButton>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Storybook Theme in JavaScript\nDESCRIPTION: This code creates a custom theme for Storybook using the create function. It sets various theme properties including base theme, typography, branding, colors, UI elements, and form styles. The theme can be applied to customize the appearance of the Storybook interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from 'storybook/theming/create';\n\nexport default create({\n  base: 'light',\n  // Typography\n  fontBase: '\"Open Sans\", sans-serif',\n  fontCode: 'monospace',\n\n  brandTitle: 'My custom Storybook',\n  brandUrl: 'https://example.com',\n  brandImage: 'https://storybook.js.org/images/placeholders/350x150.png',\n  brandTarget: '_self',\n\n  //\n  colorPrimary: '#3A10E5',\n  colorSecondary: '#585C6D',\n\n  // UI\n  appBg: '#ffffff',\n  appContentBg: '#ffffff',\n  appPreviewBg: '#ffffff',\n  appBorderColor: '#585C6D',\n  appBorderRadius: 4,\n\n  // Text colors\n  textColor: '#10162F',\n  textInverseColor: '#ffffff',\n\n  // Toolbar default and active colors\n  barTextColor: '#9E9E9E',\n  barSelectedColor: '#585C6D',\n  barHoverColor: '#585C6D',\n  barBg: '#ffffff',\n\n  // Form colors\n  inputBg: '#ffffff',\n  inputBorder: '#10162F',\n  inputTextColor: '#10162F',\n  inputBorderRadius: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Vue with TypeScript\nDESCRIPTION: Creates a ButtonGroup story in Vue using TypeScript. Uses explicit type annotations for meta and Story. Provides a render function to control component rendering and composes Button stories into a ButtonGroup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport ButtonGroup from './ButtonGroup.vue';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta: Meta<typeof ButtonGroup> = {\n  component: ButtonGroup,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ButtonGroup>;\n\nexport const Pair: Story = {\n  render: (args) => ({\n    components: { ButtonGroup },\n    setup() {\n      return { args };\n    },\n    template: '<ButtonGroup v-bind=\"args\" />',\n  }),\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for SvelteKit\nDESCRIPTION: Updates the Storybook configuration file to use the SvelteKit framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"sveltekit-add-framework.md\" />\n```\n\n----------------------------------------\n\nTITLE: Common Button Story Configuration with JavaScript\nDESCRIPTION: Basic Button story configuration using JavaScript for common framework implementations. Sets up story parameters to show source code in the canvas view.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = {\n  parameters: {\n    docs: {\n      canvas: { sourceState: 'shown' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing React Form Component with JavaScript\nDESCRIPTION: Test suite for a React form component using Testing Library and Storybook's composeStories. Tests both invalid and valid form states by interacting with form elements and verifying validation feedback.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/multiple-stories-test.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/react';\n\nimport { composeStories } from '@storybook/react';\n\nimport * as FormStories from './LoginForm.stories';\n\nconst { InvalidForm, ValidForm } = composeStories(FormStories);\n\ntest('Tests invalid form state', async () => {\n  await InvalidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n\ntest('Tests filled form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in TypeScript for Web Components\nDESCRIPTION: TypeScript implementation of accessibility testing configuration specifically for web components. Includes type definitions and strongly-typed parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      manual: true,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Highlight Channel in Angular\nDESCRIPTION: Demonstrates how to use the highlight channel in Angular Storybook. This example creates a Story with a decorator that highlights specific elements with blue double-lined borders. It uses componentWrapperDecorator to wrap the story and emit the highlight event.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-addon-custom-style.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { componentWrapperDecorator } from '@storybook/angular';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const StyledHighlight: Story = {\n  decorators: [\n    componentWrapperDecorator((story) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n        color: 'blue',\n        style: 'double', // 'dotted' | 'dashed' | 'solid' | 'double'\n      });\n      return story;\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story with Solid.js Hooks\nDESCRIPTION: Implements a Button story in Solid.js that uses hooks to manage component state. The example shows how to use createSignal to manage state and implement an onClick handler that updates the button from Secondary to Primary state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { createSignal } from 'solid-js';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n * Example Button story with Solid Hooks.\n * See note below related to this example.\n */\nconst ButtonWithHooks = () => {\n  // Sets the hooks for both the label and primary props\n  const [value, setValue] = createSignal('Secondary');\n  const [isPrimary, setIsPrimary] = createSignal(false);\n\n  // Sets a click handler to change the label's value\n  const handleOnChange = () => {\n    if (!isPrimary()) {\n      setIsPrimary(true);\n      setValue('Primary');\n    }\n  };\n  return <Button primary={isPrimary()} onClick={handleOnChange} label={value()} />;\n};\n\nexport const Primary: Story = {\n  render: () => <ButtonWithHooks />,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components List Stories in TypeScript\nDESCRIPTION: Implements a Storybook story for a Web Components List component using TypeScript. It imports type definitions and defines an Empty list story with a render function using the html template tag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-list',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {\n  render: () => html`<demo-list></demo-list>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte List Stories with CSF in TypeScript 4.9\nDESCRIPTION: Creates a Storybook story for a Svelte List component using the Component Story Format (CSF) in TypeScript 4.9 with the satisfies operator. It includes type definitions and an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport List from './List.svelte';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Settings in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook's preview settings in JavaScript. It includes setting up color and date control matchers, and applying the dark theme to the documentation. The configuration uses the 'ensure' function to validate the theme object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { themes, ensure } from 'storybook/theming';\n\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      theme: ensure(themes.dark), // The replacement theme to use\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Common Frameworks using TypeScript\nDESCRIPTION: This snippet shows a framework-agnostic approach to creating Storybook stories for a Checkbox component using TypeScript. It can be adapted for various frameworks by replacing the import statement.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Checkbox } from './Checkbox';\n\nconst meta: Meta<typeof Checkbox> = {\n  component: Checkbox,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Checkbox>;\n\nexport const Unchecked: Story = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addon Settings and Parameters\nDESCRIPTION: Defines core configuration for a Storybook addon including preview entry points, manager entries, and default background parameters. Exports functions to handle entry configuration and manager entries, along with default background color presets for light and dark themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-preset-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function config(entry = []) {\n  return [...entry, require.resolve('./defaultParameters')];\n}\n\nexport function managerEntries(entries) {\n  return [...entries, require.resolve('./register')];\n}\n\nexport default {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'light', value: '#F8F8F8' },\n        { name: 'dark', value: '#333333' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed User Typing in Storybook Play Function (TypeScript)\nDESCRIPTION: This snippet shows how to create a delayed story using TypeScript in Storybook. It utilizes the play function to simulate user typing with a delay between characters on multiple elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Story = StoryObj<typeof MyComponent>;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const DelayedStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const exampleElement = canvas.getByLabelText('example-element');\n\n    // The delay option sets the amount of milliseconds between characters being typed\n    await userEvent.type(exampleElement, 'random string', {\n      delay: 100,\n    });\n\n    const AnotherExampleElement = canvas.getByLabelText('another-example-element');\n    await userEvent.type(AnotherExampleElement, 'another random string', {\n      delay: 100,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Button Rendering with Locale Overrides in Vue (TypeScript)\nDESCRIPTION: This TypeScript snippet provides Storybook-based tests for the Button component in a Vue application. It uses @storybook/vue3, @testing-library/vue, and vitest for generating, rendering, and running the component's stories with English and Spanish locale settings. The test requires access to the Button.story metadata and exemplifies locale-driven story configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-override-globals.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from 'vitest';\nimport { render } from '@testing-library/vue';\nimport { composeStory } from '@storybook/vue3';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\ntest('renders in English', async () => {\n  const Primary = composeStory(\n    PrimaryStory,\n    meta,\n    { globals: { locale: 'en' } }, // 👉 Project annotations to override the locale\n  );\n\n  await Primary.run();\n});\n\ntest('renders in Spanish', async () => {\n  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });\n\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Story Implementation (JavaScript)\nDESCRIPTION: Default story implementation for a Button component in Svelte using CSF 3 format. Uses JavaScript with Svelte's component and props pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Default = {\n  render: (args) => ({\n    Component: Button,\n    props: args,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with MDX Documentation\nDESCRIPTION: A CSF stories file that imports an MDX documentation file and sets it as the docs parameter, allowing arbitrary MDX content to be used as documentation for the stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from './Button';\nimport mdx from './Button.mdx';\n\nexport default {\n  title: 'Demo/Button',\n  parameters: {\n    docs: {\n      page: mdx,\n    },\n  },\n  component: Button,\n};\nexport const basic = () => <Button>Basic</Button>;\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query with svelte-apollo in Svelte\nDESCRIPTION: A complete Svelte component that fetches user, document, and subdocument data using GraphQL via svelte-apollo. The code defines a GraphQL query, executes it, and conditionally renders different components based on the query state (loading, error, or success).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import gql from 'graphql-tag';\n  import { query } from 'svelte-apollo';\n  import PageLayout from './PageLayout.svelte';\n  import DocumentHeader from './DocumentHeader.svelte';\n  import DocumentList from './DocumentList.svelte';\n\n  const AllInfoQuery = gql`\n    query AllInfoQuery {\n      user {\n        userID\n        name\n      }\n      document {\n        id\n        userID\n        title\n        brief\n        status\n      }\n      subdocuments {\n        id\n        userID\n        title\n        content\n        status\n      }\n    }\n  `;\n  const infoResult = query(AllInfoQuery);\n</script>\n\n{#if $infoResult.loading}\n<p>Loading...</p>\n{:else if $infoResult.error}\n<p>There was an error fetching the data!</p>\n{:else}\n<PageLayout {$infoResult.data.user}>\n  <DocumentHeader {$infoResult.data.document} />\n  <DocumentList {$infoResult.data.subdocuments} />\n</PageLayout>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Story in JavaScript for Storybook CSF\nDESCRIPTION: This snippet shows how to define a basic story using the Component Story Format (CSF) in Storybook. It exports a constant named 'Basic' that renders a Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/csf-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = () => <Button />;\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Configuration in Storybook (JS)\nDESCRIPTION: This JavaScript snippet configures a button as a web component in Storybook. It sets up the component name and utilizes regex for parameter action handling. Requires Storybook support for web components and JavaScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  parameters: { actions: { argTypesRegex: '^on.*' } },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It specifies the framework, story file locations, and enables automatic documentation generation for tagged stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-autodocs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  docs: {\n    autodocs: 'tag',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook MDX Documentation with Common Renderer\nDESCRIPTION: Sets up an MDX documentation file for Storybook using the common renderer. It imports Meta from Storybook addon-docs and references Checkbox stories to document them.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-meta-block.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n\n<Meta of={CheckboxStories} />\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Components in MDX for Storybook (Svelte CSF Renderer)\nDESCRIPTION: An MDX file specifically for Svelte components that documents Page, List, and ListItem components. It imports stories from Svelte-specific story files and displays them using Storybook's addon-docs components for documentation and visualization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-file.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs/blocks';\n\nimport * as ListStories from './List.stories.svelte';\n\nimport * as ListItemStories from './ListItem.stories.svelte';\n\nimport * as PageStories from './Page.stories.svelte';\n\n<Meta of={PageStories} />\n\n# Page\n\nPage is a layout container that is used to position children in predetermined areas.\n\nIt's often used to apply consistent positioning for content across pages in an application\n\n## Usage\n\n<Canvas of={PageStories.Basic} />\n\n# List\n\nList is a grouping of related items. List can be ordered with multiple levels of nesting.\n\n## Usage\n\n<Story of={ListStories.Filled} />\n\n# List Item\n\nList items are used to group related content in a list. They must be nested within a List component.\n\n## Usage\n\n<Story of={ListItemStories.Starter} meta={ListItemStories} />\n```\n\n----------------------------------------\n\nTITLE: Using a Custom MDX Template in Storybook Preview\nDESCRIPTION: Demonstrates how to import and use a custom MDX template in the Storybook preview configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport CustomTemplate from './CustomTemplate.mdx';\n\nexport const parameters = {\n  docs: {\n    page: CustomTemplate,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook MDX Documentation with Svelte CSF Format\nDESCRIPTION: Sets up an MDX documentation file for Storybook using the Svelte renderer with Svelte CSF format. It imports Checkbox stories specifically from a .stories.svelte file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-meta-block.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories.svelte';\n\n<Meta of={CheckboxStories} />\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Storybook Addon with Event Listener in JavaScript/TypeScript\nDESCRIPTION: This code registers a custom addon with Storybook and sets up an event listener for a custom event. When the 'custom-addon-event' is emitted, the callback function logs the event data to the browser console.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-on.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddons.register('my-organisation/my-addon', (api) => {\n  // Logs the event data to the browser console whenever the event is emitted.\n  api.on('custom-addon-event', (eventData) => console.log(eventData));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Svelte Storybook Story with Interaction Tests (Svelte CSF, JS)\nDESCRIPTION: This snippet shows a Storybook story definition for a Svelte `RegistrationForm` component using the Svelte CSF format and JavaScript. It imports `defineMeta`, `userEvent`, `within`, and the component. The `FilledForm` story uses the `play` function to interact with the rendered component, simulating typing into email/password fields and clicking the submit button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"RegistrationForm.stories.svelte\" renderer=\"svelte\" language=\"js\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import RegistrationForm from './RegistrationForm.svelte';\n\n  const { Story } = defineMeta({\n    component: RegistrationForm,\n  });\n</script>\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"FilledForm\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Web Components with JavaScript\nDESCRIPTION: Shows how to set component parameters for Web Components using JavaScript in Storybook. The example uses the component name 'demo-button' and sets the backgrounds parameter to 'dark'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Essential Addons via npm/yarn\nDESCRIPTION: Command to install the Storybook essentials addon package using npm or yarn package managers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/addon-essentials --save-dev\n# yarn add -D @storybook/addon-essentials\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File using TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook using a TypeScript main.ts file with type safety. It imports and utilizes the 'StorybookConfig' type from the framework package (to be replaced with the actual package), defines framework, story paths, and customizes the manager head, similar to the JavaScript version. Dependencies include the relevant Storybook framework and TypeScript types. Key parameters are enforced by the 'StorybookConfig' type, ensuring valid configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-manager-head.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  managerHead: (head) => `\n    ${head}\n    <link rel=\"preload\" href=\"/fonts/my-custom-manager-font.woff2\" />\n  `,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs in Storybook 8.1\nDESCRIPTION: Demonstrates how to enable autodocs for all components in Storybook 8.1 by adding the 'autodocs' tag to the preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\nexport default {\n  tags: [\"autodocs\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Common Frameworks in TypeScript\nDESCRIPTION: This snippet shows how to define metadata for a Button component using TypeScript in a framework-agnostic way. It imports the Button component, sets up argTypes for the 'variant' prop, and exports the typed metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Documentation with SCSS Syntax Highlighting\nDESCRIPTION: Sets up a Storybook documentation page using MDX format with custom syntax highlighting for SCSS code blocks. The code imports necessary components from Storybook addons and react-syntax-highlighter, and includes an example SCSS snippet.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-custom-syntax-highlight.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n\n<Meta title=\"A Storybook doc with a custom syntax highlight for SCSS\" />\n\n# SCSS example\n\nThis is a sample SCSS code block example highlighted in Storybook\n\n{/* Don't forget to replace (\") with (```) when you copy the snippet to your own app */}\n\n\"scss\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n\"\n\n{/* The usage of this \"Component\" is intentional to enable react-syntax-highlighter's own highlighter */}\n\nexport const Component = () => {\n  return <SyntaxHighlighter/>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Angular\nDESCRIPTION: An Angular implementation of a Button component with inputs for primary state, background color, size, and label, and an output for click events. The component uses decorators to define inputs and outputs with JSDoc comments describing each property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'button',\n  template: `the component implementation markup`,\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for React in TypeScript\nDESCRIPTION: This snippet shows how to create stories for the Page component in React using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a LoggedIn story that reuses args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Page } from './Page';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Page>;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Metadata in Storybook (TypeScript)\nDESCRIPTION: Defines the default export for `Button.stories.ts` or `Button.stories.tsx` using standard TypeScript type annotations. It imports `Meta` from a framework-specific Storybook package (`@storybook/your-framework` is a placeholder) and the `Button` component. The `meta` object is explicitly typed as `Meta<typeof Button>` and configures the `title` and `component`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: Button,\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Vue with Storybook (JavaScript)\nDESCRIPTION: This Vue+JavaScript code defines Storybook stories for a Button component. It uses a render function for story customization, passing args through a template and setup function. Primary, Secondary, and Tertiary stories all share a common meta configuration and propagate argument variations using object spreading. This setup requires Storybook's Vue integration and the Button.vue component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.vue';\\n\\nexport default {\\n  component: Button,\\n};\\n\\n/*\\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\\n * See https://storybook.js.org/docs/api/csf\\n * to learn how to use render functions.\\n */\\nexport const Primary = {\\n  render: (args) => ({\\n    components: { Button },\\n    setup() {\\n      return { args };\\n    },\\n    template: '<Button v-bind=\"args\" />',\\n  }),\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n  render: (args) => ({\\n    components: { Button },\\n    setup() {\\n      return { args };\\n    },\\n    template: '<Button v-bind=\"args\" />',\\n  }),\\n};\\n\\nexport const Tertiary = {\\n  args: {\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Vue with TypeScript 4.9+ using satisfies\nDESCRIPTION: This code demonstrates creating a Storybook story for a Histogram component in Vue using TypeScript 4.9+ with the satisfies operator. It uses a render function with a Vue 3 composition API setup() to make the args available for binding in the template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Histogram from './Histogram.vue';\n\nconst meta = {\n  component: Histogram,\n} satisfies Meta<typeof Histogram>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Default: Story = {\n  render: (args) => ({\n    components: { Histogram },\n    setup() {\n      return { args };\n    },\n    template: '<Histogram v-bind=\"args\" />',\n  }),\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Solid with TypeScript\nDESCRIPTION: Creates a Storybook story for a Solid.js List component using TypeScript. It imports the Unchecked story from ListItem stories and specifies the Meta type explicitly with typescript annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport const meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <Unchecked {...Unchecked.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Component Story Implementation\nDESCRIPTION: Demonstrates how to create a Storybook story for an Angular component using moduleMetadata decorator and argsToTemplate helper. Includes layout structure with header and article sections.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata, argsToTemplate } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { Layout } from './Layout.component';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [Layout],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Example: Story = {\n  render: (args) => ({\n    props: args,\n    template: `\n      <app-layout>\n        <header>\n          <h1>Example</h1>\n        </header>\n        <article>\n          <app-my-component ${argsToTemplate(args)}></app-my-component>\n        </article>\n      </app-layout>\n    `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags for Web Components using TypeScript\nDESCRIPTION: This snippet demonstrates how to set up story tags for a Web Components button using TypeScript. It shows the configuration of default tags and how to add specific tags to individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n  /*\n   * All stories in this file will have these tags applied:\n   *  - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ExperimentalFeatureStory: Story = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Page Stories with TypeScript for Web Components\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Web Components Page element using TypeScript. It imports Web Components-specific types and shows how to mock a user session for a 'my-page' custom element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\n\nconst meta: Meta = {\n  component: 'my-page',\n};\nexport default meta;\n\ntype Story = StoryObj;\n\nexport const Default: Story = {\n  async beforeEach() {\n    // 👇 Set the return value for the getUserFromSession function\n    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Router in JavaScript Storybook Stories\nDESCRIPTION: A JavaScript implementation of a Storybook story for a component that depends on Next.js router functionality. The story configures mock router parameters including pathname, asPath, and query to simulate a specific route.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-override-in-story.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RouterBasedComponent from './RouterBasedComponent';\n\nexport default {\n  component: RouterBasedComponent,\n};\n\n// If you have the actions addon,\n// you can interact with the links and see the route change events there\nexport const Example = {\n  parameters: {\n    nextjs: {\n      router: {\n        pathname: '/profile/[id]',\n        asPath: '/profile/1',\n        query: {\n          id: '1',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Storybook Story with Figma Link (TS 4.9+)\nDESCRIPTION: Defines a Storybook story for a Vue component (`MyComponent.vue`) using TypeScript 4.9+ features. It imports types from `@storybook/vue3` and the component. It leverages the `satisfies` keyword for type-checking the `meta` object and exports an `Example` story with parameters linking to a Figma design file. Requires `@storybook/vue3`, the Vue component, and TypeScript 4.9 or newer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts\" renderer=\"vue\" language=\"ts-4-9\"\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Web Components Storybook Stories with JavaScript\nDESCRIPTION: Demonstrates how to add decorators to Web Components using JavaScript and Lit HTML. The decorator wraps the story function result with a div that has a margin of 3em.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  decorators: [(story) => html`<div style=\"margin: 3em\">${story()}</div>`],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata and Stories for Web Components\nDESCRIPTION: This snippet defines the metadata for Storybook stories, including the component, included stories, and excluded patterns. It also declares data objects and story configurations for simple and complex scenarios.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories\n  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data\n};\n\nexport const simpleData = { foo: 1, bar: 'baz' };\nexport const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const SimpleStory: Story = {\n  args: {\n    data: simpleData,\n  },\n};\n\nexport const ComplexStory: Story = {\n  args: {\n    data: complexData,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components Button Story in JavaScript\nDESCRIPTION: This snippet defines a Storybook story for a Web Component identified by the tag name 'demo-button' using JavaScript. The default export sets the `component` metadata to the tag name string. A `Success` story is exported (note: name differs from others), providing `args` to configure the component, setting `variant` to 'primary'. This relies on the 'demo-button' custom element being registered globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  component: 'demo-button',\n};\n\nexport const Success = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Webpack in JavaScript\nDESCRIPTION: Shows how to configure Storybook's main configuration file using Webpack bundler in JavaScript. Implements module aliasing for mocking dependencies with Webpack-specific syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve.alias,\n        // 👇 External module\n        lodash: require.resolve('./lodash.mock'),\n        // 👇 Internal modules\n        '@/api$': path.resolve(__dirname, './api.mock.ts'),\n        '@/app/actions$': path.resolve(__dirname, './app/actions.mock.ts'),\n        '@/lib/session$': path.resolve(__dirname, './lib/session.mock.ts'),\n        '@/lib/db$': path.resolve(__dirname, './lib/db.mock.ts'),\n      };\n    }\n\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Syntax Highlighting in TypeScript\nDESCRIPTION: This code sets up Storybook preview configuration in TypeScript. It imports the Preview type from the Storybook framework, registers SCSS syntax highlighting, and defines control matchers for colors and dates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-register-language-globally.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport scss from 'react-syntax-highlighter/dist/esm/languages/prism/scss';\n\n// Registers and enables scss language support\nSyntaxHighlighter.registerLanguage('scss', scss);\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in TypeScript 4.9 for Svelte using CSF Format\nDESCRIPTION: Creates a Storybook story for a Svelte Button component using the Component Story Format (CSF) with TypeScript 4.9's satisfies operator. Each story uses the render function to return a Svelte component configuration with different label variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/svelte/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: 'Button',\n    },\n  }),\n};\n\nexport const Secondary: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: '😄👍😍💯',\n    },\n  }),\n};\n\nexport const Tertiary: Story = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: '📚📕📈🤓',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in Vue Storybook (TS)\nDESCRIPTION: TypeScript configuration for Vue components in Storybook with type safety. Implements dark and gray background options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/vue3-vite';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Override the default `dark` option\n        dark: { name: 'Dark', value: '#000' },\n        // 👇 Add a new option\n        gray: { name: 'Gray', value: '#CCC' },\n      },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Storybook and Vite\nDESCRIPTION: TypeScript example showing how to set up strong typing for Storybook configuration with the Vite builder using StorybookConfig type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\n\n// (or whatever framework you are using)\n\nconst config: StorybookConfig = {\n  // other storybook options...,\n  async viteFinal(config, options) {\n    // modify and return config\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Common TypeScript Storybook Stories with Mocked Date\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a common TypeScript Page component with a mocked date. It uses MockDate to set a fixed date for all stories and includes a play function for the Default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the name of your renderer (e.g. react, vue3)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\nimport MockDate from 'mockdate';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\nimport { Page } from './Page';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n  // 👇 Set the value of Date for every story in the file\n  async beforeEach() {\n    MockDate.set('2024-02-14');\n\n    // 👇 Reset the Date after each story\n    return () => {\n      MockDate.reset();\n    };\n  },\n};\nexport default meta;\n\ntype Story = StoryObj<typeof Page>;\n\nexport const Default: Story = {\n  async play({ canvasElement }) {\n    // ... This will run with the mocked Date\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration in Storybook main.js\nDESCRIPTION: This code exports an async webpack function that safely extends Storybook's base webpack configuration. It demonstrates the recommended pattern of creating a new configuration object rather than mutating the original to avoid unexpected bugs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack-preset-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function webpack(baseConfig, options) {\n  // Modify or replace config.\n  // Mutating the original reference object can cause unexpected bugs,\n  // so in this example we replace.\n  const { module = {} } = baseConfig;\n\n  return {\n    ...baseConfig,\n    module: {\n      ...module,\n      rules: [\n        ...(module.rules || []),\n        {\n          /* some new loader */\n        },\n      ],\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Story Implementation\nDESCRIPTION: Svelte-specific implementations of Storybook stories using both the Svelte CSF format and standard CSF format, with TypeScript support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n\tconst { Story } = defineMeta({\n\t\tcomponent: MyComponent,\n\t});\n</script>\n\n<Story name=\"WithAnImage\">\n  <MyComponent src=\"/image.png\" alt=\"my image\" />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in SolidJS Storybook Stories with TypeScript\nDESCRIPTION: Shows how to add a margin decorator to a SolidJS Button component using standard TypeScript notation. The decorator wraps the Story component with a div that has a margin of 3em.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Options in Storybook\nDESCRIPTION: Example showing how to configure Webpack options like lazyCompilation and fsCache in Storybook's main configuration file. These settings can improve performance during development.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  // Webpack-specific configuration\n  core: {\n    builder: {\n      options: {\n        lazyCompilation: true,\n        fsCache: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Block with Parameters\nDESCRIPTION: Illustrates how to configure the Source block using Storybook parameters in a story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = () => <Button>Hello</Button>;\nBasic.parameters = {\n  docs: {\n    source: {\n      language: 'tsx',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Decorating Vue Storybook Component - TypeScript\nDESCRIPTION: This TypeScript snippet defines a Storybook story for Vue. It creates a decorator to highlight preset elements using 'storybook/preview-api' and '@storybook/vue3-vite'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight-addon.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Highlighted: Story = {\n  decorators: [\n    () => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n      });\n      return {\n        template: '<story />',\n      };\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Framework-Agnostic Registration Form Testing with TypeScript\nDESCRIPTION: A TypeScript implementation of a Storybook story that can be used with any framework. This example shows how to write a play function that interacts with a registration form by typing into email and password fields and clicking a submit button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { RegistrationForm } from './RegistrationForm';\n\nconst meta: Meta<typeof RegistrationForm> = {\n  component: RegistrationForm,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof RegistrationForm>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Document Screen Component Implementation\nDESCRIPTION: Angular component that fetches document data from an API endpoint and renders it using a page layout with document header and list components. Handles loading and error states using *ngIf directives.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'document-screen',\n  template: `\n    <div>\n      <div *ngIf=\"error\"><p>There was an error fetching the data!</p></div>\n      <div *ngIf=\"loading\"><p>Loading...</p></div>\n      <div *ngIf=\"!loading && subdocuments.length > 0\">\n        <page-layout [user]=\"user\">\n          <document-header [document]=\"document\"></document-header>\n          <document-list [documents]=\"subdocuments\"></document-list>\n        </page-layout>\n      </div>\n    </div>\n  `,\n})\nexport class DocumentScreen implements OnInit {\n  user: any = { id: 0, name: 'Some User' };\n\n  document: any = { id: 0, title: 'Some Title' };\n\n  subdocuments: any = [];\n\n  error = false;\n  loading = true;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.http.get<any>('https://your-restful-endpoint').subscribe({\n      next: (data) => {\n        this.loading = false;\n        this.user = data.user;\n        this.document = data.document;\n        this.documents.data.subdocuments;\n      },\n      error: (error) => {\n        this.error = true;\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Story Implementation\nDESCRIPTION: Demonstrates creating a Storybook story for a Vue component using Vue's template syntax and component registration. Shows both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Layout from './Layout.vue';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Example: Story = {\n  render: () => ({\n    components: { Layout, MyComponent },\n    template: `\n      <Layout>\n        <header>\n          <h1>Example</h1>\n        </header>\n        <article>\n          <MyComponent />\n        </article>\n      </Layout>\n    `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Vue.js with Pinia (TypeScript)\nDESCRIPTION: This snippet sets up the Storybook preview for a Vue.js project using TypeScript. It integrates Pinia for state management and adds a decorator for story styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup, Preview } from '@storybook/vue3';\n\nimport { createPinia } from 'pinia';\n\nsetup((app) => {\n  //👇 Registers a global Pinia instance inside Storybook to be consumed by existing stories\n  app.use(createPinia());\n});\n\nconst preview: Preview = {\n  decorators: [\n    (story) => ({\n      components: { story },\n      template: '<div style=\"margin: 3em;\"><story /></div>',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Testing Single Story with Metadata\nDESCRIPTION: Demonstrates how to test a single story using composeStory function with story metadata included.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport { composeStory } from '@storybook/react';\nimport Meta, { Primary } from './Button.stories';\n\nconst PrimaryButton = composeStory(Primary, Meta);\n\ntest('renders primary button', () => {\n  render(<PrimaryButton />);\n  expect(screen.getByRole('button')).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes in JavaScript\nDESCRIPTION: JavaScript implementation of Storybook preview configuration that sets up theme switching functionality using withThemeByClassName decorator. Defines light and dark themes with associated class names.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-classname-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withThemeByClassName } from '@storybook/addon-themes';\n\nimport '../src/index.css'; // Your application's global CSS file\n\nconst preview = {\n  decorators: [\n    withThemeByClassName({\n      themes: {\n        light: '',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework in JavaScript\nDESCRIPTION: This snippet shows how to configure the Storybook framework in the main.js file. It demonstrates switching from webpack5 to Vite as the build tool for React projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  // framework: '@storybook/react-webpack5', 👈 Remove this\n  framework: '@storybook/react-vite', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Components with Storybook and Jest\nDESCRIPTION: This code demonstrates how to test Vue components using Storybook's composeStories utility with Jest and Vue Testing Library. It imports story definitions from a Button.stories file, composes them into testable components, and runs tests with both default args and custom props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-stories.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from '@jest/globals';\nimport { render, screen } from '@testing-library/vue';\nimport { composeStories } from '@storybook/vue3';\n\n// Import all stories and the component annotations from the stories file\nimport * as stories from './Button.stories';\n\n// Every component that is returned maps 1:1 with the stories,\n// but they already contain all annotations from story, meta, and project levels\nconst { Primary, Secondary } = composeStories(stories);\n\ntest('renders primary button with default args', () => {\n  render(Primary);\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', () => {\n  // You can override props and they will get merged with values from the story's args\n  render(Primary, { props: { label: 'Hello world' } });\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook for React with TypeScript\nDESCRIPTION: This TypeScript snippet defines Storybook configurations for a React Server Component, utilizing TypeScript's type-checking capabilities with the '@storybook/react' library. Dependencies include TypeScript and the @storybook/react package. The snippet creates a 'meta' object that is exported as the default, establishing the structure for defining Storybook stories with type verification. This setup ensures strict type compliance for Story objects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/rsc-parameter-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport MyServerComponent from './MyServerComponent';\n\nconst meta = {\n  component: MyServerComponent,\n  parameters: {\n    react: { rsc: false },\n  },\n} satisfies Meta<typeof MyServerComponent>;\nexport default meta;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport MyServerComponent from './MyServerComponent';\n\nconst meta: Meta<typeof MyServerComponent> = {\n  component: MyServerComponent,\n  parameters: {\n    react: { rsc: false },\n  },\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Standard CSF MDX Documentation\nDESCRIPTION: Sets up an MDX documentation file for Svelte using standard CSF format. Shows configuration for both standalone documentation pages and component documentation with story imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-docs-only-page.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\nimport * as ExampleComponentStories from './ExampleComponent.stories';\n\n{/* 👇 Documentation-only page */}\n\n<Meta title=\"Documentation\" />\n\n{/* 👇 Component documentation page */}\n\n<Meta of={ExampleComponentStories} />\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Components in MDX for Storybook (Svelte with Standard CSF)\nDESCRIPTION: An MDX file for the Svelte renderer that uses standard Component Story Format files without the .svelte extension. This documentation showcases Page, List, and ListItem components with descriptions and usage examples using Storybook's documentation components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-file.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta, Story } from '@storybook/addon-docs/blocks';\n\nimport * as ListStories from './List.stories';\n\nimport * as ListItemStories from './ListItem.stories';\n\nimport * as PageStories from './Page.stories';\n\n<Meta of={PageStories} />\n\n# Page\n\nPage is a layout container that is used to position children in predetermined areas.\n\nIt's often used to apply consistent positioning for content across pages in an application\n\n## Usage\n\n<Canvas of={PageStories.Basic} />\n\n# List\n\nList is a grouping of related items. List can be ordered with multiple levels of nesting.\n\n## Usage\n\n<Story of={ListStories.Filled} />\n\n# List Item\n\nList items are used to group related content in a list. They must be nested within a List component.\n\n## Usage\n\n<Story of={ListItemStories.Starter} meta={ListItemStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite in TypeScript\nDESCRIPTION: TypeScript version of Storybook's main configuration using Vite bundler. Includes type definitions and provides the same module mocking capabilities as the JavaScript version.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  viteFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve?.alias,\n        // 👇 External module\n        lodash: require.resolve('./lodash.mock'),\n        // 👇 Internal modules\n        '@/api': path.resolve(__dirname, './api.mock.ts'),\n        '@/app/actions': path.resolve(__dirname, './app/actions.mock.ts'),\n        '@/lib/session': path.resolve(__dirname, './lib/session.mock.ts'),\n        '@/lib/db': path.resolve(__dirname, './lib/db.mock.ts'),\n      };\n    }\n\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Svelte with JavaScript CSF\nDESCRIPTION: This snippet shows how to set up story tags for a Svelte component using JavaScript Component Story Format (CSF). It demonstrates applying a global 'stable' tag and overriding it for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n};\n\nexport const ExperimentalFeatureStory = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Essential Addon\nDESCRIPTION: Configuration code showing how to disable a specific addon (backgrounds) from the essential addons package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    {\n      name: '@storybook/addon-essentials',\n      options: {\n        backgrounds: false,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Entries in Storybook Root Preset\nDESCRIPTION: This code demonstrates how to use the managerEntries API in a Storybook root preset to load third-party addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  managerEntries: (entry = []) => [\n    ...entry,\n    require.resolve('@storybook/addon-essentials/manager'),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet exports the default configuration for Storybook using TypeScript. It imports the StorybookConfig type, specifies the framework, story locations, and addons to be used. The framework should be replaced with the specific framework being used in the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-individual-viewport-addon.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-links', '@storybook/addon-viewport'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte using CSF\nDESCRIPTION: This snippet demonstrates how to define Storybook stories for a Svelte Button component using Component Story Format (CSF) in JavaScript. It exports a default meta object and two story objects: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in TypeScript (Common Framework)\nDESCRIPTION: Creates a Button component story with centered layout using TypeScript. This example explicitly types the meta object with Meta<typeof Button> and sets the layout parameter to 'centered' for all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  // Sets the layout parameter component wide.\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Backgrounds in JavaScript (preview.js)\nDESCRIPTION: This JavaScript snippet configures the Storybook backgrounds addon by exporting an object from `.storybook/preview.js`. It defines available background options ('Dark', 'Light', 'Maroon') within the `parameters.backgrounds.options` property and sets the initial background to 'Light' via the `initialGlobals.backgrounds` property. This configuration applies globally to all stories unless overridden.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Default options\n        dark: { name: 'Dark', value: '#333' },\n        light: { name: 'Light', value: '#F7F9F2' },\n        // 👇 Add your own\n        maroon: { name: 'Maroon', value: '#400' },\n      },\n    },\n  },\n  initialGlobals: {\n    // 👇 Set the initial background color\n    backgrounds: { value: 'light' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story using Standard CSF (TypeScript 4.9)\nDESCRIPTION: This snippet defines a Storybook story for a Svelte `Button` component using standard CSF in a TypeScript 4.9 file. It imports `Meta` and `StoryObj` from '@storybook/svelte', imports the `Button.svelte` component, defines typed `meta` using the `satisfies` keyword, and exports a typed `Primary` story with `args` set to `{ variant: 'primary' }`. Requires a Svelte-compatible Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"CSF\"\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Server Renderer in TypeScript\nDESCRIPTION: This code snippet defines the ServerRenderer class, which initializes the server-side renderer for Storybook. It sets up the necessary configurations, creates a preview builder, and prepares for story rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ServerRenderer {\n  private previewBuilder: PreviewBuilder;\n  ready: Promise<void>;\n\n  constructor(\n    private options: ServerRendererOptions,\n    private router: Router,\n    private storyIndex: StoryIndex\n  ) {\n    this.previewBuilder = new PreviewBuilder(options);\n    this.ready = this.initialize();\n  }\n\n  private async initialize() {\n    await this.previewBuilder.initialize();\n  }\n\n  // ... other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Storybook Test Runner in JavaScript\nDESCRIPTION: This code snippet sets up a Jest configuration for the Storybook Test Runner. It imports the default configuration from '@storybook/test-runner', extends it, and adds a custom snapshot resolver. This configuration is then exported as the default export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-config-snapshot-resolver.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { getJestConfig } from '@storybook/test-runner';\n\nconst defaultConfig = getJestConfig();\n\nconst config = {\n  // The default Jest configuration comes from @storybook/test-runner\n  ...defaultConfig,\n  snapshotResolver: './snapshot-resolver.js',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Angular Storybook Story Configuration in TypeScript\nDESCRIPTION: Demonstrates how to configure a story for an Angular component using TypeScript with strict typing. Includes Meta and StoryObj type definitions from @storybook/angular.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<Button> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Simple: Story = {\n  name: 'So simple!',\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Stories in TypeScript 4.9+\nDESCRIPTION: This snippet illustrates how to set up Storybook stories for a common renderer using TypeScript 4.9+. It showcases the use of the 'satisfies' keyword for type inference and demonstrates metadata and story configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Foo } from './Foo';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'OtherFoo/Bar',\n  component: Foo,\n  id: 'Foo/Bar', // Or 'foo-bar' if you prefer\n} satisfies Meta<typeof Foo>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Baz: Story = {\n  name: 'Insert name here',\n};\n```\n\n----------------------------------------\n\nTITLE: Solid Storybook Preview Configuration (TypeScript)\nDESCRIPTION: TypeScript implementation of Solid Storybook preview configuration with proper type definitions. Uses storybook-solidjs package for type safety while implementing layout decorators.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preview } from 'storybook-solidjs';\n\nconst preview: Preview = {\n  decorators: [\n    (Story, { parameters }) => {\n      const { pageLayout } = parameters;\n      switch (pageLayout) {\n        case 'page':\n          return (\n            <div className=\"page-layout\">\n              <Story />\n            </div>\n          );\n        case 'page-mobile':\n          return (\n            <div className=\"page-mobile-layout\">\n              <Story />\n            </div>\n          );\n        default:\n          return <Story />;\n      }\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Web Components in TypeScript\nDESCRIPTION: This snippet sets up the Storybook preview configuration for Web Components using TypeScript. It imports types, sets the custom elements manifest, and defines a Preview object with default parameters for actions and controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-elements-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/web-components';\nimport { setCustomElementsManifest } from '@storybook/web-components';\n\nimport customElements from '../custom-elements.json';\n\nsetCustomElementsManifest(customElements);\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component with TypeScript 4.9+ in Storybook\nDESCRIPTION: This snippet defines the metadata and argTypes for a Button component using TypeScript 4.9+ syntax in Storybook. It uses the 'satisfies' keyword for type checking and categorizes various properties like backgroundColor, primary, label, onClick, and size into different groups.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n      },\n    },\n    // Assigns the argType to the Text category\n    label: {\n      table: {\n        category: 'Text',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Play Function for Angular in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Storybook play function for an Angular component using TypeScript. It simulates user input and form submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted: Story = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter email and password', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Index.json Mode in Storybook Test-Runner\nDESCRIPTION: Demonstrates how to explicitly disable the index.json mode in the Storybook test-runner if needed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn test-storybook --url=https://your-deployed-storybook-url.com --no-index-json\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite and TypeScript in JavaScript\nDESCRIPTION: This snippet exports the default configuration for a Storybook project. It specifies story file locations, enables essential addons, sets Vite as the builder, and configures TypeScript options for React component documentation generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-react-docgen.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n  typescript: {\n    // Enables the `react-docgen-typescript` parser.\n    // See https://storybook.js.org/docs/api/main-config/main-config-typescript for more information about this option.\n    reactDocgen: 'react-docgen-typescript',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Custom Indexer using TypeScript\nDESCRIPTION: This code configures Storybook to use a custom indexer (combosIndexer) within a TypeScript environment, utilizing type imports for explicit typing and maintainability. The indexer identifies story files via regex, extracts title strings, and assembles mapping entries to properly index stories. Prerequisites include the @storybook/your-framework package and TypeScript type definitions. Inputs are patterns for MDX and story files; outputs are index entries for each matched story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-title.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\nimport type { Indexer } from 'storybook/internal/types';\n\nconst combosIndexer: Indexer = {\n  test: \\/\\.stories\\.[tj]sx?\\$/,\n  createIndex: async (fileName, { makeTitle }) => {\n    // 👇 Grab title from fileName\n    const title = fileName.match(/\\/(.*)\\.stories/)[1];\n\n    // Read file and generate entries ...\n    const entries = [];\n\n    return entries.map((entry) => ({\n      type: 'story',\n      // 👇 Use makeTitle to format the title\n      title: `${makeTitle(title)} Custom`,\n      importPath: fileName,\n      exportName: entry.name,\n    }));\n  },\n};\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  experimental_indexers: async (existingIndexers) => [...existingIndexers, combosIndexer],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with JavaScript\nDESCRIPTION: Sets up Storybook preview configuration using JavaScript, integrating MDX provider with custom design system components and defining control matchers for colors and dates. The code creates a custom docs container that wraps Storybook's default container with MDX provider.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-mdx-container.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MDXProvider } from '@mdx-js/react';\n\nimport { DocsContainer } from '@storybook/addon-docs/blocks';\n\nimport * as DesignSystem from 'your-design-system';\n\nexport const MyDocsContainer = (props) => (\n  <MDXProvider\n    components={{\n      h1: DesignSystem.H1,\n      h2: DesignSystem.H2,\n    }}\n  >\n    <DocsContainer {...props} />\n  </MDXProvider>\n);\n\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      container: MyDocsContainer,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Parameters in JavaScript/TypeScript\nDESCRIPTION: Example of specifying project-level parameters in the Storybook preview configuration file, including layout and demo properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst preview = {\n  // 👇 Project-level parameters\n  parameters: {\n    layout: 'centered',\n    demo: {\n      demoProperty: 'a',\n      demoArray: [1, 2],\n    },\n  },\n  // ...\n};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed User Typing in Storybook Play Function (TypeScript with Meta)\nDESCRIPTION: This snippet shows how to create a delayed story using TypeScript in Storybook for web components, including the Meta type. It demonstrates the use of the play function to simulate user typing with a delay between characters on multiple elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const DelayedStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const exampleElement = canvas.getByLabelText('example-element');\n\n    // The delay option sets the amount of milliseconds between characters being typed\n    await userEvent.type(exampleElement, 'random string', {\n      delay: 100,\n    });\n\n    const AnotherExampleElement = canvas.getByLabelText('another-example-element');\n    await userEvent.type(AnotherExampleElement, 'another random string', {\n      delay: 100,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components in TypeScript\nDESCRIPTION: Demonstrates creating a Storybook story for a Web Components button using TypeScript. Imports Meta and StoryObj types from @storybook/web-components and configures a label control with text type and custom description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Basic: Story = {\n  argTypes: {\n    // 👇 This story expects a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Solid Button Story Implementation (JavaScript)\nDESCRIPTION: Default story implementation for a Button component in SolidJS using CSF 3 format. Uses JavaScript with props spreading pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Default = {\n  render: (args) => <Button {...args} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components Button Stories in JavaScript\nDESCRIPTION: Web Components specific implementation of Button stories using JavaScript. Uses custom element naming and includes documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Button stories\n * These stories showcase the button\n */\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n  parameters: {\n    docs: {\n      description: {\n        component: 'Another description, overriding the comments',\n      },\n    },\n  },\n};\n\n/**\n * # Button stories\n * These stories showcase the button\n */\nexport const Primary = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Another description on the story, overriding the comments',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Vite Builder in Storybook Configuration\nDESCRIPTION: Update the Storybook configuration to use the Vite builder.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/react-vite',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Web Components in JavaScript\nDESCRIPTION: Demonstrates how to configure Storybook Meta for Web Components using JavaScript. Instead of importing a component class, it references the custom element tag name 'demo-example' as the component identifier.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    actualArgName: {\n      name: 'Friendly name',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Svelte Storybook using Svelte CSF (TypeScript 4.9+)\nDESCRIPTION: Defines Storybook metadata for a Svelte `Button` component using `@storybook/addon-svelte-csf`'s `defineMeta` within a `<script module>` block, leveraging TypeScript 4.9+ syntax features. It configures mutually exclusive conditional controls for `label` (text) and `image` (select) via `argTypes.if`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    argTypes: {\n      // Button can be passed a label or an image, not both\n      label: {\n        control: 'text',\n        if: { arg: 'image', truthy: false },\n      },\n      image: {\n        control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n        if: { arg: 'label', truthy: false },\n      },\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled JSX in Next.js Components for Storybook\nDESCRIPTION: Example of using Next.js's built-in styled-jsx CSS-in-JS solution within a component that works in Storybook without additional configuration. Demonstrates both scoped and global styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// src/components/HelloWorld.jsx\n// This will work in Storybook\nfunction HelloWorld() {\n  return (\n    <div>\n      Hello world\n      <p>scoped!</p>\n      <style jsx>{`\n        p {\n          color: blue;\n        }\n        div {\n          background: red;\n        }\n        @media (max-width: 600px) {\n          div {\n            background: blue;\n          }\n        }\n      `}</style>\n      <style global jsx>{`\n        body {\n          background: black;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default HelloWorld;\n```\n\n----------------------------------------\n\nTITLE: Creating Stories with meta.story\nDESCRIPTION: Demonstrates how to create type-safe stories using the meta.story function with args configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst meta = preview.meta({ /* ... */ });\n\nexport const Primary = meta.story({\n  args: {\n    primary: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in React (TypeScript 4.9)\nDESCRIPTION: TypeScript 4.9 implementation with satisfies operator for a Page component story in React. Defines custom type that extends the component props with a footer property, then renders the Page with a footer element containing that content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Page } from './Page';\n\ntype PagePropsAndCustomArgs = React.ComponentProps<typeof Page> & { footer?: string };\n\nconst meta = {\n  component: Page,\n  render: ({ footer, ...args }) => (\n    <Page {...args}>\n      <footer>{footer}</footer>\n    </Page>\n  ),\n} satisfies Meta<PagePropsAndCustomArgs>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const CustomFooter = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook MDX Documentation with Svelte Renderer using Standard CSF\nDESCRIPTION: Sets up an MDX documentation file for Storybook using the Svelte renderer with standard Component Story Format (CSF). It imports from a regular .stories file rather than a .stories.svelte file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-meta-block.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n\n<Meta of={CheckboxStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components in Storybook using JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a Web Component in Storybook using JavaScript. It specifies the component by its custom element name ('demo-example') rather than importing a component class.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    icon: {\n      options: ['arrow-up', 'arrow-down', 'loading'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Svelte using CSF in TypeScript 4.9+\nDESCRIPTION: This snippet demonstrates creating stories for the Page component in Svelte using Component Story Format (CSF) in TypeScript 4.9+. It uses the 'satisfies' keyword for type inference, imports necessary types and components, and defines a LoggedIn story with args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Page from './Page.svelte';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta = {\n  component: Page,\n} satisfies Meta<typeof Page>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Solid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for a Solid Button component using JavaScript. It exports a default object for the component and a 'Text' story with args and a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SolidJS List Stories in TypeScript with type annotation\nDESCRIPTION: Implements a Storybook story for a SolidJS List component using TypeScript with explicit type annotation. It imports type definitions and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in TypeScript\nDESCRIPTION: This snippet demonstrates the basic configuration for Storybook in a `.storybook/main.ts` file using TypeScript. It imports the `StorybookConfig` type from the specific framework package (placeholder used), defines a typed configuration object `config` specifying the `framework` (needs replacement), the `stories` location patterns, and enables the `developmentModeForBuild` feature. Using TypeScript provides type safety for the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-development-mode-for-build.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  features: {\n    developmentModeForBuild: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Testing Form Submission in Angular with TypeScript\nDESCRIPTION: Implementation of a Form component story for Angular using TypeScript. Demonstrates form interaction testing with play function, including typing credentials and form submission verification.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, waitFor, within, expect, fn } from 'storybook/test';\n\nimport { Form } from './Form.component';\n\nconst meta: Meta<Form> = {\n  component: MyComponent,\n  args: {\n    // 👇 Use `fn` to spy on the onSubmit arg\n    onSubmit: fn(),\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Form>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted: Story = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter credentials', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n\n    // 👇 Now we can assert that the onSubmit arg was called\n    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Cookies and Headers in Storybook Stories (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story that mocks cookies and headers for testing a React component. It demonstrates setting mock values before component rendering and asserting that the mocks were called correctly in the play function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-headers-mock.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, userEvent, within } from 'storybook/test';\nimport { cookies, headers } from '@storybook/nextjs/headers.mock';\n\nimport MyForm from './my-form';\n\nexport default {\n  component: MyForm,\n};\n\nexport const LoggedInEurope = {\n  async beforeEach() {\n    // 👇 Set mock cookies and headers ahead of rendering\n    cookies().set('username', 'Sol');\n    headers().set('timezone', 'Central European Summer Time');\n  },\n  async play() {\n    // 👇 Assert that your component called the mocks\n    await expect(cookies().get).toHaveBeenCalledOnce();\n    await expect(cookies().get).toHaveBeenCalledWith('username');\n    await expect(headers().get).toHaveBeenCalledOnce();\n    await expect(cookies().get).toHaveBeenCalledWith('timezone');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in React Storybook Stories with TypeScript\nDESCRIPTION: Demonstrates how to add a margin decorator to a React Button component using standard TypeScript notation. The decorator wraps the Story component with a div that has a margin of 3em.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories for React Components\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for React List components. It includes stories for empty, one item, and many items configurations using JavaScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nexport default {\n  component: List,\n};\n\nexport const Empty = {};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n\nexport const ManyItems = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n      <ListItem />\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Palette in Storybook Stories (TypeScript 4.9 with satisfies/TSX)\nDESCRIPTION: A TypeScript 4.9 implementation using the 'satisfies' operator for a Storybook story displaying a color palette. Shows how to map through a theme object to create ColorItem components with a warning about Doc Blocks usage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-canvas-doc-block-story.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { ColorItem, ColorPalette } from '@storybook/addon-docs/blocks';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst theme = {\n  colors: {\n    primaryDark: {\n      value: '#1C1C1C',\n    },\n    primaryRegular: {\n      value: '#363636',\n    },\n    primaryLight1: {\n      value: '#4D4D4D',\n    },\n    primaryLight2: {\n      value: '#878787',\n    },\n    primaryLight3: {\n      value: '#D1D1D1',\n    },\n    primaryLight4: {\n      value: '#EDEDED',\n    },\n  },\n};\n\n// ❌ Don't use the Doc Blocks inside your stories. It will break Storybook with a cryptic error.\nexport const Colors: Story = {\n  render: () => (\n    <ColorPalette>\n      {Object.entries(theme.colors).map(([key, { value }]) => (\n        <ColorItem\n          colors={{\n            [key]: value,\n          }}\n          key={key}\n          subtitle={`theme.colors.${key}`}\n          title={key}\n        />\n      ))}\n    </ColorPalette>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story with TypeScript 4.9+\nDESCRIPTION: TypeScript 4.9+ implementation using the satisfies operator for type checking, importing both Meta and StoryObj types for the DataTable component configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-todo-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Meta, StoryObj } from '@storybook/your-renderer';\n\nimport { DataTable } from './DataTable';\n\nconst meta = {\n  component: DataTable,\n  parameters: {\n    // 👇 This component's accessibility tests will not fail\n    //    Instead, they display warnings in the Storybook UI\n    a11y: { test: 'todo' },\n  },\n} satisfies Meta<typeof DataTable>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in HTML with TypeScript\nDESCRIPTION: Demonstrates how to create a List component story in HTML with TypeScript typing. The example uses the StoryObj type for strongly typed stories and builds the list with DOM manipulation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\nimport { createList, ListArgs } from './List';\nimport { createListItem } from './ListItem';\n\n// 👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta: Meta<ListArgs> = {\n  title: 'List',\n};\n\nexport default meta;\ntype Story = StoryObj<ListArgs>;\n\nexport const ManyItems: Story = {\n  render: (args) => {\n    const list = createList(args);\n    list.appendChild(createListItem(Selected.args));\n    list.appendChild(createListItem(Unselected.args));\n    list.appendChild(createListItem(Unselected.args));\n    return list;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Play Function with Alternative Queries\nDESCRIPTION: Example showing different query methods in play functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const QueryExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await expect(canvas.getByText('Submit')).toBeInTheDocument();\n    await expect(canvas.getByRole('button')).toBeEnabled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Right Arrow SVG Component in React\nDESCRIPTION: Creates a reusable React component for rendering a right arrow SVG icon. The component includes inline styling and SVG path definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/js/Configure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const RightArrow = () => <svg \n    viewBox=\"0 0 14 14\" \n    width=\"8px\" \n    height=\"14px\" \n    style={{ \n      marginLeft: '4px',\n      display: 'inline-block',\n      shapeRendering: 'inherit',\n      verticalAlign: 'middle',\n      fill: 'currentColor',\n      'path fill': 'currentColor'\n    }}\n>\n  <path d=\"m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Svelte using CSF with TypeScript 4.9+\nDESCRIPTION: Creates a ButtonGroup story in Svelte using Component Story Format (CSF) with TypeScript 4.9+. Uses the 'satisfies' operator for type checking when composing Button stories into a ButtonGroup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport ButtonGroup from './ButtonGroup.svelte';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta = {\n  component: ButtonGroup,\n} satisfies Meta<typeof ButtonGroup>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for SolidJS List Component with TypeScript\nDESCRIPTION: This code configures Storybook stories for a SolidJS List component using standard TypeScript. It explicitly types the meta object, includes comments about the title property, and defines type-safe stories for empty and populated lists.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nconst meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const Empty: Story = {};\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in JavaScript for Web Components\nDESCRIPTION: Sets up Storybook story configuration for a Web Components Button implementation using JavaScript. Specifies the component as a string identifier ('demo-button') rather than a component reference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  argTypes: {\n    // 👇 All Button stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Vue in JavaScript\nDESCRIPTION: Demonstrates creating a Storybook story for a Vue component using JavaScript. Shows how to define argTypes with options, implement a helper function, and use setup() to provide computed properties to the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport YourComponent from './YourComponent.vue';\n\nexport default {\n  component: YourComponent,\n  //👇 Creates specific argTypes with options\n  argTypes: {\n    propertyA: {\n      options: ['Item One', 'Item Two', 'Item Three'],\n      control: { type: 'select' }, // automatically inferred when 'options' is defined\n    },\n    propertyB: {\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n    },\n  },\n};\n\nconst someFunction = (valuePropertyA, valuePropertyB) => {\n  // Do some logic here\n};\n\nexport const ExampleStory = {\n  render: ({ args }) => {\n    const { propertyA, propertyB } = args;\n    //👇 Assigns the function result to a variable\n    const functionResult = someFunction(propertyA, propertyB);\n    return {\n      components: { YourComponent },\n      setup() {\n        return {\n          ...args,\n          //👇 Replaces arg variable with the override (without the need of mutation)\n          someProperty: functionResult,\n        };\n      },\n      template:\n        '<YourComponent :propertyA=\"propertyA\" :propertyB=\"propertyB\" :someProperty=\"someProperty\"/>',\n    };\n  },\n  args: {\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Stories with TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to set up story metadata for a Svelte component using TypeScript 4.9. It imports the necessary types, defines the component, and uses the 'satisfies' keyword for type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n} satisfies Meta<typeof Button>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Arrow Icons in TypeScript\nDESCRIPTION: Sets up a Storybook meta configuration for a demo-button component with custom arrow icon controls. Implements control mapping and labels for different arrow directions using TypeScript interfaces.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\nconst meta: Meta = {\n  component: 'demo-button',\n  argTypes: {\n    arrow: {\n      options: Object.keys(arrows), // An array of serializable values\n      mapping: arrows, // Maps serializable option values to complex arg values\n      control: {\n        type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n        labels: {\n          // 'labels' maps option values to string labels\n          ArrowUp: 'Up',\n          ArrowDown: 'Down',\n          ArrowLeft: 'Left',\n          ArrowRight: 'Right',\n        },\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This TypeScript code defines a Storybook configuration using the StorybookConfig type. It includes the same settings as the JavaScript version, specifying the framework, story patterns, and addons with custom webpack rules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-addons.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    {\n      name: '@storybook/addon-styling-webpack',\n      options: {\n        rules: [\n          {\n            test: /\\.css$/,\n            use: [\n              'style-loader',\n              'css-loader',\n              {\n                loader: 'postcss-loader',\n                options: {\n                  implementation: require.resolve('postcss'),\n                },\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Unattached MDX Documentation in Storybook 7.0\nDESCRIPTION: Shows how to create an unattached MDX documentation file in Storybook 7.0, which is not associated with any specific story or CSF file. This example demonstrates the simplified approach compared to Storybook 6.x.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_89\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from \"@storybook/addon-docs\";\n\n<Meta title=\"Introduction\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with Figma Link in TypeScript\nDESCRIPTION: Defines a Storybook story for a Svelte component (`MyComponent.svelte`) using standard TypeScript. It imports types from `@storybook/svelte` and the Svelte component, defines explicitly typed metadata (`meta`), and exports an `Example` story with parameters linking to a Figma design file. Depends on `@storybook/svelte` and the Svelte component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts\" renderer=\"svelte\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport MyComponent from './MyComponent.svelte';\n\n// More on default export: https://storybook.js.org/docs/svelte/writing-stories/introduction#default-export\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Controls While Retaining Documentation\nDESCRIPTION: Demonstrates how to disable controls for a property while still rendering its documentation in the Controls panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Components/MyComponent',\n  component: MyComponent,\n  argTypes: {\n    foo: {\n      control: { disable: true }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte with TypeScript 4.9 CSF\nDESCRIPTION: This code snippet demonstrates how to create Storybook stories for a Svelte Button component using TypeScript 4.9 and Component Story Format (CSF). It uses the 'satisfies' operator for type checking and defines two stories: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName: Story = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Interaction Test in Storybook (TypeScript - Generic Framework)\nDESCRIPTION: This snippet defines a Storybook story named `ExampleAsyncStory` for `MyComponent` using TypeScript. It utilizes the `play` function to simulate user interaction: finding an input by label, typing incorrect input, clicking a submit button, and then waiting to hover over an error element that appears asynchronously. It depends on Storybook types for a generic framework (`@storybook/your-framework`) and testing utilities (`storybook/test`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story in TypeScript\nDESCRIPTION: This snippet shows how to configure a Button story using TypeScript. It imports the Meta type, defines a meta object with explicit typing, and includes title, component, and parameters properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  parameters: {\n    myAddon: { disable: true }, // Disables the addon\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with Loaders in Vue (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for TodoItem in Vue. It includes a default export with component, and a Primary story with render function and loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport TodoItem from './TodoItem.vue';\n\nexport default {\n  component: TodoItem,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: (args, { loaded: { todo } }) => ({\n    components: { TodoItem },\n    setup() {\n      return { args, todo: todo };\n    },\n    template: '<TodoItem :todo=\"todo\" />',\n  }),\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Angular with TypeScript\nDESCRIPTION: Creates a ButtonGroup story in Angular using TypeScript. The story imports Button component stories and composes them into a ButtonGroup with horizontal orientation. Uses moduleMetadata decorator to register required components and modules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonGroup } from './ButtonGroup.component';\nimport { Button } from './button.component';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta: Meta<ButtonGroup> = {\n  component: ButtonGroup,\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonGroup>;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React List Component with TypeScript 4.9+\nDESCRIPTION: This code sets up Storybook stories for a React List component using TypeScript 4.9 with the satisfies operator. It defines the component meta configuration and creates two stories: an empty list and a list with one item.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nconst meta = {\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n} satisfies Meta<typeof List>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Empty: Story = {};\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Full Essential Addons Configuration\nDESCRIPTION: Complete configuration example showing all available options for essential addons in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    '@storybook/addon-viewport',\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        csfPluginOptions: null,\n        mdxPluginOptions: {\n          mdxCompileOptions: {\n            remarkPlugins: [],\n          },\n        },\n      },\n    },\n    '@storybook/addon-controls',\n    '@storybook/addon-backgrounds',\n    '@storybook/addon-toolbars',\n    '@storybook/addon-measure',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack5 Builder with Lazy Compilation in Storybook (JavaScript)\nDESCRIPTION: This snippet exports the default configuration for Storybook. It specifies the use of webpack5 as the builder and enables lazy compilation. This setup can improve build performance by only compiling the necessary components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack5-lazyCompilation.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  core: {\n    builder: {\n      name: 'webpack5',\n      options: {\n        lazyCompilation: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Storybook Button Stories with TypeScript (CSF, Render Function)\nDESCRIPTION: Uses TypeScript with Storybook Vue 3 to define stories for the Button component, employing a render function for the Primary story and including strong typing. This model ensures reactivity and flexibility in story rendering. Dependencies: @storybook/vue3 and the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Framework Options in Storybook\nDESCRIPTION: Example configuration for the @storybook/nextjs framework in .storybook/main.js, showing how to set image loading behavior and specify a custom next.config.js path.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nimport * as path from 'path';\n\nexport default {\n  // ...\n  framework: {\n    name: '@storybook/nextjs',\n    options: {\n      image: {\n        loading: 'eager',\n      },\n      nextConfigPath: path.resolve(__dirname, '../next.config.js'),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Preview with TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook's preview with proper type definitions. Imports the Preview type from the renderer package and calls an initialization function before all stories are loaded.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-all-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport { Preview } from '@storybook/your-renderer';\n\nimport { init } from '../project-bootstrap';\n\nconst preview: Preview = {\n  async beforeAll() {\n    await init();\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories with Dark Background in TypeScript CSF (TypeScript 4.9)\nDESCRIPTION: This snippet demonstrates how to set up a Button story using TypeScript Component Story Format (CSF) with TypeScript 4.9. It defines a story with a dark background using story-level parameters and type satisfies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OnDark: Story = {\n  // 👇 Story-level parameters\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Router in TypeScript 4.9+ Storybook Stories\nDESCRIPTION: A TypeScript implementation using TypeScript 4.9+ features (satisfies operator) for a Storybook story with Next.js router configuration. This version uses the newer TypeScript syntax for type-checking the story component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-override-in-story.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport RouterBasedComponent from './RouterBasedComponent';\n\nconst meta = {\n  component: RouterBasedComponent,\n} satisfies Meta<typeof RouterBasedComponent>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n// If you have the actions addon,\n// you can interact with the links and see the route change events there\nexport const Example: Story = {\n  parameters: {\n    nextjs: {\n      router: {\n        pathname: '/profile/[id]',\n        asPath: '/profile/1',\n        query: {\n          id: '1',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: JavaScript configuration file for Storybook showing framework setup, story pattern matching, and addon configuration. Demonstrates how to disable specific features in the essentials addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-disable-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    {\n      name: '@storybook/addon-essentials',\n      options: {\n        backgrounds: false, // 👈 disable the backgrounds addon\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Histogram Story (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for a web components version of the Histogram. Defines component and default arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'histogram-component',\n};\n\nexport const Default = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Reordering Docs Tab in Storybook Preview\nDESCRIPTION: This snippet shows how to configure Storybook's preview tabs to show the 'Docs' tab first for a specific story or globally in the preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Foo = () => <Component />;\nFoo.parameters = {\n  previewTabs: { 'storybook/docs/panel': { index: -1 } },\n};\n```\n\n----------------------------------------\n\nTITLE: Opting into Autodocs per Component using Tags in Storybook TypeScript\nDESCRIPTION: Demonstrates how to opt-in to Autodocs on a per-component basis in Storybook 7. By setting `docs.autodocs` to `'tag'` in `main.js` (the default in 7.0+), adding the `'autodocs'` tag to the default export of a Component Story Format (CSF) file enables Autodocs specifically for that component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_87\n\nLANGUAGE: ts\nCODE:\n```\nexport default {\n  component: MyComponent\n  // Tags are a new feature coming in 7.1, that we are using to drive this behaviour.\n  tags: ['autodocs']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Generic Storybook (TypeScript 4.9+)\nDESCRIPTION: Exports default Storybook metadata for a generic framework `Button` component using TypeScript 4.9+'s `satisfies` keyword. It imports the `Meta` type (requiring 'your-framework' to be replaced) and the component, then configures conditional `argTypes` for `label` (text) and `image` (select) using the `if` condition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Vue in TypeScript\nDESCRIPTION: This snippet demonstrates creating stories for the Page component in Vue using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a Primary story with a render function and args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Page from './Page.vue';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Page>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Page },\n    setup() {\n      return { args };\n    },\n    template: '<page v-bind=\"args\" />',\n  }),\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Framework-Agnostic Button Story with TypeScript 4.9\nDESCRIPTION: Configures a Storybook story for a Button component using TypeScript 4.9 satisfies operator. Demonstrates framework-agnostic implementation with type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\nimport { action } from 'storybook/actions';\n\nimport Button from './Button';\n\nconst meta = {\n  component: Button,\n  args: {\n    // 👇 Create an action that appears when the onClick event is fired\n    onClick: action('on-click'),\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Play Function for Web Components\nDESCRIPTION: Example of writing an async play function for Web Components using TypeScript. Shows how to reference custom elements and perform DOM queries.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const AsyncExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Other steps\n\n    // Waits for the component to be rendered before querying the element\n    await canvas.findByRole('button', { name: / button label/i });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Component with TypeScript 4.9 Satisfies Operator\nDESCRIPTION: This snippet shows how to configure a Storybook component using TypeScript 4.9's 'satisfies' operator for type checking. It works with any renderer and requires explicitly replacing 'your-renderer' with the actual renderer being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    icon: {\n      options: ['arrow-up', 'arrow-down', 'loading'],\n    },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Web Components in TypeScript\nDESCRIPTION: This snippet defines metadata for a Button component using Web Components in TypeScript. It imports the Meta type, sets up the component name and argTypes for the 'variant' prop, and exports the typed metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components in Storybook using TypeScript\nDESCRIPTION: A TypeScript implementation for configuring a Web Component in Storybook. It imports the Meta type from @storybook/web-components and references the component by its custom element name ('demo-example').\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    icon: {\n      options: ['arrow-up', 'arrow-down', 'loading'],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Sorting in Storybook\nDESCRIPTION: Example of adding a custom sorting function for stories using the storySort parameter in Storybook's preview.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naddParameters({\n  options: {\n    storySort: (a, b) => a[1].id.localeCompare(b[1].id),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration file for Storybook that imports type definitions and configures the same settings as the JavaScript version. It includes framework specification, story patterns, and logging level with proper type annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-log-level.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  logLevel: 'debug',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Customizing Storybook Preview Head with CSS in JavaScript\nDESCRIPTION: This snippet defines a Storybook configuration that injects custom CSS styling into the preview iframe's head. It uses the previewHead option which takes a function that receives the existing head content and returns modified content with additional styles, specifically setting a yellow background for the #main element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-preview-head.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  previewHead: (head) => (`\n    ${head}\n    <style>\n      #main {\n        background-color: yellow;\n      }\n    </style>\n  `);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout for Web Components in TypeScript\nDESCRIPTION: TypeScript implementation for Web Components that imports the necessary types from @storybook/web-components. This example shows how to define metadata and stories for a custom element with proper typing and centered layout.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const WithLayout: Story = {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript for HTML Renderer\nDESCRIPTION: This code shows how to set up Storybook for an HTML Button component using TypeScript. It imports the Meta type from Storybook's HTML package and uses the ButtonArgs type to provide type checking for the metadata configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/html';\n\nimport { createButton, ButtonArgs } from './Button';\n\nconst meta: Meta<ButtonArgs> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Svelte with Storybook CSF (JavaScript)\nDESCRIPTION: This JavaScript module describes Button stories for Svelte in Storybook using the standard CSF format. It imports Button.svelte, exports the default meta with component information, and creates Primary/Secondary/Tertiary story objects, each with unique args. Arguments are shared by object spreading, making future mutations easier.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.svelte';\\n\\nexport default {\\n  component: Button,\\n};\\n\\nexport const Primary = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Story in Web Components with TypeScript\nDESCRIPTION: Defines a Button component story for Web Components in Storybook using TypeScript. Imports types from '@storybook/web-components' and the 'html' function from Lit. Configures metadata for a 'custom-button' component and includes a Basic story with a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'custom-button',\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => html`<custom-button label=\"Hello\"></custom-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Stories in Svelte\nDESCRIPTION: Svelte implementation of Button stories using the Svelte CSF format with the @storybook/addon-svelte-csf helper. Includes story definitions with tags and variants.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n  import { Button } from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<!-- 👇 This story will not appear in Storybook's sidebar or docs page -->\n<Story\n  name=\"Variant1\"\n  tags={['!dev', '!autodocs']}\n  args={{ variant: 1 }}\n/>\n\n<!-- 👇 This story will not appear in Storybook's sidebar or docs page -->\n<Story\n  name=\"Variant2\"\n  tags={['!dev', '!autodocs']}\n  args={{ variant: 2 }}\n/>\n\n<!-- 👇 This story should not be tested, but will appear in the sidebar and docs page -->\n<Story name=\"Combo\" tags={['!test']}>\n  <Button variant={1} />\n  <Button variant={2} />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Stories in TypeScript\nDESCRIPTION: Shows how to define Storybook metadata for Web Components using TypeScript with proper type annotations. Imports the Meta type from @storybook/web-components and uses the custom element tag name 'demo-example' as the component reference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      description: 'The value of the slider',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in Web Components Storybook (TS)\nDESCRIPTION: TypeScript version of background configuration for Web Components using Storybook. Implements dark and gray background options with type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components-vite';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Override the default `dark` option\n        dark: { name: 'Dark', value: '#000' },\n        // 👇 Add a new option\n        gray: { name: 'Gray', value: '#CCC' },\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox Story in MDX for Svelte CSF\nDESCRIPTION: This snippet shows how to import and render a Checkbox component story specifically for Svelte using Component Story Format (CSF) in Storybook documentation. It imports the Canvas component and Svelte-specific Checkbox stories, then renders the Unchecked story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-story.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories.svelte';\n\n<Canvas of={CheckboxStories.Unchecked} />\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories for Web Components with JavaScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a Web Components Button using JavaScript. It imports the necessary html function from 'lit', sets up metadata, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nimport { action } from 'storybook/actions';\n\nexport default {\n  component: 'custom-button',\n};\n\nexport const Text = {\n  render: () => html`<custom-button label=\"Hello\" @click=${action('clicked')}></custom-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta in TypeScript with satisfies Operator\nDESCRIPTION: Demonstrates a TypeScript 4.9+ approach using the 'satisfies' operator to define a Storybook Meta configuration. This pattern leverages TypeScript's type checking while maintaining type inference for the component's properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    actualArgName: {\n      name: 'Friendly name',\n    },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directories with Configuration Objects in Storybook\nDESCRIPTION: Uses configuration objects to define static directories with more control, mapping source directories to destination paths. This enables more precise control over where files are served from and to.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-static-dirs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  staticDirs: [\n    { from: '../public', to: '/' },\n    { from: '../assets', to: '/assets' },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte CSF Addon\nDESCRIPTION: Command to install the Svelte CSF addon, which allows writing stories for Svelte components using template syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"svelte-csf-addon-install.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Global Styles\nDESCRIPTION: Configuration example for adding global styles to Angular Storybook using angular.json. Shows how to set up both development and build configurations with style imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/styling-and-css.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storybook\": {\n    \"builder\": \"@storybook/angular:start-storybook\",\n    \"options\": {\n      \"configDir\": \".storybook\",\n      \"browserTarget\": \"angular-latest:build\",\n      \"compodoc\": true,\n      \"compodocArgs\": [\"-e\", \"json\", \"-d\", \".\"],\n      \"port\": 6006,\n      \"styles\": [\n        \"@angular/material/prebuilt-themes/indigo-pink.css\",\n        \"@fontsource/roboto/300.css\",\n        \"@fontsource/roboto/400.css\",\n        \"@fontsource/roboto/500.css\",\n        \"@fontsource/roboto/700.css\",\n        \"@fontsource/material-icons\",\n        \"src/styles.scss\"\n      ]\n    }\n  },\n  \"build-storybook\": {\n    \"builder\": \"@storybook/angular:build-storybook\",\n    \"options\": {\n      \"configDir\": \".storybook\",\n      \"browserTarget\": \"angular-latest:build\",\n      \"compodoc\": true,\n      \"compodocArgs\": [\"-e\", \"json\", \"-d\", \".\"],\n      \"styles\": [\n        \"@angular/material/prebuilt-themes/indigo-pink.css\",\n        \"@fontsource/roboto/300.css\",\n        \"@fontsource/roboto/400.css\",\n        \"@fontsource/roboto/500.css\",\n        \"@fontsource/roboto/700.css\",\n        \"@fontsource/material-icons\",\n        \"src/styles.scss\"\n      ],\n      \"outputDir\": \"storybook-static\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Storybook Story in JavaScript\nDESCRIPTION: JavaScript implementation of a Storybook story for React components. Shows how to render an image component using JSX syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const WithAnImage = {\n  render: () => (\n    <img src=\"https://storybook.js.org/images/placeholders/350x150.png\" alt=\"My CDN placeholder\" />\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Form via Storybook Story in React with JavaScript\nDESCRIPTION: This snippet demonstrates a unit test for a React form component by composing a Storybook story and running it within a Jest test environment. Dependencies include '@testing-library/react' for UI interaction, '@storybook/react' for story composition, and a form story imported from 'LoginForm.stories'. The test simulates a user clicking the submit button and asserts that the 'invalid-form' label is no longer in the document, indicating successful validation. Inputs are simulated user events and DOM queries; outputs are assertion results. Requires React setup and relevant Storybook configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/react';\\n\\nimport { composeStory } from '@storybook/react';\\n\\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\\n\\nconst ValidForm = composeStory(ValidFormStory, Meta);\\n\\ntest('Validates form', async () => {\\n  await ValidForm.run();\\n\\n  const buttonElement = screen.getByRole('button', {\\n    name: 'Submit',\\n  });\\n\\n  fireEvent.click(buttonElement);\\n\\n  const isFormValid = screen.getByLabelText('invalid-form');\\n  expect(isFormValid).not.toBeInTheDocument();\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Refs in main.ts (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure the `.storybook/main.ts` file with type checking using `StorybookConfig` imported from the chosen framework package. It specifies the framework (placeholder needing replacement), defines story file locations, and adds an external Storybook reference via the `refs` property, pointing to the Storybook Design System. This typed configuration enables Storybook Composition. Dependencies include Storybook, TypeScript, and the specific framework package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    'design-system': {\n      title: 'Storybook Design System',\n      url: 'https://master--5ccbc373887ca40020446347.chromatic.com/',\n      expanded: false, // Optional, true by default,\n      sourceUrl: 'https://github.com/storybookjs/storybook', // Optional\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Default Export with Component\nDESCRIPTION: Example of setting the component annotation in a story's default export to enable automatic control inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Solid (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Solid Button component using TypeScript. It defines a Meta type, exports a default meta object, and creates a 'Text' story with args and a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Text = {\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,\n};\n```\n\n----------------------------------------\n\nTITLE: React Document Screen with Apollo Client (JavaScript)\nDESCRIPTION: React component using @apollo/client to fetch document data through GraphQL. Implements a custom hook for data fetching and handles loading/error states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuery, gql } from '@apollo/client';\n\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nconst AllInfoQuery = gql`\n  query AllInfo {\n    user {\n      userID\n      name\n    }\n    document {\n      id\n      userID\n      title\n      brief\n      status\n    }\n    subdocuments {\n      id\n      userID\n      title\n      content\n      status\n    }\n  }\n`;\n\nfunction useFetchInfo() {\n  const { loading, error, data } = useQuery(AllInfoQuery);\n\n  return { loading, error, data };\n}\n\nexport function DocumentScreen() {\n  const { loading, error, data } = useFetchInfo();\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>There was an error fetching the data!</p>;\n  }\n\n  return (\n    <PageLayout user={data.user}>\n      <DocumentHeader document={data.document} />\n      <DocumentList documents={data.subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SolidJS Storybook Button Stories with Type Satisfaction (TypeScript >=4.9, TSX)\nDESCRIPTION: Uses TypeScript 4.9+ with TSX to define Storybook stories for SolidJS, employing 'satisfies' for meta typing. Imports and exports follow the TS Storybook template; the Primary story is configured with type-safe props. Requires 'storybook-solidjs', the SolidJS Button component, and TypeScript 4.9+.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_8\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Svelte using Svelte CSF in TypeScript (4.9+)\nDESCRIPTION: This snippet demonstrates how to create stories for a Svelte Button component using Svelte CSF in TypeScript 4.9+. It configures the component metadata, sets parameters, and defines a basic story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    /* 👇 The title prop is optional.\n     * See https://storybook.js.org/docs/configure/#configure-story-loading\n     * to learn how to generate automatic titles\n    */\n    title: 'Button',\n    component: Button,\n    parameters: {\n      myAddon: {\n        data: 'This data is passed to the addon',\n      },\n    },\n  });\n</script>\n\n<Story name=\"Basic\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Vue List Component in JavaScript\nDESCRIPTION: This code configures Storybook stories for a Vue List component using JavaScript. It imports Vue components, sets up the component hierarchy with ListItem as a subcomponent, and creates stories for empty and populated lists with appropriate rendering templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\nexport default {\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n};\n\nexport const Empty = {\n  render: () => ({\n    components: { List },\n    template: '<List/>',\n  }),\n};\n\nexport const OneItem = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { args }\n    }\n    template: '<List v-bind=\"args\"><ListItem /></List>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React-Vite in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook for a React project using Vite in TypeScript. It imports the StorybookConfig type, defines a configuration object with proper typing, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-framework-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/react-vite',\n    options: {\n      // ...\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for React in Storybook\nDESCRIPTION: This snippet defines the metadata and argTypes for a Button component in React using Storybook. It categorizes various properties like backgroundColor, primary, label, onClick, and size into different groups for better organization in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n      },\n    },\n    // Assigns the argType to the Text category\n    label: {\n      table: {\n        category: 'Text',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Date in JavaScript Storybook Story\nDESCRIPTION: Example of using MockDate to set a fixed date (Christmas 2024) in a JavaScript Storybook story's play function. The code demonstrates date mocking before component mounting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-basic.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MockDate from 'mockdate';\n\n// ...rest of story file\n\nexport const ChristmasUI = {\n  async play({ mount }) {\n    MockDate.set('2024-12-25');\n    // 👇 Render the component with the mocked date\n    await mount();\n    // ...rest of test\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining NoteUI Stories for Generic Renderer in TypeScript\nDESCRIPTION: This snippet defines Storybook stories for the NoteUI component using TypeScript for a generic renderer. It includes imports, meta configuration, and a 'Save Flow' story that tests the save functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the name of your renderer (e.g. react, vue3)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\nimport { expect, userEvent, within } from 'storybook/test';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { saveNote } from '#app/actions.mock';\nimport { createNotes } from '#mocks/notes';\nimport NoteUI from './note-ui';\n\nconst meta: Meta<typeof NoteUI> = {\n  title: 'Mocked/NoteUI',\n  component: NoteUI,\n};\nexport default meta;\n\ntype Story = StoryObj<typeof NoteUI>;\n\nconst notes = createNotes();\n\nexport const SaveFlow: Story = {\n  name: 'Save Flow ▶',\n  args: {\n    isEditing: true,\n    note: notes[0],\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    const saveButton = canvas.getByRole('menuitem', { name: /done/i });\n    await userEvent.click(saveButton);\n    // 👇 This is the mock function, so you can assert its behavior\n    await expect(saveNote).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Angular Checkbox Component\nDESCRIPTION: This snippet shows how to set up Storybook metadata for an Angular Checkbox component using TypeScript. It imports necessary types from @storybook/angular and defines the metadata object with title and component properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Checkbox } from './checkbox.component';\n\nconst meta: Meta<Checkbox> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Checkbox',\n  component: CheckBox,\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Custom Indexer using TypeScript (TypeScript 4.9 Syntax)\nDESCRIPTION: This snippet configures Storybook in TypeScript with explicit type annotations, leveraging types such as StorybookConfig and Indexer for stronger typing. The combosIndexer uses a regex to identify story files, extracts the title, and maps story entries for indexing. Dependencies include @storybook/your-framework, storybook/internal/types, and proper TypeScript configuration. Key parameters define story patterns and experimental_indexers registration, and the config is exported for consumption by Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-title.md#2025-04-22_snippet_1\n\nLANGUAGE: ts-4-9\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\nimport type { Indexer } from 'storybook/internal/types';\n\nconst combosIndexer: Indexer = {\n  test: \\/\\.stories\\.[tj]sx?\\$/,\n  createIndex: async (fileName, { makeTitle }) => {\n    // 👇 Grab title from fileName\n    const title = fileName.match(/\\/(.*)\\.stories/)[1];\n\n    // Read file and generate entries ...\n    const entries = [];\n\n    return entries.map((entry) => ({\n      type: 'story',\n      // 👇 Use makeTitle to format the title\n      title: `${makeTitle(title)} Custom`,\n      importPath: fileName,\n      exportName: entry.name,\n    }));\n  },\n};\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  experimental_indexers: async (existingIndexers) => [...existingIndexers, combosIndexer],\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Updating Addon Registration in Storybook Configuration\nDESCRIPTION: Demonstrates the new way of registering addons in Storybook's main.js configuration, replacing the deprecated register.js method.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = { addons: [\"my-addon\"] };\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with Figma Link in JavaScript\nDESCRIPTION: Defines a Storybook story for a Svelte component (`MyComponent.svelte`) using JavaScript. It imports the Svelte component, sets it in the default export's `component` property, and exports an `Example` story with parameters linking to a Figma design file. Requires `@storybook/svelte` and the Svelte component file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"MyComponent.stories.js\" renderer=\"svelte\" language=\"js\"\nimport MyComponent from './MyComponent.svelte';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nexport default {\n  component: MyComponent,\n};\n\nexport const Example = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Dependencies for Addon Development\nDESCRIPTION: Shows how to configure a local Storybook addon as a dependency in package.json for development purposes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-knowledge-base.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@storybook/addon-controls\": \"file:///home/username/myrepo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Button Sizes in TypeScript React\nDESCRIPTION: Shows how to use the size prop to change the Button's size. The component supports 'small' and 'medium' sizes, allowing for flexibility in design.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Button size=\"small\">Small Button</Button>\n<Button size=\"medium\">Medium Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata with Deprecated defaultValue (Web Components/TS)\nDESCRIPTION: This TypeScript snippet defines Storybook metadata (`Meta`) for a web component, referencing it by its tag name `'demo-example'`. It imports the `Meta` type from `@storybook/web-components`. The example contrasts the deprecated `argTypes.value.defaultValue` with the recommended `args` property for setting default argument values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Example.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      // ⛔️ Deprecated, do not use\n      defaultValue: 0,\n    },\n  },\n  // ✅ Do this instead\n  args: {\n    value: 0,\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Vue Button Story - Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet registers a Button component for Storybook in a Vue 3 project using Meta. It enforces the type with Meta<typeof Button> and requires the Vue Button component in './Button.vue'. This setup is required for properly typed Storybook story definitions in Vue/TypeScript projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/vue3';\\n\\nimport Button from './Button.vue';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Stories\nDESCRIPTION: Web Components specific implementation of Button stories. Uses the web-components renderer with custom element 'demo-button' and defines basic and primary variants.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/typed-csf-file.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport default meta;\n\nexport const Basic: StoryObj = {};\n\nexport const Primary: StoryObj = {\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using New Story Types in Storybook 7.0\nDESCRIPTION: TypeScript code demonstrating the usage of new StoryFn and StoryObj types for CSF2 and CSF3 in Storybook 7.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StoryFn, StoryObj } from \"@storybook/react\";\n\nexport const MyCsf2Story: StoryFn = () => <div />;\nexport const MyCsf3Story: StoryObj = {\n  render: () => <div />,\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Addon in Storybook with TypeScript\nDESCRIPTION: This TypeScript snippet registers an addon and a corresponding tool in Storybook utilizing the manager API. The registration process involves specifying an addon ID along with a tool ID and providing a configuration which includes title, match logic, and a render function. This code requires the 'storybook/manager-api' and local constants from './constants'. Inputs include Storybook's tabId and viewMode.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-manager-initial-state.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addons, types } from 'storybook/manager-api';\nimport { ADDON_ID, TOOL_ID } from './constants';\nimport { Tool } from './Tool';\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the tool\n  addons.add(TOOL_ID, {\n    type: types.TOOL,\n    title: 'My addon',\n    match: ({ tabId, viewMode }) => !tabId && viewMode === 'story',\n    render: Tool,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a Web Components Button using JavaScript. It defines metadata for a custom button element and exports a story with args and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'custom-button',\n  argTypes: {\n    onClick: { action: 'onClick' },\n  },\n};\n\nexport const Text = {\n  args: {/* ... */},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Components Story with JavaScript in Storybook\nDESCRIPTION: A JavaScript example of defining a Storybook story for a Web Component. It shows how to export the component definition and create a story with customizable args that will be passed to the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// This default export determines where your story goes in the story list\nexport default {\n  component: 'demo-your-component',\n};\n\nexport const FirstStory = {\n  args: {\n    // 👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Svelte using CSF\nDESCRIPTION: This snippet defines metadata for a Button component in Svelte using the Component Story Format (CSF). It imports the Button component, sets up argTypes for the 'variant' prop, and exports the default metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in Svelte Storybook (TS)\nDESCRIPTION: TypeScript version of background configuration for Svelte components. Implements dark and gray background options with type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    parameters: {\n      backgrounds: {\n        options: {\n          // 👇 Override the default `dark` option\n          dark: { name: 'Dark', value: '#000' },\n          // 👇 Add a new option\n          gray: { name: 'Gray', value: '#CCC' },\n        },\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Play Function in JavaScript\nDESCRIPTION: This snippet shows how to create a Storybook play function using JavaScript. It demonstrates user interaction with a form, including typing and button clicking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter email and password', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Actions in JavaScript\nDESCRIPTION: Exports default preview configuration object that sets up action handling for props starting with 'on'. This configuration enables automatic action handling for event-based props in stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-matching-argtypes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    actions: { argTypesRegex: '^on.*' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in TypeScript\nDESCRIPTION: This TypeScript code configures the Storybook Test Runner. It imports the TestRunnerConfig type, defines a configuration object with a 'skip' tag, and exports the config.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-skip.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  tags: {\n    skip: ['skip-test'],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Common Component Stories with TypeScript 4.9\nDESCRIPTION: This snippet shows a framework-agnostic approach to creating Storybook stories using TypeScript 4.9 with the 'satisfies' operator. It demonstrates defining a play function to simulate user interactions that can be applied to various frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Stories with TypeScript\nDESCRIPTION: This snippet shows how to set up story metadata for an Angular component in Storybook using TypeScript. It imports necessary types, defines the component, and sets tags for documentation and development visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './Button';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Config in JavaScript\nDESCRIPTION: JavaScript implementation of Storybook's main configuration file. Includes framework specification, story pattern matching, and Vite configuration handling for development and production environments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-vite-final.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async viteFinal(config, { configType }) {\n    const { mergeConfig } = await import('vite');\n\n    if (configType === 'DEVELOPMENT') {\n      // Your development configuration goes here\n    }\n    if (configType === 'PRODUCTION') {\n      // Your production configuration goes here.\n    }\n    return mergeConfig(config, {\n      // Your environment configuration here\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components Metadata in Storybook using JavaScript\nDESCRIPTION: This JavaScript code snippet sets up metadata for a web component named 'demo-button' in Storybook, allowing users to select different arrow icons. It includes configurations with options and mappings that enable a select control in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\nexport default {\n  component: 'demo-button',\n  argTypes: {\n    arrow: {\n      options: Object.keys(arrows), // An array of serializable values\n      mapping: arrows, // Maps serializable option values to complex arg values\n      control: {\n        type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n        labels: {\n          // 'labels' maps option values to string labels\n          ArrowUp: 'Up',\n          ArrowDown: 'Down',\n          ArrowLeft: 'Left',\n          ArrowRight: 'Right',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Button Component with Vitest and Storybook\nDESCRIPTION: A Vitest test for a Svelte Button component using Storybook's composeStories utility. It sets up the jsdom environment, imports svelte-specific Storybook utilities, extracts the Primary story variant, and performs snapshot testing of the rendered component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @vitest-environment jsdom\n\nimport { expect, test } from 'vitest';\n\nimport { composeStories } from '@storybook/svelte';\n\nimport * as stories from '../stories/Button.stories';\n\nconst { Primary } = composeStories(stories);\ntest('Button snapshot', async () => {\n  await Primary.run();\n  expect(document.body.firstChild).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing React Button Component with composeStory in Jest\nDESCRIPTION: This code demonstrates testing a React button component with Jest using Storybook's composeStory function. It imports a Primary story from Button.stories and tests it with different locale settings (English and Spanish) by overriding globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-override-globals.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test } from '@jest/globals';\n// 👉 Using Next.js? Import from @storybook/nextjs instead\nimport { composeStory } from '@storybook/react';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\ntest('renders in English', async () => {\n  const Primary = composeStory(\n    PrimaryStory,\n    meta,\n    { globals: { locale: 'en' } }, // 👈 Project annotations to override the locale\n  );\n\n  await Primary.run();\n});\n\ntest('renders in Spanish', async () => {\n  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });\n\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in TypeScript\nDESCRIPTION: TypeScript configuration file for Storybook with type safety using StorybookConfig type. Defines the same settings as the JavaScript version but with proper type definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    builder: {\n      name: '@storybook/builder-webpack5',\n      options: {\n        fsCache: true,\n        lazyCompilation: true,\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Angular List Component\nDESCRIPTION: This code sets up Storybook stories for an Angular List component with ListItem as a subcomponent. It uses moduleMetadata to declare dependencies and demonstrates two story variants: an empty list and a list with one item.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { List } from './list.component';\nimport { ListItem } from './list-item.component';\n\nconst meta: Meta<List> = {\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n  decorators: [\n    moduleMetadata({\n      declarations: [List, ListItem],\n      imports: [CommonModule],\n    }),\n  ],\n};\nexport default meta;\n\ntype Story = StoryObj<List>;\n\nexport const Empty: Story = {};\n\nexport const OneItem: Story = {\n  args: {},\n  render: (args) => ({\n    props: args,\n    template: `\n      <app-list>\n        <app-list-item></app-list-item>\n      </app-list>\n  `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Story Implementation\nDESCRIPTION: Implementation of Storybook stories for Web Components using Lit HTML templating, shown in both JavaScript and TypeScript variants.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n// Assume image.png is located in the \"public\" directory.\nexport const WithAnImage: Story = {\n  render: () => html`<img src=\"/image.png\" alt=\"image\" />`,\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook Builder Configuration Options\nDESCRIPTION: Example of how a builder can provide custom configuration options in the Storybook main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n  viteFinal: async (config) => {\n    // Add custom Vite config here\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Story\nDESCRIPTION: Implements a Button component story for Svelte framework using CSF 3 format. Creates a primary button configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default { component: Button };\n\nexport const Primary = { args: { primary: true } };\n```\n\n----------------------------------------\n\nTITLE: Enabling Autodocs for a Specific Component\nDESCRIPTION: Enables automatic documentation generation for a specific component by adding the 'autodocs' tag to the component's metadata.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  tags: ['autodocs'],\n  // ...other exports\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Angular with TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for an Angular Button component using TypeScript. It imports necessary types, sets up metadata, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nimport { action } from 'storybook/actions';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Text: Story = {\n  render: () => ({\n    props: {\n      label: 'Button',\n      onClick: action('clicked'),\n    },\n    template: `<storybook-button [label]=\"label\" (onClick)=\"onClick($event)\"></storybook-button>`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite in JavaScript\nDESCRIPTION: Demonstrates how to configure Storybook's main configuration file using Vite bundler in JavaScript. Sets up framework configuration, story patterns, and module alias configuration for mocking external and internal dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  viteFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve?.alias,\n        // 👇 External module\n        lodash: require.resolve('./lodash.mock'),\n        // 👇 Internal modules\n        '@/api': path.resolve(__dirname, './api.mock.ts'),\n        '@/app/actions': path.resolve(__dirname, './app/actions.mock.ts'),\n        '@/lib/session': path.resolve(__dirname, './lib/session.mock.ts'),\n        '@/lib/db': path.resolve(__dirname, './lib/db.mock.ts'),\n      };\n    }\n\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Svelte Storybook Stories with TypeScript\nDESCRIPTION: Sets up viewport configuration for a Button component in Svelte using TypeScript. Uses defineMeta to establish a default tablet viewport for all component stories and overrides it with a mobile viewport for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    globals: {\n      // 👇 Set viewport for all component stories\n      viewport: { value: \"tablet\", isRotated: false },\n    },\n  });\n</script>\n\n<Story\n  name=\"OnPhone\"\n  globals={{\n    viewport: { value: \"mobile1\", isRotated: false },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Preview API in TypeScript\nDESCRIPTION: Sets up the Storybook preview by importing the start function from the preview API and initializing it with a framework-specific render function. The file includes global declarations and starts the Storybook preview environment, creating the API that Storybook uses to render stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-client-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { start } from 'storybook/preview-api';\n\nimport './globals';\n\nimport render from './render';\n\nconst api = start(render);\n\n// the boilerplate code\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Backgrounds in TypeScript (preview.ts)\nDESCRIPTION: This TypeScript snippet configures the Storybook backgrounds addon using a typed `Preview` object in `.storybook/preview.ts`. It defines background options ('Dark', 'Light', 'Maroon') under `parameters.backgrounds.options` and sets the initial background to 'Light' using `initialGlobals.backgrounds`. Requires importing the `Preview` type from the appropriate Storybook framework package (e.g., `@storybook/react-vite`, replacing `your-framework`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Default options\n        dark: { name: 'Dark', value: '#333' },\n        light: { name: 'Light', value: '#F7F9F2' },\n        // 👇 Add your own\n        maroon: { name: 'Maroon', value: '#400' },\n      },\n    },\n  },\n  initialGlobals: {\n    // 👇 Set the initial background color\n    backgrounds: { value: 'light' },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Vue with TypeScript 4.9 Syntax\nDESCRIPTION: Creates a Storybook story for a Vue List component using TypeScript 4.9 with 'satisfies' operator. It imports Vue components and the Unchecked story, using Vue's template syntax with setup() function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      //👇 The args will now be passed down to the template\n      return { args };\n    },\n    template: '<List v-bind=\"args\"><ListItem v-bind=\"args\"/></List>',\n  }),\n  args: {\n    ...Unchecked.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Margin Decorator in Svelte 4 with JavaScript\nDESCRIPTION: A simple Svelte 4 component that wraps content in a div with 3em margin. Uses the standard slot syntax for content projection.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/margindecorator.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <slot />\n</div>\n\n<style>\n  div {\n    margin: 3em;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Loaders in JavaScript\nDESCRIPTION: Sets up a data loader in Storybook's preview.js that fetches a mock user from the JSONPlaceholder API. This loader runs before stories render and makes the fetched data available to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-loader.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  loaders: [\n    async () => ({\n      currentUser: await (await fetch('https://jsonplaceholder.typicode.com/users/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Reset in React Storybook (TypeScript)\nDESCRIPTION: React implementation using TypeScript with type-safe Meta and StoryObj definitions. Demonstrates highlight reset functionality using decorators and the useChannel API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-highlight-reset.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ResetHighlight: Story = {\n  decorators: [\n    (storyFn) => {\n      const emit = useChannel({});\n      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\n      emit(HIGHLIGHT, {\n        elements: ['header', 'section', 'footer'],\n      });\n      return storyFn();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Plugin for Storybook in TypeScript\nDESCRIPTION: This function sets up the MDX plugin for Vite, specifically for Storybook. It adds a compiler for files ending with 'stories.mdx' or 'story.mdx', using Storybook's internal CSF tools.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-mdx.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport mdx from 'vite-plugin-mdx';\n\nimport { createCompiler } from 'storybook/internal/csf-tools/mdx';\n\nexport function mdxPlugin() {\n  return mdx((filename) => {\n    const compilers = [];\n\n    if (filename.endsWith('stories.mdx') || filename.endsWith('story.mdx')) {\n      compilers.push(createCompiler({}));\n    }\n    return {\n      compilers,\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue List Stories in TypeScript 4.9 with satisfies operator\nDESCRIPTION: Implements a Storybook story for a Vue List component using TypeScript 4.9 with the satisfies operator. It includes type definitions and an Empty list story with a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './ListComponent.vue';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {\n  render: () => ({\n    components: { List },\n    template: '<List/>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SolidJS Storybook Stories in JavaScript\nDESCRIPTION: JavaScript implementation of LoginForm stories for SolidJS in Storybook. Sets up empty and filled form stories with a play function that tests user input flow and validates the form submission outcome.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within, expect } from 'storybook/test';\n\nimport { LoginForm } from './LoginForm';\n\nexport default {\n  component: LoginForm,\n};\n\nexport const EmptyForm = {};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue3 Page Story with TypeScript\nDESCRIPTION: Storybook story for Vue3 Page component using TypeScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const Default: Story = {\n  play: async ({ mount, args }) => {\n    const note = await db.note.create({\n      data: { title: 'Mount inside of play' },\n    });\n\n    const canvas = await mount(\n      Page,\n      // 👇 Pass data that is created inside of the play function to the component\n      //   For example, a just-generated UUID\n      { props: { ...args, params: { id: String(note.id) } } },\n    );\n\n    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));\n  },\n  argTypes: {\n    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.\n    params: { control: { disable: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Web Components Play Function in TypeScript for Storybook\nDESCRIPTION: This TypeScript implementation demonstrates creating a Storybook story for web components with proper type definitions. It includes a typed sleep utility function and a play function that simulates user interactions with a dropdown selector, showing how to use the userEvent API with TypeScript typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n// Function to emulate pausing between interactions\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleChangeEvent: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const select = canvas.getByRole('listbox');\n\n    await userEvent.selectOptions(select, ['One Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Another Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Yet another item']);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Component Button in JavaScript using Lit\nDESCRIPTION: Custom button web component using Lit library in JavaScript. Defines properties using static getter and implements rendering logic with HTML template literals in the render method.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit';\n\n/**\n * @prop {string} content - The display label of the button\n * @prop {boolean} isDisabled - Checks if the button should be disabled\n * @summary This is a custom button element\n * @tag custom-button\n */\n\nexport class CustomButton extends LitElement {\n  static get properties() {\n    return {\n      content: { type: String },\n      isDisabled: { type: Boolean },\n    };\n  }\n\n  constructor() {\n    super();\n    this.content = 'One';\n    this.isDisabled = false;\n  }\n\n  render() {\n    return html` <button type=\"button\" ?disabled=${this.isDisabled}>${this.content}</button> `;\n  }\n}\n\ncustomElements.define('custom-button', CustomButton);\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Storybook in Generic Framework (TypeScript)\nDESCRIPTION: This snippet shows how to configure a Storybook setup for a Button component in a generic framework using TypeScript. It uses type annotation for Meta and includes the withActions decorator for action handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { withActions } from 'storybook/actions/decorator';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  parameters: {\n    actions: {\n      handles: ['mouseover', 'click .btn'],\n    },\n  },\n  decorators: [withActions],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Svelte Storybook using CSF (TypeScript)\nDESCRIPTION: Exports default Storybook metadata for a Svelte `Button` component using TypeScript and the standard Component Story Format (CSF). It imports the `Meta` type and the component, explicitly typing the `meta` object and defining conditional controls for `label` (text) and `image` (select) properties using `argTypes.if`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"svelte\" language=\"ts\" tabTitle=\"CSF\"\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Tests in JavaScript Storybook Stories\nDESCRIPTION: Demonstrates how to add skip-test tags to Storybook stories using JavaScript/JSX. The skip-test tag can be applied at both the default export level (affecting all stories) and individual story level to exclude them from test runs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-skip-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n  tags: ['skip-test'], // 👈 Provides the `skip-test` tag to all stories in this file\n};\n\nexport const SkipStory = {\n  //👇 Adds the `skip-test` tag to this story to allow it to be skipped in the tests when enabled in the test-runner configuration\n  tags: ['skip-test'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Viewports in JavaScript\nDESCRIPTION: Sets up custom viewport configurations for Kindle Fire devices by extending Storybook's minimal viewports. Defines specific dimensions for Kindle Fire 2 and Kindle Fire HD devices.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-add-viewport-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MINIMAL_VIEWPORTS } from 'storybook/viewport';\n\nconst kindleViewports = {\n  kindleFire2: {\n    name: 'Kindle Fire 2',\n    styles: {\n      width: '600px',\n      height: '963px',\n    },\n  },\n  kindleFireHD: {\n    name: 'Kindle Fire HD',\n    styles: {\n      width: '533px',\n      height: '801px',\n    },\n  },\n};\n\nexport default {\n  parameters: {\n    viewport: {\n      options: {\n        ...MINIMAL_VIEWPORTS,\n        ...kindleViewports,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in React with JavaScript\nDESCRIPTION: Creates a Storybook story for a React List component using JavaScript. It imports and reuses the Unchecked story from ListItem stories and composes them together in the render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport const OneItem = {\n  render: (args) => (\n    <List {...args}>\n      <Unchecked {...Unchecked.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Button Stories (TypeScript, CSF)\nDESCRIPTION: This is a standard Storybook CSF example for Svelte with TypeScript, importing types and the Button component, defining meta, and exporting Primary with prop args. Ensures type safety in Svelte + TS projects. Dependencies: @storybook/svelte, Button.svelte, and TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata with Deprecated defaultValue (Common/TS 4.9+)\nDESCRIPTION: This TypeScript (v4.9+) snippet defines metadata for a component `Example` using the `satisfies` operator for type checking against `Meta<typeof Example>`. It's intended for generic renderers and requires replacing `@storybook/your-renderer` with the actual renderer package. The example highlights the deprecation of `argTypes.value.defaultValue` and recommends using the `args` property instead.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Example.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    value: {\n      // ❌ Deprecated\n      defaultValue: 0,\n    },\n  },\n  // ✅ Do this instead\n  args: {\n    value: 0,\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Svelte Storybook via CSF - Svelte TypeScript\nDESCRIPTION: Demonstrates the use of the '@storybook/addon-svelte-csf' add-on in Svelte stories with TypeScript. The code sets up stories for a Svelte component and uses arrays or regular expressions for customizing visible controls, providing strong typing and story validation. Requires TS support, Svelte, and the CSF addon. Input is a Svelte component; output is a TypeScript story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n  });\n</script>\n\n<Story\n  name=\"ArrayInclude\"\n  parameters={{\n    controls: { include: ['foo', 'bar'] },\n  }}\n/>\n\n<Story\n  name=\"RegexInclude\"\n  parameters={{\n    controls: { include: /^hello*/ },\n  }}\n/>\n\n<Story\n  name=\"ArrayExclude\"\n  parameters={{\n    controls: { exclude: ['foo', 'bar'] },\n  }}\n/>\n\n<Story\n  name=\"RegexExclude\"\n  parameters={{\n    controls: { exclude: /^hello*/ },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Stories with TypeScript\nDESCRIPTION: Storybook stories for a Web Components Button using TypeScript. Defines three button variants with proper type definitions and emoji labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  args: {\n    backgroundColor: '#ff0',\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    ...Primary.args,\n    label: '😄👍😍💯',\n  },\n};\n\nexport const Tertiary: Story = {\n  args: {\n    ...Primary.args,\n    label: '📚📕📈🤓',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Button Story Implementation (TypeScript)\nDESCRIPTION: TypeScript version of React Button story using CSF 2 format with proper type definitions from @storybook/react.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\n\nimport { Button } from './Button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n} as ComponentMeta<typeof Button>;\n\nexport const Primary: ComponentStory<typeof Button> = (args) => <Button {...args} />;\nPrimary.args = { primary: true };\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Types in Storybook\nDESCRIPTION: Type definitions for the framework configuration in Storybook's main configuration file. Shows both simple string configuration and expanded object configuration with options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-framework.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FrameworkName = string\n\ntype FrameworkOptions = Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Background Parameters in Angular\nDESCRIPTION: This snippet shows how to define a Button component story in Angular with background color parameters. It imports the necessary Meta type from Storybook Angular, references the button component, and configures background color values as parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with Accessibility Tests in TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Button component in TypeScript, including accessibility testing configurations. It shows how to set up stories that will fail on accessibility violations and others that will only show warnings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Meta, StoryObj } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  parameters: {\n    a11y: { test: 'error' },\n  },\n};\nexport default meta;\n\ntype Story = StoryObj<typeof Button>;\n\n// 👇 This story will use the 'error' value and fail on accessibility violations\nexport const Primary: Story = {\n  args: { primary: true },\n};\n\n// 👇 This story will not fail on accessibility violations\n//    (but will still run the tests and show warnings)\nexport const NoA11yFail: Story = {\n  parameters: {\n    a11y: { test: 'todo' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Framework Button Stories with TypeScript\nDESCRIPTION: Implements a Button component story using standard TypeScript with explicit type annotations. Shows how to configure stories for any framework with proper typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      story: { autoplay: true },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Svelte Storybook using Svelte CSF (JavaScript)\nDESCRIPTION: Defines Storybook metadata for a Svelte `Button` component using the `@storybook/addon-svelte-csf` helper `defineMeta` within a `<script module>` block in JavaScript. It imports the component and helper, then sets up conditional controls for `label` (text input) and `image` (select input) props via `argTypes.if`, making them mutually exclusive.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"js\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    argTypes: {\n      // Button can be passed a label or an image, not both\n      label: {\n        control: 'text',\n        if: { arg: 'image', truthy: false },\n      },\n      image: {\n        control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n        if: { arg: 'label', truthy: false },\n      },\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in React with JavaScript\nDESCRIPTION: React button component using JavaScript with PropTypes for type checking. Defines a functional component that accepts isDisabled and content props with appropriate documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport function Button({ isDisabled, content }) {\n  return (\n    <button type=\"button\" disabled={isDisabled}>\n      {content}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  /**\n   Checks if the button should be disabled\n  */\n  isDisabled: PropTypes.bool.isRequired,\n  /**\n  The display content of the button\n  */\n  content: PropTypes.string.isRequired,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Svelte with TypeScript 4.9\nDESCRIPTION: This snippet shows how to set up story tags for a Svelte component using TypeScript 4.9 and Component Story Format (CSF). It demonstrates applying a global 'stable' tag and overriding it for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExperimentalFeatureStory: Story = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Pseudo States Addon with Parameters in JavaScript\nDESCRIPTION: This snippet demonstrates how to use parameters to configure the Pseudo States addon for a Button component's Hover story. It enables the hover pseudo-state for this specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/configure-addons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Hover = {\n  render: () => <Button>Label</Button>,\n  parameters: { pseudo: { hover: true } },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Docs Template with Meta Component\nDESCRIPTION: This snippet uses the Meta component to set up a template for Storybook documentation. The isTemplate prop indicates that this configuration should be used as a template for other docs pages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/Template.mdx#2025-04-22_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Solid in JavaScript\nDESCRIPTION: This snippet demonstrates how to create stories for the Page component in Solid using JavaScript. It imports the Page component and Header stories, sets up the default export with component metadata, and defines a LoggedIn story that spreads the args from the Header's LoggedIn story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Page } from './Page';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nexport default {\n  component: Page,\n};\n\nexport const LoggedIn = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Async Storybook Story for Svelte Component using Svelte CSF (TypeScript)\nDESCRIPTION: This snippet shows how to create a Storybook story for a Svelte component using Svelte CSF (Component Story Format) with TypeScript. It includes an async play function that simulates user interactions and uses Storybook's testing utilities for DOM manipulation. The story demonstrates typing, clicking, and hovering actions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, waitFor, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"ExampleAsyncStory\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte CSF Addon Options\nDESCRIPTION: Example of how to configure options for the Svelte CSF addon in the Storybook configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"svelte-csf-addon-options.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in Vue Storybook (JS)\nDESCRIPTION: JavaScript implementation of background options for Vue components. Sets up dark and gray background themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Override the default `dark` option\n        dark: { name: 'Dark', value: '#000' },\n        // 👇 Add a new option\n        gray: { name: 'Gray', value: '#CCC' },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Global A11y Configuration Setup\nDESCRIPTION: Configuration to customize accessibility rules globally in Storybook's preview file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  a11y: {\n    config: {\n      rules: [\n        {\n          id: 'color-contrast',\n          enabled: false,\n        },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in JavaScript\nDESCRIPTION: Framework-agnostic implementation of Button stories using JavaScript. Includes component metadata and a primary button story with documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\n/**\n * Button stories\n * These stories showcase the button\n */\nexport default {\n  component: Button,\n  parameters: {\n    docs: {\n      description: {\n        component: 'Another description, overriding the comments',\n      },\n    },\n  },\n};\n\n/**\n * Primary Button\n * This is the primary button\n */\nexport const Primary = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Another description on the story, overriding the comments',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Story with JavaScript\nDESCRIPTION: Demonstrates basic story configuration for a React component using JavaScript. Shows standard export structure with title and component definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Path/To/MyComponent',\n  component: MyComponent,\n  decorators: [/* ... */],\n  parameters: {/* ... */},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Theme in JavaScript\nDESCRIPTION: This snippet shows how to configure the Storybook preview to use a dark theme for documentation. It imports the themes from 'storybook/theming' and sets the docs theme parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-docs-dark-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { themes } from 'storybook/theming';\n\nexport default {\n  parameters: {\n    docs: {\n      theme: themes.dark,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in TypeScript for Common Frameworks\nDESCRIPTION: This snippet demonstrates using TypeScript for conditional controls in common Storybook frameworks. It uses the Meta generic type with typeof Example for better type checking while showing various conditions for displaying controls based on argument values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    parent: { control: 'select', options: ['one', 'two', 'three'] },\n\n    // 👇 Only shown when `parent` arg exists\n    parentExists: { if: { arg: 'parent', exists: true } },\n\n    // 👇 Only shown when `parent` arg does not exist\n    parentDoesNotExist: { if: { arg: 'parent', exists: false } },\n\n    // 👇 Only shown when `parent` arg value is truthy\n    parentIsTruthy: { if: { arg: 'parent' } },\n    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },\n\n    // 👇 Only shown when `parent` arg value is not truthy\n    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },\n\n    // 👇 Only shown when `parent` arg value is 'three'\n    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },\n\n    // 👇 Only shown when `parent` arg value is not 'three'\n    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },\n\n    // Each of the above can also be conditional on the value of a globalType, e.g.:\n\n    // 👇 Only shown when `theme` global exists\n    parentExists: { if: { global: 'theme', exists: true } },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Highlight Channel in React (TypeScript)\nDESCRIPTION: Demonstrates how to use Storybook's highlight feature in React with TypeScript. This implementation uses the StoryObj and Meta types from @storybook/react-vite and includes a decorator that highlights specific DOM elements with a blue double border.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-addon-custom-style.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const StyledHighlight: Story = {\n  decorators: [\n    (storyFn) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n        color: 'blue',\n        style: 'double', // 'dotted' | 'dashed' | 'solid' | 'double'\n      });\n      return storyFn();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Documentation with MDX in Storybook (Svelte CSF)\nDESCRIPTION: This MDX file documents a Button component specifically for Svelte using Component Story Format. It imports stories from a Svelte-specific file (Button.stories.svelte), sets component metadata, describes the button's functionality, and displays a usage example.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-starter-example.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs/blocks';\n\nimport * as ButtonStories from './Button.stories.svelte';\n\n<Meta of={ButtonStories} />\n\n# Button\n\nButton is a clickable interactive element that triggers a response.\n\nYou can place text and icons inside of a button.\n\nButtons are often used for form submissions and to toggle elements into view.\n\n## Usage\n\n<Story of={ButtonStories.Basic} />\n```\n\n----------------------------------------\n\nTITLE: Creating Web Component with LitElement in TypeScript\nDESCRIPTION: Defines a web component using LitElement in TypeScript, ensuring type safety for properties. It requires LitElement and TypeScript support to manage and render data within HTML templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\n@customElement('demo-document-screen')\nclass DocumentScreen extends LitElement {\n  @property({ type: Object })\n  data: {\n    user: Record<string, unknown>;\n    document: Record<string, unknown>;\n    subdocuments: Array<Record<string, unknown>>;\n  } = {};\n\n  constructor() {\n    super();\n  }\n\n  render() {\n    const { user, document, subdocuments } = this.data;\n    return html`\n      <demo-page-layout .user=${user}>\n        <demo-document-header .document=${document}></demo-document-header>\n        <demo-document-list .documents=${subdocuments}></demo-document-list>\n      </demo-page-layout>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'demo-document-screen': DocumentScreen;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Svelte (TypeScript)\nDESCRIPTION: TypeScript implementation of a Storybook story for the Page component in Svelte using the CSF format. Uses defineMeta to create a story with a snippet that renders the Page with a custom footer from the provided args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Page from './Page.svelte';\n\n  const { Story } = defineMeta({\n    component: Page\n  });\n</script>\n\n<Story name=\"CustomFooter\" args={{ footer: 'Built with Storybook' }}>\n  {#snippet children(args)}\n    <Page {...args} >\n      <footer>{args.footer}</footer>\n    </Page>\n  {/snippet}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Angular (TypeScript)\nDESCRIPTION: Configures Storybook metadata for an Angular component using TypeScript. It imports the component and `Meta` type, then defines the `meta` object, specifying the component and using `argTypes` to set `table: { disable: true }` for the 'foo' property, effectively hiding it from the Storybook args table.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"YourComponent.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta } from '@storybook/angular';\n\nimport { YourComponent } from './YourComponent.component';\n\nconst meta: Meta<YourComponent> = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte with JavaScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a Svelte Button component using JavaScript. It imports the necessary action and component, sets up metadata, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\n\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  render: () => ({\n    Component: Button,\n    props: {\n      label: 'Hello',\n    },\n    on: {\n      click: action('clicked'),\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with Loaders in SolidJS (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for TodoItem in SolidJS. It includes a default export with component and render function, plus a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TodoItem } from './TodoItem';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport default {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,\n};\n\nexport const Primary = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Storybook Addon and Accessing API\nDESCRIPTION: Demonstrates how to register an addon and access the Storybook API using addons.register().\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from '@storybook/manager-api';\n\naddons.register('my-addon-id', (api) => {\n  // Use the API here\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Angular with TypeScript\nDESCRIPTION: Angular button component implementation with input properties for disabled state and content. Uses TypeScript decorators and Angular's component architecture with an inline template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'my-button',\n  template: ` <button type=\"button\" [disabled]=\"isDisabled\">\n    {{ content }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Checks if the button should be disabled\n   */\n  @Input()\n  isDisabled: boolean;\n\n  /**\n  The display content of the button\n  */\n  @Input()\n  content: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Web Components in TypeScript\nDESCRIPTION: This snippet demonstrates creating stories for the Page component as a Web Component using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a LoggedIn story that reuses args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\n// 👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta: Meta = {\n  component: 'demo-page',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Button Story Implementation (TypeScript)\nDESCRIPTION: Default story implementation for a Button component in Vue using CSF 3 format with TypeScript. Includes Story type definition and Vue's composition API pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Default: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Project Annotations with Storybook for Vue in TypeScript\nDESCRIPTION: This TypeScript snippet sets up project annotations in a Vue environment using Storybook. It uses Vitest's `beforeAll` alongside Storybook for Vue 3 to integrate a11y and project-specific annotations for better accessibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n\nimport { setProjectAnnotations } from '@storybook/vue3';\n\n// Import the a11y addon annotations\nimport * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';\n\n// Optionally import your own annotations\nimport * as projectAnnotations from './preview';\n\nconst project = setProjectAnnotations([\n  // Add the a11y addon annotations\n  a11yAddonAnnotations,\n  projectAnnotations,\n]);\n\nbeforeAll(project.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Documentation for Button Component with Imported Stories\nDESCRIPTION: An MDX file that imports stories from a separate CSF file and renders them alongside documentation. This demonstrates how to combine CSF-defined stories with MDX documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs';\nimport \\* as stories from './Button.stories.js';\nimport { Button } from './Button';\nimport { SomeComponent } from 'path/to/SomeComponent';\n\n<Meta title=\"Demo/Button\" component={Button} />\n\n# Button\n\nI can define a story with the function imported from CSF:\n\n<Story story={stories.basic} />\n\nAnd I can also embed arbitrary markdown & JSX in this file.\n\n<SomeComponent prop1=\"val1\" />\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Story with CSF Format\nDESCRIPTION: Svelte-specific implementation of Storybook stories using Component Story Format (CSF) with test interactions. Shows both click examples using userEvent and fireEvent.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { fireEvent, userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ClickExample\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByRole('button'));\n  }}\n/>\n\n<Story\n  name=\"FireEventExample\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Storybook React Configuration with Vite\nDESCRIPTION: Example showing how to add React-specific Vite plugins to Storybook configuration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@storybook/react-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript (v4.9+)\nDESCRIPTION: This snippet defines a preview configuration object for Storybook in TypeScript 4.9 or later. It imports the Preview type from the framework-specific Storybook package and sets up a global theme type with a toolbar selector.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-configure-globaltypes.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  globalTypes: {\n    theme: {\n      description: 'Global theme for components',\n      toolbar: {\n        // The label to show for this toolbar item\n        title: 'Theme',\n        icon: 'circlehollow',\n        // Array of plain string values or MenuItem shape (see below)\n        items: ['light', 'dark'],\n        // Change title based on selected value\n        dynamicTitle: true,\n      },\n    },\n  },\n  initialGlobals: {\n    theme: 'light',\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Web Components Stories\nDESCRIPTION: Shows viewport configuration for Web Components Storybook stories using both JavaScript and TypeScript approaches. Demonstrates how to set up viewport options for custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components-vite';\n\nimport { INITIAL_VIEWPORTS } from 'storybook/viewport';\n\nconst meta: Meta = {\n  component: 'my-component',\n  parameters: {\n    viewport: {\n      //👇 Set available viewports for every story in the file\n      options: INITIAL_VIEWPORTS,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for TypeScript Checkbox Component\nDESCRIPTION: This snippet demonstrates how to set up Storybook metadata for a Checkbox component using TypeScript without the 'satisfies' keyword. It imports the Meta type and defines the metadata object with explicit type annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { CheckBox } from './Checkbox';\n\nconst meta: Meta<typeof CheckBox> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Checkbox',\n  component: CheckBox,\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Solid with TypeScript (TS 4.9+ satisfies)\nDESCRIPTION: Defines the metadata for Button component stories in a SolidJS project using TypeScript 4.9+. It imports the `Meta` type from `storybook-solidjs` and the `Button` component. It uses the `satisfies` operator for type checking the `meta` object, which specifies the component, `argTypes` (including a color control for `backgroundColor`), and default `args` (`primary: true`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"Button.stories.ts|tsx\" renderer=\"solid\" language=\"ts-4-9\"\nimport type { Meta } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for React/Vue Example Component\nDESCRIPTION: This snippet shows a Storybook Meta configuration for a React or Vue Example component. It defines argTypes for a 'label' property with options and mappings for Bold and Italic styles.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: <b>Bold</b>,\n        Italic: <i>Italic</i>,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Story with Svelte Snippets\nDESCRIPTION: Example showing how to use the new snippet feature in Svelte 5 to create dynamic stories with reactivity. This demonstrates the usage of the defineMeta function and Story component with snippet support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story name=\"Default\" args={{ exampleProperty: true }}>\n  {#snippet children(args)}\n    <MyComponent {...args}>Reactive component</MyComponent>\n  {/snippet}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function for Form Testing in Svelte with TypeScript\nDESCRIPTION: This code snippet demonstrates a Storybook story for a Svelte registration form with a play function that simulates user interaction. It shows how to find form elements, type into email and password fields with delays, and click a submit button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport RegistrationForm from './RegistrationForm.svelte';\n\nconst meta: Meta<typeof RegistrationForm> = {\n  component: RegistrationForm,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof RegistrationForm>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgType Categories in Storybook for Angular (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the `meta` configuration for an Angular Button component story in Storybook. It defines `argTypes` for properties like `backgroundColor`, `primary`, `label`, `onClick`, and `size`, organizing them into categories (e.g., 'Colors', 'Text', 'Events', 'Sizes') and subcategories using the `table` property within each arg definition. It imports the `Meta` type from `@storybook/angular` and the `Button` component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n        // Assigns the argTypes to a specific subcategory\n        subcategory: 'Button colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n        subcategory: 'Button style',\n      },\n    },\n    label: {\n      table: {\n        category: 'Text',\n        subcategory: 'Button contents',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n        subcategory: 'Button Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Vue in JavaScript\nDESCRIPTION: This snippet demonstrates how to create stories for the Page component in Vue using JavaScript. It imports the Page component and Header stories, sets up the default export with component metadata, and defines a LoggedIn story with a render function and args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from './Page.vue';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nexport default {\n  component: Page,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const LoggedIn = {\n  render: (args) => ({\n    components: { Page },\n    setup() {\n      return { args };\n    },\n    template: '<page v-bind=\"args\" />',\n  }),\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte CSF using TypeScript 4.9\nDESCRIPTION: Creates a Storybook story for a Svelte Button component using the Svelte CSF format with TypeScript 4.9. Uses the defineMeta helper to configure the component and defines three story variations with different labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n\tconst { Story } = defineMeta({\n\t\tcomponent: Button,\n\t});\n</script>\n\n<Story name=\"Primary\">\n  <Button backgroundColor=\"#ff0\" label=\"Button\" />\n</Story>\n\n<Story name=\"Secondary\">\n  <Button backgroundColor=\"#ff0\" label=\"😄👍😍💯\" />\n</Story>\n\n<Story name=\"Tertiary\">\n  <Button backgroundColor=\"#ff0\" label=\"📚📕📈🤓\" />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Test Parameters\nDESCRIPTION: Example of configuring accessibility test parameters at different levels with various test behaviors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: Button,\n  parameters: {\n    a11y: { test: 'error' },\n  },\n};\n\nexport const Primary = {\n  parameters: {\n    a11y: { test: 'todo' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Svelte CSF Storybook Stories with TypeScript\nDESCRIPTION: Demonstrates how to add decorators to Svelte stories using the Svelte CSF format with standard TypeScript. This example uses the defineMeta helper and applies a MarginDecorator component as a decorator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n  import MarginDecorator from './MarginDecorator.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story\n  name=\"Primary\"\n  decorators={[\n    () => MarginDecorator\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Storybook Svelte Configuration with Vite\nDESCRIPTION: Example showing how to add Svelte-specific Vite plugins to Storybook configuration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n@sveltejs/vite-plugin-svelte\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Story for a Generic Framework in TypeScript\nDESCRIPTION: This snippet sets up a Storybook story for a Button component in a generic framework, ensuring type safety of arguments. The dependencies are '@storybook/your-framework' and the Button component from './Button'. 'Primary' story is defined with 'primary' argument as true, demonstrating a universal pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n//👇 Throws a type error if the args don't match the component props\nexport const Primary: Story = {\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring default args in Storybook preview with TypeScript 4.9+ using satisfies\nDESCRIPTION: TypeScript 4.9+ implementation that configures default args in Storybook preview using the 'satisfies' operator. Imports the Preview type from the relevant renderer package and sets the default theme to 'light'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/args-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport { Preview } from '@storybook/your-renderer';\n\nconst preview = {\n  // The default value of the theme arg for all stories\n  args: { theme: 'light' },\n} satisfies Preview;\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in React with JavaScript (CSF 2)\nDESCRIPTION: Creates a default button story for React components using JavaScript and CSF 2 format. The implementation spreads args as props to the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Other imports and story implementation\nexport const Default = (args) => <Button {...args} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Angular with TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for an Angular Checkbox component using TypeScript. It defines a meta object and an 'Unchecked' story with specific props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Checkbox } from './checkbox.component';\n\nconst meta: Meta<Checkbox> = {\n  component: Checkbox,\n};\n\nexport default meta;\ntype Story = StoryObj<Checkbox>;\n\nexport const Unchecked: Story = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Angular with TypeScript\nDESCRIPTION: This snippet sets up the preview configuration for Angular in Storybook using TypeScript. It imports necessary types and functions, and defines a decorator that wraps each story with a div element having a 3em margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/angular';\nimport { componentWrapperDecorator } from '@storybook/angular';\n\nconst preview: Preview = {\n  decorators: [componentWrapperDecorator((story) => `<div style=\"margin: 3em\">${story}</div>`)],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Building Vue Component in HTML\nDESCRIPTION: A basic Vue component setup to display a Document Screen. It uses Vue's reactive system to manage props for user, document, and subdocuments. Requires Vue.js and related libraries.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <PageLayout :user=\"user\">\n    <DocumentHeader :document=\"document\" />\n    <DocumentList :documents=\"subdocuments\" />\n  </PageLayout>\n</template>\n\n<script>\n  import PageLayout from './PageLayout';\n  import DocumentHeader from './DocumentHeader';\n  import DocumentList from './DocumentList';\n  import { reactive } from 'vue';\n\n  export default {\n    name: 'DocumentScreen',\n    components: { PageLayout, DocumentHeader, DocumentList },\n    props: {\n      user: {\n        type: String,\n        default: 'N/A',\n      },\n      document: {\n        type: Object,\n        default: () => ({\n          id: 1,\n          title: 'A document',\n          content: 'Lorem Ipsum',\n        }),\n      },\n      subdocuments: {\n        type: Array,\n        default: () => [],\n      },\n    },\n    setup(props) {\n      props = reactive(props);\n      return {\n        /**\n         * What will be returned here will available to the component\n         * Functions referenced here will act like methods\n         */\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation Structure with JSX\nDESCRIPTION: This code block defines the structure of the Storybook documentation page using JSX. It includes components for the title, description, args table, and stories. The PRIMARY_STORY constant is used to reference the main story being documented.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/Template.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Title />\n<Description />\n<ArgsTable story={PRIMARY_STORY} />\n<Stories />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in JavaScript\nDESCRIPTION: This snippet exports a configuration object for the Storybook Test Runner using CommonJS module syntax. It specifies tag inclusion for 'test-only' stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-include.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tags: {\n    include: ['test-only'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story with Dark Background in TypeScript\nDESCRIPTION: Defines a PrimaryOnDark story variant with TypeScript typing that extends the Primary story configuration and sets a dark background parameter. Uses TypeScript syntax with CSF 3.0 format and Story type annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-primary-dark-story.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PrimaryOnDark: Story = {\n  ...Primary,\n  parameters: { background: { default: 'dark' } },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Stories in Vue with TypeScript\nDESCRIPTION: Vue implementation of Button stories using TypeScript, with proper type annotations using StoryObj and Meta types from @storybook/vue3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Variant1: Story = {\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 1 },\n};\n\nexport const Variant2: Story = {\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 2 },\n};\n\nexport const Combo: Story = {\n  tags: ['!test'],\n  render: () => ({\n    components: { Button },\n    template: `\n      <div>\n        <Button :variant=\"1\" />\n        <Button :variant=\"2\" />\n      </div>\n    `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Angular Button Component in TypeScript\nDESCRIPTION: This TypeScript snippet sets up Storybook meta configuration for an Angular Button component using explicit typing with Meta<Button>. It imports the Button component and defines argTypes for controls, including conditional controls shown only when advanced is true. Requires @storybook/angular and the target Button component; expected input is the Button component, and output is a Storybook-compatible meta export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\\n\\nimport { Button } from './button.component';\\n\\nconst meta: Meta<Button> = {\\n  component: Button,\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story Implementation (TypeScript)\nDESCRIPTION: Default story implementation for a Button web component using CSF 3 format with TypeScript. Includes Story type definition and custom element declaration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Default: Story = {\n  render: (args) => html`<custom-button label=\"Hello\" @click=${action('clicked')}></custom-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Sorting in TypeScript\nDESCRIPTION: TypeScript configuration for the Storybook preview file with proper typing. It imports the Preview type from the framework-specific package and configures storySort parameters to control story ordering in the sidebar.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-empty-sort-object.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    options: {\n      storySort: {\n        method: '',\n        order: [],\n        locales: '',\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Applying Tags in Component Story File (JavaScript/TypeScript)\nDESCRIPTION: This example shows how to apply tags at the component (meta) level and individual story level in a Storybook component story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: Button,\n  tags: ['autodocs'],\n};\n\nexport const Primary = {\n  tags: ['experimental'],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  component: Button,\n  tags: ['autodocs'] as string[],\n} satisfies Meta<typeof Button>;\n\nexport const Primary: StoryObj<typeof Button> = {\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Story with Web Components in JavaScript\nDESCRIPTION: Shows how to create a Button story for Web Components using lit-html templates. The example defines a story for a custom element 'demo-button' with the primary attribute.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  render: () => html`<demo-button primary></demo-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Web Components in TypeScript\nDESCRIPTION: Demonstrates creating a Storybook story for a Web Component using TypeScript and Lit. Defines type-safe meta configuration, implements a render function that processes component arguments, and uses Lit's html template literals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'custom-component',\n  //👇 Creates specific argTypes with options\n  argTypes: {\n    propertyA: {\n      options: ['Item One', 'Item Two', 'Item Three'],\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\n    },\n    propertyB: {\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using waitForPageReady in Storybook Test-Runner for Asset Loading\nDESCRIPTION: Demonstrates how to use the waitForPageReady helper function to ensure the page is fully loaded before running tests, which is useful for tests involving assets like images.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// @vitest-environment @storybook/test-runner\nimport { expect, test } from '@storybook/test-runner';\nimport type { Page } from '@playwright/test';\n\ntest('my test', async ({ page, context }: { page: Page; context: any }) => {\n  // This ensures your page is in the ready state before proceeding with the test\n  await context.waitForPageReady();\n  // Run your tests\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Storybook Preview Annotations in JavaScript\nDESCRIPTION: Exports a function that takes an optional entry array and options parameters, then returns a new array containing the original entries plus the resolved path to the preview distribution file. This is used to configure and extend Storybook's preview functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-root-preset-preview-annotations.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const previewAnnotations = (entry = [], options) => {\n  return [...entry, require.resolve('./dist/preview')];\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Storybook in Custom Framework\nDESCRIPTION: This TypeScript code sets up Storybook metadata for a Button component, designed to be compatible with a custom framework by replacing the framework name. Dependencies include Storybook and the specified custom framework support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    arrow: {\n      options: Object.keys(arrows), // An array of serializable values\n      mapping: arrows, // Maps serializable option values to complex arg values\n      control: {\n        type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n        labels: {\n          // 'labels' maps option values to string labels\n          ArrowUp: 'Up',\n          ArrowDown: 'Down',\n          ArrowLeft: 'Left',\n          ArrowRight: 'Right',\n        },\n      },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Updating Storybook Framework for Preact with Vite in TypeScript\nDESCRIPTION: This snippet demonstrates how to update the Storybook configuration file in TypeScript to use Vite instead of Webpack 5 for Preact projects. It imports the StorybookConfig type and modifies the 'framework' property in the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/preact-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  // framework: '@storybook/preact-webpack5', 👈 Remove this\n  framework: '@storybook/preact-vite', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story with JavaScript\nDESCRIPTION: Configures a Storybook story for a Web Components Button using JavaScript. Sets up component registration and click action handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\n\nexport default {\n  component: 'demo-button',\n  args: {\n    // 👇 Create an action that appears when the onClick event is fired\n    onClick: action('on-click'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright Component Tests with Vue Storybook\nDESCRIPTION: This code demonstrates how to use Playwright for component testing with Vue Storybook. It imports stories from a portable stories file, creates a test instance, and shows how to mount components with default and custom props while making assertions on the rendered output. Note that due to current limitations, stories must be referenced as JSX elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTest } from '@storybook/vue3/experimental-playwright';\nimport { test as base } from '@playwright/experimental-ct-vue';\n\n// See explanation below for `.portable` stories file\nimport stories from './Button.stories.portable';\n\nconst test = createTest(base);\n\n// 👉 Important: Due to current limitations, you can only reference your stories as JSX elements.\n\ntest('renders primary button', async ({ mount }) => {\n  // The mount function will execute all the necessary steps in the story,\n  // such as loaders, render, and play function\n  await mount(<stories.Primary />);\n});\n\ntest('renders primary button with overridden props', async ({ mount }) => {\n  // You can pass custom props to your component via JSX\n  const component = await mount(<stories.Primary label=\"label from test\" />);\n  await expect(component).toContainText('label from test');\n  await expect(component.getByRole('button')).toHaveClass(/storybook-button--primary/);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Pseudo States Addon\nDESCRIPTION: Commands for installing the Storybook Pseudo States addon. The first command is for Storybook 9.0 and later, while the second is for earlier versions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/pseudo-states/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook add storybook-addon-pseudo-states\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook add storybook-addon-pseudo-states@4.0.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript for Next.js\nDESCRIPTION: This snippet demonstrates the TypeScript configuration for Storybook's main.ts file in a Next.js project. It imports the StorybookConfig type from the experimental Next.js Vite integration and sets up the config object with the addons array, showing which Next.js-specific addons can be removed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-remove-addons.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/experimental-nextjs-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  addons: [\n    // ...\n    // 👇 These can both be removed\n    // 'storybook-addon-next',\n    // 'storybook-addon-next-router',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Story with Figma Link (JS)\nDESCRIPTION: Defines a Storybook story for a Web Component identified by the tag name `'my-component'` using JavaScript. It sets the component tag name string in the default export and exports an `Example` story with parameters linking to a Figma design file. Requires `@storybook/web-components` and the Web Component to be defined and registered globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"MyComponent.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  component: 'my-component',\n};\n\nexport const Example = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Svelte Page Story with JavaScript\nDESCRIPTION: Storybook story for Svelte Page component using JavaScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport const Default = {\n  play: async ({ mount, args }) => {\n    const note = await db.note.create({\n      data: { title: 'Mount inside of play' },\n    });\n\n    const canvas = await mount(\n      Page,\n      // 👇 Pass data that is created inside of the play function to the component\n      //   For example, a just-generated UUID\n      { props: { ...args, params: { id: String(note.id) } } },\n    );\n\n    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));\n  },\n  argTypes: {\n    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.\n    params: { control: { disable: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Tags in Storybook Preview Configuration (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates how to apply the 'autodocs' tag to all stories in a Storybook project using the preview configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const tags = ['autodocs'];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tags: string[] = ['autodocs'];\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Stories with TypeScript\nDESCRIPTION: Demonstrates standard TypeScript configuration for Storybook stories. It imports Meta and StoryObj types, sets up component metadata with explicit type annotations, and exports a default story using an environment variable as a property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Default: Story = {\n  args: {\n    exampleProp: process.env.EXAMPLE_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Building Storybook with Angular's Custom Builder\nDESCRIPTION: This command uses Angular's custom builder to build Storybook. It requires setting up a custom builder as described in the Storybook documentation for Angular.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/build-storybook-production-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n# Builds Storybook with Angular's custom builder\n# See https://storybook.js.org/docs/get-started/angular\n# to learn how to create the custom builder\nng run my-project:build-storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Solid in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook stories for a Solid Button component using JavaScript. It imports the Button component, sets up metadata, and defines a story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  args: {/* ... */},\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Stories and Configuring Meta Component in Storybook\nDESCRIPTION: This snippet imports all stories from a 'B.stories' file and sets up the Meta component to use these stories. It's typically used in Storybook to configure the documentation for a set of components or stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/docs-id-generation/B.docs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Stories from './B.stories';\n\n<Meta of={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Snapshot Tests with Vitest - JavaScript\nDESCRIPTION: This code adapts snapshot testing for Storybook stories to the Vitest test runner in a JavaScript context. It uses ESM-style module discovery with import.meta.glob to eagerly gather all story files, composes the stories with the given renderer, and performs snapshot comparison on each. Required dependencies are 'path', 'vitest', and '@storybook/your-renderer'. The test expects at least one valid story per story file and runs 'story.run()' for setup before snapshotting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/snapshot-tests-portable-stories.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// @vitest-environment jsdom\\n\\nimport path from 'path';\\nimport { describe, expect, test } from 'vitest';\\n\\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\\nimport { composeStories } from '@storybook/your-renderer';\\n\\nconst compose = (entry) => {\\n  try {\\n    return composeStories(entry);\\n  } catch (error) {\\n    throw new Error(\\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${error}`,\\n    );\\n  }\\n};\\nfunction getAllStoryFiles() {\\n  // Place the glob you want to match your story files\\n  const storyFiles = Object.entries(\\n    import.meta.glob('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {\\n      eager: true,\\n    }),\\n  );\\n\\n  return storyFiles.map(([filePath, storyFile]) => {\\n    const storyDir = path.dirname(filePath);\\n    const componentName = path.basename(filePath).replace(/\\\\.(stories|story)\\\\.[^/.]+$/, '');\\n    return { filePath, storyFile, componentName, storyDir };\\n  });\\n}\\ndescribe('Stories Snapshots', () => {\\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\\n    const meta = storyFile.default;\\n    const title = meta.title || componentName;\\n\\n    describe(title, () => {\\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\\n\\n      if (stories.length <= 0) {\\n        throw new Error(\\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,\\n        );\\n      }\\n\\n      stories.forEach(({ name, story }) => {\\n        test(name, async () => {\\n          await story.run();\\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\\n          await new Promise((resolve) => setTimeout(resolve, 1));\\n          expect(document.body.firstChild).toMatchSnapshot();\\n        });\\n      });\\n    });\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Svelte with JavaScript using CSF\nDESCRIPTION: This code shows how to create a Storybook story for a Histogram component in Svelte using the standard Component Story Format (CSF) with JavaScript. It imports the Svelte component and defines the story with args for configuring the component properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Histogram from './Histogram.svelte';\n\nexport default {\n  component: Histogram,\n};\n\nexport const Default = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with JavaScript\nDESCRIPTION: Svelte implementation of Button stories using JavaScript and addon-svelte-csf. Shows how to set background configurations in Svelte's component story format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    globals: {\n      // 👇 Set background value for all component stories\n      backgrounds: { value: 'gray', grid: false },\n    },\n  });\n</script>\n\n<!-- 👇 Override background value for this story -->\n<Story\n  name=\"OnDark\"\n  globals={{\n    backgrounds: { value: \"dark\" },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Viewports in TypeScript\nDESCRIPTION: TypeScript version of the viewport configuration that includes type definitions using the Preview type from Storybook. Extends minimal viewports with custom Kindle Fire device dimensions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-add-viewport-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preview } from '@storybook/your-framework';\n\nimport { MINIMAL_VIEWPORTS } from 'storybook/viewport';\n\nconst kindleViewports = {\n  kindleFire2: {\n    name: 'Kindle Fire 2',\n    styles: {\n      width: '600px',\n      height: '963px',\n    },\n  },\n  kindleFireHD: {\n    name: 'Kindle Fire HD',\n    styles: {\n      width: '533px',\n      height: '801px',\n    },\n  },\n};\n\nconst preview: Preview = {\n  parameters: {\n    viewport: {\n      options: {\n        ...MINIMAL_VIEWPORTS,\n        ...kindleViewports,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Snapshot Tests with Vitest in JavaScript\nDESCRIPTION: A JavaScript implementation for running snapshot tests on Storybook components using Vitest. This configuration uses import.meta.glob to find story files, composes them, and runs tests against snapshots. It includes a jsdom environment setup and proper error handling for missing stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @vitest-environment jsdom\n\nimport path from 'path';\nimport { describe, expect, test } from 'vitest';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nconst compose = (entry) => {\n  try {\n    return composeStories(entry);\n  } catch (error) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${error}`\n    );\n  }\n};\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your story files\n  const storyFiles = Object.entries(\n    import.meta.glob('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {\n      eager: true,\n    })\n  );\n\n  return storyFiles.map(([filePath, storyFile]) => {\n    const storyDir = path.dirname(filePath);\n    const componentName = path.basename(filePath).replace(/\\.(stories|story)\\.[^/.]+$/, '');\n    return { filePath, storyFile, componentName, storyDir };\n  });\n}\ndescribe('Stories Snapshots', () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        test(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          // Defines the custom snapshot path location and file name\n          const customSnapshotPath = `./__snapshots__/${componentName}.spec.js.snap`;\n          await expect(document.body.firstChild).toMatchFileSnapshot(customSnapshotPath);\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Storybook in Angular (TypeScript)\nDESCRIPTION: This snippet sets up Button stories for Angular using TypeScript and Storybook. It imports types from '@storybook/angular' and defines meta information for the Button component. Three story variants are exported (Primary, Secondary, Tertiary), each specifying 'args' for component properties. 'meta' and 'Story' types provide strong typing and ensure compatibility with Storybook's Angular rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\\n\\nimport { Button } from './button.component';\\n\\nconst meta: Meta<Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\\ntype Story = StoryObj<Button>;\\n\\nexport const Primary: Story = {\\n  args: {\\n    backgroundColor: '#ff0',\\n    label: 'Button',\\n  },\\n};\\n\\nexport const Secondary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '😄👍😍💯',\\n  },\\n};\\n\\nexport const Tertiary: Story = {\\n  args: {\\n    ...Primary.args,\\n    label: '📚📕📈🤓',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Solid.js Storybook Decorator\nDESCRIPTION: Shows decorator implementation for Solid.js components with both Story element and Story function approaches.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from 'storybook-solidjs';\n\nimport { YourComponent } from './YourComponent';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  decorators: [(Story) => <div style={{ margin: '3em' }}>{Story()}</div>],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in Web Components CSF with TypeScript\nDESCRIPTION: Example of configuring accessibility parameters for Web Components using Component Story Format (CSF) in TypeScript. Demonstrates how to set up accessibility testing with type safety for custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ExampleStory: Story = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Svelte CSF in TypeScript\nDESCRIPTION: Shows how to create a Storybook story for a Svelte component using TypeScript without TypeScript 4.9 features. Uses the defineMeta function to create component stories with customized controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  const { Story } = defineMeta({\n      component: YourComponent,\n      //👇 Creates specific argTypes\n      argTypes: {\n        propertyA: {\n          options: ['Item One', 'Item Two', 'Item Three'],\n          control: { type: 'select' }, // Automatically inferred when 'options' is defined\n        },\n        propertyB: {\n          options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n        },\n      },\n  });\n\n  const someFunction = (valuePropertyA, valuePropertyB) => {\n    // Do some logic here\n  };\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  args={{\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  }}\n>\n  {#snippet children(args)}\n    <YourComponent\n      {...args}\n      someProperty={someFunction(args.propertyA, args.propertyB)}\n    />\n  {/snippet}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories with Dark Background in Svelte CSF (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a Button story in Svelte using Component Story Format (CSF) with TypeScript. It sets up a story with a dark background using story-level parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<!-- 👇 Story-level parameters-->\n<Story\n  name=\"OnDark\"\n  parameters={{\n    backgrounds: { default: 'dark' }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining React Storybook Button Stories (JavaScript)\nDESCRIPTION: Defines stories for the Button component in React using JavaScript and Storybook CSF. The default export specifies the component, and the Primary story provides default args for 'primary' and 'label'. No custom render is used, using Storybook's default React rendering. Dependencies are React, the Button component, and Storybook for React.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Button Stories in Storybook\nDESCRIPTION: Angular-specific implementation of Button stories using Storybook. Defines basic and primary button variants with TypeScript types for Angular components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/typed-csf-file.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\nexport default meta;\n\ntype Story = StoryObj<Button>;\n\nexport const Basic: Story = {};\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Common Frameworks CSF (TypeScript)\nDESCRIPTION: Defines Storybook metadata using standard CSF in TypeScript for components in common frameworks (like React, Vue). It imports the component and `Meta` type, then configures `argTypes` within the typed `meta` object to hide the 'foo' property from the Storybook args table. Requires replacing 'your-framework' with the actual framework name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"YourComponent.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { YourComponent } from './YourComponent';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Using useArgs Hook in Storybook Manager API\nDESCRIPTION: Demonstrates how to import and use the useArgs hook from Storybook's manager API to access, update, and reset story arguments. The snippet shows three main operations: retrieving args with destructuring, updating specific args with new values, and resetting either specific args or all args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/args-usage-with-addons.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useArgs } from 'storybook/manager-api';\n\nconst [args, updateArgs, resetArgs] = useArgs();\n\n// To update one or more args:\nupdateArgs({ key: 'value' });\n\n// To reset one (or more) args:\nresetArgs((argNames: ['key']));\n\n// To reset all args\nresetArgs();\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Storybook Preview for Generic Frameworks with TS 4.9\nDESCRIPTION: Sets up a TypeScript-based Storybook preview for any framework with theme support. Uses TypeScript 4.9 and imports a custom theme file, applying the selected theme through decorators based on global context.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., solid, qwik)\nimport { Preview } from '@storybook/your-framework';\n\nimport { MyThemes } from '../my-theme-folder/my-theme-file';\n\nconst preview: Preview = {\n  decorators: [\n    (story, context) => {\n      const selectedTheme = context.globals.theme || 'light';\n      const theme = MyThemes[selectedTheme];\n      // Your theme provider and other context providers goes in the return statement\n      return;\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Stories in JavaScript\nDESCRIPTION: JavaScript configuration for Button stories in Web Components, using the component tag name approach.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport const Basic = {\n  parameters: {\n    docs: {\n      source: { language: 'tsx' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Snapshot Resolver\nDESCRIPTION: Configuration setup for enabling a custom snapshot resolver in the test runner to control snapshot file paths and naming conventions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  snapshotResolver: './snapshot-resolver.js'\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Storybook Story\nDESCRIPTION: TypeScript implementation of a Storybook story for Angular components. Defines a story that renders an image component with specified props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const WithAnImage: Story = {\n  render: () => ({\n    props: {\n      src: 'https://storybook.js.org/images/placeholders/350x150.png',\n      alt: 'My CDN placeholder',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components List Stories in TypeScript with Lit\nDESCRIPTION: This snippet defines Storybook stories for a Web Component named 'demo-list' using TypeScript and CSF 3.0. It imports Storybook types (`Meta`, `StoryObj`) and the `html` template literal tag from 'lit'. Component metadata (`meta`) is defined, and typed stories (`Empty`, `OneItem`, `ManyItems`) are exported, using `render` functions with `lit-html` templates to render the component in different states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'demo-list',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Empty: Story = {\n  render: () => html`<demo-list></demo-list>`,\n};\n\nexport const OneItem: Story = {\n  render: () => html`\n    <demo-list>\n      <demo-list-item></demo-list-item>\n    </demo-list>\n  `,\n};\n\nexport const ManyItems: Story = {\n  render: () => html`\n    <demo-list>\n      <demo-list-item></demo-list-item>\n      <demo-list-item></demo-list-item>\n      <demo-list-item></demo-list-item>\n    </demo-list>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Svelte using CSF in TypeScript 4.9\nDESCRIPTION: This snippet defines metadata for a Button component in Svelte using TypeScript 4.9 and the Component Story Format (CSF). It uses the 'satisfies' keyword for type checking and exports the metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Storybook Decorator\nDESCRIPTION: Demonstrates decorator implementation for React components with JSX syntax and margin styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { YourComponent } from './YourComponent';\n\nexport default {\n  component: YourComponent,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Hooks for Storybook Test Runner\nDESCRIPTION: JavaScript configuration for setting up test hooks in the Storybook test runner, allowing custom actions before and after story rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setup } from '@storybook/test-runner';\n\nsetup();\n\nexport default {\n  async prepare({ page, browserContext, testRunnerConfig }) {\n    // Custom preparation logic\n  },\n  async preVisit(page, context) {\n    // Custom logic before story visit\n  },\n  async postVisit(page, context) {\n    // Custom logic after story visit\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: Basic JavaScript configuration for Storybook preview that excludes style controls from the documentation interface. Exports a default configuration object with parameters for docs controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-doc-blocks-controls-exclude-prop.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    docs: {\n      controls: { exclude: ['style'] },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Favicon to Storybook Manager (JavaScript)\nDESCRIPTION: This snippet shows how to add a custom favicon to the Storybook manager interface using JavaScript. It modifies the managerHead configuration to include a link tag for the favicon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-custom-manager-head.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  managerHead: (head) => `\n    ${head}\n    <link rel=\"icon\" type=\"image/png\" href=\"/logo192.png\" sizes=\"192x192\" />\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Apollo Client Wrapper for Vue Components\nDESCRIPTION: This snippet shows how to create an Apollo Client wrapper component for Vue. It sets up a mocked Apollo Client with specific configuration options and provides it to child components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div><slot /></div>\n</template>\n\n<script>\n  import { defineComponent, provide } from 'vue';\n  import { DefaultApolloClient } from '@vue/apollo-composable';\n  import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client/core';\n\n  // Apollo client wrapper component that can be used within your app and Storybook\n  export default defineComponent({\n    name: 'WrapperComponent',\n    setup() {\n      const httpLink = createHttpLink({\n        // You should use an absolute URL here\n        uri: 'https://your-graphql-endpoint',\n      });\n      const cache = new InMemoryCache();\n\n      const mockedClient = new ApolloClient({\n        link: httpLink,\n        cache,\n        defaultOptions: {\n          watchQuery: {\n            fetchPolicy: 'no-cache',\n            errorPolicy: 'all',\n          },\n          query: {\n            fetchPolicy: 'no-cache',\n            errorPolicy: 'all',\n          },\n        },\n      });\n      provide(DefaultApolloClient, mockedClient);\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a Svelte Component using CSF - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to set up a Storybook story for a Svelte component, including argTypes for property controls and a custom render function to pass computed props. It uses standard Component Story Format, requires Storybook for Svelte, and expects the Svelte component and arguments to be provided. Args affect the props passed to the Svelte component via the rendered story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport YourComponent from './YourComponent.svelte';\\n\\nexport default {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n};\\n\\nconst someFunction = (valuePropertyA, valuePropertyB) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory = {\\n  render: (args) => {\\n    //\\uD83D\\uDC49 Assigns the function result to a variable\\n    const someFunctionResult = someFunction(args.propertyA, args.propertyB);\\n    return {\\n      Component: YourComponent,\\n      props: {\\n        ...args,\\n        someProperty: someFunctionResult,\\n      },\\n    };\\n  },\\n  args: {\\n    propertyA: 'Item One',\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Stories on Server in TypeScript\nDESCRIPTION: This method renders a specific story on the server-side. It fetches the story details, prepares the rendering context, and uses the preview builder to render the story. It handles different rendering modes and returns the rendered output.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync renderStory(storyId: StoryId, renderMode: RenderMode = 'story') {\n  await this.ready;\n  const story = await this.storyIndex.storyIdToEntry(storyId);\n  if (!story) {\n    throw new Error(`Unable to find story matching '${storyId}'`);\n  }\n\n  const context: RenderContext = {\n    // ... context properties\n  };\n\n  return this.previewBuilder.renderStory(context, renderMode);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Story in Vue3 with TypeScript\nDESCRIPTION: Defines a Button component story for Vue3 in Storybook using TypeScript. Imports necessary types from '@storybook/vue3', imports the Button component, and configures metadata with title, component, and parameters. Includes a Basic story with a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic: Story = {\n  render: () => ({\n    components: { Button },\n    template: '<Button label=\"Hello\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Solid Button Component (TypeScript 4.9+)\nDESCRIPTION: This snippet shows how to configure decorators for a Solid Button component in Storybook using TypeScript 4.9+. It uses the 'satisfies' keyword for type checking and defines a decorator that wraps the story in a div with margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Vue with JavaScript\nDESCRIPTION: Sets up Storybook stories for a Vue Button component using JavaScript. Imports the Vue component, configures metadata, and defines a primary button story with custom name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Vue in TypeScript 4.9\nDESCRIPTION: Shows how to create a Storybook story for a Vue component using TypeScript 4.9 with the satisfies operator. Defines story configuration, implements a helper function, and uses Vue 3's setup() to provide computed properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport YourComponent from './YourComponent.vue';\n\nconst meta = {\n  component: YourComponent,\n  //👇 Creates specific argTypes with options\n  argTypes: {\n    propertyA: {\n      options: ['Item One', 'Item Two', 'Item Three'],\n      control: { type: 'select' }, // automatically inferred when 'options' is defined\n    },\n    propertyB: {\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n    },\n  },\n} satisfies Meta<typeof YourComponent>;\n\nconst someFunction = (valuePropertyA, valuePropertyB) => {\n  // Do some logic here\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  render: ({ args }) => {\n    const { propertyA, propertyB } = args;\n    //👇 Assigns the function result to a variable\n    const functionResult = someFunction(propertyA, propertyB);\n    return {\n      components: { YourComponent },\n      setup() {\n        return {\n          ...args,\n          //👇 Replaces arg variable with the override (without the need of mutation)\n          someProperty: functionResult,\n        };\n      },\n      template:\n        '<YourComponent :propertyA=\"propertyA\" :propertyB=\"propertyB\" :someProperty=\"someProperty\"/>',\n    };\n  },\n  args: {\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Button Story in Storybook using TypeScript 4.9+ `satisfies`\nDESCRIPTION: This snippet illustrates defining a Storybook story using TypeScript 4.9+ features. It imports `Meta` and `StoryObj` types (from a placeholder `@storybook/your-framework`) and the `ButtonComponent`. The `meta` object uses the `satisfies` keyword for type-checking against `Meta<typeof ButtonComponent>`, providing better type inference and safety. The structure includes default export for metadata and a named export `Button` for the basic story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button as ButtonComponent } from './Button';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: ButtonComponent,\n} satisfies Meta<typeof ButtonComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// This is the only named export in the file, and it matches the component name\nexport const Button: Story = {};\n```\n```\n\n----------------------------------------\n\nTITLE: Running Storybook with Webpack Debug Mode\nDESCRIPTION: Commands to run Storybook in development or production mode with webpack debug output enabled, which helps inspect the exact webpack configuration details.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n## Development mode\nyarn storybook dev --debug-webpack\n\n## Production mode\nyarn storybook build --debug-webpack\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for React in JavaScript\nDESCRIPTION: This snippet shows how to create stories for the Page component in React using JavaScript. It imports the Page component and Header stories, sets up the default export with component metadata, and defines a LoggedIn story that spreads the args from the Header's LoggedIn story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Page } from './Page';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nexport default {\n  component: Page,\n};\n\nexport const LoggedIn = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Composed Button Story in React - JavaScript\nDESCRIPTION: This snippet tests the 'Primary' composed Storybook story for a Button component using React and JavaScript. It relies on @testing-library/react for rendering and querying elements, and @storybook/react for composing stories. The test ensures the button's text content matches the label argument defined in the story, which helps prevent duplication of test values. It expects dependencies on @testing-library/react, @storybook/react, and valid Button stories exports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\n\nimport { composeStories } from '@storybook/react';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('reuses args from composed story', () => {\n  render(<Primary />);\n\n  const buttonElement = screen.getByRole('button');\n  // Testing against values coming from the story itself! No need for duplication\n  expect(buttonElement.textContent).toEqual(Primary.args.label);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React DocGen in Storybook Vite Builder\nDESCRIPTION: Setting up react-docgen-typescript for automatic argType inference in Storybook with Vite builder.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/react-vite',\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n  typescript: {\n    reactDocgen: 'react-docgen-typescript',\n    reactDocgenTypescriptOptions: {\n      shouldExtractLiteralValuesFromEnum: true,\n      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Story with TypeScript\nDESCRIPTION: This snippet shows how to configure a Storybook story for a Web Components Page component using TypeScript. It imports the necessary types and sets up the story configuration with type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Page',\n  component: 'demo-page',\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Vue with JavaScript\nDESCRIPTION: This code demonstrates creating a Storybook story for a Histogram component in Vue using JavaScript. It uses a render function that returns a component configuration with setup() for Vue 3 composition API and a template for rendering the component with bound props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport Histogram from './Histogram.vue';\n\nexport default {\n  component: Histogram,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Default = {\n  render: (args) => ({\n    components: { Histogram },\n    setup() {\n      return { args };\n    },\n    template: '<Histogram v-bind=\"args\" />',\n  }),\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Dark Background in Common TypeScript (TypeScript 4.9)\nDESCRIPTION: This snippet shows how to create a Button story using TypeScript in a framework-agnostic manner with TypeScript 4.9. It sets up a story with a dark background using story-level parameters and type satisfies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OnDark: Story = {\n  // 👇 Story-level parameters\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in HTML with TypeScript\nDESCRIPTION: This snippet shows how to create a Storybook story for a Histogram component using the HTML renderer with TypeScript. It properly types the component props and uses a render function to create the component instance with the provided args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\nimport { createHistogram, HistogramProps } from './Histogram';\n\nconst meta: Meta<HistogramProps> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Histogram',\n};\n\nexport default meta;\ntype Story = StoryObj<HistogramProps>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Default: Story = {\n  render: (args) => createHistogram(args),\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Args at Component Level in Storybook\nDESCRIPTION: Example of setting default values for args at the component level in Storybook stories, which is the recommended approach since version 6.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: MyComponent,\n  args: {\n    //👇 Defining the arg's value at the component level.\n    text: 'Something',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in React with TypeScript 4.9 Syntax\nDESCRIPTION: Creates a Storybook story for a React List component using TypeScript 4.9 with the 'satisfies' operator. It imports the Unchecked story from ListItem stories and composes them in the render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport const meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <Unchecked {...Unchecked.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Meta with Type Assertions (TypeScript 4.9)\nDESCRIPTION: Defines Storybook story metadata for a Svelte component using TypeScript 4.9 'satisfies' operator for precise type checking, while removing the 'foo' property from controls. Requires @storybook/svelte, YourComponent import, and TS 4.9+. Exports a 'meta' object that conforms to Meta<typeof YourComponent>, disabling the specified UI control.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_5\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n} satisfies Meta<typeof YourComponent>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with JavaScript for Web Components\nDESCRIPTION: This code demonstrates how to set up Storybook for a Web Components Button using JavaScript. It defines the metadata object with the title property and references the custom element name 'demo-button' as the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Vue in TypeScript 4.9+\nDESCRIPTION: This snippet shows how to create stories for the Page component in Vue using TypeScript 4.9+. It uses the 'satisfies' keyword for type inference, imports necessary types and components, and defines a Primary story with a render function and args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Page from './Page.vue';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta = {\n  component: Page,\n} satisfies Meta<typeof Page>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Page },\n    setup() {\n      return { args };\n    },\n    template: '<page v-bind=\"args\" />',\n  }),\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing Properties and Methods in Vue Component\nDESCRIPTION: Shows how to expose properties and methods in a Vue component for better documentation in Storybook controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { ref } from 'vue';\n\n  const label = ref('Button');\n  const count = ref(100);\n\n  defineExpose({\n    /** A label string */\n    label,\n    /** A count number */\n    count,\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Stories in JavaScript\nDESCRIPTION: Demonstrates how to define Storybook metadata for Web Components using JavaScript. Instead of importing a component, it specifies the custom element tag name 'demo-example' as the component reference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      description: 'The value of the slider',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from Addon-Info's addWithInfo to Standard Story Format\nDESCRIPTION: Example showing migration from the deprecated addWithInfo pattern to the preferred story format using decorators and parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\nstoriesOf('My component', module)\n  .add('story1', withNotes('some notes')(() => <Component ... />))\n  .add('story2', withNotes('other notes')(() => <Component ... />));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// config.js\naddDecorator(withNotes);\n\n// Component.stories.js\nstoriesOf('My component', module)\n  .add('story1', () => <Component ... />, { notes: 'some notes' })\n  .add('story2', () => <Component ... />, { notes: 'other notes' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with GitHub Flavored Markdown in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook in JavaScript, including setting up the framework, specifying story locations, and adding the docs addon with remark-gfm plugin for GitHub Flavored Markdown support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-config-remark-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport remarkGfm from 'remark-gfm';\n\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    // Other addons go here\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        mdxPluginOptions: {\n          mdxCompileOptions: {\n            remarkPlugins: [remarkGfm],\n          },\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in TypeScript Preview\nDESCRIPTION: TypeScript configuration for adding global tags to all stories in a Storybook project. Includes type definitions and implements the same tagging system with 'autodocs' tag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport type { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  // ...rest of preview\n  /*\n   * All stories in your project will have these tags applied:\n   * - autodocs\n   * - dev (implicit default)\n   * - test (implicit default)\n   */\n  tags: ['autodocs'],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte with JavaScript (CSF 2)\nDESCRIPTION: Creates a default button story for Svelte components using JavaScript and CSF 2 format. The story returns an object specifying the Component and props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Other imports and story implementation\nexport const Default = (args) => ({\n  Component: Button,\n  props: args,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta with TypeScript 4.9+ for Generic Renderer\nDESCRIPTION: This snippet demonstrates a Storybook Meta configuration using TypeScript 4.9+ features for a generic renderer. It uses the 'satisfies' keyword to ensure type compatibility with Meta<typeof Example>.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: <b>Bold</b>,\n        Italic: <i>Italic</i>,\n      },\n    },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components TypeScript Storybook Stories with Mocked Date\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a Web Components TypeScript Page component with a mocked date. It uses MockDate to set a fixed date for all stories and includes a play function for the Default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport MockDate from 'mockdate';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\n\nconst meta: Meta = {\n  component: 'my-page',\n  // 👇 Set the value of Date for every story in the file\n  async beforeEach() {\n    MockDate.set('2024-02-14');\n\n    // 👇 Reset the Date after each story\n    return () => {\n      MockDate.reset();\n    };\n  },\n};\nexport default meta;\n\ntype Story = StoryObj;\n\nexport const Default: Story = {\n  async play({ canvasElement }) {\n    // ... This will run with the mocked Date\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Solid with JavaScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Solid Button component using JavaScript. It imports the necessary action and component, sets up metadata, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  render: () => <Button label=\"Hello\" onClick={action('clicked')} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Async Storybook Story for Generic Component (TypeScript)\nDESCRIPTION: This snippet shows how to create a Storybook story for a generic component using TypeScript. It includes an async play function that simulates user interactions and uses Storybook's testing utilities for DOM manipulation. The story demonstrates typing, clicking, and hovering actions on various elements. It's designed to be framework-agnostic.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook preview that provides type safety and excludes style controls. Imports the Preview type from the framework-specific Storybook package and exports a strongly-typed configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-doc-blocks-controls-exclude-prop.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      controls: { exclude: ['style'] },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Vue Storybook Preview Configuration (JavaScript)\nDESCRIPTION: JavaScript configuration for Vue Storybook preview decorators. Implements template-based layout wrapping using Vue's template syntax for story components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  decorators: [\n    (_, { parameters }) => {\n      const { pageLayout } = parameters;\n      switch (pageLayout) {\n        case 'page':\n          return { template: '<div class=\"page-layout\"><story/></div>' };\n        case 'page-mobile':\n          return { template: '<div class=\"page-mobile-layout\"><story/></div>' };\n        default:\n          return { template: '<story/>' };\n      }\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Play Function with Canvas Interaction\nDESCRIPTION: Example of optimizing play function performance by targeting specific canvas elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const WithCanvasExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByLabelText('Email');\n    await userEvent.type(emailInput, 'example@email.com', {\n      delay: 100,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Context Usage in Storybook Play Function (JavaScript)\nDESCRIPTION: This snippet shows the correct way to pass the full context to the play function of another story in Storybook. It ensures that all necessary internal functionality is available for interactions to work correctly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/context-in-play-function.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { within, userEvent } from '@storybook/testing-library'\n\nMyStory.play = (context) => {\n  const canvas = within(context.canvasElement)\n  // passing full context 👍\n  await MyOtherStory.play(context)\n\n  await userEvent.click(canvas.getByRole('button'))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { within, userEvent } from '@storybook/testing-library'\n\nMyStory.play = ({ context, canvasElement }) => {\n  const canvas = within(canvasElement)\n  // passing self referencing context property 👍\n  await MyOtherStory.play(context)\n\n  await userEvent.click(canvas.getByRole('button'))\n}\n```\n\n----------------------------------------\n\nTITLE: Component Meta BeforeEach Setup\nDESCRIPTION: Implementation of beforeEach function in component meta to set up state before each story\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/react';\nimport MockDate from 'mockdate';\n\nconst meta: Meta = {\n  async beforeEach() {\n    MockDate.set('2024-12-25');\n    return () => {\n      MockDate.reset();\n    };\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Creating Async Storybook Story for Svelte Component using CSF\nDESCRIPTION: This snippet shows how to create a Storybook story for a Svelte component using the Component Story Format (CSF) in JavaScript. It defines an async play function that simulates user interactions and uses Storybook's testing utilities for DOM manipulation. The story demonstrates typing, clicking, and hovering actions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nimport MyComponent from './MyComponent.svelte';\n\nexport default {\n  component: MyComponent,\n};\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Solid (TypeScript 4.9+)\nDESCRIPTION: This snippet shows how to create a Storybook story for a Solid Button component using TypeScript 4.9+. It uses the 'satisfies' operator for type checking and defines a 'Text' story with args and a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text = {\n  args: {\n    label: 'Hello',\n    onClick: action('clicked'),\n  },\n  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test-Runner with Index.json Mode\nDESCRIPTION: Shows how to run the Storybook test-runner using the index.json mode, which tests the Storybook using the index.json file instead of transforming story files directly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn test-storybook --url https://your-deployed-storybook-url.com --index-json\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in JavaScript\nDESCRIPTION: JavaScript configuration file for Storybook that defines the framework, story file patterns, and external references to other Storybook instances. Supports MDX and various JavaScript/TypeScript story file extensions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ref-local.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    react: {\n      title: 'React',\n      url: 'http://localhost:7007',\n    },\n    angular: {\n      title: 'Angular',\n      url: 'http://localhost:7008',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Button Story in TypeScript\nDESCRIPTION: This snippet illustrates a generic Storybook story definition using TypeScript (potentially with TSX) for a `Button` component. It imports `Meta` and `StoryObj` from a placeholder framework package '@storybook/your-framework' and the `Button` component. Typed metadata (`meta`) and a typed `Primary` story are defined, with the story's `args` set to `{ variant: 'primary' }`. Remember to replace 'your-framework' with the correct package name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner Viewport in JavaScript\nDESCRIPTION: This code configures the Storybook test runner to set the viewport size based on the story's parameters or a default size. It uses the @storybook/test-runner and @storybook/addon-viewport packages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-page-viewport.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getStoryContext } = require('@storybook/test-runner');\nconst { MINIMAL_VIEWPORTS } = require('@storybook/addon-viewport');\n\nconst DEFAULT_VIEWPORT_SIZE = { width: 1280, height: 720 };\n\nmodule.exports = {\n  async preVisit(page, story) {\n    // Accesses the story's parameters and retrieves the viewport used to render it\n    const context = await getStoryContext(page, story);\n    const viewportName = context.parameters?.viewport?.defaultViewport;\n    const viewportParameter = MINIMAL_VIEWPORTS[viewportName];\n\n    if (viewportParameter) {\n      const viewportSize = Object.entries(viewportParameter.styles).reduce(\n        (acc, [screen, size]) => ({\n          ...acc,\n          // Converts the viewport size from percentages to numbers\n          [screen]: parseInt(size),\n        }),\n        {},\n      );\n      // Configures the Playwright page to use the viewport size\n      page.setViewportSize(viewportSize);\n    } else {\n      page.setViewportSize(DEFAULT_VIEWPORT_SIZE);\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using JavaScript. It exports a default configuration object that specifies the framework, story file patterns, and enables cross-origin isolation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-cross-origin-isolated.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    crossOriginIsolated: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Component in JavaScript for Common Renderers\nDESCRIPTION: A JavaScript implementation for configuring a Storybook component that works with common renderers. It defines argTypes with options for the icon property without requiring specific type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    icon: {\n      options: ['arrow-up', 'arrow-down', 'loading'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Next.js in TypeScript\nDESCRIPTION: This snippet demonstrates how to update the Storybook configuration in TypeScript to use Next.js as the framework. It imports the StorybookConfig type from '@storybook/nextjs' and updates the 'framework' property in the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/nextjs';\n\nconst config: StorybookConfig = {\n  // ...\n  // framework: '@storybook/react-webpack5', 👈 Remove this\n  framework: '@storybook/nextjs', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for React (or Common) Storybook - JavaScript/JSX\nDESCRIPTION: Shows a generic approach using JavaScript/JSX for Storybook stories targeting any renderer. Stories use arrays or regex to determine which controls are displayed for 'YourComponent'. This format is suitable for React and other frameworks, provided the correct import and meta setup. Dependencies: '@storybook/your-framework', a component definition. Input: JavaScript-accessible component; Output: stories with tailored controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { YourComponent } from './YourComponent';\n\nexport default {\n  component: YourComponent,\n};\n\nexport const ArrayInclude = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Svelte Storybook Decorator\nDESCRIPTION: Demonstrates decorator implementation in Svelte using both CSF and TypeScript approaches with MarginDecorator component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n  import MarginDecorator from './MarginDecorator.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    decorators: [() => MarginDecorator],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Web Components Story Implementation\nDESCRIPTION: Demonstrates writing Storybook stories for Web Components using Lit. Shows basic story structure and prop handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Basic: Story = {};\n\nexport const WithProp: Story = {\n  render: () => html`<my-component prop=\"value\" />`,\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Dependencies for Version Display in Storybook MDX\nDESCRIPTION: Imports React-related packages and a custom ResolvedReact component for displaying version information. This setup allows for version verification across different Storybook contexts including MDX files, autodocs, and stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/ResolvedReact.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport * as ReactExport from 'react';\nimport * as ReactDom from 'react-dom';\nimport * as ReactDomServer from 'react-dom/server';\nimport { ResolvedReact } from './ResolvedReact';\n```\n\n----------------------------------------\n\nTITLE: CSS Resources Addon Configuration\nDESCRIPTION: Updated configuration for CSS resources addon with renamed 'id' attribute.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_166\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withCssResources } from \"@storybook/addon-cssresources\";\nimport { addDecorator } from \"@storybook/react\";\n\naddDecorator(\n  withCssResources({\n    cssresources: [\n      {\n        id: `bluetheme`, // Renamed\n        code: `<style>body { background-color: lightblue; }</style>`,\n        picked: false,\n      },\n    ],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta for Generic Components in TypeScript 4.9 (Common Renderer)\nDESCRIPTION: Configures a Storybook meta object for a generic component using TypeScript 4.9, demonstrating how to use the 'satisfies' operator for strong typing and removing the 'foo' property from Storybook controls. Requires the user to replace 'your-framework' with the actual framework, and to import corresponding types and the component. Exports a meta object using Meta<typeof YourComponent>.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_6\n\nLANGUAGE: ts-4-9\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { YourComponent } from './YourComponent';\n\nconst meta = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n} satisfies Meta<typeof YourComponent>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Vue with TypeScript\nDESCRIPTION: Creates a Storybook story for a Vue List component using TypeScript. It imports Vue components and the Unchecked story, specifying the Meta type explicitly with typescript annotation and using Vue's template syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      //👇 The args will now be passed down to the template\n      return { args };\n    },\n    template: '<List v-bind=\"args\"><ListItem v-bind=\"args\"/></List>',\n  }),\n  args: {\n    ...Unchecked.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Entries in Storybook JavaScript\nDESCRIPTION: This snippet defines a function to append a specific addon to the manager entries array in a Storybook setup. It requires the 'my-other-addon' package. The function takes an optional entry array and returns a new array with the addon included.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-load-external-addons-preset.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction managerEntries(entry = []) {\n  return [...entry, require.resolve('my-other-addon/register')];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slots in Vue Component\nDESCRIPTION: Demonstrates how to define slots in a Vue component template and use defineSlots for better documentation in Storybook controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <slot :num=\"123\"></slot>\n  <br />\n  <slot name=\"named\" str=\"str\"></slot>\n  <br />\n  <slot name=\"no-bind\"></slot>\n  <br />\n  <slot name=\"vbind\" v-bind=\"{ num: 123, str: 'str' }\"></slot>\n</template>\n\n<script setup lang=\"ts\">\ndefineSlots<{\n  /** Example description for default */\n  default(props: { num: number }): any;\n  /** Example description for named */\n  named(props: { str: string }): any;\n  /** Example description for no-bind */\n  noBind(props: {}): any;\n  /** Example description for vbind */\n  vbind(props: { num: number; str: string }): any;\n}>();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta in TypeScript with Type Annotation\nDESCRIPTION: Shows the standard approach to defining a Storybook Meta configuration in TypeScript with an explicit type annotation. Uses the Meta type from a renderer-specific Storybook package and applies it to the component's type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    actualArgName: {\n      name: 'Friendly name',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Customizing Automatic Docs Page Template with Doc Blocks\nDESCRIPTION: Example of defining a custom template for automatic docs pages using Storybook doc blocks, including title, subtitle, description, primary story, controls, and stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Title, Subtitle, Description, Primary, Controls, Stories } from '@storybook/addon-docs/blocks';\n\nexport const autoDocsTemplate = () => (\n  <>\n    <Title />\n    <Subtitle />\n    <Description />\n    <Primary />\n    <Controls />\n    <Stories />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Error Message When Using React Version Below 16.3 with Storybook 4.0\nDESCRIPTION: The error message displayed when attempting to use Storybook 4.0 with a React version below 16.3, which is required by Emotion, the styling library used by Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_167\n\nLANGUAGE: javascript\nCODE:\n```\ncore.browser.esm.js:15 Uncaught TypeError: Object(...) is not a function\nat Module../node_modules/@emotion/core/core.browser.esm.js (core.browser.esm.js:15)\nat **webpack_require** (bootstrap:724)\nat fn (bootstrap:101)\nat Module../node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js (styled-base.browser.esm.js:1)\nat **webpack_require** (bootstrap:724)\nat fn (bootstrap:101)\nat Module../node_modules/@emotion/styled/dist/styled.esm.js (styled.esm.js:1)\nat **webpack_require** (bootstrap:724)\nat fn (bootstrap:101)\nat Object../node_modules/@storybook/components/dist/navigation/MenuLink.js (MenuLink.js:12)\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories with Dark Background in Svelte CSF\nDESCRIPTION: This snippet demonstrates how to create a Button story in Svelte using Component Story Format (CSF). It sets up a story with a dark background using story-level parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<!-- 👇 Story-level parameters-->\n<Story\n  name=\"OnDark\"\n  parameters={{\n    backgrounds: { default: 'dark' }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with Loaders in Angular\nDESCRIPTION: Storybook story configuration for TodoItem component in Angular. It defines a meta object with component and decorators, and a Primary story with render function and loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TodoItem } from './TodoItem';\n\nconst meta: Meta<TodoItem> = {\n  component: TodoItem,\n  decorators: [\n    moduleMetadata({\n      declarations: [TodoItem],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<TodoItem>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args, { loaded: { todo } }) => ({\n    props: {\n      args,\n      todo,\n    },\n  }),\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Vue with TypeScript\nDESCRIPTION: This code shows how to create a Storybook story for a Histogram component in Vue using TypeScript with explicit type annotations. It imports from @storybook/vue3 and provides a render function with Vue 3 composition API for binding props to the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Histogram from './Histogram.vue';\n\nconst meta: Meta<typeof Histogram> = {\n  component: Histogram,\n};\n\nexport default meta;\n\n\ntype Story = StoryObj<typeof Histogram>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Default: Story = {\n  render: (args) => ({\n    components: { Histogram },\n    setup() {\n      return { args };\n    },\n    template: '<Histogram v-bind=\"args\" />',\n  }),\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for DocumentScreen in Web Components with JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for the DocumentScreen component using Web Components with JavaScript. It defines the component as a custom element and creates a 'Simple' story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 👇 Imports the required stories\nimport * as PageLayout from './PageLayout.stories';\nimport * as DocumentHeader from './DocumentHeader.stories';\nimport * as DocumentList from './DocumentList.stories';\n\nexport default {\n  component: 'demo-document-screen',\n};\n\nexport const Simple = {\n  args: {\n    user: PageLayout.Simple.args.user,\n    document: DocumentHeader.Simple.args.document,\n    subdocuments: DocumentList.Simple.args.documents,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in Vue with JavaScript\nDESCRIPTION: Implementation of Storybook stories for a List component in Vue using JavaScript. It demonstrates how to structure stories with component composition, import from other stories, and use Vue templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { ...args };\n    },\n    template: `\n      <List v-bind=\"args\">\n        <div v-for=\"item in items\" :key=\"item.title\">\n          <ListItem :item=\"item\"/>\n        </div>\n      </List>\n    `,\n  }),\n};\n\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [\n      {\n        ...Unchecked.args,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Web Components Play Function in JavaScript for Storybook\nDESCRIPTION: This JavaScript implementation shows how to create a Storybook story for a web component with a play function that tests a dropdown selector. It demonstrates proper component setup for web-components and includes a sleep utility function to create pauses between select operations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nexport default {\n  component: 'demo-my-component',\n};\n\n// Function to emulate pausing between interactions\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleChangeEvent = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const select = canvas.getByRole('listbox');\n\n    await userEvent.selectOptions(select, ['One Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Another Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Yet another item']);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Web Components in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook stories for Web Components using JavaScript. It defines the default export with the component tag name and argTypes, suitable for use with web components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    value: { type: 'number' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Stories with Play Functions (TypeScript)\nDESCRIPTION: This complete TypeScript file defines Storybook stories for a generic `MyComponent`. It includes imports (`Meta`, `StoryObj` from a placeholder framework, `fireEvent`, `userEvent`, `within` from `storybook/test`), metadata configuration, and two story exports (`ClickExample`, `FireEventExample`). Both stories utilize the `play` function to demonstrate interaction testing by simulating clicks using `userEvent` and `fireEvent` respectively.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { fireEvent, userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ClickExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n\nexport const FireEventExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Date in TypeScript Storybook Story\nDESCRIPTION: Standard TypeScript implementation of date mocking in a Storybook story using MockDate. Demonstrates type-safe story definition with date mocking functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-basic.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport MockDate from 'mockdate';\n\n// ...rest of story file\n\nexport const ChristmasUI: Story = {\n  async play({ mount }) {\n    MockDate.set('2024-12-25');\n    // 👇 Render the component with the mocked date\n    await mount();\n    // ...rest of test\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using JavaScript. It specifies the framework, story locations, and build options. The configuration is exported as the default object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-autodocs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableAutoDocs: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Parameters with Type Safety in TypeScript\nDESCRIPTION: This TypeScript snippet configures Storybook's preview using strong typing by importing the Preview type from the relevant Storybook framework package. It allows framework-specific extensions and static checking while specifying the same control matchers for color and date as the JavaScript version. Dependencies include the '@storybook/your-framework' package, and you must substitute 'your-framework' (e.g., 'react', 'vue3') as needed for your environment. The output is a type-checked Storybook preview configuration, enhancing maintainability and reducing errors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-controls-custom-matchers.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Executing Storybook Test Runner\nDESCRIPTION: Command to run automated tests using Storybook's test-runner tool.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test-storybook\n```\n\n----------------------------------------\n\nTITLE: Correct CSF Implementation with Args\nDESCRIPTION: Example of proper Component Story Format (CSF) implementation using the args pattern for story configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-stories-of.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '../components/Button';\n\nexport default = {\n  component: Button\n}\n\nexport const Primary = {\n  args: {\n    primary: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Svelte Button Component (Svelte CSF with TypeScript)\nDESCRIPTION: This snippet shows how to configure decorators for a Svelte Button component in Storybook using Svelte CSF with TypeScript. It uses the defineMeta function to set up a decorator that wraps the story with a MarginDecorator component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n  import MarginDecorator from './MarginDecorator.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    decorators: [() => MarginDecorator],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Default Button Stories Implementation\nDESCRIPTION: Basic implementation of Button component stories with two variants and a combination view. Uses story tags to control visibility and testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default meta;\n\ntype Story = StoryObj<typeof Button>;\n\nexport const Variant1: Story = {\n  // 👇 This story will not appear in Storybook's sidebar or docs page\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 1 },\n};\n\nexport const Variant2: Story = {\n  // 👇 This story will not appear in Storybook's sidebar or docs page\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 2 },\n};\n\nexport const Combo: Story = {\n  // 👇 This story should not be tested, but will appear in the sidebar and docs page\n  tags: ['!test'],\n  render: () => ({\n    components: { Button },\n    template: `\n      <div>\n        <Button :variant=\"1\" />\n        <Button :variant=\"2\" />\n      </div>\n    `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in React Storybook (TS)\nDESCRIPTION: TypeScript version of background configuration for React components with type safety using Meta type. Includes dark and gray background options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/react-vite';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Override the default `dark` option\n        dark: { name: 'Dark', value: '#000' },\n        // 👇 Add a new option\n        gray: { name: 'Gray', value: '#CCC' },\n      },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story Meta Using defineMeta - Storybook (Svelte, TypeScript)\nDESCRIPTION: This Svelte and TypeScript snippet defines meta information for a Button component in Storybook using the defineMeta function from '@storybook/addon-svelte-csf'. After importing the Button component, defineMeta is called, and Story is extracted for structured story setup. This method enables story configuration in typed Svelte projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n  });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in React with TypeScript 4.9+ using satisfies\nDESCRIPTION: This snippet demonstrates using TypeScript 4.9's satisfies operator for typing Storybook stories in React. It properly types the component and story objects while leveraging type inference, which is a more modern approach to typing in React Storybook stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Histogram } from './Histogram';\n\nconst meta = {\n  component: Histogram,\n} satisfies Meta<typeof Histogram>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Angular\nDESCRIPTION: TypeScript configuration for Button component stories in Angular Storybook. Defines metadata and excludes style controls from documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    docs: {\n      controls: { exclude: ['style'] },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Component Story using CSF\nDESCRIPTION: TypeScript implementation of a Storybook story using CSF with type safety. Includes Meta and StoryObj type definitions and proper type assertions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  args: {\n    propertyA: import.meta.env.STORYBOOK_DATA_KEY,\n    propertyB: import.meta.env.VITE_CUSTOM_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Addon Panel for Theme Display in JavaScript\nDESCRIPTION: This code creates a Storybook addon panel that displays information about the currently selected theme. It imports necessary components from Storybook, retrieves the current theme from globals, and renders either the theme details or a placeholder when no theme is selected.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-consume-globaltype.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { useGlobals } from 'storybook/manager-api';\n\nimport {\n  AddonPanel,\n  Placeholder,\n  Separator,\n  Source,\n  Spaced,\n  Title,\n} from 'storybook/internal/components';\n\nimport { MyThemes } from '../my-theme-folder/my-theme-file';\n\n// Function to obtain the intended theme\nconst getTheme = (themeName) => {\n  return MyThemes[themeName];\n};\n\nconst ThemePanel = (props) => {\n  const [{ theme: themeName }] = useGlobals();\n\n  const selectedTheme = getTheme(themeName);\n\n  return (\n    <AddonPanel {...props}>\n      {selectedTheme ? (\n        <Spaced row={3} outer={1}>\n          <Title>{selectedTheme.name}</Title>\n          <p>The full theme object</p>\n          <Source\n            code={JSON.stringify(selectedTheme, null, 2)}\n            language=\"js\"\n            copyable\n            padded\n            showLineNumbers\n          />\n        </Spaced>\n      ) : (\n        <Placeholder>No theme selected</Placeholder>\n      )}\n    </AddonPanel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript\nDESCRIPTION: A TypeScript configuration for Storybook's preview settings. It imports the Preview type from the framework-specific Storybook package, imports global CSS styles, and exports a typed configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-import-global-styles.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport '../src/styles/global.css';\n\nconst preview: Preview = {\n  parameters: {},\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Storybook in Web Components (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up a Storybook configuration for a Button component using Web Components in JavaScript. It uses the withActions decorator and defines parameters for action handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withActions } from 'storybook/actions/decorator';\n\nexport default {\n  component: 'demo-button',\n  parameters: {\n    actions: {\n      handles: ['mouseover', 'click .btn'],\n    },\n  },\n  decorators: [withActions],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Composition in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook in JavaScript, including setting the framework, specifying story patterns, and defining composed Storybooks for React and Angular. It uses a function to determine the appropriate URLs based on the environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs-with-function.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n\n  // 👇 Retrieve the current environment from the configType argument\n  refs: (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      return {\n        react: {\n          title: 'Composed React Storybook running in development mode',\n          url: 'http://localhost:7007',\n        },\n        angular: {\n          title: 'Composed Angular Storybook running in development mode',\n          url: 'http://localhost:7008',\n        },\n      };\n    }\n    return {\n      react: {\n        title: 'Composed React Storybook running in production',\n        url: 'https://your-production-react-storybook-url',\n      },\n      angular: {\n        title: 'Composed Angular Storybook running in production',\n        url: 'https://your-production-angular-storybook-url',\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation for Next.js Component in TypeScript Storybook with 'satisfies'\nDESCRIPTION: A TypeScript implementation using the 'satisfies' operator (TS 4.9+) to define a Storybook story for a NavigationBasedComponent. It imports Meta and StoryObj types from @storybook/react and configures Next.js navigation segments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-for-use-params-override-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n      navigation: {\n        segments: [\n          ['slug', 'hello'],\n          ['framework', 'nextjs'],\n        ],\n      },\n    },\n  },\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Angular with TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for an Angular Button component using TypeScript. It defines a primary and secondary story with different prop configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Storybook Story\nDESCRIPTION: Example of a simple Storybook story definition using the default naming convention.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Foo/Bar',\n  component: Button,\n};\n\nexport const Baz = {\n  args: {\n    label: 'Baz',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook React-Vite Framework\nDESCRIPTION: Command to install the Storybook framework package for React and Vite integration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/react-vite --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Highlight Channel in Vue (JavaScript)\nDESCRIPTION: Shows how to use Storybook's highlight feature in Vue using JavaScript. This example creates a decorator that emits a highlight event for specified elements and returns a template with the story component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-addon-custom-style.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport MyComponent from './MyComponent.vue';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const StyledHighlight = {\n  decorators: [\n    () => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n        color: 'blue',\n        style: 'double', // 'dotted' | 'dashed' | 'solid' | 'double'\n      });\n      return {\n        template: '<story />',\n      };\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Svelte CSF Storybook Stories with JavaScript\nDESCRIPTION: Demonstrates how to add decorators to Svelte stories using the Svelte CSF format. This example uses the defineMeta helper from @storybook/addon-svelte-csf and applies a MarginDecorator component as a decorator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n  import MarginDecorator from './MarginDecorator.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story\n  name=\"Primary\"\n  decorators={[\n    () => MarginDecorator\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Web Components with JavaScript\nDESCRIPTION: This snippet sets up the preview configuration for Web Components in Storybook using JavaScript. It imports the html function from 'lit' and defines a decorator that wraps each story with a div element having a 3em margin using a lit-html template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  decorators: [(story) => html`<div style=\"margin: 3em\">${story()}</div>`],\n};\n```\n\n----------------------------------------\n\nTITLE: React JavaScript Story Configuration\nDESCRIPTION: Storybook story configuration for React component using JavaScript. Implements story configurations with data patterns and inclusion/exclusion rules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nimport someData from './data.json';\n\nexport default {\n  component: MyComponent,\n  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories\n  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data\n};\n\nexport const simpleData = { foo: 1, bar: 'baz' };\nexport const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };\n\nexport const SimpleStory = {\n  args: {\n    data: simpleData,\n  },\n};\n\nexport const ComplexStory = {\n  args: {\n    data: complexData,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Colors in JavaScript\nDESCRIPTION: This snippet exports default settings for Storybook's preview, specifically setting up preset colors for controls. It defines an array of colors using various formats including hex, rgba, and named colors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-parameters-color-swatches.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    controls: {\n      presetColors: [{ color: '#ff4785', title: 'Coral' }, 'rgba(0, 159, 183, 1)', '#fe4a49'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Decorating Web Components Storybook - TypeScript\nDESCRIPTION: This TypeScript snippet configures a Storybook story for a custom web component, using a decorator to initiate highlight actions on specific elements. Dependencies are '@storybook/web-components-vite' and 'storybook/highlight'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight-addon.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Highlighted: Story = {\n  decorators: [\n    (story) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n      });\n      return story();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Angular in TypeScript\nDESCRIPTION: This snippet demonstrates how to create stories for the Page component in Angular using TypeScript. It imports necessary modules, sets up metadata with decorators, and defines a LoggedIn story that reuses args from the Header stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { moduleMetadata } from '@storybook/angular';\n\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { Button } from './button.component';\nimport { Header } from './header.component';\nimport { Page } from './page.component';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nconst meta: Meta<Page> = {\n  component: Page,\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<Page>;\n\nexport const LoggedIn: Story = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Svelte Storybook via CSF - Svelte JavaScript\nDESCRIPTION: Utilizes the '@storybook/addon-svelte-csf' meta-definition utility to create stories for a Svelte component, illustrating how to specify control filtering with arrays and regular expressions within the Svelte framework. Dependencies include 'defineMeta' from Storybook and a Svelte component file. Each <Story> tag demonstrates a specific controls configuration. Inputs are component files; the output is multiple Svelte stories with explicit controls configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n  });\n</script>\n\n<Story\n  name=\"ArrayInclude\"\n  parameters={{\n    controls: { include: ['foo', 'bar'] },\n  }}\n/>\n\n<Story\n  name=\"RegexInclude\"\n  parameters={{\n    controls: { include: /^hello*/ },\n  }}\n/>\n\n<Story\n  name=\"ArrayExclude\"\n  parameters={{\n    controls: { exclude: ['foo', 'bar'] },\n  }}\n/>\n\n<Story\n  name=\"RegexExclude\"\n  parameters={{\n    controls: { exclude: /^hello*/ },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Svelte with JavaScript using Svelte CSF\nDESCRIPTION: This code demonstrates using the Svelte CSF addon to create Storybook stories in Svelte. It imports defineMeta from @storybook/addon-svelte-csf and uses a Story component to define props for the Histogram component directly in a Svelte file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Histogram from './Histogram.svelte';\n\n  const { Story } = defineMeta({\n    component: Histogram,\n  });\n</script>\n\n<Story\n  name=\"Default\"\n  args={{\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Common JavaScript Framework\nDESCRIPTION: Sets up Button story configuration using plain JavaScript for common frameworks like React or Vue. Includes background grid parameter configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\n// To apply a grid to all stories of Button:\nexport default {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      grid: {\n        cellSize: 20,\n        opacity: 0.5,\n        cellAmount: 5,\n        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Component Story Format (CSF) Equivalent of MDX Example\nDESCRIPTION: This shows the same Checkbox story from the MDX example rewritten in Component Story Format (CSF). It demonstrates the one-to-one mapping between MDX and CSF syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Checkbox } from './Checkbox';\nexport default { title: \"MDX/Checkbox\" component: Checkbox };\nexport const allCheckboxes = () => (\n  <form>\n    <Checkbox id=\"Unchecked\" label=\"Unchecked\" />\n    <Checkbox id=\"Checked\" label=\"Checked\" checked />\n    <Checkbox appearance=\"secondary\" id=\"second\" label=\"Secondary\" checked />\n  </form>\n);\n```\n\n----------------------------------------\n\nTITLE: Vue Inline Stories Configuration\nDESCRIPTION: Configuration example for enabling inline story rendering for Vue components using vue-to-react conversion.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { addParameters } from '@storybook/vue';\nimport toReact from '@egoist/vue-to-react';\n\naddParameters({\n  docs: {\n    prepareForInline: (storyFn, { args }) => {\n      const Story = toReact(storyFn());\n      return <Story {...args} />;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in Solid with JavaScript\nDESCRIPTION: Implementation of Storybook stories for a List component in SolidJS using JavaScript. It shows how to set up component composition, import stories from other components, and create reusable story templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate = {\n  render: ({ items, ...args }) => {\n    return (\n      <List>\n        {items.map((item) => (\n          <ListItem {...item} />\n        ))}\n      </List>\n    );\n  },\n};\n\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [\n      {\n        ...Unchecked.args,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Loaders in TypeScript\nDESCRIPTION: TypeScript implementation of a Storybook loader that fetches mock user data. This version includes proper type definitions using the Preview type from the framework-specific Storybook package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-loader.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  loaders: [\n    async () => ({\n      currentUser: await (await fetch('https://jsonplaceholder.typicode.com/users/1')).json(),\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Using Source Block with Custom Code in MDX\nDESCRIPTION: Demonstrates how to use the Source block with custom code in an MDX file, including syntax highlighting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Source } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Source code={`const thisIsCustomSource = true;\nif (isSyntaxHighlighted) {\n  console.log('syntax highlighting is working');\n}`} />\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Svelte with TypeScript using CSF\nDESCRIPTION: This code shows how to create a Storybook story for a Histogram component in Svelte using TypeScript with explicit type annotations. It imports from @storybook/svelte and provides type safety for both the meta configuration and story object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Histogram from './Histogram.svelte';\n\nconst meta: Meta<typeof Histogram> = {\n  component: Histogram,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Histogram>;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story with JavaScript\nDESCRIPTION: Plain JavaScript implementation of a Storybook story configuration for the DataTable component, with accessibility parameters set to display warnings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-todo-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataTable } from './DataTable';\n\nexport default {\n  component: DataTable,\n  parameters: {\n    // 👇 This component's accessibility tests will not fail\n    //    Instead, they display warnings in the Storybook UI\n    a11y: { test: 'todo' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Form Submission in React with JavaScript\nDESCRIPTION: Implementation of a Form component story for React using JavaScript. Shows form interaction testing with play function and step-by-step credential entry and submission verification.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, waitFor, within, expect, fn } from 'storybook/test';\n\nimport { Form } from './Form';\n\nexport default {\n  component: Form,\n  args: {\n    // 👇 Use `fn` to spy on the onSubmit arg\n    onSubmit: fn(),\n  },\n};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted = {\n  play: async ({ args, canvasElement, step }) => {\n    // Starts querying the component from its root element\n    const canvas = within(canvasElement);\n\n    await step('Enter credentials', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n\n    // 👇 Now we can assert that the onSubmit arg was called\n    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion 11 Compatibility in Storybook\nDESCRIPTION: Configuration to opt-out of Emotion v10 pinning to enable compatibility with Emotion 11 based libraries.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  features: {\n    emotionAlias: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Vue Button Component (TypeScript 4.9+)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a Vue Button component in Storybook using TypeScript 4.9+. It uses the 'satisfies' keyword for type checking and defines a decorator that wraps the story in a div with margin using a Vue template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  component: Button,\n  decorators: [() => ({ template: '<div style=\"margin: 3em;\"><story /></div>' })],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata with Deprecated defaultValue (Web Components/JS)\nDESCRIPTION: This JavaScript snippet defines Storybook metadata for a web component identified by the tag name `'demo-example'`. It shows the deprecated practice of setting default arg values using `argTypes.value.defaultValue` and highlights the correct method using the top-level `args` property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Example.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      // ⛔️ Deprecated, do not use\n      defaultValue: 0,\n    },\n  },\n  // ✅ Do this instead\n  args: {\n    value: 0,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Angular Button Component\nDESCRIPTION: This snippet demonstrates how to set up decorators for an Angular Button component in Storybook. It uses moduleMetadata and componentWrapperDecorator to add custom styling and wrap the component with a parent component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { componentWrapperDecorator, moduleMetadata } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nimport { Parent } from './parent.component'; // Parent contains ng-content\n\nconst meta: Meta<Button> = {\n  component: Button,\n  decorators: [\n    moduleMetadata({\n      declarations: [ParentComponent],\n    }),\n    // With template\n    componentWrapperDecorator((story) => `<div style=\"margin: 3em\">${story}</div>`),\n    // With component which contains ng-content\n    componentWrapperDecorator(Parent),\n  ],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Story Configuration with Default Export\nDESCRIPTION: Sets up the basic configuration for a Storybook story file by importing a component and exporting the default configuration object. Includes optional title property and component reference with explanatory comments about automatic title generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'MyComponent',\n  component: MyComponent,\n};\n\n// Your stories\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Common Framework Storybook Stories with TypeScript\nDESCRIPTION: Demonstrates viewport configuration for a Button component using TypeScript in common frameworks. Uses the 'satisfies Meta' pattern to provide type safety while setting a default tablet viewport and overriding it with a mobile viewport for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  globals: {\n    // 👇 Set viewport for all component stories\n    viewport: { value: 'tablet', isRotated: false },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OnPhone: Story = {\n  globals: {\n    // 👇 Override viewport for this story\n    viewport: { value: 'mobile1', isRotated: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Storybook Button Stories with Render Function (JavaScript)\nDESCRIPTION: This code shows how to define Storybook stories for a button using the HTML renderer and JavaScript. A metadata object is exported with an optional title. The Primary story uses a custom render function to create a button element, set its class and text based on story arguments, and return it for Storybook rendering. This demonstrates a flexible approach for pure HTML components without frameworks. No dependencies required beyond Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: (args) => {\n    const btn = document.createElement('button');\n    btn.innerText = args.label;\n\n    const mode = args.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n    btn.className = ['storybook-button', 'storybook-button--medium', mode].join(' ');\n\n    return btn;\n  },\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Story Functions for passArgsFirst Parameter Removal\nDESCRIPTION: Demonstrates how to update story functions after the removal of the passArgsFirst parameter option. In Storybook 8.0, args are always passed first, followed by the context as the second argument.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// Storybook < 8\nexport default {\n  parameters: {\n    passArgsFirst: false,\n  },\n};\n\nexport const Button = (context) => <button {...args} />;\n\n// Storybook >= 8\nexport const Button = (args, context) => <button {...args} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Framework in TypeScript\nDESCRIPTION: TypeScript configuration for setting up Storybook with SvelteKit framework. Includes type definitions and shows the required framework property while noting the removal of deprecated svelteOptions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/sveltekit';\n\nconst config: StorybookConfig = {\n  // ...\n  framework: '@storybook/sveltekit', // 👈 Add this\n  // svelteOptions: { ... }, 👈 Remove this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Sidebar Label Rendering with Lodash\nDESCRIPTION: Sets up custom rendering for sidebar labels in Storybook, using Lodash's startCase function to format non-story item names while leaving story names unchanged.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-render-label-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from 'storybook/manager-api';\n\nimport startCase from 'lodash/startCase.js';\n\naddons.setConfig({\n  sidebar: {\n    renderLabel: ({ name, type }) => (type === 'story' ? name : startCase(name)),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story with TypeScript\nDESCRIPTION: TypeScript configuration for Web Components Button stories in Storybook. Includes proper type definitions for web components implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      canvas: { sourceState: 'shown' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Component in TypeScript for Common Renderers\nDESCRIPTION: A TypeScript implementation for configuring a Storybook component that works with any renderer. It uses explicit type annotation with Meta<typeof Example> and requires replacing 'your-renderer' with the actual renderer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    icon: {\n      options: ['arrow-up', 'arrow-down', 'loading'],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title for Angular Core README\nDESCRIPTION: This JSX snippet uses the Meta component to set the title for the Storybook documentation page, indicating it's for Angular core README examples.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/core/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"stories / frameworks / angular / core / README\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Parameter with StoriesOf API\nDESCRIPTION: Demonstrates how to set the component parameter using the traditional storiesOf API format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storiesOf } from '@storybook/react';\nimport { Badge } from './Badge';\n\nstoriesOf('Path/to/Badge', module).addParameters({ component: Badge });\n```\n\n----------------------------------------\n\nTITLE: Migrating from config to previewAnnotations in Storybook main.js\nDESCRIPTION: Shows how to update the Storybook main.js configuration from the deprecated 'config' preset field to the new 'previewAnnotations' field. This change is mandatory in Storybook 8.0 as the config preset has been completely removed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/main.js\n\n// before\nconst config = {\n  framework: \"@storybook/your-framework\",\n- config: (entries) => [...entries, yourEntry],\n+ previewAnnotations: (entries) => [...entries, yourEntry],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addon Preview in TypeScript\nDESCRIPTION: This TypeScript code configures a Storybook addon's preview module with proper type annotations. It imports Renderer and ProjectAnnotations types, the PARAM_KEY constant, and CustomDecorator, then exports a typed preview configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Renderer, ProjectAnnotations } from 'storybook/internal/types';\nimport { PARAM_KEY } from './constants';\nimport { CustomDecorator } from './decorators';\n\nconst preview: ProjectAnnotations<Renderer> = {\n  decorators: [CustomDecorator],\n  globals: {\n    [PARAM_KEY]: false,\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Webpack in TypeScript\nDESCRIPTION: TypeScript version of Storybook's main configuration using Webpack bundler. Includes type definitions and implements Webpack-specific module aliasing for mocking dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve.alias,\n        // 👇 External module\n        lodash: require.resolve('./lodash.mock'),\n        // 👇 Internal modules\n        '@/api$': path.resolve(__dirname, './api.mock.ts'),\n        '@/app/actions$': path.resolve(__dirname, './app/actions.mock.ts'),\n        '@/lib/session$': path.resolve(__dirname, './lib/session.mock.ts'),\n        '@/lib/db$': path.resolve(__dirname, './lib/db.mock.ts'),\n      };\n    }\n\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Overriding Next.js Router Defaults in Storybook Preview\nDESCRIPTION: This code demonstrates how to override default router properties and mock router methods in the Storybook preview configuration file. It uses parameters and the beforeEach hook to customize the router behavior.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// .storybook/preview.ts\nimport { Preview } from '@storybook/react';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getRouter } from '@storybook/nextjs/router.mock';\n\nconst preview: Preview = {\n  parameters: {\n    nextjs: {\n      // 👇 Override the default router properties\n      router: {\n        basePath: '/app/',\n      },\n    },\n  },\n  async beforeEach() {\n    // 👇 Manipulate the default router method mocks\n    getRouter().push.mockImplementation(() => {\n      /* ... */\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Storybook in Angular (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up a Storybook configuration for a Button component in Angular using TypeScript. It imports necessary types, includes the withActions decorator, and defines parameters for action handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { withActions } from 'storybook/actions/decorator';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    actions: {\n      handles: ['mouseover', 'click .btn'],\n    },\n  },\n  decorators: [withActions],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with Storybook for React\nDESCRIPTION: This snippet shows how to configure Vitest for a React Storybook project. It sets up the Storybook test plugin, configures browser-based testing with Playwright, and includes setup files for Vitest.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, mergeConfig } from 'vitest/config';\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nconst dirname =\n  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));\n\nimport viteConfig from './vite.config';\n\nexport default mergeConfig(\n  viteConfig,\n  defineConfig({\n    plugins: [\n      storybookTest({\n        // The location of your Storybook config, main.js|ts\n        configDir: path.join(dirname, '.storybook'),\n        // This should match your package.json script to run Storybook\n        // The --ci flag will skip prompts and not open a browser\n        storybookScript: 'yarn storybook --ci',\n      }),\n    ],\n    test: {\n      // Enable browser mode\n      browser: {\n        enabled: true,\n        // Make sure to install Playwright\n        provider: 'playwright',\n        headless: true,\n        instances: [{ browser: 'chromium' }],\n      },\n      setupFiles: ['./.storybook/vitest.setup.ts'],\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox Story in MDX for Common Usage\nDESCRIPTION: This snippet demonstrates how to import and render a Checkbox component story in Storybook documentation using MDX. It imports the Canvas component from Storybook addon-docs and the Checkbox stories, then renders the Unchecked story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-story.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n\n<Canvas of={CheckboxStories.Unchecked} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in SolidJS with TypeScript\nDESCRIPTION: Implements Storybook stories for a SolidJS Button component using standard TypeScript. Defines type-safe component metadata and a primary button story with customized name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Preact Storybook Button Stories with Render Function (JavaScript)\nDESCRIPTION: This snippet uses Storybook CSF for Preact to define a Button component story in JavaScript. With JSX enabled, it imports the Button, sets up a component meta, and uses a render function to spread args into the Preact Button component. The Primary story uses 'primary' and 'label' as arguments for interactivity. Dependencies include Preact and Storybook integration for Preact.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @jsx h */\nimport { h } from 'preact';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: (args) => <Button {...args} />,\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization in Storybook Preview using TypeScript\nDESCRIPTION: Standard TypeScript implementation for setting up internationalization in Storybook. Defines a locale selector with five language options and sets English as the default locale in the initialGlobals configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-locales-globaltype.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  globalTypes: {\n    locale: {\n      description: 'Internationalization locale',\n      toolbar: {\n        icon: 'globe',\n        items: [\n          { value: 'en', right: '🇺🇸', title: 'English' },\n          { value: 'fr', right: '🇫🇷', title: 'Français' },\n          { value: 'es', right: '🇪🇸', title: 'Español' },\n          { value: 'zh', right: '🇨🇳', title: '中文' },\n          { value: 'kr', right: '🇰🇷', title: '한국어' },\n        ],\n      },\n    },\n  },\n  initialGlobals: {\n    locale: 'en',\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Documenting Button Component with Direct Title in Storybook MDX\nDESCRIPTION: This MDX snippet creates documentation for a Button component using a direct title reference. It imports the Meta and Controls components from Storybook, defines a component Meta with a title, and provides documentation sections including definition, usage, and component inputs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-baseline-example.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Controls } from '@storybook/addon-docs/blocks';\n\n<Meta title=\"Button\" />\n\n# Definition\n\nButton is a clickable interactive element that triggers a response.\n\nYou can place text and icons inside of a button.\n\nButtons are often used for form submissions and to toggle elements into view.\n\n## Usage\n\nThe component comes in different variants such as `primary`, `secondary`, `large` and `small` which you can use to alter the look and feel of the button.\n\n## Inputs\n\nButton has the following properties:\n\n<Controls />\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Svelte CSF Stories with TypeScript 4.9 and satisfies Operator\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Svelte component using TypeScript 4.9 with the 'satisfies' operator for improved type safety. It shows how to define a play function that simulates user interactions with the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport MyComponent from './MyComponent.svelte';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory: Story = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Decorating React Storybook Component - TypeScript\nDESCRIPTION: This snippet sets up a story for MyComponent using React and TypeScript, decorating it to highlight selected HTML elements through the preview API. It requires '@storybook/react-vite' and 'storybook/highlight'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight-addon.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Highlighted: Story = {\n  decorators: [\n    (storyFn) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n      });\n      return storyFn();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in JavaScript Test Runner\nDESCRIPTION: JavaScript implementation of a test runner configuration that sets Bearer token authorization headers based on whether the URL contains 'prod'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  getHttpHeaders: async (url) => {\n    const token = url.includes('prod') ? 'XYZ' : 'ABC';\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript for Svelte Projects\nDESCRIPTION: JavaScript configuration for Storybook in a Svelte project. This configuration specifies story file patterns and includes the Svelte CSF addon for Component Story Format support in Svelte projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-svelte-csf-register.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx|svelte)'],\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-svelte-csf',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Experimental Next.js Vite Renderer (JavaScript)\nDESCRIPTION: This snippet updates the Storybook JavaScript configuration file to use the '@storybook/experimental-nextjs-vite' framework instead of the default React Webpack renderer. No additional dependencies are required beyond Storybook and the specified framework. The 'framework' property is updated, with comments guiding the removal of the old setting and addition of the new one. The configuration expects further customization as indicated by the comment placeholder.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // ...\n  // framework: '@storybook/react-webpack5', 👈 Remove this\n  framework: '@storybook/experimental-nextjs-vite', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: A11y Test Addon Integration Setup\nDESCRIPTION: Configuration for integrating accessibility testing with the Test addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, test, expect } from 'vitest';\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  async postVisit(page, context) {\n    const elementHandler = await page.$('#storybook-root');\n    const violations = await page.evaluate(() => {\n      return new Promise((resolve) => {\n        axe\n          .run('#storybook-root')\n          .then((result) => resolve(result.violations));\n      });\n    });\n    expect(violations).toEqual([]);\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Legacy Storybook Story Definition in Svelte\nDESCRIPTION: Shows the traditional way of defining Storybook stories for Svelte components using @storybook/addon-svelte-csf with Meta, Template, and Story components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Meta, Template, Story } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n</script>\n\n<Meta title=\"MyComponent\" component={MyComponent} />\n\n<Template let:args>\n  <MyComponent {...args} />\n</Template>\n\n<Story name=\"Default\" autodocs />\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Web Components (TypeScript)\nDESCRIPTION: TypeScript implementation of a Storybook story for a custom Page component using Web Components and Lit. Defines a CustomArgs type with an optional footer property and renders a demo-page element with a footer containing that content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\ntype CustomArgs = { footer?: string };\n\nconst meta: Meta<CustomArgs> = {\n  title: 'Page',\n  component: 'demo-page',\n  render: ({ footer }) => html`\n    <demo-page>\n      <footer>${footer}</footer>\n    </demo-page>\n  `,\n};\n\nexport default meta;\ntype Story = StoryObj<CustomArgs>;\n\nexport const CustomFooter: Story = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Button Stories with Background Parameters\nDESCRIPTION: TypeScript configuration for Button component stories in Angular with custom background settings. Sets up a gray background option with hex value #CCC.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      default: 'Light',\n      values: [\n        // 👇 Add a new value\n        { name: 'Gray', value: '#CCC' },\n      ],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Story with TypeScript\nDESCRIPTION: Shows how to create a Storybook story for Web Components using TypeScript, including proper type definitions from @storybook/web-components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n  title: 'components/MyComponent/MyComponent',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Default: Story = {\n  args: {\n    something: 'Something else',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Story Implementation with JavaScript\nDESCRIPTION: Creates a Storybook story for a React component using JavaScript. Shows how to handle image imports and component rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nimport imageFile from './static/image.png';\n\nexport default {\n  component: MyComponent,\n};\n\nconst image = {\n  src: imageFile,\n  alt: 'my image',\n};\n\nexport const WithAnImage = {\n  render: () => <img src={image.src} alt={image.alt} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Framework-Agnostic TypeScript Story Configuration with Type Satisfaction\nDESCRIPTION: TypeScript story configuration using the 'satisfies' operator for type checking. Template for any framework with proper type inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Simple: Story = {\n  name: 'So simple!',\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta and Story Parameters in JavaScript/TypeScript\nDESCRIPTION: Example of specifying meta-level and story-level parameters in a Storybook story file, demonstrating parameter inheritance and overriding.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst meta = {\n  component: Dialog,\n  // 👇 Meta-level parameters\n  parameters: {\n    layout: 'fullscreen',\n    demo: {\n      demoProperty: 'b',\n      anotherDemoProperty: 'b',\n    },\n  },\n};\nexport default meta;\n\n// (no additional parameters specified)\nexport const Basic = {};\n\nexport const LargeScreen = {\n  // 👇 Story-level parameters\n  parameters: {\n    layout: 'padded',\n    demo: {\n      demoArray: [3, 4],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite and GraphQL (JavaScript)\nDESCRIPTION: JavaScript configuration for Storybook using Vite bundler with GraphQL support. Adds the vite-plugin-graphql-loader to handle GraphQL files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/webpack-final-to-vite-final.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport graphql from 'vite-plugin-graphql-loader';\n\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async viteFinal(config) {\n    return {\n      ...config,\n      plugins: [...(config.plugins ?? []), graphql()],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Stories in TypeScript 4.9+ for Storybook\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for a Checkbox component using TypeScript 4.9+. It uses the 'satisfies' keyword for type checking and shows how to use the useArgs hook for state management.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-args-within-story.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StoryObj, Meta } from '@storybook/react';\nimport { useArgs } from 'storybook/preview-api';\nimport { Checkbox } from './checkbox';\n\nconst meta = {\n  title: 'Inputs/Checkbox',\n  component: Checkbox,\n} satisfies Meta<typeof Checkbox>;\nexport default meta;\n\ntype Story = StoryObj<typeof Checkbox>;\n\nexport const Example = {\n  args: {\n    isChecked: false,\n    label: 'Try Me!',\n  },\n  /**\n   * 👇 To avoid linting issues, it is recommended to use a function with a capitalized name.\n   * If you are not concerned with linting, you may use an arrow function.\n   */\n  render: function Render(args) {\n    const [{ isChecked }, updateArgs] = useArgs();\n\n    function onChange() {\n      updateArgs({ isChecked: !isChecked });\n    }\n\n    return <Checkbox {...args} onChange={onChange} isChecked={isChecked} />;\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Server-Side Stories in JSON\nDESCRIPTION: This JSON code demonstrates how to configure controls for server-side stories. It includes args and argTypes to specify control types for different properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Controls\",\n  \"stories\": [\n    {\n      \"name\": \"Button\",\n      \"parameters\": {\n        \"server\": { \"id\": \"controls/button\" }\n      },\n      \"args\": { \"button_text\": \"Push Me\", \"color\": \"red\" },\n      \"argTypes\": { \"button_text\": { \"control\": { \"type\": \"color\" } } }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Story Loading with StoriesSpecifier Object in Storybook\nDESCRIPTION: Configuration using the StoriesSpecifier object to load stories from a specific directory with custom settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  stories: [\n    {\n      directory: '../packages/components',\n      files: '**/*.stories.@(js|jsx|mjs|ts|tsx)',\n      titlePrefix: 'Components',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Svelte with TypeScript 4.9+ using Svelte CSF\nDESCRIPTION: This snippet shows how to use Svelte CSF with TypeScript 4.9+ for creating Storybook stories. It imports the defineMeta helper from the Svelte CSF addon and uses a Story component to define the component's props in a type-safe manner.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Histogram from './Histogram.svelte';\n\n  const { Story } = defineMeta({\n    component: Histogram,\n  });\n</script>\n\n<Story\n  name=\"Default\"\n  args={{\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Profile Page with Context\nDESCRIPTION: Shows how to use context in a profile page component to access container components\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { ProfilePageContext } from './ProfilePageContext';\n\nexport const ProfilePage = () => {\n  const { ProfileHeader, ProfileTimeline } = useContext(ProfilePageContext);\n  return (\n    <div>\n      <ProfileHeader />\n      <ProfileTimeline />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Svelte (JavaScript)\nDESCRIPTION: This snippet shows how to create a Storybook story for a Svelte Button component using JavaScript. It exports a default object for the component and a 'Text' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nimport { action } from 'storybook/actions';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  render: ({ label, click }) => ({\n    Component: Button,\n    props: {\n      label,\n    },\n    on: {\n      click,\n    },\n  }),\n  args: {\n    label: 'Hello',\n    click: action('clicked'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Using defineMeta for Svelte Button Component in Svelte Script (TypeScript)\nDESCRIPTION: This Svelte <script module> block in TypeScript forms Storybook meta configuration for a Button component using defineMeta, specifying both always-on and conditionally visible controls. It depends on @storybook/addon-svelte-csf and Button.svelte with TypeScript enabled. Provides an entrypoint for Svelte Storybook stories using strong typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n    argTypes: {\\n      label: { control: 'text' }, // Always shows the control\\n      advanced: { control: 'boolean' },\\n      // Only enabled if advanced is true\\n      margin: { control: 'number', if: { arg: 'advanced' } },\\n      padding: { control: 'number', if: { arg: 'advanced' } },\\n      cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n    },\\n  });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing ProfilePage Component in Solid.js\nDESCRIPTION: A Solid.js version of the ProfilePage component that provides identical functionality. Uses Solid.js context and props pattern to render user profile information.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-in-use.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'solid-js';\n\nimport ProfilePageContext from './ProfilePageContext';\n\nexport const ProfilePage = (props) => {\n  const { UserPostsContainer, UserFriendsContainer } = useContext(ProfilePageContext);\n\n  return (\n    <div>\n      <h1>{props.name}</h1>\n      <UserPostsContainer userId={props.userId} />\n      <UserFriendsContainer userId={props.userId} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Common Component Stories with TypeScript\nDESCRIPTION: This snippet demonstrates a framework-agnostic approach to creating Storybook stories using TypeScript. It shows how to use the play function to simulate user interactions with a component, which can be applied to various frameworks by replacing the framework name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const ExampleStory: Story = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte CSF Storybook Stories in TypeScript\nDESCRIPTION: This TypeScript snippet sets up a Storybook story for a Svelte component using Svelte's CSF. It includes detailed accessibility parameters and global controls, demonstrating manual testing setups. Dependencies are the Storybook Svelte CSF package and Axe-core.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n    parameters: {\n      a11y: {\n        // Optional selector to inspect\n        element: 'body',\n        config: {\n          rules: [\n            {\n              // The autocomplete rule will not run based on the CSS selector provided\n              id: 'autocomplete-valid',\n              selector: '*:not([autocomplete=\"nope\"])',\n            },\n            {\n              // Setting the enabled option to false will disable checks for this particular rule on all stories.\n              id: 'image-alt',\n              enabled: false,\n            },\n          ],\n        },\n        /*\n         * Axe's options parameter\n         * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n         * to learn more about the available options.\n        */\n        options: {},\n      },\n    },\n    globals: {\n      a11y: {\n        manual: true,\n      },\n    },\n  });\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Defining React List Stories in TypeScript with type annotation\nDESCRIPTION: Creates a Storybook story for a React List component using TypeScript with explicit type annotation. It imports type definitions and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {};\n```\n\n----------------------------------------\n\nTITLE: SolidJS Button Story with JavaScript\nDESCRIPTION: Defines a Button component story for SolidJS using JavaScript and CSF 3 format. Sets up a primary button variant.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default { component: Button };\n\nexport const Primary = { args: { primary: true } };\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite and GraphQL (TypeScript)\nDESCRIPTION: TypeScript configuration for Storybook using Vite bundler with GraphQL support. Includes type definitions and adds the vite-plugin-graphql-loader.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/webpack-final-to-vite-final.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\nimport graphql from 'vite-plugin-graphql-loader';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async viteFinal(config) {\n    return {\n      ...config,\n      plugins: [...(config.plugins ?? []), graphql()],\n    };\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Navigation in Storybook using JavaScript\nDESCRIPTION: A JavaScript implementation of a Storybook story for a NavigationBasedComponent that uses Next.js navigation parameters. It sets up the component to test with a specific pathname and query parameters within the app directory structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-override-in-story.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nexport default {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n    },\n  },\n};\n\n// If you have the actions addon,\n// you can interact with the links and see the route change events there\nexport const Example = {\n  parameters: {\n    nextjs: {\n      navigation: {\n        pathname: '/profile',\n        query: {\n          user: '1',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Story Default Export\nDESCRIPTION: Basic story configuration for Web Components, specifying the component name that corresponds to an entry in the custom-elements.json file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Demo Card',\n  component: 'your-component-name', // which is also found in the `custom-elements.json`\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Reset in Web Components Storybook (TypeScript)\nDESCRIPTION: Web Components implementation using TypeScript with web-components specific types. Shows highlight reset functionality with type-safe Meta and StoryObj definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-highlight-reset.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ResetHighlight: Story = {\n  decorators: [\n    (story) => {\n      const emit = useChannel({});\n      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\n      emit(HIGHLIGHT, {\n        elements: ['header', 'section', 'footer'],\n      });\n      return story();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Svelte using CSF with TypeScript\nDESCRIPTION: Creates a ButtonGroup story in Svelte using Component Story Format (CSF) with TypeScript. Uses explicit type annotations for meta and Story when composing Button stories into a ButtonGroup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport ButtonGroup from './ButtonGroup.svelte';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta: Meta<typeof ButtonGroup> = {\n  component: ButtonGroup,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ButtonGroup>;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Angular with TypeScript\nDESCRIPTION: Defines a Meta configuration for Button stories in Angular with background grid settings. Sets up parameters for cell size, opacity, amount and offset positions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\n// To apply a set of backgrounds to all stories of Button:\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      grid: {\n        cellSize: 20,\n        opacity: 0.5,\n        cellAmount: 5,\n        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Setting Themes with Data Attributes using withThemeByDataAttribute\nDESCRIPTION: A decorator that applies theme values via data attributes to a parent element. It sets the specified data attribute on the parent element with the value corresponding to the selected theme.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withThemeByDataAttribute } from '@storybook/addon-themes';\n\nexport const decorators = [\n  withThemeByDataAttribute({\n    themes: {\n      light: 'light',\n      dark: 'dark',\n    },\n    defaultTheme: 'light',\n    attributeName: 'data-bs-theme',\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: SolidJS Document Screen Component\nDESCRIPTION: SolidJS implementation of the Document Screen component using createSignal for state management and Switch/Match components for conditional rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSignal, Match, Switch } from 'solid-js';\n\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nfunction useFetchData() {\n  const [status, setStatus] = createSignal('idle');\n  const [data, setData] = createSignal([]);\n\n  setStatus('loading');\n  fetch('https://your-restful-endpoint')\n    .then((res) => {\n      if (!res.ok) {\n        throw new Error(res.statusText);\n      }\n      return res;\n    })\n    .then((res) => res.json())\n    .then((data) => {\n      setStatus('success');\n      setData(data);\n    })\n    .catch(() => {\n      setStatus('error');\n    });\n\n  return {\n    status,\n    data,\n  };\n}\nexport function DocumentScreen() {\n  const { status, data } = useFetchData();\n\n  return (\n    <Switch>\n      <Match when={status() === 'loading'}>\n        <p>Loading...</p>\n      </Match>\n      <Match when={status() === 'error'}>\n        <p>There was an error fetching the data!</p>\n      </Match>\n      <Match when={user} keyed>\n        <PageLayout user={data().user}>\n          <DocumentHeader document={data().document} />\n          <DocumentList documents={data().subdocuments} />\n        </PageLayout>\n      </Match>\n    </Switch>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main in TypeScript\nDESCRIPTION: TypeScript implementation of Storybook's main configuration file with type safety. Imports StorybookConfig type, defines configuration including framework selection, story patterns, and webpack customization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-using-existing-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nimport custom from '../webpack.config.js'; // 👈 Custom Webpack configuration being imported.\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    return {\n      ...config,\n      module: { ...config.module, rules: [...config.module.rules, ...custom.module.rules] },\n    };\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook preview that imports the Preview type and sets the default layout parameter to 'centered'. Includes type safety and framework-specific import.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-layout-param.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in TypeScript for HTML Renderer\nDESCRIPTION: Creates a Storybook story for an HTML Button component with three variations using TypeScript. Uses Meta and StoryObj types to provide type safety and uses the createButton helper to generate buttons with different labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\nimport { createButton, ButtonArgs } from './Button';\n\nconst meta: Meta<ButtonArgs> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonArgs>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args) => createButton({ backgroundColor: '#ff0', label: 'Button' }),\n};\n\nexport const Secondary: Story = {\n  render: (args) => createButton({ backgroundColor: '#ff0', label: '😄👍😍💯' }),\n};\n\nexport const Tertiary: Story = {\n  render: (args) => createButton({ backgroundColor: '#ff0', label: '📚📕📈🤓' }),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing SWC Compiler Support for Storybook\nDESCRIPTION: Command to install and set up the SWC compiler addon for Storybook. This provides high-performance compilation while maintaining ecosystem compatibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook add @storybook/addon-webpack5-compiler-swc\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook in TypeScript. It imports the StorybookConfig type, specifies the framework, story file locations, and TypeScript settings to allow multi-package component documentation via Autodocs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-fix-imports-autodocs-monorepo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    // Overrides the default Typescript configuration to allow multi-package components to be documented via Autodocs.\n    reactDocgen: 'react-docgen',\n    check: false,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Common Frameworks in JavaScript\nDESCRIPTION: This code snippet shows how to create Storybook stories for a Button component that can be used across various frameworks. It uses JavaScript to define a default export and two story objects: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Controls Addon to Storybook Configuration\nDESCRIPTION: Configuration to include the @storybook/addon-controls dependency in your Storybook project to ensure Controls are visible in both Canvas and Docs panels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-controls'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte CSF MDX Documentation\nDESCRIPTION: Configures an MDX documentation file specifically for Svelte CSF components. Demonstrates importing Svelte stories and setting up both standalone and component-linked documentation pages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-docs-only-page.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\nimport * as ExampleComponentStories from './ExampleComponent.stories.svelte';\n\n{/* 👇 Documentation-only page */}\n\n<Meta title=\"Documentation\" />\n\n{/* 👇 Component documentation page */}\n\n<Meta of={ExampleComponentStories} />\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Svelte CSF (TypeScript)\nDESCRIPTION: Configures Storybook metadata for a Svelte component in a separate TypeScript file using standard Component Story Format (CSF). It imports the Svelte component and `Meta` type, defines the `meta` object with type annotation, and hides the 'foo' property from the Storybook args table via `argTypes`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"YourComponent.stories.ts\" renderer=\"svelte\" language=\"ts\" tabTitle=\"CSF\"\nimport type { Meta } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Testing React Button Component with Jest and Storybook\nDESCRIPTION: A Jest test for a React Button component using Storybook's composeStories utility. It imports button stories, composes them to get the Primary story variant, runs it, and creates a snapshot test of the rendered output.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { composeStories } from '@storybook/react';\n\nimport * as stories from '../stories/Button.stories';\n\nconst { Primary } = composeStories(stories);\ntest('Button snapshot', async () => {\n  await Primary.run();\n  expect(document.body.firstChild).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Snapshot Tests with Jest in JavaScript\nDESCRIPTION: A JavaScript implementation for running snapshot tests on Storybook components using Jest. This script locates all story files using glob patterns, composes them using the Storybook API, and runs each story to compare against snapshot files. It includes error handling and proper waiting periods for accurate snapshot capturing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path';\nimport * as glob from 'glob';\n\n//👇 Augment expect with jest-specific-snapshot\nimport 'jest-specific-snapshot';\n\nimport { describe, test, expect } from '@jest/globals';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nconst compose = (entry) => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your stories files\n  const storyFiles = glob.sync(\n    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}')\n  );\n\n  return storyFiles.map((filePath) => {\n    const storyFile = require(filePath);\n    const storyDir = path.dirname(filePath);\n    const componentName = path.basename(filePath).replace(/\\.(stories|story)\\.[^/.]+$/, '');\n\n    return { filePath, storyFile, storyDir, componentName };\n  });\n}\n\ndescribe('Stories Snapshots', () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        test(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          // Defines the custom snapshot path location and file name\n          const customSnapshotPath = `./__snapshots__/${componentName}.test.js.snap`;\n          expect(document.body.firstChild).toMatchSpecificSnapshot(customSnapshotPath);\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Button Rendering with Locale Overrides in Svelte (TypeScript)\nDESCRIPTION: This code tests the Button component in a Svelte project with locale-specific Storybook stories. Utilizing @storybook/svelte, @testing-library/svelte, and vitest, it composes the Primary story with different locales and runs the test to ensure correct localization. It requires the corresponding Storybook stories metadata and can be extended to other locales as needed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-override-globals.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from 'vitest';\nimport { render } from '@testing-library/svelte';\nimport { composeStory } from '@storybook/svelte';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\ntest('renders in English', async () => {\n  const Primary = composeStory(\n    PrimaryStory,\n    meta,\n    { globals: { locale: 'en' } }, // 👉 Project annotations to override the locale\n  );\n\n  await Primary.run();\n});\n\ntest('renders in Spanish', async () => {\n  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });\n\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in React with TypeScript\nDESCRIPTION: Implements Storybook stories for a React Button component using standard TypeScript. Defines typed component metadata and a primary button story with custom name and argument configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Dev Server\nDESCRIPTION: Imports and executes the buildDev function from Storybook core server with custom options defined in a separate options file. This sets up the development server for a custom Storybook framework implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-start-dev-server.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildDev } from '@storybook/core/server';\n\nimport options from './options';\n\nbuildDev(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgsTable Default Value Display in Storybook 6.3\nDESCRIPTION: Shows how to manually configure the default value displayed in the ArgsTable doc block using the table.defaultValue setting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: MyComponent,\n  argTypes: {\n    argName: {\n      table: { defaultValue: { summary: \"SomeType<T>\" } },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Test Runner Configuration\nDESCRIPTION: Command to eject and generate a custom test runner configuration file for configuring Jest options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx sb@latest test-runner eject\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite Builder in JavaScript\nDESCRIPTION: This snippet exports the default configuration for Storybook. It specifies the story file patterns and sets up the Vite builder with a custom configuration path.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-builder-custom-config.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    builder: {\n      name: '@storybook/builder-vite',\n      options: {\n        viteConfigPath: '../customVite.config.js',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte with TypeScript 4.9 (CSF)\nDESCRIPTION: This snippet demonstrates how to define Storybook stories for a Svelte Button component using the Component Story Format (CSF) with TypeScript 4.9. It uses the `satisfies` operator for type checking and defines primary and secondary stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Web Components Vite Framework\nDESCRIPTION: Command to install the Storybook framework for Web Components with Vite. This is required for manual migration or when automatic migration fails.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storybook/web-components-vite\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with Accessibility Tests in TypeScript 4.9+\nDESCRIPTION: This snippet shows how to create Storybook stories for a Button component using TypeScript 4.9+ syntax. It demonstrates the use of the 'satisfies' keyword for type inference and includes accessibility testing configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-example.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Meta, StoryObj } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  parameters: {\n    a11y: { test: 'error' },\n  },\n} satisfies Meta<typeof Button>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n// 👇 This story will use the 'error' value and fail on accessibility violations\nexport const Primary: Story = {\n  args: { primary: true },\n};\n\n// 👇 This story will not fail on accessibility violations\n//    (but will still run the tests and show warnings)\nexport const NoA11yFail: Story = {\n  parameters: {\n    a11y: { test: 'todo' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet defines the Storybook configuration using TypeScript. It imports the StorybookConfig type, specifies the framework, story file patterns, addons, and build settings. The configuration is similar to the JavaScript version but with added type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-disableaddons.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions', '@storybook/addon-a11y'],\n  build: {\n    test: {\n      disabledAddons: ['@storybook/addon-a11y'],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Setup for Storybook with React\nDESCRIPTION: This snippet sets up Vitest for use with Storybook in a React project. It imports required dependencies, sets project annotations, and runs Storybook's beforeAll hook. It includes a note for Next.js users about importing from the appropriate package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations-simple.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n// 👇 If you're using Next.js, import from @storybook/nextjs\n//   If you're using Next.js with Vite, import from @storybook/experimental-nextjs-vite\nimport { setProjectAnnotations } from '@storybook/react';\nimport * as previewAnnotations from './preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations]);\n\n// Run Storybook's beforeAll hook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Compodoc\nDESCRIPTION: Update to .storybook/preview.ts to import Compodoc metadata and use it for generating controls and argTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setCompodocJson } from \"@storybook/addon-docs/angular\";\nimport docJson from \"../documentation.json\";\nsetCompodocJson(docJson);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for React Button Component (JavaScript)\nDESCRIPTION: This snippet shows how to configure decorators for a React Button component in Storybook using JavaScript. It defines a decorator that wraps the story in a div with margin using JSX.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Agnostic Storybook Stories with TypeScript 4.9\nDESCRIPTION: Shows how to create a framework-agnostic Storybook story file using TypeScript 4.9. Uses generic framework type imports and typeof for component type inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Foo } from './Foo';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Foo/Bar',\n  component: Foo,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Foo>;\n\nexport const Baz: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Angular Button Story with TypeScript\nDESCRIPTION: Defines a Button component story for Angular using TypeScript and CSF 3 format. Sets up a primary button story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = { component: Button };\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = { args: { primary: true } };\n```\n\n----------------------------------------\n\nTITLE: Defining Component Metadata with Custom Renderer in TypeScript\nDESCRIPTION: This snippet exemplifies defining Storybook component metadata using TypeScript, tailored for the custom renderer specified. It incorporates types from Storybook and uses the 'satisfies' keyword to ensure metadata compliance with the 'Meta' type for 'Example'. The configuration allows a numeric 'value' property with specified control settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    value: {\n      control: {\n        type: 'number',\n        min: 0,\n        max: 100,\n        step: 10,\n      },\n    },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Description for Storybook Info Addon\nDESCRIPTION: Creates a markdown string that will be used as the description in a Storybook info addon example. The markdown includes headings, code blocks, and links to demonstrate formatting capabilities.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst markdownDescription = `\n#### You can use markdown in your withInfo() description.\n\nSometimes you might want to manually include some code examples:\n~~~js\nconst Button = () => <button />;\n~~~\n\nMaybe include a [link](http://storybook.js.org) to your project as well.\n`;\n```\n\n----------------------------------------\n\nTITLE: Handling Storybook Preview Requests in TypeScript\nDESCRIPTION: This function handles requests for the Storybook preview iframe. It sets up the necessary headers, renders the preview HTML, and sends the response. It also handles errors and sends appropriate error responses.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync getPreviewHtml(req: Request, res: Response) {\n  await this.ready;\n  const { headers, body } = await this.previewBuilder.getPreviewResult();\n  Object.entries(headers).forEach(([key, value]) => {\n    res.setHeader(key, value);\n  });\n  res.send(body);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook UI in JavaScript\nDESCRIPTION: Example of initializing the Storybook UI by rendering it to a DOM element using a custom Provider.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderStorybookUI } from '@storybook/manager';\nimport global from 'global';\nimport Provider from './provider';\n\nconst { document } = global;\n\nconst roolEl = document.getElementById('root');\nrenderStorybookUI(roolEl, new Provider());\n```\n\n----------------------------------------\n\nTITLE: Solid Button Story Implementation (TypeScript)\nDESCRIPTION: TypeScript version of SolidJS Button story with proper type definitions from storybook-solidjs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentStory, ComponentMeta } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n} as ComponentMeta<typeof Button>;\n\nexport const Primary: ComponentStory<typeof Button> = (args) => <Button {...args} />;\nPrimary.args = { primary: true };\n```\n\n----------------------------------------\n\nTITLE: React Storybook Story with Localization (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for React components with multilingual support. Includes a locale-based greeting system and JSX rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nconst getCaptionForLocale = (locale) => {\n  switch (locale) {\n    case 'es':\n      return 'Hola!';\n    case 'fr':\n      return 'Bonjour!';\n    case 'kr':\n      return '안녕하세요!';\n    case 'zh':\n      return '你好!';\n    default:\n      return 'Hello!';\n  }\n};\n\nexport const StoryWithLocale = {\n  render: (args, { globals: { locale } }) => {\n    const caption = getCaptionForLocale(locale);\n    return <p>{caption}</p>;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Primary Story in JavaScript for Storybook\nDESCRIPTION: This snippet demonstrates how to compose a primary story using the composeStory function from Storybook. It combines the Primary story with the default export data from the stories object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/__mocks__/composeStories.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Primary = composeStory(stories.Primary, stories.default)\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Viewport Addon\nDESCRIPTION: Command to install the viewport addon separately using npm or yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/addon-viewport --save-dev\n# yarn add -D @storybook/addon-viewport\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addon Preview in JavaScript\nDESCRIPTION: This JavaScript code configures a Storybook addon's preview module with a custom decorator and global parameters. It imports the PARAM_KEY constant and CustomDecorator, then exports a preview configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { PARAM_KEY } from './constants';\n\nimport { CustomDecorator } from './decorators';\n\nconst preview = {\n  decorators: [CustomDecorator],\n  globals: {\n    [PARAM_KEY]: false,\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Svelte Storybook via CSF - Svelte TypeScript 4.9\nDESCRIPTION: Uses Svelte stories with TypeScript 4.9, combining the defineMeta utility from '@storybook/addon-svelte-csf' to declare control configurations for each story. Includes both array and regex options for controlling field exposure. Requires TypeScript 4.9+, Svelte, and the addon-svelte-csf package. Inputs: Svelte components written in TS; outputs: strongly-typed CSF stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n  });\n</script>\n\n<Story\n  name=\"ArrayInclude\"\n  parameters={{\n    controls: { include: ['foo', 'bar'] },\n  }}\n/>\n\n<Story\n  name=\"RegexInclude\"\n  parameters={{\n    controls: { include: /^hello*/ },\n  }}\n/>\n\n<Story\n  name=\"ArrayExclude\"\n  parameters={{\n    controls: { exclude: ['foo', 'bar'] },\n  }}\n/>\n\n<Story\n  name=\"RegexExclude\"\n  parameters={{\n    controls: { exclude: /^hello*/ },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vite Plugin for URL Collection Processing in Storybook\nDESCRIPTION: A Vite plugin that transforms URL collection files into Storybook-compatible stories. It uses AST parsing to extract named exports and convert them into Svelte components that can render as links.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as acorn from 'acorn';\nimport * as walk from 'acorn-walk';\nimport { defineConfig, type Plugin } from 'vite';\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\n\nfunction StorybookUrlLinksPlugin(): Plugin {\n  return {\n    name: 'storybook-url-links',\n    async transform(code: string, id: string) {\n      if (id.endsWith('.url.js')) {\n        const ast = acorn.parse(code, {\n          ecmaVersion: 2020,\n          sourceType: 'module',\n        });\n\n        const namedExports: string[] = [];\n        let defaultExport = 'export default {};';\n\n        walk.simple(ast, {\n          // Extracts the named exports, those represent our stories, and for each of them, we'll return a valid Svelte component.\n          ExportNamedDeclaration(node: acorn.ExportNamedDeclaration) {\n            if (\n              node.declaration &&\n              node.declaration.type === 'VariableDeclaration'\n            ) {\n              node.declaration.declarations.forEach((declaration) => {\n                if ('name' in declaration.id) {\n                  namedExports.push(declaration.id.name);\n                }\n              });\n            }\n          },\n          // Preserve our default export.\n          ExportDefaultDeclaration(node: acorn.ExportDefaultDeclaration) {\n            defaultExport = code.slice(node.start, node.end);\n          },\n        });\n\n        return {\n          code: `\n            import RedirectBack from '../../.storybook/components/RedirectBack.svelte';\n            ${namedExports\n              .map(\n                (name) =>\n                  `export const ${name} = () => new RedirectBack();`\n              )\n              .join('\\n')}\n            ${defaultExport}\n          `,\n          map: null,\n        };\n      }\n    },\n  };\n}\n\nexport default defineConfig({\n  plugins: [StorybookUrlLinksPlugin(), svelte()],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Actions Theme in Storybook\nDESCRIPTION: This code defines a custom theme configuration for the Storybook Addon Actions. It extends the chromeLight theme, overrides the base font family to use a monospace font, and sets a transparent background.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-extended-theme-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddonActionsTheme: {\n  ...chromeLight,\n  BASE_FONT_FAMILY: typography.fonts.mono,\n  BASE_BACKGROUND_COLOR: 'transparent',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Component with Theme Access\nDESCRIPTION: Defines a styled component using template literals to access theme properties. The component sets a background color from theme props and a fixed width. Uses the styled-components library with React.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-styled-variables-template-literals.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Component = styled.div`\n  background: `${props => props.theme.background.app}`\n  width: 0;\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Test Runner for Storybook\nDESCRIPTION: TypeScript implementation of Storybook test runner configuration with type-safe hooks for test lifecycle management. Includes setup, preVisit, and postVisit hooks with utilities for getting story context and waiting for page readiness.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-helper-function.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\nimport { getStoryContext, waitForPageReady } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  // Hook that is executed before the test runner starts running tests\n  setup() {\n    // Add your configuration here.\n  },\n  /* Hook to execute before a story is initially visited before being rendered in the browser.\n   * The page argument is the Playwright's page object for the story.\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async preVisit(page, context) {\n    // Add your configuration here.\n  },\n  /* Hook to execute after a story is visited and fully rendered.\n   * The page argument is the Playwright's page object for the story\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await getStoryContext(page, context);\n\n    // This utility function is designed for image snapshot testing. It will wait for the page to be fully loaded, including all the async items (e.g., images, fonts, etc.).\n    await waitForPageReady(page);\n\n    // Add your configuration here.\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Svelte using CSF in TypeScript\nDESCRIPTION: This snippet defines metadata for a Button component in Svelte using TypeScript and the Component Story Format (CSF). It imports the Button component, sets up argTypes for the 'variant' prop, and exports the typed metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Angular Component Story with Play Function\nDESCRIPTION: Implementation of a Storybook story for Angular using TypeScript that demonstrates delayed typing interactions using play function and userEvent.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const DelayedStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const exampleElement = canvas.getByLabelText('example-element');\n\n    await userEvent.type(exampleElement, 'random string', {\n      delay: 100,\n    });\n\n    const AnotherExampleElement = canvas.getByLabelText('another-example-element');\n    await userEvent.type(AnotherExampleElement, 'another random string', {\n      delay: 100,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Earlier TypeScript Versions for Storybook\nDESCRIPTION: This snippet shows how to create Storybook stories for a Button component using earlier versions of TypeScript. It uses explicit type annotations for the meta object and Story type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hypothetical-example.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Sample: Story = {\n  render: () => ({\n    template: '<button :label=label />',\n    data: {\n      label: 'hello button',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Configuration in Storybook (TS)\nDESCRIPTION: This TypeScript snippet configures a button component as a web component for Storybook's web-components renderer. The setup includes defining component parameters with regex-enabled actions. Requires Storybook and web-components-compatible TypeScript environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  parameters: { actions: { argTypesRegex: '^on.*' } },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite Builder in JavaScript\nDESCRIPTION: This snippet exports the default configuration for a Storybook project. It specifies the locations of story files, includes the essential addons, and sets up the Vite builder for improved performance.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-register.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  core: {\n    builder: '@storybook/builder-vite', // 👈 The builder enabled here.\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Storybook in JavaScript\nDESCRIPTION: JavaScript configuration example for setting up Storybook with the SvelteKit framework in main.js. Exports a default configuration object specifying SvelteKit as the framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  framework: {\n    name: '@storybook/sveltekit',\n    options: {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in React with TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a React Button component using TypeScript 4.9. It uses the 'satisfies' keyword for type checking, imports necessary types, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {\n  render: () => <Button label=\"Hello\" onClick={action('clicked')} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Control Type with ArgTypes\nDESCRIPTION: Example of using argTypes to customize the control type for the 'variant' arg to use a radio group.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Angular Button Story - Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet registers a Button component for Storybook in an Angular project. It imports Meta from '@storybook/angular' and specifies the Button component in the meta object. This approach requires '@storybook/angular' and ensures type safety for the Button component story. Expected input is the Angular Button component, and output is its story registration for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\\n\\nimport { Button } from './button.component';\\n\\nconst meta: Meta<Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Switching with Class Names in Storybook\nDESCRIPTION: Diff showing how to use the withThemeByClassName decorator to enable switching between light and dark modes using Tailwind's class-based approach in the .storybook/preview.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import { Preview } from '@storybook/your-renderer';\n+import { Preview, Renderer } from '@storybook/your-renderer';\n+import { withThemeByClassName } from '@storybook/addon-themes';\n\nimport '../src/index.css';\n\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n+ decorators: [\n+  withThemeByClassName<Renderer>({\n+    themes: {\n+      light: '',\n+      dark: 'dark',\n+    },\n+    defaultTheme: 'light',\n+  }),\n+ ]\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Web Components with Vite in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook for a Web Components project using Vite as the bundler in JavaScript. It exports a default configuration object specifying the framework name and options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/web-components-vite',\n    options: {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Channel Class in JavaScript\nDESCRIPTION: This snippet defines the Channel class with methods for managing event listeners and emitting events. It's used to handle communication in Storybook implementations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/channels/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Channel {\n  addListener(type, listener) {}\n  addPeerListener(type, listener) {} // ignore events from itself\n  emit(type, ...args) {}\n  eventNames() {}\n  listenerCount(type) {}\n  listeners(type) {}\n  on(type, listener) {}\n  once(type, listener) {}\n  prependListener(type, listener) {}\n  prependOnceListener(type, listener) {}\n  removeAllListeners(type) {}\n  removeListener(type, listener) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Vue with JavaScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Vue Button component using JavaScript. It imports the necessary action and component, sets up metadata, and defines a story with props and an action using the setup function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nimport { action } from 'storybook/actions';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  render: () => ({\n    components: { Button },\n    setup() {\n      return {\n        onClick: action('clicked'),\n      };\n    },\n    template: '<Button label=\"Hello\" @click=\"onClick\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Root Element for Storybook Stories\nDESCRIPTION: Creates a div element with id 'custom-root' that can be used as a mounting point for Storybook stories. This allows components to be rendered into a specific container instead of the default Storybook root.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-body-example.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"custom-root\"></div>\n```\n\n----------------------------------------\n\nTITLE: Web Components Histogram Story (TypeScript)\nDESCRIPTION: TypeScript implementation of a Storybook story for web components Histogram. Includes type definitions and metadata configuration using StoryObj type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'histogram-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Stories and Using Meta Component in Storybook (JavaScript)\nDESCRIPTION: This snippet imports stories from a B.stories file and uses the Storybook Meta component to reference them. It demonstrates how to set up a documentation page for existing stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfNoName.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as BStories from '../src/B.stories';\n\n<Meta of={BStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript for Web Components\nDESCRIPTION: This code shows how to set up Storybook for a Web Components Button using TypeScript. It imports the Meta type from Storybook's web-components package and creates a typed metadata object that references the custom element 'demo-button'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in SolidJS with TypeScript 4.9+ using satisfies\nDESCRIPTION: This code shows how to create Storybook stories for a Histogram component in SolidJS using TypeScript 4.9+ with the satisfies operator. It imports from the storybook-solidjs package and uses modern TypeScript features for type safety while maintaining type inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Histogram } from './Histogram';\n\nconst meta = {\n  component: Histogram,\n} satisfies Meta<typeof Histogram>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes with JavaScript\nDESCRIPTION: Sets up theme switching in Storybook using data attributes with JavaScript. Configures light and dark themes using the withThemeByDataAttribute decorator from @storybook/addon-themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-data-attribute-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withThemeByDataAttribute } from '@storybook/addon-themes';\n\nimport '../src/index.css'; // Your application's global CSS file\n\nconst preview = {\n  decorators: [\n    withThemeByDataAttribute({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n      attributeName: 'data-theme',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Composed Button Story in React - TypeScript\nDESCRIPTION: This snippet tests the 'Primary' composed Storybook story for a Button component in React using TypeScript. It leverages @testing-library/react for UI assertions and @storybook/react for composing stories, expecting type safety and correct typings from module imports. The test checks that the button's rendered label matches the 'label' argument from the composed Storybook story, minimizing code duplication. Required dependencies include @testing-library/react, @storybook/react, and suitable Button story definitions with proper type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\n\nimport { composeStories } from '@storybook/react';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('reuses args from composed story', () => {\n  render(<Primary />);\n\n  const buttonElement = screen.getByRole('button');\n  // Testing against values coming from the story itself! No need for duplication\n  expect(buttonElement.textContent).toEqual(Primary.args.label);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story for Angular in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Button story for Angular using TypeScript. It imports the necessary types from Storybook, defines a meta object for the Button component, and disables a custom addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    myAddon: { disable: true }, // Disables the addon\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Creating Solid.js Context for Profile Page\nDESCRIPTION: Creates a Solid.js context object for managing profile page state and data. This context provides a way to share profile-related data across components in the Solid.js component tree.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-create.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'solid-js';\n\nconst ProfilePageContext = createContext();\n\nexport default ProfilePageContext;\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Angular\nDESCRIPTION: TypeScript implementation of a Storybook story for the Page component in Angular. It defines a customizable footer that can be passed through story args, and uses argsToTemplate to pass other props to the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { argsToTemplate } from '@storybook/angular';\n\nimport { Page } from './page.component';\n\ntype PagePropsAndCustomArgs = Page & { footer?: string };\n\nconst meta: Meta<PagePropsAndCustomArgs> = {\n  component: Page,\n  render: ({ footer, ...args }) => ({\n    props: args,\n    template: `\n      <storybook-page ${argsToTemplate(args)}>\n        <ng-container footer>${footer}</ng-container>\n      </storybook-page>`,\n  }),\n};\nexport default meta;\n\ntype Story = StoryObj<PagePropsAndCustomArgs>;\n\nexport const CustomFooter: Story = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Solid.js in Storybook\nDESCRIPTION: This snippet defines a Storybook story for a Button component in Solid.js. It's identical to the React version, demonstrating how the same component can be used across different frameworks. It imports the Button, sets up the default export, and defines a 'Sample' story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-sample.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Sample = {\n  render: () => <Button label=\"hello button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta in JavaScript\nDESCRIPTION: Shows how to define a Storybook Meta configuration for a component using JavaScript. This is a common renderer-agnostic implementation that imports the Example component and configures its argTypes with friendly naming.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    actualArgName: {\n      name: 'Friendly name',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Coverage Addon with npm\nDESCRIPTION: Installs the @storybook/addon-coverage package using npm package manager. This command uses npx to execute the latest version of storybook CLI to add the coverage addon to your project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest add @storybook/addon-coverage\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Button Component with Storybook\nDESCRIPTION: This code demonstrates how to test a Svelte Button component using Storybook's composeStories utility. It imports stories, composes them for testing purposes, and verifies rendering with both default and overridden props using Vitest and Testing Library.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-stories.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from 'vitest';\nimport { screen } from '@testing-library/svelte';\nimport { composeStories } from '@storybook/svelte';\n\n// Import all stories and the component annotations from the stories file\nimport * as stories from './Button.stories';\n\n// Every component that is returned maps 1:1 with the stories,\n// but they already contain all annotations from story, meta, and project levels\nconst { Primary, Secondary } = composeStories(stories);\n\ntest('renders primary button with default args', async () => {\n  await Primary.run();\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  // You can override props by passing them in the context argument of the run function\n  await Primary.run({ args: { ...Primary.args, children: 'Hello world' } });\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding CRA File Loader Exclusions with @storybook/preset-create-react-app\nDESCRIPTION: Illustrates how to use the `craOverrides` option within the preset's configuration in `./.storybook/main.js` to customize Create React App's default Webpack settings applied by the preset. Specifically, it shows how to modify the `fileLoaderExcludes` array to prevent CRA's built-in `file-loader` from processing PDF files, allowing other loaders or presets to handle them.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  addons: [\n    {\n      name: '@storybook/preset-create-react-app',\n      options: {\n        craOverrides: {\n          fileLoaderExcludes: ['pdf'],\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Web Components Storybook Stories with TypeScript\nDESCRIPTION: Demonstrates viewport configuration for a demo-button web component using TypeScript. Uses Meta and StoryObj types from the @storybook/web-components-vite package to set a default tablet viewport and override it with a mobile viewport for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components-vite';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  globals: {\n    // 👇 Set viewport for all component stories\n    viewport: { value: 'tablet', isRotated: false },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const OnPhone: Story = {\n  globals: {\n    // 👇 Override viewport for this story\n    viewport: { value: 'mobile1', isRotated: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Framework in TypeScript\nDESCRIPTION: This snippet configures Storybook specifically for React. It includes React-specific TypeScript settings such as 'reactDocgen' and 'reactDocgenTypescriptOptions'. The framework needs to be specified by replacing 'your-framework' with the actual React framework being used (e.g., react-webpack5, react-vite).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-extend-ts-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    check: false,\n    checkOptions: {},\n    reactDocgen: 'react-docgen',\n    reactDocgenTypescriptOptions: {}, // Available only when reactDocgen is set to 'react-docgen-typescript'\n    skipCompiler: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Common TypeScript\nDESCRIPTION: Framework-agnostic TypeScript implementation of Button stories with type safety. Shows how to use Meta and StoryObj types for proper type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  globals: {\n    // 👇 Set background value for all component stories\n    backgrounds: { value: 'gray', grid: false },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OnDark: Story = {\n  globals: {\n    // 👇 Override background value for this story\n    backgrounds: { value: 'dark' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Config in TypeScript with Type Definition\nDESCRIPTION: TypeScript implementation with explicit type definitions using StorybookConfig type. Includes framework specification, story pattern matching, and typed Vite configuration handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-vite-final.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async viteFinal(config, { configType }) {\n    const { mergeConfig } = await import('vite');\n\n    if (configType === 'DEVELOPMENT') {\n      // Your development configuration goes here\n    }\n    if (configType === 'PRODUCTION') {\n      // Your production configuration goes here.\n    }\n    return mergeConfig(config, {\n      // Your environment configuration here\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component for Emoji Button\nDESCRIPTION: This JSX snippet sets up the Meta component from Storybook's addon-docs, associating it with the imported Emoji Button stories. This configuration is crucial for Storybook to recognize and display the component's documentation correctly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/emoji-button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={EmojiButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Implementing ProfilePage Stories in Solid\nDESCRIPTION: Solid.js implementation of a Storybook story for ProfilePage component. Demonstrates the same pattern of context usage and story composition but adapted for the Solid framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProfilePage } from './ProfilePage';\nimport { UserPosts } from './UserPosts';\n\n//👇 Imports a specific story from a story file\nimport { Normal as UserFriendsNormal } from './UserFriends.stories';\n\nexport default {\n  component: ProfilePage,\n};\n\nconst ProfilePageProps = {\n  name: 'Jimi Hendrix',\n  userId: '1',\n};\n\nconst context = {\n  //👇 We can access the `userId` prop here if required:\n  UserPostsContainer({ userId }) {\n    return <UserPosts {...UserPostsProps} />;\n  },\n  // Most of the time we can simply pass in a story.\n  // In this case we're passing in the `normal` story export\n  // from the `UserFriends` component stories.\n  UserFriendsContainer: UserFriendsNormal,\n};\n\nexport const Normal = {\n  render: () => (\n    <ProfilePageContext.Provider value={context}>\n      <ProfilePage {...ProfilePageProps} />\n    </ProfilePageContext.Provider>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Storybook Framework-Specific Imports\nDESCRIPTION: Examples of correct code that properly imports from framework-specific Storybook packages based on the build tool being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-renderer-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Do use the appropriate framework package for your build tool\nimport { something } from '@storybook/react-vite' // For Vite\nimport { something } from '@storybook/vue3-webpack5' // For Webpack 5\nimport { something } from '@storybook/web-components-vite' // For Vite\nimport { something } from '@storybook/nextjs' // For Next.js\n```\n\n----------------------------------------\n\nTITLE: Initializing MSW in JavaScript Storybook Preview\nDESCRIPTION: Sets up Mock Service Worker (MSW) in a JavaScript-based Storybook preview configuration. Imports and initializes MSW addon, then adds the MSW loader to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-initialize.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initialize, mswLoader } from 'msw-storybook-addon';\n\n/*\n * Initializes MSW\n * See https://github.com/mswjs/msw-storybook-addon#configuring-msw\n * to learn how to customize it\n */\ninitialize();\n\nexport default {\n  // ... rest of preview configuration\n  loaders: [mswLoader], // 👈 Add the MSW loader to all stories\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Stories with TypeScript 4.9\nDESCRIPTION: This snippet shows a generic way to set up story metadata using TypeScript 4.9. It can be adapted for different frameworks by replacing 'your-framework' with the specific framework being used. It uses the 'satisfies' keyword for type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n} satisfies Meta<typeof Button>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Mocking Next.js revalidatePath in Storybook with TypeScript (standard syntax)\nDESCRIPTION: Creates a Storybook story in TypeScript using standard type annotation syntax. Mocks the Next.js revalidatePath function and tests it within a form submission scenario.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-cache-mock.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { revalidatePath } from '@storybook/nextjs/cache.mock';\n\nimport MyForm from './my-form';\n\nconst meta: Meta<typeof MyForm> = {\n  component: MyForm,\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof MyForm>;\n\nexport const Submitted: Story = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n\n    const submitButton = canvas.getByRole('button', { name: /submit/i });\n    await userEvent.click(saveButton);\n    // 👇 Use any mock assertions on the function\n    await expect(revalidatePath).toHaveBeenCalledWith('/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework in Main Config\nDESCRIPTION: Configuration code for setting up the React-Vite framework in Storybook's main configuration file. Shows how to specify the framework in both JavaScript and TypeScript formats.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: \"@storybook/react-vite\",\n  stories: [\"../src/**/*.mdx\", \"../src/**/*.stories.@(js|jsx|mjs|ts|tsx)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Framework-Agnostic TypeScript Story\nDESCRIPTION: Generic implementation of a Storybook story using TypeScript that can be used with any framework. Uses play function to test select element interactions with timed delays between selections.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport const ExampleChangeEvent: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const select = canvas.getByRole('listbox');\n\n    await userEvent.selectOptions(select, ['One Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Another Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Yet another item']);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Addon Configurations in JavaScript\nDESCRIPTION: This snippet imports and re-exports configuration functions for webpack, Vite, and Babel. These functions are typically used to customize the build process in Storybook addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-local-preset.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webpackFinal as webpack } from './webpack/webpackFinal';\nimport { viteFinal as vite } from './vite/viteFinal';\nimport { babelDefault as babel } from './babel/babelDefault';\n\nexport const webpackFinal = webpack;\nexport const viteFinal = vite;\nexport const babelDefault = babel;\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with CSF in JavaScript\nDESCRIPTION: Shows how to configure a Svelte story using Component Story Format (CSF) in JavaScript. Uses the defineMeta helper from @storybook/addon-svelte-csf to set up the component with disabled table of contents.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n    tags: ['autodocs'],\n    parameters: {\n      docs: {\n        toc: {\n          disable: true, // 👈 Disables the table of contents\n        },\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Button Rendering with Locale Overrides in React (TypeScript)\nDESCRIPTION: This test suite checks localization of the Button component in a React application using Storybook. It leverages @storybook/react, @testing-library/react, and vitest for setting up, composing, and executing story-based tests. The 'composeStory' utility is used to generate the story with specified locale overrides, and 'Primary.run()' initiates execution; English and Spanish locales are tested individually.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-override-globals.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from 'vitest';\nimport { render } from '@testing-library/react';\nimport { composeStory } from '@storybook/react';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\ntest('renders in English', async () => {\n  const Primary = composeStory(\n    PrimaryStory,\n    meta,\n    { globals: { locale: 'en' } }, // 👉 Project annotations to override the locale\n  );\n\n  await Primary.run();\n});\n\ntest('renders in Spanish', async () => {\n  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });\n\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Config in TypeScript without Type Annotation\nDESCRIPTION: TypeScript implementation without explicit type annotation, using implicit typing. Includes framework specification, story pattern matching, and Vite configuration handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-vite-final.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async viteFinal(config, { configType }) {\n    const { mergeConfig } = await import('vite');\n\n    if (configType === 'DEVELOPMENT') {\n      // Your development configuration goes here\n    }\n    if (configType === 'PRODUCTION') {\n      // Your production configuration goes here.\n    }\n    return mergeConfig(config, {\n      // Your environment configuration here\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Component Metadata with Web Components in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to configure metadata for Storybook stories for web components. It specifies controls for a component named 'demo-example', allowing developers to engage with a numeric 'value' property interactively within defined parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      control: {\n        type: 'number',\n        min: 0,\n        max: 100,\n        step: 10,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in Vue CSF with JavaScript\nDESCRIPTION: Example of configuring accessibility parameters for a Vue component using Component Story Format (CSF) in JavaScript. Shows how to specify accessibility testing rules, elements to test, and manual control options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyComponent from './MyComponent.vue';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ExampleStory = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Preact Button Story - Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates registering a Button story in a Preact context for Storybook. The Button component is imported and set as the 'component' property in a default export object. The main dependency is the local './Button' module. This structure enables Storybook to generate stories for the Preact Button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\\n\\nexport default {\\n  component: Button,\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags for Common Framework using TypeScript 4.9\nDESCRIPTION: This snippet shows how to configure story tags for a common framework component using TypeScript 4.9. It demonstrates setting up default tags and adding specific tags to individual stories using the 'satisfies' operator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  /*\n   * All stories in this file will have these tags applied:\n   * - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExperimentalFeatureStory: Story = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Stories with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up story metadata for a Svelte component using TypeScript. It imports the necessary types, defines the component, and sets tags for documentation and development visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Exporting Component for DocsPage Props Table in JavaScript\nDESCRIPTION: This snippet demonstrates how to export a component property on stories metadata to use the props table in DocsPage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// MyComponent.stories.js\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  title: 'MyComponent',\n  component: MyComponent,\n};\n// stories etc...\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Story Implementation\nDESCRIPTION: Examples of writing Storybook stories for Svelte components using both CSF format and Svelte-specific syntax. Shows basic usage and prop passing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story name=\"Basic\">\n  <MyComponent />\n</Story>\n\n<Story name=\"WithProp\">\n  <MyComponent prop=\"value\" />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Angular Stories\nDESCRIPTION: Shows viewport configuration for Angular Storybook stories using TypeScript. Imports from @storybook/angular and sets up viewport options for the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { INITIAL_VIEWPORTS } from 'storybook/viewport';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n  parameters: {\n    viewport: {\n      //👇 Set available viewports for every story in the file\n      options: INITIAL_VIEWPORTS,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls with TypeScript 4.9+ Satisfies Operator\nDESCRIPTION: This snippet shows how to configure conditional controls in TypeScript 4.9 or later using the 'satisfies' operator for better type safety. It demonstrates various conditions for displaying controls based on the state of the 'parent' argument.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    parent: { control: 'select', options: ['one', 'two', 'three'] },\n\n    // 👇 Only shown when `parent` arg exists\n    parentExists: { if: { arg: 'parent', exists: true } },\n\n    // 👇 Only shown when `parent` arg does not exist\n    parentDoesNotExist: { if: { arg: 'parent', exists: false } },\n\n    // 👇 Only shown when `parent` arg value is truthy\n    parentIsTruthy: { if: { arg: 'parent' } },\n    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },\n\n    // 👇 Only shown when `parent` arg value is not truthy\n    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },\n\n    // 👇 Only shown when `parent` arg value is 'three'\n    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },\n\n    // 👇 Only shown when `parent` arg value is not 'three'\n    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },\n\n    // Each of the above can also be conditional on the value of a globalType, e.g.:\n\n    // 👇 Only shown when `theme` global exists\n    parentExists: { if: { global: 'theme', exists: true } },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook for Server in JavaScript\nDESCRIPTION: This snippet shows how to initialize Storybook for server-side rendering using npx. It sets up Storybook with the server template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nnpx storybook@latest init -t server\n```\n\n----------------------------------------\n\nTITLE: Vite Framework Configuration\nDESCRIPTION: Updated Storybook configuration for using Vite builder with various frameworks\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  framework: {\n    name: \"@storybook/[framework]-vite\", // replace [framework] with preact, vue3, or web-components\n    options: {},\n  },\n  // ... other configurations\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Telemetry Debug Mode in Storybook with NPM\nDESCRIPTION: A shell command that enables debug mode for Storybook's telemetry functionality when using npm. The STORYBOOK_TELEMETRY_DEBUG environment variable is set to 1 to output additional logging information about telemetry operations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-preview-event.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSTORYBOOK_TELEMETRY_DEBUG=1 npm run storybook\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Svelte Stories with TypeScript\nDESCRIPTION: This snippet shows how to create a Storybook story for a Svelte component using TypeScript and the Component Story Format (CSF). It demonstrates how to define a play function for simulating user interactions like typing and clicking elements within the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport MyComponent from './MyComponent.svelte';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const ExampleStory: Story = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Svelte using Svelte CSF with TypeScript\nDESCRIPTION: Creates a ButtonGroup story in Svelte using Svelte CSF format with TypeScript. Uses the defineMeta helper to define a story that composes Button stories into a ButtonGroup with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import ButtonGroup from './ButtonGroup.svelte';\n\n  //👇 Imports the Button stories\n  import * as ButtonStories from './Button.stories.svelte';\n\n  const { Story } = defineMeta({\n    component: ButtonGroup,\n  });\n</script>\n\n<Story\n  name=\"Pair\"\n  args={{\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Storybook in Create React App\nDESCRIPTION: This function modifies the Storybook webpack configuration for Create React App projects. It checks if react-scripts is installed and applies the CRA webpack config if present. Otherwise, it returns the base config.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpackfinal-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function webpackFinal(config, { configDir }) {\n  if (!isReactScriptsInstalled()) {\n    logger.info('=> Using base config because react-scripts is not installed.');\n    return config;\n  }\n\n  logger.info('=> Loading create-react-app config.');\n  return applyCRAWebpackConfig(config, configDir);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Storybook Story with Figma Link in TypeScript\nDESCRIPTION: Defines a Storybook story for a Vue component (`MyComponent.vue`) using standard TypeScript. It imports types from `@storybook/vue3` and the Vue component, defines explicitly typed metadata (`meta`), and exports an `Example` story with parameters linking to a Figma design file. Depends on `@storybook/vue3` and the Vue component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts\" renderer=\"vue\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Button Stories with TypeScript 4.9\nDESCRIPTION: Storybook stories for a Vue 3 Button component using TypeScript 4.9. Defines three button variants with custom render functions and emoji labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    background: '#ff0',\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    ...Primary.args,\n    label: '😄👍😍💯',\n  },\n};\n\nexport const Tertiary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    ...Primary.args,\n    label: '📚📕📈🤓',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for TypeScript Checkbox Component (with 'satisfies')\nDESCRIPTION: This snippet shows how to set up Storybook metadata for a Checkbox component using TypeScript with the 'satisfies' keyword. It imports the Meta type from the framework-specific Storybook package and defines the metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { CheckBox } from './Checkbox';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Checkbox',\n  component: CheckBox,\n} satisfies Meta<typeof CheckBox>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Story Context for Viewport Configuration in Playwright Tests\nDESCRIPTION: Shows how to use the getStoryContext helper function to access story parameters and configure Playwright's page viewport size based on the story's parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// @vitest-environment @storybook/test-runner\nimport { expect, test } from '@storybook/test-runner';\nimport type { Page } from '@playwright/test';\n\ntest('my test', async ({ page, context }: { page: Page; context: any }) => {\n  const storyContext = await context.getStoryContext();\n  const storyViewport = storyContext.parameters?.viewport;\n  // Check if the story has viewport parameters and await page has loaded\n  if (storyViewport && storyViewport.viewports) {\n    // Extract viewport & parameters\n    const viewportKey = storyViewport.defaultViewport;\n    const viewportParams = storyViewport.viewports[viewportKey];\n    // Set the viewport size\n    await page.setViewportSize({\n      width: viewportParams.width,\n      height: viewportParams.height,\n    });\n  }\n  // Run your tests\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Svelte with TypeScript\nDESCRIPTION: This snippet sets up the preview configuration for Svelte in Storybook using TypeScript. It imports the Preview type and a MarginDecorator component, then uses the MarginDecorator as a decorator for all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/svelte';\n\nimport MarginDecorator from './MarginDecorator.svelte';\n\nconst preview: Preview = {\n  decorators: [() => MarginDecorator],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in TypeScript\nDESCRIPTION: This snippet defines a preview configuration object for Storybook in TypeScript. It imports the Preview type from the framework-specific Storybook package and sets up a global theme type with a toolbar selector for light and dark themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-configure-globaltypes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  globalTypes: {\n    theme: {\n      description: 'Global theme for components',\n      toolbar: {\n        // The label to show for this toolbar item\n        title: 'Theme',\n        icon: 'circlehollow',\n        // Array of plain string values or MenuItem shape (see below)\n        items: ['light', 'dark'],\n        // Change title based on selected value\n        dynamicTitle: true,\n      },\n    },\n  },\n  initialGlobals: {\n    theme: 'light',\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Angular with TypeScript\nDESCRIPTION: This code demonstrates how to set up Storybook for an Angular Button component using TypeScript. It imports the Meta type from the Angular Storybook package and defines the metadata for the Button component stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in JavaScript for HTML Renderer\nDESCRIPTION: Creates a Storybook story for an HTML Button component with three variations using JavaScript. Each story uses the render function and a createButton helper to generate buttons with different labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createButton } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: (args) => createButton({ backgroundColor: '#ff0', label: 'Button' }),\n};\n\nexport const Secondary = {\n  render: (args) => createButton({ backgroundColor: '#ff0', label: '😄👍😍💯' }),\n};\n\nexport const Tertiary = {\n  render: (args) => createButton({ backgroundColor: '#ff0', label: '📚📕📈🤓' }),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story with Web Components in TypeScript\nDESCRIPTION: Demonstrates implementing a Button story for Web Components using TypeScript and lit-html templates. The example provides proper type annotations and renders a custom 'demo-button' element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  render: () => html`<demo-button primary></demo-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Coverage Addon in TypeScript\nDESCRIPTION: This snippet demonstrates the configuration of the Storybook Coverage addon in a TypeScript environment. It imports necessary types, defines coverage configuration, and sets up the addon with type-safe options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-config-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// For Vite support add the following import\n// import type { AddonOptionsVite } from '@storybook/addon-coverage';\n\nimport type { AddonOptionsWebpack } from '@storybook/addon-coverage';\n\n// Replace your-framework with the framework and builder you are using (e.g., react-webpack5, vue3-webpack5)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst coverageConfig: AddonOptionsWebpack = {\n  istanbul: {\n    include: ['**/stories/**'],\n    exclude: ['**/exampleDirectory/**'],\n  },\n};\n\nconst config: StorybookConfig = {\n  stories: [],\n  addons: [\n    // Other Storybook addons\n    {\n      name: '@storybook/addon-coverage',\n      options: coverageConfig,\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Mocking Next.js revalidatePath in Storybook with TypeScript 4.9+\nDESCRIPTION: Creates a Storybook story in TypeScript 4.9+ using the 'satisfies' operator for type validation. Mocks the Next.js revalidatePath function and tests it within a form submission scenario.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-cache-mock.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { revalidatePath } from '@storybook/nextjs/cache.mock';\n\nimport MyForm from './my-form';\n\nconst meta = {\n  component: MyForm,\n} satisfies Meta<typeof MyForm>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Submitted: Story = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n\n    const submitButton = canvas.getByRole('button', { name: /submit/i });\n    await userEvent.click(saveButton);\n    // 👇 Use any mock assertions on the function\n    await expect(revalidatePath).toHaveBeenCalledWith('/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TsconfigPathsPlugin in TypeScript\nDESCRIPTION: This snippet shows the TypeScript version of the Storybook configuration. It includes type definitions, sets up the framework, defines story locations, and integrates TsconfigPathsPlugin for webpack. The configuration is exported as a StorybookConfig type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nimport TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.plugins = [\n        ...(config.resolve.plugins || []),\n        new TsconfigPathsPlugin({\n          extensions: config.resolve.extensions,\n        }),\n      ];\n    }\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet exports the default configuration for Storybook using JavaScript. It specifies the framework, story locations, and addons to be used. The framework should be replaced with the specific framework being used in the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-individual-viewport-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-links', '@storybook/addon-viewport'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Storybook Stories for a Solid Component - TypeScript 4.9 Syntax\nDESCRIPTION: This TypeScript 4.9 example shows a Storybook story for a SolidJS component, using advanced TS satisfies syntax for Storybook meta typing. The render function computes a prop reactively with createSignal and createEffect, wiring to solid-js's reactivity system. Requires storybook-solidjs bindings, solid-js library, and awareness of Signal-based reactivity. Story args control the dynamic inputs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_5\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport { createSignal, createEffect } from 'solid-js';\\nimport type { Meta, StoryObj } from 'storybook-solidjs';\\n\\nimport { YourComponent } from './your-component';\\n\\nconst meta = {\\n  component: YourComponent,\\n  //\\uD83D\\uDC49 Creates specific argTypes with options\\n  argTypes: {\\n    propertyA: {\\n      options: ['Item One', 'Item Two', 'Item Three'],\\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\\n    },\\n    propertyB: {\\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\\n    },\\n  },\\n} satisfies Meta<typeof YourComponent>;\\n\\nexport default meta;\\ntype Story = StoryObj<typeof meta>;\\n\\nconst someFunction = (valuePropertyA, valuePropertyB) => {\\n  // Do some logic here\\n};\\n\\nexport const ExampleStory: Story = {\\n  render: (args) => {\\n    const [someFunctionResult, setSomeFunctionResult] = createSignal();\\n\\n    //\\uD83D\\uDC49 Assigns the function result to a signal\\n    createEffect(() => {\\n      setSomeFunctionResult(someFunction(args.propertyA, args.propertyB));\\n    });\\n\\n    return <YourComponent {...args} someProperty={someFunctionResult()} />;\\n  },\\n  args: {\\n    propertyA: 'Item One',\\n    propertyB: 'Another Item One',\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: React Storybook Preview Configuration in JavaScript\nDESCRIPTION: Sets up a Storybook preview configuration for React using JavaScript. Implements a global context provider as a decorator that wraps all stories with navigation context.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { normal as NavigationNormal } from '../components/Navigation.stories';\n\nimport GlobalContainerContext from '../components/lib/GlobalContainerContext';\n\nconst context = {\n  NavigationContainer: NavigationNormal,\n};\n\nconst AppDecorator = (storyFn) => {\n  return (\n    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>\n  );\n};\n\nexport default { decorators: [AppDecorator] };\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Stories with TypeScript 4.9 Satisfies Operator\nDESCRIPTION: Shows how to set up Storybook stories using TypeScript 4.9's satisfies operator for type checking. It imports the necessary types, configures the component metadata with proper type inference, and creates a story with environment variable props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    exampleProp: process.env.EXAMPLE_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Vue.js with Pinia (JavaScript)\nDESCRIPTION: This snippet sets up the Storybook preview for a Vue.js project using JavaScript. It integrates Pinia for state management and adds a decorator for story styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setup } from '@storybook/vue3';\n\nimport { createPinia } from 'pinia';\n\nsetup((app) => {\n  //👇 Registers a global Pinia instance inside Storybook to be consumed by existing stories\n  app.use(createPinia());\n});\n\nexport default {\n  decorators: [\n    (story) => ({\n      components: { story },\n      template: '<div style=\"margin: 3em;\"><story /></div>',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Common Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook stories for a common component using JavaScript. It imports the component, defines the default export with component and argTypes, suitable for frameworks like React or Vue.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    value: { type: 'number' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with npm\nDESCRIPTION: This command uses npx to run the Storybook initialization script for version 7 or higher using npm as the package manager. It sets up Storybook in the current project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-init-v7.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@^7 init\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook in Preact-Vite Project\nDESCRIPTION: Command to install Storybook in a new Preact project that doesn't already have Storybook installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook to Use Viewport Addon\nDESCRIPTION: JavaScript configuration to add the Viewport addon to Storybook. This code should be added to the .storybook/main.js file to enable the addon in your Storybook project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/viewport/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['storybook/viewport'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript React Docgen in Storybook\nDESCRIPTION: Configuration to opt-in to react-docgen-typescript instead of the default react-docgen for component analysis in .storybook/main.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    reactDocgen: \"react-docgen-typescript\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte with TypeScript (CSF 2)\nDESCRIPTION: Creates a default button story for Svelte components using TypeScript and CSF 2 format. Uses StoryFn type for proper typing and returns an object with Component and props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Other imports and story implementation\nexport const Default: StoryFn<typeof Button> = (args) => ({\n  Component: Button,\n  props: args,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Button Stories in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure controls for button stories using argTypes. It specifies a color control type for the button color property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Buttons\",\n  \"argTypes\": {\n    \"color\": { \"control\": { \"type\": \"color\" } }\n  },\n  \"stories\": [\n    {\n      \"name\": \"Red\",\n      \"parameters\": {\n        \"server\": {\n          \"id\": \"button\"\n        }\n      },\n      \"args\": { \"color\": \"red\", \"label\": \"Stop\" }\n    },\n    {\n      \"name\": \"Green\",\n      \"parameters\": {\n        \"server\": {\n          \"id\": \"button\"\n        }\n      },\n      \"args\": { \"color\": \"green\", \"label\": \"Go\" }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Login Form with JavaScript in Svelte\nDESCRIPTION: Implements Storybook stories for testing a login form component in Svelte using JavaScript. Includes interaction testing with form inputs and DOM assertions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, userEvent, within } from 'storybook/test';\n\nimport LoginForm from './LoginForm.svelte';\n\nexport default {\n  component: LoginForm,\n};\n\nexport const EmptyForm = {};\n\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n    await userEvent.click(canvas.getByRole('button'));\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for React List Component in JavaScript\nDESCRIPTION: This code configures Storybook stories for a React List component using JavaScript. It registers the List component with ListItem as a subcomponent and creates two stories: Empty and OneItem, with the latter rendering a ListItem inside the List.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nexport default {\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n};\n\nexport const Empty = {};\n\nexport const OneItem = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Highlight Channel in Web Components (JavaScript)\nDESCRIPTION: Shows how to use the highlight channel with Web Components in JavaScript. This example sets up a story for a custom element ('my-component') and uses a decorator to highlight specific elements with blue double-lined borders.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-addon-custom-style.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nexport default {\n  component: 'my-component',\n};\n\nexport const StyledHighlight = {\n  decorators: [\n    (story) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n        color: 'blue',\n        style: 'double', // 'dotted' | 'dashed' | 'solid' | 'double'\n      });\n      return story();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed User Typing in Storybook Play Function (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a delayed story using JavaScript in Storybook for web components. It uses the play function to simulate user typing with a delay between characters on multiple elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nexport default {\n  component: 'demo-my-component',\n};\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const DelayedStory = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const exampleElement = canvas.getByLabelText('example-element');\n\n    // The delay option sets the amount of milliseconds between characters being typed\n    await userEvent.type(exampleElement, 'random string', {\n      delay: 100,\n    });\n\n    const AnotherExampleElement = canvas.getByLabelText('another-example-element');\n    await userEvent.type(AnotherExampleElement, 'another random string', {\n      delay: 100,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in Angular Storybook\nDESCRIPTION: Sets up custom background options for a Button component in Angular Storybook. Defines dark and gray background options with specific color values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Override the default `dark` option\n        dark: { name: 'Dark', value: '#000' },\n        // 👇 Add a new option\n        gray: { name: 'Gray', value: '#CCC' },\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story Sorting in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook preview that customizes story sorting order. This exports a default configuration object with parameters for sorting stories alphabetically by their ID with numeric sorting enabled.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-sort-function.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    options: {\n      storySort: (a, b) =>\n        a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true }),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in React with JavaScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a React Button component using JavaScript. It imports the necessary action and component, sets up metadata, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  render: () => <Button label=\"Hello\" onClick={action('clicked')} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Svelte (TypeScript 4.9+)\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Svelte Button component using TypeScript 4.9+. It uses the 'satisfies' operator for type checking and defines a 'Primary' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\nimport { action } from 'storybook/actions';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  render: ({ label, click }) => ({\n    Component: Button,\n    props: {\n      label,\n    },\n    on: {\n      click,\n    },\n  }),\n  args: {\n    label: 'Hello',\n    click: action('clicked'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Storybook Story with Localization\nDESCRIPTION: TypeScript implementation of a Storybook story for Angular components with multilingual support. Uses Meta and StoryObj types from @storybook/angular and includes a locale-based greeting system.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nconst getCaptionForLocale = (locale) => {\n  switch (locale) {\n    case 'es':\n      return 'Hola!';\n    case 'fr':\n      return 'Bonjour!';\n    case 'kr':\n      return '안녕하세요!';\n    case 'zh':\n      return '你好!';\n    default:\n      return 'Hello!';\n  }\n};\n\nexport const StoryWithLocale: Story = {\n  render: (args, { globals: { locale } }) => {\n    const caption = getCaptionForLocale(locale);\n    return {\n      template: `<p>${caption}</p>`,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in SolidJS Storybook Stories with TypeScript 4.9+\nDESCRIPTION: Demonstrates how to add a margin decorator to a SolidJS Button component using TypeScript 4.9+ with the 'satisfies' operator. This provides better type checking while wrapping the Story component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Vue Storybook Stories with TypeScript 4.9+\nDESCRIPTION: Demonstrates how to add decorators to Vue components using TypeScript 4.9+ with the 'satisfies' operator. Includes a render function and applies a decorator that wraps the story with a margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => ({\n    components: { Button },\n    template: '<Button primary label=\"Hello World\" />',\n  }),\n  decorators: [() => ({ template: '<div style=\"margin: 3em;\"><story /></div>' })],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Vue Storybook Stories with JavaScript\nDESCRIPTION: Shows how to add decorators to Vue components using JavaScript. This example includes a render function for the Button component and applies a decorator that wraps the story with a div that has a margin of 3em.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => ({\n    components: { Button },\n    template: '<Button primary label=\"Hello World\" />',\n  }),\n  decorators: [() => ({ template: '<div style=\"margin: 3em;\"><story /></div>' })],\n};\n```\n\n----------------------------------------\n\nTITLE: Converting MDX Stories Migration Command\nDESCRIPTION: Command to automatically convert .stories.mdx files to the new MDX+CSF format required in Storybook 8.0. Transforms existing story files while preserving functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest migrate mdx-to-csf --glob=\"**/*.stories.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ProfilePage Stories in React\nDESCRIPTION: React implementation of a Storybook story for ProfilePage component. Shows how to set up context providers, import other component stories, and compose them together with props and containers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { ProfilePage } from './ProfilePage';\nimport { UserPosts } from './UserPosts';\n\n//👇 Imports a specific story from a story file\nimport { Normal as UserFriendsNormal } from './UserFriends.stories';\n\nexport default {\n  component: ProfilePage,\n};\n\nconst ProfilePageProps = {\n  name: 'Jimi Hendrix',\n  userId: '1',\n};\n\nconst context = {\n  //👇 We can access the `userId` prop here if required:\n  UserPostsContainer({ userId }) {\n    return <UserPosts {...UserPostsProps} />;\n  },\n  // Most of the time we can simply pass in a story.\n  // In this case we're passing in the `normal` story export\n  // from the `UserFriends` component stories.\n  UserFriendsContainer: UserFriendsNormal,\n};\n\nexport const Normal = {\n  render: () => (\n    <ProfilePageContext.Provider value={context}>\n      <ProfilePage {...ProfilePageProps} />\n    </ProfilePageContext.Provider>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Storybook Vue3 Renderer\nDESCRIPTION: This snippet defines the package.json configuration for the Storybook Vue3 renderer. It includes metadata, dependencies, and build scripts for the package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/vue3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@storybook/vue3\",\n  \"version\": \"7.5.0-alpha.0\",\n  \"description\": \"Storybook Vue 3 renderer\",\n  \"keywords\": [\n    \"storybook\"\n  ],\n  \"homepage\": \"https://github.com/storybookjs/storybook/tree/main/renderers/vue3\",\n  \"bugs\": {\n    \"url\": \"https://github.com/storybookjs/storybook/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/storybookjs/storybook.git\",\n    \"directory\": \"renderers/vue3\"\n  },\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/storybook\"\n  },\n  \"license\": \"MIT\",\n  \"exports\": {\n    \".\": {\n      \"node\": \"./dist/index.js\",\n      \"require\": \"./dist/index.js\",\n      \"import\": \"./dist/index.mjs\",\n      \"types\": \"./dist/index.d.ts\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist/**/*\",\n    \"template/**/*\",\n    \"README.md\",\n    \"*.js\",\n    \"*.d.ts\"\n  ],\n  \"scripts\": {\n    \"check\": \"node --loader ../../../scripts/node_modules/esbuild-register/loader.js -r ../../../scripts/node_modules/esbuild-register/register.js ../../../scripts/prepare/check.ts\",\n    \"prep\": \"node --loader ../../../scripts/node_modules/esbuild-register/loader.js -r ../../../scripts/node_modules/esbuild-register/register.js ../../../scripts/prepare/bundle.ts\"\n  },\n  \"dependencies\": {\n    \"@storybook/csf-tools\": \"7.5.0-alpha.0\",\n    \"@storybook/docs-tools\": \"7.5.0-alpha.0\",\n    \"@storybook/global\": \"^5.0.0\",\n    \"@storybook/manager-api\": \"7.5.0-alpha.0\",\n    \"@storybook/preview-api\": \"7.5.0-alpha.0\",\n    \"@storybook/types\": \"7.5.0-alpha.0\",\n    \"@types/node\": \"^16.0.0\",\n    \"ts-dedent\": \"^2.0.0\",\n    \"type-fest\": \"2.19.0\",\n    \"vue-component-type-helpers\": \"^1.8.8\",\n    \"vue-element-to-jsx-string\": \"^1.5.0\"\n  },\n  \"devDependencies\": {\n    \"@types/estree\": \"^1.0.0\",\n    \"@vitejs/plugin-vue\": \"^4.0.0\",\n    \"estree-walker\": \"^3.0.0\",\n    \"unplugin-vue-docgen\": \"^0.0.1\",\n    \"vite\": \"^4.0.0\",\n    \"vue\": \"^3.2.37\",\n    \"vue-tsc\": \"^1.0.3\"\n  },\n  \"peerDependencies\": {\n    \"@storybook/blocks\": \"7.5.0-alpha.0\",\n    \"react\": \"^16.8.0 || ^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^16.8.0 || ^17.0.0 || ^18.0.0\",\n    \"vue\": \"^3.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@storybook/blocks\": {\n      \"optional\": true\n    },\n    \"react\": {\n      \"optional\": true\n    },\n    \"react-dom\": {\n      \"optional\": true\n    }\n  },\n  \"engines\": {\n    \"node\": \">=16.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"bundler\": {\n    \"entries\": [\n      \"./src/index.ts\",\n      \"./src/preset.ts\"\n    ],\n    \"platform\": \"browser\"\n  },\n  \"gitHead\": \"e6a7fd8a655c69780bc20b9749c2699e44beae17\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Story in TypeScript for Solid.js\nDESCRIPTION: This snippet defines a Storybook story for a List component in TypeScript for Solid.js. It explicitly types the 'meta' object and imports the Unchecked story from ListItem.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const OneItem: Story = {\n  args: {\n    children: <Unchecked {...Unchecked.args} />,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: Basic JavaScript configuration for Storybook preview that sets the default layout parameter to 'centered'. Defines default parameters for all stories in the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-layout-param.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This snippet shows how to configure the main Storybook file using JavaScript. It exports an object that specifies the framework and the glob pattern for story files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Storybook Story with Figma Link in TypeScript\nDESCRIPTION: Defines a Storybook story for a React component (`MyComponent`) using standard TypeScript. It imports types from `@storybook/react` and the component, defines explicitly typed metadata (`meta`), and exports an `Example` story with parameters linking to a Figma design file. This relies on `@storybook/react` and the React component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts|tsx\" renderer=\"react\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Story with Non-Story Exports Example\nDESCRIPTION: Shows how to handle mixture of story and non-story exports in a single file using includeStories configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const simpleData = {\n  foo: 1,\n  bar: 2\n};\nexport const complexData = {\n  foo: 1,\n  bar: 2\n};\n\nexport const SimpleStory = {\n  name: 'Simple'\n};\n\nexport const ComplexStory = {\n  name: 'Complex'\n};\n\nexport default {\n  title: 'Misc/Imports',\n  includeStories: ['SimpleStory', 'ComplexStory']\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook's preview that sets up control matchers and a custom documentation container. It imports React and the DocsContainer component from Storybook's addon-docs package to create a wrapper for documentation rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-docs-container.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\n\nimport { DocsContainer } from '@storybook/addon-docs/blocks';\n\nconst ExampleContainer = ({ children, ...props }) => {\n  return <DocsContainer {...props}>{children}</DocsContainer>;\n};\n\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    docs: {\n      container: ExampleContainer,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript definitions for Storybook addons\nDESCRIPTION: Command to add TypeScript type definitions for Storybook addons after their migration to DefinitelyTyped in version 3.2.x.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_173\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @types/storybook__addon-notes @types/storybook__addon-options @types/storybook__addon-knobs @types/storybook__addon-links --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the Storybook framework in the main.ts file using TypeScript. It shows the process of switching from webpack5 to Vite as the build tool for React projects, including type definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/react-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  // framework: '@storybook/react-webpack5', 👈 Remove this\n  framework: '@storybook/react-vite', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for React with TypeScript\nDESCRIPTION: This snippet sets up the preview configuration for React in Storybook using TypeScript. It imports the Preview type, defines a decorator that wraps each story with a div element having a 3em margin, and includes a comment about using Story() instead of <Story/>.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\n\nimport { Preview } from '@storybook/react';\n\nconst preview: Preview = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in Angular Storybook\nDESCRIPTION: This snippet demonstrates how to set up a Button component story in Angular with a centered layout. It imports the necessary types from @storybook/angular, defines the metadata, and exports a story with the layout parameter set to 'centered'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const WithLayout: Story = {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Web Components in JavaScript\nDESCRIPTION: Creates a Storybook meta configuration for Web Components using JavaScript. Unlike other examples, this targets a custom element tag name ('demo-example') instead of a component import.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story in JavaScript\nDESCRIPTION: This snippet shows how to configure a Button story using JavaScript. It imports the Button component, sets up a default export with title, component, and parameters properties, and demonstrates how to disable a custom addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  parameters: {\n    myAddon: { disable: true }, // Disables the addon\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Generic Button Component in TypeScript\nDESCRIPTION: This generic TypeScript Storybook meta snippet uses standard Meta typing and an import placeholder for any framework. It includes argTypes with simple and conditional controls. Replace '@storybook/your-framework' with the appropriate framework adapter, and supply the actual Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the name of your framework\\nimport type { Meta } from '@storybook/your-framework';\\n\\nimport { Button } from './Button';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Svelte Gizmo Component with TypeScript\nDESCRIPTION: This Svelte component script configures Storybook controls for a Gizmo component using TypeScript. It uses the defineMeta helper from Storybook's Svelte CSF addon to define various control types that allow interactive manipulation of component properties in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Gizmo from './Gizmo.svelte';\n\n  const { Story } = defineMeta({\n    component: Gizmo,\n    argTypes: {\n      canRotate: {\n        control: 'boolean',\n      },\n      width: {\n        control: { type: 'number', min: 400, max: 1200, step: 50 },\n      },\n      height: {\n        control: { type: 'range', min: 200, max: 1500, step: 50 },\n      },\n      rawData: {\n        control: 'object',\n      },\n      coordinates: {\n        control: 'object',\n      },\n      texture: {\n        control: {\n          type: 'file',\n          accept: '.png',\n        },\n      },\n      position: {\n        control: 'radio',\n        options: ['left', 'right', 'center'],\n      },\n      rotationAxis: {\n        control: 'check',\n        options: ['x', 'y', 'z'],\n      },\n      scaling: {\n        control: 'select',\n        options: [10, 50, 75, 100, 200],\n      },\n      label: {\n        control: 'text',\n      },\n      meshColors: {\n        control: {\n          type: 'color',\n          presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n        },\n      },\n      revisionDate: {\n        control: 'date',\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Vue (TypeScript 4.9+)\nDESCRIPTION: This snippet shows how to create a Storybook story for a Vue Button component using TypeScript 4.9+. It uses the 'satisfies' operator for type checking and defines a 'Primary' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nimport { action } from 'storybook/actions';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return {\n        ...args,\n        onClick: action('clicked'),\n      };\n    },\n    template: '<Button @click=\"onClick\" :label=\"label\" />',\n  }),\n  args: {\n    label: 'Hello',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Solid in JavaScript\nDESCRIPTION: This snippet shows how to create stories for a Solid Button component using JavaScript. It sets up the component metadata, defines parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n};\n\nexport const Basic = {\n  render: () => <Button>Hello</Button>,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Common TypeScript Format\nDESCRIPTION: This snippet demonstrates how to define Storybook stories for a Button component using a common TypeScript format. It can be adapted for various frameworks and includes type annotations for improved type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addon Entry Points in JavaScript\nDESCRIPTION: Exports the necessary entry points for a Storybook addon, including preview annotations for story customization and manager entries for UI extensions. It also re-exports the preset configuration to provide all addon functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-root-preset.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const previewAnnotations = [require.resolve('./dist/preview')];\n\nexport const managerEntries = [require.resolve('./dist/manager')];\n\nexport * from './dist/preset';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with React and Webpack in JavaScript\nDESCRIPTION: The code snippet sets up a basic Storybook configuration using React and Webpack in JavaScript. It exports a default object that specifies the framework settings required by Storybook for React, adapted to use Webpack 5 with potential customizable options. This setup is essential for developers working on a JavaScript-based React project that leverages Storybook for isolated UI component development.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in TypeScript 4.9+ for Storybook\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Button component using TypeScript 4.9+. It uses the 'satisfies' keyword for type inference and includes type imports from Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hypothetical-example.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Sample: Story = {\n  render: () => ({\n    template: '<button :label=label />',\n    data: {\n      label: 'hello button',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Transformed Story with Source Snippet in JavaScript for Storybook CSF\nDESCRIPTION: This snippet demonstrates how the CSF plugin transforms a basic story by adding a static source snippet. It adds a 'storySource' parameter containing the original source code of the story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/csf-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = () => <Button />;\nBasic.parameters = {\n  storySource: {\n    source: '() => <Button />',\n  },\n  ...Basic.parameters,\n};\n```\n\n----------------------------------------\n\nTITLE: Typifying Button Meta with Framework Specification\nDESCRIPTION: This TypeScript snippet provides an example of configuring the Button component with a type evaluation for a specified framework. Using TypeScript’s `satisfies` operator ensures the `Meta` object complies with the component's type. Replace “your-framework” with the actual framework name used. Dependencies include Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  parameters: { actions: { argTypesRegex: '^on.*' } },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Storybook Preview for Generic Frameworks\nDESCRIPTION: Sets up a standard TypeScript Storybook preview configuration for any framework. Implements theme support by importing custom themes and using the globals context to select the appropriate theme.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., solid, qwik)\nimport { Preview } from '@storybook/your-framework';\n\nimport { MyThemes } from '../my-theme-folder/my-theme-file';\n\nconst preview: Preview = {\n  decorators: [\n    (story, context) => {\n      const selectedTheme = context.globals.theme || 'light';\n      const theme = MyThemes[selectedTheme];\n      // Your theme provider and other context providers goes in the return statement\n      return;\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Svelte\nDESCRIPTION: Svelte button component with exported properties for disabled state and content. Uses Svelte's component structure with script section for property definitions and markup for the button implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  /**\n   * A Button Component\n   * @component\n   */\n\n  /**\n   * Disable the button\n   * @required\n   */\n  export let disabled = false;\n\n  /**\n   * Button content\n   * @required\n   */\n  export let content = '';\n<script/>\n\n<button type=\"button\" {disabled}>{content}</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationBasedComponent Story in JavaScript\nDESCRIPTION: This snippet defines a default export for a NavigationBasedComponent story in Storybook using JavaScript. It sets up Next.js app directory and navigation segments in the parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-override-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nexport default {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n      navigation: {\n        segments: ['dashboard', 'analytics'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Document Screen Component (JavaScript)\nDESCRIPTION: Vue implementation using JavaScript with ref for reactive state management. Handles data fetching and different display states using v-if directives.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div v-if=\"!loading && data && data.subdocuments.length\">\n    <PageLayout :user=\"data.user\">\n      <DocumentHeader :document=\"data.document\" />\n      <DocumentList :documents=\"data.subdocuments\" />\n    </PageLayout>\n  </div>\n  <p v-if=\"loading\">Loading...</p>\n  <p v-if=\"error\">There was an error fetching the data!</p>\n</template>\n<script>\n  import { ref } from 'vue';\n\n  import PageLayout from './PageLayout';\n  import DocumentHeader from './DocumentHeader';\n  import DocumentList from './DocumentList';\n\n  export default {\n    name: 'DocumentScreen',\n    setup() {\n      const data = ref(null);\n      const loading = ref(true);\n      const error = ref(null);\n      fetch('https://your-restful-endpoint')\n        .then((res) => {\n          if (!res.ok) {\n            error.value = res.statusText;\n          }\n          return res;\n        })\n        .then((res) => res.json())\n        .then((requestData) => {\n          data.value = requestData;\n          loading.value = false;\n        })\n        .catch(() => {\n          error.value = 'error';\n        });\n      return {\n        error,\n        loading,\n        data,\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Vue in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook stories for a Vue Button component using standard TypeScript syntax. It imports types from '@storybook/vue3' and defines metadata with explicit typing and argTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  title: 'Button',\n  component: Button,\n  argTypes: {\n    onClick: {},\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TsconfigPathsPlugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook in JavaScript, including setting up the framework, defining story locations, and integrating TsconfigPathsPlugin for webpack. It uses the webpackFinal function to modify the webpack configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';\n\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.plugins = [\n        ...(config.resolve.plugins || []),\n        new TsconfigPathsPlugin({\n          extensions: config.resolve.extensions,\n        }),\n      ];\n    }\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Accessibility Testing in TypeScript\nDESCRIPTION: This snippet configures the Storybook test runner using TypeScript, setting up accessibility testing with axe-playwright. It injects axe before each story visit and performs accessibility checks after each visit, generating a detailed HTML report.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\nimport { injectAxe, checkA11y } from 'axe-playwright';\n\n/*\n * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api\n * to learn more about the test-runner hooks API.\n */\nconst config: TestRunnerConfig = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page) {\n    await checkA11y(page, 'body', {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Bumping package versions for Storybook release in Bash\nDESCRIPTION: Command to bump all package versions for a patch release using the Storybook release script.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn release:version --release-type patch\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Content in Storybook Documentation\nDESCRIPTION: This snippet demonstrates the use of Markdown in Storybook documentation. It includes a header and a simple greeting message.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/MetaOf.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Docs with of\n\nhello docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Tests in TypeScript Storybook Stories\nDESCRIPTION: Shows how to implement skip-test tags in Storybook stories using TypeScript with proper type definitions. Includes type imports from @storybook framework and demonstrates applying skip tags at both component and story levels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-skip-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n  tags: ['skip-test'], // 👈 Provides the `skip-test` tag to all stories in this file\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const SkipStory: Story = {\n  //👇 Adds the `skip-test` tag to this story to allow it to be skipped in the tests when enabled in the test-runner configuration\n  tags: ['skip-test'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript for Svelte Projects\nDESCRIPTION: TypeScript configuration for Storybook in a Svelte project. This configuration imports the StorybookConfig type for type safety, defines story file patterns, and includes the Svelte CSF addon for Component Story Format support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-svelte-csf-register.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your Svelte framework\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx|svelte)'],\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-svelte-csf',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Setup for Storybook with Vue\nDESCRIPTION: This snippet sets up Vitest for use with Storybook in a Vue project. It imports the required dependencies, sets project annotations, and runs Storybook's beforeAll hook. This configuration is specifically for Vue 3 projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations-simple.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from 'vitest';\nimport { setProjectAnnotations } from '@storybook/vue3';\nimport * as previewAnnotations from './preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations]);\n\n// Run Storybook's beforeAll hook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Updated Storybook Standalone Build Import\nDESCRIPTION: Example showing the new way to import and use Storybook's standalone build functionality in version 7.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nconst { build } = require(\"@storybook/core-server\");\nconst options = {};\nbuild(options).then(() => console.log(\"done\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing ArgTypes Block in MDX\nDESCRIPTION: Basic implementation of the ArgTypes block in an MDX documentation file to display component argument types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-argtypes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<ArgTypes of={ButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring @storybook/preset-create-react-app in main.js (Basic)\nDESCRIPTION: Demonstrates the basic configuration for Storybook 5.3.0 and newer by adding the preset to the `addons` array within the `module.exports` object in the `./.storybook/main.js` file. This automatically applies Create React App's Webpack and Babel configurations to Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  addons: ['@storybook/preset-create-react-app'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with JavaScript\nDESCRIPTION: JavaScript configuration for Storybook preview that defines a custom story sorting order. Stories are organized into sections including Intro, Pages (with nested Home, Login, and Admin pages), Components, and a WIP section.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages-and-wildcard.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    options: {\n      storySort: {\n        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components', '*', 'WIP'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Angular Storybook Stories in TypeScript\nDESCRIPTION: This snippet sets up a Storybook story for an Angular component using TypeScript. It defines component metadata with accessibility configurations, setting specific rules and options. Dependencies include Storybook's Angular integration and Axe-core for accessibility checks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      manual: true,\n    },\n  },\n};\n\nexport default meta;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Changelog in Storybook using MDX\nDESCRIPTION: This code imports the Meta and Markdown components from Storybook's addon-docs, as well as a raw Changelog markdown file. It then sets up a Storybook page titled 'Changelog' and renders the content of the Changelog file using the Markdown component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-custom-docs-markdown.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/addon-docs/blocks';\n\nimport Readme from '../../Changelog.md?raw';\n\n<Meta title=\"Changelog\" />\n\n# Changelog\n\n<Markdown>{Readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Solid (TypeScript 4.9)\nDESCRIPTION: TypeScript 4.9 implementation with satisfies operator for a Page component story in SolidJS. Uses ComponentProps from solid-js to extend the Page props with a footer property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from 'solid-js';\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Page } from './Page';\n\ntype PagePropsAndCustomArgs = ComponentProps<typeof Page> & { footer?: string };\n\nconst meta = {\n  component: Page,\n  render: ({ footer, ...args }) => (\n    <Page {...args}>\n      <footer>{footer}</footer>\n    </Page>\n  ),\n} satisfies Meta<PagePropsAndCustomArgs>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const CustomFooter = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Svelte (TypeScript 4.9)\nDESCRIPTION: TypeScript 4.9 implementation of a Storybook story for the Page component in Svelte using the CSF format. Uses defineMeta to create a story with a snippet that renders the Page with a custom footer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Page from './Page.svelte';\n\n  const { Story } = defineMeta({\n    component: Page\n  });\n</script>\n\n<Story name=\"CustomFooter\" args={{ footer: 'Built with Storybook' }}>\n  {#snippet children(args)}\n    <Page {...args} >\n      <footer>{args.footer}</footer>\n    </Page>\n  {/snippet}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for React in JavaScript\nDESCRIPTION: This snippet demonstrates how to create stories for a React Button component using JavaScript. It configures the component metadata, sets parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { Button } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n};\n\nexport const Basic = {\n  render: () => <Button>Hello</Button>,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in JavaScript for Common Renderers\nDESCRIPTION: Demonstrates setting up a Storybook story for a Button component in JavaScript, compatible with common renderers. Defines custom argTypes for the label property with a text control and custom description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Basic = {\n  argTypes: {\n    // 👇 This story expects a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript and React DocGen\nDESCRIPTION: Defines a Storybook configuration that specifies the framework, story file patterns, and TypeScript options. It includes custom React DocGen TypeScript settings with compiler options and a prop filter that excludes node_modules properties except those from @mui packages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-prop-filter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    reactDocgen: 'react-docgen-typescript',\n    reactDocgenTypescriptOptions: {\n      compilerOptions: {\n        allowSyntheticDefaultImports: false,\n        esModuleInterop: false,\n      },\n      // Filter out third-party props from node_modules except @mui packages.\n      propFilter: (prop) =>\n        prop.parent ? !/node_modules\\/(?!@mui)/.test(prop.parent.fileName) : true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for React with JavaScript\nDESCRIPTION: This snippet sets up the preview configuration for React in Storybook using JavaScript. It defines a decorator that wraps each story with a div element having a 3em margin, and includes a comment about using Story() instead of <Story/>.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nexport default {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration with Custom Plugin in JavaScript\nDESCRIPTION: A JavaScript function for extending Vite configuration in a Storybook addon. It adds a custom plugin to the Vite configuration and returns the modified config.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-viteFinal.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function ViteFinal(config, options = {}) {\n  config.plugins.push(\n    new MyCustomPlugin({\n      someOption: true,\n    }),\n  );\n\n  return config;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Storybook Components with Jest\nDESCRIPTION: This snippet shows how to set up a Jest test for a Vue Storybook component. It imports the required dependencies, composes the stories, and runs a test that executes the play function of the Primary story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-with-play-function.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@jest/globals';\nimport { composeStories } from '@storybook/vue3';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('renders and executes the play function', async () => {\n  // Mount story and run interactions\n  await Primary.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Autodocs in JavaScript Preview Configuration\nDESCRIPTION: Demonstrates how to configure the Storybook preview file in JavaScript to enable automatic documentation generation for all stories using the tags property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...rest of preview\n  //👇 Enables auto-generated documentation for all stories\n  tags: ['autodocs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Generic Button Story with TypeScript\nDESCRIPTION: Implements a Storybook story configuration for a Button component using standard TypeScript. Includes type annotations and click action handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\nimport { action } from 'storybook/actions';\n\nimport Button from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  args: {\n    // 👇 Create an action that appears when the onClick event is fired\n    onClick: action('on-click'),\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Configuration in Storybook\nDESCRIPTION: Example showing how to extend the default TypeScript configuration in Storybook's main.ts file to enable type checking and customize other TypeScript-related options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<CodeSnippets path=\"storybook-main-extend-ts-config.md\" />\n```\n\n----------------------------------------\n\nTITLE: Login Form Story with Play Function\nDESCRIPTION: Demonstrates how to use play functions to automate form interactions in stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const LoginForm = {\n  render: () => LoginForm,\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId('email'), 'example@email.com');\n    await userEvent.type(canvas.getByTestId('password'), 'password');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue 3 Storybook Preview with TypeScript 4.9 and Vuetify\nDESCRIPTION: Sets up Storybook preview for Vue 3 applications using TypeScript 4.9 and Vuetify. Provides the same functionality as the standard TypeScript version but uses TS 4.9 features for enhanced type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/vue3';\nimport { setup } from '@storybook/vue3';\n\nimport { VApp } from 'vuetify/components';\n\nimport { registerPlugins } from '../src/plugins';\n\nsetup((app) => {\n  // Registers your app's plugins including Vuetify into Storybook\n  registerPlugins(app);\n});\n\nconst preview: Preview = {\n  decorators: [\n    (story, context) => {\n      const theme = context.globals.theme || 'light';\n      return {\n        components: { story, VApp },\n        template: `\n          <v-app theme=\"${theme}\">\n            <div class=\"d-flex\">\n              <story/>\n            </div>\n          </v-app>\n      `,\n      };\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Referencing Storybook Builder Package in Markdown\nDESCRIPTION: This snippet mentions the separate implementation of the preview (iframe) side in pluggable builders, specifically referencing the @storybook/builder-webpack5 package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `@storybook/builder-webpack5`\n```\n\n----------------------------------------\n\nTITLE: Defining Default Button Story in CSF 3\nDESCRIPTION: Creates a default story export for a Button component using Component Story Format 3. This minimal implementation uses an empty object to define the default story state, letting Storybook use all component default props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-default-render.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Default = {};\n```\n\n----------------------------------------\n\nTITLE: Simulating Click with fireEvent in Storybook Play Function (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a Storybook story (`FireEventExample`) for a generic component. It demonstrates using the `play` function to trigger a click event on an element identified by its `data-testid` attribute using `@storybook/test`'s `fireEvent.click` and `within`. This interaction can also be logged in the Actions panel if configured.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const FireEventExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Instrumented Function Call Metadata\nDESCRIPTION: Demonstrates the structure of metadata for an instrumented function call, which is used to generate pseudo-code representations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ path: ['userEvent'], method: 'keyboard', args: ['hello'], ... }\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes using Svelte CSF Addon (JavaScript)\nDESCRIPTION: Defines Storybook metadata within a Svelte component file (`.svelte`) using the `@storybook/addon-svelte-csf` helper (`defineMeta`) in JavaScript. This approach embeds the story configuration directly in the Svelte file's `<script module>` block and hides the 'foo' property from the args table by configuring `argTypes`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"YourComponent.stories.svelte\" renderer=\"svelte\" language=\"js\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    argTypes: {\n      // foo is the property we want to remove from the UI\n      foo: {\n        table: {\n          disable: true,\n        },\n      },\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Vue (TypeScript 4.9)\nDESCRIPTION: TypeScript 4.9 implementation with satisfies operator for a Page component story in Vue. Uses vue-component-type-helpers to extend the component props with a footer property, and creates a template with a slot for the footer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// https://www.npmjs.com/package/vue-component-type-helpers\nimport type { ComponentProps } from 'vue-component-type-helpers';\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Page from './Page.vue';\n\ntype PagePropsAndCustomArgs = ComponentProps<typeof Page> & { footer?: string };\n\nconst meta = {\n  component: Page,\n  render: (args) => ({\n    components: { Page },\n    setup() {\n      return { args };\n    },\n    template: `\n      <page v-bind=\"args\">\n        <template v-slot:footer>\n          <footer v-if=\"args.footer\" v-html=\"args.footer\" />\n        </template>\n      </page>\n    `,\n  }),\n} satisfies Meta<PagePropsAndCustomArgs>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Component Story with CSF Format\nDESCRIPTION: Shows how to create a story for a Svelte component using Component Story Format (CSF) with the Svelte-specific addon. Uses the defineMeta helper for Svelte story configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  args={{\n    propertyA: process.env.STORYBOOK_DATA_KEY\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Storybook Addon Panel in JavaScript/TypeScript\nDESCRIPTION: Implements a React component that creates a custom addon panel for Storybook. The component uses the useStorybookState hook to detect the current view mode and conditionally renders different content based on whether the user is viewing documentation or a story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-usestorybookstate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { AddonPanel } from 'storybook/internal/components';\n\nimport { useStorybookState } from 'storybook/manager-api';\n\nexport const Panel = () => {\n  const state = useStorybookState();\n  return (\n    <AddonPanel {...props}>\n      {state.viewMode !== 'docs' ? (\n        <h2>Do something with the documentation</h2>\n      ) : (\n        <h2>Show the panel when viewing the story</h2>\n      )}\n    </AddonPanel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Story with JavaScript\nDESCRIPTION: This snippet shows a generic way to configure a Storybook story for a Page component using JavaScript. It imports the component and sets up the story configuration, disabling auto-generated documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Page } from './Page';\n\nexport default {\n  component: Page,\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Vue with TypeScript\nDESCRIPTION: This snippet sets up the preview configuration for Vue 3 in Storybook using TypeScript. It imports the Preview type and defines a decorator that wraps each story with a div element having a 3em margin using a Vue template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preview } from '@storybook/vue3';\n\nconst preview: Preview = {\n  decorators: [\n    (story) => ({\n      components: { story },\n      template: '<div style=\"margin: 3em;\"><story /></div>',\n    }),\n  ],\n};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Button Story in Storybook for Angular (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a basic Storybook story for an Angular Button component using TypeScript. It imports `Meta` from `@storybook/angular` and the `ButtonComponent`. The `meta` object configures the story's hierarchical title in the Storybook UI and links it to the actual component. A default export makes this configuration available to Storybook, and a named export `Button` defines the simplest possible story state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta } from '@storybook/angular';\n\nimport { Button as ButtonComponent } from './button.component';\n\nconst meta: Meta<ButtonComponent> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: ButtonComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonComponent>;\n\n// This is the only named export in the file, and it matches the component name\nexport const Button: Story = {};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in React with JavaScript\nDESCRIPTION: Sets up Storybook stories for a React Button component using JavaScript. Configures the component metadata and defines a primary button story with customized name and properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports a default configuration object that specifies the framework, story file patterns, and static directories. The framework should be replaced with the specific framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-static-dirs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  staticDirs: ['../public', '../static'],\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Storybook URL State\nDESCRIPTION: Demonstrates how to use the api.getUrlState() method to retrieve the application URL state, including overridden parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst urlState = api.getUrlState({\n  selected: 'your-story-id',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Svelte Component in JavaScript\nDESCRIPTION: A Svelte component showcasing bindings for user, document, and subdocument data displayed in a structured layout. The component does not rely on TypeScript types and allows defaults to be set in a script tag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n<script>\n  import PageLayout from './PageLayout.svelte';\n  import DocumentHeader from './DocumentHeader.svelte';\n  import DocumentList from './DocumentList.svelte';\n\n  export let user = {};\n  export let document = {};\n  export let subdocuments = [];\n</script>\n\n<div>\n  <PageLayout {user}>\n    <DocumentHeader {document} />\n    <DocumentList documents=\"{subdocuments}\" />\n  </PageLayout>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Automigrate Command\nDESCRIPTION: The automigrate command performs configuration checks and applies automatic migrations to update a Storybook project. It supports various options for customizing the migration process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nstorybook[@version] automigrate [fixId] [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in TypeScript Storybook with satisfies Operator\nDESCRIPTION: TypeScript implementation using the 'satisfies' operator (TS 4.9+) for type checking. This example is framework-agnostic and demonstrates how to type the metadata object while preserving type inference for stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const WithLayout: Story = {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common JavaScript Storybook Stories with Mocked Date\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a common JavaScript Page component with a mocked date. It uses MockDate to set a fixed date for all stories and includes a play function for the Default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport MockDate from 'mockdate';\n\nimport { getUserFromSession } from '#api/session.mock';\nimport { Page } from './Page';\n\nexport default {\n  component: Page,\n  // 👇 Set the value of Date for every story in the file\n  async beforeEach() {\n    MockDate.set('2024-02-14');\n\n    // 👇 Reset the Date after each story\n    return () => {\n      MockDate.reset();\n    };\n  },\n};\n\nexport const Default = {\n  async play({ canvasElement }) {\n    // ... This will run with the mocked Date\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component Props in JavaScript\nDESCRIPTION: Illustrates the changes in Button component API, replacing deprecated props with new 'variant' and 'size' props in Storybook 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n- <Button primary small>Click me</Button>\n+ <Button variant=\"primary\" size=\"small\">Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This snippet shows how to configure the main Storybook file in JavaScript. It specifies the framework, defines story file patterns, and registers the essential addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-essentials-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'], // 👈 Register addon-essentials\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in Angular Storybook\nDESCRIPTION: Sets up a Button component story with centered layout in Angular. Imports Meta type from @storybook/angular and applies the 'centered' layout parameter to the entire component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  // Sets the layout parameter component wide.\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object with type annotation, and exports it as the default. The framework should be replaced with the specific framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-static-dirs.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  staticDirs: ['../public', '../static'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with Accessibility Tests in JavaScript\nDESCRIPTION: This snippet illustrates how to create Storybook stories for a Button component in JavaScript. It includes accessibility testing configurations, showing how to set up stories that will fail on accessibility violations and others that will only show warnings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-example.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    a11y: { test: 'error' },\n  },\n};\n\n// 👇 This story will use the 'error' value and fail on accessibility violations\nexport const Primary = {\n  args: { primary: true },\n};\n\n// 👇 This story will not fail on accessibility violations\n//    (but will still run the tests and show warnings)\nexport const NoA11yFail = {\n  parameters: {\n    a11y: { test: 'todo' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Documentation Page Title\nDESCRIPTION: Sets the title of the Storybook documentation page to 'UtfSymbolsScroll' using the Meta component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/UtfSymbolScroll.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"UtfSymbolsScroll\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview TOC Options in TypeScript\nDESCRIPTION: This snippet sets up the Storybook preview configuration in TypeScript, importing the Preview type and customizing the Table of Contents options. It defines the same TOC settings as the JavaScript version but with type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-toc.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      toc: {\n        contentsSelector: '.sbdocs-content',\n        headingSelector: 'h1, h2, h3',\n        ignoreSelector: '#primary',\n        title: 'Table of Contents',\n        disable: false,\n        unsafeTocbotOptions: {\n          orderedList: false,\n        },\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Addon for Svelte CSF with npm\nDESCRIPTION: This command uses npx to add the @storybook/addon-svelte-csf package to a Svelte project using Storybook. It utilizes the latest version of Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest add @storybook/addon-svelte-csf\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Stories with JavaScript\nDESCRIPTION: Shows how to create Storybook stories for Web Components using JavaScript. It identifies the component by its tag name ('my-component') rather than a component reference, and exports a default story with environment variable props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n};\n\nexport const Default = {\n  args: {\n    exampleProp: process.env.EXAMPLE_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating A11y Addon Element Parameter in JavaScript\nDESCRIPTION: Shows how to replace the deprecated 'element' parameter with the new 'context' parameter in the A11y addon for Storybook 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MyStory = {\n  parameters: {\n    a11y: {\n-      element: '#my-target'\n+      context: '#my-target'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Coverage Addon in JavaScript\nDESCRIPTION: This snippet shows how to configure the Storybook Coverage addon in a JavaScript environment. It sets up the addon with specific include and exclude patterns for Istanbul coverage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-config-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [],\n  addons: [\n    // Other Storybook addons\n    {\n      name: '@storybook/addon-coverage',\n      options: {\n        istanbul: {\n          include: ['**/stories/**'],\n          exclude: ['**/exampleDirectory/**'],\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Action Event Handlers with HTML Events in Button Stories\nDESCRIPTION: Shows how to detect if a component is emitting the correct HTML events using the parameters.actions.handles parameter. This binds standard HTML event handlers to elements and triggers actions when events occur.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = {\n  parameters: {\n    actions: {\n      handles: ['mouseover', 'click .btn'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the Storybook framework in a TypeScript file. It imports the StorybookConfig type, defines a configuration object, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/react-webpack5';\n\nconst config: StorybookConfig = {\n  // ...\n  framework: '@storybook/react-webpack5', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Suite in Shell\nDESCRIPTION: Command to execute the Storybook test suite, which verifies that the local setup is functioning correctly before making code changes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the configuration object, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-static-dirs-with-object.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  staticDirs: [{ from: '../my-custom-assets/images', to: '/assets' }],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Story in TypeScript for React\nDESCRIPTION: This snippet defines a Storybook story for a List component in TypeScript for React. It explicitly types the 'meta' object and imports the Unchecked story from ListItem.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const OneItem: Story = {\n  args: {\n    children: <Unchecked {...Unchecked.args} />,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Play Function for Web Components in JavaScript\nDESCRIPTION: This snippet demonstrates a Storybook play function for Web Components using JavaScript. It shows how to interact with a custom element and simulate form submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nexport default {\n  component: 'my-component',\n};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter email and password', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Coverage with PNPM\nDESCRIPTION: Executes Storybook test coverage using PNPM package manager. The command runs the test-storybook script with the coverage flag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-coverage.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook --coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Native Web with Vite in TypeScript\nDESCRIPTION: This code snippet demonstrates the TypeScript configuration for Storybook using React Native Web with Vite. It imports the StorybookConfig type, defines the configuration object, and exports it as the default configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { StorybookConfig } from '@storybook/react-native-web-vite';\n\nconst config: StorybookConfig = {\n  addons: [\n    '@storybook/addon-react-native-web', // 👈 Remove the addon\n  ],\n  // Replace @storybook/react-webpack5 with the Vite framework\n  framework: '@storybook/react-native-web-vite',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: React Document Screen Component with TypeScript\nDESCRIPTION: TypeScript version of the React Document Screen component with type annotations for state management. Uses a custom hook for data fetching and handles loading/error states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\n\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nfunction useFetchData() {\n  const [status, setStatus] = useState<string>('idle');\n  const [data, setData] = useState<any[]>([]);\n  useEffect(() => {\n    setStatus('loading');\n    fetch('https://your-restful-endpoint')\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res;\n      })\n      .then((res) => res.json())\n      .then((data) => {\n        setStatus('success');\n        setData(data);\n      })\n      .catch(() => {\n        setStatus('error');\n      });\n  }, []);\n\n  return {\n    status,\n    data,\n  };\n}\n\nexport function DocumentScreen() {\n  const { status, data } = useFetchData();\n\n  const { user, document, subdocuments } = data;\n\n  if (status === 'loading') {\n    return <p>Loading...</p>;\n  }\n  if (status === 'error') {\n    return <p>There was an error fetching the data!</p>;\n  }\n  return (\n    <PageLayout user={user}>\n      <DocumentHeader document={document} />\n      <DocumentList documents={subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component Stories with TypeScript\nDESCRIPTION: Sets up Storybook stories for an Angular component using TypeScript. It imports Meta and StoryObj types from the Angular Storybook package, configures metadata for the component, and exports a default story with an environment variable as a prop.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent';\n\n// To apply a set of backgrounds to all stories of Button:\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Default: Story = {\n  args: {\n    exampleProp: process.env.EXAMPLE_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in JavaScript\nDESCRIPTION: Framework-agnostic JavaScript configuration for Button component stories. Demonstrates setting default and story-specific background parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-default.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      // 👇 Set default background value for all component stories\n      default: 'Gray',\n    },\n  },\n};\n\nexport const OnDark = {\n  parameters: {\n    backgrounds: {\n      // 👇 Override default background value for this story\n      default: 'Dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with CSF Module\nDESCRIPTION: This snippet shows how to configure a Storybook story for a Svelte Page component using the CSF module. It imports the necessary functions and component, and disables auto-generated documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Page from './Page.svelte';\n\n  const { Story } = defineMeta({\n    component: Page,\n    // 👇 Disable auto-generated documentation for this component\n    tags: ['!autodocs'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook using pnpm\nDESCRIPTION: This command upgrades Storybook to the latest version using pnpm. It uses pnpm dlx to execute the Storybook upgrade command without installing it globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-prerelease.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@next upgrade\n```\n\n----------------------------------------\n\nTITLE: Story Tags Configuration\nDESCRIPTION: Example of using tags to categorize stories and enable automatic documentation generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    title: 'Example/Button',\n    component: Button,\n    tags: ['autodocs']\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Doctor with npm\nDESCRIPTION: Executes the Storybook doctor command using npx to diagnose and fix issues in a Storybook installation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-doctor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest doctor\n```\n\n----------------------------------------\n\nTITLE: Updated Grid Parameter Configuration\nDESCRIPTION: New way to configure grid parameters within the backgrounds addon configuration in Storybook 6.1.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_131\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = () => <Button />\nBasic.parameters: {\n  backgrounds: {\n    grid: {\n      disable: false,\n      cellSize: 20,\n      opacity: 0.5,\n      cellAmount: 5,\n      offsetX: 16,\n      offsetY: 16,\n    }\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Functionality in TypeScript\nDESCRIPTION: Demonstrates the correct way to import Storybook functionality for consumers. This approach ensures compatibility with future versions of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addons } from 'storybook/manager-api';\n```\n\n----------------------------------------\n\nTITLE: Registering Storybook Addon and Selecting Story\nDESCRIPTION: Shows how to register a custom Storybook addon using addons.register() and use the API to programmatically select a specific story. The code selects the 'Default' story of the 'Button' component using the provided API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-selectstory.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddons.register('my-organisation/my-addon', (api) => {\n  api.selectStory('Button', 'Default');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook test runner with proper type definitions. Implements post-visit snapshot testing by capturing the innerHTML of the story root element (#storybook-root) and comparing it against stored snapshots.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-dom-snapshot-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  async postVisit(page, context) {\n    // the #storybook-root element wraps the story. In Storybook 6.x, the selector is #root\n    const elementHandler = await page.$('#storybook-root');\n    const innerHTML = await elementHandler.innerHTML();\n    expect(innerHTML).toMatchSnapshot();\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Dark Background in Svelte CSF (TypeScript 4.9)\nDESCRIPTION: This snippet shows how to create a Button story in Svelte using Component Story Format (CSF) with TypeScript 4.9. It sets up a story with a dark background using story-level parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<!-- 👇 Story-level parameters-->\n<Story\n  name=\"OnDark\"\n  parameters={{\n    backgrounds: { default: 'dark' }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Angular with TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Button component in Angular using TypeScript. It defines a primary button story with specific props using Angular's render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => ({\n    props: {\n      label: 'Button',\n      primary: true,\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Vue3 Page Story with JavaScript\nDESCRIPTION: Storybook story for Vue3 Page component using JavaScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport const Default = {\n  play: async ({ mount, args }) => {\n    const note = await db.note.create({\n      data: { title: 'Mount inside of play' },\n    });\n\n    const canvas = await mount(\n      Page,\n      // 👇 Pass data that is created inside of the play function to the component\n      //   For example, a just-generated UUID\n      { props: { ...args, params: { id: String(note.id) } } },\n    );\n\n    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));\n  },\n  argTypes: {\n    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.\n    params: { control: { disable: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in React Storybook (JS)\nDESCRIPTION: JavaScript implementation of background options for React components in Storybook. Defines custom dark and gray themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Override the default `dark` option\n        dark: { name: 'Dark', value: '#000' },\n        // 👇 Add a new option\n        gray: { name: 'Gray', value: '#CCC' },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Panel in Storybook 9.0 with JavaScript\nDESCRIPTION: Demonstrates how to enable the Code Panel feature, which replaces the deprecated @storybook/addon-storysource addon in Storybook 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  docs: {\n    source: {\n      codePanel: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in TypeScript 4.9+ (Common Framework)\nDESCRIPTION: Sets up Button component stories using TypeScript 4.9+ with the 'satisfies' operator for type checking. This approach allows TypeScript to infer the type while still providing type safety for the meta object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  // Sets the layout parameter component wide.\n  parameters: {\n    layout: 'centered',\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Svelte with TypeScript 4.9+ using CSF\nDESCRIPTION: This code demonstrates creating a Storybook story for a Histogram component in Svelte using TypeScript 4.9+ with the satisfies operator. It imports from @storybook/svelte and uses modern TypeScript features for type safety while maintaining type inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Histogram from './Histogram.svelte';\n\nconst meta = {\n  component: Histogram,\n} satisfies Meta<typeof Histogram>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components Button Story in TypeScript\nDESCRIPTION: This snippet defines a Storybook story for a Web Component ('demo-button') using TypeScript. It imports `Meta` and `StoryObj` from '@storybook/web-components'. The `meta` object specifies the component using its tag name string 'demo-button'. A typed `Primary` story is exported with `args` setting the `variant` to 'primary'. This assumes the 'demo-button' custom element is registered.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework for Vue 3 with Vite in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the Storybook framework for Vue 3 using Vite in a TypeScript file. It imports the StorybookConfig type, defines a configuration object with the framework property, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/vue3-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  framework: '@storybook/vue3-vite', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Svelte Storybook using Svelte CSF (TypeScript)\nDESCRIPTION: Defines Storybook metadata for a Svelte `Button` component using `@storybook/addon-svelte-csf`'s `defineMeta` within a `<script module>` block with TypeScript. It sets up mutually exclusive conditional controls for `label` (text input) and `image` (select input) props via `argTypes.if`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"ts\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    argTypes: {\n      // Button can be passed a label or an image, not both\n      label: {\n        control: 'text',\n        if: { arg: 'image', truthy: false },\n      },\n      image: {\n        control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n        if: { arg: 'label', truthy: false },\n      },\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright Component Testing with Storybook for React\nDESCRIPTION: Configures Playwright's component testing for React integration with Storybook. Imports necessary annotations from Storybook preview and addons, then sets up the project annotations and beforeAll hook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-compose-stories.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/experimental-ct-react';\nimport { setProjectAnnotations } from '@storybook/react';\n// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this\nimport * as addonAnnotations from 'my-addon/preview';\nimport * as previewAnnotations from './.storybook/preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n\n// Supports beforeAll hook from Storybook\ntest.beforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: Exports a default configuration object for Storybook preview that defines global argTypes. It sets up a text control for the label argument and overwrites its description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  argTypes: {\n    // 👇 All stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in TypeScript Test Runner\nDESCRIPTION: TypeScript implementation of a test runner configuration that sets Bearer token authorization headers with type safety using TestRunnerConfig interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  getHttpHeaders: async (url) => {\n    const token = url.includes('prod') ? 'prod-token' : 'dev-token';\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Story Re-export Pattern for Component Stories\nDESCRIPTION: Shows how to properly split component stories across multiple files while avoiding duplicate title warnings\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_149\n\nLANGUAGE: javascript\nCODE:\n```\nexport default { title: 'foo/bar' };\nexport * from './Bar1.stories'\nexport * from './Bar2.stories'\nexport * from './Bar3.stories'\n\nexport const SomeStory = () => ...;\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom URL Indexer in Storybook\nDESCRIPTION: Storybook configuration that implements a custom indexer for URL collections. The indexer processes URL files, extracts story metadata, and formats titles appropriately for the sidebar.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/svelte-vite';\nimport type { Indexer } from 'storybook/internal/types';\n\nconst urlIndexer: Indexer = {\n  test: /\\.url\\.js$/,\n  createIndex: async (fileName, { makeTitle }) => {\n    const fileData = await import(fileName);\n\n    return Object.entries(fileData)\n      .filter(([key]) => key != 'default')\n      .map(([name, url]) => {\n        return {\n          type: 'docs',\n          importPath: fileName,\n          exportName: name,\n          title: makeTitle(name)\n            .replace(/([a-z])([A-Z])/g, '$1 $2')\n            .trim(),\n          __id: `url--${name}--${encodeURIComponent(url as string)}`,\n          tags: ['!autodocs', 'url']\n        };\n      });\n  }\n};\n\nconst config: StorybookConfig = {\n  stories: ['../src/**/*.stories.@(js|ts|svelte)', '../src/**/*.url.js'],\n  framework: {\n    name: '@storybook/svelte-vite',\n    options: {},\n  },\n  experimental_indexers: async (existingIndexers) => [urlIndexer, ...existingIndexers]\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Svelte CSF with TypeScript\nDESCRIPTION: Shows how to set component parameters in Svelte using TypeScript with the Meta type from '@storybook/svelte'. The example configures the backgrounds parameter for a Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Extending Vue Application in Storybook Preview\nDESCRIPTION: Demonstrates how to use the setup function to extend the Vue application in Storybook's preview.js file. This allows adding custom components, directives, plugins, and mixins to the Storybook environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setup } from '@storybook/vue3';\n\nsetup((app) => {\n  app.use(MyPlugin);\n  app.component('my-component', MyComponent);\n  app.mixin({\n    // My mixin\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Storybook UI Components with CSS\nDESCRIPTION: This CSS snippet defines styles for various Storybook UI components, including containers, sections, grids, and responsive designs for different screen sizes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n  .sb-container {\n    margin-bottom: 48px;\n  }\n\n  .sb-section {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    gap: 20px;\n  }\n\n  img {\n    object-fit: cover;\n  }\n\n  .sb-section-title {\n    margin-bottom: 32px;\n  }\n\n  .sb-section a:not(h1 a, h2 a, h3 a) {\n    font-size: 14px;\n  }\n\n  .sb-section-item, .sb-grid-item {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .sb-section-item-heading {\n    padding-top: 20px !important;\n    padding-bottom: 5px !important;\n    margin: 0 !important;\n  }\n  .sb-section-item-paragraph {\n    margin: 0;\n    padding-bottom: 10px;\n  }\n\n  .sb-chevron {\n    margin-left: 5px;\n  }\n\n  .sb-features-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 32px 20px;\n  }\n\n  .sb-socials {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  .sb-socials p {\n    margin-bottom: 10px;\n  }\n\n  .sb-explore-image {\n    max-height: 32px;\n    align-self: flex-start;\n  }\n\n  .sb-addon {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    position: relative;\n    background-color: #EEF3F8;\n    border-radius: 5px;\n    border: 1px solid rgba(0, 0, 0, 0.05);\n    background: #EEF3F8;\n    height: 180px;\n    margin-bottom: 48px;\n    overflow: hidden;\n  }\n\n  .sb-addon-text {\n    padding-left: 48px;\n    max-width: 240px;\n  }\n\n  .sb-addon-text h4 {\n    padding-top: 0px;\n  }\n\n  .sb-addon-img {\n    position: absolute;\n    left: 345px;\n    top: 0;\n    height: 100%;\n    width: 200%;\n    overflow: hidden;\n  }\n\n  .sb-addon-img img {\n    width: 650px;\n    transform: rotate(-15deg);\n    margin-left: 40px;\n    margin-top: -72px;\n    box-shadow: 0 0 1px rgba(255, 255, 255, 0);\n    backface-visibility: hidden;\n  }\n\n  @media screen and (max-width: 800px) {\n    .sb-addon-img {\n      left: 300px;\n    }\n  }\n\n  @media screen and (max-width: 600px) {\n    .sb-section {\n      flex-direction: column;\n    }\n\n    .sb-features-grid {\n      grid-template-columns: repeat(1, 1fr);\n    }\n\n    .sb-socials {\n      grid-template-columns: repeat(2, 1fr);\n    }\n\n    .sb-addon {\n      height: 280px;\n      align-items: flex-start;\n      padding-top: 32px;\n      overflow: hidden;\n    }\n\n    .sb-addon-text {\n      padding-left: 24px;\n    }\n\n    .sb-addon-img {\n      right: 0;\n      left: 0;\n      top: 130px;\n      bottom: 0;\n      overflow: hidden;\n      height: auto;\n      width: 124%;\n    }\n\n    .sb-addon-img img {\n      width: 1200px;\n      transform: rotate(-12deg);\n      margin-left: 0;\n      margin-top: 48px;\n      margin-bottom: -40px;\n      margin-left: -24px;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Angular Storybook Preview Configuration (TypeScript)\nDESCRIPTION: Configures a component wrapper decorator for Angular Storybook that applies different layout classes based on parameters. Supports 'page' and 'page-mobile' layouts with corresponding div wrappers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/angular';\nimport { componentWrapperDecorator } from '@storybook/angular';\n\nconst preview: Preview = {\n  decorators: [\n    componentWrapperDecorator((story, { parameters }) => {\n      const { pageLayout } = parameters;\n      switch (pageLayout) {\n        case 'page':\n          return `<div class=\"page-layout\">${story}</div>`;\n        case 'page-mobile':\n          return `<div class=\"page-mobile-layout\">${story}</div>`;\n        default:\n          return story;\n      }\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Building Storybook with Test Flag using npm\nDESCRIPTION: This command builds Storybook with the test flag using npm. It runs the 'build-storybook' script with the '--test' option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-build-test-flag.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build-storybook -- --test\n```\n\n----------------------------------------\n\nTITLE: Setting View Mode for Individual Story in JavaScript\nDESCRIPTION: This snippet demonstrates how to control the view mode for an individual story using the viewMode story parameter. It sets the view mode to 'story' whenever the user navigates to this specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Foo = () => <Component />;\nFoo.parameters = {\n  // reset the view mode to \"story\" whenever the user navigates to this story\n  viewMode: 'story',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Loading in Storybook main.js\nDESCRIPTION: Demonstrates how to configure story loading using the stories field in main.js, showing both glob pattern and explicit file list approaches\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_148\n\nLANGUAGE: javascript\nCODE:\n```\n// in .storybook/main.js\nmodule.exports = {\n  stories: [\"../src/**/*.stories.js\"],\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// in .storybook/main.js\nmodule.exports = {\n  stories: [\n    \"../src/components/Button.stories.js\",\n    \"../src/components/Table.stories.js\",\n    \"../src/components/Page.stories.js\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with React Hooks in JavaScript\nDESCRIPTION: This snippet shows how to create a Storybook story for a Button component in React using hooks (useState). It demonstrates managing state with hooks to create an interactive button that changes appearance when clicked.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n * Example Button story with React Hooks.\n * See note below related to this example.\n */\nconst ButtonWithHooks = () => {\n  // Sets the hooks for both the label and primary props\n  const [value, setValue] = useState('Secondary');\n  const [isPrimary, setIsPrimary] = useState(false);\n\n  // Sets a click handler to change the label's value\n  const handleOnChange = () => {\n    if (!isPrimary) {\n      setIsPrimary(true);\n      setValue('Primary');\n    }\n  };\n  return <Button primary={isPrimary} onClick={handleOnChange} label={value} />;\n};\n\nexport const Primary = {\n  render: () => <ButtonWithHooks />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Named Block Polyfill for Ember\nDESCRIPTION: This code demonstrates how to configure Storybook to work with the named-block-polyfill in an Ember application. It imports the polyfill and adds it to the Storybook framework options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/ember/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport namedBlockPolyfill from 'ember-named-blocks-polyfill/lib/named-blocks-polyfill-plugin';\n\nexport default {\n  framework: {\n    name: '@storybook/ember',\n    options: {\n      polyfills: [namedBlockPolyfill],\n    }\n  },\n  [...]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining List Stories in Angular\nDESCRIPTION: This snippet shows how to create Storybook stories for an Angular List component. It includes stories for empty, one item, and many items configurations using the @storybook/angular module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { List } from './list.component';\nimport { ListItem } from './list-item.component';\n\nconst meta: Meta<List> = {\n  component: List,\n  decorators: [\n    moduleMetadata({\n      declarations: [List, ListItem],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<List>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {\n  render: (args) => ({\n    props: args,\n    template: '<app-list></app-list>',\n  }),\n};\n\nexport const OneItem: Story = {\n  render: (args) => ({\n    props: args,\n    template: `\n      <app-list>\n        <app-list-item></app-list-item>\n      </app-list>`,\n  }),\n};\n\nexport const ManyItems: Story = {\n  render: (args) => ({\n    props: args,\n    template: `\n      <app-list>\n        <app-list-item></app-list-item>\n        <app-list-item></app-list-item>\n        <app-list-item></app-list-item>\n      </app-list>\n    `,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in React with JavaScript\nDESCRIPTION: Shows how to create a List component story in React using JavaScript. This example demonstrates importing ListItem stories and using React's JSX syntax to compose a list with multiple items.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nexport default {\n  component: List,\n};\n\nexport const ManyItems = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem {...Selected.args} />\n      <ListItem {...Unselected.args} />\n      <ListItem {...Unselected.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta in Angular with TypeScript\nDESCRIPTION: Defines a Storybook Meta configuration for an Angular component with TypeScript. Imports the Meta type from '@storybook/angular' and sets up the component with custom argTypes that provide friendly names for arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    actualArgName: {\n      name: 'Friendly name',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in SolidJS with JavaScript\nDESCRIPTION: Sets up Storybook stories for a SolidJS Button component using JavaScript. Configures the component metadata and defines a primary button story with customized name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in Svelte Storybook (JS)\nDESCRIPTION: JavaScript implementation of background options for Svelte components using CSF format. Sets up dark and gray themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    parameters: {\n      backgrounds: {\n        options: {\n          // 👇 Override the default `dark` option\n          dark: { name: 'Dark', value: '#000' },\n          // 👇 Add a new option\n          gray: { name: 'Gray', value: '#CCC' },\n        },\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Solid Storybook Preview Configuration in JavaScript\nDESCRIPTION: JavaScript implementation of Storybook preview configuration for the Solid framework. Exports decorators with global context provider.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { normal as NavigationNormal } from '../components/Navigation.stories';\n\nimport GlobalContainerContext from '../components/lib/GlobalContainerContext';\n\nconst context = {\n  NavigationContainer: NavigationNormal,\n};\n\nconst AppDecorator = (storyFn) => {\n  return (\n    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>\n  );\n};\nexport const decorators = [AppDecorator];\n```\n\n----------------------------------------\n\nTITLE: Vue Component Story Implementation\nDESCRIPTION: Shows how to create Storybook stories for Vue components using both JavaScript and TypeScript. Demonstrates template-based rendering and prop passing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Basic: Story = {\n  render: () => ({\n    components: { MyComponent },\n    template: '<MyComponent />',\n  }),\n};\n\nexport const WithProp: Story = {\n  render: () => ({\n    components: { MyComponent },\n    template: '<MyComponent prop=\"value\"/>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SolidJS Storybook Stories with TypeScript\nDESCRIPTION: Standard TypeScript implementation of LoginForm stories for SolidJS in Storybook. Defines typed stories with a play function that simulates user interactions and tests the login flow.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { expect, within, userEvent } from 'storybook/test';\n\nimport { LoginForm } from './LoginForm';\n\nconst meta: Meta<typeof LoginForm> = {\n  component: LoginForm,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof LoginForm>;\n\nexport const EmptyForm: Story = {};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // 👇 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // 👇 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components Storybook Button Stories (TypeScript)\nDESCRIPTION: Provides a TypeScript version of a Storybook story for a custom Web Component ('demo-button'). Meta is typed and the story uses standard args. Only requires a registered 'demo-button' element and Storybook's @storybook/web-components. Ensures basic type safety for Web Component storying.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook stories for a Web Components Button using TypeScript. It imports types from '@storybook/web-components', defines metadata with explicit typing, and exports a story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'custom-button',\n  argTypes: {\n    onClick: { action: 'onClick' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet exports the default configuration for Storybook using JavaScript. It specifies the framework, story file patterns, addons, and build settings for testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-optimized-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-coverage',\n  ],\n  build: {\n    test: {\n      disabledAddons: ['@storybook/addon-docs', '@storybook/addon-essentials/docs'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Button Documentation\nDESCRIPTION: Sets up auto-generated documentation for an Angular Button component using TypeScript. Defines metadata using the @storybook/angular Meta type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './Button';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  //👇 Enables auto-generated documentation for this component and includes all stories in this file\n  tags: ['autodocs'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Specifying Preset Color Swatches for Color Controls\nDESCRIPTION: Demonstrates how to define preset color swatches for color controls in Storybook. This can be done either in argTypes or as a parameter under the controls namespace.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  controls: {\n    presetColors: [\n      { color: '#ff4785', title: 'Coral' },\n      { color: '#1EA7FD', title: 'Ocean' },\n      { color: 'rgba(0, 159, 183, 1)', title: 'Aqua' },\n      { color: '#FC521F', title: 'Peach' },\n      { color: 'deeppink', title: 'Deep Pink' },\n      { color: '#FFAE00', title: 'Gold' },\n      { color: 'navy' },\n      { color: '#243B53', title: 'Dark Blue' },\n      { color: '#66BF3C', title: 'Green' },\n      '#FF4785',\n      '#1EA7FD',\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata with Deprecated defaultValue (Common/TS)\nDESCRIPTION: This TypeScript snippet defines the metadata (`Meta`) for a component `Example` for use with common Storybook renderers (e.g., React, Vue). It requires importing `Meta` from the specific renderer package (`@storybook/your-renderer`). The code demonstrates the deprecated `argTypes.value.defaultValue` and shows the preferred method of setting defaults via the `args` object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Example.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    value: {\n      // ⛔️ Deprecated, do not use\n      defaultValue: 0,\n    },\n  },\n  // ✅ Do this instead\n  args: {\n    value: 0,\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Pure MDX Documentation for Button Without Story Definitions\nDESCRIPTION: An MDX file that references existing stories by ID but doesn't define new ones. This approach is used for adding documentation to CSF stories with arbitrary markdown.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Story } from '@storybook/addon-docs';\nimport { SomeComponent } from 'somewhere';\n\n# Button\n\nI can embed a story (but not define one, since this file should not contain a `Meta`):\n\n<Story id=\"some--id\" />\n\nAnd I can also embed arbitrary markdown & JSX in this file.\n\n<SomeComponent prop1=\"val1\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte with JavaScript (Svelte CSF)\nDESCRIPTION: This snippet demonstrates how to define Storybook stories for a Svelte Button component using Svelte CSF format. It uses the `defineMeta` function to set up the stories and defines primary and secondary variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n\n  const primaryArgs = {\n    primary: true,\n    label: 'Button',\n  }\n</script>\n\n<Story name=\"Primary\" args={primaryArgs} />\n\n<Story name=\"Secondary\" args={{...primaryArgs, primary: false}} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Angular using TypeScript\nDESCRIPTION: This snippet demonstrates how to set up story tags for an Angular component using TypeScript. It shows the configuration of default tags and how to add specific tags to individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './Button';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  /*\n   * All stories in this file will have these tags applied:\n   * - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const ExperimentalFeatureStory: Story = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Addon Configurations in TypeScript\nDESCRIPTION: This TypeScript version imports and re-exports configuration functions for webpack, Vite, and Babel, with type assertions. It provides type safety for the exported functions used in Storybook addon configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-local-preset.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { webpackFinal as webpack } from './webpack/webpackFinal';\n\nimport { viteFinal as vite } from './vite/viteFinal';\n\nimport { babelDefault as babel } from './babel/babelDefault';\n\nexport const webpackFinal = webpack as any;\n\nexport const viteFinal = vite as any;\n\nexport const babelDefault = babel as any;\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Stories for Standard CSF\nDESCRIPTION: MDX configuration for standard Component Story Format (CSF), importing Checkbox stories without specific framework extension\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-imports.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n```\n\n----------------------------------------\n\nTITLE: Configuring Measure/Outline Addon Parameters\nDESCRIPTION: Configuration example showing how to disable the Measure or Outline addons using the disable parameter. This can be set at different levels (project, component, or story) to control the addon's behavior.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/measure-and-outline.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  measure: {\n    disable: boolean\n  },\n  outline: {\n    disable: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes in JavaScript\nDESCRIPTION: JavaScript implementation of Storybook preview configuration that sets up theme switching using styled-components. Configures light and dark themes with a global style definition for font family.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-jsx-provider-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withThemeFromJSXProvider } from '@storybook/addon-themes';\n\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from '../src/themes';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  }\n`;\n\nconst preview = {\n  decorators: [\n    withThemeFromJSXProvider({\n      themes: {\n        light: lightTheme,\n        dark: darkTheme,\n      },\n      defaultTheme: 'light',\n      Provider: ThemeProvider,\n      GlobalStyles,\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta with TypeScript for Web Components\nDESCRIPTION: This snippet shows a Storybook Meta configuration using TypeScript for Web Components. It imports the Meta type from '@storybook/web-components' and uses the 'lit' library for HTML templating.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: html`<b>Bold</b>`,\n        Italic: html`<i>Italic</i>`,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Button Stories TypeScript Implementation with Satisfies Operator\nDESCRIPTION: TypeScript implementation using the satisfies operator (TS 4.9+) for type checking, defining Button component stories with Meta and StoryObj types from Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/configure-mock-provider-with-story-parameter.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n// Wrapped in light theme\nexport const Default: Story = {};\n\n// Wrapped in dark theme\nexport const Dark: Story = {\n  parameters: {\n    theme: 'dark',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing React Form Component with TypeScript\nDESCRIPTION: TypeScript version of the React form component test suite using Testing Library and Storybook's composeStories. Implements the same test cases as the JavaScript version with added type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/multiple-stories-test.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/react';\n\nimport { composeStories } from '@storybook/react';\n\nimport * as FormStories from './LoginForm.stories';\n\nconst { InvalidForm, ValidForm } = composeStories(FormStories);\n\ntest('Tests invalid form state', async () => {\n  await InvalidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n\ntest('Tests filled form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook in JavaScript. It specifies the framework, story file locations, and TypeScript settings to allow multi-package component documentation via Autodocs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-fix-imports-autodocs-monorepo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    // Overrides the default Typescript configuration to allow multi-package components to be documented via Autodocs.\n    reactDocgen: 'react-docgen',\n    check: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in React with TypeScript\nDESCRIPTION: Creates a Storybook story for a React List component using TypeScript. It imports the Unchecked story from ListItem stories and specifies the Meta type explicitly with typescript annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport const meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <Unchecked {...Unchecked.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Angular with TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for an Angular Button component using TypeScript. It defines a meta object and two stories: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName: Story = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Solid with TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Solid Button component using TypeScript. It imports necessary types, sets up metadata with explicit typing, and defines a story with props and an action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { action } from 'storybook/actions';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {\n  render: () => <Button label=\"Hello\" onClick={action('clicked')} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in Vue with TypeScript 4.9+\nDESCRIPTION: Demonstrates how to create a List component story in Vue 3 using TypeScript 4.9 with the satisfies operator. Shows component registration, setup function usage, and template composition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './ListComponent.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ManyItems: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { ...args };\n    },\n    template: `\n      <List v-bind=\"args\">\n        <list-item :isSelected=\"Selected\"/>\n        <list-item :isSelected=\"Unselected\"/>\n        <list-item :isSelected=\"Unselected\"/>\n      </List>`,\n  }),\n  args: {\n    Selected: Selected.args.isSelected,\n    Unselected: Unselected.args.isSelected,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories for Solid Components\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for Solid.js List components. It includes stories for empty, one item, and many items configurations using JavaScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nexport default {\n  component: List,\n};\n\nexport const Empty = {};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n\nexport const ManyItems = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n      <ListItem />\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in TypeScript\nDESCRIPTION: This code defines and exports a configuration object for the Storybook test runner in TypeScript. It imports the TestRunnerConfig type and includes typed hooks for setup, preVisit, and postVisit stages of the test execution process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-hooks-example.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  // Hook that is executed before the test runner starts running tests\n  setup() {\n    // Add your configuration here.\n  },\n  /* Hook to execute before a story is initially visited before being rendered in the browser.\n   * The page argument is the Playwright's page object for the story.\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async preVisit(page, context) {\n    // Add your configuration here.\n  },\n  /* Hook to execute after a story is visited and fully rendered.\n   * The page argument is the Playwright's page object for the story\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async postVisit(page, context) {\n    // Add your configuration here.\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Story with Correct Hierarchy Separator in JavaScript\nDESCRIPTION: Shows the recommended way of defining the Storybook story title using the '/' separator for hierarchical grouping. This configuration is required for Storybook 6.0 and later and ensures that stories appear under the correct sidebar grouping. The snippet exports default metadata for the 'Input' component within the 'Components/Forms' hierarchy.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/hierarchy-separator.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  title: 'Components/Forms/Input',\n  component: Input,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the main Storybook configuration file using TypeScript. It imports the StorybookConfig type, defines the framework, story locations, and includes the Interactions addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-addon-registration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-interactions', // 👈 Register the addon\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Svelte Gizmo Component using CSF\nDESCRIPTION: This JavaScript code configures Storybook controls for a Svelte Gizmo component using the Component Story Format (CSF). It defines various control types and their parameters, allowing interactive manipulation of component properties in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gizmo from './Gizmo.svelte';\n\nexport default {\n  component: Gizmo,\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in Web Components with TypeScript\nDESCRIPTION: Shows how to create a List component story using Web Components and TypeScript. Uses lit-html for templating and provides type safety with StoryObj for story definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\n// 👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta: Meta = {\n  component: 'demo-list',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ManyItems: Story = {\n  render: (args) => html`\n    <demo-list>\n      ${Selected({ ...args, ...Selected.args })} ${Unselected({ ...args, ...Unselected.args })}\n      ${Unselected({ ...args, ...Unselected.args })}\n    </demo-list>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility Testing in Storybook Preview (JavaScript)\nDESCRIPTION: This JavaScript code configures the Storybook preview to fail all accessibility tests when violations are found. It sets the a11y parameter in the default export object of the preview file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-error-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  parameters: {\n    // 👇 Fail all accessibility tests when violations are found\n    a11y: { test: 'error' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in SolidJS with TypeScript\nDESCRIPTION: This snippet demonstrates creating Storybook stories for a Button component in SolidJS using standard TypeScript syntax. It properly types the meta object and story with Meta and StoryObj interfaces from storybook-solidjs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button primary label=\"Button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for Svelte (Svelte CSF, JavaScript)\nDESCRIPTION: This Svelte snippet uses the '@storybook/addon-svelte-csf' API to define meta information and create a story with customized a11y rules. It demonstrates how Storybook integrates with Svelte components and supports both parameterized accessibility configurations and a 'manual' global flag. The code is structured in a Svelte component with a module script and Story tag, and is designed for users adopting Svelte with JavaScript and Storybook CSF.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  parameters={{\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n      */\n      options: {},\n    },\n  }}\n  globals={{\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Storybook Addon Panel\nDESCRIPTION: Shows how to register a new addon panel in Storybook using the manager API. The code creates a basic panel with a static div element, sets up the necessary identifiers, and configures the panel's rendering behavior with React.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-panel-initial.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { addons, types } from 'storybook/manager-api';\n\nimport { AddonPanel } from 'storybook/internal/components';\n\nconst ADDON_ID = 'myaddon';\nconst PANEL_ID = `${ADDON_ID}/panel`;\n\naddons.register(ADDON_ID, (api) => {\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: 'My Addon',\n    render: ({ active }) => (\n      <AddonPanel active={active}>\n        <div> Storybook addon panel </div>\n      </AddonPanel>\n    ),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Click with fireEvent in Storybook Play Function (JavaScript/Web Components)\nDESCRIPTION: This JavaScript snippet defines a Storybook story (`FireEventExample`) for a web component (`'demo-my-component'`). It uses the `play` function along with `fireEvent.click` and `within` from `storybook/test` to simulate a click event programmatically on an element found using its `data-testid` attribute.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const FireEventExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Web Components Example\nDESCRIPTION: This snippet demonstrates a Storybook Meta configuration for a Web Components Example. It uses the 'lit' library for HTML templating and sets up argTypes for a 'label' property with options and mappings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: html`<b>Bold</b>`,\n        Italic: html`<i>Italic</i>`,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Builder Interface in TypeScript for Storybook\nDESCRIPTION: This code snippet defines a TypeScript interface for a Builder object used in Storybook. It includes methods for starting and building, error handling, configuration retrieval, and preset management. The interface is generic, allowing for custom Config and Stats types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-interface.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Builder<Config, Stats> {\n  start: (args: {\n    options: Options;\n    startTime: ReturnType<typeof process.hrtime>;\n    router: Router;\n    server: Server;\n  }) => Promise<void | {\n    stats?: Stats;\n    totalTime: ReturnType<typeof process.hrtime>;\n    bail: (e?: Error) => Promise<void>;\n  }>;\n  build: (arg: {\n    options: Options;\n    startTime: ReturnType<typeof process.hrtime>;\n  }) => Promise<void | Stats>;\n  bail: (e?: Error) => Promise<void>;\n  getConfig: (options: Options) => Promise<Config>;\n  corePresets?: string[];\n  overridePresets?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Composition in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, sets the framework, specifies story patterns, and defines composed Storybooks for React and Angular with environment-specific URLs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs-with-function.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n\n  // 👇 Retrieve the current environment from the configType argument\n  refs: (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      return {\n        react: {\n          title: 'Composed React Storybook running in development mode',\n          url: 'http://localhost:7007',\n        },\n        angular: {\n          title: 'Composed Angular Storybook running in development mode',\n          url: 'http://localhost:7008',\n        },\n      };\n    }\n    return {\n      react: {\n        title: 'Composed React Storybook running in production',\n        url: 'https://your-production-react-storybook-url',\n      },\n      angular: {\n        title: 'Composed Angular Storybook running in production',\n        url: 'https://your-production-angular-storybook-url',\n      },\n    };\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with pnpm\nDESCRIPTION: This command uses pnpm to run the 'test-storybook' script, which executes Storybook tests. It's designed for projects using pnpm as their package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook\n```\n\n----------------------------------------\n\nTITLE: Enabling MDX2 Support in Storybook Configuration\nDESCRIPTION: Shows how to enable experimental MDX2 support in Storybook by adding the previewMdx2 feature flag to the configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  features: {\n    previewMdx2: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Date in TypeScript 4.9 Storybook Story\nDESCRIPTION: TypeScript 4.9 implementation of date mocking in a Storybook story using MockDate. Shows proper type annotation for the Story object while setting a fixed Christmas date.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-basic.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport MockDate from 'mockdate';\n\n// ...rest of story file\n\nexport const ChristmasUI: Story = {\n  async play({ mount }) {\n    MockDate.set('2024-12-25');\n    // 👇 Render the component with the mocked date\n    await mount();\n    // ...rest of test\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Container Context\nDESCRIPTION: Example of setting up global container context in Storybook's preview configuration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GlobalContainerContext } from './GlobalContainerContext';\nimport { UserMenu } from './UserMenu.stories';\n\nexport const decorators = [\n  (Story) => (\n    <GlobalContainerContext.Provider\n      value={{\n        UserMenu: UserMenu.Mock,\n      }}\n    >\n      <Story />\n    </GlobalContainerContext.Provider>\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Designs Addon\nDESCRIPTION: Command to install the Storybook Designs addon using npm or yarn. This addon allows embedding of Figma files and prototypes in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/design-integrations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storybook/addon-designs\n```\n\n----------------------------------------\n\nTITLE: Selecting a Story Using Storybook API\nDESCRIPTION: Shows how to use the api.selectStory() method to programmatically select a story in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napi.selectStory('Button', 'Primary');\n```\n\n----------------------------------------\n\nTITLE: Install Storybook Interactions Addon\nDESCRIPTION: Command to install the Storybook interactions addon and its dependencies for testing component interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/interactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/addon-interactions @storybook/test\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook ESLint Plugin with Flat Config (JavaScript)\nDESCRIPTION: Sets up the Storybook ESLint plugin using the flat config style. This configuration imports the plugin and applies its recommended settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport storybook from 'eslint-plugin-storybook';\n\nexport default [\n  // Add more generic rulesets here, such as:\n  // js.configs.recommended,\n  ...storybook.configs['flat/recommended'],\n\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: A TypeScript configuration file for Storybook that defines the framework, story file patterns, and documentation settings. It imports the StorybookConfig type for type safety and exports a properly typed configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-docs-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  docs: {\n    docsMode: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue 3 Storybook Preview with Vuetify Theme Support\nDESCRIPTION: Sets up Storybook preview for Vue 3 applications with Vuetify integration. Uses the setup function to register plugins and wraps stories in a v-app component that receives the theme from globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setup } from '@storybook/vue3';\n\nimport { VApp } from 'vuetify/components';\n\nimport { registerPlugins } from '../src/plugins';\n\nsetup((app) => {\n  // Registers your app's plugins including Vuetify into Storybook\n  registerPlugins(app);\n});\n\nconst preview = {\n  decorators: [\n    (story, context) => {\n      const theme = context.globals.theme || 'light';\n      return {\n        components: { story, VApp },\n        template: `\n          <v-app theme=\"${theme}\">\n            <div>\n              <story/>\n            </div>\n          </v-app>\n      `,\n      };\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Options for Non-React Renderers in Storybook\nDESCRIPTION: TypeScript configuration options for non-React renderers in Storybook, including type checking and compiler settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  check?: boolean;\n  checkOptions?: CheckOptions;\n  skipCompiler?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Svelte with TypeScript using Svelte CSF\nDESCRIPTION: This snippet demonstrates using the Svelte CSF addon to create Storybook stories with TypeScript. It imports defineMeta from @storybook/addon-svelte-csf and uses a Story component to define props for the Histogram component in a type-safe manner.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Histogram from './Histogram.svelte';\n\n  const { Story } = defineMeta({\n    component: Histogram,\n  });\n</script>\n\n<Story\n  name=\"Default\"\n  args={{\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Svelte Button Component (Svelte CSF with TypeScript 4.9+)\nDESCRIPTION: This snippet shows how to configure decorators for a Svelte Button component in Storybook using Svelte CSF with TypeScript 4.9+. It uses the defineMeta function to set up a decorator that wraps the story with a MarginDecorator component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n  import MarginDecorator from './MarginDecorator.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    decorators: [() => MarginDecorator],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Web Components Story Configuration in JavaScript\nDESCRIPTION: JavaScript configuration for Web Components stories, using the component tag name instead of a component reference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n};\n\nexport const Simple = {\n  name: 'So simple!',\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Async Storybook Story for Generic Component\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for a generic component using JavaScript or JSX. It includes an async play function that simulates user interactions and uses Storybook's testing utilities for DOM manipulation. The story showcases typing, clicking, and hovering actions on various elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Interaction Test in Storybook (JavaScript - Web Components)\nDESCRIPTION: This snippet defines a Storybook story named `ExampleAsyncStory` for a web component ('demo-my-component') using JavaScript. It employs the `play` function and utilities from `storybook/test` (`userEvent`, `waitFor`, `within`) to simulate user actions: typing into an input field, clicking a button, and then waiting for an error element to appear before hovering over it. This demonstrates interaction testing for web components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nexport default {\n  component: 'demo-my-component',\n};\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Preview with JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook's preview that calls an initialization function before all stories are loaded. Uses the `beforeAll` lifecycle hook to ensure initialization happens at the right time.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-all-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '../project-bootstrap';\n\nexport default {\n  async beforeAll() {\n    await init();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in JavaScript\nDESCRIPTION: This code exports a configuration object for the Storybook test runner in JavaScript. It includes hooks for setup, preVisit, and postVisit stages of the test execution process. Each hook provides placeholders for custom configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-hooks-example.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // Hook that is executed before the test runner starts running tests\n  setup() {\n    // Add your configuration here.\n  },\n  /* Hook to execute before a story is initially visited before being rendered in the browser.\n   * The page argument is the Playwright's page object for the story.\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async preVisit(page, context) {\n    // Add your configuration here.\n  },\n  /* Hook to execute after a story is visited and fully rendered.\n   * The page argument is the Playwright's page object for the story\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async postVisit(page, context) {\n    // Add your configuration here.\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Nx Library Storybook Configuration (Post-14.1.8)\nDESCRIPTION: Configuration example for Nx library projects using Storybook after version 14.1.8, demonstrating the direct builder configuration with style preprocessing options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/styling-and-css.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storybook\": {\n    \"executor\": \"@storybook/angular:start-storybook\",\n    \"options\": {\n      \"configDir\": \"apps/example-lib/.storybook\",\n      \"browserTarget\": \"example-lib:build-storybook\"\n    }\n  },\n  \"build-storybook\": {\n    \"executor\": \"@storybook/angular:build-storybook\",\n    \"outputs\": [\"{options.outputPath}\"],\n    \"options\": {\n      \"outputDir\": \"dist/storybook/example-lib\",\n      \"configDir\": \"apps/example-lib/.storybook\",\n      \"browserTarget\": \"example-lib:build-storybook\",\n      \"styles\": [\".storybook/custom-styles.scss\"],\n      \"stylePreprocessorOptions\": {\n        \"includePaths\": [\n          \"libs/design-system/src/lib\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Doc Blocks in MDX for Button Documentation\nDESCRIPTION: Example of using various Storybook doc blocks within an MDX file to document a Button component, including metadata, primary story, controls, and individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* ButtonDocs.mdx */}\n\nimport { Meta, Primary, Controls, Story } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n# Button\n\nA button is ...\n\n<Primary />\n\n## Props\n\n<Controls />\n\n## Stories\n\n### Primary\n\nA button can be of primary importance.\n\n<Story of={ButtonStories.Primary} />\n\nA button can be of secondary importance.\n\n<Story of={ButtonStories.Secondary} />\n\n{/* ... */}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Preview with Theme Support\nDESCRIPTION: Sets up Storybook preview for Angular applications with theme support using componentWrapperDecorator. The decorator wraps each story in a div with a dynamic CSS class based on the global theme selection.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/angular';\nimport { componentWrapperDecorator } from '@storybook/angular';\n\nconst preview: Preview = {\n  decorators: [\n    componentWrapperDecorator(\n      (story) => `<div [class]=\"myTheme\">${story}</div>`,\n      ({ globals }) => {\n        return { myTheme: globals['theme'] };\n      }\n    ),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Validating Form via Storybook Story in React with TypeScript\nDESCRIPTION: This snippet replicates form validation testing for a React component using TypeScript, leveraging composeStory from '@storybook/react' and Testing Library utilities. It sets up the ValidForm story and runs it within a test, simulating a click on the 'Submit' button. The test checks that the element labeled 'invalid-form' is not present post-submission, verifying expected form behavior. Requires TypeScript configuration and compatible React/Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/react';\\n\\nimport { composeStory } from '@storybook/react';\\n\\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\\n\\nconst ValidForm = composeStory(ValidFormStory, Meta);\\n\\ntest('Validates form', async () => {\\n  await ValidForm.run();\\n\\n  const buttonElement = screen.getByRole('button', {\\n    name: 'Submit',\\n  });\\n\\n  fireEvent.click(buttonElement);\\n\\n  const isFormValid = screen.getByLabelText('invalid-form');\\n  expect(isFormValid).not.toBeInTheDocument();\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Development Server Configuration in TypeScript\nDESCRIPTION: Creates a Vite server configuration with custom options including port settings, HMR configuration, and filesystem restrictions. Applies preset configurations and environment variables through the Storybook preset system.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-configuration-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stringifyProcessEnvs } from './envs';\nimport { getOptimizeDeps } from './optimizeDeps';\nimport { commonConfig } from './vite-config';\n\nimport type { EnvsRaw, ExtendedOptions } from './types';\n\nexport async function createViteServer(options: ExtendedOptions, devServer: Server) {\n  const { port, presets } = options;\n\n  // Defines the baseline config.\n  const baseConfig = await commonConfig(options, 'development');\n  const defaultConfig = {\n    ...baseConfig,\n    server: {\n      middlewareMode: true,\n      hmr: {\n        port,\n        server: devServer,\n      },\n      fs: {\n        strict: true,\n      },\n    },\n    optimizeDeps: await getOptimizeDeps(baseConfig, options),\n  };\n\n  const finalConfig = await presets.apply('viteFinal', defaultConfig, options);\n\n  const envsRaw = await presets.apply<Promise<EnvsRaw>>('env');\n\n  // Remainder implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Vue Button Component (JavaScript)\nDESCRIPTION: This snippet shows how to configure decorators for a Vue Button component in Storybook using JavaScript. It defines a decorator that wraps the story in a div with margin using a Vue template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n  decorators: [() => ({ template: '<div style=\"margin: 3em;\"><story /></div>' })],\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook 7.0 Implicit Actions Example\nDESCRIPTION: Example showing how actions were implicitly handled in Storybook 7.0 with automatic spy creation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  component: Button,\n};\n\nexport const ButtonClick = {\n  play: async ({ args, canvasElement }) => {\n    await userEvent.click(within(canvasElement).getByRole(\"button\"));\n    // args.onClick is a jest spy in 7.0\n    await expect(args.onClick).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Storybook Preview\nDESCRIPTION: Diff showing how to import the Tailwind CSS file into the .storybook/preview.js file. This step ensures that Tailwind styles are available to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport { Preview } from '@storybook/your-renderer';\n\n+import '../src/index.css';\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript in Vue\nDESCRIPTION: Vue Storybook story for TodoItem using TypeScript with standard type annotations. Defines meta object with component, and a Primary story with render function and loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport TodoItem from './TodoItem.vue';\n\nconst meta: Meta<typeof TodoItem> = {\n  component: TodoItem,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof TodoItem>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: (args, { loaded: { todo } }) => ({\n    components: { TodoItem },\n    setup() {\n      return { args, todo: todo };\n    },\n    template: '<TodoItem :todo=\"todo\" />',\n  }),\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Explicit Action Handling in Storybook 8\nDESCRIPTION: Examples showing how to migrate from implicit action props to explicit action handling using the fn() method from @storybook/test, which will be required in Storybook 8.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_60\n\nLANGUAGE: ts\nCODE:\n```\nexport default {\n  component: Button,\n};\n\nexport const ButtonClick = {\n  play: async ({ args, canvasElement }) => {\n    await userEvent.click(within(canvasElement).getByRole(\"button\"));\n    // args.onClick is a jest spy in 7.0\n    await expect(args.onClick).toHaveBeenCalled();\n  },\n};\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { fn } from \"@storybook/test\";\n\nexport default {\n  component: Button,\n  args: {\n    onClick: fn(),\n  },\n};\n\nexport const ButtonClick = {\n  play: async ({ args, canvasElement }) => {\n    await userEvent.click(within(canvasElement).getByRole(\"button\"));\n    await expect(args.onClick).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SolidJS List Stories in TypeScript 4.9 with satisfies operator\nDESCRIPTION: Creates a Storybook story for a SolidJS List component using TypeScript 4.9 with the satisfies operator. It includes type definitions and an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\n\nconst meta = {\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Generic Button Story Configuration with JavaScript\nDESCRIPTION: Sets up a Storybook story for a Button component using JavaScript. Implements click action tracking and exports component configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\n\nimport Button from './Button';\n\nexport default {\n  component: Button,\n  args: {\n    // 👇 Create an action that appears when the onClick event is fired\n    onClick: action('on-click'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Vue with TypeScript\nDESCRIPTION: A TypeScript implementation of a Vue Button component using defineComponent for proper type inference. The component defines props with validation, emits, and uses the Composition API with reactive props and proper documentation for all properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<template> <!-- The component markup implementation --> </template>\n\n<script lang=\"ts\">\n  import { defineComponent, reactive } from 'vue';\n\n  export default defineComponent({\n    // eslint-disable-next-line vue/multi-word-component-names\n    name: 'button',\n    props: {\n      /**\n       * Button contents\n       */\n      label: {\n        type: String,\n        required: true,\n      },\n      /**\n       * Is this the principal call to action on the page?\n       */\n      primary: {\n        type: Boolean,\n        default: false,\n      },\n      /**\n       * How large should the button be?\n       */\n      size: {\n        type: String,\n        default: 'medium',\n        validator: function (value) {\n          return ['small', 'medium', 'large'].indexOf(value) !== -1;\n        },\n      },\n      /**\n       * What background color to use\n       */\n      backgroundColor: {\n        type: String,\n      },\n    },\n    emits: ['click'],\n    setup(props, { emit }) {\n      props = reactive(props);\n      return {\n        /**\n         * Optional click handler\n         */\n        onClick() {\n          emit('click');\n        },\n      };\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Panel Component in Storybook Addon\nDESCRIPTION: A React component that creates a panel view for the addon. Uses useAddonState and useChannel hooks to manage state and handle communication between the addon and Storybook. Renders a PanelContent component with data fetching and clearing capabilities.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolkit-types.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nimport { useAddonState, useChannel } from 'storybook/manager-api';\nimport { AddonPanel } from 'storybook/internal/components';\n\nimport { ADDON_ID, EVENTS } from './constants';\n\n// See https://github.com/storybookjs/addon-kit/blob/main/src/components/PanelContent.tsx for an example of a PanelContent component\nimport { PanelContent } from './components/PanelContent';\n\ninterface PanelProps {\n  active: boolean;\n}\n\nexport const Panel: React.FC<PanelProps> = (props) => {\n  // https://storybook.js.org/docs/addons/addons-api#useaddonstate\n  const [results, setState] = useAddonState(ADDON_ID, {\n    danger: [],\n    warning: [],\n  });\n\n  // https://storybook.js.org/docs/addons/addons-api#usechannel\n  const emit = useChannel({\n    [EVENTS.RESULT]: (newResults) => setState(newResults),\n  });\n\n  return (\n    <AddonPanel {...props}>\n      <PanelContent\n        results={results}\n        fetchData={() => {\n          emit(EVENTS.REQUEST);\n        }}\n        clearData={() => {\n          emit(EVENTS.CLEAR);\n        }}\n      />\n    </AddonPanel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story using Svelte CSF (JavaScript)\nDESCRIPTION: This snippet defines a Storybook story for a Svelte `Button` component using the Svelte CSF format within a `.svelte` file and JavaScript in the script module. It uses `defineMeta` from '@storybook/addon-svelte-csf' to configure the component and exports a `Story` component. The `<Story>` tag is then used in the template to render the 'Primary' story, passing `variant: 'primary'` via the `args` prop.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"js\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story name=\"Primary\" args={{ variant: 'primary' }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories with Dark Background in Common JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Button story using JavaScript in a framework-agnostic manner. It sets up a story with a dark background using story-level parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const OnDark = {\n  // 👇 Story-level parameters\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Backgrounds in JavaScript\nDESCRIPTION: Sets up background color options for Storybook stories using JavaScript. Defines two background values (light and dark) that can be selected when viewing components in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'light', value: '#fff' },\n        { name: 'dark', value: '#333' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SolidJS Storybook Story with Figma Link (TS 4.9+)\nDESCRIPTION: Defines a Storybook story for a SolidJS component (`MyComponent`) using TypeScript 4.9+ features. It imports types from `storybook-solidjs` and the component. It employs the `satisfies` keyword for type checking the `meta` object and exports an `Example` story with parameters linking to a Figma design file. Requires `storybook-solidjs`, the SolidJS component, and TypeScript 4.9 or newer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"MyComponent.stories.ts|tsx\" renderer=\"solid\" language=\"ts-4-9\"\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgType Categories in Storybook (TypeScript 4.9+)\nDESCRIPTION: This TypeScript snippet (compatible with TS 4.9+) shows the `meta` configuration for a Button component story using the `satisfies` operator for type checking. It defines `argTypes` and organizes them into categories and subcategories using the `table` property, similar to other examples. It requires importing the `Meta` type from the relevant Storybook framework package (`@storybook/your-framework`) and the `Button` component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n        // Assigns the argTypes to a specific subcategory\n        subcategory: 'Button colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n        subcategory: 'Button style',\n      },\n    },\n    label: {\n      table: {\n        category: 'Text',\n        subcategory: 'Button contents',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n        subcategory: 'Button Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Package Migration Reference Table - Deprecations\nDESCRIPTION: Table showing deprecated packages and their replacements in Storybook 8.0\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/from-older-version.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecation                  | Replacement       |\n| ---------------------------- | ----------------- |\n| `@storybook/testing-library` | `@storybook/test` |\n```\n\n----------------------------------------\n\nTITLE: Importing Typography and Storybook Components in JavaScript\nDESCRIPTION: This snippet imports the typography settings from Storybook's theming and components from Storybook's addon-docs. It also defines an array of font sizes and a sample text for demonstration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/typography.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { typography } from 'storybook/theming';\nimport { Meta, Typeset } from '@storybook/addon-docs/blocks';\n\nexport const fontSizes = ['l3', 'l2', 'l1', 'm3', 'm2', 'm1', 's3', 's2', 's1'].map(\n  (size) => `${typography.size[size]}px`\n);\n\nexport const sampleText =\n  'Storybook is an open source tool for building UI components and pages in isolation. It streamlines UI development, testing, and documentation.';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner Viewport in TypeScript\nDESCRIPTION: This TypeScript version of the configuration sets up the Storybook test runner to adjust viewport sizes based on story parameters or a default size. It utilizes type definitions from @storybook/test-runner and @storybook/addon-viewport.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-page-viewport.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\nimport { getStoryContext } from '@storybook/test-runner';\n\nconst { MINIMAL_VIEWPORTS } = require('@storybook/addon-viewport');\n\nconst DEFAULT_VIEWPORT_SIZE = { width: 1280, height: 720 };\n\nconst config: TestRunnerConfig = {\n  async preVisit(page, story) {\n    // Accesses the story's parameters and retrieves the viewport used to render it\n    const context = await getStoryContext(page, story);\n    const viewportName = context.parameters?.viewport?.defaultViewport;\n    const viewportParameter = MINIMAL_VIEWPORTS[viewportName];\n\n    if (viewportParameter) {\n      const viewportSize = Object.entries(viewportParameter.styles).reduce(\n        (acc, [screen, size]) => ({\n          ...acc,\n          // Converts the viewport size from percentages to numbers\n          [screen]: parseInt(size),\n        }),\n        {},\n      );\n      // Configures the Playwright page to use the viewport size\n      page.setViewportSize(viewportSize);\n    } else {\n      page.setViewportSize(DEFAULT_VIEWPORT_SIZE);\n    }\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Web Components Story Implementation\nDESCRIPTION: Shows how to create a Storybook story for Web Components using Lit HTML templating. Handles image properties through template literals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nimport imageFile from './static/image.png';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nconst image = {\n  src: imageFile,\n  alt: 'my image',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const WithAnImage: Story = {\n  render: () => html`<img src=\"${image.src}\" alt=\"${image.alt}\" />`,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Stories in React with JavaScript\nDESCRIPTION: React implementation of Button stories using JavaScript, defining variants and a combination story without type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Variant1 = {\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 1 },\n};\n\nexport const Variant2 = {\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 2 },\n};\n\nexport const Combo = {\n  tags: ['!test'],\n  render: () => (\n    <>\n      <Button variant={1} />\n      <Button variant={2} />\n    </>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Component Story with Testing Library\nDESCRIPTION: Example showing how to test a Login component story using Testing Library and the composeStories utility from Storybook. Demonstrates testing invalid credentials scenario.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { userEvent } from '@testing-library/user-event';\nimport { composeStories } from '@storybook/react';\nimport * as stories from './Login.stories';\n\nconst { InvalidCredentials } = composeStories(stories);\n\ntest('renders login error', async () => {\n  render(<InvalidCredentials />);\n  const user = userEvent.setup();\n\n  await user.type(screen.getByLabelText(/username/i), 'johndoe');\n  await user.type(screen.getByLabelText(/password/i), 'invalidpassword');\n  await user.click(screen.getByRole('button'));\n\n  await waitFor(() => {\n    expect(screen.getByRole('alert')).toHaveTextContent(/invalid credentials/i);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Storybook Tests\nDESCRIPTION: YAML configuration for a GitHub Actions workflow to run Storybook tests with coverage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Storybook Tests\non: push\njobs:\n  test:\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20.x'\n      - name: Install dependencies\n        run: yarn\n      - name: Run Storybook tests\n        run: yarn test-storybook --coverage\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Vue with TypeScript\nDESCRIPTION: Vue button component using TypeScript with defineComponent for type safety. Defines props with types, default values, and requirement flags along with setup function for composition API usage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<template>\n  <button type=\"button\" :disabled=\"isDisabled\">{{ label }}</button>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    name: 'button',\n    props: {\n      /**\n       * Checks if the button should be disabled\n       */\n      isDisabled: {\n        type: Boolean,\n        default: false,\n      },\n      /**\n       * The display label of the button\n       */\n      label: {\n        type: String,\n        default: 'One',\n        required: true,\n      },\n    },\n    setup(props) {\n      /**\n       * What will be returned here will available to the component\n       * Functions referenced here will act like methods\n       */\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Webpack and GraphQL (TypeScript)\nDESCRIPTION: TypeScript configuration for Storybook using Webpack bundler with GraphQL support. Includes type definitions and sets up loaders for .graphql and .gql files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/webpack-final-to-vite-final.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, nextjs, angular)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async webpackFinal(config) {\n    config.module?.rules?.push({\n      test: /\\.(graphql|gql)$/,\n      include: [path.resolve('./lib/emails')],\n      exclude: /node_modules/,\n      loader: 'graphql-tag/loader',\n    });\n    config.module?.rules?.push({\n      test: /\\.(graphql|gql)$/,\n      include: [path.resolve('./lib/schema')],\n      exclude: /node_modules/,\n      loader: 'raw-loader',\n    });\n\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Svelte with JavaScript\nDESCRIPTION: This snippet sets up the preview configuration for Svelte in Storybook using JavaScript. It imports a MarginDecorator component and uses it as a decorator for all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarginDecorator from './MarginDecorator.svelte';\n\nexport default { decorators: [() => MarginDecorator] };\n```\n\n----------------------------------------\n\nTITLE: React Storybook Preview Configuration (JavaScript)\nDESCRIPTION: Implements a story decorator for React Storybook that wraps stories in different layout components based on parameters. Handles 'page' and 'page-mobile' layouts using className-based divs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nexport default {\n  decorators: [\n    (Story, { parameters }) => {\n      const { pageLayout } = parameters;\n      switch (pageLayout) {\n        case 'page':\n          return (\n            <div className=\"page-layout\">\n              <Story />\n            </div>\n          );\n        case 'page-mobile':\n          return (\n            <div className=\"page-mobile-layout\">\n              <Story />\n            </div>\n          );\n        default:\n          return <Story />;\n      }\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Doc Blocks in Story Files Example (Incorrect Usage)\nDESCRIPTION: Example showing incorrect attempt to use the ColorPalette Doc Block directly in a story file, which will result in an error.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeSnippets path=\"storybook-canvas-doc-block-story.md\" />\n```\n\n----------------------------------------\n\nTITLE: Defining List Stories for HTML Components in TypeScript\nDESCRIPTION: This snippet shows how to create Storybook stories for HTML List components using TypeScript. It includes stories for empty, one item, and many items configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\nimport { createList, ListArgs } from './List';\nimport { createListItem } from './ListItem';\n\nconst meta: Meta<ListArgs> = {\n  title: 'List',\n};\n\nexport default meta;\ntype Story = StoryObj<ListArgs>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Empty: Story = {\n  render: () => createList(args),\n};\n\nexport const OneItem: Story = {\n  render: (args) => {\n    const list = createList(args);\n    list.appendChild(createListItem());\n    return list;\n  },\n};\n\nexport const ManyItems: Story = {\n  render: (args) => {\n    const list = createList(args);\n    list.appendChild(createListItem());\n    list.appendChild(createListItem());\n    list.appendChild(createListItem());\n    return list;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook 8.0 Explicit Actions Example\nDESCRIPTION: Updated example showing how actions must be explicitly defined in Storybook 8.0 using @storybook/test.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fn } from \"@storybook/test\";\n\nexport default {\n  component: Button,\n  args: {\n    onClick: fn(),\n  },\n};\n\nexport const ButtonClick = {\n  play: async ({ args, canvasElement }) => {\n    await userEvent.click(within(canvasElement).getByRole(\"button\"));\n    await expect(args.onClick).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration with Custom Plugin in TypeScript\nDESCRIPTION: A TypeScript function for extending Vite configuration in a Storybook addon. It adds a custom plugin to the Vite configuration and returns the modified config, with basic type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-viteFinal.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function ViteFinal(config: any, options: any = {}) {\n  config.plugins.push(\n    new MyCustomPlugin({\n      someOption: true,\n    }),\n  );\n\n  return config;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Project Annotations for Svelte\nDESCRIPTION: This code snippet shows how to set up Storybook project annotations for a Svelte project using Vitest. It imports necessary modules, sets project annotations, and runs Storybook's beforeAll hook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n// 👇 If you're using Sveltekit, import from @storybook/sveltekit\nimport { setProjectAnnotations } from '@storybook/svelte';\n// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this\nimport * as addonAnnotations from 'my-addon/preview';\nimport * as previewAnnotations from './.storybook/preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n\n// Run Storybook's beforeAll hook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Svelte Button Component (CSF with TypeScript 4.9+)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a Svelte Button component in Storybook using CSF with TypeScript 4.9+. It uses the 'satisfies' keyword for type checking and defines a decorator that uses a MarginDecorator component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\nimport MarginDecorator from './MarginDecorator.svelte';\n\nconst meta = {\n  component: Button,\n  decorators: [() => MarginDecorator],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Angular with TypeScript\nDESCRIPTION: This snippet sets up the Storybook preview for an Angular project. It imports necessary types, sets up Compodoc documentation, and configures control matchers for colors and dates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/angular';\n\nimport { setCompodocJson } from '@storybook/addon-docs/angular';\n\nimport docJson from '../documentation.json';\n\nimport '../src/polyfills';\n\nsetCompodocJson(docJson);\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Web Components with JavaScript\nDESCRIPTION: This snippet demonstrates how to set up story tags for a Web Components button using JavaScript. It shows how to apply a global 'stable' tag and override it for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n};\n\nexport const ExperimentalFeatureStory = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Svelte Storybook with TypeScript (CSF)\nDESCRIPTION: This snippet in TypeScript configures the story structure for 'MyComponent' using '@storybook/svelte' with an a11y manual setting, for Svelte applications.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport MyComponent from './MyComponent.svelte';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const NonA11yStory: Story = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Autodocs in TypeScript Preview Configuration\nDESCRIPTION: Shows how to configure the Storybook preview file in TypeScript, including type imports and proper typing of the preview object to enable automatic documentation generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport type { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  // ...rest of preview\n  //👇 Enables auto-generated documentation for all stories\n  tags: ['autodocs'],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Reproducing CI Job Failures for Storybook in Shell\nDESCRIPTION: Command to reproduce CI job failures locally, allowing developers to debug and fix issues that occur during continuous integration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn task --task e2e-tests --template=react-vite/default-ts --start-from=install\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Vue with JavaScript\nDESCRIPTION: This snippet sets up the preview configuration for Vue in Storybook using JavaScript. It defines a decorator that wraps each story with a div element having a 3em margin using a Vue template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  decorators: [\n    (story) => ({\n      components: { story },\n      template: '<div style=\"margin: 3em;\"><story /></div>',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Framework-Agnostic Button Story with TypeScript 4.9\nDESCRIPTION: Template for Button story configuration using TypeScript 4.9 with type satisfies operator. Can be adapted for any framework by replacing the framework import.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      canvas: { sourceState: 'shown' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query for User and Document Data\nDESCRIPTION: A GraphQL query that retrieves user information, document details, and a list of subdocuments. The query structure shows how to request multiple top-level fields and specify which fields to include for each type of entity.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllInfoQuery {\n  user {\n    userID\n    name\n  }\n  document {\n    id\n    userID\n    title\n    brief\n    status\n  }\n  subdocuments {\n    id\n    userID\n    title\n    content\n    status\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Styled from Storybook Theming\nDESCRIPTION: Imports the styled utility from Storybook's theming module to enable custom theme creation and styling. This is a fundamental import needed for creating custom themes in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-theming-styled-import.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from 'storybook/theming';\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook Dependencies using CLI\nDESCRIPTION: Demonstrates using the Storybook CLI command `npx sb upgrade` to upgrade Storybook dependencies. This command helps resolve potential issues caused by multiple or outdated Storybook package versions, especially when encountering addon compatibility problems in Storybook 7.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\nnpx sb upgrade\n```\n\n----------------------------------------\n\nTITLE: React Button Story Implementation (JavaScript)\nDESCRIPTION: Implements a Button story for React using JavaScript and CSF 2 format. Creates a primary button story using args spreading pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nexport const Primary = (args) => <Button {...args} />;\nPrimary.args = { primary: true };\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Stories Together\nDESCRIPTION: Shows how to test multiple stories in a single test using the composeStories function with args and decorators.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport { composeStories } from '@storybook/react';\nimport * as stories from './Button.stories';\n\nconst { Primary, Secondary } = composeStories(stories);\n\ntest('renders primary and secondary buttons', () => {\n  render(\n    <>\n      <Primary />\n      <Secondary />\n    </>\n  );\n  expect(screen.getAllByRole('button')).toHaveLength(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in TypeScript\nDESCRIPTION: TypeScript configuration file for Storybook that provides type-safe configuration using StorybookConfig type. Defines the framework, story patterns, and external references with proper type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ref-local.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    react: {\n      title: 'React',\n      url: 'http://localhost:7007',\n    },\n    angular: {\n      title: 'Angular',\n      url: 'http://localhost:7008',\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in React Storybook Stories with JavaScript\nDESCRIPTION: Demonstrates how to add a margin decorator to a React Button component using JavaScript. The decorator wraps the Story component with a div that has a margin of 3em.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story Sorting in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook preview that imports the Preview type and customizes story sorting order. This creates a typed configuration object that sorts stories alphabetically by their ID with numeric sorting enabled.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-sort-function.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    options: {\n      // The `a` and `b` arguments in this function have a type of `import('storybook/internal/types').IndexEntry`. Remember that the function is executed in a JavaScript environment, so use JSDoc for IntelliSense to introspect it.\n      storySort: (a, b) =>\n        a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true }),\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Using Updated Types in Storybook 7.0\nDESCRIPTION: TypeScript code showing the usage of updated types (StoryFn, StoryObj, Meta) in Storybook 7.0 for both component and props-based stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StoryFn, StoryObj } from \"@storybook/react\";\nimport { Button, ButtonProps } from \"./Button\";\n\n// This works in 7.0, making the ComponentX types redundant.\nconst meta: Meta<typeof Button> = { component: Button };\n\nexport const CSF3Story: StoryObj<typeof Button> = { args: { label: \"Label\" } };\n\nexport const CSF2Story: StoryFn<typeof Button> = (args) => <Button {...args} />;\nCSF2Story.args = { label: \"Label\" };\n\n// Passing props directly still works as well.\nconst meta: Meta<ButtonProps> = { component: Button };\n\nexport const CSF3Story: StoryObj<ButtonProps> = { args: { label: \"Label\" } };\n\nexport const CSF2Story: StoryFn<ButtonProps> = (args) => <Button {...args} />;\nCSF2Story.args = { label: \"Label\" };\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Web Components in TypeScript\nDESCRIPTION: Shows how to define a Storybook Meta configuration for Web Components using TypeScript. Imports the Meta type from '@storybook/web-components' and uses the custom element tag name 'demo-example' as the component identifier.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    actualArgName: {\n      name: 'Friendly name',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Svelte Component Stories with JavaScript CSF\nDESCRIPTION: This snippet demonstrates creating a Storybook story for a Svelte component using JavaScript and the Component Story Format (CSF). It shows how to define a play function that simulates user interactions like typing and clicking elements within the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nimport MyComponent from './MyComponent.svelte';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ExampleStory = {\n  play: async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Common Frameworks with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create Storybook stories for a Button component that can be used across various frameworks using TypeScript. It defines a meta object and two stories: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName: Story = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet defines the Storybook configuration using TypeScript. It imports the StorybookConfig type, specifies the framework, story file patterns, addons, and build settings for testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-optimized-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-coverage',\n  ],\n  build: {\n    test: {\n      disabledAddons: ['@storybook/addon-docs', '@storybook/addon-essentials/docs'],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation for Next.js Component in TypeScript Storybook with Type Annotation\nDESCRIPTION: A TypeScript implementation using traditional type annotation to define a Storybook story for a NavigationBasedComponent. It imports Meta and StoryObj types from @storybook/react and sets up Next.js navigation segments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-for-use-params-override-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta: Meta<typeof NavigationBasedComponent> = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n      navigation: {\n        segments: [\n          ['slug', 'hello'],\n          ['framework', 'nextjs'],\n        ],\n      },\n    },\n  },\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Preview Configuration with JSDoc Type\nDESCRIPTION: JavaScript implementation using JSDoc type annotation for Preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_67\n\nLANGUAGE: js\nCODE:\n```\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n  },\n};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Svelte in TypeScript 4.9\nDESCRIPTION: This snippet shows how to configure Storybook stories for a Svelte Button component using TypeScript 4.9 syntax. It uses the 'satisfies' keyword for type inference and imports types from '@storybook/svelte'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Svelte CSF with TypeScript\nDESCRIPTION: Defines Button component story metadata within a Svelte file using standard TypeScript and the `@storybook/addon-svelte-csf` addon. It utilizes `defineMeta` inside a `<script module lang=\"ts\">` block to specify the `Button` component, configure `argTypes` (like a color control for `backgroundColor`), and set default `args` (`primary: true`), providing type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"ts\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Creates specific argTypes\n    argTypes: {\n      backgroundColor: { control: 'color' },\n    },\n    args: {\n      //👇 Now all Button stories will be primary.\n      primary: true,\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Stories with JavaScript\nDESCRIPTION: Demonstrates how to create Storybook stories using JavaScript for a generic component. It imports the component, sets up the metadata object, and exports a default story that uses an environment variable as a property value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const Default = {\n  args: {\n    exampleProp: process.env.EXAMPLE_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook React Stories\nDESCRIPTION: Imports React and the storiesOf function from Storybook's React integration. Includes ESLint disable comments for specific rules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ugly-comments-stories.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-disable global-require, import/no-dynamic-require */\n\nimport React from 'react';\n\n/*\n eslint-disable some kind\n of multi line ignore, though\n I'm not sure it's possible.\n*/\n\nimport { storiesOf } from '@storybook/react';\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Provider Class in React\nDESCRIPTION: Example of creating a custom Provider class extending from @storybook/manager's Provider. Includes methods for getElements, renderPreview, and handleAPI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Provider } from '@storybook/manager';\n\nexport default class MyProvider extends Provider {\n  getElements(type) {\n    return {};\n  }\n\n  renderPreview() {\n    return <p>This is the Preview</p>;\n  }\n\n  handleAPI(api) {\n    // no need to do anything for now.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Select Component in MDX for Storybook\nDESCRIPTION: This MDX snippet provides comprehensive documentation for a Select component. It covers the component's purpose, design implementation guidelines, and usage recommendations. The content is structured for use in a Storybook environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-custom-file.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# Select\n\nSelect is a type of input that allows users to choose one or more options from a list of choices.\n\nThe options are hidden by default and revealed when a user interacts with an element.\n\nIt shows the currently selected option in its default collapsed state.\n\n## Design implementation\n\nTo help users get acquainted with the existing UI elements, it is recommended to use check the Figma file to see how the select input is implemented.\n\n### When to use?\n\nIn a select input where there are less than 3-4 items, consider using radio boxes, or radio inputs instead.\n\n### How to use?\n\nTo help users understand the options available in a select input, include a default option that is unselectable and acts as a label.\n```\n\n----------------------------------------\n\nTITLE: Registering Essential Addons in Storybook Configuration\nDESCRIPTION: Configuration code to register the essential addons in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-essentials'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Options for React in Storybook\nDESCRIPTION: TypeScript configuration options for React projects in Storybook, including type checking, React component parsing, and compiler settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  check?: boolean;\n  checkOptions?: CheckOptions;\n  reactDocgen?: 'react-docgen' | 'react-docgen-typescript' | false;\n  reactDocgenTypescriptOptions?: ReactDocgenTypescriptOptions;\n  skipCompiler?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation for Next.js Component in JavaScript Storybook\nDESCRIPTION: A JavaScript implementation of a Storybook story for a NavigationBasedComponent that relies on Next.js navigation. It configures the app directory and navigation segments for the component using Storybook parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-for-use-params-override-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nexport default {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n      navigation: {\n        segments: [\n          ['slug', 'hello'],\n          ['framework', 'nextjs'],\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Svelte with CSF\nDESCRIPTION: This snippet demonstrates how to set up story tags for a Svelte component using Component Story Format (CSF). It shows how to apply a global 'stable' tag and override it for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    // 👇 Applies to all stories in this file\n    tags: ['stable'],\n  });\n</script>\n\n<!-- 👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag -->\n<Story name=\"ExperimentalFeatureStory\" tags={['!stable', 'experimental']} />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Metadata with preview.meta\nDESCRIPTION: Example of using the preview.meta function to define component metadata with type-safe parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport preview from '#.storybook/preview';\n\nimport { Button } from './Button';\n\nconst meta = preview.meta({\n  component: Button,\n  parameters: {\n    layout: 'centered',\n  }\n});\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Control Type Matchers in Storybook (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up custom control type matchers in Storybook's preview configuration. It shows how to define regex patterns for color and date controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components\nDESCRIPTION: Defines stories for a custom button web component. Uses basic JavaScript implementation with background color controls and demonstrates accessible and inaccessible variants.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'custom-button',\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n};\n\n// This is an accessible story\nexport const Accessible = {\n  args: {\n    primary: false,\n    label: 'Button',\n  },\n};\n\n// This is not\nexport const Inaccessible = {\n  args: {\n    ...Accessible.args,\n    backgroundColor: 'red',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Equivalent CSF3 Story Definition in JavaScript\nDESCRIPTION: This JavaScript code shows the CSF3 (Component Story Format 3) equivalent of the JSON story definition. It includes default export and story export with server parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Component',\n  parameters: {\n    options: {\n      component: 'my_widget',\n    },\n  },\n};\n\nexport const Default = {\n  name: 'Default',\n  parameters: {\n    server: {\n      id: 'path/of/your/story\"',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Svelte-Vite in TypeScript\nDESCRIPTION: Sets up the Storybook framework configuration using TypeScript to enable Svelte with Vite. Imports the StorybookConfig type and uses type annotation to ensure proper configuration structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/svelte-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  framework: '@storybook/svelte-vite', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Svelte using TypeScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Svelte Checkbox component using TypeScript. It defines a meta object with type annotations and an 'Unchecked' story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Checkbox from './Checkbox.svelte';\n\nconst meta: Meta<typeof Checkbox> = {\n  component: Checkbox,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Checkbox>;\n\nexport const Unchecked: Story = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Component Story Structure for Qwik Framework\nDESCRIPTION: Example showing how to create a component story for the Qwik framework using TypeScript. Demonstrates the structure including Meta and StoryObj types, component import, and story definition with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-framework-qwik';\n\nimport type { YourComponentProps } from './YourComponent';\n\nimport { YourComponent } from './YourComponent';\n\n//👇 This default export determines where your story goes in the story list\nconst meta = {\n  component: YourComponent,\n} satisfies Meta<YourComponentProps>;\n\nexport default meta;\ntype Story = StoryObj<YourComponentProps>;\n\nexport const FirstStory: Story = {\n  args: {\n  //👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Story in JavaScript for Solid.js\nDESCRIPTION: This snippet defines a Storybook story for a List component in JavaScript for Solid.js. It imports the Unchecked story from ListItem and uses it as a child in the OneItem story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport const OneItem = {\n  args: {\n    children: <Unchecked {...Unchecked.args} />,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Metadata in Storybook (Angular, TypeScript)\nDESCRIPTION: Defines the default export for `Button.stories.ts` in an Angular project using TypeScript. It imports `Meta` from `@storybook/angular` for type safety and the `Button` component itself. The exported `meta` object configures the story's title in the Storybook UI and associates it with the `Button` component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: Button,\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with Storybook for Vue\nDESCRIPTION: This snippet demonstrates the Vitest configuration for a Vue Storybook project. It includes the Storybook test plugin, Vue-specific Storybook plugin, and sets up browser-based testing with Playwright.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, mergeConfig } from 'vitest/config';\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin';\nimport { storybookVuePlugin } from '@storybook/vue3-vite/vite-plugin';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport viteConfig from './vite.config';\n\nconst dirname =\n  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));\n\nexport default mergeConfig(\n  viteConfig,\n  defineConfig({\n    plugins: [\n      storybookTest({\n        // The location of your Storybook config, main.js|ts\n        configDir: path.join(dirname, '.storybook'),\n        // This should match your package.json script to run Storybook\n        // The --ci flag will skip prompts and not open a browser\n        storybookScript: 'yarn storybook --ci',\n      }),\n      storybookVuePlugin(),\n    ],\n    test: {\n      // Enable browser mode\n      browser: {\n        enabled: true,\n        // Make sure to install Playwright\n        provider: 'playwright',\n        headless: true,\n        instances: [{ browser: 'chromium' }],\n      },\n      setupFiles: ['./.storybook/vitest.setup.ts'],\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs Options in Storybook\nDESCRIPTION: Extends the Storybook configuration file to provide additional options for controlling how documentation is created, including renaming the auto-generated documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n  ],\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Documentation',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Vue Button Component (TypeScript)\nDESCRIPTION: This snippet shows how to configure decorators for a Vue Button component in Storybook using TypeScript. It defines a decorator that wraps the story in a div with margin using a Vue template and includes type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  decorators: [() => ({ template: '<div style=\"margin: 3em;\"><story /></div>' })],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Managing Style Elements with Storybook Globals (TypeScript)\nDESCRIPTION: Defines TypeScript functions to add or remove style tags on the DOM using the Storybook '@storybook/global' import. The main functions are 'clearStyles', which removes style elements by selector(s), and 'addOutlineStyles', which creates or updates a <style> tag based on a given selector id and CSS string. Parameters include selectors (as string or string array) and CSS source. Dependencies include Storybook and its global document reference. Outputs are DOM side effects; there are no return values. Functions handle cases where the target does or does not exist, with no error thrown for missing elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-css-helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { global } from '@storybook/global';\n\nexport const clearStyles = (selector: string | string[]) => {\n  const selectors = Array.isArray(selector) ? selector : [selector];\n  selectors.forEach(clearStyle);\n};\n\nconst clearStyle = (input: string | string[]) => {\n  const selector = typeof input === 'string' ? input : input.join('');\n  const element = global.document.getElementById(selector);\n  if (element && element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n};\n\nexport const addOutlineStyles = (selector: string, css: string) => {\n  const existingStyle = global.document.getElementById(selector);\n  if (existingStyle) {\n    if (existingStyle.innerHTML !== css) {\n      existingStyle.innerHTML = css;\n    }\n  } else {\n    const style = global.document.createElement('style');\n    style.setAttribute('id', selector);\n    style.innerHTML = css;\n    global.document.head.appendChild(style);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Web Components with Play Function\nDESCRIPTION: Example of testing Web Components using Storybook's play function. Shows how to initialize a custom element and test button interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ExampleWithRole: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Angular Storybook\nDESCRIPTION: Demonstrates how to set the backgrounds parameter at the component level in an Angular Storybook. The snippet uses TypeScript with the Meta type from '@storybook/angular' to ensure type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: JavaScript configuration file for Storybook that specifies the framework, story file patterns, and includes webpack configuration customization. The configuration exports an object with framework specification, story file patterns using glob syntax, and a webpack modifier function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-simplified-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    config.plugins.push(/* ... */);\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Storybook Decorator\nDESCRIPTION: Shows how to implement decorators in Vue components using template syntax for margin styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/vue3';\n\nimport YourComponent from './YourComponent.vue';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  decorators: [() => ({ template: '<div style=\"margin: 3em;\"><story/></div>' })],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Using Storybook State Hook\nDESCRIPTION: Shows how to use the useStorybookState hook to access Storybook's internal state in addon components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStorybookState } from '@storybook/manager-api';\n\nconst MyAddonPanel = () => {\n  const state = useStorybookState();\n  return <div>{state.storyId}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Light Theme Backgrounds in Storybook using JSX\nDESCRIPTION: This snippet renders the background color palette for the light theme. It filters out the 'color' key and creates ColorItem components for each valid background color value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<ColorPalette>\n  {Object.entries(convert(themes.light).background).map(([k,v]) => {\n    if(k === 'color'){\n      return null\n    }\n    if (typeof v === 'string' && (v.match(/^#/) || v.match(/^rgb/) || k.match(/color/i))) {\n      return (\n        <ColorItem\n          key={k}\n          title={k}\n          colors={{ [k]: v }}\n        />\n      );\n    } else if (typeof v === 'object') {\n      const colors = Object.entries(v).reduce((acc, [key, value]) => (typeof value === 'string' && (value.match(/^#/) || value.match(/^rgb/) || key.match(/color/i))) ? {...acc, [key]: value} : acc, {});\n      return (\n        <ColorItem\n          key={k}\n          title={k}\n          colors={colors}\n        />\n      );\n    }\n    return null;\n  })}\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in Vue3 CSF with TypeScript 4.9+\nDESCRIPTION: Example of configuring accessibility parameters for a Vue3 component using newer TypeScript 4.9+ syntax with 'satisfies' keyword. Demonstrates how to set up accessibility testing with type validation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ExampleStory = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Story Composition with Play Functions\nDESCRIPTION: Demonstration of combining multiple play functions to test component workflows.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const FirstStep = {\n  play: async () => { /* ... */ },\n};\n\nexport const SecondStep = {\n  play: async () => {\n    await FirstStep.play();\n    // Add your interactions\n  },\n};\n\nexport const ThirdStep = {\n  play: async () => {\n    await SecondStep.play();\n    // Add your interactions\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JavaScript Storybook Stories\nDESCRIPTION: Demonstrates the recommended approach for importing components in JavaScript Storybook stories. Instead of importing from the package's index file, components should be imported directly from their source files to improve build performance and prevent circular dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-fix-imports-autodocs-monorepo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Don't use the package's index file to import the component.\n// import { MyComponent } from '@component-package';\n\n// ✅ Use the component's export to import it directly.\nimport { MyComponent } from '@component-package/src/MyComponent';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'MyComponent',\n  component: MyComponent,\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes using Svelte CSF Addon (TypeScript)\nDESCRIPTION: Defines Storybook metadata within a Svelte component file (`.svelte`) using the `@storybook/addon-svelte-csf` helper (`defineMeta`) and standard TypeScript within the `<script module>` block. This approach embeds the story configuration and hides the 'foo' property from the args table by configuring `argTypes`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"YourComponent.stories.svelte\" renderer=\"svelte\" language=\"ts\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    argTypes: {\n      // foo is the property we want to remove from the UI\n      foo: {\n        table: {\n          disable: true,\n        },\n      },\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook URL in package.json\nDESCRIPTION: This JSON snippet demonstrates how to add a 'storybook' property in package.json to specify the URL of a published Storybook for package composition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/package-composition.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storybook\": {\n    \"url\": \"https://host.com/your-storybook-for-this-version\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Stories for Web Components with Play Functions (TypeScript)\nDESCRIPTION: This complete TypeScript file defines Storybook stories for a web component represented by the string `'demo-my-component'`. It utilizes types (`Meta`, `StoryObj`) from `@storybook/web-components` and imports testing utilities (`fireEvent`, `userEvent`, `within`) from `storybook/test`. The file includes two stories (`ClickExample`, `FireEventExample`) demonstrating interaction simulation within the `play` function using both `userEvent` and `fireEvent`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { fireEvent, userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ClickExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n\nexport const FireEventExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Story with Complex Args in Storybook (JavaScript)\nDESCRIPTION: This code snippet shows how to create a story with complex arg values, using a custom render function to convert primitive values to complex objects before rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MyStory = (args) => {\n  const actualFooter = JSON.parse(args.footer);\n  return <Story {...args} footer={<Footer {...actualFooter} />} />;\n};\nMyStory.args = {\n  footer: JSON.stringify({ text: 'hello' }),\n};\nMyStory.argTypes = {\n  footer: {\n    control: { type: 'text' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components in JavaScript\nDESCRIPTION: Sets up a Storybook story for a Web Components button ('demo-button'). Configures argTypes for the label property with a text control and custom description without needing to import types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const Basic = {\n  argTypes: {\n    // 👇 This story expects a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Cleaning Git repository for Storybook release in Bash\nDESCRIPTION: Command to clean the Git repository before starting the release process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -xdf\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Web Components Storybook - JavaScript\nDESCRIPTION: Presents a JavaScript configuration for Storybook stories targeting Web Components, using string-based component names. Each story export specifies included or excluded controls via array or regular expression. No external dependencies except Storybook core. Input: custom element name as string; output: web-component-friendly stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: 'your-component',\n};\n\nexport const ArrayInclude = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Vue List Component Stories in JavaScript (Implicit)\nDESCRIPTION: This snippet defines Storybook stories for a Vue List component using JavaScript and CSF 3.0 render functions. It exports `Empty`, `OneItem`, and `ManyItems` stories, each using a `render` function that returns a Vue component options object specifying the required components (`List`, `ListItem`) and a template string for rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Empty = {\n  render: () => ({\n    components: { List },\n    template: '<List/>',\n  }),\n};\n\nexport const OneItem = {\n  render: () => ({\n    components: { List, ListItem },\n    template: `\n      <List>\n        <list-item/>\n      </List>`,\n  }),\n};\n\nexport const ManyItems = {\n  render: () => ({\n    components: { List, ListItem },\n    template: `\n      <List>\n        <list-item/>\n        <list-item/>\n        <list-item/>\n      </List>`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls for Web Components in TypeScript\nDESCRIPTION: This example demonstrates how to configure conditional controls for Web Components in Storybook using TypeScript. It imports the Meta type from @storybook/web-components and shows various conditions for displaying controls based on the 'parent' argument's state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    parent: { control: 'select', options: ['one', 'two', 'three'] },\n\n    // 👇 Only shown when `parent` arg exists\n    parentExists: { if: { arg: 'parent', exists: true } },\n\n    // 👇 Only shown when `parent` arg does not exist\n    parentDoesNotExist: { if: { arg: 'parent', exists: false } },\n\n    // 👇 Only shown when `parent` arg value is truthy\n    parentIsTruthy: { if: { arg: 'parent' } },\n    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },\n\n    // 👇 Only shown when `parent` arg value is not truthy\n    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },\n\n    // 👇 Only shown when `parent` arg value is 'three'\n    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },\n\n    // 👇 Only shown when `parent` arg value is not 'three'\n    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },\n\n    // Each of the above can also be conditional on the value of a globalType, e.g.:\n\n    // 👇 Only shown when `theme` global exists\n    parentExists: { if: { global: 'theme', exists: true } },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Common TypeScript 4.9+ Storybook Stories with Mocked Date\nDESCRIPTION: This snippet shows how to set up Storybook stories for a common TypeScript 4.9+ Page component with a mocked date. It uses MockDate to set a fixed date for all stories and includes a play function for the Default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the name of your renderer (e.g. react, vue3)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\nimport MockDate from 'mockdate';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\nimport { Page } from './Page';\n\nconst meta = {\n  component: Page,\n  // 👇 Set the value of Date for every story in the file\n  async beforeEach() {\n    MockDate.set('2024-02-14');\n\n    // 👇 Reset the Date after each story\n    return () => {\n      MockDate.reset();\n    };\n  },\n} satisfies Meta<typeof Page>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  async play({ canvasElement }) {\n    // ... This will run with the mocked Date\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, sets the framework, specifies the directory for stories, defines the file pattern for stories, and sets a title prefix for automatic story naming.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-with-object.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: [\n    {\n      // 👇 Sets the directory containing your stories\n      directory: '../packages/components',\n      // 👇 Storybook will load all files that match this glob\n      files: '*.stories.*',\n      // 👇 Used when generating automatic titles for your stories\n      titlePrefix: 'MyComponents',\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in HTML with JavaScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a button in plain HTML using JavaScript. It uses DOM manipulation to create a button element with specific classes and text content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => {\n    const btn = document.createElement('button');\n    btn.innerText = 'Button';\n\n    btn.className = [\n      'storybook-button',\n      'storybook-button--medium',\n      'storybook-button--primary',\n    ].join(' ');\n\n    return btn;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet exports the default configuration for Storybook using TypeScript. It imports the StorybookConfig type, specifies the framework, story file patterns, and enables the 'argTypeTargetsV7' feature.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-arg-type-targets-v7.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  features: {\n    argTypeTargetsV7: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Mocking SvelteKit Imports in Stories\nDESCRIPTION: Example of how to mock SvelteKit imports using the parameters.sveltekit_experimental object in a story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyStory = {\n  parameters: {\n    sveltekit_experimental: {\n      stores: {\n        page: {\n          data: {\n            test: 'passed',\n          },\n        },\n        navigating: {\n          route: {\n            id: '/storybook',\n          },\n        },\n        updated: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Web Components in JavaScript\nDESCRIPTION: This snippet sets up the Storybook preview configuration for Web Components using JavaScript. It imports and sets the custom elements manifest, and defines default parameters for controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-elements-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setCustomElementsManifest } from '@storybook/web-components';\nimport customElements from '../custom-elements.json';\n\nsetCustomElementsManifest(customElements);\n\nexport default {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: JavaScript configuration for Storybook's main.js file. This defines the framework to use, story file patterns, and registers official Storybook addons including links, viewport, docs, controls, backgrounds, toolbars, measure, and outline.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-full-individual-essentials-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-viewport',\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        csfPluginOptions: null,\n        mdxPluginOptions: {\n          mdxCompileOptions: {\n            remarkPlugins: [],\n          },\n        },\n      },\n    },\n    '@storybook/addon-controls',\n    '@storybook/addon-backgrounds',\n    '@storybook/addon-toolbars',\n    '@storybook/addon-measure',\n    '@storybook/addon-outline',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Palette in Storybook Stories (TypeScript/TSX)\nDESCRIPTION: A TypeScript implementation of a Storybook story that displays a color palette using the traditional type annotation syntax. Demonstrates mapping through theme colors to create ColorItem components with explicit type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-canvas-doc-block-story.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { ColorItem, ColorPalette } from '@storybook/addon-docs/blocks';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nconst theme = {\n  colors: {\n    primaryDark: {\n      value: '#1C1C1C',\n    },\n    primaryRegular: {\n      value: '#363636',\n    },\n    primaryLight1: {\n      value: '#4D4D4D',\n    },\n    primaryLight2: {\n      value: '#878787',\n    },\n    primaryLight3: {\n      value: '#D1D1D1',\n    },\n    primaryLight4: {\n      value: '#EDEDED',\n    },\n  },\n};\n\n// ❌ Don't use the Doc Blocks inside your stories. It will break Storybook with a cryptic error.\nexport const Colors: Story = {\n  render: () => (\n    <ColorPalette>\n      {Object.entries(theme.colors).map(([key, { value }]) => (\n        <ColorItem\n          colors={{\n            [key]: value,\n          }}\n          key={key}\n          subtitle={`theme.colors.${key}`}\n          title={key}\n        />\n      ))}\n    </ColorPalette>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Vue.js with Font Awesome (TypeScript)\nDESCRIPTION: This snippet sets up the Storybook preview for a Vue.js project using TypeScript. It integrates Font Awesome icons and adds a decorator for story styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup, Preview } from '@storybook/vue3';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlusSquare as fasPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\n\nsetup((app) => {\n  //👇 Adds the icon to the library so you can use it in your story.\n  library.add(fasPlusSquare);\n  app.component('font-awesome-icon', FontAwesomeIcon);\n});\n\nconst preview: Preview = {\n  decorators: [\n    (story) => ({\n      components: { story },\n      template: '<div style=\"margin: 3em;\"><story /></div>',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Solid Button Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a Solid Button component in Storybook using TypeScript. It defines a decorator that wraps the story in a div with margin and includes type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Web Components List Component in JavaScript\nDESCRIPTION: This code configures Storybook stories for a Web Components List implementation using JavaScript and Lit. It specifies custom element names for both the List and ListItem components, and demonstrates rendering nested elements in the OneItem story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  title: 'List',\n  component: 'demo-list',\n  subcomponents: { ListItem: 'demo-list-item' }, // 👈 Adds the ListItem component as a subcomponent\n};\n\nexport const Empty = {};\n\nexport const OneItem = {\n  render: () => html`\n    <demo-list>\n      <demo-list-item></demo-list-item>\n    </demo-list>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Single Story Decorator Example\nDESCRIPTION: Demonstrates how to apply a decorator to a single story using the decorators property\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/decorators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = {\n  decorators: [(Story) => <div style={{ margin: '3em' }}><Story/></div>],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Navigation in Storybook using TypeScript 4.9+ syntax\nDESCRIPTION: A TypeScript 4.9+ implementation using the 'satisfies' operator for a Storybook story with Next.js navigation parameters. This approach provides better type inference while maintaining type safety for the NavigationBasedComponent story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-override-in-story.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n    },\n  },\n} satisfies Meta<typeof NavigationBasedComponent>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n// If you have the actions addon,\n// you can interact with the links and see the route change events there\nexport const Example: Story = {\n  parameters: {\n    nextjs: {\n      navigation: {\n        pathname: '/profile',\n        query: {\n          user: '1',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Storybook Environment Variables in Node.js\nDESCRIPTION: This snippet demonstrates how to access Storybook environment variables (STORYBOOK_THEME and STORYBOOK_DATA_KEY) in a Node.js environment using the process.env object. This approach is typical for Node.js and webpack-based applications.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-read-environment-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.env.STORYBOOK_THEME);\nconsole.log(process.env.STORYBOOK_DATA_KEY);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook main.js for MDX Support\nDESCRIPTION: JavaScript configuration to update the main.js file to load both MDX files and regular story files in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Svelte Stories\nDESCRIPTION: Demonstrates viewport configuration for Svelte Storybook stories. Uses the @storybook/addon-svelte-csf package and defineMeta helper to set up viewport options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { INITIAL_VIEWPORTS } from 'storybook/viewport';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n    parameters: {\n      viewport: {\n        //👇 Set available viewports for every story in the file\n        options: INITIAL_VIEWPORTS,\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Image Component with Local Images\nDESCRIPTION: Example of using Next.js Image component with locally stored images, demonstrating automatic width, height and blur data URL handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport Image from 'next/image';\nimport profilePic from '../public/me.png';\n\nfunction Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src={profilePic}\n        alt=\"Picture of the author\"\n        // width={500} automatically provided\n        // height={500} automatically provided\n        // blurDataURL=\"../public/me.png\" set to equal the image itself (for this framework)\n        // placeholder=\"blur\" // Optional blur-up while loading\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Web Components CSF (JavaScript)\nDESCRIPTION: Configures Storybook metadata for a Web Component using JavaScript in standard Component Story Format (CSF). It defines the default export object, specifies the component using its custom element tag name (string), and uses `argTypes` to hide the 'foo' property from the Storybook args table.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"YourComponent.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  component: 'your-component',\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Storybook Documentation in JavaScript and HTML\nDESCRIPTION: This snippet demonstrates how to embed Storybook documentation using both oEmbed and iframe methods. It includes the URL for oEmbed and the HTML code for iframe embedding.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/embed.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\n\n// iframe embed\n <iframe\n  src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--docs&viewMode=docs&shortcuts=false&singleStory=true\"\n  width=\"800\"\n  height=\"400\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Framework Migration Commands\nDESCRIPTION: Installation commands for migrating various frameworks from webpack5 to Vite\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove @storybook/preact-webpack5 @storybook/preset-preact-webpack\nnpm install @storybook/preact-vite --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories for Web Components with JavaScript\nDESCRIPTION: Creates a ButtonGroup story for Web Components using JavaScript. Imports Button stories from a separate file and composes them into a 'demo-button-group' custom element with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// 👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nexport default {\n  component: 'demo-button-group',\n};\n\nexport const Pair = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript version of the Storybook configuration file with proper type definitions. It imports the StorybookConfig type and defines the same configuration properties as the JavaScript version.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs-disable.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    'package-name': { disable: true },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Storybook in Flat Config Format (JavaScript)\nDESCRIPTION: Sets up ESLint using the new flat config style, which is the default in ESLint v9. This configuration ensures that the Storybook plugin rules are applied correctly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n  // ...\n  {\n    // Inside your .eslintignore file\n    ignores: ['!.storybook'],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Svelte Storybook via CSF - JavaScript\nDESCRIPTION: Outlines how to define and export Svelte UI component stories in JavaScript, using arrays and regular expressions to configure controls inclusion and exclusion. All stories use the same Svelte component import and utilize Storybook's metadata system for component definition and per-story parameters. No TypeScript typing. Inputs: Svelte components and parameter settings; outputs: Storybook-compatible JS story exports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport YourComponent from './YourComponent.svelte';\n\nexport default {\n  component: YourComponent,\n};\n\nexport const ArrayInclude = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack5 Builder in Storybook\nDESCRIPTION: Sets up Storybook to use Webpack5 as the builder with file system caching enabled. This configuration exports the core settings that define the builder and its options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack5-fsCache.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  core: {\n    builder: {\n      name: 'webpack5',\n      options: {\n        fsCache: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Svelte Button Story - Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet for Svelte imports the Button.svelte component and exports a default object designating it as the story component for Storybook. No specific typing is enforced, and it relies on the conventional CSF export structure for Storybook to recognize and render the Svelte Button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.svelte';\\n\\nexport default {\\n  component: Button,\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Settings in JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook's preview.js file that disables inline story rendering in documentation. This configuration sets the 'inline' parameter to false in the docs.story settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-optout-inline.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    docs: {\n      // Opt-out of inline rendering\n      story: { inline: false },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags for Common Framework using JavaScript\nDESCRIPTION: This snippet shows how to configure story tags for a common framework component using JavaScript. It demonstrates setting up default tags and adding specific tags to individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  /*\n   * All stories in this file will have these tags applied:\n   * - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n};\n\nexport const ExperimentalFeatureStory = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Stories in JavaScript\nDESCRIPTION: JavaScript configuration for Button component stories using Web Components with custom background settings. Defines a demo-button component with a gray background option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  parameters: {\n    backgrounds: {\n      default: 'Light',\n      values: [\n        // 👇 Add a new value\n        { name: 'Gray', value: '#CCC' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Story for Page Component\nDESCRIPTION: This snippet demonstrates how to set up a Storybook story for an Angular Page component. It imports the necessary types, defines the component, and disables auto-generated documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Page } from './Page';\n\nconst meta: Meta<Page> = {\n  component: Page,\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Documentation Structure\nDESCRIPTION: Demonstrates the MDX structure for rendering Storybook documentation including Meta configuration, Story display, and Stories collection.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOf.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={ButtonStories} />\n\n# Docs with of, but no name\n\nhello docs\n\n<Story of={ButtonStories.Basic} />\n\n<Stories />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Vue with TypeScript 4.9+ (Satisfies Operator)\nDESCRIPTION: Creates Storybook stories for a Vue Button component using TypeScript 4.9+ with the satisfies operator. Configures type-safe metadata and a primary button story with customized name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for CSF4 Stories\nDESCRIPTION: This MDX code block sets up the Meta component to associate the imported CSF4 stories with the current MDX file. It's crucial for Storybook to recognize and render the stories correctly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/react/template/stories/csf4.mdx#2025-04-22_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta of={StoriesModule} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Vue (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for the Page component in Vue. It uses a template with a slot for the footer and conditionally renders the footer content from the args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from './Page.vue';\n\nexport default {\n  component: Page,\n  render: (args) => ({\n    components: { Page },\n    setup() {\n      return { args };\n    },\n    template: `\n      <page v-bind=\"args\">\n        <template v-slot:footer>\n          <footer v-if=\"args.footer\" v-html=\"args.footer\" />\n        </template>\n      </page>\n    `,\n  }),\n};\n\nexport const CustomFooter = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Component TypeScript Implementation\nDESCRIPTION: Example of a Svelte component with TypeScript props and event dispatch functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/typescript.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { createEventDispatcher } from 'svelte';\n\n  export let count: number;\n  export let disabled: boolean;\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<div class=\"card\">\n  {count}\n  <button on:click={() => dispatch('increaseBy', 1)} {disabled}> Increase by 1 </button>\n  <button on:click={() => dispatch('decreaseBy', 1)} {disabled}> Decrease by 1 </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering with Solid in TypeScript\nDESCRIPTION: Implements SolidJS component with TypeScript to define types for user, document, and subdocuments. The component utilizes imports for page layout and document management, ensuring type safety throughout.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport PageLayout from './PageLayout';\nimport Document from './Document';\nimport SubDocuments from './SubDocuments';\nimport DocumentHeader from './DocumentHeader';\nimport DocumentList from './DocumentList';\n\nexport interface DocumentScreen {\n  user?: {};\n  document?: Document;\n  subdocuments?: SubDocuments[];\n}\n\nfunction DocumentScreen({ user, document, subdocuments }) {\n  return (\n    <PageLayout user={user}>\n      <DocumentHeader document={document} />\n      <DocumentList documents={subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Import Configuration in MDX\nDESCRIPTION: Example showing how to import and display markdown content in Storybook MDX files using the new syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from '@storybook/blocks';\nimport ReadMe from './README.md?raw';\n\n...\n\n<Markdown>{ReadMe}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/experimental-nextjs-vite with npm\nDESCRIPTION: This command installs the @storybook/experimental-nextjs-vite package as a development dependency using npm. It's used for integrating Storybook with Next.js and Vite in a project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/experimental-nextjs-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in JavaScript Preview\nDESCRIPTION: JavaScript configuration for adding global tags to all stories in a Storybook project. Sets up the 'autodocs' tag while 'dev' and 'test' tags are implicitly included by default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...rest of preview\n  /*\n   * All stories in your project will have these tags applied:\n   * - autodocs\n   * - dev (implicit default)\n   * - test (implicit default)\n   */\n  tags: ['autodocs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Documentation\nDESCRIPTION: Imports necessary dependencies for creating Storybook documentation, including meta tags and image components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from \"@storybook/addon-docs/blocks\";\nimport Image from \"next/image\";\n\nimport Github from \"./assets/github.svg\";\nimport Discord from \"./assets/discord.svg\";\nimport Youtube from \"./assets/youtube.svg\";\nimport Tutorials from \"./assets/tutorials.svg\";\nimport Styling from \"./assets/styling.png\";\nimport Context from \"./assets/context.png\";\nimport Assets from \"./assets/assets.png\";\nimport Docs from \"./assets/docs.png\";\nimport Share from \"./assets/share.png\";\nimport FigmaPlugin from \"./assets/figma-plugin.png\";\nimport Testing from \"./assets/testing.png\";\nimport Accessibility from \"./assets/accessibility.png\";\nimport Theming from \"./assets/theming.png\";\nimport AddonLibrary from \"./assets/addon-library.png\";\n```\n\n----------------------------------------\n\nTITLE: Angular Button Story Implementation (TypeScript)\nDESCRIPTION: Default story implementation for a Button component in Angular using CSF 3 format. Uses TypeScript with props passing pattern specific to Angular.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Default: Story = {\n  render: (args) => ({\n    props: args,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Svelte using CSF\nDESCRIPTION: This snippet shows how to configure story tags for a Svelte component using the Component Story Format (CSF). It demonstrates setting up default tags and adding specific tags to individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    /*\n     * All stories in this file will have these tags applied:\n     * - autodocs\n     * - dev (implicit default, inherited from preview)\n     * - test (implicit default, inherited from preview)\n     */\n    tags: ['autodocs'],\n  });\n</script>\n\n<!--\n  This particular story will have these tags applied:\n  - experimental\n  - autodocs (inherited from meta)\n  - dev (inherited from meta)\n  - test (inherited from meta)\n-->\n<Story name=\"ExperimentalFeatureStory\" tags={['experimental']} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Story Variant with Parameter Override in Storybook CSF 2\nDESCRIPTION: Creates a dark theme variant of a Primary Button story by using bind() to clone the original story, maintaining its args, and overriding its parameters to set a dark background. This pattern is useful for displaying the same component in different contexts without duplicating code.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-primary-dark-story.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PrimaryOnDark = Primary.bind({});\nPrimaryOnDark.args = Primary.args;\nPrimaryOnDark.parameters = { background: { default: 'dark' } };\n```\n\n----------------------------------------\n\nTITLE: Testing Navigation with Next.js Router Mock in TypeScript (TS 4.9+ Syntax)\nDESCRIPTION: A Storybook story using TypeScript 4.9+ syntax with the 'satisfies' operator for type checking. It tests a form component's back navigation by simulating a click on the 'Go back' button and verifying that the router's back() method was called.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-mock.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getRouter } from '@storybook/nextjs/router.mock';\n\nimport MyForm from './my-form';\n\nconst meta = {\n  component: MyForm,\n} satisfies Meta<typeof MyForm>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const GoBack: Story = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n    const backBtn = await canvas.findByText('Go back');\n\n    await userEvent.click(backBtn);\n    // 👇 Assert that your component called back()\n    await expect(getRouter().back).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta in JavaScript for Common Renderers\nDESCRIPTION: Creates a Storybook meta configuration using JavaScript that works with common renderers like React or Vue. This configuration defines the component and sets up table information for a 'value' property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    value: {\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Custom Metadata\nDESCRIPTION: Update to .storybook/preview.js to include custom metadata for generating controls and argTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setCustomElementsManifest } from '@storybook/web-components';\nimport customElements from '../custom-elements.json';\n\nsetCustomElementsManifest(customElements);\n```\n\n----------------------------------------\n\nTITLE: Setting Background Options in Preview Configuration\nDESCRIPTION: Configuration example showing how to define custom background colors and set initial background color in Storybook preview file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  backgrounds: {\n    default: 'dark',\n    values: [\n      { name: 'dark', value: '#333333' },\n      { name: 'light', value: '#FFFFFF' },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte CSF Story with JavaScript\nDESCRIPTION: Shows how to create a Storybook story for a Svelte component using JavaScript and the Svelte CSF format. Implements play function testing for select interactions with delay timings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n\n  function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n</script>\n\n<Story\n  name=\"ExampleChangeEvent\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const select = canvas.getByRole('listbox');\n\n    await userEvent.selectOptions(select, ['One Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Another Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Yet another item']);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Web Components with TypeScript\nDESCRIPTION: Creates a Storybook story for a Web Components List using TypeScript and Lit HTML. It imports the Unchecked story from MyListItem stories and uses TypeScript annotations with Storybook's Web Components support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\n// 👇 Import the stories of MyListItem\nimport { Unchecked } from './my-list-item.stories';\n\nconst meta: Meta = {\n  title: 'MyList',\n  component: 'demo-my-list',\n};\nexport default meta;\n\ntype Story = StoryObj;\n\nexport const OneItem: Story = {\n  render: () => html` <List> ${Unchecked({ ...Unchecked.args })} </List> `,\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Meta Configuration in Storybook TypeScript\nDESCRIPTION: Exports the default meta configuration object for Storybook and defines the Story type as a StoryObj.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default meta;\ntype Story = StoryObj;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories using Component Story Format in JavaScript\nDESCRIPTION: Demonstrates the Component Story Format (CSF) approach for creating a Button story in JavaScript. Exports a default configuration and a 'Large' story variant with disabled backgrounds.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Large = {\n  parameters: {\n    backgrounds: { disable: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Storybook Renderer Imports\nDESCRIPTION: Examples of incorrect code that directly imports from Storybook renderer packages, which should be avoided.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-renderer-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't import renderer packages directly\nimport { something } from '@storybook/react'\nimport { something } from '@storybook/vue3'\nimport { something } from '@storybook/web-components'\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Play Function for Generic Framework in TypeScript\nDESCRIPTION: This snippet shows a Storybook play function implementation for a generic framework using TypeScript. It demonstrates form interaction and submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const Submitted: Story = {\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter email and password', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');\n      await userEvent.type(canvas.getByTestId('password'), 'supersecret');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story\nDESCRIPTION: Implements a Button component story for Web Components using CSF 3 format. Defines a custom element 'demo-button' with primary variant.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'components/Button',\n  component: 'demo-button',\n};\n\nexport const Primary = { args: { primary: true } };\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Toolbar Addon in Storybook\nDESCRIPTION: Creates a custom toolbar addon in Storybook that displays an icon button. The addon is visible only when viewing story canvas and uses the Storybook manager API for registration and rendering. Includes conditional rendering based on view mode and tab state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolbar-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { addons, types } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { OutlineIcon } from '@storybook/icons';\n\naddons.register('my-addon', () => {\n  addons.add('my-addon/toolbar', {\n    title: 'Example Storybook toolbar',\n    //👇 Sets the type of UI element in Storybook\n    type: types.TOOL,\n    //👇 Shows the Toolbar UI element if the story canvas is being viewed\n    match: ({ tabId, viewMode }) => !tabId && viewMode === 'story',\n    render: ({ active }) => (\n      <IconButton active={active} title=\"Show a Storybook toolbar\">\n        <OutlineIcon />\n      </IconButton>\n    ),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Web Components with TypeScript\nDESCRIPTION: Demonstrates component parameter configuration for Web Components using TypeScript in Storybook. The example imports the Meta type from '@storybook/web-components' and sets parameters for the 'demo-button' component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Converting Storybook CSF 2 to CSF 3 using npm\nDESCRIPTION: Command to migrate Storybook Component Story Format from version 2 to 3 using npm. This targets TypeScript React stories with the specified glob pattern and parser.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-csf-2-to-3.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Convert CSF 2 to CSF 3\nnpx storybook@latest migrate csf-2-to-3 --glob=\"**/*.stories.tsx\" --parser=tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Angular with TypeScript\nDESCRIPTION: Creates a Storybook story for an Angular List component that includes a ListItem. The story reuses args from the ListItem's Unchecked story and renders the component through Angular's template syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { List } from './list.component';\nimport { ListItem } from './list-item.component';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<List> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n  decorators: [\n    moduleMetadata({\n      declarations: [List, ListItem],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<List>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const OneItem: Story = {\n  render: (args) => ({\n    props: args,\n    template: `\n      <app-list>\n        <app-list-item [item]=\"item\"></app-list-item>\n      </app-list>\n   `,\n  }),\n  args: {\n    ...Unchecked.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in SolidJS Stories (TypeScript with satisfies)\nDESCRIPTION: Demonstrates viewport configuration for SolidJS Storybook stories using TypeScript with the satisfies operator. Includes type definitions and proper typing for the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\nimport { INITIAL_VIEWPORTS } from '@storybook/addon-viewport';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n  parameters: {\n    viewport: {\n      //👇 Set available viewports for every story in the file\n      viewports: INITIAL_VIEWPORTS,\n    },\n  },\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Displayed Default Values in Storybook Docs\nDESCRIPTION: Example of manually configuring the display of default values in Storybook documentation using the table.defaultValue setting in argTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: MyComponent,\n  argTypes: {\n    //👇 Defining the arg's display value in docs.\n    text: {\n      table: { defaultValue: { summary: 'SomeType<T>' } },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Group Story in Vue 3 with TypeScript\nDESCRIPTION: Example code snippet showing how to structure a ButtonGroup component story in Vue 3 using TypeScript. It demonstrates importing stories from another file and composing them together with specific arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport ButtonGroup from './ButtonGroup.vue';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta: Meta<typeof ButtonGroup> = {\n  component: ButtonGroup,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ButtonGroup>;\n\nexport const Pair: Story = {\n  render: (args) => ({\n    components: { ButtonGroup },\n    setup() {\n      return { args };\n    },\n    template: '<ButtonGroup v-bind=\"args\" />',\n  }),\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Standard CSF Svelte Storybook Stories with TypeScript 4.9+\nDESCRIPTION: Shows how to add decorators to Svelte components using the standard CSF with TypeScript 4.9+. This example uses the 'satisfies' operator for improved type checking and applies a MarginDecorator component as a decorator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\nimport MarginDecorator from './MarginDecorator.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  decorators: [() => MarginDecorator],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Vue in TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a Vue Button component using TypeScript 4.9 syntax. It uses the 'satisfies' keyword for type inference and imports types from '@storybook/vue3'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta = {\n  title: 'Button',\n  component: Button,\n  argTypes: {\n    onClick: {},\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Stories Component in JavaScript for Storybook\nDESCRIPTION: This snippet shows how to import the Stories component from the Storybook addon-docs blocks. This import is necessary to use the Stories block in your Storybook documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-stories.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stories } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with JavaScript\nDESCRIPTION: Defines a Storybook story for a Button component using Svelte's CSF format with JavaScript. Sets up a 'Large' story variant with disabled background parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story\n  name=\"Large\"\n  parameters={{\n    backgrounds: { disable: true },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Theme in Storybook\nDESCRIPTION: Example showing how to configure Storybook to use a dark theme via the parameters.themes object in main.js. This sets the dark theme as the default option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\n\nexport default {\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet exports the default configuration for Storybook using JavaScript. It specifies the framework, story file patterns, and enables the 'argTypeTargetsV7' feature.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-arg-type-targets-v7.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  features: {\n    argTypeTargetsV7: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components\nDESCRIPTION: Web Components specific configuration using both JavaScript and TypeScript. Shows how to set up stories for custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-default.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  parameters: {\n    backgrounds: {\n      // 👇 Set default background value for all component stories\n      default: 'Gray',\n    },\n  },\n};\n\nexport const OnDark = {\n  parameters: {\n    backgrounds: {\n      // 👇 Override default background value for this story\n      default: 'Dark',\n    },\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  parameters: {\n    backgrounds: {\n      // 👇 Set default background value for all component stories\n      default: 'Gray',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const OnDark: Story = {\n  parameters: {\n    backgrounds: {\n      // 👇 Override default background value for this story\n      default: 'Dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Native Web with Vite in JavaScript\nDESCRIPTION: This code snippet shows the configuration for Storybook using React Native Web with Vite as the framework. It specifies the addons to be used and sets the framework to '@storybook/react-native-web-vite'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  addons: [\n    '@storybook/addon-react-native-web', // 👈 Remove the addon\n  ],\n  // Replace @storybook/react-webpack5 with the Vite framework\n  framework: '@storybook/react-native-web-vite',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Story with JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a Storybook story for a Web Components Page component using JavaScript. It configures the story with a title and component name, disabling auto-generated documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Page',\n  component: 'demo-page',\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Options for Vue in TypeScript\nDESCRIPTION: This code snippet exports a configuration object for Storybook when used with Vue. It uses the 'read-pkg-up' package to synchronously read the package.json file, specifies 'vue' as the framework, and sets the framework preset.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-server-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sync } from 'read-pkg-up';\n\nexport default {\n  packageJson: sync({ cwd: __dirname }).packageJson,\n  framework: 'vue',\n  frameworkPresets: [require.resolve('./framework-preset-vue.js')],\n};\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for CRA1 Projects with Storybook 4.0\nDESCRIPTION: A sample .babelrc configuration that works with Create React App v1 projects to maintain compatibility with Storybook 4.0 while keeping Babel 6.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_170\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"env\", \"react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Viewport Addon Parameters Format\nDESCRIPTION: Configuration showing the new format for the viewport addon that uses an options object with key-value pairs instead of the viewports object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/preview.js\nexport const parameters = {\n  viewport: {\n-   viewports: {\n-     iphone5: {\n-       name: 'phone',\n-       styles: {\n-         width: '320px',\n-         height: '568px',\n-       },\n-     },\n-    },\n+   options: {\n+     iphone5: {\n+       name: 'phone',\n+       styles: {\n+         width: '320px',\n+         height: '568px',\n+       },\n+     },\n+   },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Solid Button Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a Solid Button component in Storybook using JavaScript. It defines a decorator that wraps the story in a div with margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook Main.js Configuration with Addons\nDESCRIPTION: Example of main.js configuration including story patterns and addon configuration with options\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_150\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  stories: [\"../**/*.stories.js\"],\n  addons: [\n    \"@storybook/preset-create-react-app\",\n    {\n      name: \"@storybook/addon-docs\",\n      options: { configureJSX: true },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/experimental-nextjs-vite with pnpm\nDESCRIPTION: This command installs the @storybook/experimental-nextjs-vite package as a development dependency using pnpm. It's used for integrating Storybook with Next.js and Vite in a project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/experimental-nextjs-vite\n```\n\n----------------------------------------\n\nTITLE: Publishing Storybook packages to npm in Bash\nDESCRIPTION: Command to publish all Storybook packages to npm with a specific tag, using an npm access token.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nYARN_NPM_AUTH_TOKEN=<NPM_TOKEN> yarn release:publish --tag tag-for-publishing-older-releases --verbose\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte with TypeScript (CSF)\nDESCRIPTION: This snippet shows how to create Storybook stories for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It defines metadata and exports primary and secondary stories with type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories for Web Components with TypeScript (Partial)\nDESCRIPTION: Sets up a ButtonGroup story for Web Components using TypeScript. The snippet is incomplete but shows the initial import statements and type definitions for a Storybook story with web components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n```\n\n----------------------------------------\n\nTITLE: TypeScript StorybookConfig Configuration\nDESCRIPTION: Example showing how to properly type Storybook configuration when using TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from \"@storybook/react-vite\";\nconst config: StorybookConfig = {\n  framework: {\n    name: \"@storybook/react-vite\",\n    options: {}\n  }\n  // ... your configuration\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Support in Monorepo\nDESCRIPTION: Configuration for TypeScript support in Storybook within a monorepo setup, including tsconfig path aliases.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  framework: '@storybook/react',\n  typescript: {\n    check: true,\n    reactDocgen: 'react-docgen-typescript',\n    // You can extend the any existing configuration\n    reactDocgenTypescriptOptions: {\n      shouldExtractLiteralValuesFromEnum: true,\n      shouldRemoveUndefinedFromOptional: true,\n      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),\n      // Additional configuration options\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Web Components with JavaScript\nDESCRIPTION: This snippet shows how to create Storybook stories for a Web Components Button using JavaScript. It defines stories for primary and secondary button variations using the component tag name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Web Components Button (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up decorators for a Web Components Button in Storybook using JavaScript. It uses the 'lit' library to define a decorator that wraps the story in a div with margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  component: 'demo-button',\n  decorators: [(story) => html`<div style=\"margin: 3em\">${story()}</div>`],\n};\n\nexport const Example = {};\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Checking in Storybook Configuration\nDESCRIPTION: Enables the fork-ts-checker-webpack-plugin for TypeScript checking in Storybook's Webpack configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    check: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Composition for Local Storybooks\nDESCRIPTION: This snippet demonstrates how to compose multiple local Storybooks running on different ports, such as React and Angular Storybooks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  refs: {\n    react: {\n      title: 'React',\n      url: 'http://localhost:6006',\n    },\n    angular: {\n      title: 'Angular',\n      url: 'http://localhost:6007',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Page Stories with TypeScript for Angular\nDESCRIPTION: This snippet shows how to create Storybook stories for an Angular Page component using TypeScript. It imports necessary types, mocks an API call, and defines a default story with a mocked user session.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\n\nimport { Page } from './Page';\n\nconst meta: Meta<Page> = {\n  component: Page,\n};\nexport default meta;\n\ntype Story = StoryObj<Page>;\n\nexport const Default: Story = {\n  async beforeEach() {\n    // 👇 Set the return value for the getUserFromSession function\n    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Svelte Storybook Testing\nDESCRIPTION: Defines Vitest configuration for Svelte Storybook components testing with Playwright integration. Sets up browser testing environment and Storybook test configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-workspace.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, mergeConfig } from 'vitest/config';\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport viteConfig from './vite.config';\n\nconst dirname =\n  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineWorkspace([\n  './vitest.config.ts',\n  {\n    extends: './vite.config.ts',\n    plugins: [\n      storybookTest({\n        configDir: path.join(dirname, '.storybook'),\n        storybookScript: 'yarn storybook --ci',\n      }),\n    ],\n    test: {\n      name: 'storybook',\n      browser: {\n        enabled: true,\n        provider: 'playwright',\n        headless: true,\n        instances: [{ browser: 'chromium' }],\n      },\n      setupFiles: ['./.storybook/vitest.setup.ts'],\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Svelte Button Component in TypeScript\nDESCRIPTION: This TypeScript snippet defines Storybook meta for a Svelte Button component with explicit Meta typing and references to the imported Button.svelte. Arg types are defined as always-enabled and conditionally enabled based on the advanced argument. Needs @storybook/svelte, Button.svelte, and TypeScript. Output is a type-checked meta export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\\n\\nimport Button from './Button.svelte';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n  argTypes: {\\n    label: { control: 'text' }, // Always shows the control\\n    advanced: { control: 'boolean' },\\n    // Only enabled if advanced is true\\n    margin: { control: 'number', if: { arg: 'advanced' } },\\n    padding: { control: 'number', if: { arg: 'advanced' } },\\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n  },\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Parameters in Storybook\nDESCRIPTION: Shows how to use the api.getQueryParam() method to retrieve a query parameter set using setQueryParams().\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = api.getQueryParam('key');\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story in JavaScript\nDESCRIPTION: JavaScript implementation of a Storybook story for a TodoItem web component. Includes a loader function to fetch todo data and a render function to combine props with loaded data.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-todo-item',\n  render: (args, { loaded: { todo } }) => TodoItem({ ...args, ...todo }),\n};\n\nexport const Primary = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Labels in Storybook Manager\nDESCRIPTION: Demonstrates how to customize the sidebar labels in Storybook to preserve the old auto-title behavior using lodash's startCase function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from \"@storybook/addons\";\nimport startCase from \"lodash/startCase\";\n\naddons.setConfig({\n  sidebar: {\n    renderLabel: ({ name, type }) =>\n      type === \"story\" ? name : startCase(name),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Reset in Vue Storybook (JavaScript)\nDESCRIPTION: Vue implementation using JavaScript to show highlight reset functionality in Storybook. Uses Vue-specific decorator pattern with template return and useChannel API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-highlight-reset.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n\nimport MyComponent from './MyComponent.vue';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ResetHighlight = {\n  decorators: [\n    () => {\n      const emit = useChannel({});\n      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\n      emit(HIGHLIGHT, {\n        elements: ['header', 'section', 'footer'],\n      });\n      return {\n        template: '<story />',\n      };\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Function-based Emoji Button Story in React JSX\nDESCRIPTION: This story demonstrates creating a Button component with emoji content using a named function export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf.txt#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nexport function emojiFn() {\n  return (\n    <Button onClick={action(\"clicked\")}>\n      <span role=\"img\" aria-label=\"so cool\">\n        😀 😎 👍 💯\n      </span>\n    </Button>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for Storybook in Angular\nDESCRIPTION: Shows how to update the scripts section in package.json to run Storybook using Angular CLI commands. This configuration is suitable for projects with a single Angular application.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"scripts\": {\n    \"storybook\": \"start-storybook -p 6006\", // or `storybook dev -p 6006`\n    \"build-storybook\": \"build-storybook\" // or `storybook build`\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"storybook\": \"ng run <project-name>:storybook\",\n    \"build-storybook\": \"ng run <project-name>:build-storybook\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Helper Functions for Storybook Addon\nDESCRIPTION: Utility functions for managing CSS injection and removal in Storybook's preview iframe, handling both story and documentation modes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const clearStyles = (selector: string) => {\n  const selectors = document.querySelectorAll(selector);\n  selectors.forEach((el) => {\n    el.remove();\n  });\n};\n\nexport const addOutlineStyles = (selector: string, css: string) => {\n  const styleEl = document.createElement('style');\n  styleEl.innerHTML = css;\n  styleEl.setAttribute('id', selector);\n  document.head.appendChild(styleEl);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering @storybook/addon-themes in Storybook configuration\nDESCRIPTION: Diff showing how to add the @storybook/addon-themes to the addons array in the Storybook main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n+   '@storybook/addon-themes',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Webpack Configuration into Storybook\nDESCRIPTION: Shows how to import an existing Webpack configuration and merge it with Storybook's default configuration. This is useful when reusing Webpack configurations from generators or other tools.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nimport { merge } from 'webpack-merge';\nimport customWebpackConfig from '../webpack.config.js';\n\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  webpackFinal: async (config) => {\n    // Merge the customWebpackConfig with the Storybook config\n    return merge(config, customWebpackConfig);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Web Components Button Stories\nDESCRIPTION: TypeScript implementation of Button stories for web components using Storybook's Web Components framework and Lit HTML templating. Includes type definitions and story configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n};\nexport default meta;\n\ntype Story = StoryObj;\n\nexport const Variant1: Story = {\n  // 👇 This story will not appear in Storybook's sidebar or docs page\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 1 },\n};\n\nexport const Variant2: Story = {\n  // 👇 This story will not appear in Storybook's sidebar or docs page\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 2 },\n};\n\nexport const Combo: Story = {\n  // 👇 This story should not be tested, but will appear in the sidebar and docs page\n  tags: ['!test'],\n  render: () => html`\n    <div>\n      <demo-button variant=\"1\" />\n      <demo-button variant=\"2\" />\n    </div>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Vite Configuration in Storybook\nDESCRIPTION: Specifying a custom path for the Vite configuration file in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/react-vite',\n  core: {\n    builder: {\n      name: '@storybook/builder-vite',\n      options: {\n        viteConfigPath: 'path/to/vite.config.js',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Apollo Client in Vue Component\nDESCRIPTION: This snippet demonstrates how to define a Vue component that uses Apollo Client for GraphQL data management. It establishes an Apollo Client with HTTP link and in-memory cache, providing it through Vue's provide functionality. Dependencies include Vue, Apollo Client, and @vue/apollo-composable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n<template>\n  <div><slot /></div>\n</template>\n\n<script>\n  import { defineComponent, provide } from 'vue';\n  import { DefaultApolloClient } from '@vue/apollo-composable';\n  import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client/core';\n\n  // Apollo client wrapper component that can be used within your app and Storybook\n  export default defineComponent({\n    name: 'WrapperComponent',\n    setup() {\n      const httpLink = createHttpLink({\n        // You should use an absolute URL here\n        uri: 'https://your-graphql-endpoint',\n      });\n      const cache = new InMemoryCache();\n\n      const mockedClient = new ApolloClient({\n        link: httpLink,\n        cache,\n        defaultOptions: {\n          watchQuery: {\n            fetchPolicy: 'no-cache',\n            errorPolicy: 'all',\n          },\n          query: {\n            fetchPolicy: 'no-cache',\n            errorPolicy: 'all',\n          },\n        },\n      });\n      provide(DefaultApolloClient, mockedClient);\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework Options for Web Components & Vite\nDESCRIPTION: Example of passing additional configuration options to the Storybook framework for Web Components with Vite. This allows for customization of the builder and other framework-specific settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/web-components-vite',\n    options: {\n      builder: {\n        // Vite builder options\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Backgrounds in TypeScript\nDESCRIPTION: This snippet imports the Preview type from Storybook and creates a configuration object for background colors. It sets up red and green background options and exports the configuration as the default. The user needs to replace 'your-framework' with their specific framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-params.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Meta Component and Next.js Image Component\nDESCRIPTION: Imports necessary components from Storybook and Next.js, as well as various SVG and image assets used throughout the documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/ts/Configure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from \"@storybook/addon-docs/blocks\";\nimport Image from \"next/image\";\n\nimport Github from \"./assets/github.svg\";\nimport Discord from \"./assets/discord.svg\";\nimport Youtube from \"./assets/youtube.svg\";\nimport Tutorials from \"./assets/tutorials.svg\";\nimport Styling from \"./assets/styling.png\";\nimport Context from \"./assets/context.png\";\nimport Assets from \"./assets/assets.png\";\nimport Docs from \"./assets/docs.png\";\nimport Share from \"./assets/share.png\";\nimport FigmaPlugin from \"./assets/figma-plugin.png\";\nimport Testing from \"./assets/testing.png\";\nimport Accessibility from \"./assets/accessibility.png\";\nimport Theming from \"./assets/theming.png\";\nimport AddonLibrary from \"./assets/addon-library.png\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Solid (TypeScript)\nDESCRIPTION: TypeScript implementation of a Storybook story for the Page component in SolidJS. Uses ComponentProps from solid-js to extend the Page props with a footer property and renders the Page with a footer element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ComponentProps } from 'solid-js';\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Page } from './Page';\n\ntype PagePropsAndCustomArgs = ComponentProps<typeof Page> & { footer?: string };\n\nconst meta: Meta<PagePropsAndCustomArgs> = {\n  component: Page,\n  render: ({ footer, ...args }) => (\n    <Page {...args}>\n      <footer>{footer}</footer>\n    </Page>\n  ),\n};\nexport default meta;\n\ntype Story = StoryObj<PagePropsAndCustomArgs>;\n\nexport const CustomFooter: Story = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Svelte using JavaScript CSF\nDESCRIPTION: This snippet demonstrates how to set up story tags for a Svelte component using JavaScript in the Component Story Format (CSF). It shows the configuration of default tags and how to add specific tags to individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n  /*\n   * All stories in this file will have these tags applied:\n   * - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n};\n\nexport const ExperimentalFeatureStory = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Feature Configuration Types in TypeScript\nDESCRIPTION: TypeScript interface defining the available feature configuration options including argTypeTargetsV7 for filtering args, legacyDecoratorFileOrder for decorator ordering, and developmentModeForBuild for NODE_ENV settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-features.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  argTypeTargetsV7?: boolean;\n  legacyDecoratorFileOrder?: boolean;\n  developmentModeForBuild?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for DocumentScreen in Web Components with TypeScript\nDESCRIPTION: This snippet shows how to create a Storybook story for the DocumentScreen component using Web Components with TypeScript. It imports necessary types, defines metadata for the custom element, and creates a 'Simple' story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\n// 👇 Imports the required stories\nimport PageLayout from './PageLayout.stories';\nimport DocumentHeader from './DocumentHeader.stories';\nimport DocumentList from './DocumentList.stories';\n\nconst meta: Meta = {\n  component: 'demo-document-screen',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Simple: Story = {\n  args: {\n    user: PageLayout.Simple.args.user,\n    document: DocumentHeader.Simple.args.document,\n    subdocuments: DocumentList.Simple.args.documents,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Web Components Checkbox\nDESCRIPTION: This snippet shows how to set up Storybook metadata for a Web Components Checkbox using JavaScript. It defines the default export with title and component properties, where the component is specified as a custom element tag name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Design System/Atoms/Checkbox',\n  component: 'demo-checkbox',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Aliases in Storybook Config\nDESCRIPTION: Configuration for module aliases in Storybook config to replace modules with mock files during bundling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/your-framework',\n  },\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => ({\n    ...config,\n    resolve: {\n      ...config.resolve,\n      alias: {\n        ...config.resolve?.alias,\n        './lib/session': './lib/session.mock.ts',\n      },\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Grid Configuration Options\nDESCRIPTION: Example showing the default configuration options for the background grid feature.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  backgrounds: {\n    grid: {\n      cellSize: 20,\n      opacity: 0.5,\n      cellAmount: 5,\n      offsetX: 16, // default for padding\n      offsetY: 16, // default for padding\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript 4.9 and Satisfies in Svelte\nDESCRIPTION: Svelte Storybook story for TodoItem using TypeScript 4.9 with the 'satisfies' operator. Defines component and render function in meta, and a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport TodoItem from './TodoItem.svelte';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/svelte/api/csf\n * to learn how to use render functions.\n */\nconst meta = {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => ({\n    Component: TodoItem,\n    props: {\n      ...args,\n      ...todo,\n    },\n  }),\n} satisfies Meta<typeof TodoItem>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Angular List Stories in TypeScript\nDESCRIPTION: Configures a Storybook story for an Angular List component using TypeScript. It sets up the necessary Angular module metadata and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { moduleMetadata } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\n\nimport { List } from './list.component';\n\nconst meta: Meta<List> = {\n  component: List,\n  decorators: [\n    moduleMetadata({\n      declarations: [List],\n      imports: [CommonModule],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<List>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {\n  render: (args) => ({\n    props: args,\n    template: `<app-list></app-list>`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ColorItem in Storybook\nDESCRIPTION: This snippet demonstrates how to import the ColorItem component from Storybook addon-docs blocks. The ColorItem component is used to display individual color swatches within a ColorPalette.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-colorpalette.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ColorItem } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Channel Options Configuration Type Definition\nDESCRIPTION: TypeScript interface defining the available channel configuration options for communication between manager and preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-core.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  allowDate: boolean;\n  allowRegExp: boolean;\n  allowSymbol: boolean;\n  allowUndefined: boolean;\n  maxDepth: number;\n  space: number | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Vue with TypeScript\nDESCRIPTION: Implements Storybook stories for a Vue Button component using standard TypeScript. Defines typed component metadata and a primary button story with customized name and properties configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for SolidJS List Component with TypeScript 4.9+\nDESCRIPTION: This code sets up Storybook stories for a SolidJS List component using TypeScript 4.9 with the satisfies operator. It includes detailed comments about the optional title property and properly registers the ListItem as a subcomponent.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n  //👈 Adds the ListItem component as a subcomponent\n  subcomponents: { ListItem },\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Empty: Story = {};\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes with Package Managers\nDESCRIPTION: Commands for installing the @storybook/addon-themes package using yarn, npm, and pnpm package managers. This addon is required for theme integration in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyarn add -D @storybook/addon-themes\n```\n\nLANGUAGE: zsh\nCODE:\n```\nnpm install -D @storybook/addon-themes\n```\n\nLANGUAGE: zsh\nCODE:\n```\npnpm add -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: StoriesOf to CSF Migration Command\nDESCRIPTION: Shell command to automatically migrate existing stories from storiesOf API to Component Story Format using Storybook's codemod tool.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-stories-of.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx storybook@latest migrate storiesof-to-csf --glob=\"*/**/*.stories.@(tsx|jsx|ts|js)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Stories for Web Components with Play Functions (JavaScript)\nDESCRIPTION: This complete JavaScript file sets up Storybook stories for a web component identified by the string `'demo-my-component'`. It imports interaction testing utilities (`fireEvent`, `userEvent`, `within`) from `storybook/test` and provides two story examples (`ClickExample`, `FireEventExample`). These stories demonstrate using the `play` function to simulate user clicks via `userEvent` and `fireEvent` respectively.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fireEvent, userEvent, within } from 'storybook/test';\n\nexport default {\n  component: 'demo-my-component',\n};\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ClickExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n\nexport const FireEventExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Svelte CSF with TypeScript 4.9+\nDESCRIPTION: Demonstrates component parameter configuration in Svelte using the newer TypeScript 4.9+ syntax with the defineMeta helper. The example configures the backgrounds parameter for a Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Creates specific parameters at the component level\n    parameters: {\n      backgrounds: {\n        default: 'dark',\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining an Inaccessible Button Story in Storybook\nDESCRIPTION: Creates an inaccessible Button story that extends the Accessible story's properties and adds a red background color. This demonstrates how to reuse args from another story using the spread operator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// This is not\nexport const Inaccessible: Story = {\n  args: {\n    ...Accessible.args,\n    backgroundColor: 'red',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta using JavaScript for Svelte\nDESCRIPTION: This snippet in JavaScript configures Storybook for a Svelte Button component with arrow icons using argTypes. It shows how to define options and map them for a select control. It requires Svelte and Storybook's environment for proper execution.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.svelte';\n\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\nexport default {\n  component: Button,\n  argTypes: {\n    arrow: {\n      options: Object.keys(arrows), // An array of serializable values\n      mapping: arrows, // Maps serializable option values to complex arg values\n      control: {\n        type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n        labels: {\n          // 'labels' maps option values to string labels\n          ArrowUp: 'Up',\n          ArrowDown: 'Down',\n          ArrowLeft: 'Left',\n          ArrowRight: 'Right',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Component in Story Metadata with storiesOf API\nDESCRIPTION: TypeScript code example showing how to specify the component in story metadata using the older storiesOf API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storiesOf } from '@storybook/angular';\nimport { AppComponent } from './app.component';\n\nstoriesOf('App Component', module)\n  .addParameters({ component: AppComponent })\n  .add( ... );\n```\n\n----------------------------------------\n\nTITLE: Playwright Test for Login Form\nDESCRIPTION: Playwright test implementation that loads a Storybook story and verifies the login form functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('login form test', async ({ page }) => {\n  await page.goto('http://localhost:6006/iframe.html?id=stories-login--login-form');\n  await expect(page.getByLabel('username')).toHaveValue('username@email.com');\n  await expect(page.getByLabel('password')).toHaveValue('password');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for Svelte (CSF, JavaScript)\nDESCRIPTION: This JavaScript snippet exports a Storybook CSF configuration for a Svelte component, showing how to define component meta and a story with custom a11y parameters in standard JS. It enables or disables accessibility rules and uses the 'manual' global option. The structure mirrors common JS-based Storybook setups for Svelte and is suitable for projects that use plain CSF rather than the Svelte CSF extension.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport MyComponent from './MyComponent.svelte';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ExampleStory = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story with Dark Background in JavaScript\nDESCRIPTION: Defines a PrimaryOnDark story variant that extends the Primary story configuration and sets a dark background parameter. Uses JavaScript syntax with CSF 3.0 format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-primary-dark-story.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PrimaryOnDark = {\n  ...Primary,\n  parameters: { background: { default: 'dark' } },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with TypeScript for Common Components\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories using TypeScript for common components. It uses type annotations to ensure type safety for the meta object. The renderer should be replaced with the specific framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    value: { type: 'number' },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Button Stories in JavaScript\nDESCRIPTION: Shows how to create Button component stories using plain JavaScript, suitable for React or other frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst meta = {\n  component: Button,\n};\n\nexport default meta;\n\nexport const Basic = {\n  parameters: {\n    docs: {\n      source: { language: 'jsx' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Cookies and Headers in Storybook Stories (TypeScript 4.9+)\nDESCRIPTION: TypeScript 4.9+ implementation of a Storybook story that uses the 'satisfies' operator for type validation. This example shows how to mock cookies and headers for testing, with proper TypeScript typing for the mocks and assertions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-headers-mock.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { cookies, headers } from '@storybook/nextjs/headers.mock';\n\nimport MyForm from './my-form';\n\nconst meta = {\n  component: MyForm,\n} satisfies Meta<typeof MyForm>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const LoggedInEurope: Story = {\n  async beforeEach() {\n    // 👇 Set mock cookies and headers ahead of rendering\n    cookies().set('username', 'Sol');\n    headers().set('timezone', 'Central European Summer Time');\n  },\n  async play() {\n    // 👇 Assert that your component called the mocks\n    await expect(cookies().get).toHaveBeenCalledOnce();\n    await expect(cookies().get).toHaveBeenCalledWith('username');\n    await expect(headers().get).toHaveBeenCalledOnce();\n    await expect(cookies().get).toHaveBeenCalledWith('timezone');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Builder\nDESCRIPTION: JSON configuration for setting up Storybook builder in angular.json, including options for both development and build modes\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projects\": {\n    \"your-project\": {\n      \"architect\": {\n        \"storybook\": {\n          \"builder\": \"@storybook/angular:start-storybook\",\n          \"options\": {\n            \"configDir\": \".storybook\",\n            \"browserTarget\": \"your-project:build\",\n            \"port\": 6006\n          }\n        },\n        \"build-storybook\": {\n          \"builder\": \"@storybook/angular:build-storybook\",\n          \"options\": {\n            \"configDir\": \".storybook\",\n            \"browserTarget\": \"your-project:build\",\n            \"outputDir\": \"dist/storybook/your-project\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File using JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using a JavaScript main.js file. It sets the framework (which must be replaced with the actual framework, e.g., react-webpack5), specifies the patterns for locating story files, and defines a function to inject a custom font preload link into the Storybook Manager's HTML head. No special dependencies are required beyond a standard Storybook setup. The 'managerHead' property is a function that takes the existing head output as input and returns the modified string.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-manager-head.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  managerHead: (head) => `\n    ${head}\n    <link rel=\"preload\" href=\"/fonts/my-custom-manager-font.woff2\" />\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider Decorator in React Storybook (JavaScript)\nDESCRIPTION: Demonstrates how to add a styled-components ThemeProvider wrapper to React Storybook stories using JavaScript. The decorator wraps each story with a ThemeProvider component with a default theme.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\nexport default {\n  decorators: [\n    (Story) => (\n      <ThemeProvider theme=\"default\">\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </ThemeProvider>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Svelte in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a Svelte Button component using JavaScript. It imports the Button component, defines metadata, and exports a story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  args: {/* ... */},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Vue.js with Font Awesome (JavaScript)\nDESCRIPTION: This snippet sets up the Storybook preview for a Vue.js project using JavaScript. It integrates Font Awesome icons and adds a decorator for story styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setup } from '@storybook/vue3';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlusSquare as fasPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\n\nsetup((app) => {\n  //👇 Adds the icon to the library so you can use it in your story.\n  library.add(fasPlusSquare);\n  app.component('font-awesome-icon', FontAwesomeIcon);\n});\n\nexport default {\n  decorators: [\n    (story) => ({\n      components: { story },\n      template: '<div style=\"margin: 3em;\"><story /></div>',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Docs Container with Styled-Components ThemeProvider\nDESCRIPTION: This snippet shows how to wrap the Storybook Docs container with a styled-components ThemeProvider to provide theme access to the MDX content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, DocsContainer } from '@storybook/addon-docs';\nimport { ThemeProvider } from 'styled-components'\nimport { theme } from '../path/to/theme'\n\n<Meta\n  title=\"Addons/Docs/container-override\"\n  parameters={{\n    docs: {\n      container: ({ children, context }) => (\n        <DocsContainer context={context}>\n          <ThemeProvider theme={theme}>\n            {children}\n          </ThemeProvider>\n        </DocsContainer>\n      ),\n    },\n  }}\n/>\n\n# Title\n\nRest of your file...\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Documentation with Svelte CSF Renderer in MDX\nDESCRIPTION: This MDX document provides documentation for a Checkbox component using Storybook's Svelte renderer with CSF. It imports stories from a Svelte-specific stories file and displays an example of the unchecked state using Canvas.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories.svelte';\n\n<Meta of={CheckboxStories} />\n\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked.\n\nUse checkboxes to select one or more options from a list of choices.\n\n<Canvas of={CheckboxStories.Unchecked} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite Builder in TypeScript (Alternative)\nDESCRIPTION: This TypeScript snippet provides another example of configuring Storybook in `.storybook/main.ts` using the `StorybookConfig` type imported from the framework package. It specifies the framework (placeholder `@storybook/your-framework`), story locations (`*.mdx`, `*.stories.*`), and sets up the Vite builder (`@storybook/builder-vite`), referencing a custom Vite configuration file (`../../../vite.config.js`). It requires the Storybook framework package, `@storybook/builder-vite`, and TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-builder.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    builder: {\n      name: '@storybook/builder-vite',\n      options: {\n        viteConfigPath: '../../../vite.config.js',\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgType Categories in Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the standard `meta` configuration for a Button component story with explicit type annotation (`: Meta<typeof Button>`). It configures `argTypes` by assigning categories and subcategories via the `table` property for better organization in the Storybook UI. It requires importing the `Meta` type from the specific Storybook framework package (`@storybook/your-framework`) and the `Button` component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n        // Assigns the argTypes to a specific subcategory\n        subcategory: 'Button colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n        subcategory: 'Button style',\n      },\n    },\n    label: {\n      table: {\n        category: 'Text',\n        subcategory: 'Button contents',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n        subcategory: 'Button Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JSON Story Indexer in TypeScript\nDESCRIPTION: This snippet shows how to configure a custom indexer for JSON story files in Storybook using TypeScript. It includes type imports, indexer definition, and Storybook configuration setup with proper TypeScript typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-jsonstories.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\nimport type { Indexer } from 'storybook/internal/types';\n\nimport fs from 'fs/promises';\n\nconst jsonStoriesIndexer: Indexer = {\n  test: /stories\\.json$/,\n  createIndex: async (fileName) => {\n    const content = JSON.parse(fs.readFileSync(fileName));\n\n    const stories = generateStoryIndexesFromJson(content);\n\n    return stories.map((story) => ({\n      type: 'story',\n      importPath: `virtual:jsonstories--${fileName}--${story.componentName}`,\n      exportName: story.name,\n    }));\n  },\n};\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: [\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n    // 👇 Make sure files to index are included in `stories`\n    '../src/**/*.stories.json',\n  ],\n  experimental_indexers: async (existingIndexers) => [...existingIndexers, jsonStoriesIndexer],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration file for Storybook that exports default settings including the framework, story file patterns, and log level. The framework needs to be replaced with the actual framework being used (like react-webpack5 or vue3-vite).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-log-level.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  logLevel: 'debug',\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Button Story Implementation in Storybook\nDESCRIPTION: Creates a basic Button component story with a click action handler that logs when the button is clicked.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Basic = () => (\n  <Button onClick={action(\"clicked\")}>Hello Button</Button>\n);\n```\n\n----------------------------------------\n\nTITLE: ArgTypes Table Configuration\nDESCRIPTION: Demonstrates how to configure the documentation table display for an argType.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  argTypes: {\n    backgroundColor: {\n      table: {\n        category: 'Colors',\n        subcategory: 'Button Colors',\n        type: { summary: 'string' },\n        defaultValue: { summary: '#ffffff' }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: JavaScript configuration for Storybook's main.js file. Defines the framework to use, story file patterns to load, and enables crash reports for telemetry events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-main-enable-crash-reports.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript configuration for Storybook's main.ts file that imports the StorybookConfig type, specifies the framework, story file patterns, and disables telemetry. Users need to replace 'your-framework' with their actual framework name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-disable-telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableTelemetry: true, // 👈 Disables telemetry\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Vue Documentation in Storybook\nDESCRIPTION: Example of a Webpack configuration preset for Vue framework in Storybook Docs that adds vue-docgen-loader to extract component metadata for documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function webpack(webpackConfig: any = {}, options: any = {}) {\n  webpackConfig.module.rules.push({\n    test: /\\.vue$/,\n    loader: 'vue-docgen-loader',\n    enforce: 'post',\n  });\n  return webpackConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook with npm\nDESCRIPTION: This command uses npx to upgrade Storybook to the latest version using npm package manager. It runs the 'upgrade' command of the '@next' version of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@next upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Actions for Server-Side Stories in JSON\nDESCRIPTION: This JSON snippet shows how to configure actions for server-side stories using the actions.handles parameter. It specifies actions for mouseover and button click events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Actions\",\n  \"stories\": [\n    {\n      \"name\": \"Button\",\n      \"parameters\": {\n        \"server\": { \"id\": \"actions/button\" },\n        \"actions\": {\n          \"handles\": [\"mouseover\", \"click .btn\"]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Stories for Svelte CSF\nDESCRIPTION: MDX configuration specifically for Svelte CSF format, importing Checkbox stories with .svelte extension\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-imports.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories.svelte';\n```\n\n----------------------------------------\n\nTITLE: Individual Story Decorators\nDESCRIPTION: Updated syntax for adding decorators to individual stories using parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_165\n\nLANGUAGE: javascript\nCODE:\n```\nstoriesOf(\"Stories\", module)\n  .add(\"noncentered\", () => \"Hello\")\n  .add(\"centered\", () => \"Hello\", { decorators: [centered] });\n```\n\n----------------------------------------\n\nTITLE: Using useGlobals Hook in Storybook Addon (JavaScript)\nDESCRIPTION: The useGlobals hook is used for addons that rely on Storybook Globals. It allows obtaining and updating global values and is recommended to be used with React optimization techniques.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-addons-api-useglobal.md\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Compodoc in preview.ts\nDESCRIPTION: Code for manual Compodoc setup that registers the generated documentation.json file in the Storybook preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setCompodocJson } from '@storybook/addon-docs/angular';\nimport docJson from '../documentation.json';\n\nsetCompodocJson(docJson);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework Options in Angular\nDESCRIPTION: Shows how to set up the Storybook configuration file for Angular, including specifying the framework and additional options. This setup is typically done in the .storybook/main.ts file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/angular';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/angular',\n    options: {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up the main Storybook configuration file using JavaScript. It specifies the framework, story file patterns, and build options for testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-sourcemaps.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableSourcemaps: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Play Function for Testing Select Components in Storybook\nDESCRIPTION: This code shows a Storybook story with a play function that simulates user interaction with a select dropdown. It uses the userEvent API to select different options from a dropdown list with timed pauses between actions using a sleep utility function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleChangeEvent: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const select = canvas.getByRole('listbox');\n\n    await userEvent.selectOptions(select, ['One Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Another Item']);\n    await sleep(2000);\n\n    await userEvent.selectOptions(select, ['Yet another item']);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Button Story in Storybook for Web Components (JavaScript)\nDESCRIPTION: This snippet demonstrates defining a Storybook story for a Web Component using JavaScript. Instead of importing a component class/function, the `component` property in the default exported metadata object is set to the custom element's tag name (`'demo-button'`). A basic story `Button` is exported as an empty object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  title: 'Design System/Atoms/Button',\n  component: 'demo-button',\n};\n\n// This is the only named export in the file, and it matches the component name\nexport const Button = {};\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Panel to Storybook UI in JavaScript\nDESCRIPTION: Boilerplate code for creating a new Panel addon in Storybook. This snippet demonstrates how to register a panel and add it to Storybook's UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-addon-panel-example.md\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Web Components Story using JavaScript\nDESCRIPTION: Shows how to create a Storybook story for Web Components using JavaScript. Demonstrates the simplified syntax for web components registration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n};\n\nexport const ExampleStory = {\n  args: {\n    propertyA: import.meta.env.STORYBOOK_DATA_KEY,\n    propertyB: import.meta.env.VITE_CUSTOM_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with PNPM\nDESCRIPTION: Executes Storybook test suite using PNPM as the package manager. The command runs the test-storybook script defined in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook\n```\n\n----------------------------------------\n\nTITLE: React/Common Framework Play Function Implementation\nDESCRIPTION: Shows play function implementation for React or other common frameworks in JavaScript, including story composition and user event testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const FirstStory = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');\n  },\n};\n\nexport const SecondStory = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('other-element'), 'another value');\n  },\n};\n\nexport const CombinedStories = {\n  play: async ({ context, canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await FirstStory.play(context);\n    await SecondStory.play(context);\n    await userEvent.type(canvas.getByTestId('another-element'), 'random value');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Core Configuration Type Definition\nDESCRIPTION: TypeScript interface defining the core configuration options available in Storybook's main.js/ts configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-core.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  builder?: string | { name: string; options?: BuilderOptions };\n  channelOptions?: ChannelOptions;\n  crossOriginIsolated?: boolean;\n  disableProjectJson?: boolean;\n  disableTelemetry?: boolean;\n  disableWebpackDefaults?: boolean;\n  disableWhatsNewNotifications?: boolean;\n  enableCrashReports?: boolean;\n  renderer?: RendererName;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Framework Options\nDESCRIPTION: Example configuration for SvelteKit framework options in Storybook, showing how to set up builder configuration through the main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/sveltekit',\n    options: {\n      builder: {\n        // Vite builder options\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Storybook's Webpack Configuration Based on Environment\nDESCRIPTION: Example of how to extend Storybook's webpack configuration in main.js with environment-specific adjustments using the webpackFinal field.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpackFinal: async (config, { configType }) => {\n    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'\n    // You can change the configuration based on that.\n    // 'PRODUCTION' is used when building the static version of storybook.\n\n    // Make whatever fine-grained changes you need\n    config.module.rules.push({\n      test: /\\.scss$/,\n      use: ['style-loader', 'css-loader', 'sass-loader'],\n      include: path.resolve(__dirname, '../'),\n    });\n\n    // Return the altered config\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Page Story with JavaScript\nDESCRIPTION: Storybook story for React Page component using JavaScript. Creates a note in the database during play function and mounts the component with dynamic data. Includes user interaction testing and argument type controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Default = {\n  play: async ({ mount, args }) => {\n    const note = await db.note.create({\n      data: { title: 'Mount inside of play' },\n    });\n\n    const canvas = await mount(\n      // 👇 Pass data that is created inside of the play function to the component\n      //   For example, a just-generated UUID\n      <Page {...args} params={{ id: String(note.id) }} />,\n    );\n\n    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));\n  },\n  argTypes: {\n    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.\n    params: { control: { disable: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Dependencies\nDESCRIPTION: Imports required dependencies for Storybook documentation including Meta component from addon-docs, component stories, and a custom template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/emoji-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport * as EmojiButtonStories from './emoji-button.stories.tsx';\nimport Template from './Template.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Storybook Addon\nDESCRIPTION: Example package.json configuration for a Storybook addon showing required metadata fields including name, version, description, repository, keywords, and Storybook-specific configuration. Demonstrates how to specify supported and unsupported frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/integration-catalog.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"storybook-addon-outline\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Outline all elements with CSS to help with layout placement and alignment\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/chromaui/storybook-outline\"\n  },\n  \"author\": \"winkerVSbecks\",\n  \"keywords\": [\"storybook-addons\", \"style\", \"debug\", \"layout\", \"css\"],\n  \"storybook\": {\n    \"displayName\": \"Outline\",\n    \"unsupportedFrameworks\": [\"vue\"],\n    \"supportedFrameworks\": [\"react\", \"angular\"],\n    \"icon\": \"https://yoursite.com/outline-icon.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Svelte Button Component (Svelte CSF)\nDESCRIPTION: This snippet shows how to configure decorators for a Svelte Button component in Storybook using Svelte CSF. It uses the defineMeta function to set up a decorator that wraps the story with a MarginDecorator component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n  import MarginDecorator from './MarginDecorator.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    decorators: [() => MarginDecorator],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including Story with Meta Reference\nDESCRIPTION: Demonstrates how to include a Storybook story with its associated metadata\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Story of={ButtonStories.Basic} meta={ButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Story with Play Function\nDESCRIPTION: Example of using the play function to test interactive component scenarios automatically.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"login-form-with-play-function.md\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Addon with Storybook in Shell (pnpm)\nDESCRIPTION: This shell command uses pnpm to install the @storybook/addon-a11y package in a Storybook project. This is applicable for projects using pnpm as their package manager, and requires an existing Storybook configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-add.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm exec storybook add @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Rendering Composed Vue Stories in Tests\nDESCRIPTION: Demonstrates the updated way to render composed Vue stories in tests using @testing-library/vue, as composed stories are now components instead of functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it } from 'vitest';\nimport { render } from '@testing-library/vue';\nimport * as stories from './Button.stories';\nimport { composeStory } from '@storybook/vue3';\n\nit('renders primary button', () => {\n  const Primary = composeStory(stories.Primary, stories.default);\n-  render(Primary({ label: 'Hello world' }));\n+  render(Primary, { props: { label: 'Hello world' } });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Story with Disabled TOC\nDESCRIPTION: Demonstrates how to configure an Angular story file with disabled table of contents using TypeScript. Imports Meta type from @storybook/angular and defines story metadata with autodocs tag and TOC disable parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      toc: {\n        disable: true, // 👈 Disables the table of contents\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Web Components with TypeScript\nDESCRIPTION: This snippet shows how to set up story tags for a Web Components button using TypeScript. It demonstrates applying a global 'stable' tag and overriding it for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ExperimentalFeatureStory: Story = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Configuration in TypeScript\nDESCRIPTION: This code defines and exports a Storybook configuration using TypeScript. It imports a type for Storybook configuration, ensuring type safety. The experimental feature 'experimentalRSC' is enabled, and users must ensure compatibility with the TypeScript setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/rsc-feature-flag.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/nextjs';\n\nconst config: StorybookConfig = {\n  // ...\n  features: {\n    experimentalRSC: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Stories\nDESCRIPTION: Story configuration specific to Web Components using both JavaScript and TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'your-component',\n  parameters: { controls: { sort: 'requiredFirst' } },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'your-component',\n  parameters: { controls: { sort: 'requiredFirst' } },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Svelte Storybook (TypeScript 4.9)\nDESCRIPTION: This TypeScript 4.9 snippet for Svelte CSF demonstrates the creation of a story for 'MyComponent', using '@storybook/addon-svelte-csf' for configuration and disabling default a11y checks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_5\n\nLANGUAGE: ts-4-9\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"NonA11yStory\"\n  globals={{\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  }}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object, and exports it as the default. The framework should be replaced with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-docgen.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableDocgen: false,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring SolidJS Storybook Story with Figma Link in TypeScript\nDESCRIPTION: Defines a Storybook story for a SolidJS component (`MyComponent`) using standard TypeScript. It imports types from `storybook-solidjs` and the component, defines explicitly typed metadata (`meta`), and exports an `Example` story with parameters linking to a Figma design file. Depends on `storybook-solidjs` and the SolidJS component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"MyComponent.stories.ts|tsx\" renderer=\"solid\" language=\"ts\"\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: ArgTypes Value Mapping\nDESCRIPTION: Shows how to map complex values to simple options in argTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: <b>Bold</b>,\n        Italic: <i>Italic</i>\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Documentation with Svelte Renderer using Standard CSF in MDX\nDESCRIPTION: This MDX document provides documentation for a Checkbox component using Storybook's Svelte renderer with standard Component Story Format. It imports stories from a regular stories file and displays an example of the unchecked state using Canvas.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n\n<Meta of={CheckboxStories} />\n\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked.\n\nUse checkboxes to select one or more options from a list of choices.\n\n<Canvas of={CheckboxStories.Unchecked} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Svelte CSF and TypeScript 4.9\nDESCRIPTION: Demonstrates using the defineMeta function from @storybook/addon-svelte-csf to create a Svelte component story with specific argTypes and options. Includes a helper function and renders a component with arguments and computed properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  const { Story } = defineMeta({\n      component: YourComponent,\n      //👇 Creates specific argTypes\n      argTypes: {\n        propertyA: {\n          options: ['Item One', 'Item Two', 'Item Three'],\n          control: { type: 'select' }, // Automatically inferred when 'options' is defined\n        },\n        propertyB: {\n          options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n        },\n      },\n  });\n\n  const someFunction = (valuePropertyA, valuePropertyB) => {\n    // Do some logic here\n  };\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  args={{\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  }}\n>\n  {#snippet children(args)}\n    <YourComponent\n      {...args}\n      someProperty={someFunction(args.propertyA, args.propertyB)}\n    />\n  {/snippet}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in React Storybook (TypeScript 4.9)\nDESCRIPTION: This TypeScript snippet features a Storybook story setup for a React component, specifying 'MyComponent' and disabling all automatic a11y checks by setting 'manual' to true. It leverages '@storybook/react' for typing and story structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_2\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const NonA11yStory: Story = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Button with Custom Wrapper in TypeScript React\nDESCRIPTION: Shows how to use the asChild prop to render the Button with a custom wrapper, such as an external link or a custom router component. This allows for greater flexibility in button usage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button asChild>\n  <a href=\"https://storybook.js.org\">Hello world!</a>\n</Button>\n<Button asChild>\n  <Link href='/home'>Hello world!</Link>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Web Components in JavaScript\nDESCRIPTION: This snippet shows how to create stories for the Page component as a Web Component using JavaScript. It imports Header stories, sets up the default export with component metadata, and defines a LoggedIn story that spreads the args from the Header's LoggedIn story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// 👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nexport default {\n  component: 'demo-page',\n};\n\nexport const LoggedIn = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Button Stories in JavaScript\nDESCRIPTION: Imports the Meta component from Storybook's addon-docs, the Button component stories, and a custom Template component. These imports are used to set up the documentation structure for the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './button.stories.tsx';\nimport Template from './Template.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in Preact with JavaScript\nDESCRIPTION: This code demonstrates how to create a Storybook story for a Histogram component using Preact with JavaScript. It imports the h function from Preact for JSX support and uses a render function to render the component with the spread props pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsx h */\nimport { h } from 'preact';\n\nimport { Histogram } from './Histogram';\n\nexport default {\n  component: Histogram,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Default = {\n  render: (args) => <Histogram {...args} />,\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Stories in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook stories for a common renderer using TypeScript. It demonstrates the use of type annotations for metadata and stories, and illustrates the structure of a story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Foo } from './Foo';\n\nconst meta: Meta<typeof Foo> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'OtherFoo/Bar',\n  component: Foo,\n  id: 'Foo/Bar', // Or 'foo-bar' if you prefer\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Foo>;\n\nexport const Baz: Story = {\n  name: 'Insert name here',\n};\n```\n\n----------------------------------------\n\nTITLE: Using Meta Component in Storybook Documentation\nDESCRIPTION: This snippet uses the Meta component to reference a specific story named 'Story One' from the imported AStories. The comment indicates that this story name matches an existing story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingName.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{/* This is the same name as a story */}\n\n<Meta of={AStories} name=\"Story One\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Stories with JavaScript\nDESCRIPTION: Sets up a Button component story for Web Components using JavaScript. Includes component title and custom element tag name configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport const Basic = {\n  parameters: {\n    docs: {\n      story: { autoplay: true },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component Stories in TypeScript\nDESCRIPTION: Defines Storybook metadata for an Angular component called 'Example'. Specifies the component and sets up argTypes for the 'value' property with a description for documentation purposes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    value: {\n      description: 'The value of the slider',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Web Components Storybook Stories with TypeScript\nDESCRIPTION: Shows how to add decorators to Web Components using TypeScript. This example demonstrates how to wrap the story function result with a div that has a margin of 3em using Lit HTML.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  decorators: [(story) => html`<div style=\"margin: 3em\">${story()}</div>`],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Registration in TypeScript\nDESCRIPTION: Example of registering an addon using the new type-strict API in @storybook/manager-api. Shows proper usage of required type property and removal of id property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_62\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addons, types } from \"@storybook/manager-api\";\n\naddons.register(\"my-addon\", () => {\n  addons.add(\"my-addon/panel\", {\n    type: types.PANEL,\n    title: \"My Addon\",\n    render: ({ active }) => (active ? <div>Hello World</div> : null),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with Loaders in React (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for TodoItem in React. It includes a default export with component and render function, plus a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TodoItem } from './TodoItem';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport default {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,\n};\n\nexport const Primary = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Angular Example Component\nDESCRIPTION: This snippet defines a Storybook Meta configuration for an Angular Example component. It sets up argTypes for a 'label' property with options and mappings for Bold and Italic styles.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: <b>Bold</b>,\n        Italic: <i>Italic</i>,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: MSW GraphQL Mocking Stories\nDESCRIPTION: Example stories showing how to mock GraphQL requests using MSW, including success and error scenarios.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from 'msw';\n\nexport default {\n  component: DocumentScreen,\n};\n\nexport const Success = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('GetDocument', (req, res, ctx) => {\n          return res(ctx.data({\n            document: {\n              title: 'Document title',\n              content: 'Document content',\n            },\n          }));\n        }),\n      ],\n    },\n  },\n};\n\nexport const Error = {\n  parameters: {\n    msw: {\n      handlers: [\n        graphql.query('GetDocument', (req, res, ctx) => {\n          return res(ctx.errors([{ message: 'Failed to load document' }]));\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook MDX Documentation Structure\nDESCRIPTION: MDX markup that defines the documentation structure including the Meta component reference and displaying the Standard story variation of the Account Form.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/AccountForm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Docs for Account form\n\n<Meta of={AccountFormStories} />\n\n<Story of={AccountFormStories.Standard} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JSON Story Indexer in TypeScript (TypeScript 4.9+)\nDESCRIPTION: This snippet demonstrates the setup of a custom indexer for JSON story files in Storybook using TypeScript 4.9 or later. It includes type imports, indexer definition with TypeScript types, and the Storybook configuration with proper typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-jsonstories.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\nimport type { Indexer } from 'storybook/internal/types';\n\nimport fs from 'fs/promises';\n\nconst jsonStoriesIndexer: Indexer = {\n  test: /stories\\.json$/,\n  createIndex: async (fileName) => {\n    const content = JSON.parse(fs.readFileSync(fileName));\n\n    const stories = generateStoryIndexesFromJson(content);\n\n    return stories.map((story) => ({\n      type: 'story',\n      importPath: `virtual:jsonstories--${fileName}--${story.componentName}`,\n      exportName: story.name,\n    }));\n  },\n};\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: [\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n    // 👇 Make sure files to index are included in `stories`\n    '../src/**/*.stories.json',\n  ],\n  experimental_indexers: async (existingIndexers) => [...existingIndexers, jsonStoriesIndexer],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Vue List Stories in JavaScript\nDESCRIPTION: Creates a Storybook story for a Vue List component using JavaScript. It imports the List component and defines an Empty list story with a render function that returns the component template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './ListComponent.vue';\n\nexport default {\n  component: List,\n};\n\n// Always an empty list, not super interesting\nexport const Empty = {\n  render: () => ({\n    components: { List },\n    template: '<List/>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Configuration in JavaScript\nDESCRIPTION: This snippet exports a default Storybook configuration object in JavaScript. It includes the enabling of 'experimentalRSC', a feature that may introduce next-generation functionalities. Ensure that the project setup supports experimental features for a smooth experience.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/rsc-feature-flag.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  features: {\n    experimentalRSC: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Svelte Storybook using CSF (JavaScript)\nDESCRIPTION: Exports default Storybook metadata for a Svelte `Button` component in JavaScript using the standard Component Story Format (CSF). It imports the component and configures conditional controls for `label` (text input) and `image` (select input) props using `argTypes.if`, ensuring only one is displayed based on the other's value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"svelte\" language=\"js\" tabTitle=\"CSF\"\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Project Annotations with Storybook for Vue in JavaScript\nDESCRIPTION: The JavaScript equivalent for Vue 3 projects, configuring project annotations via Storybook integrations. It includes accessibility setup and can be extended with custom project annotations, utilizing Vitest's `beforeAll`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n\nimport { setProjectAnnotations } from '@storybook/vue3';\n\n// Import the a11y addon annotations\nimport * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';\n\n// Optionally import your own annotations\nimport * as projectAnnotations from './preview';\n\nconst project = setProjectAnnotations([\n  // Add the a11y addon annotations\n  a11yAddonAnnotations,\n  projectAnnotations,\n]);\n\nbeforeAll(project.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport for a Specific Story in Storybook\nDESCRIPTION: This snippet shows how to set a specific viewport for an individual story using the globals option in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// MyComponent.stories.js|ts|jsx|tsx\n\nimport { Meta, StoryObj } from '@storybook/react';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const Example: Story = {\n  parameters: {\n    viewport: {\n      defaultViewport: 'iphonex',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Simulating User Click with userEvent in Storybook Play Function (JavaScript/Web Components)\nDESCRIPTION: This JavaScript snippet defines a Storybook story (`ClickExample`) for a web component identified by the tag name `'demo-my-component'`. It utilizes the `play` function and testing utilities (`userEvent`, `within`) from `storybook/test` to simulate a user clicking an element with the role 'button' within the component's shadow DOM or light DOM.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const ClickExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Modern Storybook Story Definition in Svelte\nDESCRIPTION: Demonstrates the updated approach to defining Storybook stories using the defineMeta helper function, which provides a more streamlined API and better type support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n\n</script>\n\n<Story name=\"Default\" tags={['autodocs']} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Babel Transform for React JSX\nDESCRIPTION: Creates a default Babel configuration object that includes the React JSX transform plugin. The function accepts a TransformOptions parameter from @babel/core and returns a configuration object with the necessary plugin setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-babel-configuration-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransformOptions } from '@babel/core';\n\nexport function babelDefault(config: TransformOptions) {\n  return {\n    plugins: [[require.resolve('@babel/plugin-transform-react-jsx'), {}, 'preset']],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Reproduction Repository to Storybook (Shell)\nDESCRIPTION: Command to link a GitHub repository as a reproduction for Storybook development. This creates a local project and links it to the Storybook codebase for interactive development.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@next link https://github.com/your-username/your-project.git\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories for Svelte Components\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for Svelte List components. It includes stories for empty, one item, and many items configurations using Svelte CSF.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import List from './List.svelte';\n  import ListItem from './ListItem.svelte';\n\n  const { Story } = defineMeta({\n    component: List,\n  });\n</script>\n\n<Story name=\"Empty\" />\n\n<Story name=\"One Item\">\n  {#snippet children(args)}\n    <List {...args} >\n      <ListItem />\n    </List>\n  {/snippet}\n</Story>\n\n<Story name=\"Many Items\">\n  {#snippet children(args)}\n    <List {...args} >\n      <ListItem />\n      <ListItem />\n      <ListItem />\n    </List>\n  {/snippet}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Form Component with JavaScript\nDESCRIPTION: Test suite for a Vue form component using Vue Testing Library and Storybook's composeStories. Tests form validation states using Vue-specific testing utilities while maintaining similar test structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/multiple-stories-test.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/vue';\n\nimport { composeStories } from '@storybook/vue3';\n\nimport * as FormStories from './LoginForm.stories';\n\nconst { InvalidForm, ValidForm } = composeStories(FormStories);\n\ntest('Tests invalid form state', async () => {\n  await InvalidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).toBeInTheDocument();\n});\n\ntest('Tests filled form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Stories with TypeScript\nDESCRIPTION: Example of how to set up a component story with proper metadata using TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InfoButton } from './InfoButton.vue';\n\nexport default {\n  title: 'InfoButton',\n  component: InfoButton,\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling DocsPage at Component Level\nDESCRIPTION: Example of disabling DocsPage for a specific component in the story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  title: 'Demo/Button',\n  component: Button,\n  parameters: { docs: { page: null } },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with SolidJS Hooks in JavaScript\nDESCRIPTION: This snippet shows how to create a Storybook story for a Button component in SolidJS using hooks (createSignal). It demonstrates managing state with SolidJS signals to create an interactive button that changes appearance when clicked.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSignal } from 'solid-js';\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n * Example Button story with Solid Hooks.\n * See note below related to this example.\n */\nconst ButtonWithHooks = () => {\n  // Sets the hooks for both the label and primary props\n  const [value, setValue] = createSignal('Secondary');\n  const [isPrimary, setIsPrimary] = createSignal(false);\n\n  // Sets a click handler to change the label's value\n  const handleOnChange = () => {\n    if (!isPrimary()) {\n      setIsPrimary(true);\n      setValue('Primary');\n    }\n  };\n  return <Button primary={isPrimary()} onClick={handleOnChange} label={value()} />;\n};\n\nexport const Primary = {\n  render: () => <ButtonWithHooks />,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Project Annotations with Storybook for React in TypeScript\nDESCRIPTION: This snippet sets up project annotations in a React environment using TypeScript for Storybook. It imports `beforeAll` from Vitest and applies accessibility and project-specific annotations. Dependencies include `@storybook/react` and `@storybook/addon-a11y`. It supports customization with additional project annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n\nimport { setProjectAnnotations } from '@storybook/react';\n\n// Import the a11y addon annotations\nimport * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';\n\n// Optionally import your own annotations\nimport * as projectAnnotations from './preview';\n\nconst project = setProjectAnnotations([\n  // Add the a11y addon annotations\n  a11yAddonAnnotations,\n  projectAnnotations,\n]);\n\nbeforeAll(project.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Configuring Component for Props Table in Stories\nDESCRIPTION: Sets up the component metadata for generating props tables in Storybook Docs using the default export syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Tags in JavaScript Stories\nDESCRIPTION: Shows how to configure the 'no-tests' tag at both the component and story level in JavaScript/JSX. The tag is applied to exclude stories from test execution when enabled in the test-runner configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-exclude-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n  tags: ['no-tests'], // 👈 Provides the `no-tests` tag to all stories in this file\n};\n\nexport const ExcludeStory = {\n  //👇 Adds the `no-tests` tag to this story to exclude it from the tests when enabled in the test-runner configuration\n  tags: ['no-tests'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Documentation with Common Renderer in MDX\nDESCRIPTION: This MDX document provides documentation for a Checkbox component using Storybook's common renderer. It imports stories from a standard Checkbox.stories file and displays an example of the unchecked state using Canvas.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n\n<Meta of={CheckboxStories} />\n\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked.\n\nUse checkboxes to select one or more options from a list of choices.\n\n<Canvas of={CheckboxStories.Unchecked} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Composition for Published Storybooks\nDESCRIPTION: This snippet shows how to configure Storybook Composition to reference a published Storybook using the 'refs' field in the main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  refs: {\n    'design-system': {\n      title: 'Acme Design System',\n      url: 'https://5ccbc373887ca40020446347-yldsqjoxzb.chromatic.com',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with TypeScript 4.9+ Satisfies Operator\nDESCRIPTION: This snippet shows how to use TypeScript 4.9+'s 'satisfies' operator to configure Storybook stories. It provides type safety while allowing type inference for the meta object. The renderer should be replaced with the specific framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    value: { type: 'number' },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Using useChannel Hook in Storybook Addon (JavaScript)\nDESCRIPTION: The useChannel hook allows setting subscriptions to events and emitting custom events to the channel. It can be used in both the iframe and the manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-addons-api-usechannel.md\" />\n```\n\n----------------------------------------\n\nTITLE: Defining and Decorating Vue Storybook Component - JavaScript\nDESCRIPTION: This story defines a Storybook component for MyComponent with Vue in JavaScript, applying a decorator to emit highlight events for selected HTML elements. It depends on 'storybook/preview-api' and 'storybook/highlight'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight-addon.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport MyComponent from './MyComponent.vue';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const Highlighted = {\n  decorators: [\n    () => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n      });\n      return {\n        template: '<story />',\n      };\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Button Story with Custom Parameters in Storybook\nDESCRIPTION: Demonstrates how to add custom parameters to a Storybook story using the parameters property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport const WithParams = () => <Button>WithParams</Button>;\nWithParams.parameters = { foo: 'bar' }\n```\n\n----------------------------------------\n\nTITLE: Generic JavaScript Component Story\nDESCRIPTION: Framework-agnostic implementation of a Storybook story using JavaScript with delayed typing interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const DelayedStory = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const exampleElement = canvas.getByLabelText('example-element');\n\n    await userEvent.type(exampleElement, 'random string', {\n      delay: 100,\n    });\n\n    const AnotherExampleElement = canvas.getByLabelText('another-example-element');\n    await userEvent.type(AnotherExampleElement, 'another random string', {\n      delay: 100,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Options in Storybook Configuration File\nDESCRIPTION: Example of how to configure the framework-specific options in Storybook's main configuration file. This snippet shows how to specify the framework name and provide additional configuration options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/frameworks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeSnippets path=\"main-config-framework.md\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Apollo Client Wrapper for Svelte Components\nDESCRIPTION: This snippet shows how to create an Apollo Client wrapper component for Svelte. It sets up a mocked Apollo Client with specific configuration options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { ApolloClient, InMemoryCache } from '@apollo/client';\n\n  import { setClient } from 'svelte-apollo';\n\n  const mockedClient = new ApolloClient({\n    uri: 'https://your-graphql-endpoint',\n    cache: new InMemoryCache(),\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all',\n      },\n      query: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all',\n      },\n    },\n  });\n  setClient(mockedClient);\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Compilation in Webpack 5 for Storybook\nDESCRIPTION: Configuration to enable Webpack 5's experimental lazy compilation feature in Storybook, which helps start up Storybook faster at the cost of slightly slower story browsing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  core: {\n    builder: {\n      name: 'webpack5',\n      options: {\n        lazyCompilation: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in Svelte using Svelte CSF with JavaScript\nDESCRIPTION: Creates a ButtonGroup story in Svelte using Svelte CSF format with JavaScript. Uses the defineMeta helper from @storybook/addon-svelte-csf to define a story that composes Button stories into a ButtonGroup with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import ButtonGroup from './ButtonGroup.svelte';\n\n  //👇 Imports the Button stories\n  import * as ButtonStories from './Button.stories.svelte';\n\n  const { Story } = defineMeta({\n    component: ButtonGroup,\n  });\n</script>\n\n<Story\n  name=\"Pair\"\n  args={{\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Renderer MDX Documentation\nDESCRIPTION: Sets up a Storybook MDX documentation file using the common renderer. Shows both standalone documentation page setup and component documentation configuration using story imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-docs-only-page.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\nimport * as ExampleComponentStories from './ExampleComponent.stories';\n\n{/* 👇 Documentation-only page */}\n\n<Meta title=\"Documentation\" />\n\n{/* 👇 Component documentation page */}\n\n<Meta of={ExampleComponentStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath Imports in package.json\nDESCRIPTION: Shows how to set up subpath imports in package.json for consistent story file imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"#*\": [\".//*\", \"./*.ts\", \"./*.tsx\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration file for Storybook that sets up the React-Vite framework with legacyRootApi enabled and specifies story file paths. This configuration can be used as a template and customized for different frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    // Replace react-vite with the framework you are using (e.g., react-webpack5)\n    name: '@storybook/react-vite',\n    options: {\n      legacyRootApi: true,\n    },\n  },\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Codemod to Upgrade Hierarchy Separators via Shell\nDESCRIPTION: Provides a shell command for automatically migrating all Storybook story titles in a codebase to use the correct '/' hierarchy separator. This requires having Node.js/npm and Storybook installed, and executes the Storybook codemod 'upgrade-hierarchy-separators' across matching story files. It expects story files to be located under various subdirectories and supports multiple file extensions like .tsx, .jsx, .ts, and .js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/hierarchy-separator.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx storybook@latest migrate upgrade-hierarchy-separators --glob=\"*/**/*.stories.@(tsx|jsx|ts|js)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Filesystem Caching in Webpack 5 for Storybook\nDESCRIPTION: Configuration to enable Webpack 5's filesystem caching feature in Storybook, which caches build output between runs to speed up subsequent startups.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  core: {\n    builder: {\n      name: 'webpack5',\n      options: {\n        fsCache: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Next.js Aliases\nDESCRIPTION: Configuration for setting up Jest with Next.js and Storybook portable stories\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// jest.config.ts\nimport type { Config } from 'jest';\nimport nextJest from 'next/jest.js';\n// 👇 Import the utility function\nimport { getPackageAliases } from '@storybook/nextjs/export-mocks';\n\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n});\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  // ... rest of Jest config\n  moduleNameMapper: {\n    ...getPackageAliases(), // 👈 Add the utility as mapped module names\n  },\n};\n\nexport default createJestConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Web Components Storybook Stories with JavaScript\nDESCRIPTION: Sets up viewport configuration for a demo-button web component using JavaScript. Establishes a default tablet viewport at the component level and overrides it with a mobile viewport for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  globals: {\n    // 👇 Set viewport for all component stories\n    viewport: { value: 'tablet', isRotated: false },\n  },\n};\n\nexport const OnPhone = {\n  globals: {\n    // 👇 Override viewport for this story\n    viewport: { value: 'mobile1', isRotated: false },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Arg Values in Storybook 6.3\nDESCRIPTION: Example of how to set default values for args at the component level in Storybook 6.3. This replaces the previous behavior of inferring defaults from prop types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_124\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: MyComponent,\n  args: {\n    argName: \"default-value\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Solid Storybook Preview Configuration (JavaScript)\nDESCRIPTION: Configures story decorators for SolidJS Storybook implementation. Implements layout wrapping based on parameters similar to React configuration but for Solid components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  decorators: [\n    (Story, { parameters }) => {\n      const { pageLayout } = parameters;\n      switch (pageLayout) {\n        case 'page':\n          return (\n            <div className=\"page-layout\">\n              <Story />\n            </div>\n          );\n        case 'page-mobile':\n          return (\n            <div className=\"page-mobile-layout\">\n              <Story />\n            </div>\n          );\n        default:\n          return <Story />;\n      }\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Unstyled Block in Storybook MDX\nDESCRIPTION: This snippet demonstrates how to import the Unstyled block from Storybook addon-docs and use it to remove default styling from specific content in MDX documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-unstyled.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Unstyled } from \"@storybook/addon-docs/blocks\";\nimport { Header } from \"./Header.tsx\";\n\n<Meta title=\"Unstyled\" />\n\n> This block quote will be styled\n\n... and so will this paragraph.\n\n<Unstyled>\n  > This block quote will not be styled\n\n  ... neither will this paragraph, nor the following component (which contains an <h1>):\n\n  <Header />\n\n</Unstyled>\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json for Storybook 9.0\nDESCRIPTION: This snippet shows how to update the package.json file to include Storybook 9.0 as a dependency. It removes individual Storybook packages and adds the main 'storybook' package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"storybook\": \"next\" // or \"latest\", or \"^9.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering React Button Story - Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a Button story for Storybook in a React environment. It imports the Button component and specifies it under the component property in the default export. The dependency is the local Button module, and the snippet enables this component to appear in Storybook for documentation and testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\\n\\nexport default {\\n  component: Button,\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Snapshot Serializer\nDESCRIPTION: Configuration setup for enabling a custom snapshot serializer to handle specific formatting requirements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  snapshotSerializers: ['./snapshot-serializer.js']\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Names in Storybook Stories\nDESCRIPTION: Shows how to create more descriptive test names by using the name property on a story object. This allows including spaces, brackets, or other special characters in the test name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Story = {\n  name: 'custom, descriptive name'\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Margin Decorator in Svelte 5 with TypeScript\nDESCRIPTION: TypeScript version of the Svelte 5 margin decorator with proper type annotations. Uses the Snippet type from Svelte for the children prop type definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/margindecorator.md#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import type { Snippet } from 'svelte';\n\n  let { children }: { children: Snippet } = $props();\n</script>\n\n<div>\n  {@render children()}\n</div>\n\n<style>\n  div {\n    margin: 3em;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue3 Application in Storybook\nDESCRIPTION: This snippet demonstrates how to initialize a Vue3 application in Storybook 7.0 using the new setup function instead of the deprecated app export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setup } from \"@storybook/vue3\";\nimport Button from \"./Button.vue\";\n\nsetup((app) => {\n  app.component(\"GlobalButton\", Button);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Using defineMeta for Svelte Button Component in Svelte Script (JavaScript)\nDESCRIPTION: This Svelte snippet leverages the defineMeta utility from @storybook/addon-svelte-csf to declare meta information for a Svelte Button component. It describes the use of controls and conditional args, encapsulated in a <script module> block. Dependencies: @storybook/addon-svelte-csf, Button.svelte. Inputs are the Svelte Button component and argTypes, output is a Story context for Storybook Svelte integration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n    argTypes: {\\n      label: { control: 'text' }, // Always shows the control\\n      advanced: { control: 'boolean' },\\n      // Only enabled if advanced is true\\n      margin: { control: 'number', if: { arg: 'advanced' } },\\n      padding: { control: 'number', if: { arg: 'advanced' } },\\n      cornerRadius: { control: 'number', if: { arg: 'advanced' } },\\n    },\\n  });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Svelte-Vite in JavaScript\nDESCRIPTION: Sets up the Storybook framework configuration using JavaScript to enable Svelte with Vite. The configuration exports a default object that specifies the framework package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  framework: '@storybook/svelte-vite', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Angular with TypeScript\nDESCRIPTION: Defines stories for an Angular Button component with accessible and inaccessible variants. Uses TypeScript with Angular-specific Storybook configurations and includes background color controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './Button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\n// This is an accessible story\nexport const Accessible: Story = {\n  args: {\n    primary: false,\n    label: 'Button',\n  },\n};\n// This is not\nexport const Inaccessible: Story = {\n  args: {\n    ...Accessible.args,\n    backgroundColor: 'red',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Highlight Channel in Web Components (TypeScript)\nDESCRIPTION: Demonstrates how to use the highlight channel with Web Components using TypeScript. This example imports the necessary types and creates a story that highlights elements with customized styling options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-addon-custom-style.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components-vite';\n\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const StyledHighlight: Story = {\n  decorators: [\n    (story) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n        color: 'blue',\n        style: 'double', // 'dotted' | 'dashed' | 'solid' | 'double'\n      });\n      return story();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in JavaScript for Svelte using CSF Format\nDESCRIPTION: Creates a Storybook story for a Svelte Button component using the Component Story Format (CSF) in JavaScript. Each story uses the render function to return a Svelte component configuration with props for different label variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: 'Button',\n    },\n  }),\n};\n\nexport const Secondary = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: '😄👍😍💯',\n    },\n  }),\n};\n\nexport const Tertiary = {\n  render: () => ({\n    Component: Button,\n    props: {\n      backgroundColor: '#ff0',\n      label: '📚📕📈🤓',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for React in Storybook\nDESCRIPTION: This snippet defines a Storybook story for a Button component in React. It imports the Button component, sets up the default export for Storybook, and defines a 'Sample' story that renders the Button with a 'hello button' label.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-sample.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Sample = {\n  render: () => <Button label=\"hello button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components with JavaScript\nDESCRIPTION: JavaScript implementation for Web Components Button stories. Shows how to configure stories for custom elements with background settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  globals: {\n    // 👇 Set background value for all component stories\n    backgrounds: { value: 'gray', grid: false },\n  },\n};\n\nexport const OnDark = {\n  globals: {\n    // 👇 Override background value for this story\n    backgrounds: { value: 'dark' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in React (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for the Page component in React. It renders the Page component with a footer child element that displays the content from the footer arg.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Page } from './Page';\n\nexport default {\n  component: Page,\n  render: ({ footer, ...args }) => (\n    <Page {...args}>\n      <footer>{footer}</footer>\n    </Page>\n  ),\n};\n\nexport const CustomFooter = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in TypeScript for Common Renderers\nDESCRIPTION: Demonstrates creating a Storybook story for a Button component in TypeScript, compatible with any renderer. Imports Meta and StoryObj types and configures a label control with text type and custom description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {\n  argTypes: {\n    // 👇 This story expects a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook ESLint Plugin with yarn\nDESCRIPTION: Installs eslint-plugin-storybook as a development dependency using yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-plugin-storybook-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev eslint-plugin-storybook\n```\n\n----------------------------------------\n\nTITLE: Angular Component Story Implementation\nDESCRIPTION: Demonstrates how to create Storybook stories for Angular components using TypeScript. Shows a basic story and one with custom props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Default: Story = {};\n\nexport const WithProp: Story = {\n  render: () => ({\n    props: {\n      prop: 'value',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook's main.ts file, including type definitions. This example demonstrates how to properly type the configuration object using StorybookConfig from the framework package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-storyloading-with-directory.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  // 👇 Storybook will load all existing stories within the MyStories folder\n  stories: ['../packages/MyStories'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Storybook in TypeScript\nDESCRIPTION: TypeScript configuration example for setting up Storybook with the SvelteKit framework in main.ts. Imports the StorybookConfig type and defines a strongly-typed configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-framework-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/sveltekit';\n\nconst config: StorybookConfig = {\n  // ...\n  framework: {\n    name: '@storybook/sveltekit',\n    options: {\n      // ...\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components and Utilities for Storybook Theming in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook's addon-docs and theming utilities. It sets up the foundation for displaying color palettes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, ColorPalette, ColorItem } from '@storybook/addon-docs/blocks';\n\nimport { themes, ThemeProvider, convert, ensure } from 'storybook/theming';\n\nimport { SideBySide } from './SideBySide';\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Handling in Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook that modifies webpack to use @svgr/webpack for SVG files. It finds and modifies the existing image rule to exclude SVGs, then adds a new rule specifically for handling SVG files with @svgr/webpack.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-configure-svgr.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  webpackFinal: async (config) => {\n    config.module = config.module || {};\n    config.module.rules = config.module.rules || [];\n\n    // This modifies the existing image rule to exclude .svg files\n    // since you want to handle those files with @svgr/webpack\n    const imageRule = config.module.rules.find((rule) => rule?.['test']?.test('.svg'));\n    if (imageRule) {\n      imageRule['exclude'] = /\\.svg$/;\n    }\n\n    // Configure .svg files to be loaded with @svgr/webpack\n    config.module.rules.push({\n      test: /\\.svg$/,\n      use: ['@svgr/webpack'],\n    });\n\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Web Components in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for Web Components using TypeScript. It imports the necessary types, defines metadata including the component tag name and argTypes, and exports the configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    value: { type: 'number' },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for HTML Button Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up decorators for an HTML Button component in Storybook using TypeScript. It defines a decorator that wraps the story in a div with margin and uses typed arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\nimport { createButton, ButtonArgs } from './Button';\n\nconst meta: Meta<ButtonArgs> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  decorators: [\n    (story) => {\n      const decorator = document.createElement('div');\n      decorator.style.margin = '3em';\n      decorator.appendChild(story());\n      return decorator;\n    },\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonArgs>;\n\nexport const Primary: Story = {\n  render: (args) => createButton(args),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes in TypeScript with Framework Typing\nDESCRIPTION: TypeScript implementation of Storybook preview configuration with explicit framework renderer typing. Includes theme configuration using withThemeByClassName decorator and proper type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-classname-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the framework you are using (e.g., react, vue3)\nimport { Preview, Renderer } from '@storybook/your-renderer';\nimport { withThemeByClassName } from '@storybook/addon-themes';\n\nimport '../src/index.css'; // Your application's global CSS file\n\nconst preview: Preview = {\n  decorators: [\n    withThemeByClassName<Renderer>({\n      themes: {\n        light: '',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Directory in Storybook (JavaScript)\nDESCRIPTION: A JavaScript configuration example for enabling Next.js App Directory support in Storybook's preview file. Sets the 'appDirectory' parameter to true in the nextjs configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // ...\n  parameters: {\n    // ...\n    nextjs: {\n      appDirectory: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with JavaScript for HTML Renderer\nDESCRIPTION: This code demonstrates how to set up Storybook for an HTML Button component using JavaScript. It imports the button creation function and sets up the metadata object with just the title property, as HTML renderer works differently from component-based frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createButton } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating React Context for Profile Page\nDESCRIPTION: Creates a React context object for managing profile page state and data. This context can be used to share profile-related data across components in the React component tree.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-create.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nconst ProfilePageContext = createContext();\n\nexport default ProfilePageContext;\n```\n\n----------------------------------------\n\nTITLE: Vue Document Screen with Apollo (TypeScript)\nDESCRIPTION: TypeScript version of Vue component using @vue/apollo-composable with defineComponent for type safety. Implements the same functionality as the JavaScript version with added type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"loading\">Loading...</div>\n\n  <div v-else-if=\"error\">There was an error fetching the data!</div>\n\n  <div v-if=\"!loading && data && result.subdocuments.length\">\n    <PageLayout :user=\"data.user\">\n      <DocumentHeader :document=\"result.document\" />\n      <DocumentList :documents=\"result.subdocuments\" />\n    </PageLayout>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import PageLayout from './PageLayout';\n  import DocumentHeader from './DocumentHeader';\n  import DocumentList from './DocumentList';\n\n  import gql from 'graphql-tag';\n  import { useQuery } from '@vue/apollo-composable';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    name: 'DocumentScreen',\n    setup() {\n      const { result, loading, error } = useQuery(gql`\n        query AllInfoQuery {\n          user {\n            userID\n            name\n          }\n          document {\n            id\n            userID\n            title\n            brief\n            status\n          }\n          subdocuments {\n            id\n            userID\n            title\n            content\n            status\n          }\n        }\n      `);\n\n      return {\n        result,\n        loading,\n        error,\n      };\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook test runner with type safety using TestRunnerConfig type. Defines the same tag-based filtering rules as the JavaScript version but with added type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  tags: {\n    include: ['test-only', 'pages'],\n    exclude: ['no-tests', 'tokens'],\n    skip: ['skip-test', 'layout'],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button in Angular for Storybook\nDESCRIPTION: This TypeScript snippet demonstrates how to set up a Button component in Storybook using the Angular framework. The `Meta` type is utilized to specify the component and its parameters, including action handlers with regex matching. Dependencies include Storybook and Angular.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: { actions: { argTypesRegex: '^on.*' } },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Next.js Components for Storybook\nDESCRIPTION: This example shows how to use CSS modules in a Next.js component that can be used in Storybook. It demonstrates importing and applying styles from a CSS module file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// src/components/Button.jsx\n// This import will work in Storybook\nimport styles from './Button.module.css';\n// Sass/Scss is also supported\n// import styles from './Button.module.scss'\n// import styles from './Button.module.sass'\n\nexport function Button() {\n  return (\n    <button type=\"button\" className={styles.error}>\n      Destroy\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story using Svelte CSF (TypeScript)\nDESCRIPTION: This snippet shows a Storybook story for a Svelte `Button` component using the Svelte CSF format in a `.svelte` file with TypeScript in the script module. It imports `defineMeta` from '@storybook/addon-svelte-csf' to set up the component metadata. The exported `Story` component is then used in the template to display the 'Primary' story, configuring it with `args={{ variant: 'primary' }}`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"ts\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story name=\"Primary\" args={{ variant: 'primary' }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Story in JavaScript for React\nDESCRIPTION: This snippet defines a Storybook story for a List component in JavaScript for React. It imports the Unchecked story from ListItem and uses it as a child in the OneItem story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport const OneItem = {\n  args: {\n    children: <Unchecked {...Unchecked.args} />,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in SolidJS Storybook Stories with JavaScript\nDESCRIPTION: Shows how to add a margin decorator to a SolidJS Button component using JavaScript. The decorator wraps the Story component with a div that has a margin of 3em.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Preview.js Configuration (New Format)\nDESCRIPTION: New recommended format for preview.js using default export with parameters configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_65\n\nLANGUAGE: js\nCODE:\n```\nconst preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n  },\n};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview TOC Options in JavaScript\nDESCRIPTION: This snippet sets up the Storybook preview configuration in JavaScript, specifically customizing the Table of Contents options for the documentation. It defines selectors, title, and tocbot options for the TOC.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-toc.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    docs: {\n      toc: {\n        contentsSelector: '.sbdocs-content',\n        headingSelector: 'h1, h2, h3',\n        ignoreSelector: '#primary',\n        title: 'Table of Contents',\n        disable: false,\n        unsafeTocbotOptions: {\n          orderedList: false,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Setup for Storybook with Svelte\nDESCRIPTION: This snippet configures Vitest for use with Storybook in a Svelte project. It imports necessary dependencies, sets project annotations, and executes Storybook's beforeAll hook. A note is included for Sveltekit users regarding the correct import statement.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations-simple.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n// 👇 If you're using Sveltekit, import from @storybook/sveltekit\nimport { setProjectAnnotations } from '@storybook/svelte';\nimport * as previewAnnotations from './preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations]);\n\n// Run Storybook's beforeAll hook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Story Name Usage in Storybook CSF\nDESCRIPTION: Example showing incorrect usage where the story name annotation is redundant with the export name. Storybook will automatically generate 'Primary Button' from PrimaryButton, making the explicit name unnecessary.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-redundant-story-name.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PrimaryButton = {\n  // no need for this, as Storybook will resolve to this name already\n  name: 'Primary Button',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook with Control Removal in JavaScript\nDESCRIPTION: Demonstrates how to define a Storybook meta configuration for a web component in JavaScript, disabling the 'foo' property from showing up in controls. The 'component' is given as a string tag name. Suitable for Storybook setups targeting native custom elements and web components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: 'your-component',\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Options in React Provider\nDESCRIPTION: Example of using the setOptions API method in a custom React Provider to configure Storybook options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Provider } from '@storybook/manager';\n\nclass ReactProvider extends Provider {\n  handleAPI(api) {\n    api.setOptions({\n      // see available options in\n      // https://storybook.js.org/docs/react/configure/features-and-behavior\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Environment for Vue in TypeScript\nDESCRIPTION: This code snippet imports the global object from Storybook, extracts the window object, and sets the STORYBOOK_ENV global variable to 'vue'. This configuration is crucial for Storybook to recognize and properly handle Vue-specific functionalities.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-client-globals-example-file.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { global } from '@storybook/global';\n\nconst { window: globalWindow } = global;\n\nglobalWindow.STORYBOOK_ENV = 'vue';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Preact\nDESCRIPTION: Vite configuration setup for Preact projects using @preact/preset-vite plugin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport preact from \"@preact/preset-vite\";\n\nexport default defineConfig({\n  plugins: [preact()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs Feature in Storybook `main.js`\nDESCRIPTION: Example configuration for the Autodocs feature in Storybook 7 within the `main.js` file. It shows how to enable Autodocs globally (`autodocs: true` or other values like `'tag'`) and optionally set a custom name (`defaultName`) for the generated documentation sidebar entries.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_86\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  docs: {\n    autodocs: true, // see below for alternatives\n    defaultName: \"Docs\", // set to change the name of generated docs entries\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Storybook Story with Localization (TypeScript 4.9+)\nDESCRIPTION: TypeScript 4.9+ implementation of a Storybook story for React components using the satisfies operator. Includes Meta and StoryObj types from @storybook/react.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst getCaptionForLocale = (locale) => {\n  switch (locale) {\n    case 'es':\n      return 'Hola!';\n    case 'fr':\n      return 'Bonjour!';\n    case 'kr':\n      return '안녕하세요!';\n    case 'zh':\n      return '你好!';\n    default:\n      return 'Hello!';\n  }\n};\n\nexport const StoryWithLocale = {\n  render: (args, { globals: { locale } }) => {\n    const caption = getCaptionForLocale(locale);\n    return <p>{caption}</p>;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Storybook Version (pre-8.3)\nDESCRIPTION: Command to install a specific version of Storybook prior to version 8.3 using the 'init' command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"init-command-custom-version.md\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Preview Configuration for Angular with TypeScript\nDESCRIPTION: Sets up the main preview configuration for Storybook in an Angular project. Imports and configures Compodoc documentation and defines default parameters for actions and control matchers. Uses regex patterns to automatically detect action handlers and specific control types for colors and dates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-compodoc-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preview } from '@storybook/angular';\nimport { setCompodocJson } from '@storybook/addon-docs/angular';\n\nimport docJson from '../documentation.json'; // The path to your generated json file from Compodoc contains all your documentation information.\n\nsetCompodocJson(docJson);\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Adding SWC Compiler Addon with pnpm\nDESCRIPTION: This snippet illustrates how to use pnpm to add the Webpack5 Compiler SWC addon to a Storybook project. The command utilizes `pnpm dlx`, similar to `npx`, to run the latest `storybook` package and add the `@storybook/addon-webpack5-compiler-swc`. This requires pnpm and the Storybook environment set up in advance.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-swc-auto-install.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx storybook@latest add @storybook/addon-webpack5-compiler-swc\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Docs for Vue\nDESCRIPTION: Command to install the Storybook Docs addon as a development dependency using Yarn. Ensures that all Storybook package versions match.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @storybook/addon-docs\n```\n\n----------------------------------------\n\nTITLE: Vue Component Story Configuration\nDESCRIPTION: Shows Vue component story setup with render functions and template binding.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport YourComponent from './YourComponent.vue';\n\n//👇 This default export determines where your story goes in the story list\nexport default {\n  component: YourComponent,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const FirstStory = {\n  render: (args) => ({\n    components: { YourComponent },\n    setup() {\n      return { args };\n    },\n    template: '<YourComponent v-bind=\"args\" />',\n  }),\n  args: {\n    //👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Source Block in JavaScript\nDESCRIPTION: Shows how to import the Source block from Storybook addon-docs in a JavaScript file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Source } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in JavaScript Storybook\nDESCRIPTION: A JavaScript implementation for setting up a Button component story with centered layout. This example is framework-agnostic and demonstrates the simpler JavaScript syntax for defining Storybook stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const WithLayout = {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with PNPM Watch Mode\nDESCRIPTION: Command to run Storybook tests in watch mode using pnpm package manager. The --watch flag enables continuous test execution on file changes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-flags.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook --watch\n```\n\n----------------------------------------\n\nTITLE: Configuring vue-component-meta with Custom TSConfig\nDESCRIPTION: Demonstrates how to configure vue-component-meta with a custom TSConfig file in the Storybook main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/vue3-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/vue3-vite',\n    options: {\n      docgen: {\n        plugin: 'vue-component-meta',\n        tsconfig: 'tsconfig.app.json',\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Stories Block in MDX for Storybook\nDESCRIPTION: This snippet demonstrates how to import and use the Stories block in an MDX file for Storybook documentation. It imports the necessary components and story files, then uses the Meta and Stories components to render the collection of stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-stories.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md title=\"ButtonDocs.mdx\"\nimport { Meta, Stories } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Stories />\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in SolidJS with TypeScript 4.9+\nDESCRIPTION: Creates a ButtonGroup story in SolidJS using TypeScript 4.9+. Uses the 'satisfies' operator for type checking. Imports Button stories from a separate file to compose a ButtonGroup with horizontal orientation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { ButtonGroup } from '../ButtonGroup';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta = {\n  component: ButtonGroup,\n} satisfies Meta<typeof ButtonGroup>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directories in TypeScript Storybook Configuration\nDESCRIPTION: TypeScript example showing how to configure static directories in Storybook's main.ts file using the StorybookConfig type from @storybook/nextjs. This maps a fonts directory from the source to a specific path in the build.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-image-static-dirs.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { StorybookConfig } from '@storybook/nextjs';\n\nconst config: StorybookConfig = {\n  // ...\n  staticDirs: [\n    {\n      from: '../src/components/fonts',\n      to: 'src/components/fonts',\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata in Solid with JavaScript\nDESCRIPTION: Defines the metadata for Button component stories in a SolidJS project using JavaScript. It imports the `Button` component and exports a default object specifying the component, `argTypes` for controls (like a color picker for `backgroundColor`), and default `args` (setting `primary` to true for all stories).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"solid\" language=\"js\"\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  //👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Setup with Addons in JavaScript\nDESCRIPTION: Exports a configuration object for Storybook using a framework specified at '@storybook/your-framework'. Lists patterns for locating story files and includes various addons such as '@storybook/addon-a11y' for accessibility checks. The actual framework name should be replaced before use.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-register.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-a11y', //👈 The a11y addon goes here\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Generating iframe script code for Storybook framework\nDESCRIPTION: Creates JavaScript code as a string that initializes Storybook's client API and applies configuration. Takes ExtendedOptions containing presets, frameworkPath and framework name. Generates imports, processes configuration entries, and sets up decorators, parameters, and renders.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-preview-exports.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { virtualPreviewFile, virtualStoriesFile } from './virtual-file-names';\nimport { transformAbsPath } from './utils/transform-abs-path';\nimport type { ExtendedOptions } from './types';\n\nexport async function generateIframeScriptCode(options: ExtendedOptions) {\n  const { presets, frameworkPath, framework } = options;\n  const frameworkImportPath = frameworkPath || `@storybook/${framework}`;\n\n  const presetEntries = await presets.apply('config', [], options);\n  const configEntries = [...presetEntries].filter(Boolean);\n\n  const absoluteFilesToImport = (files: string[], name: string) =>\n    files\n      .map((el, i) => `import ${name ? `* as ${name}_${i} from ` : ''}'${transformAbsPath(el)}'`)\n      .join('\\n');\n\n  const importArray = (name: string, length: number) =>\n    new Array(length).fill(0).map((_, i) => `${name}_${i}`);\n\n  const code = `\n    // Ensure that the client API is initialized by the framework before any other iframe code\n    // is loaded. That way our client-apis can assume the existence of the API+store\n    import { configure } from '${frameworkImportPath}';\n\n    import {\n      addDecorator,\n      addParameters,\n      addArgTypesEnhancer,\n      addArgsEnhancer,\n      setGlobalRender\n    } from 'storybook/preview-api';\n    import { logger } from 'storybook/internal/client-logger';\n    ${absoluteFilesToImport(configEntries, 'config')}\n    import * as preview from '${virtualPreviewFile}';\n    import { configStories } from '${virtualStoriesFile}';\n\n    const configs = [${importArray('config', configEntries.length)\n      .concat('preview.default')\n      .join(',')}].filter(Boolean)\n\n    configs.forEach(config => {\n      Object.keys(config).forEach((key) => {\n        const value = config[key];\n        switch (key) {\n          case 'args':\n          case 'argTypes': {\n            return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n          }\n          case 'decorators': {\n            return value.forEach((decorator) => addDecorator(decorator, false));\n          }\n          case 'parameters': {\n            return addParameters({ ...value }, false);\n          }\n          case 'render': {\n            return setGlobalRender(value)\n          }\n          case 'globals':\n          case 'globalTypes': {\n            const v = {};\n            v[key] = value;\n            return addParameters(v, false);\n          }\n          case 'decorateStory':\n          case 'renderToCanvas': {\n            return null;\n          }\n          default: {\n            // eslint-disable-next-line prefer-template\n            return console.log(key + ' was not supported :( !');\n          }\n        }\n      });\n    })\n    configStories(configure);\n    `.trim();\n  return code;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in Vue3 CSF with Standard TypeScript\nDESCRIPTION: Example of configuring accessibility parameters for a Vue3 component using standard TypeScript syntax with explicit type annotations. Shows how to configure accessibility testing rules with proper typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const ExampleStory = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Storybook Accessibility Addon with npm\nDESCRIPTION: Command to remove the @storybook/addon-a11y addon from a Storybook project using npm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-remove-command.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest remove @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Storybook Configuration\nDESCRIPTION: Shows how to disable telemetry by setting the disableTelemetry configuration option to true in the Storybook main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ... your Storybook configuration\n  disableTelemetry: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider Decorator in Angular Storybook\nDESCRIPTION: Shows how to add a theme provider component wrapper to Angular Storybook stories using componentWrapperDecorator. Includes two variations: one with default theme class and another using globals for dynamic theme selection.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { componentWrapperDecorator } from '@storybook/angular';\nimport type { Preview } from '@storybook/angular';\n\nimport { ThemeProvider } from './theme-provider.component';\n\nconst preview: Preview = {\n  decorators: [\n    moduleMetadata({ declarations: [ThemeProvider] }),\n    componentWrapperDecorator(\n      (story) => `<theme-provider class=\"default\">${story}</theme-provider>`,\n    ),\n  ],\n};\nexport default preview;\n\n// or with globals of story context\nconst preview: Preview = {\n  decorators: [\n    moduleMetadata({ declarations: [ThemeProvider] }),\n    componentWrapperDecorator(\n      (story) => `<theme-provider [class]=\"theme\">${story}</theme-provider>`,\n      ({ globals }) => ({ theme: globals.theme }),\n    ),\n  ],\n};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Story Types\nDESCRIPTION: TypeScript type imports for different CSF versions showing both current and forward-compatible approaches.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\n// CSF2 function stories, current API, will break in 7.0\nimport type { Story } from \"@storybook/<framework>\";\n\n// CSF3 object stories, will persist in 7.0\nimport type { StoryObj } from \"@storybook/<framework>\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// CSF2 function stories, forward-compatible mode\nimport type { StoryFn } from \"@storybook/<framework>\";\n\n// CSF3 object stories, using future 7.0 types\nimport type { Story } from \"@storybook/<framework>/types-7-0\";\n```\n\n----------------------------------------\n\nTITLE: Using the Action Function for Direct Event Handling in Storybook\nDESCRIPTION: Demonstrates how to use the action function directly to create an action that appears in the actions panel when triggered. This is an older but still supported approach for creating actions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from '@storybook/addon-actions';\n\nexport const Basic = {\n  argTypes: {\n    onClick: { action: 'clicked' },\n  },\n};\n\n// or\nexport const Basic = {\n  args: {\n    onClick: action('clicked'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CSF4 Stories and Storybook MDX Blocks\nDESCRIPTION: This snippet imports the CSF4 stories module and necessary components from Storybook's addon-docs. It sets up the foundation for rendering CSF4 stories in an MDX context.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/react/template/stories/csf4.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as StoriesModule from './csf4.stories'\nimport { Meta, Stories } from '@storybook/addon-docs/blocks'\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Automigration Script\nDESCRIPTION: Command for running Storybook's automigration tool to update configuration based on ecosystem changes. This tool checks for outdated configurations and offers to fix them automatically, even without upgrading Storybook itself.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"storybook-automigrate.md\" />\n```\n\n----------------------------------------\n\nTITLE: Defining setProjectAnnotations Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setProjectAnnotations function, which takes project annotations as a parameter and returns the processed project annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(projectAnnotations: ProjectAnnotation | ProjectAnnotation[]) => ProjectAnnotation\n```\n\n----------------------------------------\n\nTITLE: Configuring Stories with a Configuration Object in Storybook\nDESCRIPTION: This example shows how to load stories using a configuration object that specifies directory and naming patterns, providing more control over how stories are discovered and titled.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js|ts\n\nexport default {\n  // Your Storybook configuration\n  stories: {\n    directory: '../packages/components',\n    titlePrefix: 'Components',\n    files: '**/*.stories.*',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Margin Decorator in Svelte 4 with TypeScript\nDESCRIPTION: TypeScript version of the Svelte 4 margin decorator component. Identical to the JavaScript version as no type annotations are needed for basic slot usage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/margindecorator.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <slot />\n</div>\n\n<style>\n  div {\n    margin: 3em;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Integrating @storybook/preset-create-react-app with Storybook Docs\nDESCRIPTION: Configures Storybook to use both the Create React App preset and the `@storybook/addon-docs` addon within the `./.storybook/main.js` file. The `configureJSX: true` option is enabled for the docs addon, which is often needed for correct JSX rendering in automatically generated documentation from React components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  addons: [\n    '@storybook/preset-create-react-app',\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        configureJSX: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Storybook Story\nDESCRIPTION: Vue implementation of a Storybook story using template syntax. Shows how to render an image component with Vue template string.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const WithAnImage: Story = {\n  render: () => ({\n    template:\n      '<img src=\"https://storybook.js.org/images/placeholders/350x150.png\" alt=\"My CDN placeholder\"/>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Link Handling in Stories\nDESCRIPTION: Example of how to mock link handling behavior using the parameters.sveltekit_experimental.hrefs object in a story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyStory = {\n  parameters: {\n    sveltekit_experimental: {\n      hrefs: {\n        '/basic-href': (to, event) => {\n          console.log(to, event);\n        },\n        '/root.*': {\n          callback: (to, event) => {\n            console.log(to, event);\n          },\n          asRegex: true,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React TypeScript 4.9 Story Configuration\nDESCRIPTION: Storybook story configuration for React component using TypeScript 4.9 with satisfies operator. Shows type-safe story configuration with data handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\nimport someData from './data.json';\n\nconst meta = {\n  component: MyComponent,\n  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories\n  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const simpleData = { foo: 1, bar: 'baz' };\nexport const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };\n\nexport const SimpleStory: Story = {\n  args: {\n    data: simpleData,\n  },\n};\n\nexport const ComplexStory: Story = {\n  args: {\n    data: complexData,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Button Stories in JavaScript\nDESCRIPTION: JavaScript configuration for Button component stories in React with background parameters. Sets up a basic story configuration with a gray background option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      default: 'Light',\n      values: [\n        // 👇 Add a new value\n        { name: 'Gray', value: '#CCC' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Stories in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook stories for a common renderer using JavaScript. It shows the basic structure of a story file, including metadata and story exports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Foo } from './Foo';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'OtherFoo/Bar',\n  component: Foo,\n  id: 'Foo/Bar', // Or 'foo-bar' if you prefer\n};\n\nexport const Baz = {\n  name: 'Insert name here',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Components Storybook Story\nDESCRIPTION: Web Components implementation using Lit HTML templating. Shows how to create stories for web components with TypeScript support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const WithAnImage: Story = {\n  render: () =>\n    html`<img\n      src=\"https://storybook.js.org/images/placeholders/350x150.png\"\n      alt=\"My CDN placeholder\"\n    />`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Addon with Storybook in Shell (npm)\nDESCRIPTION: This shell command uses npm to add the @storybook/addon-a11y package to a Storybook project. It is intended for projects using npm as their package manager. The command requires Storybook to be previously set up in the project directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-add.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook add @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Static Meta Configuration for Storybook Framework\nDESCRIPTION: This TypeScript code defines a Meta setup for the Button component with static type indications, using the `Meta` type for a specific framework. The configuration includes parameter actions matching regex patterns. The line 'replace your-framework' indicates where users should specify their particular framework.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  parameters: { actions: { argTypesRegex: '^on.*' } },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Starting the Storybook Website Development Server\nDESCRIPTION: Shell command to run the development server for the Storybook website, allowing you to preview your documentation changes locally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Stories in TypeScript\nDESCRIPTION: This snippet illustrates how to configure Storybook stories for Web Components using TypeScript. It demonstrates the use of type imports from Storybook and shows how to define metadata and stories for custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'OtherFoo/Bar',\n  component: 'foo',\n  id: 'Foo/Bar', // Or 'foo-bar' if you prefer\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Baz: Story = {\n  name: 'Insert name here',\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Story Implementation (JavaScript)\nDESCRIPTION: Implements a Button story for Web Components using JavaScript and CSF 2 format. Uses lit-html for templating custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  title: 'components/Button',\n  component: 'demo-button',\n};\n\nexport const Primary = ({ primary }) => html`<custom-button ?primary=${primary}></custom-button>`;\nPrimary.args = {\n  primary: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Documentation\nDESCRIPTION: Example of creating component documentation using MDX format with embedded stories and props tables.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport { InfoButton } from './InfoButton.vue';\n\n<Meta title='InfoButton' component={InfoButton} />\n\n# InfoButton\n\nSome **markdown** description, or whatever you want.\n\n<Story name='basic' height='400px'>{{\n  components: { InfoButton },\n  template: '<info-button label=\"I\\'m a button!\"/>',\n}}</Story>\n\n## ArgsTable\n\n<ArgsTable of={InfoButton} />\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Parser in Storybook Source Loader\nDESCRIPTION: This snippet demonstrates configuring the source-loader to use the TypeScript parser instead of the default JavaScript parser. The loader is configured as a webpack rule to target story files with '.stories.tsx?' extensions. This setup requires the '@storybook/source-loader' module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/source-loader/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function ({ config }) {\n  config.module.rules.push({\n    test: /\\.stories\\.tsx?$/,\\n    use: [\\n      {\\n        loader: require.resolve('@storybook/source-loader'),\\n        options: { parser: 'typescript' },\\n      },\\n    ],\\n    enforce: 'pre',\\n  });\\n  return config;\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Emoji Button Documentation\nDESCRIPTION: This snippet imports the required components and files for setting up the Storybook documentation page for the Emoji Button component. It includes the Meta component from addon-docs, the stories for the Emoji Button, and a custom Template component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/emoji-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport * as EmojiButtonStories from './emoji-button.stories.tsx';\nimport Template from './Template.mdx';\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in JavaScript for Storybook\nDESCRIPTION: This snippet shows how to create and export Storybook stories for a Button component using JavaScript. It includes a default export for component metadata and a sample story with a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hypothetical-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Sample = {\n  render: () => ({\n    template: '<button :label=label />',\n    data: {\n      label: 'hello button',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Root API for React in Storybook\nDESCRIPTION: Configuration to opt-out of the new React Root API in Storybook by setting the 'legacyRootApi' option to true, useful when working with older React applications or having compatibility issues.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {\n      legacyRootApi: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Decorator to Button Stories in Storybook (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add a decorator to Button stories in Storybook. The decorator wraps each story in a div with padding, providing a consistent layout for all Button stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  decorators: [(Story) => <div style={{ padding: '3em' }}><Story /></div>],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Docs Preset Options\nDESCRIPTION: JavaScript configuration to customize Storybook Docs preset options in the main.js file, including CSF and MDX plugin options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        csfPluginOptions: null,\n        mdxPluginOptions: {},\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story using Standard CSF (JavaScript)\nDESCRIPTION: This snippet defines a Storybook story for a Svelte `Button` component using the standard Component Story Format (CSF) in a JavaScript file. It imports the `Button.svelte` component, sets it as the default export's `component` property for metadata, and exports a `Primary` story object with `args` specifying `variant: 'primary'`. This requires a Svelte-compatible Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"svelte\" language=\"js\" tabTitle=\"CSF\"\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Button Story in React JSX\nDESCRIPTION: This story creates a simple Button component with text content and an onClick action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport const text = () => (\n  <Button onClick={action(\"clicked\")}>Hello Button</Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-js-md-files.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../my-project/src/components/*.@(js|md)'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in TypeScript\nDESCRIPTION: This snippet configures the Storybook test runner in TypeScript. It imports necessary types, sets up image snapshot testing, defines a custom snapshots directory, and implements a post-visit hook for capturing screenshots after ensuring the page is ready.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-image-snapshot-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestRunnerConfig, waitForPageReady } from '@storybook/test-runner';\n\nimport { toMatchImageSnapshot } from 'jest-image-snapshot';\n\nconst customSnapshotsDir = `${process.cwd()}/__snapshots__`;\n\nconst config: TestRunnerConfig = {\n  setup() {\n    expect.extend({ toMatchImageSnapshot });\n  },\n  async postVisit(page, context) {\n    // Waits for the page to be ready before taking a screenshot to ensure consistent results\n    await waitForPageReady(page);\n\n    // To capture a screenshot for for different browsers, add page.context().browser().browserType().name() to get the browser name to prefix the file name\n    const image = await page.screenshot();\n    expect(image).toMatchImageSnapshot({\n      customSnapshotsDir,\n      customSnapshotIdentifier: context.id,\n    });\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring default args in Storybook preview with TypeScript using type annotation\nDESCRIPTION: Standard TypeScript implementation that configures default args in Storybook preview using type annotation. Imports the Preview type from the renderer package and applies it as a type annotation to set default theme to 'light'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/args-in-preview.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  // The default value of the theme arg for all stories\n  args: { theme: 'light' },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Mocking Cookies and Headers in Storybook Stories (TypeScript)\nDESCRIPTION: Standard TypeScript implementation of a Storybook story that mocks cookies and headers for testing. This example uses explicit type annotations for Meta and demonstrates the same cookie and header mocking pattern with proper TypeScript typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-headers-mock.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { cookies, headers } from '@storybook/nextjs/headers.mock';\n\nimport MyForm from './my-form';\n\nconst meta: Meta<typeof MyForm> = {\n  component: MyForm,\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof MyForm>;\n\nexport const LoggedInEurope: Story = {\n  async beforeEach() {\n    // 👇 Set mock cookies and headers ahead of rendering\n    cookies().set('username', 'Sol');\n    headers().set('timezone', 'Central European Summer Time');\n  },\n  async play() {\n    // 👇 Assert that your component called the mocks\n    await expect(cookies().get).toHaveBeenCalledOnce();\n    await expect(cookies().get).toHaveBeenCalledWith('username');\n    await expect(headers().get).toHaveBeenCalledOnce();\n    await expect(cookies().get).toHaveBeenCalledWith('timezone');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet provides a TypeScript configuration for setting up Storybook. Similar to the JavaScript version, it requires replacing 'your-framework' with the desired framework. It defines the types for configuration with 'StorybookConfig' and includes story paths and Webpack settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-webpack-defaults.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableWebpackDefaults: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Modern CSF Story Annotations\nDESCRIPTION: New hoisted CSF annotations style introduced in Storybook 6.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_133\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = () => <Button />\nBasic.storyName = 'foo';\nBasic.parameters = { ... };\nBasic.decorators = [ ... ];\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Unit Tests\nDESCRIPTION: These scripts run unit tests using Jest. A specific command is provided for running core tests in watch mode.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\nyarn run test --core --watch\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in Web Components with JavaScript\nDESCRIPTION: Demonstrates how to create a List component story using Web Components and lit-html. This example uses the html template literal tag to compose a list with multiple ListItem components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\n// 👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nexport default {\n  component: 'demo-list',\n};\n\nexport const ManyItems = {\n  render: (args) => html`\n    <demo-list>\n      ${Selected({ ...args, ...Selected.args })} ${Unselected({ ...args, ...Unselected.args })}\n      ${Unselected({ ...args, ...Unselected.args })}\n    </demo-list>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Generic Storybook (TypeScript)\nDESCRIPTION: Exports default Storybook metadata for a generic framework `Button` component using TypeScript. It imports the `Meta` type (requiring 'your-framework' replacement) and the component, explicitly typing the `meta` object and configuring conditional `argTypes` for `label` (text) and `image` (select) using the `if` condition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts|tsx\" renderer=\"common\" language=\"ts\"\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with npm\nDESCRIPTION: Command to initialize Storybook version 8.2 using npm package manager. This uses npx to execute the Storybook init command without requiring a global installation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command-custom-version.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@8.2 init\n```\n\n----------------------------------------\n\nTITLE: Using useAddonState Hook in Storybook Addon (JavaScript)\nDESCRIPTION: The useAddonState hook is used for data persistence in addons, particularly useful for complex addons involving multiple types like toolbars and panels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-addons-api-useaddonstate.md\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Story with Vue in JavaScript\nDESCRIPTION: Shows how to create a Button story for Vue components using JavaScript. The example uses render functions to specify the component template with the desired props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => ({\n    components: { Button },\n    template: '<Button primary label=\"Button\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story using Svelte CSF (TypeScript 4.9)\nDESCRIPTION: This snippet defines a Storybook story for a Svelte `Button` component using Svelte CSF format within a `.svelte` file and TypeScript 4.9 in the script module. It utilizes `defineMeta` from '@storybook/addon-svelte-csf' for component configuration and exports a `Story` component. The `<Story>` tag renders the 'Primary' story with `args` set to `{ variant: 'primary' }`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"Button.stories.svelte\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n</script>\n\n<Story name=\"Primary\" args={{ variant: 'primary' }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS and JS in Storybook preview\nDESCRIPTION: Diff showing how to import Bootstrap's CSS and JavaScript files in the .storybook/preview.js file to make them available to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/bootstrap.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport { Preview } from '@storybook/your-renderer';\n\n+import 'bootstrap/dist/css/bootstrap.min.css';\n+import 'bootstrap/dist/js/bootstrap.bundle';\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with pnpm\nDESCRIPTION: Command to create a new Storybook project using pnpm package manager. Uses the latest version of the Storybook creation tool.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm create storybook@latest\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in SolidJS with JavaScript\nDESCRIPTION: Creates a ButtonGroup story in SolidJS using JavaScript. Imports Button stories and reuses their args to create a pair of buttons in a horizontal orientation. Shows component composition pattern for Solid components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ButtonGroup } from '../ButtonGroup';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nexport default {\n  component: ButtonGroup,\n};\n\nexport const Pair = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Stories\nDESCRIPTION: TypeScript configuration for Angular component stories in Storybook with controls sorting parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from  from '@storybook/angular';\n\nimport { YourComponent } from './YourComponent.component';\n\nconst meta: Meta<YourComponent> = {\n  component: YourComponent,\n  parameters: { controls: { sort: 'requiredFirst' } },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Common Frameworks in TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to define metadata for a Button component using TypeScript 4.9 in a framework-agnostic way. It uses the 'satisfies' keyword for type checking and exports the metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite in Storybook Preset Addon\nDESCRIPTION: This code demonstrates how to use the viteFinal API in a Storybook preset addon to modify the Vite configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  viteFinal: async (config, { configType }) => {\n    // customize the Vite config here\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Sample React Button Story Implementation\nDESCRIPTION: Example of a React story implementation returning a renderable object\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const story = {\n  render: () => <Button label=\\\"The Button\\\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directories in Storybook\nDESCRIPTION: Configuration for serving static files through Storybook's main configuration file. Demonstrates how to specify a single static directory for asset serving.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/images-and-assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  staticDirs: ['../public'],\n};\n```\n\n----------------------------------------\n\nTITLE: Building Storybook for Deployment\nDESCRIPTION: Command to compile a Storybook instance for deployment. Supports various options for output directory, logging levels, and build configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstorybook build [options]\n```\n\n----------------------------------------\n\nTITLE: Sorting Controls in Storybook\nDESCRIPTION: Demonstrates how to sort controls in Storybook. This example forces required args to be displayed first in the Controls panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  controls: {\n    sort: 'requiredFirst',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte List Stories with Svelte CSF in TypeScript\nDESCRIPTION: Configures a Storybook story for a Svelte List component using Svelte CSF format in TypeScript. It uses the defineMeta function and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import List from './List.svelte';\n\n  const { Story } = defineMeta({\n    component: List,\n  });\n</script>\n\n<!-- Always an empty list, not super interesting -->\n<Story name=\"Empty\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Theme for Docs\nDESCRIPTION: Example of applying the dark theme specifically to the Storybook Docs in the preview.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/theming.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { themes } from '@storybook/theming';\n\n// or global addParameters\nexport const parameters = {\n  docs: {\n    theme: themes.dark,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters in Storybook Addon Registration\nDESCRIPTION: Shows how to register a custom Storybook addon and configure URL query parameters. The code sets two example parameters that will be available in the addon's URL parameters. Uses the addons.register API to initialize the addon and api.setQueryParams to define the parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-setqueryparams.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddons.register('my-organisation/my-addon', (api) => {\n  api.setQueryParams({\n    exampleParameter: 'Sets the example parameter value',\n    anotherParameter: 'Sets the another parameter value',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting MockDate in Storybook Preview using JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook that resets MockDate before each story renders. This ensures consistent date behavior across stories by using the beforeEach hook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport MockDate from 'mockdate';\n\nexport default {\n  async beforeEach() {\n    MockDate.reset();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an MDX Documentation File\nDESCRIPTION: Example of an MDX file for documenting a component, including metadata, stories, and props table.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport { hbs } from 'ember-cli-htmlbars';\n\n<Meta title='App Component' component='AppComponent' />\n\n# App Component\n\nSome **markdown** description, or whatever you want.\n\n<Story name='basic' height='400px'>{{\n  template: hbs`<AppComponent @title={{title}} />`,\ncontext: { title: \"Title\" },\n}}</Story>\n\n## ArgsTable\n\n<ArgsTable of='AppComponent' />\n```\n\n----------------------------------------\n\nTITLE: Defining and Decorating React Storybook Component - JavaScript\nDESCRIPTION: This snippet defines a Storybook story for MyComponent in React using JavaScript. It applies a decorator to highlight specified elements using Storybook's Preview API. Dependencies include 'storybook/preview-api' and 'storybook/highlight'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight-addon.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const Highlighted = {\n  decorators: [\n    (storyFn) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n      });\n      return storyFn();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Story Configuration\nDESCRIPTION: Demonstrates Svelte-specific story configuration using both CSF and Svelte file formats.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  //👇 This export determines where your story goes in the story list\n  const { Story } = defineMeta({\n    component: YourComponent,\n  });\n</script>\n\n<Story\n  name=\"FirstStory\"\n  args={{\n    /*👇 The args you need here will depend on your component */\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Storybook in Generic Framework (TypeScript 4.9+)\nDESCRIPTION: This snippet illustrates how to set up a Storybook configuration for a Button component in a generic framework using TypeScript 4.9+. It uses the 'satisfies' keyword for type checking and includes the withActions decorator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { withActions } from 'storybook/actions/decorator';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  parameters: {\n    actions: {\n      handles: ['mouseover', 'click .btn'],\n    },\n  },\n  decorators: [withActions],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook SvelteKit with yarn\nDESCRIPTION: Command to install @storybook/sveltekit package as a dev dependency using yarn package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Dark Background in JavaScript CSF\nDESCRIPTION: This snippet shows how to set up a Button story using JavaScript Component Story Format (CSF). It defines a story with a dark background using story-level parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const OnDark = {\n  // 👇 Story-level parameters\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Global State Management in Storybook Preview Configuration\nDESCRIPTION: This snippet shows how to update the global state management configuration in Storybook 9.0. The 'globals' field has been renamed to 'initialGlobals', and the 'defaultValue' in 'globalTypes' is no longer supported.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nexport const preview = {\n- globals: {\n+ initialGlobals: {\n    theme: 'light'\n  }\n};\n\n// .storybook/preview.js\nexport default {\n+ initialGlobals: {\n+   locale: 'en'\n+ },\n  globalTypes: {\n    locale: {\n      description: 'Locale for components',\n-     defaultValue: 'en',\n      toolbar: {\n        title: 'Locale',\n        icon: 'circlehollow',\n        items: ['es', 'en'],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook to Load MDX Files\nDESCRIPTION: Update to the Storybook main.js configuration to load both JavaScript and MDX story files for documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/stories/**/*.stories.@(js|mdx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Story Implementation\nDESCRIPTION: Shows how to create a Storybook story for Web Components using Lit's html template literal tag. Demonstrates basic component structure with layout and nested elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Example: Story = {\n  render: () => html`\n    <layout>\n      <header>\n        <h1>Example</h1>\n      </header>\n      <article>\n        <my-component />\n      </article>\n    </layout>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Package Migration Reference Table - Removals\nDESCRIPTION: Table showing removed packages and their replacements in Storybook 8.0\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/from-older-version.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Removal                          | Replacement                                           |\n| -------------------------------- | ----------------------------------------------------- |\n| `@storybook/addons`              | `@storybook/manager-api` or `@storyboook/preview-api` |\n| `@storybook/channel-postmessage` | `@storybook/channels`                                 |\n| `@storybook/channel-websocket`   | `@storybook/channels`                                 |\n| `@storybook/client-api`          | `@storybook/preview-api`                              |\n| `@storybook/core-client`         | `@storybook/preview-api`                              |\n| `@storybook/preview-web`         | `@storybook/preview-api`                              |\n| `@storybook/store`               | `@storybook/preview-api`                              |\n| `@storybook/api`                 | `@storybook/manager-api`                              |\n```\n\n----------------------------------------\n\nTITLE: Configuring Hot Module Replacement for Standalone Addons\nDESCRIPTION: Demonstrates how to set up the build script with watch mode for hot module replacement in standalone Storybook addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-knowledge-base.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"npm run build -- --watch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Dependencies for Storybook Addon\nDESCRIPTION: This snippet demonstrates how to properly set up peer dependencies and dev dependencies in the package.json file for a Storybook addon supporting version 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-storybook-addon\",\n  \"peerDependencies\": {\n    \"storybook\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"storybook\": \">=9.0.0-0 <10.0.0-0\" // For local development\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ember CLI Build with Storybook Integration in JavaScript\nDESCRIPTION: This code configures an Ember application build process to enable Storybook integration with addon documentation support. It creates an EmberApp instance with specific Storybook configuration options and returns the application's build tree.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-ember-cli-build.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst EmberApp = require('ember-cli/lib/broccoli/ember-app');\n\nmodule.exports = function (defaults) {\n  const app = new EmberApp(defaults, {\n    '@storybook/ember-cli-storybook': {\n      enableAddonDocsIntegration: true,\n    },\n  });\n\n  return app.toTree();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Example Story in Web Components Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates setting a web component story in Storybook, specifying the component name and disabling default accessibility checks through globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ExampleStory: Story = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Web Components with TypeScript\nDESCRIPTION: Implements Storybook stories for a Web Components Button using TypeScript. Defines typed metadata for the 'demo-button' custom element and configures a primary button story with custom naming and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Button Component with Storybook and Vitest\nDESCRIPTION: This code snippet demonstrates testing a Svelte Button component using Storybook's composeStory function and Vitest. It includes tests for rendering the button with default args and overridden props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-story.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { vi, test, expect } from 'vitest';\nimport { render, screen } from '@testing-library/svelte';\nimport { composeStory } from '@storybook/svelte';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\n// Returns a story which already contains all annotations from story, meta and global levels\nconst Primary = composeStory(PrimaryStory, meta);\n\ntest('renders primary button with default args', async () => {\n  await Primary.run();\n\n  const buttonElement = screen.getByText('Text coming from args in stories file!');\n  expect(buttonElement).not.toBeNull();\n});\n\ntest('renders primary button with overridden props', async () => {\n  await Primary.run({ args: { ...Primary.args, label: 'Hello world' } });\n\n  const buttonElement = screen.getByText(/Hello world/i);\n  expect(buttonElement).not.toBeNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Web Component Button Story - Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet registers a web component Button for Storybook using the Meta type from '@storybook/web-components'. It specifies both a display title ('Button') and the component identifier ('demo-button'). No Button class/component is imported, and the snippet is ideal for projects using custom elements in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\\n\\nconst meta: Meta = {\\n  title: 'Button',\\n  component: 'demo-button',\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Fonts in Next.js Component\nDESCRIPTION: Implementation example of using local fonts with next/font/local, showing font configuration with relative path.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/components/MyComponent.js\nimport localFont from 'next/font/local';\n\nconst localRubikStorm = localFont({ src: './fonts/RubikStorm-Regular.ttf' });\n```\n\n----------------------------------------\n\nTITLE: Registering a Manager Addon with React 18\nDESCRIPTION: Shows how to register a manager addon that renders with React 18 in Storybook 8, demonstrating the updated render function signature.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addons, types } from \"@storybook/manager-api\";\n\naddons.register(\"my-addon\", () => {\n  addons.add(\"my-addon/panel\", {\n    type: types.PANEL,\n    title: \"My Addon\",\n    // This will be called as a JSX element by react 18\n    render: ({ active }) => (active ? <div>Hello World</div> : null),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story for Web Components in TypeScript\nDESCRIPTION: This snippet shows how to configure a Button story for Web Components using TypeScript. It imports the Meta type from Storybook, defines a meta object with explicit typing, and sets the component and parameters properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  parameters: {\n    myAddon: { disable: true }, // Disables the addon\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components JavaScript Storybook Stories with Mocked Date\nDESCRIPTION: This snippet shows how to set up Storybook stories for a Web Components JavaScript Page component with a mocked date. It uses MockDate to set a fixed date for all stories and includes a play function for the Default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport MockDate from 'mockdate';\n\nimport { getUserFromSession } from '../../api/session.mock';\n\nexport default {\n  component: 'my-page',\n  // 👇 Set the value of Date for every story in the file\n  async beforeEach() {\n    MockDate.set('2024-02-14');\n\n    // 👇 Reset the Date after each story\n    return () => {\n      MockDate.reset();\n    };\n  },\n};\n\nexport const Default = {\n  async play({ canvasElement }) {\n    // ... This will run with the mocked Date\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with JavaScript\nDESCRIPTION: Implements Button story configuration for Svelte using JavaScript and the addon-svelte-csf package. Configures background grid parameters using defineMeta.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  // To apply a set of backgrounds to all stories of Button:\n  const { Story } = defineMeta({\n    component: Button,\n    parameters: {\n      backgrounds: {\n        grid: {\n          cellSize: 20,\n          opacity: 0.5,\n          cellAmount: 5,\n          offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n          offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n        },\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Meta with Control Removal Using CSF in TypeScript\nDESCRIPTION: Demonstrates how to set up Svelte Storybook metadata using TypeScript and the CSF add-on to disable the 'foo' property in Storybook's controls. Requires the Storybook Svelte CSF add-on, Svelte, and a TypeScript setup. Encapsulated in a Svelte <script module> block for modularity and best practice in Svelte codebases.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    argTypes: {\n      // foo is the property we want to remove from the UI\n      foo: {\n        control: false,\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Dark Theme Class\nDESCRIPTION: Adding the postcss-dark-theme-class plugin to the PostCSS configuration file (postcss.config.js).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n+   require('postcss-dark-theme-class'),\n    require('autoprefixer')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Example Story in Web Components Storybook (JavaScript)\nDESCRIPTION: Define a story for a custom Web Component named 'my-component' in Storybook using JavaScript. Includes configurations to disable accessibility checks globally for the story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  component: 'my-component',\n};\n\nexport const ExampleStory = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Accessibility Testing (JavaScript)\nDESCRIPTION: JavaScript implementation of Storybook test runner configuration that injects axe-playwright for accessibility testing. Includes hooks for pre-visit injection of axe and post-visit accessibility checks with detailed HTML reporting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-configure.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { injectAxe, checkA11y, configureAxe } = require('axe-playwright');\n\nconst { getStoryContext } = require('@storybook/test-runner');\n\n/*\n * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api\n * to learn more about the test-runner hooks API.\n */\nmodule.exports = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await getStoryContext(page, context);\n\n    // Apply story-level a11y rules\n    await configureAxe(page, {\n      rules: storyContext.parameters?.a11y?.config?.rules,\n    });\n\n    const element = storyContext.parameters?.a11y?.element ?? 'body';\n    await checkA11y(page, element, {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Common Parameters Across Stories\nDESCRIPTION: Demonstrates how to share parameters between multiple stories using a variable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_140\n\nLANGUAGE: javascript\nCODE:\n```\nconst commonParameters = { x: { y: 'z' } };\nexport StoryOne = ...;\nStoryOne.story = { parameters: { ...commonParameters, other: 'things' } };\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Vue (TypeScript)\nDESCRIPTION: TypeScript implementation of a Storybook story for the Page component in Vue. Uses vue-component-type-helpers to extend the component props with a footer property and creates a template with a footer slot that conditionally renders the footer content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// https://www.npmjs.com/package/vue-component-type-helpers\nimport type { ComponentProps } from 'vue-component-type-helpers';\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Page from './Page.vue';\n\ntype PagePropsAndCustomArgs = ComponentProps<typeof Page> & { footer?: string };\n\nconst meta: Meta<PagePropsAndCustomArgs> = {\n  component: Page,\n  render: (args) => ({\n    components: { Page },\n    setup() {\n      return { args };\n    },\n    template: `\n      <page v-bind=\"args\">\n        <template v-slot:footer>\n          <footer v-if=\"args.footer\" v-html=\"args.footer\" />\n        </template>\n      </page>\n    `,\n  }),\n};\nexport default meta;\n\ntype Story = StoryObj<PagePropsAndCustomArgs>;\n\nexport const Primary: Story = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering CSF4 Stories in MDX\nDESCRIPTION: This MDX code block uses the Stories component to render all the stories from the imported CSF4 module. It allows for automatic display of all stories within the MDX documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/react/template/stories/csf4.mdx#2025-04-22_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Stories />\n```\n\n----------------------------------------\n\nTITLE: Updating Storybook Framework for Preact with Vite in JavaScript\nDESCRIPTION: This snippet shows how to modify the Storybook configuration file in JavaScript to use Vite instead of Webpack 5 for Preact projects. It updates the 'framework' property in the configuration object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  // framework: '@storybook/preact-webpack5', 👈 Remove this\n  framework: '@storybook/preact-vite', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Play Function in Composed Stories\nDESCRIPTION: Shows how to handle the potentially undefined play function returned from composeStories or composeStory in @storybook/react or @storybook/vue3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Primary } = composeStories(stories)\n\n// before\nawait Primary.play(...)\n\n// after\nawait Primary.play?.(...) // if you don't care whether the play function exists\nawait Primary.play!(...) // if you want a runtime error when the play function does not exist\n```\n\n----------------------------------------\n\nTITLE: Handling NextJS Page Data Fetching\nDESCRIPTION: Example of restructuring a Next.js page component to make it Storybook-compatible by separating data fetching from presentation\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n// app/my-page/index.jsx\nasync function getData() {\n  const res = await fetch(...);\n  // ...\n}\n\n// Using this component in your stories will break the Storybook build\nexport default async function Page() {\n  const data = await getData();\n\n  return // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// app/my-page/index.jsx\n\n// Use this component in your stories\nimport MyPage from './components/MyPage';\n\nasync function getData() {\n  const res = await fetch(...);\n  // ...\n}\n\nexport default async function Page() {\n  const data = await getData();\n\n  return <MyPage {...data} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript in React\nDESCRIPTION: React Storybook story for TodoItem using TypeScript with standard type annotations. Defines meta object with component and render function, and a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { TodoItem } from './TodoItem';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nconst meta: Meta<typeof TodoItem> = {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof TodoItem>;\n\nexport const Primary: Story = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Manager Options in JavaScript\nDESCRIPTION: Shows how to set UI configuration options like showRoots using the addons.setConfig method in manager.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_147\n\nLANGUAGE: javascript\nCODE:\n```\n// in .storybook/manager.js\nimport { addons } from \"@storybook/addons\";\n\naddons.setConfig({\n  showRoots: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes with TypeScript 4.9\nDESCRIPTION: Implements theme switching in Storybook using data attributes with TypeScript 4.9. Uses type-safe configuration with Preview and Renderer types from the framework-specific Storybook package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-data-attribute-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the framework you are using (e.g., react, vue3)\nimport { Preview, Renderer } from '@storybook/your-renderer';\nimport { withThemeByDataAttribute } from '@storybook/addon-themes';\n\nimport '../src/index.css'; // Your application's global CSS file\n\nconst preview: Preview = {\n  decorators: [\n    withThemeByDataAttribute<Renderer>({\n      themes: {\n        light: 'light',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n      attributeName: 'data-theme',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgType Categories in Storybook for Web Components (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates configuring `argTypes` for a Web Component ('demo-button') story in Storybook. It defines the component using its tag name as a string and organizes its properties/attributes (`backgroundColor`, `primary`, `label`, `onClick`, `size`) into categories and subcategories within the `argTypes` object using the `table` property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  component: 'demo-button',\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n        // Assigns the argTypes to a specific subcategory\n        subcategory: 'Button colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n        subcategory: 'Button style',\n      },\n    },\n    label: {\n      table: {\n        category: 'Text',\n        subcategory: 'Button contents',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n        subcategory: 'Button Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Vue Document Screen with Apollo (JavaScript)\nDESCRIPTION: Vue component implementation using @vue/apollo-composable for GraphQL queries. Uses Vue's template syntax for conditional rendering and data display.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"loading\">Loading...</div>\n\n  <div v-else-if=\"error\">There was an error fetching the data!</div>\n\n  <div v-if=\"!loading && data && result.subdocuments.length\">\n    <PageLayout :user=\"data.user\">\n      <DocumentHeader :document=\"result.document\" />\n      <DocumentList :documents=\"result.subdocuments\" />\n    </PageLayout>\n  </div>\n</template>\n\n<script>\n  import PageLayout from './PageLayout';\n  import DocumentHeader from './DocumentHeader';\n  import DocumentList from './DocumentList';\n\n  import gql from 'graphql-tag';\n  import { useQuery } from '@vue/apollo-composable';\n\n  export default {\n    name: 'DocumentScreen',\n    setup() {\n      const { result, loading, error } = useQuery(gql`\n        query AllInfoQuery {\n          user {\n            userID\n            name\n          }\n          document {\n            id\n            userID\n            title\n            brief\n            status\n          }\n          subdocuments {\n            id\n            userID\n            title\n            content\n            status\n          }\n        }\n      `);\n      return {\n        result,\n        loading,\n        error,\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories Metadata for Common Frameworks in JavaScript\nDESCRIPTION: This snippet shows how to define metadata for a Button component in a framework-agnostic way using JavaScript. It imports the Button component, sets up argTypes for the 'variant' prop, and exports the default metadata object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary'],\n      control: { type: 'radio' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing Environment Variables in Storybook\nDESCRIPTION: Code example showing how to expose environment variables to the browser in Storybook by using the 'STORYBOOK_' prefix. Variables like 'STORYBOOK_API_URL' will be available in browser code, while others like 'API_KEY' will remain private.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nSTORYBOOK_API_URL\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Individual Stories in Storybook\nDESCRIPTION: This code demonstrates how to add a description to an individual story using the docs.description.story parameter. The description can contain markdown markup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst Example = () => <Button />;\n\nExample.parameters = {\n  docs: {\n    description: {\n      story: 'Individual story description, may contain `markdown` markup',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in TypeScript\nDESCRIPTION: This snippet shows the TypeScript equivalent for configuring Storybook's `.storybook/main.ts` file. It imports the `StorybookConfig` type for type safety (from a placeholder `@storybook/your-framework`), specifies the framework (also a placeholder `@storybook/your-framework`), defines the location of story files using glob patterns (`../src/**/*.mdx`, `../src/**/*.stories.@(js|jsx|mjs|ts|tsx)`), and disables the \"What's New\" notifications via the `core.disableWhatsNewNotifications` option. The configuration object is typed using `StorybookConfig`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-update-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableWhatsNewNotifications: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining SolidJS List Stories in JavaScript\nDESCRIPTION: Configures a Storybook story for a SolidJS List component using JavaScript. It imports the List component and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\n\nexport default {\n  component: List,\n};\n\n// Always an empty list, not super interesting\nexport const Empty = {};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in SolidJS with TypeScript 4.9+ Syntax\nDESCRIPTION: This snippet shows how to create Storybook stories for a Button component in SolidJS using TypeScript 4.9+ with the 'satisfies' operator. It properly types the meta object and story with TypeScript interfaces from storybook-solidjs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => <Button primary label=\"Button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Storybook Preview Head in JavaScript\nDESCRIPTION: This snippet shows how to customize the Storybook preview head in JavaScript. It adds custom CSS styles to change the background color of the preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  previewHead: (head) => `\n    ${head}\n    <style>\n      html, body {\n        background: #827979;\n      }\n    </style>\n `,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in Svelte Storybook Stories with JavaScript\nDESCRIPTION: Demonstrates viewport configuration for a Button component in Svelte using JavaScript. Uses the defineMeta function to set a default tablet viewport for all stories and overrides it with a mobile viewport for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    globals: {\n      // 👇 Set viewport for all component stories\n      viewport: { value: \"tablet\", isRotated: false },\n    },\n  });\n</script>\n\n<Story\n  name=\"OnPhone\"\n  globals={{\n    viewport: { value: \"mobile1\", isRotated: false },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Story Component\nDESCRIPTION: Displays the Basic story variant from the imported button stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOfNamed.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Story of={ButtonStories.Basic} />\n```\n\n----------------------------------------\n\nTITLE: Adding Decorators and Parameters in MDX\nDESCRIPTION: This demonstrates how to add decorators and parameters to stories in MDX format. It shows how to add them both at the Meta level (affecting all stories) and at the individual Story level.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<Meta\n  title='MyComponent'\n  decorators={[ ... ]}\n  parameters={{ ... }}\n/>\n\n<Story name=\"story\" decorators={[ ... ]} parameters={{ ... }} >\n...\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox Story in MDX for Svelte using CSF\nDESCRIPTION: This snippet demonstrates how to import and render a Checkbox component story for Svelte using Component Story Format (CSF) in Storybook documentation. It imports the Canvas component and Checkbox stories, then renders the Unchecked story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-story.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n\n<Canvas of={CheckboxStories.Unchecked} />\n```\n\n----------------------------------------\n\nTITLE: HTML Component Story Configuration (JavaScript)\nDESCRIPTION: Demonstrates story configuration for HTML components using JavaScript, including render functions and component creation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createYourComponent } from './YourComponent';\n\n// 👇 This default export determines where your story goes in the story list\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'YourComponent',\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const FirstStory = {\n  render: (args) => createYourComponent(args),\n  args: {\n    // 👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for createTest Function\nDESCRIPTION: TypeScript type definition for the createTest function that extends Playwright's test functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-playwright.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateTest(\n  baseTest: PlaywrightFixture\n) => PlaywrightFixture\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Page Title with Meta Component\nDESCRIPTION: This snippet uses the Meta component from Storybook to set the title of the configuration page to 'Configure your project'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/js/Configure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Configure your project\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: JavaScript configuration example for Storybook's main.js file. Specifies the framework to use, defines story file patterns to include, and configures build test options with blocks enabled.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-blocks.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableBlocks: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook with npm\nDESCRIPTION: Command to start Storybook using npm as the package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-run-dev.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Custom Children Story Example\nDESCRIPTION: Demonstration of using custom children with the Story component in Svelte CSF v5.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent\n  });\n</script>\n\n<Story name=\"Custom Children\">\n  <MyComponent>\n    <h1>Custom content</h1>\n  </MyComponent>\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Stories with JavaScript\nDESCRIPTION: Storybook stories for a Web Components Button using JavaScript. Defines three button variants with different labels and styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  args: {\n    backgroundColor: '#ff0',\n    label: 'Button',\n  },\n};\n\nexport const Secondary = {\n  args: {\n    ...Primary.args,\n    label: '😄👍😍💯',\n  },\n};\n\nexport const Tertiary = {\n  args: {\n    ...Primary.args,\n    label: '📚📕📈🤓',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Storybook Theme in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a custom theme for Storybook using the create function from storybook/theming. It sets the base theme to 'light' and customizes branding elements such as title, URL, image, and link target.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-theme-example-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from 'storybook/theming';\n\nexport default create({\n  base: 'light',\n  brandTitle: 'My custom Storybook',\n  brandUrl: 'https://example.com',\n  brandImage: 'https://storybook.js.org/images/placeholders/350x150.png',\n  brandTarget: '_self',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework for Vue 3 with Vite in JavaScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook, specifying the framework as '@storybook/vue3-vite' and setting the docgen option to 'vue-component-meta'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue-vite-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/vue3-vite',\n    options: {\n      docgen: 'vue-component-meta',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Switching to import.meta.webpackHot.accept in Webpack 5\nDESCRIPTION: Changes Webpack 5 configuration to use import.meta.webpackHot.accept instead of the previous method.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebpack5: Switch to using `import.meta.webpackHot.accept`\n```\n\n----------------------------------------\n\nTITLE: Button Stories JavaScript Implementation\nDESCRIPTION: Basic JavaScript implementation of Button component stories in Storybook, defining default and dark theme variants without type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/configure-mock-provider-with-story-parameter.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n// Wrapped in light theme\nexport const Default = {};\n\n// Wrapped in dark theme\nexport const Dark = {\n  parameters: {\n    theme: 'dark',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Story\nDESCRIPTION: Demonstrates configuration for Web Components stories in both JavaScript and TypeScript. Shows how to set up the component with disabled table of contents using the web-components framework-specific setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      toc: {\n        disable: true, // 👈 Disables the table of contents\n      },\n    },\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      toc: {\n        disable: true, // 👈 Disables the table of contents\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Using Meta Component with Custom Name in MDX\nDESCRIPTION: Demonstrates how to use the Meta component with a custom name prop to attach multiple MDX files to the same component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport * as ComponentStories from './component.stories';\n\n{/* This MDX file is now called \"Special Docs\" */}\n<Meta of={ComponentStories} name=\"Special Docs\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Story-Level Parameters in CSF\nDESCRIPTION: Demonstrates how to set parameters for individual stories using the parameters key in Component Story Format (CSF). Shows setting background colors for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/parameters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.stories.js|jsx|ts|tsx|mdx\nexport const Primary = {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n        { name: 'blue', value: '#00f' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Metadata for Stories\nDESCRIPTION: Example of setting the component field in story metadata for proper documentation linking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'App Component',\n  component: 'AppComponent',\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Development Server\nDESCRIPTION: The main command to start Storybook's development server. It compiles and serves a development build that reflects source code changes in real-time.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstorybook dev [options]\n```\n\n----------------------------------------\n\nTITLE: Component-Level A11y Configuration\nDESCRIPTION: Example of setting accessibility testing rules at the component level.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: MyComponent,\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            id: 'color-contrast',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Svelte CSF in TypeScript\nDESCRIPTION: Creates a Storybook story for a Svelte component using standard TypeScript syntax. Defines meta configuration with specific argTypes and a render function that processes component arguments before rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta: Meta<typeof YourComponent> = {\n  component: YourComponent,\n  //👇 Creates specific argTypes\n  argTypes: {\n    propertyA: {\n      options: ['Item One', 'Item Two', 'Item Three'],\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\n    },\n    propertyB: {\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst someFunction = (valuePropertyA, valuePropertyB) => {\n  // Do some logic here\n};\n\nexport const ExampleStory: Story = {\n  render: (args) => {\n    //👇 Assigns the function result to a variable\n    const someFunctionResult = someFunction(args.propertyA, args.propertyB);\n    return {\n      Component: YourComponent,\n      props: {\n        ...args,\n        someProperty: someFunctionResult,\n      },\n    };\n  },\n  args: {\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Framework Server Options Configuration\nDESCRIPTION: Server-side options configuration for Vue framework support in Storybook\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: 'vue',\n  presets: [\n    require.resolve('./framework-preset-vue.js'),\n    require.resolve('./framework-preset-vue-docs.js'),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Entry Point in JavaScript\nDESCRIPTION: This JavaScript snippet exports the main configuration object required by Storybook to initialize the environment. It allows for selecting the framework (such as react-webpack5 or vue3-vite), specifies glob patterns to locate Markdown and story files, and disables project-level JSON settings. No explicit dependencies are required beyond having Storybook and a suitable framework installed. Users should update '@storybook/your-framework' to match their project framework, while the configuration expects story files in src/ subfolders.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-project-json.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableProjectJson: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Storybook Stories\nDESCRIPTION: Demonstrates how to create a Storybook story file using JavaScript. Shows the basic story structure without type definitions, suitable for JavaScript projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Foo } from './Foo';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Foo/Bar',\n  component: Foo,\n};\n\nexport const Baz = {};\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook Docs Addon to Configuration\nDESCRIPTION: Basic configuration to add the Storybook Docs addon to your Storybook setup in the .storybook/main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-docs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Svelte CSF Addon\nDESCRIPTION: Configuration snippet to enable support for the Svelte CSF addon in the Storybook configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"main-config-svelte-csf-register.md\" />\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Development Server\nDESCRIPTION: Command to start the Storybook development server. This will launch the local server, provide the address, and open it in a new browser tab.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"storybook-run-dev.md\" />\n```\n\n----------------------------------------\n\nTITLE: Framework Globals Configuration\nDESCRIPTION: Global variable configuration for framework identification\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.FRAMEWORK = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for SolidJS List Component in JavaScript\nDESCRIPTION: This code configures Storybook stories for a SolidJS List component using JavaScript. It explicitly sets a title for the component, includes ListItem as a subcomponent, and demonstrates the rendering of empty and populated lists.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent\n};\n\nexport const Empty = {};\n\nexport const OneItem = {\n  render: (args) => (\n    <List {...args}>\n      <ListItem />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Story HTML Fetching in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to implement a custom fetchStoryHtml function for advanced control over how Storybook fetches HTML from the server. It includes the function signature and usage in preview.js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\n\nconst fetchStoryHtml = async (url, path, params, context) => {\n  // Custom fetch implementation\n  // ....\n  return html;\n};\n\nexport const parameters = {\n  server: {\n    url: `http://localhost:${port}/storybook_preview`,\n    fetchStoryHtml,\n  },\n};\n\ntype FetchStoryHtmlType = (\n  url: string,\n  id: string,\n  params: any,\n  context: StoryContext\n) => Promise<string | Node>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story Metadata in JavaScript\nDESCRIPTION: This snippet exports default metadata for the Button stories, including the title and story inclusion/exclusion patterns.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf.txt#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  title: \"Button\",\n  excludeStories: [\"text\"],\n  includeStories: /emoji.*/\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Parameters in Storybook\nDESCRIPTION: Demonstrates how to disable a query parameter by setting it to null using api.setQueryParams().\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napi.setQueryParams({\n  key: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Working MDX Style Implementation Example\nDESCRIPTION: Correct way to implement styles in MDX that works properly with line breaks in code blocks by adjusting the placement of curly braces.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_11\n\nLANGUAGE: mdx\nCODE:\n```\n<style>\n  {`\n    .class1 {\n      ...\n    }\n\n    .class2 {\n      ...\n    }\n  `}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Solid with TypeScript (CSF 2)\nDESCRIPTION: Creates a default button story for Solid components using TypeScript and CSF 2 format. Uses ComponentStory type to provide proper typing for the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Other imports and story implementation\nexport const Default: ComponentStory<typeof Button> = (args) => <Button {...args} />;\n```\n\n----------------------------------------\n\nTITLE: Specifying Component Metadata for Props Tables using Component Stories Format\nDESCRIPTION: Example of how to specify the component in your story metadata using the Component Story Format (CSF) to enable props table generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InfoButton } from './InfoButton.vue';\n\nexport default {\n  title: 'InfoButton',\n  component: InfoButton,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with Specific Builder\nDESCRIPTION: Command to initialize Storybook with a specified builder using the CLI. Allows choosing between webpack5 or vite as the builder option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest init --builder <webpack5 | vite>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Experimental Next.js Vite Renderer (TypeScript)\nDESCRIPTION: This snippet demonstrates updating the Storybook TypeScript configuration to use the experimental Next.js Vite renderer. It imports the 'StorybookConfig' type from the experimental framework package, assigns the updated configuration to 'config', and exports it as default. The change includes a placeholder for further configuration and replaces the default Webpack framework with the Next.js Vite one. Required dependencies include Storybook and '@storybook/experimental-nextjs-vite'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-add-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { StorybookConfig } from '@storybook/experimental-nextjs-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  // framework: '@storybook/react-webpack5', 👈 Remove this\n  framework: '@storybook/experimental-nextjs-vite', // 👈 Add this\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Inline Meta Properties in Storybook CSF (JavaScript)\nDESCRIPTION: This snippet shows the correct way to define meta properties inline within the default export of a Storybook CSF file, as recommended by the rule. All properties are defined directly in the export object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/meta-inline-properties.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  args: { primary: true },\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Overwriting Docs Container with Custom Wrapper in MDX\nDESCRIPTION: This code demonstrates how to add a custom wrapper to the MDX page in Storybook Docs by overriding the docs.container parameter. It adds a red border around the page content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, DocsContainer } from '@storybook/addon-docs';\n\n<Meta\n  title=\"Addons/Docs/container-override\"\n  parameters={{\n    docs: {\n      container: ({ children, context }) => (\n        <DocsContainer context={context}>\n          <div style={{ border: '5px solid red' }}>{children}</div>\n        </DocsContainer>\n      ),\n    },\n  }}\n/>\n\n# Title\n\nRest of your file...\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Common JavaScript Format\nDESCRIPTION: This snippet illustrates how to define Storybook stories for a Button component using a common JavaScript format. It can be used with various frameworks and defines primary and secondary stories with different props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Composed Storybook in JavaScript Configuration\nDESCRIPTION: This code snippet shows how to disable a composed Storybook ref in the .storybook/main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/package-composition.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  refs: {\n    'design-system': {\n      disabled: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Storybook Addon and Getting URL State\nDESCRIPTION: This code registers a custom Storybook addon with a specific namespace and uses the Storybook API to get a URL that points to a specific story. The api.getUrlState method is used to generate a URL with parameters for the selected kind and story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-geturlstate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddons.register('my-organisation/my-addon', (api) => {\n  const href = api.getUrlState({\n    selectedKind: 'kind',\n    selectedStory: 'story',\n  }).url;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration in JavaScript\nDESCRIPTION: Basic JavaScript configuration for Storybook's main.js file, specifying the framework and stories location. The example shows how to configure Storybook to load stories from a specific folder.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-storyloading-with-directory.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  // 👇 Storybook will load all existing stories within the MyStories folder\n  stories: ['../packages/MyStories'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Next.js package with yarn\nDESCRIPTION: This command installs the @storybook/nextjs package as a development dependency using yarn. It provides another option for adding Storybook to a Next.js project using a different package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/nextjs\n```\n\n----------------------------------------\n\nTITLE: Mocking getUserFromSession Function in TypeScript for Storybook Tests\nDESCRIPTION: This code snippet creates a mock version of the getUserFromSession function from the session module. It uses Storybook's test utilities to create a mock function and assigns it a name for easier identification in test output.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-file-example.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fn } from 'storybook/test';\nimport * as actual from './session';\n\nexport * from './session';\nexport const getUserFromSession = fn(actual.getUserFromSession).mockName('getUserFromSession');\n```\n\n----------------------------------------\n\nTITLE: Array Parameter Handling with Spread Operator\nDESCRIPTION: Shows how to properly merge array parameters using the spread operator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_141\n\nLANGUAGE: javascript\nCODE:\n```\nimport { allBackgrounds } from './util/allBackgrounds';\n\nexport StoryOne = ...;\nStoryOne.story = { parameters: { backgrounds: [...allBackgrounds, '#zyx' ] } };\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework in Storybook Config\nDESCRIPTION: JavaScript configuration for setting up the React-Webpack5 framework in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/react-webpack5'\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with Storybook for Svelte\nDESCRIPTION: This snippet shows the Vitest configuration for a Svelte Storybook project. It sets up the Storybook test plugin and configures browser-based testing with Playwright, similar to the React and Vue configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, mergeConfig } from 'vitest/config';\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nconst dirname =\n  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));\n\nimport viteConfig from './vite.config';\n\nexport default mergeConfig(\n  viteConfig,\n  defineConfig({\n    plugins: [\n      storybookTest({\n        // The location of your Storybook config, main.js|ts\n        configDir: path.join(dirname, '.storybook'),\n        // This should match your package.json script to run Storybook\n        // The --ci flag will skip prompts and not open a browser\n        storybookScript: 'yarn storybook --ci',\n      }),\n    ],\n    test: {\n      // Enable browser mode\n      browser: {\n        enabled: true,\n        // Make sure to install Playwright\n        provider: 'playwright',\n        headless: true,\n        instances: [{ browser: 'chromium' }],\n      },\n      setupFiles: ['./.storybook/vitest.setup.ts'],\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte CSF Addon\nDESCRIPTION: Command to install the Svelte CSF addon for writing native Svelte stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"svelte-csf-addon-install.md\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Default Next.js Navigation Context in Storybook\nDESCRIPTION: This snippet shows the default values for the stubbed Next.js navigation context in Storybook. It includes properties like pathname and query, which can be overridden using parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Default navigation context\nconst defaultNavigationContext = {\n  pathname: '/',\n  query: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript configuration file for Storybook with type-safe configuration using StorybookConfig type. Includes framework setup, story pattern matching, and typed addon configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-disable-addon.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    {\n      name: '@storybook/addon-essentials',\n      options: {\n        backgrounds: false, // 👈 disable the backgrounds addon\n      },\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: This snippet sets up the main configuration for a Storybook project using JavaScript. It specifies the framework to be used, the location of the story files, and a customization for the HTML body to include analytics if an ID is present in the environment variables. No additional dependencies are required.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-body.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  previewBody: (body) => `\n    ${body}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Using useGlobals Hook for Accessing Storybook Globals in JavaScript\nDESCRIPTION: Demonstrates how to use the useGlobals hook to access and update global values in Storybook. This hook is available in both @storybook/preview-api and @storybook/manager-api.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-store.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGlobals } from '@storybook/preview-api';\n\n// or '@storybook/manager-api'\n\nconst [globals, updateGlobals] = useGlobals();\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with CSF Files or Deprecated API\nDESCRIPTION: The configure function returned by start is used to set up Storybook. It can return a list of CSF files or use the deprecated storiesOf API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-core-client.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconfigure()\n```\n\n----------------------------------------\n\nTITLE: Setting Babel Configuration Inspection Environment Variable\nDESCRIPTION: Shell command to debug Babel configuration by showing the effective configs for a specific file using the BABEL_SHOW_CONFIG_FOR environment variable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/compilers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBABEL_SHOW_CONFIG_FOR=.storybook/preview.js yarn storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Storybook Tests\nDESCRIPTION: GitHub Actions workflow configuration that runs Storybook tests when a deployment status event occurs. It sets up Node.js, installs dependencies, and runs tests with a dynamic Storybook URL.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Storybook Tests\non: deployment_status\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '18.x'\n      - name: Install dependencies\n        run: yarn\n      - name: Run Storybook tests\n        run: yarn test-storybook\n        env:\n          SB_URL: '${{ github.event.deployment_status.target_url }}'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Context Usage in Storybook Play Function (JavaScript)\nDESCRIPTION: This snippet demonstrates incorrect usage where no context or partial context is passed to the play function of another story. This can lead to functionality issues in Storybook interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/context-in-play-function.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { within, userEvent } from '@storybook/testing-library'\n\nMyStory.play = ({ canvasElement }) => {\n  const canvas = within(canvasElement)\n  // not passing any context\n  await MyOtherStory.play()\n\n  userEvent.click(canvas.getByRole('button'))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { within, userEvent } from '@storybook/testing-library'\n\nMyStory.play = ({ canvasElement }) => {\n  const canvas = within(canvasElement)\n  // not passing the full context\n  await MyOtherStory.play({ canvasElement })\n\n  userEvent.click(canvas.getByRole('button'))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a React Component with PropTypes\nDESCRIPTION: This code defines a React Button component with PropTypes for type checking and default props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({ label }) => <button>{label}</button>;\nButton.propTypes = {\n  /** demo description */\n  label: PropTypes.string,\n};\nButton.defaultProps = {\n  label: 'Hello',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Stories in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for Web Components using JavaScript. It shows a simplified structure for defining metadata and exporting stories for custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'OtherFoo/Bar',\n  component: 'foo',\n  id: 'Foo/Bar', // Or 'foo-bar' if you prefer\n};\n\nexport const Baz = {\n  name: 'Insert name here',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backgrounds in Web Components Storybook (JS)\nDESCRIPTION: Configures background options for a demo-button Web Component using JavaScript. Sets up dark and gray background themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  parameters: {\n    backgrounds: {\n      options: {\n        // 👇 Override the default `dark` option\n        dark: { name: 'Dark', value: '#000' },\n        // 👇 Add a new option\n        gray: { name: 'Gray', value: '#CCC' },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Story Store V7 Configuration\nDESCRIPTION: Configuration for enabling Story Store V7 features in main.js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ... your existing config\n  framework: \"@storybook/react\", // OR whatever framework you're using\n  features: {\n    storyStoreV7: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Angular TypeScript Story Configuration\nDESCRIPTION: Storybook story configuration for Angular component using TypeScript. Demonstrates simple and complex data handling with story inclusion/exclusion patterns.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nimport someData from './data.json';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories\n  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data\n};\n\nexport default meta;\n\nexport const simpleData = { foo: 1, bar: 'baz' };\nexport const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };\n\ntype Story = StoryObj<MyComponent>;\n\nexport const SimpleStory: Story = {\n  args: {\n    data: simpleData,\n  },\n};\n\nexport const ComplexStory: Story = {\n  args: {\n    data: complexData,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setup and Cleanup with beforeEach\nDESCRIPTION: Example of using beforeEach for setup and cleanup with MockDate in stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport MockDate from 'mockdate';\n\nexport default {\n  component: DateComponent,\n  beforeEach() {\n    MockDate.set('2021-01-01T12:00:00.000Z');\n    return () => MockDate.reset();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Test Runner Snapshot Configuration\nDESCRIPTION: Configuration setup for enabling snapshot testing with Storybook test-runner, defining a postVisit hook to capture DOM snapshots after story rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async postVisit(page, context) {\n    const root = page.locator('#storybook-root');\n    const snapshot = await root.innerHTML();\n    await expect(snapshot).toMatchSnapshot();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in Vue with JavaScript\nDESCRIPTION: Shows how to create a List component story in Vue using JavaScript. This example demonstrates component registration, props passing, and template composition using Vue's template syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './ListComponent.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nexport default {\n  component: List,\n};\n\nexport const ManyItems = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { ...args };\n    },\n    template: `\n      <List v-bind=\"args\">\n        <list-item :isSelected=\"Selected\"/>\n        <list-item :isSelected=\"Unselected\"/>\n        <list-item :isSelected=\"Unselected\"/>\n      </List>`,\n  }),\n  args: {\n    Selected: Selected.args.isSelected,\n    Unselected: Unselected.args.isSelected,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Play Function in Svelte CSF Stories with TypeScript 4.9\nDESCRIPTION: This snippet shows how to create a Storybook story for a Svelte component using TypeScript 4.9 and the Svelte CSF format. It demonstrates using defineMeta from the Svelte CSF addon and implements a play function for simulating user interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  play={async ({ canvasElement }) => {\n    // Assigns canvas to the component root element\n    const canvas = within(canvasElement);\n\n    // Starts querying from the component's root element\n    await userEvent.type(canvas.getByTestId('example-element'), 'something');\n    await userEvent.click(canvas.getByRole('button'));\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Storybook Addon in JavaScript/TypeScript\nDESCRIPTION: This code snippet demonstrates how to register a custom addon with Storybook. It uses the addons.register method with a unique identifier ('my-organisation/my-addon') and a callback function that utilizes the API to select the 'Default' story in the current kind.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-selectincurrentkind.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddons.register('my-organisation/my-addon', (api) => {\n  api.selectInCurrentKind('Default');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components with TypeScript\nDESCRIPTION: TypeScript implementation for Web Components Button stories using proper type definitions. Demonstrates typed story configuration for custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components-vite';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  globals: {\n    // 👇 Set background value for all component stories\n    backgrounds: { value: 'gray', grid: false },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const OnDark: Story = {\n  globals: {\n    // 👇 Override background value for this story\n    backgrounds: { value: 'dark' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Manager Entries Function for Storybook Addon in JavaScript\nDESCRIPTION: This code defines a function that appends a third-party addon to the Storybook manager entries. The function takes an optional entry array parameter and returns a new array containing the original entries plus the path to the third-party addon resolved using require.resolve().\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-root-preset-manager-entries.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const managerEntries = (entry = []) => {\n  return [...entry, require.resolve('path-to-third-party-addon')];\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook addons in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook's addons in a TypeScript file for a Next.js project. It imports the StorybookConfig type, defines a configuration object, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-remove-addons.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/nextjs';\n\nconst config: StorybookConfig = {\n  // ...\n  addons: [\n    // ...\n    // 👇 These can both be removed\n    // 'storybook-addon-next',\n    // 'storybook-addon-next-router',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Outline Addon\nDESCRIPTION: Example CSS styles for the outline addon that adds borders around elements in the story preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nexport const styles = `\n  *:not(html):not(body):not(#root):not(#docs-root) {\n    outline: 1px solid #2980b9 !important;\n  }\n  *:not(html):not(body):not(#root):not(#docs-root):hover {\n    outline: 1px solid #2ecc71 !important;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Svelte Gizmo Component with TypeScript 4.9\nDESCRIPTION: This TypeScript code configures Storybook controls for a Svelte Gizmo component using TypeScript 4.9 with the 'satisfies' type operator. It defines a complete set of control types with specific configuration options for interactive manipulation in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Gizmo from './Gizmo.svelte';\n\nconst meta = {\n  component: Gizmo,\n  argTypes: {\n    canRotate: {\n      control: 'boolean',\n    },\n    width: {\n      control: { type: 'number', min: 400, max: 1200, step: 50 },\n    },\n    height: {\n      control: { type: 'range', min: 200, max: 1500, step: 50 },\n    },\n    rawData: {\n      control: 'object',\n    },\n    coordinates: {\n      control: 'object',\n    },\n    texture: {\n      control: {\n        type: 'file',\n        accept: '.png',\n      },\n    },\n    position: {\n      control: 'radio',\n      options: ['left', 'right', 'center'],\n    },\n    rotationAxis: {\n      control: 'check',\n      options: ['x', 'y', 'z'],\n    },\n    scaling: {\n      control: 'select',\n      options: [10, 50, 75, 100, 200],\n    },\n    label: {\n      control: 'text',\n    },\n    meshColors: {\n      control: {\n        type: 'color',\n        presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n      },\n    },\n    revisionDate: {\n      control: 'date',\n    },\n  },\n} satisfies Meta<typeof Gizmo>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Meta with Control Removal Using CSF (JavaScript)\nDESCRIPTION: Illustrates usage of '@storybook/addon-svelte-csf' to define meta and story configuration for a Svelte component, specifically disabling the 'foo' property in controls. Requires Svelte, the Storybook Svelte CSF add-on, and a Svelte component import. Component is assigned as 'component', and 'foo' is set with control false in 'argTypes'. Intended for Svelte Storybook stories using JavaScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    argTypes: {\n      // foo is the property we want to remove from the UI\n      foo: {\n        control: false,\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Story with TypeScript\nDESCRIPTION: This snippet shows a generic way to configure a Storybook story for a Page component using TypeScript. It imports the necessary types and component, and sets up the story configuration with type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Page } from './Page';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Converting MDX Stories to CSF with pnpm\nDESCRIPTION: Command to migrate Storybook stories from MDX format to Component Story Format (CSF) using pnpm. The command uses pnpm dlx to execute the storybook migration script targeting all .stories.mdx files in the src directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-mdx-to-csf.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Convert stories in MDX to CSF\npnpm dlx storybook@latest migrate mdx-to-csf --glob \"src/**/*.stories.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Updating Decorator Type Import in TypeScript\nDESCRIPTION: Demonstrates how to update the import of the Decorator type in Storybook 7.0, which replaces the deprecated DecoratorFn type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Decorator } from \"@storybook/react\";\n// or\nimport type { Decorator } from \"@storybook/vue\";\n// or\nimport type { Decorator } from \"@storybook/svelte\";\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration in Storybook Main File\nDESCRIPTION: This code demonstrates advanced configuration options in the Storybook main.js file, including custom webpack and babel configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  webpackFinal: async (config) => {\n    config.module.rules.push({\n      test: /\\.scss$/,\n      use: ['style-loader', 'css-loader', 'sass-loader'],\n    });\n    return config;\n  },\n  babel: async (options) => ({\n    ...options,\n    plugins: [...options.plugins, '@babel/plugin-transform-react-jsx'],\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte CSF Stories\nDESCRIPTION: Svelte component story configuration using the CSF format and addon-svelte-csf.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    parameters: { controls: { sort: 'requiredFirst' } },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Coverage with Yarn\nDESCRIPTION: Executes Storybook test coverage using Yarn package manager. The command runs the test-storybook script with the coverage flag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-coverage.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook --coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap theme switching in Storybook\nDESCRIPTION: Diff showing how to set up theme switching for Bootstrap's light and dark modes using the withThemeByDataAttribute decorator from @storybook/addon-themes in the .storybook/preview.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/bootstrap.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import { Preview } from '@storybook/your-renderer';\n+import { Preview, Renderer } from '@storybook/your-renderer';\n+import { withThemeByDataAttribute } from '@storybook/addon-themes';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle';\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n+ decorators: [\n+  withThemeByDataAttribute<Renderer>({\n+    themes: {\n+      light: 'light',\n+      dark: 'dark',\n+    },\n+    defaultTheme: 'light',\n+    attributeName: 'data-bs-theme',\n+  }),\n+ ]\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Component Button Story Metadata with JavaScript\nDESCRIPTION: Defines the metadata for a Button web component story using JavaScript. It exports a default object specifying the component tag name (`demo-button`), `argTypes` for controls (like a color picker for `backgroundColor`), and default `args` (setting `primary` to true). This configuration targets standard web components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  component: 'demo-button',\n  // 👇 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    // 👇 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Unstyled Block Component in Storybook Addon-Docs\nDESCRIPTION: Example of how to import and use the Unstyled component from Storybook addon-docs to selectively remove default styling from content elements. The example demonstrates the difference between styled and unstyled headings, subheadings, block quotes, paragraphs, and components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/src/blocks/blocks/Unstyled.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Unstyled } from '@storybook/addon-docs/blocks';\n\n# This heading will be styled\n\n<h2>So will this subheading</h2>\n\n> This block quote will be styled\n\n... and so will this paragraph.\n\n<Unstyled>\n  # This heading will not be styled\n\n  <h2>Neither will this subheading</h2>\n\n  > This block quote will not be styled\n\n  ... neither will this paragraph, nor the following component:\n  <MyCustomComponent />\n</Unstyled>\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs for Svelte Button Component (CSF)\nDESCRIPTION: Svelte implementation using Component Story Format (CSF) to configure auto-generated documentation. Shows setup using both JavaScript and Svelte-specific syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Enables auto-generated documentation for this component and includes all stories in this file\n    tags: ['autodocs'],\n  });\n</script>\n\n<!--👇 Removes this story from auto-generated documentation -->\n<Story name=\"UndocumentedStory\" tags={['!autodocs']} />\n```\n\n----------------------------------------\n\nTITLE: Registering Storybook Addon with Query Parameters\nDESCRIPTION: Demonstrates how to register a custom Storybook addon using addons.register() and initialize query parameters using the API's setQueryParams method. The addon is registered with a unique identifier and configures an example parameter with null value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-disablequeryparams.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddons.register('my-organisation/my-addon', (api) => {\n  api.setQueryParams({\n    exampleParameter: null,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Story with React JSX\nDESCRIPTION: Creates a Storybook story named 'bar' for the 'Foo' component. The story renders a simple div element with the text 'baz'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// eslint-disable-line\nstoriesOf('Foo', module)\n  .add('bar', () => <div>baz</div>);\n```\n\n----------------------------------------\n\nTITLE: Serving Storybook Build with pnpm and http-server\nDESCRIPTION: This command uses pnpm dlx to run http-server and serve the Storybook build directory. It requires pnpm to be installed and the Storybook build to be completed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preview-storybook-production-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx http-server ./path/to/build\n```\n\n----------------------------------------\n\nTITLE: Registering Vite Builder in Storybook Configuration\nDESCRIPTION: Configuration snippet to register the Vite builder in Storybook's main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Story-Specific Background Color\nDESCRIPTION: Example showing how to set a specific background color for an individual story using globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MyStory = {\n  parameters: {\n    backgrounds: {\n      default: 'red',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Test Runner with Custom URL\nDESCRIPTION: Demonstrates how to run the test runner against a deployed Storybook instance using environment variables.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nTARGET_URL=https://the-storybook-url-here.com yarn test-storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Stories with TypeScript\nDESCRIPTION: This snippet shows a generic way to set up story metadata using TypeScript. It can be adapted for different frameworks by replacing 'your-framework' with the specific framework being used. It sets tags for documentation and development visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Specific Vite Plugins for React\nDESCRIPTION: Demonstrates how to explicitly add the React-specific Vite plugin in the Vite configuration for Storybook 8.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in TypeScript 4.9+\nDESCRIPTION: Implements Button component stories using TypeScript 4.9+ syntax with satisfies operator. Provides type-safe story configuration with StoryObj type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-title.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  // Sets the name for the stories container\n  title: 'components/Button',\n  // The component name will be used if `title` is not set\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// The story variable name will be used if `name` is not set\nconst Primary: Story = {\n  // Sets the name for that particular story\n  name: 'Primary',\n  args: {\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Window Object for Component Tests in Storybook Vite\nDESCRIPTION: Adding a mock for the window object in preview-head.html to resolve issues with component tests when migrating from Webpack to Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  if (typeof window === 'undefined') {\n    global.window = {}\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Solid with JavaScript (CSF 2)\nDESCRIPTION: Creates a default button story for Solid components using JavaScript and CSF 2 format. The implementation spreads args as props to the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Other imports and story implementation\nexport const Default = (args) => <Button {...args} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring React Legacy Root API in Storybook\nDESCRIPTION: Shows how to opt out of the new React 18 root API and use the legacy root API in Storybook configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  reactOptions: { legacyRootApi: true },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Babel Configuration Types\nDESCRIPTION: TypeScript type definitions for the babelDefault configuration function, which takes a Babel config object and options parameter, returning either a Babel config or a Promise of one.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-babel-default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nType: `(config: Babel.Config, options: Options) => Babel.Config | Promise<Babel.Config>`\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Component with Angular Renderer in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Storybook configuration for an Angular component using TypeScript. It imports the Meta type from @storybook/angular and configures argTypes with options for an icon property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    icon: {\n      options: ['arrow-up', 'arrow-down', 'loading'],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Loading with Type Definition in Storybook\nDESCRIPTION: Type definition for the 'stories' configuration field in Storybook, showing it can accept an array of strings/StoriesSpecifier or an async function that returns such an array.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n| (string | StoriesSpecifier)[]\n| async (list: (string | StoriesSpecifier)[]) => (string | StoriesSpecifier)[]\n```\n\n----------------------------------------\n\nTITLE: Testing Navigation with Next.js Router Mock in JavaScript\nDESCRIPTION: A Storybook story in JavaScript that tests a form component's back navigation functionality using the getRouter mock. It simulates a user clicking a 'Go back' button and verifies that the router's back() method was called.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-mock.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getRouter } from '@storybook/nextjs/router.mock';\n\nimport MyForm from './my-form';\n\nexport default {\n  component: MyForm,\n};\n\nexport const GoBack = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n    const backBtn = await canvas.findByText('Go back');\n\n    await userEvent.click(backBtn);\n    // 👇 Assert that your component called back()\n    await expect(getRouter().back).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Page Stories with TypeScript for Common Renderers\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Page component using TypeScript. It's similar to the Angular version but uses a generic renderer type that can be replaced with specific framework types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the name of your renderer (e.g. react, vue3)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\n\nimport { Page } from './Page';\n\nconst meta: Meta<typeof Page> = {\n  component: Page,\n};\nexport default meta;\n\ntype Story = StoryObj<typeof Page>;\n\nexport const Default: Story = {\n  async beforeEach() {\n    // 👇 Set the return value for the getUserFromSession function\n    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in JavaScript\nDESCRIPTION: JavaScript configuration for Button component stories in Storybook. Sets up component metadata and documentation parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    docs: {\n      controls: { exclude: ['style'] },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Storybook Composed Button Story in Vue - JavaScript\nDESCRIPTION: This snippet provides a test for the 'Primary' composed Storybook story for a Button component using Vue 3 and JavaScript. Utilizing @testing-library/vue for UI testing and @storybook/vue3 for story composition, it ensures the button's text content is sourced directly from the story's args. The test is designed to avoid hard-coding values, with dependencies on @testing-library/vue and @storybook/vue3, and expects properly exported Button stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { render, screen } from '@testing-library/vue';\n\nimport { composeStories } from '@storybook/vue3';\n\nimport * as stories from './Button.stories';\n\nconst { Primary } = composeStories(stories);\n\ntest('reuses args from composed story', () => {\n  render(Primary());\n\n  const buttonElement = screen.getByRole('button');\n  // Testing against values coming from the story itself! No need for duplication\n  expect(buttonElement.textContent).toEqual(Primary.args.label);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in TypeScript for Common Renderers\nDESCRIPTION: Configures Storybook stories for a Button component using TypeScript syntax with explicit type annotation. Works with various renderers by replacing the import with the specific renderer being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  argTypes: {\n    // 👇 All Button stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Story with Satisfies Operator\nDESCRIPTION: Shows TypeScript 4.9+ story configuration using the satisfies operator for improved type safety. Includes framework-agnostic Meta type import.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Path/To/MyComponent',\n  component: MyComponent,\n  decorators: [/* ... */],\n  parameters: {/* ... */},\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Block Display State\nDESCRIPTION: Shows how to configure the default visibility state of code blocks in the documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  docs: {\n    canvas: {\n      sourceState: 'shown',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Svelte Component in TypeScript\nDESCRIPTION: Defines a Svelte component with TypeScript support, ensuring type-checking for user and document-related properties. The setup requires a Svelte environment configured for TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\">\n  import PageLayout from './PageLayout.svelte';\n  import DocumentHeader from './DocumentHeader.svelte';\n  import DocumentList from './DocumentList.svelte';\n\n  export let user: Record<string, unknown> = {};\n  export let document: Record<string, unknown> = {};\n  export let subdocuments: Record<string, unknown>[] = [];\n</script>\n\n<div>\n  <PageLayout {user}>\n    <DocumentHeader {document} />\n    <DocumentList documents=\"{subdocuments}\" />\n  </PageLayout>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Svelte-Vite with npm\nDESCRIPTION: Installs @storybook/svelte-vite as a development dependency using npm package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/svelte-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Background Values in JavaScript\nDESCRIPTION: Sets up background color options in Storybook using the values array syntax in JavaScript. This configuration defines two background color presets (Twitter blue and Facebook blue) that users can toggle between when viewing stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-migrate-backgrounds-globals.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'twitter', value: '#00aced' },\n        { name: 'facebook', value: '#3b5998' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: MDX Story Source Customization\nDESCRIPTION: Shows how to customize source snippets in MDX format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_143\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name=\"Example\" parameters={{ storySource: { source: \"custom source\" } }}>\n  <Button />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Preact-Vite Framework\nDESCRIPTION: Configuration code to set up Preact-Vite as the framework in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/preact-vite',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes in TypeScript 4.9+\nDESCRIPTION: TypeScript implementation with explicit typing for Preview and Renderer. Uses the same theme switching setup but adds type safety through TypeScript annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-jsx-provider-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preview, Renderer } from '@storybook/your-renderer';\nimport { withThemeFromJSXProvider } from '@storybook/addon-themes';\n\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from '../src/themes';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  }\n`;\n\nconst preview: Preview = {\n  decorators: [\n    withThemeFromJSXProvider<Renderer>({\n      themes: {\n        light: lightTheme,\n        dark: darkTheme,\n      },\n      defaultTheme: 'light',\n      Provider: ThemeProvider,\n      GlobalStyles,\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Styling Storybook Addon Layout with CSS\nDESCRIPTION: Defines CSS rules for styling the Storybook addon section, including text containers, images, and responsiveness for various screen sizes. No additional dependencies are required beyond standard CSS support. Key selectors target layouts for .sb-addon, .sb-addon-text, and .sb-addon-img, and media queries ensure that the layout adapts for tablet and mobile displays. Inputs are based on class selectors applied to HTML elements, and outputs are visual—defining padding, images, margins, and positioning for Storybook addon panels and their children.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/rendererAssets/common/Configure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  background: #EEF3F8;\n  height: 180px;\n  margin-bottom: 48px;\n  overflow: hidden;\n}\n\n.sb-addon-text {\n  padding-left: 48px;\n  max-width: 240px;\n}\n\n.sb-addon-text h4 {\n  padding-top: 0px;\n}\n\n.sb-addon-img {\n  position: absolute;\n  left: 345px;\n  top: 0;\n  height: 100%;\n  width: 200%;\n  overflow: hidden;\n}\n\n.sb-addon-img img {\n  width: 650px;\n  transform: rotate(-15deg);\n  margin-left: 40px;\n  margin-top: -72px;\n  box-shadow: 0 0 1px rgba(255, 255, 255, 0);\n  backface-visibility: hidden;\n}\n\n@media screen and (max-width: 800px) {\n  .sb-addon-img {\n    left: 300px;\n  }\n}\n\n@media screen and (max-width: 600px) {\n  .sb-section {\n    flex-direction: column;\n  }\n\n  .sb-features-grid {\n    grid-template-columns: repeat(1, 1fr);\n  }\n\n  .sb-socials {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .sb-addon {\n    height: 280px;\n    align-items: flex-start;\n    padding-top: 32px;\n    overflow: hidden;\n  }\n\n  .sb-addon-text {\n    padding-left: 24px;\n  }\n\n  .sb-addon-img {\n    right: 0;\n    left: 0;\n    top: 130px;\n    bottom: 0;\n    overflow: hidden;\n    height: auto;\n    width: 124%;\n  }\n\n  .sb-addon-img img {\n    width: 1200px;\n    transform: rotate(-12deg);\n    margin-left: 0;\n    margin-top: 48px;\n    margin-bottom: -40px;\n    margin-left: -24px;\n  }\n}\n  `}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Preact Component Story Configuration\nDESCRIPTION: Shows story configuration for Preact components with JSX support and render functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsx h */\nimport { h } from 'preact';\n\nimport { YourComponent } from './YourComponent';\n\n//👇 This default export determines where your story goes in the story list\nexport default {\n  component: YourComponent,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const FirstStory = {\n  render: (args) => <YourComponent {...args} />,\n  args: {\n    //👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation Components\nDESCRIPTION: Configures Meta component to reference AccountForm stories and displays the Standard story variant using Story component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/AccountForm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta of={AccountFormStories} />\n\n<Story of={AccountFormStories.Standard} />\n```\n\n----------------------------------------\n\nTITLE: Implementing ngx-translate Decorator for Storybook in Angular\nDESCRIPTION: This snippet demonstrates how to create a Storybook decorator that configures ngx-translate. It sets up the TranslateModule with HTTP loader and applies it to stories. The decorator can be used in preview.ts or individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/others/ngx-translate/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { moduleMetadata, applicationConfig } from '@storybook/angular';\n\nfunction createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, '/assets/i18n/', '.json');\n}\n\nconst TranslateModuleDecorator = (storyFunc, context) => {\n  const { locale } = context.globals;\n\n  return applicationConfig({\n    providers: [\n      importProvidersFrom(\n        HttpClientModule, \n        TranslateModule.forRoot({\n          defaultLanguage: locale,\n          loader: {\n            provide: TranslateLoader,\n            useFactory: createTranslateLoader,\n            deps: [HttpClient],\n          },\n        })\n      )\n    ]\n  })(storyFunc, context);\n};\n\n// for `preview.ts`\nexport const decorators = [\n  moduleMetadata({\n    imports: [TranslateModule],\n  }),\n  TranslateModuleDecorator,\n];\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in HTML with JavaScript\nDESCRIPTION: Shows how to create a List component story in plain HTML/JavaScript. The example imports ListItem stories and uses imperative DOM manipulation to build a list with multiple items.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createList } from './List';\nimport { createListItem } from './ListItem';\n\n// 👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nexport default {\n  title: 'List',\n};\n\nexport const ManyItems = {\n  render: (args) => {\n    const list = createList(args);\n    list.appendChild(createListItem(Selected.args));\n    list.appendChild(createListItem(Unselected.args));\n    list.appendChild(createListItem(Unselected.args));\n    return list;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Stories in React with TypeScript\nDESCRIPTION: Creates a ButtonGroup story in React using TypeScript. The story imports Button component stories and composes them into a ButtonGroup with horizontal orientation. Uses explicit type annotations for meta and Story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { ButtonGroup } from '../ButtonGroup';\n\n//👇 Imports the Button stories\nimport * as ButtonStories from './Button.stories';\n\nconst meta: Meta<typeof ButtonGroup> = {\n  component: ButtonGroup,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ButtonGroup>;\n\nexport const Pair: Story = {\n  args: {\n    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],\n    orientation: 'horizontal',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Setup with Addons in TypeScript\nDESCRIPTION: Imports 'StorybookConfig' type and exports a configuration object for Storybook. Specifies the framework name, story file patterns, and required addons like '@storybook/addon-a11y'. The placeholder '@storybook/your-framework' should be replaced with a specific framework name prior to deployment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-register.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-a11y', //👈 The a11y addon goes here\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: JavaScript configuration for Storybook's main.js file that specifies the framework, story file patterns, and disables telemetry. Users need to replace 'your-framework' with their actual framework name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-disable-telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableTelemetry: true, // 👈 Disables telemetry\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Svelte (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for the Page component in Svelte using the CSF format. Uses defineMeta from @storybook/addon-svelte-csf to create a story with a snippet that renders the Page with a custom footer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Page from './Page.svelte';\n\n  const { Story } = defineMeta({\n    component: Page\n  });\n</script>\n\n<Story name=\"CustomFooter\" args={{ footer: 'Built with Storybook' }}>\n  {#snippet children(args)}\n    <Page {...args} >\n      <footer>{args.footer}</footer>\n    </Page>\n  {/snippet}\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Default in Storybook Preset Addon\nDESCRIPTION: This snippet shows how to use the babelDefault API in a Storybook preset addon to customize Babel configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  babelDefault: (config) => {\n    return {\n      ...config,\n      plugins: [...config.plugins, require.resolve('@babel/plugin-transform-arrow-functions')],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Styled Components Theme Implementation\nDESCRIPTION: Examples of using theme variables with styled-components in object notation and template literals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/theming.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from '@storybook/theming';\n\nconst Button = styled.button({\n  borderRadius: 3,\n  border: '1px solid #eee',\n  background: props.theme.background.app,\n  color: props.theme.color.secondary,\n  display: 'inline-block',\n  padding: 15,\n  margin: 5,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from '@storybook/theming';\n\nconst Button = styled.button`\n  border-radius: ${props => props.theme.appBorderRadius}px;\n  border: 1px solid ${props => props.theme.appBorderColor};\n  background: ${props => props.theme.appBg};\n  color: ${props => props.theme.color.secondary};\n  display: inline-block;\n  padding: 15px;\n  margin: 5px;\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Agnostic Storybook Stories with TypeScript\nDESCRIPTION: Demonstrates how to create a framework-agnostic Storybook story file using standard TypeScript. Includes explicit Meta type annotation and typeof for component type inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Foo } from './Foo';\n\nconst meta: Meta<typeof Foo> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Foo/Bar',\n  component: Foo,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Foo>;\n\nexport const Baz: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories for Web Components in JavaScript\nDESCRIPTION: This snippet shows how to define Storybook stories for a Web Components Button using JavaScript. It specifies the component as 'demo-button' and defines two stories: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Stories from a Directory in Storybook\nDESCRIPTION: A simplified approach to story loading that specifies just a directory path, letting Storybook automatically find and load all story files within that directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js|ts\n\nexport default {\n  // Your Storybook configuration\n  stories: '../packages/MyStories',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization in Storybook Preview using JavaScript\nDESCRIPTION: Sets up internationalization in Storybook by defining locale options in the preview configuration. Creates a toolbar dropdown with language options including English, French, Spanish, Chinese, and Korean, with appropriate flag icons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-locales-globaltype.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst preview = {\n  globalTypes: {\n    locale: {\n      description: 'Internationalization locale',\n      toolbar: {\n        icon: 'globe',\n        items: [\n          { value: 'en', right: '🇺🇸', title: 'English' },\n          { value: 'fr', right: '🇫🇷', title: 'Français' },\n          { value: 'es', right: '🇪🇸', title: 'Español' },\n          { value: 'zh', right: '🇨🇳', title: '中文' },\n          { value: 'kr', right: '🇰🇷', title: '한국어' },\n        ],\n      },\n    },\n  },\n  initialGlobals: {\n    locale: 'en',\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in TypeScript\nDESCRIPTION: This snippet exports a configuration object for the Storybook Test Runner using TypeScript. It imports the TestRunnerConfig type, defines the configuration, and exports it as the default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-include.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  tags: {\n    include: ['test-only'],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Conditional ArgType Rendering\nDESCRIPTION: Demonstrates how to conditionally render an argType based on other arg values or globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  argTypes: {\n    borderWidth: {\n      if: { arg: 'variant', eq: 'solid' }\n    },\n    borderStyle: {\n      if: { global: 'theme', neq: 'default' }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct CSF Default Export in JavaScript\nDESCRIPTION: An example of a CSF default export that correctly includes the component property, adhering to the csf-component rule. This enables various Storybook features like automatic prop table documentation and auto-generated controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/csf-component.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in JavaScript\nDESCRIPTION: This code snippet exports a configuration object for the Storybook Test Runner. It sets up a 'skip' tag to exclude certain tests from running.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-skip.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tags: {\n    skip: ['skip-test'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Button Story in Storybook (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript configuration for a basic Storybook story. It imports the `ButtonComponent` and uses a default export for the metadata object, which includes the `title` and the `component` itself. A simple named export `Button` represents the default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { Button as ButtonComponent } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: ButtonComponent,\n};\n\n// This is the only named export in the file, and it matches the component name\nexport const Button = {};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Test-Runner Workers in package.json\nDESCRIPTION: Shows how to limit the number of parallel workers for the test-runner to avoid timeouts in CI environments or with large numbers of stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test-storybook:ci\": \"yarn test-storybook --maxWorkers=2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Styles in Storybook Info Addon\nDESCRIPTION: Shows two different approaches to customizing the styles of the Info addon: using a style object to directly modify styles, and using a function that has access to the existing stylesheet for more complex modifications.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Options.styles', module)\n  .add(\n    'Extend info styles with an object',\n    withInfo({\n      styles: {\n        button: {\n          base: {\n            background: 'purple',\n          },\n        },\n        header: {\n          h1: {\n            color: 'green',\n          },\n        },\n      },\n    })(() => <BaseButton label=\"Button\" />)\n  )\n  .add(\n    'Full control over styles using a function',\n    withInfo({\n      styles: stylesheet => ({\n        ...stylesheet,\n        header: {\n          ...stylesheet.header,\n          h1: {\n            ...stylesheet.header.h1,\n            color: 'red',\n          },\n        },\n      }),\n    })(() => <BaseButton label=\"Button\" />)\n  );\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vue 3 Vite with Yarn\nDESCRIPTION: Installs @storybook/vue3-vite package as a development dependency using Yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/vue3-vite\n```\n\n----------------------------------------\n\nTITLE: Fixing Static Directory Configuration in Storybook Core\nDESCRIPTION: Addresses an issue where multiple static directories targeting the same destination were not handled correctly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your Storybook main.js\nmodule.exports = {\n  staticDirs: [\n    { from: '../public', to: '/' },\n    { from: '../assets', to: '/' }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Button Stories with TypeScript\nDESCRIPTION: Storybook stories for a Vue 3 Button component using standard TypeScript. Defines three button variants with custom render functions and emoji labels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    backgroundColor: '#ff0',\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    ...Primary.args,\n    label: '😄👍😍💯',\n  },\n};\n\nexport const Tertiary: Story = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    ...Primary.args,\n    label: '📚📕📈🤓',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Stories with composeStories in Storybook Tests\nDESCRIPTION: This snippet demonstrates how to use composeStories to import and compose multiple stories from a stories file for testing. It allows adding decorators, overriding global types, and parameters for all composed stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/override-compose-story-test.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nimport * as stories from './LoginForm.stories';\n\nconst { ValidForm } = composeStories(stories, {\n  decorators: [\n    // Decorators defined here will be added to all composed stories from this function\n  ],\n  globalTypes: {\n    // Override globals for all composed stories from this function\n  },\n  parameters: {\n    // Override parameters for all composed stories from this function\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Framework Options\nDESCRIPTION: Example of configuring additional options for the Preact-Vite framework in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/preact-vite',\n    options: {\n      builder: {\n        // Vite builder options\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Stories with Lit\nDESCRIPTION: Implementation of Button stories using web components and Lit HTML templating. Defines two variants and a combination view with specific visibility tags.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport const Variant1 = {\n  // 👇 This story will not appear in Storybook's sidebar or docs page\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 1 },\n};\n\nexport const Variant2 = {\n  // 👇 This story will not appear in Storybook's sidebar or docs page\n  tags: ['!dev', '!autodocs'],\n  args: { variant: 2 },\n};\n\nexport const Combo = {\n  // 👇 This story should not be tested, but will appear in the sidebar and docs page\n  tags: ['!test'],\n  render: () => html`\n    <div>\n      <demo-button variant=\"1\" />\n      <demo-button variant=\"2\" />\n    </div>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Component in Storybook Addon\nDESCRIPTION: A React component that creates a tab interface for the addon. Uses useParameter hook to access addon parameters. Conditionally renders a TabContent component based on the active state and displays parameter data.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolkit-types.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nimport { useParameter } from 'storybook/manager-api';\n\nimport { PARAM_KEY } from './constants';\n\n// See https://github.com/storybookjs/addon-kit/blob/main/src/components/TabContent.tsx for an example of a TabContent component\nimport { TabContent } from './components/TabContent';\n\ninterface TabProps {\n  active: boolean;\n}\n\nexport const Tab: React.FC<TabProps> = ({ active }) => {\n  // https://storybook.js.org/docs/addons/addons-api#useparameter\n  const paramData = useParameter<string>(PARAM_KEY, '');\n\n  return active ? <TabContent code={paramData} /> : null;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook SvelteKit with npm\nDESCRIPTION: Command to install @storybook/sveltekit package as a dev dependency using npm package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Registering a Storybook Addon\nDESCRIPTION: This code imports the addons API from Storybook and registers a new addon with a unique organization-namespaced identifier. The empty callback function would typically contain the addon's implementation logic.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-register.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from 'storybook/preview-api';\n\n// Register the addon with a unique name.\naddons.register('my-organisation/my-addon', (api) => {});\n```\n\n----------------------------------------\n\nTITLE: Setting Local IFrame Height for a Story\nDESCRIPTION: Example of setting the iframe height for a specific story in JavaScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const basic = () => ...\nbasic.parameters = {\n  docs: { story: { iframeHeight: '400px' } }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest Coverage with Yarn\nDESCRIPTION: Commands to install Vitest coverage packages using Yarn package manager. Shows installation for both v8 and istanbul coverage providers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-install-coverage-support-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# For v8\nyarn add --dev @vitest/coverage-v8\n\n# For istanbul\nyarn add --dev @vitest/coverage-istanbul\n```\n\n----------------------------------------\n\nTITLE: Ejecting Test Storybook Configuration with yarn\nDESCRIPTION: This command uses yarn to run the test-storybook script with the --eject flag, enabling ejection of the Storybook test configuration for further customization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-eject-config.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn test-storybook --eject\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Favicon to Storybook Manager (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add a custom favicon to the Storybook manager interface using TypeScript. It imports the StorybookConfig type and defines the managerHead configuration to include a link tag for the favicon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-custom-manager-head.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  managerHead: (head) => `\n    ${head}\n    <link rel=\"icon\" type=\"image/png\" href=\"/logo192.png\" sizes=\"192x192\" />\n  `,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories for Web Components with TypeScript\nDESCRIPTION: This snippet demonstrates how to define Storybook stories for a Web Components Button using TypeScript. It imports types from Storybook and defines stories for primary and secondary button variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Combo Stories with Individual Testing (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a combo story for visual comparison while still allowing individual variant testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Red = { args: { color: 'red' } };\nexport const Green = { args: { color: 'green' } };\nexport const Blue = { args: { color: 'blue' } };\n\nexport const Palette = {\n  render: () => (\n    <>\n      <Red />\n      <Green />\n      <Blue />\n    </>\n  ),\n  tags: ['!test'],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Red: StoryObj<typeof Button> = { args: { color: 'red' } };\nexport const Green: StoryObj<typeof Button> = { args: { color: 'green' } };\nexport const Blue: StoryObj<typeof Button> = { args: { color: 'blue' } };\n\nexport const Palette: StoryObj<typeof Button> = {\n  render: () => (\n    <>\n      <Red />\n      <Green />\n      <Blue />\n    </>\n  ),\n  tags: ['!test'],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Pseudo State for a Story in Storybook\nDESCRIPTION: Example of how to set a default pseudo state (hover) for a Button component story using the parameters object. This enables snapshot testing of pseudo states in Chromatic.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/pseudo-states/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Hover = () => <Button>Label</Button>\nHover.parameters = { pseudo: { hover: true } }\n```\n\n----------------------------------------\n\nTITLE: Adding SVGR Support to Storybook with Next.js Framework\nDESCRIPTION: Example of extending Storybook's Webpack configuration to add SVGR support, allowing the import of SVG files as React components. This is done in the Storybook main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_22\n\nLANGUAGE: jsonc\nCODE:\n```\n// .storybook/main.js|ts\nexport default {\n  // other settings...\n  webpackFinal: async (config) => {\n    // Find the rule for SVG files that already exists in Storybook's webpack config\n    const svgRule = config.module.rules.find((rule) =>\n      rule.test?.test?.('.svg'),\n    );\n\n    // Change the test regex to exclude SVG files\n    svgRule.test = /\\.(ico|jpg|jpeg|png|apng|gif|eot|otf|webp|ttf|woff|woff2|cur|ani|pdf)(\\?.*)?$/;\n\n    // Add a new rule specifically for SVG files\n    config.module.rules.push({\n      test: /\\.svg$/,\n      use: ['@svgr/webpack', 'url-loader'],\n    });\n\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Modern Svelte Story Format\nDESCRIPTION: Updated implementation using the new defineMeta approach from @storybook/addon-svelte-csf. Demonstrates a more streamlined way to define stories with direct component nesting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-story-custom-children.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import OuterComponent from './OuterComponent.svelte';\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n\n</script>\n\n<Story name=\"Default\">\n  <OuterComponent>\n    <MyComponent />\n  </OuterComponent>\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components List Stories in JavaScript\nDESCRIPTION: Creates a Storybook story for a Web Components List component using JavaScript. It imports the html template tag from lit and defines an Empty list story with a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  component: 'demo-list',\n};\n\n// Always an empty list, not super interesting\nexport const Empty = {\n  render: () => html`<demo-list></demo-list>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Entries in Storybook Main.js\nDESCRIPTION: This code snippet exports the main Storybook configuration object, specifically setting up manager entries. The configuration registers an addon's entry point script that will be loaded by the Storybook manager UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-use-manager-entries.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  managerEntries: ['some-storybook-addon/entry-point.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Solid Button Story - Storybook (TypeScript, type-satisfies)\nDESCRIPTION: This TypeScript (with 'satisfies' support) snippet sets up Storybook story registration for a Solid Button component with type safety using Meta from 'storybook-solidjs'. It requires the Button component and the Meta type, leveraging TypeScript 4.9's 'satisfies'. The output is a meta configuration suitable for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_7\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta } from 'storybook-solidjs';\\n\\nimport { Button } from './Button';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Background Options with Globals API in TypeScript\nDESCRIPTION: Sets up background color options in Storybook using the globals API options object syntax in TypeScript with proper typing. This approach uses named keys for background options while maintaining type safety through the Preview interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-migrate-backgrounds-globals.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  parameters: {\n    backgrounds: {\n      options: {\n        twitter: { name: 'twitter', value: '#00aced' },\n        facebook: { name: 'facebook', value: '#3b5998' },\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook in an Ember Application\nDESCRIPTION: This snippet shows how to initialize Storybook in an existing Ember application using npx.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/ember/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd my-ember-app\nnpx storybook@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring vue-component-meta in Storybook\nDESCRIPTION: Shows how to configure vue-component-meta in the Storybook main configuration file. This enables enhanced documentation features for Vue components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/vue3-vite';\n\nconst config: StorybookConfig = {\n  framework: {\n    name: '@storybook/vue3-vite',\n    options: {\n      docgen: 'vue-component-meta',\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Customizing Styled JSX with Babel Configuration\nDESCRIPTION: Configuration example showing how to customize the styled-jsx implementation in Next.js using a Babel configuration file. This example adds Sass support to styled-jsx through a plugin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_15\n\nLANGUAGE: jsonc\nCODE:\n```\n// .babelrc (or whatever config file you use)\n{\n  \"presets\": [\n    [\n      \"next/babel\",\n      {\n        \"styled-jsx\": {\n          \"plugins\": [\"@styled-jsx/plugin-sass\"]\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Storybook Composition from Package Dependencies\nDESCRIPTION: Example demonstrating how to disable automatic Storybook composition for specific package dependencies by setting the 'disable' property to true.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-refs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  refs: {\n    'package-name': { disable: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Image Snapshots in JavaScript\nDESCRIPTION: This snippet configures the Storybook test runner to perform image snapshot testing. It sets up the test environment, waits for the page to be ready, takes a screenshot, and compares it to a stored snapshot.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-waitpageready.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { waitForPageReady } = require('@storybook/test-runner');\n\nconst { toMatchImageSnapshot } = require('jest-image-snapshot');\n\nconst customSnapshotsDir = `${process.cwd()}/__snapshots__`;\n\nmodule.exports = {\n  setup() {\n    expect.extend({ toMatchImageSnapshot });\n  },\n  async postVisit(page, context) {\n    // Awaits for the page to be loaded and available including assets (e.g., fonts)\n    await waitForPageReady(page);\n\n    // Generates a snapshot file based on the story identifier\n    const image = await page.screenshot();\n    expect(image).toMatchImageSnapshot({\n      customSnapshotsDir,\n      customSnapshotIdentifier: context.id,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Angular Storybook\nDESCRIPTION: This snippet defines a story for 'MyComponent' in an Angular project using Storybook, where automatic accessibility (a11y) checks are disabled by setting 'manual' to true. It requires '@storybook/angular' and the component itself as dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const NonA11yStory: Story = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Crash Reports in Storybook Configuration\nDESCRIPTION: Shows how to enable crash reporting by setting the enableCrashReports configuration option to true in the Storybook main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ... your Storybook configuration\n  enableCrashReports: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Aliasing in Storybook\nDESCRIPTION: Example of using viteFinal to configure path aliasing in Vite for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mergeConfig } from 'vite';\nimport path from 'path';\n\nexport default {\n  async viteFinal(config) {\n    return mergeConfig(config, {\n      resolve: {\n        alias: [{ find: '@', replacement: path.resolve(__dirname, '../src') }],\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Form via Storybook Story in Vue with TypeScript\nDESCRIPTION: This snippet provides a TypeScript-based unit test for validating Vue form components utilizing composeStory from '@storybook/vue3' and Testing Library for Vue. After running the story, it simulates a user clicking the submit button and checks that the 'invalid-form' element is not present in the rendered DOM. The test presumes Storybook and Vue's Testing Library are properly configured with TypeScript support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/vue';\\n\\nimport { composeStory } from '@storybook/vue3';\\n\\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\\n\\nconst ValidForm = composeStory(ValidFormStory, Meta);\\n\\ntest('Validates form', async () => {\\n  await ValidForm.run();\\n\\n  const buttonElement = screen.getByRole('button', {\\n    name: 'Submit',\\n  });\\n\\n  fireEvent.click(buttonElement);\\n\\n  const isFormValid = screen.getByLabelText('invalid-form');\\n  expect(isFormValid).not.toBeInTheDocument();\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in Solid with TypeScript\nDESCRIPTION: Implementation of Storybook stories for a List component in SolidJS using standard TypeScript. It shows how to set up typed stories with component composition and reusable templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\nimport { ListItem } from './ListItem';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  /* 👇 The title prop is optional.\n   * Seehttps://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nconst ListTemplate: Story = {\n  render: ({ items, ...args }) => {\n    return (\n      <List>\n        {items.map((item) => (\n          <ListItem {...item} />\n        ))}\n      </List>\n    );\n  },\n};\n\nexport const Empty = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\n\nexport const OneItem = {\n  ...ListTemplate,\n  args: {\n    items: [{ ...Unchecked.args }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Palette in Storybook Stories (JavaScript/JSX)\nDESCRIPTION: A JavaScript implementation of a Storybook story that attempts to display a color palette for a component theme. Contains a warning not to use Doc Blocks directly inside stories as it will break Storybook with cryptic errors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-canvas-doc-block-story.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorItem, ColorPalette } from '@storybook/addon-docs/blocks';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nconst theme = {\n  colors: {\n    primaryDark: {\n      value: '#1C1C1C',\n    },\n    primaryRegular: {\n      value: '#363636',\n    },\n    primaryLight1: {\n      value: '#4D4D4D',\n    },\n    primaryLight2: {\n      value: '#878787',\n    },\n    primaryLight3: {\n      value: '#D1D1D1',\n    },\n    primaryLight4: {\n      value: '#EDEDED',\n    },\n  },\n};\n\n// ❌ Don't use the Doc Blocks inside your stories. It will break Storybook with a cryptic error.\nexport const Colors = {\n  render: () => (\n    <ColorPalette>\n      {Object.entries(theme.colors).map(([key, { value }]) => (\n        <ColorItem\n          colors={{\n            [key]: value,\n          }}\n          key={key}\n          subtitle={`theme.colors.${key}`}\n          title={key}\n        />\n      ))}\n    </ColorPalette>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom StoryName Block with useOf in React\nDESCRIPTION: This snippet demonstrates how to create a custom StoryName block using the useOf hook. It renders the story name or title based on the type of reference passed to it.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-useof.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useOf } from '@storybook/addon-docs/blocks';\n\n/**\n * A block that displays the story name or title from the of prop\n * - if a story reference is passed, it renders the story name\n * - if a meta reference is passed, it renders the stories' title\n * - if nothing is passed, it defaults to the primary story\n */\nexport const StoryName = ({ of }) => {\n  const resolvedOf = useOf(of || 'story', ['story', 'meta']);\n  switch (resolvedOf.type) {\n    case 'story': {\n      return <h1>{resolvedOf.story.name}</h1>;\n    }\n    case 'meta': {\n      return <h1>{resolvedOf.preparedMeta.title}</h1>;\n    }\n  }\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Parameters in JavaScript/TypeScript\nDESCRIPTION: Example of specifying parameters at the meta (component) level in a Storybook CSF file. These parameters apply to all stories in the file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: Button,\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Decorating Web Components Storybook - JavaScript\nDESCRIPTION: Defines a Storybook story for a web component in JavaScript, with a decorator that highlights HTML elements using the Storybook Preview API. It relies on 'storybook/preview-api' and 'storybook/highlight'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight-addon.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nexport default {\n  component: 'my-component',\n};\n\nexport const Highlighted = {\n  decorators: [\n    (story) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n      });\n      return story();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Exact Version in package.json for Storybook\nDESCRIPTION: This snippet demonstrates how to pin a specific version of a library in package.json. It shows 'example-library' being pinned to version 3.4.6 due to a bug in version 3.5.x that affects functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/RESOLUTIONS.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nexample-library@3.4.6 (bug: 3.5.x): Pinned as there is a bug in version 3.5.x that prevents foo from doing bar.\n```\n\n----------------------------------------\n\nTITLE: Defining Vue List Stories in TypeScript with type annotation\nDESCRIPTION: Configures a Storybook story for a Vue List component using TypeScript with explicit type annotation. It includes type definitions and an Empty list story with a render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './ListComponent.vue';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\n// Always an empty list, not super interesting\nexport const Empty: Story = {\n  render: () => ({\n    components: { List },\n    template: '<List/>',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Decorators in Storybook 7.0\nDESCRIPTION: This snippet demonstrates how to create custom decorators in Storybook 7.0 using the new @storybook/preview-api package instead of the deprecated @storybook/addons package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, makeDecorator } from \"@storybook/preview-api\";\n\nexport const withMyAddon = makeDecorator({\n  name: \"withMyAddon\",\n  parameterName: \"myAddon\",\n  wrapper: (getStory) => {\n    useEffect(() => {\n      // do something with the options\n    }, []);\n    return getStory(context);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Meta in Svelte using Storybook CSF\nDESCRIPTION: This Svelte snippet uses defineMeta to set up metadata for a Button component with arrow icon argTypes in Storybook CSF format. It defines serializable options and maps them to corresponding complex values. Dependencies include Storybook's Svelte CSF addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\n  const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\n  const { Story } = defineMeta({\n    component: Button,\n    argTypes: {\n      arrow: {\n        options: Object.keys(arrows), // An array of serializable values\n        mapping: arrows, // Maps serializable option values to complex arg values\n        control: {\n          type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n          labels: {\n            // 'labels' maps option values to string labels\n            ArrowUp: 'Up',\n            ArrowDown: 'Down',\n            ArrowLeft: 'Left',\n            ArrowRight: 'Right',\n          },\n        },\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Global IFrame Height in preview.ts\nDESCRIPTION: TypeScript configuration to set the default iframe height for all stories in the Storybook preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const parameters = { docs: { story: { iframeHeight: '400px' } } };\n```\n\n----------------------------------------\n\nTITLE: Simplifying Storybook's Webpack Configuration\nDESCRIPTION: Example of how to simplify Storybook's webpack configuration by carefully preserving critical plugins while appending custom ones.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpackFinal: async (config, { configType }) => {\n    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'\n    // You can change the configuration based on that.\n    // 'PRODUCTION' is used when building the static version of storybook.\n\n    // Find the plugin\n    const htmlWebpackPluginIndex = config.plugins.findIndex(\n      (plugin) => plugin.constructor.name === 'HtmlWebpackPlugin'\n    );\n\n    // Get a reference to the plugin\n    const htmlWebpackPlugin = config.plugins[htmlWebpackPluginIndex];\n\n    // Replace the plugins\n    config.plugins = [\n      // Add the plugins you want to keep\n      htmlWebpackPlugin,\n      // Add any new plugins\n      new MyPlugin(),\n    ];\n\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Base Font Size in Preview Body\nDESCRIPTION: Example of setting the base font size in the preview iframe's body for relative sizing units like rem or em.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-rendering.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  html {\n    font-size: 10px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component\nDESCRIPTION: Sets up the Storybook Meta component to define the title for the configuration section in the Storybook interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/js/Configure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta title=\"Configure your project\" />\n```\n\n----------------------------------------\n\nTITLE: MSW REST API Mocking Stories\nDESCRIPTION: Example stories that demonstrate mocking REST API requests using MSW, including success and error scenarios.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rest } from 'msw';\n\nexport default {\n  component: DocumentScreen,\n};\n\nexport const Success = {\n  parameters: {\n    msw: {\n      handlers: [\n        rest.get('/document', (req, res, ctx) => {\n          return res(ctx.json({\n            title: 'Document title',\n            content: 'Document content',\n          }));\n        }),\n      ],\n    },\n  },\n};\n\nexport const Error = {\n  parameters: {\n    msw: {\n      handlers: [\n        rest.get('/document', (req, res, ctx) => {\n          return res(ctx.status(500));\n        }),\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addons in main.js\nDESCRIPTION: Configuration to add the Storybook Docs addon to the Storybook instance by updating the main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-docs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Svelte using Svelte CSF\nDESCRIPTION: This snippet shows how to create Storybook stories for a Svelte Checkbox component using Svelte CSF. It uses the 'defineMeta' function to set up the component and defines an 'Unchecked' story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Checkbox from './Checkbox.svelte';\n\n  const { Story } = defineMeta({\n    component: Checkbox,\n  });\n</script>\n\n<Story\n  name=\"Unchecked\"\n  args={{\n    label: 'Unchecked',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Global Args in Preview\nDESCRIPTION: Example of setting global args in the preview configuration that apply to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  args: {\n    theme: 'dark',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Story File Format With Default Export\nDESCRIPTION: Example showing correct story file format that follows the rule by including both a default export for component metadata and a named export for the story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/default-exports.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  args: { primary: true },\n  component: Button,\n};\nexport const Primary = {};\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook with NPM\nDESCRIPTION: Command to start the Storybook development server using NPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-run-dev-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: NativeWind Configuration Example\nDESCRIPTION: Example configuration for integrating NativeWind with Storybook React Native Web.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst main: StorybookConfig = {\n  framework: {\n    name: \"@storybook/react-native-web-vite\",\n    options: {\n      pluginReactOptions: {\n        jsxImportSource: \"nativewind\",\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands for Sharp\nDESCRIPTION: Commands for installing the sharp package using different package managers, required for Next.js image optimization\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sharp\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sharp\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add sharp\n```\n\n----------------------------------------\n\nTITLE: Configuring throwPlayFunctionExceptions Parameter in Storybook Core\nDESCRIPTION: Adds a new parameter 'throwPlayFunctionExceptions' to control exception handling in play functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your Storybook configuration\nexport const parameters = {\n  throwPlayFunctionExceptions: true\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Web Components Vite package with npm\nDESCRIPTION: This command installs the @storybook/web-components-vite package as a dev dependency using npm. It's used to set up Storybook for Web Components projects that use Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/web-components-vite\n```\n\n----------------------------------------\n\nTITLE: Defining Props with JSDoc Comments in Vue Component\nDESCRIPTION: Illustrates how to define props with JSDoc comments in a Vue component for better documentation in Storybook controls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  interface MyComponentProps {\n    /** The name of the user */\n    name: string;\n    /**\n      * The category of the component\n      *\n      * @since 8.0.0\n      */\n    category?: string;\n  }\n\n  withDefaults(defineProps<MyComponentProps>(), {\n    category: 'Uncategorized',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Web Components (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for a custom Page component using Web Components and Lit. It renders a demo-page element with a footer that displays content from the footer arg.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  title: 'Page',\n  component: 'demo-page',\n  render: ({ footer }) => html`\n    <demo-page>\n      <footer>${footer}</footer>\n    </demo-page>\n  `,\n};\n\nexport const CustomFooter = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Docs Configuration Types in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for configuring Storybook's auto-generated documentation. It includes options for enabling autodocs, setting the default documentation name, and enabling docs-only mode.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-docs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  autodocs?: boolean | 'tag';\n  defaultName?: string;\n  docsMode?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It sets up the framework and SWC compiler options, specifically enabling automatic runtime for React transforms.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc-jsx-transform.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/your-framework',\n    options: {},\n  },\n  swc: (config, options) => ({\n    jsc: {\n      transform: {\n        react: {\n          runtime: 'automatic',\n        },\n      },\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic JavaScript Stories\nDESCRIPTION: JavaScript configuration for component stories using the Common Story Format (CSF).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { YourComponent } from './YourComponent';\n\nexport default {\n  component: YourComponent,\n  parameters: { controls: { sort: 'requiredFirst' } },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Custom Loader in JavaScript\nDESCRIPTION: Demonstrates how to extend Webpack configuration in a Storybook addon using JavaScript. Adds a custom file loader for handling specific file extensions while preserving existing rules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-webpackFinal.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function webpackFinal(config, options = {}) {\n  const rules = [\n    ...(config.module?.rules || []),\n    {\n      test: /\\.custom-file-extension$/,\n      loader: require.resolve(`custom-loader`),\n    },\n  ];\n  config.module.rules = rules;\n\n  return config;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interceptable Functions in JavaScript\nDESCRIPTION: An example of an intercept function that determines which methods should be interceptable based on their name and path.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(method, path) => path[0] === 'fireEvent' || method.startsWith('findBy') || method.startsWith('waitFor'),\n```\n\n----------------------------------------\n\nTITLE: Removing Onboarding Addon from Storybook Configuration\nDESCRIPTION: Code diff showing how to remove the onboarding addon from the Storybook configuration file (.storybook/main.js).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/onboarding/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  stories: [\n    \"../stories/**/*.stories.mdx\",\n    \"../stories/**/*.stories.@(js|jsx|ts|tsx)\",\n  ],\n  addons: [\n-   \"@storybook/addon-onboarding\"\n  ],\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using Module Aliases in Next.js Components\nDESCRIPTION: Example of using module aliases in a Next.js component, which is supported in Storybook with the Next.js framework. Shows importing a component and CSS module using the '@/' prefix.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\n// All good!\nimport Button from '@/components/button';\n// Also good!\nimport styles from '@/styles/HomePage.module.css';\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1 className={styles.title}>Hello World</h1>\n      <Button />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite Builder in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring Storybook in `.storybook/main.ts` using the `StorybookConfig` type for enhanced type safety (imported from the specific framework package). It sets the framework (placeholder `@storybook/your-framework`), defines story file locations (`*.mdx`, `*.stories.*`), and configures the Vite builder (`@storybook/builder-vite`) with a path to a custom Vite config file (`../../../vite.config.js`). Requires the Storybook framework package, `@storybook/builder-vite`, and TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-builder.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  framework: '@storybook/your-framework',\n  core: {\n    builder: {\n      name: '@storybook/builder-vite',\n      options: {\n        viteConfigPath: '../../../vite.config.js',\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript 4.9+\nDESCRIPTION: TypeScript configuration using satisfies operator for type checking. Template for framework-specific Button component story configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  parameters: {\n    docs: {\n      controls: { exclude: ['style'] },\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Legacy Svelte Storybook Story Implementation\nDESCRIPTION: Shows the original way of defining Storybook stories for Svelte components using direct Meta and Story imports from @storybook/addon-svelte-csf.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-story-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Meta, Story } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n</script>\n\n\n<Meta title=\"MyComponent\" component={MyComponent} />\n\n<Story name=\"Default\" />\n```\n\n----------------------------------------\n\nTITLE: Building Storybook with yarn\nDESCRIPTION: This command uses yarn to run the build-storybook script, which builds Storybook for the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/build-storybook-production-mode.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nyarn build-storybook\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook for Web Components & Vite\nDESCRIPTION: Command to install Storybook in a Web Components project using Vite. This snippet initializes Storybook and sets up the necessary configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest init\n```\n\n----------------------------------------\n\nTITLE: Cloning Storybook Repository in Shell\nDESCRIPTION: Commands to fork and clone the Storybook monorepo locally. This is the first step in setting up the development environment for contributing to Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/your-username/storybook.git\ncd storybook\n```\n\n----------------------------------------\n\nTITLE: Adding a11y Addon with Yarn using dlx\nDESCRIPTION: This shell command uses `yarn dlx` (Yarn's equivalent to npx) to execute the Storybook CLI `add` command. It installs and configures the `@storybook/addon-a11y` addon for a Storybook project managed with Yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-add-command.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@latest add @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Theme in Storybook Manager\nDESCRIPTION: Configures the Storybook manager UI to use the dark theme by importing required dependencies and setting the theme configuration using addons.setConfig(). This setup affects the manager UI's appearance globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-dark-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from 'storybook/manager-api';\nimport { themes } from 'storybook/theming';\n\naddons.setConfig({\n  theme: themes.dark,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Web Components using JavaScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Web Components Checkbox element using JavaScript. It defines a default export with a title and component, and an 'Unchecked' story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Checkbox',\n  component: 'checkbox',\n};\n\nexport const Unchecked = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Docs-Only Stories (JavaScript/TypeScript)\nDESCRIPTION: This example shows how to create stories that only appear in the docs page by enabling the 'autodocs' tag and removing the 'dev' tag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: MyComponent,\n  tags: ['autodocs', '!dev'],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  component: MyComponent,\n  tags: ['autodocs', '!dev'] as string[],\n} satisfies Meta<typeof MyComponent>;\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default iFrame Height in Preview.js\nDESCRIPTION: TypeScript configuration to update the default iframe height for all stories in the preview.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport const parameters = { docs: { story: { iframeHeight: '400px' } } };\n```\n\n----------------------------------------\n\nTITLE: LinkTo Function Usage Examples\nDESCRIPTION: Different ways to use the linkTo function for story navigation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { linkTo } from '@storybook/addon-links';\n\nlinkTo('Toggle', 'off');\nlinkTo(\n  () => 'Toggle',\n  () => 'off'\n);\nlinkTo('Toggle'); // Links to the first story in the 'Toggle' kind\n```\n\n----------------------------------------\n\nTITLE: React Component Story Implementation\nDESCRIPTION: Implementation examples of Storybook stories for React components in both JavaScript and TypeScript, showing different type annotation approaches.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\n// Assume image.png is located in the \"public\" directory.\nexport const WithAnImage = {\n  render: () => <img src=\"/image.png\" alt=\"my image\" />,\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Assume image.png is located in the \"public\" directory.\nexport const WithAnImage: Story = {\n  render: () => <img src=\"/image.png\" alt=\"my image\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook Angular Builder Style Configuration\nDESCRIPTION: Configuration for Storybook-specific styles using the Angular builder pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_121\n\nLANGUAGE: json\nCODE:\n```\n      \"storybook\": {\n        \"builder\": \"@storybook/angular:start-storybook\",\n        \"options\": {\n          \"browserTarget\": \"my-default-project:build\",\n          \"styles\": [\".storybook/custom-styles.scss\"],\n        },\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining NoteUI Stories for Web Components in TypeScript\nDESCRIPTION: This snippet defines Storybook stories for the NoteUI web component using TypeScript. It includes imports, meta configuration, and a 'Save Flow' story that tests the save functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { expect, userEvent, within } from 'storybook/test';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { saveNote } from '#app/actions.mock';\nimport { createNotes } from '#mocks/notes';\n\nconst meta: Meta = {\n  title: 'Mocked/NoteUI',\n  component: 'note-ui',\n};\nexport default meta;\n\ntype Story = StoryObj;\n\nconst notes = createNotes();\n\nexport const SaveFlow: Story = {\n  name: 'Save Flow ▶',\n  args: {\n    isEditing: true,\n    note: notes[0],\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    const saveButton = canvas.getByRole('menuitem', { name: /done/i });\n    await userEvent.click(saveButton);\n    // 👇 This is the mock function, so you can assert its behavior\n    await expect(saveNote).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Svelte using CSF in JavaScript\nDESCRIPTION: This snippet shows how to create stories for a Svelte Button component using Component Story Format (CSF) in JavaScript. It sets up the component metadata, defines parameters, and exports a basic story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'this data is passed to the addon',\n    },\n  },\n};\n\nexport const Basic = {};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Project Annotations for React\nDESCRIPTION: This code snippet demonstrates how to set up Storybook project annotations for a React project using Vitest. It imports necessary modules, sets project annotations, and runs Storybook's beforeAll hook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n// 👇 If you're using Next.js, import from @storybook/nextjs\n//   If you're using Next.js with Vite, import from @storybook/experimental-nextjs-vite\nimport { setProjectAnnotations } from '@storybook/react';\n// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this\nimport * as addonAnnotations from 'my-addon/preview';\nimport * as previewAnnotations from './.storybook/preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n\n// Run Storybook's beforeAll hook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Aliases for @storybook/nextjs in Next.js\nDESCRIPTION: Sets up module name mapper aliases in Jest configuration to properly mock Next.js APIs when using @storybook/nextjs for portable stories in Jest tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextJest = require(\"next/jest.js\");\nconst { getPackageAliases } = require(\"@storybook/nextjs/export-mocks\");\nconst createJestConfig = nextJest();\nconst customJestConfig = {\n  moduleNameMapper: {\n    ...getPackageAliases(), // Add aliases for @storybook/nextjs mocks\n  },\n};\nmodule.exports = createJestConfig(customJestConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Webpack and GraphQL (JavaScript)\nDESCRIPTION: JavaScript configuration for Storybook using Webpack bundler with GraphQL support. Sets up loaders for .graphql and .gql files with different handling for emails and schema directories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/webpack-final-to-vite-final.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, nextjs, angular)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async webpackFinal(config) {\n    config.module?.rules?.push({\n      test: /\\.(graphql|gql)$/,\n      include: [path.resolve('./lib/emails')],\n      exclude: /node_modules/,\n      loader: 'graphql-tag/loader',\n    });\n    config.module?.rules?.push({\n      test: /\\.(graphql|gql)$/,\n      include: [path.resolve('./lib/schema')],\n      exclude: /node_modules/,\n      loader: 'raw-loader',\n    });\n\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Tag with 'of' Attribute\nDESCRIPTION: This snippet uses the Storybook Meta component to reference the imported stories and set a custom name. It demonstrates how to use the 'of' attribute in the Meta tag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfName.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={BStories} name=\"name\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Toolbar Button to Storybook UI in JavaScript\nDESCRIPTION: Example code for adding a new button to Storybook's Toolbar. This snippet shows how to register a toolbar item with conditional rendering based on the current view.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-addon-toolbar-example.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with TypeScript\nDESCRIPTION: TypeScript configuration for Storybook preview that imports the framework-specific Preview type and defines the same story sorting order. Requires replacing 'your-framework' with the actual framework being used (e.g., react, vue3).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages-and-wildcard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    options: {\n      storySort: {\n        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components', '*', 'WIP'],\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Vue Storybook Testing\nDESCRIPTION: Implements Vitest configuration for Vue Storybook components with Playwright browser testing support. Includes integration with existing Vite configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-workspace.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, mergeConfig } from 'vitest/config';\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport viteConfig from './vite.config';\n\nconst dirname =\n  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineWorkspace([\n  './vitest.config.ts',\n  {\n    extends: './vite.config.ts',\n    plugins: [\n      storybookTest({\n        configDir: path.join(dirname, '.storybook'),\n        storybookScript: 'yarn storybook --ci',\n      }),\n    ],\n    test: {\n      name: 'storybook',\n      browser: {\n        enabled: true,\n        provider: 'playwright',\n        headless: true,\n        instances: [{ browser: 'chromium' }],\n      },\n      setupFiles: ['./.storybook/vitest.setup.ts'],\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Removing Storybook Accessibility Addon with yarn\nDESCRIPTION: Command to remove the @storybook/addon-a11y addon from a Storybook project using yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-remove-command.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@latest remove @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Story with Svelte CSF\nDESCRIPTION: Shows how to create a Button story using Svelte's CSF (Component Story Format) with the defineMeta helper. This approach uses a module script and the Story component to define a Primary story with props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n\tconst { Story } = defineMeta({\n\t\tcomponent: Button,\n\t});\n</script>\n\n<Story name=\"Primary\" args={{ primary: true, label: 'Button' }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Dark Background in TypeScript CSF\nDESCRIPTION: This snippet shows how to set up a Button story using TypeScript Component Story Format (CSF). It defines a story with a dark background using story-level parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const OnDark: Story = {\n  // 👇 Story-level parameters\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook test runner that defines tag-based filtering rules for test execution. Specifies which stories to include, exclude, and skip based on their tags.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tags: {\n    include: ['test-only', 'pages'],\n    exclude: ['no-tests', 'tokens'],\n    skip: ['skip-test', 'layout'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Storybook Decorator\nDESCRIPTION: Shows how to create a decorator in Storybook for Angular components using componentWrapperDecorator to add margin styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { componentWrapperDecorator } from '@storybook/angular';\n\nimport type { Meta } from '@storybook/angular';\n\nimport { YourComponent } from './your.component';\n\nconst meta: Meta<YourComponent> = {\n  component: YourComponent,\n  decorators: [componentWrapperDecorator((story) => `<div style=\"margin: 3em\">${story}</div>`)],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Layout\nDESCRIPTION: Sets up the documentation page metadata using Meta component with button stories and custom doc name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOfNamed.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={ButtonStories} name=\"Doc Name\" />\n```\n\n----------------------------------------\n\nTITLE: Loading External Addons in Storybook Preset\nDESCRIPTION: Demonstrates how to create a preset that loads and configures external Storybook addons, including setting up decorators and additional configurations. This pattern is useful when working with third-party addons that you don't directly control.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-knowledge-base.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  presets: [\n    '@storybook/addon-external',\n    {\n      name: '@storybook/another-external-addon',\n      options: {\n        propertyA: 'valueA',\n        propertyB: 'valueB',\n      },\n    },\n  ],\n  decorators: [\n    // Custom decorators implementation\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Preview Configuration with Vue to React Support\nDESCRIPTION: Configures Storybook preview settings and imports necessary dependencies for Vue to React conversion. The code sets up the preview environment with documentation parameters, though the docs parameter usage is marked as deprecated.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-prepareforinline.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport toReact from '@egoist/vue-to-react';\n\nexport default {\n  parameters: {\n    docs: {\n      // deprecated do not use\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript configuration for Storybook's main.ts file. Imports the proper type definitions, defines the framework to use, story file patterns to load, and enables crash reports for telemetry events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-main-enable-crash-reports.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Component Story using CSF\nDESCRIPTION: Shows how to write a Storybook story in plain JavaScript using Component Story Format (CSF). Includes component import and story configuration with environment variables.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const ExampleStory = {\n  args: {\n    propertyA: import.meta.env.STORYBOOK_DATA_KEY,\n    propertyB: import.meta.env.VITE_CUSTOM_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Config Decorator\nDESCRIPTION: Example of using applicationConfig decorator for Angular components with dependencies\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Meta, applicationConfig, StoryObj } from '@storybook/angular';\n\nimport { BrowserAnimationsModule, provideAnimations } from '@angular/platform-browser/animations';\nimport { importProvidersFrom } from '@angular/core';\n\nimport { ChipsModule } from './angular-src/chips.module';\n\nconst meta: Meta<ChipsModule> = {\n  component: ChipsModule,\n  decorators: [\n    applicationConfig({\n      providers: [\n        importProvidersFrom(BrowserAnimationsModule)\n        provideAnimations()\n      ],\n    }),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<ChipsModule>;\n\nexport const WithCustomApplicationProvider: Story = {\n  render: () => ({\n    applicationConfig: {\n      providers: [...],\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Documentation\nDESCRIPTION: Sets up autodocs for a Web Components Button using both JavaScript and TypeScript approaches. Specifies the component using its custom element tag name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n  //👇 Enables auto-generated documentation for this component and includes all stories in this file\n  tags: ['autodocs'],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n  //👇 Enables auto-generated documentation for this component and includes all stories in this file\n  tags: ['autodocs'],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: React Native Async Storage Configuration\nDESCRIPTION: Demonstrates how to configure AsyncStorage for React Native Storybook based on different React Native versions\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_152\n\nLANGUAGE: javascript\nCODE:\n```\ngetStorybookUI({\n  ...\n  asyncStorage: require('@react-native-async-storage/async-storage').default || require('react-native').AsyncStorage || null\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Form via Storybook Story in Vue with JavaScript\nDESCRIPTION: This code snippet implements a form validation test using Vue with JavaScript, Testing Library for Vue, and Storybook's composeStory for scenario setup. It simulates clicking a submit button within the composed Storybook story and asserts the absence of the 'invalid-form' label to confirm successful form validation. The test depends on a correctly configured Vue and Storybook environment along with '@testing-library/vue' and '@storybook/vue3'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { fireEvent, screen } from '@testing-library/vue';\\n\\nimport { composeStory } from '@storybook/vue3';\\n\\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\\n\\nconst ValidForm = composeStory(ValidFormStory, Meta);\\n\\ntest('Validates form', async () => {\\n  await ValidForm.run();\\n\\n  const buttonElement = screen.getByRole('button', {\\n    name: 'Submit',\\n  });\\n\\n  fireEvent.click(buttonElement);\\n\\n  const isFormValid = screen.getByLabelText('invalid-form');\\n  expect(isFormValid).not.toBeInTheDocument();\\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Status Store Usage in Storybook Addons\nDESCRIPTION: This snippet shows how to update the usage of the experimental status API to the new Status Store in Storybook 9.0. The API has changed from using 'experimental_updateStatus' to using a new Status Store with a 'set' method.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n+ import { experimental_getStatusStore } from 'storybook/manager-api';\n+ import { StatusValue } from 'storybook/internal/types';\n\n+ const myStatusStore = experimental_getStatusStore(MY_ADDON_ID);\n\naddons.register(MY_ADDON_ID, (api) => {\n-  api.experimental_updateStatus({\n-    someStoryId: {\n-      status: 'success',\n-       title: 'Component tests',\n-       description: 'Works!',\n-    }\n-  });\n+  myStatusStore.set([{\n+    value: StatusValue.SUCCESS\n+    title: 'Component tests',\n+    description: 'Works!',\n+  }]);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Addon for Svelte CSF with yarn\nDESCRIPTION: This command uses yarn to add the @storybook/addon-svelte-csf package to a Svelte project using Storybook. It runs the latest version of Storybook CLI through yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn storybook@latest add @storybook/addon-svelte-csf\n```\n\n----------------------------------------\n\nTITLE: Configuring Component for Props Table with storiesOf\nDESCRIPTION: Sets up the component metadata for generating props tables in Storybook Docs using the storiesOf API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storiesOf } from '@storybook/react';\nimport { Button } from './Button';\n\nstoriesOf('InfoButton', module)\n  .addParameters({ component: Button })\n  .add( ... );\n```\n\n----------------------------------------\n\nTITLE: Creating Page Story with Args Composition\nDESCRIPTION: Demonstrates how to compose stories using args from subcomponents to build screen-level stories\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const LoggedIn = {\n  args: {\n    ...PageLayout.Authenticated.args,\n    ...Document.Simple.args,\n    ...SubDocumentList.Simple.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Framework Button Stories with TypeScript 4.9\nDESCRIPTION: Sets up a Button component story using TypeScript 4.9 with satisfies operator for type safety. Demonstrates a framework-agnostic approach with proper type inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      story: { autoplay: true },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Svelte Storybook Story with Interaction Tests (CSF, JS)\nDESCRIPTION: This snippet defines a Storybook story for a Svelte `RegistrationForm` component using the standard Component Story Format (CSF) in JavaScript. It exports a default configuration and a `FilledForm` story object. The `play` function simulates user input and form submission using `userEvent` and `within` from `@storybook/test`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"RegistrationForm.stories.js\" renderer=\"svelte\" language=\"js\" tabTitle=\"CSF\"\nimport { userEvent, within } from 'storybook/test';\n\nimport RegistrationForm from './RegistrationForm.svelte';\n\nexport default {\n  component: RegistrationForm,\n};\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Web Component Story with Localization in TypeScript\nDESCRIPTION: This snippet defines a Storybook story for a web component that renders a localized greeting. It includes a function to get captions for different locales and a story that uses this function to display the appropriate greeting based on the selected locale.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nconst getCaptionForLocale = (locale) => {\n  switch (locale) {\n    case 'es':\n      return 'Hola!';\n    case 'fr':\n      return 'Bonjour!';\n    case 'kr':\n      return '안녕하세요!';\n    case 'zh':\n      return '你好!';\n    default:\n      return 'Hello!';\n  }\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const StoryWithLocale: Story = {\n  render: (args, { globals: { locale } }) => {\n    const caption = getCaptionForLocale(locale);\n    return html`<p>${caption}</p>`;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Body HTML\nDESCRIPTION: Example of adding custom elements to the preview iframe's body section using preview-body.html. Shows how to add custom content roots.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-rendering.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"custom-root\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Component Stories in TypeScript\nDESCRIPTION: Shows a standard TypeScript approach to define Storybook metadata. Uses explicit type annotation with Meta<typeof Example> to provide type safety. Includes a placeholder for the renderer import that should be replaced with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    value: {\n      description: 'The value of the slider',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for Table Component\nDESCRIPTION: This snippet sets up a Storybook story for the Table component using the storiesOf and withInfo functions. It adds a story titled 'Flow Class' with a brief description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.flow-stories.txt#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst stories = storiesOf('Table', module);\nstories.add('Flow Class', withInfo('Lorum Ipsum Nem')(() => <Table />));\n```\n\n----------------------------------------\n\nTITLE: Importing Stories and Setting Meta in Storybook MDX\nDESCRIPTION: This snippet imports stories from a B.stories.js file and sets up the Meta component to associate the documentation with those stories. It's a common pattern in Storybook for organizing and documenting components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/B.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as BStories from '../src/B.stories';\n\n<Meta of={BStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Story Metadata with `fn` Spy (JavaScript/JSX)\nDESCRIPTION: Defines Storybook metadata for a `Button` component using JavaScript/JSX syntax. It imports the `fn` utility from `storybook/test` for mocking and the `Button` component. The configuration uses `args: { onClick: fn() }` to set up a spy for the `onClick` prop, allowing its invocations to be tracked in the Storybook Actions panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { fn } from 'storybook/test';\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked\n  args: { onClick: fn() },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Accessibility Parameters in Storybook Preview - JavaScript\nDESCRIPTION: This snippet exports a default module with accessibility parameters for Storybook using JavaScript. It sets specific rules, such as ignoring the 'autocomplete' rule and disabling the 'image-alt' rule, to customize accessibility checks with Axe. The 'manual' flag in globals object allows for optional automatic checks. Dependencies include Axe and Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-global-config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story with TypeScript\nDESCRIPTION: TypeScript implementation of a Storybook story configuration for DataTable component, using Meta type and including accessibility test parameters that display warnings instead of failures.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-todo-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Meta } from '@storybook/your-renderer';\n\nimport { DataTable } from './DataTable';\n\nconst meta: Meta<typeof DataTable> = {\n  component: DataTable,\n  parameters: {\n    // 👇 This component's accessibility tests will not fail\n    //    Instead, they display warnings in the Storybook UI\n    a11y: { test: 'todo' },\n  },\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Using Existing Webpack Config with Storybook\nDESCRIPTION: Example of how to reuse an app's existing webpack configuration by importing it and merging with Storybook's config, particularly useful for projects generated with tools like Vue CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\n// your app's webpack.config.js\nconst custom = require('../webpack.config.js');\n\nmodule.exports = {\n  webpackFinal: async (config, { configType }) => {\n    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'\n    // You can change the configuration based on that.\n    // 'PRODUCTION' is used when building the static version of storybook.\n\n    // Find the rule responsible for handling JavaScript/TypeScript files\n    const transpileRule = config.module.rules.find((rule) => {\n      // Find the rule that uses babel-loader\n      const isBabelLoader = rule.use && rule.use.loader && rule.use.loader.includes('babel-loader');\n      // For webpack 5 the babel-loader is usually in a nested use rule\n      // Along with a bunch of other loaders\n      const hasMultipleUses = rule.use && Array.isArray(rule.use);\n      const hasBabelLoader = hasMultipleUses\n        ? rule.use.some((use) => use.loader && use.loader.includes('babel-loader'))\n        : false;\n\n      return isBabelLoader || hasBabelLoader;\n    });\n\n    // Replace with the corresponding rule from your app's webpack config\n    if (transpileRule) {\n      config.module.rules = [...config.module.rules.filter((rule) => rule !== transpileRule), ...custom.module.rules];\n    }\n\n    // Return the altered config\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Button Story Implementation\nDESCRIPTION: Implements a Button story for Angular using Storybook's CSF 2 format. Defines a primary button variant with args pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, Story } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nexport default {\n  title: 'Button',\n  component: Button,\n} as Meta;\n\nexport const Primary: Story = (args) => ({\n  props: args,\n});\nPrimary.args = { primary: true };\n```\n\n----------------------------------------\n\nTITLE: Creating Button Story for Vue (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for a Vue Button component using JavaScript. It exports a default object for the component and a 'Text' story with a render function and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nimport { action } from 'storybook/actions';\n\nexport default {\n  component: Button,\n};\n\nexport const Text = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return {\n        ...args,\n        onClick: action('clicked'),\n      };\n    },\n    template: '<Button @click=\"onClick\" :label=\"label\" />',\n  }),\n  args: {\n    label: 'Hello',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom MDX Documentation Page\nDESCRIPTION: An MDX documentation file that showcases how to create custom documentation with embedded stories. It demonstrates different approaches for referencing stories both with and without defined story titles.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/custom-docs-page.md#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# Replacing DocsPage with custom `MDX` content\n\nThis file is a documentation-only `MDX`file to customize Storybook's [DocsPage](https://storybook.js.org/docs/writing-docs/docs-page#replacing-docspage).\n\nIt can be further expanded with your own code snippets and include specific information related to your stories.\n\nFor example:\n\nimport { Story } from \"@storybook/addon-docs\";\n\n## Button\n\nButton is the primary component. It has four possible states.\n\n- [Primary](#primary)\n- [Secondary](#secondary)\n- [Large](#large)\n- [Small](#small)\n\n## With the story title defined\n\nIf you included the title in the story's default export, use this approach.\n\n### Primary\n\n<Story id=\"example-button--primary\" />\n\n### Secondary\n\n<Story id=\"example-button--secondary\" />\n\n### Large\n\n<Story id=\"example-button--large\" />\n\n### Small\n\n<Story id=\"example-button--small\" />\n\n## Without the story title defined\n\nIf you didn't include the title in the story's default export, use this approach.\n\n### Primary\n\n<Story id=\"your-directory-button--primary\"/>\n\n### Secondary\n\n<Story id=\"your-directory-button--secondary\"/>\n\n### Large\n\n<Story id=\"your-directory-button--large\"/>\n\n### Small\n\n<Story id=\"your-directory-button--small\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-a11y using npm (Shell)\nDESCRIPTION: Installs the `@storybook/addon-a11y` package as a development dependency using the npm package manager. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @storybook/addon-a11y --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directories in Storybook main.js/ts\nDESCRIPTION: Sets a list of directories containing static files to be loaded by Storybook. This allows you to reference these files in your stories and components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-static-dirs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  staticDirs: ['../public'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This snippet shows how to configure the main Storybook file in JavaScript. It sets the framework and defines story loading with a custom title prefix. The framework should be replaced with the specific framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-auto-title-custom.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: [\n    {\n      directory: '../src',\n      titlePrefix: 'Custom', // 👈 Configure the title prefix\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Automigration with Yarn\nDESCRIPTION: Executes Storybook's automigration utility using Yarn's DLX command. Uses the latest version of Storybook to run the automigrate command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-automigrate.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@latest automigrate\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy MDX1 Support in Storybook Configuration\nDESCRIPTION: JavaScript configuration to enable the legacyMdx1 feature flag in Storybook's main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  features: {\n    legacyMdx1: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Compiler Addon\nDESCRIPTION: Alternative command for installing the Babel compiler addon for Storybook if not using SWC.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storybook/addon-webpack5-compiler-babel\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Framework in JavaScript\nDESCRIPTION: JavaScript configuration for setting up Storybook with SvelteKit framework. Shows the required framework property and notes the removal of deprecated svelteOptions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  framework: '@storybook/sveltekit', // 👈 Add this\n  // svelteOptions: { ... }, 👈 Remove this\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Storybook Head\nDESCRIPTION: This snippet adds a description meta tag to the Storybook manager UI to enhance the documentation of components. It sets the content attribute to provide a brief description. This is useful for better searchability and understanding of the project. No additional dependencies are required.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/seo-description.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<meta name=\\\"description\\\" content=\\\"Components for my awesome project\\\" key=\\\"desc\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Viewport Addon with NPM\nDESCRIPTION: Command to install @storybook/addon-viewport as a dev dependency using NPM package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-viewport-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @storybook/addon-viewport --save-dev\n```\n\n----------------------------------------\n\nTITLE: Button Variants in TypeScript React\nDESCRIPTION: Demonstrates the use of the variant prop to change the Button's visual style. The component supports 'outline', 'solid', and 'ghost' variants, providing different visual options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button variant=\"outline\">Outline</Button>\n<Button variant=\"solid\">Solid</Button>\n<Button variant=\"Ghost\">Ghost</Button>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with PNPM\nDESCRIPTION: Executes Storybook tests using pnpm package manager with the --no-index-json flag to disable index.json file generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-no-index-json.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook --no-index-json\n```\n\n----------------------------------------\n\nTITLE: Configuring fnm for Node Version Management in Shell\nDESCRIPTION: This command sets up fnm (Fast Node Manager) in the shell environment with specific parameters for version management and corepack enablement.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\neval \"$(fnm env --use-on-cd --corepack-enabled --version-file-strategy recursive)\"\n```\n\n----------------------------------------\n\nTITLE: Animated Buttons in TypeScript React\nDESCRIPTION: Demonstrates the use of the animate prop to add animations to the Button. Supported animations include 'glow', 'jiggle', and 'rotate360', enhancing the interactivity of the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Button animation=\"glow\">\n  <FaceHappyIcon />Button\n</Button>\n<Button animation=\"jiggle\">\n  <FaceHappyIcon />Button\n</Button>\n<Button animation=\"rotate360\">\n  <FaceHappyIcon />Button\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories for HTML Components\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for HTML List components. It includes stories for empty, one item, and many items configurations using JavaScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createList } from './List';\nimport { createListItem } from './ListItem';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Empty = {\n  render: () => createList(args),\n};\n\nexport const OneItem = {\n  render: (args) => {\n    const list = createList(args);\n    list.appendChild(createListItem());\n    return list;\n  },\n};\n\nexport const ManyItems = {\n  render: (args) => {\n    const list = createList(args);\n    list.appendChild(createListItem());\n    list.appendChild(createListItem());\n    list.appendChild(createListItem());\n    return list;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Telemetry Debug Mode in Storybook with Yarn\nDESCRIPTION: A shell command that enables debug mode for Storybook's telemetry functionality when using yarn. The STORYBOOK_TELEMETRY_DEBUG environment variable is set to 1 to output additional logging information about telemetry operations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-preview-event.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSTORYBOOK_TELEMETRY_DEBUG=1 yarn storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Runtime Configuration\nDESCRIPTION: Example of configuring runtime settings in next.config.js, which can be accessed within components and stories. Shows how to set server-side and public runtime configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n// next.config.js\nmodule.exports = {\n  serverRuntimeConfig: {\n    mySecret: 'secret',\n    secondSecret: process.env.SECOND_SECRET, // Pass through env variables\n  },\n  publicRuntimeConfig: {\n    staticFolder: '/static',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Page Stories for Svelte using CSF in JavaScript\nDESCRIPTION: This snippet shows how to create stories for the Page component in Svelte using Component Story Format (CSF) in JavaScript. It imports the Page component and Header stories, sets up the default export with component metadata, and defines a LoggedIn story that spreads the args from the Header's LoggedIn story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from './Page.svelte';\n\n//👇 Imports all Header stories\nimport * as HeaderStories from './Header.stories';\n\nexport default {\n  component: Page,\n};\n\nexport const LoggedIn = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Storybook Interaction Functions in JavaScript\nDESCRIPTION: This snippet shows the correct way to use Storybook interaction functions by awaiting them. This allows addon-interactions to intercept these helper functions and enables stepping through them when debugging.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/await-interactions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from '@storybook/test';\n\n// or from the legacy package \"@storybook/testing-library\";\n\nMyStory.play = async (context) => {\n  const canvas = within(context.canvasElement);\n  // awaited 👍\n  await userEvent.click(canvas.getByRole('button'));\n};\n```\n\n----------------------------------------\n\nTITLE: Using Canvas Block with New API in Storybook 7.0\nDESCRIPTION: Shows the updated usage of the Canvas block in Storybook 7.0, including the new 'of' prop and how to pass props to inner Story and Source blocks. This example demonstrates the full range of new API options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_92\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Canvas } from \"@storybook/blocks\";\nimport * as ComponentStories from \"./some-component.stories\";\n\n<Meta of={ComponentStories} />\n\n<Canvas\n  of={ComponentStories.standard}\n  story={{\n    inline: false,\n    height: '200px'\n  }}\n  source={{\n    language: 'html',\n    code: 'custom code...'\n  }}\n  withToolbar={true}\n  additionalActions={[...]}\n  layout=\"fullscreen\"\n  className=\"custom-class\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Autodocs for a Component\nDESCRIPTION: Removes the 'autodocs' tag from a component to disable automatic documentation generation for that specific component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  tags: ['autodocs'],\n  // ...other exports\n};\n\nexport const DisabledDocs = {\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      autodocs: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using useParameter Hook in Storybook Addon (JavaScript)\nDESCRIPTION: The useParameter hook retrieves the current story's parameters. It provides a default value if the parameter is not defined.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-addons-api-useparameter.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with React JSX Transform in JavaScript\nDESCRIPTION: This function extends the provided Babel configuration to include the React JSX transform plugin. It spreads the existing config and adds the plugin to the plugins array.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-babelDefault.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport function babelDefault(config) {\n  return {\n    ...config,\n    plugins: [\n      ...config.plugins,\n      [require.resolve('@babel/plugin-transform-react-jsx'), {}, 'preset'],\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Histogram Stories in SolidJS with JavaScript\nDESCRIPTION: This code illustrates how to create a Storybook story for a Histogram component in SolidJS using JavaScript. It follows the Component Story Format pattern while specifying the component and args for the Default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Histogram } from './Histogram';\n\nexport default {\n  component: Histogram,\n};\n\nexport const Default = {\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Coverage Watermarks\nDESCRIPTION: TypeScript configuration for setting coverage watermarks in Vitest.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  // ...\n  test: {\n    // ...\n    coverage: {\n      // ...\n      watermarks: {\n        // These are the default values\n        statements: [50, 80],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Snapshot Resolver for Storybook\nDESCRIPTION: This code configures a custom snapshot resolver for Jest in the Storybook project. It defines how snapshot paths are resolved and generated, ensuring snapshots are saved in a specific directory structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-snapshot-resolver-custom-directory.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path';\n\nexport default {\n  resolveSnapshotPath: (testPath) => {\n    const fileName = path.basename(testPath);\n    const fileNameWithoutExtension = fileName.replace(/\\.[^/.]+$/, '');\n    // Defines the file extension for the snapshot file\n    const modifiedFileName = `${fileNameWithoutExtension}.snap`;\n\n    // Configure Jest to generate snapshot files using the following convention (./src/test/__snapshots__/Button.stories.snap)\n    return path.join('./src/test/__snapshots__', modifiedFileName);\n  },\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    path.basename(snapshotFilePath, snapshotExtension),\n  testPathForConsistencyCheck: 'example',\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Type Import Paths in Storybook\nDESCRIPTION: This snippet demonstrates how to update the import paths for types in Storybook 9.0. The import path for 'SupportedRenderers' has been changed to use the new internal types package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- import { SupportedRenderers } from './project_types';\n+ import { SupportedRenderers } from 'storybook/internal/types';\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Snapshot Tests Using Vitest (TypeScript)\nDESCRIPTION: This snippet implements Storybook snapshot testing in TypeScript, leveraging static typing for improved safety. It defines a StoryFile type, uses typed version of import.meta.glob, and otherwise mirrors the JavaScript logic for composing stories, dynamically filtering them according to suite options, and running tests using Vitest. Dependencies include '@storybook/your-framework', '@storybook/your-renderer', 'vitest', and TS support for dynamic imports. Key parameters and configuration match the JavaScript version. It expects standard Storybook stories and outputs test reports with associated snapshots.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-snapshot-test.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// @vitest-environment jsdom\n\n// Replace your-framework with one of the supported Storybook frameworks (react, vue3)\nimport type { Meta, StoryFn } from '@storybook/your-framework';\n\nimport { describe, expect, test } from 'vitest';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\ntype StoryFile = {\n  default: Meta;\n  [name: string]: StoryFn | Meta;\n};\n\nconst compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your story files\n  const storyFiles = Object.entries(\n    import.meta.glob<StoryFile>('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {\n      eager: true,\n    }),\n  );\n\n  return storyFiles.map(([filePath, storyFile]) => {\n    const storyDir = path.dirname(filePath);\n    const componentName = path.basename(filePath).replace(/\\.(stories|story)\\.[^/.]+$/, '');\n    return { filePath, storyFile, componentName, storyDir };\n  });\n}\n\n// Recreate similar options to Storyshots. Place your configuration below\nconst options = {\n  suite: 'Storybook Tests',\n  storyKindRegex: /^.*?DontTest$/,\n  storyNameRegex: /UNSET/,\n  snapshotsDirName: '__snapshots__',\n  snapshotExtension: '.storyshot',\n};\n\ndescribe(options.suite, () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName, storyDir }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {\n      // Skip component tests if they are disabled\n      return;\n    }\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile))\n        .map(([name, story]) => ({ name, story }))\n        .filter(({ name, story }) => {\n          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.\n          return !options.storyNameRegex?.test(name) && !story.parameters.storyshots?.disable;\n        });\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.\n        const testFn = story.parameters.storyshots?.skip ? test.skip : test;\n\n        testFn(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n\n          expect(document.body.firstChild).toMatchSnapshot();\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Angular\nDESCRIPTION: Angular-specific Storybook configuration for Button component with background parameter settings. Uses TypeScript with Angular's type definitions to define metadata and stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-default.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      // 👇 Set default background value for all component stories\n      default: 'Gray',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const OnDark: Story = {\n  parameters: {\n    backgrounds: {\n      // 👇 Override default background value for this story\n      default: 'Dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Preview Middleware in TypeScript\nDESCRIPTION: This method sets up the middleware for the Storybook preview. It handles various routes related to the preview, including the main preview HTML, static files, and story-specific endpoints. It uses the Express router to define these routes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync initializeMiddleware() {\n  this.router.get('/iframe.html', this.getPreviewHtml.bind(this));\n  this.router.use('/sb-preview', express.static(this.options.previewDir));\n\n  this.router.get(\n    '/storybook-preview.js',\n    async (req: Request, res: Response) => {\n      const { body } = await this.previewBuilder.getMainFile();\n      res.type('js');\n      res.send(body);\n    }\n  );\n\n  // ... other route handlers\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Canvas Component in JavaScript\nDESCRIPTION: Configuration for replacing the default Canvas component with a custom MyCanvas component in Storybook's documentation using JavaScript. This setup is done in the preview.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-canvas.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyCanvas } from './MyCanvas';\n\nexport default {\n  parameters: {\n    docs: {\n      components: {\n        Canvas: MyCanvas,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Button Story with Source Code Parameters in Storybook\nDESCRIPTION: Illustrates how to customize the displayed source code for a story using the storySource parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nexport const WithStorySourceParams = () => <Button>WithStorySourceParams</Button>;\nWithStorySourceParams.parameters = { storySource: { source: 'foo' } };\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Code Snippet Contributions\nDESCRIPTION: Shell command for creating a new Git branch dedicated to adding code snippets for a specific framework in the Storybook monorepo.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b code-snippets-for-framework\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This snippet shows how to configure the main Storybook file in JavaScript. It specifies the framework and defines which story files to include, with MDX files displayed first in the sidebar.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-ordered.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: [\n    '../src/**/*.mdx', // 👈 These will display first in the sidebar\n    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)', // 👈 Followed by these\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Preview Script\nDESCRIPTION: Configuration for package.json to add a script that runs Storybook in documentation preview mode using the --docs flag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/build-documentation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"storybook-docs\": \"storybook dev --docs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte List Stories with Svelte CSF in JavaScript\nDESCRIPTION: Creates a Storybook story for a Svelte List component using the Svelte CSF format in JavaScript. It uses the defineMeta function and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import List from './List.svelte';\n\n  const { Story } = defineMeta({\n    component: List,\n  });\n</script>\n\n<!-- Always an empty list, not super interesting -->\n<Story name=\"Empty\" />\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Onboarding Addon with PNPM\nDESCRIPTION: Command to remove the Storybook onboarding addon using PNPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/onboarding/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\npnpm remove -D @storybook/addon-onboarding\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta Information for MDX Documentation\nDESCRIPTION: Defines the Storybook metadata for the MDX documentation page, setting its title path and name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/ResolvedReact.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"docs2/ResolvedReact\" name=\"MDX\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Info Command\nDESCRIPTION: The info command reports useful debugging information about the Storybook environment, including system details, binaries, browsers, and npm packages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nstorybook info\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Manager with Custom Theme\nDESCRIPTION: This code sets up a custom theme for Storybook's manager UI. It imports the addons API from Storybook and a custom theme definition, then uses setConfig to apply the theme to the manager interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-custom-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from 'storybook/manager-api';\nimport yourTheme from './YourTheme';\n\naddons.setConfig({\n  theme: yourTheme,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Theme in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the Storybook preview using TypeScript. It imports the Preview type from the framework-specific Storybook package, sets up the dark theme for documentation, and exports the preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-docs-dark-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { themes } from 'storybook/theming';\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      theme: themes.dark,\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Integrating A11y Addon with Component Tests in Storybook\nDESCRIPTION: Diff showing how to configure the Accessibility addon to work with the Test addon by adding a11y annotations to the Vitest setup file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/vitest.setup.ts\n...\n+import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';\n\nconst annotations = setProjectAnnotations([\n  previewAnnotations,\n+ a11yAddonAnnotations,\n]);\n\n// Run Storybook's beforeAll hook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider Decorator in Solid Storybook (TypeScript)\nDESCRIPTION: Demonstrates how to add a solid-styled-components ThemeProvider wrapper to Solid.js Storybook stories using TypeScript. Imports the appropriate types and defines a typed theme object with proper type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Preview } from 'storybook-solidjs';\nimport { ThemeProvider, DefaultTheme } from 'solid-styled-components';\n\nconst theme: DefaultTheme = {\n  colors: {\n    primary: 'hotpink',\n  },\n};\n\nconst preview: Preview = {\n  decorators: [\n    (Story) => (\n      <ThemeProvider theme={theme}>\n        <Story />\n      </ThemeProvider>\n    ),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgTypes in Storybook\nDESCRIPTION: This code defines the argTypes object for a Storybook component, configuring a 'label' property with type information, default values, custom descriptions, and table display settings. The control type is set to null to disable interactive controls for this property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-merged-argtypes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst argTypes = {\n  label: {\n    name: 'label',\n    type: { name: 'string', required: false },\n    defaultValue: 'Hello',\n    description: 'overwritten description',\n    table: {\n      type: {\n        summary: 'something short',\n        detail: 'something really really long',\n      },\n      defaultValue: { summary: 'Hello' },\n    },\n    control: {\n      type: null,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directories with Object Notation\nDESCRIPTION: Advanced configuration for static directories using object notation, allowing for more detailed control over asset serving paths.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/images-and-assets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  staticDirs: [{\n    from: '../my-custom-assets',\n    to: '/assets',\n  }],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown in Storybook Info Addon Description\nDESCRIPTION: Creates a story that demonstrates how to use markdown in the Info addon description. This allows for richer text formatting in the component documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Markdown', module).add(\n  'Displays Markdown in description',\n  withInfo(markdownDescription)(() => <BaseButton label=\"Button\" />)\n);\n```\n\n----------------------------------------\n\nTITLE: Registering addons with the new package structure\nDESCRIPTION: Example of how to register addons using the new package names in addons.js after migrating from the deprecated embedded addons approach.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@storybook/addon-actions/register\";\nimport \"@storybook/addon-links/register\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with Custom Snapshot Serializer for Storybook Test Runner\nDESCRIPTION: Extends the default Jest configuration from @storybook/test-runner by adding a custom snapshot serializer that preprocesses HTML before passing it to the test runner. The configuration merges the custom serializer with any existing serializers from the default config.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-config-serializer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getJestConfig } from '@storybook/test-runner';\n\nconst defaultConfig = getJestConfig();\n\nconst config = {\n  ...defaultConfig,\n  snapshotSerializers: [\n    // Sets up the custom serializer to preprocess the HTML before it's passed onto the test-runner\n    './snapshot-serializer.js',\n    ...defaultConfig.snapshotSerializers,\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Head with Static Files and Custom JavaScript\nDESCRIPTION: This code snippet shows how to configure the Storybook preview head by including static files and custom JavaScript. It demonstrates preloading a font file and loading a Typekit script with error handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-head-example.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nPull in static files served from your Static directory or the internet\nExample:\n`main.js|ts` is configured with staticDirs: ['../public'] and your font is located in the `fonts`\ndirectory inside your `public` directory\n-->\n<link rel=\"preload\" href=\"/fonts/my-font.woff2\" />\n\n<!-- Or you can load custom head-tag JavaScript: -->\n<script src=\"https://use.typekit.net/xxxyyy.js\"></script>\n<script>\n  try {\n    Typekit.load();\n  } catch (e) {}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in HTML with JavaScript\nDESCRIPTION: Creates a Storybook story for an HTML Button using JavaScript. Utilizes a createButton function to render the button and configures a primary story with custom name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createButton } from './Button';\n\nexport default {\n  render: (args) => createButton(args),\n};\n\nexport const Primary = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Documentation Component in JavaScript\nDESCRIPTION: A React component implementation that creates a custom documentation page in Storybook. It provides a basic structure with a header and explanatory text for replacing the default DocsPage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/custom-docs-page.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nexport function CustomDocumentationComponent() {\n  return (\n    <div>\n      <h1>Replacing DocsPage with a custom component</h1>\n      <p>\n        The Docs page can be customized with your own custom content written as a React Component.\n      </p>\n      <p>Write your own code here👇</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite 5 for Storybook\nDESCRIPTION: Example configuration for updating to Vite 5 in Storybook projects\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js or vite.config.ts\nexport default {\n  // ... your other config\n  // Make sure you're using Vite 5 compatible plugins\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Decorator Configuration to Storybook JavaScript\nDESCRIPTION: This function modifies the Storybook addon configuration by adding a decorator from 'my-other-addon'. The config function accepts an entries array and options, returning the array enriched with the specified decorator. It requires the 'my-other-addon' package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-load-external-addons-preset.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = (entry = [], options) => {\n  return [...entry, require.resolve('my-other-addon/addDecorator')];\n};\n```\n\n----------------------------------------\n\nTITLE: Webpack 5 Builder Configuration\nDESCRIPTION: Configuration to enable Webpack 5 support in Storybook 6.3+\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  core: {\n    builder: \"webpack5\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Chromatic with pnpm\nDESCRIPTION: This command installs Chromatic as a development dependency using pnpm. It adds Chromatic to the project's devDependencies in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev chromatic\n```\n\n----------------------------------------\n\nTITLE: Correct Storybook Addon Configuration\nDESCRIPTION: Example showing correct configuration where all addons are properly registered and listed in package.json dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// in .storybook/main.js\nmodule.exports = {\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n  ],\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@storybook/addon-links\": \"0.0.1\",\n    \"@storybook/addon-essentials\": \"0.0.1\",\n    \"@storybook/addon-interactions\": \"0.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Svelte CSF (JavaScript)\nDESCRIPTION: Configures Storybook metadata for a Svelte component in a separate JavaScript file using the standard Component Story Format (CSF). It imports the Svelte component and defines the default export object, setting the component and using `argTypes` to hide the 'foo' property from the Storybook args table.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"YourComponent.stories.js\" renderer=\"svelte\" language=\"js\" tabTitle=\"CSF\"\nimport YourComponent from './YourComponent.svelte';\n\nexport default {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Root-Level Preset for Storybook Addon in JavaScript\nDESCRIPTION: This code shows how to set up a root-level preset for a Storybook addon, including registration of preview annotations and manager entries.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  previewAnnotations: (entry = []) => [\n    ...entry,\n    require.resolve('./preview'),\n  ],\n  managerEntries: (entry = []) => [\n    ...entry,\n    require.resolve('./manager'),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: CSF 3.0 Story with Explicit Title\nDESCRIPTION: Example of a Component Story Format 3.0 story with an explicit title to preserve naming scheme.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n  title: 'Components/MyComponent/MyComponent',\n};\n\nexport const Default = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Head in Storybook Main File\nDESCRIPTION: This snippet shows how to use the managerHead API in the Storybook main.js file to customize the manager UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  managerHead: (head) => `\n    ${head}\n    <style>\n      .sidebar-header {\n        background-color: #ff0 !important;\n      }\n    </style>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Background Parameters in Angular\nDESCRIPTION: This snippet shows how to set up a story for an Angular Button component with custom background color options. It uses TypeScript and defines metadata and a primary story with specific background values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const Primary: Story = {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n        { name: 'blue', value: '#00f' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Hierarchy Separators using Codemod\nDESCRIPTION: Command to migrate story hierarchy separators to use the standardized '/' separator\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_153\n\nLANGUAGE: sh\nCODE:\n```\nyarn sb migrate upgrade-hierarchy-separators --glob=\"*.stories.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Sorting in Storybook\nDESCRIPTION: Demonstrates how to implement custom story sorting using a comparison function in the preview configuration. The function allows sorting based on story identifiers, titles, names and import paths.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  options: {\n    storySort: (a, b) =>\n      a.id === b.id ? 0 : a.id.localeCompare(b.id, { numeric: true }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Args Composition Example\nDESCRIPTION: Demonstrates how to compose args from multiple stories for reuse.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const Secondary = {\n  args: {\n    ...Primary.args,\n    primary: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Backgrounds in TypeScript\nDESCRIPTION: Sets up background color options for Storybook stories using TypeScript with proper type definitions. Imports the Preview type from the renderer package and defines two background values (light and dark) with proper typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'light', value: '#fff' },\n        { name: 'dark', value: '#333' },\n      ],\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters in TypeScript with Framework-Agnostic Setup\nDESCRIPTION: Example of setting up accessibility testing parameters for a generic framework using TypeScript. Includes configuration for specific accessibility rules and manual testing options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      manual: true,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vue 3 Vite with PNPM\nDESCRIPTION: Installs @storybook/vue3-vite package as a development dependency using PNPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/vue3-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Compodoc in angular.json\nDESCRIPTION: JSON configuration to set up Compodoc in the Angular project's angular.json file, for generating documentation metadata.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// angular.json\n{\n  \"projects\": {\n    \"your-project\": {\n      \"architect\": {\n        \"storybook\": {\n          ...,\n          \"compodoc\": true,\n          \"compodocArgs\": [\n            \"-e\",\n            \"json\",\n            \"-d\",\n            \".\" // the root folder of your project\n          ],\n        },\n        \"build-storybook\": {\n          ...,\n          \"compodoc\": true,\n          \"compodocArgs\": [\n            \"-e\",\n            \"json\",\n            \"-d\",\n            \".\" // the root folder of your project\n          ],\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addon Outline in main.js\nDESCRIPTION: JavaScript code to add the Storybook Addon Outline to the addons array in the Storybook configuration file. This step enables the addon in your Storybook project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/outline/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-outline'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgTypes with Exclude Property\nDESCRIPTION: Example of using the exclude property with the ArgTypes block to filter out specific argument types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-argtypes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ArgTypes of={ButtonStories} exclude={['style']} />\n```\n\n----------------------------------------\n\nTITLE: Debugging Webpack with yarn in Storybook\nDESCRIPTION: Command to run Storybook with the webpack debugging flag enabled using yarn. This allows developers to inspect webpack configuration and behavior during Storybook execution.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-debug-webpack-dev.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn storybook --debug-webpack\n```\n\n----------------------------------------\n\nTITLE: Importing ColorPalette in Storybook\nDESCRIPTION: This snippet shows how to import the ColorPalette component from Storybook addon-docs blocks. The ColorPalette component is used to group multiple ColorItem components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-colorpalette.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ColorPalette } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Adding Framework to Storybook Configuration\nDESCRIPTION: Configuration example showing how to set up the Svelte-Vite framework in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/svelte-vite'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Story Rendering for Vue Components\nDESCRIPTION: Example of configuring the prepareForInline parameter to enable inline story rendering for Vue components by converting Vue components to React elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport toReact from '@egoist/vue-to-react';\n\naddParameters({\n  docs: {\n    // `container`, `page`, etc. here\n    prepareForInline: (storyFn, { args }) => {\n      const Story = toReact(storyFn());\n      return <Story {...args} />;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stories Using StoriesOf API\nDESCRIPTION: Alternative approach to configuring component stories using the storiesOf API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storiesOf } from '@storybook/vue';\nimport { InfoButton } from './InfoButton.vue';\n\nstoriesOf('InfoButton', module)\n  .addParameters({ component: InfoButton })\n  .add( ... );\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with Static Parameters in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define button stories with static parameters using the 'params' story parameter. It includes color and label options for different button states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Buttons\",\n  \"stories\": [\n    {\n      \"name\": \"Red\",\n      \"parameters\": {\n        \"server\": {\n          \"id\": \"button\",\n          \"params\": { \"color\": \"red\", \"label\": \"Stop\" }\n        }\n      }\n    },\n    {\n      \"name\": \"Green\",\n      \"parameters\": {\n        \"server\": {\n          \"id\": \"button\",\n          \"params\": { \"color\": \"green\", \"label\": \"OK\" }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Publishing\nDESCRIPTION: Defines the required environment variables for publishing the addon to NPM and GitHub using access tokens.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nGH_TOKEN=value_you_just_got_from_github\nNPM_TOKEN=value_you_just_got_from_npm\n```\n\n----------------------------------------\n\nTITLE: Removing Tags from Stories (JavaScript/TypeScript)\nDESCRIPTION: This snippet illustrates how to remove a tag from a specific story by prefixing it with '!'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Secondary = {\n  tags: ['!test'],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Secondary: StoryObj<typeof Button> = {\n  tags: ['!test'],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Subtitle Block in JavaScript for Storybook Docs\nDESCRIPTION: This snippet shows how to import the Subtitle component from Storybook's addon-docs blocks in a JavaScript file. This import is necessary before using the Subtitle component in your documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-subtitle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Subtitle } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Jest Global expect in Storybook Interactions - JavaScript\nDESCRIPTION: This snippet demonstrates how using Jest’s global `expect` within Storybook’s story interaction causes compatibility issues in browser environments. It defines an asynchronous play function that incorrectly calls the global `expect`. The code is intentionally incorrect and is meant to illustrate a pitfall this ESLint rule prevents. No additional dependencies are required, but using this pattern will break Storybook stories in browsers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/use-storybook-expect.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nDefault.play = async () => {\\n  // using global expect from Jest. Will break on the browser\\n  await expect(123).toEqual(123);\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Components Storybook Decorator\nDESCRIPTION: Demonstrates decorator implementation for Web Components using Lit HTML templating.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { html } from 'lit';\n\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta<YourComponentProps> = {\n  component: 'demo-your-component',\n  decorators: [(story) => html`<div style=\"margin: 3em\">${story()}</div>`],\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Story Configuration with Optional Titles\nDESCRIPTION: Examples of valid and invalid story title configurations in CSF3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ string literals 6.3 OK / 7.0 OK\nexport default {\n  title: 'Components/Atoms/Button',\n};\n\n// ✅ undefined 6.3 OK / 7.0 OK\nexport default {\n  component: Button,\n};\n\n// ❌ expressions: 6.3 OK / 7.0 KO\nexport default {\n  title: foo('bar'),\n};\n\n// ❌ template literals 6.3 OK / 7.0 KO\nexport default {\n  title: `${bar}`,\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Button Component with Vitest and Storybook\nDESCRIPTION: A Vitest test for a Vue 3 Button component using Storybook's composeStories utility. It configures the jsdom environment, imports vue-specific Storybook utilities, extracts the Primary story variant, and creates a snapshot test after rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @vitest-environment jsdom\n\nimport { expect, test } from 'vitest';\n\nimport { composeStories } from '@storybook/vue3';\n\nimport * as stories from '../stories/Button.stories';\n\nconst { Primary } = composeStories(stories);\ntest('Button snapshot', async () => {\n  await Primary.run();\n  expect(document.body.firstChild).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Metadata in Storybook (Web Components, JavaScript)\nDESCRIPTION: Defines the default export for `Button.stories.js` in a Web Components project using JavaScript. It exports a configuration object directly, setting the `title` for the Storybook UI and specifying the component using its custom element tag name string `'demo-button'` via the `component` property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js\" renderer=\"web-components\" language=\"js\"\nexport default {\n  title: 'Design System/Atoms/Button',\n  component: 'demo-button',\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in JavaScript\nDESCRIPTION: This snippet defines the main configuration for Storybook in JavaScript. It specifies the framework, story file patterns, and build test options. The framework should be replaced with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-mdx.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableMDXEntries: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Theme State with initializeThemeState\nDESCRIPTION: A helper function that registers the available themes and default theme with the addon state. Used when creating custom theme decorators to ensure proper theme selection in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DecoratorHelpers } from '@storybook/addon-themes';\n\nconst { initializeThemeState } = DecoratorHelpers;\n\nexport const myCustomDecorator = ({ themes, defaultState, ...rest }) => {\n  initializeThemeState(Object.keys(themes), defaultTheme);\n\n  return (storyFn, context) => {\n    // Snipped\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Canvas with Meta Example\nDESCRIPTION: Example demonstrating how to use the meta prop to render stories from different CSF files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\nimport * as HeaderStories from './Header.stories';\n\n<Meta of={ButtonStories} />\n\n{/* Although this MDX file is largely concerned with Button,\n    it can render Header stories too */}\n<Canvas of={HeaderStories.LoggedIn} meta={HeaderStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Metadata in Storybook (Web Components, TypeScript)\nDESCRIPTION: Defines the default export for `Button.stories.ts` in a Web Components project using TypeScript. It imports the `Meta` type from `@storybook/web-components` for type checking. The `meta` object configures the `title` and specifies the component by its custom element tag name string `'demo-button'` via the `component` property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Button.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Design System/Atoms/Button',\n  component: 'demo-button',\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing MSW in TypeScript Storybook Preview\nDESCRIPTION: Sets up Mock Service Worker (MSW) in a TypeScript-based Storybook preview configuration. Uses type-safe Preview interface and follows the same initialization pattern as the JavaScript version.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-initialize.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue, etc.)\nimport { Preview } from '@storybook/your-renderer';\n\nimport { initialize, mswLoader } from 'msw-storybook-addon';\n\n/*\n * Initializes MSW\n * See https://github.com/mswjs/msw-storybook-addon#configuring-msw\n * to learn how to customize it\n */\ninitialize();\n\nconst preview: Preview = {\n  // ... rest of preview configuration\n  loaders: [mswLoader], // 👈 Add the MSW loader to all stories\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Button Stories in React with JavaScript\nDESCRIPTION: This snippet shows how to configure a Button component story in React using JavaScript. It imports React and the Button component, sets up the component metadata with a title, and defines background color parameters for the story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport { Button } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories with Background Colors in Web Components (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a Button story for Web Components using TypeScript. It sets up a primary story with specific arguments and background color options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n        { name: 'blue', value: '#00f' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Viewing Telemetry Information with Debug Flag\nDESCRIPTION: Shows how to enable telemetry debugging by setting the STORYBOOK_TELEMETRY_DEBUG environment variable to 1, which will print out all information being gathered by the telemetry system.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSTORYBOOK_TELEMETRY_DEBUG=1 storybook dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Stories to Render in iframes\nDESCRIPTION: Storybook preview configuration to render web component stories in iframes instead of inline, useful for components that need their own rendering context.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = { docs: { story: { inline: false } } };\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Stories with JavaScript (CSF)\nDESCRIPTION: This snippet demonstrates how to configure story metadata for a Svelte component using JavaScript in the Component Story Format (CSF). It imports the component and sets tags for documentation and development visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Decorator Injection in Storybook Source Loader\nDESCRIPTION: This snippet configures the source-loader in Storybook to control whether decorators should be injected automatically into the story source. Setting 'injectDecorator' to false disables auto-injection, requiring manual decorator addition. Targets '.stories.jsx?' files and uses '@storybook/source-loader'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/source-loader/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function ({ config }) {\n  config.module.rules.push({\n    test: /\\.stories\\.jsx?$/,\\n    use: [\\n      {\\n        loader: require.resolve('@storybook/source-loader'),\\n        options: { injectDecorator: false },\\n      },\\n    ],\\n    enforce: 'pre',\\n  });\\n  return config;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte CSF Addon\nDESCRIPTION: Example of registering and configuring the Svelte CSF addon in Storybook's main configuration file with optional settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/svelte-vite',\n  addons: [\n    {\n      name: '@storybook/addon-svelte-csf',\n      options: {\n        legacyTemplate: false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample package.json Template for Storybook Framework\nDESCRIPTION: A template for creating a package.json file for a Storybook framework. It includes essential configurations like exports, dependencies, peer dependencies, and publishing settings required for a framework package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/framework.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"<your-framework-name>\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Storybook for <meta-framework-name> or <renderer> & <builder>\",\n  \"keywords\": [\n    \"Storybook\",\n    \"<meta-framework-name>\",\n    \"<renderer>\",\n    \"<builder>\",\n    \"<anything>\",\n    \"<else>\",\n    \"<relevant>\"\n  ],\n  \"homepage\": \"<your package's homepage>\",\n  \"bugs\": {\n    \"url\": \"https://github.com/<your-org>/<your-repo>/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/<your-org>/<your-repo>.git\",\n    \"directory\": \"<path/to/your/framework>\"\n  },\n  \"license\": \"MIT\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"require\": \"./dist/index.js\",\n      \"import\": \"./dist/index.mjs\"\n    },\n    \"./preset\": {\n      \"types\": \"./dist/preset.d.ts\",\n      \"require\": \"./dist/preset.js\",\n      \"import\": \"./dist/preset.mjs\"\n    },\n    \"./preview.js\": {\n      \"types\": \"./dist/preview.d.ts\",\n      \"require\": \"./dist/preview.js\",\n      \"import\": \"./dist/preview.mjs\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\"dist/**/*\", \"types/**/*\", \"README.md\", \"*.js\", \"*.d.ts\"],\n  \"scripts\": {\n    \"check\": \"tsc --noEmit\",\n    \"test\": \"...\"\n  },\n  \"dependencies\": {\n    \"storybook\": \"^9.0.0\",\n    \"@storybook/<builder>\": \"^9.0.0\",\n    \"@storybook/<renderer>\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"x.x.x\",\n    \"<meta-framework>\": \"^x.x.x\",\n    \"<builder>\": \"^x.x.x\"\n  },\n  \"peerDependencies\": {\n    \"<meta-framework>\": \"^x.x.x || ^x.x.x\",\n    \"<renderer>\": \"^x.x.x || ^x.x.x\",\n    \"<builder>\": \"^x.x.x\"\n  },\n  \"engines\": {\n    \"node\": \">=20.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Storybook in Traditional Format (JavaScript)\nDESCRIPTION: Extends the ESLint configuration to include the Storybook plugin recommendations. This setup applies the Storybook-specific rules to all relevant story files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // extend plugin:storybook/<configuration>, such as:\n  \"extends\": [\"plugin:storybook/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Args with Complex Mappings\nDESCRIPTION: Demonstrates how to map simple string values to complex arg types using argTypes mapping.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: MyComponent,\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: <b>Bold</b>,\n        Italic: <i>Italic</i>,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using user-events API in Storybook\nDESCRIPTION: Examples of various user interaction events available in Storybook's test package, including clear, click, hover, keyboard input and form interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuserEvent.clear(await within(canvasElement).getByRole('myinput'));\nuserEvent.click(await within(canvasElement).getByText('mycheckbox'));\nuserEvent.dblClick(await within(canvasElement).getByText('mycheckbox'));\nuserEvent.deselectOptions(await within(canvasElement).getByRole('listbox'),'1');\nuserEvent.hover(await within(canvasElement).getByTestId('example-test'));\nuserEvent.keyboard('foo');\nuserEvent.selectOptions(await within(canvasElement).getByRole('listbox'),['1','2']);\nuserEvent.type(await within(canvasElement).getByRole('my-input'),'Some text');\nuserEvent.unhover(await within(canvasElement).getByLabelText(/Example/i));\n```\n\n----------------------------------------\n\nTITLE: Play Function with Click Events\nDESCRIPTION: Example of using play function to test button click interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const ClickExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const button = await canvas.getByRole('button');\n    await userEvent.click(button);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ComponentReference in JavaScript/JSX\nDESCRIPTION: This snippet imports a ComponentReference component. The comment suggests there might be a naming conflict with another file of the same name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/ComponentReference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/* This will overlap with ComponentReference.mdx (this file). There's not much we can do about this */}\nimport ComponentReference from './ComponentReference';\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Filtering with Tags in Storybook\nDESCRIPTION: JavaScript configuration for filtering Storybook tests using tags, allowing inclusion, exclusion, or skipping of specific stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tags: {\n    exclude: ['exclude-tag'],\n    include: ['include-tag'],\n    skip: ['skip-tag'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Decorator with Global Types\nDESCRIPTION: Shows how to consume theme globals in a decorator using styled-components, Vuetify, or Angular Material to provide theming functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const decorators = [\n  (Story, context) => {\n    const theme = context.globals.theme;\n    return (\n      <ThemeProvider theme={theme}>\n        <Story />\n      </ThemeProvider>\n    );\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Building Storybook with pnpm\nDESCRIPTION: This command uses pnpm to run the build-storybook script, which builds Storybook for the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/build-storybook-production-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\npnpm run build-storybook\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Play Function in Angular with TypeScript\nDESCRIPTION: Example of writing an async play function for an Angular component story using TypeScript. Demonstrates how to use the canvasElement to query DOM elements and wait for rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const AsyncExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Other steps\n\n    // Waits for the component to be rendered before querying the element\n    await canvas.findByRole('button', { name: / button label/i });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Common Frameworks using JavaScript\nDESCRIPTION: This snippet shows a framework-agnostic approach to creating Storybook stories for a Checkbox component using JavaScript. It can be used with various frameworks by importing the appropriate Checkbox component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Checkbox } from './Checkbox';\n\nexport default {\n  component: Checkbox,\n};\n\nexport const Unchecked = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Head and Body in Storybook Main File\nDESCRIPTION: This code demonstrates how to use the previewHead and previewBody APIs in the Storybook main.js file to customize the preview HTML.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  previewHead: (head) => `\n    ${head}\n    <style>\n      body { padding: 10px !important; }\n    </style>\n  `,\n  previewBody: (body) => `\n    ${body}\n    <div id=\"custom-root\"></div>\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Web Components with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create Storybook stories for a Web Components Button using TypeScript. It imports types from '@storybook/web-components', specifies the component as 'demo-button', and defines two stories: Primary and PrimaryLongName.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Primary: Story = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryLongName: Story = {\n  args: {\n    ...Primary.args,\n    label: 'Primary with a really long name',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: SEO Meta Description Configuration\nDESCRIPTION: HTML meta tag configuration for adding SEO description to Storybook\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"Your Storybook description here\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Webpack Configuration in Storybook\nDESCRIPTION: Shows how to use the webpackFinal configuration element to extend or override Storybook's default Webpack configuration. This allows adding custom loaders or plugins.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  webpackFinal: async (config, { configType }) => {\n    // Make whatever fine-grained changes you need\n    config.module.rules.push({\n      test: /\\.scss$/,\n      use: ['style-loader', 'css-loader', 'sass-loader'],\n      include: path.resolve(__dirname, '../'),\n    });\n\n    // Return the altered config\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Actions in TypeScript\nDESCRIPTION: TypeScript implementation of Storybook preview configuration that imports the framework-specific Preview type and sets up action handling. Provides type safety and requires specifying the framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-matching-argtypes.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: '^on.*' },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Core Builder with Webpack5\nDESCRIPTION: This code snippet demonstrates how to configure Storybook to use the Webpack5 builder. It exports a default configuration object that specifies the builder to be used by Storybook's core.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-webpack5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  core: {\n    builder: '@storybook/builder-webpack5',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Svelte Button Story - Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet sets up Storybook registration for a Svelte Button component. It imports Meta from '@storybook/svelte' and assigns the Button as the component in the typed meta object. This ensures type safety for the meta configuration and is intended for Storybook integration with Svelte and TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\\n\\nimport Button from './Button.svelte';\\n\\nconst meta: Meta<typeof Button> = {\\n  component: Button,\\n};\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Registering Storybook Addon Panel in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to register a custom panel in the Storybook manager UI using the Storybook addons API. It defines a new addon by calling addons.register with a unique ADDON_ID, and adds a panel to the UI with a given PANEL_ID, type, title, a render function that displays static content using JSX, and an optional paramKey for configuration. This code assumes that Storybook and its addons API are installed and set up in the environment, as well as the presence of valid ADDON_ID, PANEL_ID, and types constants. The panel will appear in the Storybook UI under the provided title, and expects to execute in the context of Storybook's manager UI; it does not handle dynamic content or complex rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-disable-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\naddons.register(ADDON_ID, () => {\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: 'My Addon',\n    render: () => <div>Addon tab content</div>,\n    paramKey: 'myAddon', // this element\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Controls in MDX Stories\nDESCRIPTION: This snippet demonstrates how to implement controls for props tables in MDX, showing both the Story and ArgsTable components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Story name=\"WithControls\">\n  {args => <MyComponent {...args} />}\n</Story>\n\n<ArgsTable story=\"Controls\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Ordered Pages with Wildcard in Storybook\nDESCRIPTION: Shows how to configure story sorting with ordered pages and a wildcard placeholder for organizing remaining stories in the preview settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  options: {\n    storySort: {\n      order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], '*', 'WIP'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DEFAULT_LANGUAGE for ngx-translate in Storybook\nDESCRIPTION: This code snippet shows an alternative approach to configure ngx-translate in Storybook when TranslateModule.forRoot is handled by another module. It uses the DEFAULT_LANGUAGE provider to set the language based on Storybook's locale.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/others/ngx-translate/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DEFAULT_LANGUAGE } from '@ngx-translate/core';\n\nconst TranslateModuleDecorator = (storyFunc, context) => {\n  const { locale } = context.globals;\n\n  return applicationConfig({\n    providers: [{ provide: DEFAULT_LANGUAGE, useValue: locale }],\n  })(storyFunc, context);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Stories Rendering Behavior\nDESCRIPTION: Configuration in preview.js to control how stories render in the documentation, setting inline to false will render stories in iframes instead of inline.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = { docs: { story: { inline: false } } };\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook in Angular with CLI Builder\nDESCRIPTION: Command to run Storybook in an Angular project using the Angular CLI Builder.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-run-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng run my-project:storybook\n```\n\n----------------------------------------\n\nTITLE: Installing babel-core as a dev dependency for Storybook 3.3.x\nDESCRIPTION: Command to add babel-core as a development dependency when upgrading to Storybook 3.3.x, which is now required as a peer dependency.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_171\n\nLANGUAGE: bash\nCODE:\n```\nyarn add babel-core --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Custom Loader in TypeScript\nDESCRIPTION: TypeScript implementation of Webpack configuration extension for Storybook addon. Includes type definitions and adds a custom file loader while maintaining existing module rules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-webpackFinal.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Configuration as WebpackConfig } from 'webpack';\n\nexport function webpackFinal(config: WebpackConfig, options: any = {}) {\n  const rules = [\n    ...(config.module?.rules || []),\n    {\n      test: /\\.custom-file$/,\n      loader: require.resolve(`custom-loader`),\n    },\n  ];\n  config.module.rules = rules;\n\n  return config;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TodoItem Story with TypeScript in Svelte\nDESCRIPTION: Svelte Storybook story for TodoItem using TypeScript with standard type annotations. Defines meta object with component and render function, and a Primary story with a loader that fetches todo data from an external API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport TodoItem from './TodoItem.svelte';\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/svelte/api/csf\n * to learn how to use render functions.\n */\nconst meta: Meta<typeof TodoItem> = {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => ({\n    Component: TodoItem,\n    props: {\n      ...args,\n      ...todo,\n    },\n  }),\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  loaders: [\n    async () => ({\n      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Title for Unattached MDX with Meta\nDESCRIPTION: Demonstrates how to use the Meta component with the title prop to control the location of an unattached MDX file in the sidebar.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\n{/* Override the docs entry's location in the sidebar with title */}\n<Meta title=\"path/to/Introduction\" />\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with npm\nDESCRIPTION: This command uses npm to run the 'test-storybook' script, which executes Storybook tests. It's designed for projects using npm as their package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook\n```\n\n----------------------------------------\n\nTITLE: ArgTypes Options Configuration\nDESCRIPTION: Shows how to specify a set of allowed values for an argType.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  argTypes: {\n    variant: {\n      options: ['primary', 'secondary', 'tertiary']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Angular with TypeScript (CSF 2)\nDESCRIPTION: Creates a default button story for Angular components using TypeScript and CSF 2 format. The story passes args as props to the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Other imports and story implementation\nexport const Default: Story = (args) => ({\n  props: args,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Stories in TypeScript\nDESCRIPTION: TypeScript configuration for Button component stories using Web Components with background parameters. Includes type safety through @storybook/web-components Meta type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  parameters: {\n    backgrounds: {\n      default: 'Light',\n      values: [\n        // 👇 Add a new value\n        { name: 'Gray', value: '#CCC' },\n      ],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Importing Meta from Storybook Addon Docs for Angular\nDESCRIPTION: This snippet imports the Meta component from Storybook's addon-docs package, which is used to define metadata for the story or documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/core/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Ordered Story Loading Configuration in Storybook\nDESCRIPTION: Configuration that loads stories in a specific order using an array of glob patterns, controlling how stories appear in the sidebar.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  stories: [\n    '../src/docs/**/*.mdx', // Load docs first\n    '../src/components/**/*.stories.@(js|jsx|mjs|ts|tsx)', // Then load component stories\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Stories with Theme Provider using withThemeFromJSXProvider\nDESCRIPTION: A decorator that takes a provider component, global styles, and theme objects to wrap stories. It automatically adds a toolbar item for theme switching when multiple themes are provided.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withThemeFromJSXProvider } from '@storybook/addon-themes';\n\nexport const decorators = [\n  withThemeFromJSXProvider({\n    themes: {\n      light: lightTheme,\n      dark: darkTheme,\n    },\n    defaultTheme: 'light',\n    Provider: ThemeProvider,\n    GlobalStyles: CssBaseline,\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Storybook Logger in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Storybook Logger and use it for logging messages at different levels (info, warn, error). It's used for node logging in Storybook projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/node-logger/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { logger } from 'storybook/internal/node-logger';\n\nlogger.info('Info message');\nlogger.warn('Warning message');\nlogger.error('Error message');\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Page Configuration in YAML\nDESCRIPTION: YAML front matter configuration for a documentation page that defines the title and sidebar properties for content about importing stories in tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Import stories in tests\nsidebar:\n  order: 8\n  title: Import stories in tests\n```\n\n----------------------------------------\n\nTITLE: Registering Svelte CSF Addon\nDESCRIPTION: Updates the Storybook configuration file to register the Svelte CSF addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"main-config-svelte-csf-register.md\" />\n```\n\n----------------------------------------\n\nTITLE: CSF Hoist Story Annotations Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates the before and after states of applying the csf-hoist-story-annotations codemod to story definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport const Basic = () => <Button />\nBasic.story = {\n  name: 'foo',\n  parameters: { ... },\n  decorators: [ ... ],\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const Basic = () => <Button />\nBasic.storyName = 'foo';\nBasic.parameters = { ... };\nBasic.decorators = [ ... ];\n```\n\n----------------------------------------\n\nTITLE: Using Unstyled Block for Custom Components in Storybook Docs\nDESCRIPTION: MDX code snippet demonstrating how to wrap custom components with the Unstyled block to prevent default Storybook styles from affecting them.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_96\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Unstyled } from \"@storybook/blocks\";\nimport { MyComponent } from \"./MyComponent\";\n\n# This is a header\n\n<Unstyled>\n  <MyComponent />\n</Unstyled>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fonts in Storybook Preview\nDESCRIPTION: Example of adding custom font references to Storybook's preview-head.html file for applying custom typography to stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/images-and-assets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Illustrating MDX2 Wrapping Behavior\nDESCRIPTION: Demonstrates how MDX2 wraps strings in HTML tags, causing differences in rendering between plain markdown and MDX files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# A header\n\n<div>\n  Some text\n</div>\n\nThe example above will remain as-is in plain markdown, but MDX2 will compile it to:\n\n# A header\n\n<div>\n  <p>Some text</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Legacy Options Addon Configuration\nDESCRIPTION: Old configuration format using the deprecated options addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_163\n\nLANGUAGE: javascript\nCODE:\n```\naddDecorator(\n  withOptions({\n    name: \"Storybook\",\n    url: \"https://storybook.js.org\",\n    goFullScreen: false,\n    addonPanelInRight: true,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Stories\nDESCRIPTION: Imports necessary components from Storybook addons and story files for documentation purposes\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Callout from 'nextra-theme-docs/callout';\nimport { Title, Meta, Story, Canvas } from '@storybook/addon-docs';\nimport * as AccountFormStories from '../components/AccountForm.stories';\nimport * as ButtonStories from '../components/button.stories';\n```\n\n----------------------------------------\n\nTITLE: Storybook Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Storybook documentation page, setting the title, renderer visibility, and sidebar properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Introduction to addons'\nhideRendererSelector: true\nsidebar:\n  order: 7\n  title: Addons\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook for React Vite Using yarn - Shell\nDESCRIPTION: This shell command uses yarn to add the @storybook/react-vite package as a development dependency for a React project. The prerequisite is a project managed with yarn and initialized with a package.json file. The command updates the project's dependencies and should be run at the application root in a terminal.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/react-vite\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook via npx\nDESCRIPTION: This command uses npx to install and initialize Storybook in the current project. It automatically detects the project type and installs necessary dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest init\n```\n\n----------------------------------------\n\nTITLE: Converting Story Indexers to Experimental Indexers in Storybook\nDESCRIPTION: Code diff showing how to migrate from the deprecated storyIndexers to the new experimental_indexers API. The key change is using createIndex instead of indexer and returning indexInputs from parsed CSF files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/main.ts\n\nimport { readFileSync } from 'fs';\nimport { loadCsf } from '@storybook/csf-tools';\n\nexport default {\n-  storyIndexers = (indexers) => {\n-    const indexer = async (fileName, opts) => {\n+  experimental_indexers = (indexers) => {\n+    const createIndex = async (fileName, opts) => {\n      const code = readFileSync(fileName, { encoding: 'utf-8' });\n      const makeTitle = (userTitle) => {\n        // Do something with the auto title retrieved by Storybook\n        return userTitle;\n      };\n\n      // Parse the CSF file with makeTitle as a custom context\n-      return loadCsf(code, { ...compilationOptions, makeTitle, fileName }).parse();\n+      return loadCsf(code, { ...compilationOptions, makeTitle, fileName }).parse().indexInputs;\n    };\n\n    return [\n      {\n        test: /(stories|story)\\.[tj]sx?$/,\n-        indexer,\n+        createIndex,\n      },\n      ...(indexers || []),\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Switching in Storybook\nDESCRIPTION: Setting up the withThemeByClassName decorator in the Storybook preview configuration to enable theme switching.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n-import { Preview } from \"@storybook/your-renderer\";\n+import { Preview, Renderer } from \"@storybook/your-renderer\";\n+import { withThemeByClassName } from \"@storybook/addon-themes\";\n\nimport \"../src/index.css\";\n\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n+ decorators: [\n+  withThemeByClassName<Renderer>({\n+    themes: {\n+      light: \"is-light\",\n+      dark: \"is-dark\",\n+    },\n+    defaultTheme: \"light\",\n+  }),\n+ ]\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Disabling Story Store V7 in Storybook Configuration\nDESCRIPTION: JavaScript configuration to opt-out of Story Store V7 in Storybook's main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  features: {\n    storyStoreV7: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Panels in Storybook 7.0 Addons\nDESCRIPTION: This snippet shows how to add panels in Storybook 7.0 using the new @storybook/manager-api package instead of the deprecated @storybook/addons package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from \"@storybook/manager-api\";\n\naddons.addPanel(\"my-panel\", {\n  title: \"My Panel\",\n  render: ({ active, key }) => <div>My Panel</div>,\n});\n```\n\n----------------------------------------\n\nTITLE: Describing Storybook Docs Utils in Markdown\nDESCRIPTION: This markdown snippet outlines the main purposes of the Storybook Docs Utils, including ArgType extraction, dynamic snippet generation, and user interaction detection. It also notes that this library is widely used across framework packages and should be kept minimal.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/docs-tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Storybook Docs Utils\n\nShared utility functions for frameworks to implement docs:\n\n- ArgType extraction\n- Dynamic snippet generation\n- Is the user using docs or controls?\n\nThis library is used by most framework packages so it and its dependencies should be minimized\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with pnpm\nDESCRIPTION: Command to initialize Storybook version 8.2 using pnpm package manager. This uses pnpm dlx to execute the Storybook init command without requiring a global installation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command-custom-version.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@8.2 init\n```\n\n----------------------------------------\n\nTITLE: Document Screen with GraphQL\nDESCRIPTION: Example React component that fetches data using GraphQL and Apollo Client.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { gql, useQuery } from '@apollo/client';\n\nconst GET_DOCUMENT = gql`\n  query GetDocument {\n    document {\n      title\n      content\n    }\n  }\n`;\n\nexport const DocumentScreen = () => {\n  const { loading, error, data } = useQuery(GET_DOCUMENT);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error loading document</p>;\n  return <DocumentComponent data={data.document} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework in TypeScript\nDESCRIPTION: This TypeScript snippet imports the StorybookConfig type and exports a configuration object for Storybook, tailored for TypeScript projects. It outlines the same framework and story paths as the JavaScript version, with an option to disable tree shaking in the build test. Dependencies include the '@storybook/your-framework' and paths should point to valid story files. The placeholder value needs to be replaced by an actual framework identifier.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-treeshaking.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableTreeShaking: false,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Data in Storybook Stories\nDESCRIPTION: Shows how to import JSON data from an external file into a Storybook story. The JSON file will be automatically parsed and its contents will be available in the 'data' variable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-import-json.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This will automatically be parsed to the contents of `data.json`\nimport data from './data.json';\n```\n\n----------------------------------------\n\nTITLE: Rendering Dark Theme Colors in Storybook using JSX\nDESCRIPTION: This snippet renders the color palette for the dark theme. It iterates through the theme's color properties and creates ColorItem components for each valid color value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ColorPalette>\n  {Object.entries(convert(themes.dark).color).map(([k, v]) => {\n    if (typeof v === 'string' && (v.match(/^#/) || v.match(/^rgb/) || k.match(/color/i))) {\n      return <ColorItem key={k} title={k} colors={{ [k]: v }} />;\n    } else if (typeof v === 'object') {\n      return (\n        <ColorItem\n          key={k}\n          title={k}\n          colors={Object.entries(v).reduce(\n            (acc, [key, value]) =>\n              typeof value === 'string' &&\n              (value.match(/^#/) || value.match(/^rgb/) || key.match(/color/i))\n                ? { ...acc, [key]: value }\n                : acc,\n            {}\n          )}\n        />\n      );\n    }\n    return null;\n  })}\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Index with PNPM\nDESCRIPTION: Executes the test-storybook command with PNPM package manager to generate index JSON file\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-with-index-json.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook --index-json\n```\n\n----------------------------------------\n\nTITLE: Using fn Spy Function for Button Click Actions in Storybook\nDESCRIPTION: Demonstrates how to use the fn utility from storybook/test to mock and spy on a button's onClick handler. This approach allows tracking click events in the action panel and is useful for component testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { fn } from '@storybook/test';\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n    // 👇 Create a spy function that we can use to monitor its usage in the UI\n    onClick: fn(),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Web Components with TypeScript (CSF 2)\nDESCRIPTION: Creates a default button story for Web Components using TypeScript and CSF 2 format. Uses Story type for proper typing and template literals with the html tag to render the custom button element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Other imports and story implementation\n\nexport const Default: Story = ({ primary, backgroundColor, size, label }) =>\n  html`<custom-button ?primary=\"${primary}\" size=\"${size}\" label=\"${label}\"></custom-button>`;\n```\n\n----------------------------------------\n\nTITLE: Composing Stories in JavaScript using destructuring assignment\nDESCRIPTION: This code snippet demonstrates how to compose stories using the composeStories function. It extracts the Primary story from a stories object using object destructuring.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/__mocks__/composeStory.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// THIS IS A MOCK FILE, DO NOT TOUCH\nconst { Primary } = composeStories(stories)\n```\n\n----------------------------------------\n\nTITLE: React Storybook Preview Configuration (TypeScript)\nDESCRIPTION: TypeScript version of React Storybook preview configuration with type-safe decorator implementation. Provides layout wrapping functionality with proper type definitions from @storybook/react.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\n\nimport type { Preview } from '@storybook/react';\n\nconst preview: Preview = {\n  decorators: [\n    (Story, { parameters }) => {\n      const { pageLayout } = parameters;\n      switch (pageLayout) {\n        case 'page':\n          return (\n            <div className=\"page-layout\">\n              <Story />\n            </div>\n          );\n        case 'page-mobile':\n          return (\n            <div className=\"page-mobile-layout\">\n              <Story />\n            </div>\n          );\n        default:\n          return <Story />;\n      }\n    },\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Image Snapshot Testing with Test Runner\nDESCRIPTION: Configuration for running visual regression testing alongside other tests using the test-runner.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { toMatchImageSnapshot } = require('jest-image-snapshot');\n\nexport default {\n  hooks: {\n    test: async ({ testRunner, step }) => {\n      const { describe, it } = testRunner;\n      expect.extend({ toMatchImageSnapshot });\n\n      describe('Image snapshots', () => {\n        it('should match image snapshots', async ({ page, expect }) => {\n          await step('image snapshot', async () => {\n            const image = await page.screenshot();\n            expect(image).toMatchImageSnapshot();\n          });\n        });\n      });\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Dark Theme Backgrounds in Storybook using JSX\nDESCRIPTION: This snippet renders the background color palette for the dark theme. It filters out the 'color' key and creates ColorItem components for each valid background color value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ColorPalette>\n  {Object.entries(convert(themes.dark).background).map(([k,v]) => {\n    if(k === 'color'){\n      return null\n    }\n    if (typeof v === 'string' && (v.match(/^#/) || v.match(/^rgb/) || k.match(/color/i))) {\n      return (\n        <ColorItem\n          key={k}\n          title={k}\n          colors={{ [k]: v }}\n        />\n      );\n    } else if (typeof v === 'object') {\n      const colors = Object.entries(v).reduce((acc, [key, value]) => (typeof value === 'string' && (value.match(/^#/) || value.match(/^rgb/) || key.match(/color/i))) ? {...acc, [key]: value} : acc, {});\n      return (\n        <ColorItem\n          key={k}\n          title={k}\n          colors={colors}\n        />\n      );\n    }\n    return null;\n  })}\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Next.js Router in Storybook\nDESCRIPTION: This snippet shows the default values for the stubbed Next.js router in Storybook. It includes properties like locale, path, and query, which can be overridden using parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Default router\nconst defaultRouter = {\n  // The locale should be configured globally: https://storybook.js.org/docs/essentials/toolbars-and-globals#globals\n  locale: globals?.locale,\n  asPath: '/',\n  basePath: '/',\n  isFallback: false,\n  isLocaleDomain: false,\n  isReady: true,\n  isPreview: false,\n  route: '/',\n  pathname: '/',\n  query: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Example custom-elements.json Structure\nDESCRIPTION: Example of a custom-elements.json file that defines a web component with properties, methods, and events. This format follows schema version 1.0.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": \"1.0.0\",\n  \"readme\": \"\",\n  \"modules\": [\n    {\n      \"kind\": \"javascript-module\",\n      \"path\": \"src/my-element.js\",\n      \"declarations\": [\n        {\n          \"kind\": \"class\",\n          \"description\": \"\",\n          \"name\": \"MyElement\",\n          \"members\": [\n            {\n              \"kind\": \"field\",\n              \"name\": \"disabled\"\n            },\n            {\n              \"kind\": \"method\",\n              \"name\": \"fire\"\n            }\n          ],\n          \"events\": [\n            {\n              \"name\": \"disabled-changed\",\n              \"type\": {\n                \"text\": \"Event\"\n              }\n            }\n          ],\n          \"superclass\": {\n            \"name\": \"HTMLElement\"\n          },\n          \"tagName\": \"my-element\"\n        }\n      ],\n      \"exports\": [\n        {\n          \"kind\": \"custom-element-definition\",\n          \"name\": \"my-element\",\n          \"declaration\": {\n            \"name\": \"MyElement\",\n            \"module\": \"src/my-element.js\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack in Storybook Preset Addon\nDESCRIPTION: This snippet shows how to use the webpackFinal API in a Storybook preset addon to customize the Webpack configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpackFinal: async (config, { configType }) => {\n    // customize the Webpack config here\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint with PNPM\nDESCRIPTION: Installs ESLint as a development dependency using PNPM package manager. The --save-dev flag ensures ESLint is added to devDependencies in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev eslint\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in HTML with TypeScript\nDESCRIPTION: This snippet demonstrates creating Storybook stories for a button in HTML using TypeScript. It creates a button element with specific classes and text content, properly typed with Storybook's Meta and StoryObj interfaces.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/html';\n\nconst meta: Meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n};\n\nexport default meta;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: StoryObj = {\n  render: () => {\n    const btn = document.createElement('button');\n    btn.innerText = 'Button';\n\n    btn.className = [\n      'storybook-button',\n      'storybook-button--medium',\n      'storybook-button--primary',\n    ].join(' ');\n\n    return btn;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Docgen Options for Storybook Docs\nDESCRIPTION: Advanced configuration for Storybook Docs with vue-docgen-api options, including path aliases to properly resolve Vue component imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as path from 'path';\n\nexport default {\n  addons: [\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        vueDocgenOptions: {\n          alias: {\n            '@': path.resolve(__dirname, '../'),\n          },\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Storybook ESLint Rules in Traditional Format (JavaScript)\nDESCRIPTION: Demonstrates how to override or disable specific Storybook ESLint rules for story files. This configuration allows for fine-tuning the linting process for Storybook-specific files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      // 👇 This should match the `stories` property in .storybook/main.js|ts\n      \"files\": ['**/*.stories.@(ts|tsx|js|jsx|mjs|cjs)'],\n      \"rules\": {\n        // 👇 Enable this rule\n        'storybook/csf-component': 'error',\n        // 👇 Disable this rule\n        'storybook/default-exports': 'off',\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stories and Using Meta Component in Storybook\nDESCRIPTION: This snippet imports all stories from A.stories and uses the Meta component to reference them in the documentation. The Meta component is used to provide context and configuration for the documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/MetaOf.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as AStories from '../A.stories';\n\n<Meta of={AStories} />\n```\n\n----------------------------------------\n\nTITLE: Consuming Globals in Stories\nDESCRIPTION: Demonstrates how to access and use global values directly within a story component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const StoryWithLocale = (args, { globals: { locale } }) => {\n  const label = locale === 'en' ? 'Hello!' : '¡Hola!';\n  return <Button {...args}>{label}</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Vite Framework\nDESCRIPTION: Commands for migrating from Svelte webpack5 to Svelte Vite\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @storybook/svelte-webpack5\n# or\nyarn remove @storybook/svelte-webpack5\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @storybook/svelte-vite\n# or\nyarn add -D @storybook/svelte-vite\n```\n\n----------------------------------------\n\nTITLE: Angular 7 TypeScript Configuration\nDESCRIPTION: TypeScript configuration paths for resolving core-js conflicts in Angular 7\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_158\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"core-js/es7/reflect\": [\n        \"node_modules/core-js/proposals/reflect-metadata\"\n      ],\n      \"core-js/es6/*\": [\"node_modules/core-js/es\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Storybook Button Stories with Render Function (JavaScript)\nDESCRIPTION: Defines stories for a Button Vue component in Storybook JavaScript with a custom render function. The render returns a setup-driven template, binding all args to the Vue Button component for reactivity. Useful for advanced or dynamic story rendering in Storybook Vue setups. Requires Vue, Button component, Storybook/vue3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Storybook Welcome Page with CSS\nDESCRIPTION: This CSS snippet provides styles for the Storybook welcome page, including layout, spacing, and responsive design for various screen sizes. It defines styles for sections, grids, social links, and an addon showcase.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/ts/Configure.mdx#2025-04-22_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n  .sb-container {\n    margin-bottom: 48px;\n  }\n\n  .sb-section {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    gap: 20px;\n  }\n\n  img {\n    object-fit: cover;\n  }\n\n  .sb-section-title {\n    margin-bottom: 32px;\n  }\n\n  .sb-section a:not(h1 a, h2 a, h3 a) {\n    font-size: 14px;\n  }\n\n  .sb-section-item, .sb-grid-item {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .sb-section-item-heading {\n    padding-top: 20px !important;\n    padding-bottom: 5px !important;\n    margin: 0 !important;\n  }\n  .sb-section-item-paragraph {\n    margin: 0;\n    padding-bottom: 10px;\n  }\n\n  .sb-chevron {\n    margin-left: 5px;\n  }\n\n  .sb-features-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 32px 20px;\n  }\n\n  .sb-socials {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  .sb-socials p {\n    margin-bottom: 10px;\n  }\n\n  .sb-explore-image {\n    max-height: 32px;\n    align-self: flex-start;\n  }\n\n  .sb-addon {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    position: relative;\n    background-color: #EEF3F8;\n    border-radius: 5px;\n    border: 1px solid rgba(0, 0, 0, 0.05);\n    background: #EEF3F8;\n    height: 180px;\n    margin-bottom: 48px;\n    overflow: hidden;\n  }\n\n  .sb-addon-text {\n    padding-left: 48px;\n    max-width: 240px;\n  }\n\n  .sb-addon-text h4 {\n    padding-top: 0px;\n  }\n\n  .sb-addon-img {\n    position: absolute;\n    left: 345px;\n    top: 0;\n    height: 100%;\n    width: 200%;\n    overflow: hidden;\n  }\n\n  .sb-addon-img img {\n    width: 650px;\n    transform: rotate(-15deg);\n    margin-left: 40px;\n    margin-top: -72px;\n    box-shadow: 0 0 1px rgba(255, 255, 255, 0);\n    backface-visibility: hidden;\n  }\n\n  @media screen and (max-width: 800px) {\n    .sb-addon-img {\n      left: 300px;\n    }\n  }\n\n  @media screen and (max-width: 600px) {\n    .sb-section {\n      flex-direction: column;\n    }\n\n    .sb-features-grid {\n      grid-template-columns: repeat(1, 1fr);\n    }\n\n    .sb-socials {\n      grid-template-columns: repeat(2, 1fr);\n    }\n\n    .sb-addon {\n      height: 280px;\n      align-items: flex-start;\n      padding-top: 32px;\n      overflow: hidden;\n    }\n\n    .sb-addon-text {\n      padding-left: 24px;\n    }\n\n    .sb-addon-img {\n      right: 0;\n      left: 0;\n      top: 130px;\n      bottom: 0;\n      overflow: hidden;\n      height: auto;\n      width: 124%;\n    }\n\n    .sb-addon-img img {\n      width: 1200px;\n      transform: rotate(-12deg);\n      margin-left: 0;\n      margin-top: 48px;\n      margin-bottom: -40px;\n      margin-left: -24px;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Stories for MyForm in TypeScript\nDESCRIPTION: This snippet creates Storybook stories for the MyForm component using TypeScript. It explicitly types the meta object and includes tests for unauthenticated scenarios and navigation actions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-mock.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { expect, fireEvent, userEvent, within } from 'storybook/test';\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { redirect, getRouter } from '@storybook/nextjs/navigation.mock';\n\nimport MyForm from './my-form';\n\nconst meta: Meta<typeof MyForm> = {\n  component: MyForm,\n  parameters: {\n    nextjs: {\n      // 👇 As in the Next.js application, next/navigation only works using App Router\n      appDirectory: true,\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof MyForm>;\n\nexport const Unauthenticated: Story = {\n  async play() {\n    // 👇 Assert that your component called redirect()\n    await expect(redirect).toHaveBeenCalledWith('/login', 'replace');\n  },\n};\n\nexport const GoBack: Story = {\n  async play({ canvasElement }) {\n    const canvas = within(canvasElement);\n    const backBtn = await canvas.findByText('Go back');\n\n    await userEvent.click(backBtn);\n    // 👇 Assert that your component called back()\n    await expect(getRouter().back).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Project Annotations with Storybook for Svelte in TypeScript\nDESCRIPTION: This script configures project annotations for a Svelte application using TypeScript with Storybook. It imports necessary modules from Vitest and sets annotations, using a11y and optional project annotations. It mentions the possibility to switch to `@storybook/sveltekit` for SvelteKit projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n\n// Replace @storybook/svelte with @storybook/sveltekit if you are using SvelteKit\nimport { setProjectAnnotations } from '@storybook/svelte';\n\n// Import the a11y addon annotations\nimport * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';\n\n// Optionally import your own annotations\nimport * as projectAnnotations from './preview';\n\nconst project = setProjectAnnotations([\n  // Add the a11y addon annotations\n  a11yAddonAnnotations,\n  projectAnnotations,\n]);\n\nbeforeAll(project.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Canvas with Additional Actions Example\nDESCRIPTION: Example showing how to add custom actions to the Canvas component with a GitHub link button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, Canvas, SourceState } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n{/* With an additional action */}\n<Canvas\n  additionalActions={[\n    {\n      title: 'Open in GitHub',\n      onClick: () => {\n        window.open(\n          'https://github.com/storybookjs/storybook/blob/next/code/ui/blocks/src/examples/Button.stories.tsx',\n          '_blank'\n        );\n      },\n    }\n  ]}\n  of={ButtonStories.Primary}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Reset in Web Components Storybook (JavaScript)\nDESCRIPTION: Web Components implementation using JavaScript to demonstrate highlight reset functionality. Uses standard decorator pattern with the useChannel API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-highlight-reset.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n\nexport default {\n  component: 'my-component',\n};\n\nexport const ResetHighlight = {\n  decorators: [\n    (story) => {\n      const emit = useChannel({});\n      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements\n      emit(HIGHLIGHT, {\n        elements: ['header', 'section', 'footer'],\n      });\n      return story();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Solid with TypeScript 4.9 Syntax\nDESCRIPTION: Creates a Storybook story for a Solid.js List component using TypeScript 4.9 with 'satisfies' operator. It imports the Unchecked story from ListItem stories and composes them in the render function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { List } from './List';\n\n//👇 Instead of importing ListItem, we import the stories\nimport { Unchecked } from './ListItem.stories';\n\nexport const meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OneItem: Story = {\n  render: (args) => (\n    <List {...args}>\n      <Unchecked {...Unchecked.args} />\n    </List>\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Svelte Framework Configuration\nDESCRIPTION: Diff showing changes needed in Storybook configuration when migrating from webpack5 to Vite for Svelte\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  framework: {\n-    name: '@storybook/svelte-webpack5'\n+    name: '@storybook/svelte-vite',\n  },\n  // ...other configuration\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Histogram Story Configuration\nDESCRIPTION: Defines a Storybook story for a Vue Histogram component with render function and props configuration. Includes setup for data binding and component template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype Story = StoryObj<typeof Histogram>;\n\nexport const Default: Story = {\n  render: (args) => ({\n    components: { Histogram },\n    setup() {\n      return { args };\n    },\n    template: '<Histogram v-bind=\"args\" />',\n  }),\n  args: {\n    dataType: 'latency',\n    showHistogramLabels: true,\n    histogramAccentColor: '#1EA7FD',\n    label: 'Latency distribution',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Controls for Specific Properties\nDESCRIPTION: Shows how to disable controls for specific properties in Storybook. This example disables the control for the 'foo' property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Components/MyComponent',\n  component: MyComponent,\n  argTypes: {\n    foo: {\n      control: false\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Storybook Story with Figma Link (TS 4.9+)\nDESCRIPTION: Defines a Storybook story for a React component (`MyComponent`) using TypeScript 4.9+ features. It imports types from `@storybook/react` and the component. It utilizes the `satisfies` keyword for improved type checking of the `meta` object and exports an `Example` story with parameters linking to a Figma design file. Requires `@storybook/react`, the React component, and TypeScript 4.9 or newer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts|tsx\" renderer=\"react\" language=\"ts-4-9\"\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\n// More on default export: https://storybook.js.org/docs/writing-stories/#default-export\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Svelte Storybook Story with CSF\nDESCRIPTION: Svelte Component Story Format implementation using TypeScript. Demonstrates both the Svelte-specific CSF format and standard CSF approach.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n\tconst { Story } = defineMeta({\n\t\tcomponent: MyComponent,\n\t});\n</script>\n\n<Story name=\"WithAnImage\">\n  <MyComponent\n    src=\"https://storybook.js.org/images/placeholders/350x150.png\"\n    alt=\"My CDN placeholder\"\n  />\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for React Table Component and Storybook\nDESCRIPTION: This snippet imports necessary modules from React, Storybook, and local components. It also includes Flow type imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.flow-stories.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @flow\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { withInfo } from '@storybook/addon-info';\n\nimport TableComponent from '../components/TableComponent';\n\nimport type { JssClasses } from '../types';\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Essentials with Yarn (Shell)\nDESCRIPTION: This command employs the Yarn package manager to install the '@storybook/addon-essentials' package, adding it to the `devDependencies` section of the `package.json` file. Requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-essentials-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/addon-essentials\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in TypeScript React\nDESCRIPTION: Shows how to import the Button component and icons from Storybook libraries. This is essential for using the Button component in a React project with TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@storybook/components';\n\n// If you would like to use icons, please import them from the icons library\nimport { FaceHappyIcon, HeartIcon } from '@storybook/icons'\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Next.js package with pnpm\nDESCRIPTION: This command installs the @storybook/nextjs package as a development dependency using pnpm. It's an alternative package manager for setting up Storybook in a Next.js project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/nextjs\n```\n\n----------------------------------------\n\nTITLE: Rendering Stories from Multiple Sources\nDESCRIPTION: Demonstrates how to render stories from multiple CSF files in the same MDX document using the meta prop.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\nimport * as HeaderStories from './Header.stories';\n\n<Meta of={ButtonStories} />\n\n{/* Although this MDX file is largely concerned with Button,\n    it can render Header stories too */}\n<Story of={HeaderStories.LoggedIn} meta={HeaderStories} />\n```\n\n----------------------------------------\n\nTITLE: Upgrading markdown-to-jsx in Storybook\nDESCRIPTION: Upgrade markdown-to-jsx to version 6.11.4 to address security issues.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpgrade markdown-to-jsx to 6.11.4\n```\n\n----------------------------------------\n\nTITLE: Button Component with JSDoc Comments\nDESCRIPTION: Example of a Button component with JSDoc documentation comments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * The Button component shows a button\n */\nexport const Button = () => <button>Click me</button>;\n```\n\n----------------------------------------\n\nTITLE: Running CSF Hoist Story Annotations Codemod\nDESCRIPTION: This command runs the csf-hoist-story-annotations codemod using jscodeshift. It updates the story annotations to use the new hoisted format in CSF.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/jscodeshift -t ./node_modules/@storybook/codemod/dist/transforms/csf-hoist-story-annotations.js . --ignore-pattern \"node_modules|dist\" --extensions=js\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Vue Storybook (JavaScript)\nDESCRIPTION: Shows how to set up a story in JavaScript for a Vue component in Storybook. The accessibility checks are disabled by setting 'manual' to true under globals.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport MyComponent from './MyComponent.vue';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const NonA11yStory = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining URL Collections as Sidebar Links in Storybook\nDESCRIPTION: Creating a URL collection file with named exports that will be transformed into sidebar links. Each export name becomes a story title, and the value serves as the unique identifier.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {};\n\nexport const DesignTokens = 'https://www.designtokens.org/';\nexport const CobaltUI = 'https://cobalt-ui.pages.dev/';\nexport const MiseEnMode = 'https://mode.place/';\nexport const IndexerAPI = 'https://github.com/storybookjs/storybook/discussions/23176';\n```\n\n----------------------------------------\n\nTITLE: Importing Description Component\nDESCRIPTION: Shows how to import the Description component from Storybook addon-docs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Description } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Vue in TypeScript (4.9+)\nDESCRIPTION: This snippet shows how to create stories for a Vue Button component using TypeScript 4.9+. It sets up the component metadata with type inference, defines parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar Visibility in Storybook Manager\nDESCRIPTION: Demonstrates how to use the renamed showToolbar option to hide the Storybook toolbar in the manager configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/manager.js\nimport { addons } from \"@storybook/addons\";\n\naddons.setConfig({\n  showToolbar: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Ejecting Test Storybook Configuration with pnpm\nDESCRIPTION: This command uses pnpm to run the test-storybook script with the --eject flag, allowing for ejection of the Storybook test configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-eject-config.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook --eject\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Test Runner for Storybook\nDESCRIPTION: JavaScript implementation of Storybook test runner configuration with hooks for test lifecycle management. Includes setup, preVisit, and postVisit hooks with utilities for getting story context and waiting for page readiness.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-helper-function.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getStoryContext, waitForPageReady } = require('@storybook/test-runner');\n\nmodule.exports = {\n  // Hook that is executed before the test runner starts running tests\n  setup() {\n    // Add your configuration here.\n  },\n  /* Hook to execute before a story is initially visited before being rendered in the browser.\n   * The page argument is the Playwright's page object for the story.\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async preVisit(page, context) {\n    // Add your configuration here.\n  },\n  /* Hook to execute after a story is visited and fully rendered.\n   * The page argument is the Playwright's page object for the story\n   * The context argument is a Storybook object containing the story's id, title, and name.\n   */\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await getStoryContext(page, context);\n\n    // This utility function is designed for image snapshot testing. It will wait for the page to be fully loaded, including all the async items (e.g., images, fonts, etc.).\n    await waitForPageReady(page);\n\n    // Add your configuration here.\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Solid\nDESCRIPTION: Vite configuration setup for Solid.js projects using vite-plugin-solid.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport solid from \"vite-plugin-solid\";\n\nexport default defineConfig({\n  plugins: [solid()],\n});\n```\n\n----------------------------------------\n\nTITLE: Story Migration Example for Svelte CSF v5\nDESCRIPTION: Example showing how to migrate stories to use the new defineMeta function and Story component in Svelte CSF v5.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    title: 'Example/Button',\n    component: Button,\n    parameters: {\n      layout: 'centered'\n    }\n  });\n</script>\n\n<Story name=\"Primary\" args={{ primary: true, label: 'Button' }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript\nDESCRIPTION: Sets up Button component story configuration using TypeScript with explicit Meta type. Includes accessibility test parameter placeholder and component metadata.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-remove.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Meta } from '@storybook/your-renderer';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  parameters: {\n    // 👇 Remove this once all stories pass accessibility tests\n    // a11y: { test: 'todo' },\n  },\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Parameter in CSF Format\nDESCRIPTION: Shows how to set up the component parameter using Component Story Format (CSF) to enable automatic documentation generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Badge } from './Badge';\n\nexport default {\n  title: 'Path/to/Badge',\n  component: Badge,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet provides a JavaScript configuration for setting up Storybook. It requires replacing 'your-framework' with the desired framework, such as 'react-webpack5' or 'vue3-vite'. The configuration includes paths to story files and an option to disable default Webpack settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-webpack-defaults.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableWebpackDefaults: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Named `addons` Export in Storybook JavaScript\nDESCRIPTION: Shows the correct way to import the `addons` object in Storybook 7. The default export from `@storybook/addons` has been removed; developers must now use the named export `{ addons }`. This change is backwards-compatible with older Storybook versions (6.0+).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_84\n\nLANGUAGE: js\nCODE:\n```\nimport { addons } from \"@storybook/addons\";\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Stories in TypeScript\nDESCRIPTION: TypeScript configuration for Web Components Button stories with type-safe metadata configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n  parameters: {\n    docs: {\n      controls: { exclude: ['style'] },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte with TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Svelte Button component using TypeScript 4.9. It uses the 'satisfies' keyword for type checking, imports necessary types, and defines a story with props and args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\nimport { action } from 'storybook/actions';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  render: (args) => ({\n    Component: Button,\n    props: args,\n  }),\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Highlight Channel in React (JavaScript)\nDESCRIPTION: Shows how to implement the highlight channel in React Storybook using JavaScript. This example creates a story decorator that uses useChannel to emit a highlight event targeting specific HTML elements with blue double-lined borders.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-addon-custom-style.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from 'storybook/preview-api';\nimport { HIGHLIGHT } from 'storybook/highlight';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const StyledHighlight = {\n  decorators: [\n    (storyFn) => {\n      const emit = useChannel({});\n      emit(HIGHLIGHT, {\n        elements: ['h2', 'a', '.storybook-button'],\n        color: 'blue',\n        style: 'double', // 'dotted' | 'dashed' | 'solid' | 'double'\n      });\n      return storyFn();\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Icons Component API Usage in Storybook 7 TypeScript\nDESCRIPTION: Illustrates the API change for the `Icons` component in Storybook 7 using a diff format. The `icon` prop type changed from `IconKey | undefined` to `IconType`, and the optional `symbol` prop (`IconKey | undefined`) was replaced with an optional boolean `useSymbol`. Addon authors using this component need to update their code accordingly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_85\n\nLANGUAGE: diff\nCODE:\n```\nexport interface IconsProps extends ComponentProps<typeof Svg> {\n-  icon?: IconKey;\n-  symbol?: IconKey;\n+  icon: IconType;\n+  useSymbol?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Git Branch Strategy with Mermaid\nDESCRIPTION: A mermaid diagram showing the relationship between different branches (main, next, latest-release, next-release) in the Storybook release process, including version tags and merge flows.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'gitGraph': { 'showCommitLabel': false } } }%%\ngitGraph\n    commit\n    branch latest-release\n    branch next\n    commit\n    branch next-release\n    commit\n    commit tag: \"7.1.0-alpha.18\"\n    checkout next\n    merge next-release\n    commit id: \"bugfix\"\n    commit\n    checkout latest-release\n    cherry-pick id: \"bugfix\"\n    commit tag: \"7.0.20\"\n    checkout next-release\n    merge next\n    commit tag: \"7.1.0-alpha.19\"\n    checkout next\n    merge next-release\n    commit\n    checkout main\n    merge latest-release\n```\n\n----------------------------------------\n\nTITLE: Ejecting Test Storybook Configuration with npm\nDESCRIPTION: This command uses npm to run the test-storybook script with the --eject flag, which ejects the Storybook test configuration for customization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-eject-config.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test-storybook -- --eject\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Locations in Storybook Main JavaScript\nDESCRIPTION: This JavaScript code configures the location of JSON story files in the Storybook main configuration file. It uses a glob pattern to specify the story file locations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  stories: ['../stories/**/*.stories.json'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte List Stories with CSF in JavaScript\nDESCRIPTION: Configures a Storybook story for a Svelte List component using the Component Story Format (CSF) in JavaScript. It imports the List component and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from './List.svelte';\n\nexport default {\n  component: List,\n};\n\n// Always an empty list, not super interesting\nexport const Empty = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Docgen in Storybook\nDESCRIPTION: JavaScript configuration for setting up React Docgen in Storybook, which is used to populate props tables in docs view and controls panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    reactDocgen: 'react-docgen`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Table of Contents in Storybook\nDESCRIPTION: Extends the Storybook UI configuration to enable the table of contents feature for documentation pages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  docs: {\n    toc: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jest Snapshot Serializer for React ARIA IDs in JavaScript\nDESCRIPTION: This code defines a custom Jest snapshot serializer that replaces dynamic React ARIA IDs with static IDs. It uses the jest-serializer-html package and applies a regular expression to normalize IDs, ensuring consistent snapshots for HTML elements with dynamic ARIA attributes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-snapshot-serializer.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The jest-serializer-html package is available as a dependency of the test-runner\nconst jestSerializerHtml = require('jest-serializer-html');\n\nconst DYNAMIC_ID_PATTERN = /\"react-aria-\\d+(\\.\\d+)?\"/g;\n\nmodule.exports = {\n  /*\n   * The test-runner calls the serialize function when the test reaches the expect(SomeHTMLElement).toMatchSnapshot().\n   * It will replace all dynamic IDs with a static ID so that the snapshot is consistent.\n   * For instance, from <label id=\"react-aria970235672-:rl:\" for=\"react-aria970235672-:rk:\">Favorite color</label> to <label id=\"react-mocked_id\" for=\"react-mocked_id\">Favorite color</label>\n   */\n  serialize(val) {\n    const withFixedIds = val.replace(DYNAMIC_ID_PATTERN, 'mocked_id');\n    return jestSerializerHtml.print(withFixedIds);\n  },\n  test(val) {\n    return jestSerializerHtml.test(val);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Storybook Story with Figma Link (TS)\nDESCRIPTION: Defines a Storybook story for a Web Component identified by the tag name `'my-component'` using TypeScript. It imports types from `@storybook/web-components`, defines typed metadata (`meta`) specifying the component tag name string, and exports an `Example` story with parameters linking to a Figma design file. Requires `@storybook/web-components` and the Web Component to be defined and registered globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"MyComponent.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Example: Story = {\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/Sample-File',\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Options in Storybook Preview\nDESCRIPTION: This snippet demonstrates how to configure viewport options in the Storybook preview file, including setting available viewports and the initial viewport.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\n\nimport { INITIAL_VIEWPORTS } from '@storybook/addon-viewport';\n\nexport const parameters = {\n  viewport: {\n    viewports: INITIAL_VIEWPORTS,\n  },\n};\n\nexport const globalTypes = {\n  viewport: {\n    defaultValue: 'iphone14',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Example in Storybook\nDESCRIPTION: A basic example of using MDX in Storybook to create documentation with an embedded Checkbox component story. This demonstrates the combination of markdown documentation with JSX components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, Canvas } from '@storybook/addon-docs';\nimport { Checkbox } from './Checkbox';\n\n<Meta title=\"MDX/Checkbox\" component={Checkbox} />\n\n# Checkbox\n\nWith `MDX` we can define a story for `Checkbox` right in the middle of our\nmarkdown documentation.\n\n<Canvas>\n  <Story name=\"all checkboxes\">\n    <form>\n      <Checkbox id=\"Unchecked\" label=\"Unchecked\" />\n      <Checkbox id=\"Checked\" label=\"Checked\" checked />\n      <Checkbox appearance=\"secondary\" id=\"second\" label=\"Secondary\" checked />\n    </form>\n  </Story>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Test Runner Jest Config for Custom Serializer\nDESCRIPTION: Jest configuration to enable custom snapshot serializer implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  snapshotSerializers: ['<rootDir>/snapshot-serializer.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Vue with JavaScript\nDESCRIPTION: Vue button component using JavaScript with props definitions for isDisabled and label. Includes reactive properties setup using Vue 3's Composition API with setup function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <button type=\"button\" :disabled=\"isDisabled\">{{ label }}</button>\n</template>\n\n<script>\n  import { reactive } from 'vue';\n\n  export default {\n    name: 'button',\n    props: {\n      /**\n       * Checks if the button should be disabled\n       */\n      isDisabled: {\n        type: Boolean,\n        default: false,\n        required: true,\n      },\n      /**\n       * The display label of the button\n       */\n      label: {\n        type: String,\n        default: 'One',\n        required: true,\n      },\n    },\n    setup(props) {\n      props = reactive(props);\n      return {\n        /**\n         * What will be returned here will available to the component\n         * Functions referenced here will act like methods\n         */\n      };\n      //\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Storybook Version 8.6.1-8.6.12 Release Notes\nDESCRIPTION: Comprehensive changelog entries documenting version updates, bug fixes, and improvements across multiple Storybook components including CLI, Core, Angular, Next.js, React, and Svelte integrations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 8.6.12\n\n- CLI: Only install Visual Test Addon if test feature is selected - [#30966](https://github.com/storybookjs/storybook/pull/30966), thanks @ghengeveld!\n- Core: Fix telemetry error on Storybook UI - [#30953](https://github.com/storybookjs/storybook/pull/30953), thanks @yannbf!\n- Ember: Fix `ember-template-compiler` import for ember 6+ - [#30682](https://github.com/storybookjs/storybook/pull/30682), thanks @leoeuclids!\n- Next: Upgrade vite-plugin-storybook-nextjs for Next v14 compatibility - [#30997](https://github.com/storybookjs/storybook/pull/30997), thanks @kasperpeulen!\n- Svelte: Exclude `node_modules` from docgen - [#30981](https://github.com/storybookjs/storybook/pull/30981), thanks @JReinhold!\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories with Framework-Agnostic Approach\nDESCRIPTION: This snippet demonstrates a common approach to create Button stories that works across different frameworks. It includes configuration for the component reference, an example Primary story with arguments, and background color parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Story with TypeScript 4.9\nDESCRIPTION: This snippet shows a generic way to configure a Storybook story for a Page component using TypeScript 4.9. It imports the necessary types and component, and sets up the story configuration with type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Page } from './Page';\n\nconst meta = {\n  component: Page,\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n} satisfies Meta<typeof Page>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Preact with Vite in JavaScript\nDESCRIPTION: This snippet shows how to configure Storybook for Preact using Vite as the bundler in JavaScript. It exports a default configuration object specifying the framework name and options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/preact-vite',\n    options: {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Canvas Component in TypeScript\nDESCRIPTION: TypeScript implementation for customizing the Canvas component in Storybook's documentation. Uses type-safe Preview interface and includes framework-specific import. Requires replacing 'your-framework' with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-canvas.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nimport { MyCanvas } from './MyCanvas';\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      components: {\n        Canvas: MyCanvas,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Inserting React Component in Markdown for Storybook Documentation\nDESCRIPTION: This code snippet inserts a custom React component called HomeRenderers into the Markdown document. This component likely renders a list or grid of supported frameworks in Storybook's documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<HomeRenderers />\n```\n\n----------------------------------------\n\nTITLE: Register Interactions Addon in Storybook Configuration\nDESCRIPTION: Configuration code to register the interactions addon in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/interactions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-interactions'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Controls for Svelte Gizmo Component with CSF Module Format\nDESCRIPTION: This Svelte script defines Storybook controls for a Svelte Gizmo component using the defineMeta helper. It includes a comprehensive set of control types with specific configuration options for each property that can be manipulated in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Gizmo from './Gizmo.svelte';\n\n  const { Story } = defineMeta({\n    component: Gizmo,\n    argTypes: {\n      canRotate: {\n        control: 'boolean',\n      },\n      width: {\n        control: { type: 'number', min: 400, max: 1200, step: 50 },\n      },\n      height: {\n        control: { type: 'range', min: 200, max: 1500, step: 50 },\n      },\n      rawData: {\n        control: 'object',\n      },\n      coordinates: {\n        control: 'object',\n      },\n      texture: {\n        control: {\n          type: 'file',\n          accept: '.png',\n        },\n      },\n      position: {\n        control: 'radio',\n        options: ['left', 'right', 'center'],\n      },\n      rotationAxis: {\n        control: 'check',\n        options: ['x', 'y', 'z'],\n      },\n      scaling: {\n        control: 'select',\n        options: [10, 50, 75, 100, 200],\n      },\n      label: {\n        control: 'text',\n      },\n      meshColors: {\n        control: {\n          type: 'color',\n          presetColors: ['#ff0000', '#00ff00', '#0000ff'],\n        },\n      },\n      revisionDate: {\n        control: 'date',\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Component Stories in JavaScript\nDESCRIPTION: Demonstrates a framework-agnostic approach to defining Storybook metadata in JavaScript. Imports the Example component and configures argTypes with a description for the 'value' property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    value: {\n      description: 'The value of the slider',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Background Values in TypeScript\nDESCRIPTION: Sets up background color options in Storybook using the values array syntax in TypeScript with proper typing. This configuration imports the Preview type from Storybook and defines two background color presets that can be used across stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-migrate-backgrounds-globals.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'twitter', value: '#00aced' },\n        { name: 'facebook', value: '#3b5998' },\n      ],\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Ignore for Storybook (Plain Text)\nDESCRIPTION: Adds an exception to the ESLint ignore file to ensure that the .storybook directory is linted. This is crucial for catching configuration errors in Storybook setup files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n!.storybook\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Vue with JavaScript (CSF 2)\nDESCRIPTION: Creates a default button story for Vue components using JavaScript and CSF 2 format. Uses Vue's setup function to pass args to the component and includes the component in the template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Other imports and story implementation\nexport const Default = (args) => ({\n  components: { Button },\n  setup() {\n    return { args };\n  },\n  template: '<Button v-bind=\"args\" />',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Stories in JavaScript for Storybook\nDESCRIPTION: This snippet shows how to create a Storybook story for a Checkbox component using JavaScript. It demonstrates the use of the useArgs hook to manage the checkbox state and update it dynamically.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-args-within-story.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useArgs } from 'storybook/preview-api';\nimport { Checkbox } from './checkbox';\n\nexport default {\n  title: 'Inputs/Checkbox',\n  component: Checkbox,\n};\n\nexport const Example = {\n  args: {\n    isChecked: false,\n    label: 'Try Me!',\n  },\n  /**\n   * 👇 To avoid linting issues, it is recommended to use a function with a capitalized name.\n   * If you are not concerned with linting, you may use an arrow function.\n   */\n  render: function Render(args) {\n    const [{ isChecked }, updateArgs] = useArgs();\n\n    function onChange() {\n      updateArgs({ isChecked: !isChecked });\n    }\n\n    return <Checkbox {...args} onChange={onChange} isChecked={isChecked} />;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Deployed Storybook Tests\nDESCRIPTION: JavaScript configuration for adding authentication headers to Storybook test runner requests for secure deployments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async getHttpHeaders(url) {\n    return {\n      Authorization: 'Bearer YOUR_TOKEN_HERE',\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Component in JSX\nDESCRIPTION: Uses the Meta component to define documentation for the imported stories. The 'of' prop is used to reference the imported stories, and a custom name is provided.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingDefaultName.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={BStories} name=\"Docs\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/preact-vite with pnpm\nDESCRIPTION: This command installs the @storybook/preact-vite package as a dev dependency using pnpm. It's used to set up Storybook for Preact projects with Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/preact-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Coverage Provider\nDESCRIPTION: TypeScript configuration for setting the coverage provider in Vitest.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  // ...\n  test: {\n    // ...\n    coverage: {\n      // ...\n      provider: 'istanbul', // 'v8' is the default\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Svelte-Vite with pnpm\nDESCRIPTION: Installs @storybook/svelte-vite as a development dependency using pnpm package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/svelte-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Catalog Metadata in package.json\nDESCRIPTION: Specifies the integration catalog metadata for a Storybook addon, including display name, supported frameworks, icon, and searchable keywords.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-storybook-addon\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My first storybook addon\",\n  \"author\": \"Your Name\",\n  \"storybook\": {\n    \"displayName\": \"My Storybook Addon\",\n    \"unsupportedFrameworks\": [\"react-native\"],\n    \"icon\": \"https://yoursite.com/link-to-your-icon.png\"\n  },\n  \"keywords\": [\"storybook-addons\", \"appearance\", \"style\", \"css\", \"layout\", \"debug\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Emoji Button Story in React JSX\nDESCRIPTION: This story creates a Button component with emoji content and an onClick action.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf.txt#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nexport const emoji = () => (\n  <Button onClick={action(\"clicked\")}>\n    <span role=\"img\" aria-label=\"so cool\">\n      😀 😎 👍 💯\n    </span>\n  </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Framework Render Function Template\nDESCRIPTION: Template for implementing a framework-specific render function\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function renderToDOM({ storyFn, kind, name, showMain, showError }, element) {\n  const renderElement = storyFn();\n  // Framework specific rendering logic\n}\n```\n\n----------------------------------------\n\nTITLE: Using the new addons API with composition in Storybook 3.2.x\nDESCRIPTION: Example of using the updated Info and Notes addons with the new API introduced in 3.2.x, demonstrating the composition pattern with withInfo and withNotes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_174\n\nLANGUAGE: javascript\nCODE:\n```\nstoriesOf(\"composition\", module).add(\n  \"new addons api\",\n  withInfo(\"see Notes panel for composition info\")(\n    withNotes({ text: \"Composition: Info(Notes())\" })((context) => (\n      <MyComponent name={context.story} />\n    ))\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Stories and Configuring Meta Component in JavaScript\nDESCRIPTION: This snippet imports all stories from the A.stories.js file and configures the Meta component to generate documentation for these stories. The Meta component is a key part of Storybook's documentation system.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/duplicate/A.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as AStories from '../../src/A.stories';\n\n<Meta of={AStories} />\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Documentation for React Components\nDESCRIPTION: Example of an MDX file that combines Markdown documentation with embedded Storybook stories and props tables.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport { Button } from './Button';\n\n<Meta title='Button' component={Button} />\n\n# Button\n\nSome **markdown** description, or whatever you want.\n\n<Story name='basic' height='400px'>\n  <Button>Label</Button>\n</Story>\n\n## ArgsTable\n\n<ArgsTable of={Button} />\n```\n\n----------------------------------------\n\nTITLE: Testing Login Form with Cypress in JavaScript\nDESCRIPTION: This code snippet defines a Cypress test suite for a login form. It visits a specific Storybook iframe URL, locates the login form, and verifies that the email and password fields contain expected values. The test uses Cypress commands to interact with and assert on DOM elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-cypress-test.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/// <reference types=\"cypress\" />\n\ndescribe('Login Form', () => {\n  it('Should contain valid login information', () => {\n    cy.visit('/iframe.html?id=components-login-form--example');\n    cy.get('#login-form').within(() => {\n      cy.log('**enter the email**');\n      cy.get('#email').should('have.value', 'email@provider.com');\n      cy.log('**enter password**');\n      cy.get('#password').should('have.value', 'a-random-password');\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Global Source Code Transformation in Storybook Preview\nDESCRIPTION: This snippet shows how to globally transform source code in Storybook Docs using a regular expression to remove the arrow at the beginning of a function that returns a string.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst SOURCE_REGEX = /^\\(\\) => `(.*)`$/;\nexport const parameters = {\n  docs: {\n    source: {\n      transform: (src, storyContext) => {\n        const match = SOURCE_REGEX.exec(src);\n        return match ? match[1] : src;\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with yarn\nDESCRIPTION: This shell command utilizes yarn for adding Storybook's React Native Web integration and Vite as dev dependencies. Yarn needs to be installed before executing this command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/react-native-web-vite vite\n```\n\n----------------------------------------\n\nTITLE: Embedding Existing Stories in MDX Documentation\nDESCRIPTION: This example shows how to embed an existing story with a specific ID into MDX documentation. This allows reusing existing stories within documentation pages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Story } from \"@storybook/addon-docs\";\n\n# Some header\n\nAnd markdown here\n\n<Story id=\"some--id\" />\n```\n\n----------------------------------------\n\nTITLE: Story Store Usage Before Deprecation\nDESCRIPTION: Example showing how to use storyFn from the story store before deprecation in Storybook 6.1.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\nconst { storyFn } = store.fromId(\"some--id\");\nconsole.log(storyFn());\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Viewports\nDESCRIPTION: Configuration to restore previous default viewports using INITIAL_VIEWPORTS\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_156\n\nLANGUAGE: javascript\nCODE:\n```\nimport { INITIAL_VIEWPORTS } from \"@storybook/addon-viewport\";\n\naddParameters({\n  viewport: {\n    viewports: INITIAL_VIEWPORTS,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Test-Only Stories in TypeScript/TSX\nDESCRIPTION: Shows TypeScript implementation of test-only stories in Storybook using proper type definitions. Includes type safety with Meta and StoryObj types from the framework-specific Storybook package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-include-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n  tags: ['test-only'], // 👈 Provides the `test-only` tag to all stories in this file\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const IncludeStory: Story = {\n  //👇 Adds the `test-only` tag to this story to be included in the tests when enabled in the test-runner configuration\n  tags: ['test-only'],\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Story Naming Example in JavaScript\nDESCRIPTION: Example showing correct story naming using PascalCase as per Storybook's recommended naming convention.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/prefer-pascal-case.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PrimaryButton = {};\n```\n\n----------------------------------------\n\nTITLE: Disabling a Story in MDX Documentation\nDESCRIPTION: An MDX snippet showing how to define a story that appears in the Storybook canvas but is excluded from the documentation page by using the docs.disable parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Story name=\"foo\" parameters={{ docs: { disable: true } }}>\n  <Button>foo</Button>\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Debugging Webpack Configuration in Development Mode\nDESCRIPTION: Command to debug Storybook's Webpack configuration in development mode. This helps in examining the configuration being used during development.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook dev --debug-webpack\n```\n\n----------------------------------------\n\nTITLE: Running Storybook with yarn\nDESCRIPTION: Command to start Storybook using yarn as the package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-run-dev.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: CSF 3 Automatic Title Generation\nDESCRIPTION: Demonstrates CSF 3's automatic title generation feature where titles can be inferred from the file path.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Documentation Component in TypeScript\nDESCRIPTION: A TypeScript version of the custom documentation component with proper type definitions. It implements the same functionality as the JavaScript version but with added type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/custom-docs-page.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CustomDocumentationComponent: React.FC = () => {\n  return (\n    <div>\n      <h1>Replacing DocsPage with a custom component</h1>\n      <p>\n        The Docs page can be customized with your own custom content written as a React Component.\n      </p>\n      <p>Write your own code here👇</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Web Components\nDESCRIPTION: Defines story configuration for Web Components using both JavaScript and TypeScript. Sets up background grid parameters for a demo-button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components-vite';\n\n// To apply a set of backgrounds to all stories of Button:\nconst meta: Meta = {\n  component: 'demo-button',\n  parameters: {\n    backgrounds: {\n      grid: {\n        cellSize: 20,\n        opacity: 0.5,\n        cellAmount: 5,\n        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Structuring Storybook Explore Section in HTML\nDESCRIPTION: This HTML snippet structures the explore section of a Storybook page, including an image, description, and a link to tutorials.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n        src={Tutorials} \n        alt=\"A book\" \n        className=\"sb-explore-image\"\n      />\n      <p>Follow guided walkthroughs on for key workflows.</p>\n\n      <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n        >Discover tutorials<RightArrow /></a>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preview Configuration with TypeScript\nDESCRIPTION: TypeScript implementation of preview configuration using the Preview type from the renderer package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_66\n\nLANGUAGE: ts\nCODE:\n```\nimport { Preview } from \"@storybook/react\";\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n  },\n};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameter for storiesOf API\nDESCRIPTION: Example of setting the component parameter when using the storiesOf API for proper documentation linking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storiesOf } from '@storybook/angular';\n\nstoriesOf('App Component', module)\n  .addParameters({ component: 'AppComponent' })\n  .add( ... );\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Docs Addon\nDESCRIPTION: Command to install the Storybook documentation addon package using yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @storybook/addon-docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main in JavaScript\nDESCRIPTION: JavaScript implementation of Storybook's main configuration file that includes custom webpack configuration merging. Specifies framework, story patterns, and webpack configuration customization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-using-existing-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport custom from '../webpack.config.js'; // 👈 Custom Webpack configuration being imported.\n\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config) => {\n    return {\n      ...config,\n      module: { ...config.module, rules: [...config.module.rules, ...custom.module.rules] },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Storybook API Hook\nDESCRIPTION: Demonstrates how to use the useStorybookApi hook to access Storybook API methods in addon components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStorybookApi } from '@storybook/manager-api';\n\nconst MyAddonPanel = () => {\n  const api = useStorybookApi();\n  return <button onClick={() => api.setQueryParams({ key: 'value' })}>Set Param</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML in Storybook Canvas\nDESCRIPTION: Example of embedding HTML content within a Storybook Canvas component with source code display\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas withSource={{ language: 'html', code: '<h1>hahaha</h1>' }}>\n  <Story of={AccountFormStories.Standard} />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown File in Storybook MDX\nDESCRIPTION: Demonstrates how to correctly import a markdown file in a Storybook MDX file using the ?raw suffix to ensure the content is imported as-is.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n// DON'T do this, will error\nimport ReadMe from './README.md';\n// DO this, will work\nimport ReadMe from './README.md?raw';\n\nimport { Markdown } from '@storybook/addon-docs/blocks';\n\n# A header \n\n<Markdown>{ReadMe}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Metadata Decorator\nDESCRIPTION: Example of using moduleMetadata decorator for configuring Angular component dependencies\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { Meta, moduleMetadata, StoryObj } from '@storybook/angular';\n\nimport { YourComponent } from './your.component';\n\nconst meta: Meta<YourComponent> = {\n  component: YourComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [...],\n      declarations: [...],\n      providers: [...],\n    }),\n  ],\n};\nexport default meta;\ntype Story = StoryObj<YourComponent>;\n\nexport const Base: Story = {};\n\nexport const WithCustomProvider: Story = {\n  decorators: [\n    moduleMetadata({\n      imports: [...],\n      declarations: [...],\n      providers: [...],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Global Decorators Configuration for Storybook\nDESCRIPTION: Example of how to add global decorators and parameters to Storybook in the .storybook/preview.js configuration file. This affects all stories, including those defined in MDX.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addDecorator, addParameters } from '@storybook/react';\n\naddDecorator(...);\naddParameters({ ... });\n```\n\n----------------------------------------\n\nTITLE: Configuring React Button Stories in TypeScript\nDESCRIPTION: TypeScript configuration for Button component stories in React with strict typing. Uses Meta type from @storybook/react for type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      default: 'Light',\n      values: [\n        // 👇 Add a new value\n        { name: 'Gray', value: '#CCC' },\n      ],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Web Components Login Form Story in JavaScript\nDESCRIPTION: Implements a login form story for web components with empty and filled form states. Includes play function for simulating user interactions and testing form submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within, expect } from 'storybook/test';\n\nexport default {\n  component: 'demo-login-form',\n};\n\nexport const EmptyForm = {};\n\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    await userEvent.click(canvas.getByRole('button'));\n\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Transform in Storybook Preview\nDESCRIPTION: Shows how to configure a transform function for Source blocks globally in the Storybook preview configuration, using Prettier for code formatting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    docs: {\n      source: {\n        transform: async (source) => {\n          const prettier = await import('prettier/standalone');\n          const prettierPluginBabel = await import('prettier/plugins/babel');\n          const prettierPluginEstree = await import('prettier/plugins/estree');\n\n          return prettier.format(source, {\n            parser: 'babel',\n            plugins: [prettierPluginBabel, prettierPluginEstree],\n          });\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Component and Story Descriptions\nDESCRIPTION: Example showing how to set component and story descriptions using docs.description parameters\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  title: 'Button'\n  parameters: { docs: { description: { component: 'some component **markdown**' }}}\n}\n\nexport const Basic = () => <Button />\nBasic.parameters = { docs: { description: { story: 'some story **markdown**' }}}\n```\n\n----------------------------------------\n\nTITLE: Description Block Usage in MDX Documentation\nDESCRIPTION: Demonstrates different ways to use the Description block to show component and story descriptions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Description } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n{/* Shows the description for the default export (the meta).\n    If that didn't have any comments, it would show the \n    comments from the component instead */}\n<Description of={ButtonStories} />\n\n{/* Shows the description for the Primary export */}\n<Description of={ButtonStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Manager for Legacy Title Formatting\nDESCRIPTION: Configuration to revert to the previous title formatting pattern using Lodash's startCase function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/manager.js\n\nimport { addons } from '@storybook/manager-api';\nimport { startCase } from 'lodash';\n\naddons.setConfig({\n  sidebar: {\n    renderLabel: item => {\n      const { name, type, parent } = item;\n      if (type === 'story') return startCase(name);\n      if (parent?.name === 'components' && type === 'component') return startCase(name);\n      return name;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MDX1 Support Package in Storybook\nDESCRIPTION: Command to install the @storybook/mdx1-csf package for legacy MDX1 support in Storybook projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_94\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @storybook/mdx1-csf@latest\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Chromatic\nDESCRIPTION: GitHub Actions workflow configuration for automatically publishing Storybook to Chromatic on push events\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Chromatic\"\non: push\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - run: yarn\n      - uses: chromaui/action@v1\n        with:\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Documentation for Vue Components\nDESCRIPTION: Example of an MDX file that includes a component story, markdown documentation, and an ArgsTable for a Vue component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport { InfoButton } from './InfoButton.vue';\n\n<Meta title='InfoButton' component={InfoButton} />\n\n# InfoButton\n\nSome **markdown** description, or whatever you want.\n\n<Story name='basic' height='400px'>{{\n  components: { InfoButton },\n  template: '<info-button label=\"I\\'m a button!\"/>',\n}}</Story>\n\n## ArgsTable\n\n<ArgsTable of={InfoButton} />\n```\n\n----------------------------------------\n\nTITLE: Customizing ArgTypes for Props Table\nDESCRIPTION: This example shows how to customize the props table by overriding default ArgTypes values in the story file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: Button,\n  argTypes: {\n    label: {\n      description: 'overwritten description',\n      table: {\n        type: { summary: 'something short', detail: 'something really really long' },\n      },\n      control: {\n        type: null,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching MDX to Component Stories with Meta\nDESCRIPTION: Shows how to use the Meta component to attach an MDX file to a component's stories, allowing the use of other doc blocks in 'attached' mode.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Applying Themes with CSS Classes using withThemeByClassName\nDESCRIPTION: A decorator that applies theme classes to a parent element to enable theme switching. It applies the specified class names to the parent element based on the selected theme.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withThemeByClassName } from '@storybook/addon-themes';\n\nexport const decorators = [\n  withThemeByClassName({\n    themes: {\n      light: 'light-theme',\n      dark: 'dark-theme',\n    },\n    defaultTheme: 'light',\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Extracting Storybook with PNPM\nDESCRIPTION: Executes Storybook's extract command using PNPM package manager at version 7.5.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-extract-specific-version.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@7.5.3 extract\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Head HTML\nDESCRIPTION: Example of adding custom elements to the preview iframe's head section using preview-head.html. Shows how to include external stylesheets and fonts.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-rendering.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://your-url.com/styles.css\">\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n<link href=\"https://fonts.googleapis.com/css2?family=YOUR_FONT&display=swap\" rel=\"stylesheet\">\n<script src=\"https://use.typekit.net/xxxxx.js\"></script>\n<script>try{ Typekit.load(); } catch(e){ }</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Imports in Monorepo Setup\nDESCRIPTION: Shows how to properly structure imports in a monorepo setup to ensure Autodocs works correctly by referencing components directly instead of through package root.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this\nimport { Button } from '@acme/components';\n\n// Do this instead\nimport { Button } from '@acme/components/src/Button';\n```\n\n----------------------------------------\n\nTITLE: Setting Local IFrame Height in Story Parameters\nDESCRIPTION: TypeScript example showing how to configure the iframe height for a specific story using story parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const basic = () => ...\nbasic.parameters = {\n  docs: { story: { iframeHeight: '400px' } },\n}\n```\n\n----------------------------------------\n\nTITLE: Component-Level Decorator Implementation\nDESCRIPTION: Shows how to define a decorator that applies to all stories within a component\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/decorators.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: Button,\n  decorators: [(Story) => <div style={{ margin: '3em' }}><Story/></div>],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Core Builder with Webpack 5\nDESCRIPTION: Exports the default Storybook configuration object that specifies webpack5 as the builder. This configuration is necessary for Storybook to properly bundle and serve stories using webpack 5.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack5.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  core: {\n    builder: '@storybook/builder-webpack5',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading node-fetch in Storybook\nDESCRIPTION: Upgrades the node-fetch dependency to the latest version in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpgrade node-fetch to latest version\n```\n\n----------------------------------------\n\nTITLE: Defining Page Stories with JavaScript for Web Components\nDESCRIPTION: This snippet shows how to create Storybook stories for a Web Components Page element using JavaScript. It demonstrates mocking a user session in the beforeEach hook for a 'my-page' custom element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getUserFromSession } from '#api/session.mock';\n\nexport default {\n  component: 'my-page',\n};\n\nexport const Default = {\n  async beforeEach() {\n    // 👇 Set the return value for the getUserFromSession function\n    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initialize MSW with PNPM\nDESCRIPTION: Initializes the Mock Service Worker (MSW) service worker files in the public directory using PNPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-generate-service-worker.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx msw init public/\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Component with NgRx Store Injection\nDESCRIPTION: This component demonstrates dependency injection of NgRx Store. It has a method that checks if the store is properly injected and returns a status message.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'storybook-comp-with-store',\n  template: '<div>{{this.getStoreState()}}</div>',\n})\nclass WithStoreComponent {\n  private store: Store<any>;\n\n  constructor(store: Store<any>) {\n    this.store = store;\n  }\n\n  getStoreState(): string {\n    return this.store === undefined ? 'Store is NOT injected' : 'Store is injected';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Compodoc\nDESCRIPTION: TypeScript configuration for setting up Compodoc integration in Storybook preview\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Preview } from '@storybook/angular';\n\nimport { setCompodocJson } from '@storybook/addon-docs/angular';\nimport docJson from '../documentation.json';\nsetCompodocJson(docJson);\n\nconst preview: Preview = {};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Metadata in Storybook (JavaScript)\nDESCRIPTION: Defines the default export for `Button.stories.js` or `Button.stories.jsx` in a generic framework project (e.g., React, Vue) using JavaScript. It imports the `Button` component and exports a configuration object specifying the `title` for the Storybook sidebar and linking the `component`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Button.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { Button } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Button',\n  component: Button,\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Content to Storybook Documentation\nDESCRIPTION: This snippet shows a markdown heading and some content, which will be rendered as part of the Storybook documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingName.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# Docs with of\n\nhello docs\n```\n\n----------------------------------------\n\nTITLE: New Parameters-based Configuration\nDESCRIPTION: Updated configuration using global parameters and theming API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_164\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@storybook/theming/create\";\naddParameters({\n  options: {\n    theme: create({\n      base: \"light\",\n      brandTitle: \"Storybook\",\n      brandUrl: \"https://storybook.js.org\",\n      // To control appearance:\n      // brandImage: 'http://url.of/some.svg',\n    }),\n    isFullscreen: false,\n    panelPosition: \"right\",\n    isToolshown: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout for Web Components in TypeScript\nDESCRIPTION: Creates a Web Component story configuration using TypeScript with centered layout. This example imports the Meta type from @storybook/web-components and sets the component to the custom element tag name 'demo-button'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  // Sets the layout parameter component wide.\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring themes with withThemeFromJSXProvider in Storybook preview\nDESCRIPTION: Diff showing how to set up themes using withThemeFromJSXProvider decorator in the Storybook preview.js file. It includes importing necessary components, setting up themes, and configuring the ThemeProvider.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import { Preview } from '@storybook/your-renderer';\n+import { Preview, Renderer } from '@storybook/your-renderer';\n+import { withThemeFromJSXProvider } from '@storybook/addon-themes';\n+import { ThemeProvider } from '@emotion/react';\n+import { GlobalStyles, lightTheme, darkTheme } from '../src/themes'; // Import your custom theme configs\n\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n+ decorators: [\n+  withThemeFromJSXProvider<Renderer>({\n+    themes: {\n+      light: lightTheme,\n+      dark: darkTheme,\n+    },\n+    defaultTheme: 'light',\n+    Provider: ThemeProvider,\n+    GlobalStyles: GlobalStyles,\n+  }),\n+ ]\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Defining Right Arrow SVG Component in React\nDESCRIPTION: Creates a reusable React component for rendering a right-facing arrow SVG icon. The component includes inline styling and is used throughout the document for navigation links.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/ts/Configure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const RightArrow = () => <svg \n    viewBox=\"0 0 14 14\" \n    width=\"8px\" \n    height=\"14px\" \n    style={{ \n      marginLeft: '4px',\n      display: 'inline-block',\n      shapeRendering: 'inherit',\n      verticalAlign: 'middle',\n      fill: 'currentColor',\n      'path fill': 'currentColor'\n    }}\n>\n  <path d=\"m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Viewport Addon via npm\nDESCRIPTION: Command to install the Storybook Viewport Addon using npm. This step is necessary if the addon is not already included in your Storybook installation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/viewport/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D storybook/viewport\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Raw Markdown Content in Storybook\nDESCRIPTION: This code snippet demonstrates how to import a Markdown file as raw content and render it using Storybook's Markdown component. The ?raw suffix is crucial for importing the raw content rather than a processed module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/src/blocks/examples/Markdown-content.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Markdown } from '@storybook/addon-docs/blocks';\nimport content from './Markdown-content.md?raw';\n\n<Markdown>{content}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Registering Storybook Addon and Accessing Query Parameters\nDESCRIPTION: Demonstrates how to register a custom Storybook addon using addons.register() and access URL query parameters using the api.getQueryParam() method. The addon is registered under a unique identifier 'my-organisation/my-addon' and retrieves a parameter named 'exampleParameter'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-getqueryparam.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddons.register('my-organisation/my-addon', (api) => {\n  api.getQueryParam('exampleParameter');\n});\n```\n\n----------------------------------------\n\nTITLE: Writing MDX Documentation with Story Integration\nDESCRIPTION: Example of an MDX file that combines markdown documentation with a Storybook story for a Checkbox component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, Canvas } from '@storybook/addon-docs/blocks';\nimport * as CheckboxStories from './Checkbox.stories';\n\n<Meta title=\"MDX/Checkbox\" of={CheckboxStories} />\n\n# Checkbox\n\nWith `MDX` we can include a story for `Checkbox` right in the middle of our\nmarkdown documentation.\n\n<Canvas>\n  <Story of={CheckboxStories.Unchecked} />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack 5 Dependencies\nDESCRIPTION: Commands to install Webpack 5 builder and manager packages for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_111\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @storybook/builder-webpack5 @storybook/manager-webpack5 --dev\n# Or\nnpm install @storybook/builder-webpack5 @storybook/manager-webpack5 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Updating globalTypes Toolbar Configuration\nDESCRIPTION: Shows how to update the toolbar configuration in globalTypes by replacing the deprecated 'left' property with the new 'icon' property. This change affects the TooltipLinkList UI component used for customizing the Storybook toolbar.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/preview.js|ts\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  globalTypes: {\n    locale: {\n      description: 'Internationalization locale',\n      defaultValue: 'en',\n      toolbar: {\n        icon: 'globe',\n        items: [\n          {\n            value: 'en',\n            right: '🇺🇸',\n-            left: '＄'\n+            icon: 'facehappy'\n            title: 'English'\n          },\n          { value: 'fr', right: '🇫🇷', title: 'Français' },\n          { value: 'es', right: '🇪🇸', title: 'Español' },\n          { value: 'zh', right: '🇨🇳', title: '中文' },\n          { value: 'kr', right: '🇰🇷', title: '한국어' },\n        ],\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Main.js to Load MDX Files\nDESCRIPTION: JavaScript configuration that updates the stories pattern in main.js to include MDX files alongside regular JS story files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  stories: ['../src/stories/**/*.stories.@(js|mdx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Story in MDX for Storybook\nDESCRIPTION: This code snippet demonstrates how to create a simple story for a Button component using MDX syntax in Storybook. It includes an action handler for the onClick event.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Story name=\"solo story\">\n  <Button onClick={action('clicked')}>solo</Button>\n</Story>\n```\n\n----------------------------------------\n\nTITLE: Debugging Webpack Configuration in Production Mode\nDESCRIPTION: Command to debug Storybook's Webpack configuration in production mode. This helps in examining the configuration used for static builds.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook build --debug-webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main with Title Prefix\nDESCRIPTION: Configuration in storybook/main.js to set a title prefix for automatically generated story titles.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [\n    {\n      directory: '../src/components',\n      titlePrefix: 'Custom',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in React Storybook (JavaScript)\nDESCRIPTION: This snippet sets up a story for 'MyComponent' in a React application using Storybook, with accessibility checks disabled. The component import and basic story configuration for React are demonstrated.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n};\n\nexport const NonA11yStory = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack in Storybook 5\nDESCRIPTION: New simplified webpack configuration API that takes an object with config and mode parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_160\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ config, mode }) => { config.module.rules.push(...); return config; }\n```\n\n----------------------------------------\n\nTITLE: Enabling Table of Contents in Storybook using JavaScript\nDESCRIPTION: This JavaScript code configures Storybook to enable the table of contents feature in documentation by setting the 'toc' parameter to true in the docs configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-enable-toc.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    docs: {\n      toc: true, // 👈 Enables the table of contents\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Story Store Usage After Update\nDESCRIPTION: Updated example showing how to use unboundStoryFn with context from the story store in Storybook 6.1.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\nconst { unboundStoryFn, applyLoaders } = store.fromId(\"some--id\");\nconst context = await applyLoaders();\nconsole.log(unboundStoryFn(context));\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Vite Config Path in Storybook\nDESCRIPTION: JavaScript configuration for specifying a custom path to the Vite config file in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.mjs\n\nconst config = {\n  framework: {\n    name: '@storybook/react-vite', // Your framework name here.\n    options: {\n      builder: {\n        viteConfigPath: '.storybook/customViteConfig.js',\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: WithLinks Decorator Usage\nDESCRIPTION: Example showing how to use the withLinks decorator for declarative story linking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withLinks } from '@storybook/addon-links';\n\nexport default {\n  title: 'Button',\n  decorators: [withLinks],\n};\n\nexport const first = () => (\n  <button data-sb-kind=\"OtherKind\" data-sb-story=\"otherStory\">\n    Go to \"OtherStory\"\n  </button>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook React Webpack5 with pnpm (Shell)\nDESCRIPTION: This shell command adds @storybook/react-webpack5 as a development dependency using pnpm, which is an alternative JavaScript package manager. Aimed at React projects leveraging Storybook with Webpack5 support; it requires pnpm to be installed and run from the project root. Automatically updates the devDependencies section of package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/react-webpack5\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using JavaScript. It specifies the framework, story file patterns, and static asset directories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-static-dirs-with-object.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  staticDirs: [{ from: '../my-custom-assets/images', to: '/assets' }],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addons\nDESCRIPTION: Basic configuration to add the docs addon to Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-docs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring managerHead in Storybook's main.js\nDESCRIPTION: This snippet demonstrates how to use the managerHead function to conditionally add scripts or styles to the Storybook manager's <head> element based on the environment. It checks if the process is running in production and adds a Google Analytics script if true.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-manager-head.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  managerHead: (head) => {\n    if (process.env.NODE_ENV === 'production') {\n      return `\n        ${head}\n        <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"></script>\n        <script>\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n          gtag('config', 'G-XXXXXXXXXX');\n        </script>\n      `;\n    }\n    return head;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest with Storybook Annotations for Vue\nDESCRIPTION: Configuration for Jest tests that integrates Storybook annotations for Vue3 projects. Imports annotations from the local .storybook/preview and optional addon annotations, then uses setProjectAnnotations to register them for testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-set-project-annotations.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from '@jest/globals';\nimport { setProjectAnnotations } from '@storybook/vue3';\n// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this\nimport * as addonAnnotations from 'my-addon/preview';\nimport * as previewAnnotations from './.storybook/preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n\n// Supports beforeAll hook from Storybook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Svelte with TypeScript 4.9+ using CSF\nDESCRIPTION: Shows how to configure component parameters in Svelte using TypeScript 4.9+ with satisfies operator for type safety. The example imports Meta from '@storybook/svelte' and sets the backgrounds parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/svelte';\n\nimport Button from './Button.svelte';\n\nconst meta = {\n  component: Button,\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Project Annotations for Vue\nDESCRIPTION: This code snippet illustrates how to set up Storybook project annotations for a Vue project using Vitest. It imports necessary modules, sets project annotations, and runs Storybook's beforeAll hook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { beforeAll } from 'vitest';\nimport { setProjectAnnotations } from '@storybook/vue3';\n// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this\nimport * as addonAnnotations from 'my-addon/preview';\nimport * as previewAnnotations from './.storybook/preview';\n\nconst annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);\n\n// Run Storybook's beforeAll hook\nbeforeAll(annotations.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Specifying Component Metadata for Props Tables using StoriesOf API\nDESCRIPTION: Example of how to specify the component in your story metadata using the older storiesOf API to enable props table generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storiesOf } from '@storybook/vue';\nimport { InfoButton } from './InfoButton.vue';\n\nstoriesOf('InfoButton', module)\n  .addParameters({ component: InfoButton })\n  .add( ... );\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Story Implementation (JavaScript)\nDESCRIPTION: Implements a Button story for Svelte using JavaScript and CSF 2 format. Shows component and props pattern specific to Svelte.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nexport const Primary = (args) => ({\n  Component: Button,\n  props: args,\n});\nPrimary.args = { primary: true };\n```\n\n----------------------------------------\n\nTITLE: LinkTo Component with Props\nDESCRIPTION: Example showing LinkTo component usage with additional HTML props and styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<LinkTo\n  kind=\"Toggle\"\n  story=\"off\"\n  target=\"_blank\"\n  title=\"link to second story\"\n  style={{ color: '#1474f3' }}\n>\n  Go to Second\n</LinkTo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for Angular (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define Storybook stories for an Angular component with advanced accessibility parameters. It relies on '@storybook/angular' for type support and sets up custom accessibility (a11y) rules, including disabling specific checks and limiting others by selector. The configuration is exported as a module along with an 'ExampleStory', making use of the 'parameters' and 'globals' properties for full flexibility and manual triggering of accessibility tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const ExampleStory: Story = {\n  parameters: {\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n       */\n      options: {},\n    },\n  },\n  globals: {\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Indexer\nDESCRIPTION: Type definition for the Indexer interface that specifies how to index story files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  test: RegExp;\n  createIndex: (fileName: string, options: IndexerOptions) => Promise<IndexInput[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with npm\nDESCRIPTION: This command installs Storybook for React Native Web using npm as the package manager. It adds the '@storybook/react-native-web-vite' and 'vite' packages as development dependencies. Ensure npm is correctly set up in your system before running this command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/react-native-web-vite vite\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Story Loading Logic in Storybook\nDESCRIPTION: This code demonstrates how to implement custom story loading logic by providing a function that returns an array of story specifications, useful for complex project structures.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js|ts\n\nexport default {\n  // Your Storybook configuration\n  stories: () => [\n    {\n      directory: '../packages/core',\n      files: '**/*.stories.*',\n    },\n    {\n      directory: '../packages/web-components',\n      files: '**/*.stories.*',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Meta Component in MDX\nDESCRIPTION: Example of importing and using the Meta component in an MDX file to attach it to a component's stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with pnpm\nDESCRIPTION: Command to create a new Storybook project using pnpm package manager for version 8.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-custom-version.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm create storybook@8.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport for a Component in Storybook\nDESCRIPTION: This snippet demonstrates how to configure viewport options for a specific component in Storybook using the meta object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// MyComponent.stories.js|ts|jsx|tsx\n\nimport { Meta } from '@storybook/blocks';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n  parameters: {\n    viewport: {\n      viewports: INITIAL_VIEWPORTS,\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Color Parameters in Storybook\nDESCRIPTION: This code exports a configuration object that defines default background color parameters for Storybook stories. It includes 'light' (#F8F8F8) and 'dark' (#333333) background options that can be selected when viewing stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-backgrounds-addon-default-params.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'light', value: '#F8F8F8' },\n        { name: 'dark', value: '#333333' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls for Web Components in JavaScript\nDESCRIPTION: This snippet shows how to set up conditional controls for Web Components in Storybook using JavaScript. It uses a custom element tag name 'demo-example' as the component and demonstrates various conditions for displaying controls based on the 'parent' argument.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-example',\n  argTypes: {\n    parent: { control: 'select', options: ['one', 'two', 'three'] },\n\n    // 👇 Only shown when `parent` arg exists\n    parentExists: { if: { arg: 'parent', exists: true } },\n\n    // 👇 Only shown when `parent` arg does not exist\n    parentDoesNotExist: { if: { arg: 'parent', exists: false } },\n\n    // 👇 Only shown when `parent` arg value is truthy\n    parentIsTruthy: { if: { arg: 'parent' } },\n    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },\n\n    // 👇 Only shown when `parent` arg value is not truthy\n    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },\n\n    // 👇 Only shown when `parent` arg value is 'three'\n    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },\n\n    // 👇 Only shown when `parent` arg value is not 'three'\n    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },\n\n    // Each of the above can also be conditional on the value of a globalType, e.g.:\n\n    // 👇 Only shown when `theme` global exists\n    parentExists: { if: { global: 'theme', exists: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: HrefTo Function Usage\nDESCRIPTION: Example demonstrating how to use the hrefTo function to get URLs for stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action } from 'storybook/actions';\nimport { hrefTo } from '@storybook/addon-links';\n\nexport default {\n  title: 'Href',\n};\n\nexport const log = () => {\n  hrefTo('Href', 'log').then(action('URL of this story'));\n\n  return <span>See action logger</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vite and Storybook for a New Project\nDESCRIPTION: Command line instructions for creating a new Vite project and initializing Storybook with the Vite builder.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest # follow the prompts\nnpx storybook@latest init --builder vite && npm run storybook\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook Badge in Markdown\nDESCRIPTION: This snippet demonstrates how to add a Storybook badge to a markdown file, linking it to a live Storybook example.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Storybook](https://cdn.jsdelivr.net/gh/storybookjs/brand@main/badge/badge-storybook.svg)](link to site)\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Button Story Meta Using defineMeta - Storybook (Svelte, JavaScript)\nDESCRIPTION: This Svelte and JavaScript code demonstrates the Storybook CSF (Component Story Format) using defineMeta from '@storybook/addon-svelte-csf'. It statically imports the Button Svelte component and passes it to defineMeta, from which Story is extracted. The Storybook configuration enables Svelte Button stories via the CSF API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\\n  import { defineMeta } from '@storybook/addon-svelte-csf';\\n\\n  import Button from './Button.svelte';\\n\\n  const { Story } = defineMeta({\\n    component: Button,\\n  });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Stories with TypeScript\nDESCRIPTION: Implements a Button component story for Web Components using TypeScript with proper type definitions. Shows how to configure stories for custom elements with type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      story: { autoplay: true },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Vuetify Theme Decorator in Storybook Preview\nDESCRIPTION: Example of how to register a custom Vuetify theme decorator in Storybook's preview configuration. This setup integrates the custom decorator and defines the available themes and default theme.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\nimport { setup } from '@storybook/vue3';\nimport { registerPlugins } from '../src/plugins';\nimport { withVuetifyTheme } from './withVuetifyTheme.decorator';\n\nsetup((app) => {\n  registerPlugins(app);\n});\n\n/* snipped for brevity */\n\nexport const decorators = [\n  withVuetifyTheme({\n    // These keys are the labels that will be displayed in the toolbar theme switcher\n    // The values must match the theme keys from your VuetifyOptions\n    themes: {\n      light: 'light',\n      dark: 'dark',\n      'high contrast': 'highContrast',\n    },\n    defaultTheme: 'light', // The key of your default theme\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration file for Storybook that defines the framework, story file patterns, and documentation settings. The configuration exports an object with settings for the framework to use, file patterns for story discovery, and document mode configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-docs-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  docs: {\n    docsMode: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding MDX Code Block Component\nDESCRIPTION: Advanced example showing how to override the default code renderer in MDX with a custom component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/theming.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addParameters } from '@storybook/react';\nimport { CodeBlock } from './CodeBlock';\n\naddParameters({\n  docs: {\n    components: {\n      code: CodeBlock,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX File Loading\nDESCRIPTION: Configuration to enable loading of MDX files in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/stories/**/*.stories.@(js|mdx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in TypeScript Storybook with Type Annotation\nDESCRIPTION: TypeScript implementation using explicit type annotation for the metadata object. This example shows how to define a Button component story with proper typing and apply the centered layout parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const WithLayout: Story = {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in Vue with TypeScript\nDESCRIPTION: Partial implementation of Storybook stories for a List component in Vue 3 using standard TypeScript. This snippet only shows the imports and beginning of the meta definition, demonstrating how to set up the basic structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 Imports a specific story from ListItem stories\n```\n\n----------------------------------------\n\nTITLE: Defining Page Stories with TypeScript 4.9+ for Common Renderers\nDESCRIPTION: This snippet shows how to create Storybook stories for a Page component using TypeScript 4.9+. It uses the 'satisfies' keyword for type inference and demonstrates mocking a user session.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the name of your renderer (e.g. react, vue3)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\n\nimport { Page } from './Page';\n\nconst meta = {\n  component: Page,\n} satisfies Meta<typeof Page>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  async beforeEach() {\n    // 👇 Set the return value for the getUserFromSession function\n    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component Story with TypeScript\nDESCRIPTION: Demonstrates how to create a story for an Angular component using TypeScript with proper type definitions. Shows metadata configuration and story definition with environment variable usage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const ExampleStory: Story = {\n  args: {\n    propertyA: process.env.STORYBOOK_DATA_KEY,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Accessibility Addon Configuration\nDESCRIPTION: Configuration code to register the Accessibility addon in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/install-addons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    \"@storybook/addon-links\",\n    \"@storybook/addon-essentials\",\n    \"@storybook/addon-a11y\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting a Story in Current Kind\nDESCRIPTION: Demonstrates how to use the api.selectInCurrentKind() method to select a story within the current kind.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napi.selectInCurrentKind('Secondary');\n```\n\n----------------------------------------\n\nTITLE: Non-CSF Source File Example\nDESCRIPTION: Example of a source file using a custom variant-based story format that needs to be transpiled to CSF.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Button.variants.js|ts\n\nimport { variantsFromComponent, createStoryFromVariant } from '../utils';\nimport { Button } from './Button';\n\n/**\n * Returns raw strings representing stories via component props, eg.\n * 'export const PrimaryVariant = {\n *    args: {\n *      primary: true\n *    },\n *  };'\n */\nexport const generateStories = () => {\n  const variants = variantsFromComponent(Button);\n  return variants.map((variant) => createStoryFromVariant(variant));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework for Web Components & Vite\nDESCRIPTION: Configuration snippet for .storybook/main.js or .storybook/main.ts to set the framework to Web Components with Vite. This is part of the manual migration process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: '@storybook/web-components-vite',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Entry Point in TypeScript\nDESCRIPTION: This TypeScript snippet provides a type-safe approach to Storybook's main configuration by importing the StorybookConfig type. It mirrors the JavaScript configuration but benefits from IDE type checking, improved maintainability, and autocompletion. The dependencies include Storybook for the specified framework and its type definitions. As with the JavaScript version, the framework and story patterns should be updated for the project's needs, and this file is intended for projects using TypeScript in their build setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-project-json.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableProjectJson: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with TypeScript 4.9+\nDESCRIPTION: TypeScript configuration using the satisfies operator for improved type safety. Shows framework-agnostic setup with type definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-default.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      // 👇 Set default background value for all component stories\n      default: 'Gray',\n    },\n  },\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const OnDark: Story = {\n  parameters: {\n    backgrounds: {\n      // 👇 Override default background value for this story\n      default: 'Dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with CSF\nDESCRIPTION: Demonstrates Svelte Button component stories using Component Story Format (CSF) with both JavaScript and TypeScript implementations. Includes accessible and inaccessible variants.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    argTypes: {\n      backgroundColor: { control: 'color' },\n    },\n  });\n</script>\n\n<!-- This is an accessible story -->\n<Story name=\"Accessible\" args={{ primary: false, label: 'Button' }} />\n\n<!-- This is not -->\n<Story name=\"Inaccessible\" args={{ primary: false, label: 'Button', backgroundColor: 'red' }} />\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Prop Tables in Storybook Info Addon\nDESCRIPTION: Shows how to include prop tables for components that are not directly used in the story. This is useful for documenting related components or available alternatives.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Options.propTables', module).add(\n  'Shows additional component prop tables',\n  withInfo({\n    text: 'There should be a prop table added for a component not included in the story',\n    propTables: [FlowTypeButton],\n  })(() => <BaseButton label=\"Button\" />)\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc with yarn for Angular in Storybook\nDESCRIPTION: This snippet illustrates how to add Compodoc as a dev dependency using yarn. It's tailored for Angular projects within a Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/compodoc-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @compodoc/compodoc\n```\n\n----------------------------------------\n\nTITLE: Storybook Sidebar Structure Example\nDESCRIPTION: Example showing the hierarchical structure of stories in Storybook's sidebar before single story hoisting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_127\n\nLANGUAGE: plaintext\nCODE:\n```\nDESIGN SYSTEM   [root]\n- Atoms         [group]\n  - Button      [component]\n    - Button    [story]\n  - Checkbox    [component]\n    - Checkbox  [story]\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Side Stories in JSON\nDESCRIPTION: This JSON snippet demonstrates how to write stories for server-side rendering. It includes a title, parameters, and story definitions with server IDs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Component\",\n  \"parameters\": {\n    \"options\": { \"component\": \"my_widget\" }\n  },\n  \"stories\": [\n    {\n      \"name\": \"Default\",\n      \"parameters\": {\n        \"server\": { \"id\": \"path/of/your/story\" }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Stories in JavaScript\nDESCRIPTION: This snippet imports all exports from a B.stories file, likely containing Storybook component stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfName.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as BStories from '../src/B.stories';\n```\n\n----------------------------------------\n\nTITLE: Migrating Webpack Configuration to Vite in Storybook\nDESCRIPTION: Example of migrating a Webpack configuration for loading GraphQL queries to its Vite equivalent using a plugin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Webpack\nmodule.exports = async ({ config }) => {\n  config.module.rules.push({\n    test: /\\.(graphql|gql)$/,\n    exclude: /node_modules/,\n    loader: 'graphql-tag/loader',\n  });\n  return config;\n};\n\n// Vite\nimport { mergeConfig } from 'vite';\nimport graphql from '@rollup/plugin-graphql';\n\nexport default {\n  async viteFinal(config) {\n    return mergeConfig(config, {\n      plugins: [graphql()],\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Runner with Coverage\nDESCRIPTION: Command to run the Storybook test runner with coverage enabled.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --coverage\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Common Frameworks CSF (JavaScript)\nDESCRIPTION: Defines Storybook metadata in JavaScript using the standard Component Story Format (CSF) applicable to common frameworks like React or Vue. It imports the component and sets the default export object, configuring `argTypes` to hide the 'foo' property from the Storybook args table by setting `table: { disable: true }`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"YourComponent.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { YourComponent } from './YourComponent';\n\nexport default {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Stories and Configuring Meta Component in JavaScript\nDESCRIPTION: This snippet imports all stories from the A.stories file and configures the Meta component to use these stories. It's a common pattern in Storybook for setting up documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/A.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as AStories from '../src/A.stories';\n\n<Meta of={AStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Storybook\nDESCRIPTION: Example path to the Storybook configuration file where you can customize which environment variables are exposed using the 'env' field.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n.storybook/main.js\n```\n\n----------------------------------------\n\nTITLE: Composing Stories with Project Annotation Overrides\nDESCRIPTION: Demonstrates how to use composeStory with project annotation overrides, which are now merged instead of overwritten in Storybook 8.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectAnnotationOverrides = { parameters: { foo: \"bar\" } };\nconst Primary = composeStory(\n  stories.Primary,\n  stories,\n  projectAnnotationOverrides\n);\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Testing Documentation\nDESCRIPTION: YAML frontmatter configuration for a documentation page about UI testing with Storybook, setting the title and sidebar properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'How to test UIs with Storybook'\nhideRendererSelector: true\nsidebar:\n  order: 3\n  title: Testing\n---\n```\n\n----------------------------------------\n\nTITLE: Converting Storybook CSF 2 to CSF 3 using pnpm\nDESCRIPTION: Command to migrate Storybook Component Story Format from version 2 to 3 using pnpm. This targets TypeScript React stories with the specified glob pattern and parser.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-csf-2-to-3.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Convert CSF 2 to CSF 3\npnpm dlx storybook@latest migrate csf-2-to-3 --glob=\"**/*.stories.tsx\" --parser=tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring a Composition-Only Storybook with Required Local Story\nDESCRIPTION: Configuration for a Storybook that primarily uses composition to reference other Storybooks while including the minimum required local story file to make Storybook work properly.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  // define at least one local story/page here\n  stories: ['../Introduction.mdx'],\n  // define composed Storybooks here\n  refs: {\n    firstProject: { title: 'First', url: 'some-url' },\n    secondProject: { title: 'Second', url: 'other-url' },\n  },\n  // ...\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Migrating from View-Layer Specific Addons to Generic Addons in Storybook 4.0\nDESCRIPTION: Example of how to update import statements from view-layer specific addon imports to generic addon imports, which were introduced in Storybook 4.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_168\n\nLANGUAGE: javascript\nCODE:\n```\nimport { number } from \"@storybook/addon-knobs/react\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { number } from \"@storybook/addon-knobs\";\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Development Server\nDESCRIPTION: Command to start the Storybook development server.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/sveltekit Framework\nDESCRIPTION: Command to install the @storybook/sveltekit framework package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"sveltekit-install.md\" />\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependency for MDX Support\nDESCRIPTION: Command to install React as a dev dependency, which is required when writing stories in MDX format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D react\n```\n\n----------------------------------------\n\nTITLE: Canvas Additional Actions Type Definition\nDESCRIPTION: TypeScript type definition for the additionalActions prop of the Canvas component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nArray<{\n  title: string | JSX.Element;\n  className?: string;\n  onClick: () => void;\n  disabled?: boolean;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with Coverage using pnpm\nDESCRIPTION: This command runs Storybook tests with coverage enabled using pnpm. It executes the 'test-storybook' script with the '--coverage' flag to generate test coverage reports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-with-coverage.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook --coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Babel Options in Storybook\nDESCRIPTION: Configuration to restore user's babelrc processing for MDX files by setting mdxBabelOptions in .storybook/main.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  addons: [\n    {\n      name: \"@storybook/addon-docs\",\n      options: { mdxBabelOptions: { babelrc: true, configFile: true } },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework for Vue 3 with Vite in JavaScript\nDESCRIPTION: This snippet shows how to configure the Storybook framework for Vue 3 using Vite in a JavaScript file. It exports a default configuration object with the framework property set to '@storybook/vue3-vite'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  framework: '@storybook/vue3-vite', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Storybook Demo\nDESCRIPTION: This command installs the necessary dependencies and synchronizes the Storybook module with the source code of the demo application.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/ember-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Imports for Storybook 9.0\nDESCRIPTION: This diff shows how to update icon imports in Storybook 9.0. It replaces the old import from '@storybook/components' with the new import from '@storybook/icons'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { Icons, IconButtonSkeleton } from '@storybook/components';\n+ import { ZoomIcon } from '@storybook/icons';\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility in Storybook Story for Svelte (Svelte CSF, TypeScript 4.9)\nDESCRIPTION: This Svelte CSF snippet, written with TypeScript 4.9, utilizes '@storybook/addon-svelte-csf' to strongly type story definitions and define accessibility options. It combines Svelte story syntax with advanced a11y configuration, such as disabling rules and using the manual flag for accessibility test runs. Intended for Svelte projects using modern TypeScript and the Svelte-specific CSF extension.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_6\n\nLANGUAGE: ts-4-9\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  parameters={{\n    a11y: {\n      element: 'body',\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n        ],\n      },\n      /*\n       * Axe's options parameter\n       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n       * to learn more about the available options.\n      */\n      options: {},\n    },\n  }}\n  globals={{\n    a11y: {\n      // Optional flag to prevent the automatic check\n      manual: true,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Automating Icon Documentation with IconGallery and IconItem in Storybook\nDESCRIPTION: This snippet shows how to automate the process of documenting multiple icons using IconGallery and IconItem blocks. It demonstrates how to iterate over an object of icons and dynamically create IconItem components for each.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, IconGallery, IconItem } from '@storybook/addon-docs/blocks';\n\nimport { Icon as IconExample } from './Icon';\nimport * as icons from './icons';\n\n# Iconography\n\n<IconGallery>\n  {Object.keys(icons).map((icon) => (\n    <IconItem name={icon}>\n      <IconExample icon={icon} />\n    </IconItem>\n  ))}\n</IconGallery>\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs Container in Storybook 7.0\nDESCRIPTION: Demonstrates how to configure the Autodocs container in Storybook 7.0, including overriding the theme and MDX components. This example shows how to use the DocsContainer component from @storybook/blocks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MDXProvider } from \"@mdx-js/react\";\nimport { DocsContainer } from \"@storybook/blocks\";\nimport * as DesignSystem from \"your-design-system\";\n\nexport const MyDocsContainer = (props) => (\n  <MDXProvider\n    components={{\n      h1: DesignSystem.H1,\n      h2: DesignSystem.H2,\n    }}\n  >\n    <DocsContainer {...props} />\n  </MDXProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Babel Mode V7 in Storybook\nDESCRIPTION: Configuration to enable the new Babel Mode V7 feature which provides more consistent Babel configuration handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ... your existing config\n  features: {\n    babelModeV7: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Localize Polyfill\nDESCRIPTION: This snippet imports the Angular localize initialization polyfill, which is necessary for internationalization features in Angular applications.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@angular/localize/init';\n```\n\n----------------------------------------\n\nTITLE: Basic Story Links Implementation\nDESCRIPTION: Example showing how to create linked stories using the linkTo function with React buttons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { linkTo } from '@storybook/addon-links';\n\nexport default {\n  title: 'Button',\n};\n\nexport const first = () => <button onClick={linkTo('Button', 'second')}>Go to \"Second\"</button>;\nexport const second = () => <button onClick={linkTo('Button', 'first')}>Go to \"First\"</button>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic TypeScript Story\nDESCRIPTION: Demonstrates standard TypeScript story configuration using type annotation. Uses the Meta type with typeof for component typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Path/To/MyComponent',\n  component: MyComponent,\n  decorators: [/* ... */],\n  parameters: {/* ... */},\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for ng-content Component\nDESCRIPTION: This snippet creates a Storybook story for the Angular component with ng-content. It demonstrates how to use the component and inject content into it.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.angular-stories.txt#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstoriesOf('Custom|ng-content', module).add('Default', () => ({\n  template: `<storybook-with-ng-content><h1>This is rendered in ng-content</h1></storybook-with-ng-content>`,\n  moduleMetadata: {\n    declarations: [WithNgContentComponent],\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for MDX Files\nDESCRIPTION: Updates the .storybook/main.js configuration to load MDX files for documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/stories/**/*.stories.@(js|mdx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Canvas Block in MDX\nDESCRIPTION: Example showing how to import and use the Canvas block to reference a story in MDX documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Canvas } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Canvas of={ButtonStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Test Runner with Yarn\nDESCRIPTION: Installs the @storybook/test-runner package as a development dependency using yarn package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/test-runner\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Sort Object in Storybook\nDESCRIPTION: Shows the basic structure for implementing story sorting using a configuration object in the preview settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  options: {\n    storySort: {\n      method: '',\n      order: [],\n      locales: '',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook UI\nDESCRIPTION: Demonstrates how to use the addons.setConfig() method to override default Storybook UI configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naddons.setConfig({\n  theme: themes.dark,\n  showNav: false,\n  showPanel: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a11y Addon with pnpm using dlx\nDESCRIPTION: This shell command uses `pnpm dlx` (pnpm's equivalent to npx) to execute the Storybook CLI `add` command. It installs and configures the `@storybook/addon-a11y` addon for a Storybook project managed with pnpm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-add-command.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest add @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Installing Preact-Vite Framework\nDESCRIPTION: Commands to manually install the Preact-Vite framework package for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storybook/preact-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main.js for Docs Addon\nDESCRIPTION: JavaScript configuration to add Storybook Docs addon and set up story patterns in the main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [\n    '../src/**/*.mdx',\n    '../src/**/*.stories.@(js|jsx|ts|tsx)',\n  ],\n  addons: [\n    '@storybook/addon-docs',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Stories in Storybook Documentation\nDESCRIPTION: This snippet imports all stories from the 'A.stories' file, which is likely used to populate the Storybook documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingName.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as AStories from '../src/A.stories';\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Design Addon with npm\nDESCRIPTION: Adds the Storybook Design addon to your project using npm package manager. The command uses npx to execute the storybook CLI tool and add the design addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-figma-addon-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest add @storybook/addon-designs\n```\n\n----------------------------------------\n\nTITLE: Defining React List Stories in JavaScript\nDESCRIPTION: Configures a simple Storybook story for a React List component using JavaScript. It imports the List component and defines an Empty list story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List } from './List';\n\nexport default {\n  component: List,\n};\n\n// Always an empty list, not super interesting\nexport const Empty = {};\n```\n\n----------------------------------------\n\nTITLE: Component-Level Background Configuration\nDESCRIPTION: Example demonstrating how to set background color options for all stories of a specific component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  parameters: {\n    backgrounds: {\n      default: 'twitter',\n      values: [\n        { name: 'twitter', value: '#00aced' },\n        { name: 'facebook', value: '#3b5998' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier in Storybook Source Loader\nDESCRIPTION: This snippet showcases how to set up a custom Prettier configuration for the source-loader. It modifies the default prettier configuration to apply specific formatting rules to story source code displayed in the addon panel. Requires '@storybook/source-loader' and targets files with '.stories.jsx?' extensions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/source-loader/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function ({ config }) {\n  config.module.rules.push({\n    test: /\\.stories\\.jsx?$/,\\n    use: [\\n      {\\n        loader: require.resolve('@storybook/source-loader'),\\n        options: {\\n          prettierConfig: {\\n            printWidth: 100,\\n            singleQuote: false,\\n          },\\n        },\\n      },\\n    ],\\n    enforce: 'pre',\\n  });\\n  return config;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addon Measure in main.js\nDESCRIPTION: JavaScript configuration to add the Storybook Addon Measure to the addons array in the .storybook/main.js file. This step enables the addon in your Storybook instance.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/measure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-measure'],\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Document Screen with GraphQL Query\nDESCRIPTION: Angular component implementation that uses apollo-angular to fetch document data via GraphQL. Handles loading and error states while displaying user, document and subdocument information.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport gql from 'graphql-tag';\n\n@Component({\n  selector: 'document-screen',\n  template: `\n    <div *ngIf=\"loading\">Loading...</div>\n    <div *ngIf=\"error\">There was an error fetching the data!</div>\n    <div *ngIf=\"!loading && subdocuments.length > 0\">\n      <page-layout [user]=\"user\">\n        <document-header [document]=\"document\"></document-header>\n        <document-list [documents]=\"subdocuments\"></document-list>\n      </page-layout>\n    </div>\n  `,\n})\nexport class SampleGraphqlComponent implements OnInit {\n  user: any = { id: 0, name: 'Some User' };\n\n  document: any = { id: 0, title: 'Some Title' };\n\n  subdocuments: any = [];\n\n  error = '';\n  loading = true;\n\n  constructor(private apollo: Apollo) {}\n  ngOnInit() {\n    this.apollo\n      .watchQuery({\n        query: gql`\n          query AllInfoQuery {\n            user {\n              userID\n              name\n            }\n            document {\n              id\n              userID\n              title\n              brief\n              status\n            }\n            subdocuments {\n              id\n              userID\n              title\n              content\n              status\n            }\n          }\n        `,\n      })\n      .valueChanges.subscribe((result: any) => {\n        this.user = result?.data?.user;\n        this.document = result?.data?.document;\n        this.subdocuments = result?.data?.subdocuments;\n        this.loading = result.loading;\n\n        // Errors is an array and we're getting the first item only\n        this.error = result.errors[0].message;\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Development Server in Storybook Builder\nDESCRIPTION: Example of how a builder should integrate with Storybook's internal development server.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from 'vite';\n\nasync function startDevServer(options) {\n  const { configDir, port } = options;\n\n  const server = await createServer({\n    configFile: path.join(configDir, 'vite.config.js'),\n    root: process.cwd(),\n    server: {\n      port,\n    },\n  });\n\n  await server.listen();\n\n  console.log(`Storybook server started on http://localhost:${port}`);\n\n  return server;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Doctor with yarn\nDESCRIPTION: Executes the Storybook doctor command using yarn's dlx feature to diagnose and fix issues in a Storybook installation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-doctor.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@latest doctor\n```\n\n----------------------------------------\n\nTITLE: Generating changelog for Storybook release in Bash\nDESCRIPTION: Command to generate a changelog for a Storybook release.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn release:write-changelog <NEXT_VERSION_FROM_PREVIOUS_STEP> --verbose\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Web Components with JavaScript\nDESCRIPTION: Sets up Storybook stories for a Web Components Button using JavaScript. Configures the 'demo-button' custom element and defines a primary button story with custom name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook for SvelteKit\nDESCRIPTION: Command to install Storybook in a SvelteKit project. It prompts for configuration options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"create-command.md\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Solid Button Story - Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet registers a Button story for Storybook using the Solid framework. It imports the Button component and sets it as the value for the component property in the default export object. This enables using the Solid Button component within Storybook's UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\\n\\nexport default {\\n  component: Button,\\n};\n```\n\n----------------------------------------\n\nTITLE: Generating index.json for Outdated Storybook Versions\nDESCRIPTION: This bash command uses the Storybook CLI to generate the index.json file for projects using older Storybook versions or with specific requirements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx -p @storybook/cli@6.5.14 sb extract\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Solid in TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to set up Storybook stories for a Solid Button component using TypeScript 4.9 syntax. It uses the 'satisfies' keyword for type inference and imports types from 'storybook-solidjs'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Registering @storybook/addon-themes in Storybook Configuration\nDESCRIPTION: Diff showing how to add the @storybook/addon-themes to the addons array in the .storybook/main.js file. This step is necessary to enable the addon in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n+   '@storybook/addon-themes',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Angular Storybook with NgRx\nDESCRIPTION: These imports bring in the necessary components and functions from Angular core, NgRx store, and Storybook Angular. They are required to set up the component and story with store integration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.txt#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { Store, StoreModule } from '@ngrx/store';\nimport { storiesOf, moduleMetadata } from '@storybook/angular';\n```\n\n----------------------------------------\n\nTITLE: Button Stories Traditional TypeScript Implementation\nDESCRIPTION: Traditional TypeScript implementation using type annotations for Button component stories, defining Meta and StoryObj types from Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/configure-mock-provider-with-story-parameter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\nexport default meta;\n\ntype Story = StoryObj<typeof Button>;\n\n// Wrapped in light theme\nexport const Default: Story = {};\n\n// Wrapped in dark theme\nexport const Dark: Story = {\n  parameters: {\n    theme: 'dark',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook test runner that excludes stories tagged with 'no-tests' from being tested.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-exclude.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tags: {\n    exclude: ['no-tests'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Source Code Formatting in Storybook 9.0 with JavaScript\nDESCRIPTION: Shows how to replace the removed 'parameters.docs.source.format' with the new 'transform' parameter for custom code formatting in Storybook 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js|ts|jsx|tsx\nexport default {\n  parameters: {\n    docs: {\n      source: {\n        transform: async (source) => {\n          const prettier = await import(\"prettier/standalone\");\n          const prettierPluginBabel = await import(\"prettier/plugins/babel\");\n          const prettierPluginEstree = await import(\"prettier/plugins/estree\");\n\n          return prettier.format(source, {\n            parser: \"babel\",\n            plugins: [prettierPluginBabel, prettierPluginEstree],\n          });\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Accessibility Addon Manually\nDESCRIPTION: Command to install the Storybook Accessibility addon as a dev dependency using package managers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/install-addons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# With npm\nnpm install @storybook/addon-a11y --save-dev\n\n# With yarn\nyarn add -D @storybook/addon-a11y\n\n# With pnpm\npnpm add -D @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Running Vitest with Coverage\nDESCRIPTION: Command to run Vitest tests with coverage reporting enabled.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --coverage\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Imports in Next.js Components\nDESCRIPTION: Example of using absolute imports from the root directory in a Next.js component, which is supported in Storybook with the Next.js framework. Shows importing a component and CSS module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\n// All good!\nimport Button from 'components/button';\n// Also good!\nimport styles from 'styles/HomePage.module.css';\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1 className={styles.title}>Hello World</h1>\n      <Button />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Code Panel in Storybook Docs\nDESCRIPTION: Configuration to enable the source code panel feature in Storybook Docs, which automatically adds an addon panel that displays source snippets beneath each story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\nexport default {\n  parameters: {\n    docs: {\n      codePanel: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Storybook with yarn\nDESCRIPTION: Command to run Storybook with telemetry disabled using yarn. The flag is passed directly after the storybook command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-flag.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn storybook --disable-telemetry\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Essentials with pnpm (Shell)\nDESCRIPTION: This command utilizes the pnpm package manager to install the '@storybook/addon-essentials' package as a development dependency. It updates the project's `package.json` accordingly. Requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-essentials-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/addon-essentials\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Display for Storybook Info Addon\nDESCRIPTION: Demonstrates how to configure the Info addon to display component information inline within the story, rather than requiring a button click to reveal it.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Options.inline', module).add(\n  'Inlines component inside story',\n  withInfo({\n    text: 'Component should be inlined between description and PropType table',\n    inline: true, // Displays info inline vs click button to view\n  })(() => <BaseButton label=\"Button\" />)\n);\n```\n\n----------------------------------------\n\nTITLE: Listening to Story Changes in React Provider\nDESCRIPTION: Example of using the onStory API method in a custom React Provider to listen for story changes and update the preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Provider } from '@storybook/manager';\n\nclass ReactProvider extends Provider {\n  handleAPI(api) {\n    api.onStory((kind, story) => {\n      this.globalState.emit('change', kind, story);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Vue Configuration with Vite\nDESCRIPTION: Example showing how to add Vue-specific Vite plugins to Storybook configuration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@vitejs/plugin-vue\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Storybook Interaction Functions in JavaScript\nDESCRIPTION: This snippet demonstrates incorrect usage of Storybook interaction functions without awaiting them. This can cause issues with addon-interactions and debugging.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/await-interactions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from '@storybook/test';\n\n// or from the legacy package \"@storybook/testing-library\";\n\nMyStory.play = (context) => {\n  const canvas = within(context.canvasElement);\n  // not awaited!\n  userEvent.click(canvas.getByRole('button'));\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MSW Dependencies with PNPM\nDESCRIPTION: Installs Mock Service Worker (MSW) and MSW Storybook addon using PNPM package manager as development dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-install.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add msw msw-storybook-addon --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vite Builder with NPM\nDESCRIPTION: Command to install @storybook/builder-vite package using NPM package manager as a development dependency.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @storybook/builder-vite --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Loader for storiesOf Support in Storybook\nDESCRIPTION: JavaScript configuration to add source-loader to Webpack config in Storybook's main.js file for supporting storiesOf API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpackFinal: (config) => {\n    config.module.rules.push({\n      test: /\\.stories\\.[tj]sx?$/,\n      use: [\n        {\n          loader: require.resolve(\"@storybook/source-loader\"),\n          options: {} /* your sourceLoaderOptions here */,\n        },\n      ],\n      enforce: \"pre\",\n    });\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Storybook Stories\nDESCRIPTION: This snippet imports story files for components A and B, and configures the Meta component to reference B's stories. It demonstrates how to properly set up story imports and Meta configuration in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/complex/TwoStoryReferences.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/* References AStories first, but is attached to B */}\nimport * as AStories from '../src/A.stories';\nimport * as BStories from '../src/B.stories';\n\n<Meta of={BStories}/>\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Documentation in Storybook\nDESCRIPTION: This snippet shows how to add simple markdown documentation to a Storybook page. It includes a header and a brief text message.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfNoName.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Docs with of\n\nhello docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addons in main.js\nDESCRIPTION: JavaScript configuration to add the addon-docs to the Storybook addons list in the main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-docs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring @storybook/preset-create-react-app in presets.js\nDESCRIPTION: Shows an alternative basic configuration method applicable to all Storybook versions by adding the preset name directly to the array exported from the `./.storybook/presets.js` file. This achieves the same goal as configuring it in `main.js`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = ['@storybook/preset-create-react-app'];\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Viewport Addon with PNPM\nDESCRIPTION: Command to install @storybook/addon-viewport as a dev dependency using PNPM package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-viewport-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/addon-viewport\n```\n\n----------------------------------------\n\nTITLE: Enabling Addon Docs Integration in ember-cli-build.js\nDESCRIPTION: Configuration to enable the addon docs integration in the Ember CLI build process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet app = new EmberApp(defaults, {\n  'ember-cli-storybook': {\n    enableAddonDocsIntegration: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Web Component with LitElement in JavaScript\nDESCRIPTION: Implements a LitElement-based web component to render a document screen. It uses reactive properties for managing data and rendering HTML templates. Prerequisites include LitElement and web component support in browsers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass DocumentScreen extends LitElement {\n  static get properties() {\n    return {\n      data: { type: Object },\n    };\n  }\n\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  render() {\n    const { user, document, subdocuments } = this.data;\n    return html`\n      <demo-page-layout .user=${user}>\n        <demo-document-header .document=${document}></demo-document-header>\n        <demo-document-list .documents=${subdocuments}></demo-document-list>\n      </demo-page-layout>\n    `;\n  }\n}\n\ncustomElements.define('demo-document-screen', DocumentScreen);\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Web Components Vite package with yarn\nDESCRIPTION: This command installs the @storybook/web-components-vite package as a dev dependency using yarn. It's used to set up Storybook for Web Components projects that use Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/web-components-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Settings in JavaScript\nDESCRIPTION: This snippet demonstrates the basic configuration for Storybook's `.storybook/main.js` file using JavaScript. It specifies the framework (using a placeholder `@storybook/your-framework` that needs replacement), defines the location of story files using glob patterns (`../src/**/*.mdx`, `../src/**/*.stories.@(js|jsx|mjs|ts|tsx)`), and disables the \"What's New\" notifications via the `core.disableWhatsNewNotifications` option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-update-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  core: {\n    disableWhatsNewNotifications: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding A11y Addon in TypeScript Configuration\nDESCRIPTION: Demonstrates TypeScript configuration for adding the Storybook accessibility addon, including proper type imports and type annotations. Framework-specific configuration needs to be specified in the type import.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-example-addon.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-a11y',\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Async Storybook Story for Svelte Component using Svelte CSF\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for a Svelte component using Svelte CSF (Component Story Format). It includes a play function that simulates user interactions and uses Storybook's testing utilities for DOM manipulation. The story is written in JavaScript and utilizes the @storybook/addon-svelte-csf package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, waitFor, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<!--\n  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n  to learn more about using the canvasElement to query the DOM\n-->\n<Story\n  name=\"ExampleAsyncStory\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Preact Babel Plugins in Storybook Config\nDESCRIPTION: Storybook-specific babel configuration for Preact projects in .storybook/main.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  ...\n  babel: async (options) => {\n    options.plugins.push(\n      [\n        \"@babel/plugin-transform-react-jsx\", {\n          \"importSource\": \"preact\",\n          \"runtime\": \"automatic\"\n        }\n      ],\n      \"@babel/preset-typescript\"\n    )\n    return options;\n  },\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Storybook Website\nDESCRIPTION: Shell command for installing the necessary dependencies to work with the Storybook website locally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Metadata for Angular Basics README\nDESCRIPTION: This JSX code sets the metadata for the Storybook documentation, specifying the title and location of the README file for Angular basics in the Storybook hierarchy.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/basics/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"stories / frameworks / angular / basics / README\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding Globals in Portable Stories\nDESCRIPTION: Demonstrates how to override global values when testing stories that depend on global variables. Shows how to modify project annotations to test different language variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-jest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setProjectAnnotations, composeStories } from '@storybook/react';\nimport * as stories from './MyComponent.stories';\n\nsetProjectAnnotations({\n  ...projectAnnotations,\n  globals: {\n    locale: 'es',\n  },\n});\n\nconst { StoryInSpanish } = composeStories(stories);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Story Template with TypeScript in Storybook\nDESCRIPTION: Defines a reusable template for Button stories that can be used with different args. Uses TypeScript for type checking of the args parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Template = (args: Args) => <Button {...args} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Stories in Storybook Preview\nDESCRIPTION: Updates the .storybook/preview.js file to render stories in an iframe instead of inline for all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = { docs: { story: { inline: false } } };\n```\n\n----------------------------------------\n\nTITLE: Custom ArgType Name Configuration\nDESCRIPTION: Example of customizing the display name of an argType.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  argTypes: {\n    backgroundColor: {\n      name: 'Background Color'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with NPM\nDESCRIPTION: Executes Storybook test suite using NPM as the package manager. The command runs the test-storybook script defined in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Vue Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a story for a Vue component, turning off automatic accessibility checks. It features setups with standard StorybookVue TypeScript configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const NonA11yStory: Story = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration with Ignored Addons\nDESCRIPTION: Example showing how to configure the rule to ignore specific addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  rules: {\n    'storybook/no-uninstalled-addons': [\n      'error',\n      {\n        packageJsonLocation: './folder/package.json',\n        ignore: ['custom-addon'],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating List Stories in Vue with TypeScript\nDESCRIPTION: Shows how to create a List component story in Vue 3 using standard TypeScript with explicit type annotations. Demonstrates component registration, props passing, and template composition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './ListComponent.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 We're importing the necessary stories from ListItem\nimport { Selected, Unselected } from './ListItem.stories';\n\nconst meta: Meta<typeof List> = {\n  component: List,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof List>;\n\nexport const ManyItems: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { ...args };\n    },\n    template: `\n      <List v-bind=\"args\">\n        <list-item :isSelected=\"Selected\"/>\n        <list-item :isSelected=\"Unselected\"/>\n        <list-item :isSelected=\"Unselected\"/>\n      </List>`,\n  }),\n  args: {\n    Selected: Selected.args.isSelected,\n    Unselected: Unselected.args.isSelected,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Design Addon with pnpm\nDESCRIPTION: Adds the Storybook Design addon to your project using pnpm package manager. This command uses pnpm dlx to execute the storybook CLI tool and add the design addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-figma-addon-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest add @storybook/addon-designs\n```\n\n----------------------------------------\n\nTITLE: Accessing Storybook Environment Variables in Vite\nDESCRIPTION: This snippet shows how to access Storybook environment variables (STORYBOOK_THEME and STORYBOOK_DATA_KEY) in a Vite-based environment using the import.meta.env object. This syntax is specific to ES modules in Vite projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-read-environment-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta.env.STORYBOOK_THEME);\nconsole.log(import.meta.env.STORYBOOK_DATA_KEY);\n```\n\n----------------------------------------\n\nTITLE: Importing ArgTypes Block\nDESCRIPTION: JavaScript import statement for the ArgTypes block from Storybook addon-docs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-argtypes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Defining React Component with TypeScript\nDESCRIPTION: Creates a TypeScript interface to define prop types for a React component. It ensures user, document, and subdocuments are type-checked and displayed using imported components. Requires TypeScript and React setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport PageLayout from './PageLayout';\nimport Document from './Document';\nimport SubDocuments from './SubDocuments';\nimport DocumentHeader from './DocumentHeader';\nimport DocumentList from './DocumentList';\n\nexport interface DocumentScreenProps {\n  user?: {};\n  document?: Document;\n  subdocuments?: SubDocuments[];\n}\n\nexport function DocumentScreen({ user, document, subdocuments }: DocumentScreenProps) {\n  return (\n    <PageLayout user={user}>\n      <DocumentHeader document={document} />\n      <DocumentList documents={subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Button Story Configuration with TypeScript\nDESCRIPTION: Standard Button story configuration using TypeScript. Shows how to set up story metadata and parameters with proper type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      canvas: { sourceState: 'shown' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Debugging End-to-End Tests for Storybook in Shell\nDESCRIPTION: Command to run end-to-end tests in debug mode, which enables Playwright's watch mode for easier troubleshooting of test failures.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=1 yarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Asynchronously in Vue 3 Setup\nDESCRIPTION: This JavaScript snippet demonstrates fetching data asynchronously within a Vue 3 component's `setup` function using the Composition API. It initializes reactive references (`ref`) for `error`, `loading`, and `data`. An asynchronous request is made (presumably using `fetch` or a similar library), and the reactive references are updated based on the request's success or failure. The reactive references are returned to be used within the component's template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n          data.value = requestData;\n          loading.value = false;\n        })\n        .catch(() => {\n          error.value = 'error';\n        });\n      return {\n        error,\n        loading,\n        data,\n      };\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Coverage with NPM\nDESCRIPTION: Executes Storybook test coverage using NPM package manager. The command runs the test-storybook script with the coverage flag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-coverage.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --coverage\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Addon for Svelte CSF with pnpm\nDESCRIPTION: This command uses pnpm to add the @storybook/addon-svelte-csf package to a Svelte project using Storybook. It utilizes the pnpm dlx command to run the latest version of Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest add @storybook/addon-svelte-csf\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Web Components in TypeScript\nDESCRIPTION: Defines a Storybook meta configuration for Web Components using TypeScript. This example imports the Meta type specifically from '@storybook/web-components' and uses it to target a custom element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-example',\n  argTypes: {\n    value: {\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Setting Background Override with Globals\nDESCRIPTION: Example showing how to set background override values using the new globals property instead of the parameters property in story configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n// Button.stories.ts\nexport default {\n  component: Button,\n- parameters: {\n-   backgrounds: {\n-     default: \"twitter\",\n-   },\n- },\n+ globals: {\n+   backgrounds: { value: \"twitter\" },\n+ },\n};\n```\n\n----------------------------------------\n\nTITLE: Solid Storybook Preview Configuration in TypeScript\nDESCRIPTION: TypeScript version of the Storybook preview configuration for Solid framework. Includes type definitions and Preview interface implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normal as NavigationNormal } from '../components/Navigation.stories';\n\nimport GlobalContainerContext from '../components/lib/GlobalContainerContext';\n\nconst context = {\n  NavigationContainer: NavigationNormal,\n};\n\nconst AppDecorator = (storyFn) => {\n  return (\n    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>\n  );\n};\n\nconst preview: Preview = {\n  decorators: [AppDecorator],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Story in Web Components with JavaScript\nDESCRIPTION: Defines a Button component story for Web Components in Storybook using JavaScript. Imports the 'html' function from Lit, sets up metadata with title and component 'custom-button', and includes a Basic story that renders a custom-button element with a label property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\nexport default {\n  title: 'Button',\n  component: 'custom-button',\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Basic = {\n  render: () => html`<custom-button label=\"Hello\"></custom-button>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining NoteUI Stories with TypeScript 4.9 Syntax\nDESCRIPTION: This snippet defines Storybook stories for the NoteUI component using TypeScript 4.9 syntax. It includes imports, meta configuration using 'satisfies' keyword, and a 'Save Flow' story that tests the save functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the name of your renderer (e.g. react, vue3)\nimport type { Meta, StoryObj } from '@storybook/your-renderer';\nimport { expect, userEvent, within } from 'storybook/test';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { saveNote } from '#app/actions.mock';\nimport { createNotes } from '#mocks/notes';\n\nimport NoteUI from './note-ui';\n\nconst meta = {\n  title: 'Mocked/NoteUI',\n  component: NoteUI,\n} satisfies Meta<typeof NoteUI>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nconst notes = createNotes();\n\nexport const SaveFlow: Story = {\n  name: 'Save Flow ▶',\n  args: {\n    isEditing: true,\n    note: notes[0],\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    const saveButton = canvas.getByRole('menuitem', { name: /done/i });\n    await userEvent.click(saveButton);\n    // 👇 This is the mock function, so you can assert its behavior\n    await expect(saveNote).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing knobs addon with framework-specific path in React\nDESCRIPTION: Example of importing the knobs addon in React projects after the 3.3.x refactoring which requires framework-specific imports to avoid loading all runtimes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_172\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withKnobs, text, boolean, number } from \"@storybook/addon-knobs/react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Compiler Support for Storybook\nDESCRIPTION: Command to install and set up the Babel compiler addon for Storybook. This ensures compatibility with projects that rely on Babel's features.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook add @storybook/addon-webpack5-compiler-babel\n```\n\n----------------------------------------\n\nTITLE: Disabling DocsPage at Story Level\nDESCRIPTION: Shows how to disable DocsPage for an individual story within a component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n// export default { ... }\nexport const basic => () => <Button>Basic</Button>\nbasic.parameters = {\n  docs: { page: null }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directories in JavaScript Storybook Configuration\nDESCRIPTION: JavaScript example showing how to configure static directories in Storybook's main.js file. This maps a fonts directory from the source location to a specific path in the Storybook build.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-image-static-dirs.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  // ...\n  staticDirs: [\n    {\n      from: '../src/components/fonts',\n      to: 'src/components/fonts',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with PNPM for Solid.js\nDESCRIPTION: Command to create a new Storybook installation for Solid.js projects using PNPM package manager. Uses the latest version of Storybook with Solid.js template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-manual-framework.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm create storybook@latest --type solid\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Development Server in Storybook Builder\nDESCRIPTION: Example of how a builder should implement the shutdown of the development server.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function shutdownServer(server) {\n  if (server && server.close) {\n    await server.close();\n    console.log('Storybook server stopped');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating LCOV Test Coverage Report for Storybook using nyc\nDESCRIPTION: This command uses nyc (Istanbul's command line interface) to generate a code coverage report in LCOV format for Storybook. It specifies the test coverage directory location and the output directory for the report.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-report-lcov.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnpx nyc report --reporter=lcov -t coverage/storybook --report-dir coverage/storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Material UI themes in Storybook preview\nDESCRIPTION: Diff showing how to set up custom Material UI themes using the withThemeFromJSXProvider decorator in the Storybook preview.js file. This includes importing necessary components and custom theme configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-import { Preview } from '@storybook/your-renderer';\n+import { Preview, Renderer } from '@storybook/your-renderer';\n+import { withThemeFromJSXProvider } from '@storybook/addon-themes';\n+import { CssBaseline, ThemeProvider } from '@mui/material';\n+import { lightTheme, darkTheme } from '../src/themes'; // Import your custom theme configs\n\n// Load Roboto fonts\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport '@fontsource/material-icons';\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n+ decorators: [\n+   withThemeFromJSXProvider<Renderer>({\n+     themes: {\n+       light: lightTheme,\n+       dark: darkTheme,\n+     },\n+     defaultTheme: 'light',\n+     Provider: ThemeProvider,\n+     GlobalStyles: CssBaseline,\n+   }),\n+ ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Styling Storybook UI Components with CSS-in-JS\nDESCRIPTION: This snippet demonstrates how to apply custom styles to Storybook UI components using CSS-in-JS. It defines styles for containers, sections, grids, and other UI elements used in the Storybook configuration guide.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/rendererAssets/common/Configure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<style>\n  {`\n  .sb-container {\n    margin-bottom: 48px;\n  }\n\n  .sb-section {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    gap: 20px;\n  }\n\n  img {\n    object-fit: cover;\n  }\n\n  .sb-section-title {\n    margin-bottom: 32px;\n  }\n\n  .sb-section a:not(h1 a, h2 a, h3 a) {\n    font-size: 14px;\n  }\n\n  .sb-section-item, .sb-grid-item {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .sb-section-item-heading {\n    padding-top: 20px !important;\n    padding-bottom: 5px !important;\n    margin: 0 !important;\n  }\n  .sb-section-item-paragraph {\n    margin: 0;\n    padding-bottom: 10px;\n  }\n\n  .sb-chevron {\n    margin-left: 5px;\n  }\n\n  .sb-features-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 32px 20px;\n  }\n\n  .sb-socials {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  .sb-socials p {\n    margin-bottom: 10px;\n  }\n\n  .sb-explore-image {\n    max-height: 32px;\n    align-self: flex-start;\n  }\n\n  .sb-addon {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    position: relative;\n    background-color: #EEF3F8;\n    border-radius: 5px;\n  `}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Sort Function\nDESCRIPTION: Example of implementing custom story sorting using the storySort parameter\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_157\n\nLANGUAGE: javascript\nCODE:\n```\naddParameters({\n  options: {\n    storySort: (a, b) =>\n      a[1].kind === b[1].kind\n        ? 0\n        : a[1].id.localeCompare(b[1].id, undefined, { numeric: true }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Storybook Explore Page Components with CSS\nDESCRIPTION: This CSS snippet defines styles for various components of the Storybook explore page, including containers, sections, images, and responsive layouts for different screen sizes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/js/Configure.mdx#2025-04-22_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.sb-container {\n  margin-bottom: 48px;\n}\n\n.sb-section {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n}\n\nimg {\n  object-fit: cover;\n}\n\n.sb-section-title {\n  margin-bottom: 32px;\n}\n\n.sb-section a:not(h1 a, h2 a, h3 a) {\n  font-size: 14px;\n}\n\n.sb-section-item, .sb-grid-item {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.sb-section-item-heading {\n  padding-top: 20px !important;\n  padding-bottom: 5px !important;\n  margin: 0 !important;\n}\n.sb-section-item-paragraph {\n  margin: 0;\n  padding-bottom: 10px;\n}\n\n.sb-chevron {\n  margin-left: 5px;\n}\n\n.sb-features-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 32px 20px;\n}\n\n.sb-socials {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n}\n\n.sb-socials p {\n  margin-bottom: 10px;\n}\n\n.sb-explore-image {\n  max-height: 32px;\n  align-self: flex-start;\n}\n\n.sb-addon {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  position: relative;\n  background-color: #EEF3F8;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  background: #EEF3F8;\n  height: 180px;\n  margin-bottom: 48px;\n  overflow: hidden;\n}\n\n.sb-addon-text {\n  padding-left: 48px;\n  max-width: 240px;\n}\n\n.sb-addon-text h4 {\n  padding-top: 0px;\n}\n\n.sb-addon-img {\n  position: absolute;\n  left: 345px;\n  top: 0;\n  height: 100%;\n  width: 200%;\n  overflow: hidden;\n}\n\n.sb-addon-img img {\n  width: 650px;\n  transform: rotate(-15deg);\n  margin-left: 40px;\n  margin-top: -72px;\n  box-shadow: 0 0 1px rgba(255, 255, 255, 0);\n  backface-visibility: hidden;\n}\n\n@media screen and (max-width: 800px) {\n  .sb-addon-img {\n    left: 300px;\n  }\n}\n\n@media screen and (max-width: 600px) {\n  .sb-section {\n    flex-direction: column;\n  }\n\n  .sb-features-grid {\n    grid-template-columns: repeat(1, 1fr);\n  }\n\n  .sb-socials {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .sb-addon {\n    height: 280px;\n    align-items: flex-start;\n    padding-top: 32px;\n    overflow: hidden;\n  }\n\n  .sb-addon-text {\n    padding-left: 24px;\n  }\n\n  .sb-addon-img {\n    right: 0;\n    left: 0;\n    top: 130px;\n    bottom: 0;\n    overflow: hidden;\n    height: auto;\n    width: 124%;\n  }\n\n  .sb-addon-img img {\n    width: 1200px;\n    transform: rotate(-12deg);\n    margin-left: 0;\n    margin-top: 48px;\n    margin-bottom: -40px;\n    margin-left: -24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Button Component with Storybook and Jest\nDESCRIPTION: This code snippet shows how to test a Vue Button component using Storybook, Jest, and Vue Testing Library. It composes a story, simulates a click event, and checks if the onClick handler is called.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-story.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { jest, test, expect } from '@jest/globals';\nimport { render, screen } from '@testing-library/vue';\nimport { composeStory } from '@storybook/vue3';\n\nimport meta, { Primary as PrimaryStory } from './Button.stories';\n\ntest('onclick handler is called', () => {\n  // Returns a story which already contains all annotations from story, meta and global levels\n  const Primary = composeStory(PrimaryStory, meta);\n\n  const onClickSpy = jest.fn();\n  await Primary.run({ args: { ...Primary.args, onClick: onClickSpy } });\n\n  const buttonElement = screen.getByRole('button');\n  buttonElement.click();\n  expect(onClickSpy).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ProfilePage Component in React\nDESCRIPTION: A React component that renders a user profile page with posts and friends sections. Uses React Context to access container components and receives name and userId as props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-in-use.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\n\nimport ProfilePageContext from './ProfilePageContext';\n\nexport const ProfilePage = ({ name, userId }) => {\n  const { UserPostsContainer, UserFriendsContainer } = useContext(ProfilePageContext);\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <UserPostsContainer userId={userId} />\n      <UserFriendsContainer userId={userId} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Layout Parameter in Storybook Preview\nDESCRIPTION: Configures the global layout parameter in Storybook's preview.js file to center all stories in the Canvas tab.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-layout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Automigration with PNPM\nDESCRIPTION: Executes Storybook's automigration utility using PNPM's DLX command. Uses the latest version of Storybook to run the automigrate command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-automigrate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest automigrate\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook React Webpack5 with npm (Shell)\nDESCRIPTION: This shell command installs the @storybook/react-webpack5 package as a development dependency using npm. It is intended for React projects that want to use Storybook with Webpack5 integration. Requires npm to be installed, and should be run in the project's root directory. Adds the package under devDependencies in package.json; no additional parameters are required.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/react-webpack5\n```\n\n----------------------------------------\n\nTITLE: Running Storybook with Telemetry Disabled\nDESCRIPTION: Demonstrates how to disable Storybook's telemetry collection by setting the STORYBOOK_DISABLE_TELEMETRY environment variable to 1 before launching Storybook with yarn. This environment variable prevents Storybook from collecting usage data.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-env.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nSTORYBOOK_DISABLE_TELEMETRY=1 yarn storybook\n```\n\n----------------------------------------\n\nTITLE: Enabling Crash Reports with Command Line Flag\nDESCRIPTION: Shows how to enable crash reporting using the --enable-crash-reports command line flag when running Storybook commands.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstorybook dev --enable-crash-reports\n```\n\n----------------------------------------\n\nTITLE: Defining Transport Interface in JavaScript\nDESCRIPTION: This snippet defines the Transport interface with methods for sending events and setting handlers. It's used by the Channel class to send and receive messages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/channels/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Transport {\n  send(event) {}\n  setHandler(handler) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Storybook with npm\nDESCRIPTION: Command to run Storybook with telemetry disabled using npm. Note the double dash syntax required for passing the telemetry flag.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-flag.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run storybook -- --disable-telemetry\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Action ArgTypes Matching in Storybook Preview\nDESCRIPTION: Shows how to configure Storybook to automatically create actions for argTypes that match a specific pattern in the preview.js configuration. This approach is useful for components with many event handlers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\n\nexport default {\n  parameters: {\n    actions: { argTypesRegex: '^on.*' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Documentation with MDX\nDESCRIPTION: Uses the Meta component to associate the documentation with the Button stories, and renders the custom Template component. This structure allows for dynamic, interactive documentation of the Button component within Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={ButtonStories} />\n\n<Template />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addon-Docs Components in JavaScript\nDESCRIPTION: This snippet imports necessary components from the @storybook/addon-docs package. These components are used to create a structured documentation page for Storybook stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/Template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Title, Description, ArgsTable, Stories, PRIMARY_STORY } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Button Story with Documentation Parameters in Storybook\nDESCRIPTION: Shows how to configure documentation-specific parameters for a story, setting the iframe height for the story in the docs panel.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nexport const WithDocsParams = () => <Button>WithDocsParams</Button>;\nWithDocsParams.parameters = { docs: { story: { iframeHeight: '200px' } } };\n```\n\n----------------------------------------\n\nTITLE: Changing Default Element Selector in A11y Addon\nDESCRIPTION: Configuration to revert the Accessibility addon to use the previous default element selector (#storybook-root) instead of the new default (body).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/preview.js\nexport const parameters = {\n  a11y: {\n+    element: '#storybook-root',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Parameters with Disable Option\nDESCRIPTION: Example showing how to disable an addon for specific stories using story parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_139\n\nLANGUAGE: javascript\nCODE:\n```\nexport StoryOne = ...;\nStoryOne.story = { parameters: { addon: { disable: true } } };\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook using yarn\nDESCRIPTION: This command upgrades Storybook to the latest version using yarn. It uses yarn dlx to execute the Storybook upgrade command without installing it globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-prerelease.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@next upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/preact-vite with npm\nDESCRIPTION: This command installs the @storybook/preact-vite package as a dev dependency using npm. It's used to set up Storybook for Preact projects with Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/preact-vite\n```\n\n----------------------------------------\n\nTITLE: Updated Backgrounds Addon Configuration\nDESCRIPTION: Shows the new API format for configuring background options in stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_146\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  title: \"Button\",\n  parameters: {\n    backgrounds: {\n      default: \"twitter\",\n      values: [\n        { name: \"twitter\", value: \"#00aced\" },\n        { name: \"facebook\", value: \"#3b5998\" }\n      ]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Converting storiesOf to CSF 1 using npm\nDESCRIPTION: This command uses npx to run the Storybook migration tool, converting stories from storiesOf API to CSF 1 format. It targets TypeScript (.tsx) story files using the specified glob pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-stories-of-to-csf.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Convert storiesOf to CSF 1\nnpx storybook@latest migrate storiesof-to-csf --glob=\"**/*.stories.tsx\" --parser=tsx\n```\n\n----------------------------------------\n\nTITLE: Legacy Decorator Order Configuration\nDESCRIPTION: Configuration to restore pre-7.0 decorator execution order behavior.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  features: {\n    legacyDecoratorFileOrder: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: SEO No-Index Configuration\nDESCRIPTION: HTML meta tag configuration to prevent search engines from indexing Storybook\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"robots\" content=\"noindex\" />\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Documentation from Monorepo to Website\nDESCRIPTION: Shell command to run the sync-docs script which connects the documentation from a local Storybook monorepo to the website for preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run sync-docs\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Theme Addon and PostCSS Dark Theme Class\nDESCRIPTION: Commands for installing @storybook/addon-themes and postcss-dark-theme-class using different package managers (yarn, npm, pnpm).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyarn add -D @storybook/addon-themes postcss-dark-theme-class\n```\n\nLANGUAGE: zsh\nCODE:\n```\nnpm install -D @storybook/addon-themes postcss-dark-theme-class\n```\n\nLANGUAGE: zsh\nCODE:\n```\npnpm add -D @storybook/addon-themes postcss-dark-theme-class\n```\n\n----------------------------------------\n\nTITLE: Updating Globals from Addon\nDESCRIPTION: Demonstrates how to update global values and refresh the UI from within a Storybook addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGlobals } from \"@storybook/manager-api\";\n\nexport const ThemeSelector = () => {\n  const [globals, updateGlobals] = useGlobals();\n\n  const toggleTheme = () => {\n    const theme = globals.theme === \"light\" ? \"dark\" : \"light\";\n    updateGlobals({ theme });\n  };\n\n  return <button onClick={toggleTheme}>Toggle theme</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: ArgTypes Type Definition\nDESCRIPTION: Example of explicitly defining the type of an argType.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  argTypes: {\n    size: {\n      type: { name: 'enum', value: ['small', 'medium', 'large'] }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying React Version Information in MDX\nDESCRIPTION: Renders React, ReactDOM, and ReactDOMServer version information within code tags. Uses optional chaining to handle cases where version information might not be available.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/ResolvedReact.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<code>react</code>: <code data-testid=\"mdx-react\">{ReactExport.version ?? 'no version export found'}</code>\n\n<code>react-dom</code>: <code data-testid=\"mdx-react-dom\">{ReactDom.version ?? 'no version export found'}</code>\n\n<code>react-dom/server</code>: <code data-testid=\"mdx-react-dom-server\">{ReactDomServer.version ?? 'no version export found'}</code>\n```\n\n----------------------------------------\n\nTITLE: Generated CSF Output Example\nDESCRIPTION: Example of the CSF file generated after transpiling the custom variant format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// virtual:Button.variants.js|ts\n\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Plugin with Story Tags\nDESCRIPTION: Configuration example showing how to include and exclude stories from testing based on tags. Demonstrates using the tags option to control which stories are tested.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineWorkspace([\n  // ...\n  {\n    // ...\n    {\n      plugins: [\n        storybookTest({\n          // ...\n          tags: {\n            include: ['test'],\n            exclude: ['experimental'],\n          },\n        }),\n      ],\n    },\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc\nDESCRIPTION: Command to install Compodoc for generating documentation\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @compodoc/compodoc\n```\n\n----------------------------------------\n\nTITLE: Importing Static Image in Storybook Story\nDESCRIPTION: Shows how to import an image file in a Storybook story component. The imported image will be included in the webpack bundle and the import will resolve to a usable path for the src attribute.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-import-static-asset.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This will include './static/image.png' in the bundle.\n// And return a path to be included in a src attribute\nimport imageFile from './static/image.png';\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with pnpm\nDESCRIPTION: This command uses pnpm to add the Storybook for React Native Web along with Vite as development dependencies. Make sure pnpm is installed and configured on your system.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/react-native-web-vite vite\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Interactions Addon with pnpm\nDESCRIPTION: Installs the `@storybook/addon-interactions` package as a development dependency using the pnpm package manager. The `--save-dev` flag adds it to the `devDependencies` section of `package.json`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-interactions-addon-full-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/addon-interactions\n```\n\n----------------------------------------\n\nTITLE: Mocking Addon Channel for Jest Testing\nDESCRIPTION: Code snippet showing how to mock the Storybook addon channel in Jest tests to prevent errors when accessing the channel in a non-browser environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons, mockChannel } from 'storybook/preview-api';\n\naddons.setChannel(mockChannel());\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with PNPM\nDESCRIPTION: Installs Storybook using PNPM package manager while setting the package manager configuration to npm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-custom-package-manager.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm create storybook@latest --package-manager=npm\n```\n\n----------------------------------------\n\nTITLE: Installing Chromatic addon with npm\nDESCRIPTION: Command to add the Chromatic integration to a Storybook project using npm as the package manager. Uses npx to execute the Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-storybook-add.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest add @chromatic-com/storybook\n```\n\n----------------------------------------\n\nTITLE: Creating List Component Stories in Vue with TypeScript 4.9\nDESCRIPTION: Implementation of Storybook stories for a List component in Vue 3 using TypeScript 4.9 with the satisfies operator. It shows how to create properly typed stories with Vue components and templates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport List from './List.vue';\nimport ListItem from './ListItem.vue';\n\n//👇 Imports a specific story from ListItem stories\nimport { Unchecked } from './ListItem.stories';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n  component: List,\n} satisfies Meta<typeof List>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n//👇 The ListTemplate construct will be spread to the existing stories.\nexport const ListTemplate: Story = {\n  render: (args) => ({\n    components: { List, ListItem },\n    setup() {\n      return { ...args };\n    },\n    template: `\n      <List v-bind=\"args\">\n        <div v-for=\"item in items\" :key=\"item.title\">\n          <ListItem :item=\"item\"/>\n        </div>\n      </List>\n    `,\n  }),\n};\n\nexport const Empty: Story = {\n  ...ListTemplate,\n  args: {\n    items: [],\n  },\n};\nexport const OneItem: Story = {\n  ...ListTemplate,\n  args: {\n    items: [\n      {\n        ...Unchecked.args,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Preview.js Exports in Storybook Builder\nDESCRIPTION: Example of how a builder should handle exports from the preview.js file, converting them to internal API calls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const decorators = [\n  (Story) => (\n    <div style={{ margin: '3em' }}>\n      <Story />\n    </div>\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Using ArgsTable in MDX for Props Table\nDESCRIPTION: This code snippet shows how to use the ArgsTable block in MDX to display a props table for a component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// MyComponent.stories.mdx\nimport { ArgsTable } from '@storybook/addon-docs';\nimport { MyComponent } from './MyComponent';\n\n# My Component!\n\n<ArgsTable of={MyComponent} />\n```\n\n----------------------------------------\n\nTITLE: Local Addon Configuration in main.js\nDESCRIPTION: Updated path configuration for local addons in main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_144\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = { addons: [\"./my-local-addon/register\"] };\n```\n\n----------------------------------------\n\nTITLE: Correct CSF Implementation with Component Export\nDESCRIPTION: Example of proper Component Story Format (CSF) implementation using default export for component configuration and named export for story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-stories-of.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '../components/Button';\n\nexport default = {\n  component: Button\n}\n\nexport const Primary = () => <Button primary />\n```\n\n----------------------------------------\n\nTITLE: Serving Storybook Build with npm and http-server\nDESCRIPTION: This command uses npx to run http-server and serve the Storybook build directory. It requires npm to be installed and the Storybook build to be completed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preview-storybook-production-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx http-server ./path/to/build\n```\n\n----------------------------------------\n\nTITLE: Extracting Storybook with Yarn\nDESCRIPTION: Executes Storybook's extract command using Yarn package manager at version 7.5.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-extract-specific-version.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@7.5.3 extract\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in Svelte with JavaScript\nDESCRIPTION: Sets up Storybook stories for a Svelte Button component using JavaScript. Imports the Svelte component, configures component metadata, and defines a primary button story with custom name and arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  // 👇 Rename this story\n  name: 'I am the primary',\n  args: {\n    label: 'Button',\n    primary: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Story with JavaScript\nDESCRIPTION: Shows how to configure a story for Web Components using JavaScript. Uses string-based component reference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Path/To/MyComponent',\n  component: 'my-component',\n  decorators: [/* ... */],\n  parameters: {/* ... */},\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled Button in TypeScript React\nDESCRIPTION: Demonstrates how to use the disabled prop to set the Button as disabled. This is important for indicating that a button is not currently interactive or available for use.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Button disabled>\n  <FaceHappyIcon />Button\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Documentation Page in JSX/MDX\nDESCRIPTION: Demonstrates how to create a basic Storybook documentation page using the Meta and Subtitle components from @storybook/addon-docs. Sets up a page with a title, heading, subtitle, and content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/Title.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Subtitle } from '@storybook/addon-docs';\n\n<Meta title=\"Yabbadabbadooo\" />\n\n# Docs with title\n\n<Subtitle>Subtitle</Subtitle>\n\nhello docs\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in Svelte CSF with TypeScript 4.9\nDESCRIPTION: This snippet illustrates how to define Storybook stories for a Svelte Button component using Svelte CSF and TypeScript 4.9. It uses the defineMeta function to create stories and defines primaryArgs for reuse.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n\n  const primaryArgs = {\n    primary: true,\n    label: 'Button',\n  }\n</script>\n\n<Story name=\"Primary\" args={primaryArgs} />\n\n<Story name=\"PrimaryLongName\"\n  args={{\n    ...primaryArgs,\n    label: 'Primary with a really long name'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Displaying All Stories\nDESCRIPTION: Renders all available stories using the Stories component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOfNamed.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Stories />\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in React Storybook Stories with TypeScript 4.9+\nDESCRIPTION: Shows how to add a margin decorator to a React Button component using TypeScript 4.9+ with the 'satisfies' operator. This approach provides better type safety while wrapping the Story component in a div with margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Story with TypeScript\nDESCRIPTION: Demonstrates TypeScript configuration for Web Components stories. Includes Meta type import from @storybook/web-components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Path/To/MyComponent',\n  component: 'my-component',\n  decorators: [/* ... */],\n  parameters: {/* ... */},\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Qwik\nDESCRIPTION: Vite configuration setup for Qwik projects using vite-plugin-qwik.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport qwik from \"vite-plugin-qwik\";\n\nexport default defineConfig({\n  plugins: [qwik()],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Doctor with pnpm\nDESCRIPTION: Executes the Storybook doctor command using pnpm's dlx feature to diagnose and fix issues in a Storybook installation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-doctor.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest doctor\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes using yarn\nDESCRIPTION: Command to install @storybook/addon-themes as a dev dependency using yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyarn add -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Vue Button Story Implementation (JavaScript)\nDESCRIPTION: Default story implementation for a Button component in Vue using CSF 3 format. Uses JavaScript with Vue's component registration and template binding pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Default = {\n  render: (args) => ({\n    components: { Button },\n    setup() {\n      return { args };\n    },\n    template: '<Button v-bind=\"args\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Control Types Definition\nDESCRIPTION: TypeScript type definition for control configuration options in ArgTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n| ControlType\n| {\n    type: ControlType,\n    accept?: string;\n    labels?: { [option: string]: string };\n    max?: number;\n    min?: number;\n    presetColors?: string[];\n    step?: number;\n  }\n| false\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook with pnpm\nDESCRIPTION: This command uses pnpm dlx to upgrade Storybook to the latest version using pnpm package manager. It runs the 'upgrade' command of the '@next' version of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@next upgrade\n```\n\n----------------------------------------\n\nTITLE: Running Storybook with pnpm\nDESCRIPTION: Command to start Storybook using pnpm as the package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-run-dev.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook to Latest Version\nDESCRIPTION: Command to upgrade an existing Storybook installation to the latest version. This is necessary for projects using versions prior to Storybook 7.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest upgrade\n```\n\n----------------------------------------\n\nTITLE: Using Storybook Story Component with an Error in JSX\nDESCRIPTION: This code demonstrates an erroneous usage of Storybook's Story component. The comment explicitly states that the file intentionally contains an error. The error is that 'Something' is referenced but not defined or imported anywhere in the file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/Error.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* This file intentionally has an error */}\n\n<Story of={Something} />\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook with PNPM\nDESCRIPTION: Command to start the Storybook development server using PNPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-run-dev-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Defining a Story with Primary Variant\nDESCRIPTION: Example of a story with a 'variant' arg set to 'primary'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = {\n  args: {\n    variant: 'primary',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing addons in stories with the new package structure\nDESCRIPTION: Example of importing addons in a story file using the new package names after migrating from the deprecated embedded addons approach.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_178\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { linkTo } from \"@storybook/addon-links\";\n```\n\n----------------------------------------\n\nTITLE: Storybook Options Type Definition\nDESCRIPTION: TypeScript type definition for the Options object parameter, specifying the configType property which can be either DEVELOPMENT or PRODUCTION.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-babel-default.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nType: `{ configType?: 'DEVELOPMENT' | 'PRODUCTION' }`\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc for Angular Storybook\nDESCRIPTION: Command to install Compodoc, a documentation generator for Angular applications used by Storybook to infer argTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @compodoc/compodoc -D\n```\n\n----------------------------------------\n\nTITLE: Feature Flag Configuration Example\nDESCRIPTION: Example showing how to configure Storybook feature flags in main.js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  features: {\n    emotionAlias: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Component TypeScript Implementation\nDESCRIPTION: Example of a strongly typed Vue 3 single file component with TypeScript props and emit definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/typescript.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  defineProps<{ count: number; disabled: boolean }>();\n\n  const emit = defineEmits<{\n    (e: 'increaseBy', amount: number): void;\n    (e: 'decreaseBy', amount: number): void;\n  }>();\n</script>\n\n<template>\n  <div class=\"card\">\n    {{ count }}\n    <button @click=\"emit('increaseBy', 1)\" :disabled=\"disabled\">Increase by 1</button>\n    <button @click=\"$emit('decreaseBy', 1)\" :disabled=\"disabled\">Decrease by 1</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with npm\nDESCRIPTION: This command runs Storybook tests using npm, specifying a URL for the Storybook instance to be tested.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-url.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --url https://the-storybook-url-here.com\n```\n\n----------------------------------------\n\nTITLE: Installing Coverage Support Packages for Vitest\nDESCRIPTION: Command to install the necessary support package for coverage calculation with Vitest.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @vitest/coverage-v8\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Specific Vite Plugins for Svelte\nDESCRIPTION: Illustrates how to explicitly add the Svelte-specific Vite plugin in the Vite configuration for Storybook 8 (without Sveltekit).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport { svelte } from \"@sveltejs/vite-plugin-svelte\";\n\nexport default defineConfig({\n  plugins: [svelte()],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Primary Block Component\nDESCRIPTION: Demonstrates how to import the Primary block component from Storybook addon-docs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-primary.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Primary } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Customizing Source Code Snippet in Storybook Docs\nDESCRIPTION: This code demonstrates how to override the docs.source.code parameter to render a custom string in the Source block of Storybook Docs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Example = () => <Button />;\nExample.parameters = {\n  docs: { source: { code: 'some arbitrary string' } },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using JavaScript. It sets the framework, specifies the directory for stories, defines the file pattern for stories, and sets a title prefix for automatic story naming.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-with-object.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: [\n    {\n      // 👇 Sets the directory containing your stories\n      directory: '../packages/components',\n      // 👇 Storybook will load all files that match this glob\n      files: '*.stories.*',\n      // 👇 Used when generating automatic titles for your stories\n      titlePrefix: 'MyComponents',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering with Solid in JavaScript\nDESCRIPTION: Defines a SolidJS component that accepts user, document, and subdocuments to display in a layout. The component imports required Solid utilities and maintains a consistent rendering structure with other implementations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nexport function DocumentScreen({ user, document, subdocuments }) {\n  return (\n    <PageLayout user={user}>\n      <DocumentHeader document={document} />\n      <DocumentList documents={subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Agnostic Button Stories in TypeScript\nDESCRIPTION: Standard TypeScript configuration for Button stories with explicit type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      source: { language: 'tsx' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling Header Visibility in Storybook Info Addon\nDESCRIPTION: Shows how to hide the Info addon header which normally displays the component name and description. This can be useful for cleaner documentation in certain cases.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Options.header', module).add(\n  'Shows or hides Info Addon header',\n  withInfo({\n    text: 'The Info Addon header should be hidden',\n    header: false, // Toggles display of header with component name and description\n  })(() => <BaseButton label=\"Button\" />)\n);\n```\n\n----------------------------------------\n\nTITLE: Storybook Solid Configuration with Vite\nDESCRIPTION: Example showing how to add Solid-specific Vite plugins to Storybook configuration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvite-plugin-solid\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI fonts in Storybook preview\nDESCRIPTION: Diff showing how to import Roboto and Material Icon fonts from @fontsource in the Storybook preview.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport { Preview } from '@storybook/your-renderer';\n\n+// Load Material UI fonts\n+import '@fontsource/roboto/300.css';\n+import '@fontsource/roboto/400.css';\n+import '@fontsource/roboto/500.css';\n+import '@fontsource/roboto/700.css';\n+import '@fontsource/material-icons';\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Storybook Tests in YAML\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow that runs Storybook tests after a successful deployment. It sets up Node.js, installs dependencies, and uses Playwright to execute the tests. The workflow is triggered by deployment status changes and targets the deployed URL.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-with-deploy-event-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Storybook Tests\n\non: deployment_status\n\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n      - name: Install dependencies\n        run: yarn\n      - name: Install Playwright\n        run: npx playwright install --with-deps\n      - name: Run Storybook tests\n        run: yarn test-storybook\n        env:\n          TARGET_URL: '${{ github.event.deployment_status.target_url }}'\n```\n\n----------------------------------------\n\nTITLE: Excluding a Story from Autodocs\nDESCRIPTION: Removes the 'autodocs' tag from a specific story to exclude it from the automatically generated documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const ExcludedStory = {\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      disable: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Stories in React Provider\nDESCRIPTION: Example of using the setStories API method in a custom React Provider to define the structure of stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Provider } from '@storybook/manager';\n\nclass ReactProvider extends Provider {\n  handleAPI(api) {\n    api.setStories([\n      {\n        kind: 'Component 1',\n        stories: ['State 1', 'State 2'],\n      },\n\n      {\n        kind: 'Component 2',\n        stories: ['State a', 'State b'],\n      },\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with yarn\nDESCRIPTION: This command uses yarn to run the 'test-storybook' script, which executes Storybook tests. It's designed for projects using yarn as their package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook\n```\n\n----------------------------------------\n\nTITLE: Listing Sub-packages in Storybook Preview API (Markdown)\nDESCRIPTION: This snippet lists the sub-packages that have been combined into the Storybook Preview API package, along with links to their old documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `@storybook/addons` [read (old) docs](./README-addons.md)\n- `@storybook/core-client` [read (old) docs](./README-core-client.md)\n- `@storybook/preview-web` [read (old) docs](./README-preview-web.md)\n- `@storybook/store` [read (old) docs](./README-store.md)\n```\n\n----------------------------------------\n\nTITLE: Advanced MDX Example with moduleMetadata and Templates\nDESCRIPTION: MDX example demonstrating how to translate stories that use template, moduleMetadata, and decorators to the MDX format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport { CheckboxComponent, RadioButtonComponent } from './my-components';\nimport { moduleMetadata } from '@storybook/angular';\n\n<Meta title='Checkbox' decorators={[\n  moduleMetadata({\n    declarations: [CheckboxComponent]\n  })\n]} />\n\n# Basic Checkbox\n\n<Story name='basic check' height='400px'>{{\n  template: `\n    <div class=\"some-wrapper-with-padding\">\n      <my-checkbox [checked]=\"checked\">Some Checkbox</my-checkbox>\n    </div>\n  `,\n  props: {\n    checked: true\n  }\n}}</Story>\n\n# Basic Radiobutton\n\n<Story name='basic radio' height='400px'>{{\n  moduleMetadata: {\n    declarations: [RadioButtonComponent]\n  }\n  template: `\n    <div class=\"some-wrapper-with-padding\">\n      <my-radio-btn [checked]=\"checked\">Some Checkbox</my-radio-btn>\n    </div>\n  `,\n  props: {\n    checked: true\n  }\n}}</Story>\n```\n\n----------------------------------------\n\nTITLE: Importing Unstyled Block in JavaScript\nDESCRIPTION: This snippet shows how to import the Unstyled block from Storybook addon-docs in a JavaScript file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-unstyled.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Unstyled } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Importing Controls Component\nDESCRIPTION: Shows how to import the Controls component from Storybook addon-docs blocks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-controls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controls } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React-Webpack5 Framework\nDESCRIPTION: Command for installing the Storybook framework package for React with Webpack 5.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storybook/react-webpack5\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom react-scripts Package for @storybook/preset-create-react-app\nDESCRIPTION: Demonstrates how to configure the preset in `./.storybook/main.js` when using a custom or forked `react-scripts` package instead of the official one. The `scriptsPackageName` option allows specifying the exact npm package name (e.g., '@my/react-scripts') so the preset can locate and utilize its specific Webpack and Babel configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  addons: [\n    {\n      name: '@storybook/preset-create-react-app',\n      options: {\n        scriptsPackageName: '@my/react-scripts',\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry with Command Line Flag\nDESCRIPTION: Shows how to disable telemetry using the --disable-telemetry command line flag when running Storybook commands.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstorybook dev --disable-telemetry\n```\n\n----------------------------------------\n\nTITLE: Configure Storybook Main File in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook's main configuration file using Svelte with Vite bundler. Imports StorybookConfig type and defines a typed configuration object with framework settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-framework-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookConfig } from '@storybook/svelte-vite';\n\nconst config: StorybookConfig = {\n  // ...\n  framework: {\n    name: '@storybook/svelte-vite',\n    options: {\n      // ...\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Registering Vue Button Story - Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet registers a Button component for Storybook in a Vue context. It imports the Button Vue component and sets it as the value for the component property within the default export object. The import requires the Button component to be located locally as './Button.vue'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.vue';\\n\\nexport default {\\n  component: Button,\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Body with Environment Conditions\nDESCRIPTION: Demonstrates how to programmatically modify the preview body of Storybook based on environment conditions. The example shows adding custom scripts and styles conditionally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-preview-body.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  previewBody: (body) => {\n    if (process.env.NODE_ENV === 'development') {\n      return `\n        ${body}\n        <script src=\"dev-only.js\"></script>\n        <style>\n          #dev-tools { display: block }\n        </style>\n      `;\n    }\n    return body;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook for React Vite Using pnpm - Shell\nDESCRIPTION: This shell command uses pnpm to add the @storybook/react-vite package as a development dependency for a React project. Dependencies include pnpm installed globally and a pnpm-initialized project. It modifies the project's package.json accordingly and should be executed in the terminal at the project root.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/react-vite\n```\n\n----------------------------------------\n\nTITLE: Running Storybook initialization tool for package renaming\nDESCRIPTION: Command to use the Storybook CLI to automatically update your project to use the new package names introduced in version 3.0.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_176\n\nLANGUAGE: bash\nCODE:\n```\nnpx -p @storybook/cli sb init\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with npm\nDESCRIPTION: Command to initialize Storybook in a JavaScript project using npm package manager. This uses the @next tag to install the latest pre-release version of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@next init\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration for Button in JavaScript/JSX\nDESCRIPTION: This code configures Storybook for a Button component using JS/JSX, allowing selection between different arrow icons. It defines the available options and maps their values for Storybook's control. Ensure compatibility with the JS/JSX setup used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';\n\nconst arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };\n\nexport default {\n  component: Button,\n  argTypes: {\n    arrow: {\n      options: Object.keys(arrows), // An array of serializable values\n      mapping: arrows, // Maps serializable option values to complex arg values\n      control: {\n        type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n        labels: {\n          // 'labels' maps option values to string labels\n          ArrowUp: 'Up',\n          ArrowDown: 'Down',\n          ArrowLeft: 'Left',\n          ArrowRight: 'Right',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with React JSX Transform in TypeScript\nDESCRIPTION: This TypeScript version of the babelDefault function extends the provided Babel configuration to include the React JSX transform plugin. It uses the TransformOptions type from @babel/core for type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-babelDefault.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { TransformOptions } from '@babel/core';\n\nexport function babelDefault(config: TransformOptions) {\n  return {\n    ...config,\n    plugins: [\n      ...config.plugins,\n      [require.resolve('@babel/plugin-transform-react-jsx'), {}, 'preset'],\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Local iFrame Height for DocsPage Stories\nDESCRIPTION: TypeScript example showing how to set the iframe height parameter locally for a specific story when using DocsPage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport const basic = () => ...\nbasic.parameters = {\n  docs: { story: { iframeHeight: '400px' } }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint with NPM\nDESCRIPTION: Installs ESLint as a development dependency using NPM package manager. The --save-dev flag ensures ESLint is added to devDependencies in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev eslint\n```\n\n----------------------------------------\n\nTITLE: Solid Button Story Implementation (TypeScript)\nDESCRIPTION: Default story implementation for a Button component in SolidJS using CSF 3 format with TypeScript. Includes Story type definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Default: Story = {\n  render: (args) => <Button {...args} />,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Component Metadata with Angular in TypeScript\nDESCRIPTION: This code sets up metadata for a Storybook story using TypeScript with an Angular renderer. It imports necessary types from Storybook, specifies the 'Example' component, and configures argument types and controls for a numeric 'value' property. The setup allows numeric input for interactive demos with specified range and step values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    value: {\n      control: {\n        type: 'number',\n        min: 0,\n        max: 100,\n        step: 10,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook Webpack 5 Babel Addon via pnpm\nDESCRIPTION: Uses `pnpm dlx` (pnpm download and execute) to run the latest version of the Storybook CLI and add the `@storybook/addon-webpack5-compiler-babel` addon to the current project. This command is intended for projects managed with pnpm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-babel-auto-install.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx storybook@latest add @storybook/addon-webpack5-compiler-babel\n```\n\n----------------------------------------\n\nTITLE: Running Sandbox for Template Development (Shell)\nDESCRIPTION: Command to create and run a sandbox for a specific template during development. This is used when working on a new template with the 'inDevelopment' flag set.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nyarn task --task dev --template <template-key> --start-from=install\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM Snapshot Testing with Storybook Test Runner\nDESCRIPTION: Example showing how to enable DOM snapshot testing by extending the test-runner configuration file using hooks and Playwright APIs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  hooks: {\n    test: async ({ testRunner, step }) => {\n      const { describe, it } = testRunner;\n\n      describe('DOM snapshots', () => {\n        it('should match DOM snapshots', async ({ page, expect }) => {\n          await step('getByTestId', async () => {\n            const domSnapshot = await page.locator('#storybook-root').innerHTML();\n            await expect(domSnapshot).toMatchSnapshot();\n          });\n        });\n      });\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Function for Dynamic refs Configuration\nDESCRIPTION: Example showing how to use a function to dynamically configure refs in Storybook's main configuration file, allowing for runtime decisions on Storybook composition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-refs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function form allows you to execute code to build the refs dynamically\nexport default {\n  refs: (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      return {\n        react: {\n          title: 'React',\n          url: 'http://localhost:7007',\n        },\n      };\n    }\n    return {\n      react: {\n        title: 'React',\n        url: 'https://storybook.reactjs.org/',\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in JavaScript for Common Renderers\nDESCRIPTION: Configures Storybook stories for a Button component using JavaScript syntax. Works with common renderers like React or Vue. Defines component metadata with argTypes for the label property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    // 👇 All Button stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Testing Module Event Import in Storybook\nDESCRIPTION: This snippet shows how to update the import for the testing module event in Storybook 9.0. The 'TESTING_MODULE_RUN_ALL_REQUEST' event has been removed and replaced with 'TESTING_MODULE_RUN_REQUEST'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- import { TESTING_MODULE_RUN_ALL_REQUEST } from '@storybook/core-events';\n+ import { TESTING_MODULE_RUN_REQUEST } from '@storybook/core-events';\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Snapshot Resolution for Storybook in JavaScript\nDESCRIPTION: This code exports a configuration object for Jest's snapshot resolver. It customizes the naming and location of snapshot files, placing them in a '__snapshots__' directory with a '.storyshot' extension.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-snapshot-resolver.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path';\n\nexport default {\n  resolveSnapshotPath: (testPath) => {\n    const fileName = path.basename(testPath);\n    const fileNameWithoutExtension = fileName.replace(/\\.[^/.]+$/, '');\n    const modifiedFileName = `${fileNameWithoutExtension}.storyshot`;\n\n    // Configure Jest to generate snapshot files using the following naming convention (__snapshots__/Button.storyshot)\n    return path.join(path.dirname(testPath), '__snapshots__', modifiedFileName);\n  },\n  resolveTestPath: (snapshotFilePath, snapshotExtension) =>\n    path.basename(snapshotFilePath, snapshotExtension),\n  testPathForConsistencyCheck: 'example.storyshot',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Template Story with Args in Storybook\nDESCRIPTION: Demonstrates another variation of using Template.bind() without passing an object, but still configuring args for the story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WithEmptyTemplate = Template.bind();\nWithEmptyTemplate.args = { foo: 'baz' };\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Button Stories in JavaScript\nDESCRIPTION: This snippet imports necessary dependencies for creating Storybook stories, including React, Storybook actions, and a Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { action } from \"storybook/actions\";\nimport { Button } from \"@storybook/react/demo\";\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook with Yarn\nDESCRIPTION: Command to start the Storybook development server using Yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-run-dev-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Interactions Addon with npm\nDESCRIPTION: Installs the `@storybook/addon-interactions` package as a development dependency using the npm package manager. The `--save-dev` flag ensures it's added to `devDependencies`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-interactions-addon-full-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @storybook/addon-interactions --save-dev\n```\n\n----------------------------------------\n\nTITLE: Registering @storybook/addon-themes in Storybook configuration\nDESCRIPTION: Diff showing how to add @storybook/addon-themes to the addons array in the Storybook main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n+   '@storybook/addon-themes',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Documentation with MDX in Storybook (Common Renderer)\nDESCRIPTION: This MDX file creates documentation for a Button component using Storybook's common renderer. It imports story examples from a Button.stories file, defines component metadata, provides a description of the button's purpose, and renders a basic usage example.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-starter-example.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs/blocks';\n\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n# Button\n\nButton is a clickable interactive element that triggers a response.\n\nYou can place text and icons inside of a button.\n\nButtons are often used for form submissions and to toggle elements into view.\n\n## Usage\n\n<Story of={ButtonStories.Basic} />\n```\n\n----------------------------------------\n\nTITLE: Using Decorator Type Backwards Compatible with DecoratorFn\nDESCRIPTION: Demonstrates how to use the Decorator type in a way that is backwards compatible with the old DecoratorFn type in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Args, Decorator } from '@storybook/react';\n\n// Decorator<Args> behaves the same as DecoratorFn (without generic)\nconst withLocale: Decorator<Args> = (Story, { args }) => // args has type { [name: string]: any }\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Themes Addon\nDESCRIPTION: Command to install the @storybook/addon-themes package as a dev dependency using npm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Svelte-Vite with yarn\nDESCRIPTION: Installs @storybook/svelte-vite as a development dependency using yarn package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/svelte-vite\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Docs and React Dependencies\nDESCRIPTION: Commands to install Storybook Docs addon and its peer dependency React using Yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @storybook/addon-docs\nyarn add -D react\n```\n\n----------------------------------------\n\nTITLE: Vue Babel Preset Configuration\nDESCRIPTION: JSON configuration for adding babel-preset-vue in older Vue setups\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_138\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"babel-preset-vue\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Docs for React\nDESCRIPTION: Command to install the Storybook Docs addon using yarn. Ensures that all @storybook/* package versions match.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @storybook/addon-docs\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with Yarn\nDESCRIPTION: Executes Storybook test suite using Yarn as the package manager. The command runs the test-storybook script defined in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook\n```\n\n----------------------------------------\n\nTITLE: Installing axe-playwright for Storybook Test Runner\nDESCRIPTION: Commands to install the necessary dependencies for integrating accessibility testing with the Storybook test runner using axe-playwright.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\nnpm install @axe-core/playwright axe-playwright --save-dev\n\n# For yarn\nyarn add --dev @axe-core/playwright axe-playwright\n\n# For pnpm\npnpm add -D @axe-core/playwright axe-playwright\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Svelte Storybook (JavaScript)\nDESCRIPTION: This Svelte CSF story definition uses JavaScript to define 'MyComponent', disabling automatic a11y checks and showcasing how '@storybook/addon-svelte-csf' is utilized.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"NonA11yStory\"\n  globals={{\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  }}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Package JSON Script Configuration\nDESCRIPTION: Configuration for adding test scripts to package.json to enable running tests via CLI\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"test-storybook\": \"vitest --project=storybook\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Rule Tests for Storybook\nDESCRIPTION: Command to run tests for ESLint rules in the Storybook project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring A11y Parameters\nDESCRIPTION: Example of configuring accessibility parameters in preview.js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_145\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  a11y: {\n    element: \"#storybook-root\",\n    config: {},\n    options: {},\n    manual: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Chromatic addon with yarn\nDESCRIPTION: Command to add the Chromatic integration to a Storybook project using yarn as the package manager. Uses yarn dlx to execute the Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-storybook-add.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@latest add @chromatic-com/storybook\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with npm\nDESCRIPTION: Command to create a new Storybook project using npm package manager for version 8.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-custom-version.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create storybook@8.3\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Meta Properties in Storybook CSF (JavaScript)\nDESCRIPTION: This snippet demonstrates incorrect usage of meta properties in a Storybook CSF file. It defines properties as variables and then uses them in the default export, which is discouraged by the rule.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/meta-inline-properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst title = 'Button';\nconst args = { primary: true };\n\nexport default {\n  title,\n  args,\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Title Block in MDX\nDESCRIPTION: Shows how to import and use the Title block component in an MDX documentation file for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-title.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Title } from '@storybook/addon-docs/blocks';\n\n<Title>This is the title</Title>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with Yarn\nDESCRIPTION: Executes Storybook tests using yarn package manager with the --no-index-json flag to disable index.json file generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-no-index-json.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook --no-index-json\n```\n\n----------------------------------------\n\nTITLE: Registering Storybook Theme Addon\nDESCRIPTION: Adding the @storybook/addon-themes to the addons array in the Storybook configuration file (.storybook/main.js).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  stories: [\n    \"../stories/**/*.stories.mdx\",\n    \"../stories/**/*.stories.@(js|jsx|ts|tsx)\",\n  ],\n  addons: [\n    \"@storybook/addon-essentials\",\n+   \"@storybook/addon-themes\"\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Background Addon Parameters Format\nDESCRIPTION: Configuration showing the new format for the backgrounds addon that uses an options object with key-value pairs instead of an array of values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/preview.js\nexport const parameters = {\n  backgrounds: {\n-   values: [\n-     { name: 'twitter', value: '#00aced' },\n-     { name: 'facebook', value: '#3b5998' },\n-   ],\n+   options: {\n+     twitter: { name: 'Twitter', value: '#00aced' },\n+     facebook: { name: 'Facebook', value: '#3b5998' },\n+   },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Onboarding Addon with Yarn\nDESCRIPTION: Command to remove the Storybook onboarding addon using Yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/onboarding/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyarn remove @storybook/addon-onboarding\n```\n\n----------------------------------------\n\nTITLE: Legacy Dynamic Story Title Configuration\nDESCRIPTION: Example of the now-deprecated dynamic story title computation that is no longer supported in Storybook 7.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nconst categories = {\n  atoms: 'Atoms',\n  molecules: 'Molecules',\n  // etc.\n}\n\nexport default {\n  title: `${categories.atoms}/MyComponent`\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook to Version 7 with npm\nDESCRIPTION: This command upgrades Storybook to version 7 using npm. It uses npx to execute the upgrade command without installing Storybook globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-to-prior-major.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@^7 upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing axe-playwright with pnpm\nDESCRIPTION: This command installs the axe-playwright package as a development dependency using pnpm. It's used for accessibility testing in Playwright-based projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-axe-playwright.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev axe-playwright\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook Addon Docs in JavaScript\nDESCRIPTION: This code snippet imports the Meta component from the Storybook addon-docs package. The Meta component is used to set metadata for the documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/Title.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack 5 Builder\nDESCRIPTION: Configuration to set Webpack 5 as the builder in Storybook main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  core: {\n    builder: \"webpack5\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc with npm for Angular in Storybook\nDESCRIPTION: This snippet shows how to install Compodoc as a dev dependency using npm. It's intended for Angular projects in a Storybook environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/compodoc-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @compodoc/compodoc --save-dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with yarn\nDESCRIPTION: Command to initialize Storybook in a JavaScript project using yarn package manager. This uses the @next tag to install the latest pre-release version of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@next init\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Setting Up Storybook Documentation for Button Stories\nDESCRIPTION: This snippet imports required dependencies from Storybook and local files, then sets up the documentation structure using Meta and Template components. It's used to create a documentation page for Button component stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './button.stories.tsx';\nimport Template from './Template.mdx';\n\n<Meta of={ButtonStories} />\n\n<Template />\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Test Runner with PNPM\nDESCRIPTION: Installs the @storybook/test-runner package as a development dependency using pnpm package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/test-runner\n```\n\n----------------------------------------\n\nTITLE: Using Global Package in Addon-interactions\nDESCRIPTION: Replace the use of `global` with the 'global' package in the Addon-interactions component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Use 'global' package instead of `global`\n// See PR #17614 for details\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Serializer Implementation\nDESCRIPTION: Custom serializer implementation for handling specific CSS-in-JS libraries and framework-specific attributes in snapshots.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  test: (val) => typeof val === 'string',\n  print: (val) => {\n    return val\n      .replace(/data-emotion=\"[^\"]+\"/g, 'data-emotion=\"\"')\n      .replace(/data-testid=\"[^\"]+\"/g, '')\n      .replace(/ng-[a-zA-Z-]+=\"[^\"]+\"/g, '');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Addon Docs for Ember\nDESCRIPTION: Command to add the Storybook addon-docs package to your Ember project using yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @storybook/addon-docs\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vue 3 Vite with NPM\nDESCRIPTION: Installs @storybook/vue3-vite package as a development dependency using NPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/vue3-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring default args in Storybook preview with JavaScript\nDESCRIPTION: Sets a default 'light' theme arg for all stories in a JavaScript Storybook preview configuration file. This configuration applies the light theme to all stories by default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/args-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // The default value of the theme arg for all stories\n  args: { theme: 'light' },\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Storybook Installation\nDESCRIPTION: Command to upgrade an existing Storybook installation to the latest version compatible with Preact-Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest upgrade\n```\n\n----------------------------------------\n\nTITLE: Mocking Context in Stories\nDESCRIPTION: Example of mocking container components in Storybook stories\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProfileHeader } from './ProfileHeader.stories';\nimport { ProfileTimeline } from './ProfileTimeline.stories';\n\nexport const LoggedIn = {\n  decorators: [\n    (Story) => (\n      <ProfilePageContext.Provider\n        value={{\n          ProfileHeader: ProfileHeader.Mock,\n          ProfileTimeline: ProfileTimeline.Mock,\n        }}\n      >\n        <Story />\n      </ProfilePageContext.Provider>\n    ),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook Webpack 5 Babel Addon via npm\nDESCRIPTION: Uses `npx` (Node Package Execute) to run the latest version of the Storybook CLI and add the `@storybook/addon-webpack5-compiler-babel` addon to the current project. This command is intended for projects managed with npm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-babel-auto-install.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx storybook@latest add @storybook/addon-webpack5-compiler-babel\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Storybook in Shell\nDESCRIPTION: Command to run end-to-end tests against a specific Storybook sandbox template using Playwright, which helps ensure the quality of contributions before submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Common JavaScript\nDESCRIPTION: This snippet demonstrates how to set up story tags for a generic component using JavaScript. It shows how to apply a global 'stable' tag and override it for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n};\n\nexport const ExperimentalFeatureStory = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Coverage Addon with pnpm\nDESCRIPTION: Installs the @storybook/addon-coverage package using pnpm package manager. This command uses pnpm dlx to execute the latest version of storybook CLI to add the coverage addon to your project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest add @storybook/addon-coverage\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Vue Storybook Stories with TypeScript\nDESCRIPTION: Shows how to add decorators to Vue components using standard TypeScript notation. Includes a render function for the Button component and applies a decorator that wraps the story with a margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport Button from './Button.vue';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary: Story = {\n  render: () => ({\n    components: { Button },\n    template: '<Button primary label=\"Hello World\" />',\n  }),\n  decorators: [() => ({ template: '<div style=\"margin: 3em;\"><story /></div>' })],\n};\n```\n\n----------------------------------------\n\nTITLE: Solid Button Story Implementation (JavaScript)\nDESCRIPTION: Implements a Button story for SolidJS using JavaScript and CSF 2 format. Shows primary button implementation with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  title: 'Button',\n  component: Button,\n};\n\nexport const Primary = (args) => <Button {...args} />;\nPrimary.args = { primary: true };\n```\n\n----------------------------------------\n\nTITLE: Generating Babel Configuration for Storybook\nDESCRIPTION: Command to generate a default .babelrc.json file compatible with Storybook 6.x\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_119\n\nLANGUAGE: shell\nCODE:\n```\nnpx sb@latest babelrc\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters in Storybook\nDESCRIPTION: Shows how to use the api.setQueryParams() method to set query string parameters for temporary storage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napi.setQueryParams({\n  key: 'value',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Outlines Utility Function in TypeScript\nDESCRIPTION: This function 'outlineCSS' generates a CSS string that applies outlined styles to a wide range of HTML elements using a specific selector. It depends on the 'ts-dedent' package to format multi-line strings by removing unwanted indentation. The primary parameter is a 'selector' string, which ensures the generated styles are applied to elements within a specific context. It returns a dedented string of CSS rules, each applying a different color to the outline of various elements, such as 'header', 'footer', 'p', and many others. The key limitation is that it is primarily aimed at styling HTML elements within a controlled scope, making it ideal for debugging but not for production use.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-css-example.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { dedent } from 'ts-dedent';\n\nexport default function outlineCSS(selector: string) {\n  return dedent/* css */ `\n    ${selector} body {\n      outline: 1px solid #2980b9 !important;\n    }\n\n    ${selector} article {\n      outline: 1px solid #3498db !important;\n    }\n\n    ${selector} nav {\n      outline: 1px solid #0088c3 !important;\n    }\n\n    ${selector} aside {\n      outline: 1px solid #33a0ce !important;\n    }\n\n    ${selector} section {\n      outline: 1px solid #66b8da !important;\n    }\n\n    ${selector} header {\n      outline: 1px solid #99cfe7 !important;\n    }\n\n    ${selector} footer {\n      outline: 1px solid #cce7f3 !important;\n    }\n\n    ${selector} h1 {\n      outline: 1px solid #162544 !important;\n    }\n\n    ${selector} h2 {\n      outline: 1px solid #314e6e !important;\n    }\n\n    ${selector} h3 {\n      outline: 1px solid #3e5e85 !important;\n    }\n\n    ${selector} h4 {\n      outline: 1px solid #449baf !important;\n    }\n\n    ${selector} h5 {\n      outline: 1px solid #c7d1cb !important;\n    }\n\n    ${selector} h6 {\n      outline: 1px solid #4371d0 !important;\n    }\n\n    ${selector} main {\n      outline: 1px solid #2f4f90 !important;\n    }\n\n    ${selector} address {\n      outline: 1px solid #1a2c51 !important;\n    }\n\n    ${selector} div {\n      outline: 1px solid #036cdb !important;\n    }\n\n    ${selector} p {\n      outline: 1px solid #ac050b !important;\n    }\n\n    ${selector} hr {\n      outline: 1px solid #ff063f !important;\n    }\n\n    ${selector} pre {\n      outline: 1px solid #850440 !important;\n    }\n\n    ${selector} blockquote {\n      outline: 1px solid #f1b8e7 !important;\n    }\n\n    ${selector} ol {\n      outline: 1px solid #ff050c !important;\n    }\n\n    ${selector} ul {\n      outline: 1px solid #d90416 !important;\n    }\n\n    ${selector} li {\n      outline: 1px solid #d90416 !important;\n    }\n\n    ${selector} dl {\n      outline: 1px solid #fd3427 !important;\n    }\n\n    ${selector} dt {\n      outline: 1px solid #ff0043 !important;\n    }\n\n    ${selector} dd {\n      outline: 1px solid #e80174 !important;\n    }\n\n    ${selector} figure {\n      outline: 1px solid #ff00bb !important;\n    }\n\n    ${selector} figcaption {\n      outline: 1px solid #bf0032 !important;\n    }\n\n    ${selector} table {\n      outline: 1px solid #00cc99 !important;\n    }\n\n    ${selector} caption {\n      outline: 1px solid #37ffc4 !important;\n    }\n\n    ${selector} thead {\n      outline: 1px solid #98daca !important;\n    }\n\n    ${selector} tbody {\n      outline: 1px solid #64a7a0 !important;\n    }\n\n    ${selector} tfoot {\n      outline: 1px solid #22746b !important;\n    }\n\n    ${selector} tr {\n      outline: 1px solid #86c0b2 !important;\n    }\n\n    ${selector} th {\n      outline: 1px solid #a1e7d6 !important;\n    }\n\n    ${selector} td {\n      outline: 1px solid #3f5a54 !important;\n    }\n\n    ${selector} col {\n      outline: 1px solid #6c9a8f !important;\n    }\n\n    ${selector} colgroup {\n      outline: 1px solid #6c9a9d !important;\n    }\n\n    ${selector} button {\n      outline: 1px solid #da8301 !important;\n    }\n\n    ${selector} datalist {\n      outline: 1px solid #c06000 !important;\n    }\n\n    ${selector} fieldset {\n      outline: 1px solid #d95100 !important;\n    }\n\n    ${selector} form {\n      outline: 1px solid #d23600 !important;\n    }\n\n    ${selector} input {\n      outline: 1px solid #fca600 !important;\n    }\n\n    ${selector} keygen {\n      outline: 1px solid #b31e00 !important;\n    }\n\n    ${selector} label {\n      outline: 1px solid #ee8900 !important;\n    }\n\n    ${selector} legend {\n      outline: 1px solid #de6d00 !important;\n    }\n\n    ${selector} meter {\n      outline: 1px solid #e8630c !important;\n    }\n\n    ${selector} optgroup {\n      outline: 1px solid #b33600 !important;\n    }\n\n    ${selector} option {\n      outline: 1px solid #ff8a00 !important;\n    }\n\n    ${selector} output {\n      outline: 1px solid #ff9619 !important;\n    }\n\n    ${selector} progress {\n      outline: 1px solid #e57c00 !important;\n    }\n\n    ${selector} select {\n      outline: 1px solid #e26e0f !important;\n    }\n\n    ${selector} textarea {\n      outline: 1px solid #cc5400 !important;\n    }\n\n    ${selector} details {\n      outline: 1px solid #33848f !important;\n    }\n\n    ${selector} summary {\n      outline: 1px solid #60a1a6 !important;\n    }\n\n    ${selector} command {\n      outline: 1px solid #438da1 !important;\n    }\n\n    ${selector} menu {\n      outline: 1px solid #449da6 !important;\n    }\n\n    ${selector} del {\n      outline: 1px solid #bf0000 !important;\n    }\n\n    ${selector} ins {\n      outline: 1px solid #400000 !important;\n    }\n\n    ${selector} img {\n      outline: 1px solid #22746b !important;\n    }\n\n    ${selector} iframe {\n      outline: 1px solid #64a7a0 !important;\n    }\n\n    ${selector} embed {\n      outline: 1px solid #98daca !important;\n    }\n\n    ${selector} object {\n      outline: 1px solid #00cc99 !important;\n    }\n\n    ${selector} param {\n      outline: 1px solid #37ffc4 !important;\n    }\n\n    ${selector} video {\n      outline: 1px solid #6ee866 !important;\n    }\n\n    ${selector} audio {\n      outline: 1px solid #027353 !important;\n    }\n\n    ${selector} source {\n      outline: 1px solid #012426 !important;\n    }\n\n    ${selector} canvas {\n      outline: 1px solid #a2f570 !important;\n    }\n\n    ${selector} track {\n      outline: 1px solid #59a600 !important;\n    }\n\n    ${selector} map {\n      outline: 1px solid #7be500 !important;\n    }\n\n    ${selector} area {\n      outline: 1px solid #305900 !important;\n    }\n\n    ${selector} a {\n      outline: 1px solid #ff62ab !important;\n    }\n\n    ${selector} em {\n      outline: 1px solid #800b41 !important;\n    }\n\n    ${selector} strong {\n      outline: 1px solid #ff1583 !important;\n    }\n\n    ${selector} i {\n      outline: 1px solid #803156 !important;\n    }\n\n    ${selector} b {\n      outline: 1px solid #cc1169 !important;\n    }\n\n    ${selector} u {\n      outline: 1px solid #ff0430 !important;\n    }\n\n    ${selector} s {\n      outline: 1px solid #f805e3 !important;\n    }\n\n    ${selector} small {\n      outline: 1px solid #d107b2 !important;\n    }\n\n    ${selector} abbr {\n      outline: 1px solid #4a0263 !important;\n    }\n\n    ${selector} q {\n      outline: 1px solid #240018 !important;\n    }\n\n    ${selector} cite {\n      outline: 1px solid #64003c !important;\n    }\n\n    ${selector} dfn {\n      outline: 1px solid #b4005a !important;\n    }\n\n    ${selector} sub {\n      outline: 1px solid #dba0c8 !important;\n    }\n\n    ${selector} sup {\n      outline: 1px solid #cc0256 !important;\n    }\n\n    ${selector} time {\n      outline: 1px solid #d6606d !important;\n    }\n\n    ${selector} code {\n      outline: 1px solid #e04251 !important;\n    }\n\n    ${selector} kbd {\n      outline: 1px solid #5e001f !important;\n    }\n\n    ${selector} samp {\n      outline: 1px solid #9c0033 !important;\n    }\n\n    ${selector} var {\n      outline: 1px solid #d90047 !important;\n    }\n\n    ${selector} mark {\n      outline: 1px solid #ff0053 !important;\n    }\n\n    ${selector} bdi {\n      outline: 1px solid #bf3668 !important;\n    }\n\n    ${selector} bdo {\n      outline: 1px solid #6f1400 !important;\n    }\n\n    ${selector} ruby {\n      outline: 1px solid #ff7b93 !important;\n    }\n\n    ${selector} rt {\n      outline: 1px solid #ff2f54 !important;\n    }\n\n    ${selector} rp {\n      outline: 1px solid #803e49 !important;\n    }\n\n    ${selector} span {\n      outline: 1px solid #cc2643 !important;\n    }\n\n    ${selector} br {\n      outline: 1px solid #db687d !important;\n    }\n\n    ${selector} wbr {\n      outline: 1px solid #db175b !important;\n    }`;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Sync Event Payload in JavaScript\nDESCRIPTION: Illustrates the structure of a sync event payload, including control states and log items for interceptable calls.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  controlStates: {\n    start: false,\n    back: false,\n    goto: true,\n    next: true,\n    end: true,\n  },\n  logItems: [\n    { callId: 'tooltip--hovered [0] hover', status: 'waiting' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the configuration object with proper typing, and exports it as the default. The configuration includes framework specification, story locations, and build options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-autodocs.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableAutoDocs: false,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Test Runner Jest Config for Custom Resolver\nDESCRIPTION: Jest configuration file to enable custom snapshot resolver implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  snapshotResolver: '<rootDir>/snapshot-resolver.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Converting MDX Stories to CSF with yarn\nDESCRIPTION: Command to migrate Storybook stories from MDX format to Component Story Format (CSF) using yarn. The command uses yarn dlx to execute the storybook migration script targeting all .stories.mdx files in the src directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-mdx-to-csf.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Convert stories in MDX to CSF\nyarn dlx storybook@latest migrate mdx-to-csf --glob \"src/**/*.stories.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Adding a11y Addon with npm using npx\nDESCRIPTION: This shell command uses `npx` (npm package runner) to execute the Storybook CLI `add` command. It installs and configures the `@storybook/addon-a11y` addon for a Storybook project managed with npm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-add-command.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest add @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Storybook Prerelease Versions\nDESCRIPTION: Command for upgrading to Storybook prerelease versions to test new features before they're generally available. Prereleases are published almost daily and provide access to the latest developments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"storybook-upgrade-prerelease.md\" />\n```\n\n----------------------------------------\n\nTITLE: Building Storybook Packages in Watch Mode\nDESCRIPTION: This command builds specific Storybook packages in watch mode for development. It demonstrates how to build multiple packages simultaneously.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd code\nyarn build --watch react core addon-docs\n```\n\n----------------------------------------\n\nTITLE: Defining RightArrow Component for UI in React\nDESCRIPTION: This snippet defines a RightArrow component using an SVG. The component is used throughout the Storybook configuration for visual indicators in links.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/js/Configure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const RightArrow = () => <svg \n    viewBox=\"0 0 14 14\" \n    width=\"8px\" \n    height=\"14px\" \n    style={{ \n      marginLeft: '4px',\n      display: 'inline-block',\n      shapeRendering: 'inherit',\n      verticalAlign: 'middle',\n      fill: 'currentColor',\n      'path fill': 'currentColor'\n    }}\n>\n  <path d=\"m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with Manual Framework Specification\nDESCRIPTION: Command to install Storybook for a specific framework using the --type flag, useful for custom environments or manual setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"create-command-manual-framework.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Story File Types in main.js\nDESCRIPTION: Configuration to load both JavaScript and MDX story files in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/stories/**/*.stories.@(js|mdx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Story Block Component\nDESCRIPTION: Shows how to import the Story block component from Storybook addon-docs package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Story } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Direct Markdown Import in MDX\nDESCRIPTION: Illustrates an incorrect way of importing markdown directly into an MDX file, which will not work due to syntactical differences between markdown and MDX2.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{/* THIS WON'T WORK, THIS IS TO DEMONSTRATE AN ERROR */}\n\nimport ReadMe from './README.md';\n\n# A header \n\n{ReadMe}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest Coverage with PNPM\nDESCRIPTION: Commands to install Vitest coverage packages using PNPM package manager. Shows installation for both v8 and istanbul coverage providers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-install-coverage-support-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# For v8\npnpm add --save-dev @vitest/coverage-v8\n\n# For istanbul\npnpm add --save-dev @vitest/coverage-istanbul\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes with yarn\nDESCRIPTION: Command to install the @storybook/addon-themes package as a dev dependency using yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyarn add -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Importing Viewport Constants in JavaScript\nDESCRIPTION: Shows how to import predefined viewport constants INITIAL_VIEWPORTS and MINIMAL_VIEWPORTS from the Storybook viewport module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { INITIAL_VIEWPORTS, MINIMAL_VIEWPORTS } from 'storybook/viewport';\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories with Dynamic Parameters in JSON\nDESCRIPTION: This JSON code shows how to define button stories with dynamic parameters using args and the Controls addon. It allows for interactive control of button properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Buttons\",\n  \"stories\": [\n    {\n      \"name\": \"Red\",\n      \"parameters\": {\n        \"server\": {\n          \"id\": \"button\"\n        }\n      },\n      \"args\": { \"color\": \"red\", \"label\": \"Stop\" }\n    },\n    {\n      \"name\": \"Green\",\n      \"parameters\": {\n        \"server\": {\n          \"id\": \"button\"\n        }\n      },\n      \"args\": { \"color\": \"green\", \"label\": \"Go\" }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Component Story with Args\nDESCRIPTION: Shows how to use args in a composite component story, combining multiple child components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const LoggedIn = {\n  args: {\n    ...HeaderStories.LoggedIn.args,\n    ...FooterStories.Basic.args,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Storybook Story with Deprecated Hierarchy Separator in JavaScript\nDESCRIPTION: Demonstrates how the Storybook story title was previously defined using the deprecated hierarchy separator '|'. This configuration is now considered incorrect in Storybook 6.0 and above, where only '/' is allowed. The snippet exports default metadata for the 'Input' component, grouping it under 'Components|Forms'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/hierarchy-separator.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  title: 'Components|Forms/Input',\n  component: Input,\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Storybook Doctor Command\nDESCRIPTION: The doctor command performs a health check on a Storybook project, identifying common issues and providing suggestions for fixes. It's useful when upgrading Storybook versions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nstorybook doctor [options]\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Addon with Storybook in Shell (yarn)\nDESCRIPTION: This shell command utilizes yarn to add the @storybook/addon-a11y to a Storybook project setup. Suitable for projects managed by yarn, it requires a previously configured Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-add.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn exec storybook add @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Storybook Preview\nDESCRIPTION: Adding an import statement for the main CSS file in the Storybook preview configuration (.storybook/preview.js).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Preview } from \"@storybook/your-renderer\";\n\n+import \"../src/index.css\";\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Accessibility Addon via NPX\nDESCRIPTION: This command adds the @storybook/addon-a11y package to an existing Storybook project. It uses npx to run the Storybook CLI and execute the 'add' command for the accessibility addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/a11y/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook add @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Subtitle Block in Storybook MDX\nDESCRIPTION: This snippet demonstrates how to import and use the Subtitle block in a Storybook MDX file. The Subtitle component is used to create a secondary heading for the documentation entry.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-subtitle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Subtitle } from '@storybook/addon-docs/blocks';\n\n<Subtitle>This is the subtitle</Subtitle>\n```\n\n----------------------------------------\n\nTITLE: Providing Animations in Angular Storybook\nDESCRIPTION: This snippet shows how to provide animations in Angular Storybook 7.0 using the provideAnimations function and the applicationConfig decorator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nimport { provideAnimations } from \"@angular/platform-browser/animations\";\nimport { moduleMetadata } from \"@storybook/angular\";\n\nexport default {\n  title: \"Example\",\n  decorators: [\n    applicationConfig({\n      providers: [provideAnimations()],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Image Snapshots in TypeScript\nDESCRIPTION: This TypeScript version configures the Storybook test runner for image snapshot testing. It imports necessary types, sets up the test environment, waits for the page to load, captures a screenshot, and compares it to a stored snapshot.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-waitpageready.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nimport { waitForPageReady } from '@storybook/test-runner';\n\nimport { toMatchImageSnapshot } from 'jest-image-snapshot';\n\nconst customSnapshotsDir = `${process.cwd()}/__snapshots__`;\n\nconst config: TestRunnerConfig = {\n  setup() {\n    expect.extend({ toMatchImageSnapshot });\n  },\n  async postVisit(page, context) {\n    // Awaits for the page to be loaded and available including assets (e.g., fonts)\n    await waitForPageReady(page);\n\n    // Generates a snapshot file based on the story identifier\n    const image = await page.screenshot();\n    expect(image).toMatchImageSnapshot({\n      customSnapshotsDir,\n      customSnapshotIdentifier: context.id,\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Svelte Component Story using CSF with JavaScript\nDESCRIPTION: Demonstrates how to create a Storybook story for a Svelte component using the addon-svelte-csf package. Shows usage of environment variables for story arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ExampleStory\"\n  args={{\n    propertyA: import.meta.env.STORYBOOK_DATA_KEY,\n    propertyB: import.meta.env.VITE_CUSTOM_VAR,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Story with SCSS Example\nDESCRIPTION: Shows how to set up a Storybook documentation page using MDX format, including Meta configuration and SCSS code block demonstration. The example includes basic SCSS variable definitions and styling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-global-syntax-highlight.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n\n<Meta title=\"A storybook story with syntax highlight registered globally\" />\n\n# SCSS example\n\nThis is a sample Sass snippet example with Storybook docs\n\n{/* Don't forget to replace (\") with (```) when you copy the snippet to your own app */}\n\n\"scss\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\nfont: 100% $font-stack;\n  color: $primary-color;\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-a11y using Yarn (Shell)\nDESCRIPTION: Installs the `@storybook/addon-a11y` package as a development dependency using the Yarn package manager. Requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for React Docgen\nDESCRIPTION: Configuration for enabling experimental watch program in react-docgen-typescript\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// .storybook/main.ts\nconst config = {\n  // ...\n  typescript: {\n    reactDocgen: \"react-docgen-typescript\",\n    reactDocgenTypescriptOptions: {\n      EXPERIMENTAL_useWatchProgram: true,\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Rules and Documentation for Storybook\nDESCRIPTION: Commands to update configuration files and documentation after making changes to ESLint rules in the Storybook project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn update-rules\n```\n\nLANGUAGE: sh\nCODE:\n```\nnx build eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Svelte Button Story Implementation (TypeScript)\nDESCRIPTION: Default story implementation for a Button component in Svelte using CSF 3 format with TypeScript. Includes Story type definition and Svelte-specific component structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Default: Story = {\n  render: (args) => ({\n    Component: Button,\n    props: args,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Storybook with NPM\nDESCRIPTION: Executes Storybook's extract command using NPM package manager at version 7.5.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-extract-specific-version.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@7.5.3 extract\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes with npm\nDESCRIPTION: Command to install the @storybook/addon-themes package as a dev dependency using npm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nnpm install -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Running Release with NPM\nDESCRIPTION: Executes the release script using NPM package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run release\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Storybook Error Class in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom error class extending StorybookError. It includes the basic structure and properties required for defining Storybook-specific errors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/ERRORS.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StorybookError } from './storybook-error';\n\nexport class YourCustomError extends StorybookError {\n  constructor() {\n    super({\n      // The category to which the error belongs. Check the source in client-errors.ts or server-errors.ts for reference.\n      category: Category,\n      // The numeric code for the error.\n      code: number,\n      // The error message.\n      message: string,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories for Button Component in React\nDESCRIPTION: This snippet sets up Storybook stories for a Button component. It imports necessary dependencies, defines the default export with the story title, and creates two stories: a basic one and one with emoji content.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf3.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\nimport { action } from \"storybook/actions\";\nimport { Button } from \"@storybook/react/demo\";\n\nexport default {\n  title: \"Button\",\n};\n\nexport const Basic = {};\n\nexport const Emoji = {\n  args: {\n    children: '😀 😎 👍 💯'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Bumping versions for Storybook release in Bash\nDESCRIPTION: Commands to bump versions for a Storybook release, with options for deferred or immediate bumping.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn release:version --verbose --deferred --release-type <RELEASE_TYPE> --pre-id <PRE_ID>\nyarn release:version --verbose --release-type <RELEASE_TYPE> --pre-id <PRE_ID>\n```\n\n----------------------------------------\n\nTITLE: Registering Vue Button Story - Storybook (TypeScript, type-satisfies)\nDESCRIPTION: This TypeScript snippet uses the 'satisfies' operator (TypeScript 4.9+) for strict typing with Meta from '@storybook/vue3'. After importing Button from the local Vue component, it enforces the story meta's shape and content. This aids in both type-safety and maintainability for Vue Storybook stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_16\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta } from '@storybook/vue3';\\n\\nimport Button from './Button.vue';\\n\\nconst meta = {\\n  component: Button,\\n} satisfies Meta<typeof Button>;\\n\\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Specific Storybook Version for Vue 2\nDESCRIPTION: Command for upgrading to a specific version of Storybook when using Vue 2, which has reached End of Life. Since Vue 2 is no longer supported, users must upgrade to a specific 7.x version of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"upgrade-command-specific-version.md\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with pnpm\nDESCRIPTION: Command to initialize Storybook in a JavaScript project using pnpm package manager. This uses the @next tag to install the latest pre-release version of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@next init\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Coverage Addon with yarn\nDESCRIPTION: Installs the @storybook/addon-coverage package using yarn package manager. This command uses yarn dlx to execute the latest version of storybook CLI to add the coverage addon to your project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@latest add @storybook/addon-coverage\n```\n\n----------------------------------------\n\nTITLE: Configure Storybook Main File in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook's main configuration file using Svelte with Vite bundler. Exports a configuration object that specifies the framework name and options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-framework-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  framework: {\n    name: '@storybook/svelte-vite',\n    options: {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Ember Button Story - Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a Button story for Storybook in an Ember project. It exports a default object specifying the 'button' component as a string identifier. No imports or additional setup are required beyond framework conventions. It results in making the 'button' component available in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\\n  component: 'button',\\n};\n```\n\n----------------------------------------\n\nTITLE: Story Sort Functions\nDESCRIPTION: Comparison of story sorting functions between v6 and v7 styles.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\n// v6-style sort\nfunction storySort(a, b) {\n  return a[1].kind === b[1].kind\n    ? 0\n    : a[1].id.localeCompare(b[1].id, undefined, { numeric: true });\n},\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v7-style sort\nfunction storySort(a, b) {\n  return a.title === b.title\n    ? 0\n    : a.id.localeCompare(b.id, undefined, { numeric: true });\n},\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook React Webpack5 with yarn (Shell)\nDESCRIPTION: This shell command adds @storybook/react-webpack5 as a development dependency via yarn. It is suitable for React projects that use Storybook and require Webpack5 integration. Prerequisites include having yarn installed and executing the command from the project's main directory; updates devDependencies in package.json without requiring extra input.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/react-webpack5\n```\n\n----------------------------------------\n\nTITLE: Referencing Universal Store Documentation in Markdown\nDESCRIPTION: This snippet provides links to the Universal Store's JSDocs and test files for detailed documentation and usage examples. It emphasizes that the API is experimental and subject to change.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/shared/universal-store/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Universal Store\n\nThe Universal Store API is used to manage state and events that should be synced across multiple environments, such as the server, the manager or the preview.\n\nIt is still highly experimental, and the API is subject to change - please don't use it.\n\nFor docs, see [UniversalStore's JSDocs](./index.ts). For usage examples and expected behavior, see [the tests](./index.test.ts)\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Storybook Version (8.3+)\nDESCRIPTION: Command to install a specific version of Storybook 8.3 or newer using the 'create' command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"create-command-custom-version.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Story Collection for Button Component\nDESCRIPTION: Defines the main configuration for the Button component stories, including the title and filtering stories with excludeStories and includeStories patterns.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  title: \"Button\",\n  excludeStories: [\"text\"],\n  includeStories: /emoji.*/\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Angular Storybook - TypeScript\nDESCRIPTION: Demonstrates how to use Storybook for Angular components in TypeScript, including examples for filtering controls using both arrays and regular expressions for 'include' and 'exclude'. Requires '@storybook/angular' and the definition of 'YourComponent'. 'Meta' and 'StoryObj' types are used for strong typing. The code defines four Story exports with tailored control parameter configurations. Inputs are component implementations; outputs are well-defined stories with custom control visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { YourComponent } from './YourComponent.component';\n\nconst meta: Meta<YourComponent> = {\n  component: YourComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<YourComponent>;\n\nexport const ArrayInclude: Story = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude: Story = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude: Story = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude: Story = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Annotations in Storybook Preset\nDESCRIPTION: This snippet shows how to use the previewAnnotations API in a Storybook preset to add decorators or parameters to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withMyDecorator } from './withMyDecorator';\n\nexport const decorators = [withMyDecorator];\n\n// In your preset file\nmodule.exports = {\n  previewAnnotations: (entry = []) => [\n    ...entry,\n    require.resolve('./preview'),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook using npm\nDESCRIPTION: This command upgrades Storybook to the latest version using npm. It uses npx to execute the Storybook upgrade command without installing it globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-prerelease.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@next upgrade\n```\n\n----------------------------------------\n\nTITLE: Composing Portable Stories with Locale Overrides in Vue\nDESCRIPTION: Creates portable stories from existing Button stories in Vue by composing them with different locale settings. Uses composeStory from @storybook/vue3 to generate variants of the Primary story with English and Spanish locales.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-override-globals.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { composeStory } from '@storybook/vue3';\n\nimport meta, { Primary } from './Button.stories';\n\nexport const PrimaryEnglish = composeStory(\n  Primary,\n  meta,\n  { globals: { locale: 'en' } }, // 👈 Project annotations to override the locale\n);\n\nexport const PrimarySpanish = composeStory(Primary, meta, { globals: { locale: 'es' } });\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Component in Storybook\nDESCRIPTION: Shows how to import the Markdown component from Storybook's addon-docs package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Markdown } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Installing axe-playwright with npm\nDESCRIPTION: This command installs the axe-playwright package as a development dependency using npm. It's used for accessibility testing in Playwright-based projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-axe-playwright.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install axe-playwright --save-dev\n```\n\n----------------------------------------\n\nTITLE: Building Storybook Packages in Shell\nDESCRIPTION: Command to start the Storybook build process, which allows developers to choose which packages to build and enables interactive development mode.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Static Directory Configuration in Storybook\nDESCRIPTION: Updated configuration for static directories using the new staticDirs field in main.js instead of CLI flags.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  staticDirs: [\n    \"../public\",\n    \"../static\",\n    { from: \"../foo/assets\", to: \"/assets\" },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Storybook with pnpm\nDESCRIPTION: Command to run Storybook with telemetry disabled using pnpm. The flag is passed directly after the storybook command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-flag.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run storybook --disable-telemetry\n```\n\n----------------------------------------\n\nTITLE: Registering a Storybook Navigation Handler\nDESCRIPTION: Shows how to use the api.on() method to register a handler function for story navigation events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napi.on(STORY_CHANGED, () => {\n  // Do something when the story changes\n});\n```\n\n----------------------------------------\n\nTITLE: Reverting jest-preset-angular reference change in Storybook\nDESCRIPTION: Revert the previous change to the jest-preset-angular setupJest file reference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nRevert \"Change reference for jest-preset-angular/build/setupJest as per migration guide\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Export in React\nDESCRIPTION: Defines the story metadata including title and story filtering configurations using excludeStories and includeStories patterns.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf-meta-var.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst meta = {\n  title: \"Button\",\n  excludeStories: [\"text\"],\n  includeStories: /emoji.*/\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Customizing Docs CSS with Preview-Head\nDESCRIPTION: Example of using CSS escape hatches to modify the content width in Docs by adding styles to the preview-head.html file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/theming.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .sbdocs.sbdocs-content {\n    max-width: 1440px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Project Annotations with Storybook for React in JavaScript\nDESCRIPTION: This snippet performs a similar task as the TypeScript version but for JavaScript. It involves setting up annotations for a React project using Storybook, utilizing `beforeAll` from Vitest along with a11y and project-specific annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n\nimport { setProjectAnnotations } from '@storybook/react';\n\n// Import the a11y addon annotations\nimport * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';\n\n// Optionally import your own annotations\nimport * as projectAnnotations from './preview';\n\nconst project = setProjectAnnotations([\n  // Add the a11y addon annotations\n  a11yAddonAnnotations,\n  projectAnnotations,\n]);\n\nbeforeAll(project.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line in Storybook\nDESCRIPTION: Demonstrates how to set environment variables when running Storybook through the command line.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSTORYBOOK_THEME=red STORYBOOK_DATA_KEY=12345 npm run storybook\n```\n\n----------------------------------------\n\nTITLE: Using useArgs Hook in Storybook Addon (JavaScript)\nDESCRIPTION: The useArgs hook allows retrieving or updating a story's args. It is useful for addons that need to interact with story arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"args-usage-with-addons.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Web Components in Storybook (JavaScript)\nDESCRIPTION: This snippet defines the metadata and argTypes for a Button component using Web Components in Storybook. It uses JavaScript and categorizes various properties like backgroundColor, primary, label, onClick, and size into different groups for better organization in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  argTypes: {\n    // Assigns the argTypes to the Colors category\n    backgroundColor: {\n      control: 'color',\n      table: {\n        category: 'Colors',\n      },\n    },\n    primary: {\n      table: {\n        category: 'Colors',\n      },\n    },\n    // Assigns the argType to the Text category\n    label: {\n      table: {\n        category: 'Text',\n      },\n    },\n    // Assigns the argType to the Events category\n    onClick: {\n      table: {\n        category: 'Events',\n      },\n    },\n    // Assigns the argType to the Sizes category\n    size: {\n      table: {\n        category: 'Sizes',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Untracked Files in Git Repository\nDESCRIPTION: This Git command performs a dry run to show which untracked or ignored files and directories would be removed from the working directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clean -dx --dry-run\n```\n\n----------------------------------------\n\nTITLE: Converting CSF 2 to CSF 3 using Storybook codemod\nDESCRIPTION: This command uses the Storybook codemod to automatically convert Component Story Format (CSF) 2 stories to CSF 3. It targets all files ending with .stories.js or .stories.ts in the current directory and its subdirectories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/from-older-version.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@next migrate csf-2-to-3 --glob=\"**/*.stories.@(js|ts)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Annotations in TypeScript\nDESCRIPTION: TypeScript version of the previewAnnotations function that appends the local preview module to the entry array. This is used by Storybook to extend the preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const previewAnnotations = (entry = [], options) => {\n  return [...entry, require.resolve('./dist/preview')];\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Story Hierarchy\nDESCRIPTION: Configuration to opt-out of automatic story hierarchy and restore flat UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\naddParameters({\n  options: {\n    hierarchyRootSeparator: null,\n    hierarchySeparator: null,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MSW Dependencies with Yarn\nDESCRIPTION: Installs Mock Service Worker (MSW) and MSW Storybook addon using Yarn package manager as development dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-install.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add msw msw-storybook-addon --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes package\nDESCRIPTION: Commands to install the @storybook/addon-themes package as a dev dependency using yarn, npm, or pnpm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/bootstrap.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyarn add -D @storybook/addon-themes\n```\n\nLANGUAGE: zsh\nCODE:\n```\nnpm install -D @storybook/addon-themes\n```\n\nLANGUAGE: zsh\nCODE:\n```\npnpm add -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes using pnpm\nDESCRIPTION: Command to install @storybook/addon-themes as a dev dependency using pnpm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\npnpm add -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Client Preview Configuration\nDESCRIPTION: Client-side preview configuration for framework implementation\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport './globals';\nimport { renderToDOM } from './render';\n\nstart(renderToDOM);\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Page Context\nDESCRIPTION: Example of creating a React context for profile page components\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\n\nexport const ProfilePageContext = createContext({});\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Knobs in main.js\nDESCRIPTION: Example configurations for addon-knobs showing both preset and register approaches\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  stories: [\"../**/*.stories.js\"],\n  addons: [\"@storybook/addon-knobs\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Types for Table Component State and Props\nDESCRIPTION: This snippet defines Flow types for the component's state and props, including JssClasses and a name string.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.flow-stories.txt#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntype State = {\n  value: any,\n};\n\ntype Props = {\n  classes: JssClasses,\n  name: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting DOCS_OPTIONS in Vite Builder\nDESCRIPTION: Ensures that the DOCS_OPTIONS variable is properly set when using the Vite builder in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In Vite builder configuration\nmodule.exports = {\n  framework: '@storybook/vue-vite',\n  features: {\n    storyStoreV7: true\n  },\n  docs: {\n    autodocs: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vitest Addon with Yarn\nDESCRIPTION: Command to install @storybook/addon-vitest using Yarn package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-test-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn exec storybook add @storybook/addon-vitest\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking patches for Storybook release in Bash\nDESCRIPTION: Command to automatically cherry-pick patches for a Storybook release.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn release:pick-patches\n```\n\n----------------------------------------\n\nTITLE: Disabling Angular Ivy in Storybook Configuration\nDESCRIPTION: Configuration for disabling Angular Ivy in Storybook by setting the 'enableIvy' option to false in the main.js|ts configuration file. This can help troubleshoot issues related to Angular's Ivy renderer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [\n    /* ... */\n  ],\n  addons: [\n    /* ... */\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {\n      enableIvy: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing IconGallery Component in Storybook\nDESCRIPTION: This snippet shows how to import the IconGallery component from Storybook's addon-docs blocks. It's a simple import statement used in MDX files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IconGallery } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Label Table in Markdown\nDESCRIPTION: A markdown table defining various labels used in the Storybook project's GitHub repository. It includes label names and their corresponding purposes, covering a wide range of categories such as accessibility, addons, frameworks, APIs, and development processes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MAINTAINERS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Labels\n\n| label name                     | purpose                                                                                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| accessibility                  | Issue, bug, or pull request related to accessibility                                                                                                 |\n| addon:(name)                   | Issue, bug, or pull request related to Storybook addons (e.g., [Controls](/docs/essentials/controls.mdx))                                            |\n| app:(name)                     | Issue, bug, or pull request related to Storybook's supported frameworks (e.g., React)                                                                |\n| api:(name)                     | Issue, bug, or pull request related to Storybook's API (e.g.,[makeDecorator](/docs/addons/addons-api.mdx#makeDecorator-API))                         |\n| args                           | Issue, bug, or pull request related to Storybook's [args](/docs/writing-stories/args.mdx)                                                            |\n| babel/webpack                  | Issue, bug, or pull request related to Storybook's build system (e.g., Webpack or Babel), for Webpack 5 issues see below                             |\n| block:(name)                   | Issue or bug within a certain surface are of Storybook (e.g., [argTypes](/docs/api/doc-blocks/doc-block-argtypes.mdx))                               |\n| BREAKING CHANGE                | Issue or pull request that introduces a breaking change within Storybook's ecosystem.                                                                |\n| BREAKING PRERELASE             | Breaking, but only for prerelease users (not relative to the stable release)                                                                         |\n| build-storybook                | Issue, bug, or pull request related to Storybook's production build                                                                                  |\n| cleanup                        | Minor cleanup style change that won't show up in release changelog                                                                                   |\n| bug                            | A bug within Storybook                                                                                                                               |\n| cli                            | Issue, bug, or pull request that affects the Storybook's CLI                                                                                         |\n| compatibility with other tools | Issue, bug, or pull request between Storybook and other tools (e.g., [Nuxt](https://nuxtjs.org/))                                                    |\n| components                     | Issue, bug, or pull request related to Storybook's internal components                                                                               |\n| composition                    | Issue, bug, or pull request related to Storybook [Composition](/docs/sharing/storybook-composition.mdx)                                              |\n| configuration                  | Issue, bug, or pull request related to Storybook [configuration](/docs/configure/index.mdx)                                                          |\n| core                           | Issue, bug, or pull request related to Storybook's Core                                                                                              |\n| cra                            | Issue, bug, or pull request that affects Storybook's compatibility with Create React APP ([CRA](https://create-react-app.dev/docs/getting-started/)) |\n| CSF                            | Issue, bug, or pull request related to Storybook's [Component Story Format (CSF)](/docs/api/csf.mdx)                                                 |\n| decorators                     | Issue, bug, or pull related to Storybook's [Decorators](/docs/writing-stories/decorators.mdx)                                                        |\n| dependencies                   | Issue, bug, or pull request that related to upstream dependencies                                                                                    |\n| discussion                     | Issue currently being discussed between the maintainers and community                                                                                |\n| do not merge                   | Pull request that will introduce regressions and will not be merged                                                                                  |\n| documentation                  | Issue, bug, or pull request that affects Storybook's documentation                                                                                   |\n| duplicate                      | Question or issue already asked in the repo's issues                                                                                                 |\n| feature request                | Request for a new feature to be included in Storybook                                                                                                |\n| flow                           | Issue, bug, or pull request related to Storybook and Flow                                                                                            |\n| Funded on Issuehunt            | Storybook issue funded on [IssueHunt](https://issuehunt.io/)                                                                                         |\n| gatsby                         | Issue, bug, or pull request that affects Storybook and [Gatsby](https://www.gatsbyjs.com/)                                                           |\n| good first issue               | Low impact Storybook issues that help new members get involved and start contributing                                                                |\n| has workaround                 | Issue or bug that has an alternative way to be solved with Storybook                                                                                 |\n| help wanted                    | Issue, or bug that requires additional help from the community                                                                                       |\n| ie11                           | Issue, bug, or pull request related to Storybook and IE11                                                                                            |\n| in progress                    | Issue or pull request that is currently being reviewed or worked on with the author                                                                  |\n| inactive                       | Issue, or pull request that has gone stale and no active development has been done                                                                   |\n| maintenance                    | Issue, or pull request related to Storybook's internal maintenance                                                                                   |\n| mdx                            | Issue, bug, or pull request related to MDX and Storybook                                                                                             |\n| medium                         | Issue or pull request that involves a significant amount of work within Storybook                                                                    |\n| monorepos                      | Issue, bug, or pull request related to Storybook and monorepos                                                                                       |\n| mui                            | Issue, bug, or pull request that affects Storybook and [Material-UI](https://material-ui.com/)                                                       |\n| multiframework                 | Issue, bug, or pull request that affects multiple supported frameworks (e.g., React, Vue)                                                            |\n| needs more info                | Issue, or bug that requires additional context from the author                                                                                       |\n| needs reproduction             | Issue, or bug that requires a reproduction to be looked at                                                                                           |\n| needs triage                   | Issue, bug, or pull request that requires further investigation from the maintainers                                                                 |\n| nextjs                         | Issue, bug, or pull request related to Storybook's integration with [Next.js](https://nextjs.org/)                                                   |\n| nx                             | Issue, bug, or pull request related to Storybook's integration with [NX](https://nx.dev/)                                                            |\n| other                          | Storybook's miscellaneous issue or pull request                                                                                                      |\n| P(n)                           | Bug or issue priority. Ranges from `0` (most urgent) to `N` (least urgent)                                                                           |\n| patch                          | Bug fix and documentation pull request that will be picked to the main branch                                                                        |\n| performance issue              | Issue, bug or pull request that affects Storybook's performance                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Web Components Vite package with pnpm\nDESCRIPTION: This command installs the @storybook/web-components-vite package as a dev dependency using pnpm. It's used to set up Storybook for Web Components projects that use Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/web-components-vite\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component for Storybook Docs\nDESCRIPTION: This snippet imports the Meta component from @storybook/addon-docs, which is used to configure Storybook documentation pages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/Template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Debugging Webpack with npm in Storybook\nDESCRIPTION: Command to run Storybook with the webpack debugging flag enabled using npm. This allows developers to inspect webpack configuration and behavior during Storybook execution.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-debug-webpack-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run storybook -- --debug-webpack\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Storybook Story with Interaction Tests in TypeScript\nDESCRIPTION: This snippet shows a generic Storybook story definition using TypeScript (specifically TS 4.9), suitable for various frameworks. It defines meta information with a placeholder import for the framework and a `FilledForm` story for `RegistrationForm`. The `play` function demonstrates interaction testing by simulating form input and submission.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"RegistrationForm.stories.ts|tsx\" renderer=\"common\" language=\"ts-4-9\"\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { userEvent, within } from 'storybook/test';\n\nimport { RegistrationForm } from './RegistrationForm';\n\nconst meta = {\n  component: RegistrationForm,\n} satisfies Meta<typeof RegistrationForm>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/*\n * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const FilledForm: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const emailInput = canvas.getByLabelText('email', {\n      selector: 'input',\n    });\n\n    await userEvent.type(emailInput, 'example-email@email.com', {\n      delay: 100,\n    });\n\n    const passwordInput = canvas.getByLabelText('password', {\n      selector: 'input',\n    });\n\n    await userEvent.type(passwordInput, 'ExamplePassword', {\n      delay: 100,\n    });\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const submitButton = canvas.getByRole('button');\n\n    await userEvent.click(submitButton);\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Adding SWC Compiler Addon with npm\nDESCRIPTION: This snippet demonstrates how to add the Webpack5 Compiler SWC addon to a Storybook project using npm. It requires Node.js and npm installed on the system. The command uses `npx` to execute the latest `storybook` package, instructing it to add the `@storybook/addon-webpack5-compiler-swc`. This command assumes that the user has an existing Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-swc-auto-install.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx storybook@latest add @storybook/addon-webpack5-compiler-swc\n```\n\n----------------------------------------\n\nTITLE: Importing React for Storybook\nDESCRIPTION: Imports the React library, which is required for creating React components in Storybook stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Stories for Common Renderer\nDESCRIPTION: Basic MDX configuration for importing Checkbox stories using the common renderer in Storybook documentation\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-imports.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/addon-docs/blocks';\n\nimport * as CheckboxStories from './Checkbox.stories';\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vitest Addon with NPM\nDESCRIPTION: Command to install @storybook/addon-vitest using NPX package runner\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-test-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook add @storybook/addon-vitest\n```\n\n----------------------------------------\n\nTITLE: Linking Local Reproduction to Storybook (Shell)\nDESCRIPTION: Command to link a local reproduction project to the Storybook monorepo development setup. This is useful when you already have a reproduction on your local machine.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@next link --local /path/to/local-repro-directory\n```\n\n----------------------------------------\n\nTITLE: Migrating Storybook to Latest Version\nDESCRIPTION: Command to migrate an existing Storybook project to the latest version, particularly useful when upgrading from Webpack 4 to Webpack 5.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n<CodeSnippets path=\"storybook-automigrate.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript\nDESCRIPTION: This snippet shows how to configure the main Storybook file in JavaScript. It sets up the framework, specifies story locations, and includes the Interactions addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-addon-registration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-interactions', // 👈 Register the addon\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry with Environment Variable\nDESCRIPTION: Shows how to disable telemetry by setting the STORYBOOK_DISABLE_TELEMETRY environment variable to 1.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSTORYBOOK_DISABLE_TELEMETRY=1 storybook dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Replace Plugin for GraphQL Queries in Svelte\nDESCRIPTION: Configuration for the Rollup replace plugin to allow GraphQL queries to work properly with MSW addon in Svelte projects. Sets the NODE_ENV to development.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// Boilerplate imports\n\nimport replace from '@rollup/plugin-replace';\nconst production = !process.env.ROLLUP_WATCH;\n\n// Remainder rollup.config implementation\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    sourcemap: true,\n    format: 'iife',\n    name: 'app',\n    file: 'public/build/bundle.js',\n  },\n  plugins: [\n    // Other plugins\n\n    // Configures the replace plugin to allow GraphQL Queries to work properly\n    replace({\n      'process.env.NODE_ENV': JSON.stringify('development'),\n    }),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework-Specific Vite Plugins for Vue\nDESCRIPTION: Shows how to explicitly add the Vue-specific Vite plugin in the Vite configuration for Storybook 8.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\n\nexport default defineConfig({\n  plugins: [vue()],\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning the Storybook Website Repository\nDESCRIPTION: Shell command for cloning a forked version of the Storybook website repository to make documentation changes locally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/your-username/web.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Storybook Stories with Mocked Date\nDESCRIPTION: This snippet shows how to set up Storybook stories for an Angular Page component with a mocked date. It uses MockDate to set a fixed date for all stories and includes a play function for the Default story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport MockDate from 'mockdate';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { getUserFromSession } from '#api/session.mock';\nimport { Page } from './Page';\n\nconst meta: Meta<Page> = {\n  component: Page,\n  // 👇 Set the value of Date for every story in the file\n  async beforeEach() {\n    MockDate.set('2024-02-14');\n\n    // 👇 Reset the Date after each story\n    return () => {\n      MockDate.reset();\n    };\n  },\n};\nexport default meta;\n\ntype Story = StoryObj<Page>;\n\nexport const Default: Story = {\n  async play({ canvasElement }) {\n    // ... This will run with the mocked Date\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Crash Reports in Storybook with yarn\nDESCRIPTION: Command to run Storybook with crash reports enabled using yarn as the package manager. This directly uses the 'storybook' script defined in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-storybook-enable-crash-reports-flag.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn storybook --enable-crash-reports\n```\n\n----------------------------------------\n\nTITLE: Using Storybook Logger for Client-Side Logging in JavaScript\nDESCRIPTION: Demonstrates how to import and use Storybook's client-side logger to output messages at different severity levels. The logger provides methods for info, warning, and error messages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/client-logger/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { logger } from 'storybook/internal/client-logger';\n\nlogger.info('Info message');\nlogger.warn('Warning message');\nlogger.error('Error message');\n```\n\n----------------------------------------\n\nTITLE: Building the Storybook Website Frontpage\nDESCRIPTION: Shell command for building the frontpage of the Storybook website before previewing changes locally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:frontpage\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vitest Addon with PNPM\nDESCRIPTION: Command to install @storybook/addon-vitest using PNPM package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-test-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm exec storybook add @storybook/addon-vitest\n```\n\n----------------------------------------\n\nTITLE: Customizing Storybook Preview Head in TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the Storybook preview head in TypeScript. It imports the StorybookConfig type and adds custom CSS styles to change the background color of the preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  previewHead: (head) => `\n    ${head}\n    <style>\n      html, body {\n        background: #827979;\n      }\n    </style>\n `,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Customizing Storybook Preview Body in JavaScript\nDESCRIPTION: This snippet shows how to customize the Storybook preview body in JavaScript. It conditionally adds an analytics script based on the presence of an environment variable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  previewBody: (body) => `\n    ${body}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Tab Addon in Storybook\nDESCRIPTION: Example showing how to register a tab addon in Storybook. The addon registers with a unique ID and renders content in a tabbed interface without manually specifying route properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_57\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addons, types } from \"@storybook/manager-api\";\n\naddons.register(\"my-addon\", () => {\n  addons.add(\"my-addon/tab\", {\n    type: types.TAB,\n    title: \"My Addon\",\n    render: () => <div>Hello World</div>,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chromatic with npm\nDESCRIPTION: This command installs Chromatic as a development dependency using npm. It adds Chromatic to the project's devDependencies in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install chromatic --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Sorting in JavaScript\nDESCRIPTION: JavaScript configuration for the Storybook preview file that sets up storySort parameters. This allows customization of how stories are sorted in the Storybook UI through method, order, and locales options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-empty-sort-object.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    options: {\n      storySort: {\n        method: '',\n        order: [],\n        locales: '',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecated StoriesOf API Usage in JavaScript\nDESCRIPTION: Example of incorrect usage showing the deprecated storiesOf API pattern that should no longer be used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-stories-of.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storiesOf } from '@storybook/react'\nimport Button from '../components/Button'\n\nstoriesOf('Button', module).add('primary', () => <Button primary />)\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories using Component Story Format in TypeScript\nDESCRIPTION: Implements a strongly-typed Button story using Component Story Format (CSF) in TypeScript. Uses Meta and StoryObj types for type safety and exports a 'Large' story variant.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)\nimport { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Large: Story = {\n  parameters: {\n    backgrounds: { disable: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Crash Reports in Storybook with pnpm\nDESCRIPTION: Command to run Storybook with crash reports enabled using pnpm as the package manager. Note that with pnpm, the -- delimiter is not needed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-storybook-enable-crash-reports-flag.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run storybook --enable-crash-reports\n```\n\n----------------------------------------\n\nTITLE: Defining composeStory Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the composeStory function, which composes a single story with its component annotations, optional project annotations, and an optional exports name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  story: Story export,\n  componentAnnotations: Meta,\n  projectAnnotations?: ProjectAnnotations,\n  exportsName?: string\n) => ComposedStoryFn\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Project using CLI\nDESCRIPTION: Command line instructions for adding Storybook to a project using npx. Navigate to the project directory and run the init command to set up Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/cli-storybook/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nnpx storybook@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vite Builder with PNPM\nDESCRIPTION: Command to install @storybook/builder-vite package using PNPM package manager as a development dependency.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/builder-vite\n```\n\n----------------------------------------\n\nTITLE: Standard TypeScript Button Stories Configuration\nDESCRIPTION: Generic TypeScript configuration for Button component stories with explicit type annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  parameters: {\n    docs: {\n      controls: { exclude: ['style'] },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Overrides in Stories\nDESCRIPTION: Example showing how to override themes at both the meta and story level using the globals.theme parameter in a Button component story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from './Button';\n\nexport default {\n  title: 'Example/Button',\n  component: Button,\n  // meta level override\n  globals: { theme: 'dark' },\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n\nexport const PrimaryDark = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n  // story level override\n  globals: { theme: 'dark' },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-a11y using pnpm (Shell)\nDESCRIPTION: Installs the `@storybook/addon-a11y` package as a development dependency using the pnpm package manager. Requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes with pnpm\nDESCRIPTION: Command to install the @storybook/addon-themes package as a dev dependency using pnpm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\npnpm add -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Version Number Declaration\nDESCRIPTION: Version header for Storybook 7.0.0 beta release highlighting major changes and improvements in build architecture, ESM output, Vite support and UI updates.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.0.0-beta.0 (December 8, 2022)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Runner Script in Package.json\nDESCRIPTION: Adds the test-storybook script to package.json to enable the test runner functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test-storybook\": \"test-storybook\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Deployed Storybook via GitHub Actions\nDESCRIPTION: YAML configuration for running Storybook tests against a deployed instance using GitHub Actions deployment events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Test-runner: Deployment'\non:\n  deployment_status:\njobs:\n  test:\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: yarn\n      - name: Install Playwright\n        run: npx playwright install --with-deps\n      - name: Run tests\n        run: yarn test-storybook\n        env:\n          TARGET_URL: ${{ github.event.deployment_status.target_url }}\n```\n\n----------------------------------------\n\nTITLE: Legacy CSF Story Annotations\nDESCRIPTION: Example of the deprecated story annotation style in Storybook 5.x using the story object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_132\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = () => <Button />\nBasic.story = {\n  name: 'foo',\n  parameters: { ... },\n  decorators: [ ... ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Sandbox in Development\nDESCRIPTION: This script runs a sandbox template Storybook with test stories for development purposes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Sandbox in Shell\nDESCRIPTION: Command to run the default Storybook sandbox, which installs prerequisites, builds the code, creates a Vite React setup, and starts the Storybook server.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Global IFrame Height in preview.js\nDESCRIPTION: Configuration to set the default iframe height for all stories in the Storybook preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = { docs: { story: { iframeHeight: '400px' } } };\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Function in TypeScript\nDESCRIPTION: A helper function that takes two parameters and performs some logic. The exact functionality is not specified in the provided code.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst someFunction = (valuePropertyA: any, valuePropertyB: any) => {\n  // Do some logic here\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Docs for Angular\nDESCRIPTION: Command to install the Storybook Docs addon package as a development dependency using yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @storybook/addon-docs\n```\n\n----------------------------------------\n\nTITLE: Type Definition of useOf Hook in TypeScript\nDESCRIPTION: This code snippet provides the TypeScript type definition for the useOf hook, showing its parameters and return type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-useof.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  moduleExportOrType: ModuleExport | 'story' | 'meta' | 'component',\n  validTypes?: Array<'story' | 'meta' | 'component'>\n) => EnhancedResolvedModuleExportType\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Tags in TypeScript Stories\nDESCRIPTION: Demonstrates the TypeScript implementation of configuring 'no-tests' tags with proper type definitions using Meta and StoryObj types. Shows how to apply tags at both component and story levels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-exclude-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n  tags: ['no-tests'], // 👈 Provides the `no-tests` tag to all stories in this file\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const ExcludeStory: Story = {\n  //👇 Adds the `no-tests` tag to this story to exclude it from the tests when enabled in the test-runner configuration\n  tags: ['no-tests'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Story with Custom Footer in Solid (JavaScript)\nDESCRIPTION: JavaScript implementation of a Storybook story for the Page component in SolidJS. It renders the Page component with a footer child element that displays the content from the footer arg.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Page } from './Page';\n\nexport default {\n  component: Page,\n  render: ({ footer, ...args }) => (\n    <Page {...args}>\n      <footer>{footer}</footer>\n    </Page>\n  ),\n};\n\nexport const CustomFooter = {\n  args: {\n    footer: 'Built with Storybook',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing SWC Compiler Addon\nDESCRIPTION: Command for installing the SWC compiler addon for Storybook, recommended for React projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storybook/addon-webpack5-compiler-swc\n```\n\n----------------------------------------\n\nTITLE: Enabling Crash Reports with Environment Variable\nDESCRIPTION: Shows how to enable crash reporting by setting the STORYBOOK_ENABLE_CRASH_REPORTS environment variable to 1.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSTORYBOOK_ENABLE_CRASH_REPORTS=1 storybook dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Background Colors in Web Components (JavaScript)\nDESCRIPTION: This snippet shows how to set up a Button story for Web Components using JavaScript. It defines a primary story with specific arguments and background color options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n        { name: 'blue', value: '#00f' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with yarn\nDESCRIPTION: Command to create a new Storybook project using yarn package manager. Uses the latest version of the Storybook creation tool.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn create storybook@latest\n```\n\n----------------------------------------\n\nTITLE: Registering Individual Viewport Addon\nDESCRIPTION: Configuration code to register the viewport addon individually in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-viewport'],\n};\n```\n\n----------------------------------------\n\nTITLE: Vitest Test Command\nDESCRIPTION: CLI command to run Storybook tests using Vitest\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-storybook\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Index\nDESCRIPTION: The index command builds a JSON file listing all stories and docs entries in a Storybook project. It supports various options for customizing the output and logging.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nstorybook index [options]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook to Version 7 with yarn\nDESCRIPTION: This command upgrades Storybook to version 7 using yarn. It uses yarn dlx to execute the upgrade command without installing Storybook globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-to-prior-major.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@^7 upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Links Addon\nDESCRIPTION: Command to install the Storybook Links addon as a development dependency using yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @storybook/addon-links\n```\n\n----------------------------------------\n\nTITLE: Custom MDX Code Renderer Configuration\nDESCRIPTION: Implementation of a custom code renderer for MDX documentation in Storybook's preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/theming.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  docs: {\n    components: {\n      code: props => <div {...props} />,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Button Documentation with CSF Addon\nDESCRIPTION: Configures auto-documentation for a Svelte Button component using the addon-svelte-csf package. Uses the defineMeta helper to set up component metadata.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n    //👇 Enables auto-generated documentation for this component and includes all stories in this file\n    tags: ['autodocs'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/preact-vite with yarn\nDESCRIPTION: This command installs the @storybook/preact-vite package as a dev dependency using yarn. It's used to set up Storybook for Preact projects with Vite.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/preact-vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories in TypeScript for Web Components\nDESCRIPTION: Configures Storybook stories for a Web Components Button using TypeScript. Imports the Meta type from the web-components renderer and uses a string identifier for the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  argTypes: {\n    // 👇 All Button stories expect a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining NoteUI Stories in JavaScript\nDESCRIPTION: This snippet defines Storybook stories for the NoteUI component using JavaScript. It includes imports, default export for meta configuration, and a 'Save Flow' story that tests the save functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, userEvent, within } from 'storybook/test';\n\nimport { saveNote } from '#app/actions.mock';\nimport { createNotes } from '#mocks/notes';\n\nimport NoteUI from './note-ui';\n\nexport default {\n  title: 'Mocked/NoteUI',\n  component: NoteUI,\n};\n\nconst notes = createNotes();\n\nexport const SaveFlow = {\n  name: 'Save Flow ▶',\n  args: {\n    isEditing: true,\n    note: notes[0],\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    const saveButton = canvas.getByRole('menuitem', { name: /done/i });\n    await userEvent.click(saveButton);\n    // 👇 This is the mock function, so you can assert its behavior\n    await expect(saveNote).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Viewport Addon with Yarn\nDESCRIPTION: Command to install @storybook/addon-viewport as a dev dependency using Yarn package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-viewport-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/addon-viewport\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for Web Components Button (TypeScript)\nDESCRIPTION: This snippet shows how to configure decorators for a Web Components Button in Storybook using TypeScript. It uses the 'lit' library to define a decorator that wraps the story in a div with margin and includes type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nimport { html } from 'lit';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  decorators: [(story) => html`<div style=\"margin: 3em\">${story()}</div>`],\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Example: Story = {};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Interactions Addon\nDESCRIPTION: Command to install the Storybook interactions addon and its required dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/addon-interactions @storybook/jest @storybook/testing-library --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Svelte using JavaScript CSF\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Svelte Checkbox component using JavaScript and Component Story Format (CSF). It exports a default meta object and an 'Unchecked' story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Checkbox from './Checkbox.svelte';\n\nexport default {\n  component: Checkbox,\n};\n\nexport const Unchecked = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Angular with pnpm\nDESCRIPTION: Command to install @storybook/angular as a dev dependency using pnpm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/angular\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Meta with Control Removal Using CSF (TypeScript 4.9, Svelte CSF)\nDESCRIPTION: Uses '@storybook/addon-svelte-csf' and TypeScript 4.9 features to define and export Svelte component story metadata, disabling the 'foo' control. Requires the Svelte Storybook CSF add-on, YourComponent import, and TypeScript 4.9 or later. The code is written in a <script module> block suitable for Svelte files. Intended for Svelte with TS 4.9 and the CSF add-on.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_4\n\nLANGUAGE: ts-4-9\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    argTypes: {\n      // foo is the property we want to remove from the UI\n      foo: {\n        control: false,\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing Storybook Accessibility Addon with pnpm\nDESCRIPTION: Command to remove the @storybook/addon-a11y addon from a Storybook project using pnpm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-remove-command.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest remove @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Storybook Main Config\nDESCRIPTION: Demonstrates how to define custom environment variables for Storybook using the env configuration option. The function receives the existing environment configuration and returns a modified version.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-env.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  env: (config) => ({\n    ...config,\n    EXAMPLE_VAR: 'example value',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HTML List Stories in JavaScript\nDESCRIPTION: Creates a Storybook story for an HTML List component using JavaScript. It imports a createList function and defines an Empty list story using the render method.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createList } from './List';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'List',\n};\n\n// Always an empty list, not super interesting\nexport const Empty = {\n  render: (args) => createList(args),\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for Yarn in Shell\nDESCRIPTION: Command to enable Corepack, which sets up the correct version of Yarn package manager for use with Storybook development.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Preview.js Configuration (Legacy Format)\nDESCRIPTION: Legacy format for preview.js configuration showing parameters export without default export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_64\n\nLANGUAGE: js\nCODE:\n```\nexport const parameters = {\n  actions: { argTypesRegex: \"^on[A-Z].*\" },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Webpack 5\nDESCRIPTION: Configuration in main.js to use Webpack 5 in Storybook by specifying the core and builder properties with the appropriate webpack5 plugins.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  core: {\n    builder: 'webpack5',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Ember CLI Build for Storybook\nDESCRIPTION: Update to ember-cli-build.js to include the Storybook adapter for Ember.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst EmberApp = require('ember-cli/lib/broccoli/ember-app');\n\nmodule.exports = function (defaults) {\n  let app = new EmberApp(defaults, {\n    '@storybook/ember-cli-storybook': {\n      enableAddonDocsIntegration: true,\n    },\n  });\n\n  return app.toTree();\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Addon Outline via npm\nDESCRIPTION: Command to install the Storybook Addon Outline package using npm. This step is necessary if the addon is not already included in your Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/outline/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @storybook/addon-outline\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta for Generic Components in JavaScript (Common Renderer)\nDESCRIPTION: Shows how to configure a Storybook meta object for a generic component in JavaScript, removing the 'foo' property from the controls. Requires importing the component and exporting a default object with the component and 'argTypes'. Suitable for React-style frameworks using JavaScript and the common renderer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { YourComponent } from './YourComponent';\n\nexport default {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Font Mocking\nDESCRIPTION: YAML configuration for mocking Google Fonts in CI/CD pipeline using GitHub Actions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/ci.yml\n- uses: chromaui/action@v1\n  env:\n    #👇 the location of mocked fonts to use\n    NEXT_FONT_GOOGLE_MOCKED_RESPONSES: ${{ github.workspace }}/mocked-google-fonts.js\n  with:\n    projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n    token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Labels for Release Management\nDESCRIPTION: Command to create necessary labels in GitHub for categorizing package changes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx auto create-labels\n```\n\n----------------------------------------\n\nTITLE: Importing Title Component\nDESCRIPTION: Demonstrates how to import the Title component from Storybook's addon-docs package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-title.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Title } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook to v7+\nDESCRIPTION: Command to upgrade an existing Storybook installation to version 7 or higher.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"storybook-upgrade.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Common TypeScript 4.9\nDESCRIPTION: This snippet demonstrates how to set up story tags for a generic component using TypeScript 4.9. It shows how to apply a global 'stable' tag and override it for a specific story, using a framework-agnostic approach.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta = {\n  component: Button,\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n} satisfies Meta<typeof Button>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const ExperimentalFeatureStory: Story = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Building Storybook with npm\nDESCRIPTION: This command uses npm to run the build-storybook script, which builds Storybook for the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/build-storybook-production-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nnpm run build-storybook\n```\n\n----------------------------------------\n\nTITLE: Initialize MSW with NPM\nDESCRIPTION: Initializes the Mock Service Worker (MSW) service worker files in the public directory using NPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-generate-service-worker.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx msw init public/\n```\n\n----------------------------------------\n\nTITLE: Labeling patches for Storybook release in Bash\nDESCRIPTION: Command to label patches for a Storybook release.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn release:label-patches\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions in Storybook Test Runner\nDESCRIPTION: JavaScript example of using helper functions provided by the Storybook test runner to access story internals during testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { within, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport { getStoryContext } from '@storybook/test-runner';\n\nexport default {\n  async test({ page, id }) {\n    const canvas = within(page.locator('#storybook-root').first());\n    const context = await getStoryContext(page, id);\n\n    // Example: Check if a specific arg is passed to the story\n    if (context.args.someArgument) {\n      // Perform test based on the arg\n    }\n\n    // Your test logic here\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Monospace Font Family in CSS\nDESCRIPTION: This CSS snippet defines the font-family for monospace text used in Storybook. It includes a fallback list of commonly available monospace fonts for different operating systems and environments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/typography.mdx#2025-04-22_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nfont-family:\n  ui-monospace,\n  Menlo,\n  Monaco,\n  \"Roboto Mono\",\n  \"Oxygen Mono\",\n  \"Ubuntu Monospace\",\n  \"Source Code Pro\",\n  \"Droid Sans Mono\",\n  \"Courier New\",\n  monospace;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Release Branch Conflicts with Mermaid - Problem Scenario\nDESCRIPTION: Demonstrates how merging changes directly to main branches can lead to unintended inclusions in releases. Shows a scenario where a bugfix gets inadvertently included in a release without proper QA.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'gitGraph': { 'mainBranchName': 'next' } } }%%\ngitGraph\n    commit type: HIGHLIGHT\n    branch new-feature\n    commit\n    commit\n    checkout next\n    merge new-feature type: HIGHLIGHT\n    branch some-simultaneous-bugfix\n    commit\n    checkout next\n    branch version-non-patch-from-7.1.0-alpha.28\n    commit id\n    checkout next\n    merge some-simultaneous-bugfix type: HIGHLIGHT id: \"whoops!\"\n    merge version-non-patch-from-7.1.0-alpha.28 tag: \"v7.1.0-alpha.29\"\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Sandbox in Unlinked Mode\nDESCRIPTION: This command runs the Storybook sandbox in unlinked mode, starting from the publish step. It allows specifying a template and is useful for seeing changes after modifying packages.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn task --task dev --template <your template> --start-from=publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Executables in JSON\nDESCRIPTION: JSON configuration for exposing Storybook executables in package.json\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bin\": {\n    \"storybook\": \"./bin/index.js\",\n    \"build-storybook\": \"./bin/build.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alpha Version Headers\nDESCRIPTION: Version headers for alpha releases documenting incremental changes and improvements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.0.0-alpha.62 (December 8, 2022)\n## 7.0.0-alpha.61 (December 7, 2022)\n## 7.0.0-alpha.60 (December 7, 2022)\n```\n\n----------------------------------------\n\nTITLE: Registering Interactions Addon in Storybook Config\nDESCRIPTION: Configuration code to register the interactions addon in Storybook's main configuration file\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    '@storybook/addon-interactions'\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with pnpm\nDESCRIPTION: This command executes Storybook tests using pnpm, targeting a specific Storybook URL for testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-url.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test-storybook  --url https://the-storybook-url-here.com\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest Coverage with NPM\nDESCRIPTION: Commands to install Vitest coverage packages using NPM package manager. Shows installation for both v8 and istanbul coverage providers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-install-coverage-support-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# For v8\nnpm install --save-dev @vitest/coverage-v8\n\n# For istanbul\nnpm install --save-dev @vitest/coverage-istanbul\n```\n\n----------------------------------------\n\nTITLE: Rules Documentation Table in Markdown\nDESCRIPTION: A markdown table documenting Storybook's ESLint rules, showing rule names, descriptions, auto-fix status, and configuration inclusion details. The table is wrapped in HTML-style comments to denote the rules list section.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{/* RULES-LIST:START */}\n\n**Configurations**: csf, csf-strict, addon-interactions, recommended\n\n| Name                                                                                                                                                               | Description                                                                                                                   | Automatically fixable | Included in configurations                                                                                                     |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| [`storybook/await-interactions`](https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/await-interactions.md)                       | Interactions should be awaited                                                                                                | ✅                    | <ul><li>addon-interactions</li><li>flat/addon-interactions</li><li>recommended</li><li>flat/recommended</li></ul>              |\n[...truncated for brevity...]\n\n{/* RULES-LIST:END */}\n```\n\n----------------------------------------\n\nTITLE: Vue Document Screen Component (TypeScript)\nDESCRIPTION: TypeScript version of the Vue Document Screen component using defineComponent for proper type inference. Implements data fetching and conditional rendering with type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<template>\n  <div v-if=\"!loading && data && data.subdocuments.length\">\n    <PageLayout :user=\"data.user\">\n      <DocumentHeader :document=\"data.document\" />\n      <DocumentList :documents=\"data.subdocuments\" />\n    </PageLayout>\n  </div>\n  <p v-if=\"loading\">Loading...</p>\n  <p v-if=\"error\">There was an error fetching the data!</p>\n</template>\n<script lang=\"ts\">\n  import { defineComponent, ref } from 'vue';\n  import PageLayout from './PageLayout';\n  import DocumentHeader from './DocumentHeader';\n  import DocumentList from './DocumentList';\n\n  export default defineComponent({\n    name: 'SampleRestComponent',\n    components: {\n      PageLayout,\n      DocumentHeader,\n      DocumentList,\n    },\n    setup() {\n      const data = ref(null);\n      const loading = ref(true);\n      const error = ref(null);\n      fetch('https://your-restful-endpoint')\n        .then((res) => {\n          if (!res.ok) {\n            error.value = res.statusText;\n          }\n          return res;\n        })\n        .then((res) => res.json())\n        .then((requestData) => {\n          data.value = requestData;\n          loading.value = false;\n        })\n        .catch(() => {\n          error.value = 'error';\n        });\n      return {\n        error,\n        loading,\n        data,\n      };\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with Yarn\nDESCRIPTION: This command uses Yarn's dlx feature to run the Storybook initialization script for version 7 or higher. It sets up Storybook in the current project using Yarn as the package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-init-v7.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@^7 init\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc for Angular Documentation\nDESCRIPTION: Command to install Compodoc as a development dependency, which is required for generating component API documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @compodoc/compodoc\n```\n\n----------------------------------------\n\nTITLE: Checking out and creating a branch for patch release in Bash\nDESCRIPTION: Commands to fetch all tags, checkout the latest minor release tag, and create a new branch for the patch release.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --all --tags\ngit checkout tags/v8.3.6 -b patch-8-3-7\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Test Runner with NPM\nDESCRIPTION: Installs the @storybook/test-runner package as a development dependency using npm package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @storybook/test-runner --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Interactions Addon with Yarn\nDESCRIPTION: Installs the `@storybook/addon-interactions` package as a development dependency using the Yarn package manager. The `--dev` flag specifies it as a development dependency.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-interactions-addon-full-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/addon-interactions\n```\n\n----------------------------------------\n\nTITLE: Listing Available Codemods with Storybook CLI\nDESCRIPTION: This command lists all available codemods using the Storybook CLI's migrate command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx sb migrate --list\n```\n\n----------------------------------------\n\nTITLE: Empty StorybookJS Preset Configuration\nDESCRIPTION: An empty preset configuration file marked with a comment indicating that no configuration is required for this particular setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-storysource-manager-entries.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* nothing needed */\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Manager in JavaScript\nDESCRIPTION: Command to install @storybook/manager package using yarn.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @storybook/manager --dev\n```\n\n----------------------------------------\n\nTITLE: Viewing Stories in Storybook UI\nDESCRIPTION: This command runs the Storybook dev server, which attaches to the Parcel dev server, lists its stories in the navigation, and displays them in the preview iframe.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/standalone-preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Path Aliases in Next.js\nDESCRIPTION: Example of configuring TypeScript to support path aliases in a Next.js project, which will be automatically respected by the Next.js framework in Storybook. Shows the baseUrl and paths settings in tsconfig.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_23\n\nLANGUAGE: jsonc\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout for Web Components in JavaScript\nDESCRIPTION: Sets up a 'demo-button' Web Component story with centered layout in JavaScript. This example targets the custom element tag name 'demo-button' instead of importing a component class.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'demo-button',\n  // Sets the layout parameter component wide.\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Lazy Compilation to Webpack5\nDESCRIPTION: Add lazy compilation feature to Webpack5 in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add lazy compilation to Webpack5\n// See PR #17501 for details\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component Story with TypeScript\nDESCRIPTION: Demonstrates how to create a Storybook story for an Angular component using TypeScript. Includes type definitions and metadata configuration with optional title prop.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  component: MyComponent,\n  title: 'components/MyComponent/MyComponent',\n};\n\nexport default meta;\ntype Story = StoryObj<MyComponent>;\n\nexport const Default: Story = {\n  args: {\n    something: 'Something else',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview for Solid with TypeScript\nDESCRIPTION: This snippet sets up the preview configuration for Solid in Storybook using TypeScript. It imports the Preview type from 'storybook-solidjs' and defines a decorator that wraps each story with a div element having a 3em margin.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preview } from 'storybook-solidjs';\n\nconst preview: Preview = {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in JavaScript for Next.js\nDESCRIPTION: This snippet shows the configuration for Storybook's main.js file in a Next.js project. It demonstrates how to set up the addons array, with comments indicating the removal of Next.js-specific addons that are no longer needed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-remove-addons.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  addons: [\n    // ...\n    // 👇 These can both be removed\n    // 'storybook-addon-next',\n    // 'storybook-addon-next-router',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Sandbox Environment with NPX\nDESCRIPTION: Command to create a new Storybook sandbox environment for reproduction purposes. This uses the next version of Storybook and allows filtering templates by appending a framework name to the command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/how-to-reproduce.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@next sandbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner in TypeScript\nDESCRIPTION: TypeScript configuration for Storybook test runner with type definitions, excluding stories tagged with 'no-tests' from being tested.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-exclude.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TestRunnerConfig } from '@storybook/test-runner';\n\nconst config: TestRunnerConfig = {\n  tags: {\n    exclude: ['no-tests'],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Converting storiesOf to CSF 1 using yarn\nDESCRIPTION: This command uses yarn to run the Storybook migration tool, converting stories from storiesOf API to CSF 1 format. It targets TypeScript (.tsx) story files using the specified glob pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-stories-of-to-csf.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Convert storiesOf to CSF 1\nyarn dlx storybook@latest migrate storiesof-to-csf --glob=\"**/*.stories.tsx\" --parser=tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Story in CSF 3\nDESCRIPTION: Exports default component metadata for the Button component using Component Story Format 3. This is the basic required configuration to create stories for a component in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-auto-title.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default { component: Button };\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Automigrate\nDESCRIPTION: Command to automatically upgrade Storybook configuration for CRA5 compatibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_110\n\nLANGUAGE: shell\nCODE:\n```\nnpx sb@latest automigrate\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with NPM Watch Mode\nDESCRIPTION: Command to run Storybook tests in watch mode using npm package manager. The --watch flag enables continuous test execution on file changes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-flags.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --watch\n```\n\n----------------------------------------\n\nTITLE: Example Crash Report Telemetry Event\nDESCRIPTION: Shows the format of a telemetry event when crash reporting is enabled, including the error object with sanitized information.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"anonymousId\": \"8bcfdfd5f9616a1923dd92adf89714331b2d18693c722e05152a47f8093392bb\",\n  \"eventType\": \"dev\",\n  \"payload\": {\n    \"versionStatus\": \"cached\",\n    \"storyIndex\": {\n      \"storyCount\": 0,\n      \"componentCount\": 0,\n      \"pageStoryCount\": 0,\n      \"playStoryCount\": 0,\n      \"autodocsCount\": 0,\n      \"mdxCount\": 0,\n      \"exampleStoryCount\": 8,\n      \"exampleDocsCount\": 3,\n      \"onboardingStoryCount\": 0,\n      \"onboardingDocsCount\": 0,\n      \"version\": 5\n    },\n    \"storyStats\": {\n      \"factory\": 0,\n      \"play\": 0,\n      \"render\": 1,\n      \"loaders\": 0,\n      \"beforeEach\": 0,\n      \"globals\": 0,\n      \"storyFn\": 5,\n      \"mount\": 0,\n      \"moduleMock\": 0,\n      \"tags\": 0\n    },\n    \"error\": {\n      \"message\": \"Error: Something went wrong\",\n      \"stack\": \"Error: Something went wrong\\n    at Object.<anonymous> ([sanitized])\\n    at Module._compile (internal/modules/cjs/loader.js:999:30)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1027:10)\\n    at Module.load (internal/modules/cjs/loader.js:863:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:708:14)\\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:60:12)\\n    at internal/main/run_main_module.js:17:47\"\n    }\n  },\n  \"metadata\": {\n    // The same metadata as above\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Window Workaround for Jest-mock\nDESCRIPTION: HTML script to add to preview-head.html that creates a workaround for jest-mock's reliance on the node global variable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.global = window;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Manager API collapseAll and expandAll Methods\nDESCRIPTION: Shows how to replace the deprecated collapseAll and expandAll methods from the Storybook manager API with event emissions using core events constants. This affects addons that use these methods.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  STORIES_COLLAPSE_ALL,\n  STORIES_EXPAND_ALL,\n} from \"@storybook/core-events\";\nimport { useStorybookApi } from \"@storybook/manager-api\";\n\nconst api = useStorybookApi();\napi.collapseAll(); // becomes api.emit(STORIES_COLLAPSE_ALL)\napi.expandAll(); // becomes api.emit(STORIES_EXPAND_ALL)\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes in Web Components CSF (TypeScript)\nDESCRIPTION: Configures Storybook metadata for a Web Component using TypeScript and standard Component Story Format (CSF). It imports the `Meta` type, defines the typed `meta` object, specifies the component using its custom element tag name (string), and uses `argTypes` to hide the 'foo' property from the Storybook args table.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"YourComponent.stories.ts\" renderer=\"web-components\" language=\"ts\"\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'your-component',\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      table: {\n        disable: true,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Background Colors in TypeScript\nDESCRIPTION: This snippet imports the Preview type from Storybook and creates a configuration object for background colors. It defines the same red and green background options as the JavaScript version, but with type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: SolidJS Document Screen with GraphQL (JavaScript)\nDESCRIPTION: SolidJS implementation using @solid-primitives/graphql for GraphQL queries. Uses SolidJS's Match and Switch components for conditional rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Match, Switch } from 'solid-js';\nimport { createGraphQLClient, gql } from '@solid-primitives/graphql';\n\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nconst newQuery = createGraphQLClient('https://foobar.com/v1/api');\nconst AllInfoQuery = gql`\n  query AllInfo {\n    user {\n      userID\n      name\n    }\n    document {\n      id\n      userID\n      title\n      brief\n      status\n    }\n    subdocuments {\n      id\n      userID\n      title\n      content\n      status\n    }\n  }\n`;\n\nfunction useFetchInfo() {\n  const [data] = newQuery(AllInfoQuery, { path: 'home' });\n  return data;\n}\n\nexport function DocumentScreen() {\n  const data = useFetchInfo();\n\n  return (\n    <Switch>\n      <Match when={data.loading}>\n        <p>Loading...</p>\n      </Match>\n      <Match when={data.error}>\n        <p>There was an error fetching the data!</p>\n      </Match>\n      <Match when={data()} keyed>\n        {(data) => (\n          <PageLayout user={data.user}>\n            <DocumentHeader document={data.document} />\n            <DocumentList documents={data.subdocuments} />\n          </PageLayout>\n        )}\n      </Match>\n    </Switch>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook with yarn\nDESCRIPTION: This command uses yarn dlx to upgrade Storybook to the latest version using yarn package manager. It runs the 'upgrade' command of the '@next' version of Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@next upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining Error Object with Stack Trace and Message in JavaScript\nDESCRIPTION: This snippet creates a JavaScript object containing an error stack trace and a corresponding error message. The stack trace provides detailed information about the error's origin and call stack, while the message offers a concise description of the error.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-crash-report-event.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  stack: 'Error: Your button is not working\\n' +\n    '    at Object.<anonymous> ($SNIP/test.js:39:27)\\n' +\n    '    at Module._compile (node:internal/modules/cjs/loader:1103:14)\\n' +\n    '    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1157:10)\\n' +\n    '    at Module.load (node:internal/modules/cjs/loader:981:32)\\n' +\n    '    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n' +\n    '    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)\\n' +\n    '    at node:internal/main/run_main_module:17:47',\n  message: 'Your button is not working'\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Canary Release Workflow Using GitHub CLI\nDESCRIPTION: Command to trigger a canary release workflow for a specific pull request. The release will create a version with format 0.0.0-pr-<PR_NUMBER>-sha-<COMMIT_SHA>.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngh workflow run --repo storybookjs/storybook canary-release-pr.yml --field pr=<PR_NUMBER>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Commands\nDESCRIPTION: Shell commands for running and building Storybook in an Angular project\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nng run <your-project>:storybook\n```\n\nLANGUAGE: sh\nCODE:\n```\nng run <your-project>:build-storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific ESLint Rule Test for Storybook\nDESCRIPTION: Example of configuring a test for a specific ESLint rule in Storybook, including how to run only a particular test case.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nruleTester.run('my-rule-name', rule, {\n  valid: [\n    'export default { component: Button }',\n  ],\n\n  invalid: [\n    {\n      only: true, // <-- Add this property, which is equivalent to it.only in jest\n      code: \"export default { title: 'Button', component: Button }\",\n      errors: [ ... ],\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Automigration with NPM\nDESCRIPTION: Executes Storybook's automigration utility using NPX (NPM package runner). Uses the latest version of Storybook to run the automigrate command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-automigrate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@latest automigrate\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Types in Nginx for ESM Support\nDESCRIPTION: Nginx configuration to properly serve .mjs files with the correct Content-Type header for ECMAScript Modules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_73\n\nLANGUAGE: nginx\nCODE:\n```\n    include mime.types;\n    types {\n        application/javascript mjs;\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating WithTooltip Component Properties\nDESCRIPTION: Shows how to update the WithTooltip component from @storybook/components by replacing deprecated properties with their new equivalents. The tooltipShown, closeOnClick, and onVisibilityChange properties have been renamed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_53\n\nLANGUAGE: tsx\nCODE:\n```\n<WithTooltip\n  closeOnClick // becomes closeOnOutsideClick\n  tooltipShown // becomes defaultVisible\n  onVisibilityChange // becomes onVisibleChange\n>\n  ...\n</WithTooltip>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook with Yarn\nDESCRIPTION: Command to upgrade Storybook to version 7.6.6 using Yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/upgrade-command-specific-version.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@7.6.6 upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport in SolidJS Stories (JavaScript)\nDESCRIPTION: Shows how to set up viewport configuration for SolidJS Storybook stories using JavaScript. Imports INITIAL_VIEWPORTS from the viewport addon and configures it for all stories in the file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { INITIAL_VIEWPORTS } from '@storybook/addon-viewport';\n\nimport { MyComponent } from './MyComponent';\n\nexport default {\n  component: MyComponent,\n  parameters: {\n    viewport: {\n      //👇 Set available viewports for every story in the file\n      viewports: INITIAL_VIEWPORTS,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining NoteUI Stories for Angular in TypeScript\nDESCRIPTION: This snippet defines Storybook stories for the NoteUI component in Angular using TypeScript. It includes imports, meta configuration, and a 'Save Flow' story that tests the save functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { expect, userEvent, within } from 'storybook/test';\n\n// 👇 Must include the `.mock` portion of filename to have mocks typed correctly\nimport { saveNote } from '#app/actions.mock';\nimport { createNotes } from '#mocks/notes';\n\nimport NoteUI from './note-ui';\n\nconst meta: Meta<NoteUI> = {\n  title: 'Mocked/NoteUI',\n  component: NoteUI,\n};\nexport default meta;\n\ntype Story = StoryObj<NoteUI>;\n\nconst notes = createNotes();\n\nexport const SaveFlow: Story = {\n  name: 'Save Flow ▶',\n  args: {\n    isEditing: true,\n    note: notes[0],\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    const saveButton = canvas.getByRole('menuitem', { name: /done/i });\n    await userEvent.click(saveButton);\n    // 👇 This is the mock function, so you can assert its behavior\n    await expect(saveNote).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook Webpack 5 Babel Addon via yarn\nDESCRIPTION: Uses `yarn dlx` (yarn download and execute) to run the latest version of the Storybook CLI and add the `@storybook/addon-webpack5-compiler-babel` addon to the current project. This command is intended for projects managed with yarn (typically Yarn Berry or later).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-babel-auto-install.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn dlx storybook@latest add @storybook/addon-webpack5-compiler-babel\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with TypeScript\nDESCRIPTION: TypeScript configuration example for Storybook's main.ts file. Imports the StorybookConfig type for type safety, defines the framework, story patterns, and build options with proper TypeScript typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-blocks.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableBlocks: false,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining a Story Function with Args in JavaScript\nDESCRIPTION: Demonstrates how to define a story function that uses args. The args are passed as the first argument, and the context as the second argument.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-store.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst YourStory = ({ x, y } /*, context*/) => /* render your story using `x` and `y` */\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addons in JavaScript\nDESCRIPTION: This code snippet exports the default configuration for Storybook, specifically adding the addon-docs preset. It demonstrates how to include addons in a Storybook project's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-presets-managerentry.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    '@storybook/addon-docs/preset', // A preset registered here, in this case from the addon-docs addon.\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Storybook Docs\nDESCRIPTION: Imports required components from Storybook addon-docs and account form stories. Sets up documentation structure with Meta and Story components to display form variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/AccountForm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs';\nimport * as AccountFormStories from './AccountForm.stories';\n```\n\n----------------------------------------\n\nTITLE: Listing Storybook Core-server Components in Markdown\nDESCRIPTION: This code snippet enumerates the main components and functionalities provided by the Storybook Core-server package. It includes CLI arg parsing, webpack configuration for the manager UI, dev server, static builder, and presets handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- CLI arg parsing\n- Storybook UI \"manager\" webpack configuration\n- `storybook dev` dev server\n- `storybook build` static builder\n- presets handling\n```\n\n----------------------------------------\n\nTITLE: Removing Unused UUID Dependency in Storybook\nDESCRIPTION: Remove the unused and deprecated uuid dependency from Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove unused `uuid` that's also deprecated\n// See PR #17615 for details\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addons in main.js\nDESCRIPTION: Adds the Storybook Docs addon to the list of addons in the .storybook/main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other settings\n  addons: ['@storybook/addon-docs']\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Design Addon with yarn\nDESCRIPTION: Adds the Storybook Design addon to your project using yarn package manager. This command uses yarn dlx to execute the storybook CLI tool and add the design addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-figma-addon-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@latest add @storybook/addon-designs\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Docgen Options\nDESCRIPTION: Advanced configuration example showing how to set up vue-docgen-api options with path aliases.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as path from 'path';\n\nexport default {\n  addons: [\n    {\n      name: '@storybook/addon-docs',\n      options: {\n        vueDocgenOptions: {\n          alias: {\n            '@': path.resolve(__dirname, '../'),\n          },\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Story Args in Tests\nDESCRIPTION: Example showing how to access and utilize story args within test cases.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { composeStories } from '@storybook/react';\nimport * as stories from './Login.stories';\n\nconst { Submit } = composeStories(stories);\n\ntest('default args from story', () => {\n  console.log(Submit.args);\n  // { primary: true, label: 'Submit' }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Coverage Addon\nDESCRIPTION: Command to install the Storybook coverage addon using npm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/addon-coverage\n```\n\n----------------------------------------\n\nTITLE: Adding A11y Addon in JavaScript Configuration\nDESCRIPTION: Shows how to include the Storybook accessibility addon in the main.js configuration file. This enables accessibility testing features in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-example-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: [\n    // Other Storybook addons\n    '@storybook/addon-a11y',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating CLI Process Spawning for Windows Compatibility\nDESCRIPTION: Fixes issues with spawning child processes on Windows operating systems in the Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of cross-platform process spawning\nconst { spawn } = require('child_process');\nconst isWindows = process.platform === 'win32';\nconst command = isWindows ? 'npm.cmd' : 'npm';\nspawn(command, ['run', 'storybook'], { stdio: 'inherit' });\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/preset-create-react-app using Shell\nDESCRIPTION: Provides commands to install the `@storybook/preset-create-react-app` package as a development dependency using either the Yarn or npm package managers. This preset helps integrate Storybook with Create React App projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Yarn\nyarn add -D @storybook/preset-create-react-app\n\n# npm\nnpm install -D @storybook/preset-create-react-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Project for Compodoc\nDESCRIPTION: Update to angular.json file to include Compodoc in Storybook's builder configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": {\n    \"your-project\": {\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"tsConfig\": \"tsconfig.json\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook SvelteKit with pnpm\nDESCRIPTION: Command to install @storybook/sveltekit package as a dev dependency using pnpm package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @storybook/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Codemod Dependencies\nDESCRIPTION: This command installs the necessary dependencies (jscodeshift and @storybook/codemod) for running Storybook codemods manually.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add jscodeshift @storybook/codemod --dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Screen with React in JavaScript\nDESCRIPTION: Implements a React functional component that renders user, document, and subdocuments using props. It requires React library imports and document-related components. No internal state is used by this component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\n\nimport { PageLayout } from './PageLayout';\nimport { DocumentHeader } from './DocumentHeader';\nimport { DocumentList } from './DocumentList';\n\nexport function DocumentScreen({ user, document, subdocuments }) {\n  return (\n    <PageLayout user={user}>\n      <DocumentHeader document={document} />\n      <DocumentList documents={subdocuments} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Upgrade Hierarchy Separators Codemod\nDESCRIPTION: This command runs the upgrade-hierarchy-separators codemod using jscodeshift. It updates the story hierarchy separators to use a single '/' separator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/jscodeshift -t ./node_modules/@storybook/codemod/dist/transforms/upgrade-hierarchy-separators.js . --ignore-pattern \"node_modules|dist\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPalette and ColorItem in Storybook MDX\nDESCRIPTION: This snippet demonstrates how to use the ColorPalette and ColorItem blocks in a Storybook MDX file to document various color swatches, including greyscale, primary, secondary, and gradient colors.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-colorpalette.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, ColorPalette, ColorItem } from '@storybook/addon-docs/blocks';\n\n<Meta title=\"Colors\" />\n\n<ColorPalette>\n  <ColorItem\n    title=\"theme.color.greyscale\"\n    subtitle=\"Some of the greys\"\n    colors={{ White: '#FFFFFF', Alabaster: '#F8F8F8', Concrete: '#F3F3F3' }}\n  />\n  <ColorItem \n    title=\"theme.color.primary\" \n    subtitle=\"Coral\" \n    colors={{ WildWatermelon: '#FF4785' }} \n  />\n  <ColorItem \n    title=\"theme.color.secondary\" \n    subtitle=\"Ocean\" \n    colors={{ DodgerBlue: '#1EA7FD' }} \n  />\n  <ColorItem\n    title=\"theme.color.positive\"\n    subtitle=\"Green\"\n    colors={{\n      Apple: 'rgba(102,191,60,1)',\n      Apple80: 'rgba(102,191,60,.8)',\n      Apple60: 'rgba(102,191,60,.6)',\n      Apple30: 'rgba(102,191,60,.3)',\n    }}\n  />\n  <ColorItem\n    title=\"gradient\"\n    subtitle=\"Grayscale\"\n    colors={{\n      Gradient: 'linear-gradient(to right,white,black)',\n    }}\n  />\n  <ColorItem\n    title=\"gradient\"\n    subtitle=\"Grayscale\"\n    colors={['linear-gradient(65deg,white,black)']}\n  />\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Customizing Vite Configuration with viteFinal\nDESCRIPTION: JavaScript example showing how to use mergeConfig to customize the Vite configuration for Storybook, such as adding aliases or plugins.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// use `mergeConfig` to recursively merge Vite options\nimport { mergeConfig } from 'vite';\n\nconst config = {\n  async viteFinal(config, { configType }) {\n    // Be sure to return the customized config\n    return mergeConfig(config, {\n      // Customize the Vite config for Storybook\n      resolve: {\n        alias: { foo: 'bar' },\n      },\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/experimental-nextjs-vite with yarn\nDESCRIPTION: This command installs the @storybook/experimental-nextjs-vite package as a development dependency using yarn. It's used for integrating Storybook with Next.js and Vite in a project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/experimental-nextjs-vite\n```\n\n----------------------------------------\n\nTITLE: Visualizing Patch Release Workflow with Mermaid\nDESCRIPTION: A git graph diagram showing the workflow of a patch release process, where two bug fixes with 'patch:yes' label are cherry-picked from 'next' branch to create version 7.0.19.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n    commit\n    branch latest-release\n    branch next\n    checkout latest-release\n    commit tag: \"v7.0.18\"\n    checkout main\n    merge latest-release\n    checkout next\n    commit\n    branch some-patched-bugfix\n    commit\n    commit id: \"patch1\"\n    checkout next\n    merge some-patched-bugfix\n    branch new-feature\n    commit\n    checkout next\n    merge new-feature\n    branch other-patched-bugfix\n    commit id: \"patch2\"\n    checkout next\n    merge other-patched-bugfix\n    checkout main\n    branch version-patch-from-7.0.18\n    cherry-pick id: \"patch1\"\n    cherry-pick id: \"patch2\"\n    commit id: \"write changelog\"\n    checkout latest-release\n    merge version-patch-from-7.0.18\n    commit id: \"bump versions\" tag: \"v7.0.19\"\n    checkout main\n    merge latest-release\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta with TypeScript for Generic Renderer\nDESCRIPTION: This snippet shows a Storybook Meta configuration using TypeScript for a generic renderer. It explicitly types the meta object as Meta<typeof Example>.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta: Meta<typeof Example> = {\n  component: Example,\n  argTypes: {\n    label: {\n      options: ['Normal', 'Bold', 'Italic'],\n      mapping: {\n        Bold: <b>Bold</b>,\n        Italic: <i>Italic</i>,\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Controls for Web Components Storybook - TypeScript\nDESCRIPTION: Uses TypeScript typings from '@storybook/web-components' to configure stories for a Web Component, referencing the component by string. Four stories illustrate array and regex-based 'include' and 'exclude' usage. This snippet is ideal for projects with TypeScript strictness and Storybook for web components. Inputs: web component name; outputs: strongly-typed JS stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'your-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ArrayInclude: Story = {\n  parameters: {\n    controls: { include: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexInclude: Story = {\n  parameters: {\n    controls: { include: /^hello*/ },\n  },\n};\n\nexport const ArrayExclude: Story = {\n  parameters: {\n    controls: { exclude: ['foo', 'bar'] },\n  },\n};\n\nexport const RegexExclude: Story = {\n  parameters: {\n    controls: { exclude: /^hello*/ },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationBasedComponent Story in TypeScript with Type Annotation\nDESCRIPTION: This snippet defines a story configuration for NavigationBasedComponent using TypeScript with explicit type annotation. It imports Meta and StoryObj types from Storybook React and sets up Next.js parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-override-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nconst meta: Meta<typeof NavigationBasedComponent> = {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true,\n      navigation: {\n        segments: ['dashboard', 'analytics'],\n      },\n    },\n  },\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with JavaScript\nDESCRIPTION: Implements a Button component story using JavaScript with basic metadata and documentation parameters. Suitable for frameworks that support JavaScript configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst meta = {\n  component: Button,\n};\nexport default meta;\n\nexport const Basic = {\n  parameters: {\n    docs: {\n      story: { autoplay: true },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Themes Addon in Storybook Configuration\nDESCRIPTION: Adding the themes addon to the Storybook configuration in main.js file\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/styled-components.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n+   '@storybook/addon-themes',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Building Storybook packages in Bash\nDESCRIPTION: Commands to install dependencies and compile all packages without linking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn task --task compile --no-link\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Template Resolution in Playwright CT\nDESCRIPTION: Configuration example for resolving Vue template components in Playwright CT environment by aliasing the vue module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-playwright.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// playwright-config.ts\nimport { defineConfig } from '@playwright/experimental-ct-vue';\n\nexport default defineConfig({\n  ctViteConfig: {\n    resolve: {\n      alias: {\n        vue: 'vue/dist/vue.esm-bundler.js',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Config in JavaScript\nDESCRIPTION: JavaScript configuration for Storybook's main configuration file, enabling Svelte CSF addon with legacy template support. Exports a configuration object that sets up the necessary addons for Svelte support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Other configuration\n  addons: [\n    {\n      name: '@storybook/addon-svelte-csf',\n      options: {\n        legacyTemplate: true, // Enables the legacy template syntax\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Auto-title in CSF3\nDESCRIPTION: Fix the Auto-title feature in CSF3 to respect file system capitalization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Fix Auto-title to respect file system capitalization\n// See PR #17574 for details\n```\n\n----------------------------------------\n\nTITLE: Defining a Storybook Story for React Component\nDESCRIPTION: Creates a story for a 'Foo' component with a 'bar' variant that renders a div containing 'baz'. Includes ESLint disable comments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ugly-comments-stories.txt#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-disable-line */ const x = 0;\n\n// eslint-disable-line\nstoriesOf('Foo', module)\n  .add('bar', () => <div>baz</div>);\n```\n\n----------------------------------------\n\nTITLE: Enabling Crash Reports in Storybook\nDESCRIPTION: This command enables crash reporting in Storybook by setting the STORYBOOK_ENABLE_CRASH_REPORTS environment variable to 1 before running the storybook command. When enabled, Storybook will send crash reports that help the development team identify and fix issues.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-storybook-enable-crash-reports-env.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nSTORYBOOK_ENABLE_CRASH_REPORTS=1 yarn storybook\n```\n\n----------------------------------------\n\nTITLE: Angular Component Story Configuration (TypeScript)\nDESCRIPTION: Shows how to configure a basic story for an Angular component using TypeScript. Includes component metadata setup and story definition with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { YourComponent } from './your.component';\n\n//👇 This default export determines where your story goes in the story list\nconst meta: Meta<YourComponent> = {\n  component: YourComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<YourComponent>;\n\nexport const FirstStory: Story = {\n  args: {\n    //👇 The args you need here will depend on your component\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Project Annotations with Storybook for Svelte in JavaScript\nDESCRIPTION: The JavaScript version for Svelte projects, configuring project annotations with Storybook. It uses Vitest's `beforeAll` and includes plugin imports for accessibility and optional project-specific adjustments. A switch to `@storybook/sveltekit` is advised if using SvelteKit.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { beforeAll } from 'vitest';\n\n// Replace @storybook/svelte with @storybook/sveltekit if you are using SvelteKit\nimport { setProjectAnnotations } from '@storybook/svelte';\n\n// Import the a11y addon annotations\nimport * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';\n\n// Optionally import your own annotations\nimport * as projectAnnotations from './preview';\n\nconst project = setProjectAnnotations([\n  // Add the a11y addon annotations\n  a11yAddonAnnotations,\n  projectAnnotations,\n]);\n\nbeforeAll(project.beforeAll);\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs for Web Components Button\nDESCRIPTION: Implementation for Web Components showing how to configure auto-generated documentation using both JavaScript and TypeScript syntax. Demonstrates component title specification and autodocs configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n  //👇 Enables auto-generated documentation for this component and includes all stories in this file\n  tags: ['autodocs'],\n};\nexport default meta;\n\ntype Story = StoryObj;\n\nexport const UndocumentedStory: Story = {\n  // 👇 Removes this story from auto-generated documentation\n  tags: ['!autodocs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding no-manager-cache flag to build-storybook CLI\nDESCRIPTION: Adds a new --no-manager-cache flag to the build-storybook command in the Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nCLI: Add `--no-manager-cache` to build-storybook\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Core-Client with Framework-Specific Functions\nDESCRIPTION: The start function is called with framework-specific functions to initialize Storybook. It returns a configure function used in preview.js or automatically by main.js:stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-core-client.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nstart(renderToCanvas, { render, decorateStory })\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Storybook Stories with JavaScript\nDESCRIPTION: This snippet shows a generic way to set up story metadata for a component using JavaScript. It can be used with various frameworks by importing the appropriate component. It sets tags for documentation and development visibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  /*\n   * All stories in this file will:\n   * - Be included in the docs page\n   * - Not appear in Storybook's sidebar\n   */\n  tags: ['autodocs', '!dev'],\n};\n```\n\n----------------------------------------\n\nTITLE: Active Button in TypeScript React\nDESCRIPTION: Shows how to use the active prop to set the Button as active, which changes its background color. This is useful for indicating selected or current states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Button active>\n  <FaceHappyIcon />Button\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Web Components Button Stories in JavaScript\nDESCRIPTION: JavaScript configuration for Web Components Button stories with canvas source state configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport const Basic = {\n  parameters: {\n    docs: {\n      canvas: { sourceState: 'shown' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in JavaScript\nDESCRIPTION: Defines Button component stories using JavaScript syntax. Configures the story container and exports a Primary story variant with specific props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-title.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  // Sets the name for the stories container\n  title: 'components/Button',\n  // The component name will be used if `title` is not set\n  component: Button,\n};\n\n// The story variable name will be used if `name` is not set\nconst Primary = {\n  // Sets the name for that particular story\n  name: 'Primary',\n  args: {\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Next.js package with npm\nDESCRIPTION: This command installs the @storybook/nextjs package as a development dependency using npm. It's used to set up Storybook for a Next.js project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/nextjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the framework, story file patterns, and enables the legacyDecoratorFileOrder feature.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-legacy-decorator-file-order.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  features: {\n    legacyDecoratorFileOrder: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining NoteUI Stories for Web Components in JavaScript\nDESCRIPTION: This snippet defines Storybook stories for the NoteUI web component using JavaScript. It includes imports, default export for meta configuration, and a 'Save Flow' story that tests the save functionality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect, userEvent, within } from 'storybook/test';\n\nimport { saveNote } from '#app/actions.mock';\nimport { createNotes } from '#mocks/notes';\n\nexport default {\n  title: 'Mocked/NoteUI',\n  component: 'note-ui',\n};\n\nconst notes = createNotes();\n\nexport const SaveFlow = {\n  name: 'Save Flow ▶',\n  args: {\n    isEditing: true,\n    note: notes[0],\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    const saveButton = canvas.getByRole('menuitem', { name: /done/i });\n    await userEvent.click(saveButton);\n    // 👇 This is the mock function, so you can assert its behavior\n    await expect(saveNote).toHaveBeenCalled();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Data-Fetching LitElement Web Component in JavaScript\nDESCRIPTION: This JavaScript code defines a LitElement web component named `DocumentScreen`. It uses component properties (`_data`) and internal state (`_status`) to manage fetched data and its loading status ('idle', 'loading', 'success', 'error'). Data is fetched from 'https://your-restful-endpoint' when the component connects to the DOM (`connectedCallback`). The `render` method uses `lit-html` to conditionally display loading messages, error messages, or the fetched data by passing it to child components (`demo-page-layout`, `demo-document-header`, `demo-document-list`).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass DocumentScreen extends LitElement {\n  static get properties() {\n    return {\n      _data: { type: Object },\n      _status: { state: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this._status = 'idle';\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.fetchData();\n  }\n\n  fetchData() {\n    this._status = 'loading';\n\n    fetch('https://your-restful-endpoint')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        response.json();\n      })\n      .then((data) => {\n        this._status = 'success';\n        this._data = data;\n      })\n      .catch((error) => {\n        this._status = 'error';\n      });\n  }\n\n  render() {\n    if (this._status === 'error') {\n      return html`<p>There was an error fetching the data!</p>`;\n    }\n\n    if (this._status === 'loading') {\n      return html`<p>Loading...</p>`;\n    }\n\n    const { user, document, subdocuments } = this._data;\n    return html`\n      <demo-page-layout .user=${user}>\n        <demo-document-header .document=${document}></demo-document-header>\n        <demo-document-list .documents=${subdocuments}></demo-document-list>\n      </demo-page-layout>\n    `;\n  }\n}\n\ncustomElements.define('demo-document-screen', DocumentScreen);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Module Resolution in Storybook\nDESCRIPTION: Configuration to properly resolve TypeScript module aliases defined in tsconfig by adding tsconfig-paths-webpack-plugin to Storybook's webpack configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst path = require('path');\nconst TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');\n\nmodule.exports = {\n  webpackFinal: async (config) => {\n    config.resolve.plugins = [\n      ...(config.resolve.plugins || []),\n      new TsconfigPathsPlugin({\n        extensions: config.resolve.extensions,\n      }),\n    ];\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with NPM\nDESCRIPTION: Executes Storybook tests using npm package manager with the --no-index-json flag to disable index.json file generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-no-index-json.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --no-index-json\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Logos in HTML\nDESCRIPTION: This HTML code snippet creates a grid of sponsor logos with links to their websites. It uses OpenCollective to dynamically fetch sponsor information for different tiers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/storybook/tiers/sponsors/0/website?requireActive=true\" target=\"_blank\"><img src=\"https://opencollective.com/storybook/tiers/sponsors/0/avatar.svg?requireActive=true\"></a>\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Stories with React Docgen Examples\nDESCRIPTION: Defines a group of stories that demonstrate how comments from different sources (PropType declarations, Flow declarations, and component declarations) are extracted and displayed in the Info addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.React Docgen', module)\n  .add(\n    'Comments from PropType declarations',\n    withInfo(\n      'Comments above the PropType declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'\n    )(() => <DocgenButton label=\"Docgen Button\" />)\n  )\n  .add(\n    'Comments from Flow declarations',\n    withInfo(\n      'Comments above the Flow declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'\n    )(() => <FlowTypeButton label=\"Flow Typed Button\" />)\n  )\n  .add(\n    'Comments from component declaration',\n    withInfo(\n      'Comments above the component declaration should be extracted from the React component file itself and rendered below the Info Addon heading'\n    )(() => <BaseButton label=\"Button\" />)\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Switching with Data Attributes in Storybook\nDESCRIPTION: Diff showing how to use the withThemeByDataAttribute decorator to enable switching between light and dark modes using data attributes in the .storybook/preview.js file. This is useful when Tailwind is configured to use data attributes for theme toggling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import { Preview } from '@storybook/your-renderer';\n+import { Preview, Renderer } from '@storybook/your-renderer';\n+import { withThemeByDataAttribute } from '@storybook/addon-themes';\n\nimport '../src/index.css';\n\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n+ decorators: [\n+  withThemeByDataAttribute<Renderer>({\n+    themes: {\n+      light: 'light',\n+      dark: 'dark',\n+    },\n+    defaultTheme: 'light',\n+    attributeName: 'data-theme',\n+  }),\n+ ]\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Adding IS_STORYBOOK global variable\nDESCRIPTION: Adds a new global variable IS_STORYBOOK to the Storybook core.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nCore: Add IS_STORYBOOK global variable\n```\n\n----------------------------------------\n\nTITLE: Installing MSW Addon Dependencies\nDESCRIPTION: Command to install MSW and the MSW Storybook addon using npm or yarn package managers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install msw msw-storybook-addon --save-dev\n# or\nyarn add --dev msw msw-storybook-addon\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest in Storybook build\nDESCRIPTION: Upgrade Jest to version 26 in the Storybook build process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nBuild: Upgrade jest to 26\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories for Solid in TypeScript\nDESCRIPTION: This snippet shows how to configure Storybook stories for a Solid Button component using standard TypeScript syntax. It imports types from 'storybook-solidjs' and defines metadata with explicit typing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from 'storybook-solidjs';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Text: Story = {\n  args: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Icons with IconGallery and IconItem in Storybook\nDESCRIPTION: This snippet demonstrates how to use IconGallery and IconItem blocks to document a set of icon components in a Storybook MDX file. It shows the basic structure and how to include multiple icons with their names.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, IconGallery, IconItem } from '@storybook/addon-docs/blocks';\n\nimport { Icon as IconExample } from './Icon';\n\n<Meta title=\"Iconography\" />\n\n# Iconography\n\n<IconGallery>\n  <IconItem name=\"mobile\">\n    <IconExample name=\"mobile\" />\n  </IconItem>\n  <IconItem name=\"user\">\n    <IconExample name=\"user\" />\n  </IconItem>\n  <IconItem name=\"browser\">\n    <IconExample name=\"browser\" />\n  </IconItem>\n  <IconItem name=\"component\">\n    <IconExample name=\"component\" />\n  </IconItem>\n  <IconItem name=\"calendar\">\n    <IconExample name=\"calendar\" />\n  </IconItem>\n   <IconItem name=\"paintbrush\">\n    <IconExample name=\"paintbrush\" />\n  </IconItem>\n   <IconItem name=\"add\">\n    <IconExample name=\"add\" />\n  </IconItem>\n  <IconItem name=\"subtract\">\n    <IconExample name=\"subtract\" />\n  </IconItem>\n   <IconItem name=\"document\">\n    <IconExample name=\"document\" />\n  </IconItem>\n  <IconItem name=\"graphline\">\n    <IconExample name=\"graphline\" />\n  </IconItem>\n</IconGallery>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Metadata in JavaScript\nDESCRIPTION: This JavaScript snippet defines metadata for a Storybook story, focusing on setting up interactive control properties for the component 'Example'. The metadata allows the 'value' property to be controlled interactively as a number within a specified range and step, optimizing for UI testing and visualization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    value: {\n      control: {\n        type: 'number',\n        min: 0,\n        max: 100,\n        step: 10,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Checkbox Component\nDESCRIPTION: This snippet demonstrates how to set up Storybook metadata for a React Checkbox component using JavaScript. It imports the Checkbox component and defines the default export with title and component properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CheckBox } from './Checkbox';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Design System/Atoms/Checkbox',\n  component: CheckBox,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Storybook Preset with webpack and Babel Configuration\nDESCRIPTION: This code exports a preset object with three async configuration hooks: managerWebpack for modifying the Storybook manager UI webpack config, webpackFinal for customizing the preview/stories webpack config, and babel for altering the Babel configuration. Each hook receives the current config and options, and must return the updated configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preset-full-config-object.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  managerWebpack: async (config, options) => {\n    // Update config here\n    return config;\n  },\n  webpackFinal: async (config, options) => {\n    return config;\n  },\n  babel: async (config, options) => {\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Variable with ESLint Directive\nDESCRIPTION: Creates a variable with an inline ESLint directive to disable linting for that specific line of code.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable-line */ const x = 0;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preset Entry Points in JavaScript\nDESCRIPTION: Exports a config function that takes an optional entry array parameter and merges it with the default parameters module path. This allows extending Storybook's configuration with custom preset values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-backgrounds-preset-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function config(entry = []) {\n  return [...entry, require.resolve('./defaultParameters')];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Router in Standard TypeScript Storybook Stories\nDESCRIPTION: A standard TypeScript implementation of a Storybook story with Next.js router configuration. This version uses the conventional TypeScript type annotation approach for defining the story's metadata and type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-override-in-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport RouterBasedComponent from './RouterBasedComponent';\n\nconst meta: Meta<typeof RouterBasedComponent> = {\n  component: RouterBasedComponent,\n};\nexport default meta;\n\ntype Story = StoryObj<typeof RouterBasedComponent>;\n\n// If you have the actions addon,\n// you can interact with the links and see the route change events there\nexport const Example: Story = {\n  parameters: {\n    nextjs: {\n      router: {\n        pathname: '/profile/[id]',\n        asPath: '/profile/1',\n        query: {\n          id: '1',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags for Common Framework using TypeScript\nDESCRIPTION: This snippet demonstrates how to set up story tags for a common framework component using TypeScript. It shows the configuration of default tags and how to add specific tags to individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., nextjs, vue3-vite)\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  /*\n   * All stories in this file will have these tags applied:\n   * - autodocs\n   * - dev (implicit default, inherited from preview)\n   * - test (implicit default, inherited from preview)\n   */\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const ExperimentalFeatureStory: Story = {\n  /*\n   * This particular story will have these tags applied:\n   * - experimental\n   * - autodocs (inherited from meta)\n   * - dev (inherited from meta)\n   * - test (inherited from meta)\n   */\n  tags: ['experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MSW Dependencies with NPM\nDESCRIPTION: Installs Mock Service Worker (MSW) and MSW Storybook addon using NPM package manager as development dependencies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-install.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install msw msw-storybook-addon --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Stories with Svelte CSF in TypeScript 4.9\nDESCRIPTION: Implements a Storybook story using Component Story Format (CSF) for a Svelte component with TypeScript 4.9. Uses the satisfies operator for type validation and demonstrates how to create a render function that processes arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport YourComponent from './YourComponent.svelte';\n\nconst meta = {\n  component: YourComponent,\n  //👇 Creates specific argTypes\n  argTypes: {\n    propertyA: {\n      options: ['Item One', 'Item Two', 'Item Three'],\n      control: { type: 'select' }, // Automatically inferred when 'options' is defined\n    },\n    propertyB: {\n      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],\n    },\n  },\n} satisfies Meta<typeof YourComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst someFunction = (valuePropertyA, valuePropertyB) => {\n  // Do some logic here\n};\n\nexport const ExampleStory: Story = {\n  render: (args) => {\n    //👇 Assigns the function result to a variable\n    const someFunctionResult = someFunction(args.propertyA, args.propertyB);\n    return {\n      Component: YourComponent,\n      props: {\n        ...args,\n        someProperty: someFunctionResult,\n      },\n    };\n  },\n  args: {\n    propertyA: 'Item One',\n    propertyB: 'Another Item One',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Snapshot Resolver\nDESCRIPTION: Implementation of a custom snapshot resolver to define how snapshot files are generated and resolved.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('stories', '__snapshots__') + snapshotExtension,\n\n  resolveTestPath: (snapshotPath, snapshotExtension) =>\n    snapshotPath\n      .replace('__snapshots__', 'stories')\n      .slice(0, -snapshotExtension.length),\n\n  testPathForConsistencyCheck: 'src/components/example.stories.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in TypeScript (Legacy)\nDESCRIPTION: Implements Button component stories using traditional TypeScript syntax. Defines type-safe story configuration using Meta and StoryObj types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-title.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<Button> = {\n  // Sets the name for the stories container\n  title: 'components/Button',\n  // The component name will be used if `title` is not set\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n// The story variable name will be used if `name` is not set\nconst Primary: Story = {\n  // Sets the name for that particular story\n  name: 'Primary',\n  args: {\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: LinkTo Component Implementation\nDESCRIPTION: Examples of using the LinkTo component for React with various configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport LinkTo from '@storybook/addon-links/react';\n\nexport default {\n  title: 'Link',\n};\n\nexport const first = () => <LinkTo story=\"second\">Go to Second</LinkTo>;\nexport const second = () => <LinkTo story=\"first\">Go to First</LinkTo>;\n```\n\n----------------------------------------\n\nTITLE: Angular Mock GraphQL Module Configuration\nDESCRIPTION: Configures Apollo Client options for Angular, setting up the HttpLink and InMemoryCache with specific fetch and error policies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { APOLLO_OPTIONS } from 'apollo-angular';\n\nimport { ApolloClientOptions, InMemoryCache } from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\n\nconst uri = 'https://your-graphql-endpoint';\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  return {\n    link: httpLink.create({ uri }),\n    cache: new InMemoryCache(),\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all',\n      },\n      query: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all',\n      },\n    },\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class MockGraphQLModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview in JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook's preview settings. It imports global CSS styles and exports a configuration object with parameters to customize the Storybook environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-import-global-styles.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '../src/styles/global.css';\n\nexport default {\n  parameters: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC in Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration example for customizing SWC in Storybook's main.js file. It exports a default configuration object that specifies the framework and includes a swc function to modify the default SWC configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/your-framework',\n    options: {},\n  },\n  swc: (config, options) => {\n    return {\n      ...config,\n      // Apply your custom SWC configuration\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Document Screen Component with Fetch\nDESCRIPTION: Example React component that fetches data from a REST API using the fetch API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nexport const DocumentScreen = () => {\n  const [status, setStatus] = React.useState('idle');\n  const [data, setData] = React.useState();\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      setStatus('loading');\n      try {\n        const response = await fetch('/document');\n        const data = await response.json();\n        setData(data);\n        setStatus('success');\n      } catch (error) {\n        setStatus('error');\n      }\n    };\n    fetchData();\n  }, []);\n\n  if (status === 'loading') {\n    return <p>Loading...</p>;\n  }\n  if (status === 'error') {\n    return <p>Error loading document</p>;\n  }\n  if (status === 'success') {\n    return <DocumentComponent data={data} />;\n  }\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Title Prefix in Storybook\nDESCRIPTION: Shows how to configure a title prefix for stories in Storybook's main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nmodule.exports = {\n  stories: [{ directory: '../src', titlePrefix: 'Custom' }]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing axe-playwright with yarn\nDESCRIPTION: This command installs the axe-playwright package as a development dependency using yarn. It's used for accessibility testing in Playwright-based projects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-axe-playwright.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev axe-playwright\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Toolbar Addon Component with React\nDESCRIPTION: Implements a toolbar addon component that toggles a global state parameter and refreshes the UI. Uses Storybook's addon API, manager API, and internal components to create an interactive toolbar button with an outline icon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-getchannel.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useCallback } from 'react';\nimport { OutlineIcon } from '@storybook/icons';\nimport { useGlobals } from 'storybook/manager-api';\nimport { addons } from 'storybook/preview-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { FORCE_RE_RENDER } from 'storybook/internal/core-events';\n\nconst ExampleToolbar = () => {\n  const [globals, updateGlobals] = useGlobals();\n\n  const isActive = globals['my-param-key'] || false;\n\n  // Function that will update the global value and trigger a UI refresh.\n  const refreshAndUpdateGlobal = () => {\n    updateGlobals({\n      ['my-param-key']: !isActive,\n    }),\n      // Invokes Storybook's addon API method (with the FORCE_RE_RENDER) event to trigger a UI refresh\n      addons.getChannel().emit(FORCE_RE_RENDER);\n  };\n\n  const toggleToolbarAddon = useCallback(() => refreshAndUpdateGlobal(), [isActive]);\n\n  return (\n    <IconButton\n      key=\"Example\"\n      active={isActive}\n      title=\"Show the toolbar addon\"\n      onClick={toggleToolbarAddon}\n    >\n      <OutlineIcon />\n    </IconButton>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Documentation Template in Storybook with MDX\nDESCRIPTION: This MDX template provides a structured layout for documenting Storybook components. It imports necessary blocks from Storybook's addon-docs and defines sections for displaying the component, its props, and variations. The Meta component includes the isTemplate property to indicate this is a reusable template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-mdx-template-with-prop.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Title, Primary, Controls, Stories } from '@storybook/addon-docs/blocks';\n\n{/*\n  * 👇 The isTemplate property is required to tell Storybook that this is a template\n  * See https://storybook.js.org/docs/api/doc-blocks/doc-block-meta\n  * to learn how to use\n*/}\n\n<Meta isTemplate />\n\n<Title />\n\n# Default implementation\n\n<Primary />\n\n## Inputs\n\nThe component accepts the following inputs (props):\n\n<Controls />\n\n---\n\n## Additional variations\n\nListed below are additional variations of the component.\n\n<Stories />\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters with TypeScript for Any Framework\nDESCRIPTION: Demonstrates a framework-agnostic approach to setting component parameters using TypeScript. Shows how to import the Meta type from a placeholder framework that should be replaced with the actual framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { Meta } from '@storybook/your-framework';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Vite Builder with TypeScript\nDESCRIPTION: Example of configuring the Storybook Vite builder using TypeScript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\nimport { mergeConfig } from 'vite';\n\nconst config: StorybookConfig = {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],\n  core: {\n    builder: '@storybook/builder-vite',\n  },\n  async viteFinal(config) {\n    return mergeConfig(config, {\n      // Add your configuration here\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Story with Click Action in React\nDESCRIPTION: Creates a story function that renders a Button component with click action tracking using Storybook's action function.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf-meta-var.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const text = () => (\n  <Button onClick={action(\"clicked\")}>Hello Button</Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Web Components Storybook Implementation\nDESCRIPTION: Demonstrates play function implementation specifically for Web Components, using both TypeScript and JavaScript variants. Shows how to work with custom elements in Storybook tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { userEvent, within } from 'storybook/test';\n\nconst meta: Meta = {\n  component: 'demo-my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const FirstStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');\n  },\n};\n\nexport const SecondStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await userEvent.type(canvas.getByTestId('other-element'), 'another value');\n  },\n};\n\nexport const CombinedStories: Story = {\n  play: async ({ context, canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    await FirstStory.play(context);\n    await SecondStory.play(context);\n    await userEvent.type(canvas.getByTestId('another-element'), 'random value');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Component Parameters in Svelte Using CSF JavaScript\nDESCRIPTION: Demonstrates component parameter configuration in Svelte using the Component Story Format (CSF) in JavaScript. The example sets the backgrounds parameter for the Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n  //👇 Creates specific parameters at the component level\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Controls in Common JavaScript Frameworks\nDESCRIPTION: This example shows how to implement conditional controls in JavaScript-based Storybook configurations for frameworks like React. It demonstrates various conditions for showing controls based on the existence, truthiness, or specific values of the 'parent' argument.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    parent: { control: 'select', options: ['one', 'two', 'three'] },\n\n    // 👇 Only shown when `parent` arg exists\n    parentExists: { if: { arg: 'parent', exists: true } },\n\n    // 👇 Only shown when `parent` arg does not exist\n    parentDoesNotExist: { if: { arg: 'parent', exists: false } },\n\n    // 👇 Only shown when `parent` arg value is truthy\n    parentIsTruthy: { if: { arg: 'parent' } },\n    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },\n\n    // 👇 Only shown when `parent` arg value is not truthy\n    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },\n\n    // 👇 Only shown when `parent` arg value is 'three'\n    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },\n\n    // 👇 Only shown when `parent` arg value is not 'three'\n    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },\n\n    // Each of the above can also be conditional on the value of a globalType, e.g.:\n\n    // 👇 Only shown when `theme` global exists\n    parentExists: { if: { global: 'theme', exists: true } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Backer Information in HTML\nDESCRIPTION: This HTML code snippet displays a grid of backer avatars using OpenCollective's API. It limits the display to 80 backers and sets specific dimensions for the avatars.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/storybook\"><img src=\"https://opencollective.com/storybook/tiers/backers.svg?limit=80&button=false&avatarHeight=46&width=750\"></a>\n```\n\n----------------------------------------\n\nTITLE: Using Subpath Imports in Next.js Components\nDESCRIPTION: Example of using subpath imports in a Next.js component after configuring them in package.json. Shows importing a component and CSS module using the '#' prefix.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport Button from '#components/button';\nimport styles from '#styles/HomePage.module.css';\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1 className={styles.title}>Hello World</h1>\n      <Button />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata with Deprecated defaultValue (Angular/TS)\nDESCRIPTION: This TypeScript snippet defines the metadata (`Meta`) for an Angular component `Example` in a Storybook story file (`Example.stories.ts`). It shows the deprecated method of setting a default value for the `value` arg using `argTypes.value.defaultValue` and contrasts it with the recommended approach using the top-level `args` property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts filename=\"Example.stories.ts\" renderer=\"angular\" language=\"ts\"\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    value: {\n      // ⛔️ Deprecated, do not use\n      defaultValue: 0,\n    },\n  },\n  // ✅ Do this instead\n  args: {\n    value: 0,\n  },\n};\n\nexport default meta;\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Component-Level Layout Parameter in Storybook\nDESCRIPTION: Applies a layout parameter to a specific component, making all of its stories use that layout configuration in the Canvas tab.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-layout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Example/Button',\n  component: Button,\n  parameters: {\n    layout: 'fullscreen',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Stories with CSF and JavaScript\nDESCRIPTION: This snippet demonstrates defining a Storybook story for a Svelte component using JavaScript and Component Story Format (CSF). It includes accessibility parameters, rules, and a global setup for manual checks. The code depends on Storybook's Svelte CSF integration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n    parameters: {\n      a11y: {\n        // Optional selector to inspect\n        element: 'body',\n        config: {\n          rules: [\n            {\n              // The autocomplete rule will not run based on the CSS selector provided\n              id: 'autocomplete-valid',\n              selector: '*:not([autocomplete=\"nope\"])',\n            },\n            {\n              // Setting the enabled option to false will disable checks for this particular rule on all stories.\n              id: 'image-alt',\n              enabled: false,\n            },\n          ],\n        },\n        /*\n         * Axe's options parameter\n         * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter\n         * to learn more about the available options.\n        */\n        options: {}\n      },\n    },\n    globals: {\n      a11y: {\n        manual: true,\n      },\n    },\n  });\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Storybook Preview Body in TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the Storybook preview body in TypeScript. It imports the StorybookConfig type and conditionally adds an analytics script based on an environment variable.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  previewBody: (body) => `\n    ${body}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Story-Level Global Values\nDESCRIPTION: Demonstrates how to override global values for specific stories by setting the globals annotation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Button = {\n  parameters: {\n    globals: {\n      backgrounds: { value: \"gray\" },\n    },\n  },\n};\n\nexport const OnDark = {\n  parameters: {\n    globals: {\n      backgrounds: { value: \"dark\" },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Typeset Block in Storybook MDX\nDESCRIPTION: This snippet demonstrates how to use the Typeset block in a Storybook MDX file to document typography. It includes importing necessary components, defining typography styles, and rendering the Typeset block with various font sizes and weights.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-typeset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md title=\"Typography.mdx\"\nimport { Meta, Typeset } from '@storybook/addon-docs/blocks';\n\n<Meta title=\"Typography\" />\n\nexport const typography = {\n  type: {\n    primary: '\"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n  },\n  weight: {\n    regular: '400',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n  size: {\n    s1: 12,\n    s2: 14,\n    s3: 16,\n    m1: 20,\n    m2: 24,\n    m3: 28,\n    l1: 32,\n    l2: 40,\n    l3: 48,\n  },\n};\n\nexport const SampleText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';\n\n# Typography\n\n**Font:** Nunito Sans\n\n**Weights:** 400(regular), 700(bold), 800(extrabold), 900(black)\n\n<Typeset\n  fontSizes={[\n    Number(typography.size.s1),\n    Number(typography.size.s2),\n    Number(typography.size.s3),\n    Number(typography.size.m1),\n    Number(typography.size.m2),\n    Number(typography.size.m3),\n    Number(typography.size.l1),\n    Number(typography.size.l2),\n    Number(typography.size.l3),\n  ]}\n  fontWeight={typography.weight.black}\n  sampleText={SampleText}\n  fontFamily={typography.type.primary}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Updating jest-preset-angular reference in Storybook\nDESCRIPTION: Change the reference for jest-preset-angular setupJest file as per migration guide.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nChange reference for jest-preset-angular/build/setupJest as per migration guide\n```\n\n----------------------------------------\n\nTITLE: Storybook Version Release Notes\nDESCRIPTION: Comprehensive changelog documenting updates, improvements, bug fixes and new features across multiple Storybook releases from version 9.0.0-alpha.2 down to 8.6.0-beta.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.prerelease.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.0.0-alpha.2\n\n- AutoBlocker: Add major version upgrade blocker\n- CLI: Add index command / API\n- CSF Factories: Align addon-essentials import with other addons\n- Core: Move @storybook/instrumenter into core\n- Core: Support TS3.8+ again\n[...additional changes truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Addon Measure via npm\nDESCRIPTION: Command to install the Storybook Addon Measure package using npm. This step is necessary if the addon is not already included in your Storybook setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/measure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @storybook/addon-measure\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework in JavaScript\nDESCRIPTION: This JavaScript snippet exports a default configuration object for Storybook. It specifies the framework to use and the paths to the story files. Additionally, it includes a build setting that disables tree shaking. The placeholder \"your-framework\" should be replaced with the actual framework being used. Expected inputs include valid paths to story files, and the output is an updated Storybook configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-treeshaking.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  build: {\n    test: {\n      disableTreeShaking: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating A11y Addon Configuration in JavaScript\nDESCRIPTION: Demonstrates how to update the A11y addon configuration from the deprecated 'manual' parameter to the new 'globals' approach in Storybook 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way (no longer works)\nexport const MyStory = {\n  parameters: {\n    a11y: {\n      manual: true\n    }\n  }\n};\n\n// New way\nexport const MyStory = {\n  parameters: {\n    a11y: {\n      // other a11y parameters\n    }\n  },\n  globals: {\n    a11y: {\n      manual: true\n    }\n  }\n};\n\n// To enable manual mode globally, use .storybook/preview.js:\nexport const initialGlobals = {\n  a11y: {\n    manual: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Vue Component Story Implementation\nDESCRIPTION: Vue 3 Storybook story implementations showing both JavaScript and TypeScript approaches for rendering an image component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const WithAnImage: Story = {\n  render: () => ({\n    template: '<img src=\"image.png\" alt=\"my image\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story-Level ArgTypes Matching for Button Actions\nDESCRIPTION: Demonstrates how to apply the argTypesRegex parameter at the story level to match specific event handler patterns. This provides more granular control over which argTypes generate actions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = {\n  parameters: {\n    actions: {\n      argTypesRegex: '^on.*',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Documentation in MDX\nDESCRIPTION: Sets up the documentation page for a Button component using Storybook's MDX format. Demonstrates both documentation-only and component documentation page setups with story imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-title.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs/blocks';\n\n{/* 👇 Documentation-only page */}\n\n<Meta title=\"Documentation\" />\n\n{/* 👇 Component documentation page */}\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Story of={ButtonStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Configuring React Component Parsing in Storybook\nDESCRIPTION: Sets the library used for parsing React components in Storybook, choosing between react-docgen and react-docgen-typescript.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    reactDocgen: 'react-docgen-typescript'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Chromatic addon with pnpm\nDESCRIPTION: Command to add the Chromatic integration to a Storybook project using pnpm as the package manager. Uses pnpm dlx to execute the Storybook CLI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-storybook-add.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@latest add @chromatic-com/storybook\n```\n\n----------------------------------------\n\nTITLE: Creating Async Storybook Story for Svelte Component using CSF (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a Storybook story for a Svelte component using the Component Story Format (CSF) with TypeScript. It defines an async play function that simulates user interactions and uses Storybook's testing utilities for DOM manipulation. The story showcases typing, clicking, and hovering actions on various elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport { userEvent, waitFor, within } from 'storybook/test';\n\nimport MyComponent from './MyComponent.svelte';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ExampleAsyncStory: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    const Input = canvas.getByLabelText('Username', {\n      selector: 'input',\n    });\n\n    await userEvent.type(Input, 'WrongInput', {\n      delay: 100,\n    });\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    const Submit = canvas.getByRole('button');\n    await userEvent.click(Submit);\n\n    await waitFor(async () => {\n      await userEvent.hover(canvas.getByTestId('error'));\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Meta in JavaScript (Standard CSF)\nDESCRIPTION: Sets up a JavaScript Storybook configuration for a Svelte component, removing the 'foo' control from the UI by using 'argTypes'. Requires the Svelte component import. Defines an export default object with fields for the component and argTypes. Suitable for Svelte projects using plain JavaScript and standard Storybook CSF.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport YourComponent from './YourComponent.svelte';\n\nexport default {\n  component: YourComponent,\n  argTypes: {\n    // foo is the property we want to remove from the UI\n    foo: {\n      control: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping Primitive Args to Complex Values in Storybook (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'mapping' property to convert primitive arg values to complex objects, and how to specify custom labels for control inputs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst someComplexObject = {\n  /* ... */\n};\n\nexport const MyStory = (args) => {\n  /* ... */\n};\nMyStory.args = {\n  someArg: 'value1',\n};\nMyStory.argTypes = {\n  someArg: {\n    options: ['value1', 'value2', 'value3'],\n    mapping: {\n      value1: someComplexObject,\n      value2: 'value2',\n      value3: 'value3',\n    },\n    control: {\n      type: 'select',\n      labels: {\n        value1: 'Value One',\n        value2: 'Value Two',\n        value3: 'Value Three',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Storybook Story with Toolbar in JavaScript and HTML\nDESCRIPTION: This snippet demonstrates how to embed a Storybook story with the toolbar using both oEmbed and iframe methods. It includes the URL for oEmbed and the HTML code for iframe embedding.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/embed.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/?path=/story/shadowboxcta--default\n\n// iframe embed\n<iframe\n  src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/?path=/story/shadowboxcta--default&full=1&shortcuts=false&singleStory=true\"\n  width=\"800\"\n  height=\"260\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: React Button Story with JavaScript\nDESCRIPTION: Implements a Button component story for React using JavaScript and CSF 3 format. Creates a primary button story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default { component: Button };\n\nexport const Primary = { args: { primary: true } };\n```\n\n----------------------------------------\n\nTITLE: Customizing Webpack Configuration for Storybook in JavaScript\nDESCRIPTION: This function modifies the webpack configuration for Storybook. It applies presets to get the webpack version and instance, logs this information, and returns the modified config. The function is asynchronous and uses ES6 syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-versioned-webpack.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function webpackFinal(config, { presets }) {\n  const version = await presets.apply('webpackVersion');\n  const instance = (await presets.apply('webpackInstance'))?.default;\n\n  logger.info(`=> Running in webpack ${version}: ${instance}`);\n  return config;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Sass/Scss Stylesheets in Storybook Preview\nDESCRIPTION: This snippet shows how to import global Sass/Scss stylesheets in the Storybook preview configuration file. This allows the styles to be applied to all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js|ts\nimport '../styles/globals.scss';\n```\n\n----------------------------------------\n\nTITLE: Fixing React Version Issues in Storybook Vitest Addon\nDESCRIPTION: Example Vitest configuration that resolves the 'm.createRoot is not a function' error by providing an alias to ensure the correct React version is used when not using React 18.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  // ...\n  resolve: {\n    alias: {\n      \"@storybook/react-dom-shim\": \"@storybook/react-dom-shim/dist/react-16\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Storybook ArgTypes using Svelte CSF Addon (TypeScript 4.9)\nDESCRIPTION: Defines Storybook metadata within a Svelte component file (`.svelte`) using the `@storybook/addon-svelte-csf` helper (`defineMeta`) and TypeScript 4.9 syntax within the `<script module>` block. This hides the 'foo' property from the args table by configuring `argTypes`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n```svelte filename=\"YourComponent.stories.svelte\" renderer=\"svelte\" language=\"ts-4-9\" tabTitle=\"Svelte CSF\"\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import YourComponent from './YourComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: YourComponent,\n    argTypes: {\n      // foo is the property we want to remove from the UI\n      foo: {\n        table: {\n          disable: true,\n        },\n      },\n    },\n  });\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Doc Block Imports in Storybook 6.3\nDESCRIPTION: Example of updating doc block imports from @storybook/addon-docs/blocks to @storybook/addon-docs in Storybook 6.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nimport { Meta, Story } from \"@storybook/addon-docs/blocks\";\n\n// after\nimport { Meta, Story } from \"@storybook/addon-docs\";\n```\n\n----------------------------------------\n\nTITLE: Composing a Single Story with composeStory in Storybook Tests\nDESCRIPTION: This snippet shows how to use composeStory to import and compose a single specific story from a stories file for testing. It provides options to add decorators, override global types, and parameters for the individual story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/override-compose-story-test.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\n\nconst ValidForm = composeStory(ValidFormStory, Meta, {\n  decorators: [\n    // Decorators defined here will be added to this story\n  ],\n  globalTypes: {\n    // Override globals for this story\n  },\n  parameters: {\n    // Override parameters for this story\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mock File for Session Module\nDESCRIPTION: Example of creating a mock file for a session module that re-exports original functionality and uses fn utility for mocking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// lib/session.mock.ts\nimport { fn } from 'storybook/test';\n\nimport * as actual from './session';\n\nexport const getUserFromSession = fn(actual.getUserFromSession).mockName('getUserFromSession');\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Providers in Angular Storybook\nDESCRIPTION: This snippet demonstrates how to configure application-wide providers in Angular Storybook 7.0 using the applicationConfig decorator. It shows how to import and use BrowserAnimationsModule and other modules with providers.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { importProvidersFrom } from \"@angular/core\";\nimport { applicationConfig, Meta, StoryObj } from \"@storybook/angular\";\nimport { ExampleComponent } from \"./example.component\";\n\nconst meta: Meta = {\n  title: \"Example\",\n  component: ExampleComponent,\n  decorators: [\n    // Define application-wide providers with the applicationConfig decorator\n    applicationConfig({\n      providers: [\n        importProvidersFrom(BrowserAnimationsModule),\n        // Extract all providers (and nested ones) from a ModuleWithProviders\n        importProvidersFrom(SomeOtherModule.forRoot()),\n      ],\n    }),\n  ],\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof ExampleComponent>;\n\nexport const Default: Story = {\n  render: () => ({\n    // Define application-wide providers directly in the render function\n    applicationConfig: {\n      providers: [importProvidersFrom(BrowserAnimationsModule)],\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Component Description with MDX\nDESCRIPTION: Documentation for a Checkbox UI component written in MDX format for Storybook. It explains that checkboxes are square boxes that can be activated or deactivated, and provides guidance on using checkboxes to select multiple options from a list.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-definition.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked.\n\nUse checkboxes to select one or more options from a list of choices.\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with Yarn Watch Mode\nDESCRIPTION: Command to run Storybook tests in watch mode using yarn package manager. The --watch flag enables continuous test execution on file changes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-flags.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook --watch\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Stories in JavaScript\nDESCRIPTION: This code snippet imports all exports from the 'A.stories' file, which likely contains Storybook stories for a component named 'A'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/SecondMetaOf.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as AStories from '../A.stories';\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Layout in JavaScript (Common Framework)\nDESCRIPTION: Creates a Button component story configuration in JavaScript with centered layout. This example works for both .js and .jsx files and sets the layout parameter to 'centered' for all stories in the file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  // Sets the layout parameter component wide.\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Addon with Global State Management\nDESCRIPTION: Shows how to create a Storybook addon that consumes and displays global state using the manager API.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGlobals } from \"@storybook/manager-api\";\n\nexport const ThemePanel = () => {\n  const [globals] = useGlobals();\n  return <div>Current theme: {globals.theme}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Input Object for Instrumentation\nDESCRIPTION: Shows the structure of an input object that would result in a specific call path when instrumented.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ userEvent: { keyboard: function(text) { ... } } }\n```\n\n----------------------------------------\n\nTITLE: Attaching MDX File to CSF File in Storybook 7.0\nDESCRIPTION: Demonstrates how to attach an MDX file to a CSF file using the Meta and Story blocks in Storybook 7.0. This approach is used to document stories defined in a separate CSF file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_88\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Story } from \"@storybook/blocks\";\nimport * as ComponentStories from \"./some-component.stories\";\n\n<Meta of={ComponentStories} />\n\n<Story of={ComponentStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Manager Sidebar in JavaScript\nDESCRIPTION: This snippet imports the addons API from Storybook and uses it to set the manager configuration. It specifically sets the 'showRoots' option in the sidebar to false, which hides root nodes in the story hierarchy.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-disable-roots.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from 'storybook/manager-api';\n\naddons.setConfig({\n  sidebar: {\n    showRoots: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with JavaScript\nDESCRIPTION: Implements basic Button component story configuration in JavaScript without type annotations. Includes component reference and accessibility parameter setup.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-remove.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    // 👇 Remove this once all stories pass accessibility tests\n    // a11y: { test: 'todo' },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Google Fonts Response\nDESCRIPTION: JavaScript module for mocking Google Fonts API responses in testing environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// mocked-google-fonts.js\n//👇 Mocked responses of google fonts with the URL as the key\nmodule.exports = {\n  'https://fonts.googleapis.com/css?family=Inter:wght@400;500;600;800&display=block': `\n    /* cyrillic-ext */\n    @font-face {\n      font-family: 'Inter';\n      font-style: normal;\n      font-weight: 400;\n      font-display: block;\n      src: url(https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZJhiJ-Ek-_EeAmM.woff2) format('woff2');\n      unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n    }\n    /* more font declarations go here */\n    /* latin */\n    @font-face {\n      font-family: 'Inter';\n      font-style: normal;\n      font-weight: 400;\n      font-display: block;\n      src: url(https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiJ-Ek-_EeA.woff2) format('woff2');\n      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n    }`\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Stories in TypeScript for Storybook\nDESCRIPTION: This snippet shows how to create a Storybook story for a Checkbox component using TypeScript. It demonstrates type annotations for Meta and Story objects, and uses the useArgs hook for managing component state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-args-within-story.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StoryObj, Meta } from '@storybook/react';\nimport { useArgs } from 'storybook/preview-api';\nimport { Checkbox } from './checkbox';\n\nconst meta: Meta<typeof Checkbox> = {\n  title: 'Inputs/Checkbox',\n  component: Checkbox,\n};\nexport default meta;\n\ntype Story = StoryObj<typeof Checkbox>;\n\nexport const Example: Story = {\n  args: {\n    isChecked: false,\n    label: 'Try Me!',\n  },\n  /**\n   * 👇 To avoid linting issues, it is recommended to use a function with a capitalized name.\n   * If you are not concerned with linting, you may use an arrow function.\n   */\n  render: function Render(args) {\n    const [{ isChecked }, updateArgs] = useArgs();\n\n    function onChange() {\n      updateArgs({ isChecked: !isChecked });\n    }\n\n    return <Checkbox {...args} onChange={onChange} isChecked={isChecked} />;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Package with Builder Options in main.js\nDESCRIPTION: Example showing how to configure framework options and builder settings in Storybook's main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: \"@storybook/react-webpack5\",\n    options: { builder: { lazyCompilation: true } }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Annotations in JavaScript\nDESCRIPTION: Defines a previewAnnotations function that appends the local preview module to the entry array. This is used by Storybook to extend the preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport const previewAnnotations = (entry = [], options) => {\n  return [...entry, require.resolve('./dist/preview')];\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Explicit Compodoc Usage in package.json for Angular Storybook\nDESCRIPTION: Demonstrates how to update package.json scripts to remove explicit Compodoc usage, as it's now built into @storybook/angular. This simplifies the Storybook startup and build process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"docs:json\": \"compodoc -p tsconfig.json -e json -d ./documentation\",\n    \"storybook\": \"npm run docs:json && start-storybook -p 6006\",\n    \"build-storybook\": \"npm run docs:json && build-storybook\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"storybook\": \"ng run <project-name>:storybook\",\n    \"build-storybook\": \"ng run <project-name>:build-storybook\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Margin Decorator in Svelte 5 with JavaScript\nDESCRIPTION: Svelte 5 version using the new props() syntax and render function for content projection. Demonstrates the new runes-based approach to component props.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/margindecorator.md#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { children } = $props();\n</script>\n\n<div>\n  {@render children()}\n</div>\n\n<style>\n  div {\n    margin: 3em;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Tags in Angular with TypeScript\nDESCRIPTION: This snippet shows how to set up story tags for an Angular component using TypeScript. It demonstrates applying a global 'stable' tag to all stories and overriding it for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './Button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n  // 👇 Applies to all stories in this file\n  tags: ['stable'],\n};\n\nexport default meta;\ntype Story = StoryObj<Button>;\n\nexport const ExperimentalFeatureStory: Story = {\n  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag\n  tags: ['!stable', 'experimental'],\n};\n```\n\n----------------------------------------\n\nTITLE: StoriesSpecifier Type Definition for Storybook Configuration\nDESCRIPTION: Type definition of the StoriesSpecifier object used for configuring story loading, including directory, files, and titlePrefix properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  directory: string;\n  files?: string;\n  titlePrefix?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Stories for Svelte using TypeScript 4.9 CSF\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Svelte Checkbox component using TypeScript 4.9 and Component Story Format (CSF). It uses the 'satisfies' operator for type checking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/svelte';\n\nimport Checkbox from './Checkbox.svelte';\n\nconst meta = {\n  component: Checkbox,\n} satisfies Meta<typeof Checkbox>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Unchecked: Story = {\n  args: {\n    label: 'Unchecked',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Index with Yarn\nDESCRIPTION: Executes the test-storybook command with Yarn package manager to generate index JSON file\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-with-index-json.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook --index-json\n```\n\n----------------------------------------\n\nTITLE: Storybook Highlight Module API Exports\nDESCRIPTION: Example showing the available exports from the Storybook highlight module.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for Next Steps After Storybook Installation\nDESCRIPTION: This code snippet uses conditional rendering to provide different instructions for the next steps after installing Storybook, based on the framework being used. It differentiates between React and other frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<IfRenderer renderer=\"react\">\n  Now that you have successfully installed Storybook and understood how it works, let's continue where you left off in the [setup wizard](#run-the-setup-wizard) and delve deeper into writing stories.\n</IfRenderer>\n\n<IfRenderer renderer={['angular', 'vue', 'web-components', 'ember', 'html', 'svelte', 'preact', 'qwik', 'solid' ]}>\n  Now that you installed Storybook successfully, let's take a look at a story that was written for us.\n</IfRenderer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Preact Babel Plugins\nDESCRIPTION: Babel configuration for Preact projects to enable JSX transformation and TypeScript support\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-jsx\", {\n        \"importSource\": \"preact\",\n        \"runtime\": \"automatic\"\n      }\n    ],\n    \"@babel/preset-typescript\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Storybook ESLint Rules in Flat Config Format (JavaScript)\nDESCRIPTION: Shows how to override or disable specific Storybook ESLint rules using the flat config style. This allows for customization of linting rules for Storybook files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport storybook from 'eslint-plugin-storybook';\n\nexport default [\n  // ...\n\n  ...storybook.configs['flat/recommended'],\n  {\n    // 👇 This should match the `stories` property in .storybook/main.js|ts\n    files: ['**/*.stories.@(ts|tsx|js|jsx|mjs|cjs)'],\n    rules: {\n      // 👇 Enable this rule\n      'storybook/csf-component': 'error',\n      // 👇 Disable this rule\n      'storybook/default-exports': 'off',\n    },\n  },\n\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Themes in TypeScript\nDESCRIPTION: Standard TypeScript implementation for Storybook preview configuration with theme switching functionality. Includes type annotations for Preview and Renderer interfaces.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-jsx-provider-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Preview, Renderer } from '@storybook/your-renderer';\nimport { withThemeFromJSXProvider } from '@storybook/addon-themes';\n\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from '../src/themes';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  }\n`;\n\nconst preview: Preview = {\n  decorators: [\n    withThemeFromJSXProvider<Renderer>({\n      themes: {\n        light: lightTheme,\n        dark: darkTheme,\n      },\n      defaultTheme: 'light',\n      Provider: ThemeProvider,\n      GlobalStyles,\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Registering JSX Decorator for Dynamic Source Rendering\nDESCRIPTION: Code snippet showing how to register the jsxDecorator as a global decorator to enable dynamic source rendering for all stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { jsxDecorator } from './jsxDecorator';\n\nexport const decorators = [jsxDecorator];\n```\n\n----------------------------------------\n\nTITLE: Importing Components in TypeScript 4.9+ Storybook Stories\nDESCRIPTION: Shows how to properly import components in TypeScript 4.9+ Storybook stories using the satisfies operator. This approach ensures type safety while following the best practice of importing components directly from their source files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-fix-imports-autodocs-monorepo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\n// ❌ Don't use the package's index file to import the component.\n// import { MyComponent } from '@component-package';\n\n// ✅ Use the component's export to import it directly.\nimport { MyComponent } from '@component-package/src/MyComponent';\n\nconst meta = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'MyComponent',\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Metadata in package.json\nDESCRIPTION: Defines the core module metadata for a Storybook addon, including export paths, file inclusions, dependencies, and bundler configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"node\": \"./dist/index.js\",\n      \"require\": \"./dist/index.js\",\n      \"import\": \"./dist/index.mjs\"\n    },\n    \"./manager\": \"./dist/manager.mjs\",\n    \"./preview\": \"./dist/preview.mjs\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\"dist/**/*\", \"README.md\", \"*.js\", \"*.d.ts\"],\n  \"devDependencies\": {\n    \"@storybook/blocks\": \"^9.0.0\",\n    \"storybook\": \"^9.0.0\"\n  },\n  \"bundler\": {\n    \"exportEntries\": [\"src/index.ts\"],\n    \"managerEntries\": [\"src/manager.ts\"],\n    \"previewEntries\": [\"src/preview.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize MSW with Yarn\nDESCRIPTION: Initializes the Mock Service Worker (MSW) service worker files in the public directory using Yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-generate-service-worker.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx msw init public/\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Manager APIs\nDESCRIPTION: Demonstrates importing essential Storybook manager APIs including the addons registry and useStorybookApi hook. These imports are typically used when developing Storybook addons and manager applications.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-imports.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from 'storybook/preview-api';\n\nimport { useStorybookApi } from 'storybook/manager-api';\n```\n\n----------------------------------------\n\nTITLE: Reanimated Configuration Example\nDESCRIPTION: Example configuration for integrating React Native Reanimated with Storybook React Native Web.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst main: StorybookConfig = {\n  framework: {\n    name: \"@storybook/react-native-web-vite\",\n    options: {\n      pluginReactOptions: {\n        babel: {\n          plugins: [\n            \"@babel/plugin-proposal-export-namespace-from\",\n            \"react-native-reanimated/plugin\",\n          ],\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Storybook Story with JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a Storybook story for a Svelte Page component using JavaScript. It imports the component and configures the story, disabling auto-generated documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Page from './Page.svelte';\n\nexport default {\n  component: Page,\n  // 👇 Disable auto-generated documentation for this component\n  tags: ['!autodocs'],\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Storybook Documentation in Markdown\nDESCRIPTION: Provides a title and brief content for the documentation page using Markdown syntax within the Storybook environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingDefaultName.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# Docs with of\n\nhello docs\n```\n\n----------------------------------------\n\nTITLE: Adding Function Parameters to Storybook Stories\nDESCRIPTION: Shows how to add function parameters to a story, which in this case sets up an event listener when the story is rendered.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WithAddFunctionParameters = () => null\nWithAddFunctionParameters.parameters = {\n  foobar: () => {\n    document.addEventListener('foo', () => console.log('bar'))\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with yarn\nDESCRIPTION: Command to initialize Storybook version 8.2 using yarn package manager. This uses yarn dlx to execute the Storybook init command without requiring a global installation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command-custom-version.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx storybook@8.2 init\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with Coverage using yarn\nDESCRIPTION: This command executes Storybook tests with coverage enabled using yarn. It runs the 'test-storybook' script with the '--coverage' flag to generate test coverage reports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-with-coverage.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook --coverage\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Styles in Storybook\nDESCRIPTION: Example showing how to customize the style of highlighted elements by providing color and style properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from '@storybook/preview-api';\nimport { HIGHLIGHT } from '@storybook/addon-highlight';\n\nexport const MyStory = () => {\n  const emit = useChannel({});\n  \n  emit(HIGHLIGHT, {\n    elements: ['button'],\n    color: 'blue',\n    style: 'dashed'\n  });\n  \n  return <Button>Click me</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Object Structure\nDESCRIPTION: Demonstrates creating a JavaScript object literal containing a nested object, array, and null value. Shows different types of data structures and value types that can be stored in a JS object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-args-url-params-converted.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  obj: { key: 'val' },\n  arr: ['one', 'two'],\n  nil: null\n}\n```\n\n----------------------------------------\n\nTITLE: Play Function with Delay\nDESCRIPTION: Example showing how to implement delays in play functions for testing validation logic.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const WithDelayExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByLabelText('email');\n    await userEvent.type(emailInput, 'example@email', {\n      delay: 100,\n    });\n    await expect(emailInput.value).toBe('example@email');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Window Object in Storybook Preview HTML\nDESCRIPTION: This snippet adds a script to the preview HTML that sets the 'window' object as 'global'. This is useful for compatibility with libraries that expect a global scope, especially in environments where it might not be available by default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-jest-mock.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.global = window;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Background Options with Globals API in JavaScript\nDESCRIPTION: Sets up background color options in Storybook using the globals API options object syntax in JavaScript. This approach uses named keys instead of an array, defining the same Twitter and Facebook color presets.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-migrate-backgrounds-globals.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    backgrounds: {\n      options: {\n        twitter: { name: 'twitter', value: '#00aced' },\n        facebook: { name: 'facebook', value: '#3b5998' },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Static Build in Storybook Builder\nDESCRIPTION: Example of how a builder should implement the static build generation for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function buildStaticStorybook(options) {\n  const { outputDir, configDir } = options;\n\n  // Build Storybook\n  await build({\n    configDir,\n    outputDir,\n    mode: 'static',\n  });\n\n  // Copy static files\n  await fs.copy(path.join(configDir, 'public'), outputDir);\n\n  console.log('Storybook built successfully!');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Standard TypeScript Storybook Stories\nDESCRIPTION: Illustrates how to import components in standard TypeScript Storybook stories using type annotations. This approach provides type checking while following the best practice of importing components directly from their source files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-fix-imports-autodocs-monorepo.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the name of your framework\nimport type { Meta } from '@storybook/your-framework';\n\n// ❌ Don't use the package's index file to import the component.\n// import { MyComponent } from '@component-package';\n\n// ✅ Use the component's export to import it directly.\nimport { MyComponent } from '@component-package/src/MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'MyComponent',\n  component: MyComponent,\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Test Runner with Accessibility Testing in JavaScript\nDESCRIPTION: This snippet configures the Storybook test runner to perform accessibility testing using axe-playwright. It injects axe before each story visit and runs accessibility checks after each visit, generating a detailed HTML report.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { injectAxe, checkA11y } = require('axe-playwright');\n\n/*\n * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api\n * to learn more about the test-runner hooks API.\n */\nmodule.exports = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page) {\n    await checkA11y(page, 'body', {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Svelte with TypeScript 4.9 (Svelte CSF)\nDESCRIPTION: This snippet shows how to create Storybook stories for a Svelte Button component using Svelte CSF format with TypeScript 4.9. It uses the `defineMeta` function to set up the stories and defines primary and secondary variations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    component: Button,\n  });\n\n  const primaryArgs = {\n    primary: true,\n    label: 'Button',\n  }\n</script>\n\n<Story name=\"Primary\" args={primaryArgs} />\n\n<Story name=\"Secondary\" args={{...primaryArgs, primary: false}} />\n```\n\n----------------------------------------\n\nTITLE: Adding SWC Compiler Addon with yarn\nDESCRIPTION: This snippet shows how to add the Webpack5 Compiler SWC addon using yarn package manager. It employs `yarn dlx`, similar to `npx` or `pnpm dlx`, to execute the latest `storybook` package and include the `@storybook/addon-webpack5-compiler-swc`. Pre-requisite includes having yarn and a Storybook project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-swc-auto-install.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn dlx storybook@latest add @storybook/addon-webpack5-compiler-swc\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook for React Vite Using npm - Shell\nDESCRIPTION: This shell command installs the @storybook/react-vite package as a development dependency in a React project using the npm package manager. Prerequisites include an existing project set up with npm and Node.js installed. The command expects a package.json file in the project root and will update the file with the new dependency; it should be run in the terminal at the root of your JavaScript/React project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/react-vite\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Source Rendering with JSX Decorator\nDESCRIPTION: React implementation of dynamic source rendering that transforms story output into a JSX string and emits it through the Storybook channel for consumption by the Source doc block.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StoryContext, addons } from '@storybook/preview-api';\nimport { SNIPPET_RENDERED } from '../../shared';\n\nexport const jsxDecorator = (storyFn: any, context: StoryContext) => {\n  const story = storyFn();\n\n  // We only need to render JSX if the source block is actually going to\n  // consume it. Otherwise it's just slowing us down.\n  if (skipJsxRender(context)) {\n    return story;\n  }\n\n  const channel = addons.getChannel();\n\n  const options = {}; // retrieve from story parameters\n  const jsx = renderJsx(story, options);\n\n  const { id, args } = context;\n  channel.emit(SNIPPET_RENDERED, { id, args, source: jsx });\n\n  return story;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Svelte Storybook (TypeScript)\nDESCRIPTION: This TypeScript snippet configures a Svelte component story using '@storybook/addon-svelte-csf', outlining how to disable automatic accessibility checks on 'MyComponent'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"NonA11yStory\"\n  globals={{\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  }}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Testing Stories with Play Function in Jest\nDESCRIPTION: Example showing how to use portable stories API with Jest to test stories that include play functions. The code demonstrates setting project annotations, composing stories, and running tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-jest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setProjectAnnotations, composeStories } from '@storybook/react';\nimport * as stories from './Button.stories';\n\nsetProjectAnnotations(projectAnnotations);\nconst { SubmitForm } = composeStories(stories);\n\ntest('reuses the play function', async () => {\n  await SubmitForm.run();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Decorator Type with Generic Parameter in TypeScript\nDESCRIPTION: Shows how to use the Decorator type with a generic parameter to specify the expected arguments type in a Storybook decorator.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Decorator } from \"@storybook/react\";\nimport { LocaleProvider } from \"./locale\";\n\nconst withLocale: Decorator<{ locale: \"en\" | \"es\" }> = (Story, { args }) => (\n  <LocaleProvider lang={args.locale}>\n    <Story />\n  </LocaleProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Converting storiesOf to CSF 1 using pnpm\nDESCRIPTION: This command uses pnpm to run the Storybook migration tool, converting stories from storiesOf API to CSF 1 format. It targets TypeScript (.tsx) story files using the specified glob pattern.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-stories-of-to-csf.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Convert storiesOf to CSF 1\npnpm dlx storybook@latest migrate storiesof-to-csf --glob=\"**/*.stories.tsx\" --parser=tsx\n```\n\n----------------------------------------\n\nTITLE: Running Release with Yarn\nDESCRIPTION: Executes the release script using Yarn package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-release.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Resetting Highlighted Elements in Storybook\nDESCRIPTION: Example demonstrating how to clear highlighted elements using the RESET_HIGHLIGHT event.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from '@storybook/preview-api';\nimport { RESET_HIGHLIGHT } from '@storybook/addon-highlight';\n\nexport const MyStory = () => {\n  const emit = useChannel({});\n  \n  emit(RESET_HIGHLIGHT);\n  \n  return <Button>Click me</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Structuring JSON Data for Dynamic Story Generation in Storybook\nDESCRIPTION: Example JSON structure for dynamic story generation. This file defines components and their stories with associated arguments that will be processed by a custom indexer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Button\": {\n    \"componentPath\": \"./button/Button.jsx\",\n    \"stories\": {\n      \"Primary\": {\n        \"args\": {\n          \"primary\": true\n        },\n      \"Secondary\": {\n        \"args\": {\n          \"primary\": false\n        }\n      }\n    }\n  },\n  \"Dialog\": {\n    \"componentPath\": \"./dialog/Dialog.jsx\",\n    \"stories\": {\n      \"Closed\": {},\n      \"Open\": {\n        \"args\": {\n          \"isOpen\": true\n        }\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Path Aliases in Storybook\nDESCRIPTION: Shows how to configure import path aliases in Storybook, specifically for the '@' import path. This is useful for frameworks that provide default aliasing configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  webpackFinal: async (config) => {\n    // Update the webpack config to alias the @ import path\n    config.resolve.alias['@'] = path.resolve(__dirname, '../src');\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts and Stylesheets in Storybook Preview\nDESCRIPTION: This HTML snippet configures the preview head in Storybook to load a custom font from Google Fonts CDN and a local CSS file. It establishes preconnect links for performance optimization and includes the necessary stylesheet links.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-head-import-global-styles.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Loads a font from a CDN -->\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap\"\n  rel=\"stylesheet\"\n/>\n<!-- Load your CSS file -->\n<link rel=\"stylesheet\" href=\"path/to/your/styles.css\" />\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Coverage Configuration\nDESCRIPTION: Configuration settings in nyc config file to enable coverage testing for Vue 3 components\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extension\": [\n    \".js\",\n    \".cjs\",\n    \".mjs\",\n    \".ts\",\n    \".tsx\",\n    \".jsx\",\n    \".vue\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Story-Specific Layout Parameter in Storybook\nDESCRIPTION: Configures the layout parameter for an individual story, overriding any component or global layout settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-layout.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Decorators for React Button Component (TypeScript)\nDESCRIPTION: This snippet shows how to configure decorators for a React Button component in Storybook using TypeScript. It defines a decorator that wraps the story in a div with margin using JSX and includes type annotations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  component: Button,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Framework-Agnostic Component Story\nDESCRIPTION: Generic implementation of Storybook stories that can be used with any framework. Includes both TypeScript and JavaScript versions with test interaction examples.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/your-framework';\n\nimport { fireEvent, userEvent, within } from 'storybook/test';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const ClickExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByRole('button'));\n  },\n};\n\nexport const FireEventExample: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await fireEvent.click(canvas.getByTestId('data-testid'));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Stories in Storybook with JavaScript\nDESCRIPTION: A JavaScript configuration for Storybook that uses an async function to dynamically find and load story files. The configuration exports a default object with the framework specification and a stories property that combines the default story list with dynamically found stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-with-logic.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function findStories() {\n  // your custom logic returns a list of files\n}\n\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: async (list) => [\n    ...list,\n    // 👇 Add your found stories to the existing list of story files\n    ...(await findStories()),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet defines the Storybook configuration using JavaScript. It specifies the framework, story file patterns, addons, and build settings. The configuration includes essential addons and disables the accessibility addon during testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-disableaddons.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions', '@storybook/addon-a11y'],\n  build: {\n    test: {\n      disabledAddons: ['@storybook/addon-a11y'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Elements with Pseudo States in Storybook\nDESCRIPTION: Example showing how to apply different pseudo states to specific elements using CSS selectors. This allows precise control over which elements receive hover, focus, and active states.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/pseudo-states/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Buttons = () => (\n  <>\n    <Button id=\"one\">Hover</Button>\n    <Button id=\"two\">Hover focus</Button>\n    <Button id=\"three\">Hover focus active</Button>\n  </>\n)\nButtons.parameters = {\n  pseudo: {\n    hover: [\"#one\", \"#two\", \"#three\"],\n    focus: [\"#two\", \"#three\"],\n    active: \"#three\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Angular with npm\nDESCRIPTION: Command to install @storybook/angular as a dev dependency using npm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @storybook/angular\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility Testing in Storybook Preview (TypeScript)\nDESCRIPTION: This TypeScript code configures the Storybook preview to fail all accessibility tests when violations are found. It imports the Preview type from the renderer-specific Storybook package and sets the a11y parameter in the preview object.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-error-in-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-renderer';\n\nconst preview: Preview = {\n  // ...\n  parameters: {\n    // 👇 Fail all accessibility tests when violations are found\n    a11y: { test: 'error' },\n  },\n};\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Registering ArgTypes Enhancers in Vue Framework\nDESCRIPTION: Code snippet showing how to register an enhanceArgTypes function in a Vue framework-specific preview.js file to enable automatic ArgTables generation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { enhanceArgTypes } from './enhanceArgTypes';\n\nexport const argTypesEnhancers = [enhanceArgTypes];\n```\n\n----------------------------------------\n\nTITLE: Setting iFrame Height in MDX Story Components\nDESCRIPTION: MDX snippet demonstrating how to set the height attribute directly on a Story component, useful for components with fixed or sticky positioning.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_7\n\nLANGUAGE: md\nCODE:\n```\n<Story name='basic' height='400px'>{...}</Story>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Provider\nDESCRIPTION: Shows how to provide container components to a profile page in a Next.js application\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProfileHeader } from '../components/ProfileHeader';\nimport { ProfileTimeline } from '../components/ProfileTimeline';\n\nconst ProfilePage = () => (\n  <ProfilePageContext.Provider\n    value={{\n      ProfileHeader,\n      ProfileTimeline,\n    }}\n  >\n    <ProfilePage />\n  </ProfilePageContext.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Backgrounds for a Story\nDESCRIPTION: Configuration example showing how to disable the backgrounds feature for a specific story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MyStory = {\n  parameters: {\n    backgrounds: { disable: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in React Storybook (TypeScript)\nDESCRIPTION: This snippet configures a story for 'MyComponent' in TypeScript targeting React, with all automatic a11y checks turned off. It involves standard Storybook typings and uses '@storybook/react'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\n\nimport { MyComponent } from './MyComponent';\n\nconst meta: Meta<typeof MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof MyComponent>;\n\nexport const NonA11yStory: Story = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Provider in Storybook Preview\nDESCRIPTION: Setting up the theme provider with light and dark themes using withThemeFromJSXProvider decorator in preview.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/styled-components.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-import { Preview } from '@storybook/your-renderer';\n+import { Preview, Renderer } from '@storybook/your-renderer';\n+import { withThemeFromJSXProvider } from '@storybook/addon-themes';\n+import { ThemeProvider } from 'styled-components';\n+import { GlobalStyles, lightTheme, darkTheme } from '../src/themes'; // Import your custom theme configs\n\nconst preview: Preview = {\n  parameters: { /* ... */ },\n+ decorators: [\n+   withThemeFromJSXProvider<Renderer>({\n+     themes: {\n+       light: lightTheme,\n+       dark: darkTheme,\n+     },\n+     defaultTheme: 'light',\n+     Provider: ThemeProvider,\n+     GlobalStyles: GlobalStyles,\n+   }),\n+ ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Building Storybook with Test Flag using yarn\nDESCRIPTION: This command builds Storybook with the test flag using yarn. It runs the 'build-storybook' script with the '--test' option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-build-test-flag.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn build-storybook --test\n```\n\n----------------------------------------\n\nTITLE: Story with Renamed Export\nDESCRIPTION: Example of renaming a story export to provide a more descriptive name in the sidebar.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"button-story-rename-story.md\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TestBuildFlags Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for TestBuildFlags that specifies all available configuration options for optimizing Storybook's production build output. Includes flags for disabling various features like blocks, addons, MDX entries, autodocs, docgen, sourcemaps, and tree shaking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-build.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  disableBlocks?: boolean;\n  disabledAddons?: string[];\n  disableMDXEntries?: boolean;\n  disableAutoDocs?: boolean;\n  disableDocgen?: boolean;\n  disableSourcemaps?: boolean;\n  disableTreeShaking?: boolean;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview with Styled Components Decorator\nDESCRIPTION: This snippet demonstrates how to set up a decorator in the Storybook preview file to wrap all stories with a ThemeProvider from styled-components. It uses a mock theme object for demonstration purposes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nconst mockTheme = {\n  // Your theme properties\n};\n\nexport const decorators = [\n  (Story) => (\n    <ThemeProvider theme={mockTheme}>\n      <Story />\n    </ThemeProvider>\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Static Directories\nDESCRIPTION: Shows how to configure multiple static directories in Storybook's main configuration using a comma-separated list.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/images-and-assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  staticDirs: ['../public','../common-assets'],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Theme in Manager\nDESCRIPTION: Example of setting a dark theme for the main Storybook UI in the manager.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/theming.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// or a custom theme\nimport { themes } from '@storybook/theming';\nimport { addons } from '@storybook/manager-api';\n\naddons.setConfig({\n  theme: themes.dark,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Viewports in Storybook Preview\nDESCRIPTION: This snippet shows how to add custom viewport options (Kindle devices) to the default set of minimal viewports in the Storybook preview configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js\n\nimport { MINIMAL_VIEWPORTS } from '@storybook/addon-viewport';\n\nconst customViewports = {\n  kindleFire2: {\n    name: 'Kindle Fire 2',\n    styles: {\n      width: '600px',\n      height: '963px',\n    },\n  },\n  kindleFireHD: {\n    name: 'Kindle Fire HD',\n    styles: {\n      width: '533px',\n      height: '801px',\n    },\n  },\n};\n\nexport const parameters = {\n  viewport: {\n    viewports: {\n      ...MINIMAL_VIEWPORTS,\n      ...customViewports,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Addon for Optimized Builds in Storybook\nDESCRIPTION: This snippet shows how to adjust the Storybook main configuration file to allow the coverage addon to run with optimized builds. It uses the disabledAddons option to specify which addons should be excluded from the optimization process.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js|ts\nexport default {\n  // Your existing configuration\n  build: {\n    test: {\n      disabledAddons: ['@storybook/addon-docs', '@storybook/addon-controls'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Vue in JavaScript\nDESCRIPTION: This snippet demonstrates how to create stories for a Vue Button component using JavaScript. It configures the component metadata, sets parameters, and renders a basic button.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from './Button.vue';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    myAddon: {\n      data: 'This data is passed to the addon',\n    },\n  },\n};\n\nexport const Basic = {\n  render: () => ({\n    components: { Button },\n    template: '<Button label=\"Hello\" />',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component for Storybook in Web Components (TypeScript)\nDESCRIPTION: This snippet shows how to configure a Storybook setup for a Button component using Web Components in TypeScript. It imports the Meta type, uses the withActions decorator, and sets up parameters for action handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/web-components';\nimport { withActions } from 'storybook/actions/decorator';\n\nconst meta: Meta = {\n  component: 'demo-button',\n  parameters: {\n    actions: {\n      handles: ['mouseover', 'click .btn'],\n    },\n  },\n  decorators: [withActions],\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Provider with Story Parameter\nDESCRIPTION: This snippet demonstrates how to use the 'theme' parameter in a story to adjust the theme provided by the decorator. It allows for easy switching between light and dark themes for individual stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  title: 'Button',\n};\n\nexport const Default = {};\n\nexport const DarkTheme = {\n  parameters: {\n    theme: 'dark',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Tool Addon with Tab Visibility Control\nDESCRIPTION: Example demonstrating how to register a tool addon that conditionally displays based on the current tab. The addon uses the tabId parameter to determine when it should be visible.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_58\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addons, types } from \"@storybook/manager-api\";\n\naddons.register(\"my-addon\", () => {\n  addons.add(\"my-addon/tool\", {\n    type: types.TOOL,\n    title: \"My Addon\",\n    match: ({ tabId }) => tabId === \"my-addon/tab\",\n    render: () => <div>👀</div>,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with JavaScript for Common Frameworks\nDESCRIPTION: This code shows how to set up Storybook for a Button component using JavaScript in common frameworks like React, Vue, or Svelte. It imports the Button component and defines the metadata object with title and component properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Manager API Navigation Methods\nDESCRIPTION: Shows how to update the navigation to settings pages using the Storybook manager API. The navigateToSettingsPage method has been replaced with changeSettingsTab which no longer requires the /settings path prefix.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Component = () => {\n  const api = useStorybookApi();\n\n  const someHandler = () => {\n    // Old method: api.navigateToSettingsPage('/settings/about');\n    api.changeSettingsTab(\"about\"); // the /settings path is not necessary anymore\n  };\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing List Stories in Web Components with JavaScript\nDESCRIPTION: Creates a Storybook story for a Web Components List using JavaScript and Lit HTML. It imports the Unchecked story from MyListItem stories and uses Lit's html template tag for rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'lit';\n\n// 👇 Import the stories of MyListItem\nimport { Unchecked } from './MyListItem.stories';\n\nexport default {\n  title: 'MyList',\n  component: 'demo-my-list',\n};\n\nexport const OneItem = {\n  render: () => html` <List> ${Unchecked({ ...Unchecked.args })} </List> `,\n};\n```\n\n----------------------------------------\n\nTITLE: Running Release with PNPM\nDESCRIPTION: Executes the release script using PNPM package manager\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-release.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run release\n```\n\n----------------------------------------\n\nTITLE: Writing Button Stories in Component Story Format (CSF)\nDESCRIPTION: A JavaScript file that exports Button component stories in Component Story Format without a default export since documentation is handled in a separate MDX file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from './Button';\n\n// NOTE: no default export since `Button.stories.mdx` is the story file for `Button` now\n//\n// export default {\n//   title: 'Demo/Button',\n//   component: Button,\n// };\n\nexport const basic = () => <Button>Basic</Button>;\nbasic.parameters = {\n  foo: 'bar',\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Webpack Plugins to Storybook Configuration\nDESCRIPTION: Demonstrates how to add custom Webpack plugins while preserving Storybook's plugins. It shows the proper way to append to the plugins array rather than overwriting it.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nimport webpack from 'webpack';\n\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  webpackFinal: async (config) => {\n    // Add your plugin to the existing plugins array\n    config.plugins.push(\n      new webpack.DefinePlugin({\n        PRODUCTION: JSON.stringify(true),\n        VERSION: JSON.stringify('5fa3b9'),\n      })\n    );\n    \n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Manager for Custom Sidebar Labels\nDESCRIPTION: Storybook manager configuration to customize sidebar rendering for URL links. This setup integrates with the custom indexer to display links properly in the Storybook UI.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addons } from 'storybook/manager-api';\n\nimport SidebarLabelWrapper from './components/SidebarLabelWrapper.tsx';\n\naddons.setConfig({\n    sidebar: {\n      renderLabel: (item) => SidebarLabelWrapper({ item }),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: MDX Support in Storybook Builder\nDESCRIPTION: Example of how a builder should handle MDX files, interpreting Storybook's special extensions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { babel } from '@rollup/plugin-babel';\nimport remarkGfm from 'remark-gfm';\nimport { toId, storyNameFromExport } from '@storybook/csf';\n\n// MDX configuration\nconst mdxConfig = {\n  remarkPlugins: [remarkGfm],\n  compilers: [\n    createCompiler({\n      parser: parser,\n      pass: (options) => {\n        options.mdxStoryNameToKey = (name) =>\n          toId(options.mdxComponentMeta.id || options.mdxComponentMeta.title, storyNameFromExport(name));\n        return options;\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title\nDESCRIPTION: Sets the title for the Storybook documentation page using the Meta component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Configure your project\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Version Selection with Chromatic\nDESCRIPTION: This JSON snippet shows how to configure the storybook.url in package.json for automatic version selection when using Chromatic for publishing Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/package-composition.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storybook\": {\n    \"url\": \"https://master--xyz123.chromatic.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Source Code Visibility in Storybook Info Addon\nDESCRIPTION: Demonstrates how to hide the source code section in the Info addon. This can be used when you want to focus on the component API documentation rather than implementation details.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Options.source', module).add(\n  'Shows or hides Info Addon source',\n  withInfo({\n    text: 'The Info Addon source section should be hidden',\n    source: false, // Displays the source of story Component\n  })(() => <BaseButton label=\"Button\" />)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining composeStories Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the composeStories function, which takes CSF file exports and optional project annotations as parameters and returns a record of composed story functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  csfExports: CSF file exports,\n  projectAnnotations?: ProjectAnnotations\n) => Record<string, ComposedStoryFn>\n```\n\n----------------------------------------\n\nTITLE: Customizing Table of Contents in Storybook\nDESCRIPTION: Shows how to customize the table of contents feature with various options such as content selector, heading selector, and title.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = {\n  docs: {\n    toc: {\n      contentsSelector: '.sbdocs-content',\n      headingSelector: 'h1, h2, h3',\n      title: 'Table of Contents',\n      disable: false,\n      unsafeTocbotOptions: {\n        orderedList: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Description Block in MDX\nDESCRIPTION: Shows how to import and use the Description block with a story in an MDX file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Description } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Description of={ButtonStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Creating StoryIndexClient for Storybook Preview\nDESCRIPTION: This snippet explains how the Preview creates a StoryIndexClient to manage the story index. It pulls stories.json from the node and watches the event stream for invalidation events.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- No `getStoryIndex` function is passed, instead the preview creates a `StoryIndexClient` that pulls `stories.json` from node and watches the event stream for invalidation events.\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Addon API Packages\nDESCRIPTION: Demonstrates how to import the necessary packages for interacting with the Storybook manager UI and controlling addon behavior.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons, types } from '@storybook/manager-api';\nimport { useParameter } from '@storybook/preview-api';\n```\n\n----------------------------------------\n\nTITLE: Setting Framework Options\nDESCRIPTION: Example of configuring framework options including builder settings in Storybook's main configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {\n      builder: {\n        useSWC: true\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implement Play Function with Testing Library\nDESCRIPTION: Example of writing an interaction test using the play function with Testing Library and Vitest integration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/interactions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { within, userEvent } from '@storybook/test';\n\nexport const LoginForm = {\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Enter credentials', async () => {\n      await userEvent.type(canvas.getByTestId('email'), 'user@test.com');\n      await userEvent.type(canvas.getByTestId('password'), 'password123');\n    });\n\n    await step('Submit form', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Loader Function for Mixing storiesOf with CSF/MDX\nDESCRIPTION: A loader function that filters story files to include only those with default exports (CSF/MDX format) while excluding traditional storiesOf API files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst loadFn = () => {\n  const req = require.context('../src', true, /\\.stories\\.js$/);\n  return req\n    .keys()\n    .map((fname) => req(fname))\n    .filter((exp) => !!exp.default);\n};\n\nconfigure(loadFn, module);\n```\n\n----------------------------------------\n\nTITLE: Testing Svelte Component with Play Function (Svelte CSF)\nDESCRIPTION: Demonstrates testing a Svelte component using the Svelte CSF format with play functions. Shows component initialization and button click testing using the within helper.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import { userEvent, within } from 'storybook/test';\n\n  import MyComponent from './MyComponent.svelte';\n\n  const { Story } = defineMeta({\n    component: MyComponent,\n  });\n</script>\n\n<Story\n  name=\"ExampleWithRole\"\n  play={async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Using the Custom StoryName Block in Storybook MDX\nDESCRIPTION: This example shows how to use the custom StoryName block in a Storybook MDX file. It demonstrates different ways of using the block with various references.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-useof.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport { StoryName } from '../.storybook/blocks/StoryName';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n{/* Renders \"Secondary\" */}\n<StoryName of={ButtonStories.Secondary} />\n\n{/* Renders \"Primary\" */}\n<StoryName />\n\n{/* Renders \"Button\" */}\n<StoryName of={ButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Using Info Addon as a Storybook Decorator\nDESCRIPTION: Shows how to use the Info addon as a decorator, which applies it to all stories within a storiesOf group. This avoids repeating the withInfo call for each individual story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Decorator', module)\n  .addDecorator((story, context) =>\n    withInfo('Info could be used as a global or local decorator as well.')(story)(context)\n  )\n  .add('Use Info as story decorator', () => <BaseButton label=\"Button\" />);\n```\n\n----------------------------------------\n\nTITLE: Defining Page Stories with JavaScript for Common Renderers\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Page component using JavaScript. It's framework-agnostic and shows how to mock a user session in the beforeEach hook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getUserFromSession } from '#api/session.mock';\n\nimport { Page } from './Page';\n\nexport default {\n  component: Page,\n};\n\nexport const Default = {\n  async beforeEach() {\n    // 👇 Set the return value for the getUserFromSession function\n    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Options in Storybook Main Configuration\nDESCRIPTION: Demonstrates how to customize SWC compiler options in Storybook's main configuration file. Shows usage with both synchronous and asynchronous configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-swc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Synchronous configuration\nexport default {\n  swc: (config) => ({\n    ...config,\n    jsc: {\n      ...config.jsc,\n      parser: {\n        ...config.jsc.parser,\n        syntax: 'typescript',\n      },\n    },\n  }),\n};\n\n// Asynchronous configuration\nexport default {\n  swc: async (config) => {\n    return {\n      ...config,\n      jsc: {\n        ...config.jsc,\n        parser: {\n          ...config.jsc.parser,\n          syntax: 'typescript',\n        },\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Table of Contents in Storybook using TypeScript\nDESCRIPTION: This TypeScript code configures Storybook to enable the table of contents feature in documentation by importing the Preview type from the framework-specific package and setting the 'toc' parameter to true.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-enable-toc.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react, vue3)\nimport { Preview } from '@storybook/your-framework';\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      toc: true, // 👈 Enables the table of contents\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Story with TypeScript\nDESCRIPTION: Shows how to set up a story configuration file for an Angular component using TypeScript. Includes Meta type definition and basic component configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Path/To/MyComponent',\n  component: MyComponent,\n  decorators: [/* ... */],\n  parameters: {/* ... */},\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Configuring Button in CommonJS for Storybook\nDESCRIPTION: This JavaScript snippet configures a Button component in Storybook using CommonJS module syntax. It specifies the component and configures action parameters with a regular expression to handle event arguments. The setup assumes dependency on Storybook and a CommonJS environment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: { actions: { argTypesRegex: '^on.*' } },\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Story Selection Example\nDESCRIPTION: Example showing dynamic story selection using linkTo with a select element and LinkTo component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { linkTo } from '@storybook/addon-links';\nimport LinkTo from '@storybook/addon-links/react';\n\nexport default {\n  title: 'Select',\n};\n\nexport const index = () => (\n  <select value=\"Index\" onChange={linkTo('Select', (e) => e.currentTarget.value)}>\n    <option>index</option>\n    <option>first</option>\n    <option>second</option>\n    <option>third</option>\n  </select>\n);\nexport const first = () => <LinkTo story=\"index\">Go back</LinkTo>;\nexport const second = () => <LinkTo story=\"index\">Go back</LinkTo>;\nexport const third = () => <LinkTo story=\"index\">Go back</LinkTo>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Angular in TypeScript\nDESCRIPTION: Defines a Storybook meta configuration for an Angular component. The configuration sets up argTypes with table information for a 'value' property, specifying its default value and type.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta } from '@storybook/angular';\n\nimport { Example } from './Example';\n\nconst meta: Meta<Example> = {\n  component: Example,\n  argTypes: {\n    value: {\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Configuration\nDESCRIPTION: This snippet imports necessary dependencies and assets for configuring Storybook. It includes imports from Storybook addons, Next.js Image component, and various SVG and PNG assets.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/js/Configure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from \"@storybook/addon-docs/blocks\";\nimport Image from \"next/image\";\n\nimport Github from \"./assets/github.svg\";\nimport Discord from \"./assets/discord.svg\";\nimport Youtube from \"./assets/youtube.svg\";\nimport Tutorials from \"./assets/tutorials.svg\";\nimport Styling from \"./assets/styling.png\";\nimport Context from \"./assets/context.png\";\nimport Assets from \"./assets/assets.png\";\nimport Docs from \"./assets/docs.png\";\nimport Share from \"./assets/share.png\";\nimport FigmaPlugin from \"./assets/figma-plugin.png\";\nimport Testing from \"./assets/testing.png\";\nimport Accessibility from \"./assets/accessibility.png\";\nimport Theming from \"./assets/theming.png\";\nimport AddonLibrary from \"./assets/addon-library.png\";\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in SolidJS with JavaScript\nDESCRIPTION: This snippet demonstrates how to create Storybook stories for a Button component in SolidJS using JavaScript. It defines a primary button story with specific props using SolidJS's JSX syntax.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => <Button primary label=\"Button\" />,\n};\n```\n\n----------------------------------------\n\nTITLE: Cypress Test for Login Form\nDESCRIPTION: Cypress test implementation that loads a Storybook story and validates the login form inputs and interactions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Login form', () => {\n  it('authenticates user with valid credentials', () => {\n    cy.loadStory('stories/login.stories.js', 'LoginForm');\n    cy.get('#username').should('have.value', 'username@email.com');\n    cy.get('#password').should('have.value', 'password');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MDX Documentation with Stories\nDESCRIPTION: Example of an MDX file that documents a component with a mix of Markdown and an embedded Story component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_4\n\nLANGUAGE: md\nCODE:\n```\nimport { Meta, Story, ArgsTable } from '@storybook/addon-docs';\n\n<Meta title='App Component' />\n\n# App Component\n\nSome **markdown** description, or whatever you want.\n\n<Story name='basic' height='400px'>{() => {\nreturn { ... }; // should match the typical story format for your framework\n}}</Story>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Preview Background Colors in JavaScript\nDESCRIPTION: This snippet exports a default configuration object for Storybook, setting up background color options. It defines two background colors: red and green.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using useArgs Hook for Accessing Story Args in JavaScript\nDESCRIPTION: Shows how to use the useArgs hook to access and update story args in decorators or addon panels. This hook is available in both @storybook/preview-api and @storybook/manager-api.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-store.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useArgs } from '@storybook/preview-api';\n\n// or '@storybook/manager-api'\n\n// `args` is the args of the currently rendered story\n// `updateArgs` will update its args. You can pass a subset of the args; other args will not be changed.\nconst [args, updateArgs] = useArgs();\n```\n\n----------------------------------------\n\nTITLE: Disabling Accessibility Tests for Specific Stories\nDESCRIPTION: Configuration example showing how to disable accessibility testing for specific stories when using the test runner by checking for the a11y.disable parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/test-runner.js\nconst { injectAxe, checkA11y } = require('axe-playwright');\n\nmodule.exports = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await context.storyContext();\n    // Do not test a11y for stories that it's explicitly disabled\n    if (storyContext.parameters?.a11y?.disable) {\n      return;\n    }\n    await checkA11y(page, '#storybook-root', {\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Storybook Composition\nDESCRIPTION: This snippet shows how to compose Storybooks based on the current development environment using a function in the 'refs' field.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  refs: (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      return {\n        react: {\n          title: 'React',\n          url: 'http://localhost:6006',\n        },\n        angular: {\n          title: 'Angular',\n          url: 'http://localhost:6007',\n        },\n      };\n    }\n    return {\n      react: {\n        title: 'React',\n        url: 'https://react.example.com',\n      },\n      angular: {\n        title: 'Angular',\n        url: 'https://angular.example.com',\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Interactions Addon in Storybook Config\nDESCRIPTION: Configuration update to include the interactions addon in Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  addons: ['@storybook/addon-interactions'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chromatic for Storybook\nDESCRIPTION: JSON configuration file for Chromatic addon, specifying options like project ID, build script, debug mode, and zip deployment.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/visual-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buildScriptName\": \"deploy-storybook\",\n  \"debug\": true,\n  \"projectId\": \"Project:64cbcde96f99841e8b007d75\",\n  \"zip\": true\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript ArgTypes Interface Definition\nDESCRIPTION: TypeScript interface defining the structure and allowed properties for ArgTypes configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  [key: string]: {\n    control?: ControlType | { type: ControlType; /* See below for more */ } | false;\n    description?: string;\n    if?: Conditional;\n    mapping?: { [key: string]: { [option: string]: any } };\n    name?: string;\n    options?: string[];\n    table?: {\n      category?: string;\n      defaultValue?: { summary: string; detail?: string };\n      disable?: boolean;\n      subcategory?: string;\n      type?: { summary?: string; detail?: string };\n    },\n    type?: SBType | SBScalarType['name'];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Essentials with npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the '@storybook/addon-essentials' package and save it as a development dependency in your project's `package.json` file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-essentials-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @storybook/addon-essentials --save-dev\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Storybook Testing Library\nDESCRIPTION: This snippet shows the correct way to import and use the Storybook testing library. It imports from '@storybook/test' or the legacy '@storybook/testing-library', allowing addon-interactions to intercept these helper functions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/use-storybook-testing-library.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// correct import.\nimport { within } from '@storybook/test'\n// or this, which is now considered legacy\nimport { within } from '@storybook/testing-library'\n\nDefault.play = async (context) => {\n  const canvas = within(context.canvasElement)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ugly Comments in Storybook Source Loader\nDESCRIPTION: This example configures the source-loader to remove specific 'ugly' comments from the source code. It uses regular expressions to match and exclude undesired comments (e.g., eslint directives). Requires '@storybook/source-loader' and applies to files with '.stories.jsx?' extensions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/source-loader/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function ({ config }) {\n  config.module.rules.push({\n    test: /\\.stories\\.jsx?$/,\\n    use: [\\n      {\\n        loader: require.resolve('@storybook/source-loader'),\\n        options: {\\n          uglyCommentsRegex: [/^eslint-.*/, /^global.*/],\\n        },\\n      },\\n    ],\\n    enforce: 'pre',\\n  });\\n  return config;\\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Angular ngcc in Storybook Configuration\nDESCRIPTION: Configuration for disabling Angular's ngcc (Angular Compatibility Compiler) in Storybook by setting the 'enableNgcc' option to false in the main.js|ts configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [\n    /* ... */\n  ],\n  addons: [\n    /* ... */\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {\n      enableNgcc: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main.js\nDESCRIPTION: Configuration to add the links addon to Storybook's main configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-links'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Button Story with Args in CSF\nDESCRIPTION: Example showing how to create a Primary story for a Button component using Component Story Format with args. The code demonstrates setting up a basic story configuration with primary button properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/whats-a-story.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Component Story Implementation\nDESCRIPTION: TypeScript implementation of a Storybook story for an Angular component that renders an image. Uses the @storybook/angular Meta and StoryObj types for type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { MyComponent } from './MyComponent.component';\n\nconst meta: Meta<MyComponent> = {\n  component: MyComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Assume image.png is located in the \"public\" directory.\nexport const WithAnImage: Story = {\n  render: () => ({\n    props: {\n      src: '/image.png',\n      alt: 'my image',\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Scrollable Space with Styled Div\nDESCRIPTION: Creates a div element with inline styling to provide vertical space for the scroll test. The div has a height of 1500px with a green background and white text.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/UtfSymbolScroll.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ height: \"1500px\", background: \"green\", color: \"white\" }}>Space for scroll test</div>\n```\n\n----------------------------------------\n\nTITLE: Extended Theme Variables for Addons\nDESCRIPTION: Example of extending theme variables to support addon-specific styling, particularly for the Actions addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/theming.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@storybook/theming';\n\ncreate({\n  base: 'light',\n  // Storybook-specific color palette\n  colorPrimary: '#FF4785',\n  colorSecondary: '#1EA7FD',\n  // Object inspector theme\n  // Checkout https://github.com/storybookjs/react-inspector\n  syntax: {\n    keyword: '#1EA7FD',\n    attribute: '#F7AB1B',\n    string: '#40B995',\n    comment: '#7A8997',\n    number: '#F7AB1B',\n    operator: '#C1C9D2',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook Info Addon in React\nDESCRIPTION: Imports the necessary dependencies from React, Storybook, and the Info addon, along with custom components that will be used in the stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { withInfo } from '@storybook/addon-info';\n\nimport { DocgenButton } from '../components/DocgenButton';\nimport FlowTypeButton from '../components/FlowTypeButton';\nimport BaseButton from '../components/BaseButton';\nimport TableComponent from '../components/TableComponent';\n```\n\n----------------------------------------\n\nTITLE: Configuring Subpath Imports in package.json\nDESCRIPTION: Example of configuring subpath imports in package.json as an alternative to module aliases. This approach maps subpaths to actual file paths and follows Node package standards with benefits for module mocking.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_19\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n  \"imports\": {\n    \"#*\": [\".//*\", \"./*.ts\", \"./*.tsx\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC JSX Transform in Storybook\nDESCRIPTION: Configuration for enabling JSX transform with SWC builder in React-based Storybook projects. This snippet shows how to properly configure the SWC compiler to handle JSX runtime imports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/compilers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {}\n  },\n  swc: () => ({\n    jsc: {\n      transform: {\n        react: {\n          runtime: 'automatic'\n        }\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Children as Args in React Storybook Components\nDESCRIPTION: Shows how to use children as an arg in Storybook stories, allowing for better reuse and control through the Controls addon. Includes important caveats about JSON serializability.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/stories-for-multiple-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"list-story-with-unchecked-children.md\" />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Meta Title Definition in Storybook CSF 3.0 - JavaScript\nDESCRIPTION: This snippet demonstrates incorrect usage by explicitly setting a title in a Storybook component story. It violates the rule by not allowing the title to be automatically inferred from the file path in CSF 3.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-title-property-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  title: 'Components/Forms/Input',\n  component: Input,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Sans-serif Font Family in CSS\nDESCRIPTION: This CSS snippet defines the font-family for sans-serif text used in Storybook. It includes a fallback list of commonly available sans-serif fonts for different operating systems.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/typography.mdx#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nfont-family:\n  \"Nunito Sans\",\n  -apple-system,\n  \".SFNSText-Regular\",\n  \"San Francisco\",\n  BlinkMacSystemFont,\n  \"Segoe UI\",\n  \"Helvetica Neue\",\n  Helvetica,\n  Arial,\n  sans-serif;\n```\n\n----------------------------------------\n\nTITLE: Disabling a Story in DocsPage using CSF\nDESCRIPTION: A snippet showing how to exclude a specific story from appearing in the DocsPage while still keeping it in the Storybook navigation by setting the docs.disable parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = () => <Button>foo</Button>;\nfoo.parameters = { docs: { disable: true } };\n```\n\n----------------------------------------\n\nTITLE: Spying on Mocked Modules in Tests\nDESCRIPTION: Example of using fn utility to spy on mocked module functions and verify their behavior in tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { saveNote } from '../lib/api.mock';\n\nexport const SavesNote = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const note = canvas.getByRole('textbox');\n    const saveButton = canvas.getByRole('button');\n\n    await userEvent.type(note, 'Hello world!');\n    await userEvent.click(saveButton);\n\n    await waitFor(() => {\n      expect(saveNote).toHaveBeenCalledWith('Hello world!');\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding the Root Element for Pseudo States in Storybook\nDESCRIPTION: Example demonstrating how to override the default root element for pseudo states using the rootSelector parameter. This is useful for components like dialogs that render outside Storybook's root element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/pseudo-states/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const DialogButton = () => (\n  <Dialog>\n    <Button>Hover</Button>\n  </Dialog>\n)\n\nDialogButton.parameters = {\n  pseudo: { hover: true, rootSelector: \"body\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Angular Component with Store Injection\nDESCRIPTION: Defines an Angular component that checks whether a Store is injected. The component displays different text based on the store injection status.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'storybook-comp-with-store',\n  template: '<div>{{this.getStoreState()}}</div>',\n})\nclass WithStoreComponent {\n  private store: Store<any>;\n\n  constructor(store: Store<any>) {\n    this.store = store;\n  }\n\n  getStoreState(): string {\n    return this.store === undefined ? 'Store is NOT injected' : 'Store is injected';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global Styles in Storybook Preview\nDESCRIPTION: Example showing how to import global styles in the Storybook preview configuration file using absolute imports, which is supported by the Next.js framework for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// .storybook/preview.js|ts\n\nimport 'styles/globals.scss';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Accessibility Tests with Test Runner\nDESCRIPTION: Example showing how to extend the test runner's configuration for accessibility testing using helper methods to access story information and provide additional options for specific stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/test-runner.js\nconst { injectAxe, checkA11y } = require('axe-playwright');\n\nmodule.exports = {\n  async preVisit(page) {\n    await injectAxe(page);\n  },\n  async postVisit(page, context) {\n    // Get the entire context of a story, including parameters, args, argTypes, etc.\n    const storyContext = await context.storyContext();\n    // Do not test a11y for stories that it's explicitly disabled\n    if (storyContext.parameters?.a11y?.disable) {\n      return;\n    }\n    // Apply story-level a11y rules\n    await checkA11y(page, '#storybook-root', {\n      rules: storyContext.parameters?.a11y?.config?.rules,\n      detailedReport: true,\n      detailedReportOptions: {\n        html: true,\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Right Arrow SVG Component in React\nDESCRIPTION: This snippet defines a React component that renders an SVG right arrow icon. The component is styled inline and uses currentColor for fill, allowing for easy color customization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/rendererAssets/common/Configure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const RightArrow = () => <svg \n    viewBox=\"0 0 14 14\" \n    width=\"8px\" \n    height=\"14px\" \n    style={{ \n      marginLeft: '4px',\n      display: 'inline-block',\n      shapeRendering: 'inherit',\n      verticalAlign: 'middle',\n      fill: 'currentColor',\n      'path fill': 'currentColor'\n    }}\n>\n  <path d=\"m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing React Table Component with Flow Types\nDESCRIPTION: This snippet defines a Table component class with Flow type annotations for props and state. It includes a constructor and a render method that returns a TableComponent.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.flow-stories.txt#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Table extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: undefined,\n    };\n  }\n\n  state: State;\n\n  render() {\n    return <TableComponent />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Themed Styled Component in React\nDESCRIPTION: Defines a styled div component that uses theme values for background color and sets a fixed width. The component utilizes styled-components with theme prop destructuring to access theme values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-styled-variables-object-notation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Component = styled.div(({ theme }) => ({\n  background: theme.background.app,\n  width: 0,\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Web Components Button Stories in TypeScript\nDESCRIPTION: Web Components specific implementation of Button stories using TypeScript with proper type definitions from @storybook/web-components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\n/**\n * Button stories\n * These stories showcase the button\n */\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n  parameters: {\n    docs: {\n      description: {\n        component: 'Another description, overriding the comments',\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\n/**\n * Primary Button\n * This is the primary button\n */\nexport const Primary: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: 'Another description on the story, overriding the comments',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Mode for Accessibility Tests with React Components\nDESCRIPTION: Configuration to enable the developmentModeForBuild feature flag in Storybook, which helps ensure accessibility checks run correctly with asynchronous React components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nexport default {\n  // ... other configuration\n  features: {\n    // Enable NODE_ENV=development for the built Storybook\n    developmentModeForBuild: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: URL Parameters Args Conversion\nDESCRIPTION: Shows how URL parameters are converted to args objects.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  obj: { key: 'val' },\n  arr: ['one', 'two'],\n  nil: null,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation Structure\nDESCRIPTION: Configures the Storybook documentation layout using MDX components to render the documentation template with the EmojiButton stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/emoji-button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta of={EmojiButtonStories} />\n\n<Template />\n```\n\n----------------------------------------\n\nTITLE: Rendering Light Theme Colors in Storybook using JSX\nDESCRIPTION: This snippet renders the color palette for the light theme. It follows the same pattern as the dark theme, creating ColorItem components for each valid color value.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<ColorPalette>\n  {Object.entries(convert(themes.light).color).map(([k, v]) => {\n    if (typeof v === 'string' && (v.match(/^#/) || v.match(/^rgb/) || k.match(/color/i))) {\n      return <ColorItem key={k} title={k} colors={{ [k]: v }} />;\n    } else if (typeof v === 'object') {\n      return (\n        <ColorItem\n          key={k}\n          title={k}\n          colors={Object.entries(v).reduce(\n            (acc, [key, value]) =>\n              typeof value === 'string' &&\n              (value.match(/^#/) || value.match(/^rgb/) || key.match(/color/i))\n                ? { ...acc, [key]: value }\n                : acc,\n            {}\n          )}\n        />\n      );\n    }\n    return null;\n  })}\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook ESLint Plugin with npm\nDESCRIPTION: Installs eslint-plugin-storybook as a development dependency using npm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-plugin-storybook-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev eslint-plugin-storybook\n```\n\n----------------------------------------\n\nTITLE: Nx Library Storybook Configuration (Pre-14.1.8)\nDESCRIPTION: Configuration example for Nx library projects using Storybook before version 14.1.8, showing how to set up build options and style paths.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/styling-and-css.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build-storybook\": {\n    \"executor\": \"@nrwl/storybook:build\",\n    \"outputs\": [\"{options.outputPath}\"],\n    \"options\": {\n      \"uiFramework\": \"@storybook/angular\",\n      \"outputPath\": \"dist/storybook/example-lib\",\n      \"config\": {\n        \"configFolder\": \"libs/example-lib/storybook/.storybook\"\n      },\n      \"projectBuildConfig\": \"example-lib:build-storybook\",\n      \"styles\": [\"apps/example-app/src/styles.scss\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component-Level Parameters in Storybook (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set component-level parameters in Storybook, specifically for configuring the backgrounds addon for a Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n        { name: 'blue', value: '#00f' },\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Template for Emoji Button Documentation\nDESCRIPTION: This JSX snippet renders the imported Template component, which likely contains the structure and content for the Emoji Button documentation page. The Template component is expected to provide a consistent layout for documenting the Emoji Button component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/emoji-button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Template />\n```\n\n----------------------------------------\n\nTITLE: Setting Base Font Size for Storybook Preview in HTML/CSS\nDESCRIPTION: This snippet defines a style tag within the preview-body.html file to set the base font size for all stories in the Storybook preview iframe. It sets the font size of the html element to 15 pixels.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-body-font-size.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  html {\n    font-size: 15px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Filtering Controls with Regular Expressions\nDESCRIPTION: Shows how to filter controls using regular expressions. This example includes controls matching 'data' or 'type' and excludes those ending with 'Id'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport const FilteredComponent = () => <Component {...props} />;\n\nFilteredComponent.parameters = {\n  controls: {\n    include: /(data|type)/,\n    exclude: /Id$/,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring previewAnnotations in Next.js Storybook Framework\nDESCRIPTION: Example implementation of previewAnnotations configuration from the Storybook Next.js framework. Shows how to extend existing preview annotations by adding framework-specific preview scripts.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-preview-annotations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @storybook/nextjs framework's src/preset.ts\n\nimport type { StorybookConfig } from './types';\n\nexport const previewAnnotations: StorybookConfig['previewAnnotations'] = (entry = []) => [\n  ...entry,\n  require.resolve('@storybook/nextjs/preview.js'),\n];\n```\n\n----------------------------------------\n\nTITLE: Using Custom Table Component in Storybook Info Addon\nDESCRIPTION: Demonstrates how to use a custom component for rendering the prop table in the Info addon. This allows for complete customization of how props are displayed.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Options.TableComponent', module).add(\n  'Use a custom component for the table',\n  withInfo({\n    TableComponent,\n  })(() => <BaseButton label=\"Button\" />)\n);\n```\n\n----------------------------------------\n\nTITLE: Importing IconItem Component in Storybook\nDESCRIPTION: This snippet demonstrates how to import the IconItem component from Storybook's addon-docs blocks. It's a straightforward import statement used in MDX files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IconItem } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple React Button Component in JavaScript\nDESCRIPTION: A minimal example of a React functional component that renders a button element. This demonstrates the basic syntax for creating React components using arrow functions and JSX.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/src/blocks/components/DocsPageExampleCaption.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = () => <button />;\n```\n\n----------------------------------------\n\nTITLE: Disabling DocsPage Globally\nDESCRIPTION: Shows how to disable DocsPage documentation generation at the global level in preview.js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addParameters } from '@storybook/react';\n\naddParameters({ docs: { page: null } });\n```\n\n----------------------------------------\n\nTITLE: Disabling Table of Contents for a Specific Component\nDESCRIPTION: Demonstrates how to disable the table of contents for a specific component by including a toc property in the story's default export.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Example/Component',\n  component: MyComponent,\n  parameters: {\n    docs: {\n      toc: {\n        disable: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Legacy Svelte Story Format\nDESCRIPTION: Original implementation of a Svelte component story using @storybook/addon-svelte-csf with Meta, Template, and Story components. Shows component wrapped in an outer component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-story-custom-children.md#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Meta, Template, Story } from '@storybook/addon-svelte-csf';\n\n  import OuterComponent from './OuterComponent.svelte';\n  import MyComponent from './MyComponent.svelte';\n</script>\n\n<Meta title=\"MyComponent\" component={MyComponent} />\n\n<Template let:args>\n  <OuterComponent>\n    <MyComponent />\n  </OuterComponent>\n</Template>\n\n<Story name=\"Default\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Addons in Storybook Main File\nDESCRIPTION: This snippet shows how to use the addons API in the Storybook main.js file to register addons.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/preset-create-react-app',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Handling in React Storybook\nDESCRIPTION: Configuration to restore old JSX handling behavior by disabling configureJSX option in .storybook/main.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_134\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  addons: [\n    {\n      name: \"@storybook/addon-docs\",\n      options: { configureJSX: false },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Next.js Image Import Object Structure\nDESCRIPTION: Example of the object structure returned when importing images in Next.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_26\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"src\": \"static/media/stories/assets/logo.svg\",\n  \"height\": 48,\n  \"width\": 48,\n  \"blurDataURL\": \"static/media/stories/assets/logo.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Vitest Plugin\nDESCRIPTION: Shows how to import the storybookTest function from the @storybook/addon-vitest/vitest-plugin package. This function is a Vitest plugin that transforms stories into tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-addon.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storybookTest } from '@storybook/addon-vitest/vitest-plugin'\n```\n\n----------------------------------------\n\nTITLE: Referencing Emotion Library in Markdown\nDESCRIPTION: This snippet demonstrates how to create a link to the Emotion library's website using Markdown syntax. It's used to provide more information about the styling approach used in Storybook Components.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[`emotion`](https://emotion.sh)\n```\n\n----------------------------------------\n\nTITLE: Correct Import and Usage of Storybook expect for Interactions - JavaScript\nDESCRIPTION: This example shows the preferred pattern of importing `expect` from `@storybook/test` (or the legacy `@storybook/jest`) and using it within a Storybook story’s play function. This guarantees assertions will work both in browser and Node.js contexts. The required dependency is either `@storybook/test` or, for legacy code, `@storybook/jest`. The play function receives no parameters and is expected to execute assertions on values as part of Storybook’s interactive stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/use-storybook-expect.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// correct import.\\nimport { expect } from '@storybook/test'\\n// or this, which is now considered legacy\\nimport { expect } from '@storybook/jest'\\n\\nDefault.play = async () => {\\n  // using imported expect from storybook package\\n  await expect(123).toEqual(123)\\n}\n```\n\n----------------------------------------\n\nTITLE: Building Storybook for Production\nDESCRIPTION: Command to build Storybook as a static web application for production deployment\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx chromatic --project-token=<your-project-token>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controls in DocsPage Stories\nDESCRIPTION: This example illustrates how to write a story that consumes args to display controls in the auto-generated props table for DocsPage.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'MyComponent',\n  component: MyComponent,\n};\n\nexport const WithControls = (args) => <MyComponent {...args} />;\n```\n\n----------------------------------------\n\nTITLE: Running Standalone Preview with Parcel for Storybook\nDESCRIPTION: This command starts a Parcel dev server on port 1337 to run the standalone preview for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/standalone-preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook-preview\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Vite Builder with Yarn\nDESCRIPTION: Command to install @storybook/builder-vite package using Yarn package manager as a development dependency.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/builder-vite\n```\n\n----------------------------------------\n\nTITLE: Importing 'A' Component in JavaScript/JSX\nDESCRIPTION: This snippet imports an 'A' component from a relative path. The comment indicates that this import might prefix A.stories.ts, potentially causing confusion.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/ComponentReference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/* This prefixes A.stories.ts, we need to make sure we don't get confused. */}\nimport { A } from '../A';\n```\n\n----------------------------------------\n\nTITLE: Creating Portable Stories for Playwright Tests\nDESCRIPTION: Example showing how to compose portable stories in a separate file for use in Playwright tests.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-playwright.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Button.stories.portable.ts\n// Replace your-renderer with the renderer you are using (e.g. react, vue3)\nimport { composeStories } from '@storybook/your-renderer';\n\nimport * as stories from './Button.stories';\n\n// This function will be executed in the browser\n// and compose all stories, exporting them in a single object\nexport default composeStories(stories);\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URL in Storybook Preview JavaScript\nDESCRIPTION: This code configures the server URL that Storybook will connect to for rendering stories. It exports global parameters including the server URL.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport const parameters = {\n  server: {\n    url: `http://localhost:${port}/storybook_preview`,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Autodocs Template with MDX\nDESCRIPTION: Shows how to use MDX to create a custom documentation template, which is useful for non-React projects where JSX handling is not configured.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\n\n<Meta isTemplate />\n\n# Custom Template\n\nThis is a custom template for component documentation.\n```\n\n----------------------------------------\n\nTITLE: Correct Story Name Usage in Storybook CSF\nDESCRIPTION: Example showing correct usage where the story name is different from what would be automatically generated from the export name, providing a meaningful distinction.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-redundant-story-name.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PrimaryButton = {\n  name: 'I am the primary',\n};\n```\n\n----------------------------------------\n\nTITLE: Using create-storybook CLI with Shell\nDESCRIPTION: Demonstrates the basic usage of the create-storybook CLI command, including the option to specify a version. This command is used to initialize a new Storybook project with optional version specification.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncreate storybook[@version] [options]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Story Block in MDX\nDESCRIPTION: Demonstrates how to import the Story block and use it to render a story from a Button component's stories file within MDX documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Story of={ButtonStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Sidebar Roots in Storybook Manager\nDESCRIPTION: Configure Storybook to show top-level nodes as folders instead of roots by setting the sidebar.showRoots option to false in the manager.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/manager.js\n\nimport { addons } from '@storybook/manager-api';\n\naddons.setConfig({\n  sidebar: {\n    showRoots: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Story with JavaScript\nDESCRIPTION: Demonstrates how to create a Storybook story for Web Components using JavaScript, showing the specific syntax for targeting custom elements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n  title: 'components/MyComponent/MyComponent',\n};\n\nexport const Default = {\n  args: {\n    something: 'Something else',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Content in Storybook Documentation\nDESCRIPTION: This snippet demonstrates the use of Markdown in Storybook documentation. It includes a header and a simple greeting, which would be rendered as formatted text in the Storybook interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/docs-id-generation/B.docs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Docs with of\n\nhello docs\n```\n\n----------------------------------------\n\nTITLE: Configuring a Storybook Preset Addon in JavaScript\nDESCRIPTION: Example configuration for a Storybook preset addon. This snippet shows how to set up babel, webpack, and addons configurations for integrating Storybook with other technologies.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"storybook-preset-full-config-object.md\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Meta from Storybook Addon Docs for Angular\nDESCRIPTION: This snippet imports the Meta component from Storybook's addon-docs package, which is used to define metadata for the story or component documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/basics/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Storybook Story ID\nDESCRIPTION: Demonstrates how to manually set a story's ID to maintain permalinks when renaming stories or changing their hierarchy.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  id: 'foo-bar--baz',\n  title: 'OtherFoo/Bar',\n  component: Button,\n};\n\nexport const Moo = {\n  args: {\n    label: 'Moo',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Highlighting DOM Elements with Storybook Events\nDESCRIPTION: Example showing how to use the HIGHLIGHT event to highlight DOM elements in a Storybook story or addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useChannel } from '@storybook/preview-api';\nimport { HIGHLIGHT } from '@storybook/addon-highlight';\n\nexport const MyStory = () => {\n  const emit = useChannel({});\n  \n  emit(HIGHLIGHT, {\n    elements: ['button', '.special-element']\n  });\n  \n  return <Button>Click me</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Broken MDX Style Implementation Example\nDESCRIPTION: Example of an incorrect way to implement styles in MDX that will break due to formatting issues with line breaks in code blocks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\n<style>{`\n  .class1 {\n    ...\n  }\n\n  .class2 {\n    ...\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Task Selector in Shell\nDESCRIPTION: Command to run the Storybook task selector, which allows developers to choose different sandbox templates or development tasks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn task\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Button Stories in TypeScript\nDESCRIPTION: TypeScript configuration for Button stories in Web Components with proper type definitions for metadata and stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  title: 'Button',\n  component: 'demo-button',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Basic: Story = {\n  parameters: {\n    docs: {\n      source: { language: 'tsx' },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Component with ng-content\nDESCRIPTION: This snippet defines an Angular component that uses ng-content for content projection. The component wraps its content in a div with blue text color.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.angular-stories.txt#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Component({\n  selector: 'storybook-with-ng-content',\n  template: `<div style=\"color: #1e88e5;\"><ng-content></ng-content></div>`,\n})\nclass WithNgContentComponent {}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Storybook Documentation\nDESCRIPTION: This code snippet defines the frontmatter for a Markdown document in Storybook's documentation. It sets the title, sidebar order, and sidebar title for the 'Frameworks' page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Frameworks\nsidebar:\n  order: 3\n  title: Frameworks\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Syntax Differences in MDX\nDESCRIPTION: Shows examples of valid markdown syntax that would cause issues if directly imported into an MDX file due to MDX2's stricter interpretation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# A header\n\n{ this is valid in a plain markdown file, but MDX2 will try to evaluate this as an expression }\n\n<This is also valid, but MDX2 thinks this is a JSX component />\n```\n\n----------------------------------------\n\nTITLE: Storybook Qwik Configuration with Vite\nDESCRIPTION: Example showing how to add Qwik-specific Vite plugins to Storybook configuration\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@builder.io/qwik/optimizer\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Themes Addon via Package Managers\nDESCRIPTION: Commands for installing @storybook/addon-themes package using different package managers (yarn, npm, pnpm)\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/styled-components.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nyarn add -D @storybook/addon-themes\n```\n\nLANGUAGE: zsh\nCODE:\n```\nnpm install -D @storybook/addon-themes\n```\n\nLANGUAGE: zsh\nCODE:\n```\npnpm add -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Chromatic UI Testing\nDESCRIPTION: Defines a GitHub Actions workflow that publishes Storybook components to Chromatic for visual testing and review. The workflow runs on push events, sets up a Node.js environment, and uses the official Chromatic GitHub Action with a project token.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-github-action.md#2025-04-22_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# Workflow name\nname: 'Chromatic Publish'\n\n# Event for the workflow\non: push\n\n# List of jobs\njobs:\n  test:\n    # Operating System\n    runs-on: ubuntu-latest\n    # Job steps\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'yarn'\n      - run: yarn\n      #👇 Adds Chromatic as a step in the workflow\n      - uses: chromaui/action@latest\n        # Options required for Chromatic's GitHub Action\n        with:\n          #👇 Chromatic projectToken,\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Theme from Context with pluckThemeFromContext\nDESCRIPTION: A helper function that extracts the currently selected theme from Storybook's context. Useful when creating custom theme decorators to access the theme state.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DecoratorHelpers } from '@storybook/addon-themes';\n\nconst { pluckThemeFromContext } = DecoratorHelpers;\n\nexport const myCustomDecorator =\n  ({ themes, defaultState, ...rest }) =>\n  (storyFn, context) => {\n    const selectedTheme = pluckThemeFromContext(context);\n\n    // Snipped\n  };\n```\n\n----------------------------------------\n\nTITLE: Mocking Date in Story Before Render\nDESCRIPTION: Example of using the mount function to mock the Date object before rendering a component\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport MockDate from 'mockdate';\n\nexport const ChristmasUI = {\n  async beforeEach() {\n    MockDate.set('2024-12-25');\n    return () => {\n      MockDate.reset();\n    };\n  },\n  async play({ canvasElement }) {\n    // Test code here\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Image Component with Remote Images\nDESCRIPTION: Example of using Next.js Image component with remote images, showing required width and height properties.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// index.jsx\nimport Image from 'next/image';\n\nexport default function Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image src=\"/me.png\" alt=\"Picture of the author\" width={500} height={500} />\n      <p>Welcome to my homepage!</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Solid.js Profile Page Context Provider Implementation\nDESCRIPTION: Solid.js implementation of a profile page component that provides user posts and friends containers through context. Maintains the same pattern as React implementation for context value referential equality.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-provider.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ProfilePageContext from './ProfilePageContext';\nimport { ProfilePageContainer } from './ProfilePageContainer';\nimport { UserPostsContainer } from './UserPostsContainer';\nimport { UserFriendsContainer } from './UserFriendsContainer';\n\n//👇 Ensure that your context value remains referentially equal between each render.\nconst context = {\n  UserPostsContainer,\n  UserFriendsContainer,\n};\n\nexport const AppProfilePage = () => {\n  return (\n    <ProfilePageContext.Provider value={context}>\n      <ProfilePageContainer />\n    </ProfilePageContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook with NPM\nDESCRIPTION: Command to upgrade Storybook to version 7.6.6 using NPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/upgrade-command-specific-version.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@7.6.6 upgrade\n```\n\n----------------------------------------\n\nTITLE: Enabling Crash Reports in Storybook with npm\nDESCRIPTION: Command to run Storybook with crash reports enabled using npm as the package manager. The -- delimiter is necessary when passing flags to the underlying command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-storybook-enable-crash-reports-flag.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run storybook -- --enable-crash-reports\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure for API References in HTML\nDESCRIPTION: This HTML snippet defines the structure of a table used to display API references. It includes a header row and multiple body rows, each containing a link to the specific API documentation and a brief description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Table>\n  <thead>\n    <Tr>\n      <Th scope=\"col\" width=\"33%\">Name</Th>\n      <Th scope=\"col\">Description</Th>\n    </Tr>\n  </thead>\n\n  <tbody>\n    <Tr>\n      <Td><A href=\"./api/main-config/main-config\"><code>main.js|ts</code></A></Td>\n\n      <Td>\n        Storybook's primary configuration file, which specifies your Storybook project's behavior,\n        including the location of your stories, the addons you use, feature flags and other\n        project-specific settings.\n      </Td>\n    </Tr>\n\n    <Tr>\n      <Td><A href=\"./configure/#configure-story-rendering\"><code>preview.js|jsx|ts|tsx</code></A></Td>\n\n      <Td>\n        This configuration file controls the way stories are rendered. You can also use it to run\n        code that applies to all stories.\n      </Td>\n    </Tr>\n\n    <Tr>\n      <Td><A href=\"./configure/#configure-storybooks-ui\"><code>manager.js|ts</code></A></Td>\n\n      <Td>\n        This configuration file controls the behavior of Storybook's UI, the manager.\n      </Td>\n    </Tr>\n\n    <Tr>\n      <Td><A href=\"./api/cli-options\">CLI</A></Td>\n\n      <Td>\n        Storybook is a CLI tool. You can start Storybook in development mode or build a static\n        version of your Storybook.\n      </Td>\n    </Tr>\n  </tbody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Building Angular-Specific Code in Production Mode\nDESCRIPTION: These commands demonstrate how to build Storybook packages, including Angular-specific code, in production mode. This ensures compatibility with the Angular compiler.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn task --prod\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd code\nyarn build --prod --watch angular core addon-docs\n```\n\n----------------------------------------\n\nTITLE: Correct Meta Object Definition with Satisfies Operator\nDESCRIPTION: Examples of correct meta object definitions using the 'satisfies Meta' type check for better type safety.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/meta-satisfies-type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  title: 'Button',\n  args: { primary: true },\n  component: Button,\n} satisfies Meta<typeof Button>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst meta = {\n  title: 'Button',\n  args: { primary: true },\n  component: Button,\n} satisfies Meta<typeof Button>;\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Autodocs for Specific Components\nDESCRIPTION: Shows how to opt-out of autodocs for a particular component by removing the 'autodocs' tag in the component's story configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.stories.ts\nexport default {\n  component: Button,\n  tags: [\"!autodocs\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Props Generation in Storybook\nDESCRIPTION: Updates the .storybook/main.js file to use react-docgen-typescript for generating props documentation from TypeScript types.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    // also valid 'react-docgen' | false\n    reactDocgen: 'react-docgen-typescript',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CSF 3.0 Story with Auto-titling\nDESCRIPTION: Demonstrates a Component Story Format 3.0 story using auto-titling features, including explicit title and story name.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from './Button';\n\nexport default {\n  component: Button,\n  title: 'Custom Title',\n};\n\nexport const Primary = {\n  name: 'I am the primary',\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook in a Project\nDESCRIPTION: Command to install and initialize Storybook with a specified version. Supports various options for framework selection, package manager choice, and installation configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstorybook[@version] init [options]\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Elements Manifest in Storybook Preview\nDESCRIPTION: Code snippet for importing and setting the custom elements manifest in the Storybook preview configuration file, which is necessary for Web Components documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setCustomElementsManifest } from '@storybook/web-components';\nimport customElements from '../custom-elements.json';\n\nsetCustomElementsManifest(customElements);\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Sandbox Environment\nDESCRIPTION: The sandbox command generates a local sandbox project for testing Storybook features. It supports specifying versions and frameworks, and offers options for customization.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nstorybook[@version] sandbox [framework-filter] [options]\n```\n\n----------------------------------------\n\nTITLE: Applying TypeScript 'satisfies' Operator at Story Level\nDESCRIPTION: Example showing how to apply the TypeScript 'satisfies' operator at the individual story level for more granular type checking while maintaining type inference.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<CodeSnippets path=\"button-story-baseline-with-satisfies-story-level.md\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Content in Storybook\nDESCRIPTION: This snippet shows the Markdown content for the Storybook documentation. It includes a header and a greeting message, demonstrating how to structure documentation within a Storybook file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/A.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Docs with of\n\nhello docs\n```\n\n----------------------------------------\n\nTITLE: Using Template.bind() for Story Creation with Args in Storybook\nDESCRIPTION: Creates a Button story using the Template.bind() approach with custom args, enabling the Storybook controls addon to work with the component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WithTemplate = Template.bind({});\nWithTemplate.args = { foo: 'bar' }\n```\n\n----------------------------------------\n\nTITLE: GitHub Pages Deployment Workflow\nDESCRIPTION: GitHub Actions workflow configuration for deploying Storybook to GitHub Pages\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Storybook to GitHub Pages\n\non:\n  push:\n    branches:\n      - \"main\" # or \"master\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - run: yarn\n      - uses: bitovi/github-actions-storybook-to-github-pages@v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Source Block in MDX\nDESCRIPTION: Demonstrates how to import and use the Source block in an MDX file to render the source code of a story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Meta, Source } from '@storybook/addon-docs/blocks';\nimport * as ButtonStories from './Button.stories';\n\n<Meta of={ButtonStories} />\n\n<Source of={ButtonStories.Primary} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Documentation Sidebar in YAML\nDESCRIPTION: This YAML snippet defines the configuration for the Storybook documentation page. It sets the title to 'Documentation' and configures the sidebar with an order of 3 and a title of 'Documentation'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Documentation\nsidebar:\n  order: 3\n  title: Documentation\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Page Structure\nDESCRIPTION: Example of a simple page component that combines multiple subcomponents with their respective props\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst DocumentScreen = ({ user, document, subdocuments }) => (\n  <PageLayout user={user}>\n    <Document document={document} />\n    <SubDocumentList subdocuments={subdocuments} />\n  </PageLayout>\n);\n```\n\n----------------------------------------\n\nTITLE: Registering addon-themes in Storybook configuration\nDESCRIPTION: Diff showing how to add the @storybook/addon-themes to the addons array in the .storybook/main.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/bootstrap.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n+   '@storybook/addon-themes',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Sorting Stories with Webpack Context\nDESCRIPTION: Example of sorting stories when using webpack's require.context\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_159\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = require.context(\"../stories\", true, /\\.stories\\.js$/);\nvar modules = context.keys();\n\n// sort them\nvar sortedModules = modules.slice().sort((a, b) => {\n  // sort the stories based on filename/path\n  return a < b ? -1 : a > b ? 1 : 0;\n});\n\n// execute them\nsortedModules.forEach((key) => {\n  context(key);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mock Return Values in Stories\nDESCRIPTION: Example of using beforeEach in a story to set mock return values for component testing.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserFromSession } from '../lib/session.mock';\n\nexport default {\n  component: Page,\n};\n\nexport const LoggedIn = {\n  beforeEach() {\n    getUserFromSession.mockReturnValue({\n      id: 1,\n      name: 'Jane Doe',\n      email: 'jane@test.com',\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Builder Configuration Type Definition\nDESCRIPTION: TypeScript type definition for configuring Storybook's builder options, supporting both Vite and Webpack5 builders.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-core.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n| '@storybook/builder-vite' | '@storybook/builder-webpack5'\n| {\n    name: '@storybook/builder-vite' | '@storybook/builder-webpack5';\n    options?: BuilderOptions;\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Storybook Addon Panel\nDESCRIPTION: Shows how to register a minimal viable Storybook addon panel using the addons.add() method.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddons.add(ADDON_ID, {\n  type: types.PANEL,\n  title: 'My Addon',\n  render: ({ active, key }) => (\n    <div>\n      {active ? 'Active' : 'Inactive'}\n    </div>\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling HOC Components with Duplicate DisplayNames in Storybook Info Addon\nDESCRIPTION: Demonstrates a solution for GitHub issue #1814, showing how to handle Higher Order Components (HOCs) that may have duplicate display names in the Info addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst hoc = WrapComponent => ({ ...props }) => <WrapComponent {...props} />;\n\nconst Input = hoc(() => <input type=\"text\" />);\n\nconst TextArea = hoc(({ children }) => <textarea>{children}</textarea>);\n\nstoriesOf('Addons|Info.GitHub issues', module).add(\n  '#1814',\n  withInfo('Allow Duplicate DisplayNames for HOC #1814')(() => (\n    <div>\n      <Input />\n      <TextArea />\n    </div>\n  ))\n);\n```\n\n----------------------------------------\n\nTITLE: Upgrade Hierarchy Separators Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates the before and after states of applying the upgrade-hierarchy-separators codemod to story definitions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nstoriesOf('Foo|Bar/baz');\nstoriesOf('Foo.Bar.baz');\n\nexport default {\n  title: 'Foo|Bar/baz.whatever',\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nstoriesOf('Foo/Bar/baz');\nstoriesOf('Foo/Bar/baz');\n\nexport default {\n  title: 'Foo/Bar/baz/whatever',\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding Components from Prop Tables in Storybook Info Addon\nDESCRIPTION: Demonstrates how to exclude specific components from being displayed in the prop tables. This is useful when a story includes utility components that aren't relevant to the documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nstoriesOf('Addons|Info.Options.propTablesExclude', module).add(\n  'Exclude component from prop tables',\n  withInfo({\n    text: 'This can exclude extraneous components from being displayed in prop tables.',\n    propTablesExclude: [FlowTypeButton],\n  })(() => (\n    <div>\n      <BaseButton label=\"Button\" />\n      <FlowTypeButton label=\"Flow Typed Button\" />\n    </div>\n  ))\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding Storybook Story without Toolbar in JavaScript and HTML\nDESCRIPTION: This snippet shows how to embed a Storybook story without the toolbar using both oEmbed and iframe methods. It includes the URL for oEmbed and the HTML code for iframe embedding.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/embed.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// oEmbed\nhttps://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=/story/shadowboxcta--default&viewMode=story\n\n// iframe embed\n <iframe\n  src=\"https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--default&viewMode=story&shortcuts=false&singleStory=true\"\n  width=\"800\"\n  height=\"200\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating New Branch for Storybook Contribution in Shell\nDESCRIPTION: Commands to create a new git branch for Storybook contribution, allowing developers to isolate their changes from the main codebase.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-first-storybook-contribution\n```\n\n----------------------------------------\n\nTITLE: Importing Typeset Component in Storybook\nDESCRIPTION: This snippet shows how to import the Typeset component from Storybook's addon-docs blocks. This is typically used at the top of a Storybook MDX file to make the Typeset component available for use.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-typeset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Typeset } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: CSF 3 Story Object with Render Function\nDESCRIPTION: Shows how to rewrite a CSF 2 story into CSF 3 format using an explicit render function for component rendering.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Primary = {\n  render: (args) => {\n    return <Button {...args} />;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Dependency\nDESCRIPTION: Commands to install Puppeteer as a dev dependency for StoryShots\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_155\n\nLANGUAGE: sh\nCODE:\n```\nyarn add puppeteer --dev\nOR\nnpm install puppeteer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running a Codemod with Storybook CLI\nDESCRIPTION: This command runs a specific codemod using the Storybook CLI's migrate command, with a glob pattern to target specific files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx sb migrate <name-of-codemod> --glob=\"**/*.stories.js\"\n```\n\n----------------------------------------\n\nTITLE: Custom Snapshot Directory Configuration\nDESCRIPTION: Implementation of a custom snapshot resolver to specify alternative directory locations for snapshot files.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  resolveSnapshotPath: (testPath, snapshotExtension) =>\n    testPath.replace('src/', 'snapshots/') + snapshotExtension,\n\n  resolveTestPath: (snapshotPath, snapshotExtension) =>\n    snapshotPath\n      .replace('snapshots/', 'src/')\n      .slice(0, -snapshotExtension.length),\n\n  testPathForConsistencyCheck: 'src/components/example.test.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook with PNPM\nDESCRIPTION: Command to upgrade Storybook to version 7.6.6 using PNPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/upgrade-command-specific-version.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@7.6.6 upgrade\n```\n\n----------------------------------------\n\nTITLE: Styling Storybook UI Components with CSS\nDESCRIPTION: This CSS snippet defines styles for various UI components in a Storybook project. It includes styles for containers, sections, images, grids, and responsive layouts. The code also handles the styling for a feature exploration section, social media links, and an addon showcase component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/js/Configure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.sb-container {\n  margin-bottom: 48px;\n}\n\n.sb-section {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n}\n\nimg {\n  object-fit: cover;\n}\n\n.sb-section-title {\n  margin-bottom: 32px;\n}\n\n.sb-section a:not(h1 a, h2 a, h3 a) {\n  font-size: 14px;\n}\n\n.sb-section-item, .sb-grid-item {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.sb-section-item-heading {\n  padding-top: 20px !important;\n  padding-bottom: 5px !important;\n  margin: 0 !important;\n}\n.sb-section-item-paragraph {\n  margin: 0;\n  padding-bottom: 10px;\n}\n\n.sb-chevron {\n  margin-left: 5px;\n}\n\n.sb-features-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 32px 20px;\n}\n\n.sb-socials {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n}\n\n.sb-socials p {\n  margin-bottom: 10px;\n}\n\n.sb-explore-image {\n  max-height: 32px;\n  align-self: flex-start;\n}\n\n.sb-addon {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  position: relative;\n  background-color: #EEF3F8;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  background: #EEF3F8;\n  height: 180px;\n  margin-bottom: 48px;\n  overflow: hidden;\n}\n\n.sb-addon-text {\n  padding-left: 48px;\n  max-width: 240px;\n}\n\n.sb-addon-text h4 {\n  padding-top: 0px;\n}\n\n.sb-addon-img {\n  position: absolute;\n  left: 345px;\n  top: 0;\n  height: 100%;\n  width: 200%;\n  overflow: hidden;\n}\n\n.sb-addon-img img {\n  width: 650px;\n  transform: rotate(-15deg);\n  margin-left: 40px;\n  margin-top: -72px;\n  box-shadow: 0 0 1px rgba(255, 255, 255, 0);\n  backface-visibility: hidden;\n}\n\n@media screen and (max-width: 800px) {\n  .sb-addon-img {\n    left: 300px;\n  }\n}\n\n@media screen and (max-width: 600px) {\n  .sb-section {\n    flex-direction: column;\n  }\n\n  .sb-features-grid {\n    grid-template-columns: repeat(1, 1fr);\n  }\n\n  .sb-socials {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .sb-addon {\n    height: 280px;\n    align-items: flex-start;\n    padding-top: 32px;\n    overflow: hidden;\n  }\n\n  .sb-addon-text {\n    padding-left: 24px;\n  }\n\n  .sb-addon-img {\n    right: 0;\n    left: 0;\n    top: 130px;\n    bottom: 0;\n    overflow: hidden;\n    height: auto;\n    width: 124%;\n  }\n\n  .sb-addon-img img {\n    width: 1200px;\n    transform: rotate(-12deg);\n    margin-left: 0;\n    margin-top: 48px;\n    margin-bottom: -40px;\n    margin-left: -24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Builder Configuration for Styles\nDESCRIPTION: JSON configuration for including global styles in Angular 13+ projects using the builder configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_120\n\nLANGUAGE: json\nCODE:\n```\n   \"my-default-project\": {\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"styles\": [\"src/styles.css\", \"src/styles.scss\"],\n          }\n        }\n      },\n   },\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Test Index with NPM\nDESCRIPTION: Executes the test-storybook command with NPM package manager to generate index JSON file\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-with-index-json.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --index-json\n```\n\n----------------------------------------\n\nTITLE: Migrating from Notes/Info Addons to DocsPage\nDESCRIPTION: A configuration snippet for Storybook's preview.js that extracts component descriptions from the notes parameter, enabling migration from the older notes/info addons to the newer DocsPage format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addParameters } from '@storybook/preview-api';\n\naddParameters({\n  docs: {\n    extractComponentDescription: (component, { notes }) => {\n      if (notes) {\n        return typeof notes === 'string' ? notes : notes.markdown || notes.text;\n      }\n      return null;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Button Group Story with Imported Args\nDESCRIPTION: Shows how to reuse args across components by importing them into composite component stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<CodeSnippets path=\"button-group-story.md\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Manager Theme\nDESCRIPTION: Shows how to configure custom theming for the Storybook manager UI using manager.js\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addons } from \"@storybook/addons\";\nimport { create } from \"@storybook/theming/create\";\n\nconst theme = create({\n  base: \"light\",\n  brandTitle: \"My custom title\",\n});\n\naddons.setConfig({\n  panelPosition: \"bottom\",\n  theme,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook React API\nDESCRIPTION: Imports the storiesOf function from the Storybook React package, which is used to create and organize stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storiesOf } from '@storybook/react';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main for Auto-titling\nDESCRIPTION: Example configuration in storybook/main.js to set up automatic story titling based on file location.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with Yarn for Solid.js\nDESCRIPTION: Command to create a new Storybook installation for Solid.js projects using Yarn package manager. Uses the latest version of Storybook with Solid.js template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-manual-framework.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn create storybook@latest --type solid\n```\n\n----------------------------------------\n\nTITLE: Play Function with waitFor\nDESCRIPTION: Example of using waitFor in play functions to test element existence.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const WithWaitForExample = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByRole('textbox');\n    await userEvent.type(input, 'a', { delay: 100 });\n    await waitFor(async () => {\n      await expect(canvas.getByTestId('error')).toBeInTheDocument();\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Options\nDESCRIPTION: Example of configuring advanced options for the Storybook React-Vite framework including builder settings\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: {\n    name: \"@storybook/react-vite\",\n    options: {\n      builder: {\n        // Vite builder options\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Stencil Output Configuration for custom-elements.json\nDESCRIPTION: Configuration snippet for Stencil.js to generate a custom-elements.json file, which is required for props tables in Storybook Docs.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'docs-vscode',\n  file: 'custom-elements.json'\n},\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Links\nDESCRIPTION: Markdown links to GitHub pull requests containing bug fixes and improvements.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#20107](https://github.com/storybooks/storybook/pull/20107)\n[#20147](https://github.com/storybooks/storybook/pull/20147)\n[#19954](https://github.com/storybooks/storybook/pull/19954)\n```\n\n----------------------------------------\n\nTITLE: Setting Component in Story Metadata with Component Syntax\nDESCRIPTION: TypeScript code example showing how to specify the component in story metadata using the Component Story Format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppComponent } from './app.component';\n\nexport default {\n  title: 'App Component',\n  component: AppComponent,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Directories in Storybook\nDESCRIPTION: Configuration for including the MSW service worker file in Storybook's static directory settings.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  staticDirs: ['../public'],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Meta Object Definition in TypeScript\nDESCRIPTION: Examples of incorrect meta object definitions that don't use the 'satisfies Meta' type check.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/meta-satisfies-type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  title: 'Button',\n  args: { primary: true },\n  component: Button,\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst meta: Meta<typeof Button> = {\n  title: 'Button',\n  args: { primary: true },\n  component: Button,\n};\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint with Yarn\nDESCRIPTION: Installs ESLint as a development dependency using Yarn package manager. The --dev flag ensures ESLint is added to devDependencies in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev eslint\n```\n\n----------------------------------------\n\nTITLE: Customizing Story Source Display\nDESCRIPTION: Example of customizing source code snippets for stories using the storySource parameter.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_142\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Example = () => <Button />;\nExample.story = {\n  parameters: {\n    storySource: {\n      source: \"custom source\"\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components and Stories\nDESCRIPTION: Imports necessary components from Storybook addon-docs and button stories for documentation purposes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOf.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Stories } from '@storybook/addon-docs';\nimport * as ButtonStories from './button.stories.ts';\n```\n\n----------------------------------------\n\nTITLE: Starting the Server and Storybook\nDESCRIPTION: Command to start both the ExpressJS server (port 1337) and Storybook instance (port 9006)\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/server-kitchen-sink/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Log Level Configuration\nDESCRIPTION: Configuration option in Storybook's main config file that controls the verbosity of logs in the browser terminal. Supports five different log levels: debug, error, info, trace, and warn. Default value is 'info'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-log-level.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  logLevel: 'warn'\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Docs Components and Stories\nDESCRIPTION: Imports required components from Storybook addon-docs and associated AccountForm stories for documentation purposes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/AccountForm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story } from '@storybook/addon-docs';\nimport * as AccountFormStories from './AccountForm.stories';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration\nDESCRIPTION: Configuration to add the themes addon to Storybook's main.js configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['@storybook/addon-themes'],\n};\n```\n\n----------------------------------------\n\nTITLE: Legacy Grid Parameter Configuration\nDESCRIPTION: Example of the deprecated way to configure grid parameters in Storybook backgrounds addon.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Basic = () => <Button />\nBasic.parameters: {\n  grid: {\n    cellSize: 10\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Dependencies for Multi-Version Support\nDESCRIPTION: This code snippet shows how to configure peer dependencies in package.json to support multiple major versions of Storybook, including both 8.0 and 9.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-storybook-addon\",\n  \"peerDependencies\": {\n    \"storybook\": \"^8.0.0 || ^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"storybook\": \">=9.0.0-0 <10.0.0-0\" // For local development\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Documentation in preview.js\nDESCRIPTION: JavaScript code to load the generated JSON documentation file in the Storybook preview.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setJSONDoc } from '@storybook/addon-docs/ember';\nimport docJson from '../dist/storybook-docgen/index.json';\n\nsetJSONDoc(docJson);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parameters in Storybook Preview\nDESCRIPTION: Demonstrates how to configure parameters that apply to all stories globally in the Storybook preview configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/parameters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/preview.js|ts\nexport const parameters = {\n  backgrounds: {\n    values: [\n      { name: 'red', value: '#f00' },\n      { name: 'green', value: '#0f0' },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Incomplete Web Components Story Configuration\nDESCRIPTION: Partial JavaScript implementation of a Storybook story for TodoItem in Web Components. Only contains a comment about render functions but no actual implementation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n *👇 Render functions are a framework specific feature to allow you control on how the component renders.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework in JavaScript\nDESCRIPTION: This snippet shows how to set up the Storybook framework in a JavaScript configuration file. It exports a default object with the framework property set to '@storybook/react-webpack5'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-add-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  framework: '@storybook/react-webpack5', // 👈 Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Component Reference\nDESCRIPTION: Markdown configuration for creating component references in Storybook documentation, including frontmatter metadata and document structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Get started with Storybook\nhideRendererSelector: true\n---\n```\n\n----------------------------------------\n\nTITLE: Registering Storybook Addons in main.js Configuration\nDESCRIPTION: This snippet shows how to configure Storybook's main.js file to register a custom addon. The configuration uses an ES module that exports a default object with an 'addons' array containing the path to the addon's manager.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-addon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  addons: ['path/to/manager.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecated Controls Parameter Usage\nDESCRIPTION: Example showing the deprecated hideNoControlsWarning parameter in addon-controls which is no longer needed in Storybook 7.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_63\n\nLANGUAGE: ts\nCODE:\n```\nexport const Primary = {\n  parameters: {\n    controls: { hideNoControlsWarning: true }, // this parameter is now unnecessary\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration with Custom Package.json Location\nDESCRIPTION: Example showing how to configure the rule with a custom package.json location.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  rules: {\n    'storybook/no-uninstalled-addons': ['error', { packageJsonLocation: './folder/package.json' }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NYC File Extensions using JavaScript\nDESCRIPTION: JavaScript configuration for NYC test coverage tool using ES modules. This configuration specifies which file extensions should be included in coverage analysis.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-report-vue.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Other configuration options\n  extension: ['.js', '.cjs', '.mjs', '.ts', '.tsx', '.jsx', '.vue'],\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Ignore Configuration for Storybook\nDESCRIPTION: Configuration to allow ESLint to lint the .storybook directory which is ignored by default.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n!.storybook\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Documentation Page Title with Meta Component in JSX\nDESCRIPTION: This JSX code uses the Meta component to set the title of the Storybook documentation page. The title is set to 'docs2/Yabbadabbadooo'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/Title.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"docs2/Yabbadabbadooo\" />\n```\n\n----------------------------------------\n\nTITLE: CSF 2 Manual Title Configuration\nDESCRIPTION: Shows how titles were manually specified in CSF 2 format.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Components/Atoms/Button',\n  component: Button,\n};\n```\n\n----------------------------------------\n\nTITLE: Global BeforeEach Setup in Preview\nDESCRIPTION: Implementation of global beforeEach function in Storybook preview for story-level setup\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport MockDate from 'mockdate';\n\nexport default {\n  async beforeEach() {\n    MockDate.set('2024-12-25');\n    return () => {\n      MockDate.reset();\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components and Stories\nDESCRIPTION: Imports necessary components from Storybook addon-docs and button stories for documentation display.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOfNamed.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, Story, Stories } from '@storybook/addon-docs';\nimport * as ButtonStories from './button.stories.ts';\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Types with Toolbar Annotation\nDESCRIPTION: Demonstrates how to configure toolbar menus by creating globalTypes with toolbar annotations in the Storybook preview configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const globalTypes = {\n  theme: {\n    name: \"Theme\",\n    description: \"Global theme for components\",\n    defaultValue: \"light\",\n    toolbar: {\n      icon: \"circlehollow\",\n      items: [\"light\", \"dark\"],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Addon via CLI\nDESCRIPTION: Command to automatically install and configure a Storybook addon using the storybook add command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/install-addons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# With npm\nnpm run storybook add @storybook/addon-addon-name\n\n# With yarn\nyarn storybook add @storybook/addon-addon-name\n\n# With pnpm\npnpm storybook add @storybook/addon-addon-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component\nDESCRIPTION: This code sets up a Storybook Meta component, referencing the imported AStories and naming the documentation page 'Second Docs'.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/SecondMetaOf.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={AStories} name=\"Second Docs\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata with Deprecated defaultValue (Common/JS)\nDESCRIPTION: This JavaScript snippet defines the metadata for a component `Example` in a Storybook story file (`Example.stories.js` or `Example.stories.jsx`), intended for common renderers like React or Vue. It illustrates the deprecated use of `argTypes.value.defaultValue` and promotes using the `args` object for setting default argument values.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js filename=\"Example.stories.js|jsx\" renderer=\"common\" language=\"js\"\nimport { Example } from './Example';\n\nexport default {\n  component: Example,\n  argTypes: {\n    value: {\n      // ⛔️ Deprecated, do not use\n      defaultValue: 0,\n    },\n  },\n  // ✅ Do this instead\n  args: {\n    value: 0,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Script in package.json\nDESCRIPTION: JSON configuration for running Storybook tests with Vitest.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test-storybook\": \"vitest --project=storybook\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating LinkTo Import from addon-links\nDESCRIPTION: Shows how to update the import of the LinkTo React component from @storybook/addon-links. Direct imports from the addon package are no longer supported and must be imported from the React-specific entrypoint.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nimport LinkTo from \"@storybook/addon-links\";\n\n// after\nimport LinkTo from \"@storybook/addon-links/react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring ArgTypes with Description\nDESCRIPTION: Example showing how to configure an argType with a description property.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  title: 'Components/Button',\n  argTypes: {\n    backgroundColor: {\n      description: 'Background color of the button'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport Options Type in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for viewport options. Each viewport entry requires a name, dimensions with units, and device type specification.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  [key: string]: {\n    name: string;\n    styles: { height: string, width: string };\n    type: 'desktop' | 'mobile' | 'tablet' | 'other';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Stories with Angular Renderer in TypeScript\nDESCRIPTION: Sets up a Storybook story for an Angular Button component with custom argTypes. Imports necessary types from @storybook/angular and configures a label control with an overwritten description.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { Button } from './button.component';\n\nconst meta: Meta<Button> = {\n  component: Button,\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof Button>;\n\nexport const Basic: Story = {\n  argTypes: {\n    // 👇 This story expects a label arg\n    label: {\n      control: 'text',\n      description: 'Overwritten description',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global View Mode in Storybook Preview Configuration\nDESCRIPTION: This code sets the default view mode to 'docs' for all stories globally in the Storybook preview configuration file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// always reset the view mode to \"docs\" whenever the user navigates\nexport const parameters = {\n  viewMode: 'docs',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Story Root Display\nDESCRIPTION: Configuration to re-enable root story display behavior with showRoots option\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_154\n\nLANGUAGE: javascript\nCODE:\n```\naddParameters({\n  options: {\n    showRoots: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting MDX Stories to CSF with npm\nDESCRIPTION: Command to migrate Storybook stories from MDX format to Component Story Format (CSF) using npm. The command uses npx to execute the storybook migration script targeting all .stories.mdx files in the src directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-mdx-to-csf.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Convert stories in MDX to CSF\nnpx storybook@latest migrate mdx-to-csf --glob \"src/**/*.stories.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Stories in MDX Files in Storybook 7.0\nDESCRIPTION: Demonstrates how to reference stories from the same or different components in MDX files using the new 'of' prop in Storybook 7.0. This replaces the deprecated method of referencing stories by ID.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_91\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Meta, Story } from \"@storybook/blocks\";\nimport * as ComponentStories from \"./some-component.stories\";\nimport * as SecondComponentStories from \"./second-component.stories\";\n\n<Meta of={ComponentStories} />\n\n<Story of={SecondComponentStories.standard} meta={SecondComponentStories} />\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component in JavaScript\nDESCRIPTION: Shows how to import the Meta component from Storybook's addon-docs package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Global Decorator Configuration\nDESCRIPTION: Example of setting up a global decorator in Storybook's preview configuration file\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/decorators.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const decorators = [\n  (Story) => (\n    <div style={{ margin: '3em' }}>\n      <Story />\n    </div>\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Shelljs Dependency in Storybook\nDESCRIPTION: Update the version of the shelljs dependency in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Update shelljs dependency version\n// See PR #17602 for details\n```\n\n----------------------------------------\n\nTITLE: Customizing Storybook Sandbox\nDESCRIPTION: This script provides options to customize the Storybook sandbox, such as selecting different frameworks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn task\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with yarn\nDESCRIPTION: Command to create a new Storybook project using yarn package manager for version 8.3.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-custom-version.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn create storybook@8.3\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Builder for Storybook\nDESCRIPTION: Command to install the Vite builder as a dev dependency for Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/builder-vite --save-dev\n```\n\n----------------------------------------\n\nTITLE: Structuring Storybook Welcome Page Section in HTML\nDESCRIPTION: This HTML snippet defines the structure for a section of the Storybook welcome page, including an image, paragraph, and a link to tutorials.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/ts/Configure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n        src={Tutorials} \n        alt=\"A book\" \n        className=\"sb-explore-image\"\n      />\n      <p>Follow guided walkthroughs on for key workflows.</p>\n\n      <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n        >Discover tutorials<RightArrow /></a>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Stories in JavaScript\nDESCRIPTION: Imports all exports from a B.stories file, likely containing Storybook story definitions for a component B.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingDefaultName.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as BStories from '../src/B.stories';\n```\n\n----------------------------------------\n\nTITLE: Customizing Sass Options in Next.js Configuration\nDESCRIPTION: This code snippet demonstrates how to customize Sass options in the Next.js configuration file. These options will be automatically included in Sass compilation for Storybook stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nimport * as path from 'path';\n\nexport default {\n  // Any options here are included in Sass compilation for your stories\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File\nDESCRIPTION: Shows how to define environment variables using a .env file in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSTORYBOOK_DATA_KEY=12345\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Controls Documentation\nDESCRIPTION: YAML frontmatter that configures the title and sidebar properties for the Controls documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Controls'\nsidebar:\n  order: 3\n  title: Controls\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Canvas Component\nDESCRIPTION: Basic import statement for the Canvas component from Storybook addon-docs blocks.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Canvas } from '@storybook/addon-docs/blocks';\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules in ESLint Config File\nDESCRIPTION: Reference to the .eslintrc.js configuration file that needs to be updated when adding new ESLint rules to the project.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/scripts/eslint-plugin-local-rules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.eslintrc.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Stories in preview.js\nDESCRIPTION: JavaScript configuration to set all stories to render in an iframe instead of inline by updating the preview.js file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = { docs: { story: { inline: false } } };\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Override with Globals\nDESCRIPTION: Example showing how to set viewport override values using the new globals property instead of the parameters property in story configurations.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n// Button.stories.ts\nexport default {\n  component: Button,\n- parameters: {\n-   viewport: {\n-     defaultViewport: \"iphone5\",\n-     defaultOrientation: \"landscape\",\n-   },\n- },\n+ globals: {\n+   viewport: {\n+     value: \"iphone5\",\n+     isRotated: true,\n+   },\n+ },\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook to Version 7 with pnpm\nDESCRIPTION: This command upgrades Storybook to version 7 using pnpm. It uses pnpm dlx to execute the upgrade command without installing Storybook globally.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-to-prior-major.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx storybook@^7 upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc with pnpm for Angular in Storybook\nDESCRIPTION: This snippet demonstrates the installation of Compodoc as a dev dependency using pnpm. It's specific to Angular projects in a Storybook context.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/compodoc-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev @compodoc/compodoc\n```\n\n----------------------------------------\n\nTITLE: Hypothetical Framework Story Example\nDESCRIPTION: Example of a story implementation for a hypothetical framework\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const story = {\n  render: () => ({\n    component: 'Button',\n    args: { label: 'The Button' }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Development Mode Configuration\nDESCRIPTION: Configuration for enabling development mode in built Storybooks\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js\nexport default {\n  features: {\n    developmentModeForBuild: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Storybook Upgrade with Doctor Command\nDESCRIPTION: Command for performing a health check on your Storybook project after an upgrade. The doctor command identifies common issues like duplicated dependencies, incompatible addons, or mismatched versions.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<CodeSnippets path=\"storybook-doctor.md\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with npm\nDESCRIPTION: Command to create a new Storybook project using npm package manager. Uses the latest version of the Storybook creation tool.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create storybook@latest\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Server for Storybook Production Build Preview\nDESCRIPTION: Command to use http-server package to preview a production build of Storybook instead of using 'serve' which causes 'No Preview' errors due to rewrite handling.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx http-server storybook-static\n```\n\n----------------------------------------\n\nTITLE: Incorrect CSF Default Export in JavaScript\nDESCRIPTION: An example of a CSF default export that incorrectly omits the component property. This violates the csf-component rule.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/csf-component.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: 'Button',\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Web Component Button Story - Storybook (JavaScript)\nDESCRIPTION: This JavaScript snippet registers a 'demo-button' web component for Storybook. The component is defined as a string in the exported object. No imports are required, and it serves as a simple story configuration for custom elements in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nexport default {\\n  component: 'demo-button',\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Directory Support in JavaScript Storybook\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure a Storybook story for a component that uses Next.js app directory features. It sets the 'nextjs.appDirectory' parameter to true to enable App Router support.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NavigationBasedComponent from './NavigationBasedComponent';\n\nexport default {\n  component: NavigationBasedComponent,\n  parameters: {\n    nextjs: {\n      appDirectory: true, // 👈 Set this\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Non-A11y Story in Vue Storybook (TypeScript 4.9)\nDESCRIPTION: This TypeScript 4.9 snippet configures a non-accessibility checked story for a Vue component using '@storybook/vue3'. Required dependencies include the Storybook Vue plugin and the component file.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_9\n\nLANGUAGE: ts-4-9\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/vue3';\n\nimport MyComponent from './MyComponent.vue';\n\nconst meta = {\n  component: MyComponent,\n} satisfies Meta<typeof MyComponent>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const NonA11yStory: Story = {\n  globals: {\n    a11y: {\n      // This option disables all automatic a11y checks on this story\n      manual: true,\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories for Svelte using Svelte CSF\nDESCRIPTION: This snippet demonstrates how to create stories for a Svelte Button component using Svelte CSF. It configures the component metadata, sets parameters, and defines a basic story.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script module>\n  import { defineMeta } from '@storybook/addon-svelte-csf';\n\n  import Button from './Button.svelte';\n\n  const { Story } = defineMeta({\n    /* 👇 The title prop is optional.\n     * See https://storybook.js.org/docs/configure/#configure-story-loading\n     * to learn how to generate automatic titles\n    */\n    title: 'Button',\n    component: Button,\n    parameters: {\n      myAddon: {\n        data: 'This data is passed to the addon',\n      },\n    },\n  });\n</script>\n\n<Story name=\"Basic\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating a New ESLint Rule for Storybook\nDESCRIPTION: Command to generate a new ESLint rule for Storybook, which creates rule file, tests, and documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn generate-rule\n```\n\n----------------------------------------\n\nTITLE: Disable Automated A11y Testing\nDESCRIPTION: Example showing how to disable automated accessibility testing for components or stories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: MyComponent,\n  parameters: {\n    a11y: { disable: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming globals to initialGlobals in Preview.js\nDESCRIPTION: Configuration change showing how to update from the deprecated globals property to the new initialGlobals property in preview.js.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n// .storybook/preview.js\nexport default {\n-  globals: [ a: 1, b: 2 ],\n+  initialGlobals: [ a: 1, b: 2 ],\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Onboarding Addon with NPM\nDESCRIPTION: Command to remove the Storybook onboarding addon using NPM package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/onboarding/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nnpm uninstall -D @storybook/addon-onboarding\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with NPM\nDESCRIPTION: Installs Storybook using NPM package manager with explicit package manager configuration set to npm.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-custom-package-manager.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create storybook@latest --package-manager=npm\n```\n\n----------------------------------------\n\nTITLE: Disabling TypeScript Compiler in Storybook\nDESCRIPTION: Disables the parsing of TypeScript files through the compiler in Storybook's Webpack5 configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  typescript: {\n    skipCompiler: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Interactions Addon\nDESCRIPTION: Command to install the Storybook interactions addon and its dependencies for component testing\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storybook/addon-interactions @storybook/test @storybook/jest @storybook/test-runner --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with Coverage using npm\nDESCRIPTION: This command executes Storybook tests with coverage enabled using npm. It runs the 'test-storybook' script with the '--coverage' flag to generate test coverage reports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-with-coverage.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-storybook -- --coverage\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Server for Ember Demo\nDESCRIPTION: This command launches the Storybook server, allowing you to view and interact with the Ember components in the Storybook interface.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/ember-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Composing Portable Stories with Locale Overrides in React\nDESCRIPTION: Creates portable stories from existing Button stories in React by composing them with different locale settings. Uses composeStory from @storybook/react to generate variants of the Primary story with English and Spanish locales.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-override-globals.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { composeStory } from '@storybook/react';\n\nimport meta, { Primary } from './Button.stories';\n\nexport const PrimaryEnglish = composeStory(\n  Primary,\n  meta,\n  { globals: { locale: 'en' } }, // 👈 Project annotations to override the locale\n);\n\nexport const PrimarySpanish = composeStory(Primary, meta, { globals: { locale: 'es' } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main File in TypeScript\nDESCRIPTION: This snippet demonstrates the configuration of the main Storybook file using TypeScript. It imports the StorybookConfig type, sets the framework, and defines story loading with a custom title prefix. The framework should be replaced with the specific framework being used.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-auto-title-custom.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: [\n    {\n      directory: '../src',\n      titlePrefix: 'Custom', // 👈 Configure the title prefix\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Story for DocumentScreen in React/Vue with JavaScript\nDESCRIPTION: This snippet shows how to create a Storybook story for the DocumentScreen component using JavaScript, suitable for React or Vue frameworks. It imports required stories, defines the component, and creates a 'Simple' story with args.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocumentScreen } from './YourPage';\n\n// 👇 Imports the required stories\nimport * as PageLayout from './PageLayout.stories';\nimport * as DocumentHeader from './DocumentHeader.stories';\nimport * as DocumentList from './DocumentList.stories';\n\nexport default {\n  component: DocumentScreen,\n};\n\nexport const Simple = {\n  args: {\n    user: PageLayout.Simple.args.user,\n    document: DocumentHeader.Simple.args.document,\n    subdocuments: DocumentList.Simple.args.documents,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Toolbar Component in TypeScript\nDESCRIPTION: Core implementation of a Storybook toolbar addon using React hooks and Storybook's manager API. Includes button rendering and keyboard shortcut registration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGlobals, useStorybookApi } from 'storybook/manager-api';\nimport { IconButton } from 'storybook/internal/components';\nimport { LightningIcon } from '@storybook/icons';\n\nexport const Tool = memo(function MyAddonSelector() {\n  const [globals, updateGlobals] = useGlobals();\n  const api = useStorybookApi();\n\n  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);\n\n  const toggleMyTool = useCallback(() => {\n    updateGlobals({\n      [PARAM_KEY]: !isActive,\n    });\n  }, [isActive]);\n\n  useEffect(() => {\n    api.setAddonShortcut(ADDON_ID, {\n      label: 'Toggle Addon [8]',\n      defaultShortcut: ['8'],\n      actionName: 'myaddon',\n      showInMenu: false,\n      action: toggleMyTool,\n    });\n  }, [toggleMyTool, api]);\n\n  return (\n    <IconButton key={TOOL_ID} active={isActive} title=\"Enable my addon\" onClick={toggleMyTool}>\n      <LightningIcon />\n    </IconButton>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chromatic with yarn\nDESCRIPTION: This command installs Chromatic as a development dependency using yarn. It adds Chromatic to the project's devDependencies in package.json.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev chromatic\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests with yarn\nDESCRIPTION: This command launches Storybook tests using yarn, providing a URL for the Storybook instance to be tested.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-url.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test-storybook --url https://the-storybook-url-here.com\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Docs Package with Yarn\nDESCRIPTION: Command to install the Storybook Docs addon package using Yarn. Ensures that all Storybook package versions match.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @storybook/addon-docs\n```\n\n----------------------------------------\n\nTITLE: Updating Addon Preset Configuration for Storybook 8.0\nDESCRIPTION: Code diff showing how to migrate from the deprecated 'config' preset field to the newer 'previewAnnotations' field in addon preset configuration for Storybook 8.0 compatibility.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n// your-addon/preset.js\n\nmodule.exports = {\n-  config: (entries = []) => [...entries, ...yourEntry],\n+  previewAnnotations: (entries = []) => [...entries, ...yourEntry],\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Value Configuration\nDESCRIPTION: Shows the deprecated way of setting default values for argTypes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  argTypes: {\n    label: {\n      defaultValue: 'Button'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with Yarn\nDESCRIPTION: Installs Storybook using Yarn package manager while configuring npm as the package manager setting.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-custom-package-manager.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn create storybook@latest --package-manager=npm\n```\n\n----------------------------------------\n\nTITLE: Controls Block with Exclude Parameter\nDESCRIPTION: Example showing how to use the Controls block with exclude parameter in MDX documentation.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-controls.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Controls of={ButtonStories} exclude={['style']} />\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests with Create React App Excluding Stories\nDESCRIPTION: Shell command to run Jest coverage tests in Create React App while excluding story files from the coverage report using command line arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm test -- --coverage --collectCoverageFrom='[\"src/**/*.{js,jsx}\",\"!src/**/stories/*\"]'\n```\n\n----------------------------------------\n\nTITLE: Building Storybook with Test Flag using pnpm\nDESCRIPTION: This command builds Storybook with the test flag using pnpm. It runs the 'build-storybook' script with the '--test' option.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-build-test-flag.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build-storybook --test\n```\n\n----------------------------------------\n\nTITLE: Incorrect Story File Format Without Default Export\nDESCRIPTION: Example showing incorrect story file format that violates the rule by only having named exports without the required default export for component metadata.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/default-exports.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// no default export\nexport const Primary = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Configuration in TypeScript\nDESCRIPTION: Sets up the main Storybook configuration including framework specification, story file patterns, and TypeScript compiler settings. The configuration uses a type-safe approach with StorybookConfig type definition.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-skip-compiler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    skipCompiler: true,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Including node_modules Stories Configuration\nDESCRIPTION: Stories configuration that explicitly includes stories from node_modules directories.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [\"../**/*.stories.*\", \"../**/node_modules/**/*.stories.*\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring webpackFinal in Storybook\nDESCRIPTION: Demonstrates how to customize Storybook's Webpack configuration using the webpackFinal async function. It accepts a Webpack config object and options, and must return the modified config.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-webpack-final.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync (config: Config, options: WebpackOptions) => Config\n```\n\n----------------------------------------\n\nTITLE: Visualizing Non-patch Release Workflow with Mermaid\nDESCRIPTION: A git graph diagram illustrating the non-patch release process, showing how feature and bugfix changes are incorporated into a new alpha release version 7.1.0-alpha.29.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'gitGraph': { 'mainBranchName': 'next' } } }%%\ngitGraph\n    commit\n    branch next-release\n    commit tag: \"7.1.0-alpha.28\"\n    checkout next\n    merge next-release\n    commit type: HIGHLIGHT id: \"direct commit\"\n    branch new-feature\n    commit\n    commit\n    checkout next\n    merge new-feature type: HIGHLIGHT\n    branch some-bugfix\n    commit\n    checkout next\n    merge some-bugfix type: HIGHLIGHT\n    branch version-non-patch-from-7.1.0-alpha.28\n    commit id: \"write changelog\"\n    checkout next-release\n    merge version-non-patch-from-7.1.0-alpha.28\n    commit id: \"bump versions\" tag: \"7.1.0-alpha.29\"\n    checkout next\n    merge next-release\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Angular with yarn\nDESCRIPTION: Command to install @storybook/angular as a dev dependency using yarn package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @storybook/angular\n```\n\n----------------------------------------\n\nTITLE: Story Hierarchy Default Configuration\nDESCRIPTION: Default configuration for story hierarchy separators that enable automatic story grouping.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  hierarchyRootSeparator: '|',\n  hierarchySeparator: /\\/|\\./,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Storybook CSF 2 to CSF 3 using yarn\nDESCRIPTION: Command to migrate Storybook Component Story Format from version 2 to 3 using yarn. This targets TypeScript React stories with the specified glob pattern and parser.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-csf-2-to-3.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Convert CSF 2 to CSF 3\nyarn dlx storybook@latest migrate csf-2-to-3 --glob=\"**/*.stories.tsx\" --parser=tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: Basic Storybook configuration file in JavaScript format. It specifies the framework to use, defines patterns for story files, and manages component references.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs-disable.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    'package-name': { disable: true },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Snapshot Testing Documentation\nDESCRIPTION: YAML configuration metadata for a documentation page about snapshot testing, including title and sidebar configuration options.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Snapshot tests\nsidebar:\n  order: 4\n  title: Snapshot tests\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook with NPM for Solid.js\nDESCRIPTION: Command to create a new Storybook installation for Solid.js projects using NPM package manager. Uses the latest version of Storybook with Solid.js template.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-manual-framework.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create storybook@latest --type solid\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Storybook using JavaScript. It specifies the framework, story file patterns, and enables the legacyDecoratorFileOrder feature.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-legacy-decorator-file-order.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  features: {\n    legacyDecoratorFileOrder: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NYC File Extensions using JSON\nDESCRIPTION: JSON configuration for NYC test coverage tool. This configuration specifies which file extensions should be included in coverage analysis, equivalent to the JavaScript configuration.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-report-vue.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extension\": [\".js\", \".cjs\", \".mjs\", \".ts\", \".tsx\", \".jsx\", \".vue\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @storybook/addon-themes using npm\nDESCRIPTION: Command to install @storybook/addon-themes as a dev dependency using npm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nnpm install -D @storybook/addon-themes\n```\n\n----------------------------------------\n\nTITLE: Defining ESLint Rule Metadata for Storybook\nDESCRIPTION: Example of defining important metadata for a Storybook ESLint rule, including severity, categories, and configuration flags.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { CategoryId } from '../utils/constants';\n\nmodule.exports = {\n  meta: {\n    severity: 'error', // whether the rule should yield 'warn' or 'error'\n    docs: {\n      categories: [CategoryId.RECOMMENDED], // You should always use an existing category from the CategoryId enum], or create a new one there\n      excludeFromConfig: true, // If the rule is not ready to be shipped in any category, set this flag to true, otherwise remove it\n    },\n  },\n  ...otherProperties,\n};\n```\n\n----------------------------------------\n\nTITLE: Linting Storybook Code\nDESCRIPTION: These scripts check if the code conforms to linting rules using remark and eslint. Separate commands are provided for JavaScript and Markdown.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn lint\nyarn lint:js\nyarn lint:md\nyarn lint:js --fix\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Stories\nDESCRIPTION: Configuration to disable inline story rendering and use iframes instead.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const parameters = { docs: { story: { inline: false } } };\n```\n\n----------------------------------------\n\nTITLE: Implementing Storybook Component Testing with Custom Snapshot Paths in Jest\nDESCRIPTION: This code sets up a Jest test suite for Storybook components. It imports jest-specific-snapshot, iterates through story files, runs each story with a 1ms delay for rendering stability, and creates snapshots with custom file paths based on the story directory structure.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-multi-snapshot-test.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// 👇 Augment expect with jest-specific-snapshot\nimport 'jest-specific-snapshot';\n\n// ...Code omitted for brevity\n\ndescribe(options.suite, () => {\n  //👇 Add storyDir in the arguments list\n  getAllStoryFiles().forEach(({ filePath, storyFile, storyDir }) => {\n    // ...Previously existing code\n    describe(title, () => {\n      // ...Previously existing code\n      stories.forEach(({ name, story }) => {\n        // ...Previously existing code\n        testFn(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n\n          //👇 Define the path to save the snapshot to:\n          const snapshotPath = path.join(\n            storyDir,\n            options.snapshotsDirName,\n            `${componentName}${options.snapshotExtension}`,\n          );\n          expect(document.body.firstChild).toMatchSpecificSnapshot(snapshotPath);\n        });\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Release Branch Solution with Mermaid - Correct Workflow\nDESCRIPTION: Shows the proper branching strategy using separate release branches, demonstrating how changes are properly segregated and versioned. Illustrates the correct handling of simultaneous changes and version bumping.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'gitGraph': { 'mainBranchName': 'next' } } }%%\ngitGraph\n    commit type: HIGHLIGHT\n    branch next-release\n    branch new-feature\n    commit\n    commit\n    checkout next\n    merge new-feature type: HIGHLIGHT\n    branch some-simultanous-bugfix\n    commit\n    checkout next\n    branch version-non-patch-from-7.1.0-alpha.28\n    commit id: \"write changelog\"\n    checkout next\n    merge some-simultanous-bugfix id: \"whoops!\"\n    checkout next-release\n    merge version-non-patch-from-7.1.0-alpha.28\n    commit id: \"bump versions\" tag: \"v7.1.0-alpha.29\"\n    checkout next\n    merge next-release\n    branch version-non-patch-from-7.1.0-alpha.29\n    commit id: \"write changelog again\"\n    checkout next-release\n    merge version-non-patch-from-7.1.0-alpha.29\n    commit id: \"bump versions again\" tag: \"v7.1.0-alpha.30\"\n    checkout next\n    merge next-release\n```\n\n----------------------------------------\n\nTITLE: Updating Icon System Imports in Storybook\nDESCRIPTION: This snippet demonstrates how to update icon imports in Storybook 9.0. Several icon-related exports have been removed, and the new icon system from '@storybook/icons' should be used instead.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- import { Icons, IconButtonSkeleton } from '@storybook/components';\n+ import { ZoomIcon } from '@storybook/icons';\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook ESLint Plugin with pnpm\nDESCRIPTION: Installs eslint-plugin-storybook as a development dependency using pnpm package manager.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-plugin-storybook-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev eslint-plugin-storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with JavaScript\nDESCRIPTION: This snippet defines the Storybook configuration using JavaScript. It sets the framework, specifies story file patterns, and configures webpack to use an alias for the src directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution-atsign-import.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path';\n\nexport default {\n  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],\n  webpackFinal: async (config) => {\n    if (config.resolve) {\n      config.resolve.alias = {\n        ...config.resolve.alias,\n        '@': path.resolve(__dirname, '../src'),\n      };\n    }\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Testing Library in Storybook\nDESCRIPTION: This snippet demonstrates the incorrect way of importing and using the testing library in Storybook interactions. It imports from '@testing-library/react' instead of the recommended Storybook package.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/use-storybook-testing-library.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// wrong import!\nimport { within } from '@testing-library/react';\n\nDefault.play = async (context) => {\n  const canvas = within(context.canvasElement);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Stories with TypeScript\nDESCRIPTION: Demonstrates TypeScript configuration for Web Components in Storybook. It imports types from the web-components Storybook package, references the component by its tag name, and sets up a typed story with environment variable arguments.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Default: Story = {\n  args: {\n    exampleProp: process.env.EXAMPLE_VAR,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using prefers-color-scheme Media Query in CSS\nDESCRIPTION: Example of using the prefers-color-scheme media query to define different styles for light and dark themes.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --text-color: black;\n}\n@media (prefers-color-scheme: dark) {\n  html {\n    --text-color: white;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Theme Parameters with useThemeParameters (Deprecated)\nDESCRIPTION: A deprecated helper function that returns theme parameters. This hook should no longer be used; instead, access theme parameters directly via the context (context.parameters.themes).\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DecoratorHelpers } from '@storybook/addon-themes';\n\nconst { useThemeParameters } = DecoratorHelpers;\n\nexport const myCustomDecorator =\n  ({ themes, defaultState, ...rest }) =>\n  (storyFn, context) => {\n    const { themeOverride } = useThemeParameters();\n\n    // Snipped\n  };\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript definitions for Storybook 3.1.x\nDESCRIPTION: Command to add required TypeScript type definitions after they were moved to DefinitelyTyped in version 3.1.x.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#2025-04-22_snippet_175\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @types/node @types/react @types/storybook__react --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Framework, Stories, and TypeScript Checks in TypeScript\nDESCRIPTION: This TypeScript snippet defines the main Storybook configuration object. It specifies the placeholder `'@storybook/your-framework'` which needs replacement with the actual framework being used (e.g., `react-webpack5`), points to story files (`.mdx`, `.stories.*`) within the `../src` directory using glob patterns, and enables TypeScript checking (`check: true`) along with ESLint validation (`eslint: true`) via `checkOptions`.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-check-options.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-webpack5)\nimport type { StorybookConfig } from '@storybook/your-framework';\n\nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  typescript: {\n    check: true,\n    checkOptions: {\n      eslint: true,\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Rendering ResolvedReact Component in MDX\nDESCRIPTION: Includes the ResolvedReact component which likely displays React version information in a different context. This allows comparison between versions in MDX and in a React component.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/ResolvedReact.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<ResolvedReact />\n```\n\n----------------------------------------\n\nTITLE: Creating Button Stories in React with TypeScript Type Annotation\nDESCRIPTION: This snippet shows how to set up Button stories in React using TypeScript with explicit type annotations. It imports the Meta type from Storybook React, defines the metadata with proper type annotations, and configures background color parameters.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-parameters.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from './Button';\n\nimport type { Meta } from '@storybook/react';\n\nconst meta: Meta<typeof Button> = {\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/configure/#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Button',\n  component: Button,\n  //👇 Creates specific parameters for the story\n  parameters: {\n    backgrounds: {\n      values: [\n        { name: 'red', value: '#f00' },\n        { name: 'green', value: '#0f0' },\n      ],\n    },\n  },\n};\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook Addon Docs\nDESCRIPTION: Imports the Meta component from Storybook's addon-docs package, which is used to define metadata for the documentation page.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/UtfSymbolScroll.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install and sync Storybook modules with the source code\nSOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/server-kitchen-sink/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Setting current story name in browser title\nDESCRIPTION: Updates the UI to set the current story name in the browser title.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nUI: Set the current story name in the title\n```\n\n----------------------------------------\n\nTITLE: Removing Storybook Addon via CLI\nDESCRIPTION: Command to automatically remove a Storybook addon using the storybook remove command.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/install-addons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# With npm\nnpm run storybook remove @storybook/addon-a11y\n\n# With yarn\nyarn storybook remove @storybook/addon-a11y\n\n# With pnpm\npnpm storybook remove @storybook/addon-a11y\n```\n\n----------------------------------------\n\nTITLE: Defining Svelte Storybook Button Stories (JavaScript, Classic CSF)\nDESCRIPTION: Implements stories for a Svelte Button component using classic Storybook CSF in JavaScript. The default export indicates the Svelte component, and the Primary story is configured with prop arguments. This follows the conventional JS CSF syntax and only requires Svelte, the component, and Storybook for Svelte.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport Button from './Button.svelte';\n\nexport default {\n  component: Button,\n};\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Story Naming Example in JavaScript\nDESCRIPTION: Example showing incorrect story naming using camelCase instead of the recommended PascalCase convention.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/prefer-pascal-case.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const primaryButton = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Story\nDESCRIPTION: Demonstrates story configuration for Web Components using both JavaScript and TypeScript. Shows how to reference a custom element tag name and configure stories with environment variables.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  component: 'my-component',\n};\n\nexport const ExampleStory = {\n  args: {\n    propertyA: process.env.STORYBOOK_DATA_KEY,\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/web-components';\n\nconst meta: Meta = {\n  component: 'my-component',\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const ExampleStory: Story = {\n  args: {\n    propertyA: process.env.STORYBOOK_DATA_KEY,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Infinite Console Logging Loop\nDESCRIPTION: Creates an infinite loop that continuously prints 'it's a kind of magic' to the console. This is a basic example of an infinite while loop with string output.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.no-stories.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwhile(true) {\n  console.log(\"it's a kind of magic\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Component Stories with Satisfies Operator\nDESCRIPTION: Uses TypeScript 4.9's 'satisfies' operator to type-check the meta object against Storybook's Meta type. Provides a template that can be adapted for different renderers like react, vue3, or angular.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    value: {\n      description: 'The value of the slider',\n    },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Storybook Documentation\nDESCRIPTION: This YAML snippet defines metadata for a Storybook documentation page. It specifies the title, sidebar order, and sidebar title for the 'Get Started' section.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Get started with Storybook\nsidebar:\n  order: 1\n  title: Get Started\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Button Stories in Web Components with JavaScript (CSF 2)\nDESCRIPTION: Creates a default button story for Web Components using JavaScript and CSF 2 format. Destructures props from args and uses template literals with the html tag to render the custom button element.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Other imports and story implementation\n\nexport const Default = ({ primary, size, label }) =>\n  html`<custom-button ?primary=\"${primary}\" size=\"${size}\" label=\"${label}\"></custom-button>`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta with TypeScript 4.9 Satisfies Operator\nDESCRIPTION: Uses TypeScript 4.9's 'satisfies' operator to configure Storybook meta. This approach provides type safety while inferring the correct types from the Example component, applicable to any Storybook renderer.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)\nimport type { Meta } from '@storybook/your-renderer';\n\nimport { Example } from './Example';\n\nconst meta = {\n  component: Example,\n  argTypes: {\n    value: {\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n} satisfies Meta<typeof Example>;\n\nexport default meta;\n```\n\n----------------------------------------\n\nTITLE: Installing Chromatic Addon for Storybook\nDESCRIPTION: Command to install the @chromatic-com/storybook addon for enabling visual tests in Storybook.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/visual-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chromatic-com/storybook --save-dev\n```\n\n----------------------------------------\n\nTITLE: Custom Story Loading Implementation in Storybook\nDESCRIPTION: Advanced configuration using a custom async function to implement complex story loading logic beyond what standard glob patterns can achieve.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  stories: async () => {\n    // Implement custom logic to define where to load stories from\n    const results = await fetchConfigResultsFromDatabase();\n    return [\n      '../packages/core/stories/**.stories.mdx',\n      ...results.map(pkg => `../packages/${pkg}/stories/**.stories.@(js|jsx|mjs|ts|tsx)`)\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Framework Path Configuration\nDESCRIPTION: Configuration example for specifying a custom framework path in Storybook\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  framework: 'customFramework',\n  frameworkPath: require.resolve('customFramework'),\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading terser-webpack-plugin in Storybook\nDESCRIPTION: Bump terser-webpack-plugin from version 2.3.6 to 3.0.0.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nBump terser-webpack-plugin from 2.3.6 to 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Removing a Storybook Addon using the CLI\nDESCRIPTION: The 'remove' command deletes a Storybook addon from your project. Options include selecting a specific package manager, enabling debug mode, disabling telemetry, and enabling crash reports.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstorybook remove [addon] [options]\n```\n\n----------------------------------------\n\nTITLE: Correct Meta Title Definition in Storybook CSF 3.0 - JavaScript\nDESCRIPTION: This example shows the correct approach by not including a title property, allowing Storybook to infer it from the file path. This practice keeps the codebase consistent with CSF 3.0 rules.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-title-property-in-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  component: Input, // no title necessary, it will be inferred from path on disk!\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Override for Custom Storybook Config Directory\nDESCRIPTION: Configuration to apply the rule to a custom Storybook configuration directory.\nSOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  overrides: [\n      {\n        files: ['your-config-dir/main.@(js|cjs|mjs|ts)'],\n        rules: {\n          'storybook/no-uninstalled-addons': 'error'\n        },\n      },\n    ],\n}\n```"
  }
]