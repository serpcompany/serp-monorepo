[
  {
    "owner": "ueberdosis",
    "repo": "hocuspocus",
    "content": "TITLE: Configuring and Running Hocuspocus Server\nDESCRIPTION: Basic setup code for initializing and starting a Hocuspocus server. This creates a new server instance with a specified port and starts listening for connections.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/getting-started.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\n// Configure the server â€¦\nconst server = new Server({\n  port: 1234,\n});\n\n// â€¦ and run it!\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Initializing Hocuspocus Built-in Server\nDESCRIPTION: Sets up a Hocuspocus server with built-in webserver and websocket support. Demonstrates instantiation with port configuration, starting the server with listen(), and shutting it down with destroy().\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\n// Configure the server\nconst server = new Server({\n  port: 1234,\n});\n\n// Listen â€¦\nserver.listen();\n\n// Destroy â€¦\nserver.destroy();\n```\n\n----------------------------------------\n\nTITLE: Complete Hocuspocus Awareness Implementation Example\nDESCRIPTION: A full working example that demonstrates setting up a Hocuspocus provider with awareness support. This code tracks mouse movements and shares the user's name, color, and cursor position with other connected users.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/awareness.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Y from 'yjs'\nimport { HocuspocusProvider } from '@hocuspocus/provider'\n\n// Set up the provider\nprovider = new HocuspocusProvider({\n  url: \"ws://127.0.0.1:1234\",\n  name: \"awareness-example\",\n  document: new Y.Doc(),\n  // Listen for updates â€¦\n  onAwarenessUpdate: ({ states }) => {\n    console.log(states);\n  },\n});\n\n// For example, listen for mouse movements\ndocument.addEventListener(\"mousemove\", (event) => {\n  // Share any information you like\n  provider.setAwarenessField(\"user\", {\n    name: \"Kevin Jahns\",\n    color: \"#ffcc00\",\n    mouseX: event.clientX,\n    mouseY: event.clientY,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Hocuspocus Server\nDESCRIPTION: Installation commands for the Hocuspocus server package using npm or yarn. Note that yarn requires explicitly installing peer dependencies (y-protocols and yjs).\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/getting-started.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/server\n\n# Please note, yarn does not install peer-deps by default, so when using yarn,\n# you'll need to install y-protocols and yjs as well.\nyarn add @hocuspocus/server y-protocols yjs\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Hocuspocus Server\nDESCRIPTION: Demonstrates how to implement authentication and authorization in a Hocuspocus server with token validation and contextual user data.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from '@hocuspocus/server'\n\nconst server = Server.configure({\n  async onAuthenticate({ token }) {\n    // Example test if a user is authenticated\n    if (token !== 'super-secret-token') {\n      throw new Error('Not authorized!')\n    }\n\n    // You can set contextual data to use it in other hooks\n    return {\n      user: {\n        id: 1234,\n        name: 'John',\n      },\n    }\n  },\n})\n\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Installing Hocuspocus Frontend Dependencies\nDESCRIPTION: Installation command for the Hocuspocus client provider and Y.js, which are required for the frontend implementation.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/getting-started.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/provider yjs\n```\n\n----------------------------------------\n\nTITLE: Initializing Hocuspocus Server with SQLite Extension in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up a Hocuspocus WebSocket server with SQLite extension. It configures the server port, defines an onConnect callback, and adds the SQLite extension with a specified database file.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from '@hocuspocus/server'\nimport { SQLite } from '@hocuspocus/extension-sqlite'\n\nconst server = new Server({\n  port: 1234,\n\n  async onConnect() {\n    console.log('ðŸ”®')\n  },\n\n  extensions: [\n    new SQLite({\n      database: 'db.sqlite',\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hocuspocus Extension with TypeScript\nDESCRIPTION: Example showing how to create a class that implements the Extension interface from @hocuspocus/server with all available hooks. Each hook is implemented as an async function that returns a Promise as required by the interface.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/custom-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Extension,\n  onChangePayload,\n  onConnectPayload,\n  onAuthenticatePayload,\n  onLoadDocumentPayload,\n  onDisconnectPayload,\n} from \"@hocuspocus/server\";\n\nexport class MyHocuspocusExtension implements Extension {\n  async onLoadDocument(data: onLoadDocumentPayload): Promise<void> {}\n\n  async onChange(data: onChangePayload): Promise<void> {}\n\n  async onConnect(data: onConnectPayload): Promise<void> {}\n\n  async onAuthenticate(data: onAuthenticatePayload): Promise<void> {}\n\n  async onDisconnect(data: onDisconnectPayload): Promise<void> {}\n\n  async onRequest(data: onRequestPayload): Promise<void> {}\n\n  async onUpgrade(data: onUpgradePayload): Promise<void> {}\n\n  async onListen(data: onListenPayload): Promise<void> {}\n\n  async onDestroy(data: onDestroyPayload): Promise<void> {}\n\n  async onConfigure(data: onConfigurePayload): Promise<void> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Hook in Hocuspocus Server\nDESCRIPTION: Example of implementing the onAuthenticate hook in Hocuspocus server to validate client tokens and set user context. Demonstrates error handling for unauthorized access and returning user data for authenticated sessions.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/auth.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onAuthenticate(data) {\n    const { token } = data;\n\n    // Example test if a user is authenticated with a token passed from the client\n    if (token !== \"super-secret-token\") {\n      throw new Error(\"Not authorized!\");\n    }\n\n    // You can set contextual data to use it in other hooks\n    return {\n      user: {\n        id: 1234,\n        name: \"John\",\n      },\n    };\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Implementing Hocuspocus Client with Y.js\nDESCRIPTION: Frontend code for connecting to a Hocuspocus server and working with a shared document. This example creates a WebSocket connection, initializes a shared array, sets up change observation, and demonstrates adding an item to the array.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/getting-started.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as Y from \"yjs\";\nimport { HocuspocusProvider } from \"@hocuspocus/provider\";\n\n// Connect it to the backend\nconst provider = new HocuspocusProvider({\n  url: \"ws://127.0.0.1:1234\",\n  name: \"example-document\",\n});\n\n// Define `tasks` as an Array\nconst tasks = provider.document.getArray(\"tasks\");\n\n// Listen for changes\ntasks.observe(() => {\n  console.log(\"tasks were modified\");\n});\n\n// Add a new task\ntasks.push([\"buy milk\"]);\n```\n\n----------------------------------------\n\nTITLE: Connecting a Y.js Document to Hocuspocus Server\nDESCRIPTION: Basic implementation of the Hocuspocus provider to connect a Y.js document to a server. This code creates a Y.js document and initializes the provider with the server URL, document name, and the Y.js document instance.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/installation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Y from 'yjs'\nimport { HocuspocusProvider } from '@hocuspocus/provider'\n\nconst ydoc = new Y.Doc()\n\nconst provider = new HocuspocusProvider({\n  url: 'ws://127.0.0.1:1234',\n  name: 'example-document',\n  document: ydoc,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Hocuspocus Server in JavaScript\nDESCRIPTION: This snippet demonstrates how to import, configure, and start a Hocuspocus server instance with custom settings. It shows how to set server name, port, timeout intervals, debounce settings, and quiet mode.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  name: \"hocuspocus-fra1-01\",\n  port: 1234,\n  timeout: 30000,\n  debounce: 5000,\n  maxDebounce: 30000,\n  quiet: true,\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Persistence with Hocuspocus Server Hooks in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up a Hocuspocus server with hooks for storing and loading documents. It uses the onStoreDocument and onLoadDocument hooks to interact with a database, and includes a function to create an initial document template.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/persistence.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { debounce } from \"debounce\";\nimport { Server } from \"@hocuspocus/server\";\nimport { Doc } from \"yjs\";\n\nlet debounced;\n\nconst server = new Server({\n  async onStoreDocument(data) {\n    // Save to database. Example:\n    // saveToDatabase(data.document, data.documentName);\n  },\n\n  async onLoadDocument(data): Doc {\n    return loadFromDatabase(data.documentName) || createInitialDocTemplate();\n  },\n});\n\nserver.listen();\n\nfunction createInitialDocTemplate() {\n  return new Doc();\n  // do anything you want here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hocuspocus Database Extension with SQLite\nDESCRIPTION: Complete example of how to configure and use the Database extension with a SQLite backend. The example demonstrates setting up the fetch function to retrieve document data and the store function to save document state.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/database.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Database } from \"@hocuspocus/extension-database\";\nimport sqlite3 from \"sqlite3\";\n\nconst server = new Server({\n  extensions: [\n    new Database({\n      // Return a Promise to retrieve data â€¦\n      fetch: async ({ documentName }) => {\n        return new Promise((resolve, reject) => {\n          this.db?.get(\n            `\n            SELECT data FROM \"documents\" WHERE name = $name ORDER BY rowid DESC\n          `,\n            {\n              $name: documentName,\n            },\n            (error, row) => {\n              if (error) {\n                reject(error);\n              }\n\n              resolve(row?.data);\n            }\n          );\n        });\n      },\n      // â€¦ and a Promise to store data:\n      store: async ({ documentName, state }) => {\n        this.db?.run(\n          `\n          INSERT INTO \"documents\" (\"name\", \"data\") VALUES ($name, $data)\n            ON CONFLICT(name) DO UPDATE SET data = $data\n        `,\n          {\n            $name: documentName,\n            $data: state,\n          }\n        );\n      },\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Configuring onAuthenticate Hook with Advanced Options\nDESCRIPTION: Shows an advanced configuration of the onAuthenticate hook, including token verification, setting read-only access, and returning contextual data for use in other hooks.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onAuthenticate(data) {\n    const { token } = data;\n\n    // Example test if a user is authenticated using a\n    // request parameter\n    if (token !== \"super-secret-token\") {\n      throw new Error(\"Not authorized!\");\n    }\n\n    // Example to set a document to read only for the current user\n    // thus changes will not be accepted and synced to other clients\n    if (someCondition === true) {\n      data.connection.readOnly = true;\n    }\n\n    // You can set contextual data to use it in other hooks\n    return {\n      user: {\n        id: 1234,\n        name: \"John\",\n      },\n    };\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Express Integration with Hocuspocus\nDESCRIPTION: Implementation of Hocuspocus with Express.js framework using express-ws for WebSocket support. Shows setup of HTTP and WebSocket routes with user context handling.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/examples.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from \"express\";\nimport expressWebsockets from \"express-ws\";\nimport { Hocuspocus } from \"@hocuspocus/server\";\n\n// Configure Hocuspocus\nconst hocuspocus = new Hocuspocus({\n  // ...\n});\n\n// Setup your express instance using the express-ws extension\nconst { app } = expressWebsockets(express());\n\n// A basic http route\napp.get(\"/\", (request, response) => {\n  response.send(\"Hello World!\");\n});\n\n// Add a websocket route for Hocuspocus\n// You can set any contextual data like in the onConnect hook\n// and pass it to the handleConnection method.\napp.ws(\"/collaboration\", (websocket, request) => {\n  const context = {\n    user: {\n      id: 1234,\n      name: \"Jane\",\n    },\n  };\n\n  hocuspocus.handleConnection(websocket, request, context);\n});\n\n// Start the server\napp.listen(1234, () => console.log(\"Listening on http://127.0.0.1:1234\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing the onChange Hook with Document Saving in Hocuspocus Server\nDESCRIPTION: Example of implementing the onChange hook to save document changes to a JSON file. Uses debouncing to prevent excessive file operations and demonstrates how to transform Y.js documents to JSON format.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { debounce } from \"debounce\";\nimport { Server } from \"@hocuspocus/server\";\nimport { TiptapTransformer } from \"@hocuspocus/transformer\";\nimport { writeFile } from \"fs\";\n\nlet debounced;\n\nconst server = new Server({\n  async onChange(data) {\n    const save = () => {\n      // Convert the y-doc to something you can actually use in your views.\n      // In this example we use the TiptapTransformer to get JSON from the given\n      // ydoc.\n      const prosemirrorJSON = TiptapTransformer.fromYdoc(data.document);\n\n      // Save your document. In a real-world app this could be a database query\n      // a webhook or something else\n      writeFile(`/path/to/your/documents/${data.documentName}.json`, prosemirrorJSON);\n\n      // Maybe you want to store the user who changed the document?\n      // Guess what, you have access to your custom context from the\n      // onConnect hook here. See authorization & authentication for more\n      // details\n      console.log(`Document ${data.documentName} changed by ${data.context.user.name}`);\n    };\n\n    debounced?.clear();\n    debounced = debounce(save, 4000);\n    debounced();\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap with Hocuspocus for Collaborative Editing\nDESCRIPTION: Setting up a Tiptap editor instance with Hocuspocus provider for real-time collaborative editing. Configures the editor with StarterKit, Collaboration, and CollaborationCursor extensions.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport CollaborationCursor from '@tiptap/extension-collaboration-cursor'\nimport * as Y from 'yjs'\nimport { HocuspocusProvider } from '@hocuspocus/provider'\n\nconst ydoc = new Y.Doc();\n\nconst provider = new HocuspocusProvider({\n  url: \"ws://127.0.0.1\",\n  name: \"example-document\",\n  document: ydoc,\n});\n\nnew Editor({\n  element: document.querySelector(\".element\"),\n  extensions: [\n    StarterKit.configure({\n      history: false,\n    }),\n    Collaboration.configure({\n      document: ydoc,\n    }),\n    CollaborationCursor.configure({\n      provider,\n      user: { name: \"John Doe\", color: \"#ffcc00\" },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hocuspocus Server with SQLite Extension\nDESCRIPTION: Example of setting up a Hocuspocus server with the SQLite extension. The example shows how to configure the extension with a persistent file-based database instead of the default in-memory storage.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/sqlite.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { SQLite } from \"@hocuspocus/extension-sqlite\";\n\nconst server = new Server({\n  extensions: [\n    new SQLite({\n      database: \"db.sqlite\",\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Collaboration Cursor Implementation\nDESCRIPTION: JavaScript setup for showing collaborative cursors and selections using the CollaborationCursor extension\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport CollaborationCursor from '@tiptap/extension-collaboration-cursor'\nimport { HocuspocusProvider } from '@hocuspocus/provider'\n\n// Set up the Hocuspocus WebSocket provider\nconst provider = new HocuspocusProvider({\n  url: 'ws://127.0.0.1:1234',\n  name: 'example-document',\n})\n\nconst editor = new Editor({\n  extensions: [\n    StarterKit.configure({\n      // The Collaboration extension comes with its own history handling\n      history: false,\n    }),\n    Collaboration.configure({\n      document: provider.document,\n    }),\n    // Register the collaboration cursor extension\n    CollaborationCursor.configure({\n      provider: provider,\n      user: {\n        name: 'Cyndi Lauper',\n        color: '#f783ac',\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring onAuthenticate Hook in Hocuspocus Server\nDESCRIPTION: Demonstrates how to set up the onAuthenticate hook for the Hocuspocus server. This hook is called when the server receives an authentication request from the client provider.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onAuthenticate({ documentName, token }) {\n    // Could be an API call, DB query or whatever â€¦\n    // The endpoint should return 200 OK in case the user is authenticated, and an http error\n    // in case the user is not.\n    return axios.get(\"/user\", {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiplexing with TiptapCollab or Hocuspocus\nDESCRIPTION: Example of using multiplexing to open multiple documents over the same websocket connection. Shows how to create a shared socket with TiptapCollabProviderWebsocket and separate document providers with TiptapCollabProvider.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TiptapCollabProvider,\n  TiptapCollabProviderWebsocket\n} from \"@hocuspocus/provider\";\n\nconst socket = new TiptapCollabProviderWebsocket({\n  appId: '', // or `url` if using `HocuspocusProviderWebsocket`\n})\n\nconst provider1 = new TiptapCollabProvider({\n  websocketProvider: socket,\n  name: 'document1',\n  token: '',\n})\n\nconst provider2 = new TiptapCollabProvider({\n  websocketProvider: socket,\n  name: 'document2',\n  token: '',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Hocuspocus Servers with Redis and SQLite\nDESCRIPTION: Example of setting up two Hocuspocus server instances that synchronize through Redis and use SQLite for persistence. Each server requires a unique name and can run on a different port but connects to the same Redis instance.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/redis.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Logger } from \"@hocuspocus/extension-logger\";\nimport { Redis } from \"@hocuspocus/extension-redis\";\nimport { SQLite } from \"@hocuspocus/extension-sqlite\";\n\n// Server 1\nconst server = new Server({\n  name: \"server-1\", // make sure to use unique server names\n  port: 1234,\n  extensions: [\n    new Logger(),\n    new Redis({\n      host: \"127.0.0.1\", // make sure to use the same Redis instance :-)\n      port: 6379,\n    }),\n    new SQLite(),\n  ],\n});\n\nserver.listen();\n\n// Server 2\nconst anotherServer = new Server({\n  name: \"server-2\",\n  port: 1235,\n  extensions: [\n    new Logger(),\n    new Redis({\n      host: \"127.0.0.1\",\n      port: 6379,\n    }),\n    new SQLite(),\n  ],\n});\n\nanotherServer.listen();\n```\n\n----------------------------------------\n\nTITLE: Creating Configurable Hocuspocus Extension with TypeScript\nDESCRIPTION: Complete implementation of a Hocuspocus extension with configuration options. The example shows how to define an interface for configuration, set default values, and merge user-provided config with defaults in the constructor.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/custom-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Extension,\n  onChangePayload,\n  onConnectPayload,\n  onAuthenticatePayload,\n  onLoadDocumentPayload,\n  onDisconnectPayload,\n} from \"@hocuspocus/server\";\n\nexport interface Configuration {\n  myConfigurationOption: string;\n  myOptionalConfigurationOption: number | undefined;\n}\n\nexport class MyHocuspocusExtension implements Extension {\n  configuration: Configuration = {\n    myConfigurationOption: \"foobar\",\n    myOptionalConfigurationOption: 42,\n  };\n\n  constructor(configuration?: Partial<Configuration>) {\n    this.configuration = { ...this.configuration, ...configuration };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onLoadDocument(data: onLoadDocumentPayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onChange(data: onChangePayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onConnect(data: onConnectPayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onAuthenticate(data: onAuthenticatePayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onDisconnect(data: onDisconnectPayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onRequest(data: onRequestPayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onUpgrade(data: onUpgradePayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onListen(data: onListenPayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onDestroy(data: onDestroyPayload): Promise<void> {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async onConfigure(data: onConfigurePayload): Promise<void> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the onLoadDocument Hook in Hocuspocus Server\nDESCRIPTION: Example of implementing the onLoadDocument hook to fetch a Y.js document from storage. This hook is called to load existing data when a document is requested.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from '@hocuspocus/server'\n\nconst server = new Server({\n  async onLoadDocument(data) {\n    // fetch the Y.js document from somewhere\n    const ydoc = â€¦\n\n    return ydoc\n  },\n})\n\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hocuspocus Client with Authentication Token\nDESCRIPTION: Configuration example for Hocuspocus client provider showing how to pass authentication token to the server.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/auth.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew HocuspocusProvider({\n  url: \"ws://127.0.0.1:1234\",\n  name: \"example-document\",\n  document: ydoc,\n  token: \"super-secret-token\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom WebSocket Routes with onUpgrade Hook in Hocuspocus\nDESCRIPTION: Example of using the onUpgrade hook to create custom WebSocket routes on the same port as Hocuspocus. This example demonstrates creating a separate WebSocketServer to handle specific route upgrades.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport WebSocket, { WebSocketServer } from \"ws\";\n\nconst server = new Server({\n  onUpgrade(data) {\n    return new Promise((resolve, reject) => {\n      const { request, socket, head } = data;\n\n      // Check if the request hits your custom route\n      if (request.url?.split(\"/\")[1] === \"custom-route\") {\n        // Create your own websocket server to upgrade the request, make\n        // sure noServer is set to true, because we're handling the upgrade\n        // ourselves\n        const websocketServer = new WebSocketServer({ noServer: true });\n        websocketServer.on(\"connection\", (connection: WebSocket, request: IncomingMessage) => {\n          // Put your application logic here to respond to new connections\n          // and subscribe to incoming messages\n          console.log(\"A new connection to our websocket server!\");\n        });\n\n        // Handle the upgrade request within your own websocket server\n        websocketServer.handleUpgrade(request, socket, head, (ws) => {\n          websocketServer.emit(\"connection\", ws, request);\n        });\n\n        // Rejecting the promise will stop the chain and no further\n        // onUpgrade hooks are run\n        return reject();\n      }\n\n      resolve();\n    });\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexical Editor with Hocuspocus Provider for Collaboration\nDESCRIPTION: React implementation of Lexical editor with TiptapCollabProvider for collaborative editing. Creates a Lexical composer with a collaboration plugin that connects to a Y.js document through Hocuspocus.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LexicalComposer } from \"@lexical/react/LexicalComposer\";\nimport { ContentEditable } from \"@lexical/react/LexicalContentEditable\";\nimport { PlainTextPlugin } from \"@lexical/react/LexicalPlainTextPlugin\";\nimport LexicalErrorBoundary from \"@lexical/react/LexicalErrorBoundary\";\nimport { CollaborationPlugin } from \"@lexical/react/LexicalCollaborationPlugin\";\nimport * as Y from \"yjs\";\nimport { TiptapCollabProvider } from \"@hocuspocus/provider\";\n\nexport default function Editor({\n  initialEditorState,\n  key\n}: {\n  initialEditorState: string | null;\n  key: string;\n}) {\n  return (\n    <LexicalComposer\n      key={key}\n      initialConfig={{\n        editorState: null,\n        namespace: \"test\",\n      }}\n    >\n      <PlainTextPlugin\n        contentEditable={<ContentEditable />}\n        placeholder={<div>Enter some text...</div>}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <CollaborationPlugin\n        id={key}\n        providerFactory={createWebsocketProvider}\n        initialEditorState={initialEditorState}\n        shouldBootstrap={true}\n      />\n    </LexicalComposer>\n);\n}\n\nfunction createWebsocketProvider(\n  id: string,\n  yjsDocMap: Map<string, Y.Doc>\n): Provider {\n  const doc = new Y.Doc();\n  yjsDocMap.set(id, doc);\n\n// @TODO: REPLACE APP ID\n// @TODO: PUT PROPER TOKEN\n// @TODO: OR USE `HocuspocusProvider` with Hocuspocus URL\n  const hocuspocusProvider = new TiptapCollabProvider({\n    appId: 'YOUR_APP_ID',\n    name: `lexical-${id}`,\n    token: 'YOUR_TOKEN',\n    document: doc,\n  });\n\n  return hocuspocusProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeHandleMessage Hook in Hocuspocus Server\nDESCRIPTION: Shows how to implement the beforeHandleMessage hook, which is called when a message is received by the server before handling or applying it. This example demonstrates rejecting a message if the authentication token has expired.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { debounce } from \"debounce\";\nimport { Server } from \"@hocuspocus/server\";\nimport { TiptapTransformer } from \"@hocuspocus/transformer\";\nimport { writeFile } from \"fs\";\n\nlet debounced;\n\nconst server = new Server({\n  beforeHandleMessage(data) {\n    if (data.context.tokenExpiresAt <= new Date()) {\n      const error: CloseEvent = {\n        reason: \"Token expired\",\n      };\n\n      throw error;\n    }\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Hocuspocus Server\nDESCRIPTION: Demonstrates how to create, start, and stop a Hocuspocus server instance. Shows basic server configuration with a custom port and essential lifecycle management methods.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\n// Configure â€¦\nconst server = new Server({\n  port: 1234,\n});\n\n// Listen â€¦\nserver.listen();\n\n// Destroy â€¦\nserver.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Awareness Field in Hocuspocus Provider\nDESCRIPTION: Sets an awareness field for the current user by providing a key and associated data. This example sets a 'user' field with name and color properties that will be shared with other connected users.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/awareness.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the awareness field for the current user\nprovider.setAwarenessField(\"user\", {\n  name: \"Kevin Jahns\",\n  color: \"#ffcc00\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the onConnect Hook in Hocuspocus Server\nDESCRIPTION: Example of implementing the onConnect hook to log when a new WebSocket connection is established. Throwing an exception or rejecting the Promise will terminate the connection.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onConnect(data) {\n    // Output some information\n    console.log(`New websocket connection`);\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Document Transformer for Hocuspocus Webhook\nDESCRIPTION: Example showing how to implement a custom transformer for converting between Y-docs and your application's document format, by providing toYdoc and fromYdoc functions.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Webhook } from \"@hocuspocus/extension-webhook\";\nimport { Doc } from \"yjs\";\n\nconst server = new Server({\n  extensions: [\n    new Webhook({\n      url: \"https://example.com/api/webhook\",\n      secret: \"459824aaffa928e05f5b1caec411ae5f\",\n\n      transformer: {\n        toYdoc(document: any, fieldName: string): Doc {\n          // convert the given document (from your api) to a ydoc using the provided fieldName\n          return new Doc();\n        },\n        fromYdoc(document: Doc): any {\n          // convert the ydoc to your representation\n          return document.toJSON();\n        },\n      },\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Handling Stateless WebSocket Messages in Hocuspocus\nDESCRIPTION: Example of using the onStateless hook to handle stateless messages and broadcast responses. This demonstrates both broadcasting to all connections and sending targeted messages.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nimport { Server } from '@hocuspocus/server'\n\nconst server = new Server({\n  async onStateless({ payload, document, connection }) {\n    // Output some information\n    console.log(`Server has received a stateless message \"${payload}\"!`)\n    // Broadcast a stateless message to all connections based on document\n    document.broadcastStateless('This is a broadcast message.')\n    // Send a stateless message to a specific connection\n    connection.sendStateless('This is a specific message.')\n  },\n})\n\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Extension with Hocuspocus Server\nDESCRIPTION: Basic configuration for integrating the Redis extension with a Hocuspocus server. Requires specifying the Redis host and port to establish a connection.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/redis.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Redis } from \"@hocuspocus/extension-redis\";\n\nconst server = new Server({\n  extensions: [\n    new Redis({\n      // [required] Hostname of your Redis instance\n      host: \"127.0.0.1\",\n\n      // [required] Port of your Redis instance\n      port: 6379,\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Handling onCreate Webhook Response in JavaScript\nDESCRIPTION: Example showing how to respond to an onCreate webhook by providing initial document content for different fields. This allows importing documents into Hocuspocus when they are first created.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nresponse.writeHead(200, { \"Content-Type\": \"application/json\" });\nresponse.end(\n  JSON.stringify({\n    // Document for the \"secondary\" field\n    secondary: {},\n    // Document for the \"default\" field\n    default: {\n      type: \"doc\",\n      content: [\n        {\n          type: \"paragraph\",\n          content: [\n            {\n              type: \"text\",\n              text: \"What is love?\",\n            },\n          ],\n        },\n      ],\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Inspecting Sync Messages with beforeSync Hook in Hocuspocus\nDESCRIPTION: Example of using the beforeSync hook to inspect synchronization messages before they are applied to a document. This allows examining the payload and message type.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nimport { Server } from '@hocuspocus/server'\n\nconst server = new Server({\n  async beforeSync({ payload, document, documentName, type }) {\n    console.log(`Server will handle a sync message: \"${payload}\"!`)\n  },\n})\n\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Routes with onRequest Hook in Hocuspocus\nDESCRIPTION: Example of using the onRequest hook to create custom HTTP routes on the same port as the Hocuspocus server. This implementation checks for a specific route and returns a custom response.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  onRequest(data) {\n    return new Promise((resolve, reject) => {\n      const { request, response } = data;\n\n      // Check if the request hits your custom route\n      if (request.url?.split(\"/\")[1] === \"custom-route\") {\n        // Respond with your custom content\n        response.writeHead(200, { \"Content-Type\": \"text/plain\" });\n        response.end(\"This is my custom response, yay!\");\n\n        // Rejecting the promise will stop the chain and no further\n        // onRequest hooks are run\n        return reject();\n      }\n\n      resolve();\n    });\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Hono Integration with Hocuspocus\nDESCRIPTION: Integration example of Hocuspocus with Hono framework, including Node.js-specific WebSocket setup and server configuration.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/examples.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { Hocuspocus } from \"@hocuspocus/server\";\n\n// Node.js specific\nimport { serve } from \"@hono/node-server\";\nimport { createNodeWebSocket } from \"@hono/node-ws\";\n\n// Configure Hocuspocus\nconst hocuspocus = new Hocuspocus({\n  // â€¦\n});\n\n// Setup Hono server\nconst app = new Hono();\n\n// Node.js specific\nconst { injectWebSocket, upgradeWebSocket } = createNodeWebSocket({ app });\n\n// We mount HocusPocus in the Hono server\napp.get(\n  \"/hocuspocus\",\n  upgradeWebSocket((c) => ({\n    onOpen(_evt, ws) {\n      hocuspocus.handleConnection(ws.raw, c.req.raw as any);\n    },\n  }))\n);\n\n// Start server\nconst server = serve({\n  fetch: app.fetch,\n  port: 8787,\n}, (info) => {\n  hocuspocus.hooks('onListen', {\n    instance: hocuspocus,\n    configuration: hocuspocus.configuration,\n    port: info.port\n  })\n});\n\n// Setup WebSocket support (Node.js specific)\ninjectWebSocket(server);\n```\n\n----------------------------------------\n\nTITLE: Listening for Awareness Updates in Hocuspocus\nDESCRIPTION: Registers an event listener to receive and react to changes in awareness states from all connected users. The callback provides a 'states' object containing all current awareness information.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/awareness.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen for updates to the states of all users\nprovider.on(\"awarenessUpdate\", ({ states }) => {\n  console.log(states);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Throttle Extension in Hocuspocus Server\nDESCRIPTION: Example of how to configure and use the Throttle extension with a Hocuspocus server. The extension is initialized with optional parameters to control throttling limits and ban duration for IP addresses that exceed the connection threshold.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/throttle.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Throttle } from \"@hocuspocus/extension-throttle\";\n\nconst server = new Server({\n  extensions: [\n    new Throttle({\n      // [optional] allows up to 15 connection attempts per ip address per minute.\n      // set to null or false to disable throttling, defaults to 15\n      throttle: 15,\n\n      // [optional] bans ip addresses for 5 minutes after reaching the threshold\n      // defaults to 5\n      banTime: 5,\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Using Yjs Fragments for Nested Document Structure in JavaScript\nDESCRIPTION: Shows how to use different fragments of a Yjs document to create nested structures like a blog post with title and content.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/multi-subdocuments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ydoc = new Y.Doc();\n\nconst titleEditor = new Editor({\n  extensions: [\n    Collaboration.configure({\n      document: this.ydoc,\n      field: \"title\",\n    }),\n  ],\n})\n\nconst bodyEditor = new Editor({\n  extensions: [\n    Collaboration.configure({\n      document: this.ydoc,\n      field: \"body\",\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Local Document Editing with Hocuspocus\nDESCRIPTION: Example of editing a document directly on the server using Hocuspocus' getDirectConnection method while maintaining hooks and syncing functionality.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/examples.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst hocuspocus = new Hocuspocus();\n\nconst docConnection = await hocuspocus.openDirectConnection('my-document', {})\n\nawait docConnection.transact((doc) => {\n  doc.getMap('test').set('a', 'b');\n});\n\nawait docConnection.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Implementing Monaco Editor with Y.js for Collaborative Editing\nDESCRIPTION: Configuration of Monaco editor with Y.js and Y-websocket for real-time collaboration. Sets up the Monaco environment, creates an editor instance, and connects it to a Y.js document using MonacoBinding.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Y from \"yjs\";\nimport { WebsocketProvider } from \"y-websocket\";\nimport { MonacoBinding } from \"y-monaco\";\nimport * as monaco from \"monaco-editor\";\n\nwindow.MonacoEnvironment = {\n  getWorkerUrl: function (moduleId, label) {\n    if (label === \"json\") {\n      return \"/monaco/dist/json.worker.bundle.js\";\n    }\n    if (label === \"css\") {\n      return \"/monaco/dist/css.worker.bundle.js\";\n    }\n    if (label === \"html\") {\n      return \"/monaco/dist/html.worker.bundle.js\";\n    }\n    if (label === \"typescript\" || label === \"javascript\") {\n      return \"/monaco/dist/ts.worker.bundle.js\";\n    }\n    return \"/monaco/dist/editor.worker.bundle.js\";\n  },\n};\n\nwindow.addEventListener(\"load\", () => {\n  const ydoc = new Y.Doc();\n  const provider = new WebsocketProvider(\n    \"wss://websocket.tiptap.dev\",\n    \"hocuspocus-demos-monaco\",\n    ydoc\n  );\n  const type = ydoc.getText(\"monaco\");\n\n  const editor = monaco.editor.create(document.querySelector(\".editor\"), {\n    value: \"\",\n    language: \"javascript\",\n    theme: \"vs-dark\",\n  });\n  const monacoBinding = new MonacoBinding(\n    type,\n    editor.getModel(),\n    new Set([editor]),\n    provider.awareness\n  );\n\n  window.example = { provider, ydoc, type, monacoBinding };\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Standalone Hocuspocus Instance\nDESCRIPTION: Demonstrates how to initialize Hocuspocus without the built-in server, which allows integration with other frameworks like Express. The example configures Hocuspocus with a custom name for identification.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/usage.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hocuspocus } from \"@hocuspocus/server\";\n\n// Configure hocuspocus\nconst hocuspocus = new Hocuspocus({\n  name: \"hocuspocus-fra1-01\",\n})\n\n// â€¦\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Mode in Hocuspocus Server\nDESCRIPTION: Example showing how to implement read-only access control using the onAuthenticate hook. Demonstrates checking user permissions and setting connection to read-only mode.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/auth.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst usersWithWriteAccess = [\"jane\", \"john\", \"christina\"];\n\nconst server = new Server({\n  async onAuthenticate(data): Doc {\n    // Example code to check if the current user has write access by a\n    // request parameter. In a real world application you would probably\n    // get the user by a token from your database\n    if (!usersWithWriteAccess.includes(data.requestParameters.get(\"user\"))) {\n      // Set the connection to readonly\n      data.connection.readOnly = true;\n    }\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Configuring Quill Editor with Y.js for Real-time Collaboration\nDESCRIPTION: Integration of Quill editor with Y.js and Y-websocket for collaborative editing. Sets up a Quill instance with cursor support and binds it to a Y.js document using QuillBinding.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Quill from \"quill\";\nimport QuillCursors from \"quill-cursors\";\nimport * as Y from \"yjs\";\nimport { QuillBinding } from \"y-quill\";\nimport { WebsocketProvider } from \"y-websocket\";\n\nQuill.register(\"modules/cursors\", QuillCursors);\n\nvar ydoc = new Y.Doc();\nvar type = ydoc.getText(\"quill\");\nvar provider = new WebsocketProvider(\"wss://websocket.tiptap.dev\", \"hocuspocus-demos-quill\", ydoc);\n\nvar quill = new Quill(\".editor\", {\n  theme: \"snow\",\n  modules: {\n    cursors: true,\n    history: {\n      userOnly: true,\n    },\n  },\n});\n\nnew QuillBinding(type, quill, provider.awareness);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Field Collaboration in Tiptap\nDESCRIPTION: Shows how to configure multiple fields within a single Y.js document using different fragment names for the Collaboration extension.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// a Tiptap instance for the field\nCollaboration.configure({\n  document: ydoc,\n  field: 'title',\n})\n\n// and another instance for the summary, both in the same Y.js document\nCollaboration.configure({\n  document: ydoc,\n  field: 'summary',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing onAwarenessUpdate Hook in Hocuspocus Provider\nDESCRIPTION: Demonstrates how to use the onAwarenessUpdate hook in a Hocuspocus Provider. This hook is called when awareness changes, allowing you to track and react to awareness state updates.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = new HocuspocusProvider({\n  url: \"ws://127.0.0.1:1234\",\n  name: \"example-document\",\n  document: ydoc,\n  onAwarenessUpdate: ({ states }) => {\n    currentStates = states;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Y.js Document Using TiptapTransformer\nDESCRIPTION: Shows how to create a Y.js document from existing JSON data using the TiptapTransformer. This is useful for migrating data to the Y.js format, but not recommended as a permanent storage solution.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TiptapTransformer } from \"@hocuspocus/transformer\";\nimport Document from \"@tiptap/extension-document\";\nimport Paragraph from \"@tiptap/extension-paragraph\";\nimport Text from \"@tiptap/extension-text\";\n\nconst ydoc = TiptapTransformer.toYdoc(\n  // the actual JSON\n  json,\n  // the `field` you're using in Tiptap. If you don't know what that is, use 'default'.\n  \"default\",\n  // The Tiptap extensions you're using. Those are important to create a valid schema.\n  [Document, Paragraph, Text]\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Extension with Hocuspocus Server\nDESCRIPTION: Example showing how to import and register a custom extension with the Hocuspocus Server. The extension is initialized with custom configuration options that override the defaults.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/custom-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { MyHocuspocusExtension } from \"./extensions/my-hocuspocus-extension\";\n\nconst server = new Server({\n  extensions: [\n    new MyHocuspocusExtension({\n      myConfigurationOption: \"baz\",\n      myOptionalConfigurationOption: 1337,\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Using connected Hook in Hocuspocus Server\nDESCRIPTION: Demonstrates the usage of the connected hook, which is called after a new connection has been successfully established. This example logs the number of connections.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async connected() {\n    console.log(\"connections:\", server.getConnectionsCount());\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Setting up CodeMirror with Y-websocket for Collaborative Editing\nDESCRIPTION: Implementation of CodeMirror editor with Y.js and Y-websocket for collaborative editing. Creates a CodeMirror instance and binds it to a Y.js document using CodemirrorBinding.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Y from \"yjs\";\nimport { CodemirrorBinding } from \"y-codemirror\";\nimport { WebsocketProvider } from \"y-websocket\";\nimport CodeMirror from \"codemirror\";\n\nconst ydoc = new Y.Doc();\nvar provider = new WebsocketProvider(\n  \"wss://websocket.tiptap.dev\",\n  \"hocuspocus-demos-codemirror\",\n  ydoc\n);\nconst yText = ydoc.getText(\"codemirror\");\nconst yUndoManager = new Y.UndoManager(yText);\n\nconst editor = CodeMirror(document.querySelector(\".editor\"), {\n  mode: \"javascript\",\n  lineNumbers: true,\n});\n\nconst binding = new CodemirrorBinding(yText, editor, provider.awareness, { yUndoManager });\n```\n\n----------------------------------------\n\nTITLE: Configuring TiptapTransformer with Hocuspocus Webhook\nDESCRIPTION: Example showing how to configure the TiptapTransformer with specific Tiptap extensions for document transformation in the Webhook extension.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Webhook } from \"@hocuspocus/extension-webhook\";\nimport { TiptapTransformer } from \"@hocuspocus/transformer\";\nimport Document from \"@tiptap/extension-document\";\nimport Paragraph from \"@tiptap/extension-paragraph\";\nimport Text from \"@tiptap/extension-text\";\n\nconst server = new Server({\n  extensions: [\n    new Webhook({\n      url: \"https://example.com/api/webhook\",\n      secret: \"459824aaffa928e05f5b1caec411ae5f\",\n\n      transformer: TiptapTransformer.extensions([Document, Paragraph, Text]),\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Configuring Hocuspocus Server with Webhook Extension\nDESCRIPTION: Example configuration of a Hocuspocus server with the Webhook extension. Shows how to set up required parameters including URL, secret, transformer, and optional settings like events, debounce, and debounceMaxWait.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Webhook, Events } from \"@hocuspocus/extension-webhook\";\nimport { TiptapTransformer } from \"@hocuspocus/transformer\";\n\nconst server = new Server({\n  extensions: [\n    new Webhook({\n      // [required] url of your application\n      url: \"https://example.com/api/hocuspocus\",\n\n      // [required] a random string that will be used to verify the request signature\n      secret: \"459824aaffa928e05f5b1caec411ae5f\",\n\n      // [required] a transformer for your document\n      transformer: TiptapTransformer,\n\n      // [optional] array of events that will trigger a webhook\n      // defaults to [ Events.onChange ]\n      events: [Events.onConnect, Events.onCreate, Events.onChange, Events.onDisconnect],\n\n      // [optional] time in ms the change event should be debounced,\n      // defaults to 2000\n      debounce: 2000,\n\n      // [optional] time in ms after that the webhook will be sent\n      // regardless of the configured debouncing, defaults to 10000\n      debounceMaxWait: 10000,\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger Function\nDESCRIPTION: Example of creating a Hocuspocus server with a custom logging function. This allows for complete customization of how log messages are handled and processed.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/logger.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Logger } from \"@hocuspocus/extension-logger\";\n\nconst server = new Server({\n  extensions: [\n    new Logger({\n      log: (message) => {\n        // do something custom here\n        console.log(message);\n      },\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Configuring HocuspocusProvider with Event Listeners During Initialization\nDESCRIPTION: This example demonstrates how to pass event listeners to the HocuspocusProvider constructor during initialization. This approach ensures the event handlers are registered when the provider is created.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/events.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = new HocuspocusProvider({\n  url: \"ws://127.0.0.1:1234\",\n  name: \"example-document\",\n  document: ydoc,\n  onOpen() {\n    // â€¦\n  },\n  onConnect() {\n    // â€¦\n  },\n  onAuthenticated() {\n    // â€¦\n  },\n  onAuthenticationFailed: ({ reason }) => {\n    // â€¦\n  },\n  onStatus: ({ status }) => {\n    // â€¦\n  },\n  onMessage: ({ event, message }) => {\n    // â€¦\n  },\n  onOutgoingMessage: ({ message }) => {\n    // â€¦\n  },\n  onSynced: ({ state }) => {\n    // â€¦\n  },\n  onClose: ({ event }) => {\n    // â€¦\n  },\n  onDisconnect: ({ event }) => {\n    // â€¦\n  },\n  onDestroy() {\n    // â€¦\n  },\n  onAwarenessUpdate: ({ added, updated, removed }) => {\n    // â€¦\n  },\n  onAwarenessChange: ({ states }) => {\n    // â€¦\n  },\n  onStateless: ({ payload }) => {\n    // ...\n    // the provider can also send a custom message to the server: provider.sendStateless('any string payload')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Stateless Broadcasts with beforeBroadcastStateless in Hocuspocus\nDESCRIPTION: Example of using the beforeBroadcastStateless hook to intercept and log stateless messages before they are broadcast to connected clients.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nimport { Server } from '@hocuspocus/server'\n\nconst server = new Server({\n  beforeBroadcastStateless({ payload }) {\n    console.log(`Server will broadcast a stateless message: \"${payload}\"!`)\n  },\n})\n\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Fields into a Hocuspocus Document in TypeScript\nDESCRIPTION: Demonstrates how to merge multiple fields into a single Hocuspocus document using the TiptapTransformer and custom JSON generation.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/multi-subdocuments.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFileSync } from \"fs\";\nimport { Server } from \"@hocuspocus/server\";\nimport { TiptapTransformer } from \"@hocuspocus/transformer\";\nimport Document from \"@tiptap/extension-document\";\nimport Paragraph from \"@tiptap/extension-paragraph\";\nimport Text from \"@tiptap/extension-text\";\n\nconst generateSampleProsemirrorJson = (text: string) => {\n  return {\n    type: \"doc\",\n    content: [\n      {\n        type: \"paragraph\",\n        content: [\n          {\n            type: \"text\",\n            text,\n          },\n        ],\n      },\n    ],\n  };\n};\n\nconst server = new Server({\n  async onLoadDocument(data) {\n    // only import things if they are not already set in the primary storage\n    if (data.document.isEmpty(\"default\")) {\n      // Get a Y-Doc for the 'default' field â€¦\n      const defaultField = TiptapTransformer.toYdoc(\n        generateSampleProsemirrorJson(\"What is love?\"),\n        \"default\",\n        [(Document, Paragraph, Text)]\n      );\n      // â€¦ and merge it into the given document\n      data.document.merge(defaultField);\n    }\n    if (data.document.isEmpty(\"secondary\")) {\n      // Get a Y-Doc for the 'secondary' field â€¦\n      const secondaryField = TiptapTransformer.toYdoc(\n        generateSampleProsemirrorJson(\"Baby don't hurt meâ€¦\"),\n        \"secondary\",\n        [(Document, Paragraph, Text)]\n      );\n      // â€¦ and merge it into the given document\n      data.document.merge(secondaryField);\n    }\n  },\n});\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Binding Event Listeners After HocuspocusProvider Initialization\nDESCRIPTION: This snippet shows how to register event listeners after the HocuspocusProvider has been initialized, which allows for more flexibility in managing event handlers.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/events.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = new HocuspocusProvider({\n  // â€¦\n});\n\nprovider.on(\"synced\", () => {\n  // â€¦\n});\n```\n\n----------------------------------------\n\nTITLE: onStoreDocument Hook Payload Structure in Hocuspocus\nDESCRIPTION: The payload structure for onStoreDocument hooks that are called after document changes, used for persisting documents to storage. These hooks are debounced by default.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport { IncomingHttpHeaders } from \"http\";\nimport { URLSearchParams } from \"url\";\nimport { Doc } from \"yjs\";\n\nconst data = {\n  clientsCount: number,\n  context: any,\n  document: Doc,\n  documentName: string,\n  instance: Hocuspocus,\n  requestHeaders: IncomingHttpHeaders,\n  requestParameters: URLSearchParams,\n  socketId: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Collaboration\nDESCRIPTION: JavaScript setup for WebSocket-based collaborative editing using Hocuspocus provider\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport { HocuspocusProvider } from '@hocuspocus/provider'\n\n// Set up the Hocuspocus WebSocket provider\nconst provider = new HocuspocusProvider({\n  url: 'ws://127.0.0.1:1234',\n  name: 'example-document',\n})\n\nconst editor = new Editor({\n  extensions: [\n    StarterKit.configure({\n      // The Collaboration extension comes with its own history handling\n      history: false,\n    }),\n    // Register the document with Tiptap\n    Collaboration.configure({\n      document: provider.document,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Unbinding Event Listeners from HocuspocusProvider\nDESCRIPTION: This code demonstrates how to both bind and unbind event listeners from the HocuspocusProvider, which is useful for cleanup and preventing memory leaks.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/events.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst onMessage = () => {\n  // A new message comes in\n};\n\n// Bind â€¦\nprovider.on(\"onMessage\", onMessage);\n\n// â€¦ and unbind.\nprovider.off(\"onMessage\", onMessage);\n```\n\n----------------------------------------\n\nTITLE: Handling onConnect Webhook Response in JavaScript\nDESCRIPTION: Example showing how to handle the onConnect webhook on the server side, including authorization validation and returning context information that will be available throughout the application.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// authorize the user by the request parameters or headers\nif (payload.requestParameters?.get(\"token\") !== \"secret-api-token\") {\n  response.writeHead(403, \"unauthorized\");\n  return response.end();\n}\n\n// return context if authorized\nresponse.writeHead(200, { \"Content-Type\": \"application/json\" });\nresponse.end(\n  JSON.stringify({\n    user: {\n      id: 1,\n      name: \"Jane Doe\",\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Running Hocuspocus via CLI\nDESCRIPTION: Examples of running Hocuspocus using the command-line interface with various configuration options including port settings, webhook configuration, and SQLite support.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/examples.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @hocuspocus/cli\nnpx @hocuspocus/cli --port 8080\nnpx @hocuspocus/cli --webhook http://localhost/webhooks/hocuspocus\nnpx @hocuspocus/cli --sqlite\n```\n\n----------------------------------------\n\nTITLE: Implementing the onDisconnect Hook in Hocuspocus Server\nDESCRIPTION: Example of implementing the onDisconnect hook to log when a user disconnects from the server. Context contains data provided in former onConnect hooks.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onDisconnect(data) {\n    // Output some information\n    console.log(`\"${data.context.user.name}\" has disconnected.`);\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature in JavaScript\nDESCRIPTION: Example JavaScript function for verifying the signature of webhook requests from Hocuspocus using the secret key, SHA-256 hashing, and Node.js's timingSafeEqual for secure comparison.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IncomingMessage } from 'http'\n\nconst secret = '459824aaffa928e05f5b1caec411ae5f'\n\nconst verifySignature = (request: IncomingMessage): boolean => {\n  const signature = Buffer.from(request.headers['x-hocuspocus-signature-256'] as string)\n\n  const hmac = createHmac('sha256', secret)\n  const digest = Buffer.from(`sha256=${hmac.update(body).digest('hex')}`)\n\n  return signature.length !== digest.length || timingSafeEqual(digest, signature)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline Support\nDESCRIPTION: JavaScript setup for adding offline support using IndexedDB adapter\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport * as Y from 'yjs'\nimport { IndexeddbPersistence } from 'y-indexeddb'\n\nconst ydoc = new Y.Doc()\n\n// Store the Y document in the browser\nnew IndexeddbPersistence('example-document', ydoc)\n\nconst editor = new Editor({\n  extensions: [\n    // â€¦\n    Collaboration.configure({\n      document: ydoc,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: beforeSync Hook Payload Structure in Hocuspocus\nDESCRIPTION: The payload structure for beforeSync hooks that allow inspection of sync messages before they are applied to the document, including message type and binary payload.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst data = {\n  documentName: string,\n  document: Document,\n  // The y-protocols/sync message type\n  type: number,\n  // The payload of the y-protocols/sync message\n  payload: Uint8Array,\n}\n```\n\n----------------------------------------\n\nTITLE: Document Unload Notification with afterUnloadDocument in Hocuspocus\nDESCRIPTION: Example of using the afterUnloadDocument hook to handle cleanup after a document is closed. This hook runs even if a document load was aborted during the onLoadDocument phase.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async afterUnloadDocument(data) {\n    // Output some information\n    console.log(`Document ${data.documentName} was closed`);\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature in PHP\nDESCRIPTION: Example PHP function for verifying the signature of webhook requests from Hocuspocus using the secret key and SHA-256 hashing to ensure authenticity.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nfunction verifySignature(Request $request) {\n  $secret = '459824aaffa928e05f5b1caec411ae5f';\n\n  if (($signature = $request->headers->get('X-Hocuspocus-Signature-256')) == null) {\n      throw new Exception('Header not set');\n  }\n\n  $parts = explode('=', $signature);\n\n  if (count($parts) != 2) {\n      throw new Exception('Invalid signature format');\n  }\n\n  $digest = hash_hmac('sha256', $request->getContent(), $secret);\n\n  return hash_equals($digest, $parts[1]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger with Instance Name\nDESCRIPTION: Example of setting up the Logger extension with a named Hocuspocus server instance. This configuration prepends all logging messages with the specified server name.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/logger.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Logger } from \"@hocuspocus/extension-logger\";\n\nconst server = new Server({\n  name: \"hocuspocus-fra1-01\",\n  extensions: [new Logger()],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Installing Hocuspocus Provider via npm\nDESCRIPTION: Command to install the required packages for using Hocuspocus provider with Y.js.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/installation.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install yjs @hocuspocus/provider\n```\n\n----------------------------------------\n\nTITLE: Configuring WebRTC Collaboration\nDESCRIPTION: JavaScript setup for WebRTC-based collaborative editing in Tiptap with Y.js\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport * as Y from 'yjs'\nimport { WebrtcProvider } from 'y-webrtc'\n\n// A new Y document\nconst ydoc = new Y.Doc()\n// Registered with a WebRTC provider\nconst provider = new WebrtcProvider('example-document', ydoc)\n\nconst editor = new Editor({\n  extensions: [\n    StarterKit.configure({\n      // The Collaboration extension comes with its own history handling\n      history: false,\n    }),\n    // Register the document with Tiptap\n    Collaboration.configure({\n      document: ydoc,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for onLoadDocument in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the onLoadDocument hook, which includes context, document, document name, and request details. This hook is called to fetch existing data from storage.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Doc } from \"yjs\";\n\nconst data = {\n  context: any,\n  document: Doc,\n  documentName: string,\n  instance: Hocuspocus,\n  requestHeaders: IncomingHttpHeaders,\n  requestParameters: URLSearchParams,\n  socketId: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Hocuspocus Methods via Server Instance\nDESCRIPTION: Shows how to access the underlying Hocuspocus instance from the server to call its methods, such as getting document counts.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/usage.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// â€¦\n\nserver.hocuspocus.getDocumentsCount();\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for onChange in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the onChange hook, which includes client count, context, document, document name, and other properties. This hook is called when the document has changed.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IncomingHttpHeaders } from \"http\";\nimport { URLSearchParams } from \"url\";\nimport { Doc } from \"yjs\";\n\nconst data = {\n  clientsCount: number,\n  context: any,\n  document: Doc,\n  documentName: string,\n  instance: Hocuspocus,\n  requestHeaders: IncomingHttpHeaders,\n  requestParameters: URLSearchParams,\n  update: Uint8Array,\n  socketId: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for afterLoadDocument in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the afterLoadDocument hook, which includes context, document, document name, and request details. This hook is called after a document is successfully loaded.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Doc } from \"yjs\";\n\nconst data = {\n  context: any,\n  document: Doc,\n  documentName: string,\n  instance: Hocuspocus,\n  requestHeaders: IncomingHttpHeaders,\n  requestParameters: URLSearchParams,\n  socketId: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing the onDestroy Hook in Hocuspocus Server\nDESCRIPTION: Example of implementing the onDestroy hook to log when the server has been shut down. This hook is called after the server's destroy method is executed.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onDestroy(data) {\n    // Output some information\n    console.log(`Server was shut down!`);\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Setting Document Name in JavaScript\nDESCRIPTION: Demonstrates how to set a document name using a combination of entity type and ID for document identification.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst documentName = 'page.140'\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for onConnect in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the onConnect hook, which includes document name, request details, and connection information. This hook is called when a new connection is established.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IncomingHttpHeaders } from \"http\";\nimport { URLSearchParams } from \"url\";\nimport { Doc } from \"yjs\";\n\nconst data = {\n  documentName: string,\n  instance: Hocuspocus,\n  request: IncomingMessage,\n  requestHeaders: IncomingHttpHeaders,\n  requestParameters: URLSearchParams,\n  socketId: string,\n  connection: {\n    readOnly: boolean,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Tiptap Editor\nDESCRIPTION: A simple HTML element that serves as the container where the Tiptap editor will be initialized.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"element\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing Document Names in JavaScript\nDESCRIPTION: Demonstrates how to create and parse document names in a CMS-like scenario, using entity type and ID.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/multi-subdocuments.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst documentName = \"page.140\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst [entityType, entityID] = documentName.split(\".\");\n\nconsole.log(entityType); // prints \"page\"\nconsole.log(entityID); // prints \"140\n```\n\n----------------------------------------\n\nTITLE: Initializing Hocuspocus Server with constructor (New Way)\nDESCRIPTION: The new method of initializing a Hocuspocus server using the constructor pattern, which is required in version 3.0. Configuration options remain the same.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/upgrade.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  port: 1234,\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Log Messages\nDESCRIPTION: Configuration example showing how to selectively disable logging for specific events in the Hocuspocus server. This allows for fine-grained control over what gets logged.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/logger.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\nimport { Logger } from \"@hocuspocus/extension-logger\";\n\nconst server = new Server({\n  extensions: [\n    new Logger({\n      onLoadDocument: false,\n      onChange: false,\n      onConnect: false,\n      onDisconnect: false,\n      onUpgrade: false,\n      onRequest: false,\n      onListen: false,\n      onDestroy: false,\n      onConfigure: false,\n    }),\n  ],\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for onDisconnect in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the onDisconnect hook, which includes client count, context, document, and connection details. This hook is called when a connection is terminated.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IncomingHttpHeaders } from \"http\";\nimport { URLSearchParams } from \"url\";\nimport { Doc } from \"yjs\";\n\nconst data = {\n  clientsCount: number,\n  context: any,\n  document: Document,\n  documentName: string,\n  instance: Hocuspocus,\n  requestHeaders: IncomingHttpHeaders,\n  requestParameters: URLSearchParams,\n  socketId: string,\n};\n```\n\n----------------------------------------\n\nTITLE: onRequest Hook Payload Structure in Hocuspocus\nDESCRIPTION: The payload structure passed to onRequest hooks, including request and response objects from the HTTP module along with the Hocuspocus server instance.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { IncomingMessage, ServerResponse } from \"http\";\n\nconst data = {\n  request: IncomingMessage,\n  response: ServerResponse,\n  instance: Hocuspocus,\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Y.js Fragment Configuration\nDESCRIPTION: Example of configuring collaboration with a raw Y.js fragment for more complex setups with nested fragments.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// a raw Y.js fragment\nCollaboration.configure({\n  fragment: ydoc.getXmlFragment('custom'),\n})\n```\n\n----------------------------------------\n\nTITLE: onChange Webhook Payload in JSON Format\nDESCRIPTION: Example JSON payload sent when a document is changed. Contains the event type, document name, current document state with multiple fields, and context information set during connection.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"change\",\n  \"payload\": {\n    \"documentName\": \"example-document\",\n    \"document\": {\n      \"another-field-name\": {},\n      \"field-name\": {\n        \"type\": \"doc\",\n        \"content\": [\n          {\n            \"type\": \"paragraph\",\n            \"content\": [\n              {\n                \"type\": \"text\",\n                \"text\": \"What is love?\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n    \"context\": {\n      \"user_id\": 1,\n      \"name\": \"Jane Doe\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using onListen hook in Hocuspocus 3.0\nDESCRIPTION: The recommended way to handle server listening events in Hocuspocus 3.0 using the onListen hook in the server configuration.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/upgrade.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onListen(data) {\n    console.log(`Server is listening on port \"${data.port}\"!`);\n  },\n});\n\nserver.listen()\n```\n\n----------------------------------------\n\nTITLE: onConnect Webhook Payload in JSON Format\nDESCRIPTION: Example JSON payload sent when a user connects to the server. Contains event type, document name, request headers, and request parameters.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"connect\",\n  \"payload\": {\n    \"documentName\": \"example-document\",\n    \"requestHeaders\": {\n      \"Example-Header\": \"Example\"\n    },\n    \"requestParameters\": {\n      \"example\": \"12345\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the onListen Hook in Hocuspocus Server\nDESCRIPTION: Example of implementing the onListen hook to log when the server starts listening on a specific port. This hook is called after the server is started.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onListen(data) {\n    // Output some information\n    console.log(`Server is listening on port \"${data.port}\"!`);\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Default SQLite Schema for Document Storage\nDESCRIPTION: The default SQL schema that creates a documents table with name and data columns. The name column is set as unique to prevent duplicate document names.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/sqlite.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"documents\" (\n  \"name\" varchar(255) NOT NULL,\n  \"data\" blob NOT NULL,\n  UNIQUE(name)\n)\n```\n\n----------------------------------------\n\nTITLE: Using Hocuspocus without built-in server (New Way)\nDESCRIPTION: The new method of using Hocuspocus as a library, which requires importing the Hocuspocus class directly and initializing with the constructor.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/upgrade.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hocuspocus } from \"@hocuspocus/server\";\n\nconst hocuspocus = new Hocuspocus({\n  // ...\n});\n\n// You still use handleConnection as you did before.\nhocuspocus.handleConnection(...);\n```\n\n----------------------------------------\n\nTITLE: onCreate Webhook Payload in JSON Format\nDESCRIPTION: Example JSON payload sent when a new document is created. Contains the event type and document name.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"create\",\n  \"payload\": {\n    \"documentName\": \"example-document\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Network Providers Configuration\nDESCRIPTION: JavaScript code showing how to combine WebRTC and WebSocket providers\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew WebrtcProvider('example-document', ydoc)\nnew HocuspocusProvider({\n  url: 'ws://127.0.0.1:1234',\n  name: 'example-document',\n  document: ydoc,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Hocuspocus without built-in server (Old Way)\nDESCRIPTION: The previous method of using Hocuspocus as a library without the built-in server, which used the Server class with configure().\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/upgrade.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = Server.configure({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the onConfigure Hook in Hocuspocus Server\nDESCRIPTION: Example of implementing the onConfigure hook to log when the server has been configured. This hook is called after the server's configure method is invoked.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = new Server({\n  async onConfigure(data) {\n    // Output some information\n    console.log(`Server was configured!`);\n  },\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: onUpgrade Hook Payload Structure in Hocuspocus\nDESCRIPTION: The payload structure for onUpgrade hooks that handle WebSocket upgrade requests, containing HTTP and socket information needed for WebSocket connection establishment.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport { IncomingMessage } from \"http\";\nimport { Socket } from \"net\";\n\nconst data = {\n  head: any,\n  request: IncomingMessage,\n  socket: Socket,\n  instance: Hocuspocus,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table for Hocuspocus Extensions\nDESCRIPTION: This code snippet creates a markdown table listing various Hocuspocus extensions, their documentation links, and brief descriptions. It showcases the available extensions and their primary functions.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Extension                                    | Description                                                                    |\n|----------------------------------------------|--------------------------------------------------------------------------------|\n| [Database](/server/extensions/database) | A generic database driver that is easily adjustable to work with any database. |\n| [Logger](/server/extensions/logger)     | Add logging to Hocuspocus.                                                     |\n| [Redis](/server/extensions/redis)       | Scale Hocuspocus horizontally with Redis.                                      |\n| [SQLite](/server/extensions/sqlite)     | Persist documents to SQLite.                                                   |\n| [Throttle](/server/extensions/throttle) | Throttle connections by ips.                                                   |\n| [Webhook](/server/extensions/webhook)   | Send document changes via webhook to your API.                                 |\n```\n\n----------------------------------------\n\nTITLE: onStateless Hook Payload Structure in Hocuspocus\nDESCRIPTION: The payload structure for onStateless hooks that handle stateless messages received by the server, containing connection, document information, and the payload itself.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nconst data = {\n  connection: Connection,\n  documentName: string,\n  document: Document,\n  payload: string,\n}\n```\n\n----------------------------------------\n\nTITLE: afterUnloadDocument Hook Payload Structure in Hocuspocus\nDESCRIPTION: The payload structure for afterUnloadDocument hooks that execute after a document has been closed on the server, allowing for cleanup or notification processes.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nconst data = {\n  instance: Hocuspocus,\n  documentName: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Server listen method signature (Old Version)\nDESCRIPTION: The previous signature of the listen() method that allowed various parameter combinations.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/upgrade.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync listen(\n    portOrCallback: number | ((data: onListenPayload) => Promise<any>) | null = null,\n    callback: any = null,\n): Promise<Hocuspocus>\n```\n\n----------------------------------------\n\nTITLE: beforeBroadcastStateless Hook Payload Structure in Hocuspocus\nDESCRIPTION: The payload structure for beforeBroadcastStateless hooks that are called before broadcasting stateless messages, containing document information and the message payload.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nimport { Doc } from 'yjs'\n\nconst data = {\n  documentName: string,\n  document: Doc,\n  payload: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for onListen in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the onListen hook, which includes the port number. This hook is called after the server is started and accepts connections.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  port: number,\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Watching for Changes in Hocuspocus\nDESCRIPTION: Command to compile Hocuspocus packages and watch for changes during development. This enables real-time updates when modifying code.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/contributing.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Starting Hocuspocus Server\nDESCRIPTION: Command to start a Hocuspocus WebSocket server using the CLI\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @hocuspocus/cli --port 1234 --sqlite\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for onConfigure in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the onConfigure hook, which includes the configuration, version, and server instance. This hook is called after server configuration.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Configuration } from \"@hocuspocus/server\";\n\nconst data = {\n  configuration: Configuration,\n  version: string,\n  instance: Hocuspocus,\n};\n```\n\n----------------------------------------\n\nTITLE: Hocuspocus Playground Setup Instructions in Markdown\nDESCRIPTION: Detailed instructions for setting up and using the Hocuspocus Playground, including installation steps, build processes, and running the development server. It also mentions where to find additional resources and support.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/playground/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHi!\n\nWelcome to the playground. This is mainly meant for internal usage during Hocuspocus development,\nbut feel free to fiddle around here and find a few examples of how things can work.\n\nPlease note that there are different packages used in frontend / backend folders, so you should\nrun `npm install` in both if you get any errors.\n\nThe playground is importing @hocuspocus packages from the packages folder, so you need to build them first.\nRun `npm run build:packages` in the repo root to do that.\nIf you want changes inside the packages folder to compile live, you can use rollup: `rollup -c -w`.\n\n(see also docs/contributing.md)\n\nYou can run `npm run playground` in the repository root, which will spin up a development server on\nhttp://127.0.0.1:3000.\n\nIf you have any questions, feel free to join our discord or ask on Github (links can be found in the\nrepo README.md one folder up).\n```\n\n----------------------------------------\n\nTITLE: onDisconnect Webhook Payload in JSON Format\nDESCRIPTION: Example JSON payload sent when a user disconnects from the server. Contains the event type, document name, and context information set during connection.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"disconnect\",\n  \"payload\": {\n    \"documentName\": \"example-document\",\n    \"context\": {\n      \"user_id\": 1,\n      \"name\": \"Jane Doe\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hocuspocus Server with configure() (Old Way)\nDESCRIPTION: The previous method of initializing a Hocuspocus server using the static configure() method, which is no longer supported in version 3.0.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/upgrade.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"@hocuspocus/server\";\n\nconst server = Server.configure({\n  port: 1234,\n});\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Feature: Message Authentication\nDESCRIPTION: Implementation of message authentication functionality.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Message Authentication ([#163])\n```\n\n----------------------------------------\n\nTITLE: Importing Default Configuration in Hocuspocus Server\nDESCRIPTION: Shows how to import the default configuration for the Hocuspocus server when the configure method is not explicitly called.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultConfiguration } from \"@hocuspocus/server\";\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Sync Message Handling\nDESCRIPTION: Fix for empty sync message causing errors in client MessageReceiver and potential race condition in document creation.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Empty sync message causes error in client MessageReceiver ([#174])\n* Potential onCreateDocument race condition ([#167])\n```\n\n----------------------------------------\n\nTITLE: Linking Local Hocuspocus Packages to Development Project\nDESCRIPTION: A series of commands to include local Hocuspocus packages in another development project. This approach uses symlinks to connect the local packages instead of npm link, which can cause issues with duplicated dependencies.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/contributing.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd other_project # execute the following commands within the other project that should include local\n # hocuspocus dependencies. Replace `provider` by the package that you want to replace.\n # Replace HOCUSPOCUS_LOCAL_REPO_PATH by the path of \"this\" repo.\n$ rm -Rf node_modules/yjs node_modules/@hocuspocus/provider\n$ ln -s HOCUSPOCUS_LOCAL_REPO_PATH/packages/provider node_modules/@hocuspocus/provider\n$ ln -s HOCUSPOCUS_LOCAL_REPO_PATH/node_modules/yjs ./node_modules/yjs\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap with Hocuspocus Dependencies\nDESCRIPTION: Command to install the required npm packages for Tiptap editor with collaborative editing capabilities using Hocuspocus.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/provider/examples.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/provider @tiptap/core @tiptap/pm @tiptap/starter-kit @tiptap/extension-collaboration @tiptap/extension-collaboration-cursor yjs y-prosemirror\n```\n\n----------------------------------------\n\nTITLE: Version Control Markdown Documentation\nDESCRIPTION: Markdown-formatted changelog entry documenting version updates, bug fixes and features for the @hocuspocus/server package. Includes version comparisons, commit links, and descriptive notes for each release.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [3.0.8-rc.0](https://github.com/ueberdosis/hocuspocus/compare/v3.0.7-rc.0...v3.0.8-rc.0) (2025-04-09)\n\n**Note:** Version bump only for package @hocuspocus/server\n```\n\n----------------------------------------\n\nTITLE: Installing Offline Support\nDESCRIPTION: Command to install Y IndexedDB adapter for offline support\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install y-indexeddb\n```\n\n----------------------------------------\n\nTITLE: Changelog Format\nDESCRIPTION: Markdown-formatted changelog entries showing version updates and changes to the SQLite extension package, following conventional commits format.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/extension-sqlite/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [3.0.8-rc.0](https://github.com/ueberdosis/hocuspocus/compare/v3.0.7-rc.0...v3.0.8-rc.0) (2025-04-09)\n\n**Note:** Version bump only for package @hocuspocus/extension-sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing Hocuspocus Database Extension\nDESCRIPTION: Command to install the @hocuspocus/extension-database package using npm.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/database.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/extension-database\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Extension for Hocuspocus\nDESCRIPTION: Command to install the Redis extension for Hocuspocus using npm. This extension allows synchronizing changes and awareness states between multiple Hocuspocus instances.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/redis.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/extension-redis\n```\n\n----------------------------------------\n\nTITLE: Installing the Logger Extension\nDESCRIPTION: Command to install the @hocuspocus/extension-logger package via npm.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/logger.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/extension-logger\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Extension via npm\nDESCRIPTION: Command to install the SQLite extension for Hocuspocus using npm package manager.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/sqlite.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/extension-sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependencies\nDESCRIPTION: Command to install required npm packages for WebSocket-based collaboration using Hocuspocus\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-collaboration @hocuspocus/provider y-prosemirror\n```\n\n----------------------------------------\n\nTITLE: Hook Payload Structure for onDestroy in Hocuspocus Server\nDESCRIPTION: Defines the data structure passed to the onDestroy hook, which includes the server instance. This hook is called after the server is shut down using the destroy method.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/hooks.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  instance: Hocuspocus,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Hocuspocus Webhook Extension with npm\nDESCRIPTION: Command to install the @hocuspocus/extension-webhook package using npm.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/webhook.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/extension-webhook\n```\n\n----------------------------------------\n\nTITLE: Server listen method signature (New Version)\nDESCRIPTION: The simplified signature of the listen() method in version 3.0, which only accepts a port number and an optional callback.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/upgrade.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync listen(port?: number, callback: any = null): Promise<Hocuspocus>\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers. Includes options for npm, yarn, pnpm, and bun. After running any of these commands, the development server will be accessible at http://localhost:3000.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/playground/frontend/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Throttle Extension with npm\nDESCRIPTION: Command to install the Throttle extension package using npm. This is the first step required before configuring the extension in your Hocuspocus server.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/extensions/throttle.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/extension-throttle\n```\n\n----------------------------------------\n\nTITLE: Markdown Feature Entry for Version 3.0.5-rc.0\nDESCRIPTION: Changelog entry documenting addition of beforeSync hook feature\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* add beforeSync hook ([#919](https://github.com/ueberdosis/hocuspocus/issues/919)) ([a6a7bcd](https://github.com/ueberdosis/hocuspocus/commit/a6a7bcd0768378908ffb5d32096183280115631b))\n```\n\n----------------------------------------\n\nTITLE: Markdown Bug Fix Entry for Version 3.0.3-rc.0\nDESCRIPTION: Changelog entry documenting memory leak fix in Direct Connection and server websocket disconnect handling improvements\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Memory leak in Direct Connection ([#895](https://github.com/ueberdosis/hocuspocus/issues/895)) ([70ab0e2](https://github.com/ueberdosis/hocuspocus/commit/70ab0e20e645e2ddd358847569b7e670622bbcc9)), closes [#2](https://github.com/ueberdosis/hocuspocus/issues/2)\n* **server:** fast ws disconnect handling during conn setup ([#900](https://github.com/ueberdosis/hocuspocus/issues/900)) ([6817b53](https://github.com/ueberdosis/hocuspocus/commit/6817b535f63309c5ffbe59e3818c1ceb4749d0a7))\n```\n\n----------------------------------------\n\nTITLE: Installing WebRTC Dependencies\nDESCRIPTION: Command to install required npm packages for WebRTC-based collaboration\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/guides/collaborative-editing.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-collaboration yjs y-webrtc y-prosemirror\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 3.0.8-rc.0\nDESCRIPTION: Changelog entry documenting version bump from 3.0.7-rc.0 to 3.0.8-rc.0\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.8-rc.0](https://github.com/ueberdosis/hocuspocus/compare/v3.0.7-rc.0...v3.0.8-rc.0) (2025-04-09)\n\n**Note:** Version bump only for package hocuspocus\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Structure in Markdown\nDESCRIPTION: Standard format for changelog entries showing version numbers, comparison links, and notes about version bumps.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/playground/backend/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.8-rc.0](https://github.com/ueberdosis/hocuspocus/compare/v3.0.7-rc.0...v3.0.8-rc.0) (2025-04-09)\n\n**Note:** Version bump only for package @hocuspocus/server-demos\n```\n\n----------------------------------------\n\nTITLE: Changelog Header and Links\nDESCRIPTION: Standard changelog header with link to conventional commits documentation\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/extension-throttle/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n```\n\n----------------------------------------\n\nTITLE: Koa Integration with Hocuspocus\nDESCRIPTION: Example of integrating Hocuspocus with Koa framework using koa-easy-ws for WebSocket support.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/docs/server/examples.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Koa from \"koa\";\nimport websocket from \"koa-easy-ws\";\nimport { Hocuspocus } from \"@hocuspocus/server\";\nimport { Logger } from \"@hocuspocus/extension-logger\";\n\n// Configure Hocuspocus\nconst hocuspocus = new Hocuspocus({\n  // â€¦\n});\n\nconst app = new Koa();\n\n// Setup your koa instance using the koa-easy-ws extension\napp.use(websocket());\n\n// Add a websocket route for Hocuspocus\n// You can set any contextual data like in the onConnect hook\n// and pass it to the handleConnection method.\napp.use(async (ctx, next) => {\n  const ws = await ctx.ws();\n\n  hocuspocus.handleConnection(\n    ws,\n    ctx.request,\n    // additional data (optional)\n    {\n      user_id: 1234,\n    }\n  );\n});\n\n// Start the server\napp.listen(1234);\n```\n\n----------------------------------------\n\nTITLE: Adding request headers and parameters to onCreateDocument in Hocuspocus\nDESCRIPTION: Feature addition that provides request headers and parameters to the onCreateDocument hook in Hocuspocus server, allowing more context when documents are created.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* add request headers and parameters to onCreateDocument ([47a8b95](https://github.com/ueberdosis/hocuspocus/commit/47a8b95baf8dd22ebd71c56565420179402cdaa4))\n```\n\n----------------------------------------\n\nTITLE: Fixing hook promise chaining in Hocuspocus\nDESCRIPTION: Bug fix addressing issues with hook promise chaining in the Hocuspocus server, ensuring proper execution flow of hooks.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* fix hook promise chaining ([ee5052d](https://github.com/ueberdosis/hocuspocus/commit/ee5052d236ba0b400880dc7ca1c90cefdd372003))\n```\n\n----------------------------------------\n\nTITLE: Adding read-only mode to Hocuspocus server\nDESCRIPTION: Feature addition that implements a read-only mode for Hocuspocus server, which can be used to prevent document modifications.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* add read only mode ([7b59d52](https://github.com/ueberdosis/hocuspocus/commit/7b59d522b966b51347db35ac6a4524211e44ae9c))\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript strings in Hocuspocus\nDESCRIPTION: Bug fix addressing issues with TypeScript string handling in the Hocuspocus server implementation.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* typescript strings ([0dd5f12](https://github.com/ueberdosis/hocuspocus/commit/0dd5f1292616e426cdb4cc79e83ab8ced0895bfa))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Event Listener Cleanup\nDESCRIPTION: Fix to remove event listener when no longer in use.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* Remove event listener once unused ([#220](https://github.com/ueberdosis/hocuspocus/issues/220))\n```\n\n----------------------------------------\n\nTITLE: Feature: Connection Tracking Methods\nDESCRIPTION: Addition of methods to track connection and document counts on server.\nSOURCE: https://github.com/ueberdosis/hocuspocus/blob/main/packages/server/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Add connectionsCount and documentsCount methods to server\n```"
  }
]