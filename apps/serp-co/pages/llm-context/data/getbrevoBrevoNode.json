[
  {
    "owner": "getbrevo",
    "repo": "brevo-node",
    "content": "TITLE: Sending Transactional Email (v2.1.1 - TypeScript supported)\nDESCRIPTION: Example of sending a transactional email using Brevo API v2.1.1 with TypeScript support. Shows updated authentication method and email configuration.\nSOURCE: https://github.com/getbrevo/brevo-node/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst brevo = require('@getbrevo/brevo');\nlet apiInstance = new brevo.TransactionalEmailsApi();\n\nlet apiKey = apiInstance.authentications['api-key'];\napiKey.apiKey = 'YOUR API KEY';\n\nlet sendSmtpEmail = new brevo.SendSmtpEmail();\n\nsendSmtpEmail.subject = \"My {{params.subject}}\";\nsendSmtpEmail.htmlContent = \"<html><body><h1>Common: This is my first transactional email {{params.parameter}}</h1></body></html>\";\nsendSmtpEmail.sender = { \"name\": \"John\", \"email\": \"shubham.upadhyay@sendinblue.com\" };\nsendSmtpEmail.to = [\n  { \"email\": \"shubham.upadhyay@sendinblue.com\", \"name\": \"shubham upadhyay\" }\n];\nsendSmtpEmail.replyTo = { \"email\": \"shubham.upadhyay@sendinblue.com\", \"name\": \"Shubham Upadhyay\" };\nsendSmtpEmail.headers = { \"Some-Custom-Name\": \"unique-id-1234\" };\nsendSmtpEmail.params = { \"parameter\": \"My param value\", \"subject\": \"common subject\" };\n\napiInstance.sendTransacEmail(sendSmtpEmail).then(function (data) {\n  console.log('API called successfully. Returned data: ' + JSON.stringify(data));\n}, function (error) {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Brevo API Library using NPM\nDESCRIPTION: Commands to install the Brevo API library using npm or yarn package managers.\nSOURCE: https://github.com/getbrevo/brevo-node/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @getbrevo/brevo --save\n# or\nyarn add @getbrevo/brevo\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contacts List\nDESCRIPTION: Example demonstrating how to fetch the list of contacts using the Brevo API. Shows basic authentication and API call implementation.\nSOURCE: https://github.com/getbrevo/brevo-node/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst brevo = require('@getbrevo/brevo');\n\nlet apiInstance = new brevo.ContactsApi()\n\nlet apiKey = apiInstance.authentications['api-key'];\napiKey.apiKey = 'YOUR API KEY';\n\napiInstance.getContacts().then(function(data) {\n  console.log('API called successfully. Returned data: ' + JSON.stringify(data));\n\n}, function(error) {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contact Attributes\nDESCRIPTION: Example demonstrating how to fetch contact attributes using the Brevo API. Shows authentication setup and API call handling.\nSOURCE: https://github.com/getbrevo/brevo-node/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst brevo = require('@getbrevo/brevo');\n\nlet apiInstance = new brevo.ContactsApi()\n\nlet apiKey = apiInstance.authentications['api-key'];\napiKey.apiKey = 'YOUR API KEY';\n\napiInstance.getAttributes().then(function(data) {\n  console.log('API called successfully. Returned data: ' + JSON.stringify(data));\n\n}, function(error) {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information\nDESCRIPTION: Example showing how to get account information using the Brevo API. Includes authentication and response handling.\nSOURCE: https://github.com/getbrevo/brevo-node/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst brevo = require('@getbrevo/brevo');\n\nlet apiInstance = new brevo.AccountApi()\n\nlet apiKey = apiInstance.authentications['api-key'];\napiKey.apiKey = 'YOUR API KEY';\n\napiInstance.getAccount().then(function(data) {\n  console.log('API called successfully. Returned data: ' + JSON.stringify(data));\n\n}, function(error) {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional Email (v1.0.1 - TypeScript not supported)\nDESCRIPTION: Example of sending a transactional email using Brevo API v1.0.1 without TypeScript support. Demonstrates setting up authentication, configuring email parameters, and handling API response.\nSOURCE: https://github.com/getbrevo/brevo-node/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst brevo = require('@getbrevo/brevo');\nlet defaultClient = brevo.ApiClient.instance;\n\nlet apiKey = defaultClient.authentications['api-key'];\napiKey.apiKey = 'YOUR API KEY';\n\nlet apiInstance = new brevo.TransactionalEmailsApi();\nlet sendSmtpEmail = new brevo.SendSmtpEmail();\n\nsendSmtpEmail.subject = \"My {{params.subject}}\";\nsendSmtpEmail.htmlContent = \"<html><body><h1>Common: This is my first transactional email {{params.parameter}}</h1></body></html>\";\nsendSmtpEmail.sender = { \"name\": \"John\", \"email\": \"example@example.com\" };\nsendSmtpEmail.to = [\n  { \"email\": \"example@brevo.com\", \"name\": \"sample-name\" }\n];\nsendSmtpEmail.replyTo = { \"email\": \"example@brevo.com\", \"name\": \"sample-name\" };\nsendSmtpEmail.headers = { \"Some-Custom-Name\": \"unique-id-1234\" };\nsendSmtpEmail.params = { \"parameter\": \"My param value\", \"subject\": \"common subject\" };\n\napiInstance.sendTransacEmail(sendSmtpEmail).then(function (data) {\n  console.log('API called successfully. Returned data: ' + JSON.stringify(data));\n}, function (error) {\n  console.error(error);\n});\n```"
  }
]