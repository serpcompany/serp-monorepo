[
  {
    "owner": "appwrite",
    "repo": "sdk-for-web",
    "content": "TITLE: Setting up Appwrite Web SDK Client and Fetching Account Preferences\nDESCRIPTION: Demonstrates how to initialize the Appwrite client with endpoint and project configuration, create an account instance, and retrieve user preferences. Uses the Appwrite Web SDK's Client and Account classes.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/get-prefs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.getPrefs();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Complete Appwrite SDK Usage Example in JavaScript\nDESCRIPTION: Full example demonstrating Appwrite SDK initialization and user account creation in a single code block.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Init your Web SDK\nconst client = new Client();\n\nclient\n    .setEndpoint('http://localhost/v1') // Your Appwrite Endpoint\n    .setProject('455x34dfkj')\n;\n\nconst account = new Account(client);\n\n// Register User\naccount.create(ID.unique(), \"email@example.com\", \"password\", \"Walter O'Brien\")\n    .then(function (response) {\n        console.log(response);\n    }, function (error) {\n        console.log(error);\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating a User Account with Appwrite in JavaScript\nDESCRIPTION: Example of using the Appwrite Account service to create a new user account.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = new Account(client);\n\n// Register User\naccount.create(ID.unique(), \"email@example.com\", \"password\", \"Walter O'Brien\")\n    .then(function (response) {\n        console.log(response);\n    }, function (error) {\n        console.log(error);\n    });\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client in JavaScript\nDESCRIPTION: Code snippet to initialize the Appwrite Client with an endpoint and project ID.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client();\n\nclient\n    .setEndpoint('http://localhost/v1') // Your Appwrite Endpoint\n    .setProject('455x34dfkj') // Your project ID\n;\n```\n\n----------------------------------------\n\nTITLE: Creating a User Account with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new user account using Appwrite's Web SDK. It initializes the Appwrite client with an endpoint and project ID, then uses the Account service to create a new user with email authentication.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.create(\n    '<USER_ID>', // userId\n    'email@example.com', // email\n    '', // password\n    '<NAME>' // name (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Updating User Name in JavaScript\nDESCRIPTION: Sets up an Appwrite client instance with endpoint and project configuration, then uses the Account service to update a user's name. Requires Appwrite SDK and valid project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-name.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateName(\n    '<NAME>' // name\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Including Appwrite SDK via CDN in HTML\nDESCRIPTION: HTML script tag to include the Appwrite SDK from a CDN for use in web projects.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/appwrite@17.0.2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Email Session\nDESCRIPTION: Sets up an Appwrite client instance with endpoint and project configuration, then creates an authenticated session using email and password. Demonstrates basic authentication flow using the Appwrite Web SDK.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-email-password-session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createEmailPasswordSession(\n    'email@example.com', // email\n    'password' // password\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Identities with Appwrite Web SDK in JavaScript\nDESCRIPTION: This code initializes the Appwrite client with endpoint and project ID settings, creates an Account service instance, and makes an API call to list user identities. The listIdentities method accepts an optional query parameter for filtering results.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/list-identities.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listIdentities(\n    [] // queries (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Installing Appwrite SDK via NPM\nDESCRIPTION: Command to install the Appwrite SDK using NPM package manager.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install appwrite --save\n```\n\n----------------------------------------\n\nTITLE: Creating Document with Appwrite Web SDK - JavaScript\nDESCRIPTION: Demonstrates how to initialize the Appwrite client, connect to the database service, and create a new document. The code shows configuration of endpoint, project ID, and document creation with optional permissions.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/databases/create-document.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.createDocument(\n    '<DATABASE_ID>', // databaseId\n    '<COLLECTION_ID>', // collectionId\n    '<DOCUMENT_ID>', // documentId\n    {}, // data\n    [\"read(\\\"any\\\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Importing Appwrite SDK in JavaScript\nDESCRIPTION: Example of importing Appwrite Client and Account modules in a JavaScript file using ES6 import syntax.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n```\n\n----------------------------------------\n\nTITLE: Updating Document in Appwrite Database using JavaScript\nDESCRIPTION: This snippet initializes an Appwrite client, creates a Databases instance, and updates a document in a specified database collection. It sets the API endpoint and project ID, then uses the updateDocument method to modify a document with optional data and permissions.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/databases/update-document.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.updateDocument(\n    '<DATABASE_ID>', // databaseId\n    '<COLLECTION_ID>', // collectionId\n    '<DOCUMENT_ID>', // documentId\n    {}, // data (optional)\n    [\"read(\\\"any\\\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Token with Appwrite Web SDK\nDESCRIPTION: Initializes Appwrite client with endpoint and project ID configuration, then creates a JWT token using the Account service. This demonstrates basic authentication setup and token generation.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-j-w-t.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createJWT();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating User Session with Appwrite Web SDK\nDESCRIPTION: Initializes an Appwrite client with endpoint and project configuration, then creates a new user session using account credentials. Requires valid Appwrite project ID, user ID, and secret.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createSession(\n    '<USER_ID>', // userId\n    '<SECRET>' // secret\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating User Password with Appwrite SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite Client, set up the Account service, and update a user's password. It requires an existing Appwrite project ID and proper endpoint configuration. The code authenticates the user with their old password before allowing them to set a new one.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-password.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePassword(\n    '', // password\n    'password' // oldPassword (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving Account Information\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set up an Account instance, and retrieve account information. It imports necessary modules, configures the client with endpoint and project ID, and then makes an API call to get account details.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/get.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.get();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document with Appwrite SDK for Web\nDESCRIPTION: This snippet initializes an Appwrite client, connects to a database service, and retrieves a specific document by its ID. It demonstrates how to configure the client with endpoint and project ID, and how to query a document from a specific database and collection.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/databases/get-document.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.getDocument(\n    '<DATABASE_ID>', // databaseId\n    '<COLLECTION_ID>', // collectionId\n    '<DOCUMENT_ID>', // documentId\n    [] // queries (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to Appwrite Storage in JavaScript\nDESCRIPTION: Creates a file in an Appwrite Storage bucket by uploading a file from an HTML file input element. Includes optional read permissions and logs the result to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/create-file.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await storage.createFile(\n    '<BUCKET_ID>', // bucketId\n    '<FILE_ID>', // fileId\n    document.getElementById('uploader').files[0], // file\n    [\"read(\\\"any\\\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Authenticator with Appwrite SDK for Web\nDESCRIPTION: This snippet initializes the Appwrite client, sets up an account instance, and creates a TOTP-based MFA authenticator. It requires the Appwrite SDK for web and valid project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-mfa-authenticator.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Account, AuthenticatorType } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMfaAuthenticator(\n    AuthenticatorType.Totp // type\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Execution with Appwrite SDK for Web\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set up the Functions service, and execute a function with various parameters. It configures the API endpoint and project ID, then creates a function execution with options for body content, async mode, path, HTTP method, headers, and scheduling.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/functions/create-execution.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Functions, ExecutionMethod } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst functions = new Functions(client);\n\nconst result = await functions.createExecution(\n    '<FUNCTION_ID>', // functionId\n    '<BODY>', // body (optional)\n    false, // async (optional)\n    '<PATH>', // path (optional)\n    ExecutionMethod.GET, // method (optional)\n    {}, // headers (optional)\n    '' // scheduledAt (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a File from Appwrite Storage using the Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve a file from Appwrite Storage. It initializes the Appwrite client with an endpoint and project ID, creates a Storage instance, and uses the getFile method to fetch a specific file from a bucket. The result is then logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/get-file.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.getFile(\n    '<BUCKET_ID>', // bucketId\n    '<FILE_ID>' // fileId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and OAuth2 Session Creation\nDESCRIPTION: Sets up the Appwrite client with endpoint and project configuration, then creates an OAuth2 session using Amazon as the authentication provider. Includes optional success/failure redirect URLs and scope configuration.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-o-auth2session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account, OAuthProvider } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\naccount.createOAuth2Session(\n    OAuthProvider.Amazon, // provider\n    'https://example.com', // success (optional)\n    'https://example.com', // failure (optional)\n    [] // scopes (optional)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Team using Appwrite SDK for Web in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, create a Teams instance, and use it to create a new team. It sets the API endpoint and project ID, then calls the create method with a team ID, name, and optional roles.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/create.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.create(\n    '<TEAM_ID>', // teamId\n    '<NAME>', // name\n    [] // roles (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Listing Documents in JavaScript\nDESCRIPTION: This snippet shows how to initialize an Appwrite client, set up a database connection, and list documents from a specific collection. It requires the Appwrite Web SDK and valid project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/databases/list-documents.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.listDocuments(\n    '<DATABASE_ID>', // databaseId\n    '<COLLECTION_ID>', // collectionId\n    [] // queries (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Email Verification with Appwrite Web SDK in JavaScript\nDESCRIPTION: This code initializes an Appwrite client, configures the Account service, and creates an email verification request with a callback URL. The verification link will be sent to the user's email, and they will be redirected to the specified URL after verification.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createVerification(\n    'https://example.com' // url\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document using Appwrite Databases SDK in JavaScript\nDESCRIPTION: This snippet shows the complete process of deleting a document from an Appwrite database collection. It initializes the Appwrite client with the appropriate endpoint and project ID, sets up the Databases service, and calls the deleteDocument method with the required parameters.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/databases/delete-document.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.deleteDocument(\n    '<DATABASE_ID>', // databaseId\n    '<COLLECTION_ID>', // collectionId\n    '<DOCUMENT_ID>' // documentId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Appwrite GraphQL Service with JavaScript SDK\nDESCRIPTION: This code snippet shows how to import, initialize, and use the Appwrite GraphQL service in a web application. It sets up a client with endpoint and project ID, creates a GraphQL service instance, and executes a mutation query. The response is then logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/graphql/mutation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Graphql } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst graphql = new Graphql(client);\n\nconst result = await graphql.mutation(\n    {} // query\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating User Email with Appwrite SDK for Web in JavaScript\nDESCRIPTION: This code initializes the Appwrite client with endpoint and project ID, then uses the Account service to update a user's email address. It requires the new email address and password for authentication, and logs the result to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-email.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateEmail(\n    'email@example.com', // email\n    'password' // password\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with Appwrite GraphQL in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure an Appwrite client and execute a GraphQL query. It imports required modules, sets up the client with endpoint and project ID, initializes the GraphQL service, and performs a basic query.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/graphql/query.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Graphql } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst graphql = new Graphql(client);\n\nconst result = await graphql.query(\n    {} // query\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Team Membership using Appwrite SDK for Web in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set up the Teams service, and create a new team membership. It includes optional parameters such as email, userId, phone, URL, and name.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/create-membership.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.createMembership(\n    '<TEAM_ID>', // teamId\n    [], // roles\n    'email@example.com', // email (optional)\n    '<USER_ID>', // userId (optional)\n    '+12065550100', // phone (optional)\n    'https://example.com', // url (optional)\n    '<NAME>' // name (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Appwrite Web SDK Session Retrieval in JavaScript\nDESCRIPTION: Initializes an Appwrite client with endpoint and project configuration, then retrieves a specific user session using the Account API. Requires Appwrite SDK for Web and valid project/session credentials.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/get-session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.getSession(\n    '<SESSION_ID>' // sessionId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Web SDK and Listing Sessions\nDESCRIPTION: Sets up an Appwrite client instance with endpoint and project ID configuration, then uses the Account API to retrieve a list of active user sessions. Requires valid Appwrite project credentials and user authentication.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/list-sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listSessions();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Storage and Listing Files\nDESCRIPTION: Sets up an Appwrite client connection and storage service to list files from a specified bucket. The code configures the client with endpoint and project ID, then uses the storage service to fetch files with optional query parameters and search functionality.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/list-files.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.listFiles(\n    '<BUCKET_ID>', // bucketId\n    [], // queries (optional)\n    '<SEARCH>' // search (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Storage Service in JavaScript\nDESCRIPTION: Sets up the Appwrite client with the API endpoint and project ID, then initializes the Storage service for file operations.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/create-file.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Password Recovery Request\nDESCRIPTION: Sets up an Appwrite client instance with endpoint and project configuration, then uses the Account service to create a password recovery request. The code requires Appwrite SDK and sends a recovery email to the specified address with a custom redirect URL.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createRecovery(\n    'email@example.com', // email\n    'https://example.com' // url\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Appwrite Storage in JavaScript\nDESCRIPTION: Retrieves a file download URL from Appwrite Storage using the bucket ID and file ID. This creates a download URL that can be used to access the file.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/get-file-download.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = storage.getFileDownload(\n    '<BUCKET_ID>', // bucketId\n    '<FILE_ID>' // fileId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Phone Authentication Token with Appwrite SDK for JavaScript\nDESCRIPTION: This code initializes the Appwrite client with endpoint and project ID, then uses the Account service to create a phone token for a user. The token is generated for the specified user ID and phone number, which can be used for phone authentication.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-phone-token.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createPhoneToken(\n    '<USER_ID>', // userId\n    '+12065550100' // phone\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Listing Teams with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet initializes an Appwrite client, creates a Teams service, and lists teams with optional query and search parameters. It requires the Appwrite Web SDK and a valid project setup.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/list.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.list(\n    [], // queries (optional)\n    '<SEARCH>' // search (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating OAuth2 Token with Amazon Provider\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set up the account service, and create an OAuth2 token using Amazon as the provider. It includes setting the API endpoint and project ID, and specifies success and failure URLs for the OAuth2 flow.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-o-auth2token.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account, OAuthProvider } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\naccount.createOAuth2Token(\n    OAuthProvider.Amazon, // provider\n    'https://example.com', // success (optional)\n    'https://example.com', // failure (optional)\n    [] // scopes (optional)\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Information using Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, set up the Teams service, and retrieve information for a specific team. It requires the Appwrite Web SDK and a valid project ID and team ID.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/get.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.get(\n    '<TEAM_ID>' // teamId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Execution Details with Appwrite SDK for JavaScript\nDESCRIPTION: This code initializes the Appwrite client with your project details, creates a Functions service instance, and retrieves information about a specific function execution. It requires your Appwrite project ID, function ID, and execution ID to fetch the execution details.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/functions/get-execution.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Functions } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst functions = new Functions(client);\n\nconst result = await functions.getExecution(\n    '<FUNCTION_ID>', // functionId\n    '<EXECUTION_ID>' // executionId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Magic URL Authentication Token with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to import Appwrite dependencies, initialize the client with endpoint and project ID, and create a magic URL token for passwordless authentication. It includes setting up the Account service and configuring parameters for the magic URL token creation.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-magic-u-r-l-token.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMagicURLToken(\n    '<USER_ID>', // userId\n    'email@example.com', // email\n    'https://example.com', // url (optional)\n    false // phrase (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating File Properties with Appwrite Storage API\nDESCRIPTION: Demonstrates initializing Appwrite client, creating a storage instance, and updating file metadata including name and permissions. Requires valid Appwrite project setup with appropriate bucket and file IDs.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/update-file.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.updateFile(\n    '<BUCKET_ID>', // bucketId\n    '<FILE_ID>', // fileId\n    '<NAME>', // name (optional)\n    [\"read(\\\"any\\\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Email Token with Appwrite Web SDK in JavaScript\nDESCRIPTION: This code initializes the Appwrite client, configures it with endpoint and project ID, and creates an email token for authentication. It demonstrates how to use the Account service to generate an email-based authentication token for a specific user.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-email-token.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createEmailToken(\n    '<USER_ID>', // userId\n    'email@example.com', // email\n    false // phrase (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Authenticator using Appwrite SDK in JavaScript\nDESCRIPTION: This snippet initializes the Appwrite client, creates an Account instance, and updates an MFA authenticator. It uses the TOTP type and requires an OTP (One-Time Password) for verification.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-mfa-authenticator.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Account, AuthenticatorType } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMfaAuthenticator(\n    AuthenticatorType.Totp, // type\n    '<OTP>' // otp\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Settings with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set up the Account service, and update the MFA settings for a user account. It requires the Appwrite Web SDK and a valid project ID.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-m-f-a.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMFA(\n    false // mfa\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Listing Function Executions with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Appwrite Web SDK to initialize a client, set up the Functions service, and list executions of a specific function. It configures the client with an endpoint and project ID, then queries function executions with optional parameters for filtering.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/functions/list-executions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Functions } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst functions = new Functions(client);\n\nconst result = await functions.listExecutions(\n    '<FUNCTION_ID>', // functionId\n    [], // queries (optional)\n    '<SEARCH>' // search (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Listing MFA Factors using Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet initializes the Appwrite client, configures it with the API endpoint and project ID, sets up the account service, and then retrieves a list of MFA factors for the authenticated user. The result is logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/list-mfa-factors.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listMfaFactors();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating User Preferences with Appwrite Web SDK in JavaScript\nDESCRIPTION: This code demonstrates how to update user preferences using Appwrite's Web SDK. It initializes the Appwrite client with an endpoint and project ID, creates an Account instance, and then calls the updatePrefs method to update user preferences with an empty preferences object.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-prefs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePrefs(\n    {} // prefs\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Team Membership Roles with Appwrite Web SDK\nDESCRIPTION: Demonstrates how to initialize the Appwrite client, create a Teams service instance, and update a team member's roles. The code configures the client with endpoint and project ID, then updates a specific team membership with new roles.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/update-membership.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.updateMembership(\n    '<TEAM_ID>', // teamId\n    '<MEMBERSHIP_ID>', // membershipId\n    [] // roles\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating User Phone Number with Appwrite Web SDK in JavaScript\nDESCRIPTION: This code initializes the Appwrite client, configures it with endpoint and project ID, and then uses the Account service to update a user's phone number. The updatePhone method requires the new phone number and the user's password for verification.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-phone.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePhone(\n    '+12065550100', // phone\n    'password' // password\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Team Name with Appwrite SDK in JavaScript\nDESCRIPTION: This snippet shows how to use the Appwrite SDK for Web to update a team's name. It initializes the client with an endpoint and project ID, creates a Teams instance, and calls the updateName method with the team ID and new name.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/update-name.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.updateName(\n    '<TEAM_ID>', // teamId\n    '<NAME>' // name\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Preview using Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, create a storage instance, and use it to get a file preview. It demonstrates setting various optional parameters like width, height, gravity, and output format.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/get-file-preview.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage, ImageGravity, ImageFormat } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = storage.getFilePreview(\n    '<BUCKET_ID>', // bucketId\n    '<FILE_ID>', // fileId\n    0, // width (optional)\n    0, // height (optional)\n    ImageGravity.Center, // gravity (optional)\n    0, // quality (optional)\n    0, // borderWidth (optional)\n    '', // borderColor (optional)\n    0, // borderRadius (optional)\n    0, // opacity (optional)\n    -360, // rotation (optional)\n    '', // background (optional)\n    ImageFormat.Jpg // output (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team with Appwrite JavaScript SDK\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, create a Teams instance, and delete a specific team. It requires the Appwrite JavaScript SDK and a valid project ID and team ID.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/delete.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.delete(\n    '<TEAM_ID>' // teamId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting Files using Appwrite Storage SDK\nDESCRIPTION: Demonstrates the initialization of Appwrite client and Storage service, followed by deleting a file from a specified bucket. The code sets up the client with endpoint and project ID, then uses the storage.deleteFile() method with bucket and file IDs.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/delete-file.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.deleteFile(\n    '<BUCKET_ID>', // bucketId\n    '<FILE_ID>' // fileId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Generating MFA Recovery Codes with Appwrite Web SDK\nDESCRIPTION: This code initializes the Appwrite client, configures it with an endpoint and project ID, and creates MFA recovery codes for the authenticated user. The result containing the recovery codes is then logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-mfa-recovery-codes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMfaRecoveryCodes();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating User Session with Appwrite Web SDK in JavaScript\nDESCRIPTION: Initializes the Appwrite client with endpoint and project configuration, then updates an existing user session using the Account API. Requires a valid session ID as input parameter.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateSession(\n    '<SESSION_ID>' // sessionId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Recovery Codes with Appwrite Web SDK\nDESCRIPTION: Initializes Appwrite client with endpoint and project ID, then updates MFA recovery codes for the authenticated user account. Returns the new recovery codes that can be used to regain access if MFA becomes inaccessible.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-mfa-recovery-codes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMfaRecoveryCodes();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Web SDK Client and Updating User Verification\nDESCRIPTION: This snippet demonstrates how to import Appwrite dependencies, initialize the client with proper endpoint and project ID, and use the updateVerification method to verify a user's account. The code requires the user ID and secret token to complete the verification process.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateVerification(\n    '<USER_ID>', // userId\n    '<SECRET>' // secret\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Fetching Account Logs\nDESCRIPTION: This snippet shows how to set up an Appwrite client, create an Account instance, and use it to retrieve account logs. It demonstrates client configuration, account initialization, and API usage for log retrieval.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/list-logs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listLogs(\n    [] // queries (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting All User Sessions with Appwrite Web SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete all user sessions using the Appwrite Web SDK. It imports the necessary Client and Account classes, initializes the Appwrite client with the API endpoint and project ID, and then calls the deleteSessions method to remove all active sessions for the current user.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/delete-sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteSessions();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating User Password Recovery with Appwrite Web SDK in JavaScript\nDESCRIPTION: Initializes Appwrite client with endpoint and project ID, then uses the Account service to update password recovery. Requires Appwrite SDK, valid user ID, and recovery secret. Returns the update result.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-recovery.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateRecovery(\n    '<USER_ID>', // userId\n    '<SECRET>', // secret\n    '' // password\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Listing Team Memberships with Appwrite Web SDK in JavaScript\nDESCRIPTION: Initializes an Appwrite client with endpoint and project settings, then uses the Teams service to fetch team memberships. Supports optional query parameters and search functionality.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/list-memberships.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.listMemberships(\n    '<TEAM_ID>', // teamId\n    [], // queries (optional)\n    '<SEARCH>' // search (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Creating Anonymous Session\nDESCRIPTION: This snippet sets up the Appwrite client with the API endpoint and project ID, then uses the Account service to create an anonymous session. The result of the session creation is logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-anonymous-session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createAnonymousSession();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Appwrite Avatars API in JavaScript\nDESCRIPTION: This code demonstrates how to initialize the Appwrite client, configure the Avatars service, and use it to retrieve an image from a URL. The example includes optional width and height parameters for image resizing.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/avatars/get-image.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Avatars } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst avatars = new Avatars(client);\n\nconst result = avatars.getImage(\n    'https://example.com', // url\n    0, // width (optional)\n    0 // height (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Account Status with Appwrite Web SDK in JavaScript\nDESCRIPTION: This code initializes the Appwrite client with the cloud endpoint and project ID, creates an Account instance, and calls the updateStatus method to update the current user's account status. The result of the operation is then logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-status.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateStatus();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Generating Initial-based Avatar with Web SDK\nDESCRIPTION: This code demonstrates how to set up the Appwrite client for web applications and use the Avatars service to generate an avatar based on a person's initials. It configures the client with an endpoint and project ID, then creates an avatar using the getInitials method with optional parameters for name, dimensions, and background color.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/avatars/get-initials.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Avatars } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst avatars = new Avatars(client);\n\nconst result = avatars.getInitials(\n    '<NAME>', // name (optional)\n    0, // width (optional)\n    0, // height (optional)\n    '' // background (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Magic URL Session with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet initializes the Appwrite client, sets up the Account service, and updates a Magic URL session for a user. It requires the Appwrite Web SDK and uses async/await for handling the asynchronous operation.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-magic-u-r-l-session.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMagicURLSession(\n    '<USER_ID>', // userId\n    '<SECRET>' // secret\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Generating QR Codes with Appwrite Avatars Service in JavaScript\nDESCRIPTION: This snippet initializes an Appwrite client, configures it with the endpoint and project ID, and then uses the Avatars service to generate a QR code from provided text. Optional parameters include size, margin, and download options.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/avatars/get-q-r.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Avatars } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst avatars = new Avatars(client);\n\nconst result = avatars.getQR(\n    '<TEXT>', // text\n    1, // size (optional)\n    0, // margin (optional)\n    false // download (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Push Notification Target with Appwrite Web SDK\nDESCRIPTION: Initializes Appwrite client with endpoint and project ID, then uses the Account service to create a push notification target. This code sets up device registration for receiving push notifications through Appwrite's notification system.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-push-target.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createPushTarget(\n    '<TARGET_ID>', // targetId\n    '<IDENTIFIER>', // identifier\n    '<PROVIDER_ID>' // providerId (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Fetching Team Preferences with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, create a Teams instance, and retrieve team preferences. It requires the Appwrite Web SDK and a valid project ID and team ID.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/get-prefs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.getPrefs(\n    '<TEAM_ID>' // teamId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting Push Target with Appwrite SDK for Web in JavaScript\nDESCRIPTION: This code initializes the Appwrite client with the cloud endpoint and project ID, then uses the Account service to delete a specific push notification target. The result of the operation is logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/delete-push-target.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deletePushTarget(\n    '<TARGET_ID>' // targetId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Appwrite Locale Service in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the Appwrite Client and Locale service, then make a request to list all countries. It configures the client with an API endpoint and project ID before creating a Locale instance and calling the listCountries() method.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/list-countries.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.listCountries();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Delete User Session with Appwrite Web SDK in JavaScript\nDESCRIPTION: Demonstrates how to initialize the Appwrite client with endpoint and project settings, then delete a specific user session using the Account service. The code requires the Appwrite Web SDK and a valid session ID to function.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/delete-session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteSession(\n    '<SESSION_ID>' // sessionId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Fetching Languages\nDESCRIPTION: Demonstrates how to initialize the Appwrite client with endpoint and project settings, then uses the Locale service to retrieve a list of supported languages. Shows proper configuration of client credentials and async/await usage for API calls.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/list-languages.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.listLanguages();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Querying Team Membership with Appwrite Web SDK in JavaScript\nDESCRIPTION: Demonstrates how to initialize the Appwrite client with endpoint and project settings, then use the Teams service to retrieve specific membership details. Requires the Appwrite Web SDK and valid team/membership IDs.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/get-membership.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.getMembership(\n    '<TEAM_ID>', // teamId\n    '<MEMBERSHIP_ID>' // membershipId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Challenge with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, connect to an account, and create an email-based MFA challenge. It imports necessary components, configures the client with endpoint and project ID, and creates a new MFA challenge using the email factor.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-mfa-challenge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account, AuthenticationFactor } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMfaChallenge(\n    AuthenticationFactor.Email // factor\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Team Preferences using Appwrite SDK in JavaScript\nDESCRIPTION: This snippet initializes the Appwrite client, sets up the Teams service, and updates team preferences. It requires the Appwrite SDK for Web and valid project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/update-prefs.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.updatePrefs(\n    '<TEAM_ID>', // teamId\n    {} // prefs\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Generating Country Flag\nDESCRIPTION: Sets up an Appwrite client instance and uses the Avatars service to generate a country flag image. The code configures the API endpoint and project ID, then requests a flag image with optional size and quality parameters.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/avatars/get-flag.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Avatars, Flag } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst avatars = new Avatars(client);\n\nconst result = avatars.getFlag(\n    Flag.Afghanistan, // code\n    0, // width (optional)\n    0, // height (optional)\n    0 // quality (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Fetching Locale\nDESCRIPTION: Demonstrates how to initialize the Appwrite client with endpoint and project ID configuration, create a Locale service instance, and fetch locale information. The code shows the complete flow from setup to API call.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/get.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.get();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Team Membership Status with Appwrite Web SDK\nDESCRIPTION: Initializes Appwrite client with project credentials and updates a team member's membership status. Requires Appwrite endpoint URL, project ID, team ID, membership ID, user ID, and secret token. Returns the updated membership status.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/update-membership-status.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.updateMembershipStatus(\n    '<TEAM_ID>', // teamId\n    '<MEMBERSHIP_ID>', // membershipId\n    '<USER_ID>', // userId\n    '<SECRET>' // secret\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Web SDK and Fetching Locale Codes\nDESCRIPTION: Sets up an Appwrite client instance with endpoint and project configuration, then uses the Locale service to retrieve a list of locale codes. Shows the complete flow from importing dependencies to executing the API call.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/list-codes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.listCodes();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving MFA Recovery Codes using Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet initializes an Appwrite client, configures it with the API endpoint and project ID, creates an Account instance, and retrieves MFA recovery codes. The result is then logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/get-mfa-recovery-codes.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.getMfaRecoveryCodes();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Fetching Country Phone Codes\nDESCRIPTION: This snippet shows how to set up an Appwrite client, create a Locale instance, and use it to retrieve a list of country phone codes. It requires the Appwrite SDK for Web and a valid project ID.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/list-countries-phones.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.listCountriesPhones();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currency List with Appwrite Locale Service in JavaScript\nDESCRIPTION: This code initializes the Appwrite Client, configures it with an endpoint and project ID, then creates a Locale service instance to fetch a list of supported currencies. The response is logged to the console after awaiting the API call.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/list-currencies.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.listCurrencies();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Fetching EU Countries using Appwrite Locale API in JavaScript\nDESCRIPTION: Initializes an Appwrite client, configures it with endpoint and project ID, and uses the Locale service to retrieve a list of EU countries. This snippet demonstrates the complete flow from client setup to API consumption and result logging.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/list-countries-e-u.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.listCountriesEU();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Session with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to import Appwrite dependencies, initialize the client with endpoint and project ID, and update a phone session using the account service. It requires valid user ID and secret values to authenticate the session.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-phone-session.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePhoneSession(\n    '<USER_ID>', // userId\n    '<SECRET>' // secret\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Web SDK and Fetching Continents with Locale Service\nDESCRIPTION: This code snippet demonstrates how to initialize the Appwrite Web SDK client, create a Locale service instance, and fetch a list of continents from the Appwrite API. It requires the Appwrite SDK for web and a valid Appwrite project ID.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/locale/list-continents.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Locale } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst locale = new Locale(client);\n\nconst result = await locale.listContinents();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Generating Credit Card Avatar in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, set up the Avatars service, and use it to generate a credit card avatar. It demonstrates setting the API endpoint, project ID, and using the getCreditCard method with various parameters.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/avatars/get-credit-card.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Avatars, CreditCard } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst avatars = new Avatars(client);\n\nconst result = avatars.getCreditCard(\n    CreditCard.AmericanExpress, // code\n    0, // width (optional)\n    0, // height (optional)\n    0 // quality (optional)\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Storage Service in JavaScript\nDESCRIPTION: Sets up the Appwrite client with the endpoint and project ID, then initializes the Storage service to interact with files.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/get-file-download.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite Client and Retrieving File View with JavaScript\nDESCRIPTION: This snippet shows how to initialize an Appwrite client, create a Storage instance, and use it to retrieve a file view. It requires the Appwrite Web SDK and valid project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/storage/get-file-view.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = storage.getFileView(\n    '<BUCKET_ID>', // bucketId\n    '<FILE_ID>' // fileId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Phone Verification with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Appwrite client, set up an account instance, and create a phone verification. It uses the Appwrite Web SDK to interact with the Appwrite API.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/create-phone-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createPhoneVerification();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Subscriber using Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, create a Messaging instance, and delete a subscriber from a topic. It requires the Appwrite Web SDK and valid project credentials. The code expects a topic ID and subscriber ID as inputs.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/messaging/delete-subscriber.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Messaging } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst messaging = new Messaging(client);\n\nconst result = await messaging.deleteSubscriber(\n    '<TOPIC_ID>', // topicId\n    '<SUBSCRIBER_ID>' // subscriberId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Verification with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet initializes the Appwrite client, creates an account instance, and updates phone verification for a user. It requires the Appwrite Web SDK and valid project credentials. The code expects a user ID and a secret for verification.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-phone-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePhoneVerification(\n    '<USER_ID>', // userId\n    '<SECRET>' // secret\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting Team Membership using Appwrite SDK in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Appwrite client, create a Teams instance, and delete a team membership. It requires the Appwrite SDK and valid project credentials.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/teams/delete-membership.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Teams } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst teams = new Teams(client);\n\nconst result = await teams.deleteMembership(\n    '<TEAM_ID>', // teamId\n    '<MEMBERSHIP_ID>' // membershipId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating MFA Challenge Using Appwrite Web SDK in JavaScript\nDESCRIPTION: Sets up an Appwrite client connection and updates an MFA challenge with a provided OTP code. Requires Appwrite SDK, project ID, challenge ID, and valid OTP code. Returns the challenge validation result.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-mfa-challenge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMfaChallenge(\n    '<CHALLENGE_ID>', // challengeId\n    '<OTP>' // otp\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Setting up Appwrite Client and Fetching Favicon\nDESCRIPTION: Demonstrates how to initialize the Appwrite client with endpoint and project ID, then use the Avatars service to retrieve a favicon from a specified URL. The code configures the client connection and makes an API call to get the favicon.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/avatars/get-favicon.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Avatars } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst avatars = new Avatars(client);\n\nconst result = avatars.getFavicon(\n    'https://example.com' // url\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Creating a Messaging Subscriber with Appwrite SDK for Web\nDESCRIPTION: Initializes an Appwrite client with endpoint and project ID credentials, then creates a messaging subscriber. The subscriber is associated with a specific topic ID, subscriber ID, and target ID. The result of the operation is logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/messaging/create-subscriber.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Messaging } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst messaging = new Messaging(client);\n\nconst result = await messaging.createSubscriber(\n    '<TOPIC_ID>', // topicId\n    '<SUBSCRIBER_ID>', // subscriberId\n    '<TARGET_ID>' // targetId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting an Identity with Appwrite Web SDK in JavaScript\nDESCRIPTION: This snippet initializes the Appwrite client, sets up the Account service, and deletes a specific identity. It requires the Appwrite Web SDK and a valid project setup. The code expects an identity ID as input and logs the result of the deletion operation.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/delete-identity.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteIdentity(\n    '<IDENTITY_ID>' // identityId\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Deleting MFA Authenticator with Appwrite SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to remove a Time-based One-Time Password (TOTP) authenticator from a user's account using Appwrite's JavaScript SDK. It initializes the Appwrite client, creates an Account object, and calls the deleteMfaAuthenticator method to remove the TOTP authenticator. The result of the operation is logged to the console.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/delete-mfa-authenticator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account, AuthenticatorType } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteMfaAuthenticator(\n    AuthenticatorType.Totp // type\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Updating Push Target using Appwrite SDK in JavaScript\nDESCRIPTION: This snippet initializes the Appwrite client, creates an account instance, and updates a push target. It requires the Appwrite SDK for Web and valid project credentials. The function expects a target ID and an identifier as inputs.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/account/update-push-target.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePushTarget(\n    '<TARGET_ID>', // targetId\n    '<IDENTIFIER>' // identifier\n);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Generating Browser Avatars with Appwrite Web SDK\nDESCRIPTION: This code initializes an Appwrite client, configures it with endpoint and project ID, and uses the Avatars API to generate a browser avatar. The getBrowser method accepts parameters for browser code, width, height, and quality of the resulting image.\nSOURCE: https://github.com/appwrite/sdk-for-web/blob/main/docs/examples/avatars/get-browser.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Avatars, Browser } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('<YOUR_PROJECT_ID>'); // Your project ID\n\nconst avatars = new Avatars(client);\n\nconst result = avatars.getBrowser(\n    Browser.AvantBrowser, // code\n    0, // width (optional)\n    0, // height (optional)\n    0 // quality (optional)\n);\n\nconsole.log(result);\n```"
  }
]