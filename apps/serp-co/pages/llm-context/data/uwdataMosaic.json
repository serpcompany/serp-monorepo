[
  {
    "owner": "uwdata",
    "repo": "mosaic",
    "content": "TITLE: Initializing and Using DuckDB in Node.js\nDESCRIPTION: Demonstrates basic usage of the DuckDB API including database initialization, query execution, and result handling in both JavaScript object and Apache Arrow formats. Shows how to create tables, execute queries, and properly close the database connection.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/duckdb/duckdb.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DuckDB } from \"@uwdata/mosaic-duckdb\";\n\n// create an in-memory DuckDB instance\n// to open a database file, pass the path as the first argument\nconst db = new DuckDB();\n\n// execute a query without a returned result, await completion\nawait db.exec(`CREATE TABLE myTable AS SELECT * FROM 'my-data.parquet'`);\n\n// query for data, return as an array of JavaScript objects\nconst res = await db.query(`SELECT COUNT(*) FROM myTable`);\n\n// query for data, return as a binary Apache Arrow buffer\nconst buf = await db.arrowBuffer(`SELECT AVG(value) FROM myTable`);\n\n// shut down the DuckDB instance\ndb.close();\n```\n\n----------------------------------------\n\nTITLE: Converting AST to DOM Elements with astToDOM\nDESCRIPTION: Shows how to instantiate a running application by converting a parsed AST to DOM elements. The function loads data, generates parameters/selections, and returns both the root DOM element and a map of parameters.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/parser-generators.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { astToDOM } from \"@uwdata/mosaic-spec\";\n\n// instantiate a running application\n// assumes standard browser facilities in globabl variable `window`\nconst {\n  element, // root DOM element of the application\n  params   // Map of all named Params and Selections\n} = await astToDOM(ast);\n\n// add application to current web page\ndocument.body.appendChild(element);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mosaic with DuckDB-WASM for Time-Series Visualization\nDESCRIPTION: Demonstrates how to import vgplot, configure DuckDB-WASM connector, load CSV data into the database, and create a time-series area chart. This setup creates a new database instance running in-browser and generates an HTML element containing the visualization.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/get-started/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as vg from \"@uwdata/vgplot\";\n\n// configure the coordinator to use DuckDB-WASM\n// creates a new database instance running in-browser\nvg.coordinator().databaseConnector(vg.wasmConnector());\n\n// load data into the database\n// executes a query generated by the loadCSV helper\nvg.coordinator().exec(vg.loadCSV(\"stocks\", \"stock-data.csv\"));\n\n// create an area chart, returned as an HTML element\n// you can subsequently add this to your webpage\nconst chart = vg.plot(\n  vg.areaY(vg.from(\"stocks\"), { x: \"Date\", y: \"Price\" })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays with arrayAgg()\nDESCRIPTION: Creates an aggregate function that returns an array containing all the input expression values from the group.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\narrayAgg(expression)\n```\n\n----------------------------------------\n\nTITLE: Loading Data and Visualization Specification\nDESCRIPTION: Loads weather data from a CSV file using pandas with date parsing, and loads a YAML visualization specification. The data key is removed from the specification to ensure data is loaded from the pandas DataFrame instead.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/weather.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nweather = pd.read_csv(\"../../data/seattle-weather.csv\", parse_dates=[\"date\"])\n\n# Load weather spec, remove data key to ensure load from Pandas\nwith open(\"../../specs/yaml/weather.yaml\") as f:\n    spec = yaml.safe_load(f)\n    spec.pop(\"data\")\n```\n\n----------------------------------------\n\nTITLE: Parsing and Converting Mosaic Specifications to Different Formats (JavaScript)\nDESCRIPTION: Demonstrates how to parse a JSON specification into an internal AST, serialize it back to JSON, generate ESM code, and instantiate a running application. This example shows the core workflow of the mosaic-spec package.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/spec/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseSpec, astToDOM, astToESM } from '@uwdata/mosaic-spec';\n\n// declarative specification in JSON format\nconst spec = {\n  plot: [\n    {\n      mark: 'lineY',\n      data: { from: 'table' },\n      x: 'date',\n      y: 'value'\n    }\n  ],\n  width: 640,\n  height: 200\n};\n\n// parse specification to internal AST (abstract syntax tree)\nconst ast = parseSpec(spec);\n\n// serialize back to a normalized JSON format\nconst json = ast.toJSON();\n\n// generate ESM (ECMAScript Module) code\nconst code = astToESM(ast);\n\n// instantiate a running application\n// assumes standard browser facilities in globabl variable `window`\nconst {\n  element, // root DOM element of the application\n  params   // Map of all named Params and Selections\n} = await astToDOM(ast);\n\n// add application to current web page\ndocument.body.appendChild(element);\n```\n\n----------------------------------------\n\nTITLE: Creating Mosaic Coordinator Instance in JavaScript\nDESCRIPTION: Constructor for creating a new Mosaic Coordinator. It accepts a database connector and options for logging, caching, query consolidation, and pre-aggregation settings.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Coordinator(connector, options)\n```\n\n----------------------------------------\n\nTITLE: Using parseSpec to Convert JSON to AST\nDESCRIPTION: Demonstrates how to parse a JSON specification into an abstract syntax tree (AST) and then serialize it back to JSON format. The example includes a simple plot specification with line mark, data source, and dimension settings.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/parser-generators.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseSpec } from \"@uwdata/mosaic-spec\";\n\n// declarative specification in JSON format\nconst spec = {\n  plot: [\n    {\n      mark: \"lineY\",\n      data: { from: \"table\" },\n      x: \"date\",\n      y: \"value\"\n    }\n  ],\n  width: 640,\n  height: 200\n};\n\n// parse specification to internal AST (abstract syntax tree)\nconst ast = parseSpec(spec);\n\n// serialize back to a normalized JSON format\nconst json = ast.toJSON();\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values with max()\nDESCRIPTION: Creates an aggregate function that calculates the maximum value of the input expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmax(expression)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with vgplot in JavaScript\nDESCRIPTION: Creates a line chart visualization using the vgplot JavaScript API. The chart displays stock price data from an 'aapl' data source, with configurable width and height attributes.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/vgplot/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plot, line, from, width, height } from \"@uwdata/vgplot\";\nplot(\n  lineY(from(\"aapl\"), { x: \"Date\", y: \"Close\" }),\n  width(680),\n  height(200)\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting Mosaic to PostgreSQL Database\nDESCRIPTION: Demonstrates how to configure and connect to a PostgreSQL database using DuckDB extensions, followed by data visualization setup. Includes configuration string formation and database attachment with an example visualization of aeromagnetic survey data.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/multi-database-support.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as vg from \"@uwdata/vgplot\";\n\n// database configuration info\n// replace values with your specific configuration\nconst config = {\n  dbname: \"YOUR_DATABASE_NAME\",\n  user: \"postgres\",\n  password: \"YOUR_PASSWORD\",\n  host: \"YOUR_HOST_IP\"\n};\n\n// map configuration info to a connection string\nconst postgres_connection_string = Object.entries(config)\n  .map([key, value] => `${key}=${value}`)\n  .join(\" \");\n\nawait vg.coordinator().exec([\n  // attach and use a PostgreSQL database\n  `ATTACH '${postgres_connection_string}' AS postgres_db (TYPE POSTGRES)`,\n  \"USE postgres_db\",\n  vg.loadParquet(\"ca55\", \"data/ca55-south.parquet\") // load a dataset\n]);\n\n// create interactive visualizations for your dataset as usual!\n// here we've copied the aeromagnetic-survey example...\nconst $interp = vg.Param.value(\"random-walk\");\nconst $blur = vg.Param.value(0);\n\nexport default vg.vconcat(\n  vg.hconcat(\n    vg.menu({\n      label: \"Interpolation Method\",\n      options: [\"none\", \"nearest\", \"barycentric\", \"random-walk\"],\n      as: $interp\n    }),\n    vg.hspace(\"1em\"),\n    vg.slider({label: \"Blur\", min: 0, max: 100, as: $blur})\n  ),\n  vg.vspace(\"1em\"),\n  vg.plot(\n    vg.raster(\n      vg.from(\"ca55\"),\n      {\n        x: \"LONGITUDE\",\n        y: \"LATITUDE\",\n        fill: vg.max(\"MAG_IGRF90\"),\n        interpolate: $interp,\n        bandwidth: $blur\n      }\n    ),\n    vg.colorScale(\"diverging\"),\n    vg.colorDomain(vg.Fixed)\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Projection Warning for Interval Interactors in Mosaic\nDESCRIPTION: A warning notice that interval interactors are not currently supported when using cartographic projections in Mosaic.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/attributes.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n::: warning\nInterval interactors are not currently supported when cartographic projections are used.\n:::\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Mosaic Coordinator\nDESCRIPTION: Request a query and return results. Supports options for return format, caching, and priority. Additional options are passed to the database.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.query(query, options)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Row Number in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the number of the current row within the partition, counting from 1.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrow_number()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Coordinator Instance in JavaScript\nDESCRIPTION: Get the default global coordinator instance. This method provides access to a shared coordinator object across the application.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator()\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Objects into DuckDB Table\nDESCRIPTION: Demonstrates using loadObjects to create a table from JavaScript objects. This converts an array of objects into a SQL query with UNION ALL statements to populate a table with the provided data.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/data-loading.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// CREATE TABLE IF NOT EXISTS table3 AS\n//   (SELECT 1 AS \"foo\", 2 AS \"bar\") UNION ALL\n//   (SELECT 3 AS \"foo\", 4 AS \"bar\") UNION ALL ...\nconst q = loadObjects(\"table3\", [\n  { foo: 1, bar: 2 },\n  { foo: 3, bar: 4 },\n  ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Weather Visualization with Mosaic\nDESCRIPTION: Complete example showing how to load weather data from a CSV file, read a YAML specification, and create an interactive Mosaic visualization in Jupyter.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/jupyter/index.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport yaml\n\nfrom mosaic_widget import MosaicWidget\n\nweather = pd.read_csv(\"https://uwdata.github.io/mosaic-datasets/data/seattle-weather.csv\", parse_dates=['date'])\n\n# Load weather spec, remove data key to ensure load from Pandas\nwith open(\"weather.yaml\") as f:\n    spec = yaml.safe_load(f)\n    spec.pop(\"data\")\n\nMosaicWidget(spec, data = {\"weather\": weather})\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Cumulative Distribution in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the cumulative distribution. (number of preceding or peer partition rows) / total partition rows.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncume_dist()\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into DuckDB Table Example\nDESCRIPTION: Demonstrates using the loadCSV function to create a table named 'table1' from 'file.csv' using default options. This generates a SQL query that creates a table and loads data from the CSV file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/data-loading.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Loads file.csv into the table \"table1\" with default options:\n// CREATE TABLE IF NOT EXISTS table1 AS\n//   SELECT *\n//   FROM read_csv('file.csv', auto_detect=true, sample_size=-1)\nloadCSV(\"table1\", \"file.csv\");\n```\n\n----------------------------------------\n\nTITLE: Computing Regression R-squared with regrR2()\nDESCRIPTION: Creates an aggregate function that returns the R² value (coefficient of determination) of the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrR2(y, x)\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Info Method in JavaScript\nDESCRIPTION: Method called by the coordinator to set field information. The info parameter is an array of objects containing table name, column name, and type information.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.fieldInfo(info)\n```\n\n----------------------------------------\n\nTITLE: Connecting Mosaic to MySQL Database\nDESCRIPTION: Shows the configuration and connection process for MySQL databases using DuckDB extensions. Includes setup for connection string formatting and database attachment.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/multi-database-support.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as vg from \"@uwdata/vgplot\";\n\n// database configuration info\n// replace values with your specific configuration\nconst config = {\n  database: \"YOUR_DATABASE_NAME\",\n  user: \"root\",\n  password: \"YOUR_PASSWORD\",\n  host: \"YOUR_HOST_IP\",\n  port: \"YOUR_PORT\"\n};\n\n// map configuration info to a connection string\nconst mysql_connection_string = Object.entries(config)\n  .map([key, value] => `${key}=${value}`)\n  .join(\" \");\n\nawait vg.coordinator().exec([\n  // attach and use a MySQL database\n  `ATTACH '${mysql_connection_string}' AS mysqldb (TYPE MYSQL)`,\n  \"USE mysqldb\",\n  vg.loadParquet(\"ca55\", \"data/ca55-south.parquet\") // load a dataset\n]);\n\n// now add Mosaic specification code as usual!\n```\n\n----------------------------------------\n\nTITLE: Creating Plot Specifications in Mosaic\nDESCRIPTION: Demonstrates how to create a plot specification with marks, interactors, and legends including data binding and encoding channels.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plot\": [\n    {\n      \"mark\": \"dot\",\n      \"data\": { \"from\": \"tableName\", \"filterBy\": \"$selection\" },\n      \"x\": \"foo\",\n      \"y\": \"bar\",\n      \"r\": { \"sql\": \"SQRT($areaParam)\" },\n      \"fill\": \"$colorParam\"\n    },\n    { \"select\": \"intervalXY\", \"as\": \"$selection\" },\n    { \"select\": \"highlight\", \"by\": \"$selection\" }\n  ],\n  \"yAxis\": \"right\",\n  \"width\": 500,\n  \"height\": 500\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Sources in Mosaic\nDESCRIPTION: Demonstrates various ways to define data sources including SQL queries, CSV files, JSON files, and Parquet files with filtering options.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"queryData\": \"SELECT * FROM existingTable\",\n\n  \"csvData\": { \"file\": \"data.csv\", \"delimiter\": \"\\t\" },\n\n  \"jsonData\": { \"file\": \"data.json\", \"type\": \"json\" },\n\n  \"parquetData\": {\n    \"file\": \"data.parquet\",\n    \"select\": [\"foo\", \"bar\"],\n    \"where\": \"baz > 5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Regression Intercept with regrIntercept()\nDESCRIPTION: Creates an aggregate function that returns the intercept of the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrIntercept(y, x)\n```\n\n----------------------------------------\n\nTITLE: Resetting Mosaic Coordinator State\nDESCRIPTION: Reset the state of the coordinator, with options to disconnect clients and clear the query cache.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.clear(options)\n```\n\n----------------------------------------\n\nTITLE: Initializing MosaicClient in JavaScript\nDESCRIPTION: Constructor for creating a new MosaicClient instance. It accepts an optional filterSelection parameter of type Selection, which is exposed as the client's filterBy property.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew MosaicClient(filterSelection)\n```\n\n----------------------------------------\n\nTITLE: Initializing DuckDB-WASM Connector\nDESCRIPTION: Creates a new DuckDB-WASM connector with configurable options for in-browser database operations using WebAssembly. Supports existing DuckDB instances, connections, and logging configuration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/connectors.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwasmConnector(options)\n```\n\n----------------------------------------\n\nTITLE: Connecting Mosaic to SQLite Database\nDESCRIPTION: Demonstrates the simplified process of connecting to a SQLite database using DuckDB extensions. Shows basic database attachment and usage setup.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/multi-database-support.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as vg from \"@uwdata/vgplot\";\n\nawait vg.coordinator().exec([\n  // attach and use a SQLite database\n  `ATTACH 'sakila.db' (TYPE SQLITE)`,\n  \"USE sakila\",\n  vg.loadParquet(\"ca55\", \"data/ca55-south.parquet\") // load the dataset\n]);\n\n// now add Mosaic specification code as usual!\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Rank in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the rank of the current row with gaps. This is the same as the row_number of its first peer.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrank()\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Functions for Moving Averages in JavaScript\nDESCRIPTION: Shows how to use window functions to calculate a 7-day moving average and row numbering. The example demonstrates orderby and rows parameters to define the window frame.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Query, row_number, avg } from \"@uwdata/mosaic-sql\";\n\n// 7-day moving average (previous and next 3 days)\n// and corresponding ordered row numbers\nQuery.select({\n  avg: avg(\"foo\").orderby(\"date\").rows([3, 3]),\n  num: row_number().orderby(\"date\")\n}).from(\"myTable\");\n```\n\n----------------------------------------\n\nTITLE: Loading Parquet Data with Filtering and Column Selection\nDESCRIPTION: Shows how to use loadParquet to selectively load specific columns from a Parquet file with a filter condition. This example creates a table 'table1' containing only the 'foo', 'bar', and 'value' columns where 'value > 1'.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/data-loading.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Load named columns from a parquet file, filtered upon load:\n// CREATE TABLE IF NOT EXISTS table1 AS\n//   SELECT foo, bar, value\n//   FROM read_parquet('file.parquet')\n//   WHERE value > 1\nloadParquet(\"table1\", \"file.parquet\", {\n  select: [ \"foo\", \"bar\", \"value\" ],\n  where: \"value > 1\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mosaic Client in Svelte\nDESCRIPTION: A Svelte component that displays total and filtered row counts using Mosaic's makeClient API. The component handles state management, lifecycle events, and updates based on table selection changes.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/web-clients/index.md#2025-04-16_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // Show the number of rows in the table.\n  // If a `selection` is provided, show the filtered number of rows as well.\n\n  import { makeClient } from \"@uwdata/mosaic-core\";\n  import { count, Query } from \"@uwdata/mosaic-sql\";\n\n  const { coordinator, table, selection } = $props();\n\n  let totalCount = $state(null);\n  let filteredCount = $state(null);\n  let isError = $state(false);\n  let isPending = $state(false);\n\n  $effect(() => {\n    // Capture tableName so Svelte keeps track of it in the effect.\n    // When `table` changes, Svelte will re-run the effect and cause the old client\n    // be destroyed and a new client be created.\n    let tableName = table;\n\n    // Note that the identity of `selection` is also captured below.\n    // If it is replaced with a new instance of Selection, the client will get recreated as well.\n\n    let client = makeClient({\n      coordinator,\n      selection,\n      prepare: async () => {\n        // Preparation work before the client starts.\n        // Here we get the total number of rows in the table.\n        let result = await coordinator.query(\n          Query.from(tableName).select({ count: count() })\n        );\n        totalCount = result.get(0).count;\n      },\n      query: (predicate) => {\n        // Returns a query to retrieve the data.\n        // The `predicate` is the selection's predicate for this client.\n        // Here we use it to get the filtered count.\n        return Query.from(tableName)\n          .select({ count: count() })\n          .where(predicate);\n      },\n      queryResult: (data) => {\n        // The query result is available.\n        filteredCount = data.get(0).count;\n        isError = false;\n        isPending = false;\n      },\n      queryPending: () => {\n        // The query is pending.\n        isPending = true;\n        isError = false;\n      },\n      queryError: () => {\n        // There is an error running the query.\n        isPending = false;\n        isError = true;\n      },\n    });\n\n    return () => {\n      // Destroy the client on effect cleanup.\n      client.destroy();\n    };\n  });\n</script>\n\n{filteredCount} / {totalCount}\n{isPending ? \"(pending)\" : \"\"}\n{isError ? \"(error)\" : \"\"}\n```\n\n----------------------------------------\n\nTITLE: Using intervalX() Interactor for X-Axis Range Selection\nDESCRIPTION: Selects a 1D interval range along the x dimension. Options include selection target, field to select, pixel size for grid-snapping, and brush styling.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nintervalX(options)\n```\n\n----------------------------------------\n\nTITLE: Between Range Check\nDESCRIPTION: Function that tests if the input expression lies between lo and hi values. Equivalent to lo <= expression AND expression <= hi.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nisBetween(expression, [lo, hi])\n```\n\n----------------------------------------\n\nTITLE: Creating Selection Objects with Different Resolution Strategies\nDESCRIPTION: Demonstrates creating Selection objects with different resolution strategies for merging predicates across components. Shows examples of single, union, and intersect strategies, as well as cross-filtering options which affect views other than the currently interacted one.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/core/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Selection } from \"@uwdata/mosaic-core\";\n\n// Create a Selection with \"single\" resolution strategy\nSelection.single()\n\n// Create a Selection with \"union\" resolution strategy\nSelection.union()\n\n// Create a Selection with \"intersect\" resolution strategy\nSelection.intersect()\n\n// A shorthand for \"intersect\" with cross-filtering\nSelection.crossfilter()\n\n// A single Selection that applies cross-filtering\nSelection.single({ cross: true })\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Selections in Mosaic\nDESCRIPTION: Shows how to define scalar parameters, array parameters, and various types of selections including single, union, intersect, and crossfilter.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scalarParam\": 5,\n  \"arrayParam\": [0, \"$scalarParam\"],\n\n  \"singleSelection\": { \"select\": \"single\" },\n  \"unionSelection\": { \"select\": \"union\" },\n  \"intersectSelection\": { \"select\": \"intersect\" },\n  \"crossfilterSelection\": { \"select\": \"crossfiltter\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Athlete Height Visualization in JavaScript ESM Format\nDESCRIPTION: JavaScript implementation of the athlete height confidence intervals visualization using the ESM module format. This code creates an interactive plot with a slider to control sample size for visualizing confidence intervals of Olympic athlete heights.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/athlete-height.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript code for athlete height intervals visualization would be here\n```\n\n----------------------------------------\n\nTITLE: Logical OR Operator\nDESCRIPTION: Function that creates an expression for logical OR of provided clauses. Flattens input array and ignores null entries.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nor(...clauses)\n```\n\n----------------------------------------\n\nTITLE: Query Class Methods for SQL Construction in JavaScript\nDESCRIPTION: Details all available methods on the Query class for building comprehensive SQL queries, including CTEs, filtering, grouping, and sorting operations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQuery\n  .with(/* a map of named common table expression queries */)\n  .select(/* column names or name -> expression maps */)\n  .distinct(/* boolean to denote distinct values only */)\n  .from(/* source table names or subqueries */)\n  .sample(/* number of rows or % to sample */)\n  .where(/* filter criteria */)\n  .groupby(/* columns or expressions to group by */)\n  .having(/* post-aggregation filter criteria */)\n  .window(/* named window definitions */)\n  .qualify(/* post-window filter criteria */)\n  .orderby(/* columns or expressions to sort by */)\n  .limit(/* max number of rows */)\n  .offset(/* offset number of rows */)\n```\n\n----------------------------------------\n\nTITLE: Calculating Products with product()\nDESCRIPTION: Creates an aggregate function that calculates the product of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nproduct(expression)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying DuckDB in Node.js\nDESCRIPTION: Demonstrates how to create a DuckDB instance, execute queries, fetch results as JavaScript objects or Apache Arrow buffers, and properly close the connection. Examples include creating tables from Parquet files and running aggregate queries.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/duckdb/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DuckDB } from \"@uwdata/mosaic-duckdb\";\n\n// create an in-memory DuckDB instance\n// to open a database file, pass the path as the first argument\nconst db = new DuckDB();\n\n// execute a query without a returned result, await completion\nawait db.exec(`CREATE TABLE myTable AS SELECT * FROM 'my-data.parquet'`);\n\n// query for data, return as an array of JavaScript objects\nconst res = await db.query(`SELECT COUNT(*) FROM myTable`);\n\n// query for data, return as a binary Apache Arrow buffer\nconst buf = await db.arrowBuffer(`SELECT AVG(value) FROM myTable`);\n\n// shut down the DuckDB instance\ndb.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Data Table\nDESCRIPTION: Creates a scrollable and sortable table component that displays athlete data with specified column widths. Includes filtering capability through a query parameter.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/inputs/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { table } from \"@uwdata/vgplot\";\ntable({\n  from: \"athletes\",\n  filterBy: query,\n  columns: [ \"name\", \"nationality\", \"sex\", \"height\", \"weight\" ,\"sport\" ],\n  width: { \"name\": 180, \"nationality\": 100, \"sex\": 50, \"height\": 50, \"weight\": 50, \"sport\": 100 },\n  height: 250\n})\n```\n\n----------------------------------------\n\nTITLE: Moving Average Visualization Specification in JavaScript\nDESCRIPTION: JavaScript implementation of the moving average visualization for COVID-19 cases in Berlin. It defines the data source, transformations including moving averages with different window sizes, and plot configuration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/moving-average.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plot, legend } from '@uwdata/vgplot';\n\nplot({\n  style: { marginTop: 30 },\n  width: 600,\n  height: 300,\n  grid: true,\n  x: { axis: 'top', title: 'Day' },\n  y: { title: 'Cases' },\n  color: { domain: ['Raw', 'MA-7', 'MA-14'], range: ['#aaa', '#1f77b4', '#ff7f0e'] },\n  marks: [\n    {\n      stroke: 'color',\n      strokeWidth: d => d.k === 'Raw' ? 1 : 1.5,\n      x: 'day',\n      y: 'cases',\n      data: {\n        url: 'data/berlin-covid.csv'\n      },\n      transform: [\n        { type: 'window', k: 'Raw', field: 'cases' },\n        {\n          type: 'window',\n          groupby: [],\n          k: 'MA-7',\n          field: 'cases',\n          frame: [-3, 3],\n          ops: ['mean']\n        },\n        {\n          type: 'window',\n          groupby: [],\n          k: 'MA-14',\n          field: 'cases',\n          frame: [-6, 7],\n          ops: ['mean']\n        },\n        { type: 'fold', fields: ['cases', 'mean_cases', 'mean_cases_1'], as: ['k', 'cases'] },\n        {\n          type: 'formula',\n          expr: \"datum.k === 'cases' ? 'Raw' : datum.k === 'mean_cases' ? 'MA-7' : 'MA-14'\",\n          as: 'k'\n        }\n      ]\n    }\n  ],\n  color: legend({ orient: 'top', title: null })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Color Legend in Mosaic\nDESCRIPTION: Creates a new legend for a plot's color scale. Supports options for specifying the corresponding plot, creating a selection for interactions, and additional Observable Plot legend options.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/legends.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorLegend(options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with Explicit Options in JavaScript\nDESCRIPTION: Creates a new slider with explicitly provided options including minimum, maximum, and step values. The slider is connected to a selection for generating predicates.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/slider.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nslider({ as: selection, min: 0, max: 10, step: 1 })\n```\n\n----------------------------------------\n\nTITLE: Mapping Dates to Standard Month Reference in SQL\nDESCRIPTION: The dateMonth function maps dates to the first day of their corresponding month in the year 2012. This enables cyclic comparison of dates across different years while maintaining a temporal data type.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/date-functions.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ndateMonth(expression)\n```\n\n----------------------------------------\n\nTITLE: Initializing REST Connector for DuckDB\nDESCRIPTION: Creates a new HTTP REST connector to communicate with a DuckDB data server. Takes an optional URI parameter that defaults to http://localhost:3000/.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/connectors.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrestConnector(uri)\n```\n\n----------------------------------------\n\nTITLE: Updating Selection Clause in JavaScript\nDESCRIPTION: The update method updates the selection with a new selection clause. It removes any prior clause with the same source and adds the new clause as the active one.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.update(clause)\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Box with Autocomplete in JavaScript\nDESCRIPTION: Creates a new search box with autocomplete values pulled from a database table column. The widget is connected to a selection object that will be updated with search predicates based on user input.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/search.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsearch({ from: \"table\", column: \"foo\", as: selection })\n```\n\n----------------------------------------\n\nTITLE: Line Multi-Series Chart Specification in JavaScript\nDESCRIPTION: JavaScript specification for creating an interactive line chart showing unemployment rates across U.S. metro divisions with hover highlighting and annotations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line-multi-series.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/public/specs/esm/line-multi-series.js [JavaScript]\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu with Explicit Options\nDESCRIPTION: Creates a new menu with explicitly provided options, each having a label and value. The menu is connected to a selection that will be updated based on the chosen option.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/menu.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmenu({\n  as: selection,\n  options: [\n    { label: \"label1\", value: \"value1\" },\n    { label: \"label2\", value: \"value2\" },\n    ...\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting Query Execution in JavaScript\nDESCRIPTION: Method to request the coordinator to execute a query for this client. It returns a Promise that resolves upon query completion or error.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclient.requestQuery(query)\n```\n\n----------------------------------------\n\nTITLE: Using region() Interactor for Rectangular Selection\nDESCRIPTION: Selects point values from elements within a rectangular region. Unlike interval interactors, it selects specific values rather than ranges. Options include selection target, channels to select, and brush styling.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nregion(options)\n```\n\n----------------------------------------\n\nTITLE: Creating a DuckDB Data Server with WebSocket and HTTP Support\nDESCRIPTION: Shows how to set up a data server that provides network access to a DuckDB instance. The server supports both WebSocket and HTTP connections, and will cache query results to the local filesystem when requested.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/duckdb/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DuckDB, dataServer } from \"@uwdata/mosaic-duckdb\";\ndataServer(new DuckDB(), { rest: true, socket: true });\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart with vgplot\nDESCRIPTION: Creates a vertical bar chart using data from a database table named 'data'. Maps column 'a' to the x-axis and column 'b' to the y-axis with steelblue bars at 50% opacity.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/marks.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { barY, from, plot } from \"@uwdata/vgplot\";\nplot(\n  barY(from(\"data\"), { x: \"a\", y: \"b\", fill: \"steelblue\", opacity: 0.5 })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu with Database-Backed Options\nDESCRIPTION: Creates a new menu with options pulled from a specific column in a database table. The menu is connected to a param that will be updated with the selected value.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/menu.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu({ from: \"table\", column: \"foo\", as: param })\n```\n\n----------------------------------------\n\nTITLE: Creating Mosaic Visualization with Parameter Change Tracking\nDESCRIPTION: Advanced example demonstrating how to create a Mosaic visualization that monitors parameter changes and displays them in a separate output widget for interactive data exploration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/jupyter/index.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pprint import pprint\nimport ipywidgets as widgets\nimport pandas as pd\nimport yaml\n\nfrom mosaic_widget import MosaicWidget\n\nweather = pd.read_csv(\"https://uwdata.github.io/mosaic-datasets/data/seattle-weather.csv\", parse_dates=['date'])\n\n# Load weather spec, remove data key to ensure load from Pandas\nwith open(\"weather.yaml\") as f:\n    spec = yaml.safe_load(f)\n    spec.pop(\"data\")\n\nwidget = MosaicWidget(spec, data = {\"weather\": weather})\n\noutput = widgets.Output()\n\n@output.capture(clear_output=True)\ndef handle_change(change):\n    pprint(change.new)\n\nwidget.observe(handle_change, names=[\"params\"])\n\nwidgets.VBox([widget, output])\n```\n\n----------------------------------------\n\nTITLE: Creating Symbol Legend in Mosaic\nDESCRIPTION: Creates a new legend for a plot's symbol scale. Supports options for specifying the corresponding plot, creating a selection for interactions, and additional Observable Plot legend options.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/legends.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsymbolLegend(options)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom API Context with Socket Connector in Mosaic\nDESCRIPTION: This example demonstrates how to create a custom API context with a dedicated coordinator using a WebSocket connector to a DuckDB server, and then use that context to create visualizations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/context.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  Coordinator, createAPIContext, socketConnector\n} from \"uwdata/vgplot\";\n\n// create a new API context, using a coordinator with\n// a dedicated socket connector to a DuckDB server\nconst api = createAPIContext({\n  coordinator: new Coordinator(socketConnector(\"ws://localhost:8001/\"))\n});\n\n// use the API context just like normal vgplot exports\ndocument.appendChild(\n  api.vconcat(\n    api.plot(...),\n    ...\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using pan() Interactor for Plot Panning\nDESCRIPTION: Enables panning of the plot in either x or y dimension without zooming. Options include selections for x and y domains and fields to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npan(options)\n```\n\n----------------------------------------\n\nTITLE: Initializing DuckDB Data Server in Node.js\nDESCRIPTION: Example showing how to launch a data server instance with both REST and WebSocket support. The server is initialized with a new DuckDB instance and configured to handle both connection types.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/duckdb/data-server.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DuckDB, dataServer } from \"@uwdata/mosaic-duckdb\";\ndataServer(new DuckDB(), { rest: true, socket: true });\n```\n\n----------------------------------------\n\nTITLE: Creating Range Queries with SQL Operators in JavaScript\nDESCRIPTION: Shows how to use logical operators and range operators to build a SQL query with multiple conditions. The example demonstrates filtering data within specific numerical ranges.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Query, and, count, isBetween } from \"@uwdata/mosaic-sql\";\nQuery\n  .from(\"myTable\")\n  .select({ count: count() })\n  .where(and(isBetween(\"foo\", [10, 50]), isBetween(\"bar\", [-5, 10])))\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider from Database Table in JavaScript\nDESCRIPTION: Creates a new slider with options pulled from 'table.foo' column in the backing database. The slider is connected to a parameter for value updates.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/slider.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider({ from: \"table\", column: \"foo\", as: param })\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Component using the table() Method\nDESCRIPTION: Creates a new table component with the specified options. This method instantiates a Table class, connects it to the coordinator, and returns the corresponding HTML element.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/table.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntable(options)\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data into DuckDB Table Example\nDESCRIPTION: Demonstrates using the loadJSON function to create a table named 'table1' from 'file.json' using default options. This generates a SQL query that creates a table and loads data from the JSON file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/data-loading.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Loads file.json into the table \"table1\" with default options:\n// CREATE TABLE IF NOT EXISTS table1 AS\n//   SELECT *\n//   FROM read_json('file.json', auto_detect=true, json_format='auto')\nloadJSON(\"table1\", \"file.json\");\n```\n\n----------------------------------------\n\nTITLE: Using panZoomX() Interactor for X-Axis Panning and Zooming\nDESCRIPTION: Enables both panning and zooming of the plot in the x dimension only. Options include selections for domains and fields to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npanZoomX(options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with vgplot in YAML\nDESCRIPTION: Creates the same line chart visualization using vgplot's YAML specification format. This demonstrates the declarative approach to creating visualizations with vgplot as an alternative to the JavaScript API.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/vgplot/index.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplot:\n- mark: lineY\n  data: { from: aapl }\n  x: Date\n  y: Close\nwidth: 680\nheight: 200\n```\n\n----------------------------------------\n\nTITLE: Using intervalXY() Interactor for 2D Range Selection\nDESCRIPTION: Selects a 2D interval range along the x and y dimensions. Options include selection targets, fields to select, pixel size for grid-snapping, and brush styling.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nintervalXY(options)\n```\n\n----------------------------------------\n\nTITLE: Driving Shifts Visualization JavaScript Implementation\nDESCRIPTION: JavaScript implementation of the connected scatter plot visualization showing the relationship between miles driven and gas prices. Uses vgplot to create the visualization with various styling and formatting options.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/driving-shifts.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  width: 780,\n  height: 480,\n  padding: { left: 50, right: 110, top: 40, bottom: 40 },\n  data: {\n    url: \"data/driving.csv\"\n  },\n  transform: [\n    {\n      type: \"derived\",\n      columns: {\n        \"Miles driven (trillion)\":  d => d[\"Miles driven (trillion)\"],\n        \"Cost per gallon ($)\": d => d[\"Gas price ($)\"],\n        index: d => +d.year % 10 === 0 ? d.year : null\n      }\n    }\n  ],\n  x: {\n    grid: true,\n    label: \"Miles driven (trillion per year)\",\n  },\n  y: {\n    grid: true,\n    label: \"Cost per gallon ($)\"\n  },\n  marks: [\n    {\n      type: \"line\",\n      x: \"Miles driven (trillion)\",\n      y: \"Cost per gallon ($)\",\n      stroke: \"#aaa\"\n    },\n    {\n      type: \"text\",\n      x: \"Miles driven (trillion)\",\n      y: \"Cost per gallon ($)\",\n      text: \"index\",\n      dx: 6,\n      dy: -4,\n      fontSize: 12,\n      fontWeight: \"bold\"\n    },\n    {\n      type: \"dot\",\n      x: \"Miles driven (trillion)\",\n      y: \"Cost per gallon ($)\",\n      r: 3,\n      fill: \"currentColor\"\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SQL Expressions with Template Literals in JavaScript\nDESCRIPTION: Demonstrates how to use the sql template literal for creating custom SQL expressions. This approach is useful when deeper analysis of the expression structure isn't required.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Query, sql } from \"@uwdata/mosaic-sql\";\nQuery\n  .select({ logFoo: sql`log(foo + 1)` })\n  .from(\"myTable\");\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB-WASM Connector for Browser Use in Mosaic\nDESCRIPTION: This code snippet shows how to configure Mosaic to use a DuckDB-WASM connector in the browser instead of the default DuckDB server connection. It imports the coordinator and wasmConnector from @uwdata/vgplot and sets up the database connector.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { coordinator, wasmConnector } from \"@uwdata/vgplot\";\ncoordinator().databaseConnector(wasmConnector());\n```\n\n----------------------------------------\n\nTITLE: Building Basic SQL Queries with Query Class in JavaScript\nDESCRIPTION: Demonstrates how to use the Query class to build a basic SQL SELECT query with column aliases. The Query class allows for string coercion that produces a complete query string.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Query } from \"@uwdata/mosaic-sql\";\n\n// SELECT foo AS a, bar AS b FROM table\nQuery.from(\"table\").select({ a: \"foo\", b: \"bar\" })\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Selection in JavaScript\nDESCRIPTION: The addEventListener method adds an event listener callback function for the specified event type. Selections support both 'value' and 'activate' type events.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.addEventListener(type, callback)\n```\n\n----------------------------------------\n\nTITLE: Building Data Analysis Pipelines with Mosaic\nDESCRIPTION: Example of building analysis pipelines using Mosaic's workflow creation capabilities. This demonstrates how to define alternative analysis paths and model specifications for multiverse analysis.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/plot/index.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom mosaic import Builder, Workflow\n\n# define a workflow\nbuilder = Builder()\nwith builder:\n    raw_data = load_data()                      # fixed operation\n    data = transform(raw_data, choice=[...])    # choice point\n    model = build_model(choice=[...])           # choice point\n    fit_model(model, data)                      # fixed operation\n\n# create a workflow\nworkflow = Workflow(builder)\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Expressions with Template Literals in JavaScript\nDESCRIPTION: Demonstrates using the sql template tag to create a dynamic SQL expression that adds a parameter value to a column. The example shows how column references and parameters can be interpolated, and later extracted using collection methods.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/expressions.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst param = Param.value(5);\nsql`${column(\"foo\")} + ${param}`\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Dense Rank in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the rank of the current row without gaps. The function counts peer groups.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndense_rank()\n```\n\n----------------------------------------\n\nTITLE: Using toggle() Interactor for Selection in Mosaic\nDESCRIPTION: Selects individual data values by clicking/shift-clicking points. Options include specifying the selection to populate, which channels to select, and whether marks should be considered peers for cross-filtering.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoggle(options)\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Specifications with parseSpec\nDESCRIPTION: Demonstrates how to parse a YAML specification by first converting it to a JavaScript object and then passing it to parseSpec.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/parser-generators.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseSpec } from \"@uwdata/mosaic-spec\";\nimport yaml from \"yaml\";\nconst spec = yaml.parse(yamlText);\nparseSpec(spec);\n```\n\n----------------------------------------\n\nTITLE: Connecting Client to Mosaic Coordinator\nDESCRIPTION: Connect a client to the coordinator, initiating the client lifecycle and handling updates for clients with filterBy selections.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.connect(client)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Percent Rank in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the relative rank of the current row. Equal to (rank() - 1) / (total partition rows - 1).\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npercent_rank()\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Objects into Database Tables\nDESCRIPTION: Shows how to use the loadObjects utility to convert JavaScript objects into SQL queries for database insertion. This method generates a UNION ALL query to insert multiple rows of data.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadObjects } from \"@uwdata/mosaic-sql\";\n\n// CREATE TABLE IF NOT EXISTS table3 AS\n//   (SELECT 1 AS \"foo\", 2 AS \"bar\") UNION ALL\n//   (SELECT 3 AS \"foo\", 4 AS \"bar\") UNION ALL ...\nconst q = loadObjects(\"table3\", [\n  { foo: 1, bar: 2 },\n  { foo: 3, bar: 4 },\n  ...\n]);\n```\n\n----------------------------------------\n\nTITLE: Building a Basic SQL Query with Aggregation in JavaScript\nDESCRIPTION: Demonstrates creating a basic SQL query that selects a category column, counts records, sums values, groups by category, and filters for values greater than 0. Shows the fluent API pattern of the Query builder.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/queries.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Query, count, gt, sum } from \"@uwdata/mosaic-sql\";\n\n// SELECT \"column\", count() AS \"count\", sum(\"value\") AS \"value\"\n//   FROM \"table\" WHERE \"value\" > 0 GROUP BY \"column\"\nQuery\n  .from(\"table\")\n  .select(\"category\", { count: count(), sum: sum(\"value\") })\n  .groupby(\"category\")\n  .where(gt(\"value\", 0))\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Lag in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the expression evaluated at the row that is offset rows before the current row within the partition.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlag(expression, offset, default)\n```\n\n----------------------------------------\n\nTITLE: Loading Data from External Files in JavaScript\nDESCRIPTION: Demonstrates how to use data loading utilities to generate queries for loading data from CSV and Parquet files. The example shows both basic and advanced options including column selection and filtering.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadCSV, loadParquet } from \"@uwdata/mosaic-sql\";\n\n// Loads file.csv into the table \"table1\" with default options:\n// CREATE TABLE IF NOT EXISTS table1 AS\n//   SELECT *\n//   FROM read_csv('file.csv', auto_detect=true, sample_size=-1)\nconst q1 = loadCSV(\"table1\", \"file.csv\");\n\n// Load named columns from a parquet file, filtered upon load:\n// CREATE TABLE IF NOT EXISTS table2 AS\n//   SELECT foo, bar, value\n//   FROM read_parquet('file.parquet')\n//   WHERE value > 1\nconst q2 = loadParquet(\"table2\", \"file.parquet\", {\n  select: [ \"foo\", \"bar\", \"value\" ],\n  where: \"value > 1\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Intersect Selection in JavaScript\nDESCRIPTION: The Selection.intersect method creates a new Selection instance with an intersect (conjunction) resolution strategy. It accepts options for cross-filtering, empty selection behavior, and including other selections.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelection.intersect(options)\n```\n\n----------------------------------------\n\nTITLE: Prefetching Query Results in Mosaic Coordinator\nDESCRIPTION: Prefetch query results for later use. Similar to query() but always caches and uses low priority.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.prefetch(query, options)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Functions with AggregateNode.window()\nDESCRIPTION: Converts an aggregate function to a window function by returning a new WindowNode instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nAggregateNode.window()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Mosaic Widget Setup in Python\nDESCRIPTION: This snippet imports necessary libraries for the Mosaic widget setup, including DuckDB for database operations, IPython widgets for UI elements, and JSON for data handling.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pprint import pprint\nfrom pathlib import Path\n\nimport duckdb\nimport ipywidgets as widgets\nimport json\n\nfrom mosaic_widget import MosaicWidget\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Connector for DuckDB\nDESCRIPTION: Creates a new WebSocket connector to communicate with a DuckDB data server. Takes an optional URI parameter that defaults to ws://localhost:3000/.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/connectors.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsocketConnector(uri)\n```\n\n----------------------------------------\n\nTITLE: Computing Correlation with corr()\nDESCRIPTION: Creates an aggregate function that calculates the correlation coefficient between two input expressions.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\ncorr(a, b)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Nth Value in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the expression evaluated at the nth row of the window frame (counting from 1), or null if no such row.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nnth_value(expression, nth)\n```\n\n----------------------------------------\n\nTITLE: Creating a Param for an array of values in JavaScript\nDESCRIPTION: The Param.array function creates a new Param instance for an array of initial values. The values array may contain nested Params, allowing for complex reactive structures.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/param.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParam.array(values)\n```\n\n----------------------------------------\n\nTITLE: Creating Single Selection in JavaScript\nDESCRIPTION: The Selection.single method creates a new Selection instance with a singular resolution strategy that keeps only the most recent selection clause. It accepts options for cross-filtering, empty selection behavior, and including other selections.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelection.single(options)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Mosaic Top-Level Structure in JSON\nDESCRIPTION: Demonstrates the top-level structure of a Mosaic specification including metadata, configuration, data definitions, and parameters.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": { /* optional metadata */ },\n  \"config\": { /* optional configuration */ },\n  \"data\": { /* input data definitions */ },\n  \"params\": { /* param and selection definitions */ },\n  ... /* top-level element properties */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Param with an initial value in JavaScript\nDESCRIPTION: The Param.value function creates a new Param instance with the given initial value. This is used to create a reactive variable for a single value.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/param.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nParam.value(value)\n```\n\n----------------------------------------\n\nTITLE: Installing Mosaic from PyPI\nDESCRIPTION: Instructions for installing the Mosaic library from PyPI using pip. This is the simplest way to install the stable version of the library.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/plot/index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install uwdata-mosaic\n```\n\n----------------------------------------\n\nTITLE: Updating a Param's value in JavaScript\nDESCRIPTION: The update method updates the Param with a new value. It accepts an optional options object with a force flag, which can trigger a 'value' event even if the internal value hasn't changed.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/param.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparam.update(value, options)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for First Value in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the expression evaluated at the row that is the first row of the window frame.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfirst_value(expression)\n```\n\n----------------------------------------\n\nTITLE: Partitioning Window Functions with AggregateNode.partitionby()\nDESCRIPTION: Creates a partitioned window function by specifying one or more expressions to partition by, returning a new WindowNode instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nAggregateNode.partitionby(...expressions)\n```\n\n----------------------------------------\n\nTITLE: Using nearestX() Interactor for Nearest X-Value Selection\nDESCRIPTION: Selects the nearest value along the x dimension based on cursor position. Options include specifying the selection to populate and the field to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnearestX(options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mosaic Client in React\nDESCRIPTION: A React component that displays total and filtered row counts using Mosaic's makeClient API. The component uses React hooks for state management and handles cleanup through useEffect.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/web-clients/index.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeClient } from \"@uwdata/mosaic-core\";\nimport { count, Query } from \"@uwdata/mosaic-sql\";\nimport { useState, useEffect } from \"react\";\n\n/** Show the number of rows in the table.\n * If a `selection` is provided, show the filtered number of rows as well. */\nexport function Count(props) {\n  const { coordinator, table, selection } = props;\n\n  const [totalCount, setTotalCount] = useState(null);\n  const [filteredCount, setFilteredCount] = useState(null);\n  const [isError, setIsError] = useState(false);\n  const [isPending, setIsPending] = useState(false);\n\n  useEffect(() => {\n    // Note that the identity of `table` and `selection` is captured below.\n    // If they are replaced with a new instances, the client will get recreated as well.\n\n    const client = makeClient({\n      coordinator,\n      selection,\n      prepare: async () => {\n        // Preparation work before the client starts.\n        // Here we get the total number of rows in the table.\n        const result = await coordinator.query(\n          Query.from(table).select({ count: count() })\n        );\n        setTotalCount(result.get(0).count);\n      },\n      query: (predicate) => {\n        // Returns a query to retrieve the data.\n        // The `predicate` is the selection's predicate for this client.\n        // Here we use it to get the filtered count.\n        return Query.from(table)\n          .select({ count: count() })\n          .where(predicate);\n      },\n      queryResult: (data) => {\n        // The query result is available.\n        setFilteredCount(data.get(0).count);\n        setIsError(false);\n        setIsPending(false);\n      },\n      queryPending: () => {\n        // The query is pending.\n        setIsPending(true);\n        setIsError(false);\n      },\n      queryError: () => {\n        // There is an error running the query.\n        setIsPending(false);\n        setIsError(true);\n      },\n    });\n\n    return () => {\n      // Destroy the client on effect cleanup.\n      client.destroy();\n    };\n  }, [coordinator, table, selection]);\n\n  return (\n    <div>\n      {filteredCount} / {totalCount}\n      {isPending ? \"(pending)\" : \"\"}\n      {isError ? \"(error)\" : \"\"}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the current value of a Param in JavaScript\nDESCRIPTION: The value property retrieves the current value of a Param instance. This allows access to the reactive variable's current state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/param.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nparam.value\n```\n\n----------------------------------------\n\nTITLE: Creating Plot Instance with Directives\nDESCRIPTION: Example showing how to create a Plot instance using various directives including width attribute, rectY mark, intervalX interactor, and color legend.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/plot.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplot(\n  width(500), // attribute\n  rectY(from(\"table\"), { x1: \"u\", x2: \"v\", y: \"w\", fill: \"c\" }), // mark\n  intervalX({ as: selection }), // interactor\n  colorLegend() // legend\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing MosaicWidget with DuckDB Connection\nDESCRIPTION: Creates a MosaicWidget instance using the configured DuckDB connection and visualization specification.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncon.execute(\"USE local\")\nMosaicWidget(con=con, spec=spec, temp_indexes=True)\n```\n\n----------------------------------------\n\nTITLE: Using toggleColor() Shorthand Interactor for Color-Channel Selection\nDESCRIPTION: A shorthand interactor for selecting values in the color encoding channel only. Takes the same options as the toggle() interactor.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleColor(options)\n```\n\n----------------------------------------\n\nTITLE: Calculating Sums with sum()\nDESCRIPTION: Creates an aggregate function that calculates the sum of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nsum(expression)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Params in JavaScript with vgplot\nDESCRIPTION: Creates a Param instance with an initial value of 5 and binds it to two slider components with different ranges. The sliders are horizontally concatenated using vgplot's hconcat function, demonstrating synchronized parameter control across components.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/core/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hconcat, slider } from \"@uwdata/vgplot\";\nimport { Param } from \"@uwdata/mosaic-core\";\n\n// create a new Param\nconst param = Param.value(5);\n\n// bind two sliders (with different ranges!) to the param\nhconcat(\n  slider({ label: 'Param', min: 0, max: 10, step: 1, as: param }),\n  slider({ min: 0, max: 15, step: 1, as: param })\n)\n```\n\n----------------------------------------\n\nTITLE: Using highlight() Interactor for Data Point Highlighting\nDESCRIPTION: Highlights individual visualized data points based on a Selection. Selected values keep normal appearance while unselected values are deemphasized. Options include specifying the driving selection and style customization.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nhighlight(options)\n```\n\n----------------------------------------\n\nTITLE: Extracting Columns and Parameters from SQL Expressions in JavaScript\nDESCRIPTION: Shows how to build SQL expressions with interpolated values and extract referenced columns and parameters using collector functions. This is useful for analyzing and transforming SQL expressions.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Param } from \"@uwdata/core\";\nimport { collectColumns, collectParams, column, sql } from \"@uwdata/mosaic-sql\";\n\nconst col = column(\"foo\");\nconst param = Param.value(Math.PI);\nconst expr = sql`${col} * ${param}`;\n\nconst cols = collectColumns(expr); // -> [ col ]\nconst params = collectParams(expr): // -> [ param ]\n```\n\n----------------------------------------\n\nTITLE: Computing Averages with avg()\nDESCRIPTION: Creates an aggregate function that calculates the average (mean) of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\navg(expression)\n```\n\n----------------------------------------\n\nTITLE: Overview of Query Builder Methods in JavaScript\nDESCRIPTION: Outlines the complete set of available methods in the Query builder API, showing the order and purpose of each method in the chain. This demonstrates the comprehensive SQL capabilities available through the builder.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/queries.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nQuery\n  .with(/* a map of named common table expression queries */)\n  .select(/* column names or name -> expression maps */)\n  .distinct(/* boolean to denote distinct values only */)\n  .from(/* source table names or subqueries */)\n  .sample(/* number of rows or % to sample */)\n  .where(/* filter criteria */)\n  .groupby(/* columns or expressions to group by */)\n  .having(/* post-aggregation filter criteria */)\n  .window(/* named window definitions */)\n  .qualify(/* post-window filter criteria */)\n  .orderby(/* columns or expressions to sort by */)\n  .limit(/* max number of rows */)\n  .offset(/* offet number of rows */)\n```\n\n----------------------------------------\n\nTITLE: Using hconcat Function for Horizontal Layout in Mosaic\nDESCRIPTION: The hconcat function horizontally concatenates a collection of Web elements, placing them in a row layout. It accepts multiple elements as arguments.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/layout.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhconcat(...elements)\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions for Statistical Calculations in JavaScript\nDESCRIPTION: Demonstrates how to use aggregate functions like min, max, and quantile to perform statistical calculations on a dataset. This example calculates minimum, maximum, median, and quartile values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/sql/index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Query, max, min, quantile } from \"@uwdata/mosaic-sql\";\n\n// get min/max, median, and interquartile range\nQuery.select({\n  min: min(\"foo\"),\n  q25: quantile(\"foo\", 0.25),\n  q50: quantile(\"foo\", 0.50),\n  q75: quantile(\"foo\", 0.75),\n  max: max(\"foo\"),\n}).from(\"myTable\");\n```\n\n----------------------------------------\n\nTITLE: Computing Population Standard Deviation with stddevPop()\nDESCRIPTION: Creates an aggregate function that calculates the population standard deviation of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nstddevPop(expression)\n```\n\n----------------------------------------\n\nTITLE: Using panZoom() Interactor for Plot Panning and Zooming\nDESCRIPTION: Enables both panning and zooming of the plot in either x or y dimension. Options include selections for domains and fields to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npanZoom(options)\n```\n\n----------------------------------------\n\nTITLE: Using AggregateNode.distinct() Method in SQL Aggregation\nDESCRIPTION: Creates a new AggregateNode instance that applies aggregation over distinct values only.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nAggregateNode.distinct()\n```\n\n----------------------------------------\n\nTITLE: Creating Count Aggregation with count()\nDESCRIPTION: Creates an aggregate function that counts the number of records in a group.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncount()\n```\n\n----------------------------------------\n\nTITLE: Using nearestY() Interactor for Nearest Y-Value Selection\nDESCRIPTION: Selects the nearest value along the y dimension based on cursor position. Options include specifying the selection to populate and the field to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnearestY(options)\n```\n\n----------------------------------------\n\nTITLE: Computing Quantiles with quantile()\nDESCRIPTION: Creates an aggregate function that calculates the p-th quantile of the input expression values. The parameter p specifies the desired quantile (e.g., 0.5 for median, 0.25 for first quartile).\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nquantile(expression, p)\n```\n\n----------------------------------------\n\nTITLE: Computing Population Covariance with covarPop()\nDESCRIPTION: Creates an aggregate function that calculates the population covariance between two input expressions.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ncovarPop(a, b)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Client from Mosaic Coordinator\nDESCRIPTION: Disconnect a client from the coordinator and remove all update handling for that client.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.disconnect(client)\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Specifications with Mosaic-spec (JavaScript)\nDESCRIPTION: Shows how to use the yaml library to parse YAML specifications before processing them with the mosaic-spec package. This enables support for YAML format in addition to JSON.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/spec/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseSpec } from '@uwdata/mosaic-spec';\nimport { parse } from 'yaml';\n\nconst yaml = /* load yaml file file */;\nconst spec = parse(yaml); // parse yaml to JS objects\n\n// parse specification to internal AST (abstract syntax tree)\nconst ast = parseSpec(spec);\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Last Value in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the expression evaluated at the row that is the last row of the window frame.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nlast_value(expression)\n```\n\n----------------------------------------\n\nTITLE: Loading Spatial Data into DuckDB Table\nDESCRIPTION: Shows how to use loadSpatial to load geographic data from a GeoJSON file into DuckDB. This example extracts a specific layer ('states') from a 'us-states.json' file using DuckDB's spatial extension.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/data-loading.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Loads us-states.json into the table \"table1\":\n// CREATE TABLE IF NOT EXISTS table1 AS\n//   SELECT *\n//   FROM st_read('us-states.json', layer=\"states\")\nloadSpatial(\"table1\", \"us-states.json\", \"states\");\n```\n\n----------------------------------------\n\nTITLE: Managing Database Connector in Mosaic Coordinator\nDESCRIPTION: Get or set the database connector used by the coordinator to issue queries to a backing data source.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.databaseConnector(connector)\n```\n\n----------------------------------------\n\nTITLE: Activating Selection Clause in JavaScript\nDESCRIPTION: The activate method emits an 'activate' event with the given selection clause. This can be used for optimizations such as prefetching.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.activate(clause)\n```\n\n----------------------------------------\n\nTITLE: Counting Regression Data Points with regrCount()\nDESCRIPTION: Creates an aggregate function that returns the count of non-null pairs used to fit the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrCount(y, x)\n```\n\n----------------------------------------\n\nTITLE: Creating Union Selection in JavaScript\nDESCRIPTION: The Selection.union method creates a new Selection instance with a union (disjunction) resolution strategy. It accepts options for cross-filtering, empty selection behavior, and including other selections.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelection.union(options)\n```\n\n----------------------------------------\n\nTITLE: Using panZoomY() Interactor for Y-Axis Panning and Zooming\nDESCRIPTION: Enables both panning and zooming of the plot in the y dimension only. Options include selections for domains and fields to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npanZoomY(options)\n```\n\n----------------------------------------\n\nTITLE: NULL Value Check\nDESCRIPTION: Function that tests if the input expression is NULL.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nisNull(expression)\n```\n\n----------------------------------------\n\nTITLE: Distinct Value Check\nDESCRIPTION: Function that tests if expression a is distinct from expression b. NULL values are not considered distinct from each other.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nisDistinct(a, b)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for Lead in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns the expression evaluated at the row that is offset rows after the current row within the partition.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nlead(expression, offset, default)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Extensions in Mosaic\nDESCRIPTION: Shows how to configure DuckDB extensions in the Mosaic specification, specifically loading the spatial extension.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"config\": {\n  \"extensions\": \"spatial\"\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Median Absolute Deviation with mad()\nDESCRIPTION: Creates an aggregate function that calculates the median absolute deviation (MAD) of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmad(expression)\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Pending Method in JavaScript\nDESCRIPTION: Method called by the coordinator to inform the client that a query is pending. It should return the current client instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.queryPending()\n```\n\n----------------------------------------\n\nTITLE: Computing Regression SXX with regrSXX()\nDESCRIPTION: Creates an aggregate function that returns the SXX value (sum of squares of x) of the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrSXX(y, x)\n```\n\n----------------------------------------\n\nTITLE: Using fy Scale Attributes in Mosaic\nDESCRIPTION: A list of methods for configuring y-axis scales in Mosaic visualizations, with the same configuration options as fx but applied to the vertical axis.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/attributes.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `fyDomain(value)`: Set the scale domain.\n- `fyRange(value)`: Set the  scale range.\n- `fyInset(value)`: Set the scale insets in pixels.\n- `fyInsetTop(value)`: Set the top inset in pixels.\n- `fyInsetBottom(value)`: Set the bottom inset in pixels.\n- `fyRound(value)`: Set if the scale should round output values to the nearest pixel.\n- `fyAlign(value)`: Set the axis alignment: where to distribute points or bands (0 = at start, 0.5 = at middle, 1 = at end).\n- `fyPadding(value)`: Set the axis padding (for `band` or `point` scales).\n- `fyPaddingInner(value)`: Set the axis inner padding (for `band` or `point` scales).\n- `fyPaddingOuter(value)`: Set the axis outer padding (for `band` or `point` scales).\n- `fyAxis(value)`: Set the axis position (`\"top\"` or `\"bottom\"`) or hide the axis (`null`).\n- `fyTickSize(value)`: Set the axis tick size.\n- `fyTickPadding(value)`: Set the axis tick padding.\n- `fyTickFormat(value)`: Set the axis tick format.\n- `fyTickRotate(value)`: Set the axis tick rotation.\n- `fyGrid(value)`: Set if the axis should include grid lines.\n- `fyLabel(value)`: Set the axis label.\n- `fyLabelAnchor(value)`: Set the axis label anchor (`\"left\"`, `\"center\"`, `\"right\"`).\n- `fyLabelOffset(value)`: Set the axis label offset in pixels.\n- `fyFontVariant(value)`: Set the axis label font variant.\n- `fyAriaLabel(value)`: Set the axis ARIA label for accessibility.\n- `fyAriaDescription(value)`: Set the axis ARIA description for accessibility.\n- `fyReverse(value)`: Set if the range should be reversed.\n```\n\n----------------------------------------\n\nTITLE: Using Projection Attributes in Mosaic\nDESCRIPTION: A list of methods for configuring geographic projections in Mosaic visualizations, including projection type, rotation, insets, and clipping options. These are based on D3's geographic projection capabilities.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/attributes.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `projectionType(value)`: Set the projection type, such as `\"mercator\"`, `\"orthographic\"`.\n- `projectionParallels(value)`: Set the [standard parallels](https://github.com/d3/d3-geo/blob/main/README.md#conic_parallels) (for conic projections only).\n- `projectionPrecision(value)`: Set the [sampling threshold](https://github.com/d3/d3-geo/blob/main/README.md#projection_precision).\n- `projectionRotate(value)`: Set a two- or three- element array of Euler angles to rotate the sphere.\n- `projectionDomain(value)`: Set a GeoJSON object to fit in the center of the (inset) frame.\n- `projectionInset(value)`: Set the inset to the given amount in pixels when fitting to the frame (default zero).\n- `projectionInsetLeft(value)`: Set the inset from the left edge of the frame (defaults to `projectionInset`).\n- `projectionInsetRight(value)`: Set the inset from the right edge of the frame (defaults to `projectionInset`).\n- `projectionInsetTop(value)`: Set the inset from the top edge of the frame (defaults to `projectionInset`).\n- `projectionInsetBottom(value)`: Set the inset from the bottom edge of the frame (defaults to `projectionInset`).\n- `projectionClip(value)`: Set the projection clipping method. One of: `\"frame\"` or `true` (default) to clip to the extent of the frame (including margins but not insets), a number to clip to a great circle of the given radius in degrees centered around the origin, or `null` or `false` to disable clipping.\n```\n\n----------------------------------------\n\nTITLE: Using toggleY() Shorthand Interactor for Y-Channel Selection\nDESCRIPTION: A shorthand interactor for selecting values in the y encoding channel only. Takes the same options as the toggle() interactor.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleY(options)\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Table Class\nDESCRIPTION: Constructor for the Table class that extends MosaicClient. It creates a new table component instance with the provided configuration options.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/table.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Table(options)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings with stringAgg()\nDESCRIPTION: Creates an aggregate function that returns the string concatenation of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nstringAgg(expression)\n```\n\n----------------------------------------\n\nTITLE: Using vconcat Function for Vertical Layout in Mosaic\nDESCRIPTION: The vconcat function vertically concatenates a collection of Web elements, placing them in a column layout. It accepts multiple elements as arguments.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/layout.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvconcat(...elements)\n```\n\n----------------------------------------\n\nTITLE: Computing Regression SXY with regrSXY()\nDESCRIPTION: Creates an aggregate function that returns the SXY value (sum of products of x and y) of the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrSXY(y, x)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying Mosaic Widget\nDESCRIPTION: Code to initialize the Mosaic widget with default settings and display it in a Jupyter notebook.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/jupyter/index.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwidget = MosaicWidget()\nwidget\n```\n\n----------------------------------------\n\nTITLE: Defining Row-Based Window Frames with AggregateNode.rows()\nDESCRIPTION: Specifies a rows-based window frame that is insensitive to peer rows, using a two-element array expression to indicate preceding and following rows.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nAggregateNode.rows(expression)\n```\n\n----------------------------------------\n\nTITLE: Defining Range-Based Window Frames with AggregateNode.range()\nDESCRIPTION: Specifies a range-based window frame that includes peer rows, using a two-element array expression to indicate preceding and following rows.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nAggregateNode.range(expression)\n```\n\n----------------------------------------\n\nTITLE: Filtering Aggregations with AggregateNode.where()\nDESCRIPTION: Returns a new AggregateNode instance that filters aggregation according to a Boolean-valued filter expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nAggregateNode.where(filter)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Mosaic Clients in JavaScript\nDESCRIPTION: This code snippet demonstrates how to extend Mosaic with custom clients. It creates a CustomClient class that extends MosaicClient, handles data queries, and processes query results. The implementation includes constructor initialization, query generation, and result handling.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MosaicClient } from '@uwdata/mosaic-core';\nimport { Query } from '@uwdata/mosaic-sql';\n\nexport class CustomClient extends MosaicClient {\n  /**\n   * Create a new client instance, with a backing table name\n   * and an optional filterBy selection.\n   */\n  constructor(tableName, filterBy) {\n    super(filterBy);\n    this.tableName = tableName;\n  }\n\n  /**\n   * Return a SQL query for the client's data needs,\n   * ideally using @uwdata/mosaic-sql query helpers.\n   * Be sure to incorporate the given filter criteria.\n   */\n  query(filter = []) {\n    return Query\n      .from(this.tableName)\n      .select(/* desired columns here */)\n      .where(filter);\n  }\n\n  /**\n   * Process query result data. This method is called by the\n   * coordinator to pass query results from the database.\n   */\n  queryResult(data) {\n    // visualize, analyze, ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Argument of Maximum with argmax()\nDESCRIPTION: Creates an aggregate function that returns the arg expression value corresponding to the maximum value of the value expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nargmax(arg, value)\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Specification Formats\nDESCRIPTION: A code-group block that references three different format specifications (JavaScript, YAML, and JSON) for the Gaia visualization. This allows users to choose their preferred specification format.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/gaia.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n::: code-group\n<<< @/public/specs/esm/gaia.js [JavaScript]\n<<< @/public/specs/yaml/gaia.yaml [YAML]\n<<< @/public/specs/json/gaia.json [JSON]\n:::\n```\n\n----------------------------------------\n\nTITLE: Finding First Value with first()\nDESCRIPTION: Creates an aggregate function that returns the first observed value of the input expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nfirst(expression)\n```\n\n----------------------------------------\n\nTITLE: Defining Query Method in JavaScript\nDESCRIPTION: Method to return a query specifying the data needed by the client. It incorporates an optional filter parameter consisting of Boolean-valued SQL predicates. The base class returns null.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.query(filter)\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Module Code with astToESM\nDESCRIPTION: Demonstrates how to convert a parsed AST to JavaScript ESM (ECMAScript Module) code using the vgplot API. This allows creating reusable code from declarative specifications.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/parser-generators.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { astToESM } from \"@uwdata/mosaic-spec\";\n\n// generate ESM (ECMAScript Module) code\nconst code = astToESM(ast);\n```\n\n----------------------------------------\n\nTITLE: Isolating Day of Month for Date Comparison in SQL\nDESCRIPTION: The dateDay function maps dates to their corresponding day of the month in January 2012. This facilitates comparing days across different months and years while maintaining a proper date type.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/date-functions.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ndateDay(expression)\n```\n\n----------------------------------------\n\nTITLE: Preserving Month and Day for Date Comparison in SQL\nDESCRIPTION: The dateMonthDay function maps dates to their corresponding month and day in the leap year 2012. This enables cyclic comparisons across years while preserving the month and day information in a temporal data type.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/date-functions.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndateMonthDay(expression)\n```\n\n----------------------------------------\n\nTITLE: Ordering Window Functions with AggregateNode.orderby()\nDESCRIPTION: Creates an ordered window function by specifying one or more expressions to sort by, returning a new WindowNode instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nAggregateNode.orderby(...expressions)\n```\n\n----------------------------------------\n\nTITLE: Binning Dates by Time Intervals in SQL\nDESCRIPTION: The dateBin function bins dates or datetimes into specified intervals such as hour, day, or month. It supports customizable step sizes to create bins like every 2 days, enabling date-based aggregation and analysis.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/date-functions.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndateBin(expression, interval, steps = 1)\n```\n\n----------------------------------------\n\nTITLE: Using toggleX() Shorthand Interactor for X-Channel Selection\nDESCRIPTION: A shorthand interactor for selecting values in the x encoding channel only. Takes the same options as the toggle() interactor.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoggleX(options)\n```\n\n----------------------------------------\n\nTITLE: Less Than Comparison\nDESCRIPTION: Function that tests if expression a is less than expression b.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlt(a, b)\n```\n\n----------------------------------------\n\nTITLE: Finding Argument of Minimum with argmin()\nDESCRIPTION: Creates an aggregate function that returns the arg expression value corresponding to the minimum value of the value expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nargmin(arg, value)\n```\n\n----------------------------------------\n\nTITLE: Initializing Mosaic Widget with DuckDB Connection in Python\nDESCRIPTION: This code creates an instance of the MosaicWidget, passing the previously established DuckDB connection to it. This sets up the main visualization component of the application.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmosaic = MosaicWidget(con=con)\n```\n\n----------------------------------------\n\nTITLE: Computing Regression Average Y with regrAvgY()\nDESCRIPTION: Creates an aggregate function that returns the average y value of the data used to fit the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrAvgY(y, x)\n```\n\n----------------------------------------\n\nTITLE: Computing Geometric Mean with geomean()\nDESCRIPTION: Creates an aggregate function that calculates the geometric mean of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ngeomean(expression)\n```\n\n----------------------------------------\n\nTITLE: Computing Population Variance with varPop()\nDESCRIPTION: Creates an aggregate function that calculates the population variance of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nvarPop(expression)\n```\n\n----------------------------------------\n\nTITLE: Computing Regression SYY with regrSYY()\nDESCRIPTION: Creates an aggregate function that returns the SYY value (sum of squares of y) of the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrSYY(y, x)\n```\n\n----------------------------------------\n\nTITLE: Logical AND Operator\nDESCRIPTION: Function that creates an expression for logical AND of provided clauses. Flattens input array and ignores null entries.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nand(...clauses)\n```\n\n----------------------------------------\n\nTITLE: Moving Average Visualization Specification in YAML\nDESCRIPTION: YAML version of the moving average visualization specification. It defines the same plot configuration as the JavaScript version but using YAML syntax for declarative visualization definition.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/moving-average.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwidth: 600\nheight: 300\ngrid: true\nstyle:\n  marginTop: 30\nx:\n  axis: top\n  title: Day\ny:\n  title: Cases\ncolor:\n  domain: [Raw, MA-7, MA-14]\n  range: [\"#aaa\", \"#1f77b4\", \"#ff7f0e\"]\n  legend:\n    orient: top\n    title: null\nmarks:\n  - type: line\n    stroke: color\n    strokeWidth:\n      expr: d => d.k === 'Raw' ? 1 : 1.5\n    x: day\n    y: cases\n    data:\n      url: data/berlin-covid.csv\n    transform:\n      - type: window\n        k: Raw\n        field: cases\n      - type: window\n        groupby: []\n        k: MA-7\n        field: cases\n        frame: [-3, 3]\n        ops: [mean]\n      - type: window\n        groupby: []\n        k: MA-14\n        field: cases\n        frame: [-6, 7]\n        ops: [mean]\n      - type: fold\n        fields: [cases, mean_cases, mean_cases_1]\n        as: [k, cases]\n      - type: formula\n        expr: \"datum.k === 'cases' ? 'Raw' : datum.k === 'mean_cases' ? 'MA-7' : 'MA-14'\"\n        as: k\n```\n\n----------------------------------------\n\nTITLE: IN Value Check\nDESCRIPTION: Function that tests if the input expression matches any value in the values array. Maps to SQL IN clause.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nisIn(expression, values)\n```\n\n----------------------------------------\n\nTITLE: Computing Regression Average X with regrAvgX()\nDESCRIPTION: Creates an aggregate function that returns the average x value of the data used to fit the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrAvgX(y, x)\n```\n\n----------------------------------------\n\nTITLE: Initializing Vgplot Coordinator in Vue Component\nDESCRIPTION: This Vue script setup initializes and clears the coordinator from the @uwdata/vgplot library. The coordinator is responsible for managing cross-view interactions in visualizations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/contours.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Connecting to DuckDB and Loading HTTP File System in Python\nDESCRIPTION: This snippet establishes a connection to DuckDB and loads the HTTP file system extension, which may be required for accessing remote data sources in the Mosaic widget.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncon = duckdb.connect()\ncon.execute(\"LOAD httpfs\");\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Space with hspace Function in Mosaic\nDESCRIPTION: The hspace function adds horizontal space between elements. It accepts a size parameter which can be a number (interpreted as pixels) or a CSS dimension string.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/layout.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhspace(size)\n```\n\n----------------------------------------\n\nTITLE: Using fx Scale Attributes in Mosaic\nDESCRIPTION: A list of methods for configuring x-axis scales in Mosaic visualizations, including domain/range settings, insets, padding, axis appearance, labels, accessibility features, and more.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/attributes.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `fxDomain(value)`: Set the scale domain.\n- `fxRange(value)`: Set the scale range.\n- `fxInset(value)`: Set the scale insets in pixels.\n- `fxInsetLeft(value)`: Set the left inset in pixels.\n- `fxInsetRight(value)`: Set the right inset in pixels.\n- `fxRound(value)`: Set if the scale should round output values to the nearest pixel.\n- `fxAlign(value)`: Set the axis alignment: where to distribute points or bands (0 = at start, 0.5 = at middle, 1 = at end).\n- `fxPadding(value)`: Set the axis padding (for `band` or `point` scales).\n- `fxPaddingInner(value)`: Set the axis inner padding (for `band` or `point` scales).\n- `fxPaddingOuter(value)`: Set the axis outer padding (for `band` or `point` scales).\n- `fxAxis(value)`: Set the axis position (`\"top\"` or `\"bottom\"`) or hide the axis (`null`).\n- `fxTickSize(value)`: Set the axis tick size.\n- `fxTickPadding(value)`: Set the axis tick padding.\n- `fxTickFormat(value)`: Set the axis tick format.\n- `fxTickRotate(value)`: Set the axis tick rotation.\n- `fxGrid(value)`: Set if the axis should include grid lines.\n- `fxLabel(value)`: Set the axis label.\n- `fxLabelAnchor(value)`: Set the axis label anchor (`\"left\"`, `\"center\"`, `\"right\"`).\n- `fxLabelOffset(value)`: Set the axis label offset in pixels.\n- `fxFontVariant(value)`: Set the axis label font variant.\n- `fxAriaLabel(value)`: Set the axis ARIA label for accessibility.\n- `fxAriaDescription(value)`: Set the axis ARIA description for accessibility.\n- `fxReverse(value)`: Set if the range should be reversed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu and Search Components\nDESCRIPTION: Creates a horizontal concatenation of menu and search input components backed by an athletes database table. Uses Selection.intersect() for query filtering.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/inputs/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hconcat, menu, search, Selection } from \"@uwdata/vgplot\";\nconst query = Selection.intersect();\nhconcat(\n  menu({ label: \"Sport\", as: query, from: \"athletes\", column: \"sport\" }),\n  menu({ label: \"Sex\", as: query, from: \"athletes\", column: \"sex\" }),\n  search({ label: \"Name\", as: query, from: \"athletes\", column: \"name\", type: \"contains\" })\n)\n```\n\n----------------------------------------\n\nTITLE: Using panX() Interactor for X-Axis Panning\nDESCRIPTION: Enables panning of the plot in the x dimension only. Options include selections for domains and fields to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npanX(options)\n```\n\n----------------------------------------\n\nTITLE: Computing Skewness with skewness()\nDESCRIPTION: Creates an aggregate function that calculates the skewness (measure of asymmetry) of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nskewness(expression)\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Tables\nDESCRIPTION: Queries and displays all tables in the current database context.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncon.query(\"SHOW TABLES\")\n```\n\n----------------------------------------\n\nTITLE: Converting Dates to Milliseconds Since Epoch in SQL\nDESCRIPTION: The epoch_ms function converts a date or datetime expression to the number of milliseconds since the UNIX epoch (January 1, 1970 UTC). This is useful for timestamp calculations and comparisons.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/date-functions.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nepoch_ms(expression)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dropdown and Handling Specification Changes in Python\nDESCRIPTION: This complex snippet sets up a dropdown widget for selecting JSON specifications, defines functions for handling changes and opening specifications, and sets up an output widget for displaying parameter changes in the Mosaic widget.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nweather = Path(\"specs/json/weather.json\")\n\ndropdown = widgets.Dropdown(\n    options=get_specs(\"specs/json\"),\n    value=weather,\n    description=\"Example:\",\n)\n\n\ndef on_change(change):\n    open_spec(change[\"new\"])\n\n\ndef open_spec(spec):\n    mosaic.spec = json.loads(spec.read_text())\n\n\ndropdown.observe(on_change, \"value\")\n\nopen_spec(weather)\n\noutput = widgets.Output()\n\n\n@output.capture(clear_output=True)\ndef handle_change(change):\n    pprint(change.new)\n\n\nmosaic.observe(handle_change, names=[\"params\"])\n```\n\n----------------------------------------\n\nTITLE: Driving Shifts Visualization YAML Implementation\nDESCRIPTION: YAML implementation of the connected scatter plot visualization showing miles driven versus gas prices. Defines the same visualization as the JavaScript version but using YAML syntax for configuration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/driving-shifts.md#2025-04-16_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nwidth: 780\nheight: 480\npadding:\n  left: 50\n  right: 110\n  top: 40\n  bottom: 40\ndata:\n  url: data/driving.csv\ntransform:\n  - type: derived\n    columns:\n      Miles driven (trillion): d => d[\"Miles driven (trillion)\"]\n      Cost per gallon ($): d => d[\"Gas price ($)\"]\n      index: d => +d.year % 10 === 0 ? d.year : null\nx:\n  grid: true\n  label: Miles driven (trillion per year)\ny:\n  grid: true\n  label: Cost per gallon ($)\nmarks:\n  - type: line\n    x: Miles driven (trillion)\n    y: Cost per gallon ($)\n    stroke: \"#aaa\"\n  - type: text\n    x: Miles driven (trillion)\n    y: Cost per gallon ($)\n    text: index\n    dx: 6\n    dy: -4\n    fontSize: 12\n    fontWeight: bold\n  - type: dot\n    x: Miles driven (trillion)\n    y: Cost per gallon ($)\n    r: 3\n    fill: currentColor\n```\n\n----------------------------------------\n\nTITLE: Using Facet Attributes in Mosaic\nDESCRIPTION: A list of methods for configuring faceted visualizations in Mosaic, including margin settings, grid lines, and label controls for small multiples displays.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/attributes.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `facetMargin(value)`: Set all four facet margins.\n- `facetMarginTop(value)`: Set the facet top margin.\n- `facetMarginBottom(value)`: Set the facet bottom margin.\n- `facetMarginLeft(value)`: Set the facet left margin.\n- `facetMarginRight(value)`: Set the facet right margin.\n- `facetGrid(value)`: Set if grid lines should be drawn for each facet.\n- `facetLabel(value)`: If null, disable default facet axis labels.\n```\n\n----------------------------------------\n\nTITLE: Adding an event listener to a Param in JavaScript\nDESCRIPTION: The addEventListener method adds an event listener callback function for the specified event type. Params support 'value' type events only, which are triggered when the Param's value changes.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/param.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nparam.addEventListener(type, callback)\n```\n\n----------------------------------------\n\nTITLE: Using panY() Interactor for Y-Axis Panning\nDESCRIPTION: Enables panning of the plot in the y dimension only. Options include selections for domains and fields to select.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npanY(options)\n```\n\n----------------------------------------\n\nTITLE: Finding Mode with mode()\nDESCRIPTION: Creates an aggregate function that calculates the mode (most frequent value) of the input expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nmode(expression)\n```\n\n----------------------------------------\n\nTITLE: Demonstration Example Component\nDESCRIPTION: A Vue component that loads and displays the aeromagnetic survey visualization using a YAML specification.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/aeromagnetic-survey.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/aeromagnetic-survey.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Mosaic Visualization Widget\nDESCRIPTION: Initializes and displays the MosaicWidget with the loaded specification and weather data. The widget will render the visualization according to the specification using the provided dataset.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/weather.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMosaicWidget(spec, data={\"weather\": weather})\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Function for Loading JSON Specifications in Python\nDESCRIPTION: This function iterates through JSON files in a specified folder, extracting metadata and yielding tuples of title and file path. It's used to populate the dropdown menu with available visualization specifications.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_specs(folder_path):\n    folder = Path(folder_path)\n    for file_path in sorted(folder.glob(\"*.json\")):\n        data = json.loads(file_path.read_text())\n        meta = data.get(\"meta\")\n        if meta:\n            yield (meta.get(\"title\"), file_path)\n```\n\n----------------------------------------\n\nTITLE: Defining Layout with Horizontal Concatenation\nDESCRIPTION: Shows how to layout elements horizontally using hconcat.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hconcat\": [\n    ...elements\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-filtered Selection in JavaScript\nDESCRIPTION: The Selection.crossfilter method creates a new Selection instance with a cross-filtered intersect resolution strategy. It's a convenience method equivalent to Selection.intersect({ cross: true }).\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelection.crossfilter()\n```\n\n----------------------------------------\n\nTITLE: Line Multi-Series Chart Specification in YAML\nDESCRIPTION: YAML specification for the interactive line chart showing unemployment rates with hover highlighting and annotations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line-multi-series.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n<<< @/public/specs/yaml/line-multi-series.yaml [YAML]\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue.js\nDESCRIPTION: Vue.js script that imports the coordinator from @uwdata/vgplot and clears any previous state. This setup ensures a clean visualization environment before rendering new charts.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/overview-detail.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Mosaic Widget\nDESCRIPTION: Sets up logging for the Mosaic widget to show information level logs, which is useful for debugging and understanding widget behavior.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/weather.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Optional: enable logging in Mosaic widget\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Sampling and Analyzing Multiverse Results in Mosaic\nDESCRIPTION: Code showing how to sample from a multiverse of potential analyses and collect results for analysis. This demonstrates pulling samples and storing them for further examination.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/plot/index.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# sample and collect the multiverse execution results\nresults = workflow.sample(n=100).results\n\n# analyze the results\nworkflow.analyze(results)\n```\n\n----------------------------------------\n\nTITLE: Importing Example Component for Flight Data Visualization\nDESCRIPTION: Imports and displays an Example component that loads a visualization specification for flight data cross-filtering. The component references a YAML specification file located at '/specs/yaml/flights-200k.yaml'.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/flights-200k.md#2025-04-16_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<Example spec=\"/specs/yaml/flights-200k.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Example Visualization in Vue\nDESCRIPTION: A Vue component that loads the presidential opinion visualization example from a specified YAML file. This component renders the visualization with the presidential opinion poll data.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/presidential-opinion.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/presidential-opinion.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Protein Design Explorer Dashboard Example\nDESCRIPTION: This code imports and displays an example visualization dashboard for protein design data using a specification file located at '/specs/yaml/protein-design.yaml'.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/protein-design.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Example spec=\"/specs/yaml/protein-design.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing External Airline Travelers Visualization Example\nDESCRIPTION: A Vue component that loads and displays the airline travelers visualization example from an external YAML specification file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/airline-travelers.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/airline-travelers.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Standalone Legends in Mosaic\nDESCRIPTION: Shows how to create a standalone legend for a named plot.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"legend\": \"color\",\n  \"for\": \"plotName\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using intervalY() Interactor for Y-Axis Range Selection\nDESCRIPTION: Selects a 1D interval range along the y dimension. Options include selection target, field to select, pixel size for grid-snapping, and brush styling.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/interactors.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nintervalY(options)\n```\n\n----------------------------------------\n\nTITLE: Handling Query Results in JavaScript\nDESCRIPTION: Method called by the coordinator to return query results in the form of a data table. It should return the current client instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.queryResult(data)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing VG-Plot Coordinator in Vue Component\nDESCRIPTION: Sets up and clears the VG-Plot coordinator in a Vue component using the script setup syntax. This ensures the visualization environment is properly initialized before rendering the line density plots.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line-density.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Component\nDESCRIPTION: A Vue setup script that imports the coordinator from @uwdata/vgplot and clears any existing state to ensure the visualization starts fresh.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line-multi-series.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Controls in Mosaic\nDESCRIPTION: Shows how to create an input control (slider) with various parameters including min, max, and step values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"slider\",\n  \"as\": \"$param\",\n  \"min\": 0,\n  \"max\": 100,\n  \"step\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Average Visualization Specification in JSON\nDESCRIPTION: JSON version of the moving average visualization specification. This format provides the same configuration in a structured, machine-readable format that can be directly parsed by visualization libraries.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/moving-average.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 600,\n  \"height\": 300,\n  \"grid\": true,\n  \"style\": {\n    \"marginTop\": 30\n  },\n  \"x\": {\n    \"axis\": \"top\",\n    \"title\": \"Day\"\n  },\n  \"y\": {\n    \"title\": \"Cases\"\n  },\n  \"color\": {\n    \"domain\": [\"Raw\", \"MA-7\", \"MA-14\"],\n    \"range\": [\"#aaa\", \"#1f77b4\", \"#ff7f0e\"],\n    \"legend\": {\n      \"orient\": \"top\",\n      \"title\": null\n    }\n  },\n  \"marks\": [\n    {\n      \"type\": \"line\",\n      \"stroke\": \"color\",\n      \"strokeWidth\": {\n        \"expr\": \"d => d.k === 'Raw' ? 1 : 1.5\"\n      },\n      \"x\": \"day\",\n      \"y\": \"cases\",\n      \"data\": {\n        \"url\": \"data/berlin-covid.csv\"\n      },\n      \"transform\": [\n        {\n          \"type\": \"window\",\n          \"k\": \"Raw\",\n          \"field\": \"cases\"\n        },\n        {\n          \"type\": \"window\",\n          \"groupby\": [],\n          \"k\": \"MA-7\",\n          \"field\": \"cases\",\n          \"frame\": [-3, 3],\n          \"ops\": [\"mean\"]\n        },\n        {\n          \"type\": \"window\",\n          \"groupby\": [],\n          \"k\": \"MA-14\",\n          \"field\": \"cases\",\n          \"frame\": [-6, 7],\n          \"ops\": [\"mean\"]\n        },\n        {\n          \"type\": \"fold\",\n          \"fields\": [\"cases\", \"mean_cases\", \"mean_cases_1\"],\n          \"as\": [\"k\", \"cases\"]\n        },\n        {\n          \"type\": \"formula\",\n          \"expr\": \"datum.k === 'cases' ? 'Raw' : datum.k === 'mean_cases' ? 'MA-7' : 'MA-14'\",\n          \"as\": \"k\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component Example for Bias Visualization\nDESCRIPTION: Vue component import demonstrating the Example component usage with a bias visualization specification.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/spec/index.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/bias.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Vertical Space with vspace Function in Mosaic\nDESCRIPTION: The vspace function adds vertical space between elements. It accepts a size parameter which can be a number (interpreted as pixels) or a CSS dimension string.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/layout.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvspace(size)\n```\n\n----------------------------------------\n\nTITLE: Creating Opacity Legend in Mosaic\nDESCRIPTION: Creates a new legend for a plot's opacity scale. Supports options for specifying the corresponding plot, creating a selection for interactions, and additional Observable Plot legend options.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/legends.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nopacityLegend(options)\n```\n\n----------------------------------------\n\nTITLE: Generating Selection Predicate in JavaScript\nDESCRIPTION: The predicate method returns a selection query predicate for the given Mosaic client. The resulting predicate can be used as part of a SQL WHERE clause.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.predicate(client)\n```\n\n----------------------------------------\n\nTITLE: Embedding Observable Latency Visualization Example\nDESCRIPTION: HTML component that embeds the Observable Latency visualization example using the Example component, referencing the YAML specification file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/observable-latency.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Example spec=\"/specs/yaml/observable-latency.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Executing Query in Mosaic Coordinator\nDESCRIPTION: Request a query execution without returning results. Accepts a query and options for priority setting.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.exec(query, options)\n```\n\n----------------------------------------\n\nTITLE: Athlete Height Visualization in YAML Format\nDESCRIPTION: YAML implementation of the athlete height confidence intervals visualization. This declarative specification defines the same visualization as the JavaScript version but in YAML format.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/athlete-height.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# YAML code for athlete height intervals visualization would be here\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage for Mosaic Data Visualization Framework\nDESCRIPTION: YAML configuration for a VitePress homepage that presents Mosaic, a data visualization framework. The configuration includes a hero section with descriptive text and navigation actions, as well as feature highlights showcasing key capabilities like large dataset exploration and DuckDB integration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  text: |\n    Scalable, interactive data visualization\n  tagline: |\n    Mosaic is an extensible framework for linking databases and interactive views.\n  actions:\n    - theme: brand\n      text: What is Mosaic?\n      link: /what-is-mosaic/\n    - theme: alt\n      text: Get started\n      link: /get-started/\n    - theme: alt\n      text: Examples\n      link: /examples/\n\nfeatures:\n  - icon: 📈\n    title: Explore massive datasets\n    details: Visualize, select, and filter datasets with millions or billions of records.\n  - icon: 🚀\n    title: Flexible deployment\n    details: Build data-driven web apps, or interact with data directly in Jupyter notebooks.\n  - icon: 🛠️\n    title: Interoperable & extensible\n    details: Create new components that seamlessly integrate across selections and datasets.\n  - icon: 🦆\n    title: Powered by DuckDB\n    details: Mosaic pushes computation to <a href=\"https://duckdb.org/\">DuckDB</a>, both server-side and in your browser via WebAssembly.\n```\n\n----------------------------------------\n\nTITLE: Checking if a value is a Param in JavaScript\nDESCRIPTION: The isParam function checks if the input value is a Param instance. It returns true if the value is a Param, false otherwise.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/param.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nisParam(value)\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Box Layout for Mosaic Widget Interface in Python\nDESCRIPTION: This final snippet combines the dropdown, Mosaic widget, and output into a vertical box layout, creating the complete user interface for the visualization tool.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwidgets.VBox([dropdown, mosaic, output])\n```\n\n----------------------------------------\n\nTITLE: Managing Logger in Mosaic Coordinator\nDESCRIPTION: Get or set the coordinator's logger. The logger must support log, info, warn, and error methods. Setting to null suppresses logging.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.logger(logger)\n```\n\n----------------------------------------\n\nTITLE: Sortable Table Example Component\nDESCRIPTION: Example component implementation that loads table specifications from a YAML file. Used to demonstrate the table functionality.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/table.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/table.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Setup Script\nDESCRIPTION: A Vue setup script that imports the coordinator from @uwdata/vgplot and clears any existing visualizations. This prepares the environment for new visualization rendering.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/sorted-bars.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Coordinator in Vue Component\nDESCRIPTION: A Vue script setup that imports the coordinator from the @uwdata/vgplot package and clears any existing visualizations. This prepares the environment for new visualizations to be rendered.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/airline-travelers.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Development Commands for DuckDB Server\nDESCRIPTION: Various development commands for starting the server in different modes, linting the code, running tests, and building/publishing the package.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run duckdb-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Mosaic Visualization Specification\nDESCRIPTION: Loads and modifies YAML configuration for visualization, updating data source references to use the sampled Gaia dataset table.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"../../dev/yaml/gaia.yaml\") as f:\n    spec = yaml.safe_load(f)\n\n# use existing table\ndel spec[\"data\"]\n\n# we use a sample (code to create it below)\ntable = \"share.gaia_sample_5_percent_projected\"\n\nspec[\"hconcat\"][0][\"vconcat\"][0][\"plot\"][0][\"data\"][\"from\"] = table\nspec[\"hconcat\"][0][\"vconcat\"][1][\"hconcat\"][0][\"plot\"][0][\"data\"][\"from\"] = table\nspec[\"hconcat\"][0][\"vconcat\"][1][\"hconcat\"][1][\"plot\"][0][\"data\"][\"from\"] = table\nspec[\"hconcat\"][2][\"plot\"][0][\"data\"][\"from\"] = table\nspec;\n```\n\n----------------------------------------\n\nTITLE: Creating Window Function for N-tile in JavaScript\nDESCRIPTION: Defines a function to create a window function that returns an integer ranging from 1 to num_buckets, dividing the partition as equally as possible.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/window-functions.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nntile(num_buckets)\n```\n\n----------------------------------------\n\nTITLE: Logical NOT Operator\nDESCRIPTION: Function that creates an expression for logical NOT of the provided expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnot(expression)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Table Coordinator\nDESCRIPTION: Initializes and clears the table coordinator using the vgplot library. This setup code runs when the component is created to ensure a clean state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/table.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Density 2D Plot Example Import\nDESCRIPTION: References an external example specification for the 2D density plot visualization. The example is loaded from a YAML specification file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/density2d.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/density2d.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Driving Shifts Visualization JSON Implementation\nDESCRIPTION: JSON implementation of the connected scatter plot showing miles driven versus gas prices. Contains the same configuration as the JavaScript and YAML versions but formatted as JSON.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/driving-shifts.md#2025-04-16_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"width\": 780,\n  \"height\": 480,\n  \"padding\": {\n    \"left\": 50,\n    \"right\": 110,\n    \"top\": 40,\n    \"bottom\": 40\n  },\n  \"data\": {\n    \"url\": \"data/driving.csv\"\n  },\n  \"transform\": [\n    {\n      \"type\": \"derived\",\n      \"columns\": {\n        \"Miles driven (trillion)\": \"d => d[\\\"Miles driven (trillion)\\\"]\",\n        \"Cost per gallon ($)\": \"d => d[\\\"Gas price ($)\\\"]\",\n        \"index\": \"d => +d.year % 10 === 0 ? d.year : null\"\n      }\n    }\n  ],\n  \"x\": {\n    \"grid\": true,\n    \"label\": \"Miles driven (trillion per year)\"\n  },\n  \"y\": {\n    \"grid\": true,\n    \"label\": \"Cost per gallon ($)\"\n  },\n  \"marks\": [\n    {\n      \"type\": \"line\",\n      \"x\": \"Miles driven (trillion)\",\n      \"y\": \"Cost per gallon ($)\",\n      \"stroke\": \"#aaa\"\n    },\n    {\n      \"type\": \"text\",\n      \"x\": \"Miles driven (trillion)\",\n      \"y\": \"Cost per gallon ($)\",\n      \"text\": \"index\",\n      \"dx\": 6,\n      \"dy\": -4,\n      \"fontSize\": 12,\n      \"fontWeight\": \"bold\"\n    },\n    {\n      \"type\": \"dot\",\n      \"x\": \"Miles driven (trillion)\",\n      \"y\": \"Cost per gallon ($)\",\n      \"r\": 3,\n      \"fill\": \"currentColor\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue\nDESCRIPTION: Vue setup script that imports the coordinator from the VGPlot library and clears any existing plot configurations. This prepares the environment for new visualizations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/flights-density.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Mosaic Development Server\nDESCRIPTION: Command to start the Mosaic development server using npm\nSOURCE: https://github.com/uwdata/mosaic/blob/main/examples/vanilla-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up DuckDB Connection with MotherDuck Share\nDESCRIPTION: Establishes connection to DuckDB and attaches both shared MotherDuck database and local memory storage for operations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncon = duckdb.connect()\n\nshare = \"md:_share/gaia-import/c551f2da-3258-4387-ac43-f4be601850ac\"\ncon.execute(f\"ATTACH '{share}' AS share\")\n\ncon.execute(\"ATTACH ':memory:' AS local\")\n# con.execute(\"ATTACH 'indexes.db' AS local\") # use a local database for the indexes\n```\n\n----------------------------------------\n\nTITLE: Requesting Client Update in JavaScript\nDESCRIPTION: Method to request the coordinator to perform a throttled update of this client using the default query. Multiple calls may be consolidated.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclient.requestUpdate()\n```\n\n----------------------------------------\n\nTITLE: Greater Than Comparison\nDESCRIPTION: Function that tests if expression a is greater than expression b.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngt(a, b)\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue\nDESCRIPTION: A Vue script setup block that imports the coordinator from the @uwdata/vgplot package and clears any previous state to prepare for region interactor tests.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/region-tests.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Coordinator Initialization\nDESCRIPTION: Initializes and clears the vgplot coordinator in a Vue.js setup script. This setup is necessary for managing the visualization state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/earthquakes-feed.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing Vgplot Coordinator in Vue\nDESCRIPTION: A Vue setup script that imports the coordinator from @uwdata/vgplot package and clears any existing coordination. This ensures a clean state for the visualization components.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/observable-latency.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Density Visualization Facet\nDESCRIPTION: Beginning of SVG code for a density visualization facet with a title label. This snippet shows the container elements and title for the density chart.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_5\n\nLANGUAGE: SVG\nCODE:\n```\n<g aria-label=\"facet\" transform=\"translate(514,0)\">\n<g aria-label=\"fx-axis tick label\" transform=\"translate(0,-9)\"><text transform=\"translate(97.5,1)\">density</text></g>\n```\n\n----------------------------------------\n\nTITLE: Displaying Shared Tables\nDESCRIPTION: Connects to shared database and displays available tables.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nc = duckdb.connect()\nc.execute(f\"ATTACH '{share}' AS share\")\nc.execute(\"USE share\")\nc.query(\"SHOW TABLES\")\n```\n\n----------------------------------------\n\nTITLE: Constructing 2D Histogram Visualization with SVG\nDESCRIPTION: SVG code for a 2D histogram visualization that includes axis labels, grid lines, ticks, and data points. The visualization uses different colored paths and circles to represent different data series.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_3\n\nLANGUAGE: SVG\nCODE:\n```\n<g aria-label=\"facet\" transform=\"translate(258,0)\">\n<g aria-label=\"fx-axis tick label\" transform=\"translate(0,-9)\"><text transform=\"translate(97.5,1)\">histogram</text></g>\n<g aria-label=\"y-grid\" stroke=\"currentColor\" stroke-opacity=\"0.1\"><line x1=\"40\" x2=\"155\" y1=\"78.81569997924379\" y2=\"78.81569997924379\"></line><line x1=\"40\" x2=\"155\" y1=\"58.27189999308126\" y2=\"58.27189999308126\"></line><line x1=\"40\" x2=\"155\" y1=\"37.72810000691874\" y2=\"37.72810000691874\"></line><line x1=\"40\" x2=\"155\" y1=\"17.184300020756197\" y2=\"17.184300020756197\"></line></g>\n<g aria-label=\"x-axis tick\" fill=\"none\" stroke=\"currentColor\"><path transform=\"translate(50,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(81.66666666666666,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(113.33333333333331,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(145,95)\" d=\"M0,0L0,6\"></path></g>\n<g aria-label=\"x-axis tick label\" font-variant=\"tabular-nums\" transform=\"translate(0,9)\"><text y=\"0.71em\" transform=\"translate(50,95)\">10k</text><text y=\"0.71em\" transform=\"translate(81.66666666666666,95)\">100k</text><text y=\"0.71em\" transform=\"translate(113.33333333333331,95)\">1M</text><text y=\"0.71em\" transform=\"translate(145,95)\">10M</text></g>\n<g aria-label=\"rule\" stroke=\"currentColor\" stroke-opacity=\"0.2\" stroke-dasharray=\"5,5\"><line x1=\"40\" x2=\"155\" y1=\"58.27189999308126\" y2=\"58.27189999308126\"></line></g>\n<g aria-label=\"line\" clip-path=\"url(#plot-clip-5)\"><clipPath id=\"plot-clip-5\"><rect x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect></clipPath>\n<g fill=\"none\" stroke-width=\"1.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"><path stroke=\"#76b7b2\" d=\"M50,73.951C60.556,74.204,71.111,74.457,81.667,74.457C92.222,74.457,102.778,74.237,113.333,73.797C123.889,73.358,134.444,67.665,145,61.972\"></path><path stroke=\"#4e79a7\" d=\"M50,74.706C60.556,74.706,71.111,74.706,81.667,74.706C92.222,74.706,102.778,65.777,113.333,60.032C123.889,54.286,134.444,47.259,145,40.231\"></path><path stroke=\"#f28e2c\" d=\"M50,81.998C60.556,78.51,71.111,75.023,81.667,69.347C92.222,63.671,102.778,55.39,113.333,47.943C123.889,40.496,134.444,32.582,145,24.667\"></path><path stroke=\"#e15759\" d=\"M50,73.977C60.556,68.407,71.111,62.838,81.667,56.335C92.222,49.832,102.778,42.412,113.333,34.959C123.889,27.506,134.444,19.562,145,11.618\"></path><path stroke=\"#ff9da6\" d=\"M50,78.441C60.556,78.039,71.111,77.637,81.667,76.03C92.222,74.422,102.778,71.513,113.333,67.002C123.889,62.491,134.444,55.727,145,48.963\"></path></g></g>\n<g aria-label=\"dot\" clip-path=\"url(#plot-clip-6)\"><clipPath id=\"plot-clip-6\"><rect x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect></clipPath><g><circle cx=\"50\" cy=\"73.95115208207572\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"81.66666666666666\" cy=\"74.45656023567527\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"113.33333333333331\" cy=\"73.79731966223473\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"145\" cy=\"61.97239670939086\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"50\" cy=\"74.70633872236363\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"81.66666666666666\" cy=\"74.70633872236363\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"113.33333333333331\" cy=\"60.03161704455208\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"145\" cy=\"40.23139832533656\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"50\" cy=\"81.99797486265545\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"81.66666666666666\" cy=\"69.34710687255874\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"113.33333333333331\" cy=\"47.94312629090173\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"145\" cy=\"24.667171273428323\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"50\" cy=\"73.9770506501889\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"81.66666666666666\" cy=\"56.334693665369656\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"113.33333333333331\" cy=\"34.95882760842503\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"145\" cy=\"11.618004403333714\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"50\" cy=\"78.44110462189926\" r=\"2\" fill=\"#ff9da6\"></circle><circle cx=\"113.33333333333331\" cy=\"67.0023499372637\" r=\"2\" fill=\"#ff9da6\"></circle><circle cx=\"145\" cy=\"48.96294322718538\" r=\"2\" fill=\"#ff9da6\"></circle><circle cx=\"81.66666666666666\" cy=\"76.02969482219238\" r=\"2\" fill=\"#ff9da6\"></circle></g></g>\n<g aria-label=\"text\" transform=\"translate(0,5)\"><text y=\"0.71em\" transform=\"translate(97.5,1)\">histogram 2d</text></g>\n<rect aria-label=\"frame\" fill=\"none\" stroke=\"currentColor\" x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect>\n</g>\n```\n\n----------------------------------------\n\nTITLE: Inequality Comparison\nDESCRIPTION: Function that tests if expression a is not equal to expression b. Uses SQL NULL semantics where NULL values are not considered equal.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nneq(a, b)\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Performance Comparison Visualization with Grid Lines and Data Points\nDESCRIPTION: SVG code for creating a visualization that compares performance metrics across different data visualization libraries. The visualization includes grid lines, axis ticks, data points, and line paths colored by library (Mosaic Local, Mosaic WASM, Observable Plot, VegaFusion, and Vega-Lite).\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_6\n\nLANGUAGE: SVG\nCODE:\n```\n<g aria-label=\"y-grid\" stroke=\"currentColor\" stroke-opacity=\"0.1\"><line x1=\"40\" x2=\"155\" y1=\"78.81569997924379\" y2=\"78.81569997924379\"></line><line x1=\"40\" x2=\"155\" y1=\"58.27189999308126\" y2=\"58.27189999308126\"></line><line x1=\"40\" x2=\"155\" y1=\"37.72810000691874\" y2=\"37.72810000691874\"></line><line x1=\"40\" x2=\"155\" y1=\"17.184300020756197\" y2=\"17.184300020756197\"></line></g>\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue Setup\nDESCRIPTION: Vue setup script that imports the coordinator from @uwdata/vgplot and clears any previous visualizations to ensure a clean state for rendering.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/population-arrows.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vgplot Coordinator in Vue Component\nDESCRIPTION: A Vue component setup script that imports the coordinator from @uwdata/vgplot and clears any previous visualization states. This initialization ensures a clean slate for the presidential opinion poll visualization.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/presidential-opinion.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG X-Axis Ticks and Labels for Data Visualization\nDESCRIPTION: SVG code for rendering x-axis tick marks and their corresponding labels (1M, 10M, 100M, 1G) for a data visualization chart. The code positions tick marks and labels at specific coordinates along the x-axis.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_11\n\nLANGUAGE: svg\nCODE:\n```\n<g aria-label=\"x-axis tick\" fill=\"none\" stroke=\"currentColor\"><path transform=\"translate(50,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(80.63834987272958,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(111.27669974545915,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(141.9150496181887,95)\" d=\"M0,0L0,6\"></path></g>\n<g aria-label=\"x-axis tick label\" font-variant=\"tabular-nums\" transform=\"translate(0,9)\"><text y=\"0.71em\" transform=\"translate(50,95)\">1M</text><text y=\"0.71em\" transform=\"translate(80.63834987272958,95)\">10M</text><text y=\"0.71em\" transform=\"translate(111.27669974545915,95)\">100M</text><text y=\"0.71em\" transform=\"translate(141.9150496181887,95)\">1G</text></g>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Component\nDESCRIPTION: A Vue.js script that imports the coordinator from the @uwdata/vgplot library and clears any previous visualization state. This setup script is designed to be used in a Vue component to ensure the visualization environment is prepared.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/unemployment.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Computing Median with median()\nDESCRIPTION: Creates an aggregate function that calculates the median (50th percentile) of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nmedian(expression)\n```\n\n----------------------------------------\n\nTITLE: Defining Fields Method in JavaScript\nDESCRIPTION: Method to return an array of field requests. Each request should be an object with table and column properties. The base class returns null, indicating no field metadata is needed.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.fields()\n```\n\n----------------------------------------\n\nTITLE: Initializing Mosaic Coordinator in Vue\nDESCRIPTION: Setup script that imports and initializes the Mosaic coordinator by clearing any existing state. This is a basic setup required for Mosaic applications.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/what-is-mosaic/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue\nDESCRIPTION: A Vue.js setup script that imports and initializes the coordinator from @uwdata/vgplot, then clears any previous state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/aeromagnetic-survey.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Table Element\nDESCRIPTION: Property that provides access to the HTML element containing the rendered table view.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/inputs/table.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntable.element\n```\n\n----------------------------------------\n\nTITLE: Initializing Coordinator for Mosaic Visualization\nDESCRIPTION: Sets up and clears the coordinator from the @uwdata/vgplot package, which is necessary for managing visualization state in Mosaic.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/voronoi.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Coordinator in Vue Component\nDESCRIPTION: A Vue script block that imports and initializes the coordinator from @uwdata/vgplot, clearing any previous state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/earthquakes-globe.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding Example Visualization Component\nDESCRIPTION: HTML markup that embeds a visualization example component, specifying the path to the unemployment visualization specification file. This component renders the choropleth map based on the referenced spec file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/unemployment.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Example spec=\"/specs/yaml/unemployment.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Values with min()\nDESCRIPTION: Creates an aggregate function that calculates the minimum value of the input expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmin(expression)\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue\nDESCRIPTION: Sets up and clears the VGPlot visualization coordinator using Vue's script setup syntax. This initialization is required before rendering temperature visualizations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/seattle-temp.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Legend with Color Swatches for Visualization Libraries\nDESCRIPTION: HTML and SVG code for creating a legend that explains the color coding used in the visualization. Each swatch represents a different visualization library (Vega(-Lite), VegaFusion, Observable Plot, Mosaic WASM, and Mosaic Local) with corresponding colors.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"display: flex; flex-flow: row nowrap; justify-content: flex-start; align-items: flex-start;\"><span style=\"display: inline-block; width: 35px;\"></span><div class=\"legend\"><div class=\"plot-why-swatches plot-why-swatches-wrap\"><span class=\"plot-why-swatch\"><svg width=\"15\" height=\"15\" fill=\"#e15759\"><rect width=\"100%\" height=\"100%\"></rect></svg>Vega(-Lite)</span><span class=\"plot-why-swatch\"><svg width=\"15\" height=\"15\" fill=\"#ff9da6\"><rect width=\"100%\" height=\"100%\"></rect></svg>VegaFusion</span><span class=\"plot-why-swatch\"><svg width=\"15\" height=\"15\" fill=\"#f28e2c\"><rect width=\"100%\" height=\"100%\"></rect></svg>Observable Plot</span><span class=\"plot-why-swatch\"><svg width=\"15\" height=\"15\" fill=\"#4e79a7\"><rect width=\"100%\" height=\"100%\"></rect></svg>Mosaic WASM</span><span class=\"plot-why-swatch\"><svg width=\"15\" height=\"15\" fill=\"#76b7b2\"><rect width=\"100%\" height=\"100%\"></rect></svg>Mosaic Local</span></div></div></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue\nDESCRIPTION: Vue component setup that initializes and clears the vgplot coordinator for managing visualization state. Uses the @uwdata/vgplot library's coordinator module.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/us-county-map.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Mosaic\nDESCRIPTION: Imports the necessary Python libraries for working with Mosaic visualizations, including pandas for data handling, yaml for configuration parsing, and the MosaicWidget component.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/weather.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport yaml\n\nfrom mosaic_widget import MosaicWidget\n```\n\n----------------------------------------\n\nTITLE: Initializing Vgplot Coordinator in Vue Component\nDESCRIPTION: Vue component setup script that imports the coordinator from the Vgplot library and clears any previous state. This ensures a fresh visualization environment.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/moving-average.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Coordinator Component\nDESCRIPTION: Vue setup script that imports and initializes the coordinator from the vgplot library, clearing any previous state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/athlete-birth-waffle.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue\nDESCRIPTION: Sets up the visualization coordinator using the vgplot library and clears any existing state. This is essential for managing cross-filtered visualizations in the Vue.js application.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/flights-10m.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Component\nDESCRIPTION: Sets up a Vue component that imports the coordinator from @uwdata/vgplot and clears any previous state. This ensures the visualization starts with a clean coordination state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/normalize.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue Component\nDESCRIPTION: A Vue script that sets up and clears the coordinator from the @uwdata/vgplot library. This is likely used to initialize the visualization environment before rendering the Walmart store maps.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/walmart-openings.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue\nDESCRIPTION: A Vue setup script that imports the coordinator from @uwdata/vgplot and clears any existing configurations. This ensures a clean state before creating new visualizations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/facet-interval.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Setup\nDESCRIPTION: Sets up and clears the vgplot coordinator within a Vue component's setup script. This ensures a clean state for the visualization to render properly.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/us-state-map.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Coordinator Setup\nDESCRIPTION: Sets up and clears the vgplot coordinator in a Vue component. This is used to manage visualization coordination and state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/axes.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing Vgplot Coordinator with Vue\nDESCRIPTION: Sets up and clears the vgplot coordinator in a Vue component using the script setup syntax. This ensures the visualization environment is reset before displaying examples.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/mark-types.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue\nDESCRIPTION: A Vue setup script that imports the coordinator function from the @uwdata/vgplot library and clears any existing coordinator state. This initializes the visualization environment.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/wnba-shots.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Computing Sample Standard Deviation with stddev()\nDESCRIPTION: Creates an aggregate function that calculates the sample standard deviation of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nstddev(expression)\n```\n\n----------------------------------------\n\nTITLE: Importing Mosaic Widget in Python\nDESCRIPTION: Basic import statement for the Mosaic widget to be used in Jupyter notebooks.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/jupyter/index.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mosaic_widget import MosaicWidget\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Line Paths for Performance Comparison\nDESCRIPTION: SVG code for rendering line paths that show performance trends across different data sizes. Each path is colored differently to represent different libraries (Mosaic Local, Mosaic WASM, Observable Plot, VegaFusion) and shows how performance scales with increasing data size.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_8\n\nLANGUAGE: SVG\nCODE:\n```\n<g fill=\"none\" stroke-width=\"1.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"><path stroke=\"#76b7b2\" d=\"M50,61.972C60.556,60.535,71.111,59.099,81.667,59.079C92.222,59.06,102.778,59.069,113.333,59.05C123.889,59.03,134.444,53.8,145,48.569\"></path><path stroke=\"#4e79a7\" d=\"M50,65.406C60.556,64.088,71.111,62.771,81.667,60.263C92.222,57.755,102.778,55.113,113.333,50.359C123.889,45.606,134.444,38.673,145,31.741\"></path><path stroke=\"#f28e2c\" d=\"M50,74.134C60.556,71.178,71.111,68.223,81.667,62.927C92.222,57.631,102.778,49.544,113.333,42.358C123.889,35.172,134.444,27.491,145,19.81\"></path><path stroke=\"#e15759\" d=\"M50,70.569C60.556,68.862,71.111,67.154,81.667,62.785C92.222,58.416,102.778,51.435,113.333,44.357C123.889,37.279,134.444,28.798,145,20.318\"></path></g>\n```\n\n----------------------------------------\n\nTITLE: Line Multi-Series Chart Specification in JSON\nDESCRIPTION: JSON specification for the interactive line chart showing unemployment rates with hover highlighting and annotations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line-multi-series.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n<<< @/public/specs/json/line-multi-series.json [JSON]\n```\n\n----------------------------------------\n\nTITLE: Loading Line Chart Example Component\nDESCRIPTION: Includes a line chart example component that loads specifications from a YAML file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/line.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Clearing Visualization Coordinator in Vue Setup\nDESCRIPTION: Vue setup script that imports the coordinator from @uwdata/vgplot and clears any existing visualizations. This is used to initialize the environment before rendering the wind map example.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/wind-map.md#2025-04-16_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Computing Kurtosis with kurtosis()\nDESCRIPTION: Creates an aggregate function that calculates the kurtosis (measure of tailedness) of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nkurtosis(expression)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with VGPlot Coordinator\nDESCRIPTION: Initializes the VGPlot coordinator and clears any existing state. This setup code is essential for managing the visualization state within the Vue component.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/density2d.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule Lines for Data Point Indicators\nDESCRIPTION: SVG code that creates rule lines to indicate data points in the visualization. Each line is positioned at specific coordinates with different colored strokes corresponding to data series, helping to highlight data points on the chart.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_13\n\nLANGUAGE: svg\nCODE:\n```\n<g aria-label=\"rule\"><line x1=\"111.27669974545915\" x2=\"111.27669974545915\" y1=\"80.41042253384043\" y2=\"79.30294872931005\" stroke=\"#76b7b2\"></line><line x1=\"111.27669974545915\" x2=\"111.27669974545915\" y1=\"73.13631623639813\" y2=\"71.6230488984892\" stroke=\"#59a14f\"></line><line x1=\"111.27669974545915\" x2=\"111.27669974545915\" y1=\"80.52860462473431\" y2=\"79.73059537662952\" stroke=\"#4e79a7\"></line><line x1=\"80.63834987272958\" x2=\"80.63834987272958\" y1=\"79.95185024083251\" y2=\"73.75759850697145\" stroke=\"#76b7b2\"></line><line x1=\"80.63834987272958\" x2=\"80.63834987272958\" y1=\"73.69941156100282\" y2=\"72.65654055968022\" stroke=\"#59a14f\"></line><line x1=\"80.63834987272958\" x2=\"80.63834987272958\" y1=\"80.52860462473431\" y2=\"79.73059524627301\" stroke=\"#4e79a7\"></line><line x1=\"141.9150496181887\" x2=\"141.9150496181887\" y1=\"80.41042253384043\" y2=\"77.94155405292557\" stroke=\"#76b7b2\"></line><line x1=\"141.9150496181887\" x2=\"141.9150496181887\" y1=\"73.69941149185027\" y2=\"72.55313160351476\" stroke=\"#59a14f\"></line><line x1=\"50\" x2=\"50\" y1=\"80.41042253384043\" y2=\"79.30294872931005\" stroke=\"#76b7b2\"></line><line x1=\"50\" x2=\"50\" y1=\"73.75759843739466\" y2=\"72.70866971657018\" stroke=\"#59a14f\"></line><line x1=\"50\" x2=\"50\" y1=\"80.52860462473431\" y2=\"79.73059537662952\" stroke=\"#4e79a7\"></line><line x1=\"50\" x2=\"50\" y1=\"67.42965655994503\" y2=\"60.4818928458743\" stroke=\"#ff9da6\"></line><line x1=\"80.63834987272958\" x2=\"80.63834987272958\" y1=\"58.99886576519707\" y2=\"45.93483208559458\" stroke=\"#ff9da6\"></line><line x1=\"111.27669974545915\" x2=\"111.27669974545915\" y1=\"42.38310810585113\" y2=\"22.75468297866056\" stroke=\"#ff9da6\"></line></g>\n```\n\n----------------------------------------\n\nTITLE: Importing and Clearing Coordinator in vgplot\nDESCRIPTION: Imports the coordinator from the vgplot package and clears any existing state. This setup script runs when the page loads to ensure a clean environment for demonstrations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/vgplot/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { coordinator } from '@uwdata/vgplot';\ncoordinator().clear();\n```\n\n----------------------------------------\n\nTITLE: Creating Area Chart Visualization with SVG\nDESCRIPTION: SVG code for an area chart visualization that shows multiple data series with different colored paths and data points. Includes grid lines, axis labels, and ticks with values ranging from 10k to 10M.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_4\n\nLANGUAGE: SVG\nCODE:\n```\n<g aria-label=\"facet\" transform=\"translate(386,0)\">\n<g aria-label=\"fx-axis tick label\" transform=\"translate(0,-9)\"><text transform=\"translate(97.5,1)\">area</text></g>\n<g aria-label=\"y-grid\" stroke=\"currentColor\" stroke-opacity=\"0.1\"><line x1=\"40\" x2=\"155\" y1=\"78.81569997924379\" y2=\"78.81569997924379\"></line><line x1=\"40\" x2=\"155\" y1=\"58.27189999308126\" y2=\"58.27189999308126\"></line><line x1=\"40\" x2=\"155\" y1=\"37.72810000691874\" y2=\"37.72810000691874\"></line><line x1=\"40\" x2=\"155\" y1=\"17.184300020756197\" y2=\"17.184300020756197\"></line></g>\n<g aria-label=\"x-axis tick\" fill=\"none\" stroke=\"currentColor\"><path transform=\"translate(50,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(81.66666666666666,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(113.33333333333331,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(145,95)\" d=\"M0,0L0,6\"></path></g>\n<g aria-label=\"x-axis tick label\" font-variant=\"tabular-nums\" transform=\"translate(0,9)\"><text y=\"0.71em\" transform=\"translate(50,95)\">10k</text><text y=\"0.71em\" transform=\"translate(81.66666666666666,95)\">100k</text><text y=\"0.71em\" transform=\"translate(113.33333333333331,95)\">1M</text><text y=\"0.71em\" transform=\"translate(145,95)\">10M</text></g>\n<g aria-label=\"rule\" stroke=\"currentColor\" stroke-opacity=\"0.2\" stroke-dasharray=\"5,5\"><line x1=\"40\" x2=\"155\" y1=\"58.27189999308126\" y2=\"58.27189999308126\"></line></g>\n<g aria-label=\"line\" clip-path=\"url(#plot-clip-7)\"><clipPath id=\"plot-clip-7\"><rect x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect></clipPath>\n<g fill=\"none\" stroke-width=\"1.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"><path stroke=\"#76b7b2\" d=\"M50,73.721C60.556,73.981,71.111,74.24,81.667,74.24C92.222,74.24,102.778,74.196,113.333,74.108C123.889,74.019,134.444,67.349,145,60.679\"></path><path stroke=\"#4e79a7\" d=\"M50,74.622C60.556,74.559,71.111,74.495,81.667,74.24C92.222,73.986,102.778,65.315,113.333,59.576C123.889,53.838,134.444,46.824,145,39.81\"></path><path stroke=\"#f28e2c\" d=\"M50,77.647L81.667,55.849\"></path><path stroke=\"#e15759\" d=\"M50,68.424L81.667,48.107\"></path></g></g>\n<g aria-label=\"dot\" clip-path=\"url(#plot-clip-8)\"><clipPath id=\"plot-clip-8\"><rect x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect></clipPath><g><circle cx=\"50\" cy=\"73.72138676915544\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"81.66666666666666\" cy=\"74.24025731688864\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"113.33333333333331\" cy=\"74.10768345366702\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"145\" cy=\"60.67944761108077\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"50\" cy=\"74.62229988238151\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"81.66666666666666\" cy=\"74.2402573805768\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"113.33333333333331\" cy=\"59.576148971926905\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"50\" cy=\"77.64665806715571\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"81.66666666666666\" cy=\"55.84909087118312\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"50\" cy=\"68.42407003761036\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"81.66666666666666\" cy=\"48.10722776682555\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"145\" cy=\"39.80979621396995\" r=\"2\" fill=\"#4e79a7\"></circle></g></g>\n<g aria-label=\"text\" transform=\"translate(0,5)\"><text y=\"0.71em\" transform=\"translate(97.5,1)\">area chart</text></g>\n<rect aria-label=\"frame\" fill=\"none\" stroke=\"currentColor\" x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect>\n</g>\n```\n\n----------------------------------------\n\nTITLE: Finding Last Value with last()\nDESCRIPTION: Creates an aggregate function that returns the last observed value of the input expression.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nlast(expression)\n```\n\n----------------------------------------\n\nTITLE: Example Component Integration\nDESCRIPTION: Embeds an example visualization component using a YAML specification file for the linear regression plot.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/linear-regression-10m.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/linear-regression-10m.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Mosaic Coordinator Component\nDESCRIPTION: Setup script that imports and clears the Mosaic coordinator for managing component interactions.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/inputs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Computing Entropy with entropy()\nDESCRIPTION: Creates an aggregate function that calculates the entropy of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nentropy(expression)\n```\n\n----------------------------------------\n\nTITLE: Not NULL Value Check\nDESCRIPTION: Function that tests if the input expression is not NULL.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nisNotNull(expression)\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Points with SVG Circles\nDESCRIPTION: SVG code for rendering data points as circles on the chart. Each circle has specific coordinates, radius, and fill color representing different data series. The points are clipped to stay within the chart area.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_14\n\nLANGUAGE: svg\nCODE:\n```\n<g aria-label=\"dot\" clip-path=\"url(#iplot-clip-2)\"><clipPath id=\"iplot-clip-2\"><rect x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect></clipPath><g><circle cx=\"111.27669974545915\" cy=\"79.8405795457826\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"111.27669974545915\" cy=\"72.55313160351476\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"111.27669974545915\" cy=\"80.17837370472641\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"80.63834987272958\" cy=\"79.09612458513371\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"80.63834987272958\" cy=\"73.30177314083389\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"80.63834987272958\" cy=\"80.17837370472641\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"141.9150496181887\" cy=\"79.73059537662952\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"141.9150496181887\" cy=\"73.24630047072948\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"50\" cy=\"79.95185024083251\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"50\" cy=\"73.30177314083389\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"50\" cy=\"80.17837370472641\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"50\" cy=\"64.4520154284156\" r=\"2\" fill=\"#ff9da6\"></circle><circle cx=\"80.63834987272958\" cy=\"52.37987619905716\" r=\"2\" fill=\"#ff9da6\"></circle><circle cx=\"111.27669974545915\" cy=\"32.01810733086758\" r=\"2\" fill=\"#ff9da6\"></circle></g></g>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue\nDESCRIPTION: Sets up the vgplot coordinator and clears any previous state. This Vue setup script initializes the visualization environment for the flights hexbin demonstration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/flights-hexbin.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Specification for Protein Design Dashboard\nDESCRIPTION: This code block references a JavaScript specification file for the protein design dashboard, indicated by the file path '@/public/specs/esm/protein-design.js'.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/protein-design.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/public/specs/esm/protein-design.js [JavaScript]\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory in Jupyter Notebook\nDESCRIPTION: This magic command changes the current working directory to the Mosaic root directory, which is likely necessary for correct file path resolution in the subsequent operations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Change working directory to mosaic root\n%cd ../..\n```\n\n----------------------------------------\n\nTITLE: Computing Regression Slope with regrSlope()\nDESCRIPTION: Creates an aggregate function that returns the slope of the linear regression model predicting y based on x.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nregrSlope(y, x)\n```\n\n----------------------------------------\n\nTITLE: Initializing Mosaic Coordinator in Vue\nDESCRIPTION: Vue script setup that imports and clears the vgplot coordinator for managing Mosaic application state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/spec/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Projected Gaia Sample Dataset\nDESCRIPTION: Creates two tables: a 5% sample of the Gaia dataset and a projected version with additional coordinate calculations using natural earth projection.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nc = duckdb.connect(\"md:gaia-import\")\n\nc.execute(\n    \"\"\"\nCREATE TABLE IF NOT EXISTS gaia_sample_5_percent AS\n    SELECT l, b, ra, dec, phot_g_mean_mag, parallax, bp_rp\n    FROM gaia\n    USING SAMPLE 5 PERCENT (bernoulli)\n\"\"\"\n)\n\nc.execute(\n    \"\"\"\nCREATE TABLE IF NOT EXISTS gaia_sample_5_percent_projected AS\nWITH tmp AS (\n  SELECT\n    radians((-l + 540) % 360 - 180) AS lambda,\n    radians(b) AS phi,\n    asin(sqrt(3)/2 * sin(phi)) AS t,\n    t^2 AS t2,\n    t2^3 AS t6,\n    *\n  FROM gaia_sample_5_percent\n)\nSELECT\n  (1.340264 * lambda * cos(t)) / (sqrt(3)/2 * (1.340264 + (-0.081106 * 3 * t2) + (t6 * (0.000893 * 7 + 0.003796 * 9 * t2)))) AS u,\n  t * (1.340264 + (-0.081106 * t2) + (t6 * (0.000893 + 0.003796 * t2))) AS v,\n  * EXCLUDE('t', 't2', 't6')\nFROM tmp\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Population Arrows Example Usage in Vue\nDESCRIPTION: Vue component that renders a visualization example using the population-arrows.yaml specification file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/population-arrows.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/population-arrows.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Specification for Protein Design Dashboard\nDESCRIPTION: This code block references a JSON specification file for the protein design dashboard, indicated by the file path '@/public/specs/json/protein-design.json'.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/protein-design.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n<<< @/public/specs/json/protein-design.json [JSON]\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Mosaic Widget in Python\nDESCRIPTION: This optional code snippet sets up logging for the Mosaic widget at the INFO level, which can be useful for debugging and monitoring the widget's operations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/specs.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Optional: enable logging in Mosaic widget\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Equality Comparison\nDESCRIPTION: Function that tests if expression a equals expression b. Uses SQL NULL semantics where NULL values are not considered equal.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\neq(a, b)\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Component\nDESCRIPTION: Sets up the vgplot coordinator in a Vue component using the script setup syntax. This imports the coordinator from the @uwdata/vgplot package and clears any existing state, ensuring a fresh visualization context.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/crossfilter.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Line Density Example Visualization\nDESCRIPTION: Imports and displays a line density visualization example based on a YAML specification file. This component renders the interactive visualization described in the surrounding text.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line-density.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Example spec=\"/specs/yaml/line-density.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Interactive Weather Example Component\nDESCRIPTION: Vue component that embeds the weather visualization specification using an Example component.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/weather.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/weather.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: YAML Specification for Protein Design Dashboard\nDESCRIPTION: This code block references a YAML specification file for the protein design dashboard, indicated by the file path '@/public/specs/yaml/protein-design.yaml'.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/protein-design.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n<<< @/public/specs/yaml/protein-design.yaml [YAML]\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Regression Plot with SVG\nDESCRIPTION: SVG markup representing a linear regression plot with circles as data points. The visualization includes colored data points grouped together, axis labels, and a frame element.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<g aria-label=\"dot\" clip-path=\"url(#plot-clip-4)\"><clipPath id=\"plot-clip-4\"><rect x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect></clipPath><g><circle cx=\"50\" cy=\"74.53904520902323\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"113.33333333333331\" cy=\"74.37483092531761\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"145\" cy=\"59.11334543694842\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"50\" cy=\"74.45656030092634\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"81.66666666666666\" cy=\"74.5944619487965\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"113.33333333333331\" cy=\"66.17255337156944\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"145\" cy=\"47.22822578117591\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"50\" cy=\"81.68488803791806\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"81.66666666666666\" cy=\"67.05867622681409\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"113.33333333333331\" cy=\"46.117755716421016\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"145\" cy=\"23.457188334480247\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"50\" cy=\"81.03248686536216\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"81.66666666666666\" cy=\"70.65836202474505\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"113.33333333333331\" cy=\"47.184344600253056\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"145\" cy=\"22.994082985116805\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"81.66666666666666\" cy=\"74.67823775279466\" r=\"2\" fill=\"#76b7b2\"></circle></g></g>\n<g aria-label=\"text\" transform=\"translate(0,5)\"><text y=\"0.71em\" transform=\"translate(97.5,1)\">linear regression</text></g>\n<rect aria-label=\"frame\" fill=\"none\" stroke=\"currentColor\" x=\"40\" y=\"1\" width=\"115\" height=\"94\"></rect>\n```\n\n----------------------------------------\n\nTITLE: Computing Sample Variance with variance()\nDESCRIPTION: Creates an aggregate function that calculates the sample variance of the input expression values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/aggregate-functions.md#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nvariance(expression)\n```\n\n----------------------------------------\n\nTITLE: Less Than or Equal Comparison\nDESCRIPTION: Function that tests if expression a is less than or equal to expression b.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nlte(a, b)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing Coordinator in Vue.js\nDESCRIPTION: Setup script that imports the coordinator from the @uwdata/vgplot library and clears it. This is likely part of a Vue.js component using the script setup syntax.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Athlete Height Visualization in JSON Format\nDESCRIPTION: JSON implementation of the athlete height confidence intervals visualization. This provides the same visualization specification but in JSON format for use in different contexts or with different tools.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/athlete-height.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// JSON code for athlete height intervals visualization would be here\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener from Selection in JavaScript\nDESCRIPTION: The removeEventListener method removes an event listener callback function for the specified event type.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.removeEventListener(type, callback)\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Data Points for Performance Comparison\nDESCRIPTION: SVG code for rendering data points (circles) that show specific performance measurements for different libraries across various data sizes. Each point is colored according to its corresponding library and positioned to show performance metrics.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_9\n\nLANGUAGE: SVG\nCODE:\n```\n<g><circle cx=\"50\" cy=\"61.97239670939086\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"81.66666666666666\" cy=\"59.07909565185112\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"113.33333333333331\" cy=\"59.0498429663067\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"145\" cy=\"48.56870279195148\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"50\" cy=\"65.40615167236552\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"81.66666666666666\" cy=\"60.26279991697519\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"113.33333333333331\" cy=\"50.35926563287021\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"145\" cy=\"31.741136348951372\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"50\" cy=\"74.13404111274168\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"81.66666666666666\" cy=\"62.926699331224206\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"113.33333333333331\" cy=\"42.35812938853001\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"145\" cy=\"19.80967808790197\" r=\"2\" fill=\"#f28e2c\"></circle><circle cx=\"50\" cy=\"70.5694075804139\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"81.66666666666666\" cy=\"62.78501719995191\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"113.33333333333331\" cy=\"44.356903206537254\" r=\"2\" fill=\"#e15759\"></circle><circle cx=\"145\" cy=\"20.317828176318848\" r=\"2\" fill=\"#e15759\"></circle></g>\n```\n\n----------------------------------------\n\nTITLE: Linting Python Code with Ruff\nDESCRIPTION: Commands to check and fix code style issues using the Ruff linter and formatter.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/widget/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff check --fix\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff format\n```\n\n----------------------------------------\n\nTITLE: Greater Than or Equal Comparison\nDESCRIPTION: Function that tests if expression a is greater than or equal to expression b.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ngte(a, b)\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with vgplot Coordinator\nDESCRIPTION: Sets up a Vue component that initializes and clears the vgplot coordinator. This is used to manage the interactive dashboard state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/athletes.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running DuckDB Server with pipx\nDESCRIPTION: Command to run the duckdb-server directly using pipx, which creates an isolated environment for the application. This is the recommended approach for running the server without permanent installation.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/server/index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx run duckdb-server\n```\n\n----------------------------------------\n\nTITLE: Removing an event listener from a Param in JavaScript\nDESCRIPTION: The removeEventListener method removes a previously added event listener callback function for the specified event type. This is used to clean up event listeners when they are no longer needed.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/param.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nparam.removeEventListener(type, callback)\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates\nDESCRIPTION: Command to create localhost SSL certificates using mkcert for HTTPS support\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmkcert localhost\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Commands to install cargo-watch and systemfd for development workflow\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo install cargo-watch systemfd\n```\n\n----------------------------------------\n\nTITLE: Not Between Range Check\nDESCRIPTION: Function that tests if the input expression does not lie between lo and hi values. Equivalent to NOT(lo <= expression AND expression <= hi).\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/sql/operators.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nisNotBetween(expression, [lo, hi])\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with VGPlot Coordinator Clearing\nDESCRIPTION: Vue setup script that imports the coordinator from @uwdata/vgplot and clears any previous coordinator state. This helps initialize the visualization environment.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/driving-shifts.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Spacing in Vertical Layout\nDESCRIPTION: Demonstrates how to add vertical spacing between elements using vspace.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/spec/format.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vconcat\": [\n    /* ...elements */\n    { \"vspace\": \"1em\" }\n    /* ...more elements */\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Selection Instance in JavaScript\nDESCRIPTION: The isSelection function checks if a given value is an instance of the Selection class. It returns true if the input is a Selection, false otherwise.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nisSelection(value)\n```\n\n----------------------------------------\n\nTITLE: Rendering U.S. States Map Example Component\nDESCRIPTION: Renders the U.S. States map visualization example using a component that loads the YAML specification file.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/us-state-map.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Example spec=\"/specs/yaml/us-state-map.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Commands to run the server in development mode with auto-restart on code changes\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsystemfd --no-pid -s https::3000 -- cargo watch -x run\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Server Logging\nDESCRIPTION: Command to disable or customize server logging using the RUST_LOG environment variable\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nenv RUST_LOG=\"\" duckdb-server\n```\n\n----------------------------------------\n\nTITLE: Managing Query Errors in JavaScript\nDESCRIPTION: Method called by the coordinator to report an error during query processing. The base class logs the error to console.error. It should return the current client instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclient.queryError(error)\n```\n\n----------------------------------------\n\nTITLE: Including Example Bias Parameter Visualization\nDESCRIPTION: Embeds an example visualization using the Example component, referencing a YAML specification for the bias parameter demonstration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/bias.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/bias.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running DuckDB Server with uvx\nDESCRIPTION: Command for running the DuckDB server directly using uvx, which is the recommended way to run the server in an isolated environment.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx duckdb-server\n```\n\n----------------------------------------\n\nTITLE: Removing Clauses from Selection in JavaScript\nDESCRIPTION: The remove method creates a clone of the Selection with clauses corresponding to the provided source removed.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.remove(source)\n```\n\n----------------------------------------\n\nTITLE: Running DuckDB Server with Socket Reuse\nDESCRIPTION: Command to run the server with listenfd for socket reuse capability\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsystemfd --no-pid -s http::3000 -- duckdb-server\n```\n\n----------------------------------------\n\nTITLE: Drawing Line Charts with SVG Path Elements\nDESCRIPTION: SVG code for creating line charts using path elements with different stroke colors. Each path represents a different data series, using coordinates to plot data points and connecting them with smooth lines.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_12\n\nLANGUAGE: svg\nCODE:\n```\n<g aria-label=\"line\" clip-path=\"url(#iplot-clip-1)\"><clipPath id=\"iplot-clip-1\"><rect x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect></clipPath><g fill=\"none\" stroke-width=\"1.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"><path stroke=\"#76b7b2\" d=\"M50,79.952C60.213,79.524,70.426,79.096,80.638,79.096C90.851,79.096,101.064,79.841,111.277,79.841C121.489,79.841,131.702,79.786,141.915,79.731\"></path><path stroke=\"#59a14f\" d=\"M50,73.302C60.213,73.302,70.426,73.302,80.638,73.302C90.851,73.302,101.064,72.553,111.277,72.553C121.489,72.553,131.702,72.9,141.915,73.246\"></path><path stroke=\"#4e79a7\" d=\"M50,80.178C60.213,80.178,70.426,80.178,80.638,80.178C90.851,80.178,101.064,80.178,111.277,80.178\"></path><path stroke=\"#ff9da6\" d=\"M50,64.452C60.213,61.119,70.426,57.786,80.638,52.38C90.851,46.974,101.064,39.496,111.277,32.018\"></path></g></g>\n```\n\n----------------------------------------\n\nTITLE: Updating Client in JavaScript\nDESCRIPTION: Method to request a client update using its current data. It's called by the coordinator after returning data via queryResult and should return the current client instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/client.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.update()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Mosaic and DuckDB\nDESCRIPTION: Imports essential Python libraries including DuckDB for database operations, YAML for configuration parsing, and MosaicWidget for visualization.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport duckdb\nimport yaml\n\nfrom mosaic_widget import MosaicWidget\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing the Package\nDESCRIPTION: Commands for building the package with UV and uploading to PyPI using Twine, with a note about authentication methods.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/widget/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv build\n```\n\nLANGUAGE: bash\nCODE:\n```\nuvx twine upload --skip-existing ../../dist/*\n```\n\n----------------------------------------\n\nTITLE: Cloning Selection in JavaScript\nDESCRIPTION: The clone method creates a cloned copy of the current Selection instance.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.clone()\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks\nDESCRIPTION: Command to execute performance benchmarks\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Updates in Selection in JavaScript\nDESCRIPTION: The pending method returns a promise that resolves when any pending updates complete for the event of the given type currently being processed. It resolves immediately if the queue for the given event type is empty.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/selection.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.pending(type)\n```\n\n----------------------------------------\n\nTITLE: Requesting Client Query Update in Mosaic Coordinator (Internal)\nDESCRIPTION: Internal method to request a query update for a client. Not intended for direct use in application code.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.requestQuery(client, query)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Query Requests in Mosaic Coordinator\nDESCRIPTION: Cancel one or more query requests that were previously initiated.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.cancel(requests)\n```\n\n----------------------------------------\n\nTITLE: Including Example Visualization Component with YAML Specification\nDESCRIPTION: Embeds a visualization example component that references a YAML specification file for the NYC taxi rides visualization.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/nyc-taxi-rides.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Example spec=\"/specs/yaml/nyc-taxi-rides.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode for Live Editing\nDESCRIPTION: NPM command to enable live editing of the widget code during development.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/widget/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Plot-Why Visualization Components\nDESCRIPTION: CSS styles for visualization components with the 'plot-why' class. Defines styling for text elements, swatches, and swatch containers for consistent visualization rendering.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style>\n.plot-why {\n  margin-top: 2em;\n}\n.plot-why text,\n.plot-why tspan {\n  white-space: pre;\n}\n.plot-why-swatches {\n  font-family: system-ui, sans-serif;\n  font-size: 10px;\n}\n.plot-why-swatch > svg {\n  margin-right: 0.5em;\n  overflow: visible;\n}\n.plot-why-swatches-wrap {\n  display: flex;\n  align-items: center;\n  min-height: 33px;\n  flex-wrap: wrap;\n}\n.plot-why-swatches-wrap .plot-why-swatch {\n  display: inline-flex;\n  align-items: center;\n  margin-right: 1em;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Mosaic Development Version from GitHub\nDESCRIPTION: Instructions for installing the development version of Mosaic directly from GitHub. This allows access to the latest features and fixes that may not be in the PyPI release.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/plot/index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/uwdata/mosaic\n```\n\n----------------------------------------\n\nTITLE: Updating Client in Mosaic Coordinator (Internal)\nDESCRIPTION: Internal method to initiate a client update for a given query and priority. Not intended for direct use in application code.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/core/coordinator.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncoordinator.updateClient(client, query, priority)\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Chart for Gaia Data Bins\nDESCRIPTION: SVG code implementing a secondary chart labeled \"gaia (bins)\" with its own axes, data points, and line elements. The chart is positioned alongside the first chart and uses similar styling with different data values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_16\n\nLANGUAGE: svg\nCODE:\n```\n<g aria-label=\"line\" clip-path=\"url(#iplot-clip-3)\"><clipPath id=\"iplot-clip-3\"><rect x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect></clipPath><g fill=\"none\" stroke-width=\"1.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"><path stroke=\"#59a14f\" d=\"M55.101,67.673C65.308,67.419,75.515,67.165,85.722,66.99C95.936,66.815,106.149,66.624,116.363,66.624C126.575,66.624,136.788,66.652,147,66.68\"></path><path stroke=\"#76b7b2\" d=\"M55.101,74.236C65.308,74.11,75.515,73.984,85.722,73.875C95.936,73.766,106.149,73.778,116.363,73.584C126.575,73.39,136.788,71.464,147,69.538\"></path><path stroke=\"#4e79a7\" d=\"M55.101,73.758L85.722,69.538\"></path></g></g>\n<g aria-label=\"text\" transform=\"translate(0,5)\"><text y=\"0.71em\" transform=\"translate(98.5,18)\">gaia (bins)</text></g>\n<rect aria-label=\"frame\" fill=\"none\" stroke=\"currentColor\" x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect>\n```\n\n----------------------------------------\n\nTITLE: Running Mosaic Example\nDESCRIPTION: Command line instruction for starting the development server to run the Mosaic example\nSOURCE: https://github.com/uwdata/mosaic/blob/main/examples/svelte-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing MotherDuck Extension\nDESCRIPTION: Forces installation of the MotherDuck extension in DuckDB.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/dev/notebooks/motherduck.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nc = duckdb.connect()\nc.query(\"FORCE INSTALL motherduck\")\n```\n\n----------------------------------------\n\nTITLE: Building Widget JavaScript Code\nDESCRIPTION: NPM command to build the JavaScript code for the Mosaic widget.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/widget/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Citing Mosaic in Academic Publications\nDESCRIPTION: BibTeX citation format for referencing the Mosaic research paper in academic publications. The citation includes author information, publication details including journal, volume, pages, and DOI.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{heer2024mosaic,\n  title={Mosaic: An Architecture for Scalable \\& Interoperable Data Views},\n  author={Heer, Jeffrey and Moritz, Dominik},\n  journal={IEEE Transactions on Visualization and Computer Graphics},\n  year={2024},\n  volume={30},\n  number={1},\n  pages={436-446},\n  doi={10.1109/TVCG.2023.3327189}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Component\nDESCRIPTION: Sets up and clears the vgplot coordinator in a Vue component using the script setup syntax. The coordinator manages interactions between visualizations.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/nyc-taxi-rides.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing the vgplot Coordinator in Vue\nDESCRIPTION: A Vue setup script that imports the coordinator from the @uwdata/vgplot library and clears any existing visualizations or state. This is a common setup pattern when working with vgplot in Vue components.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/legends.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing vgplot Coordinator in Vue Component\nDESCRIPTION: Sets up and clears the vgplot coordinator in a Vue component. This is essential for managing visualization state between different chart instances.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/density1d.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for VGPlot Coordinator\nDESCRIPTION: Initializes and clears the VGPlot coordinator for managing visualization state. Uses Vue.js script setup syntax with the @uwdata/vgplot library.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/linear-regression.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Jupyter Lab with HMR for Development\nDESCRIPTION: Command to start Jupyter Lab with Hot Module Replacement enabled for widget development, specifying the notebook directory.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/widget/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nANYWIDGET_HMR=1 uv run jupyter lab --notebook-dir=../../dev/notebooks\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing Coordinator in Vue Component\nDESCRIPTION: A Vue setup script that imports the coordinator from @uwdata/vgplot and clears any existing state. This initialization ensures a clean slate for the visualization examples that follow.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/density-groups.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Coordinator in Vue Component\nDESCRIPTION: A Vue script block that imports the coordinator from the @uwdata/vgplot package and clears any existing coordination state. This prepares the environment for the visualization example.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/gaia.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing VGPlot Coordinator in Vue\nDESCRIPTION: Sets up and clears the VGPlot coordinator component within a Vue component using the script setup syntax. This is typically used to reset any existing visualization state.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/bias.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vgplot Coordinator in Vue.js\nDESCRIPTION: A Vue.js setup script that imports and initializes the coordinator from the @uwdata/vgplot package, then clears any existing state. This setup prepares the environment for the visualization component.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/athlete-height.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Vgplot Coordinator\nDESCRIPTION: Initializes the vgplot coordinator and clears any existing state. This setup code is required for managing the visualization coordination.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/symbols.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Specification File\nDESCRIPTION: HTML code that references an external specification file for the Gaia star catalog visualization. This renders the visualization example using the Mosaic framework.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/gaia.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Example spec=\"/specs/yaml/gaia.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing and Clearing Vega-Plot Coordinator in Vue\nDESCRIPTION: A Vue composition API setup script that imports the coordinator from the @uwdata/vgplot package and clears any existing configurations. This is used to ensure a clean state for the pan and zoom demonstration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/pan-zoom.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Example Specification in Vue\nDESCRIPTION: A Vue component that imports and displays a faceted interval plot example using the Example component. The specification is loaded from a YAML file path.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/facet-interval.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/facet-interval.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Axis Ticks and Labels for Data Visualization\nDESCRIPTION: SVG code for creating axis ticks and labels for a data visualization. The x-axis shows data sizes (10k, 100k, 1M, 10M) while maintaining proper formatting and positioning for clarity in the visualization.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_7\n\nLANGUAGE: SVG\nCODE:\n```\n<g aria-label=\"x-axis tick\" fill=\"none\" stroke=\"currentColor\"><path transform=\"translate(50,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(81.66666666666666,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(113.33333333333331,95)\" d=\"M0,0L0,6\"></path><path transform=\"translate(145,95)\" d=\"M0,0L0,6\"></path></g>\n<g aria-label=\"x-axis tick label\" font-variant=\"tabular-nums\" transform=\"translate(0,9)\"><text y=\"0.71em\" transform=\"translate(50,95)\">10k</text><text y=\"0.71em\" transform=\"translate(81.66666666666666,95)\">100k</text><text y=\"0.71em\" transform=\"translate(113.33333333333331,95)\">1M</text><text y=\"0.71em\" transform=\"translate(145,95)\">10M</text></g>\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Labels and Grid Components\nDESCRIPTION: SVG code for implementing chart labels and grid components, including a title label (\"flights\") and a frame around the chart. The grid includes horizontal reference lines to help interpret the data values.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_15\n\nLANGUAGE: svg\nCODE:\n```\n<g aria-label=\"text\" transform=\"translate(0,5)\"><text y=\"0.71em\" transform=\"translate(98.5,18)\">flights   </text></g>\n<rect aria-label=\"frame\" fill=\"none\" stroke=\"currentColor\" x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect>\n</g>\n<g aria-label=\"facet\" transform=\"translate(131,0)\">\n<g aria-label=\"y-grid\" stroke=\"currentColor\" stroke-opacity=\"0.1\"><line x1=\"40\" x2=\"157\" y1=\"78.40572092494686\" y2=\"78.40572092494686\"></line><line x1=\"40\" x2=\"157\" y1=\"56.5\" y2=\"56.5\"></line><line x1=\"40\" x2=\"157\" y1=\"34.59427907505314\" y2=\"34.59427907505314\"></line></g>\n```\n\n----------------------------------------\n\nTITLE: Displaying Legend Examples in Vue Template\nDESCRIPTION: A Vue template component that loads and displays visualization examples from a YAML specification file. The Example component renders the legends visualization based on the provided spec path.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/legends.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/legends.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with VGPlot Coordinator\nDESCRIPTION: Initializes a Vue component and clears the VGPlot coordinator state. This setup is required for the visualization to work properly within a Vue.js application.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/splom.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding an Overview+Detail Visualization Example\nDESCRIPTION: Vue component that embeds the overview-detail visualization example using the Example component. The spec attribute points to a YAML file that contains the visualization configuration.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/overview-detail.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/overview-detail.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: SVG Visualization Markup for Data Comparison Charts\nDESCRIPTION: SVG code that renders performance comparison charts for different Mosaic implementations (Remote, Local, WASM) and VegaFusion. The visualization includes lines, points, and labels showing performance metrics across different data sizes.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/why-mosaic/index.md#2025-04-16_snippet_18\n\nLANGUAGE: svg\nCODE:\n```\n<g aria-label=\"x-axis tick label\" font-variant=\"tabular-nums\" transform=\"translate(0,9)\"><text y=\"0.71em\" transform=\"translate(50,95)\">1M</text><text y=\"0.71em\" transform=\"translate(80.63834987272958,95)\">10M</text><text y=\"0.71em\" transform=\"translate(111.27669974545915,95)\">100M</text><text y=\"0.71em\" transform=\"translate(141.9150496181887,95)\">1G</text></g>\n    <g aria-label=\"rule\" stroke=\"#aaa\" stroke-dasharray=\"5,5\"><line x1=\"40\" x2=\"157\" y1=\"56.5\" y2=\"56.5\"></line></g>\n    <g aria-label=\"line\" clip-path=\"url(#iplot-clip-5)\"><clipPath id=\"iplot-clip-5\"><rect x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect></clipPath><g fill=\"none\" stroke-width=\"1.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"><path stroke=\"#59a14f\" d=\"M55.101,64.596C65.308,63.542,75.515,62.488,85.722,61.273C95.936,60.057,106.149,58.561,116.363,57.304C126.575,56.046,136.788,54.888,147,53.73\"></path><path stroke=\"#76b7b2\" d=\"M55.101,72.101C65.308,71.537,75.515,70.973,85.722,69.243C95.936,67.511,106.149,63.578,116.363,61.715C126.575,59.853,136.788,58.961,147,58.069\"></path><path stroke=\"#4e79a7\" d=\"M55.101,70.359L85.722,61.781\"></path></g></g>\n    <g aria-label=\"rule\"><line x1=\"55.100731257508556\" x2=\"55.100731257508556\" y1=\"66.96120334776107\" y2=\"61.682280351665035\" stroke=\"#59a14f\"></line><line x1=\"55.100731257508556\" x2=\"55.100731257508556\" y1=\"73.69941154371467\" y2=\"67.3103630353548\" stroke=\"#76b7b2\"></line><line x1=\"55.100731257508556\" x2=\"55.100731257508556\" y1=\"73.41369836781861\" y2=\"67.07617191920387\" stroke=\"#4e79a7\"></line><line x1=\"147\" x2=\"147\" y1=\"55.96362379698904\" y2=\"49.103338564963394\" stroke=\"#59a14f\"></line><line x1=\"147\" x2=\"147\" y1=\"60.30995683385203\" y2=\"52.124218834309076\" stroke=\"#76b7b2\"></line><line x1=\"116.36278829408977\" x2=\"116.36278829408977\" y1=\"60.11321500316293\" y2=\"55.627921111476134\" stroke=\"#59a14f\"></line><line x1=\"116.36278829408977\" x2=\"116.36278829408977\" y1=\"65.70514326059705\" y2=\"59.2495662736177\" stroke=\"#76b7b2\"></line><line x1=\"85.72223263812266\" x2=\"85.72223263812266\" y1=\"64.59574383399737\" y2=\"58.215514212705195\" stroke=\"#59a14f\"></line><line x1=\"85.72223263812266\" x2=\"85.72223263812266\" y1=\"72.19980326979567\" y2=\"62.980796215017776\" stroke=\"#76b7b2\"></line><line x1=\"85.72223263812266\" x2=\"85.72223263812266\" y1=\"65.98459958924303\" y2=\"59.0983546050829\" stroke=\"#4e79a7\"></line></g>\n    <g aria-label=\"dot\" clip-path=\"url(#iplot-clip-6)\"><clipPath id=\"iplot-clip-6\"><rect x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect></clipPath><g><circle cx=\"55.100731257508556\" cy=\"64.59574383399737\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"55.100731257508556\" cy=\"72.10121655176282\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"55.100731257508556\" cy=\"70.35852463395668\" r=\"2\" fill=\"#4e79a7\"></circle><circle cx=\"147\" cy=\"53.729887670651124\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"147\" cy=\"58.068540477867444\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"116.36278829408977\" cy=\"57.30360017077578\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"116.36278829408977\" cy=\"61.71514233204928\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"85.72223263812266\" cy=\"61.272946679285845\" r=\"2\" fill=\"#59a14f\"></circle><circle cx=\"85.72223263812266\" cy=\"69.24252957366946\" r=\"2\" fill=\"#76b7b2\"></circle><circle cx=\"85.72223263812266\" cy=\"61.78120880370053\" r=\"2\" fill=\"#4e79a7\"></circle></g></g>\n    <g aria-label=\"text\" transform=\"translate(0,5)\"><text y=\"0.71em\" transform=\"translate(98.5,18)\">gaia (raster)</text></g>\n    <rect aria-label=\"frame\" fill=\"none\" stroke=\"currentColor\" x=\"40\" y=\"18\" width=\"117\" height=\"77\"></rect>\n```\n\n----------------------------------------\n\nTITLE: Running Basic Development Server\nDESCRIPTION: Simple command to run the server in development mode without auto-restart\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Code Quality Checks\nDESCRIPTION: Commands to run tests, linting, and formatting checks before submitting pull requests\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncargo test\ncargo clippy\ncargo fmt\n```\n\n----------------------------------------\n\nTITLE: SPLOM Import Reference\nDESCRIPTION: Shows the import references for the SPLOM specification files in different formats. Uses Vue's code-group component to organize multiple specification formats.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/splom.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n::: code-group\n<<< @/public/specs/esm/splom.js [JavaScript]\n<<< @/public/specs/yaml/splom.yaml [YAML]\n<<< @/public/specs/json/splom.json [JSON]\n:::\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with vgplot Coordinator\nDESCRIPTION: Sets up a Vue component and clears the vgplot coordinator. This is required for proper chart initialization and coordination between components.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/line.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running DuckDB Server\nDESCRIPTION: Basic command to start the DuckDB server\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nduckdb-server\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Component for Weather Visualization\nDESCRIPTION: Vue setup script that initializes the coordinator for the visualization and clears any existing state. Uses the @uwdata/vgplot library for coordination.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/weather.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Server Release Binary\nDESCRIPTION: Command to build a release version of the DuckDB server\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Including a Visualization Example Component\nDESCRIPTION: Vue component that imports and displays a visualization example from a YAML specification file. The Example component renders the sorted bar chart based on the provided spec path.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/sorted-bars.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/sorted-bars.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue Component\nDESCRIPTION: This Vue script initializes and clears a coordinator from the @uwdata/vgplot library, which is likely used to manage the visualization state in the protein design explorer dashboard.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/protein-design.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component Example\nDESCRIPTION: Vue component import that demonstrates usage of the Example component with a spec prop.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/spec/index.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Example spec=\"/specs/yaml/line.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing VGPlot Coordinator in Vue Component\nDESCRIPTION: A Vue script that imports the coordinator from @uwdata/vgplot and clears any previous state. This setup ensures the visualization environment is reset before rendering the cross-filter example.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/flights-200k.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with VGPlot Coordinator\nDESCRIPTION: Initializes the VGPlot coordinator and clears any existing state in a Vue component setup block.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/examples/linear-regression-10m.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { coordinator } from '@uwdata/vgplot';\n  coordinator().clear();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB Server with Cargo\nDESCRIPTION: Commands to install the DuckDB server using either standard Cargo install or Cargo Binary Install (cargo-binstall)\nSOURCE: https://github.com/uwdata/mosaic/blob/main/packages/duckdb-server-rust/Readme.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install duckdb-server\n# or\ncargo binstall duckdb-server\n```\n\n----------------------------------------\n\nTITLE: No Code Snippets Present\nDESCRIPTION: This documentation file contains descriptions of visualization marks but no actual code snippets to format.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/docs/api/vgplot/marks.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Running Mosaic Vega Example Command\nDESCRIPTION: Command to run the Mosaic Vega integration example using npm.\nSOURCE: https://github.com/uwdata/mosaic/blob/main/examples/vega-example/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```"
  }
]