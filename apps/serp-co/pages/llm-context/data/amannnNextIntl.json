[
  {
    "owner": "amannn",
    "repo": "next-intl",
    "content": "TITLE: Implementing Middleware for i18n Routing\nDESCRIPTION: Middleware configuration to handle locale detection, redirects, and pathnames for internationalization.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport createMiddleware from 'next-intl/middleware';\nimport {routing} from './i18n/routing';\n\nexport default createMiddleware(routing);\n\nexport const config = {\n  // Match all pathnames except for\n  // - … if they start with `/api`, `/trpc`, `/_next` or `/_vercel`\n  // - … the ones containing a dot (e.g. `favicon.ico`)\n  matcher: '/((?!api|trpc|_next|_vercel|.*\\\\..*).*)\n';\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Locale-Aware Layout Component\nDESCRIPTION: Root layout component that verifies the locale parameter and sets up the NextIntlClientProvider for client components.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NextIntlClientProvider, hasLocale} from 'next-intl';\nimport {notFound} from 'next/navigation';\nimport {routing} from '@/i18n/routing';\n\nexport default async function LocaleLayout({\n  children,\n  params\n}: {\n  children: React.ReactNode;\n  params: Promise<{locale: string}>;\n}) {\n  // Ensure that the incoming `locale` is valid\n  const {locale} = await params;\n  if (!hasLocale(routing.locales, locale)) {\n    notFound();\n  }\n\n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider>{children}</NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTranslations Hook in a Server Component with next-intl (TypeScript/TSX)\nDESCRIPTION: This snippet defines a Server Component that utilizes the useTranslations hook from next-intl to provide localized content for the HomePage. It only uses static rendering features and does not require React interactivity or client-side state. Dependencies include next-intl and proper configuration of message catalogs. The t function is used to resolve a translation key ('title'). Input: none. Output: a React element (<h1>) with a localized header. Limitation: cannot use React interactive hooks like useState or useEffect in Server Components.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\n// Since this component doesn't use any interactive features\n// from React, it can be run as a Server Component.\n\nexport default function HomePage() {\n  const t = useTranslations('HomePage');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing next-intl Request Locale in Next.js Layout (TypeScript)\nDESCRIPTION: Defines an async layout component in Next.js that retrieves the locale from route parameters, validates it against supported locales, and invokes next-intl's setRequestLocale to set the current request's locale. This setup enables static rendering by making the locale accessible to all Server Components in the request lifecycle. It uses next/navigation's notFound for invalid locale handling and requires validated locale params passed from Next.js routing.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nimport {setRequestLocale} from 'next-intl/server';\nimport {hasLocale} from 'next-intl';\nimport {notFound} from 'next/navigation';\nimport {routing} from '@/i18n/routing';\n\nexport default async function LocaleLayout({children, params}) {\n  const {locale} = await params;\n  if (!hasLocale(routing.locales, locale)) {\n    notFound();\n  }\n\n  // Enable static rendering\n  setRequestLocale(locale);\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Locale Switcher with Server-side Translations and Client-side Interaction\nDESCRIPTION: This code shows how to create a locale switcher component where the locale options are rendered with translations in a Server Component, but the select input is a Client Component using a custom select wrapper. Dependencies include next-intl and a configuration of available locales.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useLocale, useTranslations} from 'next-intl';\nimport {locales} from '@/config';\n\n// A Client Component that registers an event listener for\n// the `change` event of the select, uses `useRouter`\n// to change the locale and uses `useTransition` to display\n// a loading state during the transition.\nimport LocaleSwitcherSelect from './LocaleSwitcherSelect';\n\nexport default function LocaleSwitcher() {\n  const t = useTranslations('LocaleSwitcher');\n  const locale = useLocale();\n\n  return (\n    <LocaleSwitcherSelect defaultValue={locale} label={t('label')}>\n      {locales.map((cur) => (\n        <option key={cur} value={cur}>\n          {t('locale', {locale: cur})}\n        </option>\n      ))}\n    </LocaleSwitcherSelect>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic State Messages on the Server Side with Translations\nDESCRIPTION: This snippet demonstrates how to display translated messages that depend on dynamic server-side state, such as current page or total pages, by passing the state as parameters to the translation function. This is useful for paginations or similar components.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Pagination({curPage, totalPages}) {\n  const t = useTranslations('Pagination');\n  return <p>{t('info', {curPage, totalPages})}</p>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing next-intl Navigation Helpers (TypeScript)\nDESCRIPTION: Demonstrates how to create locale-aware navigation functions (`Link`, `redirect`, `usePathname`, `useRouter`, `getPathname`) using `createNavigation` from `next-intl/navigation`. Requires passing a `routing` configuration object, typically defined elsewhere. This setup is usually placed in a central module like `src/i18n/navigation.ts` for easy access throughout the application.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n  createNavigation(routing);\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Metadata Using next-intl in Next.js (TypeScript)\nDESCRIPTION: Defines an asynchronous function generateMetadata that receives Next.js route parameters including locale, retrieves translations for the Metadata namespace using next-intl's getTranslations, and returns an object with localized metadata properties such as the page title. This method supports static metadata generation consistent with the current locale, facilitating internationalized SEO and page metadata management in Next.js applications.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_15\n\nLANGUAGE: TSX\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\n\nexport async function generateMetadata({params}) {\n  const {locale} = await params;\n  const t = await getTranslations({locale, namespace: 'Metadata'});\n\n  return {\n    title: t('title')\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Component-specific Messages with NextIntlClientProvider\nDESCRIPTION: This example wraps a component with `NextIntlClientProvider` and supplies specific messages, enabling localized content within client components that cannot be directly static. It uses `useMessages` to gather available messages and `pick` to select relevant ones.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport pick from 'lodash/pick';\nimport {NextIntlClientProvider, useMessages} from 'next-intl';\nimport ClientCounter from './ClientCounter';\n\nexport default function Counter() {\n  // Receive messages provided in `i18n/request.ts` …\n  const messages = useMessages();\n\n  return (\n    <NextIntlClientProvider\n      messages={\n        // … and provide the relevant messages\n        pick(messages, 'ClientCounter')\n      }\n    >\n      <ClientCounter />\n    </NextIntlClientProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the next-intl Link Component (TypeScript)\nDESCRIPTION: Examples of using the internationalized `Link` component imported from the custom navigation module (e.g., `@/i18n/navigation`). It automatically prepends the current locale to the path (e.g., `/en/about`), supports adding query parameters via an object `href`, and allows overriding the target `locale` to enable language switching.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Link} from '@/i18n/navigation';\n\n// When the user is on `/en`, the link will point to `/en/about`\n<Link href=\"/about\">About</Link>\n\n// Search params can be added via `query`\n<Link href={{pathname: \"/users\", query: {sortBy: 'name'}}}>Users</Link>\n\n// You can override the `locale` to switch to another language\n// (this will set the `hreflang` attribute on the anchor tag)\n<Link href=\"/\" locale=\"de\">Switch to German</Link>\n```\n\n----------------------------------------\n\nTITLE: Localized Shared Component with useTranslations in UserDetails (TypeScript/TSX)\nDESCRIPTION: This code defines a shared component named UserDetails that uses the useTranslations hook from next-intl to present a localized user profile section. The component can be executed as either a Server or Client Component, depending on the import context. Dependencies: next-intl and a parent component that provides user props and translations. Parameters: user (must include numFollowers field). Output: a <section> element with a localized title and followers count. Limitation: interactive features are disabled unless imported into a Client Component.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nexport default function UserDetails({user}) {\n  const t = useTranslations('UserProfile');\n\n  // This component will execute as a Server Component by default.\n  // However, if it is imported from a Client Component, it will\n  // execute as a Client Component.\n  return (\n    <section>\n      <h2>{t('title')}</h2>\n      <p>{t('followers', {count: user.numFollowers})}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Open Graph Images with Translations\nDESCRIPTION: This snippet demonstrates how to use `next-intl` to internationalize Open Graph images generated in Next.js. It uses the `ImageResponse` component from `next/og` and fetches translations based on the current locale, which is passed via the `params` object, for dynamic image content. This requires the 'next-intl/server' dependency.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/actions-metadata-route-handlers.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ImageResponse} from 'next/og';\nimport {getTranslations} from 'next-intl/server';\n\nexport default async function OpenGraphImage({params}) {\n  const {locale} = await params;\n  const t = await getTranslations({locale, namespace: 'OpenGraphImage'});\n  return new ImageResponse(<div style={{fontSize: 128}}>{t('title')}</div>);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Locale Programmatically Using usePathname and useRouter (TypeScript/TSX)\nDESCRIPTION: Illustrates how to change the locale of the current page programmatically by combining usePathname and useRouter from next-intl. Handles both simple and advanced cases where dynamic params must be forwarded depending on pathnames setup. Dependencies include next-intl for useRouter and usePathname, next/navigation for useParams, and active route context. Key parameters are the current pathname, params, and the target locale; outputs localized navigation to the same logical page. TypeScript type validation helps avoid runtime errors.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n'use client';\n\nimport {usePathname, useRouter} from '@/i18n/navigation';\nimport {useParams} from 'next/navigation';\n\nconst pathname = usePathname();\nconst router = useRouter();\n\n// Without `pathnames`: Pass the current `pathname`\nrouter.replace(pathname, {locale: 'de'});\n\n// With `pathnames`: Pass `params` as well\nconst params = useParams();\nrouter.replace(\n  // @ts-expect-error -- TypeScript will validate that only known `params`\n  // are used in combination with a given `pathname`. Since the two will\n  // always match for the current route, we can skip runtime checks.\n  {pathname, params},\n  {locale: 'de'}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Environment with next-intl getRequestConfig (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to create a request-specific configuration file (src/i18n/request.ts) for next-intl in a Next.js app. The getRequestConfig function is called with an asynchronous callback returning an object with now (Date), timeZone (string), and locale (string). These properties are then shared across the app to ensure consistent internationalization and date/time formatting across server and client. Required dependency: next-intl version 4.0 or later. The setup is customizable per request to support user-specific localization. Place this code at src/i18n/request.ts for use with next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server';\n\nexport default getRequestConfig(async () => ({\n  // (opt-in to use a shared value across the app)\n  now: new Date(),\n\n  // (defaults to the server's time zone)\n  timeZone: 'Europe/Berlin',\n\n  // (requires an explicit preference)\n  locale: 'en'\n\n  // ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Fetching translations asynchronously in server component (TypeScript/React)\nDESCRIPTION: This async server-side React component uses getTranslations to load translation messages for 'HomePage' before rendering. It ensures that localized content is available at render time for correct SSR output.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/without-i18n-routing.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\n\nexport default async function HomePage() {\n  const t = await getTranslations('HomePage');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRouter for Localized Navigation in Next.js (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to use the localized useRouter hook from next-intl to perform programmatic navigation within a Next.js app. This snippet covers pushing new routes, manipulating query parameters, and overriding the locale for navigation. Requires the @/i18n/navigation module and assumes usage within a Next.js app with next-intl configured. Key parameters include pathnames, query objects, and the locale option for language switching. Output is localized navigation to the specified route; limitations depend on whether pathnames are configured to use internal templates.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n'use client';\n\nimport {useRouter} from '@/i18n/navigation';\n\nconst router = useRouter();\n\n// When the user is on `/en`, the router will navigate to `/en/about`\nrouter.push('/about');\n\n// Search params can be added via `query`\nrouter.push({\n  pathname: '/users',\n  query: {sortBy: 'name'}\n});\n\n// You can override the `locale` to switch to another language\nrouter.replace('/about', {locale: 'de'});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic next-intl Middleware\nDESCRIPTION: Example of creating a basic middleware configuration for next-intl that handles internationalization routing. The configuration includes a matcher pattern to exclude API routes and static files.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport createMiddleware from 'next-intl/middleware';\nimport {routing} from './i18n/routing';\n\nexport default createMiddleware(routing);\n\nexport const config = {\n  // Match all pathnames except for\n  // - … if they start with `/api`, `/trpc`, `/_next` or `/_vercel`\n  // - … the ones containing a dot (e.g. `favicon.ico`)\n  matcher: '/((?!api|trpc|_next|_vercel|.*\\\\..*).*)'  \n};\n```\n\n----------------------------------------\n\nTITLE: Determining Locale Without i18n Routing in getRequestConfig TSX\nDESCRIPTION: Illustrates how to set the locale in the `getRequestConfig` function when `next-intl`'s i18n routing is *not* used. In this scenario, the locale must be obtained from an alternative source, such as a static value, a cookie, user settings, or headers, as `requestLocale` is not provided by the router.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default getRequestConfig(async () => {\n  // Provide a static locale, fetch a user setting,\n  // read from `cookies()`, `headers()`, etc.\n  const locale = 'en';\n\n  return {\n    locale\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Locale in Layout\nDESCRIPTION: This snippet demonstrates how to validate the incoming locale parameter in the root layout and call the `notFound` function from `next/navigation` if the locale is invalid. It uses the `hasLocale` function from `next-intl` to check for locale validity.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {hasLocale} from 'next-intl';\nimport {notFound} from 'next/navigation';\nimport {routing} from '@/i18n/routing';\n\nexport default function LocaleLayout({children, params}) {\n  const {locale} = await params;\n  if (!hasLocale(routing.locales, locale)) {\n    notFound();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Localized Messages in a SignUp React Component - TypeScript/React\nDESCRIPTION: This React component example demonstrates fetching and rendering translations from a nested namespace ('auth.SignUp') using next-intl's useTranslations hook. Key messages such as 'title', nested form placeholder, and submit button label are accessed using dot notation. Prerequisites: Corresponding nested JSON message structure and inclusion of next-intl. Inputs: Locale context. Output: Localized strings in UI elements.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nfunction SignUp() {\n  // Provide the lowest common denominator that contains\n  // all messages this component needs to consume.\n  const t = useTranslations('auth.SignUp');\n\n  return (\n    <>\n      <h1>{t('title')}</h1>\n      <form>\n        <input\n          // The remaining hierarchy can be resolved by\n          // using `.` to access nested messages.\n          placeholder={t('form.placeholder')}\n        />\n        <button type=\"submit\">{t('form.submit')}</button>\n      </form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Root Layout for Static Export Root Page (Next.js)\nDESCRIPTION: Presents a minimal `app/layout.tsx` file required by the Next.js App Router when using static export. Even if the corresponding `app/page.tsx` only performs a redirect, Next.js still requires a root layout component. This example simply passes through its `children` prop, fulfilling the requirement with minimal code.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nexport default function RootLayout({children}) {\n  return children;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Formats via NextIntlClientProvider in next-intl (tsx)\nDESCRIPTION: Shows how to provide global formats for `dateTime`, `number`, and `list` to client components using the `formats` prop of the `NextIntlClientProvider` component from `next-intl`. This approach makes the defined formats available within the wrapped client-side component tree.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<NextIntlClientProvider\n  formats={{\n    dateTime: {\n      short: {\n        day: 'numeric',\n        month: 'short',\n        year: 'numeric'\n      }\n    },\n    number: {\n      precise: {\n        maximumFractionDigits: 5\n      }\n    },\n    list: {\n      enumeration: {\n        style: 'long',\n        type: 'conjunction'\n      }\n    }\n  }}\n>\n  ...\n</NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Not Found Page\nDESCRIPTION: This snippet shows how to create a localized 404 page by adding a `not-found.tsx` file within the `[locale]` folder, using `useTranslations` hook from `next-intl` to display translated content.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nexport default function NotFoundPage() {\n  const t = useTranslations('NotFoundPage');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Component Layout for RTL (rtl-detect, TSX)\nDESCRIPTION: Illustrates adapting component layout and elements based on language direction. It uses `getLangDir` from `rtl-detect` to determine direction (LTR or RTL) and conditionally renders different icons (`ArrowRight`/`ArrowLeft`) or adjusts CSS properties (`marginInlineStart`) using logical properties. Requires `rtl-detect` and `next-intl` (for `useTranslations`, `useLocale`).\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations} from 'next-intl';\nimport {getLangDir} from 'rtl-detect';\n\nexport default function Breadcrumbs({children, params}) {\n  const t = useTranslations('Breadcrumbs');\n  const locale = useLocale();\n  const direction = getLangDir(locale);\n\n  return (\n    <div style={{display: 'flex'}}>\n      <p>{t('home')}</p>\n      <div style={{marginInlineStart: 10}}>\n        {direction === 'ltr' ? <ArrowRight /> : <ArrowLeft />}\n      </div>\n      <p style={{marginInlineStart: 10}}>{t('about')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Locale and Using Translations in Next.js Page (TypeScript)\nDESCRIPTION: Implements a React Server Component page that extracts the locale from props asynchronously, sets the locale using next-intl's setRequestLocale, and accesses translation functions with useTranslations. This ensures that translation hooks operate with the correct locale context, enabling static rendering and internationalization support in Next.js pages. Requires calling setRequestLocale before using any next-intl hooks to avoid runtime inconsistencies.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\nimport {use} from 'react';\nimport {setRequestLocale} from 'next-intl/server';\nimport {useTranslations} from 'next-intl';\n\nexport default function IndexPage({params}) {\n  const {locale} = use(params);\n\n  // Enable static rendering\n  setRequestLocale(locale);\n\n  // Once the request locale is set, you\n  // can call hooks from `next-intl`\n  const t = useTranslations('IndexPage');\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Pathnames with next-intl/routing (TSX)\nDESCRIPTION: This code snippet demonstrates how to define localized pathnames using the `defineRouting` function from the `next-intl/routing` library. It configures the `pathnames` object to map internal paths to external, locale-specific paths. It showcases handling of static paths, dynamic parameters, and catch-all segments.  Requires `next-intl/routing` dependency.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: ['en-US', 'en-UK', 'de'],\n  defaultLocale: 'en-US',\n\n  // The `pathnames` object holds pairs of internal and\n  // external paths. Based on the locale, the external\n  // paths are rewritten to the shared, internal ones.\n  pathnames: {\n    // If all locales use the same pathname, a single\n    // external path can be used for all locales\n    '/': '/',\n    '/blog': '/blog',\n\n    // If some locales use different paths, you can\n    // specify the relevant external pathnames\n    '/about': {\n      de: '/ueber-uns'\n    },\n\n    // Dynamic params are supported via square brackets\n    '/news/[articleSlug]': {\n      de: '/neuigkeiten/[articleSlug]'\n    },\n\n    // Static pathnames that overlap with dynamic segments\n    // will be prioritized over the dynamic segment\n    '/news/just-in': {\n      de: '/neuigkeiten/aktuell'\n    },\n\n    // Also (optional) catch-all segments are supported\n    '/categories/[...slug]': {\n      de: '/kategorien/[...slug]'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone in i18n/request.ts\nDESCRIPTION: This snippet demonstrates how to set the time zone within the server configuration using `getRequestConfig`. This time zone affects the formatting of dates and times within the application. The time zone can either be statically defined or derived dynamically from the user profile or other request information.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server;\n\nexport default getRequestConfig(async () => {\n  return {\n    // The time zone can either be statically defined, read from the\n    // user profile if you store such a setting, or based on dynamic\n    // request information like the locale or a cookie.\n    timeZone: 'Europe/Vienna'\n\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Pathname Without Locale Prefix Using usePathname (TypeScript/TSX)\nDESCRIPTION: Provides an example of using usePathname from next-intl to get the current route's pathname without a locale prefix. Useful for working with localized routes and when generating canonical paths or links. Only requires next-intl imports; outputs the route template or plain path string reflecting the user's current location in a locale-agnostic way. When pathnames is enabled, generated path includes dynamic segments instead of resolved params.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\n'use client';\n\nimport {usePathname} from '@/i18n/navigation';\n\n// When the user is on `/en`, this will be `/`\nconst pathname = usePathname();\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Prefix as Needed in Next.js Routing\nDESCRIPTION: This snippet sets up routing so that the default locale has no prefix in URLs (e.g., /about), while other locales include their prefix (e.g., /de/about). This helps create cleaner URLs for the primary language while maintaining locale-specific paths.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ... other settings\n  localePrefix: 'as-needed'\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Internal Path Templates with usePathname and Dynamic Routes (TypeScript/TSX)\nDESCRIPTION: Demonstrates how usePathname returns internal path templates when the pathnames setting is enabled in next-intl. Shows the difference between literal pathnames and template forms for dynamic routes (with parameters). Useful for accurately identifying the route pattern being matched, especially for routing logic or generating canonical URLs. Requires next-intl configured with pathnames option.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\n// When the user is on `/de/ueber-uns`, this will be `/about`\nconst pathname = usePathname();\n\n// When the user is on `/de/neuigkeiten/produktneuheit`,\n// this will be `/news/[articleSlug]`\nconst pathname = usePathname();\n```\n\n----------------------------------------\n\nTITLE: Strict Typing for next-intl Messages Keys Using TypeScript and JSON Schema\nDESCRIPTION: This snippet demonstrates how to strictly type translation message keys by augmenting the `Messages` type in the `AppConfig` interface based on a JSON messages file imported as a module. This allows the useTranslations hook to provide type-safe validation of message namespaces and keys, preventing referencing invalid keys at compile time. The JSON snippet exemplifies the structure of messages expected. This requires importing the messages JSON into a TypeScript declaration file (e.g., global.ts).\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"About\": {\n    \"title\": \"Hello\"\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport messages from './messages/en.json';\n\ndeclare module 'next-intl' {\n  interface AppConfig {\n    // ...\n    Messages: typeof messages;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Params in Localized Redirects with redirect (TypeScript/TSX)\nDESCRIPTION: Explains how to use redirect from next-intl for routes with dynamic parameters. Accepts either a fully resolved string path or a pathname template with params, matching the behavior set by the pathnames option. Useful for both simple and parameterized redirects in i18n contexts. Requires next-intl and Next.js, and expects correct locale and param configuration.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_15\n\nLANGUAGE: TSX\nCODE:\n```\n// 1. A final string (when not using `pathnames`)\nredirect({href: '/users/12', locale: 'en'});\n\n// 2. An object (when using `pathnames`)\nredirect({\n  href: {\n    pathname: '/users/[userId]',\n    params: {userId: '5'}\n  },\n  locale: 'en'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NextIntlClientProvider in _app.tsx for Multiple Languages\nDESCRIPTION: Sets up the Next-intl provider in _app.tsx for multilingual support. Uses the router's locale to determine the current language, configures the time zone, and passes messages from page props to make them available throughout the application.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/pages-router.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {NextIntlClientProvider} from 'next-intl';\nimport {useRouter} from 'next/router';\n\nexport default function App({Component, pageProps}) {\n  const router = useRouter();\n\n  return (\n    <NextIntlClientProvider\n      locale={router.locale}\n      timeZone=\"Europe/Vienna\"\n      messages={pageProps.messages}\n    >\n      <Component {...pageProps} />\n    </NextIntlClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Rendering Array of Messages (next-intl, TSX)\nDESCRIPTION: Shows how to dynamically render a list of messages by retrieving all messages for a namespace using the `useMessages` hook and extracting keys from the resulting object. It then uses `useTranslations` to get the translated values. Useful when the number of items varies by locale. Requires `next-intl`.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations, useMessages} from 'next-intl';\n\nfunction CompanyStats() {\n  const t = useTranslations('CompanyStats');\n\n  const messages = useMessages();\n  const keys = Object.keys(messages.CompanyStats);\n\n  return (\n    <ul>\n      {keys.map((key) => (\n        <li key={key}>\n          <h2>{t(`${key}.title`)}</h2>\n          <p>{t(`${key}.value`)}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Pathnames with getPathname (TypeScript/TSX)\nDESCRIPTION: Shows how to use getPathname from next-intl to generate a locale-prefixed pathname based on locale and a given href. Can handle both simple routes and those with additional query parameters. Useful for constructing canonical links or client-side navigation targets, especially for SEO or alternate link generation. Requires next-intl configuration; inputs are locale and href (string or object). Output is the computed pathname string.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_18\n\nLANGUAGE: TSX\nCODE:\n```\nimport {getPathname} from '@/i18n/navigation';\n\n// Will return `/en/about`\nconst pathname = getPathname({\n  locale: 'en',\n  href: '/about'\n});\n\n// Search params can be added via `query`\nconst pathname = getPathname({\n  locale: 'en',\n  href: {\n    pathname: '/users',\n    query: {sortBy: 'name'}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Translations Server-Side with getTranslations (ts)\nDESCRIPTION: Illustrates how to use the `getTranslations` function from `next-intl/server`, which is designed for server-side contexts like Next.js API routes or Route Handlers. Unlike `useTranslations`, this is an async function that takes the locale as a parameter and returns a translation function (`t`) usable outside of React components, enabling translation capabilities in server-rendered or API responses.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/translations-outside-of-react-components.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\n\n// The `locale` is received from Next.js via `params`\nconst locale = params.locale;\n\n// This creates the same function that is returned by `useTranslations`.\nconst t = await getTranslations({locale});\n\n// Result: \"Hello world!\"\nt('hello', {name: 'world'});\n```\n\n----------------------------------------\n\nTITLE: Performing Localized Redirects Using redirect from next-intl (TypeScript/TSX)\nDESCRIPTION: Shows how to perform locale-aware redirects using the redirect function from next-intl, wrapping Next.js's native redirect functionality. Supports query parameters and requires explicit locale declaration. May require next-intl and Next.js configuration for proper routing. Accepts an object with href (string or object), locale, and optional query; output is an immediate redirect to the localized destination.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\nimport {redirect} from '@/i18n/navigation';\n\n// Redirects to `/en/login`\nredirect({href: '/login', locale: 'en'});\n\n// Search params can be added via `query`\nredirect({href: '/users', query: {sortBy: 'name'}, locale: 'en'});\n```\n\n----------------------------------------\n\nTITLE: Passing Translated Labels as Props from Server to Client Components in Next.js\nDESCRIPTION: This code demonstrates how to use the `useTranslations` hook inside a Server Component and pass the translated content as props to a Client Component, enabling interactive features like `useState` while keeping translation logic on the server side. Dependencies include next-intl and React.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useTranslations} from 'next-intl';\nimport Expandable from './Expandable'; // A Client Component\nimport FAQContent from './FAQContent';\n\nexport default function FAQEntry() {\n  // Call `useTranslations` in a Server Component ...\n  const t = useTranslations('FAQEntry');\n\n  // ... and pass translated content to a Client Component\n  return (\n    <Expandable title={t('title')}>\n      <FAQContent content={t('description')} />\n    </Expandable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Translations in an Async Server Component with getTranslations (TypeScript/TSX)\nDESCRIPTION: This example demonstrates how to use the awaitable API getTranslations from next-intl/server within an async Server Component. The ProfilePage component fetches user data asynchronously and retrieves translations scoped to 'ProfilePage'. Dependencies include next-intl/server, a working fetchUser implementation, and appropriate translation message configuration. Input: none (fetchUser handles data retrieval). Output: a composed page layout with a localized title and user details. Limitation: can only use awaitable APIs, not React hooks, within async components.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\n\nexport default async function ProfilePage() {\n  const user = await fetchUser();\n  const t = await getTranslations('ProfilePage');\n\n  return (\n    <PageLayout title={t('title', {username: user.name})}>\n      <UserDetails user={user} />\n    </PageLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Static Message with t Function - JavaScript\nDESCRIPTION: This example demonstrates retrieving a static localized message via the t function (from useTranslations) by referencing the 'message' key. It returns a plain string from the locale file (e.g., 'Hello world!'). Requires a properly defined JSON message and useTranslations setup.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nt('message'); // \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Active Navigation Link Component with next-intl (TypeScript)\nDESCRIPTION: Defines a reusable `NavigationLink` client component that wraps the `next-intl` `Link`. It utilizes the `useSelectedLayoutSegment` hook from `next/navigation` to determine if the link's `href` matches the current active path segment. Based on the active state, it applies conditional styling (bold font weight) and sets the `aria-current='page'` attribute for accessibility.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport {useSelectedLayoutSegment} from 'next/navigation';\nimport {ComponentProps} from 'react';\nimport {Link} from '@/i18n/navigation';\n\nexport default function NavigationLink({\n  href,\n  ...rest\n}: ComponentProps<typeof Link>) {\n  const selectedLayoutSegment = useSelectedLayoutSegment();\n  const pathname = selectedLayoutSegment ? `/${selectedLayoutSegment}` : '/';\n  const isActive = pathname === href;\n\n  return (\n    <Link\n      aria-current={isActive ? 'page' : undefined}\n      href={href}\n      style={{fontWeight: isActive ? 'bold' : 'normal'}}\n      {...rest}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Formats via getRequestConfig in next-intl (tsx)\nDESCRIPTION: Demonstrates defining global formats for `dateTime`, `number`, and `list` within the `getRequestConfig` function located in `i18n/request.ts`. This server-side configuration provides consistent formatting rules across the application using `next-intl`.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server';\n\nexport default getRequestConfig(async () => {\n  return {\n    formats: {\n      dateTime: {\n        short: {\n          day: 'numeric',\n          month: 'short',\n          year: 'numeric'\n        }\n      },\n      number: {\n        precise: {\n          maximumFractionDigits: 5\n        }\n      },\n      list: {\n        enumeration: {\n          style: 'long',\n          type: 'conjunction'\n        }\n      }\n    }\n\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Augmenting next-intl AppConfig Interface with Locale, Messages, and Formats in TypeScript\nDESCRIPTION: This snippet extends the `AppConfig` interface of the `next-intl` module to define three generic types: `Locale`, `Messages`, and `Formats`. It imports locale definitions, message JSON schemas, and format configurations to ensure proper typing throughout the app. This helps provide enhanced autocompletion and type safety for all internationalization operations in a Next.js environment. The snippet must be placed in a TypeScript file (e.g., global.ts) and requires importing the related locale, format, and message modules used in the project.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {routing} from '@/i18n/routing';\nimport {formats} from '@/i18n/request';\nimport messages from './messages/en.json';\n\ndeclare module 'next-intl' {\n  interface AppConfig {\n    Locale: (typeof routing.locales)[number];\n    Messages: typeof messages;\n    Formats: typeof formats;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Namespaces in next-intl JSON Files - JSON\nDESCRIPTION: This JSON snippet demonstrates how to organize localized messages using namespaces—here, grouping a \"title\" label under an \"About\" component namespace. It is intended for inclusion in locale-specific message files (e.g., en.json) consumed by next-intl. The structure enables consistent message resolution in React components using hooks like useTranslations. Dependencies: Must be loaded and used with next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"About\": {\n    \"title\": \"About us\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring next-intl plugin in next.config.ts (TypeScript)\nDESCRIPTION: This snippet shows how to integrate the next-intl plugin into Next.js's configuration file in TypeScript to enable server-side locale and message handling by wrapping the base configuration with the plugin.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/without-i18n-routing.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {NextConfig} from 'next';\nimport createNextIntlPlugin from 'next-intl/plugin';\n\nconst nextConfig: NextConfig = {};\n\nconst withNextIntl = createNextIntlPlugin();\nexport default withNextIntl(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Using Translations with Referenced Formats in next-intl (tsx)\nDESCRIPTION: Shows a React component using the `useTranslations` hook from `next-intl`. It renders translated messages ('ordered', 'latitude') which internally reference global formats by passing the required data (like `orderDate` or `latitude`) as parameters to the `t` function.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nfunction Component() {\n  const t = useTranslations();\n\n  t('ordered', {orderDate: new Date('2020-11-20T10:36:01.516Z')});\n  t('latitude', {latitude: 47.414329182});\n}\n```\n\n----------------------------------------\n\nTITLE: Combine Clerk and next-intl Middleware in Next.js\nDESCRIPTION: Demonstrates how to combine Clerk's middleware with `next-intl`'s middleware. Clerk's middleware runs first, handling protected routes via `auth.protect()`. If the route is not protected or after authentication, the request is passed to the `next-intl` middleware handler for internationalization routing. The `config.matcher` specifies which routes the middleware applies to.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport {clerkMiddleware, createRouteMatcher} from '@clerk/nextjs/server';\nimport createMiddleware from 'next-intl/middleware';\nimport {routing} from './i18n/routing';\n\nconst handleI18nRouting = createMiddleware(routing);\n\nconst isProtectedRoute = createRouteMatcher(['/:locale/dashboard(.*)']);\n\nexport default clerkMiddleware(async (auth, req) => {\n  if (isProtectedRoute(req)) await auth.protect();\n\n  return handleI18nRouting(req);\n});\n\nexport const config = {\n  // Match only internationalized pathnames\n  matcher: ['/', '/(de|en)/:path*']\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Routing Configuration with defineRouting in TypeScript\nDESCRIPTION: This snippet shows how to create a shared routing configuration for Next.js internationalization using the defineRouting function from next-intl. It specifies supported locales and the default locale, enabling consistent locale handling between middleware and navigation APIs.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // A list of all locales that are supported\n  locales: ['en', 'de'],\n\n  // Used when no locale matches\n  defaultLocale: 'en'\n});\n```\n\n----------------------------------------\n\nTITLE: Catch-All Page Component with next-intl (TSX)\nDESCRIPTION: This code snippet demonstrates a catch-all page component in Next.js that integrates with an external CMS to fetch content based on the locale and slug. It showcases how to handle not found scenarios using `notFound` and how to access locale and slug parameters. Requires `next` and a custom `fetchContent` function.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {notFound} from 'next';\nimport {Locale} from 'next-intl';\nimport {fetchContent} from './cms';\n\ntype Props = {\n  params: Promise<{\n    locale: Locale;\n    slug: Array<string>;\n  }>;\n};\n\nexport default async function CatchAllPage({params}: Props) {\n  const {locale, slug} = await params;\n  const content = await fetchContent(locale, slug);\n  if (!content) notFound();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Centralized Type-Safe Routing with next-intl in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `defineRouting` function from `next-intl/routing` to centrally configure multilingual routing in a type-safe manner. It sets locales, default locale, locale-specific URL prefixes, and localized pathnames. This configuration can be imported and reused across middleware and navigation APIs to ensure consistency and reduce duplication. Dependencies include the next-intl package and a TypeScript environment. Input parameters are locale arrays, default locale string, prefix mode, prefix mappings, and localized paths. The output is a configured routing object usable throughout the app without manual syncing. This approach simplifies managing multi-locale routes with named paths and locale prefixes.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: ['en-US', 'en-GB'],\n  defaultLocale: 'en-US',\n  localePrefix: {\n    mode: 'always',\n    prefixes: {\n      'en-US': '/us',\n      'en-GB': '/uk'\n    }\n  },\n  pathnames: {\n    '/': '/',\n    '/organization': {\n      'en-US': '/organization',\n      'en-GB': '/organisation'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Async Handling of requestLocale in getRequestConfig for Next.js 15 Compatibility in TypeScript\nDESCRIPTION: This TypeScript snippet shows the migration from synchronous `locale` parameter handling towards asynchronous `requestLocale` in the `getRequestConfig` function, preparing for Next.js 15 async request APIs. The snippet demonstrates awaiting `requestLocale`, validating the locale value against allowed locales, handling undefined locales by falling back to the default locale, and returning the determined locale. It requires integration with the centralized routing config and expects `requestLocale` to be a promise resolving to the locale string or undefined. This pattern ensures robust locale handling and graceful fallback behavior during edge cases like unknown locales or global pages without specific locale segments.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ import {routing} from './i18n/routing';\n\nexport default getRequestConfig(async ({\n-  locale\n+  requestLocale\n}) => {\n+  // This typically corresponds to the `[locale]` segment\n+  let locale = await requestLocale;\n\n-  // Validate that the incoming `locale` parameter is valid\n-  if (!routing.locales.includes(locale as any)) notFound();\n+  // Ensure that the incoming locale is valid\n+  if (!locale || !routing.locales.includes(locale as any)) {\n+    locale = routing.defaultLocale;\n+  }\n\n  return {\n+    locale,\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Message with Dynamic Value Interpolation - JavaScript\nDESCRIPTION: This snippet demonstrates interpolating a dynamic value ('Jane') into a message via t('message', {name: 'Jane'}), producing a personalized string at runtime. Requires an ICU-formatted message in the locale file and useTranslations from next-intl. Inputs: Dynamic value(s) for placeholders.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nt('message', {name: 'Jane'}); // \"Hello Jane!\"\n```\n\n----------------------------------------\n\nTITLE: BlogPostPublishedDate Component Formatting Date\nDESCRIPTION: Shows a React component `BlogPostPublishedDate` that formats the published date. It formats the `published` date using the 'MMM d, yyyy' format. The component now does not use `now`, and uses only the `published` prop.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {format} from 'date-fns';\n\ntype Props = {\n  published: Date;\n};\n\nexport default function BlogPostPublishedDate({published}: Props) {\n  // `now` is no longer needed? 🤔\n  return <p>{format(published, 'MMM d, yyyy')}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unified Navigation APIs with createNavigation in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates usage of the new `createNavigation` function from `next-intl/navigation` combined with centralized routing to generate unified navigation helpers such as `Link`, `redirect`, `usePathname`, and `useRouter`. It showcases importing both `createNavigation` and `defineRouting`, defining routing centrally, then creating and destructuring navigation helpers in one call. This new API replaces older navigation helpers with a more streamlined and Next.js 15 compatible interface. It requires `next-intl` routing and navigation modules and aims to simplify navigation logic and locale handling in React/Next.js applications.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createNavigation} from 'next-intl/navigation';\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting(/* ... */);\n\nexport const {Link, redirect, usePathname, useRouter} =\n  createNavigation(routing);\n```\n\n----------------------------------------\n\nTITLE: Augmenting NextIntl Types (TSX)\nDESCRIPTION: This snippet shows how to register augmented types for Messages and Formats within the next-intl module declaration. It centralizes type registration under a single AppConfig interface, scoped to next-intl, improving type safety for internationalization content.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// global.ts\n\nimport {formats} from '@/i18n/request';\nimport en from './messages/en.json';\n\ndeclare module 'next-intl' {\n  interface AppConfig {\n    Messages: typeof en;\n    Formats: typeof formats;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Message with Dynamic Value Interpolation - JSON\nDESCRIPTION: The JSON snippet shows a message template with a named variable placeholder ('name'), enabling value interpolation at runtime. Used by next-intl to generate personalized or dynamic messages. The curly braces syntax follows ICU message format conventions. Dependency: next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"message\": \"Hello {name}!\"\n```\n\n----------------------------------------\n\nTITLE: Formatting relative times with next-intl's useFormatter hook in React (JavaScript)\nDESCRIPTION: Illustrates how to format relative times such as \"2 hours ago\" between two dates using the useFormatter hook. Demonstrates calculating relative times based on a reference point in time.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n  const dateTime = new Date('2020-11-20T08:30:00.000Z');\n\n  // A reference point in time\n  const now = new Date('2020-11-20T10:36:00.000Z');\n\n  // This will render \"2 hours ago\"\n  format.relativeTime(dateTime, now);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Handling via getRequestConfig in next-intl (tsx)\nDESCRIPTION: Demonstrates configuring custom error handling behavior for `next-intl` on the server side using `onError` and `getMessageFallback` within `getRequestConfig` in `i18n/request.ts`. This allows distinguishing between expected errors (like missing messages) and bugs, and providing custom fallback messages based on the error type.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server';\nimport {IntlErrorCode} from 'next-intl';\n\nexport default getRequestConfig(async () => {\n  // Assuming reportToErrorTracking is defined elsewhere\n  const reportToErrorTracking = (error: any) => console.error('Error tracking:', error);\n\n  return {\n    onError(error) {\n      if (error.code === IntlErrorCode.MISSING_MESSAGE) {\n        // Missing translations are expected and should only log an error\n        console.error(error);\n      } else {\n        // Other errors indicate a bug in the app and should be reported\n        reportToErrorTracking(error);\n      }\n    },\n\n    getMessageFallback({namespace, key, error}) {\n      const path = [namespace, key].filter((part) => part != null).join('.');\n\n      if (error.code === IntlErrorCode.MISSING_MESSAGE) {\n        return path + ' is not yet translated';\n      } else {\n        return 'Dear developer, please fix this message: ' + path;\n      }\n    }\n\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Project File Structure Overview\nDESCRIPTION: Overview of the file structure required for setting up next-intl with the App Router.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n├── messages\n│   ├── en.json\n│   └── ...\n├── next.config.ts\n└── src\n    ├── i18n\n    │   ├── routing.ts\n    │   ├── navigation.ts\n    │   └── request.ts\n    ├── middleware.ts\n    └── app\n        └── [locale]\n            ├── layout.tsx\n            └── page.tsx\n```\n\n----------------------------------------\n\nTITLE: Structuring Nested Messages for Complex Components - JSON\nDESCRIPTION: This JSON snippet illustrates how to organize nested message objects, grouping them under hierarchical namespaces for features like authentication. Nested objects (e.g., auth.SignUp) contain fields for UI labels and placeholders, which align with the structure used in their corresponding React components. Requirements: Used with next-intl and referenced by components through the appropriate namespace path.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"SignUp\": {\n      \"title\": \"Sign up\",\n      \"form\": {\n        \"placeholder\": \"Please enter your name\",\n        \"submit\": \"Submit\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Messages File in JSON\nDESCRIPTION: Example of a JSON file containing translation messages for English locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"HomePage\": {\n    \"title\": \"Hello world!\",\n    \"about\": \"Go to the about page\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Locale Prefixes in Redirects Using redirect and forcePrefix (TypeScript/TSX)\nDESCRIPTION: Shows how to enforce a locale prefix in the URL when redirecting, even if the current localePrefix setting would not add it. This is important for forcing a locale change including updating cookies, especially when localePrefix is not set to 'always'. Uses redirect from next-intl with the forcePrefix flag. Ensures state consistency during locale-switching navigations.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_16\n\nLANGUAGE: TSX\nCODE:\n```\n// Will initially redirect to `/en/about` to update the locale\n// cookie, regardless of your `localePrefix` setting\nredirect({href: '/about', locale: 'en', forcePrefix: true});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom useLocaleLabel Translation Hook - TypeScript/React\nDESCRIPTION: This custom React hook simplifies retrieving localized labels for different locales using the useTranslations hook and a defined namespace ('useLocaleLabel'). The getLocaleLabel function selects a label based on a provided locale ('en' or 'de'), supporting ICU message syntax with variable substitution. Prerequisites: next-intl package and suitable JSON message definitions. Input: Locale identifier. Output: Localized label string.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function useLocaleLabel() {\n  const t = useTranslations('useLocaleLabel');\n\n  function getLocaleLabel(locale: 'en' | 'de') {\n    return t('label', {locale});\n  }\n\n  return getLocaleLabel;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Demonstrating Type-Safe Message Arguments in next-intl with TypeScript\nDESCRIPTION: This snippet illustrates how to ensure that message arguments passed to translation functions are type-safe. The JSON message example shows a message that requires an argument (`firstName`), and the `useTranslations` hook usage demonstrates an error when missing the required argument and valid usage when providing it. This leverages type augmentation for strict typing of message arguments.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UserProfile\": {\n    \"title\": \"Hello {firstName}\"\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction UserProfile({user}) {\n  const t = useTranslations('UserProfile');\n\n  // ✖️ Missing argument\n  t('title');\n\n  // ✅ Argument is provided\n  t('title', {firstName: user.firstName});\n}\n```\n\n----------------------------------------\n\nTITLE: Updating import to use stable setRequestLocale API in next-intl (TypeScript)\nDESCRIPTION: This snippet demonstrates updating the import statement from the unstable_setRequestLocale to the now stable setRequestLocale API from the next-intl/server module. It reflects a change in the official recommended approach for setting locale information in server-side rendering scenarios in Next.js apps using next-intl, improving code reliability by adopting the stable API.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {unstable_setRequestLocale} from 'next-intl/server';\n\n// changed to\n\nimport {setRequestLocale} from 'next-intl/server';\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Prefix as Always in Next.js Routing\nDESCRIPTION: This code demonstrates configuring the routing to always prefix pathnames with the locale (e.g., /en/about). It ensures that every route explicitly includes the locale, aiding clarity and predictability in URL structures.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ... other settings\n  localePrefix: 'always'\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: This code imports two React components: BlogPostLink from '@/components/BlogPostLink' and StayUpdated from '@/components/StayUpdated.mdx'. These components are used to display blog post links and a newsletter subscription form, respectively.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport BlogPostLink from '@/components/BlogPostLink';\nimport StayUpdated from '@/components/StayUpdated.mdx';\n```\n\n----------------------------------------\n\nTITLE: Strict Typing of Global Format Configurations for next-intl in TypeScript\nDESCRIPTION: This snippet shows how to define and include global format configurations for dateTime, number, and list formatting to enable strict typing and validation of format string arguments in next-intl. By exporting a `formats` object satisfying the `Formats` interface and augmenting `AppConfig`, users receive autocompletion and compile-time checking preventing unknown formats from being used in calls to `format.dateTime`, `format.number`, and `format.list`.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {Formats} from 'next-intl';\n\nexport const formats = {\n  dateTime: {\n    short: {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    }\n  },\n  number: {\n    precise: {\n      maximumFractionDigits: 5\n    }\n  },\n  list: {\n    enumeration: {\n      style: 'long',\n      type: 'conjunction'\n    }\n  }\n} satisfies Formats;\n\n// ...\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {formats} from '@/i18n/request';\n\ndeclare module 'next-intl' {\n  interface AppConfig {\n    // ...\n    Formats: typeof formats;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `use-intl` Core Functions in JavaScript (TSX)\nDESCRIPTION: Illustrates using the low-level `createTranslator` and `createFormatter` functions from `use-intl/core` in a non-React JavaScript environment. It shows how to instantiate a translator (`t`) and a formatter (`format`) by directly passing configuration like `locale` and `messages`. Examples include basic translation, rich text translation with `t.markup`, and date formatting.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/core-library.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createTranslator, createFormatter} from 'use-intl/core';\n\nconst messages = {\n  basic: 'Hello {name}!',\n  rich: 'Hello <b>{name}</b>!'\n};\n\n// This creates the same function that is returned by `useTranslations`.\n// Since there's no provider, you can pass all the properties you'd\n// usually pass to the provider directly here.\nconst t = createTranslator({locale: 'en', messages});\n\n// Result: \"Hello world!\"\nt('basic', {name: 'world'});\n\n// To generate HTML markup, you can consider using the `markup`\n// function which in contrast to `t.rich` returns a markup string.\nt.markup('rich', {\n  name: 'world',\n  b: (chunks) => `<b>${chunks}</b>`\n});\n\n// Creates the same object that is returned by `useFormatter`.\nconst format = createFormatter({locale: 'en'});\n\n// Result: \"Oct 17, 2022\"\nformat.dateTime(new Date(2022, 9, 17), {dateStyle: 'medium'});\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with next-intl Plugin in JavaScript\nDESCRIPTION: Configuration for Next.js to integrate the next-intl plugin using JavaScript.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst createNextIntlPlugin = require('next-intl/plugin');\n\nconst withNextIntl = createNextIntlPlugin();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withNextIntl(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Based Time Zone Variable in Next.js (TypeScript/TSX)\nDESCRIPTION: This snippet illustrates how to extract the current server time zone in a Next.js Server Component using the Intl.DateTimeFormat API's resolvedOptions. The resulting timeZone string is passed as a prop to a child component responsible for displaying the published date. No third-party dependencies are required beyond built-in JavaScript. The component expects a published date and correctly reflects the server's geographical context for time-sensitive rendering.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nexport default function BlogPostPage() {\n  // ...\n\n  // Use the time zone of the server\n  const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  return <BlogPostPublishedDate timeZone={timeZone} published={published} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Translations in Metadata API\nDESCRIPTION: This snippet demonstrates how to use `next-intl` within the `generateMetadata` function in a Next.js layout. It retrieves translations based on the current locale for internationalizing the page title. The code accesses the locale via the `params` object and uses `getTranslations` to fetch the localized strings.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/actions-metadata-route-handlers.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\n\nexport async function generateMetadata({params}) {\n  const {locale} = await params;\n  const t = await getTranslations({locale, namespace: 'Metadata'});\n\n  return {\n    title: t('title')\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Only i18n with getRequestConfig TSX\nDESCRIPTION: Shows the basic structure of the `i18n/request.ts` file using `getRequestConfig` from `next-intl/server`. This function is executed once per request on the server to provide configuration for Server Components and Server Actions, returning essential properties like `locale` and `messages`.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server';\nimport {routing} from '@/i18n/routing';\n\nexport default getRequestConfig(async ({requestLocale}) => {\n  // ...\n\n  return {\n    locale,\n    messages\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Combine Auth.js and next-intl Middleware in Next.js\nDESCRIPTION: Illustrates how to integrate Auth.js (NextAuth.js) middleware with `next-intl`. It handles public pages by bypassing `withAuth` and directly running `next-intl`'s handler. For protected pages, it uses `withAuth`, calling the `next-intl` handler in the `onSuccess` callback only if the user is authorized (`token != null`). Includes configuration for protected pages and the sign-in page.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport {withAuth} from 'next-auth/middleware';\nimport createMiddleware from 'next-intl/middleware';\nimport {NextRequest} from 'next/server';\nimport {routing} from './i18n/routing';\n\nconst publicPages = ['/', '/login'];\n\nconst handleI18nRouting = createMiddleware(routing);\n\nconst authMiddleware = withAuth(\n  // Note that this callback is only invoked if\n  // the `authorized` callback has returned `true`\n  // and not for pages listed in `pages`.\n  function onSuccess(req) {\n    return handleI18nRouting(req);\n  },\n  {\n    callbacks: {\n      authorized: ({token}) => token != null\n    },\n    pages: {\n      signIn: '/login'\n    }\n  }\n);\n\nexport default function middleware(req: NextRequest) {\n  const publicPathnameRegex = RegExp(\n    `^(/(${locales.join('|')}))?(${publicPages\n      .flatMap((p) => (p === '/' ? ['', '/'] : p))\n      .join('|')})/?$`,\n    'i'\n  );\n  const isPublicPage = publicPathnameRegex.test(req.nextUrl.pathname);\n\n  if (isPublicPage) {\n    return handleI18nRouting(req);\n  } else {\n    return (authMiddleware as any)(req);\n  }\n}\n\nexport const config = {\n  matcher: ['/((?!api|_next|.*\\..*).*)']\n};\n```\n\n----------------------------------------\n\nTITLE: Recommended Translation Formatting During React Render (tsx)\nDESCRIPTION: Shows the preferred method for handling messages requiring dynamic values or language updates. It stores only the necessary data (the retry timestamp `retry`) in component state. The translation function (`t`) is called directly in the component's render logic, formatting the message (`t('timeout', ...)`) using the current data and the `useNow` hook for time updates, ensuring the displayed message is always current and respects the user's locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/translations-outside-of-react-components.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations, useNow} from 'next-intl';\nimport {addMinutes} from 'date-fns';\n\nfunction FeedbackForm({user}) {\n  const t = useTranslations('Form');\n  const [retry, setRetry] = useState();\n  const now = useNow({\n    // Update every minute\n    updateInterval: 1000 * 60\n  });\n\n  function onSubmit() {\n    // ✅ Good implementation: Store data structures in state\n    API.sendFeedback().catch((error) => {\n      if (error.status === 504) {\n        setRetry(addMinutes(now, 5));\n      }\n    });\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {retry != null && <p>{t('timeout', {nextAttempt: nextAttempt - now})}</p>}\n      ...\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Unknown Routes with Type Assertion (TypeScript)\nDESCRIPTION: Demonstrates how to link to routes not explicitly defined in the `pathnames` configuration when using `next-intl`'s strictly typed navigation. By using a TypeScript comment directive (`// @ts-expect-error`), type checking for the `href` prop is suppressed for this specific instance, allowing links to unknown paths.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// @ts-expect-error\n<Link href=\"/unknown\">...</Link>\n```\n\n----------------------------------------\n\nTITLE: Inferring ICU Argument Types (TSX)\nDESCRIPTION: Provides examples of how the t and t.rich functions now automatically infer the required types for ICU message arguments. This feature enables IDE autocompletion and type checking based on the structure of the message string.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// \"Hello {name}\"\nt('message', {});\n//           ^? {name: string}\n\n// \"It's {today, date, long}\"\nt('message', {});\n//           ^? {today: Date}\n\n// \"Page {page, number} out of {total, number}\"\nt('message', {});\n//           ^? {page: number, total: number}\n\n// \"You have {count, plural, =0 {no followers yet} one {one follower} other {# followers}}.\"\nt('message', {});\n//           ^? {count: number}\n\n// \"Country: {country, select, US {United States} CA {Canada} other {Other}}\"\nt('message', {});\n//           ^? {country: 'US' | 'CA' | (string & {})}\n\n// \"Please refer to the <link>guidelines</link>.\"\nt.rich('message', {});\n//                ^? {link: (chunks: ReactNode) => ReactNode}\n```\n\n----------------------------------------\n\nTITLE: Customizing Locale Prefixes for Specific Regions in Next.js Routing\nDESCRIPTION: This snippet shows how to provide locale-specific URL prefixes by mapping locales to custom prefixes, such as '/us' for 'en-US'. This allows for region-based URL structures while internally associating URLs with specific locales, useful for regional targeting and branding.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: ['en-US', 'de-AT', 'zh'],\n  defaultLocale: 'en-US',\n  localePrefix: {\n    mode: 'always',\n    prefixes: {\n      'en-US': '/us',\n      'de-AT': '/eu/at'\n      // '/zh' will be used as-is\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Locale - Async Server Components\nDESCRIPTION: This snippet shows how to get the locale within an async server component using the `getLocale` function. This is used to retrieve locale information on the server side, such as during server-side rendering (SSR) or in API routes. The returned locale can be used for tasks like server-side data fetching, internationalized routing and language detection.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getLocale} from 'next-intl/server;\nconst locale = await getLocale();\n```\n\n----------------------------------------\n\nTITLE: getNow Function using React cache\nDESCRIPTION: Defines a `getNow` function that utilizes the `cache()` function from React. This function is designed to return the same `Date` instance across multiple component renders within a single request, ensuring time consistency.  The caching mechanism is intended to prevent discrepancies when dealing with time-sensitive data across a Next.js application, guaranteeing a unified time value for each request.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {cache} from 'react';\n\n// The first component that calls `getNow()` will\n// trigger the creation of the `Date` instance.\nconst getNow = cache(() => new Date());\n\nexport default getNow;\n```\n\n----------------------------------------\n\nTITLE: Setting Now in i18n/request.ts\nDESCRIPTION: This code snippet shows how to set the 'now' value in `i18n/request.ts`. The `now` setting dictates the reference point for relative date and time formatting. Providing this value ensures consistent relative time representations across the application. It can be a fixed date or dynamically determined based on current conditions.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server;\n\nexport default getRequestConfig(async () => {\n  return {\n    now: new Date('2024-11-14T10:36:01.516Z')\n\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Sitemap with Alternate URLs\nDESCRIPTION: This snippet details the generation of a localized sitemap, utilizing the `next-intl` library. It constructs alternate URLs for each locale. The `getUrl` function takes a locale and creates URLs for each page available in multiple languages. Requires 'next-intl' for routing settings.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/actions-metadata-route-handlers.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MetadataRoute} from 'next';\nimport {Locale} from 'next-intl';\nimport {routing, getPathname} from '@/i18n/routing';\n\n// Adapt this as necessary\nconst host = 'https://acme.com';\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  // Adapt this as necessary\n  return [...getEntries('/'), ...getEntries('/users')];\n}\n\ntype Href = Parameters<typeof getPathname>[0]['href'];\n\nfunction getEntries(href: Href) {\n  return routing.locales.map((locale) => ({\n    url: getUrl(href, locale),\n    alternates: {\n      languages: Object.fromEntries(\n        routing.locales.map((cur) => [cur, getUrl(href, cur)])\n      )\n    }\n  }));\n}\n\nfunction getUrl(href: Href, locale: Locale) {\n  const pathname = getPathname({locale, href});\n  return host + pathname;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Client i18n Provider in Server Layout with next-intl TSX\nDESCRIPTION: Demonstrates how to use the custom client-side provider (for non-serializable props) within the main Server Component layout. The inner provider inherits serializable props from the outer `NextIntlClientProvider` while adding its specific, non-serializable configurations on the client side.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NextIntlClientProvider} from 'next-intl';\nimport {getLocale} from 'next-intl/server';\nimport IntlErrorHandlingProvider from './IntlErrorHandlingProvider';\n\nexport default async function RootLayout({children}) {\n  const locale = await getLocale();\n\n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider>\n          <IntlErrorHandlingProvider>{children}</IntlErrorHandlingProvider>\n        </NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant ClientProvider Props (TSX)\nDESCRIPTION: This diff snippet shows how to remove the messages and formats props from NextIntlClientProvider. In v4.0, these props are inherited by default from the server-side configuration, streamlining client-side provider setup.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<NextIntlClientProvider\n-  messages={messages}\n-  formats={formats}\n>\n  ...\n</NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Disabling localeCookie in next-intl Routing (TSX)\nDESCRIPTION: This code snippet shows how to completely disable the automatic session cookie that next-intl uses to remember the user's preferred locale. Setting the localeCookie option to false in the routing definition prevents the cookie from being set.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ...\n\n  localeCookie: false\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Locale Type\nDESCRIPTION: This snippet shows how to use the `Locale` type from the `next-intl` library when passing a locale to a function. This type allows for type safety and can be optionally restricted to a union of supported locales defined in the application.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Locale} from 'next-intl;\n\nasync function getPosts(locale: Locale) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Component with translations\nDESCRIPTION: This snippet demonstrates how to implement an `error.tsx` component, using the `useTranslations` hook from `next-intl` to display translated error messages and a retry button.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport {useTranslations} from 'next-intl';\n\nexport default function Error({error, reset}) {\n  const t = useTranslations('Error');\n\n  return (\n    <div>\n      <h1>{t('title')}</h1>\n      <button onClick={reset}>{t('retry')}</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Navigation APIs for the App Router in next-intl 3.0\nDESCRIPTION: This code snippet demonstrates how to migrate from the previous navigation API imports to the new shared namespace pattern introduced in next-intl 3.0, providing type-safety for locale handling in App Router applications.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-0.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import Link from 'next-intl/link';\n- import {useRouter, usePathname} from 'next-intl/client';\n- import {redirect} from 'next-intl/server';\n\n+ import {createSharedPathnamesNavigation} from 'next-intl/navigation';\n+\n+ const locales = ['en', 'de'] as const;\n+ const {Link, useRouter, usePathname, redirect} = createSharedPathnamesNavigation({locales});\n```\n\n----------------------------------------\n\nTITLE: Configuring localeCookie Options in next-intl Routing (TSX)\nDESCRIPTION: This snippet demonstrates how to customize the attributes of the locale cookie set by next-intl, such as changing the cookie name or setting an explicit maxAge. These custom options are merged with the default cookie settings when defining the routing configuration.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ...\n\n  // Will be merged with the defaults\n  localeCookie: {\n    // Custom cookie name\n    name: 'USER_LOCALE',\n    // Expire in one year\n    maxAge: 60 * 60 * 24 * 365\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Supported ICU date and time pattern symbols with explanations\nDESCRIPTION: Lists and explains the ICU pattern symbols used in date and time formatting, such as G for era, y for year, M for month, d for day, and others. Each symbol includes the pattern and an example, guiding developers on composing custom date/time formats.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Creating Middleware with Centralized Routing Configuration in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates creating a middleware instance using `createMiddleware` from `next-intl/middleware` and the centralized routing configuration imported from a separate module. The middleware automatically handles locale detection and routing logic based on the defined routing object. It requires `next-intl` with middleware support and the previously defined centralized routing configuration file. The middleware is exported as the default export and can be incorporated in Next.js applications to handle internationalized request processing automatically with consistent routing parameters.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport createMiddleware from 'next-intl/middleware';\nimport {routing} from './i18n/routing';\n\nexport default createMiddleware(routing);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Providing Messages with NextIntlClientProvider\nDESCRIPTION: This snippet shows how to use `NextIntlClientProvider` to provide translated messages to client components, particularly for the `error.tsx` file. The `messages` prop is set to a subset of the total messages, including at least the `Error` namespace.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport pick from 'lodash/pick';\nimport {NextIntlClientProvider} from 'next-intl';\nimport {getMessages} from 'next-intl/server';\n\nexport default async function RootLayout(/* ... */) {\n  const messages = await getMessages();\n\n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider\n          locale={locale}\n          // Make sure to provide at least the messages for `Error`\n          messages={pick(messages, 'Error')}\n        >\n          {children}\n        </NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Number Formats in Messages (JavaScript)\nDESCRIPTION: This snippet shows how to use a custom number format defined in a JSON file in a Next.js application using `next-intl`'s `t` function. It passes the 'price' key and a value to be displayed. The options object within the `t` function specifies the custom number format with the currency style and EUR currency. The output will depend on the `en.json` file and locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/numbers.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nt(\n  'price',\n  {price: 32000.99},\n  {\n    number: {\n      currency: {\n        style: 'currency',\n        currency: 'EUR'\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting dates using next-intl's useFormatter hook in React (JavaScript)\nDESCRIPTION: Demonstrates how to format dates and times with various options using the useFormatter hook from next-intl in a React component. Showcases formatting a date-time and a time portion, including referencing global formats and overriding options.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n  const dateTime = new Date('2020-11-20T10:36:01.516Z');\n\n  // Renders \"Nov 20, 2020\"\n  format.dateTime(dateTime, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n\n  // Renders \"11:36 AM\"\n  format.dateTime(dateTime, {hour: 'numeric', minute: 'numeric'});\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Non-Localized Requests\nDESCRIPTION: This snippet shows how to handle requests that are not matched by the `next-intl` middleware by adding a root `not-found.tsx` page. It uses the `Error` component from `next/error` to display a standard 404 error page.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport Error from 'next/error';\n\nexport default function NotFound() {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Error statusCode={404} />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running i18n-check CLI for message validation (Bash)\nDESCRIPTION: This command executes the i18n-check CLI tool to perform validation on message files. It specifies 'en' as the source locale and the 'messages' directory as the location of locale files to be checked. The tool analyzes the files for issues like missing keys and inconsistent ICU argument usage based on the source locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/messages.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ni18n-check --source en --locales messages\n```\n\n----------------------------------------\n\nTITLE: Customizing units in relativeTime formatting in next-intl (JavaScript)\nDESCRIPTION: Shows how to specify a fixed unit (e.g., days) for relative time calculations, overriding default unit selection based on the difference between dates. Useful for precise temporal comparisons.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n  const dateTime = new Date('2020-03-20T08:30:00.000Z');\n  const now = new Date('2020-11-22T10:36:00.000Z');\n\n  // Renders \"247 days ago\"\n  format.relativeTime(dateTime, {now, unit: 'day'});\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Handling via NextIntlClientProvider in next-intl (tsx)\nDESCRIPTION: Shows how to provide custom error handling functions (`onError`, `getMessageFallback`) to client components using props of the `NextIntlClientProvider` in `next-intl`. This enables consistent error handling and fallback message generation for internationalization issues encountered during client-side rendering.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NextIntlClientProvider, IntlErrorCode} from 'next-intl';\n\n// Assuming reportToErrorTracking is defined elsewhere\nconst reportToErrorTracking = (error: any) => console.error('Error tracking:', error);\n\nfunction onError(error) {\n  if (error.code === IntlErrorCode.MISSING_MESSAGE) {\n    // Missing translations are expected and should only log an error\n    console.error(error);\n  } else {\n    // Other errors indicate a bug in the app and should be reported\n    reportToErrorTracking(error);\n  }\n}\n\nfunction getMessageFallback({namespace, key, error}) {\n  const path = [namespace, key].filter((part) => part != null).join('.');\n\n  if (error.code === IntlErrorCode.MISSING_MESSAGE) {\n    return path + ' is not yet translated';\n  } else {\n    return 'Dear developer, please fix this message: ' + path;\n  }\n}\n\n<NextIntlClientProvider\n  onError={onError}\n  getMessageFallback={getMessageFallback}\n>\n  {/* ... your components ... */}\n</NextIntlClientProvider>;\n```\n\n----------------------------------------\n\nTITLE: Example output of i18n-check missing keys (Text)\nDESCRIPTION: This snippet presents a sample output from the i18n-check CLI when it detects missing translation keys. It clearly indicates the file path (messages/de.json) and the specific key (NewsArticle.title) that is missing in the target locale, helping developers pinpoint and address translation gaps.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/messages.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFound missing keys!\n┌────────────────────┬───────────────────────────────┐\n│ file               │ key                           │\n├────────────────────┼───────────────────────────────┤\n│  messages/de.json  │  NewsArticle.title            │\n└────────────────────┴───────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for i18n Ally Extension\nDESCRIPTION: Configuration snippet to set up the i18n Ally extension in VSCode workspace settings for managing message locales and keystyle preferences. This setup enables message extraction and inline editing features for next-intl within the specified localesPath.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/vscode-integration.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"i18n-ally.localesPaths\": [\"./path/to/your/messages\"], // E.g. \"./messages\"\n\"i18n-ally.keystyle\": \"nested\"\n```\n\n----------------------------------------\n\nTITLE: Passing Dynamic Parameters to the next-intl Link Component (TypeScript)\nDESCRIPTION: Demonstrates two ways to pass dynamic parameters to the `next-intl` `Link` component based on routing configuration. Use a simple string `href` (e.g., `/users/12`) when not using the `pathnames` feature. Use an object `href` with `pathname` (containing placeholders like `[userId]`) and a `params` object when the `pathnames` configuration is enabled for stricter typing and localization.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. A final string (when not using `pathnames`)\n<Link href=\"/users/12\">Susan</Link>\n\n// 2. An object (when using `pathnames`)\n<Link href={{\n  pathname: '/users/[userId]',\n  params: {userId: '5'}\n}}>\n  Susan\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Pages with Error Boundary\nDESCRIPTION: This conceptual snippet demonstrates how Next.js creates an error boundary within the layout that wraps pages, allowing for runtime error handling.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<RootLayout>\n  <ErrorBoundary fallback={<Error />}>\n    <Page />\n  </ErrorBoundary>\n</RootLayout>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Error Component\nDESCRIPTION: This snippet shows how to use `React.lazy` to lazily load the error component. This can improve initial load time by moving the error content to a separate chunk that is only loaded when needed.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport {lazy} from 'react';\n\n// Move error content to a separate chunk and load it only when needed\nexport default lazy(() => import('./Error'));\n```\n\n----------------------------------------\n\nTITLE: Running ESLint and Prettier via Command Line - Shell Script\nDESCRIPTION: This shell script snippet demonstrates how to manually run ESLint and Prettier on the src directory of the next-intl package to automatically fix linting errors and format code according to project standards. Dependencies required are pnpm, ESLint, and Prettier, which are assumed to be installed as part of the project setup. The script expects to be run from within the packages/next-intl directory or after changing to this directory using cd. Outputs are applied in-place to source files; ensure you have committed or stashed changes before running. The commands may not work as intended if project-specific configuration files are missing or if run outside the intended directory.\nSOURCE: https://github.com/amannn/next-intl/blob/main/CONTRIBUTORS.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/next-intl\npnpm eslint src --fix\npnpm prettier src --write\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with useFormatter from next-intl (TypeScript/TSX)\nDESCRIPTION: This Server or Client Component snippet uses useFormatter from next-intl to access locale-aware date and relative time formatting functions. The format.dateTime method provides fully localized date output, and format.relativeTime displays time differences, both relying on the centralized i18n configuration described elsewhere. Requires next-intl dependency and a working i18n/request.ts setup. Input is a published Date; output is a formatted string for the current environment and configuration. Can be used seamlessly across server-client boundaries.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\ntype Props = {\n  published: Date;\n};\n\nexport default function BlogPostPublishedDate({published}: Props) {\n  // ✅ Works in any environment\n  const format = useFormatter();\n\n  // \"Sep 25, 2024\"\n  format.dateTime(published);\n\n  // \"8 days ago\"\n  format.relativeTime(published);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Alternate Links in next-intl Middleware (TSX)\nDESCRIPTION: This example demonstrates how to customize the `hreflang` links generated by the next-intl middleware by composing it with custom logic. It shows how to access and modify the 'link' header in the response, specifically removing the 'x-default' entry using the 'http-link-header' library.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport createMiddleware from 'next-intl/middleware';\nimport LinkHeader from 'http-link-header';\nimport {NextRequest} from 'next/server';\nimport {routing} from './i18n/routing';\n\nconst handleI18nRouting = createMiddleware(routing);\n\nexport default async function middleware(request: NextRequest) {\n  const response = handleI18nRouting(request);\n\n  // Example: Remove the `x-default` entry\n  const link = LinkHeader.parse(response.headers.get('link'));\n  link.refs = link.refs.filter((entry) => entry.hreflang !== 'x-default');\n  response.headers.set('link', link.toString());\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Internationalized Home Page with Server Component\nDESCRIPTION: Example page component using getTranslations function to render localized content in an async server component.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\n\nexport default async function HomePage() {\n  const t = await getTranslations('HomePage');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Messages in i18n/request.ts\nDESCRIPTION: This snippet demonstrates how to configure messages for internationalization using the `getRequestConfig` function. This function is used within `i18n/request.ts` to provide messages to components. The provided `async` function within `getRequestConfig` loads the messages for the given locale, using template literals to load the locale-specific JSON files from the messages directory.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server;\n\nexport default getRequestConfig(async () => {\n  return {\n    messages: (await import(`../../messages/${locale}.json`)).default\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Locale and Time Zone Using date-fns-tz (TypeScript/TSX)\nDESCRIPTION: This component leverages date-fns-tz to format a date using both the user's time zone and locale settings, addressing multi-regional requirements. The Props type is extended to accept published (Date), timeZone (string), and locale (string). The formatted date reflects the requested locale for proper linguistic and regional display. date-fns-tz and appropriate locale data are required dependencies. The function returns a date string and covers environment-specific formatting needs. Locale string should match the loaded locales in date-fns-tz.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport {format} from 'date-fns-tz';\n\ntype Props = {\n  published: Date;\n  timeZone: string;\n  locale: string;\n};\n\nexport default function BlogPostPublishedDate({\n  published,\n  timeZone,\n  locale\n}: Props) {\n  return <p>{format(published, timeZone, 'MMM d, yyyy', {locale})}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Matcher Patterns for Middleware\nDESCRIPTION: Example of configuring complex matcher patterns for the middleware to handle specific route cases. It excludes API routes and static files while explicitly including routes with dots in user paths.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const config = {\n  // Matcher entries are linked with a logical \"or\", therefore\n  // if one of them matches, the middleware will be invoked.\n  matcher: [\n    // Match all pathnames except for\n    // - … if they start with `/api`, `/_next` or `/_vercel`\n    // - … the ones containing a dot (e.g. `favicon.ico`)\n    '/((?!api|_next|_vercel|.*\\\\..*).*)',\n\n    // However, match all pathnames within `/users`, optionally with a locale prefix\n    '/([\\\\w-]+)?/users/(.+)'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Root Layout Requirement for not-found.tsx\nDESCRIPTION: This snippet shows that when a root `not-found.tsx` page is present, a root layout (`app/layout.tsx`) is required, even if it only passes children through. This is necessary for Next.js to properly render the 404 page.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Since we have a root `not-found.tsx` page, a layout file\n// is required, even if it's just passing children through.\nexport default function RootLayout({children}) {\n  return children;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Translations in Server Actions\nDESCRIPTION: This snippet showcases how to use `getTranslations` within a Next.js Server Action to localize messages for the user. It fetches translations for a specified namespace and can be used to display error messages or other dynamic content. The example requires the 'next-intl/server' dependency.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/actions-metadata-route-handlers.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\n\nasync function loginAction(data: FormData) {\n  'use server';\n\n  const t = await getTranslations('LoginForm');\n  const areCredentialsValid = /* ... */;\n  if (!areCredentialsValid) {\n    return {error: t('invalidCredentials')};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BlogPostPage Component with now prop\nDESCRIPTION: Demonstrates a Next.js page component (`BlogPostPage`) that leverages a Server Component to initialize the `now` variable, which is then passed down as a prop to the `BlogPostPublishedDate` component. This approach ensures the `now` value is consistent across all components rendering on the server, mitigating hydration mismatches. The page utilizes a `published` variable too, and returns the `BlogPostPublishedDate` component.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport BlogPostPublishedDate from './BlogPostPublishedDate';\n\nexport default function BlogPostPage() {\n  // ✅ Is only called on the server\n  const now = new Date();\n\n  const published = ...;\n\n  return <BlogPostPublishedDate now={now} published={published} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Locale - Regular Components\nDESCRIPTION: This snippet demonstrates how to retrieve the current locale within a regular (client-side) component using the `useLocale` hook from the `next-intl` library. This hook provides access to the locale configured for the current context, for example by a `NextIntlClientProvider`.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useLocale} from 'next-intl;\nconst locale = useLocale();\n```\n\n----------------------------------------\n\nTITLE: Getting Messages - Regular Components\nDESCRIPTION: This snippet demonstrates how to access the messages from the configured context, typically defined in `i18n/request.ts`, within a regular client-side component using the `useMessages` hook. This allows access to the messages inside the component for translation purposes.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useMessages} from 'next-intl;\nconst messages = useMessages();\n```\n\n----------------------------------------\n\nTITLE: Providing Client i18n Configuration with NextIntlClientProvider TSX\nDESCRIPTION: Illustrates the basic usage of `NextIntlClientProvider` within a Server Component layout (`layout.tsx`). This provider wraps client components and makes internationalization configuration available to them, inheriting serializable props like `locale` and `messages` from the server context.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NextIntlClientProvider} from 'next-intl';\nimport {getMessages} from 'next-intl/server';\n\nexport default async function RootLayout(/* ... */) {\n  // ...\n\n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider>...</NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom i18n Request File Path with next-intl/plugin JS\nDESCRIPTION: Demonstrates how to specify a non-default path for the `i18n/request.ts` file within the `next.config.ts` using `createNextIntlPlugin`. This is necessary if the file is located outside the standard `./i18n/request.ts` or `./src/i18n/request.ts` paths.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst withNextIntl = createNextIntlPlugin(\n  // Specify a custom path here\n  './somewhere/else/request.ts'\n);\n```\n\n----------------------------------------\n\nTITLE: Revalidating Localized Pathnames - next-intl (TSX)\nDESCRIPTION: This example shows how to revalidate localized pathnames, distinguishing between statically generated and dynamically generated routes.  It uses `revalidatePath` and discusses the alternative of `revalidateTag`. It requires `next-intl/routing` dependency and integration with Next.js revalidation APIs.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: ['en', 'de'],\n  defaultLocale: 'en',\n  pathnames: {\n    '/news/[slug]': {\n      en: '/news/[slug]',\n      de: '/neuigkeiten/[slug]'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Global Number Formats in next-intl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to utilize global formats within `next-intl` for consistent number formatting. It uses the `format.number()` function with the number value and the format name ('precise' or 'price') from a global configuration. It also shows how to override options like currency for specific formatting requirements. This assumes that global formats have been configured.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/numbers.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Use a global format\nformat.number(499.9, 'precise');\n\n// Optionally override some options\nformat.number(499.9, 'price', {currency: 'USD'});\n```\n\n----------------------------------------\n\nTITLE: Declaring AppConfig Locale Using i18n Routing Locales in TypeScript\nDESCRIPTION: This snippet shows how to augment the `AppConfig` interface of `next-intl` to specify the `Locale` type as derived from the array of locale strings defined in the app's i18n routing configuration. It ensures next-intl APIs accept and return only supported locales. The snippet assumes importing `routing` containing locale definitions and is included in a TypeScript (.ts or .tsx) declaration file.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {routing} from '@/i18n/routing';\n\ndeclare module 'next-intl' {\n  interface AppConfig {\n    // ...\n    Locale: (typeof routing.locales)[number];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Numbers in Messages (JSON)\nDESCRIPTION: This JSON snippet defines examples of number formatting within messages using the ICU syntax, specifically to be used within `next-intl`. It provides keys for basic formatting, percentage formatting, and custom number formats, which are displayed as a string, with different format options. It showcases how different number styles and skeletons can be used.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/numbers.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"basic\": \"Basic formatting: {value, number}\",\n  \"percentage\": \"Displayed as a percentage: {value, number, percent}\",\n  \"custom\": \"At most 2 fraction digits: {value, number, ::.##}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Type-Safe useTranslations Hook in TypeScript\nDESCRIPTION: This snippet shows how using the `useTranslations` hook from `next-intl` enables type-safe referencing of message namespaces and keys. Valid keys like 'title' are correctly accepted, while invalid keys like 'description' cause TypeScript errors, demonstrating the benefit of message type augmentation. It assumes that `AppConfig.Messages` has been properly typed as per imported messages.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction About() {\n  // ✅ Valid namespace\n  const t = useTranslations('About');\n\n  // ✖️ Unknown message key\n  t('description');\n\n  // ✅ Valid message key\n  t('title');\n}\n```\n\n----------------------------------------\n\nTITLE: Prevent hydration errors with suppressHydrationWarning when using useNow in React (JavaScript)\nDESCRIPTION: Addresses potential hydration mismatch issues when rendering relative times on server and client by using React's suppressHydrationWarning. Ensures consistent display of time-sensitive content in SSR environments.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useNow, useFormatter} from 'next-intl';\n\nfunction FormattedDate({date}) {\n  const now = useNow();\n  const format = useFormatter();\n\n  return <span suppressHydrationWarning>{format.relativeTime(date, now)}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Formats with useFormatter in next-intl (tsx)\nDESCRIPTION: Illustrates how to use the `useFormatter` hook from `next-intl` within a component to access formatting functions. These functions (`format.dateTime`, `format.number`, `format.list`) apply the globally configured formats (identified by names like 'short', 'precise', 'enumeration') to provided values.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n\n  format.dateTime(new Date('2020-11-20T10:36:01.516Z'), 'short');\n  format.number(47.414329182, 'precise');\n  format.list(['HTML', 'CSS', 'JavaScript'], 'enumeration');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing date formats with date skeletons in JSON localization file\nDESCRIPTION: Shows how to customize date formatting using date skeletons with ICU syntax by prefixing with `::` to specify formats like year, month, and day in a specific pattern. This allows for tailored date representation aligned with localization needs.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ordered\": \"Ordered on {orderDate, date, ::yyyyMMMd}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating relative time display continuously with useNow in React (JavaScript)\nDESCRIPTION: Configures useNow to update its value at regular intervals, enabling dynamic, real-time relative time displays such as countdowns or live updates.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useNow, useFormatter} from 'next-intl';\n\nfunction Component() {\n  const now = useNow({\n    updateInterval: 1000 * 10\n  });\n\n  const format = useFormatter();\n  const dateTime = new Date('2020-11-20T10:36:01.516Z');\n\n  // Renders e.g. \"2 hours ago\" and updates every 10 seconds\n  format.relativeTime(dateTime, now);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating request-scoped locale and messages with getRequestConfig\nDESCRIPTION: This server-side snippet fetches or provides a static locale ('en') and dynamically loads the corresponding JSON messages for use in server components, enabling localized content rendering on the server based on user context.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/without-i18n-routing.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server';\n\nexport default getRequestConfig(async () => {\n  // Provide a static locale, fetch a user setting,\n  // read from `cookies()`, `headers()`, etc.\n  const locale = 'en';\n\n  return {\n    locale,\n    messages: (await import(`../../messages/${locale}.json`)).default\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing with Domains in Next-Intl (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure routing with domains in Next-Intl, including specifying locales, default locales, and locale prefixes. It uses `defineRouting` to define the routing configuration, ensuring that each domain is associated with a set of locales and a default locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: ['sv-SE', 'en-SE', 'no-NO', 'en-NO'],\n  defaultLocale: 'en-SE',\n  localePrefix: {\n    mode: 'as-needed',\n    prefixes: {\n      'en-SE': '/en',\n      'en-NO': '/en'\n    }\n  },\n  domains: [\n    {\n      domain: 'example.se',\n      defaultLocale: 'sv-SE',\n      locales: ['sv-SE', 'en-SE']\n    },\n    {\n      domain: 'example.no',\n      defaultLocale: 'no-NO',\n      locales: ['no-NO', 'en-NO']\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Pluralized Message with a Dynamic Count - JavaScript\nDESCRIPTION: This example shows how to retrieve a pluralized, formatted message by providing a count to the t function (e.g., t('message', {count: 3580})). Depending on the count, a different variant of the message is selected. Requires a corresponding ICU pluralized message in the locale JSON file and useTranslations from next-intl. Inputs: Numeric count parameter.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nt('message', {count: 3580}); // \"You have 3,580 followers.\"\n```\n\n----------------------------------------\n\nTITLE: Type-checking ICU Arguments (TSX)\nDESCRIPTION: Illustrates how type safety for ICU arguments helps prevent runtime errors by catching incorrect message formatting at compile time. It shows that using '{count}' requires a number, guiding developers to use '{count, number}' for proper number formatting.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nt('followers', {count: 30000});\n```\n\nLANGUAGE: json\nCODE:\n```\n// ✖️ Would be: \"30000 followers\"\n\"{count} followers\"\n\n// ✅ Valid: \"30,000 followers\"\n\"{count, number} followers\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Pluralized Message using ICU Syntax - JSON\nDESCRIPTION: This JSON snippet expresses a pluralized message using the ICU message format, allowing for correct labeling depending on the count (e.g., 'no followers', 'one follower', '# followers'). Intended for next-intl-enabled locale files and supports value-dependent message resolution. Inputs: Numeric 'count' parameter. Dependency: next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"message\": \"You have {count, plural, =0 {no followers yet} =1 {one follower} other {# followers}}.\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Messages Without Namespace using useTranslations - JavaScript\nDESCRIPTION: This JavaScript code showcases using useTranslations without a namespace, enabling access to all defined messages. By calling t('About.title'), the full message key is specified. This is useful when multiple namespaces or a global message table needs to be accessed. Dependencies: Requires the next-intl library to define useTranslations in scope.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst t = useTranslations();\n\nt('About.title');\n```\n\n----------------------------------------\n\nTITLE: Formatting date ranges with dateTimeRange in next-intl (JavaScript)\nDESCRIPTION: Provides formatting for a range of dates, outputting a concise range string, with support for referencing global formats and overriding options similar to single date formatting.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n  const dateTimeA = new Date('2020-11-20T08:30:00.000Z');\n  const dateTimeB = new Date('2021-01-24T08:30:00.000Z');\n\n  // Renders \"Nov 20, 2020 – Jan 24, 2021\"\n  format.dateTimeRange(dateTimeA, dateTimeB, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Alternate Links (hreflang) in next-intl Routing (TSX)\nDESCRIPTION: This snippet illustrates how to turn off the automatic generation of `hreflang` link headers by the next-intl middleware. Disabling this is useful if you plan to manually manage alternate links, for example, due to locale-specific pages or using an external CMS.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ...\n\n  alternateLinks: false\n});\n```\n\n----------------------------------------\n\nTITLE: Resulting Nested Object Structure from Flat-to-Nested Conversion - TypeScript/JavaScript\nDESCRIPTION: This code shows the nested object structure produced from converting a flat message mapping to a hierarchical one, following the example with lodash's set function. Used for verifying correct reorganization of messages for use with next-intl. Inputs: Converted object output. Output: Nested JSON-compatible object.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"one\": {\n    \"one\": \"1.1\",\n    \"two\": \"1.2\"\n  },\n  \"two\": {\n    \"one\": {\n      \"one\": \"2.1.1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Domain Configuration for Local Testing - next-intl (TSX)\nDESCRIPTION: This code demonstrates how to conditionally adapt the domain configuration for local testing using `process.env.NODE_ENV`. This allows developers to test domain-based routing locally by using `localhost` with different ports instead of relying on actual domain names.  Requires `next-intl/routing` and access to the `NODE_ENV` environment variable.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nconst isDev = process.env.NODE_ENV === 'development';\n\nexport const routing = defineConfig({\n  // ...\n  domains: [\n    {\n      domain: isDev ? 'localhost:3000' : 'us.example.com'\n      // ...\n    },\n    {\n      domain: isDev ? 'localhost:3001' : 'ca.example.com'\n      // ...\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Composing next-intl Link Props in a Wrapper Component (TypeScript)\nDESCRIPTION: Illustrates creating a custom `StyledLink` component that wraps the `next-intl` `Link` and adds custom props (like `color`). It uses `ComponentProps<typeof Link>` from React to correctly type and forward all standard `Link` props, ensuring the `href` prop maintains strict typing if the `pathnames` feature is enabled.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComponentProps} from 'react';\nimport {Link} from '@/i18n/navigation';\n\ntype Props = ComponentProps<typeof Link> & {\n  color: 'blue' | 'red';\n};\n\nexport default function StyledLink({color, href, ...rest}: Props) {\n  return <Link href={href} style={{color}} {...rest} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect Usage Example with createNavigation API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the updated syntax for using `redirect` from the new `createNavigation` API, requiring explicit locale specification and wrapping the target pathname or URL in an `href` object. It shows how to retrieve the current locale in both regular and async components and how to adapt previous redirect calls to the new signature, accommodating Next.js 15 routing changes. Dependencies include the new `createNavigation` API and locale hooks or utility functions. This pattern ensures redirects are correctly localized and compatible with modern Next.js routing behavior.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Retrieving the current locale\n// ... in regular components:\nconst locale = useLocale();\n// ... in async components:\nconst locale = await getLocale();\n```\n\nLANGUAGE: diff\nCODE:\n```\n- redirect('/about')\n+ redirect({href: '/about', locale})\n\n- redirect({pathname: '/users/[id]', params: {id: 2}})\n+ redirect({href: {pathname: '/users/[id]', params: {id: 2}}, locale})\n```\n\n----------------------------------------\n\nTITLE: Handling Locale with i18n Routing in getRequestConfig TSX\nDESCRIPTION: Shows how to determine the locale within the `getRequestConfig` function in `i18n/request.ts` when `next-intl`'s i18n routing is enabled. It reads the locale from the `requestLocale` parameter (typically the `[locale]` segment) and includes logic to fall back to a default locale if the requested one is invalid.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default getRequestConfig(async ({requestLocale}) => {\n  // Typically corresponds to the `[locale]` segment\n  const requested = await requestLocale;\n  const locale = hasLocale(routing.locales, requested)\n    ? requested\n    : routing.defaultLocale;\n\n  return {\n    locale\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Params in Next.js Navigation with useRouter (TypeScript/TSX)\nDESCRIPTION: Shows how to use useRouter for navigating to dynamic routes, supporting both direct string-based navigation and object-based param passing depending on the pathnames setting. This enables deep linking to resource-specific pages with i18n support. Requires next-intl setup and applicable configuration for pathnames. Input can either be a route path string or an object with pathname and params. Outputs a navigation event to the correct localized URL.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n// 1. A final string (when not using `pathnames`)\nrouter.push('/users/12');\n\n// 2. An object (when using `pathnames`)\nrouter.push({\n  pathname: '/users/[userId]',\n  params: {userId: '5'}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Client-side Expandable React Component for Translated Content\nDESCRIPTION: This snippet defines a React Client Component that manages its own UI state with `useState` to toggle visibility of children elements, used here to create an interactive expandable section with a button. It illustrates client-side interactivity with translated labels.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use client';\n\nimport {useState} from 'react';\n\nfunction Expandable({title, children}) {\n  const [expanded, setExpanded] = useState(false);\n\n  function onToggle() {\n    setExpanded(!expanded);\n  }\n\n  return (\n    <div>\n      <button onClick={onToggle}>{title}</button>\n      {expanded && <div>{children}</div>}\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Messages - Async Server Components\nDESCRIPTION: This snippet shows how to access messages in an async server component by using `getMessages`. This allows the server to fetch and provide messages for server-side rendering.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getMessages} from 'next-intl/server;\nconst messages = await getMessages();\n```\n\n----------------------------------------\n\nTITLE: Setting Document Direction for RTL (rtl-detect, TSX)\nDESCRIPTION: Demonstrates how to set the `dir` attribute on the HTML document (`<html>`) based on the detected language direction (LTR or RTL). It uses the `getLangDir` function from the `rtl-detect` package and assumes a `getLocale` function is available. Intended for root layout files in frameworks like Next.js. Requires the `rtl-detect` package.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLangDir} from 'rtl-detect';\n\nexport default async function RootLayout(/* ... */) {\n  const locale = await getLocale();\n  const direction = getLangDir(locale);\n\n  return (\n    <html lang={locale} dir={direction}>\n      {/* ... */}\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client Provider for Non-Serializable Props with next-intl TSX\nDESCRIPTION: Defines a dedicated client-side provider component (`'use client'`) that wraps `NextIntlClientProvider` to configure properties like `onError` or `getMessageFallback`. These properties are not serializable and thus cannot be passed directly from a Server Component.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport {NextIntlClientProvider} from 'next-intl';\n\nexport default function IntlErrorHandlingProvider({children}) {\n  return (\n    <NextIntlClientProvider\n      onError={(error) => console.error(error)}\n      getMessageFallback={({namespace, key}) => `${namespace}.${key}`}\n    >\n      {children}\n    </NextIntlClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Flat Message Keys to Nested Objects with Lodash - TypeScript/JavaScript\nDESCRIPTION: This snippet converts flat message key structures (with dot notation) into deeply nested objects using lodash's set function. This approach is useful for migrating old message formats to the nested structure required by next-intl. Dependencies: lodash.set and a mapping from flat keys to values. Input: Flat key-value mapping. Output: Nested message object.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {set} from 'lodash';\n\nconst input = {\n  'one.one': '1.1',\n  'one.two': '1.2',\n  'two.one.one': '2.1.1'\n};\n\nconst output = Object.entries(input).reduce(\n  (acc, [key, value]) => set(acc, key, value),\n  {}\n);\n```\n\n----------------------------------------\n\nTITLE: Naive Translation Formatting Outside React Render (tsx)\nDESCRIPTION: Presents an example of formatting translation messages (`t('timeout', ...)`) within a helper function (`sendFeedback`) that is not part of the React rendering cycle. This approach is identified as problematic because it cannot easily update messages based on changing time and doesn't respond to language changes, leading to potential UI inconsistencies. The component stores the *formatted* message in state.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/translations-outside-of-react-components.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations, useNow} from 'next-intl';\nimport {addMinutes} from 'date-fns';\n\nfunction sendFeedback() {\n  // ❌ Bad implementation: Returns formatted messages\n  API.sendFeedback().catch((error) => {\n    // In case of a gateway timeout, notify the\n    // user that we'll try again in 5 minutes\n    if (error.status === 504) {\n      // (let's assume `t` is defined here for the sake of the example)\n      return t('timeout', {nextAttempt: addMinutes(new Date(), 5)});\n    }\n  });\n}\n\nfunction FeedbackForm({user}) {\n  const t = useTranslations('Form');\n  const [errorMessage, setErrorMessage] = useState();\n\n  function onSubmit() {\n    sendFeedback().catch((errorMessage) => {\n      setErrorMessage(errorMessage);\n    });\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {errorMessage != null && <p>{errorMessage}</p>}\n      ...\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTranslations Hook in React Components (tsx)\nDESCRIPTION: Shows the basic usage of the `useTranslations` hook provided by `next-intl` within a functional React component. It imports the hook, calls it to get the translation function `t` for a specific namespace ('About'), and then uses `t` to retrieve a translated message ('title') for rendering.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/translations-outside-of-react-components.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nfunction About() {\n  const t = useTranslations('About');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Prefix to Never Show in URL in Next.js Routing\nDESCRIPTION: This configuration disables URL prefixing for locales, so all locale handling is done internally, potentially via cookies or domain-based routing. The URL paths omit the locale prefix, which can simplify URLs but requires additional setup for route recognition and SEO considerations.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ... other settings\n  localePrefix: 'never'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation with the Active Link Component (TypeScript)\nDESCRIPTION: Example usage of the custom `NavigationLink` component (defined previously) within a `<nav>` element. This demonstrates creating a navigation menu where links automatically highlight themselves based on the current route, using translation function `t` for link text.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<nav>\n  <NavigationLink href=\"/\">{t('home')}</NavigationLink>\n  <NavigationLink href=\"/about\">{t('about')}</NavigationLink>\n  <NavigationLink href=\"/blog\">{t('blog')}</NavigationLink>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Number Formats in Messages (JSON)\nDESCRIPTION: This JSON example provides the 'price' key with the formatting, used within messages. The value includes the use of the currency style format.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/numbers.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"price\": \"This product costs {price, number, currency}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Component Form with Server-side Translations and Client-side Controls\nDESCRIPTION: This example illustrates structuring a form where the main form component is a Server Component, but individual input and submit button components are Client Components with their own state management and validation for better interactivity. Dependencies include next-intl and React hooks.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\n// A Client Component, so that `useActionState` can be used\n// to potentially display errors received after submission.\nimport RegisterForm from './RegisterForm';\n\n// A Client Component, so that `useFormStatus` can be used\n// to disable the input field during submission.\nimport FormField from './FormField';\n\n// A Client Component, so that `useFormStatus` can be used\n// to disable the submit button during submission.\nimport FormSubmitButton from './FormSubmitButton';\n\nexport default function RegisterPage() {\n  const t = useTranslations('RegisterPage');\n\n  function registerAction() {\n    'use server';\n    // ...\n  }\n\n  return (\n    <RegisterForm action={registerAction}>\n      <FormField label={t('firstName')} name=\"firstName\" />\n      <FormField label={t('lastName')} name=\"lastName\" />\n      <FormField label={t('email')} name=\"email\" />\n      <FormField label={t('password')} name=\"password\" />\n      <FormSubmitButton label={t('submit')} />\n    </RegisterForm>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Type Declaration Generation to Enable Message Argument Typing\nDESCRIPTION: This snippet configures Next.js and TypeScript to generate `.d.json.ts` declaration files for messages imported as JSON modules. This workaround improves type inference for message structures, allowing next-intl to provide accurate typings for message keys and arguments, overcoming current TypeScript limitations. It includes additions to `tsconfig.json` and Next.js config to enable this experimental feature.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"allowArbitraryExtensions\": true\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createNextIntlPlugin} from 'next-intl/plugin';\n\nconst withNextIntl = createNextIntlPlugin({\n  experimental: {\n    // Provide the path to the messages that you're using in `AppConfig`\n    createMessagesDeclaration: './messages/en.json'\n  }\n  // ...\n});\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Client-side Translation Message Passing via NextIntlClientProvider (TypeScript/TSX)\nDESCRIPTION: This snippet illustrates how to disable sending translation messages to the client by passing messages={null} to NextIntlClientProvider. It can optimize performance by reducing payload size on the client. Dependency: next-intl and proper provider configuration higher up in the Next.js component tree. Input: no translation messages are sent to the client. Output: messages must be provided through other means if needed for child components. Limitation: translation hooks or consumers relying exclusively on client-side messages will not work unless another provider is nested below with messages.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<NextIntlClientProvider\n  // Don't pass any messages to the client\n  messages={null}\n>\n  ...\n</NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Using useTranslations Hook in a React Component (JSX)\nDESCRIPTION: Demonstrates how to use the `useTranslations` hook from `use-intl` within a React functional component (`UserProfile`) to retrieve localized strings. It takes a namespace ('UserProfile') and uses the returned function `t` to access messages with parameters for interpolation, date formatting, and pluralization.\nSOURCE: https://github.com/amannn/next-intl/blob/main/packages/use-intl/README.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// UserProfile.tsx\nimport {useTranslations} from 'use-intl';\n\nexport default function UserProfile({user}) {\n  const t = useTranslations('UserProfile');\n\n  return (\n    <section>\n      <h1>{t('title', {firstName: user.firstName})}</h1>\n      <p>{t('membership', {memberSince: user.memberSince})}</p>\n      <p>{t('followers', {count: user.numFollowers})}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Message Structure (next-intl)\nDESCRIPTION: Defines a JSON structure for internationalized messages within the 'CompanyStats' namespace. It provides nested keys for 'yearsOfService', 'happyClients', and 'partners', each with 'title' and 'value' properties, used for rendering lists of statistics.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CompanyStats\": {\n    \"yearsOfService\": {\n      \"title\": \"Years of service\",\n      \"value\": \"34\"\n    },\n    \"happyClients\": {\n      \"title\": \"Happy clients\",\n      \"value\": \"1.000+\"\n    },\n    \"partners\": {\n      \"title\": \"Products\",\n      \"value\": \"5.000+\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BlogPostPublishedDate Component Definition\nDESCRIPTION: Defines a React component `BlogPostPublishedDate` that formats a published date using the `formatDistance` function from the `date-fns` library. It takes a `published` prop of type `Date` and displays the relative time elapsed since the published date and the current time. The component is intended to be a shared component and the main purpose is to display the date that the article was published.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {formatDistance} from 'date-fns';\n\ntype Props = {\n  published: Date;\n};\n\nexport default function BlogPostPublishedDate({published}: Props) {\n  const now = new Date();\n\n  // ... is this ok? 🤔\n  return <p>{formatDistance(published, now, {addSuffix: true})}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Middleware with next-intl\nDESCRIPTION: Example of composing next-intl middleware with custom logic. This allows for modifying requests before passing to next-intl middleware and manipulating the response afterward.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport createMiddleware from 'next-intl/middleware';\nimport {NextRequest} from 'next/server';\n\nexport default async function middleware(request: NextRequest) {\n  // Step 1: Use the incoming request (example)\n  const defaultLocale = request.headers.get('x-your-custom-locale') || 'en';\n\n  // Step 2: Create and call the next-intl middleware (example)\n  const handleI18nRouting = createMiddleware({\n    locales: ['en', 'de'],\n    defaultLocale\n  });\n  const response = handleI18nRouting(request);\n\n  // Step 3: Alter the response (example)\n  response.headers.set('x-your-custom-locale', defaultLocale);\n\n  return response;\n}\n\nexport const config = {\n  // Match only internationalized pathnames\n  matcher: ['/', '/(de|en)/:path*']\n};\n```\n\n----------------------------------------\n\nTITLE: Installation and Run Commands for React Native with use-intl\nDESCRIPTION: This snippet provides terminal commands to install dependencies and run the React Native app on different platforms (Android, iOS, Web). It ensures that the necessary runtime requirements for use-intl are met before execution.\nSOURCE: https://github.com/amannn/next-intl/blob/main/examples/example-react-native/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n\n# Run the app with one of:\npnpm run android\npnpm run ios\npnpm run web\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing React Components in Next.js (JavaScript)\nDESCRIPTION: This snippet imports 'AsyncComponent' and 'Counter' from relative paths and renders them within a React/Next.js component file. The main prerequisites are the existence of these components in the specified paths and a properly set up Next.js project with support for React JSX syntax. The snippet does not define input or output parameters itself; it is intended for use within Next.js page/layout files and relies on the props and behaviors of the imported components. Limitations include the requirement that the external components handle their own logic and lifecycle.\nSOURCE: https://github.com/amannn/next-intl/blob/main/examples/example-app-router-playground/src/app/[locale]/about/en.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AsyncComponent from '@/components/AsyncComponent';\nimport Counter from '@/components/client/02-MessagesOnClientCounter/Counter';\n\n<AsyncComponent />\n<Counter />\n```\n\n----------------------------------------\n\nTITLE: Catching Unknown Routes\nDESCRIPTION: This snippet demonstrates how to catch unknown routes using a catch-all route (`[...rest]/page.tsx`) that explicitly calls the `notFound` function from `next/navigation`. This ensures that the localized not-found page is rendered for any unmatched route within the locale segment.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/error-files.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {notFound} from 'next/navigation';\n\nexport default function CatchAllPage() {\n  notFound();\n}\n```\n\n----------------------------------------\n\nTITLE: Update Supabase Session with NextResponse in Next.js Middleware\nDESCRIPTION: Provides a utility function `updateSession` designed to work within a Next.js middleware chain when integrating with Supabase Authentication. It creates a Supabase client using cookies from the incoming request and updates session cookies on a provided `NextResponse` object, enabling chained middleware execution where a response might already exist (e.g., from `next-intl`).\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nimport {createServerClient} from '@supabase/ssr';\nimport {NextResponse, type NextRequest} from 'next/server';\n\nexport async function updateSession(\n  request: NextRequest,\n  response: NextResponse\n) {\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({name, value}) =>\n            request.cookies.set(name, value)\n          );\n          cookiesToSet.forEach(({name, value, options}) =>\n            response.cookies.set(name, value, options)\n          );\n        }\n      }\n    }\n  );\n\n  const {\n    data: {\n      user\n    }\n  } = await supabase.auth.getUser();\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Localized Messages with useTranslations Hook - TypeScript/React\nDESCRIPTION: This TypeScript React component utilizes the useTranslations hook from next-intl to retrieve and render a localized 'title' message from the 'About' namespace. The example sets up the translation function and outputs a value from the JSON message structure. Dependencies: next-intl package and properly structured locale JSON files. Inputs: Current locale context. Output: Localized UI rendering.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nfunction About() {\n  const t = useTranslations('About');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using translations in page component with useTranslations (TypeScript/React)\nDESCRIPTION: This React functional component utilizes the useTranslations hook to display a localized title from the 'HomePage' message namespace, rendering the translated text within an H1 element.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/without-i18n-routing.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nexport default function HomePage() {\n  const t = useTranslations('HomePage');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Intl Plugin with Custom Request Config File in TypeScript\nDESCRIPTION: This snippet depicts how to configure the next-intl Next.js plugin to use a custom path for the request configuration file rather than the default `i18n/request.ts`. The plugin `createNextIntlPlugin` is imported and invoked with a string path pointing to a custom file location, e.g., `./somewhere/else/request.ts`. This configuration snippet is intended for use in `next.config.mjs` or equivalent Next.js configuration files and requires `next-intl` installed. Its purpose is to streamline file organization and communicate configuration locations more clearly within larger projects.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport createNextIntlPlugin from 'next-intl/plugin';\n\nconst withNextIntl = createNextIntlPlugin('./somewhere/else/request.ts');\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Rendering rich text translations with useTranslations hook and RichText component (TSX/React)\nDESCRIPTION: This React functional component uses the useTranslations hook from next-intl to fetch translations scoped under 'AboutPage'. It renders a RichText component, passing a function that invokes t.rich with the key 'description' and supplied rich text tags. This pattern replaces deprecated defaultTranslationValues by enabling safer and serializable rich text reuse in translations, offering better type safety and cross-boundary compatibility across React Server Components.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-22.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations} from 'next-intl';\nimport RichText from '@/components/RichText';\n\nfunction AboutPage() {\n\tconst t = useTranslations('AboutPage');\n\treturn <RichText>{(tags) => t.rich('description', tags)}</RichText>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing A/B Testing with next-intl Middleware\nDESCRIPTION: Example of implementing A/B testing by rewriting routes based on cookies before passing the request to next-intl middleware. This example rewrites profile paths to a new version based on a cookie flag.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport createMiddleware from 'next-intl/middleware';\nimport {NextRequest} from 'next/server';\n\nexport default async function middleware(request: NextRequest) {\n  const [, locale, ...segments] = request.nextUrl.pathname.split('/');\n\n  if (locale != null && segments.join('/') === 'profile') {\n    const usesNewProfile =\n      (request.cookies.get('NEW_PROFILE')?.value || 'false') === 'true';\n\n    if (usesNewProfile) {\n      request.nextUrl.pathname = `/${locale}/profile/new`;\n    }\n  }\n\n  const handleI18nRouting = createMiddleware({\n    locales: ['en', 'de'],\n    defaultLocale: 'en'\n  });\n  const response = handleI18nRouting(request);\n  return response;\n}\n\nexport const config = {\n  matcher: ['/', '/(de|en)/:path*']\n};\n```\n\n----------------------------------------\n\nTITLE: Using getNow and getFormatter in Next.js Server Components with dynamicIO (JavaScript)\nDESCRIPTION: Demonstrates how to asynchronously fetch the current time and formatter in Next.js Server Components with the dynamicIO setting, utilizing 'use cache' directive for cache control. Suitable for server-side rendering scenarios requiring up-to-date or static relative time calculations.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {getNow, getFormatter} from 'next-intl/server';\n\nasync function FormattedDate({date}) {\n  'use cache';\n\n  const now = await getNow();\n  const format = await getFormatter();\n\n  return format.relativeTime(date, now);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with next-intl Plugin in TypeScript\nDESCRIPTION: Configuration for Next.js to integrate the next-intl plugin using TypeScript.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NextConfig} from 'next';\nimport createNextIntlPlugin from 'next-intl/plugin';\n\nconst nextConfig: NextConfig = {};\n\nconst withNextIntl = createNextIntlPlugin();\nexport default withNextIntl(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Getting Time Zone - Async Server Components\nDESCRIPTION: This snippet shows how to retrieve the configured time zone inside an async server component by using `getTimeZone`. This is useful for rendering date and time values from the server and provides the ability to format date and time based on the appropriate timezone on the server.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getTimeZone} from 'next-intl/server;\nconst timeZone = await getTimeZone();\n```\n\n----------------------------------------\n\nTITLE: Handling Route Handlers with Translations\nDESCRIPTION: This code snippet exemplifies how to utilize `next-intl` within Next.js Route Handlers. It illustrates how to obtain the locale from the request's search parameters and subsequently retrieve translations based on that locale, ensuring that the `locale` is valid. It uses `getTranslations` and returns a JSON response.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/actions-metadata-route-handlers.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {NextResponse} from 'next/server';\nimport {hasLocale} from 'next-intl';\nimport {getTranslations} from 'next-intl/server';\nimport {routing} from '@/i18n/routing';\n\nexport async function GET(request) {\n  // Example: Receive the `locale` via a search param\n  const {searchParams} = new URL(request.url);\n  const locale = searchParams.get('locale');\n  if (!hasLocale(routing.locales, locale)) {\n    return NextResponse.json({error: 'Invalid locale'}, {status: 400});\n  }\n\n  const t = await getTranslations({locale, namespace: 'Hello'});\n  return NextResponse.json({title: t('title')});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Domain-Based Routing with next-intl/routing (TSX)\nDESCRIPTION: This snippet demonstrates how to configure domain-based routing using the `domains` setting in the `next-intl/routing` configuration. It maps different domains to specific locales, allowing for localized content to be served from different domains. It includes example for using custom `localePrefix` values.  Requires `next-intl/routing` dependency.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: ['en-US', 'en-CA', 'fr-CA', 'fr-FR'],\n  defaultLocale: 'en-US',\n  domains: [\n    {\n      domain: 'us.example.com',\n      defaultLocale: 'en-US',\n      locales: ['en-US']\n    },\n    {\n      domain: 'ca.example.com',\n      defaultLocale: 'en-CA',\n      locales: ['en-CA', 'fr-CA']\n    },\n    {\n      domain: 'fr.example.com',\n      defaultLocale: 'fr-FR',\n      locales: ['fr-FR']\n    }\n  ],\n  localePrefix: {\n    mode: 'as-needed',\n    prefixes: {\n      // Cleaner prefix for `ca.example.com/fr`\n      'fr-CA': '/fr'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Zod with localized error messages\nDESCRIPTION: This snippet demonstrates how to integrate `zod` for validation with `next-intl` to provide localized error messages in Server Actions. It defines a schema using `zod`, and uses `errorMap` for providing context-specific localized messages. This enhances user experience with clear and concise error messages.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/actions-metadata-route-handlers.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getTranslations} from 'next-intl/server';\nimport {loginUser} from '@/services/session';\nimport {z} from 'zod';\n\nconst loginFormSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1)\n});\n\n// ...\n\nasync function loginAction(data: FormData) {\n  'use server';\n\n  const t = await getTranslations('LoginForm');\n  const values = Object.fromEntries(data);\n\n  const result = loginFormSchema.safeParse(values, {\n    errorMap(issue, ctx) {\n      const path = issue.path.join('.');\n\n      const message = {\n        email: t('invalidEmail')\n        password: t('invalidPassword')\n      }[path];\n\n      return {message: message || ctx.defaultError};\n    }\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: BlogPostPage Component utilizing getNow\nDESCRIPTION: Demonstrates how to use the `getNow` function from the previous snippet within the context of a Next.js page component. The component calls `getNow()` and uses the result to pass the current date to another component. This helps ensure a consistent time value for all components within the same request. This example relies on the `getNow()` component to ensure the correct value, and shows how to use it.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport getNow from './getNow';\n\nexport default function BlogPostPage() {\n  // ✅ Will be consistent for the current request,\n  // regardless of the timing of different calls\n  const now = getNow();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Intl Polyfills for next-intl in React Components\nDESCRIPTION: This code demonstrates how to implement Intl API polyfills for browsers that don't natively support all required internationalization features. It creates a React component that uses Cloudflare's polyfill service to load necessary Intl APIs based on the current locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/runtime-requirements.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useLocale} from 'next-intl';\nimport Script from 'next/script';\n\nfunction IntlPolyfills() {\n  const locale = useLocale();\n\n  const polyfills = [\n    'Intl',\n    'Intl.Locale',\n    'Intl.DateTimeFormat',\n    `Intl.DateTimeFormat.~locale.${locale}`,\n    `Intl.NumberFormat`,\n    `Intl.NumberFormat.~locale.${locale}`,\n    'Intl.PluralRules',\n    `Intl.PluralRules.~locale.${locale}`,\n    'Intl.RelativeTimeFormat',\n    `Intl.RelativeTimeFormat.~locale.${locale}`,\n    'Intl.ListFormat',\n    `Intl.ListFormat.~locale.${locale}`\n  ];\n\n  return (\n    <Script\n      strategy=\"beforeInteractive\"\n      src={\n        'https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?features=' +\n        polyfills.join(',')\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring AppConfig Locale Using a Custom Locales Array in TypeScript\nDESCRIPTION: This snippet augments the `AppConfig` interface to set the `Locale` type based on a manually defined constant array of locales, useful if locales aren't imported from a routing config. The constant array `locales` lists supported locale strings as literal types. This approach provides type safety for locales passed to next-intl methods, ensuring consistent locale usage. It should be placed in a TypeScript file.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Potentially imported from a shared config\nconst locales = ['en', 'de'] as const;\n\ndeclare module 'next-intl' {\n  interface AppConfig {\n    // ...\n    Locale: (typeof locales)[number];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest next-intl Version\nDESCRIPTION: This command updates the next-intl package to the latest available version using npm.  It ensures that you have the most recent features, bug fixes, and improvements.  It is crucial to run this command to upgrade after reviewing the breaking changes and updates.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-0.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-intl@latest\n```\n\n----------------------------------------\n\nTITLE: Formatting React elements as list items with next-intl\nDESCRIPTION: This snippet shows how to format a list of React elements, such as links, using 'format.list' from 'useFormatter'. The example maps user data to anchor tags and passes the array to 'format.list', which returns an iterable of React elements suitable for rendering. It requires 'next-intl' and React.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/lists.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n\n  const users = [\n    {id: 1, name: 'Alice'},\n    {id: 2, name: 'Bob'},\n    {id: 3, name: 'Charlie'}\n  ];\n\n  const items = users.map((user) => (\n    <a key={user.id} href={`/user/${user.id}`}>\n      {user.name}\n    </a>\n  ));\n\n  return <p>{format.list(items)}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Pathnames Navigation in next-intl 3.0\nDESCRIPTION: This snippet shows how to set up localized pathnames navigation in next-intl 3.0, allowing different URL structures per locale while maintaining consistent internal routing paths. The configuration enables features like automatically localizing URLs based on the current locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-0.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createLocalizedPathnamesNavigation,\n  Pathnames\n} from 'next-intl/navigation';\n\nexport const locales = ['en', 'de'] as const;\n\n// The `pathnames` object holds pairs of internal\n// and external paths, separated by locale.\nexport const pathnames = {\n  // If all locales use the same pathname, a\n  // single external path can be provided.\n  '/': '/',\n  '/blog': '/blog',\n\n  // If locales use different paths, you can\n  // specify each external path per locale.\n  '/about': {\n    en: '/about',\n    de: '/ueber-uns'\n  }\n} satisfies Pathnames<typeof locales>;\n\nexport const {Link, redirect, usePathname, useRouter} =\n  createLocalizedPathnamesNavigation({locales, pathnames});\n```\n\n----------------------------------------\n\nTITLE: Defining ICU Message Syntax in a JSON File\nDESCRIPTION: Example structure for a localization JSON file (`en.json`) using ICU message syntax. It defines messages under a namespace (`UserProfile`) and includes examples of variable interpolation (`{firstName}`), date formatting (`{memberSince, date, short}`), and pluralization rules (`{count, plural, ...}`). This file provides the translations consumed by the `useTranslations` hook.\nSOURCE: https://github.com/amannn/next-intl/blob/main/packages/use-intl/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// en.json\n{\n  \"UserProfile\": {\n    \"title\": \"{firstName}'s profile\",\n    \"membership\": \"Member since {memberSince, date, short}\",\n    \"followers\": \"{count, plural, \\n                    =0 {No followers yet} \\n                    =1 {One follower} \\n                    other {# followers} \\n                  }\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using next-intl's useFormatter hook for list formatting in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the 'useFormatter' hook from 'next-intl' to format a list of items into locale-specific conjunction or disjunction strings. It involves initializing the formatter and calling 'format.list' with appropriate options. Dependencies include 'next-intl' and React.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/lists.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n  const items = ['HTML', 'CSS', 'JavaScript'];\n\n  // Renders \"HTML, CSS, and JavaScript\"\n  format.list(items, {type: 'conjunction'});\n\n  // Renders \"HTML, CSS, or JavaScript\"\n  format.list(items, {type: 'disjunction'});\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Array of Messages (next-intl, TSX)\nDESCRIPTION: Demonstrates how to render a list of messages by mapping over a hardcoded array of keys. It uses the `useTranslations` hook to retrieve translated strings for each key's 'title' and 'value' properties from the 'CompanyStats' namespace. Requires `next-intl` and a React/Next.js environment.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n\nfunction CompanyStats() {\n  const t = useTranslations('CompanyStats');\n  const keys = ['yearsOfService', 'happyClients', 'partners'] as const;\n\n  return (\n    <ul>\n      {keys.map((key) => (\n        <li key={key}>\n          <h2>{t(`${key}.title`)}</h2>\n          <p>{t(`${key}.value`)}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing No Hardcoded Literals with ESLint (JavaScript)\nDESCRIPTION: This ESLint configuration snippet demonstrates how to enable the `react/jsx-no-literals` rule. This rule helps identify hardcoded string literals directly within JSX markup, which should ideally be replaced with localized messages using next-intl. It's useful during migration to ensure all visible text is externalized, but note that it does not catch hardcoded attribute values.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/linting.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\n  rules: {\n    // Avoid hardcoded labels\n    'react/jsx-no-literals': 'error'\n  }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Strictly Typed Formats in next-intl Formatter in TypeScript\nDESCRIPTION: This snippet demonstrates that when the `Formats` type is strictly defined and included in `AppConfig`, calls to `useFormatter()` enforce validation of the format name strings passed to `format.dateTime`, `format.number`, and `format.list`. Unknown formats result in TypeScript errors while valid formats pass successfully.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const format = useFormatter();\n\n  // ✖️ Unknown format string\n  format.dateTime(new Date(), 'unknown');\n\n  // ✅ Valid format\n  format.dateTime(new Date(), 'short');\n\n  // ✅ Valid format\n  format.number(2, 'precise');\n\n  // ✅ Valid format\n  format.list(['HTML', 'CSS', 'JavaScript'], 'enumeration');\n}\n```\n\n----------------------------------------\n\nTITLE: Using NextIntlClientProvider to Make All Messages Available Client-side\nDESCRIPTION: This code shows how to wrap the entire layout with `NextIntlClientProvider` to supply all translation messages directly to Client Components, which may be suitable for very dynamic applications that rely heavily on client-side interactivity. It notes performance considerations and ongoing optimization research.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/server-client-components.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {NextIntlClientProvider} from 'next-intl';\n\nexport default async function RootLayout(/* ... */) {\n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider>...</NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic LocalePrefix based on Vercel Environment (TSX)\nDESCRIPTION: This code snippet shows how to set the `localePrefix` setting dynamically based on the `VERCEL_PROJECT_PRODUCTION_URL` environment variable. This allows different locale prefixes to be used for different domains when building the app.  Requires `next-intl/routing` and access to the `VERCEL_PROJECT_PRODUCTION_URL` environment variable.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nconst isUsDomain =\n  process.env.VERCEL_PROJECT_PRODUCTION_URL === 'us.example.com';\n\nexport const routing = defineRouting({\n  locales: isUsDomain ? ['en-US'] : ['en-CA', 'fr-CA'],\n  defaultLocale: isUsDomain ? 'en-US' : 'en-CA',\n  localePrefix: isUsDomain ? 'never' : 'always'\n});\n```\n\n----------------------------------------\n\nTITLE: Understanding Link Behavior with the locale Prop (TypeScript)\nDESCRIPTION: Example showing that using the `locale` prop on the `next-intl` `Link` component forces a locale prefix in the generated `href` (e.g., `/en/about`), even if the `localePrefix` setting is 'as-needed' and 'en' is the default locale. This behavior is intentional to ensure the locale cookie can be updated correctly before navigation, potentially via a redirect.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Links to `/en/about`\n<Link href=\"/about\" locale=\"en\">\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Routing with getPathname for Parameterized Links (TypeScript/TSX)\nDESCRIPTION: Demonstrates how getPathname supports both plain string routes and parameterized templates depending on the pathnames setting. Allows generating localized links or canonical paths that reflect the actual resource or page being referenced. Inputs include locale, href string, or object with pathname and params. Outputs the correct, locale-resolved pathname for navigation.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_19\n\nLANGUAGE: TSX\nCODE:\n```\n// 1. A final string (when not using `pathnames`)\nconst pathname = getPathname({\n  locale: 'en',\n  href: '/users/12'\n});\n\n// 2. An object (when using `pathnames`)\nconst pathname = getPathname({\n  locale: 'en',\n  href: {\n    pathname: '/users/[userId]',\n    params: {userId: '5'}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Request Locale (TSX)\nDESCRIPTION: Illustrates the use of getRequestConfig with the new hasLocale helper to determine the correct locale for a request. It checks if the requested locale is within the list of supported locales and falls back to the default locale if not, ensuring a valid locale is used for loading messages.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server';\nimport {hasLocale} from 'next-intl';\nimport {routing} from './routing';\n\nexport default getRequestConfig(async ({requestLocale}) => {\n  // Typically corresponds to the `[locale]` segment\n  const requested = await requestLocale;\n  const locale = hasLocale(routing.locales, requested)\n    ? requested\n    : routing.defaultLocale;\n\n  return {\n    locale,\n    messages: (await import(`../../messages/${locale}.json`)).default\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ICU Select Messages for useLocaleLabel - JSON\nDESCRIPTION: This JSON message structure uses the ICU select syntax to provide different translations based on a variable ('locale'). The single 'label' entry can output 'English', 'German', or 'Unknown' depending on the runtime argument. Intended for use with the previous custom useLocaleLabel hook within next-intl. Dependency: next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"useLocaleLabel\": {\n    \"label\": \"{locale, select, en {English} de {German} other {Unknown}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering AsyncComponent and Counter with Next.js\nDESCRIPTION: This snippet renders the `AsyncComponent` and `Counter` React components. The `AsyncComponent` likely fetches data or performs asynchronous operations, while the `Counter` component seems to increment a value.  It imports these components using ES6 import syntax. There are no specific parameters, the output renders the components on a webpage. This is a client-side rendering, making it dependent on client-side JavaScript execution.\nSOURCE: https://github.com/amannn/next-intl/blob/main/examples/example-app-router-playground/src/app/[locale]/about/de.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AsyncComponent from '@/components/AsyncComponent';\nimport Counter from '@/components/client/02-MessagesOnClientCounter/Counter';\n\n<AsyncComponent />\n<Counter />\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone - Provider\nDESCRIPTION: This snippet shows how to set the time zone using the `NextIntlClientProvider` on the client-side. This allows you to specify the time zone explicitly or pass it based on request information or user settings.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst timeZone = 'Europe/Vienna';\n\n<NextIntlClientProvider timeZone={timeZone}>...<NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Root layout component integrating locale and NextIntlClientProvider (TypeScript/React)\nDESCRIPTION: This React server component retrieves the user's locale asynchronously and wraps children with NextIntlClientProvider, setting the document language and providing translation data to client components adapting to the user's locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/without-i18n-routing.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {NextIntlClientProvider} from 'next-intl';\nimport {getLocale} from 'next-intl/server';\n\nexport default async function RootLayout({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  const locale = await getLocale();\n\n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider>{children}</NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with date-fns-tz in a Given Time Zone (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to use the date-fns-tz package to format dates in a specific time zone for server or client components. The BlogPostPublishedDate component receives a Date object and a timeZone string, then displays the formatted date (e.g., 'Sep 25, 2024') according to the provided zone. The date-fns-tz dependency is required. Inputs are a published Date and a timeZone. Output is a localized date string in the specified format. Limitations include format string rigidity and the need for correct time zone strings.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/date-formatting-nextjs.mdx#_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport {format} from 'date-fns-tz';\n\ntype Props = {\n  published: Date;\n  timeZone: string;\n};\n\nexport default function BlogPostPublishedDate({published, timeZone}: Props) {\n  return <p>{format(published, timeZone, 'MMM d, yyyy')}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Next.js (JavaScript)\nDESCRIPTION: This JavaScript snippet imports two components: `AsyncComponent` from a relative path and `Counter` from another. `AsyncComponent` probably leverages dynamic imports to load the component on demand. The `Counter` component likely renders client-side, making it interactive. The imported components are designed for use within the React application's component structure to provide various functionalities.\nSOURCE: https://github.com/amannn/next-intl/blob/main/examples/example-app-router-playground/src/app/[locale]/about/es.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AsyncComponent from '@/components/AsyncComponent';\nimport Counter from '@/components/client/02-MessagesOnClientCounter/Counter';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Time with useNow/getNow in next-intl (tsx)\nDESCRIPTION: Shows how to retrieve the configured `now` value (defaulting to the current date and time) in regular components using the `useNow` hook and in Async Server Components using the `getNow` function from `next-intl`. This is particularly useful when providing a consistent time reference for relative time formatting.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// Regular components\nimport {useNow} from 'next-intl';\nconst now = useNow();\n\n// Async Server Components\nimport {getNow} from 'next-intl/server';\nconst now = await getNow();\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Decorator for next-intl in Storybook with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set up a global decorator in Storybook that wraps all stories with NextIntlClientProvider, enabling the rendering of components that use next-intl for internationalization. The decorator injects the locale and messages required by the provider, allowing components using hooks like useTranslations to function correctly within the Storybook environment. The configuration must import Preview from @storybook/react and load the message JSON file. Note that async Server Components are experimental in Storybook and may require additional setup.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/storybook.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Preview} from '@storybook/react';\nimport defaultMessages from '../messages/en.json';\n\nconst preview: Preview = {\n  decorators: [\n    (Story) => (\n      <NextIntlClientProvider\n        locale=\"en\"\n        messages={defaultMessages}\n        // ... potentially other config\n      >\n        <Story />\n      </NextIntlClientProvider>\n    )\n  ]\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Initializing `use-intl` in a React Application (TSX)\nDESCRIPTION: Demonstrates the basic setup for internationalization in a React application using `use-intl`. It involves wrapping the application with `IntlProvider`, passing `messages` and `locale` props, and using the `useTranslations` hook within components to get the translation function (`t`) for rendering localized strings with dynamic values.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/core-library.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {IntlProvider, useTranslations} from 'use-intl';\n\n// You can get the messages from anywhere you like. You can also\n// fetch them from within a component and then render the provider\n// along with your app once you have the messages.\nconst messages = {\n  App: {\n    hello: 'Hello {username}!'\n  }\n};\n\nfunction Root() {\n  return (\n    <IntlProvider messages={messages} locale=\"en\">\n      <App user={{name: 'Jane'}} />\n    </IntlProvider>\n  );\n}\n\nfunction App({user}) {\n  const t = useTranslations('App');\n  return <h1>{t('hello', {username: user.name})}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Global Formats in Translation Messages (json)\nDESCRIPTION: Example `en.json` localization file showing how to reference globally defined formats ('short' for date, 'precise' for number) directly within translation message strings using ICU message syntax for `next-intl`. Placeholders like `{orderDate, date, short}` utilize the format named 'short'.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ordered\": \"You've ordered this product on {orderDate, date, short}\",\n  \"latitude\": \"Latitude: {latitude, number, precise}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Localized User Profile Component with next-intl in React\nDESCRIPTION: This example shows how to use the useTranslations hook from next-intl to create a localized user profile component. It demonstrates message interpolation, date formatting, and pluralization.\nSOURCE: https://github.com/amannn/next-intl/blob/main/README.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// UserProfile.tsx\nimport {useTranslations} from 'next-intl';\n\nexport default function UserProfile({user}) {\n  const t = useTranslations('UserProfile');\n\n  return (\n    <section>\n      <h1>{t('title', {firstName: user.firstName})}</h1>\n      <p>{t('membership', {memberSince: user.memberSince})}</p>\n      <p>{t('followers', {count: user.numFollowers})}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Next-intl Components with React Testing Library in Vitest\nDESCRIPTION: This snippet demonstrates how to render and test a component wrapped with NextIntlClientProvider to provide the locale and messages during unit testing. This basic test case imports messages from a JSON file and passes them to the provider.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/testing.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from '@testing-library/react';\nimport {NextIntlClientProvider} from 'next-intl';\nimport {expect, it} from 'vitest';\nimport messages from '../../messages/en.json';\nimport UserProfile from './UserProfile';\n\nit('renders', () => {\n  render(\n    <NextIntlClientProvider locale=\"en\" messages={messages}>\n      <UserProfile />\n    </NextIntlClientProvider>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Locale Detection with next-intl/routing (TSX)\nDESCRIPTION: This code shows how to disable locale detection based on the `accept-language` header and cookies by setting `localeDetection` to `false`. This forces the application to rely solely on the URL (locale prefix or domain) to determine the locale. Requires `next-intl/routing` dependency.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ...\n  localeDetection: false\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Plain Numbers using next-intl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to format plain numbers using the `useFormatter` hook provided by `next-intl`. It formats the number with currency style and USD currency. The `format.number()` function takes the number and an options object as arguments, where options provide styles like currency and currency codes. The output will vary based on the user's locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/numbers.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useFormatter} from 'next-intl';\n\nfunction Component() {\n  const format = useFormatter();\n\n  // Renders \"$499.90\"\n  format.number(499.9, {style: 'currency', currency: 'USD'});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Next-intl Compatibility\nDESCRIPTION: Jest configuration to properly transform imports from next-intl, which is necessary since Jest doesn't have built-in ESM support. This configuration extends Next.js Jest setup and adds a transformIgnorePatterns option to handle next-intl module.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/testing.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst nextJest = require('next/jest');\n\nconst createJestConfig = nextJest({dir: './'});\n\nmodule.exports = async () => ({\n  ...(await createJestConfig({\n    testEnvironment: 'jsdom',\n    rootDir: 'src'\n  })()),\n  // https://github.com/vercel/next.js/issues/40183\n  transformIgnorePatterns: ['node_modules/(?!next-intl)/']\n});\n```\n\n----------------------------------------\n\nTITLE: Sherlock Project Configuration for next-intl Integration\nDESCRIPTION: Configuration snippet for Sherlock extension in 'project.inlang/settings.json' to define project schema, specify source language, target languages, and link to the next-intl message pattern. Enables message extraction, linting, and integration with inlang ecosystem.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/vscode-integration.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://inlang.com/schema/project-settings\",\n  \"sourceLanguageTag\": \"en\",\n  \"languageTags\": [\"en\", \"de\"],\n  \"modules\": [\n    \"https://cdn.jsdelivr.net/npm/@inlang/plugin-next-intl@latest/dist/index.js\"\n  ],\n  \"plugin.inlang.nextIntl\": {\n    \"pathPattern\": \"./messages/{languageTag}.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextIntlClientProvider for Static Rendering in App Router\nDESCRIPTION: This snippet demonstrates how to configure NextIntlClientProvider with explicit props to maintain static rendering capability in App Router applications. By providing locale, timeZone, and date explicitly, the component avoids falling back to dynamic rendering.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-0.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NextIntlClientProvider\n  messages={messages}\n  // By providing these props explicitly,\n  // the provider can render statically.\n  timeZone=\"Europe/Vienna\"\n  now={new Date()}\n  locale={locale}\n>\n  ...\n</NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Setting Now - Provider\nDESCRIPTION: This code snippet demonstrates setting the 'now' value on the `NextIntlClientProvider` to provide a global reference point for relative date and time formatting within client-side components.  This allows for consistent behavior across the application, especially when used for testing purposes.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst now = new Date('2024-11-14T10:36:01.516Z');\n\n<NextIntlClientProvider now={now}>...</NextIntlClientProvider>;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Request Configuration for Server Components\nDESCRIPTION: Configuration to provide locale-specific data to Server Components based on the current request.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getRequestConfig} from 'next-intl/server';\nimport {hasLocale} from 'next-intl';\nimport {routing} from './routing';\n\nexport default getRequestConfig(async ({requestLocale}) => {\n  // Typically corresponds to the `[locale]` segment\n  const requested = await requestLocale;\n  const locale = hasLocale(routing.locales, requested)\n    ? requested\n    : routing.defaultLocale;\n\n  return {\n    locale,\n    messages: (await import(`../../messages/${locale}.json`)).default\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using useNow hook for consistent current time in React components (JavaScript)\nDESCRIPTION: Utilizes the useNow hook to obtain a stable current timestamp across re-renders, optionally updating periodically or initialized from a global value for consistency, such as in tests or SSR scenarios.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useNow, useFormatter} from 'next-intl';\n\nfunction FormattedDate({date}) {\n  const now = useNow();\n  const format = useFormatter();\n\n  format.relativeTime(date, now);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Manifest file with Translations\nDESCRIPTION: This snippet shows how to use `next-intl` in a manifest file, since the `locale` is not automatically inferred. It provides a way to generate a localized manifest for your PWA.  It explicitly defines the locale and then uses `getTranslations` to fetch the localized name for the manifest.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/actions-metadata-route-handlers.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MetadataRoute} from 'next';\nimport {getTranslations} from 'next-intl/server';\n\nexport default async function manifest(): Promise<MetadataRoute.Manifest> {\n  // Pick a locale that is representative of the app\n  const locale = 'en';\n\n  const t = await getTranslations({\n    namespace: 'Manifest',\n    locale\n  });\n\n  return {\n    name: t('name'),\n    start_url: '/',\n    theme_color: '#101E33'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Example of embedding a date in message using ICU syntax in JSON localization file\nDESCRIPTION: Demonstrates how to embed a date within a message string in the JSON resource file using ICU date formatting syntax. It supports various date styles such as 'medium' format, which can be utilized for localized date presentation.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ordered\": \"Ordered on {orderDate, date, medium}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Strictly Typing Locale (TSX)\nDESCRIPTION: Demonstrates how to define a strict type for the application's locale using the next-intl AppConfig augmentation. By basing the Locale type on the defined routing locales, APIs interacting with locales gain improved type safety.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// global.ts\n\nimport {routing} from '@/i18n/routing';\n\ndeclare module 'next-intl' {\n  interface AppConfig {\n    // ...\n    Locale: (typeof routing.locales)[number];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ClientProvider Prop Inheritance (TSX)\nDESCRIPTION: Demonstrates how to explicitly prevent NextIntlClientProvider from inheriting messages and formats from the parent context. Setting these props to null allows opting out of the new default inheritance behavior.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<NextIntlClientProvider\n  // Don't pass these to the client\n  messages={null}\n  formats={null}\n>\n  ...\n</NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Redirect Root Path to Default Locale in Static Export (Next.js)\nDESCRIPTION: Provides a simple component for the root `app/page.tsx` file when using Next.js static export with `next-intl`. Since middleware is inactive in static exports, this component explicitly redirects users requesting the root path (`/`) to the default locale's path (e.g., `/en`) using `next/navigation/redirect`. This ensures users land on a localized page.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {redirect} from 'next/navigation';\n\n// Redirect the user to the default locale when `/` is requested\nexport default function RootPage() {\n  redirect('/en');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Card Grid for Workflow Documentation\nDESCRIPTION: Renders a grid of Card components inside a Cards container, each linking to different workflow and integration documentation pages for next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Cards className=\"mt-8 lg:w-1/2\">\n  <Card title=\"TypeScript augmentation\" href=\"/docs/workflows/typescript\" />\n  <Card\n    title=\"Localization management with Crowdin\"\n    href=\"/docs/workflows/localization-management\"\n  />\n  <Card title=\"VSCode integration\" href=\"/docs/workflows/vscode-integration\" />\n  <Card title=\"ESLint\" href=\"/docs/workflows/linting\" />\n  <Card title=\"Storybook\" href=\"/docs/workflows/storybook\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Next-intl Compatibility\nDESCRIPTION: Configuration for Vitest to correctly process imports within next-intl. This is necessary because next-intl is bundled as ESM-only but imports from 'next/navigation' without file extensions to avoid Next.js deoptimization.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments/testing.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {defineConfig} from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    server: {\n      deps: {\n        // https://github.com/vercel/next.js/issues/77200\n        inline: ['next-intl']\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring next-intl plugin in next.config.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the CommonJS setup for integrating the next-intl plugin into Next.js's configuration in JavaScript, providing server-side locale management.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/without-i18n-routing.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createNextIntlPlugin = require('next-intl/plugin');\n\nconst withNextIntl = createNextIntlPlugin();\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nmodule.exports = withNextIntl(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Loading Translation Messages in getStaticProps for Multiple Languages\nDESCRIPTION: Implements the getStaticProps function to load locale-specific translation messages. Imports JSON files based on the current locale from Next.js context and passes them as props to the page component.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/pages-router.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport async function getStaticProps(context) {\n  return {\n    props: {\n      // You can get the messages from anywhere you like. The recommended\n      // pattern is to put them in JSON files separated by locale and read\n      // the desired one based on the `locale` received from Next.js.\n      messages: (await import(`../../messages/${context.locale}.json`)).default\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Example Component\nDESCRIPTION: This snippet imports the `Example` component. This component is likely used to display and showcase different configurations and usages of the next-intl library within various project setups, such as Next.js app router and page router, demonstrating different routing strategies.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/examples.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Example from '@/components/Example';\n```\n\n----------------------------------------\n\nTITLE: Configuring Crowdin Integration for next-intl with YAML\nDESCRIPTION: A configuration file that maps the local translation files in a repository to Crowdin. It specifies that the English messages file is the source, and defines the pattern for translated files using the locale as a variable.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/localization-management.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nfiles:\n  - source: /messages/en.json\n    translation: /messages/%locale%.json\n```\n\n----------------------------------------\n\nTITLE: Getting Time Zone - Regular Components\nDESCRIPTION: This snippet shows how to retrieve the configured time zone within a regular client-side component using the `useTimeZone` hook. This allows components to access the current time zone for formatting dates and times.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useTimeZone} from 'next-intl;\nconst timeZone = useTimeZone();\n```\n\n----------------------------------------\n\nTITLE: Combine next-intl and Supabase Middleware in Next.js\nDESCRIPTION: Shows the main middleware file integrating `next-intl` and the custom Supabase session update utility. It first executes the `next-intl` middleware to get a `NextResponse` object. This response, along with the original request, is then passed to the `updateSession` utility, ensuring that both internationalization routing and Supabase session handling occur in sequence.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/middleware.mdx#_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport createMiddleware from 'next-intl/middleware';\nimport {type NextRequest} from 'next/server';\nimport {routing} from './i18n/routing';\nimport {updateSession} from './utils/supabase/middleware';\n\nconst handleI18nRouting = createMiddleware(routing);\n\nexport async function middleware(request: NextRequest) {\n  const response = handleI18nRouting(request);\n\n  // A `response` can now be passed here\n  return await updateSession(request, response);\n}\n\nexport const config = {\n  matcher: ['/', '/(de|en)/:path*']\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Static Locale for Client Provider with NextIntlClientProvider TSX\nDESCRIPTION: Demonstrates how to explicitly set a static locale directly on the `NextIntlClientProvider` component. This overrides any inherited locale configuration and ensures the client-side provider uses the specified locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<NextIntlClientProvider locale=\"en\">...</NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating Internationalized Home Page with Client Component\nDESCRIPTION: Example page component using useTranslations hook to render localized content in a client component.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useTranslations} from 'next-intl';\nimport {Link} from '@/i18n/navigation';\n\nexport default function HomePage() {\n  const t = useTranslations('HomePage');\n  return (\n    <div>\n      <h1>{t('title')}</h1>\n      <Link href=\"/about\">{t('about')}</Link>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Cookie Expiration (TSX)\nDESCRIPTION: Shows how to configure the locale cookie's expiration time (maxAge) within the defineRouting configuration. This is part of the GDPR compliance changes, allowing customization of cookie behavior beyond the default session cookie.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// i18n/routing.tsx\n\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // ...\n\n  localeCookie: {\n    // Expire in one year\n    maxAge: 60 * 60 * 24 * 365\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Environment Cards with React Components\nDESCRIPTION: Displays a set of environment options supported by next-intl using React components, including links to detailed documentation. The snippet depends on Card and Cards components for layout and presentation.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/environments.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Card from '@/components/Card';\nimport Cards from '@/components/Cards';\n```\n\n----------------------------------------\n\nTITLE: Understanding TypeScript Control Flow Limitation after redirect (TypeScript/TSX)\nDESCRIPTION: Demonstrates a limitation of TypeScript's control flow analysis which prevents type narrowing after calling redirect. When redirect is used for required field checking, TypeScript may not infer unreachable code correctly. Includes a workaround by explicitly annotating the redirect function's type to enable narrowing. Important for developers working with strict TypeScript and navigation guards.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_17\n\nLANGUAGE: TSX\nCODE:\n```\nimport {redirect} from '@/i18n/navigation';\n\nfunction UserProfile({userId}: {userId?: string}) {\n  if (!userId) {\n    redirect({href: '/login', locale: 'en'});\n  }\n\n  // `userId` should be narrowed to `string` here,\n  // but TypeScript doesn't analyze this correctly\n}\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Enable type narrowing after calling `redirect`\nconst {/* ..., */ redirect: _redirect} = createNavigation(routing);\n\nexport const redirect: typeof _redirect = _redirect;\n```\n\n----------------------------------------\n\nTITLE: Preventing Messages Inheritance with NextIntlClientProvider TSX\nDESCRIPTION: Shows how to prevent specific serializable props, such as `messages`, from being inherited by Client Components when using `NextIntlClientProvider`. Setting the prop to `null` explicitly excludes it from the client-side bundle.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/configuration.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NextIntlClientProvider\n  // Don't pass any messages to the client\n  messages={null}\n  // ...\n>\n  ...\n</NextIntlClientProvider>\n```\n\n----------------------------------------\n\nTITLE: Installing Next-Intl v4.0 (Bash)\nDESCRIPTION: This command shows how to install the latest version (v4.0) of the next-intl package using npm. This command upgrades the next-intl dependency in the project's `package.json` file to version 4.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install next-intl@4\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation APIs with next-intl\nDESCRIPTION: Setup for internationalized navigation components and hooks that integrate with Next.js navigation.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createNavigation} from 'next-intl/navigation';\nimport {routing} from './routing';\n\n// Lightweight wrappers around Next.js' navigation\n// APIs that consider the routing configuration\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n  createNavigation(routing);\n```\n\n----------------------------------------\n\nTITLE: Disabling Type-Aware ESLint Rules for Improved Editor Performance in JavaScript\nDESCRIPTION: This snippet configures ESLint to conditionally enable or disable expensive, type-aware linting rules (`@typescript-eslint/no-misused-promises`) only during continuous integration runs to avoid editor slowdowns caused by these rules during local development or file saves. This JavaScript snippet is typical in an ESLint config file to manage performance related to TypeScript linting.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/typescript.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\n  // Run expensive, type-aware linting only on CI\n  '@typescript-eslint/no-misused-promises': process.env.CI\n    ? 'error'\n    : 'off'\n```\n\n----------------------------------------\n\nTITLE: Initializing next-intl Navigation for Dynamic Locales (TypeScript)\nDESCRIPTION: Illustrates calling `createNavigation` without the `locales` argument in the configuration. This approach is suitable for applications where locales can be added or removed at runtime, allowing any string encountered to be treated as a valid locale. Note that the `locales` argument remains mandatory for the middleware configuration.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing/navigation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createNavigation} from 'next-intl/navigation';\n\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n  createNavigation({\n    // ... potentially other routing\n    // config, but no `locales` ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for the Workflows Page\nDESCRIPTION: Imports Card and Cards components from the project's components directory to create a navigation interface for workflow documentation links.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Card from '@/components/Card';\nimport Cards from '@/components/Cards';\n```\n\n----------------------------------------\n\nTITLE: Enforcing Consistent Navigation API Imports with ESLint (JavaScript)\nDESCRIPTION: This snippet shows how to use the `no-restricted-imports` ESLint rule to enforce importing navigation APIs from a specific path, such as `@/i18n/navigation`, when using i18n routing with next-intl. It prevents developers from accidentally importing navigation functions like `useRouter`, `usePathname`, `redirect`, or `permanentRedirect` directly from `next/navigation` or `next/link`, ensuring the locale-aware versions are used.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/workflows/linting.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\n  rules: {\n    // Consistently import navigation APIs from `@/i18n/navigation`\n    'no-restricted-imports': [\n      'error',\n      {\n        name: 'next/link',\n        message': 'Please import from `@/i18n/navigation` instead.'\n      },\n      {\n        name': 'next/navigation',\n        importNames': ['redirect', 'permanentRedirect', 'useRouter', 'usePathname'],\n        message': 'Please import from `@/i18n/navigation` instead.'\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Matcher for Base Path in Next.js (TSX)\nDESCRIPTION: This snippet shows the configuration for the Next.js middleware `matcher` option when a `basePath` is used. It highlights the importance of including '/' in the matcher array to ensure that the middleware correctly handles requests for the root path relative to the configured base path.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/routing.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport const config = {\n  // The `matcher` is relative to the `basePath`\n  matcher: [\n    // This entry handles the root of the base\n    // path and should always be included\n    '/'\n\n    // ... other matcher config\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Translation Messages in getStaticProps for Single Language\nDESCRIPTION: Implements the getStaticProps function to load translation messages for a single language. Hardcodes the locale to 'en' and imports the corresponding JSON file to pass as props to the page component.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/pages-router.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport async function getStaticProps() {\n  const locale = 'en';\n\n  return {\n    props: {\n      // You can get the messages from anywhere you like. The recommended pattern\n      // is to put them in JSON files separated by locale (e.g. `en.json`).\n      messages: (await import(`../../messages/${locale}.json`)).default\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting development server with pnpm\nDESCRIPTION: Runs the development server for the 'next-intl' project locally, enabling live preview and testing.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Messages with ICU Syntax in JSON\nDESCRIPTION: This snippet shows the JSON structure for defining translations with next-intl. It includes examples of simple variable interpolation, date formatting, and plural rules using ICU message syntax.\nSOURCE: https://github.com/amannn/next-intl/blob/main/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// en.json\n{\n  \"UserProfile\": {\n    \"title\": \"{firstName}'s profile\",\n    \"membership\": \"Member since {memberSince, date, short}\",\n    \"followers\": \"{count, plural, ↵\n                    =0 {No followers yet} ↵\n                    =1 {One follower} ↵\n                    other {# followers} ↵\n                  }\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up i18n Routing Configuration\nDESCRIPTION: Configuration for internationalization routing including locale definition and default locale.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineRouting} from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  // A list of all locales that are supported\n  locales: ['en', 'de'],\n\n  // Used when no locale matches\n  defaultLocale: 'en'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with pnpm\nDESCRIPTION: Installs the necessary dependencies for the 'next-intl' project using the pnpm package manager.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Strictly Typed Locale (TSX)\nDESCRIPTION: Shows how to import and use the application's strictly-typed Locale type, defined via AppConfig augmentation. This allows functions that accept a locale parameter to benefit from compile-time type checks.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-4-0.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Locale} from 'next-intl';\n\nasync function getPosts(locale: Locale) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing next-intl Package\nDESCRIPTION: Command to install the next-intl package using npm.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install next-intl\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Rendering with generateStaticParams\nDESCRIPTION: Function to enable static rendering for internationalized pages by pre-defining locale parameters.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/app-router/with-i18n-routing.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {routing} from '@/i18n/routing';\n\nexport function generateStaticParams() {\n  return routing.locales.map((locale) => ({locale}));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextIntlClientProvider in _app.tsx for Single Language\nDESCRIPTION: Sets up the Next-intl provider in _app.tsx for a single language (English) application. Configures the time zone and passes messages from page props to make them available throughout the application.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/getting-started/pages-router.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {NextIntlClientProvider} from 'next-intl';\n\nexport default function App({Component, pageProps}) {\n  return (\n    <NextIntlClientProvider\n      locale=\"en\"\n      timeZone=\"Europe/Vienna\"\n      messages={pageProps.messages}\n    >\n      <Component {...pageProps} />\n    </NextIntlClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and manipulating dates with date-fns in JavaScript\nDESCRIPTION: Shows how to parse ISO 8601 date strings into Date objects and manipulate dates, such as subtracting days, using the date-fns library. Useful for preparing dates before formatting them with next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {subDays} from 'date-fns';\n\n// Make sure your date string conforms to ISO 8601\nconst date = new Date('2020-11-20T10:36:01.516Z');\n\n// 2020-11-18T10:36:01.516Z\nconst twoDaysAgo = subDays(date, 2);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post Links with next-intl\nDESCRIPTION: This JSX code renders a series of BlogPostLink components within a div. Each BlogPostLink component represents a link to a specific blog post and includes properties like href, title, date, and author.  The components are styled with flexbox to create a column layout with a gap.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/index.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"flex flex-col gap-4 py-8\">\n  <BlogPostLink\n    href=\"/blog/next-intl-4-0\"\n    title=\"next-intl 4.0\"\n    date=\"Mar 12, 2025\"\n    author=\"By Jan Amann\"\n  />\n  <BlogPostLink\n    href=\"/blog/next-intl-3-22\"\n    title=\"next-intl 3.22: Incrementally moving forward\"\n    date=\"Oct 21, 2024\"\n    author=\"By Jan Amann\"\n  />\n  <BlogPostLink\n    href=\"/blog/date-formatting-nextjs\"\n    title=\"Reliable date formatting in Next.js\"\n    date=\"Sep 25, 2024\"\n    author=\"By Jan Amann\"\n  />\n  <BlogPostLink\n    href=\"/blog/next-intl-3-0\"\n    title=\"next-intl 3.0\"\n    date=\"Nov 14, 2023\"\n    author=\"By Jan Amann\"\n  />\n  <BlogPostLink\n    href=\"/blog/translations-outside-of-react-components\"\n    title=\"How (not) to use translations outside of React components\"\n    date=\"Apr 21, 2023\"\n    author=\"By Jan Amann\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example of localizing date with custom format in JavaScript\nDESCRIPTION: Provides an example of localizing a date using the `t` function with a `date` format type, alongside specifying custom formatting options such as day, month, and year. This allows dynamic date localization based on locale and formatting preferences.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/dates-times.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nt(\n  'ordered',\n  {orderDate: new Date('2020-11-20T10:36:01.516Z')},\n  {\n    dateTime: {\n      short: {\n        day: 'numeric',\n        month: 'short',\n        year: 'numeric'\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Message in next-intl Locale File - JSON\nDESCRIPTION: This JSON snippet defines a static translation string for a 'message' key. Used in locale files (e.g., en.json), it represents a fixed message with no dynamic placeholders or formatting. Must be referenced by t('message') in code, and loaded in the app's locale provider. Dependency: next-intl.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/docs/usage/messages.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"message\": \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: NextIntlClientProvider Import Change in next-intl 3.0\nDESCRIPTION: This diff shows the updated import path for NextIntlClientProvider in next-intl 3.0, moving from a nested import to the root package. This change is part of the reorganization of the API for better support of App Router features.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/next-intl-3-0.mdx#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import {NextIntlClientProvider} from 'next-intl/client';\n+ import {NextIntlClientProvider} from 'next-intl';\n```\n\n----------------------------------------\n\nTITLE: Rendering StayUpdated Component\nDESCRIPTION: This code renders the StayUpdated component. This component likely contains a form or other UI elements for users to subscribe to updates or a newsletter related to the next-intl library.  It's imported from a .mdx file.\nSOURCE: https://github.com/amannn/next-intl/blob/main/docs/src/pages/blog/index.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<StayUpdated />\n```\n\n----------------------------------------\n\nTITLE: Setting Up IntlProvider in a React Application (JSX)\nDESCRIPTION: Illustrates the setup of the `IntlProvider` component from `use-intl` at the root of a React application. It shows how to pass the localization `messages` object and the current `locale` string ('en') as props to the provider, making the i18n context available to child components like `App` which then uses `useTranslations`.\nSOURCE: https://github.com/amannn/next-intl/blob/main/packages/use-intl/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {IntlProvider, useTranslations} from 'use-intl';\n\n// You can get the messages from anywhere you like. You can also\n// fetch them from within a component and then render the provider\n// along with your app once you have the messages.\nconst messages = {\n  App: {\n    hello: 'Hello {firstName}!'\n  }\n};\n\nfunction Root() {\n  return (\n    <IntlProvider messages={messages} locale=\"en\">\n      <App user={{firstName: 'Jane'}} />\n    </IntlProvider>\n  );\n}\n\nfunction App({user}) {\n  const t = useTranslations('App');\n  return <h1>{t('hello', {firstName: user.firstName})}</h1>;\n}\n```"
  }
]