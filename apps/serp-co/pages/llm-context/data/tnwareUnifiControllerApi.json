[
  {
    "owner": "tnware",
    "repo": "unifi-controller-api",
    "content": "TITLE: Initializing and Using the UniFi Controller API in Python\nDESCRIPTION: This code snippet demonstrates how to connect to a UniFi Controller using the UnifiController class, retrieve site information, get devices from a specific site, and export the device data to a CSV file. It shows the basic workflow for interacting with the API including connection parameters like host, credentials, port, site, and SSL verification.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\n\n# Connect to a UniFi Controller\ncontroller = UnifiController(\n    host=\"https://unifi.example.com\",\n    username=\"admin\",\n    password=\"password\",\n    port=8443,\n    site=\"default\",\n    verify_ssl=True\n)\n\n# Get sites managed by this controller\nsites = controller.get_unifi_site()\n\n# Get devices at a specific site\ndevices = controller.get_unifi_site_device('default')\n\n# Export devices to CSV\nfrom unifi_controller_api.export import export_to_csv\nexport_to_csv(devices, \"devices.csv\")\n```\n\n----------------------------------------\n\nTITLE: Using the UniFi Controller API in Python\nDESCRIPTION: Comprehensive example showing how to initialize the UniFi Controller client, authenticate, fetch device data for a site, and process the results. Also includes commented examples of other available methods and data export functionality.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\n\n# 1. Initialize & Authenticate\ncontroller = UnifiController(\n    controller_url=\"https://<CONTROLLER_IP_OR_HOSTNAME>\", # Use :8443 for dedicated controller\n    username=\"<LOCAL_ADMIN_USER>\",\n    password=\"<PASSWORD>\",\n    is_udm_pro=True, # Set True for UniFi OS devices, False for legacy\n    verify_ssl=False # Or path to CA bundle\n)\n\n# 2. Fetch Data (Example: Devices for the 'default' site)\nsite_name = \"default\" # Use the internal site name\ntry:\n    devices = controller.get_unifi_site_device(site_name=site_name, detailed=True)\n\n    # 3. Use the Typed Data\n    for device in devices:\n        print(f\"- {device.name} ({device.model_name}): {device.ip} / {device.mac}\")\n        if device.lldp_info:\n            print(f\"  LLDP: {len(device.lldp_info)} neighbors\")\n\nexcept Exception as e:\n    print(f\"Error fetching devices for site '{site_name}': {e}\")\n\n# Other available methods:\n# sites = controller.get_unifi_site()\n# clients = controller.get_clients(site_name)\n# wlans = controller.get_wlan_conf(site_name)\n# alarms = controller.get_alarms(site_name)\n# events = controller.get_events(site_name)\n# rogue_aps = controller.get_rogue_aps(site_name)\n# networks = controller.get_network_conf(site_name)\n# report = controller.devices_report(site_names=['site1', 'site2'])\n\n# Exporting data:\n# from unifi_controller_api.export import export_csv, export_json\n# if devices:\n#     export_csv(devices, \"devices.csv\")\n#     export_json(devices, \"devices.json\")\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of UniFi Controller API in Python\nDESCRIPTION: Example demonstrating how to initialize the UniFi Controller connection, retrieve site information, and get devices from a specific site. This shows the fundamental workflow for interacting with a UniFi network.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\n\ncontroller = UnifiController('https://unifi.example.com', 'admin', 'password')\nsites = controller.get_unifi_site()\ndevices = controller.get_unifi_site_device('default')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Basic Usage of UniFi Controller API in Python\nDESCRIPTION: Shows how to initialize the UniFi Controller client and perform basic operations like getting sites, devices, and clients. Demonstrates core functionality for connecting to and querying a UniFi Controller.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/usage.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\n\n# Initialize the client with your controller's details\ncontroller = UnifiController(\n    host=\"unifi.example.com\",\n    username=\"admin\",\n    password=\"password\",\n    port=8443,\n    verify_ssl=True\n)\n\n# Get a list of sites\nsites = controller.get_unifi_site()\n\n# Get site ID (usually \"default\")\nsite_id = sites[0].name\n\n# Get devices at a site\ndevices = controller.get_unifi_site_device(site_id)\n\n# Get clients connected to a site\nclients = controller.get_unifi_site_client(site_id)\n\n# Display client information\nfor client in clients:\n    print(f\"Client: {client.name}, MAC: {client.mac}, IP: {client.ip}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing UniFi Controller Connection in Python\nDESCRIPTION: Demonstrates how to establish a basic connection to a UniFi Controller with authentication and connection parameters. Includes settings for host URL, credentials, port, site selection, and SSL verification.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/examples.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\n\n# Connect to a UniFi Controller\ncontroller = UnifiController(\n    host=\"https://unifi.example.com\",\n    username=\"admin\",\n    password=\"password\",\n    port=8443,\n    site=\"default\",\n    verify_ssl=True\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a UniFi Controller with Python\nDESCRIPTION: Demonstrates how to initialize a connection to a UniFi Controller by creating an instance of the UnifiController class. Requires the host URL, username, and password for authentication.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/client.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\n\ncontroller = UnifiController(\n    host=\"https://unifi.example.com\",\n    username=\"admin\",\n    password=\"password\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in UniFi Controller API\nDESCRIPTION: Shows how to properly handle exceptions when connecting to a UniFi Controller. Demonstrates catching specific exception types like UnifiLoginError and general UnifiError for error handling.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/utilities.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\nfrom unifi_controller_api.exceptions import UnifiLoginError, UnifiError\n\ntry:\n    controller = UnifiController(\"https://unifi.example.com\", \"admin\", \"wrong_password\")\nexcept UnifiLoginError as e:\n    print(f\"Login failed: {e}\")\nexcept UnifiError as e:\n    print(f\"Other UniFi error: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling in UniFi Controller API Python\nDESCRIPTION: Demonstrates proper error handling for common UniFi Controller API issues, including login failures and connection problems.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/usage.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api.exceptions import UnifiLoginError, UnifiConnectionError\n\ntry:\n    controller = UnifiController(\n        host=\"unifi.example.com\",\n        username=\"admin\",\n        password=\"incorrect\",\n        port=8443,\n        verify_ssl=True\n    )\nexcept UnifiLoginError:\n    print(\"Login failed - check credentials\")\nexcept UnifiConnectionError:\n    print(\"Connection failed - check host and port\")\n```\n\n----------------------------------------\n\nTITLE: Managing UniFi Devices with Python API\nDESCRIPTION: Demonstrates device management capabilities including retrieving all devices with detailed information and looking up specific devices by MAC address.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/examples.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get all devices with detailed info\ndevices = controller.get_unifi_site_device(\"default\", detailed=True)\n\nfor device in devices:\n    print(f\"Device: {device.name} ({device.model})\")\n    print(f\"  IP: {device.ip}\")\n    print(f\"  Status: {'Online' if device.state == 1 else 'Offline'}\")\n\n# Get a specific device by MAC\ndevice = controller.get_device_by_mac(\"default\", \"00:11:22:33:44:55\")\n\nif device:\n    print(f\"Found device: {device.name}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving UniFi Devices from a Site\nDESCRIPTION: Shows how to get all devices from a site, retrieve a specific device by MAC address, and iterate through devices to display their names and models. The examples use the default site, but can be adapted for other sites.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/client.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get all devices at the default site\ndevices = controller.get_unifi_site_device(\"default\")\n\n# Get a specific device by MAC address\ndevice = controller.get_device_by_mac(\"default\", \"00:11:22:33:44:55\")\n\n# Print device names\nfor device in devices:\n    print(f\"Device: {device.name} ({device.model})\")\n```\n\n----------------------------------------\n\nTITLE: Managing UniFi Clients with Python API\nDESCRIPTION: Shows how to retrieve and display information about connected clients in a UniFi network, including their names, IP addresses, MAC addresses, and connection points.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/examples.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get all connected clients\nclients = controller.get_unifi_site_client(\"default\")\n\nfor client in clients:\n    print(f\"Client: {client.name} ({client.ip})\")\n    print(f\"  MAC: {client.mac}\")\n    print(f\"  Connected to: {client.ap_mac}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Information from a UniFi Controller\nDESCRIPTION: Demonstrates how to retrieve all clients connected to a specific site and display their basic information. The example uses the default site and prints each client's name and IP address.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/client.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get all clients at the default site\nclients = controller.get_unifi_site_client(\"default\")\n\n# Print client information\nfor client in clients:\n    print(f\"Client: {client.name} ({client.ip})\")\n```\n\n----------------------------------------\n\nTITLE: Configuring UniFi Networks with Python API\nDESCRIPTION: Demonstrates how to retrieve and display WLAN and network configurations, including SSID details, security settings, and subnet information.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/examples.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get WLAN configurations\nwlanconfs = controller.get_unifi_site_wlanconf(\"default\")\n\nfor wlan in wlanconfs:\n    print(f\"WLAN: {wlan.name}\")\n    print(f\"  SSID: {wlan.x_passphrase}\")\n    print(f\"  Security: {wlan.security}\")\n\n# Get network configurations\nnetconfs = controller.get_unifi_site_networkconf(\"default\")\n\nfor net in netconfs:\n    print(f\"Network: {net.name}\")\n    print(f\"  Subnet: {net.ip_subnet}\")\n```\n\n----------------------------------------\n\nTITLE: Exporting UniFi Controller Devices to CSV in Python\nDESCRIPTION: This code demonstrates how to export UniFi devices from a site to a CSV file. It requires connecting to a UniFi Controller with credentials, retrieving device data for a specific site, and then using the export_to_csv function to save the data to a file.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/export.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\nfrom unifi_controller_api.export import export_to_csv\n\n# Get devices\ncontroller = UnifiController(\"https://unifi.example.com\", \"admin\", \"password\")\ndevices = controller.get_unifi_site_device(\"default\")\n\n# Export to CSV\nexport_to_csv(devices, \"devices.csv\")\n```\n\n----------------------------------------\n\nTITLE: Exporting UniFi Controller Clients to JSON in Python\nDESCRIPTION: This code demonstrates how to export UniFi client data from a site to a JSON file. It connects to a UniFi Controller with credentials, retrieves client data for a specific site, and then uses the export_to_json function to save the data to a file.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/export.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api import UnifiController\nfrom unifi_controller_api.export import export_to_json\n\n# Get clients\ncontroller = UnifiController(\"https://unifi.example.com\", \"admin\", \"password\")\nclients = controller.get_unifi_site_client(\"default\")\n\n# Export to JSON\nexport_to_json(clients, \"clients.json\")\n```\n\n----------------------------------------\n\nTITLE: Exporting UniFi Data with Python API\nDESCRIPTION: Shows how to export UniFi device and client data to CSV and JSON formats using built-in export utilities.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/examples.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api.export import export_to_csv, export_to_json\n\n# Export devices to CSV\ndevices = controller.get_unifi_site_device(\"default\")\nexport_to_csv(devices, \"devices.csv\")\n\n# Export clients to JSON\nclients = controller.get_unifi_site_client(\"default\")\nexport_to_json(clients, \"clients.json\")\n```\n\n----------------------------------------\n\nTITLE: Exporting UniFi Controller Data in Python\nDESCRIPTION: Shows how to export UniFi Controller data to JSON and CSV formats using the export utilities provided by the library.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/usage.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api.export import export_to_json, export_to_csv\n\n# Export devices to JSON\nexport_to_json(devices, \"devices.json\")\n\n# Export clients to CSV\nexport_to_csv(clients, \"clients.csv\")\n```\n\n----------------------------------------\n\nTITLE: Working with UniFi API Model Objects in Python\nDESCRIPTION: Demonstrates how to work with the model objects returned by the API, including sites, devices, and clients. Shows property access and data display for each model type.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/usage.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Working with site model\nsite = sites[0]\nprint(f\"Site name: {site.description}, ID: {site.name}\")\n\n# Working with device model\ndevice = devices[0]\nprint(f\"Device: {device.name}, Model: {device.model}, Status: {device.state}\")\n\n# Working with client model\nclient = clients[0]\nprint(f\"Client: {client.name}, MAC: {client.mac}, IP: {client.ip}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for UniFi Controller API\nDESCRIPTION: Shows how to set up logging for the unifi_controller_api library using Python's standard logging module. The example demonstrates setting the library's log level to DEBUG while configuring basic logging.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.getLogger(\"unifi_controller_api\").setLevel(logging.DEBUG)\n# Ensure you have a handler configured (e.g., via logging.basicConfig)\nlogging.basicConfig(level=logging.INFO) # Example: Show INFO level and above\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logging in UniFi Controller API\nDESCRIPTION: Demonstrates how to set up and use the logging utility with the UniFi Controller API. Creates a logger instance with a specific name and log level, and shows basic logging operations.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/api/utilities.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unifi_controller_api.logging import setup_logger\n\n# Set up a logger with a specific name and level\nlogger = setup_logger(\"my_app\", log_level=\"INFO\")\n\n# Use the logger\nlogger.info(\"Connected to UniFi Controller\")\nlogger.error(\"Failed to connect\")\n```\n\n----------------------------------------\n\nTITLE: Managing UniFi Sites with Python API\nDESCRIPTION: Shows how to retrieve and work with UniFi sites, including listing all sites and getting detailed health information for specific sites.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/examples.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# List all sites\nsites = controller.get_unifi_site()\n\nfor site in sites:\n    print(f\"Site Name: {site.description} (ID: {site.name})\")\n\n# Get a specific site with health data\nsites = controller.get_unifi_site(include_health=True)\n\nfor site in sites:\n    if hasattr(site, 'health'):\n        print(f\"Site: {site.description}, Status: {site.health.status}\")\n```\n\n----------------------------------------\n\nTITLE: Example Google-style Docstring Format in Python for UniFi Controller API\nDESCRIPTION: Template showing the proper format for Google-style docstrings in the project. Includes sections for description, arguments, returns, exceptions, and usage examples.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef function_name(param1: type, param2: type) -> return_type:\n    \"\"\"Short description of the function.\n\n    More detailed description if needed.\n\n    Args:\n        param1: Description of param1\n        param2: Description of param2\n\n    Returns:\n        Description of return value\n\n    Raises:\n        ExceptionType: When and why this exception is raised\n\n    Example:\n        >>> function_name(\"example\", 123)\n        \"result\"\n    \"\"\"\n    # Function implementation\n```\n\n----------------------------------------\n\nTITLE: Installing UniFi Controller API from PyPI\nDESCRIPTION: Standard installation command to install the UniFi Controller API package from PyPI using pip.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install unifi-controller-api\n```\n\n----------------------------------------\n\nTITLE: Installing UniFi Controller API Library with pip\nDESCRIPTION: Command to install the UniFi Controller API Python library using pip package manager.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install unifi-controller-api\n```\n\n----------------------------------------\n\nTITLE: Installing UniFi Controller API Package with pip\nDESCRIPTION: Command to install the unifi-controller-api package from PyPI using pip. This is the first step to use the library in your Python projects.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install unifi-controller-api\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing UniFi Controller API for Development\nDESCRIPTION: Series of commands to clone the UniFi Controller API repository from GitHub and install it locally in development mode with additional dependencies.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tnware/unifi-controller-api.git\ncd unifi-controller-api\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Installing UniFi Controller API with Development Dependencies\nDESCRIPTION: Command to install the UniFi Controller API package with additional development dependencies using pip.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install unifi-controller-api[dev]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the UniFi Controller API Repository in Bash\nDESCRIPTION: Instructions for forking and cloning the repository to set up a local development environment. This is the first step in contributing to the project.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/unifi-controller-api.git\ncd unifi-controller-api\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for UniFi Controller API in Bash\nDESCRIPTION: Command to install the development dependencies using pip with the [dev] extra. This installs all the necessary tools for development and testing.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for UniFi Controller API\nDESCRIPTION: Git command to create and checkout a new branch for feature development. This helps isolate changes for specific features or fixes.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest for UniFi Controller API\nDESCRIPTION: Command to run the test suite using pytest. This ensures your changes don't break existing functionality.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests for UniFi Controller API\nDESCRIPTION: Command to run tests with coverage reporting to measure code test coverage. This helps identify untested parts of the codebase.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest --cov=unifi_controller_api tests/\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting with Ruff for UniFi Controller API\nDESCRIPTION: Command to lint the code using the ruff linter. This ensures code quality and consistency with project standards.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nruff check .\n```\n\n----------------------------------------\n\nTITLE: Installing UniFi Controller API with Documentation Dependencies\nDESCRIPTION: Command to install the UniFi Controller API package with documentation-specific dependencies using pip.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install unifi-controller-api[docs]\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for Local Repository\nDESCRIPTION: Command to install documentation dependencies for a locally cloned UniFi Controller API repository.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[docs]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for UniFi Controller API\nDESCRIPTION: Command to install documentation-specific dependencies. This is required for building and contributing to the project documentation.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/contributing.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Install documentation dependencies if needed\npip install -e \".[docs]\"\n\n# Build docs\ncd docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for UniFi Controller API\nDESCRIPTION: Command to install the required dependencies for building the documentation using pip. This installs the project in development mode with the docs extras.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[docs]\"\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation on Windows\nDESCRIPTION: Commands for navigating to the docs directory and building the HTML documentation on Windows systems using the make.bat script.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\n.\\make.bat html\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation on Linux/macOS\nDESCRIPTION: Commands for navigating to the docs directory and building the HTML documentation on Linux or macOS systems using the make utility.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Cleaning Documentation Build on Windows\nDESCRIPTION: Commands for navigating to the docs directory and cleaning the build directory on Windows systems using the make.bat script.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\n.\\make.bat clean\n```\n\n----------------------------------------\n\nTITLE: Cleaning Documentation Build on Linux/macOS\nDESCRIPTION: Commands for navigating to the docs directory and cleaning the build directory on Linux or macOS systems using the make utility.\nSOURCE: https://github.com/tnware/unifi-controller-api/blob/main/docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmake clean\n```"
  }
]