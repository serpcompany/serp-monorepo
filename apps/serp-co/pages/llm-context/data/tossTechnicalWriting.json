[
  {
    "owner": "toss",
    "repo": "technical-writing",
    "content": "TITLE: Tutorial Template (Learning-Focused Document)\nDESCRIPTION: This template guides the reader through a step-by-step tutorial, helping them learn a new skill or tool. It includes sections for objectives, prerequisites, and step-by-step instructions with code examples or UI captures.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/type/index.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [튜토리얼 제목]\n\n## 목표\n\n[이 튜토리얼을 따라하고 나면 독자가 달성할 목표를 간략히 설명하세요.]\n\n## 사전 요구사항\n\n- [이 튜토리얼을 따라 하기 전에 필요한 사전 지식, 설치해야 할 도구를 정리하세요. 없다면 생략해도 돼요.]\n- [예: Node.js 버전, API 키, 필수 패키지 등]\n\n## 단계별 가이드\n\n### [첫 번째 단계 제목]\n\n[이 단계에서 해야 할 작업을 설명하고 코드 예제 또는 UI 캡처를 포함하세요.]\n\n### [두 번째 단계 제목]\n\n[다음 단계에서 수행할 작업을 설명하세요.]\n\n// ...\n\n### 최종 결과 확인\n\n[독자가 목표를 달성했을 때, 어떤 결과가 나오는지 설명하세요.]\n```\n\n----------------------------------------\n\nTITLE: GPT Prompt for Information Structure Creation\nDESCRIPTION: This prompt analyzes the structure of technical documentation and suggests improvements based on predefined principles and checklists. The prompt considers factors like focusing on a single goal per page, including an overview, having a predictable document structure, prioritizing value delivery, and writing effective titles.  It requires a document draft or outline as input and provides specific feedback and improvement suggestions.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/review-prompt.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# 역할\n\n이 봇의 역할은 기술 문서의 구조를 분석하고, 아래의 원칙들을 반영하여 문서를 개선할 수 있는 피드백과 개선안을 제안하는 것입니다.\n아래 정보를 참고하여, 내가 작성한 문서 초안 혹은 문서 구조에 대해 피드백과 구체적인 개선안을 추천해 주세요. \n여러 개선 옵션을 모두 반영한 하나의 좋은 안을 만들어 주세요.\n\n## 참고할 원칙 및 체크리스트\n\n1. 한 페이지에서는 하나의 목표만 다루기\n\n- 핵심 원칙: 한 페이지에서 하나의 주제나 목표에 집중해야 독자가 핵심 내용을 빠르게 파악할 수 있습니다.\n- 체크리스트:\n  - 제목 깊이가 #### (H4) 이상이면 문서를 분리할 필요가 있음\n  - 개요를 통해 핵심 목표를 명확하게 전달하고 있는지 확인\n  - 너무 많은 개념이 혼합되어 있지는 않은지 점검\n\n2. 개요 빠트리지 않기\n\n- 핵심 원칙: 문서의 핵심 내용을 요약하는 개요를 반드시 포함하여 독자가 전체 흐름을 미리 파악할 수 있도록 해야 합니다.\n- 체크리스트:\n  - 문서 시작 부분에 명확한 개요가 배치되어 있는지\n  - 독자가 “이 문서를 읽으면 무엇을 얻을 수 있는가?”를 바로 이해할 수 있는지\n\n3. 예측 가능한 문서 구조\n\n- 핵심 원칙: 문서의 제목, 형식, 정보 배치가 일관되고 논리적인 순서를 유지하여 독자가 정보를 쉽게 탐색할 수 있어야 합니다.\n- 체크리스트:\n  - 동일한 수준의 제목과 소제목이 일관된 패턴을 따르는지\n  - 기본 개념부터 점진적으로 상세 내용이 배치되어 있는지\n  - 용어가 일관되게 사용되는지\n\n4. 가치를 먼저 제공하기\n\n- 핵심 원칙: 기능이나 세부 설정보다, 독자가 문서를 통해 얻을 수 있는 구체적인 가치나 문제 해결 효과를 먼저 전달해야 합니다.\n- 체크리스트:\n  - 문서 도입부에서 독자가 얻을 이점이 명확하게 제시되어 있는지\n  - 부수적인 세부 정보는 후순위로 배치되어 있는지\n\n5. 효과적인 제목 쓰기\n\n- 핵심 원칙: 제목은 문서의 핵심을 간결하고 명확하게 전달해야 하며, 검색과 탐색에 용이하도록 구성되어야 합니다.\n- 체크리스트:\n  - 제목에 핵심 키워드가 포함되어 있는지\n  - 제목의 길이가 적절하고(예: 30자 이내), 일관된 스타일(동사형 또는 명사형)로 작성되었는지\n  - 평서문 형태로 작성되어 있는지\n\n## 제공할 정보\n\n- 문서 초안 혹은 구조: (예: “React 컴포넌트 생성” 문서의 현재 구조 혹은 목차)\n- (optional) 문서 목표 및 독자: (예: “독자가 React 컴포넌트 생성의 기본 원리를 이해하고 직접 코드를 작성할 수 있도록 돕는 것”)\n- (optional)현재 겪고 있는 문제점: (예: “한 페이지에 너무 많은 내용이 혼합되어 있어 독자가 원하는 정보를 찾기 어렵다” 또는 “개요가 없어서 문서 전체 흐름이 파악되지 않는다”)\n\n위 정보를 종합하여, 문서 구조를 개선할 수 있는 구체적인 피드백과 개선안을 제안해 주세요.\n\n```\n\n----------------------------------------\n\nTITLE: GPT Prompt for Document Type Definition\nDESCRIPTION: This prompt helps determine the appropriate document type (learning-focused, problem-solving, reference, or explanation) based on the document's goals, audience level, project context, and additional considerations.  It suggests the most suitable type and provides writing guidelines tailored to that type.  The prompt takes into account factors like target audience, project needs, and desired writing style.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/review-prompt.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# 역할\n\n이 봇의 역할은 기술 문서를 작성하기 전에, 문서 유형과 각 유형에 맞는 작성법을 안내하는 것입니다.\n아래 정보를 참고하여, 내 상황에 가장 적합한 문서 유형과 그 문서 유형에 맞는 작성 가이드를 추천해 주고. 필요하다면 복수의 문서 유형을 제안해도 괜찮지만, 최대한 하나로 정해주세요.\n\n아래 정보를 바탕으로, 가장 적합한 문서 유형(학습 중심 / 문제 해결 / 참조 / 설명)과 작성 시 유의해야 할 점을 제안해 주세요.\n이모지는 사용하지 마세요.\n\n- 문서 목표 (예: “React의 Hook 개념을 자세히 알리고 싶다” / “Webpack 설정을 잡아주고 싶다” / “에러 발생 시 해결 방법을 제공하고 싶다” 등)\n- 독자 수준 (예: “React를 처음 접하는 초급 개발자” / “이미 Webpack 사용 경험이 있는 중급 개발자” / “비개발자 포함” 등)\n- 프로젝트 상황 (예: “새로운 기술을 도입해 보고 싶다” / “기존 프로젝트를 개선 중이라 빠른 해결이 필요하다” / “참조 문서가 너무 길어 핵심만 요약해야 한다” 등)\n- 추가 고려 사항 (예: “짧은 시간 안에 완성해야 한다” / “시각 자료를 많이 활용하고 싶다” / “다양한 OS 환경을 고려해야 한다” 등)\n\n위 정보를 종합해서, 내가 어떤 문서 유형을 쓰면 좋을지, 그리고 그 유형에 맞춰 작성할 때 주의해야 할 사항을 알려 주세요. 필요하다면 복수의 문서 유형을 제안해도 괜찮습니다.\n\n## 학습을 위한 문서를 작성할 때 주의해야 할 사항\n\n문서에 포함해야 할 사항:\n1. 명확한 학습 목표 및 완료 후 얻게 될 능력\n2. 사전 준비 사항 및 환경 설정 방법\n3. 단계별 안내와 설명(단계마다 무엇을 하는지, 왜 하는지 설명)\n4. 실행할 수 있는 코드 예제(간단한 것부터 점진적으로 난이도 상승)\n5. 문서 마지막에 FAQ 섹션 또는 자주 발생하는 문제와 해결책\n\n독자가 막힘없이 따라 할 수 있도록 구성하고, 모든 예제 코드는 실제로 실행할 수 있어야 합니다.\n\n## 깊은 이해를 위한 문서를 작성할 때 주의해야 할 사항\n\n문서에 포함해야 할 사항:\n1. 이 기술/개념이 등장한 배경과 해결하려는 문제\n2. 기본 원리와 동작 방식에 대한 상세 설명\n3. 다른 접근 방식과의 비교 및 장단점\n4. 시각적 요소(다이어그램, 흐름도 등)를 활용한 개념 설명\n5. 실제 사용 사례 및 응용 방법\n\n문서는 독자가 단순한 사용법을 넘어 기술의 원리와 철학을 이해할 수 있도록 작성해 주세요.\n\n## 문제 해결 문서를 작성할 때 주의해야 할 사항\n\n문서에 포함해야 할 사항:\n1. 명확한 문제 상황 또는 작업 목표 정의\n2. 문제의 원인 또는 작업 수행에 필요한 배경지식\n3. 단계별 해결 방법 또는 수행 절차\n4. 실행할 수 있는 코드 예제나 명령어\n5. 환경별 차이점(OS, 라이브러리 버전 등에 따른 주의 사항)\n6. 해결책이 어떤 원리로 문제를 해결하는지에 대한 설명\n\n문서는 독자가 바로 적용할 수 있는 실용적인 해결책을 제공해야 합니다.\n\n## 참조 문서 작성 프롬프트를 작성할 때 주의해야 할 사항\n\n문서에 포함해야 할 사항:\n1. 간결한 개요 및 주요 기능 설명\n2. 구문 및 파라미터 설명(타입, 기본값, 필수 여부 포함)\n3. 반환 값 및 타입 설명\n4. 사용 예제 코드(기본 사용법부터 다양한 활용 사례까지)\n5. 관련 API/함수/컴포넌트와의 연계 방법\n6. 주의 사항 및 제한사항\n\n문서는 일관된 구조로 정확하고 완전한 정보를 제공하며, 독자가 필요한 정보를 빠르게 찾을 수 있도록 구성해 주세요.\n\n```\n\n----------------------------------------\n\nTITLE: GPT Prompt for Sentence Refinement\nDESCRIPTION: This prompt is designed to refine technical writing sentences for clarity and conciseness. It analyzes sentences based on principles like using only necessary information, minimizing meta-discourse, being specific, maintaining consistency, and clarifying the subject of the sentence. It provides feedback and suggests revisions to make the sentences more effective.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/review-prompt.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# 역할\n\n이 봇의 역할은 기술 문서의 문장을 효과적이고 간결하게 개선하는 것입니다. 아래 정보를 참고하여, 입력된 문장을 더 명확하고 이해하기 쉬운 문장으로 수정할 수 있도록 피드백과 개선안을 제안해 주세요.\n여러 개선 옵션을 모두 반영한 하나의 좋은 안을 만들어 주세요.\n\n## 참고할 원칙 및 체크리스트\n\n1. 필요한 정보만 남기기\n\n- 핵심 원칙: 문장은 짧고 간결해야 하며, 한 문장에 하나의 생각만 담아야 합니다.\n- 체크리스트:\n  - 문장이 불필요하게 길거나 복잡한가?\n  - 한 문장에 여러 개의 아이디어가 혼재되어 있지는 않은가?\n\n2. 메타 담화를 최소화하기\n\n- 핵심 원칙: 핵심 메시지를 전달하는 데 방해가 되는 ‘말에 대한 말’을 제거합니다.\n- 체크리스트:\n  - 문장 내 불필요한 서술(예: \"앞서 설명했듯이\", \"여러분도 아실 것입니다\")는 없는가?\n\n3. 구체적으로 쓰기\n\n- 핵심 원칙: 모호한 표현 대신 구체적이고 직접적인 언어를 사용하여 독자가 바로 이해할 수 있도록 합니다.\n- 체크리스트:\n  - 명확하지 않은 표현이나 불필요한 추상적 용어가 사용되지는 않았는가?\n  - 동사를 사용하여 명확한 행동 지시를 제공하고 있는가?\n\n4. 일관되게 쓰기\n\n- 핵심 원칙: 용어와 표현을 일관되게 사용하여 독자가 혼란 없이 정보를 받아들일 수 있도록 합니다.\n- 체크리스트:\n  - 동일한 개념이 다양한 표현으로 나타나지는 않는가?\n  - 약어나 외래어 표기는 처음 등장할 때 풀어서 표기하고 있는가?\n\n5. 문장의 주체를 분명하게 하기\n\n- 핵심 원칙: 문장의 주어가 명확해야 독자가 어떤 행동을 해야 하는지 쉽게 파악할 수 있습니다.\n- 체크리스트:\n  - 수동형 문장은 능동형으로 개선할 수 있는가?\n  - 도구나 기술 자체가 주체가 되지 않고, 독자(개발자)가 주체가 되는지 확인\n\n## 제공할 정보\n\n- 입력 문장: (예: “이 API를 호출할 때 요청 헤더와 인증 정보를 포함해야 정상적으로 응답을 받을 수 있습니다.”)\n\n위 정보를 종합하여, 주어진 문장을 효과적이고 간결하게 개선할 수 있는 피드백과 수정안을 제안해 주세요.\n\n```\n\n----------------------------------------\n\nTITLE: Example of Inconsistent Kubernetes Terminology\nDESCRIPTION: This snippet demonstrates the incorrect use of 'K8' as a shorthand for Kubernetes. The correct term, 'Kubernetes', should be used for consistency and clarity.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nK8을 사용하면 애플리케이션 배포가 쉬워집니다.\n```\n\n----------------------------------------\n\nTITLE: Example Docs Directory Structure\nDESCRIPTION: This example illustrates a directory structure that combines tutorials, how-to guides, explanations, references, a troubleshooting guide, and a glossary. It helps organize documentation content based on its purpose.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/structure.mdx#_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\ndocs/\n ├── tutorials/               # 학습 중심 문서\n │   ├── getting-started.md       # 전체적인 개요를 이해할 수 있는 시작하기\n │   └── tutorial.md              # 개발 흐름을 이해할 수 있는 튜토리얼\n |\n ├── how-tos/                  # 문제 해결 중심 문서\n │   ├── configure-eslint.md      # 구체적인 기능을 설명하는 가이드 e.g. ESLint 설정 방법\n │   ├── fix-hydration-error.md   # 자주 발생하는 구체적인 문제를 해결하기 위한 가이드 e.g. Next.js Hydration 오류 해결\n │   └── optimize-react.md        # 특정 목표를 달성하기 위한 가이드 e.g. React 렌더링 최적화 방법\n |\n ├── explanations/            # 설명 문서\n │   ├── virtual-dom.md           # 개념을 설명하는 문서 e.g. Virtual DOM 개념\n │   └── state-management.md      # 특정 기술의 원리를 설명하는 문서 e.g. 상태 관리의 원리\n |\n ├── reference/               # 참조 문서\n │   ├── api-endpoints.md         # API 엔드포인트 목록\n │   └── error-codes.md           # 오류 코드 목록\n │                            # 기타\n ├── troubleshooting.md          # 에러 해결 가이드 (오류 코드 목록에서 통합해 제공할 수도 있음)\n └── glossary.md                 # 용어 사전\n```\n\n----------------------------------------\n\nTITLE: DoDont Component Usage (Next.js/React)\nDESCRIPTION: Illustrates the usage of a `DoDont` component in a Next.js/React application. The component likely accepts `DoDont.Dont` and `DoDont.Do` as child components to display examples of what to avoid and what to do in technical writing. It demonstrates presenting complex information clearly with good and bad examples.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/compactness.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DoDont>\n<DoDont.Dont>\n\n버튼을 클릭하면 다음 단계로 이동하게 되며, 그 이후의 작업을 진행할 수 있습니다.\n\n이 API를 호출할 때 요청 헤더를 포함해야 하며, 올바른 인증 정보를 제공해야 정상적으로 응답을 받을 수 있습니다.\n\n</DoDont.Dont>\n<DoDont.Do>\n\n버튼을 클릭하면 다음 단계로 이동합니다. 이동 후 이어서 작업을 진행하세요.\n\n이 API를 호출할 때 요청 헤더와 인증 정보를 포함하세요.\n\n</DoDont.Do>\n</DoDont>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Effective TypeScript Utility Type Overview (Do)\nDESCRIPTION: This code snippet presents an effective overview for a document explaining TypeScript utility types. It clearly states the document's purpose (modifying object types) and highlights the benefits (reducing repetitive type declarations).\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/overview.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n**TypeScript의 유틸리티 타입**\n\nTypeScript의 유틸리티 타입을 사용해서 객체 타입을 변형하는 방법을 알아볼게요.\n\n유틸리티 타입을 활용하면 반복적인 타입 선언을 줄이고, 더 유연하게 타입을 관리할 수 있어요. 이 문서에서는 Partial, Pick, Omit 등을 사용하여 객체 타입을 효과적으로 다루는 방법을 알아볼게요.\n\n- 독자가 문서를 통해 배울 수 있는 내용을 명확하게 설명하고 있습니다.\n```\n\n----------------------------------------\n\nTITLE: Problem-Solving Template\nDESCRIPTION: This template helps readers solve specific problems or perform tasks by providing solutions and methods. It includes sections for defining the problem, prerequisites, possible solutions, and steps to verify the solution.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/type/index.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [문제 해결 문서 제목]\n\n## 문제 정의\n\n[독자가 겪을 수 있는 문제 상황을 설명하세요.]\n\n## 사전 요구사항\n\n[문제를 해결하기 전에 필요한 환경 설정이나 필수 조건을 정리하세요. 없다면 생략해도 돼요.]\n\n## 해결 방법\n\n### [첫 번째 해결 방법]\n\n[첫 번째 해결 방법을 설명하세요.]\n\n### [두 번째 해결 방법]\n\n[다른 해결 방법이 있다면 추가하세요.]\n\n### 문제 해결 후 확인 방법\n\n[문제가 해결된 후의 모습이나 확인하는 방법을 설명하세요.]\n```\n\n----------------------------------------\n\nTITLE: Reference Document Template\nDESCRIPTION: This template provides detailed information about specific features or APIs, including properties, options, signatures, return values, and usage examples. It helps users quickly find the information they need.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/type/index.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# [참조 문서 제목]\n\n## 개요\n[이 요소가 무엇이며, 언제 사용하는지, 어떤 가치를 제공하는지 설명하세요.]\n\n## 속성 및 옵션\n| 속성명 | 타입 | 기본값 | 설명 |\n|--------|------|--------|------|\n| prop1 | string | \"default\" | 이 속성은 ... |\n\n## 시그니처\n\n[// 예제 코드]\n\n## 반환 값\n\n[이 함수나 API가 반환하는 값을 설명하세요.]\n\n## 사용 예제\n\n[어떤 상황에서 사용하는지 구체적인 예시와 함께 예제 코드를 알려주세요.]\n```\n\n----------------------------------------\n\nTITLE: Example Next.js Optimization Docs Structure\nDESCRIPTION: Illustrates a directory structure for documentation on Next.js performance optimization.  It includes an overview, fundamentals, a tutorial, guides on specific optimization techniques, and troubleshooting resources, demonstrating how different document types can be combined.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/structure.mdx#_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\nnextjs-performance-optimization/ \n├── index.md                  # 개요 (Overview) \n├── fundamentals.md           # 성능 최적화의 기본 개념\n├── tutorial.md               # 성능 최적화를 적용하는 간단한 튜토리얼\n├── guides/                   # 특정 목표를 달성하기 위한 가이드\n│   ├── code-splitting.md       # e.g. 코드 분할 (Code Splitting) \n│   └── image-optimization.md   # e.g. 이미지 최적화\n│   └── caching-strategies.md   # e.g. 캐싱 전략\n└── troubleshooting.md        # 문제 해결 (Troubleshooting)\n```\n\n----------------------------------------\n\nTITLE: React Component Example - Bad Practice\nDESCRIPTION: This code snippet demonstrates a bad practice of covering too many topics within a single page/document. It attempts to cover various aspects of React usage, leading to deep heading hierarchies (H4, H5) and difficulty in finding specific information.  It violates the 'single goal per page' principle.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/one-thing-per-one-page.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n# React 사용법\n\n## 컴포넌트 생성\n### 컴포넌트 기본 구조\n#### JSX 사용법\n##### JSX 문법 세부사항\n## 상태 관리\n### 상태 정의\n#### useState 사용법\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ineffective React State Management Overview (Don't)\nDESCRIPTION: This code snippet showcases an ineffective overview for a document on React state management. The overview is lengthy, abstract, and fails to clearly convey the core content and value to the reader.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/overview.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n**React 상태 관리**\n\nReact에서 상태 관리란 무엇일까요? React는 컴포넌트 기반 UI 라이브러리로, 상태(state)를 관리하는 것이 중요합니다.\n상태 관리는 여러 방식으로 구현할 수 있으며, 다양한 라이브러리도 존재합니다. 이 문서에서는 상태 관리의 개념과 몇 가지 방법을 소개합니다.\n\n- 개요가 너무 길고 설명이 추상적이라서 핵심 내용을 파악하기 어렵습니다.\n```\n\n----------------------------------------\n\nTITLE: Illustrating poor practice of explaining API settings\nDESCRIPTION: This code illustrates the anti-pattern of immediately diving into specific settings and parameters without first explaining the high-level value or problem being solved. It lists configuration options without providing context about their purpose or benefit to the user.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/value-first-cost-later.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"이 스니펫은 다양한 설정 옵션을 제공합니다. 먼저 `connection_timeout`, `retry_attempts`, `max_pool_size` 등의 매개변수를 수정하세요. 그런 다음, ...\"\n\n- 독자가 얻을 수 있는 핵심 가치를 설명하지 않고, 세부 설정부터 나열하고 있어요.\n```\n\n----------------------------------------\n\nTITLE: React Component Example - Good Practice\nDESCRIPTION: This code snippet demonstrates the recommended practice of focusing on a single goal per page: 'Creating React Components'.  It covers relevant aspects of component creation without delving into overly specific details that could warrant a separate document. The structure remains relatively shallow, enhancing readability.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/one-thing-per-one-page.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# React 컴포넌트 생성하기\n\n## 컴포넌트 기본 구조\n## 상태 관리\n## 라이프사이클 메서드\n```\n\n----------------------------------------\n\nTITLE: DoDont Component Usage (Next.js/React) - Metadiscourse\nDESCRIPTION: Illustrates another use of the `DoDont` component, specifically focusing on minimizing metadiscourse in technical writing. It shows examples of sentences with excessive metadiscourse and their more concise alternatives.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/compactness.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DoDont>\n<DoDont.Dont>\n\n- 앞에서 설명했지만, 결론은 이 설정을 변경하는 것이 가장 효과적인 방법이라는 겁니다.\n\n- 아시다시피, 이 설정은 성능에 영향을 줍니다.\n\n</DoDont.Dont>\n<DoDont.Do>\n\n- 이 설정을 변경하는 것이 가장 효과적인 방법입니다.\n\n- 이 설정은 성능에 영향을 줍니다.\n\n</DoDont.Do>\n</DoDont>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Effective React State Management Overview (Do)\nDESCRIPTION: This code snippet provides an effective overview for a document on React state management. It concisely explains the concept and main techniques, mentioning specific methods and their comparative advantages and disadvantages.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/overview.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n**React 상태 관리**\n\n이 문서는 React에서 상태(state) 관리의 개념과 주요 기법을 설명합니다.\n\n`useState`, `useReducer`, Context API, Redux 등의 방법을 비교하고, 각 방식의 장점과 단점을 이해할 수 있도록 안내합니다.\n\n- 개요만 읽어도 문서의 핵심 내용을 쉽게 파악할 수 있습니다.\n```\n\n----------------------------------------\n\nTITLE: Example of Inconsistent Terminology for 'Upload'\nDESCRIPTION: This snippet showcases the inconsistent use of terms like '추가(add)', '첨부(attach)', and '넣다(put)' to refer to the same concept of uploading a file.  Using a consistent term like '업로드(upload)' enhances clarity.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n파일을 추가하려면 '파일 선택' 버튼을 클릭하세요. 파일을 첨부한 후 '저장'을 누르면 업로드가 완료됩니다. 필요한 경우 파일을 다시 넣을 수 있습니다.\n\n- 같은 개념을 \"추가\", \"첨부\", \"넣다\"처럼 다르게 표현하고 있어요.\n```\n\n----------------------------------------\n\nTITLE: Basic Documentation Template\nDESCRIPTION: This is a basic template for documentation directory structure.  It provides a starting point for organizing content into different types like tutorials, how-tos, explanations and references.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/structure.mdx#_snippet_3\n\nLANGUAGE: tree\nCODE:\n```\ndocs/\n├── get-started.md\n├── tutorials/        # 학습 중심 문서\n│   ├── a-tutorial.md\n│   └── another-tutorial.md\n├── how-tos/          # 문제 해결 중심 문서\n│   ├── a-how-to.md\n│   └── another-how-to.md\n├── explanations/     # 개념 설명 문서\n│   ├── a-concept.md\n│   └── a-topic.md\n├── reference/        # 참조 문서\n│   ├── an-element.md\n│   └── another-element.md\n├── troubleshooting.md  # 문제 해결 (에러 해결 가이드)\n└── glossary.md         # 용어 사전\n```\n\n----------------------------------------\n\nTITLE: Illustrating poor practice of describing reverse proxy settings\nDESCRIPTION: This snippet illustrates a common mistake in documentation: providing historical context and background information before explaining the value or benefits of a feature. It focuses on the implementation history rather than the problem it solves for the user.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/value-first-cost-later.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"리버스 프록시 설정은 2019년에 도입되었고, 많은 수정이 있었습니다...\"\n\n- 독자에게 가장 중요한 정보가 아니라 배경 지식부터 설명하고 있어요.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ineffective TypeScript Utility Type Overview (Don't)\nDESCRIPTION: This code snippet demonstrates an ineffective overview for a document explaining TypeScript utility types. It lacks a clear explanation of why the utility types should be used and their direct benefits.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**TypeScript의 유틸리티 타입**\n\n이 문서는 TypeScript의 유틸리티 타입을 소개합니다. Partial, Pick, Omit 등의 유틸리티 타입을 사용할 수 있어요.\n\n- \"왜 유틸리티 타입을 사용해야 하는지\"에 대한 설명이 부족합니다.\n```\n\n----------------------------------------\n\nTITLE: Markdown example of tool behavior description\nDESCRIPTION: This markdown snippet illustrates how to describe the behavior of a tool or technology, allowing it to be the subject of the sentence.  The key functionality is describing two ways the Impression log operates.  No dependencies are needed.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/subject.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nImpression 로그는 두 가지 방식으로 동작해요.\n\n1. 특정 접근성 요소가 화면에 나타나면 자동으로 수집돼요.\n2. 특정 DOM 요소를 직접 지정해서 뷰포트에 나타날 때 로그를 수집할 수 있어요.\n```\n\n----------------------------------------\n\nTITLE: Explanatory Document Template\nDESCRIPTION: This template aims to provide a deep understanding of concepts, principles, and background knowledge. It helps readers understand why a technology emerged and what problems it solves.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/type/index.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# [개념명]\n\n## 개념 소개\n\n[이 개념이 무엇인지 간략히 설명하세요.]\n\n## 등장 배경\n\n[이 개념이 왜 등장했는지, 어떤 문제를 해결하는지 정리하세요.]\n\n## 활용\n\n[실제 프로젝트에서 이 개념이 어떻게 사용되는지 설명하세요.]\n```\n\n----------------------------------------\n\nTITLE: Inconsistent API Documentation Structure JavaScript\nDESCRIPTION: This snippet demonstrates an example of an inconsistent documentation structure with varying levels of hierarchy. This makes it difficult for readers to quickly grasp the relationships between different sections.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/predictability.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# API 요청 최적화\n\n이 문서에서는 API 요청을 최적화하는 여러 가지 방법을 설명합니다.\n\n## 성능 향상 기법\n- 캐싱 활용하기\n- 요청 병합하기\n\n### API 속도 측정\nAPI 응답 속도를 분석하는 방법을 설명합니다.\n\n## 오류 처리\nAPI 요청 중 발생할 수 있는 문제와 해결책을 설명합니다.\n```\n\n----------------------------------------\n\nTITLE: Cross-linked Document Structure Example\nDESCRIPTION: This example demonstrates how cross-linking can be used within a documentation set, specifically within the context of Next.js performance optimization. It shows how the 'lazy-loading.md' document can be linked to from the 'code-splitting.md' document, enhancing the relationship between related content.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/structure.mdx#_snippet_2\n\nLANGUAGE: tree\nCODE:\n```\nnextjs-performance-optimization/ \n├── index.md \n├── code-splitting.md \n├── ...\n└── lazy-loading.md # 코드 분할과 연계된 내용\n```\n\n----------------------------------------\n\nTITLE: Describing the value of reverse proxy settings\nDESCRIPTION: This snippet demonstrates the recommended approach of highlighting the value proposition first. It focuses on the benefit of using reverse proxy settings, which is minimizing network latency, rather than technical implementation details.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/value-first-cost-later.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"리버스 프록시 설정을 적용하면 네트워크 지연 문제를 최소화할 수 있어요.\"\n\n- 먼저 적용했을 때 얻을 수 있는 가치를 전달하고 있어요.\n```\n\n----------------------------------------\n\nTITLE: Consistent API Documentation Structure JavaScript\nDESCRIPTION: This snippet provides an example of a consistent and well-structured documentation with uniform levels of hierarchy. The consistent format improves predictability and readability.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/predictability.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n# API 요청 최적화\n\nAPI 요청을 줄이고 성능을 향상시키는 방법을 알아봅니다.\n\n## 1. 성능 향상 기법\n### 캐싱 활용하기\n### 요청 병합하기\n\n## 2. API 속도 측정\n\nAPI 응답 속도를 분석하는 방법을 설명합니다.\n\n## 3. 오류 처리\n\nAPI 요청 중 발생할 수 있는 문제와 해결책을 설명합니다.\n```\n\n----------------------------------------\n\nTITLE: Translation Style Correction Example 1 (Don't)\nDESCRIPTION: Shows an example of a sentence that uses a translation-style expression (nominalization). It will be replaced with a more natural Korean sentence.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/natural-kor-expression.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n- API 키를 이용한 사용자 인증 처리가 완료된 후, 데이터베이스 접속 설정 진행이 가능합니다.\n- 시스템 모니터링 수행을 통해 서버 성능 측정 작업을 실시하게 됩니다.\n- 보안 정책 업데이트 진행 후 시스템 재시작 처리를 수행해야 합니다.\n```\n\n----------------------------------------\n\nTITLE: Describing the value of a snippet\nDESCRIPTION: This snippet demonstrates how to communicate the value of a code example. It focuses on the positive outcome, such as a 50% increase in database connection speed, making the benefit immediately clear to the reader.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/value-first-cost-later.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"이 스니펫을 사용하면 PostgreSQL 데이터베이스 연결 속도가 50% 빨라집니다.\"\n\n- 독자가 기대할 수 있는 긍정적인 변화를 먼저 설명하고 있어요.\n```\n\n----------------------------------------\n\nTITLE: Example of Consistent Terminology for 'Upload'\nDESCRIPTION: This snippet demonstrates consistent use of the term '업로드(upload)' when referring to uploading a file. Maintaining consistency in terminology reduces confusion for the reader.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n파일을 업로드하려면 '파일 선택' 버튼을 클릭하세요. 파일을 업로드한 후 '저장'을 누르면 업로드가 완료됩니다. 필요한 경우 파일을 다시 업로드할 수 있습니다.\n```\n\n----------------------------------------\n\nTITLE: Translation Style Correction Example 1 (Do)\nDESCRIPTION: Provides a corrected version of the previous example, using more natural Korean phrasing and avoiding nominalization.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/natural-kor-expression.mdx#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n- API 키로 사용자를 인증한 후, 데이터베이스에 접속하도록 설정할 수 있습니다.\n- 시스템을 모니터링해서 서버 성능을 측정합니다.\n- 보안 정책을 업데이트한 후 시스템을 재시작합니다.\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Abbreviation Usage\nDESCRIPTION: This snippet demonstrates the proper way to introduce an abbreviation 'SSR' by providing its full form, 'Server-Side Rendering', in parentheses the first time it is used.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n이 기능은 SSR(Server-Side Rendering)을 지원합니다.\n\n- 처음 등장할 때는 풀어쓰고 약어를 병기하는 게 가장 좋습니다.\n```\n\n----------------------------------------\n\nTITLE: Import DocExample Component\nDESCRIPTION: This code snippet imports the DocExample component from the './shared/components' directory. The DocExample component is used for rendering and displaying code examples within the project's documentation. There are no specific dependencies besides the component itself being present in the specified directory.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/single-doc.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DocExample } from './shared/components'\n```\n\n----------------------------------------\n\nTITLE: Example of Inconsistent Subheadings\nDESCRIPTION: This code snippet illustrates inconsistent subheading styles that can make a document appear disorganized and difficult to navigate.  Subheadings should follow the same grammatical pattern.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/heading.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 제목을 쓰는 방법\n\n## 키워드를 포함하세요\n## 일관성 유지\n## 평서문으로 작성하기\n```\n\n----------------------------------------\n\nTITLE: Hanja Word Removal Example (Do)\nDESCRIPTION: Demonstrates the corrected version of the previous sentence, removing the Hanja word '수행하다'. This is used within the `DoDont.Do` component to show a better, more concise alternative.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/natural-kor-expression.mdx#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n로그 파일을 삭제합니다.\n```\n\n----------------------------------------\n\nTITLE: Correct React useEffect Usage Order JavaScript\nDESCRIPTION: This snippet shows documentation with proper ordering. It introduces the basic usage of `useEffect` before covering more advanced topics like async data fetching.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/predictability.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n# React에서 useEffect 사용하기\n\n## 기본적인 사용법\n...\n## 비동기 데이터 요청하기\n...\n## 클린업 함수 활용하기\n...\n```\n\n----------------------------------------\n\nTITLE: DoDont Component Import\nDESCRIPTION: Imports the `DoDont` component from the specified path within the project.  This component is presumably used to display \"Do\" and \"Don't\" examples for writing guidelines.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/natural-kor-expression.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DoDont } from '@/components/DoDont/DoDont';\n```\n\n----------------------------------------\n\nTITLE: Example of Consistent Subheadings\nDESCRIPTION: This code snippet shows a set of subheadings written in a consistent style, improving readability and overall organization.  Here, all subheadings use the '~하기' pattern.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/heading.mdx#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# 제목을 쓰는 방법\n\n## 키워드 포함하기\n## 일관성 유지하기\n## 평서문으로 작성하기\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Kubernetes Terminology\nDESCRIPTION: This snippet demonstrates the correct use of '쿠버네티스(Kubernetes)' as the official terminology. Using the correct capitalization and full name as appropriate is important.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n쿠버네티스(Kubernetes)를 사용하면 애플리케이션 배포가 쉬워집니다.\n```\n\n----------------------------------------\n\nTITLE: Hanja Word Removal Example (Don't)\nDESCRIPTION: Demonstrates an example of a sentence containing an unnecessary Hanja word ('수행하다'). This code is used within the `DoDont.Dont` component to illustrate an incorrect usage.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/natural-kor-expression.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n로그 파일을 삭제하는 작업을 수행합니다.\n```\n\n----------------------------------------\n\nTITLE: Import DocExample and Examples JavaScript\nDESCRIPTION: Imports the `DocExample` component and example content for learning and troubleshooting documentation. This allows displaying before and after states of documentation examples.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/basic-documents.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DocExample } from '../shared/components'\nimport learningDocExample from './content/learningDocExample'\nimport troubleShootingDocExample from './content/troubleShootingDocExample'\n```\n\n----------------------------------------\n\nTITLE: API Request Example Before Explanation JavaScript\nDESCRIPTION: This snippet shows an API request example without introductory context. Readers must first understand the code before comprehending its purpose.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/predictability.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n## API 요청 예제\n\nfetch(\"https://api.example.com/data\")\n  .then(response => response.json())\n  .then(data => console.log(data));\n\n이 코드는 서버에서 데이터를 가져와 JSON으로 변환하는 코드입니다.\n```\n\n----------------------------------------\n\nTITLE: Incorrect React useEffect Usage Order JavaScript\nDESCRIPTION: This snippet exemplifies incorrect ordering in documentation. It demonstrates an advanced `useEffect` usage (async data fetching) before explaining the basics.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/predictability.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n# React에서 useEffect 사용하기\n\n## 비동기 데이터 요청하기\n...\n## 기본적인 사용법\n...\n## 클린업 함수 활용하기\n...\n```\n\n----------------------------------------\n\nTITLE: Example of Poor Title\nDESCRIPTION: This code snippet illustrates a poor title that lacks clarity and makes it difficult to immediately understand the content of the document.  The reader has to guess the topic.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/heading.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 에러를 해결하는 방법은?\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Abbreviation Usage\nDESCRIPTION: This snippet shows an example of using the abbreviation 'SSR' without first introducing its full form. Always define abbreviations before using them.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n이 기능은 SSR을 지원합니다.\n```\n\n----------------------------------------\n\nTITLE: API Request Example After Explanation JavaScript\nDESCRIPTION: This snippet presents an API request example with preceding context. The explanation before the code enhances readers' understanding.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/predictability.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n## API 요청 예제\n\n서버에서 데이터를 가져와 JSON으로 변환하는 방법을 알아봅니다.\n\nfetch(\"https://api.example.com/data\")\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n----------------------------------------\n\nTITLE: Example of 'Frontend' Using Standard Spelling\nDESCRIPTION: Demonstrates the standard spelling '프런트엔드' for 'frontend' in Korean technical documents, considering its prevalent use despite potential alternative transliterations.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n프런트엔드\n```\n\n----------------------------------------\n\nTITLE: Corrected: Client-Side Rendering (CSR)\nDESCRIPTION: This snippet correctly introduces the abbreviation CSR with its full form, Client-Side Rendering.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n클라이언트 사이드 렌더링(Client-Side Rendering, CSR)은 초기 페이지 로딩 속도를 높이는 데 유용합니다.\n```\n\n----------------------------------------\n\nTITLE: Example of Effective Title\nDESCRIPTION: This code snippet demonstrates an effective title that clearly states the document's purpose by including specific keywords. It enables readers to quickly understand the topic.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/architecture/heading.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# `NOT_FOUND_USER` 에러를 해결하는 방법\n```\n\n----------------------------------------\n\nTITLE: Render DocExample Component JavaScript\nDESCRIPTION: Renders the `DocExample` component with `before` and `after` properties populated with the imported example content. This visually presents the improvement in documentation.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/basic-documents.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DocExample\n  before={learningDocExample.before}\n  after={learningDocExample.after}\n/>\n```\n\n----------------------------------------\n\nTITLE: Corrected: JavaScript Asynchronous Execution\nDESCRIPTION: This snippet corrects the original phrase to use the standard technical term \"JavaScript의 비동기 실행 방식\".\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/sentence/consistency.mdx#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n이 문서에서는 \"JavaScript의 비동기 실행 방식\"을 설명합니다.\n```\n\n----------------------------------------\n\nTITLE: Render TroubleShooting DocExample Component JavaScript\nDESCRIPTION: Renders the `DocExample` component for the troubleshooting example, again displaying `before` and `after` states to highlight improvements.\nSOURCE: https://github.com/toss/technical-writing/blob/master/docs/tutorial/basic-documents.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DocExample\n  before={troubleShootingDocExample.before}\n  after={troubleShootingDocExample.after}\n/>\n```"
  }
]