[
  {
    "owner": "bluesky-social",
    "repo": "proposals",
    "content": "TITLE: Illustrating OAuth 2.0 Authorization Flow in AT Protocol\nDESCRIPTION: ASCII diagram showing the complete authorization flow between User, Client, PDS, and Authorization Server. It illustrates the 15-step process from handle resolution to API access, including metadata discovery, pushed authorization requests, user authentication, and token issuance.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n┌───────┐                   ┌────────┐                       ┌─────┐ ┌──────────────────────┐\n│ User  │                   │ Client │                       │ PDS │ │ Authorization Server │\n└───┬───┘                   └───┬────┘                       └──┬──┘ └────────────┬─────────┘\n    │ User enters @handle (1)   │                               │                 │\n    ├──────────────────────────►│                               │                 │\n    │                           ├──┐                            │                 │\n    │                           │  │ Client resolves PDS URL (2)│                 │\n    │                           │◄─┘                            │                 │\n    │                           │                               │                 │\n    │                        (3)│ GET /.well-known              │                 │\n    │                           │  /oauth-protected-resource    │                 │\n    │                           ├──────────────────────────────►│                 │\n    │                           │ GET /.well-known              │                 │\n    │                           │  /oauth-authorization-server  │                 │\n    │                           ├───────────────────────────────┼────────────────►│\n    │                           │                               │                 │\n    │                           ├──┐                            │                 │\n    │                           │  │ Validate issuer (4)        │                 │\n    │                           │◄─┘                            │                 │\n    │                           │                               │                 │\n    │                           │ Pushed Authorization Request (5)                │\n    │                           ├───────────────────────────────┬────────────────►│\n    │                           │                               │                 │\n    │                           │ Client metadata discovery (6) │                 │\n    │                           │◄──────────────────────────────┼─────────────────┤\n    │ User redirected to        │                               │                 │\n    │ authorize URL (7)         │                               │                 │\n    │◄──────────────────────────┤                               │                 │\n    │                           │                               │                 │\n    │ redirected to authorize URL (8)                           │                 │\n    ├───────────────────────────┬───────────────────────────────┼────────────────►│\n    │                           │                               │                 ├──┐\n    │                           │                               │                 │  │ Verification\n    │ User authenticates themself on AS and approves the request (10)             │◄─┘ (9)\n    │◄──────────────────────────┬───────────────────────────────┬────────────────►│\n    │                           │                               │                 │\n    │ User redirected to redirect_uri (11)                      │                 │\n    ├──────────────────────────►┐                               │                 │\n    │                           │                               │                 │\n    │                           │ Token retrieval (12)          │                 │\n    │                           ├───────────────────────────────┼────────────────►│\n    │                           │                               │                 ├──┐\n    │                           │                               │                 │  │ Session\n    │                           │ Tokens are issued and returned to the client(14)│◄─┘ created (13)\n    │                           │◄──────────────────────────────┬─────────────────┤\n    │                           │                               │                 │\n    │                           │ Client makes API requests (15)│                 │\n    │                           ├──────────────────────────────►│                 │\n    │                           │                               │                 │\n```\n\n----------------------------------------\n\nTITLE: Backend for Frontend Architecture Diagram\nDESCRIPTION: ASCII diagram illustrating the backend-for-frontend (BFF) architecture showing interaction flow between browser, static web host, BFF server, and various OAuth endpoints. The diagram demonstrates how all secrets are kept on the backend and access tokens are bound to the backend instance.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n                            +-------------+  +--------------+ +--------------+\n                            |             |  |              | |              |\n                            |Authorization|  |    Token     | |   Resource   |\n                            |  Endpoint   |  |   Endpoint   | |    Server    |\n                            |             |  |              | |              |\n                            +-------------+  +--------------+ +--------------+\n                                ^                        ^              ^\n                                |                     (F)|           (K)|\n                                |                        v              v\n                                |         +-----------------------------------+\n                                |         |                                   |\n                                |         |    Backend for Frontend  (BFF)    |\n                             (D)|         |                                   |\n                                |         +-----------------------------------+\n                                |           ^     ^     ^     +       ^  +\n                                |      (B,I)|  (C)|  (E)|  (G)|    (J)|  |(L)\n                                v           v     v     +     v       +  v\n+-----------------+         +-------------------------------------------------+\n|                 |  (A,H)  |                                                 |\n| Static Web Host | +-----> |                    Browser                      |\n|                 |         |                                                 |\n+-----------------+         +-------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Token-Mediating Backend Architecture Diagram\nDESCRIPTION: ASCII diagram showing the interaction flow between Browser, Static Web Host, Token-Mediating Backend, Authorization Endpoint, Token Endpoint, and Resource Server in a backend-mediated OAuth2 flow.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n                            +-------------+  +--------------+ +--------------+\n                            |             |  |              | |              |\n                            |Authorization|  |    Token     | |   Resource   |\n         +-----------------+|  Endpoint   |  |   Endpoint   | |    Server    |\n         |                  |             |  |              | |              |\n         |                  +-------------+  +--------------+ +--------------+\n         |                      ^                   ^                 ^\n         |                      |                (F)|                 |\n         |(D')                  |                   v                 |\n         |                      |   +-----------------------+         |\n         |                      |   |                       |         |\n         |                      |   |Token-Mediating Backend|         | (J)\n         |                   (D)|   |                       |         |\n         |                      |   +-----------------------+         |\n         |                      |       ^     ^     ^     +           |\n         |                      |  (B,I)|  (C)|  (E)|  (G)|           |\n         v                      v       v     v     +     v           v\n+-----------------+         +-------------------------------------------------+\n|                 |  (A,H)  |                                                 |\n| Static Web Host | +-----> |                    Browser                      |\n|                 |         |                                                 |\n+-----------------+         +-------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request for Serverless Browser App\nDESCRIPTION: This HTTP POST request demonstrates how a serverless browser app exchanges an authorization code for access and refresh tokens using PKCE and DPoP.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST https://entryway.example.com/oauth/token\nContent-Type: application/x-www-form-urlencoded\nDPoP: <DPOP_PROOF_JWT>\n\ngrant_type=authorization_code\n&code=<AUTHORIZATION_CODE>\n&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\n&client_id=https%3A%2F%2Fapp.example.com%2Fclient-metadata.json\n&redirect_uri=https%3A%2F%2Fapp.example.com%2Fmy-app%2Foauth-callback\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Response for Backend Client\nDESCRIPTION: This HTTP response provides the access token, token type, expiration time, and refresh token after a successful token exchange for a backend client.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_9\n\nLANGUAGE: http-response\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n{\n \"access_token\": \"Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU\",\n \"token_type\": \"DPoP\",\n \"expires_in\": 2677,\n \"refresh_token\": \"Q..Zkm29lexi8VnWg2zPW1x-tgGad0Ibc3s3EwM_Ni4-g\"\n}\n```\n\n----------------------------------------\n\nTITLE: PAR + PKCE Request for Serverless Browser App\nDESCRIPTION: This HTTP POST request demonstrates how a serverless browser app initiates the authorization process using Pushed Authorization Request (PAR) and Proof Key for Code Exchange (PKCE).\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST https://entryway.example.com/oauth/par\nContent-Type: application/x-www-form-urlencoded\n\nresponse_type=code\n&code_challenge=K2-ltc83acc4h0c9w6ESC_rEMTJ3bww-uCHaoeK1t8U\n&code_challenge_method=S256\n&client_id=https%3A%2F%2Fapp.example.com%2Fclient-metadata.json\n&state=duk681S8n00GsJpe7n9boxdzen\n&redirect_uri=https%3A%2F%2Fapp.example.com%2Fmy-app%2Foauth-callback\n&scope=scope_a%20scope_b%20scope_c\n&login_hint=did%3Aplc%3A123\n```\n\n----------------------------------------\n\nTITLE: Defining BlueSky Moderation History API Lexicon Types and Endpoints\nDESCRIPTION: Defines the schema for moderation history events, subject views, and API endpoints for querying moderation actions and reported content. Includes event types for takedowns, labels, reports, emails and resolutions, along with endpoints for fetching account actions, reported subjects, and subject histories.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0005-mod-history/README.md#2025-04-23_snippet_0\n\nLANGUAGE: lexicon\nCODE:\n```\ntools.ozone.history.defs#eventView\n    subject: string uri (DID or AT-URI)\n    createdAt: string datetime: server-reported timestamp (NOT createdAt from report, if different)\n    event: union\n\ntools.ozone.history.defs#eventTakedown\ntools.ozone.history.defs#eventLabel\ntools.ozone.history.defs#eventReport\ntools.ozone.history.defs#eventEmail\ntools.ozone.history.defs#eventResolve: rename of \"acknowledge\" and \"resolve appeal\". could also be \"Closed\" or \"Reviewed\"\n\ntools.ozone.history.defs#subjectBasicView\n    subject: string uri (DID or AT-URI)\n    status: string: current status of the subject in the network (active, takedown, etc)\n    reviewState: string: whether the subject has been reviewed and acted upon, in the context of the current account's report or appeal\n    subjectProfile: app.bsky.actor.defs#profileViewBasic (or equivalent: handle, displayname, labels, avatar URL)\n    labels[]: array of com.atproto.label.defs#label\n\ntools.ozone.history.accountActions (GET): fetches all subjects from a single account with mod subjects\n    params\n        account: string DID (optional, normally the requester's did)\n        limit: optional int\n        cursor: optional string\n    response:\n        subjects[]: array of tools.ozone.history.defs#subjectBasicView\n        cursor: optional string\n\ntools.ozone.history.reportedSubjects (GET): fetches all subjects reported by the account\n    params\n        account: string DID (optional, normally the requester's did)\n        limit: optional int\n        cursor: optional string\n    response:\n        subjects[]: array of tools.ozone.history.defs#subjectBasicView\n        cursor: optional string\n\ntools.ozone.history.subjectSummary (GET)\n    params\n        subject: string uri (DID or AT-URI)\n    response:\n        subject: tools.ozone.history.defs#subjectBasicView (NOTE: could add a \"detailed\" view if needed? but seems like \"basic\" is sufficient?)\n\ntools.ozone.history.subjectHistory (GET)\n    params\n        subject: string uri (DID or AT-URI)\n        limit: optional int\n        cursor: optional string\n    response:\n        events[]: array of tools.ozone.history.defs#eventView\n        cursor: optional string\n```\n\n----------------------------------------\n\nTITLE: Generating Client Metadata for Local Development in JavaScript\nDESCRIPTION: This code handles special client metadata generation for localhost development environments. When a client ID uses 'http://localhost' as origin, the Authorization Server derives the client metadata document from the client ID itself, rather than resolving it externally.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { protocol, origin, pathname, searchParams } = new URL(clientId)\nif (origin === 'http://localhost') {\n  return {\n    client_id: clientId,\n    client_name: 'Loopback client',\n    response_types: ['code id_token', 'code'],\n    grant_types: ['authorization_code', 'implicit', 'refresh_token'],\n    scope: 'openid profile offline_access',\n    redirect_uris: searchParams.has('redirect_uri')\n      ? searchParams.getAll('redirect_uri')\n      : ['127.0.0.1', '[::1]'].map(\n          (ip) =>\n            Object.assign(new URL(pathname, origin), { hostname: ip }).href\n        ),\n    token_endpoint_auth_method: 'none',\n    application_type: 'native',\n    dpop_bound_access_tokens: true,\n  }\n}\n\nif (protocol === 'https:') {\n  // draft-oauth-client-id-metadata-document\n  return fetchAndValidateMetadataDocument(clientId)\n}\n\n// else throw an error\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request for Backend Client\nDESCRIPTION: This HTTP POST request demonstrates how a backend client exchanges an authorization code for access and refresh tokens using PKCE, DPoP, and JWT assertion.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://entryway.example.com/oauth/token\nContent-Type: application/x-www-form-urlencoded\nDPoP: <DPOP_PROOF_JWT>\n\ngrant_type=authorization_code\n&code=<AUTHORIZATION_CODE>\n&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\n&client_id=https%3A%2F%2Fapp.example.com%2Fclient-metadata.json\n&redirect_uri=https%3A%2F%2Fapp.example.com%2Fmy-app%2Foauth-callback\n&client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer\n&client_assertion=<SELF_SIGNED_JWT>\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Response for Serverless Browser App\nDESCRIPTION: This HTTP response provides the access token, token type, expiration time, and refresh token after a successful token exchange for a serverless browser app.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_13\n\nLANGUAGE: http-response\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\n\n{\n \"access_token\": \"Kz~8mXK1EalYznwH-LC-1fBAo.4Ljp~zsPE_NeO.gxU\",\n \"token_type\": \"DPoP\",\n \"expires_in\": 2677,\n \"refresh_token\": \"Q..Zkm29lexi8VnWg2zPW1x-tgGad0Ibc3s3EwM_Ni4-g\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing PAR + PKCE Request for Backend Client Authorization\nDESCRIPTION: This HTTP POST request demonstrates how a backend client initiates the authorization process using Pushed Authorization Request (PAR) and Proof Key for Code Exchange (PKCE).\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://entryway.example.com/oauth/par\nContent-Type: application/x-www-form-urlencoded\n\nresponse_type=code\n&code_challenge=K2-ltc83acc4h0c9w6ESC_rEMTJ3bww-uCHaoeK1t8U\n&code_challenge_method=S256\n&client_id=https%3A%2F%2Fapp.example.com%2Fclient-metadata.json\n&state=duk681S8n00GsJpe7n9boxdzen\n&redirect_uri=https%3A%2F%2Fapp.example.com%2Fmy-app%2Foauth-callback\n&scope=scope_a%20scope_b%20scope_c\n&login_hint=did%3Aplc%3A123\n&client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer\n&client_assertion=<SELF_SIGNED_JWT>\n```\n\n----------------------------------------\n\nTITLE: Single Page Application Architecture Diagram\nDESCRIPTION: ASCII diagram illustrating the interaction flow between Browser, Static Web Host, Authorization Server, and Resource Server in a frontend-only OAuth2 flow.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n                      +---------------+           +--------------+\n                      |               |           |              |\n       +------------+ | Authorization |           |   Resource   |\n       |              |    Server     |           |    Server    |\n       |              |               |           |              |\n       |              +---------------+           +--------------+\n       |                     ^     ^                 ^     +\n       |(C)                  |     |                 |     |\n       |                     |(B)  |(D)              |(E)  |(F)\n       |                     |     |                 |     |\n       |                     |     |                 |     |\n       v                     +     v                 +     v\n+-----------------+         +-------------------------------+\n|                 |   (A)   |                               |\n| Static Web Host | +-----> |           Browser             |\n|                 |         |                               |\n+-----------------+         +-------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Describing Moderation Control Actions in Markdown\nDESCRIPTION: This snippet defines the possible actions that can be taken on labeled content, including hide, reduce, warn, advise, and show.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## The possible actions on a label\n\nThere are five possible interpretations for a label:\n\n* **Hide**. Filter the content out of feeds, notifications, and threads; blur the content if opened directly.\n* **Reduce**. Filter the content out of feeds and blur the content in all other contexts.\n* **Warn**. Put the content behind a cover that requires a click-through. Depending on the label, the blur should cover the entire post, the content of the post, or just the media of a post.\n* **Advise**. Attach a warning label to the content but don't filter or blur it.\n* **Show**. Ignore the label.\n\nThese settings are applied globally. It might be possible to have local overrides (such as settings for a specific feed or a specific labeler) but we want to keep things simple for now.\n```\n\n----------------------------------------\n\nTITLE: Defining Imperative Labels in Markdown\nDESCRIPTION: This snippet outlines special imperative labels that have specific powers in content moderation, including blur, filter, and no-promote actions.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Imperative labels\n\nIn addition to the vocabulary above, there are three labels that have special powers:\n\n* **!blur**. Account or content will be put behind a generic warning.\n* **!filter**. Account or content will be removed from view.\n* **!no-promote**. Account or content will not be placed in algorithmic feeds.\n\nThese labels act as a kind of emergency override for scenarios where none of the existing labels will do the job. While only applied when coming from a Labeling Service that the account has subscribed to, the specific behavior can not be configured by the client, and they should be used with care.\n```\n\n----------------------------------------\n\nTITLE: Constructing Authorization URL with Request URI\nDESCRIPTION: This URL example shows how to construct the authorization URL using the request URI obtained from the previous step.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_7\n\nLANGUAGE: url\nCODE:\n```\nhttps://entryway.example.com/oauth/authorize?client_id=https%3A%2F%2Fapp.example.com%2Fclient-metadata.json&request_uri=urn%3Aietf%3Aparams%3Aoauth%3Arequest_uri%3Abwc4JK-ESC0w8acc191e-Y1LTC2\n```\n\n----------------------------------------\n\nTITLE: Authorization URL for Serverless Browser App\nDESCRIPTION: This URL example shows how to construct the authorization URL for a serverless browser app using the request URI obtained from the PAR request.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_11\n\nLANGUAGE: url\nCODE:\n```\nhttps://bar.xzy/oauth2/authorize\n  ?client_id=https%3A%2F%2Fapp.example.com%2Fclient-metadata.json\n  &request_uri=urn%3Aietf%3Aparams%3Aoauth%3Arequest_uri%3Abwc4JK-ESC0w8acc191e-Y1LTC2\n```\n\n----------------------------------------\n\nTITLE: Authorization Server Response with Request URI\nDESCRIPTION: This HTTP response from the Authorization Server provides a request URI and expiration time for the authorization request.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0004-oauth/README.md#2025-04-23_snippet_6\n\nLANGUAGE: http-response\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: no-cache, no-store\nContent-Type: application/json\n\n{\n  \"request_uri\": \"urn:ietf:params:oauth:request_uri:bwc4JK-ESC0w8acc191e-Y1LTC2\",\n  \"expires_in\": 90\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Declaration for a Comprehensive Bluesky Moderation Service\nDESCRIPTION: This example shows a JSON declaration for a moderation service that handles most aspects of Bluesky content moderation, except for chat/DMs. It specifies the subject types, subject collections, and reason types it can process.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0007-mod-report-routing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\": \"app.bsky.labeler.service\",\n  \"createdAt\": \"2025-02-20T23:51:29.593Z\",\n  \"policies\": {\n    \"labelValueDefinitions\": [...],\n    \"labelValues\": [...]\n  },\n  \"subjectTypes\": [\"record\", \"account\"],\n  \"subjectCollections\": [\n    \"app.bsky.feed.post\",\n    \"app.bsky.actor.profile\",\n    \"app.bsky.graph.list\",\n    \"app.bsky.feed.generator\",\n    \"app.bsky.labeler.service\",\n  ],\n  \"reasonTypes\": [\n    \"com.atproto.moderation.defs#reasonSpam\",\n    \"com.atproto.moderation.defs#reasonViolation\",\n    \"com.atproto.moderation.defs#reasonMisleading\",\n    \"com.atproto.moderation.defs#reasonSexual\",\n    \"com.atproto.moderation.defs#reasonRude\",\n    \"com.atproto.moderation.defs#reasonOther\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Declaration for a Targeted Bot Detection Moderation Service\nDESCRIPTION: This example demonstrates a more specialized moderation service that focuses only on identifying inauthentic accounts (bots). It only accepts reports on accounts with the 'misleading' reason type.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0007-mod-report-routing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\": \"app.bsky.labeler.service\",\n  \"createdAt\": \"2025-02-20T23:51:29.593Z\",\n  \"policies\": {\n    \"labelValueDefinitions\": [...],\n    \"labelValues\": [...]\n  },\n  \"subjectTypes\": [\"account\"],\n  \"subjectCollections\": [],\n  \"reasonTypes\": [\n    \"com.atproto.moderation.defs#reasonMisleading\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: User Intent Declaration Schema in JSON\nDESCRIPTION: A sample record showing the declaration format for user intents in ATProtocol. It includes boolean fields to allow or disallow different types of content usage, with timestamps indicating when each preference was updated.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0008-user-intents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\": \"org.user-intents.declaration\",\n  \"updatedAt\": \"2025-02-20T21:37:20.362Z\",\n  \"publicAccessArchive\": {\n    \"allow\": true, // true means \"allow\"\n    \"updatedAt\": \"2025-02-20T21:37:20.362Z\"\n  },\n  \"syntheticContentGeneration\": {\n    \"allow\": false, // false means \"disallow\"\n    \"updatedAt\": \"2025-02-20T21:37:20.362Z\"\n  },\n  \"protocolBridging\": {\n    // NOTE: missing 'allow' field means \"undefined\" preference (do not set to 'null')\n    \"updatedAt\": \"2019-02-20T22:44:20.000Z\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Intent Declaration JSON for Disallowing Generative AI\nDESCRIPTION: This snippet demonstrates how a user's intent to disallow their data for generative AI training would be represented as a JSON record in their repository. The record uses the 'org.user-intents.declaration' type and includes a timestamp for when the preference was updated, along with an explicit 'allow: false' setting.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0008-user-intents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\": \"org.user-intents.declaration\",\n  \"syntheticContentGeneration\": {\n    \"updatedAt\": \"2025-02-20T21:37:20.362Z\",\n    \"allow\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Misinformation Content Labels in Markdown\nDESCRIPTION: This snippet outlines labels for misinformation and deceptive content, including categories for account security threats, impersonation, scams, and various forms of misleading information.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Misinformation\n\nThis category is geared towards producing a healthier information network. These labels can be quickly politicized and need to be used with some care.\n\n* **account-security**. Content designed to hijack user accounts such as a phishing attack.\n* **net-abuse**. Content designed to attack network systems such as denial-of-service attacks.\n* **impersonation**. Accounts which falsely assert some identity.\n* **scam**. Fraudulent content.\n* **misinformation**. Lies.\n* **misleading**. For example, \"rick roll\" links. Not to be used for misinformation, fraud, or scams.\n* **unverified**. Assertions which have not been verified by a trusted source.\n* **manipulated**. Content which misrepresents a person or event by modifying the source material.\n* **fringe**. Conspiracy theories.\n* **bullshit**. Content which is not technically wrong or lying, but misleading through omission or re-contextualization.\n```\n\n----------------------------------------\n\nTITLE: Defining Intolerant Content Labels in Markdown\nDESCRIPTION: This snippet lists and describes labels for intolerant content, including categories for race, gender, sexual orientation, and religion.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Intolerant\n\nContent or behavior which is hateful or intolerant toward a group of people.\n\n* **intolerant-race**. Hateful or intolerant content related to race.\n* **intolerant-gender**. Hateful or intolerant content related to gender or gender identity.\n* **intolerant-sexual-orientation**. Hateful or intolerant content related to sexual preferences. \\\n**intolerant-religion**. Hateful or intolerant content related to religious views or practices.\n* **intolerant**. A catchall for hateful or intolerant content which is not covered by the above Labels.\n* **Icon-intolerant:** Visual imagery associated with a hate group, such as the KKK or Nazi, in any context (supportive, critical, documentary, etc)\n```\n\n----------------------------------------\n\nTITLE: Defining Rude Content Labels in Markdown\nDESCRIPTION: This snippet outlines labels for rude behavior, including trolling, harassment, bullying, threats, and baiting.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Rude\n\nContent or behavior which is rude toward users. Many of these labels are subjective and can have overlapping meanings, so it is at the discretion of the Labelers to choose which apply correctly. (Multiple labels can be applied if needed, and where appropriate these labels can be applied to an entire account.)\n\n* **trolling**. Content which is intended to produce a negative reaction from other users.\n* **harassment**. Repeated posts directed at a user or a group of users with the intent to produce a negative reaction.\n* **bullying**. Statements or imagery published with the intent to bully, humiliate, or degrade.\n* **threat**. Statements or imagery published with the intent to threaten, intimidate, or harm.\n* **baiting**. Similar to trolling, content which is intended to produce a negative reaction but expressed with a veneer of neutrality.\n```\n\n----------------------------------------\n\nTITLE: Defining Unpleasant Content Labels in Markdown\nDESCRIPTION: This snippet lists labels for subjectively unpleasant content, including categories like disgusting, upsetting, profane, and partisan content.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Unpleasant\n\nA highly subjective category which is geared towards curating a more positive environment. These labels do not always imply that the author has done something wrong. They are instead intended to give users an opportunity to choose the experience they want.\n\nWhile other Labeling Services can incorporate these labels, Bluesky's own Labeling Service is unlikely to apply many of these.\n\n* **disgusting.** Content which is gross, like an image of poop.\n* **upsetting**. Content which is upsetting, like a video of an accident.\n* **profane**. Content which includes excessive swearing or violates common sensibilities.\n* **partisan**. Anything that discusses politics or political discourse.\n* **troubling**. Content which can be difficult to process such as bad news.\n* **shaming**. Negative conversations about someone's behavior.\n* **negative**. Statements which are critical, pessimistic, or generally negative.\n* **spicy**. Provocative statements.\n* **bad-take**. A comment that doesn't really land and is likely to just produce arguments.\n* **arguing**. A conversation that's more argumentative than informative.\n* **tiresome**. Drama, discourse.\n* **gate-keeping**. Statements geared toward establishing an in-group and an out-group.\n* **concern-trolling**. Statements which are ostensibly expressing concern or sympathy but seem designed to create problems.\n* **clout-chasing**. Statements which are designed to elevate the author's profile.\n```\n\n----------------------------------------\n\nTITLE: Defining Spam Content Labels in Markdown\nDESCRIPTION: This snippet defines labels for spam and low-quality content, including categories for general spam, clickbait, shilling, and promotion.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Spam\n\nSpam covers content that doesn't add to the conversation.\n\n* **spam**. Repeat, low-quality messages which are clearly not designed to add to a conversation or space.\n* **clickbait**. Low-quality content that's designed to get users to open an external link by appearing more engaging than it is.\n* **shill**. Over-enthusiastic promotion of a technology, product, or service, especially when there is a financial conflict of interest.\n* **promotion**. Advertising or blunt marketing of a commercial service or product.\n```\n\n----------------------------------------\n\nTITLE: Defining Spoiler Content Label in Markdown\nDESCRIPTION: This snippet defines a label for spoiler content, which reveals plot points of films, TV shows, or other media.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0002-labeling-and-moderation-controls/README.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Spoilers\n\nWe couldn't figure out which category this fits into.\n\n* **spoiler**. Discussion about film, TV, etc which gives away plot points.\n```\n\n----------------------------------------\n\nTITLE: Community Management Proposals - Lists and Reply-Gating\nDESCRIPTION: Markdown documentation describing the implementation proposals for User Lists and Reply-Gating features in Bluesky. Includes detailed explanations of use cases, social models, and technical considerations for community management tools.\nSOURCE: https://github.com/bluesky-social/proposals/blob/main/0001-user-lists-replygating-and-thread-moderation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0001 User Lists, Reply-Gating, and Thread Moderation\n\nOnce Bluesky is open to everyone, how will communities maintain their spaces?\n\nThe influx of users will change the dynamics of the network. We're going to need to make tools that are effective, easy to use, and can evolve over time. In that spirit, we're presenting this set of proposals for community management..\n\n_If you want to give feedback on this proposal, please file an issue._\n```"
  }
]