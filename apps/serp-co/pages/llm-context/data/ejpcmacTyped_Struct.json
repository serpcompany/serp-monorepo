[
  {
    "owner": "ejpcmac",
    "repo": "typed_struct",
    "content": "TITLE: Basic Usage of TypedStruct in Elixir\nDESCRIPTION: This snippet shows the basic usage of TypedStruct, including how to use the module, define a struct with fields, set default values, and enforce fields.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyStruct do\n  # Use TypedStruct to import the typedstruct macro.\n  use TypedStruct\n\n  # Define your struct.\n  typedstruct do\n    # Define each field with the field macro.\n    field :a_string, String.t()\n\n    # You can set a default value.\n    field :string_with_default, String.t(), default: \"default\"\n\n    # You can enforce a field.\n    field :enforced_field, integer(), enforce: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Struct using TypedStruct in Elixir\nDESCRIPTION: This snippet shows how to define the same Person struct using TypedStruct, demonstrating the simplified syntax for struct definition with types, default values, and enforced keys.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Person do\n  @moduledoc \"\"\"\n  A struct representing a person.\n  \"\"\"\n\n  use TypedStruct\n\n  typedstruct do\n    @typedoc \"A person\"\n\n    field :name, String.t(), enforce: true\n    field :age, non_neg_integer()\n    field :happy?, boolean(), default: true\n    field :phone, String.t()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Struct in Elixir (Traditional Method)\nDESCRIPTION: This snippet demonstrates the traditional way of defining a struct with types in Elixir, showing the boilerplate code required for struct definition, enforced keys, and type specification.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Person do\n  @moduledoc \"\"\"\n  A struct representing a person.\n  \"\"\"\n\n  @enforce_keys [:name]\n  defstruct name: nil,\n            age: nil,\n            happy?: true,\n            phone: nil\n\n  @typedoc \"A person\"\n  @type t() :: %__MODULE__{\n          name: String.t(),\n          age: non_neg_integer() | nil,\n          happy?: boolean(),\n          phone: String.t() | nil\n        }\nend\n```\n\n----------------------------------------\n\nTITLE: Enforcing Keys by Default in TypedStruct (Elixir)\nDESCRIPTION: This snippet demonstrates how to enforce all keys by default in a TypedStruct definition, with options to override the default behavior for specific fields.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyStruct do\n  use TypedStruct\n\n  # Enforce keys by default.\n  typedstruct enforce: true do\n    # This key is enforced.\n    field :enforced_by_default, term()\n\n    # You can override the default behaviour.\n    field :not_enforced, term(), enforce: false\n\n    # A key with a default value is not enforced.\n    field :not_enforced_either, integer(), default: 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Opaque Types with TypedStruct in Elixir\nDESCRIPTION: This snippet shows how to generate an opaque type for a struct using TypedStruct.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyOpaqueStruct do\n  use TypedStruct\n\n  # Generate an opaque type for the struct.\n  typedstruct opaque: true do\n    field :name, String.t()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to TypedStruct in Elixir\nDESCRIPTION: This snippet shows how to add @typedoc and @moduledoc attributes to a TypedStruct definition for documentation purposes.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ntypedstruct do\n  @typedoc \"A typed struct\"\n\n  field :a_string, String.t()\n  field :an_int, integer()\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Submodules with TypedStruct in Elixir\nDESCRIPTION: This snippet demonstrates how to define a submodule containing a struct using TypedStruct, reducing boilerplate code.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyModule do\n  use TypedStruct\n\n  # You now have %MyModule.Struct{}.\n  typedstruct module: Struct do\n    field :field, term()\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using TypedStruct with Plugins (Lens Example) in Elixir\nDESCRIPTION: This snippet shows how to use TypedStruct with plugins, specifically demonstrating integration with the Lens library for generating lenses.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyStruct do\n  use TypedStruct\n\n  typedstruct do\n    plugin TypedStructLens\n\n    field :a_field, String.t()\n    field :other_field, atom()\n  end\n\n  @spec change(t()) :: t()\n  def change(data) do\n    # a_field/0 is generated by TypedStructLens.\n    lens = a_field()\n    put_in(data, [lens], \"Changed\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Documenting Submodules with TypedStruct in Elixir\nDESCRIPTION: This snippet demonstrates how to add documentation to submodules defined using TypedStruct.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ntypedstruct module: MyStruct do\n  @moduledoc \"A submodule with a typed struct.\"\n  @typedoc \"A typed struct in a submodule\"\n\n  field :a_string, String.t()\n  field :an_int, integer()\nend\n```\n\n----------------------------------------\n\nTITLE: Adding TypedStruct to Mix Dependencies in Elixir\nDESCRIPTION: This snippet shows how to add TypedStruct as a dependency in a Mix project's dependencies list.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{:typed_struct, \"~> 0.3.0\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Formatter for TypedStruct in Elixir\nDESCRIPTION: This snippet demonstrates how to configure the Elixir formatter to avoid adding parentheses to TypedStruct field definitions.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  ...,\n  import_deps: [:typed_struct]\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up TypedStruct Repository in Shell\nDESCRIPTION: Commands to fork, clone the TypedStruct repository locally, add the upstream remote, and checkout the develop branch.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/you/typed_struct.git\n$ cd typed_struct\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Static Analysis in Shell\nDESCRIPTION: Command to run the test suite and static analyzers to ensure code quality before submitting a pull request.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ mix check\n```\n\n----------------------------------------\n\nTITLE: Running Static Analyzers in Shell\nDESCRIPTION: Command to run the static code analyzers to ensure code quality.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ mix check\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies in Shell\nDESCRIPTION: Commands to navigate to the project directory and fetch the Elixir dependencies using Mix.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ cd typed_struct\n$ mix deps.get\n```\n\n----------------------------------------\n\nTITLE: Syncing with Upstream Develop Branch in Shell\nDESCRIPTION: Commands to checkout develop branch, fetch the latest changes, and rebase on the upstream develop branch.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout develop\n$ git fetch --all --prune\n$ git rebase upstream/develop\n```\n\n----------------------------------------\n\nTITLE: Creating a Git-Flow Feature Branch in Shell\nDESCRIPTION: Command to start a new feature using git-flow, which creates a properly named feature branch.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ git flow feature start <my_feature>\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch on Develop in Shell\nDESCRIPTION: Commands to rebase a feature branch on the latest develop branch to incorporate recent changes.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout <my_feature_branch>\n$ git rebase develop\n```\n\n----------------------------------------\n\nTITLE: Example Commit Workflow in Shell\nDESCRIPTION: Example commands showing the process of making and committing changes following conventional commits format.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# Some work\n$ git commit -am \"feat: my first change\"\n# Some work\n$ git commit -am \"refactor: my second change\"\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Shell\nDESCRIPTION: Command to create a new branch for a small change with an explicit name.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b <my_branch>\n```\n\n----------------------------------------\n\nTITLE: Running Git Setup Script in Shell\nDESCRIPTION: Command to run the project's git setup script which configures git-flow with standard project settings.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ ./.gitsetup\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Package Manager in Shell\nDESCRIPTION: Command to download and run the Nix installation script which sets up the Nix package manager.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://nixos.org/nix/install | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Direnv with Nix in Shell\nDESCRIPTION: Command to install direnv using the Nix package manager, which helps automatically set up the environment.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-env -i direnv\n```\n\n----------------------------------------\n\nTITLE: Direnv Shell Configuration\nDESCRIPTION: Shell configuration to add to your shell's RC file to enable direnv integration.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\neval \"$(direnv hook <shell>)\"\n```\n\n----------------------------------------\n\nTITLE: Starting Nix Shell Manually in Shell\nDESCRIPTION: Commands to navigate to the project directory and start a Nix shell for development.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cd typed_struct\n$ nix-shell\n```\n\n----------------------------------------\n\nTITLE: Enabling Direnv for the Project in Shell\nDESCRIPTION: Commands to navigate to the project directory and allow direnv to set up the environment automatically.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ cd typed_struct\n$ direnv allow\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote in Shell\nDESCRIPTION: Command to add the main repository as a remote named 'upstream' for syncing with the original project.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote add upstream https://github.com/ejpcmac/typed_struct.git\n```\n\n----------------------------------------\n\nTITLE: Checking Out Develop Branch in Shell\nDESCRIPTION: Command to switch to the develop branch which is the main branch for development in the git-flow workflow.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout develop\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format Example\nDESCRIPTION: Example showing the Keep a Changelog format used in the document, with version number, date, and change categories.\nSOURCE: https://github.com/ejpcmac/typed_struct/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.3.0] - 2022-02-15\n\n### Added\n\n* [Plugin] Add the `field/4` callback with an additional `env` argument.\n\n### Deprecated\n\n* [Plugin] Deprecate the `field/3` callback in favour of `field/4`.\n\n### Removed\n\n* Drop support for unsupported Elixir versions\n\n### Fixed\n\n* Fix the lexical scope of the `typestruct` block\n```"
  }
]