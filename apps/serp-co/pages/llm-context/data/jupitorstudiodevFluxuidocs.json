[
  {
    "owner": "jupitorstudiodev",
    "repo": "fluxuidocs",
    "content": "TITLE: Using Props and Attributes in Flux Button Component\nDESCRIPTION: Demonstrates the usage of a Flux-specific prop (variant) and a bespoke attribute (x-on:change.prevent) on a button component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:button variant=\"primary\" x-on:change.prevent=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Implementing FluxUI Sidebar with Secondary Header\nDESCRIPTION: Enhanced sidebar layout implementation that includes a secondary header with additional navigation options. Features responsive design, dark mode support, and mobile-friendly navigation toggle.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/sidebar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n\n    @fluxAppearance\n</head>\n<body class=\"min-h-screen bg-white dark:bg-zinc-800\">\n    <flux:sidebar sticky stashable class=\"bg-zinc-50 dark:bg-zinc-900 border-r rtl:border-r-0 rtl:border-l border-zinc-200 dark:border-zinc-700\">\n        <flux:sidebar.toggle class=\"lg:hidden\" icon=\"x-mark\" />\n\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/logo.png\" name=\"Acme Inc.\" class=\"px-2 dark:hidden\" />\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/dark-mode-logo.png\" name=\"Acme Inc.\" class=\"px-2 hidden dark:flex\" />\n\n        <flux:input as=\"button\" variant=\"filled\" placeholder=\"Search...\" icon=\"magnifying-glass\" />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"home\" href=\"#\" current>Home</flux:navlist.item>\n            <flux:navlist.item icon=\"inbox\" badge=\"12\" href=\"#\">Inbox</flux:navlist.item>\n            <flux:navlist.item icon=\"document-text\" href=\"#\">Documents</flux:navlist.item>\n            <flux:navlist.item icon=\"calendar\" href=\"#\">Calendar</flux:navlist.item>\n\n            <flux:navlist.group expandable heading=\"Favorites\" class=\"hidden lg:grid\">\n                <flux:navlist.item href=\"#\">Marketing site</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Android app</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Brand guidelines</flux:navlist.item>\n            </flux:navlist.group>\n        </flux:navlist>\n\n        <flux:spacer />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"cog-6-tooth\" href=\"#\">Settings</flux:navlist.item>\n            <flux:navlist.item icon=\"information-circle\" href=\"#\">Help</flux:navlist.item>\n        </flux:navlist>\n\n        <flux:dropdown position=\"top\" align=\"start\" class=\"max-lg:hidden\">\n            <flux:profile avatar=\"https://fluxui.dev/img/demo/user.png\" name=\"Olivia Martin\" />\n\n            <flux:menu>\n                <flux:menu.radio.group>\n                    <flux:menu.radio checked>Olivia Martin</flux:menu.radio>\n                    <flux:menu.radio>Truly Delta</flux:menu.radio>\n                </flux:menu.radio.group>\n\n                <flux:menu.separator />\n\n                <flux:menu.item icon=\"arrow-right-start-on-rectangle\">Logout</flux:menu.item>\n            </flux:menu>\n        </flux:dropdown>\n    </flux:sidebar>\n\n    <flux:header class=\"block! bg-white lg:bg-zinc-50 dark:bg-zinc-900 border-b border-zinc-200 dark:border-zinc-700\">\n        <flux:navbar class=\"lg:hidden w-full\">\n            <flux:sidebar.toggle class=\"lg:hidden\" icon=\"bars-2\" inset=\"left\" />\n\n            <flux:spacer />\n\n            <flux:dropdown position=\"top\" align=\"start\">\n                <flux:profile avatar=\"https://fluxui.dev/img/demo/user.png\" />\n\n                <flux:menu>\n                    <flux:menu.radio.group>\n                        <flux:menu.radio checked>Olivia Martin</flux:menu.radio>\n                        <flux:menu.radio>Truly Delta</flux:menu.radio>\n                    </flux:menu.radio.group>\n\n                    <flux:menu.separator />\n\n                    <flux:menu.item icon=\"arrow-right-start-on-rectangle\">Logout</flux:menu.item>\n                </flux:menu>\n            </flux:dropdown>\n        </flux:navbar>\n\n        <flux:navbar scrollable>\n            <flux:navbar.item href=\"#\" current>Dashboard</flux:navbar.item>\n            <flux:navbar.item badge=\"32\" href=\"#\">Orders</flux:navbar.item>\n            <flux:navbar.item href=\"#\">Catalog</flux:navbar.item>\n            <flux:navbar.item href=\"#\">Configuration</flux:navbar.item>\n        </flux:navbar>\n    </flux:header>\n\n    <flux:main>\n        <flux:heading size=\"xl\" level=\"1\">Good afternoon, Olivia</flux:heading>\n\n        <flux:text class=\"mb-6 mt-2 text-base\">Here's what's new today</flux:text>\n\n        <flux:separator variant=\"subtle\" />\n    </flux:main>\n\n    @fluxScripts\n</body>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Width to Flux Select Component with Tailwind\nDESCRIPTION: A simple example showing how to customize a Flux select component's width using Tailwind classes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:select class=\"max-w-md\">\n```\n\n----------------------------------------\n\nTITLE: Data Binding in Flux Components\nDESCRIPTION: Shows how to use wire:model for data binding in various Flux components, compatible with Livewire.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:input wire:model=\"email\" />\n<flux:checkbox wire:model=\"terms\" />\n<flux:switch wire:model.live=\"enabled\" />\n<flux:textarea wire:model=\"content\" />\n<flux:select wire:model=\"state\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:checkbox.group wire:model=\"notifications\">\n<flux:radio.group wire:model=\"payment\">\n<flux:tabs wire:model=\"activeTab\">\n```\n\n----------------------------------------\n\nTITLE: Composable Input Field in Flux UI\nDESCRIPTION: Shows how Flux UI allows for more control and customization by composing a form field from individual parts.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label>Email</flux:label>\n\n    <flux:input wire:model=\"email\" />\n\n    <flux:error name=\"email\" />\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-width Header Layout with FluxUI in HTML\nDESCRIPTION: This code snippet showcases a complete implementation of a full-width header layout using FluxUI components. It includes a responsive header, navigation bar, sidebar for mobile views, and main content area. The layout supports dark mode and uses Tailwind CSS classes for styling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/header.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <!-- ... -->\n\n    @fluxAppearance\n</head>\n<body class=\"min-h-screen bg-white dark:bg-zinc-800\">\n    <flux:header container class=\"bg-zinc-50 dark:bg-zinc-900 border-b border-zinc-200 dark:border-zinc-700\">\n        <flux:sidebar.toggle class=\"lg:hidden\" icon=\"bars-2\" inset=\"left\" />\n\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/logo.png\" name=\"Acme Inc.\" class=\"max-lg:hidden dark:hidden\" />\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/dark-mode-logo.png\" name=\"Acme Inc.\" class=\"max-lg:hidden! hidden dark:flex\" />\n\n        <flux:navbar class=\"-mb-px max-lg:hidden\">\n            <flux:navbar.item icon=\"home\" href=\"#\" current>Home</flux:navbar.item>\n            <flux:navbar.item icon=\"inbox\" badge=\"12\" href=\"#\">Inbox</flux:navbar.item>\n            <flux:navbar.item icon=\"document-text\" href=\"#\">Documents</flux:navbar.item>\n            <flux:navbar.item icon=\"calendar\" href=\"#\">Calendar</flux:navbar.item>\n\n            <flux:separator vertical variant=\"subtle\" class=\"my-2\"/>\n\n            <flux:dropdown class=\"max-lg:hidden\">\n                <flux:navbar.item icon:trailing=\"chevron-down\">Favorites</flux:navbar.item>\n\n                <flux:navmenu>\n                    <flux:navmenu.item href=\"#\">Marketing site</flux:navmenu.item>\n                    <flux:navmenu.item href=\"#\">Android app</flux:navmenu.item>\n                    <flux:navmenu.item href=\"#\">Brand guidelines</flux:navmenu.item>\n                </flux:navmenu>\n            </flux:dropdown>\n        </flux:navbar>\n\n        <flux:spacer />\n\n        <flux:navbar class=\"me-4\">\n            <flux:navbar.item icon=\"magnifying-glass\" href=\"#\" label=\"Search\" />\n            <flux:navbar.item class=\"max-lg:hidden\" icon=\"cog-6-tooth\" href=\"#\" label=\"Settings\" />\n            <flux:navbar.item class=\"max-lg:hidden\" icon=\"information-circle\" href=\"#\" label=\"Help\" />\n        </flux:navbar>\n\n        <flux:dropdown position=\"top\" align=\"start\">\n            <flux:profile avatar=\"https://fluxui.dev/img/demo/user.png\" />\n\n            <flux:menu>\n                <flux:menu.radio.group>\n                    <flux:menu.radio checked>Olivia Martin</flux:menu.radio>\n                    <flux:menu.radio>Truly Delta</flux:menu.radio>\n                </flux:menu.radio.group>\n\n                <flux:menu.separator />\n\n                <flux:menu.item icon=\"arrow-right-start-on-rectangle\">Logout</flux:menu.item>\n            </flux:menu>\n        </flux:dropdown>\n    </flux:header>\n\n    <flux:sidebar stashable sticky class=\"lg:hidden bg-zinc-50 dark:bg-zinc-900 border rtl:border-r-0 rtl:border-l border-zinc-200 dark:border-zinc-700\">\n        <flux:sidebar.toggle class=\"lg:hidden\" icon=\"x-mark\" />\n\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/logo.png\" name=\"Acme Inc.\" class=\"px-2 dark:hidden\" />\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/dark-mode-logo.png\" name=\"Acme Inc.\" class=\"px-2 hidden dark:flex\" />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"home\" href=\"#\" current>Home</flux:navlist.item>\n            <flux:navlist.item icon=\"inbox\" badge=\"12\" href=\"#\">Inbox</flux:navlist.item>\n            <flux:navlist.item icon=\"document-text\" href=\"#\">Documents</flux:navlist.item>\n            <flux:navlist.item icon=\"calendar\" href=\"#\">Calendar</flux:navlist.item>\n\n            <flux:navlist.group expandable heading=\"Favorites\" class=\"max-lg:hidden\">\n                <flux:navlist.item href=\"#\">Marketing site</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Android app</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Brand guidelines</flux:navlist.item>\n            </flux:navlist.group>\n        </flux:navlist>\n\n        <flux:spacer />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"cog-6-tooth\" href=\"#\">Settings</flux:navlist.item>\n            <flux:navlist.item icon=\"information-circle\" href=\"#\">Help</flux:navlist.item>\n        </flux:navlist>\n    </flux:sidebar>\n\n    <flux:main container>\n        <flux:heading size=\"xl\" level=\"1\">Good afternoon, Olivia</flux:heading>\n\n        <flux:text class=\"mt-2 mb-6 text-base\">Here's what's new today</flux:text>\n\n        <flux:separator variant=\"subtle\" />\n    </flux:main>\n\n    @fluxScripts\n</body>\n```\n\n----------------------------------------\n\nTITLE: Basic Input Field with Label and Description in FluxUI\nDESCRIPTION: Demonstrates the basic usage of the flux:field component to create an input field with a label, description, and error handling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label>Username</flux:label>\n\n    <flux:description>This will be publicly displayed.</flux:description>\n\n    <flux:input />\n\n    <flux:error name=\"username\" />\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form with Flux Card Component in HTML\nDESCRIPTION: This snippet demonstrates how to create a login form using the Flux Card component. It includes input fields for email and password, along with login and signup buttons.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/card.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:card class=\"space-y-6\">\n    <div>\n        <flux:heading size=\"lg\">Log in to your account</flux:heading>\n        <flux:text class=\"mt-2\">Welcome back!</flux:text>\n    </div>\n\n    <div class=\"space-y-6\">\n        <flux:input label=\"Email\" type=\"email\" placeholder=\"Your email address\" />\n\n        <flux:field>\n            <div class=\"mb-3 flex justify-between\">\n                <flux:label>Password</flux:label>\n\n                <flux:link href=\"#\" variant=\"subtle\" class=\"text-sm\">Forgot password?</flux:link>\n            </div>\n\n            <flux:input type=\"password\" placeholder=\"Your password\" />\n\n            <flux:error name=\"password\" />\n        </flux:field>\n    </div>\n\n    <div class=\"space-y-2\">\n        <flux:button variant=\"primary\" class=\"w-full\">Log in</flux:button>\n\n        <flux:button variant=\"ghost\" class=\"w-full\">Sign up for a new account</flux:button>\n    </div>\n</flux:card>\n```\n\n----------------------------------------\n\nTITLE: Including Flux Assets in Blade Layout\nDESCRIPTION: Blade directives to include Flux styling and scripts in your layout file. @fluxAppearance handles theme management and @fluxScripts loads required JavaScript.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    ...\n    @fluxAppearance\n</head>\n\n<body>\n    ...\n    @fluxScripts\n</body>\n```\n\n----------------------------------------\n\nTITLE: Using Group-Suffixed Components in Flux UI\nDESCRIPTION: Examples of standalone Flux components that can be optionally grouped using wrapper components with the .group suffix. These components can be used either individually or within their respective group components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:button.group>\n    <flux:button />\n</flux:button.group>\n\n<flux:input.group>\n    <flux:input />\n</flux:input.group>\n\n<flux:checkbox.group>\n    <flux:checkbox />\n</flux:checkbox.group>\n\n<flux:radio.group>\n    <flux:radio />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Inset Button Alignment in FluxUI\nDESCRIPTION: Demonstrates how to use the inset property with ghost or subtle button variants to achieve better alignment by negating invisible padding.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex justify-between\">\n    <flux:heading>Post successfully created.</flux:heading>\n\n    <flux:button size=\"sm\" icon=\"x-mark\" variant=\"ghost\" inset />\n</div>  \n```\n\n----------------------------------------\n\nTITLE: Opt-out Props and Shorthand Syntax in Flux\nDESCRIPTION: Demonstrates the use of opt-out props and shorthand syntax for common component arrangements in Flux.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:navbar.item :current=\"false\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label>Email</flux:label>\n\n    <flux:input wire:model=\"email\" type=\"email\" />\n\n    <flux:error name=\"email\" />\n</flux:field>\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:input type=\"email\" wire:model=\"email\" label=\"Email\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:tooltip content=\"Settings\">\n    <flux:button icon=\"cog-6-tooth\" />\n</flux:tooltip>\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button icon=\"cog-6-tooth\" tooltip=\"Settings\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing All Flux Components at Once\nDESCRIPTION: Using the --all flag to publish all Flux components in a single command.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nphp artisan flux:publish --all\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Component in FluxUI\nDESCRIPTION: A basic implementation of the FluxUI select component with a placeholder and multiple options. This uses the standard native select element with FluxUI styling and can be bound to Livewire models.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:select wire:model=\"industry\" placeholder=\"Choose industry...\">\n    <flux:select.option>Photography</flux:select.option>\n    <flux:select.option>Design services</flux:select.option>\n    <flux:select.option>Web development</flux:select.option>\n    <flux:select.option>Accounting</flux:select.option>\n    <flux:select.option>Legal services</flux:select.option>\n    <flux:select.option>Consulting</flux:select.option>\n    <flux:select.option>Other</flux:select.option>\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Flux\nDESCRIPTION: CSS configuration to properly import Flux styles and enable dark mode using Tailwind CSS v4's custom variant syntax.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import '../../vendor/livewire/flux/dist/flux.css';\n\n@custom-variant dark (&:where(.dark, .dark *));\n```\n\n----------------------------------------\n\nTITLE: Using Input as Button in FluxUI\nDESCRIPTION: Demonstrates how to use the input component as a button by setting the as=\"button\" property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:input as=\"button\" placeholder=\"Search...\" icon=\"magnifying-glass\" kbd=\"⌘K\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing Flux Components with Artisan Command\nDESCRIPTION: Command to publish Flux components to your project, allowing you to customize them completely.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nphp artisan flux:publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Accent Colors in Flux v2\nDESCRIPTION: Example of defining custom accent colors in app.css using the new @theme block for default colors and @layer theme for dark mode colors.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@theme {\n    --color-accent: var(--color-sky-600);\n    --color-accent-content: var(--color-sky-600);\n    --color-accent-foreground: var(--color-white);\n}\n\n@layer theme {\n    .dark {\n        --color-accent: var(--color-sky-600);\n        --color-accent-content: var(--color-sky-400);\n        --color-accent-foreground: var(--color-white);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full-Featured Table with Livewire Integration in Flux UI\nDESCRIPTION: This example demonstrates a complete implementation of a paginated, sortable table using Flux UI components with Livewire. It includes customer information, dates, status badges, and amounts with sorting functionality.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/table.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:table :paginate=\"$this->orders\">\n    <flux:table.columns>\n        <flux:table.column>Customer</flux:table.column>\n        <flux:table.column sortable :sorted=\"$sortBy === 'date'\" :direction=\"$sortDirection\" wire:click=\"sort('date')\">Date</flux:table.column>\n        <flux:table.column sortable :sorted=\"$sortBy === 'status'\" :direction=\"$sortDirection\" wire:click=\"sort('status')\">Status</flux:table.column>\n        <flux:table.column sortable :sorted=\"$sortBy === 'amount'\" :direction=\"$sortDirection\" wire:click=\"sort('amount')\">Amount</flux:table.column>\n    </flux:table.columns>\n\n    <flux:table.rows>\n        @foreach ($this->orders as $order)\n            <flux:table.row :key=\"$order->id\">\n                <flux:table.cell class=\"flex items-center gap-3\">\n                    <flux:avatar size=\"xs\" src=\"{{ $order->customer_avatar }}\" />\n\n                    {{ $order->customer }}\n                </flux:table.cell>\n\n                <flux:table.cell class=\"whitespace-nowrap\">{{ $order->date }}</flux:table.cell>\n\n                <flux:table.cell>\n                    <flux:badge size=\"sm\" :color=\"$order->status_color\" inset=\"top bottom\">{{ $order->status }}</flux:badge>\n                </flux:table.cell>\n\n                <flux:table.cell variant=\"strong\">{{ $order->amount }}</flux:table.cell>\n\n                <flux:table.cell>\n                    <flux:button variant=\"ghost\" size=\"sm\" icon=\"ellipsis-horizontal\" inset=\"top bottom\"></flux:button>\n                </flux:table.cell>\n            </flux:table.row>\n        @endforeach\n    </flux:table.rows>\n</flux:table>\n\n<!-- Livewire component example code...\n    use \\Livewire\\WithPagination;\n\n    public $sortBy = 'date';\n    public $sortDirection = 'desc';\n\n    public function sort($column) {\n        if ($this->sortBy === $column) {\n            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            $this->sortBy = $column;\n            $this->sortDirection = 'asc';\n        }\n    }\n\n    #[\\Livewire\\Attributes\\Computed]\n    public function orders()\n    {\n        return \\App\\Models\\Order::query()\n            ->tap(fn ($query) => $this->sortBy ? $query->orderBy($this->sortBy, $this->sortDirection) : $query)\n            ->paginate(5);\n    }\n-->\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Switch in FluxUI HTML\nDESCRIPTION: Demonstrates how to use the flux:switch component within a flux:field for enabling notifications. The switch is bound to a Livewire model for real-time updates.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/switch.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:field variant=\"inline\">\n    <flux:label>Enable notifications</flux:label>\n\n    <flux:switch wire:model.live=\"notifications\" />\n\n    <flux:error name=\"notifications\" />\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FluxUI Sidebar Layout\nDESCRIPTION: Example of a basic sidebar layout implementation using FluxUI components. Includes navigation, branding, search functionality, and user profile dropdown. Features responsive design with mobile toggle and dark mode support.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/sidebar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n\n    @fluxAppearance\n</head>\n<body class=\"min-h-screen bg-white dark:bg-zinc-800\">\n    <flux:sidebar sticky stashable class=\"bg-zinc-50 dark:bg-zinc-900 border-r rtl:border-r-0 rtl:border-l border-zinc-200 dark:border-zinc-700\">\n        <flux:sidebar.toggle class=\"lg:hidden\" icon=\"x-mark\" />\n\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/logo.png\" name=\"Acme Inc.\" class=\"px-2 dark:hidden\" />\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/dark-mode-logo.png\" name=\"Acme Inc.\" class=\"px-2 hidden dark:flex\" />\n\n        <flux:input as=\"button\" variant=\"filled\" placeholder=\"Search...\" icon=\"magnifying-glass\" />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"home\" href=\"#\" current>Home</flux:navlist.item>\n            <flux:navlist.item icon=\"inbox\" badge=\"12\" href=\"#\">Inbox</flux:navlist.item>\n            <flux:navlist.item icon=\"document-text\" href=\"#\">Documents</flux:navlist.item>\n            <flux:navlist.item icon=\"calendar\" href=\"#\">Calendar</flux:navlist.item>\n\n            <flux:navlist.group expandable heading=\"Favorites\" class=\"hidden lg:grid\">\n                <flux:navlist.item href=\"#\">Marketing site</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Android app</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Brand guidelines</flux:navlist.item>\n            </flux:navlist.group>\n        </flux:navlist>\n\n        <flux:spacer />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"cog-6-tooth\" href=\"#\">Settings</flux:navlist.item>\n            <flux:navlist.item icon=\"information-circle\" href=\"#\">Help</flux:navlist.item>\n        </flux:navlist>\n\n        <flux:dropdown position=\"top\" align=\"start\" class=\"max-lg:hidden\">\n            <flux:profile avatar=\"https://fluxui.dev/img/demo/user.png\" name=\"Olivia Martin\" />\n\n            <flux:menu>\n                <flux:menu.radio.group>\n                    <flux:menu.radio checked>Olivia Martin</flux:menu.radio>\n                    <flux:menu.radio>Truly Delta</flux:menu.radio>\n                </flux:menu.radio.group>\n\n                <flux:menu.separator />\n\n                <flux:menu.item icon=\"arrow-right-start-on-rectangle\">Logout</flux:menu.item>\n            </flux:menu>\n        </flux:dropdown>\n    </flux:sidebar>\n\n    <flux:header class=\"lg:hidden\">\n        <flux:sidebar.toggle class=\"lg:hidden\" icon=\"bars-2\" inset=\"left\" />\n\n        <flux:spacer />\n\n        <flux:dropdown position=\"top\" alignt=\"start\">\n            <flux:profile avatar=\"https://fluxui.dev/img/demo/user.png\" />\n\n            <flux:menu>\n                <flux:menu.radio.group>\n                    <flux:menu.radio checked>Olivia Martin</flux:menu.radio>\n                    <flux:menu.radio>Truly Delta</flux:menu.radio>\n                </flux:menu.radio.group>\n\n                <flux:menu.separator />\n\n                <flux:menu.item icon=\"arrow-right-start-on-rectangle\">Logout</flux:menu.item>\n            </flux:menu>\n        </flux:dropdown>\n    </flux:header>\n\n    <flux:main>\n        <flux:heading size=\"xl\" level=\"1\">Good afternoon, Olivia</flux:heading>\n\n        <flux:text class=\"mb-6 mt-2 text-base\">Here's what's new today</flux:text>\n\n        <flux:separator variant=\"subtle\" />\n    </flux:main>\n\n    @fluxScripts\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Palette as Modal in Flux Pro\nDESCRIPTION: This snippet demonstrates how to implement the command palette as a modal dialog. It includes a trigger button with a keyboard shortcut and a modal containing the command palette component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/command.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal.trigger name=\"search\" shortcut=\"cmd.k\">\n    <flux:input as=\"button\" placeholder=\"Search...\" icon=\"magnifying-glass\" kbd=\"⌘K\" />\n</flux:modal.trigger>\n\n<flux:modal name=\"search\" variant=\"bare\" class=\"w-full max-w-[30rem] my-[12vh] max-h-screen overflow-y-hidden\">\n    <flux:command class=\"border-none shadow-lg inline-flex flex-col max-h-[76vh]\">\n        <flux:command.input placeholder=\"Search...\" closable />\n\n        <flux:command.items>\n            <flux:command.item icon=\"user-plus\" kbd=\"⌘A\">Assign to…</flux:command.item>\n            <flux:command.item icon=\"document-plus\">Create new file</flux:command.item>\n            <flux:command.item icon=\"folder-plus\" kbd=\"⌘⇧N\">Create new project</flux:command.item>\n            <flux:command.item icon=\"book-open\">Documentation</flux:command.item>\n            <flux:command.item icon=\"newspaper\">Changelog</flux:command.item>\n            <flux:command.item icon=\"cog-6-tooth\" kbd=\"⌘,\">Settings</flux:command.item>\n        </flux:command.items>\n    </flux:command>\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Modal with Trigger in Flux UI\nDESCRIPTION: Basic implementation of a modal dialog with a trigger button. This example shows a profile editing form with input fields and save button, demonstrating the core modal functionality.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal.trigger name=\"edit-profile\">\n    <flux:button>Edit profile</flux:button>\n</flux:modal.trigger>\n\n<flux:modal name=\"edit-profile\" class=\"md:w-96\">\n    <div class=\"space-y-6\">\n        <div>\n            <flux:heading size=\"lg\">Update profile</flux:heading>\n            <flux:text class=\"mt-2\">Make changes to your personal details.</flux:text>\n        </div>\n\n        <flux:input label=\"Name\" placeholder=\"Your name\" />\n\n        <flux:input label=\"Date of birth\" type=\"date\" />\n\n        <div class=\"flex\">\n            <flux:spacer />\n\n            <flux:button type=\"submit\" variant=\"primary\">Save changes</flux:button>\n        </div>\n    </div>\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: Header with Brand Integration\nDESCRIPTION: Complex example showing how to integrate the brand component within a header alongside navigation and profile elements.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/brand.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:header class=\"px-4! w-full bg-zinc-50 dark:bg-zinc-800 rounded-lg border border-zinc-100 dark:border-white/5\">\n    <flux:brand href=\"#\" name=\"Acme Inc.\">\n        <x-slot name=\"logo\" class=\"bg-accent text-accent-foreground\">\n            <i class=\"font-serif font-bold\">A</i>\n        </x-slot>\n    </flux:brand>\n\n    <flux:navbar variant=\"outline\">\n        <flux:navbar.item href=\"#\" current>Home</flux:navbar.item>\n        <flux:navbar.item badge=\"12\" href=\"#\">Inbox</flux:navbar.item>\n    </flux:navbar>\n\n    <flux:spacer class=\"min-w-24\" />\n\n    <flux:profile circle :chevron=\"false\" avatar=\"https://unavatar.io/x/calebporzio\" />\n</flux:header>\n```\n\n----------------------------------------\n\nTITLE: Importing Flux CSS into Tailwind Configuration\nDESCRIPTION: Updates to the app.css file to directly import Flux CSS styles and configure dark mode custom variant for Tailwind CSS v4.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import '../../vendor/livewire/flux/dist/flux.css';\n\n/* Required for dark mode in Flux... */\n@custom-variant dark (&:where(.dark, .dark *));\n\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complex Dropdown Menu with Flux UI\nDESCRIPTION: This example shows a complete dropdown implementation with a button trigger and a menu containing various item types including standard items, separators, radio groups, and submenus.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown>\n    <flux:button icon:trailing=\"chevron-down\">Options</flux:button>\n\n    <flux:menu>\n        <flux:menu.item icon=\"plus\">New post</flux:menu.item>\n\n        <flux:menu.separator />\n\n        <flux:menu.submenu heading=\"Sort by\">\n            <flux:menu.radio.group>\n                <flux:menu.radio checked>Name</flux:menu.radio>\n                <flux:menu.radio>Date</flux:menu.radio>\n                <flux:menu.radio>Popularity</flux:menu.radio>\n            </flux:menu.radio.group>\n        </flux:menu.submenu>\n\n        <flux:menu.submenu heading=\"Filter\">\n            <flux:menu.checkbox checked>Draft</flux:menu.checkbox>\n            <flux:menu.checkbox checked>Published</flux:menu.checkbox>\n            <flux:menu.checkbox>Archived</flux:menu.checkbox>\n        </flux:menu.submenu>\n\n        <flux:menu.separator />\n\n        <flux:menu.item variant=\"danger\" icon=\"trash\">Delete</flux:menu.item>\n    </flux:menu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Flux UI Tables\nDESCRIPTION: This snippet demonstrates how to enable pagination in a Flux UI table by passing a Laravel paginator instance to the paginate prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/table.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- $orders = \\App\\Models\\Order::paginate(5) -->\n\n<flux:table :paginate=\"$orders\">\n    <!-- ... -->\n</flux:table>  \n\n```\n\n----------------------------------------\n\nTITLE: Disabling Modal Click-Outside Behavior\nDESCRIPTION: Example showing how to disable the default behavior where clicking outside the modal closes it. Uses the :dismissible=\"false\" prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal :dismissible=\"false\">\n    <!-- ... -->\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: Global Style Override with Data Attributes\nDESCRIPTION: Using data-flux-* attributes with Tailwind's @apply directive to globally override styles for all Flux buttons.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n <style>\n    [data-flux-button] {\n        @apply bg-zinc-800 dark:bg-zinc-400 hover:bg-zinc-700 dark:hover:bg-zinc-300;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using Icon Attributes in Flux UI Input Components\nDESCRIPTION: Example of using the icon:trailing attribute to add an icon to the Flux input component without slots. This approach is simpler but offers less customization.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<flux:input icon:trailing=\"x-mark\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete for State Selection in Flux Pro\nDESCRIPTION: This snippet demonstrates how to use the Flux Pro Autocomplete component to create a state selection input. It binds to a Livewire model and includes a list of state options as autocomplete items.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/autocomplete.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:autocomplete wire:model=\"state\" label=\"State of residence\">\n    <flux:autocomplete.item>Alabama</flux:autocomplete.item>\n    <flux:autocomplete.item>Arkansas</flux:autocomplete.item>\n    <flux:autocomplete.item>California</flux:autocomplete.item>\n    <!-- ... -->\n</flux:autocomplete>\n```\n\n----------------------------------------\n\nTITLE: PHP Livewire Toast Implementation\nDESCRIPTION: Example of triggering a Toast notification from a Livewire component\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Livewire\\Component;\nuse Flux\\Flux;\n\nclass EditPost extends Component\n{\n    public function save()\n    {\n        // ...\n\n        Flux::toast('Your changes have been saved.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Accent Colors in Tailwind CSS Inline Styles\nDESCRIPTION: This HTML snippet demonstrates how to use custom accent colors directly in Tailwind CSS inline styles. It shows the usage of CSS variables for background and text colors.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/theming.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"bg-[var(--color-accent)] text-[var(--color-accent-foreground)]\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Command Palette in Flux Pro\nDESCRIPTION: This snippet shows how to create a basic command palette with a search input and a list of command items. It includes keyboard shortcuts and icons for each command.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/command.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:command>\n    <flux:command.input placeholder=\"Search...\" />\n\n    <flux:command.items>\n        <flux:command.item wire:click=\"...\" icon=\"user-plus\" kbd=\"⌘A\">Assign to…</flux:command.item>\n        <flux:command.item wire:click=\"...\" icon=\"document-plus\">Create new file</flux:command.item>\n        <flux:command.item wire:click=\"...\" icon=\"folder-plus\" kbd=\"⌘⇧N\">Create new project</flux:command.item>\n        <flux:command.item wire:click=\"...\" icon=\"book-open\">Documentation</flux:command.item>\n        <flux:command.item wire:click=\"...\" icon=\"newspaper\">Changelog</flux:command.item>\n        <flux:command.item wire:click=\"...\" icon=\"cog-6-tooth\" kbd=\"⌘,\">Settings</flux:command.item>\n    </flux:command.items>\n</flux:command>\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Text Editor Usage in HTML\nDESCRIPTION: Shows how to use the basic flux:editor component with wire:model binding.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:editor wire:model=\"content\" label=\"…\" description=\"…\" />\n```\n\n----------------------------------------\n\nTITLE: flux:editor Component Structure\nDESCRIPTION: Main editor component with support for Livewire binding, content management, and toolbar customization. Includes props for label, description, placeholder, and validation states.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_7\n\nLANGUAGE: markup\nCODE:\n```\n<flux:editor\n  wire:model=\"content\"\n  label=\"Editor Label\"\n  description=\"Help text\"\n  toolbar=\"heading bold italic | link\"\n  placeholder=\"Enter content...\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Close Events\nDESCRIPTION: Example of registering a close event listener on a modal to perform logic after it closes. Shows the syntax for the @close directive.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal @close=\"someLivewireAction\">\n    <!-- ... -->\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: Split Attribute Forwarding in Flux Input Component\nDESCRIPTION: Demonstrates how Flux handles attribute forwarding for complex components that render multiple HTML elements.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"...\">\n  <input type=\"text\" class=\"...\">\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:input class=\"w-full\" autofocus>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"w-full ...\">\n    <input type=\"text\" class=\"...\" autofocus>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Class Merging Conflicts in Flux\nDESCRIPTION: Illustrates a potential class conflict when customizing background color and how to resolve it using Tailwind's important modifier.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:button class=\"bg-zinc-800 hover:bg-zinc-700\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"bg-zinc-800 hover:bg-zinc-700 bg-white hover:bg-zinc-100...\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button class=\"bg-zinc-800! hover:bg-zinc-700!\">\n```\n\n----------------------------------------\n\nTITLE: Implementing a Right-Click Context Menu with FluxUI\nDESCRIPTION: This snippet demonstrates how to create a context menu that appears on right-click, featuring menu items, separators, submenus with radio buttons, checkboxes, and a danger action item. The component uses the flux:context wrapper with a card as the clickable area.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/context.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:context>\n    <flux:card class=\"border-dashed border-2 px-16\">\n        <flux:text>Right click</flux:text>\n    </flux:card>\n\n    <flux:menu>\n        <flux:menu.item icon=\"plus\">New post</flux:menu.item>\n\n        <flux:menu.separator />\n\n        <flux:menu.submenu heading=\"Sort by\">\n            <flux:menu.radio.group>\n                <flux:menu.radio checked>Name</flux:menu.radio>\n                <flux:menu.radio>Date</flux:menu.radio>\n                <flux:menu.radio>Popularity</flux:menu.radio>\n            </flux:menu.radio.group>\n        </flux:menu.submenu>\n\n        <flux:menu.submenu heading=\"Filter\">\n            <flux:menu.checkbox checked>Draft</flux:menu.checkbox>\n            <flux:menu.checkbox checked>Published</flux:menu.checkbox>\n            <flux:menu.checkbox>Archived</flux:menu.checkbox>\n        </flux:menu.submenu>\n\n        <flux:menu.separator />\n\n        <flux:menu.item variant=\"danger\" icon=\"trash\">Delete</flux:menu.item>\n    </flux:menu>\n</flux:context>\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Component Integration in HTML\nDESCRIPTION: Shows how to add the basic Toast component to a page layout\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- ... -->\n\n    <flux:toast />\n</body>\n```\n\n----------------------------------------\n\nTITLE: Button Variants in FluxUI\nDESCRIPTION: Demonstrates the various visual styles available for FluxUI buttons including default, primary, filled, danger, ghost, and subtle variants.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:button>Default</flux:button>\n<flux:button variant=\"primary\">Primary</flux:button>\n<flux:button variant=\"filled\">Filled</flux:button>\n<flux:button variant=\"danger\">Danger</flux:button>\n<flux:button variant=\"ghost\">Ghost</flux:button>\n<flux:button variant=\"subtle\">Subtle</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Switches with Fieldset in FluxUI HTML\nDESCRIPTION: Shows how to group related switches within a fieldset for email notification preferences. Each switch is labeled and described, with subtle separators between options.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/switch.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:fieldset>\n    <flux:legend>Email notifications</flux:legend>\n\n    <div class=\"space-y-4\">\n        <flux:switch wire:model.live=\"communication\" label=\"Communication emails\" description=\"Receive emails about your account activity.\" />\n\n        <flux:separator variant=\"subtle\" />\n\n        <flux:switch wire:model.live=\"marketing\" label=\"Marketing emails\" description=\"Receive emails about new products, features, and more.\" />\n\n        <flux:separator variant=\"subtle\" />\n\n        <flux:switch wire:model.live=\"social\" label=\"Social emails\" description=\"Receive emails for friend requests, follows, and more.\" />\n\n        <flux:separator variant=\"subtle\" />\n\n        <flux:switch wire:model.live=\"security\" label=\"Security emails\" description=\"Receive emails about your account activity and security.\" />\n    </div>\n</flux:fieldset>\n```\n\n----------------------------------------\n\nTITLE: Basic Field Component Implementation in FluxUI\nDESCRIPTION: Demonstrates the basic usage of the Field component in FluxUI, encapsulating an email input with a label and error display.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/field.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label>Email</flux:label>\n\n    <flux:input wire:model=\"email\" type=\"email\" />\n\n    <flux:error name=\"email\" />\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Dropdown Menu Implementation\nDESCRIPTION: Implements a dropdown menu that allows users to select between light, dark, and system appearance modes with appropriate icons for each option.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:dropdown x-data align=\"end\">\n    <flux:button variant=\"subtle\" square class=\"group\" aria-label=\"Preferred color scheme\">\n        <flux:icon.sun x-show=\"$flux.appearance === 'light'\" variant=\"mini\" class=\"text-zinc-500 dark:text-white\" />\n        <flux:icon.moon x-show=\"$flux.appearance === 'dark'\" variant=\"mini\" class=\"text-zinc-500 dark:text-white\" />\n        <flux:icon.moon x-show=\"$flux.appearance === 'system' && $flux.dark\" variant=\"mini\" />\n        <flux:icon.sun x-show=\"$flux.appearance === 'system' && ! $flux.dark\" variant=\"mini\" />\n    </flux:button>\n\n    <flux:menu>\n        <flux:menu.item icon=\"sun\" x-on:click=\"$flux.appearance = 'light'\">Light</flux:menu.item>\n        <flux:menu.item icon=\"moon\" x-on:click=\"$flux.appearance = 'dark'\">Dark</flux:menu.item>\n        <flux:menu.item icon=\"computer-desktop\" x-on:click=\"$flux.appearance = 'system'\">System</flux:menu.item>\n    </flux:menu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: FluxUI Avatar Component Props and Slots Documentation\nDESCRIPTION: Comprehensive documentation of all available props and slots for the flux:avatar component, including image handling, sizing, colors, badges, and interactive features.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nname  |  User's name to display as initials. If provided without initials, this will be used to generate initials automatically.  \nsrc  |  URL to the image to display as avatar.  \ninitials  |  Custom initials to display when no src is provided. Will override name if provided.  \nalt  |  Alternative text for the avatar image. (Default: name if provided)  \nsize  |  Size of the avatar. Options: xs (24px), sm (32px), (default: 40px), lg (48px).  \ncolor  |  Background color when displaying initials or icons. Options: red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose, auto. Default: none (uses system colors).  \ncolor:seed  |  Value used when color=\\\"auto\\\" to deterministically generate consistent colors. Useful for using user IDs to generate consistent colors.  \ncircle  |  If present or true, makes the avatar fully circular instead of rounded corners.  \nicon  |  Name of the icon to display instead of an image or initials.  \nicon:variant  |  Icon variant to use. Options: outline, solid. Default: solid.  \ntooltip  |  Text to display in a tooltip when hovering over the avatar. If set to true, uses the name prop as tooltip content.  \ntooltip:position  |  Position of the tooltip. Options: top, right, bottom, left. Default: top.  \nbadge  |  Content to display as a badge. Can be a string, boolean, or a slot.  \nbadge:color  |  Color of the badge. Options: same color options as the color prop.  \nbadge:circle  |  If present or true, makes the badge fully circular instead of slightly rounded corners.  \nbadge:position  |  Position of the badge. Options: top left, top right, bottom left, bottom right. Default: bottom right.  \nbadge:variant  |  Variant of the badge. Options: solid, outline. Default: solid.  \nas  |  Element to render the avatar as. Options: button, div (default).  \nhref  |  URL to link to, making the avatar a link element.\n```\n\n----------------------------------------\n\nTITLE: Input with Icons in FluxUI\nDESCRIPTION: Demonstrates how to add leading and trailing icons to input fields in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:input icon=\"magnifying-glass\" placeholder=\"Search orders\" />\n\n<flux:input icon:trailing=\"credit-card\" placeholder=\"4444-4444-4444-4444\" />\n\n<flux:input icon:trailing=\"loading\" placeholder=\"Search transactions\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling Modals with JavaScript Global Methods\nDESCRIPTION: Examples of controlling modal dialogs using the window.Flux global object from any JavaScript code in your application.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Control \"confirm\" modals anywhere on the page...\nFlux.modal('confirm').show()\nFlux.modal('confirm').close()\n\n// Closes all modals on the page...\nFlux.modals().close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Input Field in Flux UI\nDESCRIPTION: Demonstrates the simplicity principle of Flux UI by showing a basic input field implementation.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:input wire:model=\"email\" label=\"Email\" />\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Interactive Ellipsis Dropdown in FluxUI\nDESCRIPTION: Advanced breadcrumbs implementation featuring an interactive dropdown menu for truncated navigation paths. This allows users to access hidden breadcrumb items through a dropdown, maintaining full navigation capability in a space-efficient design.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/breadcrumbs.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:breadcrumbs>\n    <flux:breadcrumbs.item href=\"#\" icon=\"home\" />\n\n    <flux:breadcrumbs.item>\n        <flux:dropdown>\n            <flux:button icon=\"ellipsis-horizontal\" variant=\"ghost\" size=\"sm\" />\n\n            <flux:navmenu>\n                <flux:navmenu.item>Client</flux:navmenu.item>\n                <flux:navmenu.item icon=\"arrow-turn-down-right\">Team</flux:navmenu.item>\n                <flux:navmenu.item icon=\"arrow-turn-down-right\">User</flux:navmenu.item>\n            </flux:navmenu>\n        </flux:dropdown>\n    </flux:breadcrumbs.item>\n\n    <flux:breadcrumbs.item>Post</flux:breadcrumbs.item>\n</flux:breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Sidebar Layout with FluxUI in HTML\nDESCRIPTION: This code snippet shows how to create a responsive layout with a header, secondary sidebar, and main content area using FluxUI components. It includes responsive navigation, user profile dropdown, and content organization.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/header.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n\n    @fluxAppearance\n</head>\n<body class=\"min-h-screen bg-white dark:bg-zinc-800\">\n    <flux:header container class=\"bg-zinc-50 dark:bg-zinc-900 border-b border-zinc-200 dark:border-zinc-700\">\n        <flux:sidebar.toggle class=\"lg:hidden\" icon=\"bars-2\" />\n\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/logo.png\" name=\"Acme Inc.\" class=\"max-lg:hidden dark:hidden\" />\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/dark-mode-logo.png\" name=\"Acme Inc.\" class=\"max-lg:hidden! hidden dark:flex\" />\n\n        <flux:navbar class=\"-mb-px max-lg:hidden\">\n            <flux:navbar.item icon=\"home\" href=\"#\" current>Home</flux:navbar.item>\n            <flux:navbar.item icon=\"inbox\" badge=\"12\" href=\"#\">Inbox</flux:navbar.item>\n            <flux:navbar.item icon=\"document-text\" href=\"#\">Documents</flux:navbar.item>\n            <flux:navbar.item icon=\"calendar\" href=\"#\">Calendar</flux:navbar.item>\n\n            <flux:separator vertical variant=\"subtle\" class=\"my-2\"/>\n\n            <flux:dropdown class=\"max-lg:hidden\">\n                <flux:navbar.item icon:trailing=\"chevron-down\">Favorites</flux:navbar.item>\n\n                <flux:navmenu>\n                    <flux:navmenu.item href=\"#\">Marketing site</flux:navmenu.item>\n                    <flux:navmenu.item href=\"#\">Android app</flux:navmenu.item>\n                    <flux:navmenu.item href=\"#\">Brand guidelines</flux:navmenu.item>\n                </flux:navmenu>\n            </flux:dropdown>\n        </flux:navbar>\n\n        <flux:spacer />\n\n        <flux:navbar class=\"me-4\">\n            <flux:navbar.item icon=\"magnifying-glass\" href=\"#\" label=\"Search\" />\n            <flux:navbar.item class=\"max-lg:hidden\" icon=\"cog-6-tooth\" href=\"#\" label=\"Settings\" />\n            <flux:navbar.item class=\"max-lg:hidden\" icon=\"information-circle\" href=\"#\" label=\"Help\" />\n        </flux:navbar>\n\n        <flux:dropdown position=\"top\" align=\"start\">\n            <flux:profile avatar=\"https://fluxui.dev/img/demo/user.png\" />\n\n            <flux:menu>\n                <flux:menu.radio.group>\n                    <flux:menu.radio checked>Olivia Martin</flux:menu.radio>\n                    <flux:menu.radio>Truly Delta</flux:menu.radio>\n                </flux:menu.radio.group>\n\n                <flux:menu.separator />\n\n                <flux:menu.item icon=\"arrow-right-start-on-rectangle\">Logout</flux:menu.item>\n            </flux:menu>\n        </flux:dropdown>\n    </flux:header>\n\n    <flux:sidebar stashable sticky class=\"lg:hidden bg-zinc-50 dark:bg-zinc-900 border-r rtl:border-r-0 rtl:border-l border-zinc-200 dark:border-zinc-700\">\n        <flux:sidebar.toggle class=\"lg:hidden\" icon=\"x-mark\" />\n\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/logo.png\" name=\"Acme Inc.\" class=\"px-2 dark:hidden\" />\n        <flux:brand href=\"#\" logo=\"https://fluxui.dev/img/demo/dark-mode-logo.png\" name=\"Acme Inc.\" class=\"px-2 hidden dark:flex\" />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"home\" href=\"#\" current>Home</flux:navlist.item>\n            <flux:navlist.item icon=\"inbox\" badge=\"12\" href=\"#\">Inbox</flux:navlist.item>\n            <flux:navlist.item icon=\"document-text\" href=\"#\">Documents</flux:navlist.item>\n            <flux:navlist.item icon=\"calendar\" href=\"#\">Calendar</flux:navlist.item>\n\n            <flux:navlist.group expandable heading=\"Favorites\" class=\"max-lg:hidden\">\n                <flux:navlist.item href=\"#\">Marketing site</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Android app</flux:navlist.item>\n                <flux:navlist.item href=\"#\">Brand guidelines</flux:navlist.item>\n            </flux:navlist.group>\n        </flux:navlist>\n\n        <flux:spacer />\n\n        <flux:navlist variant=\"outline\">\n            <flux:navlist.item icon=\"cog-6-tooth\" href=\"#\">Settings</flux:navlist.item>\n            <flux:navlist.item icon=\"information-circle\" href=\"#\">Help</flux:navlist.item>\n        </flux:navlist>\n    </flux:sidebar>\n\n    <flux:main container>\n        <div class=\"flex max-md:flex-col items-start\">\n            <div class=\"w-full md:w-[220px] pb-4 me-10\">\n                <flux:navlist>\n                    <flux:navlist.item href=\"#\" current>Dashboard</flux:navlist.item>\n                    <flux:navlist.item href=\"#\" badge=\"32\">Orders</flux:navlist.item>\n                    <flux:navlist.item href=\"#\">Catalog</flux:navlist.item>\n                    <flux:navlist.item href=\"#\">Payments</flux:navlist.item>\n                    <flux:navlist.item href=\"#\">Customers</flux:navlist.item>\n                    <flux:navlist.item href=\"#\">Billing</flux:navlist.item>\n                    <flux:navlist.item href=\"#\">Quotes</flux:navlist.item>\n                    <flux:navlist.item href=\"#\">Configuration</flux:navlist.item>\n                </flux:navlist>\n            </div>\n\n            <flux:separator class=\"md:hidden\" />\n\n            <div class=\"flex-1 max-md:pt-6 self-stretch\">\n                <flux:heading size=\"xl\" level=\"1\">Good afternoon, Olivia</flux:heading>\n\n                <flux:text class=\"mb-6 mt-2 text-base\">Here's what's new today</flux:text>\n\n                <flux:separator variant=\"subtle\" />\n            </div>\n        </div>\n    </flux:main>\n\n    @fluxScripts\n</body>\n```\n\n----------------------------------------\n\nTITLE: Basic Navbar Implementation in FluxUI\nDESCRIPTION: Creates a basic horizontal navigation bar with four navigation items. Each item is a link that can be clicked to navigate to different sections of a website.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:navbar>\n    <flux:navbar.item href=\"#\">Home</flux:navbar.item>\n    <flux:navbar.item href=\"#\">Features</flux:navbar.item>\n    <flux:navbar.item href=\"#\">Pricing</flux:navbar.item>\n    <flux:navbar.item href=\"#\">About</flux:navbar.item>\n</flux:navbar>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart with Flux in HTML\nDESCRIPTION: This snippet demonstrates how to create a basic line chart using the Flux Chart component. It includes axis configuration, line styling, and a tooltip.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart wire:model=\"data\" class=\"aspect-3/1\">\n    <flux:chart.svg>\n        <flux:chart.line field=\"visitors\" class=\"text-pink-500 dark:text-pink-400\" />\n\n        <flux:chart.axis axis=\"x\" field=\"date\">\n            <flux:chart.axis.line />\n            <flux:chart.axis.tick />\n        </flux:chart.axis>\n\n        <flux:chart.axis axis=\"y\">\n            <flux:chart.axis.grid />\n            <flux:chart.axis.tick />\n        </flux:chart.axis>\n\n        <flux:chart.cursor />\n    </flux:chart.svg>\n\n    <flux:chart.tooltip>\n        <flux:chart.tooltip.heading field=\"date\" :format=\"['year' => 'numeric', 'month' => 'numeric', 'day' => 'numeric']\" />\n        <flux:chart.tooltip.value field=\"visitors\" label=\"Visitors\" />\n    </flux:chart.tooltip>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Members Table with Avatars in FluxUI\nDESCRIPTION: Creates a responsive table layout displaying team members with avatars, names, emails and role selection. Features mobile-responsive design with conditional display of elements and integrated FluxUI components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex justify-between items-center mb-4\">\n    <flux:heading size=\"lg\">Team members</flux:heading>\n\n    <flux:button size=\"sm\" icon=\"plus\">Invite</flux:button>\n</div>\n\n<flux:table>\n    <flux:table.rows>\n        <flux:table.row>\n            <flux:table.cell>\n                <div class=\"flex items-center gap-2 sm:gap-4\">\n                    <flux:avatar circle size=\"lg\" class=\"max-sm:size-8\" src=\"https://unavatar.io/github/calebporzio\" />\n                    <div class=\"flex flex-col\">\n                        <flux:heading>Caleb Porzio <flux:badge size=\"sm\" color=\"blue\" class=\"ml-1 max-sm:hidden\">You</flux:badge></flux:heading>\n                        <flux:text class=\"max-sm:hidden\">caleb@laravel-livewire.com</flux:text>\n                    </div>\n                </div>\n            </flux:table.cell>\n\n            <flux:table.cell>\n                <div class=\"flex justify-end items-center gap-2\">\n                    <flux:select size=\"sm\" class=\"min-w-fit max-w-fit\">\n                        <flux:select.option value=\"admin\" selected>Admin</flux:select.option>\n                        <flux:select.option value=\"member\">Member</flux:select.option>\n                        <flux:select.option value=\"guest\">Guest</flux:select.option>\n                    </flux:select>\n                    <flux:button size=\"sm\" variant=\"subtle\" icon=\"trash\" class=\"shrink-0\" />\n                </div>\n            </flux:table.cell>\n        </flux:table.row>\n\n        <flux:table.row >\n            <flux:table.cell>\n                <div class=\"flex items-center gap-2 sm:gap-4\">\n                    <flux:avatar circle size=\"lg\" class=\"max-sm:size-8\" src=\"https://unavatar.io/github/hugosaintemarie\" />\n                    <div class=\"flex flex-col\">\n                        <flux:heading>Hugo Sainte-Marie</flux:heading>\n                        <flux:text class=\"max-sm:hidden\">hugo@example.com</flux:text>\n                    </div>\n                </div>\n            </flux:table.cell>\n\n            <flux:table.cell>\n                <div class=\"flex justify-end items-center gap-2\">\n                    <flux:select size=\"sm\" class=\"min-w-fit max-w-fit\">\n                        <flux:select.option value=\"admin\">Admin</flux:select.option>\n                        <flux:select.option value=\"member\" selected>Member</flux:select.option>\n                        <flux:select.option value=\"guest\">Guest</flux:select.option>\n                    </flux:select>\n                    <flux:button size=\"sm\" variant=\"subtle\" icon=\"trash\" class=\"shrink-0\" />\n                </div>\n            </flux:table.cell>\n        </flux:table.row>\n\n        <flux:table.row>\n            <flux:table.cell>\n                <div class=\"flex items-center gap-2 sm:gap-4\">\n                    <flux:avatar circle size=\"lg\" class=\"max-sm:size-8\" src=\"https://unavatar.io/github/joshhanley\" />\n                    <div class=\"flex flex-col\">\n                        <flux:heading>Josh Hanley</flux:heading>\n                        <flux:text class=\"max-sm:hidden\">josh@example.com</flux:text>\n                    </div>\n                </div>\n            </flux:table.cell>\n\n            <flux:table.cell>\n                <div class=\"flex justify-end items-center gap-2\">\n                    <flux:select size=\"sm\" class=\"min-w-fit max-w-fit\">\n                        <flux:select.option value=\"admin\">Admin</flux:select.option>\n                        <flux:select.option value=\"member\" selected>Member</flux:select.option>\n                        <flux:select.option value=\"guest\">Guest</flux:select.option>\n                    </flux:select>\n                    <flux:button size=\"sm\" variant=\"subtle\" icon=\"trash\" class=\"shrink-0\" />\n                </div>\n            </flux:table.cell>\n        </flux:table.row>\n    </flux:table.rows>\n</flux:table>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Stat Card with Embedded Chart in Flux UI\nDESCRIPTION: Shows how to build a card displaying a key metric (revenue) with an embedded background chart. The chart uses line and area components for visualization.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:card class=\"overflow-hidden min-w-[12rem]\">\n    <flux:text>Revenue</flux:text>\n\n    <flux:heading size=\"xl\" class=\"mt-2 tabular-nums\">$12,345</flux:heading>\n\n    <flux:chart class=\"-mx-8 -mb-8 h-[3rem]\" :value=\"[10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 21, 20]\">\n        <flux:chart.svg gutter=\"0\">\n            <flux:chart.line class=\"text-sky-200 dark:text-sky-400\" />\n            <flux:chart.area class=\"text-sky-100 dark:text-sky-400/30\" />\n        </flux:chart.svg>\n    </flux:chart>\n</flux:card>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Radio Group in FluxUI\nDESCRIPTION: A basic radio group implementation that allows selecting a payment method. Uses wire:model for Livewire data binding and provides labels for each option with one checked by default.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group wire:model=\"payment\" label=\"Select your payment method\">\n    <flux:radio value=\"cc\" label=\"Credit Card\" checked />\n    <flux:radio value=\"paypal\" label=\"Paypal\" />\n    <flux:radio value=\"ach\" label=\"Bank transfer\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Items in Dropdown Menus\nDESCRIPTION: This example demonstrates how to use radio buttons in a dropdown menu to allow selecting a single option from a group. The wire:model attribute can be used for data binding in Livewire applications.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown>\n    <flux:button icon:trailing=\"chevron-down\">Sort by</flux:button>\n\n    <flux:menu>\n        <flux:menu.radio.group wire:model=\"sortBy\">\n            <flux:menu.radio checked>Latest activity</flux:menu.radio>\n            <flux:menu.radio>Date created</flux:menu.radio>\n            <flux:menu.radio>Most popular</flux:menu.radio>\n        </flux:menu.radio.group>\n    </flux:menu>\n</flux:dropdown>     \n```\n\n----------------------------------------\n\nTITLE: Implementing a Confirmation Modal Pattern\nDESCRIPTION: Complete example of a confirmation dialog modal for dangerous actions like deletion. Shows a properly structured confirmation UI with cancel and confirm buttons.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal.trigger name=\"delete-profile\">\n    <flux:button variant=\"danger\">Delete</flux:button>\n</flux:modal.trigger>\n\n<flux:modal name=\"delete-profile\" class=\"min-w-[22rem]\">\n    <div class=\"space-y-6\">\n        <div>\n            <flux:heading size=\"lg\">Delete project?</flux:heading>\n\n            <flux:text class=\"mt-2\">\n                <p>You're about to delete this project.</p>\n                <p>This action cannot be reversed.</p>\n            </flux:text>\n        </div>\n\n        <div class=\"flex gap-2\">\n            <flux:spacer />\n\n            <flux:modal.close>\n                <flux:button variant=\"ghost\">Cancel</flux:button>\n            </flux:modal.close>\n\n            <flux:button type=\"submit\" variant=\"danger\">Delete project</flux:button>\n        </div>\n    </div>\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Utilities for Dark Mode Management in Flux\nDESCRIPTION: JavaScript/Alpine utilities provided by Flux for dark mode management, demonstrating how to get or set a user's color scheme preference and current application color scheme.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Get/set a users color scheme preference...\n$flux.appearance = 'light|dark|system'\n\n// Get/set the current color scheme of your app...\n$flux.dark = 'true|false'\n```\n\n----------------------------------------\n\nTITLE: Applying Text Color Variants in FluxUI\nDESCRIPTION: Demonstrates different text color options in FluxUI using variants and custom colors. Shows strong, default, and subtle color variants along with custom colored text.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/text.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:text variant=\"strong\">Strong text color</flux:text>\n<flux:text>Default text color</flux:text>\n<flux:text variant=\"subtle\">Muted text color</flux:text>\n<flux:text color=\"blue\">Colored text</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Dark Mode in Flux\nDESCRIPTION: Sets up Tailwind CSS to use the selector strategy for dark mode with custom variant, enabling Flux to toggle dark mode by adding/removing a .dark class to the HTML element.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import '../../vendor/livewire/flux/dist/flux.css';\";\n\n@custom-variant dark (&:where(.dark, .dark *));\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tooltip with FluxUI\nDESCRIPTION: Basic implementation of a tooltip around a button element. This shows how to display additional information when users hover over a button.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:tooltip content=\"Settings\">\n    <flux:button icon=\"cog-6-tooth\" icon:variant=\"outline\" />\n</flux:tooltip>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Options with Avatars in FluxUI\nDESCRIPTION: Creates a select dropdown with avatar-enhanced options for user selection. Combines FluxUI select and avatar components with proper spacing and alignment.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" label=\"Assign to\">\n    <flux:select.option selected>\n        <div class=\"flex items-center gap-2 whitespace-nowrap\">\n            <flux:avatar circle size=\"xs\" src=\"https://unavatar.io/github/calebporzio\" /> Caleb Porzio\n        </div>\n    </flux:select.option>\n\n    <flux:select.option>\n        <div class=\"flex items-center gap-2 whitespace-nowrap\">\n            <flux:avatar circle size=\"xs\" src=\"https://unavatar.io/github/hugosaintemarie\" /> Hugo Sainte-Marie\n        </div>\n    </flux:select.option>\n\n    <flux:select.option>\n        <div class=\"flex items-center gap-2 whitespace-nowrap\">\n            <flux:avatar circle size=\"xs\" src=\"https://unavatar.io/github/joshhanley\" /> Josh Hanley\n        </div>\n    </flux:select.option>\n\n    <flux:select.option>\n        <div class=\"flex items-center gap-2 whitespace-nowrap\">\n            <flux:avatar circle size=\"xs\" src=\"https://unavatar.io/github/jasonlbeggs\" /> Jason Beggs\n        </div>\n    </flux:select.option>\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Navlist with Badges in FluxUI\nDESCRIPTION: Adds badges to items in a vertical navigation list. Demonstrates numeric notification badges and text badges with custom colors in a sidebar navigation context.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:navlist class=\"w-64\">\n    <flux:navlist.item href=\"#\" icon=\"home\">Home</flux:navlist.item>\n    <flux:navlist.item href=\"#\" icon=\"envelope\" badge=\"12\">Inbox</flux:navlist.item>\n    <flux:navlist.item href=\"#\" icon=\"user-group\">Contacts</flux:navlist.item>\n    <flux:navlist.item href=\"#\" icon=\"calendar-days\" badge=\"Pro\" badge-color=\"lime\">Calendar</flux:navlist.item>\n</flux:navlist>\n```\n\n----------------------------------------\n\nTITLE: Simple Data Table Implementation in Flux UI\nDESCRIPTION: This example shows a simple data table implementation without pagination or sorting capabilities. It displays customer information with basic styling and badges for status indicators.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/table.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:table>\n    <flux:table.columns>\n        <flux:table.column>Customer</flux:table.column>\n        <flux:table.column>Date</flux:table.column>\n        <flux:table.column>Status</flux:table.column>\n        <flux:table.column>Amount</flux:table.column>\n    </flux:table.columns>\n\n    <flux:table.rows>\n        <flux:table.row>\n            <flux:table.cell>Lindsey Aminoff</flux:table.cell>\n            <flux:table.cell>Jul 29, 10:45 AM</flux:table.cell>\n            <flux:table.cell><flux:badge color=\"green\" size=\"sm\" inset=\"top bottom\">Paid</flux:badge></flux:table.cell>\n            <flux:table.cell variant=\"strong\">$49.00</flux:table.cell>\n        </flux:table.row>\n\n        <flux:table.row>\n            <flux:table.cell>Hanna Lubin</flux:table.cell>\n            <flux:table.cell>Jul 28, 2:15 PM</flux:table.cell>\n            <flux:table.cell><flux:badge color=\"green\" size=\"sm\" inset=\"top bottom\">Paid</flux:badge></flux:table.cell>\n            <flux:table.cell variant=\"strong\">$312.00</flux:table.cell>\n        </flux:table.row>\n\n        <flux:table.row>\n            <flux:table.cell>Kianna Bushevi</flux:table.cell>\n            <flux:table.cell>Jul 30, 4:05 PM</flux:table.cell>\n            <flux:table.cell><flux:badge color=\"zinc\" size=\"sm\" inset=\"top bottom\">Refunded</flux:badge></flux:table.cell>\n            <flux:table.cell variant=\"strong\">$132.00</flux:table.cell>\n        </flux:table.row>\n\n        <flux:table.row>\n            <flux:table.cell>Gustavo Geidt</flux:table.cell>\n            <flux:table.cell>Jul 27, 9:30 AM</flux:table.cell>\n            <flux:table.cell><flux:badge color=\"green\" size=\"sm\" inset=\"top bottom\">Paid</flux:badge></flux:table.cell>\n            <flux:table.cell variant=\"strong\">$31.00</flux:table.cell>\n        </flux:table.row>\n    </flux:table.rows>\n</flux:table>    \n\n```\n\n----------------------------------------\n\nTITLE: Basic Brand Component Usage\nDESCRIPTION: Shows basic usage of the flux:brand component with both a simple logo/name combination and a custom logo slot implementation.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/brand.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:brand href=\"#\" logo=\"/img/demo/logo.png\" name=\"Acme Inc.\" />\n\n<flux:brand href=\"#\" name=\"Acme Inc.\">\n    <x-slot name=\"logo\">\n        <div class=\"size-6 rounded shrink-0 bg-accent text-accent-foreground flex items-center justify-center\"><i class=\"font-serif font-bold\">A</i></div>\n    </x-slot>\n</flux:brand>\n```\n\n----------------------------------------\n\nTITLE: Loading State for Buttons in FluxUI\nDESCRIPTION: Shows how buttons with wire:click or type=\"submit\" automatically display loading indicators during network requests.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:button wire:click=\"save\">\n    Save changes\n</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Input Masking in FluxUI\nDESCRIPTION: Shows how to apply input masking for formatted content using Alpine's mask plugin in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:input mask=\"(999) 999-9999\" value=\"7161234567\" />\n```\n\n----------------------------------------\n\nTITLE: Persistent Toast Component with Wire Navigation\nDESCRIPTION: Implementation of a persistent Toast component that remains active during page navigation\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- ... -->\n\n    @persist('toast')\n        <flux:toast />\n    @endpersist\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating a Flyout Modal Variant\nDESCRIPTION: Example of implementing a flyout modal variant which provides an anchored, slide-in dialog typically used for more extensive forms or side panels.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal.trigger name=\"edit-profile\">\n    <flux:button>Edit profile</flux:button>\n</flux:modal.trigger>\n\n<flux:modal name=\"edit-profile\" variant=\"flyout\">\n    <div class=\"space-y-6\">\n        <div>\n            <flux:heading size=\"lg\">Update profile</flux:heading>\n            <flux:text class=\"mt-2\">Make changes to your personal details.</flux:text>\n        </div>\n\n        <flux:input label=\"Name\" placeholder=\"Your name\" />\n\n        <flux:input label=\"Date of birth\" type=\"date\" />\n\n        <div class=\"flex\">\n            <flux:spacer />\n\n            <flux:button type=\"submit\" variant=\"primary\">Save changes</flux:button>\n        </div>\n    </div>\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Toggle Switch Component\nDESCRIPTION: Implements a toggle switch component that controls dark mode, suitable for settings pages, with a label indicating its purpose.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:switch x-data x-model=\"$flux.dark\" label=\"Dark mode\"  />\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Options Select in FluxUI Pro\nDESCRIPTION: Demonstrates how to generate select options dynamically from server-side data. The :filter=\"false\" property disables client-side filtering, allowing the server to handle option filtering instead.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<flux:select :filter=\"false\">\n    @foreach ($options as $option)\n        <flux:select.option value=\"{{ $option->value }}\">\n            {{ $option->label }}\n        </flux:select.option>\n    @endforeach\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Controlling Modals from Livewire Component Methods\nDESCRIPTION: Example showing how to control modal dialogs directly from Livewire component methods. Demonstrates various ways to show and hide modals from PHP code.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\nclass ShowPost extends \\Livewire\\Component {\n    public function delete() {\n        // Control \"confirm\" modals anywhere on the page...\n        Flux::modal('confirm')->show();\n        Flux::modal('confirm')->close();\n        // Control \"confirm\" modals within this Livewire component...\n        $this->modal('confirm')->show();\n        $this->modal('confirm')->close();\n        // Closes all modals on the page...\n        Flux::modals()->close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Descriptions in Flux UI\nDESCRIPTION: A checkbox group implementation with descriptions for each option. This example shows how to align descriptions directly below each checkbox label for better readability.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group wire:model=\"subscription\" label=\"Subscription preferences\">\n    <flux:checkbox checked\n        value=\"newsletter\"\n        label=\"Newsletter\"\n        description=\"Receive our monthly newsletter with the latest updates and offers.\"\n    />\n    <flux:checkbox\n        value=\"updates\"\n        label=\"Product updates\"\n        description=\"Stay informed about new features and product updates.\"\n    />\n    <flux:checkbox\n        value=\"invitations\"\n        label=\"Event invitations\"\n        description=\"Get invitations to our exclusive events and webinars.\"\n    />\n</flux:checkbox.group>      \n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Submenus in Flux UI Dropdowns\nDESCRIPTION: This example shows how to create nested submenus for more condensed dropdown menus, using flux:menu.submenu with a heading prop. Submenus can contain radio buttons or checkboxes for additional functionality.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown>\n    <flux:button icon:trailing=\"chevron-down\">Options</flux:button>\n\n    <flux:menu>\n        <flux:menu.submenu heading=\"Sort by\">\n            <flux:menu.radio checked>Name</flux:menu.radio>\n            <flux:menu.radio>Date</flux:menu.radio>\n            <flux:menu.radio>Popularity</flux:menu.radio>\n        </flux:menu.submenu>\n\n        <flux:menu.submenu heading=\"Filter\">\n            <flux:menu.checkbox checked>Draft</flux:menu.checkbox>\n            <flux:menu.checkbox checked>Published</flux:menu.checkbox>\n            <flux:menu.checkbox>Archived</flux:menu.checkbox>\n        </flux:menu.submenu>\n\n        <flux:menu.separator />\n\n        <flux:menu.item variant=\"danger\">Delete</flux:menu.item>\n    </flux:menu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Info Tooltip for Touch Devices\nDESCRIPTION: Implementation of a toggleable tooltip that works on touch devices by making it clickable. This example shows a complex tooltip with formatted content for displaying critical information about tax identification numbers.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tooltip.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading class=\"flex items-center gap-2\">\n    Tax identification number\n\n    <flux:tooltip toggleable>\n        <flux:button icon=\"information-circle\" size=\"sm\" variant=\"ghost\" />\n\n        <flux:tooltip.content class=\"max-w-[20rem] space-y-2\">\n            <p>For US businesses, enter your 9-digit Employer Identification Number (EIN) without hyphens.</p>\n            <p>For European companies, enter your VAT number including the country prefix (e.g., DE123456789).</p>\n        </flux:tooltip.content>\n    </flux:tooltip>\n</flux:heading>\n```\n\n----------------------------------------\n\nTITLE: Auto-sizing Textarea in FluxUI\nDESCRIPTION: Shows how to create an auto-sizing Textarea that adjusts its height to fit the content. This uses the 'rows=\"auto\"' property, which relies on CSS's field-sizing feature.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/textarea.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:textarea rows=\"auto\" />\n```\n\n----------------------------------------\n\nTITLE: Navbar with Icons in FluxUI\nDESCRIPTION: Enhances navbar items with leading icons for visual context. Each item includes an icon that represents its purpose, improving navigation recognition.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:navbar>\n    <flux:navbar.item href=\"#\" icon=\"home\">Home</flux:navbar.item>\n    <flux:navbar.item href=\"#\" icon=\"puzzle-piece\">Features</flux:navbar.item>\n    <flux:navbar.item href=\"#\" icon=\"currency-dollar\">Pricing</flux:navbar.item>\n    <flux:navbar.item href=\"#\" icon=\"user\">About</flux:navbar.item>\n</flux:navbar>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Legend in Flux Charts\nDESCRIPTION: This snippet demonstrates how to add a legend to identify multiple data series in a chart. It uses flux:chart.viewport to wrap the SVG and places the legend below the chart with color indicators for visitors and views.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart wire:model=\"data\">\n    <flux:chart.viewport class=\"aspect-3/1\">\n        <flux:chart.svg>\n            <flux:chart.line class=\"text-blue-500\" field=\"visitors\" />\n            <flux:chart.line class=\"text-red-500\" field=\"views\" />\n        </flux:chart.svg>\n    </flux:chart.viewport>\n\n    <div class=\"flex justify-center gap-4 pt-4\">\n        <flux:chart.legend label=\"Visitors\">\n            <flux:chart.legend.indicator class=\"bg-blue-400\" />\n        </flux:chart.legend>\n\n        <flux:chart.legend label=\"Views\">\n            <flux:chart.legend.indicator class=\"bg-red-400\" />\n        </flux:chart.legend>\n    </div>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Button Groups in FluxUI\nDESCRIPTION: Demonstrates how to create button groups where multiple related buttons share borders and appear as a single unit.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:button.group>\n    <flux:button>Oldest</flux:button>\n    <flux:button>Newest</flux:button>\n    <flux:button>Top</flux:button>\n</flux:button.group>\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal State from Browser with Alpine.js\nDESCRIPTION: Example showing how to control a modal's state directly from the browser without server roundtrip using Alpine.js and Livewire property access.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:button x-on:click=\"$wire.showConfirmModal = true\">Delete post</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Styling and Spacing Approach in Flux UI\nDESCRIPTION: Demonstrates Flux UI's approach to styling components while leaving spacing and layout to the developer.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<form wire:submit=\"createAccount\">\n    <div class=\"mb-6\">\n        <flux:heading>Create an account</flux:heading>\n        <flux:text class=\"mt-2\">We're excited to have you on board.</flux:text>\n    </div>\n\n    <flux:input class=\"mb-6\" label=\"Email\" wire:model=\"email\" />\n\n    <div class=\"mb-6 flex *:w-1/2 gap-4\">\n        <flux:input label=\"Password\" wire:model=\"password\" />\n        <flux:input label=\"Confirm password\" wire:model=\"password_confirmation\" />\n    </div>\n\n    <flux:button type=\"submit\" variant=\"primary\">Create account</flux:button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Shortcut Hints to Dropdown Menu Items\nDESCRIPTION: This snippet demonstrates how to add keyboard shortcut hints to menu items using the kbd prop, which helps users learn how to navigate your application faster.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown>\n    <flux:button icon:trailing=\"chevron-down\">Options</flux:button>\n\n    <flux:menu>\n        <flux:menu.item icon=\"pencil-square\" kbd=\"âS\">Save</flux:menu.item>\n        <flux:menu.item icon=\"document-duplicate\" kbd=\"âD\">Duplicate</flux:menu.item>\n        <flux:menu.item icon=\"trash\" variant=\"danger\" kbd=\"ââ«\">Delete</flux:menu.item>\n    </flux:menu>\n</flux:dropdown>  \n```\n\n----------------------------------------\n\nTITLE: Customizing Combobox Input in FluxUI\nDESCRIPTION: Provides full control over the input element in a combobox through a named slot. This example shows how to bind the input to an Alpine.js model and handle validation errors.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"combobox\">\n    <x-slot name=\"input\">\n        <flux:select.input x-model=\"search\" :invalid=\"$errors->has('...')\" />\n    </x-slot>\n\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Clearable, Copyable, and Viewable Inputs in FluxUI\nDESCRIPTION: Demonstrates special input properties for clearing, copying, and toggling password visibility in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<flux:input placeholder=\"Search orders\" clearable />\n<flux:input type=\"password\" value=\"password\" viewable />\n<flux:input icon=\"key\" value=\"FLUX-1234-5678-ABCD-EFGH\" readonly copyable />\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage in HTML\nDESCRIPTION: Demonstrates the basic usage of the Calendar component, including setting an initial date and binding to a Livewire property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar value=\"2025-04-22\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar wire:model=\"date\" />\n```\n\n----------------------------------------\n\nTITLE: Using Slots for Advanced Component Customization in Flux UI\nDESCRIPTION: Example of using named slots to add complex elements like buttons to a Flux input component. This approach enables wrapping icons in interactive elements and other advanced customizations.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<flux:input>\n    <x-slot name=\"iconTrailing\">\n        <flux:button icon=\"x-mark\" size=\"sm\" variant=\"subtle\" wire:click=\"clear\" />\n    </x-slot>\n</flux:input>\n```\n\n----------------------------------------\n\nTITLE: Fieldset Component Implementation in FluxUI\nDESCRIPTION: Shows how to group related fields using the fieldset and legend components for a complex form layout like a shipping address.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/field.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:fieldset>\n    <flux:legend>Shipping address</flux:legend>\n\n    <div class=\"space-y-6\">\n        <flux:input label=\"Street address line 1\" placeholder=\"123 Main St\" class=\"max-w-sm\" />\n        <flux:input label=\"Street address line 2\" placeholder=\"Apartment, studio, or floor\" class=\"max-w-sm\" />\n\n        <div class=\"grid grid-cols-2 gap-x-4 gap-y-6\">\n            <flux:input label=\"City\" placeholder=\"San Francisco\" />\n            <flux:input label=\"State / Province\" placeholder=\"CA\" />\n            <flux:input label=\"Postal / Zip code\" placeholder=\"12345\" />\n            <flux:select label=\"Country\">\n                <option selected>United States</option>\n                <!-- ... -->\n            </flux:select>\n        </div>\n    </div>\n</flux:fieldset>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Callout Component in FluxUI\nDESCRIPTION: Creates a basic callout with an icon, heading, text, and a link. This example shows a maintenance notification with a clock icon and a learn more link.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout icon=\"clock\">\n    <flux:callout.heading>Upcoming maintenance</flux:callout.heading>\n\n    <flux:callout.text>\n        Our servers will be undergoing scheduled maintenance this Sunday from 2 AM - 5 AM UTC. Some services may be temporarily unavailable.\n        <flux:callout.link href=\"#\">Learn more</flux:callout.link>\n    </flux:callout.text>\n</flux:callout> \n```\n\n----------------------------------------\n\nTITLE: Utilizing Native Dialog Element in Flux UI\nDESCRIPTION: Demonstrates the use of the native dialog element for modals in Flux UI, leveraging browser capabilities.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n <dialog>\n    <!-- ... -->\n</dialog>\n```\n\n----------------------------------------\n\nTITLE: Profile Switcher Implementation\nDESCRIPTION: Example of a profile switcher dropdown with radio group selection and logout option.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:dropdown position=\"top\" align=\"start\">\n    <flux:profile avatar=\"https://unavatar.io/x/calebporzio\" name=\"Caleb Porzio\" />\n\n    <flux:menu>\n        <flux:menu.radio.group>\n            <flux:menu.radio checked>Caleb Porzio</flux:menu.radio>\n            <flux:menu.radio>Hugo Sainte-Marie</flux:menu.radio>\n            <flux:menu.radio>Josh Hanley</flux:menu.radio>\n        </flux:menu.radio.group>\n\n        <flux:menu.separator />\n\n        <flux:menu.item icon=\"arrow-right-start-on-rectangle\">Logout</flux:menu.item>\n    </flux:menu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Action Callouts in FluxUI\nDESCRIPTION: Demonstrates how to display actions inline with the callout using the inline prop. Shows two examples: a package tracking notification and a payment issue alert.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout icon=\"cube\" variant=\"secondary\" inline>\n    <flux:callout.heading>Your package is delayed</flux:callout.heading>\n\n    <x-slot name=\"actions\">\n        <flux:button>Track order -></flux:button>\n        <flux:button variant=\"ghost\">Reschedule</flux:button>\n    </x-slot>\n</flux:callout>\n\n<flux:callout icon=\"exclamation-triangle\" variant=\"secondary\" inline>\n    <flux:callout.heading>Payment issue detected</flux:callout.heading>\n    <flux:callout.text>Your last payment attempt failed. Update your billing details to prevent service interruption.</flux:callout.text>\n\n    <x-slot name=\"actions\">\n        <flux:button>Update billing</flux:button>\n    </x-slot>\n</flux:callout> \n```\n\n----------------------------------------\n\nTITLE: Creating Feature Spotlight Callout in FluxUI\nDESCRIPTION: Example of a callout used to highlight a new feature with a purple color scheme and sparkles icon, including a learn more link.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout icon=\"sparkles\" color=\"purple\">\n    <flux:callout.heading>Have a question?</flux:callout.heading>\n\n    <flux:callout.text>\n        Try our new AI assistant, Jeffrey. Let him handle tasks and answer questions for you.\n        <flux:callout.link href=\"#\">Learn more</flux:callout.link>\n    </flux:callout.text>\n</flux:callout> \n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Line Chart with Legend in HTML\nDESCRIPTION: This example demonstrates how to create a chart with multiple lines and a custom legend. It uses a viewport for constraining the chart SVG and includes percentage formatting for the y-axis.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart wire:model=\"data\">\n    <flux:chart.viewport class=\"min-h-[20rem]\" >\n        <flux:chart.svg>\n            <flux:chart.line field=\"twitter\" class=\"text-blue-500\" curve=\"none\" />\n            <flux:chart.point field=\"twitter\" class=\"text-blue-500\" r=\"6\" stroke-width=\"3\" />\n            <flux:chart.line field=\"facebook\" class=\"text-red-500\" curve=\"none\" />\n            <flux:chart.point field=\"facebook\" class=\"text-red-500\" r=\"6\" stroke-width=\"3\" />\n            <flux:chart.line field=\"instagram\" class=\"text-green-500\" curve=\"none\" />\n            <flux:chart.point field=\"instagram\" class=\"text-green-500\" r=\"6\" stroke-width=\"3\" />\n\n            <flux:chart.axis axis=\"x\" field=\"date\">\n                <flux:chart.axis.tick />\n                <flux:chart.axis.line />\n            </flux:chart.axis>\n\n            <flux:chart.axis axis=\"y\" tick-start=\"0\" tick-end=\"1\" :format=\"[\n                'style' => 'percent',\n                'minimumFractionDigits' => 0,\n                'maximumFractionDigits' => 0,\n            ]\">\n                <flux:chart.axis.grid />\n                <flux:chart.axis.tick />\n            </flux:chart.axis>\n        </flux:chart.svg>\n    </flux:chart.viewport>\n\n    <div class=\"flex justify-center gap-4 pt-4\">\n        <flux:chart.legend label=\"Instagram\">\n            <flux:chart.legend.indicator class=\"bg-green-400\" />\n        </flux:chart.legend>\n\n        <flux:chart.legend label=\"Twitter\">\n            <flux:chart.legend.indicator class=\"bg-blue-400\" />\n        </flux:chart.legend>\n\n        <flux:chart.legend label=\"Facebook\">\n            <flux:chart.legend.indicator class=\"bg-red-400\" />\n        </flux:chart.legend>\n    </div>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Managing Modal State with Livewire Properties\nDESCRIPTION: Livewire component example showing how to use a property to control the modal's visibility state. The property is bound to the modal using wire:model.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ShowPost extends \\Livewire\\Component {\n    public $showConfirmModal = false;\n\n    public function delete() {\n        $this->showConfirmModal = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyout Modal Position\nDESCRIPTION: Example showing how to customize the position from which a flyout modal appears. By default, flyouts open from the right, but can be configured to open from left or bottom.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal variant=\"flyout\" position=\"left\">\n    <!-- ... -->\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: Controlling Modals with Alpine.js Methods\nDESCRIPTION: Examples of controlling modal dialogs directly from Alpine.js using Flux's magic methods. Shows how to show and hide modals using event handlers.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button x-on:click=\"$flux.modal('confirm').show()\">\n    Open modal\n</button>\n\n<button x-on:click=\"$flux.modal('confirm').close()\">\n    Close modal\n</button>\n\n<button x-on:click=\"$flux.modals().close()\">\n    Close all modals\n</button>\n```\n\n----------------------------------------\n\nTITLE: Simple Dark Mode Toggle Button with Icon\nDESCRIPTION: Creates a subtle button with a moon icon that toggles dark mode, suitable for navigation bars or sidebars.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:button x-data x-on:click=\"$flux.dark = ! $flux.dark\" icon=\"moon\" variant=\"subtle\" aria-label=\"Toggle dark mode\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Behavior in HTML\nDESCRIPTION: Demonstrates how to configure range behavior in the Calendar component, including setting minimum and maximum range limits and controlling the number of months shown.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Set minimum and maximum range limits -->\n<flux:calendar mode=\"range\" min-range=\"3\" max-range=\"10\" />\n\n<!-- Control number of months shown -->\n<flux:calendar mode=\"range\" months=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Options with Icons in FluxUI\nDESCRIPTION: Demonstrates how to add icons to select options using the custom listbox variant. Each option includes an icon and text wrapped in a flex container for proper alignment.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" placeholder=\"Select role...\">\n    <flux:select.option>\n        <div class=\"flex items-center gap-2\">\n            <flux:icon.shield-check variant=\"mini\" class=\"text-zinc-400\" /> Owner\n        </div>\n    </flux:select.option>\n\n    <flux:select.option>\n        <div class=\"flex items-center gap-2\">\n            <flux:icon.key variant=\"mini\" class=\"text-zinc-400\" /> Administrator\n        </div>\n    </flux:select.option>\n\n    <flux:select.option>\n        <div class=\"flex items-center gap-2\">\n            <flux:icon.user variant=\"mini\" class=\"text-zinc-400\" /> Member\n        </div>\n    </flux:select.option>\n\n    <flux:select.option>\n        <div class=\"flex items-center gap-2\">\n            <flux:icon.eye variant=\"mini\" class=\"text-zinc-400\" /> Viewer\n        </div>\n    </flux:select.option>\n</flux:select>   \n```\n\n----------------------------------------\n\nTITLE: Shorthand Input with Label and Description in FluxUI\nDESCRIPTION: Shows a more concise way to create an input field with label and description using the shorthand syntax in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:input label=\"Username\" description=\"This will be publicly displayed.\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Cursor to Flux Charts\nDESCRIPTION: This snippet shows how to add a vertical guide (cursor) that appears when hovering over the chart. The cursor helps highlight values at specific points on the chart.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.svg>\n    <!-- ... -->\n\n    <flux:chart.cursor />\n</flux:chart.svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Card with Header Actions using Flux Card Component in HTML\nDESCRIPTION: This example demonstrates how to create a card with header actions using the Flux Card component. It includes a confirmation dialog for post deletion with undo and delete buttons.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/card.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:card class=\"space-y-6\">\n    <div class=\"flex\">\n        <div class=\"flex-1\">\n            <flux:heading size=\"lg\">Are you sure?</flux:heading>\n\n            <flux:text class=\"mt-2\">\n                <p>Your post will be deleted permanently.</p>\n                <p>This action cannot be undone.</p>\n            </flux:text>\n        </div>\n\n        <div class=\"-mx-2 -mt-2\">\n            <flux:button variant=\"ghost\" size=\"sm\" icon=\"x-mark\" inset=\"top right bottom\" />\n        </div>\n    </div>\n\n    <div class=\"flex gap-4\">\n        <flux:spacer />\n        <flux:button variant=\"ghost\">Undo</flux:button>\n        <flux:button variant=\"danger\">Delete</flux:button>\n    </div>\n</flux:card>\n```\n\n----------------------------------------\n\nTITLE: Avatars with Badges in FluxUI\nDESCRIPTION: Demonstrates various ways to add badges to avatars, including simple indicators, numbers, emojis, and custom HTML.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar badge badge:color=\"green\" badge:circle src=\"https://unavatar.io/x/calebporzio\" />\n\n<flux:avatar badge badge:color=\"zinc\" badge:position=\"top right\" badge:circle badge:variant=\"outline\" src=\"https://unavatar.io/x/calebporzio\" />\n\n<flux:avatar badge=\"25\" src=\"https://unavatar.io/x/calebporzio\" />\n\n<flux:avatar circle badge=\"ð\" badge:circle src=\"https://unavatar.io/x/calebporzio\" />\n\n<flux:avatar circle src=\"https://unavatar.io/x/calebporzio\">\n    <x-slot:badge>\n        <img class=\"size-3\" src=\"https://unavatar.io/github/hugosaintemarie\" />\n    </x-slot:badge>\n</flux:avatar>        \n```\n\n----------------------------------------\n\nTITLE: Building User Profile Popover with Avatar in FluxUI\nDESCRIPTION: Implements a hover-triggered dropdown popover showing detailed user profile information. Features avatar, user stats, bio, and follow button with responsive layout.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<flux:dropdown hover position=\"bottom center\">\n    <flux:avatar as=\"button\" name=\"calebporzio\" src=\"https://unavatar.io/x/calebporzio\" />\n\n    <flux:popover class=\"relative max-w-[15rem]\">\n        <div class=\"absolute top-0 right-0 p-2\">\n            <flux:button icon=\"user-plus\" variant=\"filled\" size=\"sm\">Follow back</flux:button>\n        </div>\n\n        <flux:avatar size=\"xl\" name=\"calebporzio\" src=\"https://unavatar.io/x/calebporzio\" />\n\n        <flux:heading class=\"mt-2\">Caleb Porzio</flux:heading>\n        <flux:text>@calebporzio <flux:badge color=\"zinc\" size=\"sm\" inset=\"top bottom\">Follows you</flux:badge></flux:text>\n\n        <flux:text class=\"mt-3\">\n            I'm a full stack developer with a passion for building web applications. Currently working on a new project called <flux:link href=\"https://fluxui.dev\">Flux</flux:link>.\n        </flux:text>\n\n        <div class=\"flex gap-4 mt-3\">\n            <div class=\"flex gap-2 items-center\">\n                <flux:heading>1.2k</flux:heading> <flux:text>Followers</flux:text>\n            </div>\n\n            <div class=\"flex gap-2 items-center\">\n                <flux:heading>1.2k</flux:heading> <flux:text>Following</flux:text>\n            </div>\n        </div>\n    </flux:popover>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Icon Button Groups in FluxUI\nDESCRIPTION: Shows how to create visually-linked groups of icon buttons using the button.group component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:button.group>\n    <flux:button icon=\"bars-3-bottom-left\"></flux:button>\n    <flux:button icon=\"bars-3\"></flux:button>\n    <flux:button icon=\"bars-3-bottom-right\"></flux:button>\n</flux:button.group>      \n```\n\n----------------------------------------\n\nTITLE: Configuring Tick Frequency in Flux UI Charts\nDESCRIPTION: Demonstrates how to set tick count, tick start, tick end, and explicit tick values for chart axes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.axis axis=\"y\" tick-count=\"5\">\n    <!-- ... -->\n</flux:chart.axis>\n```\n\nLANGUAGE: html\nCODE:\n```\n <flux:chart.axis axis=\"y\" tick-start=\"min\">\n    <!-- ... -->\n</flux:chart.axis>\n```\n\nLANGUAGE: html\nCODE:\n```\n <flux:chart.axis axis=\"y\" tick-end=\"max\">\n    <!-- ... -->\n</flux:chart.axis>\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.axis axis=\"y\" tick-values=\"[0, 128, 256, 384, 512]\" tick-suffix=\"MB\">\n    <!-- ... -->\n</flux:chart.axis>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tabs with Livewire\nDESCRIPTION: Implementation of dynamically generated tabs using Livewire with the ability to add new tabs.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:tab.group>\n    <flux:tabs>\n        @foreach($tabs as $id => $tab)\n            <flux:tab :name=\"$id\">{{ $tab }}</flux:tab>\n        @endforeach\n\n        <flux:tab icon=\"plus\" wire:click=\"addTab\" action>Add tab</flux:tab>\n    </flux:tabs>\n\n    @foreach($tabs as $id => $tab)\n        <flux:tab.panel :name=\"$id\">\n            <!-- ... -->\n        </flux:tab.panel>\n    @endforeach\n</flux:tab.group>\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Items in Dropdown Menus\nDESCRIPTION: This example shows how to use checkbox items in a dropdown menu to allow selecting multiple options. The wire:model attribute can be used for data binding in Livewire applications.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown>\n    <flux:button icon:trailing=\"chevron-down\">Permissions</flux:button>\n\n    <flux:menu>\n        <flux:menu.checkbox wire:model=\"read\" checked>Read</flux:menu.checkbox>\n        <flux:menu.checkbox wire:model=\"write\" checked>Write</flux:menu.checkbox>\n        <flux:menu.checkbox wire:model=\"delete\">Delete</flux:menu.checkbox>\n    </flux:menu>\n</flux:dropdown> \n```\n\n----------------------------------------\n\nTITLE: Handling Large Result Sets with Flux Pagination Component\nDESCRIPTION: Illustrates how the Flux Pagination component adapts to large result sets. It shows a reasonable number of page links, including first and last pages, with ellipses for gaps, ensuring efficient navigation through numerous pages.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/pagination.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- $orders = Order::paginate(5) -->\n<flux:pagination :paginator=\"$orders\" />\n```\n\n----------------------------------------\n\nTITLE: Binding Date Picker to Livewire Model\nDESCRIPTION: Binds the date picker selection to a Livewire property using wire:model directive.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker wire:model=\"date\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Variant Badges in FluxUI\nDESCRIPTION: Shows how to create solid variant badges with high contrast for important status indicators or alerts.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge variant=\"solid\" color=\"zinc\">Zinc</flux:badge>\n<flux:badge variant=\"solid\" color=\"red\">Red</flux:badge>\n<flux:badge variant=\"solid\" color=\"orange\">Orange</flux:badge>\n<flux:badge variant=\"solid\" color=\"amber\">Amber</flux:badge>\n<flux:badge variant=\"solid\" color=\"yellow\">Yellow</flux:badge>\n<flux:badge variant=\"solid\" color=\"lime\">Lime</flux:badge>\n<flux:badge variant=\"solid\" color=\"green\">Green</flux:badge>\n<flux:badge variant=\"solid\" color=\"emerald\">Emerald</flux:badge>\n<flux:badge variant=\"solid\" color=\"teal\">Teal</flux:badge>\n<flux:badge variant=\"solid\" color=\"cyan\">Cyan</flux:badge>\n<flux:badge variant=\"solid\" color=\"sky\">Sky</flux:badge>\n<flux:badge variant=\"solid\" color=\"blue\">Blue</flux:badge>\n<flux:badge variant=\"solid\" color=\"indigo\">Indigo</flux:badge>\n<flux:badge variant=\"solid\" color=\"violet\">Violet</flux:badge>\n<flux:badge variant=\"solid\" color=\"purple\">Purple</flux:badge>\n<flux:badge variant=\"solid\" color=\"fuchsia\">Fuchsia</flux:badge>\n<flux:badge variant=\"solid\" color=\"pink\">Pink</flux:badge>\n<flux:badge variant=\"solid\" color=\"rose\">Rose</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Collapsible Navigation Groups in FluxUI\nDESCRIPTION: Creates expandable/collapsible navigation sections in a vertical navlist. Uses the expandable prop to make a group collapsible, allowing users to show or hide groups of navigation items.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:navlist class=\"w-64\">\n    <flux:navlist.item href=\"#\" icon=\"home\">Dashboard</flux:navlist.item>\n    <flux:navlist.item href=\"#\" icon=\"list-bullet\">Transactions</flux:navlist.item>\n\n    <flux:navlist.group heading=\"Account\" expandable>\n        <flux:navlist.item href=\"#\">Profile</flux:navlist.item>\n        <flux:navlist.item href=\"#\">Settings</flux:navlist.item>\n        <flux:navlist.item href=\"#\">Billing</flux:navlist.item>\n    </flux:navlist.group>\n</flux:navlist>\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker with Separate Inputs\nDESCRIPTION: Uses separate labeled inputs for start and end dates to provide a clearer interface for date range selection with custom layout.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker mode=\"range\">\n    <x-slot name=\"trigger\">\n        <div class=\"flex flex-col sm:flex-row gap-6 sm:gap-4\">\n            <flux:date-picker.input label=\"Start\" />\n            <flux:date-picker.input label=\"End\" />\n        </div>\n    </x-slot>\n</flux:date-picker>                       \n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip to Flux Charts\nDESCRIPTION: This snippet shows how to implement tooltips that display contextual data when hovering over chart elements. It includes a heading for the date and two values with labels for visitors and views, with compact formatting for the views.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart>\n    <flux:chart.svg>\n        <!-- ... -->\n    </flux:chart.svg>\n\n    <flux:chart.tooltip>\n        <flux:chart.tooltip.heading field=\"date\" />\n\n        <flux:chart.tooltip.value field=\"visitors\" label=\"Visitors\" />\n        <flux:chart.tooltip.value field=\"views\" label=\"Views\" :format=\"['notation' => 'compact']\" />\n    </flux:chart.tooltip>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Radio Group with Descriptions in FluxUI\nDESCRIPTION: Enhanced radio buttons with descriptions explaining each option. Each radio option includes a name, value, label, and descriptive text for additional context.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group label=\"Role\">\n    <flux:radio\n        name=\"role\"\n        value=\"administrator\"\n        label=\"Administrator\"\n        description=\"Administrator users can perform any action.\"\n        checked\n    />\n    <flux:radio\n        name=\"role\"\n        value=\"editor\"\n        label=\"Editor\"\n        description=\"Editor users have the ability to read, create, and update.\"\n    />\n    <flux:radio\n        name=\"role\"\n        value=\"viewer\"\n        label=\"Viewer\"\n        description=\"Viewer users only have the ability to read. Create, and update are restricted.\"\n    />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Template for Custom Icon Blade Files in Flux UI\nDESCRIPTION: Recommended template structure for creating custom icon Blade files in Flux UI. This ensures compatibility with other components and maintains proper variant handling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n@php $attributes = $unescapedForwardedAttributes ?? $attributes; @endphp\n@props([\n    'variant' => 'outline',\n])\n@php\n$classes = Flux::classes('shrink-0')\n    ->add(match($variant) {\n        'outline' => '[:where(&)]:size-6',\n        'solid' => '[:where(&)]:size-6',\n        'mini' => '[:where(&)]:size-5',\n        'micro' => '[:where(&)]:size-4',\n    });\n@endphp\n{{-- Your SVG code here: --}}\n<svg {{ $attributes->class($classes) }} data-flux-icon aria-hidden=\"true\" ... >\n    ...\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Icon in FluxUI\nDESCRIPTION: Breadcrumbs implementation using an icon for the Home item instead of text. This demonstrates how to make a purely iconic navigation element while maintaining the remaining text-based items.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/breadcrumbs.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:breadcrumbs>\n    <flux:breadcrumbs.item href=\"#\" icon=\"home\" />\n    <flux:breadcrumbs.item href=\"#\">Blog</flux:breadcrumbs.item>\n    <flux:breadcrumbs.item>Post</flux:breadcrumbs.item>\n</flux:breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart with Live Summary in HTML\nDESCRIPTION: This snippet demonstrates how to create a chart with a live summary that updates as the user hovers over the chart. It includes custom formatting for currency and time values.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:card>\n    <flux:chart class=\"grid gap-6\" wire:model=\"data\">\n        <flux:chart.summary class=\"flex gap-12\">\n            <div>\n                <flux:text>Today</flux:text>\n\n                <flux:heading size=\"xl\" class=\"mt-2 tabular-nums\">\n                    <flux:chart.summary.value field=\"sales\" :format=\"['style' => 'currency', 'currency' => 'USD']\" />\n                </flux:heading>\n\n                <flux:text class=\"mt-2 tabular-nums\">\n                    <flux:chart.summary.value field=\"date\" :format=\"['hour' => 'numeric', 'minute' => 'numeric', 'hour12' => true]\" />\n                </flux:text>\n            </div>\n\n            <div>\n                <flux:text>Yesterday</flux:text>\n\n                <flux:heading size=\"lg\" class=\"mt-2 tabular-nums\">\n                    <flux:chart.summary.value field=\"yesterday\" :format=\"['style' => 'currency', 'currency' => 'USD']\" />\n                </flux:heading>\n            </div>\n        </flux:chart.summary>\n\n        <flux:chart.viewport class=\"aspect-[3/1]\">\n            <flux:chart.svg>\n                <flux:chart.line field=\"yesterday\" class=\"text-zinc-300 dark:text-white/40\" stroke-dasharray=\"4 4\" curve=\"none\" />\n                <flux:chart.line field=\"sales\" class=\"text-sky-500 dark:text-sky-400\" curve=\"none\" />\n\n                <flux:chart.axis axis=\"x\" field=\"date\">\n                    <flux:chart.axis.grid />\n                    <flux:chart.axis.tick />\n                    <flux:chart.axis.line />\n                </flux:chart.axis>\n\n                <flux:chart.axis axis=\"y\">\n                    <flux:chart.axis.tick />\n                </flux:chart.axis>\n\n                <flux:chart.cursor />\n            </flux:chart.svg>\n        </flux:chart.viewport>\n    </flux:chart>\n</flux:card>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Menu with Flux UI\nDESCRIPTION: Demonstrates how to create a context menu using the same components as the dropdown menu, highlighting composability.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:context>\n    <flux:button>Options</flux:button>\n\n    <flux:menu>\n        <!-- ... -->\n    </flux:menu>\n</flux:context>\n```\n\n----------------------------------------\n\nTITLE: Basic Tab Group Implementation\nDESCRIPTION: Basic implementation of a tab group with three panels for Profile, Account, and Billing sections using Flux components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:tab.group>\n    <flux:tabs wire:model=\"tab\">\n        <flux:tab name=\"profile\">Profile</flux:tab>\n        <flux:tab name=\"account\">Account</flux:tab>\n        <flux:tab name=\"billing\">Billing</flux:tab>\n    </flux:tabs>\n\n    <flux:tab.panel name=\"profile\">...</flux:tab.panel>\n    <flux:tab.panel name=\"account\">...</flux:tab.panel>\n    <flux:tab.panel name=\"billing\">...</flux:tab.panel>\n</flux:tab.group>\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox Group in Flux UI\nDESCRIPTION: Implementation of a checkbox group for organizing related checkboxes vertically. The wire:model can be added to the group element or individual checkboxes to bind to Livewire properties.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group wire:model=\"notifications\" label=\"Notifications\">\n    <flux:checkbox label=\"Push notifications\" value=\"push\" checked />\n    <flux:checkbox label=\"Email\" value=\"email\" checked />\n    <flux:checkbox label=\"In-app alerts\" value=\"app\" />\n    <flux:checkbox label=\"SMS\" value=\"sms\" />\n</flux:checkbox.group>        \n```\n\n----------------------------------------\n\nTITLE: Advanced Editor Customization in HTML\nDESCRIPTION: Shows how to create a fully customized editor with a custom dropdown menu in the toolbar.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:editor>\n    <flux:editor.toolbar>\n        <flux:editor.heading />\n        <flux:editor.separator />\n        <flux:editor.bold />\n        <flux:editor.italic />\n        <flux:editor.strike />\n        <flux:editor.separator />\n        <flux:editor.bullet />\n        <flux:editor.ordered />\n        <flux:editor.blockquote />\n        <flux:editor.separator />\n        <flux:editor.link />\n        <flux:editor.separator />\n        <flux:editor.align />\n\n        <flux:editor.spacer />\n\n        <flux:dropdown position=\"bottom end\" offset=\"-15\">\n            <flux:editor.button icon=\"ellipsis-horizontal\" tooltip=\"More\" />\n\n            <flux:menu>\n                <flux:menu.item wire:click=\"…\" icon=\"arrow-top-right-on-square\">Preview</flux:menu.item>\n                <flux:menu.item wire:click=\"…\" icon=\"arrow-down-tray\">Export</flux:menu.item>\n                <flux:menu.item wire:click=\"…\" icon=\"share\">Share</flux:menu.item>\n            </flux:menu>\n        </flux:dropdown>\n    </flux:editor.toolbar>\n\n    <flux:editor.content />\n</flux:editor>\n```\n\n----------------------------------------\n\nTITLE: Creating Badges with Different Colors in FluxUI\nDESCRIPTION: Demonstrates the various color options available for badges in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge color=\"zinc\">Zinc</flux:badge>\n<flux:badge color=\"red\">Red</flux:badge>\n<flux:badge color=\"orange\">Orange</flux:badge>\n<flux:badge color=\"amber\">Amber</flux:badge>\n<flux:badge color=\"yellow\">Yellow</flux:badge>\n<flux:badge color=\"lime\">Lime</flux:badge>\n<flux:badge color=\"green\">Green</flux:badge>\n<flux:badge color=\"emerald\">Emerald</flux:badge>\n<flux:badge color=\"teal\">Teal</flux:badge>\n<flux:badge color=\"cyan\">Cyan</flux:badge>\n<flux:badge color=\"sky\">Sky</flux:badge>\n<flux:badge color=\"blue\">Blue</flux:badge>\n<flux:badge color=\"indigo\">Indigo</flux:badge>\n<flux:badge color=\"violet\">Violet</flux:badge>\n<flux:badge color=\"purple\">Purple</flux:badge>\n<flux:badge color=\"fuchsia\">Fuchsia</flux:badge>\n<flux:badge color=\"pink\">Pink</flux:badge>\n<flux:badge color=\"rose\">Rose</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Menus with Flux UI Dropdown\nDESCRIPTION: This example demonstrates how to create a navigation menu using the navmenu component within a dropdown, triggered by a profile component. It's positioned at the bottom end of the trigger element.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown position=\"bottom\" align=\"end\">\n    <flux:profile avatar=\"/img/demo/user.png\" name=\"Olivia Martin\" />\n\n    <flux:navmenu>\n        <flux:navmenu.item href=\"#\" icon=\"user\">Account</flux:navmenu.item>\n        <flux:navmenu.item href=\"#\" icon=\"building-storefront\">Profile</flux:navmenu.item>\n        <flux:navmenu.item href=\"#\" icon=\"credit-card\">Billing</flux:navmenu.item>\n        <flux:navmenu.item href=\"#\" icon=\"arrow-right-start-on-rectangle\">Logout</flux:navmenu.item>\n        <flux:navmenu.item href=\"#\" icon=\"trash\" variant=\"danger\">Delete</flux:navmenu.item>\n    </flux:navmenu>\n</flux:dropdown> \n```\n\n----------------------------------------\n\nTITLE: Vanilla JavaScript Toast Implementation\nDESCRIPTION: Example of triggering Toast notifications using vanilla JavaScript\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    let button = document.querySelector('...')\n\n    button.addEventListener('alpine:init', () => {\n        Flux.toast('Your changes have been saved.')\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Usage in FluxUI\nDESCRIPTION: Demonstrates the basic usage of the Textarea component in FluxUI for capturing multi-line text input from users.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/textarea.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:textarea />\n```\n\n----------------------------------------\n\nTITLE: Using Flux Dark Mode Utilities with Vanilla JavaScript\nDESCRIPTION: Demonstrates how to use Flux dark mode utilities outside of Alpine, accessing the global window.Flux JavaScript object for toggling dark mode.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet button = document.querySelector('...')\n\nbutton.addEventListener('click', () => {\n    Flux.dark = ! Flux.dark\n})\n```\n\n----------------------------------------\n\nTITLE: Responsive Layout for Checkbox Cards in Flux UI\nDESCRIPTION: Implementation of responsive layout switching for checkbox cards. This example demonstrates how to conditionally apply a vertical layout on smaller screens.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group ... class=\"max-sm:flex-col\">\n    <!-- ... -->\n</flux:checkbox.group>  \n```\n\n----------------------------------------\n\nTITLE: Defining Chart Data Structure in PHP\nDESCRIPTION: This snippet shows how to structure data for a Flux chart in a Livewire component. It defines an array of data points with date and visitor count.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nclass Dashboard extends Component\n{\n    public array $data = [\n        ['date' => '2025-04-22', 'visitors' => 267],\n        ['date' => '2025-04-21', 'visitors' => 259],\n        ['date' => '2025-04-20', 'visitors' => 269],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates in Flux Charts\nDESCRIPTION: This snippet demonstrates how to format dates in a chart using the format attribute with Intl.DateTimeFormat options. The example formats X-axis date values to display the month name and day number.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.axis axis=\"x\" field=\"date\" :format=\"['month' => 'long', 'day' => 'numeric']\" />\n```\n\n----------------------------------------\n\nTITLE: Input with Text Prefixes and Suffixes in FluxUI\nDESCRIPTION: Demonstrates how to add text prefixes and suffixes to input fields using input groups in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<flux:input.group>\n    <flux:input.group.prefix>https://</flux:input.group.prefix>\n\n    <flux:input placeholder=\"example.com\" />\n</flux:input.group>\n\n<flux:input.group>\n    <flux:input placeholder=\"chunky-spaceship\" />\n\n    <flux:input.group.suffix>.brand.com</flux:input.group.suffix>\n</flux:input.group>\n```\n\n----------------------------------------\n\nTITLE: Segmented Radio Buttons with Icons in FluxUI\nDESCRIPTION: Segmented radio buttons with icons for visual reinforcement. Each option includes an appropriate icon that represents its function.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group wire:model=\"role\" variant=\"segmented\">\n    <flux:radio label=\"Admin\" icon=\"wrench\" />\n    <flux:radio label=\"Editor\" icon=\"pencil-square\" />\n    <flux:radio label=\"Viewer\" icon=\"eye\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker Implementation\nDESCRIPTION: Enables selection of date ranges by setting the mode to 'range'. Useful for reporting, booking systems, or any scenario requiring start and end dates.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker mode=\"range\" />\n```\n\n----------------------------------------\n\nTITLE: FluxUI Select Component Properties\nDESCRIPTION: Defines the available properties, slots, and attributes for the flux:select component. Includes options for wire:model binding, placeholder text, label configuration, and various display variants.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nwire:model  |  Binds the select to a Livewire property. See the [wire:model documentation](https://livewire.laravel.com/docs/wire-model) for more information.  \nplaceholder  |  Text displayed when no option is selected.  \nlabel  |  Label text displayed above the select. When provided, wraps the select in a flux:field component with an adjacent flux:label component. See the [field component](https://fluxui.dev/components/field).  \ndescription  |  Help text displayed below the select. When provided alongside label, appears between the label and select within the flux:field wrapper. See the [field component](https://fluxui.dev/components/field).  \ndescription:trailing  |  The description provided will be displayed below the select instead of above it.  \nbadge  |  Badge text displayed at the end of the flux:label component when the label prop is provided.  \nsize  |  Size of the select. Options: sm, xs.  \nvariant  |  Visual style of the select. Options: default (native select), listbox, combobox.  \nmultiple  |  Allows selecting multiple options (listbox and combobox variants only).  \nfilter  |  If false, disables client-side filtering.  \nsearchable  |  Adds a search input to filter options (listbox and combobox variants only).  \nclearable  |  Displays a clear button when an option is selected (listbox and combobox variants only).  \nselected-suffix  |  Text appended to the number of selected options in multiple mode (listbox variant only).  \nclear  |  When to clear the search input. Options: select (default), close (listbox and combobox variants only).  \ndisabled  |  Prevents user interaction with the select.  \ninvalid  |  Applies error styling to the select.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Expanded State for Accordion Items in Flux UI\nDESCRIPTION: Shows how to expand a specific Accordion item by default using the 'expanded' prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/accordion.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion.item expanded>\n    <!-- ... -->\n</flux:accordion.item>\n```\n\n----------------------------------------\n\nTITLE: Prop Forwarding and Nested Props in Flux\nDESCRIPTION: Illustrates prop forwarding and the use of nested props for more complex component configurations.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:button icon=\"bell\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button>\n   <flux:icon.bell />\n</flux:button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button icon=\"bell\" icon:variant=\"solid\" />\n```\n\n----------------------------------------\n\nTITLE: File Input in FluxUI\nDESCRIPTION: Demonstrates the usage of file input types in FluxUI, including single and multiple file uploads.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:input type=\"file\" wire:model=\"logo\" label=\"Logo\"/>\n<flux:input type=\"file\" wire:model=\"attachments\" label=\"Attachments\" multiple />\n```\n\n----------------------------------------\n\nTITLE: Formatting Tick Labels with Intl.NumberFormat in Flux Charts\nDESCRIPTION: This snippet demonstrates how to format tick labels on chart axes using the format attribute, which passes options to Intl.NumberFormat. The example shows formatting X axis ticks as month/day and Y axis ticks as USD currency.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.svg>\n    <!-- ... -->\n\n    <!-- Format the X axis tick labels to display the month and day: -->\n    <flux:chart.axis axis=\"x\" :format=\"['month' => 'long', 'day' => 'numeric']\">\n        <!-- X axis tick labels: -->\n        <flux:chart.axis.tick />\n    </flux:chart.axis>\n\n    <!-- Format the Y axis tick labels to display the value in USD: -->\n    <flux:chart.axis axis=\"y\" :format=\"['style' => 'currency', 'currency' => 'USD']\">\n        <!-- Y axis tick labels: -->\n        <flux:chart.axis.tick />\n    </flux:chart.axis>\n</flux:chart.svg>\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Field in Searchable Select with FluxUI\nDESCRIPTION: Provides full control over the search field in a searchable select through a named slot. This allows for custom styling and placeholder text for the search input.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" searchable>\n    <x-slot name=\"search\">\n        <flux:select.search class=\"px-4\" placeholder=\"Search industries...\" />\n    </x-slot>\n\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Adding and Styling Ticks in Flux UI Charts\nDESCRIPTION: Shows how to add and customize tick marks and labels for both x and y axes using flux:chart.axis.mark and flux:chart.axis.tick components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.svg>\n    <!-- ... -->\n\n    <flux:chart.axis axis=\"x\">\n        <!-- X axis tick mark lines: -->\n        <flux:chart.axis.mark />\n\n        <!-- X axis tick labels: -->\n        <flux:chart.axis.tick />\n    </flux:chart.axis>\n\n    <flux:chart.axis axis=\"y\">\n        <!-- Y axis tick mark lines: -->\n        <flux:chart.axis.mark />\n\n        <!-- Y axis tick labels: -->\n        <flux:chart.axis.tick />\n    </flux:chart.axis>\n</flux:chart.svg>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- A tick mark line that is 10px long, 2px wide, and has a gray color: -->\n<flux:chart.axis.mark class=\"text-zinc-300\" stroke-width=\"2\" y1=\"0\" y2=\"10\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- A tick label that is 12px, has a blue color, is center aligned, and is 2.5rem from the axis line: -->\n<flux:chart.axis.tick class=\"text-xs text-blue-500\" text-anchor=\"middle\" dy=\"2.5rem\"  />\n```\n\n----------------------------------------\n\nTITLE: Class Targeting for Input Element in FluxUI\nDESCRIPTION: Demonstrates how to apply CSS classes directly to the input element within the FluxUI input component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:input class=\"max-w-xs\" class:input=\"font-mono\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Scale in Flux UI Charts\nDESCRIPTION: Demonstrates how to configure the scale of an axis using the scale attribute. The example shows setting a linear scale for the y-axis.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.axis axis=\"y\" scale=\"linear\">\n    <!-- ... -->\n</flux:chart.axis>\n```\n\n----------------------------------------\n\nTITLE: Creating Clearable Select in FluxUI\nDESCRIPTION: Adds a clear button (\"x\") to the right side of the select input, allowing users to easily reset their selection. This is implemented with the clearable property on the select component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" clearable>\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Session Persistence for DateRange\nDESCRIPTION: Example of persisting DateRange object in user session using attributes\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Session;\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    #[Session]\n    public DateRange $range;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Listbox Select in FluxUI Pro\nDESCRIPTION: A premium variant of the select component that provides an alternative to the browser's native select element. This allows for custom option styling including icons and images, only available in the Pro version.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" placeholder=\"Choose industry...\">\n    <flux:select.option>Photography</flux:select.option>\n    <flux:select.option>Design services</flux:select.option>\n    <flux:select.option>Web development</flux:select.option>\n    <flux:select.option>Accounting</flux:select.option>\n    <flux:select.option>Legal services</flux:select.option>\n    <flux:select.option>Consulting</flux:select.option>\n    <flux:select.option>Other</flux:select.option>\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Using Data Binding with Wire Model for Modal State\nDESCRIPTION: Example of binding a Livewire property directly to a modal to control its state. Shows the modal markup with the wire:model.self attribute.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:modal wire:model.self=\"showConfirmModal\">\n    <!-- ... -->\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Date Range\nDESCRIPTION: Sets the initial range using the value prop with a start and end date separated by a forward slash in Y-m-d format.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker mode=\"range\" value=\"2025-04-02/2025-04-06\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Card with Flux Card Component in HTML\nDESCRIPTION: This snippet shows how to create a basic card layout using the Flux Card component. It includes a heading, text content, and a delete button for a confirmation dialog.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/card.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:card>\n    <flux:heading size=\"lg\">Are you sure?</flux:heading>\n\n    <flux:text class=\"mt-2 mb-4\">\n        <p>Your post will be deleted permanently.</p>\n        <p>This action cannot be undone.</p>\n    </flux:text>\n\n    <flux:button variant=\"danger\">Delete</flux:button>\n</flux:card>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons in Flux UI\nDESCRIPTION: Example of using a custom icon (wink) that has been created as a Blade file in the resources/views/flux/icon directory.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:icon.wink />\n```\n\n----------------------------------------\n\nTITLE: DateRange Initialization Example\nDESCRIPTION: Example of initializing a DateRange object with start and end dates\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    public DateRange $range;\n    public function mount() {\n        $this->range = new DateRange(now(), now()->addDays(7));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection in HTML\nDESCRIPTION: Shows how to set up date range selection in the Calendar component, including initializing a range and binding to a Livewire property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar mode=\"range\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar mode=\"range\" value=\"2025-04-02/2025-04-06\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar mode=\"range\" wire:model=\"range\" />\n```\n\n----------------------------------------\n\nTITLE: Button Size Options in FluxUI\nDESCRIPTION: Shows the different size options available for FluxUI buttons, including the default base size, small (sm), and extra small (xs).\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:button>Base</flux:button>\n<flux:button size=\"sm\">Small</flux:button>\n<flux:button size=\"xs\">Extra small</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Sizes with Tailwind in Flux UI\nDESCRIPTION: Examples of controlling icon sizes using Tailwind's size utility classes. Note that icons are optimized for their default sizes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:icon.bolt class=\"size-12\" />\n<flux:icon.bolt class=\"size-10\" />\n<flux:icon.bolt class=\"size-8\" />\n```\n\n----------------------------------------\n\nTITLE: Navbar with Badges in FluxUI\nDESCRIPTION: Adds badges to navbar items to display additional information such as notification counts or status indicators. Demonstrates both numeric badges and text badges with custom colors.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:navbar>\n    <flux:navbar.item href=\"#\">Home</flux:navbar.item>\n    <flux:navbar.item href=\"#\" badge=\"12\">Inbox</flux:navbar.item>\n    <flux:navbar.item href=\"#\">Contacts</flux:navbar.item>\n    <flux:navbar.item href=\"#\" badge=\"Pro\" badge-color=\"lime\">Calendar</flux:navbar.item>\n</flux:navbar>\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Groups with Headings in Flux UI Dropdowns\nDESCRIPTION: This example demonstrates how to organize dropdown options under headings using the flux:menu.group component with a heading prop, making the menu structure more discoverable.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown>\n    <flux:button icon:trailing=\"chevron-down\">Options</flux:button>\n\n    <flux:menu>\n        <flux:menu.group heading=\"Account\">\n            <flux:menu.item>Profile</flux:menu.item>\n            <flux:menu.item>Permissions</flux:menu.item>\n        </flux:menu.group>\n\n        <flux:menu.group heading=\"Billing\">\n            <flux:menu.item>Transactions</flux:menu.item>\n            <flux:menu.item>Payouts</flux:menu.item>\n            <flux:menu.item>Refunds</flux:menu.item>\n        </flux:menu.group>\n\n        <flux:menu.item>Logout</flux:menu.item>\n    </flux:menu>\n</flux:dropdown> \n```\n\n----------------------------------------\n\nTITLE: Toast Duration Configuration\nDESCRIPTION: Example of setting custom duration for Toast notifications\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// 1 second...\nFlux::toast(duration: 1000, ...);\n```\n\n----------------------------------------\n\nTITLE: Positioning Dropdowns in Flux UI\nDESCRIPTION: This snippet shows how to position dropdown menus using the position and align props. The examples demonstrate different combinations of positions (top, right, bottom, left) and alignments (start, center, end).\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown position=\"top\" align=\"start\">\n\n<!-- More positions... -->\n<flux:dropdown position=\"right\" align=\"center\">\n<flux:dropdown position=\"bottom\" align=\"center\">\n<flux:dropdown position=\"left\" align=\"end\">\n```\n\n----------------------------------------\n\nTITLE: Radio Cards in FluxUI\nDESCRIPTION: Card-based radio buttons with a responsive layout. Options display as bordered cards that can stack vertically on small screens using the max-sm:flex-col class. This variant is only available in the Pro version.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group wire:model=\"shipping\" label=\"Shipping\" variant=\"cards\" class=\"max-sm:flex-col\">\n    <flux:radio value=\"standard\" label=\"Standard\" description=\"4-10 business days\" checked />\n    <flux:radio value=\"fast\" label=\"Fast\" description=\"2-5 business days\" />\n    <flux:radio value=\"next-day\" label=\"Next day\" description=\"1 business day\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Extensions in JavaScript\nDESCRIPTION: Shows how to add a custom YouTube extension to the editor using JavaScript.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Youtube from 'https://cdn.jsdelivr.net/npm/@tiptap/extension-youtube@2.11.7/+esm'\ndocument.addEventListener('flux:editor', (e) => {\n    e.detail.registerExtension(\n        Youtube.configure({\n            controls: false,\n            nocookie: true,\n        }),\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Upgrade Offer Callout with FluxUI in HTML\nDESCRIPTION: This snippet demonstrates how to create an upgrade offer callout using FluxUI components. It includes a heading, custom icon, and an action button.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout icon=\"banknotes\" color=\"lime\" inline>\n    <flux:callout.heading>You could save $4,900/yr on annual billing.</flux:callout.heading>\n\n    <x-slot name=\"actions\">\n        <flux:button>Switch now -></flux:button>\n    </x-slot>\n</flux:callout>\n```\n\n----------------------------------------\n\nTITLE: Creating Links within Text in FluxUI\nDESCRIPTION: Shows how to embed links within regular text content using the flux:link component. This allows for clickable text that navigates to other pages or resources.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/text.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:text>Visit our <flux:link href=\"#\">documentation</flux:link> for more information.</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Toast Variants Implementation\nDESCRIPTION: Examples of different Toast variant styles\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nFlux::toast(variant: 'success', ...);\nFlux::toast(variant: 'warning', ...);\nFlux::toast(variant: 'danger', ...);\n```\n\n----------------------------------------\n\nTITLE: Radio Cards with Icons in FluxUI\nDESCRIPTION: Card-based radio buttons with both icons and descriptions. Each card includes an icon that visually represents the option, enhancing recognition. This variant is only available in the Pro version.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group label=\"Shipping\" variant=\"cards\" class=\"max-sm:flex-col\">\n    <flux:radio value=\"standard\" icon=\"truck\" label=\"Standard\" description=\"4-10 business days\" />\n    <flux:radio value=\"fast\" icon=\"cube\" label=\"Fast\" description=\"2-5 business days\" />\n    <flux:radio value=\"next-day\" icon=\"clock\" label=\"Next day\" description=\"1 business day\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Various Input Types in FluxUI\nDESCRIPTION: Showcases different input types (email, password, date) available in FluxUI input components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:input type=\"email\" label=\"Email\" />\n<flux:input type=\"password\" label=\"Password\" />\n<flux:input type=\"date\" max=\"2999-12-31\" label=\"Date\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Lucide Icons with Artisan Command\nDESCRIPTION: Demonstrates how to import specific Lucide icons by name using the Flux UI Artisan command.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nphp artisan flux:icon crown grip-vertical github\n```\n\n----------------------------------------\n\nTITLE: Current Page Detection in FluxUI Navbar\nDESCRIPTION: Demonstrates different ways to mark the current/active page in a navbar. Shows manual setting with boolean values and conditional logic using a request helper function.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:navbar.item href=\"/\" current>Home</flux:navbar.item>\n<flux:navbar.item href=\"/\" :current=\"false\">Home</flux:navbar.item>\n<flux:navbar.item href=\"/\" :current=\"request()->is('/')\">Home</flux:navbar.item>\n```\n\n----------------------------------------\n\nTITLE: Using DateRange with Eloquent in Livewire Component\nDESCRIPTION: Demonstrates how to use the DateRange object with Eloquent's whereBetween() method to filter queries by date range in a Livewire component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Computed;\nuse Livewire\\Component;\nuse App\\Models\\Order;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    public ?DateRange $range;\n    #[Computed]\n    public function orders() {\n        return $this->range\n            ? Order::whereBetween('created_at', $this->range)->get()\n            : Order::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Date in PHP Livewire Component\nDESCRIPTION: Shows how to access the selected date from a Livewire component using a Carbon instance.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndate = now();  }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Points in HTML\nDESCRIPTION: This example demonstrates how to create a line chart with additional point markers. It includes axis configuration with custom tick values and formatting.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart wire:model=\"data\" class=\"aspect-[3/1]\">\n    <flux:chart.svg>\n        <flux:chart.line field=\"memory\" class=\"text-pink-500\" />\n        <flux:chart.point field=\"memory\" class=\"text-pink-400\" />\n\n        <flux:chart.axis axis=\"x\" field=\"date\">\n            <flux:chart.axis.tick />\n            <flux:chart.axis.line />\n        </flux:chart.axis>\n\n        <flux:chart.axis axis=\"y\" tick-values=\"[0, 128, 256, 384, 512]\" :format=\"['style' => 'unit', 'unit' => 'megabyte']\">\n            <flux:chart.axis.grid />\n            <flux:chart.axis.tick />\n        </flux:chart.axis>\n    </flux:chart.svg>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Split Layout Field Components in FluxUI\nDESCRIPTION: Demonstrates how to display multiple fields horizontally in the same row using CSS grid.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/field.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2 gap-4\">\n    <flux:input label=\"First name\" placeholder=\"River\" />\n\n    <flux:input label=\"Last name\" placeholder=\"Porzio\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Assignees List with Avatars in FluxUI\nDESCRIPTION: Implements a card-based list of assignees with small avatars and names. Uses FluxUI card and avatar components with a separated header section.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<flux:card>\n    <div class=\"flex justify-between items-center\">\n        <flux:heading>Assignees</flux:heading>\n        <flux:button size=\"sm\" variant=\"subtle\" icon=\"plus\" inset=\"top bottom\" />\n    </div>\n\n    <flux:separator class=\"mt-2 mb-4\" variant=\"subtle\" />\n\n    <ul class=\"flex flex-col gap-3\">\n        <li class=\"flex items-center gap-2\">\n            <flux:avatar size=\"xs\" src=\"https://unavatar.io/github/calebporzio\" />\n            <flux:heading>Caleb Porzio</flux:heading>\n        </li>\n        <li class=\"flex items-center gap-2\">\n            <flux:avatar size=\"xs\" src=\"https://unavatar.io/github/hugosaintemarie\" />\n            <flux:heading>Hugo Sainte-Marie</flux:heading>\n        </li>\n        <li class=\"flex items-center gap-2\">\n            <flux:avatar size=\"xs\" src=\"https://unavatar.io/github/joshhanley\" />\n            <flux:heading>Josh Hanley</flux:heading>\n        </li>\n        <li class=\"flex items-center gap-2\">\n            <flux:avatar size=\"xs\" src=\"https://unavatar.io/github/jasonlbeggs\" />\n            <flux:heading>Jason Beggs</flux:heading>\n        </li>\n    </ul>\n</flux:card>\n```\n\n----------------------------------------\n\nTITLE: Implementing Exclusive Behavior in Flux UI Accordion\nDESCRIPTION: Demonstrates how to enforce that only a single Accordion item is expanded at a time using the 'exclusive' prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/accordion.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion exclusive>\n    <!-- ... -->\n</flux:accordion>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Ellipsis for Path Truncation in FluxUI\nDESCRIPTION: Implementation showing how to truncate a long breadcrumb path with an ellipsis icon. This pattern is useful when space is limited and intermediate navigation levels can be collapsed.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/breadcrumbs.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:breadcrumbs>\n    <flux:breadcrumbs.item href=\"#\" icon=\"home\" />\n    <flux:breadcrumbs.item icon=\"ellipsis-horizontal\" />\n    <flux:breadcrumbs.item>Post</flux:breadcrumbs.item>\n</flux:breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Positioning Tooltips in Different Directions\nDESCRIPTION: Examples of how to position tooltips in different directions (top, right, bottom, left) around an element for optimal visibility based on layout constraints.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tooltip.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:tooltip content=\"Settings\" position=\"top\">\n    <flux:button icon=\"cog-6-tooth\" icon:variant=\"outline\" />\n</flux:tooltip>\n\n<flux:tooltip content=\"Settings\" position=\"right\">\n    <flux:button icon=\"cog-6-tooth\" icon:variant=\"outline\" />\n</flux:tooltip>\n\n<flux:tooltip content=\"Settings\" position=\"bottom\">\n    <flux:button icon=\"cog-6-tooth\" icon:variant=\"outline\" />\n</flux:tooltip>\n\n<flux:tooltip content=\"Settings\" position=\"left\">\n    <flux:button icon=\"cog-6-tooth\" icon:variant=\"outline\" />\n</flux:tooltip>\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Range in Livewire Component with Array\nDESCRIPTION: Shows how to access the selected date range from a Livewire component using an associative array of Y-m-d formatted date strings for start and end dates.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Carbon;\nuse Livewire\\Component;\nclass Dashboard extends Component {\n    public array $range;\n    public function mount() {\n        $this->range = [\n            'start' => now()->subMonth()->format('Y-m-d'),\n            'end' => now()->format('Y-m-d'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons in FluxUI Callouts\nDESCRIPTION: Demonstrates how to use a custom SVG icon in a callout component using the icon slot, in this case an alarm clock icon from Lucide.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout>\n    <x-slot name=\"icon\">\n        <!-- Custom icon: https://lucide.dev/icons/alarm-clock -->\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alarm-clock\"><circle cx=\"12\" cy=\"13\" r=\"8\"/><path d=\"M12 9v4l2 2\"/><path d=\"M5 3 2 6\"/><path d=\"m22 6-3-3\"/><path d=\"M6.38 18.7 4 21\"/><path d=\"M17.64 18.67 20 21\"/></svg>\n    </x-slot>\n\n    <flux:callout.heading>Notification system updated</flux:callout.heading>\n\n    <flux:callout.text>\n        <p>We've improved our notification system to deliver alerts faster and more reliably.</p>\n    </flux:callout.text>\n</flux:callout> \n```\n\n----------------------------------------\n\nTITLE: Dropdown Navigation in FluxUI Navbar\nDESCRIPTION: Creates a dropdown menu within a navbar to group related navigation items. Uses the flux:dropdown and flux:navmenu components to create a hierarchical navigation structure.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:navbar>\n    <flux:navbar.item href=\"#\">Dashboard</flux:navbar.item>\n    <flux:navbar.item href=\"#\">Transactions</flux:navbar.item>\n\n    <flux:dropdown>\n        <flux:navbar.item icon:trailing=\"chevron-down\">Account</flux:navbar.item>\n\n        <flux:navmenu>\n            <flux:navmenu.item href=\"#\">Profile</flux:navmenu.item>\n            <flux:navmenu.item href=\"#\">Settings</flux:navmenu.item>\n            <flux:navmenu.item href=\"#\">Billing</flux:navmenu.item>\n        </flux:navmenu>\n    </flux:dropdown>\n</flux:navbar>      \n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Date in Livewire Component\nDESCRIPTION: Shows how to access the selected date from a Livewire component using either a Carbon instance or a Y-m-d formatted string.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Carbon;\nuse Livewire\\Component;\nuse App\\Models\\Post;\nclass CreatePost extends Component {\n    public ?Carbon $date;\n    public function save()\n    {\n        Post::create([\n            // ...\n            'published_at' => $this->date,\n        ])\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in Flux Charts\nDESCRIPTION: This snippet shows how to format numbers in a chart using the format attribute, which passes options to Intl.NumberFormat. The example formats Y-axis values as USD currency.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.axis axis=\"y\" :format=\"['style' => 'currency', 'currency' => 'USD']\" />\n```\n\n----------------------------------------\n\nTITLE: Color Scheme Selection with Radio Group\nDESCRIPTION: Implements a radio group that allows users to choose between light, dark, or system color scheme preferences using Alpine's x-model binding to Flux appearance.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:radio.group x-data x-model=\"$flux.appearance\">\n    <flux:radio value=\"light\">Light</flux:radio>\n    <flux:radio value=\"dark\">Dark</flux:radio>\n    <flux:radio value=\"system\">System</flux:radio>\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Tabs with Icons\nDESCRIPTION: Implementation of tabs with associated icons using the icon property to visually distinguish different sections.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:tab.group>\n    <flux:tabs>\n        <flux:tab name=\"profile\" icon=\"user\">Profile</flux:tab>\n        <flux:tab name=\"account\" icon=\"cog-6-tooth\">Account</flux:tab>\n        <flux:tab name=\"billing\" icon=\"banknotes\">Billing</flux:tab>\n    </flux:tabs>\n\n    <flux:tab.panel name=\"profile\">...</flux:tab.panel>\n    <flux:tab.panel name=\"account\">...</flux:tab.panel>\n    <flux:tab.panel name=\"billing\">...</flux:tab.panel>\n</flux:tab.group>\n```\n\n----------------------------------------\n\nTITLE: Shorthand Props Syntax for FluxUI Field Component\nDESCRIPTION: Shows the shorthand syntax for creating a field component by passing label and description directly to the input element.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/field.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:input wire:model=\"email\" label=\"Email\" type=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Combobox Component in FluxUI Pro\nDESCRIPTION: A premium variant that provides a versatile combobox component for autocomplete and complex selection patterns. This component is only available in the Pro version of FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"combobox\" placeholder=\"Choose industry...\">\n    <flux:select.option>Photography</flux:select.option>\n    <flux:select.option>Design services</flux:select.option>\n    <flux:select.option>Web development</flux:select.option>\n    <flux:select.option>Accounting</flux:select.option>\n    <flux:select.option>Legal services</flux:select.option>\n    <flux:select.option>Consulting</flux:select.option>\n    <flux:select.option>Other</flux:select.option>\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Toast with Custom Heading\nDESCRIPTION: Example of creating a Toast notification with a custom heading\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nFlux::toast(\n    heading: 'Changes saved.',\n    text: 'You can always update this in your settings.',\n);\n```\n\n----------------------------------------\n\nTITLE: Field Component with Trailing Description in FluxUI\nDESCRIPTION: Demonstrates how to add a trailing description to a field component for additional information, shown in both full syntax and shorthand form.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/field.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label>Password</flux:label>\n\n    <flux:input type=\"password\" />\n\n    <flux:error name=\"password\" />\n\n    <flux:description>Must be at least 8 characters long, include an uppercase letter, a number, and a special character.</flux:description>\n</flux:field>\n\n<!-- Alternative shorthand syntax... -->\n\n<flux:input\n    type=\"password\"\n    label=\"Password\"\n    description:trailing=\"Must be at least 8 characters long, include an uppercase letter, a number, and a special character.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Avatar with Initials in FluxUI\nDESCRIPTION: Demonstrates how to use initials when no image source is provided, including options for single-letter initials.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar name=\"Caleb Porzio\" />\n<flux:avatar name=\"calebporzio\" />\n<flux:avatar name=\"calebporzio\" initials:single />\n\n<!-- Or use the initials prop directly... -->\n<flux:avatar initials=\"CP\" />\n```\n\n----------------------------------------\n\nTITLE: FluxUI Avatar Group Component Props and Slots Documentation\nDESCRIPTION: Documentation for the flux:avatar.group component, which allows grouping multiple avatars together with customizable styling options.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nclass  |  CSS classes to apply to the group, including customizing ring colors using *:ring-{color} format.  \nSlot |  Description  \n---|---  \ndefault  |  Place multiple flux:avatar components here to display them as a group.\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox in Flux UI\nDESCRIPTION: Example of a disabled checkbox that prevents user interaction. This is useful when an option should be visible but not selectable in the current context.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox disabled />\n```\n\n----------------------------------------\n\nTITLE: Creating an Area Chart in HTML\nDESCRIPTION: This snippet shows how to create an area chart using the Flux Chart component. It includes custom axis formatting and positioning.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart wire:model=\"data\" class=\"aspect-3/1\">\n    <flux:chart.svg>\n        <flux:chart.line field=\"stock\" class=\"text-blue-500 dark:text-blue-400\" curve=\"none\" />\n        <flux:chart.area field=\"stock\" class=\"text-blue-200/50 dark:text-blue-400/30\" curve=\"none\" />\n\n        <flux:chart.axis axis=\"y\" position=\"right\" tick-prefix=\"$\" :format=\"[\n            'notation' => 'compact',\n            'compactDisplay' => 'short',\n            'maximumFractionDigits' => 1,\n        ]\">\n            <flux:chart.axis.grid />\n            <flux:chart.axis.tick />\n        </flux:chart.axis>\n\n        <flux:chart.axis axis=\"x\" field=\"date\">\n            <flux:chart.axis.tick />\n            <flux:chart.axis.line />\n        </flux:chart.axis>\n    </flux:chart.svg>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Premium Upsell Callout in FluxUI\nDESCRIPTION: Example of a callout designed to encourage users to upgrade to premium features, using a blue color scheme with a shield-check icon and an upgrade button.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout icon=\"shield-check\" color=\"blue\" inline>\n    <flux:callout.heading>API access is restricted</flux:callout.heading>\n\n    <flux:callout.text>Get access to all of our premium features and benefits.</flux:callout.text>\n\n    <x-slot name=\"actions\" class=\"@md:h-full m-0!\">\n        <flux:button>Upgrade to Pro -></flux:button>\n    </x-slot>\n</flux:callout>\n```\n\n----------------------------------------\n\nTITLE: Customizing Accent Colors in Flux UI\nDESCRIPTION: This CSS snippet shows how to define custom accent colors for both light and dark modes in Flux UI. It sets up CSS variables for the main accent color, accent content color, and accent foreground color.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/theming.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* resources/css/app.css */\n@theme {\n    --color-accent: var(--color-red-500);  \n    --color-accent-content: var(--color-red-600);  \n    --color-accent-foreground: var(--color-white);\n    }\n    \n@layer theme {  \n    .dark {    \n        --color-accent: var(--color-red-500);    \n        --color-accent-content: var(--color-red-400);    \n        --color-accent-foreground: var(--color-white);  \n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Date Ranges in PHP Livewire Component\nDESCRIPTION: Illustrates how to work with selected date ranges in a Livewire component using both an associative array and a specialized DateRange object.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nclass BookFlight extends Component {\n    public ?array $range;\n    public function book() {\n        // ...\n        $flight->depart_on = $this->range['start'];\n        $flight->return_on = $this->range['end'];\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass BookFlight extends Component {\n    public ?DateRange $range;\n    public function book() {\n        // ...\n        $flight->depart_on = $this->range->start();\n        $flight->return_on = $this->range->end();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Groups in FluxUI\nDESCRIPTION: Shows how to create groups of avatars with optional custom ring colors for different backgrounds.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar.group>\n    <flux:avatar src=\"https://unavatar.io/x/calebporzio\" />\n    <flux:avatar src=\"https://unavatar.io/github/hugosaintemarie\" />\n    <flux:avatar src=\"https://unavatar.io/github/joshhanley\" />\n    <flux:avatar>3+</flux:avatar>\n</flux:avatar.group>\n\n<!-- Adapt rings to custom background... -->\n<flux:avatar.group class=\"**:ring-zinc-100 dark:**:ring-zinc-800\">\n    <flux:avatar circle src=\"https://unavatar.io/x/calebporzio\" />\n    <flux:avatar circle src=\"https://unavatar.io/github/hugosaintemarie\" />\n    <flux:avatar circle src=\"https://unavatar.io/github/joshhanley\" />\n    <flux:avatar circle>3+</flux:avatar>\n</flux:avatar.group>\n```\n\n----------------------------------------\n\nTITLE: Class Merging in Flux Button Component\nDESCRIPTION: Demonstrates how custom Tailwind classes can be merged with Flux's default classes on a button component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:button class=\"w-full\">\n```\n\n----------------------------------------\n\nTITLE: Small Segmented Tabs\nDESCRIPTION: Compact version of segmented tabs using the size=\"sm\" property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:tabs variant=\"segmented\" size=\"sm\">\n    <flux:tab>Demo</flux:tab>\n    <flux:tab>Code</flux:tab>\n</flux:tabs>\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker with Predefined Presets\nDESCRIPTION: Enables predefined date range presets like 'Today', 'Yesterday', 'This Week', allowing users to quickly select common date ranges.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker mode=\"range\" with-presets />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Base Color in Flux UI Components\nDESCRIPTION: This HTML snippet demonstrates how to use the newly defined base color (slate) in Flux UI components. It shows the usage of color utilities with the custom base color.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/theming.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:text class=\"text-slate-800 dark:text-white\">...</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Vertical Checkbox Cards in Flux UI (Pro Feature)\nDESCRIPTION: Implementation of vertically arranged checkbox cards by adding the flex-col class to the group container. This Pro feature allows for a more structured, stacked presentation of options.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group label=\"Subscription preferences\" variant=\"cards\" class=\"flex-col\">\n    <flux:checkbox checked\n        value=\"newsletter\"\n        label=\"Newsletter\"\n        description=\"Get the latest updates and offers.\"\n    />\n    <flux:checkbox\n        value=\"updates\"\n        label=\"Product updates\"\n        description=\"Learn about new features and products.\"\n    />\n    <flux:checkbox\n        value=\"invitations\"\n        label=\"Event invitations\"\n        description=\"Invitatations to exclusive events.\"\n    />\n</flux:checkbox.group>      \n```\n\n----------------------------------------\n\nTITLE: Applying Different Color Options to Callouts in FluxUI\nDESCRIPTION: Shows how to use the color prop to change the callout's color scheme, with examples of all available color options from the TailwindCSS palette.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout color=\"zinc\" ... />\n<flux:callout color=\"red\" ... />\n<flux:callout color=\"orange\" ... />\n<flux:callout color=\"amber\" ... />\n<flux:callout color=\"yellow\" ... />\n<flux:callout color=\"lime\" ... />\n<flux:callout color=\"green\" ... />\n<flux:callout color=\"emerald\" ... />\n<flux:callout color=\"teal\" ... />\n<flux:callout color=\"cyan\" ... />\n<flux:callout color=\"sky\" ... />\n<flux:callout color=\"blue\" ... />\n<flux:callout color=\"indigo\" ... />\n<flux:callout color=\"violet\" ... />\n<flux:callout color=\"purple\" ... />\n<flux:callout color=\"fuchsia\" ... />\n<flux:callout color=\"pink\" ... />\n<flux:callout color=\"rose\" ... />\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Button with Slot in FluxUI\nDESCRIPTION: Provides full control over the button used to trigger the custom select through a named slot. This example shows how to create a rounded button with custom validation error handling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\">\n    <x-slot name=\"button\">\n        <flux:select.button class=\"rounded-full!\" placeholder=\"Choose industry...\" :invalid=\"$errors->has('...')\" />\n    </x-slot>\n\n    <flux:select.option>Photography</flux:select.option>\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Dates in PHP Livewire Component\nDESCRIPTION: Demonstrates how to work with multiple selected dates in a Livewire component using an array of date strings.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\nuse Illuminate\\Support\\Carbon;\nuse Livewire\\Component;\n\nclass RequestTimeOff extends Component {\n    public array $dates = [];\n\n    public function mount() {\n        $this->dates = [\n            now()->format('Y-m-d'),\n            now()->addDays(1)->format('Y-m-d'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toast Configuration Examples\nDESCRIPTION: Shows different ways to configure Toast notifications\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nFlux.toast('Your changes have been saved.')\n\n// Or...\n\nFlux.toast({\n    heading: 'Changes saved',\n    text: 'Your changes have been saved.',\n    variant: 'success',\n})\n```\n\n----------------------------------------\n\nTITLE: Disabled Input in FluxUI\nDESCRIPTION: Demonstrates how to create a disabled input field in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:input disabled label=\"Email\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a System Menu with Flux UI\nDESCRIPTION: Illustrates how to create a more complex system menu by swapping components, showcasing Flux UI's flexibility.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:dropdown>\n    <flux:button>Options</flux:button>\n\n    <flux:menu>\n        <!-- ... -->\n    </flux:menu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Text Component in FluxUI\nDESCRIPTION: Demonstrates the basic usage of the flux:text component with a heading. This is the foundation for displaying standard body copy in FluxUI applications.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/text.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading>Text component</flux:heading>\n<flux:text class=\"mt-2\">This is the standard text component for body copy and general content throughout your application.</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkbox with Label in Flux UI\nDESCRIPTION: A basic checkbox implementation with a label and error handling. The example shows how to create a checkbox inside a field with inline variant, binding it to a Livewire property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<flux:field variant=\"inline\">\n    <flux:checkbox wire:model=\"terms\" />\n    \n    <flux:label>I agree to the terms and conditions</flux:label>\n\n    <flux:error name=\"terms\" />\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: FluxUI Checkbox.all Props Table\nDESCRIPTION: Markdown table documenting the available props for the flux:checkbox.all component, which provides a master checkbox control for groups.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nlabel  |  Text label displayed next to the checkbox.  \ndescription  |  Help text displayed below the checkbox.  \ndisabled  |  Prevents user interaction with the checkbox.  \n```\n\n----------------------------------------\n\nTITLE: Eloquent Integration with DateRange\nDESCRIPTION: Example of using DateRange object with Eloquent queries for date filtering\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Computed;\nuse Livewire\\Component;\nuse App\\Models\\Order;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    public ?DateRange $range;\n    #[Computed]\n    public function orders() {\n        return $this->range\n            ? Order::whereBetween('created_at', $this->range)->get()\n            : Order::all();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check-All Functionality for Checkbox Groups in Flux UI\nDESCRIPTION: Implementation of a check-all feature that controls multiple checkboxes at once. This pattern allows users to quickly select or deselect all checkboxes in a group.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group>\n    <flux:checkbox.all />\n\n    <flux:checkbox checked />\n    <flux:checkbox />\n    <flux:checkbox />\n</flux:checkbox.group>        \n```\n\n----------------------------------------\n\nTITLE: Basic DateRange Component Implementation\nDESCRIPTION: Implementation of a basic DateRange component with Livewire integration\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    public DateRange $range;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable Select in FluxUI Pro\nDESCRIPTION: A premium variant that adds search functionality to the select component, making it easier for users to find options in large lists. This is only available in the Pro version of FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" searchable placeholder=\"Choose industries...\">\n    <flux:select.option>Photography</flux:select.option>\n    <flux:select.option>Design services</flux:select.option>\n    <flux:select.option>Web development</flux:select.option>\n    <flux:select.option>Accounting</flux:select.option>\n    <flux:select.option>Legal services</flux:select.option>\n    <flux:select.option>Consulting</flux:select.option>\n    <flux:select.option>Other</flux:select.option>\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Input Groups with Buttons in FluxUI\nDESCRIPTION: Shows how to create input groups with attached buttons and select elements in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<flux:input.group>\n    <flux:input placeholder=\"Post title\" />\n\n    <flux:button icon=\"plus\">New post</flux:button>\n</flux:input.group>\n\n<flux:input.group>\n    <flux:select class=\"max-w-fit\">\n        <flux:select.option selected>USD</flux:select.option>\n        <!-- ... -->\n    </flux:select>\n\n    <flux:input placeholder=\"$99.99\" />\n</flux:input.group>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Content in Flux Charts\nDESCRIPTION: This snippet demonstrates how to customize tooltip content by displaying multiple values with different formatting options. It shows a date heading with visitor count and page views formatted using compact notation.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.tooltip>\n    <flux:chart.tooltip.heading field=\"date\" />\n\n    <flux:chart.tooltip.value field=\"visitors\" label=\"Visitors\" />\n    <flux:chart.tooltip.value field=\"views\" label=\"Page Views\" :format=\"['notation' => 'compact']\" />\n</flux:chart.tooltip>\n```\n\n----------------------------------------\n\nTITLE: FluxUI Select Option Component Properties\nDESCRIPTION: Documents the properties and slots available for the flux:select.option component, which represents individual options within the select component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nvalue  |  Value associated with the option.  \ndisabled  |  Prevents selecting the option.\n```\n\n----------------------------------------\n\nTITLE: Comparing Conditional Attributes in HTML vs Blade Components\nDESCRIPTION: Example showing the difference between applying conditional attributes to HTML elements versus Flux/Blade components. HTML elements support @if conditionals directly while Blade components require using dynamic attribute syntax.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<!-- Conditional attributes: -->\n<input @if ($disabled) disabled @endif>\n<flux:input :disabled=\"$disabled\">\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage in Flux UI\nDESCRIPTION: Simple example showing how to use a bolt icon in Flux UI. Icons are based on the Heroicons collection.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:icon.bolt />\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable Badges in FluxUI\nDESCRIPTION: Demonstrates how to make a badge clickable by using the as=\"button\" prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge as=\"button\" variant=\"pill\" icon=\"plus\" size=\"lg\">Amount</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Binding FluxUI Calendar to Livewire Component\nDESCRIPTION: Demonstrates how to bind the FluxUI Calendar to a Livewire component using wire:model.live for real-time updates.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar wire:model.live=\"range\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS to Use Inter Font\nDESCRIPTION: CSS configuration to set Inter as the default font family for your application using Tailwind's @theme directive.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import '../../vendor/livewire/flux/dist/flux.css';\n\n...\n\n@theme {\n    --font-sans: Inter, sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DateRange with Eloquent\nDESCRIPTION: Shows how to use the DateRange object with Eloquent's whereBetween() method to filter queries by date range.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$orders = Order::whereBetween('created_at', $range)->get();\n```\n\n----------------------------------------\n\nTITLE: Segmented Radio Buttons in FluxUI\nDESCRIPTION: A more compact, segmented visual style for radio buttons. Uses the variant=\"segmented\" prop to create a button group appearance rather than traditional radio controls.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group wire:model=\"role\" label=\"Role\" variant=\"segmented\">\n    <flux:radio label=\"Admin\" />\n    <flux:radio label=\"Editor\" />\n    <flux:radio label=\"Viewer\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Persisting DateRange in Session\nDESCRIPTION: Shows how to persist a DateRange object in the user's session using the #[Session] attribute in a Livewire component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Session;\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    #[Session]\n    public DateRange $range;\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Radio Cards in FluxUI\nDESCRIPTION: Radio cards arranged in a vertical layout using the flex-col class. This variant provides a stacked appearance for all screen sizes and is only available in the Pro version.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group label=\"Shipping\" variant=\"cards\" class=\"flex-col\">\n    <flux:radio value=\"standard\" label=\"Standard\" description=\"4-10 business days\" />\n    <flux:radio value=\"fast\" label=\"Fast\" description=\"2-5 business days\" />\n    <flux:radio value=\"next-day\" label=\"Next day\" description=\"1 business day\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Heading Layout with Subheading in Flux UI HTML\nDESCRIPTION: Illustrates how to create a more complex heading arrangement with a subheading, main heading, and additional styled elements using Flux UI components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/heading.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <flux:text>Year to date</flux:text>\n\n    <flux:heading size=\"xl\" class=\"mb-1\">$7,532.16</flux:heading>\n\n    <div class=\"flex items-center gap-2\">\n        <flux:icon.arrow-trending-up variant=\"micro\" class=\"text-green-600 dark:text-green-500\" />\n\n        <span class=\"text-sm text-green-600 dark:text-green-500\">15.2%</span>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Profile Menu Implementation\nDESCRIPTION: Complex example of a profile dropdown menu with navigation items and user information.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:dropdown align=\"end\">\n    <flux:profile avatar=\"https://unavatar.io/x/calebporzio\" />\n\n    <flux:navmenu class=\"max-w-[12rem]\">\n        <div class=\"px-2 py-1.5\">\n            <flux:text size=\"sm\">Signed in as</flux:text>\n            <flux:heading class=\"mt-1! truncate\">caleb@example.com</flux:heading>\n        </div>\n\n        <flux:navmenu.separator />\n\n        <div class=\"px-2 py-1.5\">\n            <flux:text size=\"sm\" class=\"pl-7\">Teams</flux:text>\n        </div>\n\n        <flux:navmenu.item href=\"#\" icon=\"check\" class=\"text-zinc-800 dark:text-white truncate\">Personal</flux:navmenu.item>\n        <flux:navmenu.item href=\"#\" indent class=\"text-zinc-800 dark:text-white truncate\">Wireable LLC</flux:navmenu.item>\n\n        <flux:navmenu.separator />\n\n        <flux:navmenu.item href=\"/dashboard\" icon=\"key\" class=\"text-zinc-800 dark:text-white\">Licenses</flux:navmenu.item>\n        <flux:navmenu.item href=\"/account\" icon=\"user\" class=\"text-zinc-800 dark:text-white\">Account</flux:navmenu.item>\n\n        <flux:navmenu.separator />\n\n        <flux:navmenu.item href=\"/logout\" icon=\"arrow-right-start-on-rectangle\" class=\"text-zinc-800 dark:text-white\">Logout</flux:navmenu.item>\n    </flux:navmenu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Profile Component with Initial Avatars\nDESCRIPTION: Various ways to implement initial-based avatars, including automatic generation and manual specification.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Automatically generates initials from name -->\n<flux:profile name=\"Caleb Porzio\" />\n\n<!-- Specify color... -->\n<flux:profile name=\"Caleb Porzio\" avatar:color=\"cyan\" />\n\n<!-- Manually specify initials... -->\n<flux:profile initials=\"CP\" />\n\n<!-- Provide name only for avatar initial generation... -->\n<flux:profile avatar:name=\"Caleb Porzio\" />\n```\n\n----------------------------------------\n\nTITLE: Segmented Radio Group for Dark Mode Selection\nDESCRIPTION: Creates a segmented radio button group for selecting appearance mode, with text labels and icons for light, dark, and system options.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:radio.group x-data variant=\"segmented\" x-model=\"$flux.appearance\">\n    <flux:radio value=\"light\" icon=\"sun\">Light</flux:radio>\n    <flux:radio value=\"dark\" icon=\"moon\">Dark</flux:radio>\n    <flux:radio value=\"system\" icon=\"computer-desktop\">System</flux:radio>\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Usage in FluxUI\nDESCRIPTION: Demonstrates how to use the basic avatar component with an image source.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar src=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Horizontal Fieldset for Checkboxes in Flux UI\nDESCRIPTION: Implementation of a horizontal layout for a group of related checkboxes using fieldset. Includes a legend and description to provide context for the checkbox group.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<flux:fieldset>\n    <flux:legend>Languages</flux:legend>\n\n    <flux:description>Choose the languages you want to support.</flux:description>\n\n    <div class=\"flex gap-4 *:gap-x-2\">\n        <flux:checkbox checked value=\"english\" label=\"English\" />\n        <flux:checkbox checked value=\"spanish\" label=\"Spanish\" />\n        <flux:checkbox value=\"french\" label=\"French\" />\n        <flux:checkbox value=\"german\" label=\"German\" />\n    </div>\n</flux:fieldset>                    \n```\n\n----------------------------------------\n\nTITLE: Profile with Custom Trailing Icon\nDESCRIPTION: Profile component using a custom trailing icon instead of the default chevron.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:profile\n    icon:trailing=\"chevron-up-down\"\n    avatar=\"https://unavatar.io/x/calebporzio\"\n    name=\"Caleb Porzio\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date Range Length\nDESCRIPTION: Controls the minimum allowed range of dates that can be selected by setting the min-range property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker mode=\"range\" min-range=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DateRange Property in Livewire Component\nDESCRIPTION: Shows how to define a DateRange property in a Livewire component for use with the FluxUI Calendar.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    public DateRange $range;\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Group Within Fieldset in FluxUI\nDESCRIPTION: Radio group enclosed in a fieldset with a legend for better semantic structure and accessibility. Each radio option includes a value, label, and descriptive text.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:fieldset>\n    <flux:legend>Role</flux:legend>\n\n    <flux:radio.group>\n        <flux:radio\n            value=\"administrator\"\n            label=\"Administrator\"\n            description=\"Administrator users can perform any action.\"\n            checked\n        />\n        <flux:radio\n            value=\"editor\"\n            label=\"Editor\"\n            description=\"Editor users have the ability to read, create, and update.\"\n        />\n        <flux:radio\n            value=\"viewer\"\n            label=\"Viewer\"\n            description=\"Viewer users only have the ability to read. Create, and update are restricted.\"\n        />\n    </flux:radio.group>\n</flux:fieldset>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Accordion in Flux UI\nDESCRIPTION: Demonstrates the basic structure of an Accordion component with multiple items, each containing a heading and content.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/accordion.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion>\n    <flux:accordion.item>\n        <flux:accordion.heading>What's your refund policy?</flux:accordion.heading>\n\n        <flux:accordion.content>\n            If you are not satisfied with your purchase, we offer a 30-day money-back guarantee. Please contact our support team for assistance.\n        </flux:accordion.content>\n    </flux:accordion.item>\n\n    <flux:accordion.item>\n        <flux:accordion.heading>Do you offer any discounts for bulk purchases?</flux:accordion.heading>\n\n        <flux:accordion.content>\n            Yes, we offer special discounts for bulk orders. Please reach out to our sales team with your requirements.\n        </flux:accordion.content>\n    </flux:accordion.item>\n\n    <flux:accordion.item>\n        <flux:accordion.heading>How do I track my order?</flux:accordion.heading>\n\n        <flux:accordion.content>\n            Once your order is shipped, you will receive an email with a tracking number. Use this number to track your order on our website.\n        </flux:accordion.content>\n    </flux:accordion.item>\n</flux:accordion>\n```\n\n----------------------------------------\n\nTITLE: Separator with Text in Flux UI\nDESCRIPTION: Implementation of a separator with text in the center, providing a more descriptive division between content sections.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/separator.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:separator text=\"or\" />\n```\n\n----------------------------------------\n\nTITLE: Field Components with Badges in FluxUI\nDESCRIPTION: Shows how to add badges to field labels to indicate whether fields are required or optional.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/field.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label badge=\"Required\">Email</flux:label>\n\n    <flux:input type=\"email\" required />\n\n    <flux:error name=\"email\" />\n</flux:field>\n\n<flux:field>\n    <flux:label badge=\"Optional\">Phone number</flux:label>\n\n    <flux:input type=\"phone\" placeholder=\"(555) 555-5555\" mask=\"(999) 999-9999\"  />\n\n    <flux:error name=\"phone\" />\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: Creating Engagement Prompt Callout with FluxUI in HTML\nDESCRIPTION: This example shows how to build an engagement prompt callout using FluxUI. It features a heading with a badge, descriptive text, and multiple action buttons.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout variant=\"secondary\" icon=\"user-group\">\n    <flux:callout.heading>\n        Team collaboration <flux:badge color=\"purple\" size=\"sm\" inset=\"top bottom\">Available with Pro</flux:badge>\n    </flux:callout.heading>\n\n    <flux:callout.text>\n        <p>Share projects, manage permissions, and collaborate in real time with your team. Upgrade now to access these features.</p>\n    </flux:callout.text>\n\n    <x-slot name=\"actions\">\n        <flux:button>Invite member</flux:button>\n        <flux:button variant=\"ghost\" class=\"@max-md:hidden\">Manage team</flux:button>\n    </x-slot>\n</flux:callout>\n```\n\n----------------------------------------\n\nTITLE: Adding Axis Lines to Flux UI Charts\nDESCRIPTION: Shows how to add and style axis lines for both x and y axes using the flux:chart.axis.line component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.svg>\n    <!-- ... -->\n\n    <flux:chart.axis axis=\"x\">\n        <!-- Horizontal \"X\" axis line: -->\n        <flux:chart.axis.line />\n    </flux:chart.axis>\n\n    <flux:chart.axis axis=\"y\">\n        <!-- Vertical \"Y\" axis line: -->\n        <flux:chart.axis.line />\n    </flux:chart.axis>\n</flux:chart.svg>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- A dark gray axis line that is 2px wide and has a gray color: -->\n<flux:chart.axis.line class=\"text-zinc-800\" stroke-width=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Selected Suffix in FluxUI\nDESCRIPTION: Shows how to add localization support to the selected suffix in a multiple select component using Laravel's __() helper function for translations.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" selected-suffix=\"{{ __('industries selected') }}\" multiple>\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Date Range Length\nDESCRIPTION: Controls the maximum allowed range of dates that can be selected by setting the max-range property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker mode=\"range\" max-range=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Week Numbers in FluxUI Calendar\nDESCRIPTION: Shows how to enable the display of week numbers in the FluxUI Calendar component using the week-numbers attribute.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar week-numbers />\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Range Presets\nDESCRIPTION: Specifies which predefined date range presets to show and in which order using the presets property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker\n    mode=\"range\"\n    presets=\"today yesterday thisWeek last7Days thisMonth yearToDate allTime\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Pill-shaped Badges in FluxUI\nDESCRIPTION: Shows how to create a pill-shaped badge using the variant=\"pill\" prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge variant=\"pill\" icon=\"user\">Users</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Vertical Navigation with FluxUI Navlist\nDESCRIPTION: Creates a vertical navigation sidebar using the navlist component. Includes icons for each item and sets a specific width for the sidebar using a utility class.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:navlist class=\"w-64\">\n    <flux:navlist.item href=\"#\" icon=\"home\">Home</flux:navlist.item>\n    <flux:navlist.item href=\"#\" icon=\"puzzle-piece\">Features</flux:navlist.item>\n    <flux:navlist.item href=\"#\" icon=\"currency-dollar\">Pricing</flux:navlist.item>\n    <flux:navlist.item href=\"#\" icon=\"user\">About</flux:navlist.item>\n</flux:navlist>\n```\n\n----------------------------------------\n\nTITLE: Initializing DateRange in Livewire Component\nDESCRIPTION: Demonstrates how to initialize a DateRange object in a Livewire component's mount method.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    public DateRange $range;\n    public function mount() {\n        $this->range = new DateRange(now(), now()->addDays(7));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Resize Options in FluxUI\nDESCRIPTION: Illustrates different resize configurations for the Textarea component, including vertical, none, horizontal, and both directions.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/textarea.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:textarea resize=\"vertical\" />\n<flux:textarea resize=\"none\" />\n<flux:textarea resize=\"horizontal\" />\n<flux:textarea resize=\"both\" />\n```\n\n----------------------------------------\n\nTITLE: Toast Position Customization\nDESCRIPTION: Examples of customizing Toast component positioning\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:toast position=\"top right\" />\n\n<!-- Customize top padding for things like navbars... -->\n<flux:toast position=\"top right\" class=\"pt-24\" />\n```\n\n----------------------------------------\n\nTITLE: Profile Component without Chevron\nDESCRIPTION: Profile component with the chevron icon disabled using the chevron prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:profile :chevron=\"false\" avatar=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Using DateRange Object in Livewire Component\nDESCRIPTION: Demonstrates using the specialized DateRange object for enhanced functionality when working with date ranges in a Livewire component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Livewire\\Component;\nuse Flux\\DateRange;\nclass Dashboard extends Component {\n    public DateRange $range;\n    public function mount() {\n        $this->range = new DateRange(now()->subMonth(), now());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Heading Sizes in Flux UI HTML\nDESCRIPTION: Shows how to use the size attribute to create headings of different sizes: default (14px), large (16px), and extra large (24px).\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/heading.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading>Default</flux:heading>\n<flux:heading size=\"lg\">Large</flux:heading>\n<flux:heading size=\"xl\">Extra large</flux:heading>\n```\n\n----------------------------------------\n\nTITLE: Updating Flux Packages\nDESCRIPTION: Composer command to update Flux and Flux Pro packages to their latest versions while maintaining dependency constraints.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update livewire/flux livewire/flux-pro\n```\n\n----------------------------------------\n\nTITLE: Checkbox Cards with Icons in Flux UI (Pro Feature)\nDESCRIPTION: Implementation of checkbox cards with icons to enhance visual recognition. This Pro feature allows adding meaningful icons to each option for improved user experience.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group label=\"Subscription preferences\" variant=\"cards\" class=\"flex-col\">\n    <flux:checkbox checked\n        value=\"newsletter\"\n        icon=\"newspaper\"\n        label=\"Newsletter\"\n        description=\"Get the latest updates and offers.\"\n    />\n    <flux:checkbox\n        value=\"updates\"\n        icon=\"cube\"\n        label=\"Product updates\"\n        description=\"Learn about new features and products.\"\n    />\n    <flux:checkbox\n        value=\"invitations\"\n        icon=\"calendar\"\n        label=\"Event invitations\"\n        description=\"Invitatations to exclusive events.\"\n    />\n</flux:checkbox.group>      \n```\n\n----------------------------------------\n\nTITLE: Custom Logo Slot Implementation\nDESCRIPTION: Demonstrates using the logo slot to create a custom branded element with an icon.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/brand.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:brand href=\"#\" name=\"Launchpad\">\n    <x-slot name=\"logo\" class=\"size-6 rounded-full bg-cyan-500 text-white text-xs font-bold\">\n        <flux:icon name=\"rocket-launch\" variant=\"micro\" />\n    </x-slot>\n</flux:brand>\n```\n\n----------------------------------------\n\nTITLE: Setting Min/Max Dates in HTML\nDESCRIPTION: Demonstrates how to restrict the selectable date range by setting minimum and maximum boundaries.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar max=\"2025-04-22\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Prevent selection before today... -->\n<flux:calendar min=\"today\" />\n\n<!-- Prevent selection after today... -->\n<flux:calendar max=\"today\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Badges in FluxUI\nDESCRIPTION: Demonstrates how to add icons to badges using the icon and icon:trailing props.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge icon=\"user-circle\">Users</flux:badge>\n<flux:badge icon=\"document-text\">Files</flux:badge>\n<flux:badge icon:trailing=\"video-camera\">Videos</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Grouped Navigation with FluxUI Navlist\nDESCRIPTION: Groups related navigation items under a heading in a vertical navlist. Uses the navlist.group component to create a visual section with a heading label.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:navlist>\n    <flux:navlist.group heading=\"Account\" class=\"mt-4\">\n        <flux:navlist.item href=\"#\">Profile</flux:navlist.item>\n        <flux:navlist.item href=\"#\">Settings</flux:navlist.item>\n        <flux:navlist.item href=\"#\">Billing</flux:navlist.item>\n    </flux:navlist.group>\n</flux:navlist> \n```\n\n----------------------------------------\n\nTITLE: Permanent Toast Configuration\nDESCRIPTION: Example of creating a permanent Toast notification\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Show indefinitely...\nFlux::toast(duration: 0, ...);\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Indicator in Multiple Select with FluxUI\nDESCRIPTION: Changes the selection indicator from the default checkmark to a checkbox in a multiple select component by using the indicator=\"checkbox\" property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" indicator=\"checkbox\" multiple>\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Icon Variants in Flux UI\nDESCRIPTION: Demonstrates the four available icon variants: outline (default), solid, mini, and micro. Each variant has a specific size and style.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:icon.bolt />                  <!-- 24px, outline -->\n<flux:icon.bolt variant=\"solid\" />  <!-- 24px, filled -->\n<flux:icon.bolt variant=\"mini\" />   <!-- 20px, filled -->\n<flux:icon.bolt variant=\"micro\" />  <!-- 16px, filled -->             \n```\n\n----------------------------------------\n\nTITLE: Responsive Layout for Radio Cards in FluxUI\nDESCRIPTION: A code snippet demonstrating how to apply responsive classes to radio card groups. The max-sm:flex-col class changes the layout from horizontal to vertical on small screens.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group ... class=\"max-sm:flex-col\">\n    <!-- ... -->\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Offset and Gap in Flux UI\nDESCRIPTION: This example shows how to customize the offset and gap of a dropdown menu using pixel values, which controls the distance between the trigger element and the dropdown menu.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown offset=\"-15\" gap=\"2\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Padding in Flux UI\nDESCRIPTION: Explains how to control chart padding using the gutter attribute. The example shows setting different padding values for each side of the chart.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart>\n    <flux:chart.svg gutter=\"12 0 12 8\">\n        <!-- ... -->\n    </flux:chart.svg>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Activating Flux Pro License\nDESCRIPTION: Artisan command to activate the premium version of Flux. This prompts for email and license key input to create an auth.json file.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan flux:activate\n```\n\n----------------------------------------\n\nTITLE: Logo-Only Brand Display\nDESCRIPTION: Shows how to display just the logo component without the company name.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/brand.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:brand href=\"#\" logo=\"/img/demo/logo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Open Date for FluxUI Calendar in HTML\nDESCRIPTION: Demonstrates how to set the initial open date for the FluxUI Calendar component using the open-to attribute.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar open-to=\"2026-05-01\" />\n```\n\n----------------------------------------\n\nTITLE: Full Width Button in FluxUI\nDESCRIPTION: Shows how to create a button that spans the full width of its container using standard CSS classes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:button variant=\"primary\" class=\"w-full\">Send invite</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Adding a Close Button to Badges in FluxUI\nDESCRIPTION: Shows how to add a close button to a badge for removable functionality.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge>\n    Admin <flux:badge.close />\n</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Binding Date Range to Livewire Model\nDESCRIPTION: Binds the date range selection to a Livewire property using wire:model directive.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker mode=\"range\" wire:model=\"range\" />\n```\n\n----------------------------------------\n\nTITLE: Icon-Only Segmented Radio Group for Dark Mode\nDESCRIPTION: A space-saving variant of the segmented radio group that uses only icons without text labels for selecting appearance mode.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:radio.group x-data variant=\"segmented\" x-model=\"$flux.appearance\">\n    <flux:radio value=\"light\" icon=\"sun\" />\n    <flux:radio value=\"dark\" icon=\"moon\" />\n    <flux:radio value=\"system\" icon=\"computer-desktop\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Publishing Flux Components for Customization\nDESCRIPTION: Artisan command to publish Flux component files into your project for customization. Publishes selected components or all with --all flag.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan flux:publish\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation in FluxUI\nDESCRIPTION: Basic implementation of a FluxUI button component with default styling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:button>Button</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Importing Lucide Icons with Artisan Command\nDESCRIPTION: Shows the Artisan command to import Lucide icons into your Flux UI project when you need more icons than what Heroicons provides.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nphp artisan flux:icon\n```\n\n----------------------------------------\n\nTITLE: Configuring Flux Authentication on Laravel Cloud\nDESCRIPTION: Build command for Laravel Cloud environments to authenticate with the Flux private composer repository before deployment.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config http-basic.composer.fluxui.dev your-email your-license-key\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Calendar Display in HTML\nDESCRIPTION: Illustrates how to create a non-interactive calendar for display purposes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar\n    static\n    value=\"2025-04-22\"\n    size=\"xs\"\n    :navigation=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Buttons with Icons in FluxUI\nDESCRIPTION: Demonstrates how to add icons to FluxUI buttons, including icon-only buttons, leading icons, and trailing icons.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:button icon=\"ellipsis-horizontal\" />\n<flux:button icon=\"arrow-down-tray\">Export</flux:button>\n<flux:button icon:trailing=\"chevron-down\">Open</flux:button>\n<flux:button icon=\"x-mark\" variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Select in FluxUI Pro\nDESCRIPTION: A premium variant that allows users to select multiple options from a list. This component is only available in the Pro version of FluxUI and provides a more interactive selection experience.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" multiple placeholder=\"Choose industries...\">\n    <flux:select.option>Photography</flux:select.option>\n    <flux:select.option>Design services</flux:select.option>\n    <flux:select.option>Web development</flux:select.option>\n    <flux:select.option>Accounting</flux:select.option>\n    <flux:select.option>Legal services</flux:select.option>\n    <flux:select.option>Consulting</flux:select.option>\n    <flux:select.option>Other</flux:select.option>\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Grouped Feature Example with Avatars in FluxUI\nDESCRIPTION: Shows a complex example of using grouped avatars in a feature layout with additional components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <flux:heading size=\"xl\">The Laravel Podcast <flux:badge inset=\"top bottom\" class=\"ml-1 max-sm:hidden\">New</flux:badge></flux:heading>\n\n    <flux:text class=\"mt-2\">\n        A podcast about Laravel, development best practices, and the PHP ecosystemâhosted by Jeffrey Way, Matt Stauffer, and Taylor Otwell, later joined by Adam Wathan.\n    </flux:text>\n\n    <flux:avatar.group class=\"mt-6\">\n        <flux:avatar circle size=\"lg\" src=\"https://unavatar.io/x/taylorotwell\" />\n        <flux:avatar circle size=\"lg\" src=\"https://unavatar.io/x/adamwathan\" />\n        <flux:avatar circle size=\"lg\" src=\"https://unavatar.io/x/jeffrey_way\" />\n        <flux:avatar circle size=\"lg\" src=\"https://unavatar.io/x/stauffermatt\" />\n    </flux:avatar.group>\n</div>                   \n```\n\n----------------------------------------\n\nTITLE: Textarea with Placeholder in FluxUI\nDESCRIPTION: Shows how to add a placeholder to the Textarea component to guide users on what to enter. This example includes a label for 'Order notes'.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/textarea.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:textarea\n    label=\"Order notes\"\n    placeholder=\"No lettuce, tomato, or onion...\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding and Styling Zero Line in Flux UI Charts\nDESCRIPTION: Explains how to add and customize the zero line in charts, which represents the zero value on the axis.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.svg>\n    <!-- ... -->\n\n    <!-- Zero line: -->\n    <flux:chart.zero-line />\n</flux:chart.svg>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- A dark gray zero line that is 2px wide and has a gray color: -->\n<flux:chart.zero-line class=\"text-zinc-800\" stroke-width=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Localizing FluxUI Calendar\nDESCRIPTION: Illustrates how to set a specific locale for the FluxUI Calendar component using the locale attribute.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar locale=\"ja-JP\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring nginx for Flux Asset Routes\nDESCRIPTION: Nginx server configuration to properly handle Flux's asset routes. Ensures JavaScript and CSS assets are correctly served from the /flux/ path.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_11\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/flux/flux(\\.min)?\\.(js|css)$ {\n    expires off;\n    try_files $uri $uri/ /index.php?$query_string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flux Authentication in CI Environments\nDESCRIPTION: Command for continuous integration environments to authenticate with the Flux private composer repository using environment variables.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config http-basic.composer.fluxui.dev \\\"${FLUX_USERNAME}\\\" \\\"${FLUX_LICENSE_KEY}\\\"\n```\n\n----------------------------------------\n\nTITLE: Advanced CSS Usage in Flux UI Components\nDESCRIPTION: Illustrates the use of advanced CSS selectors in Flux UI components for enhanced interactivity without JavaScript.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n[&:has(+input:focus)]:text-zinc-800\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar Items in HTML\nDESCRIPTION: Demonstrates how to customize the editor toolbar by specifying a list of items.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:editor toolbar=\"heading | bold italic underline | align ~ undo redo\" />\n```\n\n----------------------------------------\n\nTITLE: Segmented Tabs with Icons\nDESCRIPTION: Segmented tabs implementation with icon prefixes for enhanced visual distinction.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:tabs variant=\"segmented\">\n    <flux:tab icon=\"list-bullet\">List</flux:tab>\n    <flux:tab icon=\"squares-2x2\">Board</flux:tab>\n    <flux:tab icon=\"calendar-days\">Timeline</flux:tab>\n</flux:tabs>\n```\n\n----------------------------------------\n\nTITLE: Common Prop Usage in Flux Components\nDESCRIPTION: Showcases the usage of common props like variant, icon, size, and kbd across various Flux components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:button variant=\"primary\" />\n<flux:input variant=\"filled\" />\n<flux:modal variant=\"flyout\" />\n<flux:badge variant=\"solid\" />\n<flux:select variant=\"combobox\" />\n<flux:separator variant=\"subtle\" />\n<flux:tabs variant=\"segmented\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button icon=\"magnifying-glass\" />\n<flux:input icon=\"magnifying-glass\" />\n<flux:tab icon=\"cog-6-tooth\" />\n<flux:badge icon=\"user\" />\n<flux:breadcrumbs.item icon=\"home\" />\n<flux:navlist.item icon=\"user\" />\n<flux:navbar.item icon=\"user\" />\n<flux:menu.item icon=\"plus\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button icon:trailing=\"chevron-down\" />\n<flux:input icon:trailing=\"credit-card\" />\n<flux:badge icon:trailing=\"x-mark\" />\n<flux:navbar.item icon:trailing=\"chevron-down\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button size=\"sm\" />\n<flux:select size=\"sm\" />\n<flux:input size=\"sm\" />\n<flux:tabs size=\"sm\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading size=\"lg\" />\n<flux:badge size=\"lg\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:button kbd=\"⌘S\" />\n<flux:tooltip kbd=\"D\" />\n<flux:input kbd=\"⌘K\" />\n<flux:menu.item kbd=\"⌘E\" />\n<flux:command.item kbd=\"⌘N\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge inset=\"top bottom\">\n<flux:button variant=\"ghost\" inset=\"left\">\n```\n\n----------------------------------------\n\nTITLE: Setting Heading Level in Flux UI HTML\nDESCRIPTION: Demonstrates how to use the level attribute to control the HTML heading level (h1, h2, h3, etc.) for semantic structuring.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/heading.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading level=\"3\">User profile</flux:heading>\n<flux:text class=\"mt-2\">This information will be displayed publicly.</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Using Item-Suffixed Components in Flux UI\nDESCRIPTION: Examples of Flux components that can only be used within a parent/wrapper component. These child components use the .item suffix while the parent maintains the main component name.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion>\n    <flux:accordion.item />\n</flux:accordion>\n\n<flux:menu>\n    <flux:menu.item />\n</flux:menu>\n\n<flux:breadcrumbs>\n    <flux:breadcrumbs.item />\n</flux:breadcrumbs>\n\n<flux:navbar>\n    <flux:navbar.item />\n</flux:navbar>\n\n<flux:navlist>\n    <flux:navlist.item />\n</flux:navlist>\n\n<flux:navmenu>\n    <flux:navmenu.item />\n</flux:navmenu>\n\n<flux:command>\n    <flux:command.item />\n</flux:command>\n\n<flux:autocomplete>\n    <flux:autocomplete.item />\n</flux:autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Dark Mode in Flux v2\nDESCRIPTION: Instructions for disabling Flux's automatic dark mode handling by removing the @fluxAppearance directive from the layout file.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<head>\n    ...\n--    @fluxAppearance\n</head>\n```\n\n----------------------------------------\n\nTITLE: Disabling Flux Dark Mode\nDESCRIPTION: Example of code modification to remove the Flux appearance management by commenting out the @fluxAppearance directive.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    ...\n--    @fluxAppearance\n</head>\n```\n\n----------------------------------------\n\nTITLE: Displaying Fixed Weeks in HTML\nDESCRIPTION: Illustrates how to display a consistent number of weeks in every month to prevent layout shifts.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar fixed-weeks />\n```\n\n----------------------------------------\n\nTITLE: Using Native Browser Features in Flux UI\nDESCRIPTION: Shows how Flux UI leverages native browser features like the popover attribute for dropdowns.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div popover>\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Toolbar Item Implementation in PHP\nDESCRIPTION: Example of creating a custom 'copy' toolbar item using Blade templating.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<flux:tooltip content=\"{{ __('') }}\" class=\"contents\">\n    <flux:editor.button x-on:click=\"navigator.clipboard?.writeText($el.closest('[data-flux-editor]').value); $el.setAttribute('data-copied', ''); setTimeout(() => $el.removeAttribute('data-copied'), 2000)\">\n        <flux:icon.clipboard variant=\"outline\" class=\"[[data-copied]_&]:hidden size-5!\" />\n        <flux:icon.clipboard-document-check variant=\"outline\" class=\"hidden [[data-copied]_&]:block size-5!\" />\n    </flux:editor.button>\n</flux:tooltip>\n```\n\n----------------------------------------\n\nTITLE: Adding a Summary Display to Flux Charts\nDESCRIPTION: This snippet shows how to display a summary value from the dataset in a bold, easy-to-read format. It demonstrates displaying the visitors field with compact notation formatting and proper viewport setup.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart wire:model=\"data\">\n    <flux:chart.summary>\n        <flux:chart.summary.value field=\"visitors\" :format=\"['notation' => 'compact']\" />\n    </flux:chart.summary>\n\n    <flux:chart.viewport class=\"aspect-[3/1]\">\n        <!-- ... -->\n    </flux:chart.viewport>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Modal Names in Loops\nDESCRIPTION: Example of generating unique modal names when placing modals inside a loop. This prevents unintended triggering of multiple modals with the same name.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@foreach ($users as $user)\n    <flux:modal :name=\"'edit-profile-'.$user->id\">\n        ...\n    </flux:modal>\n@endforeach\n```\n\n----------------------------------------\n\nTITLE: Custom Card Content for Radio Buttons in FluxUI\nDESCRIPTION: Creating custom radio card layouts by utilizing the component slot. This approach allows for completely customized content within each radio card including custom typography and spacing. This variant is only available in the Pro version.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group label=\"Shipping\" variant=\"cards\" class=\"max-sm:flex-col\">\n    <flux:radio value=\"standard\" checked>\n        <flux:radio.indicator />\n\n        <div class=\"flex-1\">\n            <flux:heading class=\"leading-4\">Standard</flux:heading>\n            <flux:text size=\"sm\" class=\"mt-2\">4-10 business days</flux:text>\n        </div>\n    </flux:radio>\n\n    <flux:radio value=\"fast\">\n        <flux:radio.indicator />\n\n        <div class=\"flex-1\">\n            <flux:heading class=\"leading-4\">Fast</flux:heading>\n            <flux:text size=\"sm\" class=\"mt-2\">2-5 business days</flux:text>\n        </div>\n    </flux:radio>\n\n    <flux:radio value=\"next-day\">\n        <flux:radio.indicator />\n\n        <div class=\"flex-1\">\n            <flux:heading class=\"leading-4\">Next day</flux:heading>\n            <flux:text size=\"sm\" class=\"mt-2\">1 business day</flux:text>\n        </div>\n    </flux:radio>\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Controlling Search Clearing Behavior in FluxUI Select\nDESCRIPTION: Modifies when the search input is cleared in a searchable select. The clear=\"close\" property makes the search input clear only when the select dropdown is closed, not when an option is selected.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" searchable multiple clear=\"close\">\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Simple Dark Mode Toggle Button with Alpine\nDESCRIPTION: Creates a simple toggle button that switches between dark and light mode using Alpine's integration with Flux utilities.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:button x-data x-on:click=\"$flux.dark = ! $flux.dark\">Toggle</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Slash Separators in FluxUI\nDESCRIPTION: Implementation of breadcrumbs using slash separators instead of the default chevron icons. The separator property is applied to each item to maintain consistent styling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/breadcrumbs.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:breadcrumbs>\n    <flux:breadcrumbs.item href=\"#\" separator=\"slash\">Home</flux:breadcrumbs.item>\n    <flux:breadcrumbs.item href=\"#\" separator=\"slash\">Blog</flux:breadcrumbs.item>\n    <flux:breadcrumbs.item separator=\"slash\">Post</flux:breadcrumbs.item>\n</flux:breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Input with Icon Buttons in FluxUI\nDESCRIPTION: Shows how to add custom icon buttons to input fields using slots in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:input placeholder=\"Search orders\">\n    <x-slot name=\"iconTrailing\">\n        <flux:button size=\"sm\" variant=\"subtle\" icon=\"x-mark\" class=\"-mr-1\" />\n    </x-slot>\n</flux:input>\n\n<flux:input type=\"password\" value=\"password\">\n    <x-slot name=\"iconTrailing\">\n        <flux:button size=\"sm\" variant=\"subtle\" icon=\"eye\" class=\"-mr-1\" />\n    </x-slot>\n</flux:input>\n```\n\n----------------------------------------\n\nTITLE: Creating Badges with Different Sizes in FluxUI\nDESCRIPTION: Shows how to create badges in small, default, and large sizes using the size prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge size=\"sm\">Small</flux:badge>\n<flux:badge>Default</flux:badge>\n<flux:badge size=\"lg\">Large</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Configuring All Time Date Range in Flux Date Picker\nDESCRIPTION: Implementation of all-time date range preset with minimum date constraint using user creation date\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<flux:date-picker\n    mode=\"range\"\n    presets=\"... allTime\"\n    :min=\"auth()->user()->created_at->format('Y-m-d')\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip for Disabled Button Elements\nDESCRIPTION: A workaround for implementing tooltips on disabled buttons by wrapping the button in a div element, since disabled buttons don't trigger pointer events by default.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tooltip.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:tooltip content=\"Cannot merge until reviewed by a team member\">\n    <div>\n        <flux:button disabled icon=\"arrow-turn-down-right\">Merge pull request</flux:button>\n    </div>\n</flux:tooltip>\n```\n\n----------------------------------------\n\nTITLE: Using Accent Colors with Flux UI Utility Classes\nDESCRIPTION: This HTML snippet shows how to use Flux UI's utility classes for accent colors. It provides a more ergonomic syntax for applying accent colors to components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/theming.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"bg-accent text-accent-foreground\">\n```\n\n----------------------------------------\n\nTITLE: Pill Style Tabs\nDESCRIPTION: Implementation of pill-styled tabs for content navigation.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:tabs variant=\"pills\">\n    <flux:tab>List</flux:tab>\n    <flux:tab>Board</flux:tab>\n    <flux:tab>Timeline</flux:tab>\n</flux:tabs>\n```\n\n----------------------------------------\n\nTITLE: Using Buttons as Links in FluxUI\nDESCRIPTION: Shows how to render a button as an HTML anchor tag by providing the href property, maintaining button styling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:button\n    href=\"https://google.com\"\n    icon:trailing=\"arrow-up-right\"\n>\n    Visit Google\n</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Avatar Sizes in FluxUI\nDESCRIPTION: Shows how to use different sizes for avatars, ranging from extra small to extra large.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Extra large: size-16 (64px) -->\n<flux:avatar size=\"xl\" src=\"https://unavatar.io/x/calebporzio\" />\n\n<!-- Large: size-12 (48px) -->\n<flux:avatar size=\"lg\" src=\"https://unavatar.io/x/calebporzio\" />\n\n<!-- Default: size-10 (40px) -->\n<flux:avatar src=\"https://unavatar.io/x/calebporzio\" />\n\n<!-- Small: size-8 (32px) -->\n<flux:avatar size=\"sm\" src=\"https://unavatar.io/x/calebporzio\" />\n\n<!-- Extra small: size-6 (24px) -->\n<flux:avatar size=\"xs\" src=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: FluxUI Select Input Component Properties\nDESCRIPTION: Specifies the properties available for the flux:select.input component, which provides input-style functionality for the select component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nplaceholder  |  Text displayed when no option is selected.  \ninvalid  |  Applies error styling to the input.  \nsize  |  Size of the input. Options: sm, xs.\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Pagination in Flux UI\nDESCRIPTION: Demonstrates how to use the Flux Pagination component with a standard paginator. This snippet shows the basic usage of the component to display pagination for a list of orders.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- $orders = Order::paginate() -->\n<flux:pagination :paginator=\"$orders\" />\n```\n\n----------------------------------------\n\nTITLE: Circular Profile Avatars\nDESCRIPTION: Examples of profile components with circular avatars, with and without names.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:profile circle :chevron=\"false\" avatar=\"https://unavatar.io/x/calebporzio\" />\n\n<flux:profile circle name=\"Caleb Porzio\" avatar=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Auto-colored Avatars in FluxUI\nDESCRIPTION: Demonstrates how to use auto-generated colors for avatars based on names or custom seeds.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar name=\"Caleb Porzio\" color=\"auto\" />\n\n<!-- Use color:seed to generate a consistent color based -->\n<!-- on something unchanging like a user's ID... -->\n<flux:avatar name=\"Caleb Porzio\" color=\"auto\" color:seed=\"{{ $user->id }}\" />\n```\n\n----------------------------------------\n\nTITLE: Input with Keyboard Hint in FluxUI\nDESCRIPTION: Shows how to add a keyboard shortcut hint to an input field in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<flux:input kbd=\"⌘K\" icon=\"magnifying-glass\" placeholder=\"Search...\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Small Size Select Component in FluxUI\nDESCRIPTION: A smaller variant of the select component designed for more compact layouts. The size=\"sm\" property reduces the overall dimensions of the component while maintaining functionality.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n <flux:select size=\"sm\" placeholder=\"Choose industry...\">\n    <flux:select.option>Photography</flux:select.option>\n    <flux:select.option>Design services</flux:select.option>\n    <flux:select.option>Web development</flux:select.option>\n    <flux:select.option>Accounting</flux:select.option>\n    <flux:select.option>Legal services</flux:select.option>\n    <flux:select.option>Consulting</flux:select.option>\n    <flux:select.option>Other</flux:select.option>\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: FluxUI Select Button Component Properties\nDESCRIPTION: Details the properties available for the flux:select.button component, which provides button-style trigger functionality for the select component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nplaceholder  |  Text displayed when no option is selected.  \ninvalid  |  Applies error styling to the button.  \nsize  |  Size of the button. Options: sm, xs.  \ndisabled  |  Prevents selecting the option.  \nclearable  |  Displays a clear button when an option is selected.\n```\n\n----------------------------------------\n\nTITLE: Profile Component with Name and Avatar\nDESCRIPTION: Profile component displaying both user name and avatar image.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:profile name=\"Caleb Porzio\" avatar=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumbs Implementation in FluxUI\nDESCRIPTION: Basic implementation of a breadcrumb navigation component with three levels: Home, Blog, and Post. The first two items are clickable links, while the last one is the current page.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/breadcrumbs.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:breadcrumbs>\n    <flux:breadcrumbs.item href=\"#\">Home</flux:breadcrumbs.item>\n    <flux:breadcrumbs.item href=\"#\">Blog</flux:breadcrumbs.item>\n    <flux:breadcrumbs.item>Post</flux:breadcrumbs.item>\n</flux:breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to Callout in FluxUI\nDESCRIPTION: Shows how to add action buttons to a callout to provide users with clear next steps. Uses the actions slot to include primary and ghost button variants.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout icon=\"clock\">\n    <flux:callout.heading>Subscription expiring soon</flux:callout.heading>\n    <flux:callout.text>Your current plan will expire in 3 days. Renew now to avoid service interruption and continue accessing premium features.</flux:callout.text>\n\n    <x-slot name=\"actions\">\n        <flux:button>Renew now</flux:button>\n        <flux:button variant=\"ghost\" href=\"/pricing\">View plans</flux:button>\n    </x-slot>\n</flux:callout> \n```\n\n----------------------------------------\n\nTITLE: Attached Buttons in FluxUI\nDESCRIPTION: Demonstrates how to append or prepend icon buttons to another button to create composite functionality.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:button.group>\n    <flux:button>New product</flux:button>\n    <flux:button icon=\"chevron-down\"></flux:button>\n</flux:button.group>\n```\n\n----------------------------------------\n\nTITLE: Adding and Styling Grid Lines in Flux UI Charts\nDESCRIPTION: Demonstrates how to add and customize horizontal and vertical grid lines in charts using the flux:chart.axis.grid component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.svg>\n    <!-- ... -->\n\n    <flux:chart.axis axis=\"x\">\n        <!-- Vertical grid lines: -->\n        <flux:chart.axis.grid />\n    </flux:chart.axis>\n\n    <flux:chart.axis axis=\"y\">\n        <!-- Horizontal grid lines: -->\n        <flux:chart.axis.grid />\n    </flux:chart.axis>\n</flux:chart.svg>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- A dashed grid line that is 2px wide and has a gray color: -->\n<flux:chart.axis.grid class=\"text-zinc-200/50\" stroke-width=\"2\" stroke-dasharray=\"4,4\" />\n```\n\n----------------------------------------\n\nTITLE: Avatar as Button in FluxUI\nDESCRIPTION: Demonstrates how to make an avatar act as a button using the as prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar as=\"button\" src=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Attempting Button Background Customization with Tailwind Classes\nDESCRIPTION: An example showing how background color customization can lead to conflicts when Flux applies its own styling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:button class=\"bg-zinc-800 hover:bg-zinc-700\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Pagination for Large Datasets in Flux UI\nDESCRIPTION: Shows how to use the simple paginator with the Flux Pagination component. This is useful for large datasets where counting the total number of results would be expensive, providing only 'Previous' and 'Next' buttons.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- $orders = Order::simplePaginate() -->\n<flux:pagination :paginator=\"$orders\" />\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Shorthand with FluxUI Button Component\nDESCRIPTION: A shorthand method of adding a tooltip directly to a button component using the tooltip prop, which simplifies implementation for simple tooltip cases.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:button tooltip=\"Settings\" ... />\n```\n\n----------------------------------------\n\nTITLE: Segmented Tabs Implementation\nDESCRIPTION: Implementation of segmented tabs with button-like appearance for toggling between views.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:tabs variant=\"segmented\">\n    <flux:tab>List</flux:tab>\n    <flux:tab>Board</flux:tab>\n    <flux:tab>Timeline</flux:tab>\n</flux:tabs>\n```\n\n----------------------------------------\n\nTITLE: Using Different Link Variants in FluxUI\nDESCRIPTION: Demonstrates the various styling options for links in FluxUI including default, ghost, and subtle variants. These variants allow for different visual emphasis based on context.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/text.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:link href=\"#\">Default link</flux:link>\n<flux:link href=\"#\" variant=\"ghost\">Ghost link</flux:link>\n<flux:link href=\"#\" variant=\"subtle\">Subtle link</flux:link>\n```\n\n----------------------------------------\n\nTITLE: Small Segmented Radio Buttons in FluxUI\nDESCRIPTION: Smaller segmented radio buttons using the size=\"sm\" prop for more compact layouts. Maintains the segmented style but with reduced dimensions.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group wire:model=\"role\" label=\"Role\" variant=\"segmented\" size=\"sm\">\n    <flux:radio label=\"Admin\" />\n    <flux:radio label=\"Editor\" />\n    <flux:radio label=\"Viewer\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Date Value in Flux Date Picker\nDESCRIPTION: Sets the initial selected date using the value prop with a Y-m-d formatted date string.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker value=\"2025-04-22\" />\n```\n\n----------------------------------------\n\nTITLE: Removing Legacy Accent Color Configuration\nDESCRIPTION: Instructions for removing the deprecated accent color configuration from the Tailwind config file after migrating to the new format.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    ...\n\n    theme: {\n        extend: {\n            colors: {\n                ...\n\n--             accent: {\n--                  DEFAULT: 'var(--color-accent)',\n--                  content: 'var(--color-accent-content)',\n--                  foreground: 'var(--color-accent-foreground)',\n--              },\n            },\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Syntax for Accordion Items in Flux UI\nDESCRIPTION: Shows how to use the shorthand syntax for Accordion items by passing the heading text as a prop directly, reducing markup.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/accordion.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion.item heading=\"What's your refund policy?\">\n    If you are not satisfied with your purchase, we offer a 30-day money-back guarantee. Please contact our support team for assistance.\n</flux:accordion.item>\n```\n\n----------------------------------------\n\nTITLE: Avatar as Link in FluxUI\nDESCRIPTION: Shows how to make an avatar act as a link using the href prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar href=\"https://x.com/calebporzio\" src=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Input Group with Label in Form Field in FluxUI\nDESCRIPTION: Shows how to use an input group within a form field with a label in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label>Website</flux:label>\n\n    <flux:input.group>\n        <flux:input.group.prefix>https://</flux:input.group.prefix>\n\n        <flux:input wire:model=\"website\" placeholder=\"example.com\" />\n    </flux:input.group>\n\n    <flux:error name=\"website\" />\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: Radio Cards Without Indicators in FluxUI\nDESCRIPTION: Card-based radio buttons without the circular indicators for a cleaner look. Uses the :indicator=\"false\" prop to hide the standard radio button. This variant is only available in the Pro version.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:radio.group label=\"Shipping\" variant=\"cards\" :indicator=\"false\" class=\"max-sm:flex-col\">\n    <flux:radio value=\"standard\" icon=\"truck\" label=\"Standard\" description=\"4-10 business days\" />\n    <flux:radio value=\"fast\" icon=\"cube\" label=\"Fast\" description=\"2-5 business days\" />\n    <flux:radio value=\"next-day\" icon=\"clock\" label=\"Next day\" description=\"1 business day\" />\n</flux:radio.group>\n```\n\n----------------------------------------\n\nTITLE: Readonly Input in FluxUI\nDESCRIPTION: Shows how to create a readonly input field with a filled variant in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:input readonly variant=\"filled\" />\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Flux Button Component\nDESCRIPTION: Shows the resulting HTML output after Flux processes the button component, illustrating how props and attributes are handled.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"bg-zinc-900 ...\" x-on:change.prevent=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Grouping Menu Items with Separators in Flux UI Dropdowns\nDESCRIPTION: This snippet shows how to visually group related menu items by using separators (flux:menu.separator) to create logical sections within a dropdown menu.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dropdown.md#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:dropdown>\n    <flux:button icon:trailing=\"chevron-down\">Options</flux:button>\n\n    <flux:menu>\n        <flux:menu.item>View</flux:menu.item>\n        <flux:menu.item>Transfer</flux:menu.item>\n\n        <flux:menu.separator />\n\n        <flux:menu.item>Publish</flux:menu.item>\n        <flux:menu.item>Share</flux:menu.item>\n\n        <flux:menu.separator />\n\n        <flux:menu.item variant=\"danger\">Delete</flux:menu.item>\n    </flux:menu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Avatar with Icon in FluxUI\nDESCRIPTION: Demonstrates how to use icons instead of images in avatars.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar icon=\"user\" />\n<flux:avatar icon=\"phone\" />\n<flux:avatar icon=\"computer-desktop\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Leading Icon for Accordion in Flux UI\nDESCRIPTION: Demonstrates how to display the icon before the heading instead of after it using the 'variant' prop set to 'reverse'.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/accordion.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion variant=\"reverse\">\n    <!-- ... -->\n</flux:accordion>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates in HTML\nDESCRIPTION: Shows how to disable specific dates from being selected, useful for blocking out holidays or unavailable time slots.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar unavailable=\"2025-04-21,2025-04-23\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Tick Suffix in Flux Charts\nDESCRIPTION: This snippet demonstrates how to set a suffix for tick labels by using the tick-suffix attribute on a chart axis component. The example shows adding 'MB' as a suffix to Y-axis values.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.axis axis=\"y\" tick-suffix=\"MB\">\n    <!-- ... -->\n</flux:chart.axis>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component in Flux UI\nDESCRIPTION: Demonstrates a simple button component, which can be used as a building block for more complex components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:button>Options</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Small Card for Blog Updates with Flux Card Component in HTML\nDESCRIPTION: This snippet shows how to implement a small card variant using the Flux Card component. It's designed for compact content like blog updates, featuring a title, description, and an icon.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/card.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\" aria-label=\"Latest on our blog\">\n    <flux:card size=\"sm\" class=\"hover:bg-zinc-50 dark:hover:bg-zinc-700\">\n        <flux:heading class=\"flex items-center gap-2\">Latest on our blog <flux:icon name=\"arrow-up-right\" class=\"ml-auto text-zinc-400\" variant=\"micro\" /></flux:heading>\n        <flux:text class=\"mt-2\">Stay up to date with our latest insights, tutorials, and product updates.</flux:text>\n    </flux:card>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Basic Profile Component with Avatar\nDESCRIPTION: Simple implementation of the profile component with just an avatar image.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/profile.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:profile avatar=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Callout with Icon Inside Heading in FluxUI\nDESCRIPTION: Demonstrates how to place an icon inside the heading for a more compact layout. The icon prop is added to flux:callout.heading instead of the root component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout>\n    <flux:callout.heading icon=\"newspaper\">Policy update</flux:callout.heading>\n\n    <flux:callout.text>We've updated our Terms of Service and Privacy Policy. Please review them to stay informed.</flux:callout.text>\n</flux:callout>\n```\n\n----------------------------------------\n\nTITLE: Composable Dropdown Menu in Flux UI\nDESCRIPTION: Demonstrates how Flux UI achieves brevity and composability in a dropdown menu component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:dropdown>\n    <flux:button>Options</flux:button>\n\n    <flux:menu>\n        <!-- ... -->\n    </flux:menu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Merged Classes\nDESCRIPTION: Shows the resulting HTML output after class merging, combining user-defined and Flux-applied classes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"w-full border border-zinc-200 ...\">\n```\n\n----------------------------------------\n\nTITLE: Documenting flux:radio Component Slots in Markdown\nDESCRIPTION: A markdown table describing the available slot for the flux:radio component. It specifies the default slot for custom content in the card variant.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nSlot |  Description  \n---|---  \ndefault  |  Custom content for card variant.  \n```\n\n----------------------------------------\n\nTITLE: Testimonial Example with Avatar in FluxUI\nDESCRIPTION: Demonstrates a complex example of using an avatar in a testimonial layout with additional components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <div class=\"flex items-center gap-2\">\n        <flux:icon.star variant=\"solid\" />\n        <flux:icon.star variant=\"solid\" />\n        <flux:icon.star variant=\"solid\" />\n        <flux:icon.star variant=\"solid\" />\n        <flux:icon.star variant=\"solid\" />\n    </div>\n\n    <flux:heading size=\"xl\" class=\"mt-4 italic\">\n        <p>IMO Livewire takes Blade to the next level. It's basically what Blade should be by default. ð¥</p>\n    </flux:heading>\n\n    <div class=\"mt-6 flex items-center gap-4\">\n        <flux:avatar size=\"lg\" src=\"https://unavatar.io/x/taylorotwell\" />\n\n        <div>\n            <flux:heading size=\"lg\">Taylor Otwell</flux:heading>\n            <flux:text>Creator of Laravel</flux:text>\n        </div>\n    </div>\n</div> \n```\n\n----------------------------------------\n\nTITLE: Invalid Input State in FluxUI\nDESCRIPTION: Demonstrates how to indicate an invalid input state in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:input invalid />\n```\n\n----------------------------------------\n\nTITLE: Disabling Loading Behavior in FluxUI Buttons\nDESCRIPTION: Demonstrates how to disable the automatic loading state behavior of FluxUI buttons using the :loading attribute.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:button wire:click=\"save\" :loading=\"false\">\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Colors with Tailwind in Flux UI\nDESCRIPTION: Shows how to customize icon colors using Tailwind's text color utilities, including dark mode support.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:icon.bolt variant=\"solid\" class=\"text-amber-500 dark:text-amber-300\" />\n```\n\n----------------------------------------\n\nTITLE: Height-Limited Vertical Separator in Flux UI\nDESCRIPTION: Vertical separator with limited height achieved by adding vertical margin using the my-2 class.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/separator.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:separator vertical class=\"my-2\" />\n```\n\n----------------------------------------\n\nTITLE: Brevity in Flux UI Input Component\nDESCRIPTION: Illustrates the brevity principle in Flux UI by using a simple, single-word component name.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:input>\n```\n\n----------------------------------------\n\nTITLE: Avatar with Tooltip in FluxUI\nDESCRIPTION: Shows how to add a tooltip to an avatar, either explicitly or inferred from the name prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar tooltip=\"Caleb Porzio\" src=\"https://unavatar.io/x/calebporzio\" />\n\n<!-- Or infer from the name prop... -->\n<flux:avatar tooltip name=\"Caleb Porzio\" src=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Start Day of Week in HTML\nDESCRIPTION: Demonstrates how to override the default first day of the week in the Calendar component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar start-day=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Today Shortcut in HTML\nDESCRIPTION: Demonstrates how to add a shortcut button to quickly navigate to today's date.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar with-today />\n```\n\n----------------------------------------\n\nTITLE: Setting a Fallback Value for Chart Summary\nDESCRIPTION: This snippet demonstrates how to set a fallback value for a chart summary using the fallback attribute. This value will be displayed when no data point is being hovered over.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.summary.value field=\"visitors\" fallback=\"1200\" />\n```\n\n----------------------------------------\n\nTITLE: Resolving Style Conflicts with Tailwind's Important Modifier\nDESCRIPTION: Using Tailwind's important (!) modifier to ensure user-defined styles take precedence over Flux's default styles.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:button class=\"bg-zinc-800! hover:bg-zinc-700!\">\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Filtering with All Time Range\nDESCRIPTION: Example of conditional query filtering based on date range selection\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$orders = Order::when($this->range->isNotAllTime(), function ($query) => {  \n    $query->whereBetween('created_at', $this->range);\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismissible Callouts in FluxUI with Alpine.js\nDESCRIPTION: Shows how to create dismissible callouts using the controls slot with Alpine.js for interactivity. Includes two examples with different transition effects.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout icon=\"bell\" variant=\"secondary\" inline x-data=\"{ visible: true }\" x-show=\"visible\">\n    <flux:callout.heading class=\"flex gap-2 @max-md:flex-col items-start\">Upcoming meeting <flux:text>10:00 AM</flux:text></flux:callout.heading>\n\n    <x-slot name=\"controls\">\n        <flux:button icon=\"x-mark\" variant=\"ghost\" x-on:click=\"visible = false\" />\n    </x-slot>\n</flux:callout>\n\n<!-- Wrapping divs to add smooth exist transition... -->\n<div x-data=\"{ visible: true }\" x-show=\"visible\" x-collapse>\n    <div x-show=\"visible\" x-transition>\n        <flux:callout icon=\"finger-print\" variant=\"secondary\">\n            <flux:callout.heading>Unusual login attempt</flux:callout.heading>\n            <flux:callout.text>We detected a login from a new device in <span class=\"font-medium text-zinc-800 dark:text-white\">New York, USA</span>. If this was you, no action is needed. If not, secure your account immediately.</flux:callout.text>\n\n            <x-slot name=\"actions\">\n                <flux:button>Change password</flux:button>\n                <flux:button variant=\"ghost\">Review activity</flux:button>\n            </x-slot>\n\n            <x-slot name=\"controls\">\n                <flux:button icon=\"x-mark\" variant=\"ghost\" x-on:click=\"visible = false\" />\n            </x-slot>\n        </flux:callout>\n    </div>\n</div>                               \n```\n\n----------------------------------------\n\nTITLE: Setting Default Collapsed State for Navigation Groups\nDESCRIPTION: Controls the default expanded/collapsed state of a collapsible navigation group. Sets a group to be collapsed initially by setting the expanded prop to false.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/navbar.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:navlist.group heading=\"Account\" expandable :expanded=\"false\">\n```\n\n----------------------------------------\n\nTITLE: Basic Date Picker Implementation in Flux UI\nDESCRIPTION: The simplest implementation of the date picker component with no additional configuration.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:date-picker />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Sparkline Chart in Flux UI\nDESCRIPTION: Demonstrates how to create a compact, single-line chart using Flux UI components. The chart is styled with a green line and has no padding.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart :value=\"[15, 18, 16, 19, 22, 25, 28, 25, 29, 28, 32, 35]\" class=\"w-[5rem] aspect-[3/1]\">\n    <flux:chart.svg gutter=\"0\">\n        <flux:chart.line class=\"text-green-500 dark:text-green-400\" />\n    </flux:chart.svg>\n</flux:chart>\n```\n\n----------------------------------------\n\nTITLE: Colored Avatars in FluxUI\nDESCRIPTION: Shows how to apply different colors to avatars using the color prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar name=\"Caleb Porzio\" color=\"red\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"orange\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"amber\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"yellow\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"lime\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"green\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"emerald\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"teal\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"cyan\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"sky\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"blue\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"indigo\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"violet\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"purple\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"fuchsia\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"pink\" />\n<flux:avatar name=\"Caleb Porzio\" color=\"rose\" />\n```\n\n----------------------------------------\n\nTITLE: flux:editor.button Component Structure\nDESCRIPTION: Button component for toolbar actions with support for icons, tooltips, and custom content.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_9\n\nLANGUAGE: markup\nCODE:\n```\n<flux:editor.button\n  icon=\"bold\"\n  iconVariant=\"micro\"\n  tooltip=\"Bold text\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Card Content for Checkboxes in Flux UI (Pro Feature)\nDESCRIPTION: Implementation of checkboxes with completely custom card content using component slots. This Pro feature allows for advanced customization of checkbox cards with custom layouts and styling.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group label=\"Subscription preferences\" variant=\"cards\" class=\"flex-col\">\n    <flux:checkbox checked value=\"newsletter\">\n        <flux:checkbox.indicator />\n\n        <div class=\"flex-1\">\n            <flux:heading class=\"leading-4\">Newsletter</flux:heading>\n            <flux:text size=\"sm\" class=\"mt-2\">Get the latest updates and offers.</flux:text>\n        </div>\n    </flux:checkbox>\n\n    <flux:checkbox value=\"updates\">\n        <flux:checkbox.indicator />\n\n        <div class=\"flex-1\">\n            <flux:heading class=\"leading-4\">Product updates</flux:heading>\n            <flux:text size=\"sm\" class=\"mt-2\">Learn about new features and products.</flux:text>\n        </div>\n    </flux:checkbox>\n\n    <flux:checkbox value=\"invitations\">\n        <flux:checkbox.indicator />\n\n        <div class=\"flex-1\">\n            <flux:heading class=\"leading-4\">Event invitations</flux:heading>\n            <flux:text size=\"sm\" class=\"mt-2\">Invitatations to exclusive events.</flux:text>\n        </div>\n    </flux:checkbox>\n</flux:checkbox.group>     \n```\n\n----------------------------------------\n\nTITLE: Input Rendered as Button in FluxUI\nDESCRIPTION: Demonstrates how to render an input as a button element in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<flux:input as=\"button\" placeholder=\"Search...\" icon=\"magnifying-glass\" kbd=\"⌘K\" />\n```\n\n----------------------------------------\n\nTITLE: flux:editor.content Component Structure\nDESCRIPTION: Container for editable content with support for initial HTML content.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_10\n\nLANGUAGE: markup\nCODE:\n```\n<flux:editor.content>\n  <p>Initial content</p>\n</flux:editor.content>\n```\n\n----------------------------------------\n\nTITLE: Using Inset Badges in FluxUI\nDESCRIPTION: Demonstrates how to use the inset prop to add negative margins to badges when used alongside inline text.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading>\n    Page builder <flux:badge color=\"lime\" inset=\"top bottom\">New</flux:badge>\n</flux:heading>\n\n<flux:text class=\"mt-2\">Easily author new pages without leaving your browser.</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Toast Trigger Implementation\nDESCRIPTION: Shows how to trigger Toast notifications using Alpine.js\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/toast.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button x-on:click=\"$flux.toast('Your changes have been saved.')\">\\n    Save changes\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Cards in Flux UI (Pro Feature)\nDESCRIPTION: Implementation of checkbox cards, a bordered alternative to standard checkboxes. This is a Pro feature that provides a more visually distinctive option selection interface.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox.group wire:model=\"subscription\" label=\"Subscription preferences\" variant=\"cards\" class=\"max-sm:flex-col\">\n    <flux:checkbox checked\n        value=\"newsletter\"\n        label=\"Newsletter\"\n        description=\"Get the latest updates and offers.\"\n    />\n    <flux:checkbox\n        value=\"updates\"\n        label=\"Product updates\"\n        description=\"Learn about new features and products.\"\n    />\n    <flux:checkbox\n        value=\"invitations\"\n        label=\"Event invitations\"\n        description=\"Invitatations to exclusive events.\"\n    />\n</flux:checkbox.group>     \n```\n\n----------------------------------------\n\nTITLE: Using the Loading Spinner Icon in Flux UI\nDESCRIPTION: Demonstrates how to use the special loading spinner icon that is unique to Flux UI and not part of the Heroicons collection.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:icon.loading />\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Cancel Events\nDESCRIPTION: Example of registering a cancel event listener on a modal to perform logic after it's cancelled. Shows the syntax for the @cancel directive.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/modal.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n <flux:modal @cancel=\"someLivewireAction\">\n    <!-- ... -->\n</flux:modal>\n```\n\n----------------------------------------\n\nTITLE: FluxUI Checkbox Group Props Table\nDESCRIPTION: Markdown table documenting the available props for the flux:checkbox.group component, including wire:model binding, label configuration, styling variants, and state controls.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nwire:model  |  Binds the checkbox group to a Livewire property. The value will be an array of the selected checkboxes' values. See the [wire:model documentation](https://livewire.laravel.com/docs/wire-model) for more information.  \nlabel  |  Label text displayed above the checkbox group. When provided, wraps the group in a flux:field component with an adjacent flux:label component.  \ndescription  |  Help text displayed below the group label. When provided alongside label, appears between the label and the checkboxes.  \nvariant  |  Visual style of the group. Options: default, cards (Pro).  \ndisabled  |  Prevents user interaction with all checkboxes in the group.  \ninvalid  |  Applies error styling to all checkboxes in the group.  \n```\n\n----------------------------------------\n\nTITLE: Padded Edge Tabs\nDESCRIPTION: Example of adding horizontal padding to tabs using Tailwind utility classes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/tabs.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:tabs class=\"px-4\">\n    <flux:tab name=\"profile\">Profile</flux:tab>\n    <flux:tab name=\"account\">Account</flux:tab>\n    <flux:tab name=\"billing\">Billing</flux:tab>\n</flux:tabs>\n```\n\n----------------------------------------\n\nTITLE: Fixed Row Height Textarea in FluxUI\nDESCRIPTION: Demonstrates how to set a fixed height for the Textarea by specifying the number of rows. This example sets the textarea to 2 rows high.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/textarea.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:textarea rows=\"2\" label=\"Note\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Editor Height with Tailwind in HTML\nDESCRIPTION: Demonstrates how to customize the editor's minimum height using Tailwind utilities.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:editor class=\"**:data-[slot=content]:min-h-[100px]\" />\n```\n\n----------------------------------------\n\nTITLE: Checked Checkbox in Flux UI\nDESCRIPTION: Example of a checkbox marked as checked by default using the checked attribute. This is useful when a checkbox should be pre-selected for the user.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<flux:checkbox checked />\n```\n\n----------------------------------------\n\nTITLE: Enabling Transitions for Accordion in Flux UI\nDESCRIPTION: Demonstrates how to enable expanding transitions for smoother interactions in the Accordion component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/accordion.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion transition>\n    <!-- ... -->\n</flux:accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Left-Aligned Switches in FluxUI HTML\nDESCRIPTION: Demonstrates how to create a more compact layout by left-aligning switches using the align prop. This example shows multiple switches for email notification preferences.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/switch.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:fieldset>\n    <flux:legend>Email notifications</flux:legend>\n\n    <div class=\"space-y-3\">\n        <flux:switch label=\"Communication emails\" align=\"left\" />\n\n        <flux:switch label=\"Marketing emails\" align=\"left\" />\n\n        <flux:switch label=\"Social emails\" align=\"left\" />\n\n        <flux:switch label=\"Security emails\" align=\"left\" />\n    </div>\n</flux:fieldset>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Flux UI Heading and Text Components in HTML\nDESCRIPTION: Demonstrates how to use the flux:heading and flux:text components to create a user profile section with a heading and descriptive text.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/heading.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading>User profile</flux:heading>\n<flux:text class=\"mt-2\">This information will be displayed publicly.</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Square Button in FluxUI\nDESCRIPTION: Shows how to create a button with equal height and width using the square property.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/button.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<flux:button square>...</flux:button>\n```\n\n----------------------------------------\n\nTITLE: Creating DateRange Object for All Time Range\nDESCRIPTION: Usage of DateRange class to create an all-time date range starting from user creation date\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Flux\\DateRange;\n\n$this->range = DateRange::allTime(start: auth()->user()->created_at);\n```\n\n----------------------------------------\n\nTITLE: Documenting flux:radio Component Properties in Markdown\nDESCRIPTION: A markdown table listing and describing the props available for the flux:radio component in FluxUI. It includes props for label, description, value, checked state, disabled state, and icon.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nProp |  Description  \n---|---  \nlabel  |  Label text displayed above the radio button. When provided, wraps the radio button in a flux:field component with an adjacent flux:label component. See the [field component](https://fluxui.dev/components/field).  \ndescription  |  Help text displayed below the radio button. When provided alongside label, appears between the label and radio button within the flux:field wrapper. See the [field component](https://fluxui.dev/components/field).  \nvalue  |  Value associated with the radio button when used in a group.  \nchecked  |  If true, the radio button is selected by default.  \ndisabled  |  Prevents user interaction with the radio button.  \nicon  |  Name of the icon to display (for segmented variant).  \n```\n\n----------------------------------------\n\nTITLE: DateRange Method Examples in PHP\nDESCRIPTION: Static and instance methods available on the DateRange object for handling date ranges in the flux:date-picker component when using range mode.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$range->start();\n$range->end();\n$range->days();\n$range->preset();\n$range->toArray();\n\nDateRange::today();\nDateRange::yesterday();\nDateRange::thisWeek();\nDateRange::lastWeek();\nDateRange::last7Days();\nDateRange::last30Days();\nDateRange::thisMonth();\nDateRange::lastMonth();\nDateRange::thisQuarter();\nDateRange::lastQuarter();\nDateRange::thisYear();\nDateRange::lastYear();\nDateRange::yearToDate();\nDateRange::allTime();\n```\n\n----------------------------------------\n\nTITLE: Vertical Separator in Flux UI\nDESCRIPTION: A vertical separator implementation used to separate content when items are horizontally stacked.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/separator.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:separator vertical />\n```\n\n----------------------------------------\n\nTITLE: Disabling Accent Colors in Flux UI Components\nDESCRIPTION: This HTML snippet demonstrates how to disable accent colors in various Flux UI components using the :accent=\"false\" prop. It shows examples for links, tabs, navbar, and navlist components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/theming.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Link -->\n<flux:link :accent=\"false\">Profile</flux:tab>\n\n<!-- Tabs -->\n<flux:tabs>\n    <flux:tab :accent=\"false\">Profile</flux:tab>\n    <flux:tab :accent=\"false\">Account</flux:tab>\n    <flux:tab :accent=\"false\">Billing</flux:tab>\n</flux:tabs>\n\n<!-- Navbar -->\n<flux:navbar>\n    <flux:navbar.item :accent=\"false\">Profile</flux:navbar.item>\n    <flux:navbar.item :accent=\"false\">Account</flux:navbar.item>\n    <flux:navbar.item :accent=\"false\">Billing</flux:navbar.item>\n</flux:navbar>\n\n<!-- Navlist -->\n<flux:navlist>\n    <flux:navlist.item :accent=\"false\">Profile</flux:navlist.item>\n    <flux:navlist.item :accent=\"false\">Account</flux:navlist.item>\n    <flux:navlist.item :accent=\"false\">Billing</flux:navlist.item>\n</flux:navlist>\n```\n\n----------------------------------------\n\nTITLE: Using Imported Lucide Icons in Flux UI\nDESCRIPTION: Examples of using Lucide icons that have been imported into your Flux UI project.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/icon.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:icon.crown />\n<flux:icon.grip-vertical />\n<flux:icon.github />\n```\n\n----------------------------------------\n\nTITLE: Editor Localization in JSON\nDESCRIPTION: Example of localizing editor labels and tooltips to Spanish using a JSON translation file.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Rich text editor\": \"Editor de texto enriquecido\",\n    \"Formatting\": \"Formato\",\n    \"Text\": \"Texto\",\n    \"Heading 1\": \"Encabezado 1\",\n    \"Heading 2\": \"Encabezado 2\",\n    \"Heading 3\": \"Encabezado 3\",\n    \"Styles\": \"Estilos\",\n    \"Bold\": \"Negrita\",\n    \"Italic\": \"Cursiva\",\n    \"Underline\": \"Subrayado\",\n    \"Strikethrough\": \"Tachado\",\n    \"Subscript\": \"Subíndice\",\n    \"Superscript\": \"Superíndice\",\n    \"Highlight\": \"Resaltar\",\n    \"Code\": \"Código\",\n    \"Bullet list\": \"Lista con viñetas\",\n    \"Ordered list\": \"Lista numerada\",\n    \"Blockquote\": \"Cita\",\n    \"Insert link\": \"Insertar enlace\",\n    \"Unlink\": \"Quitar enlace\",\n    \"Align\": \"Alinear\",\n    \"Left\": \"Izquierda\",\n    \"Center\": \"Centro\",\n    \"Right\": \"Derecha\",\n    \"Undo\": \"Deshacer\",\n    \"Redo\": \"Rehacer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Date Picker with Input Trigger\nDESCRIPTION: Attaches the date picker to a date input for more precise date selection control. This provides a text input field that triggers the date picker when focused.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/date-picker.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n <flux:date-picker wire:model=\"date\">\n    <x-slot name=\"trigger\">\n        <flux:date-picker.input />\n    </x-slot>\n</flux:date-picker>       \n```\n\n----------------------------------------\n\nTITLE: Adjusting Calendar Size in HTML\nDESCRIPTION: Shows how to adjust the size of the Calendar component to fit different layouts.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar size=\"xl\" />\n```\n\n----------------------------------------\n\nTITLE: Circular Avatars in FluxUI\nDESCRIPTION: Shows how to create circular avatars using the circle prop.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/avatar.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:avatar circle src=\"https://unavatar.io/x/calebporzio\" />\n```\n\n----------------------------------------\n\nTITLE: Using DateRange Methods\nDESCRIPTION: Demonstrates various methods available on the DateRange object, including start, end, contains, length, and iteration.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$range = new Flux\\DateRange(\n    now()->subDays(1),\n    now()->addDays(1),\n);\n\n// Get the start and end dates as Carbon instances...\n$start = $range->start();\n$end = $range->end();\n\n// Check if the range contains a date...\n$range->contains(now());\n\n// Get the number of days in the range...\n$range->length();\n\n// Loop over the range by day...\nforeach ($range as $date) {\n    // $date is a Carbon instance...\n}\n\n// Get the range as an array of Carbon instances representing each day in the range...\n$range->toArray();\n```\n\n----------------------------------------\n\nTITLE: Non-Standard Component Structure Example in Flux UI\nDESCRIPTION: Example of the tabs component that doesn't follow the standard naming conventions, demonstrating an exception to the general pattern rules for better ergonomics.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<flux:tab.group>\n    <flux:tabs>\n        <flux:tab>\n    </flux:tabs>\n\n    <flux:tab.panel>\n</flux:tab.group>\n```\n\n----------------------------------------\n\nTITLE: Enabling Selectable Header in HTML\nDESCRIPTION: Shows how to enable quick navigation by making the month and year in the header selectable.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar selectable-header />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Badge in FluxUI\nDESCRIPTION: Demonstrates how to create a simple badge with the 'New' text and lime color.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:badge color=\"lime\">New</flux:badge>\n```\n\n----------------------------------------\n\nTITLE: Smaller Input Size in FluxUI\nDESCRIPTION: Shows how to create a smaller-sized input field using the size property in FluxUI.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/input.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:input size=\"sm\" placeholder=\"Filter by...\" />\n```\n\n----------------------------------------\n\nTITLE: Consistent Heading Usage in Flux UI Components\nDESCRIPTION: Shows examples of consistent terminology across different Flux UI components, demonstrating the consistency principle.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<flux:heading>...</flux:heading>\n\n<flux:menu.submenu heading=\"...\">\n\n<flux:accordion.heading>...</flux:accordion.heading>\n```\n\n----------------------------------------\n\nTITLE: Composing a Dropdown with Button in Flux UI\nDESCRIPTION: Shows how to compose a dropdown menu using a button component, demonstrating Flux UI's composability principle.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:dropdown>\n    <flux:button>Options</flux:button>\n\n    <flux:navmenu>\n        <!-- ... -->\n    </flux:navmenu>\n</flux:dropdown>\n```\n\n----------------------------------------\n\nTITLE: Clearing Blade View Cache\nDESCRIPTION: Artisan command to clear any cached or compiled Blade views after upgrading Flux, ensuring new changes take effect.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan view:clear\n```\n\n----------------------------------------\n\nTITLE: Setting Tick Prefix in Flux Charts\nDESCRIPTION: This snippet shows how to set a prefix for tick labels by using the tick-prefix attribute on a chart axis component. The example demonstrates adding a dollar sign prefix to Y-axis values.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<flux:chart.axis axis=\"y\" tick-prefix=\"$\">\n    <!-- ... -->\n</flux:chart.axis>\n```\n\n----------------------------------------\n\nTITLE: Adding Inter Font Family to Layout\nDESCRIPTION: HTML code to include the recommended Inter font family from Bunny Fonts CDN for use with Flux components.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    ...\n    <link rel=\"preconnect\" href=\"https://fonts.bunny.net\">\n    <link href=\"https://fonts.bunny.net/css?family=inter:400,500,600&display=swap\" rel=\"stylesheet\" />\n</head>    \n```\n\n----------------------------------------\n\nTITLE: Controlling Text Size with Tailwind Classes in FluxUI\nDESCRIPTION: Shows how to use Tailwind CSS classes to control text size in FluxUI text components. Different size options are demonstrated for responsive design.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/text.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:text class=\"text-base\">Base text size</flux:text>\n<flux:text>Default text size</flux:text>\n<flux:text class=\"text-xs\">Smaller text</flux:text>\n```\n\n----------------------------------------\n\nTITLE: Disabling Accordion Items in Flux UI\nDESCRIPTION: Shows how to disable an Accordion item to prevent it from being expanded or collapsed.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/accordion.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<flux:accordion.item disabled>\n    <!-- ... -->\n</flux:accordion.item>\n```\n\n----------------------------------------\n\nTITLE: Styling a Cursor in Flux Charts\nDESCRIPTION: This snippet demonstrates how to style a chart cursor using SVG line attributes. The example creates a dashed, black cursor with a 1px stroke width using classes and SVG attributes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/chart.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<!-- A dashed, black cursor that is 1px wide: -->\n<flux:chart.cursor class=\"text-zinc-800\" stroke-width=\"1\" stroke-dasharray=\"4,4\" />\n```\n\n----------------------------------------\n\nTITLE: flux:editor.toolbar Component Structure\nDESCRIPTION: Container component for editor toolbar items with support for custom layouts and item configuration.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/editor.md#2025-04-23_snippet_8\n\nLANGUAGE: markup\nCODE:\n```\n<flux:editor.toolbar items=\"heading bold italic | link ~ align\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Separator Implementation in Flux UI\nDESCRIPTION: The basic implementation of a separator component that visually divides sections of content or groups of items.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/separator.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<flux:separator />\n```\n\n----------------------------------------\n\nTITLE: Using Root Components in Flux UI\nDESCRIPTION: Example of Flux's field component that uses standalone component names for children instead of compound names. This pattern is used for larger or more primitive components to avoid verbose hierarchies.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/patterns.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<flux:field>\n    <flux:label></flux:label>\n    <flux:description></flux:description>\n    <flux:error></flux:error>\n</flux:field>\n```\n\n----------------------------------------\n\nTITLE: Multiple Date Selection in HTML\nDESCRIPTION: Illustrates how to enable and configure multiple date selection in the Calendar component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/calendar.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar multiple />\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar\n    multiple\n    value=\"2025-04-02,2025-04-05,2025-04-15\"\n/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<flux:calendar multiple wire:model=\"dates\" />\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Conflicting Classes\nDESCRIPTION: The resulting HTML output showing how conflicting classes are both rendered, causing styling issues.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"bg-zinc-800 hover:bg-zinc-700 bg-white hover:bg-zinc-100...\">\n```\n\n----------------------------------------\n\nTITLE: Published Component File Structure\nDESCRIPTION: The directory structure showing where published Flux components are stored in your project.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/customization.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nresources/  \n    views/    \n        flux/      \n            checkbox.blade.php      \n            ...\n```\n\n----------------------------------------\n\nTITLE: Reassigning Gray Color Palette in Flux v2\nDESCRIPTION: Example of reassigning Flux's default gray colors (zinc) to another color palette (neutral) using CSS variables in the app.css file.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* Re-assign Flux's gray of choice... */\n@theme {\n  --color-zinc-50: var(--color-neutral-50);\n  --color-zinc-100: var(--color-neutral-100);\n  --color-zinc-200: var(--color-neutral-200);\n  --color-zinc-300: var(--color-neutral-300);\n  --color-zinc-400: var(--color-neutral-400);\n  --color-zinc-500: var(--color-neutral-500);\n  --color-zinc-600: var(--color-neutral-600);\n  --color-zinc-700: var(--color-neutral-700);\n  --color-zinc-800: var(--color-neutral-800);\n  --color-zinc-900: var(--color-neutral-900);\n  --color-zinc-950: var(--color-neutral-950);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flux via Composer\nDESCRIPTION: Command to install the Flux UI component library using Composer from your project root.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require livewire/flux\n```\n\n----------------------------------------\n\nTITLE: Replacing fluxStyles with fluxAppearance Directive\nDESCRIPTION: Update to replace the deprecated @fluxStyles directive with the new @fluxAppearance directive in the application's head section for managing dark mode.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<head>\n    ...\n--    @fluxStyles\n++    @fluxAppearance\n</head>\n```\n\n----------------------------------------\n\nTITLE: Redefining Base Color in CSS for Flux UI\nDESCRIPTION: This CSS snippet shows how to redefine the default 'zinc' color to 'slate' in Flux UI. It overrides the default color variables to use a different shade of gray throughout the application.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/theming.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* resources/css/app.css */\n/* Re-assign Flux's gray of choice... */\n@theme { \n    --color-zinc-50: var(--color-slate-50); \n    --color-zinc-100: var(--color-slate-100); \n    --color-zinc-200: var(--color-slate-200); \n    --color-zinc-300: var(--color-slate-300); \n    --color-zinc-400: var(--color-slate-400); \n    --color-zinc-500: var(--color-slate-500); \n    --color-zinc-600: var(--color-slate-600); \n    --color-zinc-700: var(--color-slate-700); \n    --color-zinc-800: var(--color-slate-800); \n    --color-zinc-900: var(--color-slate-900); \n    --color-zinc-950: var(--color-slate-950);\n    }\n```\n\n----------------------------------------\n\nTITLE: Complex Input Field Implementation (Anti-Pattern)\nDESCRIPTION: Illustrates a complex, verbose implementation of an input field, contrasting with Flux UI's simplicity principle.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/principles.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<flux:form.field>\n    <flux:form.field.label>Email</flux:form.field.label>\n\n    <div>\n        <flux:form.field.text-input wire:model=\"email\" />\n    </div>\n\n    @error('email')\n        <p class=\"mt-2 text-red-500 dark:text-red-400 text-xs\">{{ $message }}</p>\n    @enderror\n</flux:form.field>\n```\n\n----------------------------------------\n\nTITLE: Using Different Callout Variants in FluxUI\nDESCRIPTION: Demonstrates the available predefined callout variants (secondary, success, warning, and danger) to convey specific tones or levels of urgency.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/callout.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<flux:callout variant=\"secondary\" icon=\"information-circle\" heading=\"Your account has been successfully created.\" />\n<flux:callout variant=\"success\" icon=\"check-circle\" heading=\"Your account is verified and ready to use.\" />\n<flux:callout variant=\"warning\" icon=\"exclamation-circle\" heading=\"Please verify your account to unlock all features.\" />\n<flux:callout variant=\"danger\" icon=\"x-circle\" heading=\"Something went wrong. Try again or contact support.\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Flux Dependencies with Composer\nDESCRIPTION: Command to upgrade Flux and Flux Pro dependencies to version 2.0 or later using Composer.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/upgrading.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require livewire/flux:^2.0 livewire/flux-pro:^2.0\n```\n\n----------------------------------------\n\nTITLE: Customizing Selected Suffix in Multiple Select with FluxUI\nDESCRIPTION: Modifies the text that appears after the count of selected options in a multiple select. This example shows how to change the default \" selected\" text to a custom suffix.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/select.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<flux:select variant=\"listbox\" selected-suffix=\"industries selected\" multiple>\n    ...\n</flux:select>\n```\n\n----------------------------------------\n\nTITLE: Disabling Flux's Automatic Dark Mode Handling\nDESCRIPTION: Shows how to remove the @fluxAppearance directive from the layout file to disable Flux's automatic dark mode handling, allowing manual control of application appearance.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/dark-mode.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    ...\n--    @fluxAppearance\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Sortable Columns in Flux UI Tables\nDESCRIPTION: This example shows how to implement sortable columns in a Flux UI table using the sortable, sorted, and direction properties on table columns.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/table.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<flux:table>\n    <flux:table.columns>\n        <flux:table.column>Customer</flux:table.column>\n        <flux:table.column sortable sorted direction=\"desc\">Date</flux:table.column>\n        <flux:table.column sortable>Amount</flux:table.column>\n    </flux:table.columns>\n\n    <!-- ... -->\n</flux:table>   \n\n```\n\n----------------------------------------\n\nTITLE: Documenting flux:radio Component Attributes in Markdown\nDESCRIPTION: A markdown table listing and describing the attributes applied to the flux:radio component for styling and identification purposes.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/radio.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nAttribute |  Description  \n---|---  \ndata-flux-radio  |  Applied to the root element for styling and identification.  \ndata-checked  |  Applied when the radio button is selected.  \n```\n\n----------------------------------------\n\nTITLE: Subtle Variant Separator in Flux UI\nDESCRIPTION: A subtle variant of the separator that visually blends into the background for a less prominent division.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/separator.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<flux:separator vertical variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: FluxUI Checkbox Group Slots Table\nDESCRIPTION: Markdown table showing the available slots for the flux:checkbox.group component.\nSOURCE: https://github.com/jupitorstudiodev/fluxuidocs/blob/main/checkbox.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nSlot |  Description  \n---|---  \ndefault  |  The checkboxes to be grouped together. Can include flux:checkbox, flux:checkbox.all, and other elements.  \n```"
  }
]