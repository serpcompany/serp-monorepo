[
  {
    "owner": "software-mansion-labs",
    "repo": "typegpu-confetti",
    "content": "TITLE: Using the useConfetti Hook in React Native (TSX)\nDESCRIPTION: This snippet demonstrates the recommended way to use the library. It shows how to import and use the `useConfetti` hook within a React Native component to get a ref, which can then be used to trigger confetti effects imperatively (e.g., `confettiRef?.current?.addParticles(50)` on a button press). This component must be a descendant of `ConfettiProvider`.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConfetti } from 'typegpu-confetti/react-native';\n\nfunction SomeInnerComponent() {\n  const confettiRef = useConfetti();\n\n  return (\n    <View>\n      <Button\n        title=\"run confetti\"\n        onPress={() => confettiRef?.current?.addParticles(50)}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useConfetti Hook in React Native - TypeScript/TSX\nDESCRIPTION: This TypeScript/TSX snippet demonstrates importing and using the useConfetti custom React hook from typegpu-confetti/react-native. It returns a ref object that can control the confetti animation. The hook is typically invoked in a functional component, and its ref is used to trigger methods like addParticles upon a UI event, such as pressing a button. The enclosing component should be wrapped in a ConfettiProvider higher in the tree.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConfetti } from 'typegpu-confetti/react-native';\n\nfunction SomeInnerComponent() {\n  const confettiRef = useConfetti();\n\n  return (\n    <View>\n      <Button\n        title=\"run confetti\"\n        onPress={() => confettiRef?.current?.addParticles(50)}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with ConfettiProvider - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to wrap a top-level component with ConfettiProvider from typegpu-confetti/react-native. This makes the confetti API accessible throughout the component tree and ensures confetti animation overlays the full UI as required. All direct children have access to the confetti context via hooks.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConfettiProvider } from 'typegpu-confetti/react-native';\n\nfunction SomeHighLevelContainerComponent() {\n  return (\n    <ConfettiProvider>\n      <App/>\n    </ConfettiProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ConfettiProvider in React Native (TSX)\nDESCRIPTION: This snippet illustrates how to wrap a high-level component (like the main `App`) with the `ConfettiProvider`. This setup is necessary for the `useConfetti` hook to function correctly within descendant components. The `ConfettiProvider` accepts the same props as the `Confetti` component for configuration.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConfettiProvider } from 'typegpu-confetti/react-native';\n\nfunction SomeHighLevelContainerComponent() {\n  return (\n    <ConfettiProvider>\n      <App/>\n    </ConfettiProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ConfettiPropTypes and Supporting Type Definitions - TypeScript\nDESCRIPTION: This TypeScript snippet defines the type signature for ConfettiPropTypes and its associated types GravityFn and InitParticleFn. These types describe props accepted by the Confetti and ConfettiProvider components, enabling users to customize aspects like color palette, gravity function, particle initialization, and other simulation parameters. Custom functions must be tagged with the kernel directive for GPU execution via the Babel plugin unplugin-typegpu.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype ConfettiPropTypes = {\n  colorPalette?: [number, number, number, number][];\n  size?: number;\n  maxDurationTime?: number | null;\n  initParticleAmount?: number;\n  maxParticleAmount?: number;\n  gravity?: GravityFn;\n  initParticle?: InitParticleFn;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype GravityFn = (args: {\n  pos: d.v2f;\n}) => d.v2f;\n\ntype InitParticleFn = (args: {\n  index: number;\n}) => void;\n```\n\n----------------------------------------\n\nTITLE: Imperative Ref Control of Confetti Component - TypeScript/TSX\nDESCRIPTION: This TSX snippet illustrates how to use a React ref with the Confetti component for imperative animation control. The ref is typed with ConfettiRef and can call methods such as addParticles to add more confetti in response to user actions (here, adding 200 more particles using a button). Additional component props such as initParticleAmount and maxParticleAmount allow for further customization.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ConfettiRef } from 'typegpu-confetti';\nimport { Confetti } from 'typegpu-confetti/react-native';\n\nfunction SomeComponent() {\n  const ref = useRef<ConfettiRef>(null);\n\n  return (\n    <View>\n      <Confetti initParticleAmount={200} maxParticleAmount={1000} ref={ref} />\n      <Button\n        title=\"add particles\"\n        onPress={() => ref.current?.addParticles(200)}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Confetti Component via Imperative Handle (TSX)\nDESCRIPTION: This snippet demonstrates how to gain imperative control over the `Confetti` component using `useRef`. A ref of type `ConfettiRef` is created and attached to the `Confetti` component, allowing methods like `addParticles` to be called in response to events (e.g., a button press).\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ConfettiRef } from 'typegpu-confetti';\nimport { Confetti } from 'typegpu-confetti/react-native';\n\nfunction SomeComponent() {\n  const ref = useRef<ConfettiRef>(null);\n\n  return (\n    <View>\n      <Confetti initParticleAmount={200} maxParticleAmount={1000} ref={ref} />\n      <Button\n        title=\"add particles\"\n        onPress={() => ref.current?.addParticles(200)}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Confetti Component PropTypes (TypeScript)\nDESCRIPTION: This snippet defines the `ConfettiPropTypes` TypeScript type, outlining the available props for customizing the `Confetti` component or `ConfettiProvider`. It includes types for color palettes, size multipliers, duration, particle counts, custom GPU functions (`GravityFn`, `InitParticleFn`), and style overrides. Note that changing props restarts the animation.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype ConfettiPropTypes = {\n  colorPalette?: [number, number, number, number][];\n  size?: number;\n  maxDurationTime?: number | null;\n  initParticleAmount?: number;\n  maxParticleAmount?: number;\n  gravity?: GravityFn;\n  initParticle?: InitParticleFn;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype GravityFn = (args: {\n  pos: d.v2f;\n}) => d.v2f;\n\ntype InitParticleFn = (args: {\n  index: number;\n}) => void;\n```\n\n----------------------------------------\n\nTITLE: Using Confetti Component in React Native - TypeScript/TSX\nDESCRIPTION: This TSX snippet shows how to import and use the Confetti component from typegpu-confetti/react-native. The initParticleAmount prop controls the initial number of confetti particles. The component is rendered inside a View and will automatically be absolutely positioned to cover its container.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Confetti } from 'typegpu-confetti/react-native';\n\nfunction SomeComponent() {\n  return (\n    <View>\n      <Confetti initParticleAmount={200} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Confetti Component Directly in React Native (TSX)\nDESCRIPTION: This snippet shows an alternative usage pattern where the `Confetti` component is rendered directly within a view. It's configured with an initial particle amount (`initParticleAmount`). The component positions itself absolutely to fill its nearest positioned container.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Confetti } from 'typegpu-confetti/react-native';\n\nfunction SomeComponent() {\n  return (\n    <View>\n      <Confetti initParticleAmount={200} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ConfettiRef Type Definition - TypeScript\nDESCRIPTION: This TypeScript type defines the ConfettiRef interface, outlining the shape of the ref object returned by the useConfetti hook. It exposes imperative methods to control the animation, such as pause, resume, restart, and addParticles, which accepts the number of new particles to emit. This can be used with refs in functional React components for direct interaction.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype ConfettiRef = {\n  pause: () => void;\n  resume: () => void;\n  restart: () => void;\n  addParticles: (amount: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the ConfettiRef Type (TypeScript)\nDESCRIPTION: This snippet defines the TypeScript type `ConfettiRef`. This type represents the object returned by the `useConfetti` hook or obtained via `useRef` on the `Confetti` component, exposing methods like `pause`, `resume`, `restart`, and `addParticles` for controlling the animation.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype ConfettiRef = {\n  pause: () => void;\n  resume: () => void;\n  restart: () => void;\n  addParticles: (amount: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: ParticleData Structure for GPU Particle Simulation - TypeScript\nDESCRIPTION: This TypeScript declaration shows how ParticleData is defined using d.struct with TypeGPU. It structures the per-particle data as position, velocity, seed, and timeLeft fields, enabling the GPU-based simulation to manage each particle's state efficiently. This structure is used by initParticle function implementations, with ParticleData elements residing in a TgpuArray.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst ParticleData = d.struct({\n  position: d.vec2f,\n  velocity: d.vec2f,\n  seed: d.f32,\n  timeLeft: d.f32,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ParticleData Structure for initParticle (TypeScript)\nDESCRIPTION: This snippet shows the TypeGPU structure definition (`ParticleData`) used within custom `initParticle` kernel functions. It defines the data associated with each particle (position, velocity, seed, timeLeft) that can be accessed and modified on the GPU during initialization. Access to the particle array (`particles`) and `maxDurationTime` is provided via tgpu accessors within the kernel function.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst ParticleData = d.struct({\n  position: d.vec2f,\n  velocity: d.vec2f,\n  seed: d.f32,\n  timeLeft: d.f32,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-wgpu via npm - Shell\nDESCRIPTION: This shell command installs the react-native-wgpu package, a required dependency for GPU-based rendering in React Native. Ensure you run this within your React Native project directory using npm. Note that expo projects need to perform expo prebuild as this package is unsupported by Expo Go.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-native-wgpu\n```\n\n----------------------------------------\n\nTITLE: Installing typegpu-confetti via npm - Shell\nDESCRIPTION: This shell command installs the typegpu-confetti package from npm, providing the core functionality for customizable confetti animations. Use this within your React Native project after installing react-native-wgpu.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install typegpu-confetti\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-wgpu Dependency (Shell)\nDESCRIPTION: This command installs the `react-native-wgpu` package using npm. This package provides the WebGPU capabilities necessary for `typegpu-confetti` and is a required dependency.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-native-wgpu\n```\n\n----------------------------------------\n\nTITLE: Installing typegpu-confetti Package (Shell)\nDESCRIPTION: This command installs the main `typegpu-confetti` library using npm after its dependencies have been set up.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install typegpu-confetti\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-typegpu Babel Plugin - Shell\nDESCRIPTION: This shell command installs the unplugin-typegpu package, which is a Babel plugin required to process JavaScript functions marked with the kernel directive for usage in typegpu-confetti. Install it to enable GPU-side function execution via TypeGPU.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install unplugin-typegpu\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-typegpu Babel Plugin (Shell)\nDESCRIPTION: This command installs the `unplugin-typegpu` Babel plugin using npm. This plugin is required if you intend to define custom GPU logic using JavaScript functions marked with the \"kernel\" directive for props like `gravity` or `initParticle`.\nSOURCE: https://github.com/software-mansion-labs/typegpu-confetti/blob/main/packages/typegpu-confetti/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install unplugin-typegpu\n```"
  }
]