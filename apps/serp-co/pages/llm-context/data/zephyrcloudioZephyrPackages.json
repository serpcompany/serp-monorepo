[
  {
    "owner": "zephyrcloudio",
    "repo": "zephyr-packages",
    "content": "TITLE: Building Rspack Module Federation Applications (Concurrent)\nDESCRIPTION: This command builds both 'rspack_mf_remote' and 'rspack_mf_host' applications concurrently. It uses `nx run-many` to execute the 'build' target.  `--parallel=1` limits parallel execution to one process. The `--skip-nx-cache` flag disables the Nx build cache. `-p` specifies the projects to build. It requires an Nx workspace with the specified projects. The output includes built assets for both applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-mf/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run-many -t build --parallel=1 --skip-nx-cache -p rspack_mf_remote rspack_mf_host\n```\n\n----------------------------------------\n\nTITLE: Configuring Repack Module Federation (Host Application)\nDESCRIPTION: Provides an example of the `ModuleFederationPluginV2` configuration for a host (consumer) application. It defines the host's name, lists remote modules to consume, and specifies shared dependencies like React Native core libraries.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-repack-plugin/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// rspack.config.js\n...\n new Repack.plugins.ModuleFederationPluginV2({\n        /**\n         * The name of the module is used to identify the module in URLs resolver and imports.\n         */\n        name: 'MobileHost',\n        dts: false,\n        remotes: {\n          MobileCart: `MobileCart@http://localhost:9000/${platform}/MobileCart.container.js.bundle`,\n          MobileInventory: `MobileInventory@http://localhost:9001/${platform}/MobileInventory.container.js.bundle`,\n          MobileCheckout: `MobileCheckout@http://localhost:9002/${platform}/MobileCheckout.container.js.bundle`,\n          MobileOrders: `MobileOrders@http://localhost:9003/${platform}/MobileOrders.container.js.bundle`,\n        },\n        /**\n         * Shared modules are shared in the share scope.\n         * React, React Native and React Navigation should be provided here because there should be only one instance of these modules.\n         * Their names are used to match requested modules in this compilation.\n         */\n        shared: getSharedDependencies({eager: true}),\n      }),\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr ModernJS Plugin in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates the configuration object required for the Zephyr ModernJS plugin using `defineConfig`. It sets essential options like output distribution paths (`output.distPath.html`), HTML output structure (`html.outputStructure`), main entry file name (`source.mainEntryName`), enables runtime routing (`runtime.router`), and includes necessary plugins like `appTools` (configured for rspack) and `withZephyr`. The `withZephyr` plugin should be placed last in the plugins array.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-modernjs-plugin/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineConfig({\n  output: {\n    distPath: {\n      html: './',\n    },\n  },\n  html: {\n    outputStructure: 'flat',\n  },\n  source: {\n    mainEntryName: 'index',\n  },\n  runtime: {\n    router: true,\n  },\n  plugins: [\n    appTools({\n      bundler: 'rspack', // Set to 'webpack' to enable webpack\n    }),\n    withZephyr(), // Last\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring vite-plugin-zephyr in vite.config.js\nDESCRIPTION: Demonstrates how to import the `withZephyr` function from `vite-plugin-zephyr` and integrate it into the `plugins` array within a Vite configuration file (e.g., `vite.config.js`). This function requires a Module Federation configuration object (`mfConfig`) to be passed. The example also shows setting a build target.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/vite-plugin-zephyr/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withZephyr, type ModuleFederationOptions } from 'vite-plugin-zephyr';\n\nexport default defineConfig({\n  plugins: [react(), withZephyr({ mfConfig })],\n  build: {\n    target: 'chrome89',\n  },\n});\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Composing Zephyr Plugin in Nx/Webpack/Rspack Config - JavaScript\nDESCRIPTION: Demonstrates integrating the zephyr-webpack-plugin using a functional composition approach along with Nx, React, and Module Federation plugins. Dependencies include composePlugins, withNx, withReact, withModuleFederation, withZephyr, and mfConfig. The configuration function receives and returns the modified build config object, facilitating extensibility; expects JavaScript module syntax and export conventions.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-webpack-plugin/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(mfConfig),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Repack Module Federation (MiniApp/Provider Application)\nDESCRIPTION: Provides an example of the `ModuleFederationPluginV2` configuration for a miniApp (provider) application. It defines the module's name, output filename, lists modules to expose to consumers, and specifies shared dependencies.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-repack-plugin/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// rspack.config.js\n...\n   new Repack.plugins.ModuleFederationPluginV2({\n        /**\n         * The name of the module is used to identify the module in URLs resolver and imports.\n         */\n        name: 'MobileCheckout',\n        filename: 'MobileCheckout.container.js.bundle',\n        dts: false,\n        /**\n         * This is a list of modules that will be shared between remote containers.\n         */\n        exposes: {\n          './CheckoutSection': './src/components/CheckoutSection',\n          './CheckoutSuccessScreen': './src/screens/CheckoutSuccessScreen',\n        },\n        /**\n         * Shared modules are shared in the share scope.\n         * React, React Native and React Navigation should be provided here because there should be only one instance of these modules.\n         * Their names are used to match requested modules in this compilation.\n         */\n        shared: getSharedDependencies({eager: STANDALONE}),\n      }),\n      ...\n```\n\n----------------------------------------\n\nTITLE: Integrate withZephyr in Nx - Javascript\nDESCRIPTION: This snippet shows how to apply the withZephyr() plugin within an Nx project using composePlugins. It demonstrates combining the Zephyr plugin with other common Nx/Rspack plugins like withNx(), withReact(), and withModuleFederation(), returning the modified configuration object.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-rspack-plugin/README.md#_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(mfConfig),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Building Rspack Module Federation Application (Remote)\nDESCRIPTION: This command builds the 'rspack_mf_remote' application. It uses the Nx build system (`nx run`) to execute the 'build' target defined in the project's configuration. The `--skip-nx-cache` flag disables the Nx build cache, forcing a fresh build.  No specific prerequisites other than an Nx workspace with rspack_mf_remote project are required. The output is the built application assets.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-mf/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run rspack_mf_remote:build --skip-nx-cache\n```\n\n----------------------------------------\n\nTITLE: Building Rspack Module Federation Application (Host)\nDESCRIPTION: This command builds the 'rspack_mf_host' application. It uses the Nx build system (`nx run`) to execute the 'build' target defined in the project's configuration. The `--skip-nx-cache` flag disables the Nx build cache, forcing a fresh build. No specific prerequisites other than an Nx workspace with rspack_mf_host project are required. The output is the built application assets.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-mf/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run rspack_mf_host:build --skip-nx-cache\n```\n\n----------------------------------------\n\nTITLE: Applying Zephyr Plugin Directly in Webpack Config - JavaScript\nDESCRIPTION: Shows how to apply the zephyr-webpack-plugin by directly wrapping a webpack configuration object with the withZephyr function. Assumes withZephyr is imported and that your_webpack_config is a valid Webpack configuration object. The key output is an enhanced configuration object suitable for export in CommonJS style for Webpack consumption.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-webpack-plugin/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withZephyr()(your_webpack_config);\n```\n\n----------------------------------------\n\nTITLE: Apply withZephyr Directly - Javascript\nDESCRIPTION: This example illustrates how to apply the withZephyr() plugin directly to your Rspack configuration object. The withZephyr() function takes an existing configuration as input and returns the modified configuration, which is then exported for use by Rspack.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-rspack-plugin/README.md#_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\nmodule.exports = withZephyr()(your_rspack_config);\n```\n\n----------------------------------------\n\nTITLE: Building Modern.js App for Production\nDESCRIPTION: Command to create an optimized production build of the Modern.js application, including minification and bundling.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/modern-js/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Rolldown Plugin with JavaScript\nDESCRIPTION: This JavaScript code snippet configures a rolldown build process by importing 'defineConfig' from 'rolldown' and the 'withZephyr' plugin from 'zephyr-rolldown-plugin'. It defines an input entry point ('src/main.tsx') and specifies two plugins: 'emit-html' (which generates and emits an 'index.html' file referencing the bundle output) and the Zephyr integration plugin. Dependencies include 'rolldown', 'zephyr-rolldown-plugin', and Node.js module support. The configuration expects TypeScript input, outputs HTML and JavaScript assets, and can be extended with additional plugins as needed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-rolldown-plugin/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// rolldown.config.mjs\nimport { defineConfig } from 'rolldown';\nimport { withZephyr } from 'zephyr-rolldown-plugin';\n\nexport default defineConfig({\n  input: 'src/main.tsx',\n  plugins: [\n    {\n      name: 'emit-html',\n      generateBundle() {\n        const html = `\n          <html>\n            <body>\n              <div id=\"root\"></div>\n              <script type=\"module\" src=\"./main.js\"></script>\n            </body>\n          </html>\n        `;\n        this.emitFile({\n          type: 'asset',\n          fileName: 'index.html',\n          source: html,\n        });\n      },\n    },\n    withZephyr(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Building the Application for Production\nDESCRIPTION: This snippet shows the command to build the project for production deployment. It compiles and optimizes the application assets for deployment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-sample-app/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Previewing the Production Build Locally\nDESCRIPTION: This snippet demonstrates how to preview the production build locally using pnpm. It helps verify the production version before deployment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-sample-app/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm preview\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and building Zephyr packages with pnpm\nDESCRIPTION: This snippet details the process of building the Zephyr packages. It first installs the project's dependencies using `pnpm i`. Then, it builds various packages using `pnpm --filter <package-name> run build`. Each filter targets a different build tool such as Vite, rspack, webpack, and a host application, initiating their respective build processes. This approach allows for incremental building and targets specific packages.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/vite-react-mf/readme.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npnpm i\npnpm --filter vite-remote run build\npnpm --filter vite_rspack run build\npnpm --filter vite_webpack run build\npnpm --filter vite-host run build\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build of Modern.js App Locally\nDESCRIPTION: Command to serve the production build locally for testing and verification before deployment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/modern-js/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm serve\n```\n\n----------------------------------------\n\nTITLE: Serving Rspack Module Federation Application (Remote)\nDESCRIPTION: This command serves the 'rspack_mf_remote' application. It uses the Nx build system (`nx run`) to execute the 'serve' target. The `--skip-nx-cache` flag is included. No specific prerequisites other than an Nx workspace with rspack_mf_remote project are required. The output is a running application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-mf/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run rspack_mf_remote:serve --skip-nx-cache\n```\n\n----------------------------------------\n\nTITLE: Serving Rspack Module Federation Application (Host)\nDESCRIPTION: This command serves the 'rspack_mf_host' application. It uses the Nx build system (`nx run`) to execute the 'serve' target. The `--skip-nx-cache` flag is included. No specific prerequisites other than an Nx workspace with rspack_mf_host project are required. The output is a running application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-mf/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run rspack_mf_host:serve --skip-nx-cache\n```\n\n----------------------------------------\n\nTITLE: Creating a Zephyr-enabled React Native App\nDESCRIPTION: Provides a command to generate a new React Native application project that is pre-configured with Zephyr, Rspack, and Re.Pack, including examples of Module Federation setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-repack-plugin/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-zephyr-apps@latest\n```\n\n----------------------------------------\n\nTITLE: Wrapping Rspack Configuration with Zephyr\nDESCRIPTION: Demonstrates how to apply the `zephyr-repack-plugin` to an existing Rspack configuration by wrapping it with the `withZephyr` function. This integrates the plugin's functionality into the build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-repack-plugin/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withZephyr } = require('zephyr-repack-plugin');\n\nconst config = {\n  /** ...rspack configuration */\n};\n\nmodule.exports = withZephyr()(config);\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for Modern.js App\nDESCRIPTION: Command to launch the development server for a Modern.js application, enabling local development and hot reloading.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/modern-js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: This snippet describes how to start the development server using pnpm. It allows developers to run the project locally for testing and development purposes with live reloading.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-sample-app/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint parserOptions for TypeScript in React with Vite\nDESCRIPTION: This snippet demonstrates how to update the top-level parserOptions in an ESLint configuration to include project files for TypeScript type-aware linting. It ensures ESLint has access to the correct tsconfig files for accurate static analysis in a React Vite project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/vite-react-mf/host/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing recommended ESLint configurations with type-checked variants\nDESCRIPTION: This snippet shows how to replace default ESLint recommended configurations with more strict, type-checked variants such as 'recommendedTypeChecked' or 'strictTypeChecked', enhancing static analysis accuracy for TypeScript projects.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/vite-react-mf/host/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Assume existing configuration\n// Replace 'recommended' with 'recommendedTypeChecked' or 'strictTypeChecked'\nimport tseslint from 'tseslint';\n\n// Example:\ntseslint.config({\n  // ...\n  extends: ['tseslint.configs.recommendedTypeChecked'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options in a React + Vite Project (JavaScript)\nDESCRIPTION: This snippet demonstrates how to export an ESLint configuration object in a JavaScript file for a project using React, TypeScript, and Vite. The example shows how to specify the parserOptions property, which configures ECMAScript version, module source type, associated TypeScript configuration files, and root directory for type-aware linting. Prerequisites include installing ESLint and the necessary TypeScript configuration files (tsconfig.json, tsconfig.node.json). No code parameters are required; the configuration expects ESLint to locate the specified TypeScript configs.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/vite-react-ts/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Zephyr Parcel Plugin Programmatically\nDESCRIPTION: This snippet demonstrates how to use the Zephyr Parcel plugin programmatically in a JavaScript file. It imports the necessary dependencies, creates a Parcel bundler instance with the Zephyr reporter, and runs the build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/parcel-reporter-zephyr/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// build.js\nconst { Parcel } = require('@parcel/core');\nconst ZephyrReporter = require('parcel-reporter-zephyr');\n\nasync function build() {\n  const bundler = new Parcel({\n    entries: ['src/index.html'],\n    defaultConfig: '@parcel/config-default',\n    reporters: ['...', ZephyrReporter],\n  });\n\n  await bundler.run();\n}\n\nbuild();\n```\n\n----------------------------------------\n\nTITLE: Install zephyr-rspack-plugin - Shell\nDESCRIPTION: These commands demonstrate how to install the zephyr-rspack-plugin as a development dependency using various Node.js package managers: npm, yarn, pnpm, and bun. This is a required first step before using the plugin in your Rspack configuration.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-rspack-plugin/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# npm\nnpm install --save-dev zephyr-rspack-plugin\n# yarn\nyarn add --dev zephyr-rspack-plugin\n# pnpm\npnpm add --dev zephyr-rspack-plugin\n# bun\nbun add --dev zephyr-rspack-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-zephyr with Package Managers\nDESCRIPTION: Provides commands to install the `vite-plugin-zephyr` package as a development dependency using common JavaScript package managers like npm, yarn, pnpm, or bun.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/vite-plugin-zephyr/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install --save-dev vite-plugin-zephyr\n# yarn\nyarn add --dev vite-plugin-zephyr\n# pnpm\npnpm add --dev vite-plugin-zephyr\n# bun\nbun add --dev vite-plugin-zephyr\n```\n\n----------------------------------------\n\nTITLE: Installing Zephyr Webpack Plugin via Package Managers - Shell\nDESCRIPTION: Installs the zephyr-webpack-plugin as a development dependency using npm, yarn, pnpm, or bun. These commands should be run in the root directory of your JavaScript or Node.js project. No additional prerequisites required beyond your project using a compatible package manager; the output is an updated package.json and local dependency installation.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-webpack-plugin/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install --save-dev zephyr-webpack-plugin\n# yarn\nyarn add --dev zephyr-webpack-plugin\n# pnpm\npnpm add --dev zephyr-webpack-plugin\n# bun\nbun add --dev zephyr-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing zephyr-repack-plugin\nDESCRIPTION: Commands to install the `zephyr-repack-plugin` as a development dependency using various JavaScript package managers.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-repack-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev zephyr-repack-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev zephyr-repack-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --dev zephyr-repack-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add --dev zephyr-repack-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: This code installs all required dependencies for the ReactLynx project using pnpm package manager. It prepares the development environment by fetching necessary packages from the registry.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/lynx/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: This snippet provides the command to install project dependencies using pnpm. It is a prerequisite for running or building the project, ensuring all necessary packages are available.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-sample-app/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm for Modern.js App\nDESCRIPTION: Command to install all required dependencies for a Modern.js application using the pnpm package manager.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/modern-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with pnpm\nDESCRIPTION: This snippet runs the development server to serve the ReactLynx application locally. It enables live reloading and allows developers to view changes in real-time by executing the 'pnpm run dev' command.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/lynx/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Optional Features or Adding New Entries in Modern.js App\nDESCRIPTION: Command to run the Modern.js CLI tool for enabling optional features or adding new entry points to the application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/modern-js/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm new\n```\n\n----------------------------------------\n\nTITLE: Integrating ESLint React plugin and setting React version\nDESCRIPTION: This code shows how to include the 'eslint-plugin-react' in ESLint configuration, set the React version for linting rules, and enable recommended React rules to enforce best practices in React projects.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/vite-react-mf/host/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport react from 'eslint-plugin-react';\n\nexport default tseslint.config({\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    react,\n  },\n  rules: {\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Rspack Module Federation Applications (Concurrent)\nDESCRIPTION: This command serves both 'rspack_mf_remote' and 'rspack_mf_host' applications concurrently. It uses `nx run-many` to execute the 'serve' target.  `--parallel=2` allows for parallel execution of two processes. `-p` specifies the projects to serve. It requires an Nx workspace with the specified projects. The output includes two running applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/rspack-mf/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run-many -t serve --parallel=2 -p rspack_mf_remote rspack_mf_host\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: This command installs all the necessary dependencies for the Zephyr plugins repository using the PNPM package manager. It is a prerequisite before running any other scripts or building the projects within the repository.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building the Application for Production\nDESCRIPTION: This command builds the application for production deployment.  It performs optimizations and creates the necessary artifacts for deploying the application in a production environment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running the Production Build\nDESCRIPTION: This command runs the production build of the application. It is used to test the built application in a production-like environment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the Test Suite\nDESCRIPTION: This command executes the test suite for the Zephyr plugins. It ensures that the code functions as expected and helps prevent regressions.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode\nDESCRIPTION: This command runs the tests in watch mode, which automatically re-runs tests whenever code changes are detected.  This is useful for continuous testing during development.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Checking Code for Linting Errors\nDESCRIPTION: This command checks the code for linting errors, enforcing code style and quality standards. It helps identify potential issues and improve code consistency.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Using Prettier\nDESCRIPTION: This command formats the code using Prettier, automatically enforcing a consistent code style across the project.  It improves code readability and maintainability.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm format\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Parcel Plugin with .parcelrc\nDESCRIPTION: This snippet shows how to configure the Zephyr Parcel plugin using a .parcelrc file. It extends the default Parcel configuration and adds the Zephyr reporter to the reporters array.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/parcel-reporter-zephyr/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n//.parcelrc\n{\n  \"extends\": \"@parcel/config-default\",\n  \"reporters\": [\"...\", \"parcel-reporter-zephyr\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding stylistic type-checked ESLint rules\nDESCRIPTION: This snippet demonstrates how to include additional stylistic rules that are type-aware by merging 'stylisticTypeChecked' preset into the ESLint configuration for more comprehensive linting feedback.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/examples/vite-react-mf/host/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Extending configuration with stylisticTypeChecked\nimport tseslint from 'tseslint';\n\n// Example:\ntseslint.config({\n  // ...\n  extends: ['tseslint.configs.stylisticTypeChecked'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Repack Module Federation Plugin\nDESCRIPTION: Shows a generic example of using the `Repack.plugins.ModuleFederationPluginV2` within the Rspack configuration for setting up Module Federation in a Re.Pack project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/libs/zephyr-repack-plugin/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// rspack.config.js\nplugins: [\n  new Repack.plugins.ModuleFederationPluginV2({\n    // your configuration\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: This command starts the development server for the Zephyr plugins repository. It's used during development to quickly test and iterate on changes.\nSOURCE: https://github.com/zephyrcloudio/zephyr-packages/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```"
  }
]