[
  {
    "owner": "airockchip",
    "repo": "rknn-toolkit2",
    "content": "TITLE: RKNN inference with multiple inputs\nDESCRIPTION: This snippet demonstrates how to perform inference with multiple inputs using the 'rknn.inference' function. The 'inputs' parameter takes a list of input data arrays, and the 'data_format' parameter specifies the data format for each input (e.g., 'nhwc', 'nchw').\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/multi_input/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nrknn.inference(inputs=[img, input2, input3, img_gray], data_format=['nhwc', 'nchw', 'nchw', 'nhwc'])\n```\n\n----------------------------------------\n\nTITLE: Resolving Merge Native Libs Error - Gradle\nDESCRIPTION: This snippet demonstrates how to resolve the 'files found with path 'lib/arm64-v8a/xxx.so' from inputs:' error during the app build process. This error occurs due to duplicate native libraries and can be fixed by explicitly specifying the 'jniLibs.srcDirs' in the app's build.gradle file.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/README.md#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\njniLibs.srcDirs = ['libs']\n```\n\n----------------------------------------\n\nTITLE: RKNN Model Memory Reuse in C\nDESCRIPTION: This C code demonstrates how to reuse memory between two RKNN models (A and B) that run serially.  It uses `RKNN_FLAG_MEM_ALLOC_OUTSIDE` to manage memory externally and `rknn_set_internal_mem` to assign the reused memory to each model. This is particularly useful in memory-constrained devices like RV1103/RV1106. The code first initializes the models with external memory allocation, queries the required memory size, creates a maximum sized memory buffer, and then associates portions of that buffer with each model using their file descriptors and virtual addresses.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_internal_mem_reuse_demo/README_CN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nrknn_context ctx_a, ctx_b;\n\nrknn_init(&ctx_a, model_path_a, 0, RKNN_FLAG_MEM_ALLOC_OUTSIDE, NULL);\nrknn_query(ctx_a, RKNN_QUERY_MEM_SIZE, &mem_size_a, sizeof(mem_size_a));\n\nrknn_init(&ctx_b, model_path_b, 0, RKNN_FLAG_MEM_ALLOC_OUTSIDE, NULL);\nrknn_query(ctx_b, RKNN_QUERY_MEM_SIZE, &mem_size_b, sizeof(mem_size_b));\n\nmax_internal_size = MAX(mem_size_a.total_internal_size, mem_size_b.total_internal_size);\ninternal_mem_max = rknn_create_mem(ctx_a, max_internal_size);\n\ninternal_mem_a = rknn_create_mem_from_fd(ctx_a, internal_mem_max->fd,\n        internal_mem_max->virt_addr, mem_size_a.total_internal_size, 0);\nrknn_set_internal_mem(ctx_a, internal_mem_a);\n\ninternal_mem_b = rknn_create_mem_from_fd(ctx_b, internal_mem_max->fd,\n        internal_mem_max->virt_addr, mem_size_a.total_internal_size, 0);\nrknn_set_internal_mem(ctx_b, internal_mem_b);\n```\n\n----------------------------------------\n\nTITLE: Export Pytorch Model to ONNX\nDESCRIPTION: This code exports the Pytorch model `m` to an ONNX file named `dual_residual.onnx` using `torch.onnx.export`. It requires the model, sample inputs (x and y), the output file name, and the ONNX opset version to be specified.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README_EN.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntorch.onnx.export(m, (x, y), \"dual_residual.onnx\", opset_version=12)\n```\n\n----------------------------------------\n\nTITLE: ONNX Model Editing Function Definition in RKNN-Toolkit2 (Python)\nDESCRIPTION: This code snippet shows the definition of the `onnx_edit` function in the `rknn.utils` module. It allows users to modify the input and output shapes of an ONNX model, optionally using a dataset to apply the same transformations to the input data. The transformed ONNX model is saved to a specified path.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rknn.utils import onnx_edit\nonnx_edit(model: str,\n          export_path : str,\n          inputs_transform : dict = {},\n          outputs_transform : dict = {},\n          dataset: Optional[str] = None):\n\"\"\"\n    Args:\n        model: The path to the onnx file.\n        export_path: The path to the exported onnx file.\n        inputs_transform: The dictionary of inputs transform equation. Feed like {'input_0': 'a,b,c->1,ab,1,c', ...}\n        outputs_transform: The dictionary of outputs transform equation. Feed like {'output_2': 'a,b,c,->1,b,1,ac', ...}\n        dataset: The path to the dataset file. dataset file should meet rknn.build requirements. If given, transform of inputs will also apply on dataset and generate a new dataset on the same folder of export_path.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: PyTorch Model with Threshold Layer\nDESCRIPTION: Defines a PyTorch model containing a torch.nn.Threshold layer, which is initially unsupported for ONNX export.  This highlights the scenario where custom symbolic functions are needed. Dependencies include the torch library.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport torch\n\nclass Model(torch.nn.Module):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.m = torch.nn.Threshold(0.1, 20)\n\n    def forward(self, x):\n        y = self.m(x)\n        return y\n\n#导出 onnx 模型\nx = torch.randn(1, 3, 10, 10)\nm = Model()\ntorch.onnx.export(m, (x,), \"threshold.onnx\", opset_version=12)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Platform in onnx2rknn.py (Python)\nDESCRIPTION: This code snippet shows how to modify the `platform` parameter in the `onnx2rknn.py` script to specify the target Rockchip platform.  This is crucial for generating a compatible RKNN model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/convert_rknn_demo/yolov5/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplatform=\"rk3566\"\n```\n\n----------------------------------------\n\nTITLE: Running Aarch64 Linux Demo\nDESCRIPTION: These commands connect to the device via ADB shell, navigate to the demo directory, set the LD_LIBRARY_PATH to include the local lib directory, and execute several RKNN demo applications using specific models. The LD_LIBRARY_PATH must be set before running the executable. The models used are mobilenet_v1.rknn and dog_224x224.jpg.  These examples demonstrate different memory allocation methods.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_api_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_api_demo_Linux/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_create_mem_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n./rknn_create_mem_with_rga_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Java: Modifying camera preview dimensions\nDESCRIPTION: This snippet refers to modifying `CAMERA_PREVIEW_WIDTH` and `CAMERA_PREVIEW_HEIGHT` in the `HALDefine.java` file to match the camera's supported resolutions. This resolves the `E/SurfaceView: Exception configuring surface` error by ensuring the app requests a supported camera resolution.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/README_CN.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nCAMERA_PREVIEW_WIDTH = [value];\nCAMERA_PREVIEW_HEIGHT = [value];\n```\n\n----------------------------------------\n\nTITLE: Converting the ONNX model with rknn_convert\nDESCRIPTION: This snippet shows how to convert the ONNX model to a format suitable for the RK3568 platform using the rknn_convert tool from the rknn.api. It requires the model_config.yml file.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/onnx/yolov5/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Define Custom Operator in C++\nDESCRIPTION: Defines a custom operator 'dual_residual' in C++ using the torch/script.h header. This operator takes two tensors (x, y) and a scalar alpha as input and returns two tensors as output (A*alpha - B, B*alpha - A). It then registers this operator with the name \"cst::dual_residual\" for use in Python.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ncpp_source = \"\"\"\n#include <torch/script.h>\nstd::tuple<torch::Tensor, torch::Tensor> dual_residual(torch::Tensor x, torch::Tensor y, double_t alpha) {\n    torch::Tensor tmp1 = x* alpha - y;\n    torch::Tensor tmp2 = y* alpha - x;\n    return std::tuple<torch::Tensor, torch::Tensor>(tmp1, tmp2);}\nstatic auto registry = torch::RegisterOperators()\n    .op(\"cst::dual_residual\", &dual_residual);\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: ONNX Editing Function Definition\nDESCRIPTION: Defines the `onnx_edit` function used to adjust the onnx model. This function takes the path to the ONNX file, the export path, input/output transformation dictionaries, and an optional dataset path as input. It transforms the inputs and/or outputs of the model based on the provided equations and optionally applies the same transformation to a given dataset.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README_EN.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nonnx_edit(model: str,\n          export_path : str,\n          inputs_transform : dict = {},\n          outputs_transform : dict = {},\n          dataset: Optional[str] = None):\n\"\"\"\n    Args:\n        model: The path to the onnx file.\n        export_path: The path to the exported onnx file.\n        inputs_transform: The dictionary of inputs transform equation.\n        outputs_transform: The dictionary of outputs transform equation.\n        dataset: The path to the dataset file. dataset file should meet rknn.build requirements. If given, transform of inputs will also apply on dataset and generate a new dataset on the same folder of export_path.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: RKNN Dynamic Input Configuration\nDESCRIPTION: Configures the dynamic input shapes for the RKNN model. This involves defining a list of input shapes that the model will accept during inference. The example shows three different input shapes: [1,3,256,256], [1,3,160,160], and [1,3,224,224].\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/dynamic_shape/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndynamic_input = [\n        [[1,3,256,256]],    # set 1: [input0_256]\n        [[1,3,160,160]],    # set 2: [input0_160]\n        [[1,3,224,224]],    # set 3: [input0_224]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Reshape 3D to 4D\nDESCRIPTION: Examples showcasing how to reshape a 3D tensor into a 4D tensor using the onnx_edit tool with the specified transform equation. 'a,b,c->a,b,1,c' inserts a dimension of size 1 before the last dimension of the original 3D tensor, effectively reshaping it into a 4D tensor.  'a,b,c->a,1,b,c' inserts a dimension of size 1 after the first dimension of the original 3D tensor.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README_EN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n1. Reshape 3D to 4D:                'a,b,c->a,b,1,c' or 'a,b,c->a,1,b,c'\n```\n\n----------------------------------------\n\nTITLE: Compile for Android\nDESCRIPTION: This command compiles the application for Android targets. It requires setting `ANDROID_NDK_PATH` environment variable and specifies the target architecture and build type.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# sush as: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Running Android Demo\nDESCRIPTION: These commands execute the RKNN mobilenet demo on the target Android device. It first changes the current directory to the demo directory, then sets the LD_LIBRARY_PATH, and finally executes the demo with the specified model and image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_mobilenet_demo_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_mobilenet_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: RKNN Benchmark Usage\nDESCRIPTION: Demonstrates how to use the rknn_benchmark tool with different input parameters. The tool requires an rknn model file and optionally takes input data, loop count, and core mask as arguments. Core mask is specific to RK3588 devices.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./rknn_benchmark xxx.rknn\n./rknn_benchmark mobilenet_v1.rknn dog.jpg 10 3\n./rknn_benchmark mobilenet_v1.rknn dog.npy 10 7\n./rknn_benchmark xxx.rknn input1.npy#input2.npy\n```\n\n----------------------------------------\n\nTITLE: Registering the Custom Operator\nDESCRIPTION: Registers the custom operator symbolic function with the PyTorch ONNX exporter.  This links the PyTorch operator `aten::threshold` with the defined symbolic function for ONNX export.  It requires the `register_custom_op_symbolic` function from `torch.onnx`.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nregister_custom_op_symbolic(\"aten::threshold\", threshold_symbolic, 12)\n#第一个参数，\"aten::threshold\" ，必须和pytorch已有的定义匹配上，不可以随意变更\n#第二个参数是前面定义的op映射函数\n#第三个参数是配置的 onnx-opset 版本，目前可不管，填入常用的 opset version 即可\n```\n\n----------------------------------------\n\nTITLE: Load C++ Operator using torch.utils.cpp_extension\nDESCRIPTION: This code snippet loads the C++ operator defined in the `cpp_source` string using `torch.utils.cpp_extension.load_inline`. It compiles the C++ code and makes the `dual_residual` function available in Python as `torch.ops.cst.dual_residual`. The function name provided to 'functions' parameter must match the function name defined in the C++ code.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README_EN.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntorch.utils.cpp_extension.load_inline(\n        name=\"test\",\n        cpp_sources=cpp_source,\n        functions=\"dual_residual\",\n        verbose=True,\n        is_python_module=True,\n    )\n# The string input dual_residual of functions needs to be consistent with the function name in the cpp definition\n```\n\n----------------------------------------\n\nTITLE: Converting model with rknn_convert\nDESCRIPTION: Converts a model to the RKNN format using the rknn_convert tool. The command specifies the target platform (rk3568), input configuration file (model_config.yml), and output directory (./).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/pytorch/resnet18/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Reshape 5D to 4D\nDESCRIPTION: Examples for reshaping a 5D tensor into a 4D tensor using the onnx_edit tool. 'a,b,c,d,e->ab,c,d,e' merges the first two dimensions of the 5D tensor into a single dimension, resulting in a 4D tensor. 'a,b,c,d,e->a,bce,1,1' merges the middle three dimensions into one.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README_EN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n2. Reshape 5D to 4D:                'a,b,c,d,e->ab,c,d,e' or 'a,b,c,d,e->a,bce,1,1'\n```\n\n----------------------------------------\n\nTITLE: Map Torch Op to ONNX Op\nDESCRIPTION: Registers a symbolic function `dual_residual_symbolic` to map the custom PyTorch operator 'cst::dual_residual' to an ONNX operator 'rknn_cst::cstDualResidual'. The `@parse_args` decorator specifies the argument types. The `register_custom_op_symbolic` function associates the PyTorch operator with its symbolic representation for ONNX export, specifying opset version 12.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom torch.onnx import register_custom_op_symbolic\nfrom torch.onnx.symbolic_helper import parse_args\n\n@parse_args('v', 'v', 'f')\ndef dual_residual_symbolic(g, x, y, alpha):\n    output = g.op(\"rknn_cst::cstDualResidual\", x, y, alpha_f=alpha, \n                outputs=2)  \n    return output\n\nregister_custom_op_symbolic(\"cst::dual_residual\", dual_residual_symbolic, 12)\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux Build Script\nDESCRIPTION: This shell script builds the RKNN matmul API demo for Aarch64 Linux.  It requires the GCC_COMPILER environment variable to be set. The script takes target, architecture and build type as input parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n\n# 例如: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Multi-input dataset configuration\nDESCRIPTION: This example shows how to configure the dataset.txt file for multi-input models. Each line specifies the paths to the input files, separated by spaces, required for a single inference run.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/multi_input/README.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\ndog_128x128.jpg input2.npy input3.npy dog_128x128_gray.png\n```\n\n----------------------------------------\n\nTITLE: Run RKNN Benchmark on Linux\nDESCRIPTION: Runs the rknn_benchmark tool on a Linux device after pushing the executable and setting the LD_LIBRARY_PATH. Assumes the executable has been copied to the /userdata/rknn_benchmark_Linux/ directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nadb shell\ncd /userdata/rknn_benchmark_Linux/\nexport LD_LIBRARY_PATH=./lib\n./rknn_benchmark xxx.rknn\n```\n\n----------------------------------------\n\nTITLE: Navigate to dynamic shape demo directory\nDESCRIPTION: This command is used to change the current directory in the terminal to the dynamic shape inference demo directory, which is located within the rknn-toolkit2 repository.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/rknn_dynamic_shape_input_demo\n```\n\n----------------------------------------\n\nTITLE: Run Android Demo on Device\nDESCRIPTION: These commands execute the RKNN custom GPU operator demo on an Android device via ADB shell. It addresses a potential error related to 'libOpenCL.so' not being found by copying it to a local path and setting the LD_LIBRARY_PATH before running the demo.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_custom_gpu_op_demo_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\ncp /vendor/lib64/libOpenCL.so ./lib/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_custom_gpu_op_demo model/<TARGET_PLATFORM>/pp_human_segv2_custom_argmax.rknn model/test_image.jpg 1\n```\n\n----------------------------------------\n\nTITLE: Convert ONNX model to RKNN model\nDESCRIPTION: This command executes a Python script to convert an ONNX model to the RKNN model format. It requires the RKNN toolkit and a valid ONNX model generated in the previous step. The platform needs to be configured according to your target.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 test.py\n```\n\n----------------------------------------\n\nTITLE: Accuracy Analysis Script Execution\nDESCRIPTION: This script executes the accuracy analysis on an RKNN model. By default, it targets the 'rk3566' platform, but this can be modified in the script. If connecting to a board is required, the 'target' parameter should be added to 'rknn.accuracy_analysis'.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/accuracy_analysis/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Running rknn_benchmark on Linux\nDESCRIPTION: These commands set the LD_LIBRARY_PATH and run the rknn_benchmark executable with a specified RKNN model on a Linux environment. It assumes the executable and required libraries are located in the current directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README_CN.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_benchmark_Linux/\nexport LD_LIBRARY_PATH=./lib\n./rknn_benchmark xxx.rknn\n```\n\n----------------------------------------\n\nTITLE: Static Shape MatMul Demo Usage\nDESCRIPTION: Demonstrates the usage of the rknn_matmul_api_demo executable for static shape matrix multiplication on the RKNN NPU. The command takes several arguments including the matmul type, matrix dimensions, layout, loop count, core mask, print result flag and iommu domain ID.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n./rknn_matmul_api_demo <matmul_type> <M,K,N> <B_layout> <AC_layout> <loop_count> <core_mask> <print_result> <iommu_domain_id>\n     matmul_type = 1: RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT32\n     matmul_type = 2: RKNN_INT8_MM_INT8_TO_INT32\n     matmul_type = 4: RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT16\n     matmul_type = 7: RKNN_FLOAT16_MM_INT4_TO_FLOAT32\n     matmul_type = 10: RKNN_INT4_MM_INT4_TO_INT16\nExample: A = [4,64], B = [64,32], int8 matmul test command as followed:\n./rknn_matmul_api_demo 2 4,64,32\n```\n\n----------------------------------------\n\nTITLE: Running the model pruning test script\nDESCRIPTION: This command executes the test script to demonstrate model pruning.  The script uses the rknn-toolkit2 and assumes a MobileNet-Caffe model is available. Before executing, ensure the 'target_platform' parameter in 'rknn.config' is set correctly and the 'target' parameter is added to 'rknn.init_runtime' if connecting to a board is needed.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/model_pruning/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Build RKNN Benchmark on Linux\nDESCRIPTION: Builds the rknn_benchmark tool for Aarch64 Linux. It requires setting the GCC_COMPILER environment variable and then executing the build-linux.sh script with target, architecture, and build type parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n\n# such as: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Custom ONNX symbolic function registration for threshold operator\nDESCRIPTION: This code demonstrates three different ways to define a custom symbolic function for the threshold operator. It shows how to map the PyTorch operator to a custom ONNX operator (\"rknn_cst::cstThreshold\") and handle operator attributes.  The `parse_args` decorator specifies the expected data types of the input arguments. Case 1 ignores the attributes, case 2 records the attributes with the specified type and case 3 records the attributes as a list.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README_EN.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom torch.onnx.symbolic_helper import parse_args\n\n'''\nIt should be noted that the op mapping function must be modified with parse_args to modify each input data type. According to the torch code, it has the following definition:\nArgs:\n    arg_descriptors: list of str, where each element is\n        a string that specifies the type to convert to. Valid descriptors:\n        \"v\": no conversion, keep torch._C.Value.\n        \"i\": int\n        \"is\": list of int\n        \"f\": float\n        \"fs\": list of float\n        \"b\": bool\n        \"s\": str\n        \"t\": torch.Tensor\n        \"none\": the variable is unused\n'''\n\n'''\nThe naming convention for custom ops is: <Generation organization>:<Name of custom op>, for example, the following example is rknn_cst::cst_threshold\n'''\n\n'''\nCase-1\nWhen you do not need to record the op attribute, you can ignore these inputs and only record the tensor input in the g.op function.\n'''\n@parse_args('v', 'f', 'f')\ndef threshold_symbolic(g, x, threshold, value):\n    output = g.op(\"rknn_cst::cstThreshold\", x)\n    return output\n\n\n'''\nCase-2\nWhen the op attribute needs to be recorded, it must be declared in g.op. The declaration method is to add the parameter keyword. Please note that the data type needs to be declared with _{type} at the end of the parameter keyword. Since each parameter is a floating point type , so the data type declaration of _f is added at the end\n'''\n@parse_args('v', 'f', 'f')\ndef threshold_symbolic(g, x, threshold, value):\n    output = g.op(\"rknn_cst::cstThreshold\", x, threshold_f=threshold, value_f=value)\n    return output\n\n'''\nCase-3\nIf you want to record attributes as a list instead of a single value, you can use the following method\n'''\n@parse_args('v', 'f', 'f')\ndef threshold_symbolic(g, x, threshold, value):\n\toutput = g.op(\"rknn_cst::cstThreshold\", x, param_f=[threshold,value]) \n\treturn output\n```\n\n----------------------------------------\n\nTITLE: Execute Android RKNN Demo\nDESCRIPTION: Sets the LD_LIBRARY_PATH and runs the compiled rknn multiple input demo on the Android target.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_multiple_input_demo model/<TARGET_PLATFORM>/multiple_input_demo.rknn model/input1.bin#model/input2.bin\n```\n\n----------------------------------------\n\nTITLE: Dynamic Shape MatMul Demo Usage\nDESCRIPTION: Demonstrates the usage of the rknn_matmul_api_dynshape_demo executable for dynamic shape matrix multiplication on the RKNN NPU. The command takes several arguments including the matmul type, a string representing multiple matrix shapes, layout, loop count and core mask.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./rknn_matmul_api_dynshape_demo <matmul_type> <M1K1N1#M2K2N2#...> <B_layout> <AC_layout> <loop_count> <core_mask>\nM_shapes:         M shape array, which separeted by ',' \n     matmul_type = 1: RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT32\n     matmul_type = 2: RKNN_INT8_MM_INT8_TO_INT32\n     matmul_type = 4: RKNN_FLOAT16_MM_FLOAT16_TO_FLOAT16\n     matmul_type = 7: RKNN_FLOAT16_MM_INT4_TO_FLOAT32\n     matmul_type = 10: RKNN_INT4_MM_INT4_TO_INT16\nExample: A = [1,64]#[4,64]#[8,64], B = [64,32], int8 matmul test command as followed:\n feature+const: ./rknn_matmul_api_dynshape_demo 2 1,64,32#4,64,32#8,64,32 1 1\n two feature:   ./rknn_matmul_api_dynshape_demo 2 1,64,32#4,64,32#8,64,32 2 1\n```\n\n----------------------------------------\n\nTITLE: Run RKNN Mobilenet Demo (Shell)\nDESCRIPTION: This command sets the `LD_LIBRARY_PATH` to include the `./lib` directory, then executes the `rknn_mobilenet_demo` application. It requires the model and image file paths as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README_CN.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_mobilenet_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Running rknn_mobilenet_demo (Shell)\nDESCRIPTION: This command sets the library path and executes the rknn_mobilenet_demo application with a specified model and image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_mobilenet_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Running Linux Yolo-v5 Demo\nDESCRIPTION: These commands execute the Yolo-v5 demo on the Linux device.  It sets the LD_LIBRARY_PATH to include the location of required libraries and then runs the rknn_yolov5_demo executable with the specified model and input image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_yolov5_demo_Linux/\n\nexport LD_LIBRARY_PATH=./lib\n./rknn_yolov5_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn model/bus.jpg\n```\n\n----------------------------------------\n\nTITLE: Converting the ONNX model with rknn_convert\nDESCRIPTION: Converts the ONNX model to an RKNN model using the `rknn_convert` tool from the `rknn.api` module. It requires the `model_config.yml` file and specifies the target platform (rk3568) for the conversion.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/onnx/resnet50v2/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Python Script Usage\nDESCRIPTION: This script demonstrates how to use the converted MobileNet V2 model.  It requires the necessary dependencies for running inference on the RKNN platform.  The script execution prints the top 5 labels and corresponding scores.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/caffe/mobilenet_v2/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Running Android Yolo-v5 Demo\nDESCRIPTION: These commands execute the Yolo-v5 demo on the Android device. It sets the LD_LIBRARY_PATH to include the location of required libraries and then runs the rknn_yolov5_demo executable with the specified model and input image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_yolov5_demo/\n\nexport LD_LIBRARY_PATH=./lib\n./rknn_yolov5_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn model/bus.jpg\n```\n\n----------------------------------------\n\nTITLE: Converting Model with rknn_convert\nDESCRIPTION: This snippet demonstrates how to convert a model using the rknn_convert tool, part of the rknn-toolkit2. It uses a configuration file (model_config.yml) and specifies the target architecture (rk3568) for the conversion.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tflite/mobilenet_v1/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Running the Test Script\nDESCRIPTION: This command executes the test.py script, which demonstrates the custom OP functionality. It converts a custom ONNX model to a RKNN model, performs inference, and saves the results. Remember to configure target_platform in the script.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/non-onnx_standard/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Run RKNN Dynamic Shape Inference Demo\nDESCRIPTION: This command runs the rknn_dynshape_inference application, performing image classification using the specified RKNN model (mobilenet_v2.rknn) and image (dog_224x224.jpg).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README_CN.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_dynshape_inference model/RK3562/mobilenet_v2.rknn images/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Include Directories\nDESCRIPTION: Specifies the include directories needed for compilation. This includes the RKNN API include directory and the 3rdparty directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${RKNN_API_PATH}/include)\ninclude_directories(${CMAKE_SOURCE_DIR}/../../3rdparty)\n```\n\n----------------------------------------\n\nTITLE: Run dynamic shape inference demo\nDESCRIPTION: This command executes the `rknn_dynshape_inference` program with the specified model and image.  It takes the RKNN model and image file as arguments.  It performs inference on the image using the specified model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_dynshape_inference model/RK3562/mobilenet_v2.rknn images/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Execute Linux RKNN Demo\nDESCRIPTION: Sets the LD_LIBRARY_PATH and runs the compiled rknn multiple input demo on the linux target.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_multiple_input_demo model/<TARGET_PLATFORM>/multiple_input_demo.rknn model/input1.bin#model/input2.bin\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Link Libraries\nDESCRIPTION: This snippet adds the executable rknn_benchmark, specifying the source files, and links it against the RKNN runtime library (librknnrt.so) and OpenCV libraries.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"lib\")\n\nadd_executable(rknn_benchmark\n        src/rknn_benchmark.cpp\n        src/cnpy/cnpy.cpp\n)\n\ntarget_link_libraries(rknn_benchmark\n\t${RKNN_RT_LIB}\n\t${OpenCV_LIBS}\n)\n```\n\n----------------------------------------\n\nTITLE: Example Transformation Output from onnx_edit (Shell)\nDESCRIPTION: This code snippet demonstrates example output messages from the `onnx_edit` tool, illustrating how it transforms input and output tensors in an ONNX model. The output provides information about the original and modified shapes, and details the operations performed, such as reshape and transpose, to achieve the desired transformation.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nI For 'k_cache.1':'a,b,c,d->1,ad,b,c'\n  Input:'k_cache.1' was reset as shape-[1, 32, 48, 1].(Origin shape is [4, 48, 1, 8])\n  Insert ops to transform [1, 32, 48, 1] to [4, 8, 48, 1]:\n  - Insert reshape op. [1, 32, 48, 1] reshape to [4, 8, 48, 1].\n  - Insert transpose op. [4, 8, 48, 1] transpose(0, 2, 3, 1) to [4, 48, 1, 8].\nI For 'k_cache':'a,b,c,d->1,ab,c,d'\n  Output:'k_cache' was reset as shape-[1, 32, 48, 1].(Origin shape is [4, 8, 48, 1]) \n  Insert ops to transform [4, 8, 48, 1] to [1, 32, 48, 1]:\n  - Insert reshape op. [4, 8, 48, 1] reshape to [1, 32, 48, 1].\n```\n\n----------------------------------------\n\nTITLE: Building the Aarch64 Linux Demo\nDESCRIPTION: This shell script builds the RKNN custom CPU OP demo for Aarch64 Linux. It requires the GCC_COMPILER environment variable to be set to the path of the Aarch64 Linux GNU toolchain. The script takes target platform, architecture, and build type as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type]\n\n# such as: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Building Android Demo\nDESCRIPTION: This script builds the Android demo for a specific target platform and architecture. It requires setting the ANDROID_NDK_PATH environment variable.  The -t flag specifies the target platform (e.g., rk3568), -a specifies the architecture (e.g., arm64-v8a), and -b specifies the build type (e.g., Release).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# 例如: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux Build Script Execution\nDESCRIPTION: This script compiles the Linux demo for a specific target and architecture, optionally specifying a build type. It requires the GCC_COMPILER environment variable to be set to the path of the cross-compiler.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n\n# such as: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Integrate autosparsity code in PyTorch training loop\nDESCRIPTION: This code snippet demonstrates how to integrate the `sparsity_model` function from the `autosparsity` package into a PyTorch training loop. It shows the necessary imports, model instantiation, and the call to `sparsity_model` before the training loop. It is assumed the optimizer is already created.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/examples/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# insert model autosparsity code before training\nimport torch\nimport torchvision.models as models\nfrom autosparsity.sparsity import sparsity_model\n\n...\n\nmodel = models.resnet34(pretrained=True).cuda()\nmode = 0\nsparsity_model(model, optimizer, mode)\n\n# normal training\nx, y = DataLoader(args)\nfor epoch in range(epochs):\n    y_pred = model(x)\n    loss = loss_func(y_pred, y)\n    loss.backward()\n    optimizer.step()\n    ...\n```\n\n----------------------------------------\n\nTITLE: ONNX Edit Transformation Examples (Shell)\nDESCRIPTION: This code snippet presents a set of examples illustrating how to express transformations for input and output tensors within ONNX models using a specific notation. These examples cover common operations such as reshaping, transposing, merging dimensions, and splitting dimensions while considering auto-inference of unspecified dimensions. The transformations are defined as strings representing shape manipulations using letters and assignment formulas.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n1. Reshape 3D to 4D:                'a,b,c->a,b,1,c' or 'a,b,c->a,1,b,c'\n2. Reshape 5D to 4D:                'a,b,c,d,e->ab,c,d,e' or 'a,b,c,d,e->a,bce,1,1'\n3. Transpose(0,3,1,2):              'a,b,c,d->a,d,b,c'\n4. Transpose, merge dim:            'a,b,c,d->ad,c,b' or 'a,b,c,d->d,acb,1'\n5. Split dim, transpose, merge dim: 'a,bc,de,f[b=2,d=4]->ab,fe,dc,1',  \t\t#  'c','e' will be auto infered\n6. Split dim, transpose, merge dim: 'a,bc,de,f[b=2,c=24,d=4]->ab,fe,dc,1',  #  'bc' = 24 shuold be equal to tensor's 2nd-dim, 'e' will be auto infered\n```\n\n----------------------------------------\n\nTITLE: Push Android application to device\nDESCRIPTION: This command pushes the built demo application to the `/data/` directory of the target device using `adb`. It assumes that `adb` is configured correctly and the device is connected.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_custom_pytorch_op_demo_Android/ /data/\n```\n\n----------------------------------------\n\nTITLE: Running Yolo-v5 Video Demo (RTSP)\nDESCRIPTION: This command executes the Yolo-v5 video demo with an RTSP stream input.  It requires the model file, RTSP URL, and video codec type (265) as arguments. Note: rtsp video stream only available on the Linux system.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_yolov5_video_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn <RTSP_URL> 265\n```\n\n----------------------------------------\n\nTITLE: RKNN Model Conversion\nDESCRIPTION: This command converts the Caffe MobileNet V2 model to the RKNN format using the rknn_convert tool. It utilizes a model configuration file (model_config.yml) and specifies the target platform (rk3566). The output is the converted RKNN model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/caffe/mobilenet_v2/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3566 -i  ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Running test.py\nDESCRIPTION: Executes the test script for the ResNet18 model. It uses the default configuration and performs inference to classify an image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/pytorch/resnet18/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Define Custom Operator in C++ for Pytorch\nDESCRIPTION: This code defines a custom operator named `dual_residual` in C++ using the torch/script.h library. It takes two tensors, x and y, and a double alpha as input, and returns two tensors calculated as (x*alpha - y) and (y*alpha - x). The `torch::RegisterOperators` registers the operator with the name `cst::dual_residual` for use in the python interface.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README_EN.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ncpp_source = \"\"\"\n#include <torch/script.h>\nstd::tuple<torch::Tensor, torch::Tensor> dual_residual(torch::Tensor x, torch::Tensor y, double_t alpha) {\n    torch::Tensor tmp1 = x* alpha - y;\n    torch::Tensor tmp2 = y* alpha - x;\n    return std::tuple<torch::Tensor, torch::Tensor>(tmp1, tmp2);}\nstatic auto registry = torch::RegisterOperators()\n    .op(\"cst::dual_residual\", &dual_residual);\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform for ONNX to RKNN Conversion - Python\nDESCRIPTION: This code snippet shows how to configure the target platform in the `onnx2rknn.py` script for converting ONNX models to RKNN format.  The `platform` variable needs to be set to the correct Rockchip platform to ensure compatibility. For example, `rk3566` or `rk3568`.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/convert_rknn_demo/yolov5/README_CN.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplatform=\"rk3566\"\n```\n\n----------------------------------------\n\nTITLE: Running Yolo-v5 Video Demo (H264)\nDESCRIPTION: This command executes the Yolo-v5 video demo with an H264 video input.  It requires the model file, H264 video file, and video codec type (264) as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_yolov5_video_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn xxx.h264 264\n```\n\n----------------------------------------\n\nTITLE: Run YOLOv5 Demo (RV1106/RV1103)\nDESCRIPTION: Runs the YOLOv5 demo on the target board. This involves setting the `LD_LIBRARY_PATH` to include the path to the required libraries, and then executing the `rknn_yolov5_demo` executable. The demo takes two arguments: the path to the RKNN model and the path to the input image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README_CN.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nadb shell\ncd /userdata/rknn_yolov5_demo_Linux/\n\nexport LD_LIBRARY_PATH=/userdata/rknn_yolov5_demo_Linux/lib\n./rknn_yolov5_demo model/RV1106/yolov5s-640-640.rknn model/bus.jpg\n```\n\n----------------------------------------\n\nTITLE: Adding executable and linking libraries\nDESCRIPTION: This snippet adds the executable target (rknn_multiple_input_demo) from the source file (src/main.cc) and links the necessary libraries, including the RKNN runtime library (librknnrt.so) and the Android logging library (log) if the target system is Android.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"lib\")\n\nadd_executable(rknn_multiple_input_demo\n        src/main.cc\n)\n\ntarget_link_libraries(rknn_multiple_input_demo\n\t${RKNN_RT_LIB}\n)\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Android\")\n\ttarget_link_libraries(rknn_multiple_input_demo log)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Aarch64 Linux Demo\nDESCRIPTION: This script builds the Aarch64 Linux demo. It requires the GCC_COMPILER environment variable to be set to the path of the Aarch64 cross-compiler. The script takes target architecture, target, and build type as arguments. The target specifies the RK chip. The arch specifies the target architecture and the build_type specifies the build configuration (e.g., Release).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_api_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Compile the application (Android)\nDESCRIPTION: This script compiles the application for a specific Android target, such as RK3562.  It requires that the user is in the demo directory. It builds an executable for the target platform.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build-android_RK3562.sh\n```\n\n----------------------------------------\n\nTITLE: Build Android RKNN Demo\nDESCRIPTION: This script builds the RKNN multiple input demo for an Android target. It requires setting the ANDROID_NDK_PATH environment variable and specifies the target platform, architecture, and build type.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n```\n\n----------------------------------------\n\nTITLE: Set Cross-Compiler Path (RV1106/RV1103)\nDESCRIPTION: Sets the path to the cross-compiler toolchain required for building the demo. This variable must be set correctly for the build process to succeed. Replace `~/opts/toolchain/arm-rockchip830-linux-uclibcgnueabihf/bin/arm-rockchip830-linux-uclibcgnueabihf` with the actual path to your toolchain.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README_CN.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport RK_RV1106_TOOLCHAIN=~/opts/toolchain/arm-rockchip830-linux-uclibcgnueabihf/bin/arm-rockchip830-linux-uclibcgnueabihf\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux Execution\nDESCRIPTION: Executes the compiled Linux demo application on the target device. It requires setting the `LD_LIBRARY_PATH` environment variable to include the `./lib` directory, ensuring the necessary shared libraries are found.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README_CN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_multiple_input_demo_Linux/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_multiple_input_demo model/<TARGET_PLATFORM>/multiple_input_demo.rknn model/input1.bin#model/input2.bin\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH for librga.so\nDESCRIPTION: This command sets the LD_LIBRARY_PATH environment variable to include the location of the librga.so library.  This is necessary if the library is not found in the default library search path. The <LOCATION_LIBRGA.SO> placeholder should be replaced with the actual path to librga.so.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib:<LOCATION_LIBRGA.SO>\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux Demo Execution Script in Shell\nDESCRIPTION: This shell script pushes the compiled Aarch64 Linux demo to the target device and executes it. It assumes the device is accessible via ADB or SCP. The script first copies the demo executable to `/userdata`, sets the `LD_LIBRARY_PATH`, and then runs the demo with specified model and image files.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_internal_mem_reuse_demo/README_CN.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nadb push install/rknn_internal_mem_reuse_demo_Linux /userdata/\n```\n\nLANGUAGE: Shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_internal_mem_reuse_demo_Linux/\n\nexport LD_LIBRARY_PATH=./lib\n./rknn_internal_mem_reuse_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn model/bus.jpg model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/cat_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Install Linux Demo via ADB\nDESCRIPTION: This command pushes the built Linux demo to the /userdata directory on the target device using adb.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_multiple_input_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Android Demo Build Script in Shell\nDESCRIPTION: This shell script builds the Android demo for RKNN internal memory reuse. It requires the `ANDROID_NDK_PATH` environment variable to be set. The script takes target platform, architecture, and build type as arguments and compiles the demo.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_internal_mem_reuse_demo/README_CN.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# 例如: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Installing Android Demo\nDESCRIPTION: This command pushes the built Android demo to the /data directory on a connected Android device via ADB. It assumes the device is connected and ADB is configured correctly.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_api_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_api_demo_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Registering ONNX Symbolic - Example 3\nDESCRIPTION: Registers a custom ONNX symbolic function for the `aten::threshold` operator. This example demonstrates how to record operator attributes as a list in the ONNX graph. The `param_f` argument to g.op specifies that a list of floating-point values [threshold, value] should be stored as an attribute.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n'''\n例子三\n若想要将属性记录为list，而不是单值，可采用下面方式\n'''\n@parse_args('v', 'f', 'f')\ndef threshold_symbolic(g, x, threshold, value):\n\toutput = g.op(\"rknn_cst::cstThreshold\", x, param_f=[threshold,value])\n```\n\n----------------------------------------\n\nTITLE: Running Aarch64 Linux Demo\nDESCRIPTION: These commands execute the Yolo-v5 demo on the Aarch64 Linux device. It navigates to the demo directory, sets the LD_LIBRARY_PATH to include the necessary libraries, and then executes the rknn_yolov5_demo binary with the model and input image paths as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_yolov5_demo_Linux/\n\nexport LD_LIBRARY_PATH=./lib\n./rknn_yolov5_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn model/bus.jpg\n```\n\n----------------------------------------\n\nTITLE: Running Android Demo\nDESCRIPTION: These commands execute the Yolo-v5 demo on the Android device.  It navigates to the demo directory, sets the LD_LIBRARY_PATH to include the necessary libraries, and then executes the rknn_yolov5_demo binary with the model and input image paths as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_yolov5_demo/\n\nexport LD_LIBRARY_PATH=./lib\n./rknn_yolov5_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn model/bus.jpg\n```\n\n----------------------------------------\n\nTITLE: Set CMAKE_INSTALL_RPATH\nDESCRIPTION: Sets the runtime path for the installed executable to 'lib'. This ensures that the executable can find the necessary shared libraries at runtime.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"lib\")\n```\n\n----------------------------------------\n\nTITLE: Building the Demo (Shell)\nDESCRIPTION: This script executes the 'build-linux.sh' script to compile the demo for the specified target platform. The '-t' flag specifies the target platform (e.g., RV1106), and the '-b' flag specifies the build type (e.g., Release). This compilation step transforms the source code into an executable file.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./build-linux.sh -t <TARGET_PLATFORM> -b Release\n```\n\n----------------------------------------\n\nTITLE: Pushing Demo to Device (Shell)\nDESCRIPTION: This command pushes the compiled demo application to the `/userdata` directory on the target device using ADB.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadb push install/rknn_mobilenet_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Building Aarch64 Linux Demo\nDESCRIPTION: This script builds the RKNN mobilenet demo for Aarch64 Linux. It requires the GCC_COMPILER environment variable to be set. The script takes target platform, architecture, and build type as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\\n# such as: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Android Execution\nDESCRIPTION: Executes the compiled Android demo application on the target device. It requires setting the `LD_LIBRARY_PATH` environment variable to include the `./lib` directory, ensuring the necessary shared libraries are found.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README_CN.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_multiple_input_demo_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_multiple_input_demo model/<TARGET_PLATFORM>/multiple_input_demo.rknn model/input1.bin#model/input2.bin\n```\n\n----------------------------------------\n\nTITLE: Set runtime library path\nDESCRIPTION: This command sets the `LD_LIBRARY_PATH` environment variable to include the `./lib` directory, allowing the program to find the necessary shared libraries at runtime.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n```\n\n----------------------------------------\n\nTITLE: Build Linux RKNN Demo (Aarch64)\nDESCRIPTION: This script builds the RKNN multiple input demo for a Linux Aarch64 target. It requires setting the GCC_COMPILER environment variable and specifies target platform, architecture, and build type.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type]\n```\n\n----------------------------------------\n\nTITLE: Setting Cross Compiler Path (Shell)\nDESCRIPTION: This snippet sets the environment variable RK_RV1106_TOOLCHAIN to specify the path to the cross-compiler. This is required for compiling the demo for the target RV1106 and RV1103 platforms. The toolchain is essential for building executable files that are compatible with the target device's architecture.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport RK_RV1106_TOOLCHAIN=~/opts/toolchain/arm-rockchip830-linux-uclibcgnueabihf/bin/arm-rockchip830-linux-uclibcgnueabihf\n```\n\n----------------------------------------\n\nTITLE: Example Android Build Command\nDESCRIPTION: Example command to build the Android RKNN demo, specifying the target as rk3568, architecture as arm64-v8a, and build type as Release.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Linux Demo Execution Commands\nDESCRIPTION: These shell commands execute the rknn_matmul_api_demo and rknn_matmul_api_dynshape_demo on the target device. It requires setting the LD_LIBRARY_PATH environment variable to point to the directory containing the required libraries.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_matmul_api_demo_Linux/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_matmul_api_demo 2 4 64 32\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_matmul_api_dynshape_demo 2 1,64,32#4,64,32#8,64,32 1 1\n```\n\n----------------------------------------\n\nTITLE: Install RKNN Benchmark on Android via ADB\nDESCRIPTION: Installs the rknn_benchmark executable onto an Android device via ADB. Assumes the device is connected and accessible via ADB. Copies the built executable to the /data directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nadb push install/rknn_benchmark_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: This command executes the 'test.py' script, which performs the model conversion and inference. It assumes that the necessary dependencies and input data are available. Modify 'target_platform' in rknn.config according to the actual platform.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/multi_input/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Navigate to Dynamic Shape Demo Directory\nDESCRIPTION: This command navigates the user to the directory containing the dynamic shape inference demo within the rknn-toolkit2 repository.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README_CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/rknn_dynamic_shape_input_demo\n```\n\n----------------------------------------\n\nTITLE: Build Arm Linux Demo (RV1106/RV1103)\nDESCRIPTION: Compiles the Arm Linux demo using the `build-linux.sh` script. The `-t` option specifies the target platform (RV1106, RV1106B RV1103 or RV1103B), and the `-b` option specifies the build type (Release). This script requires the `RK_RV1106_TOOLCHAIN` environment variable to be set correctly.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README_CN.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./build-linux.sh -t <TARGET_PLATFORM> -b Release\n```\n\n----------------------------------------\n\nTITLE: Running rknn_common_test on Android\nDESCRIPTION: These commands execute the `rknn_common_test` application on the target device. It first uses `adb shell` to access the device's shell, then navigates to the directory where the executable is located. The `LD_LIBRARY_PATH` is set to include the `./lib` directory, and finally, the `rknn_common_test` application is executed with the specified model and image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_common_test/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_common_test_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_common_test model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: rknn-toolkit2 Python Dependencies\nDESCRIPTION: This snippet lists the Python dependencies required for the rknn-toolkit2 project along with their version constraints. These dependencies are used for tasks such as model parsing (onnx), numerical computation (numpy, scipy), image processing (opencv-python), and general utilities (psutil, ruamel.yaml, tqdm). The version constraints ensure compatibility and stability of the toolkit.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/x86_64/requirements_cp36-2.3.2.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nprotobuf>=3.12.2,<=3.19.6\npsutil>=5.9.0\nruamel.yaml>=0.17.4\nscipy>=1.5.4\ntqdm>=4.64.0\nopencv-python>=4.5.5.64,<=4.6.0.66\nfast-histogram>=0.11\nnumpy<=1.26.4\nonnx>=1.10.0,<=1.11.0\nonnxruntime>=1.10.0\ntorch>=1.10.1,<=2.4.0\ntensorflow>=1.12.0,<=2.6.2\n```\n\n----------------------------------------\n\nTITLE: Push application to device\nDESCRIPTION: This command pushes the built demo application to the `/data/` directory of the target device using `adb`. It assumes that `adb` is configured correctly and the device is connected.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_custom_pytorch_op_demo_Linux/ /data/\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: This snippet adds the executable target and links it against the RKNN runtime library.  The source files for the executable are src/main.cc and src/postprocess.cc.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(rknn_yolov5_demo\n            src/main.cc\n            src/postprocess.cc\n)\n\ntarget_link_libraries(rknn_yolov5_demo\n${RKNN_RT_LIB}\n)\n```\n\n----------------------------------------\n\nTITLE: Converting the model with rknn_convert\nDESCRIPTION: Converts the YOLO V3 model to the RKNN format using the rknn_convert tool. It requires the model configuration file and specifies the target platform.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/darknet/yolov3_416x416/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Converting MP4 to H264\nDESCRIPTION: This command uses ffmpeg to convert an MP4 video file to an H264 video file. The -i flag specifies the input file, and -vcodec h264 specifies the video codec to use.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -i xxx.mp4 -vcodec h264 xxx.h264\n```\n\n----------------------------------------\n\nTITLE: Set C++ Standard\nDESCRIPTION: Sets the C++ standard to C++11 for the project.  Requires the C++11 standard to be enabled for the compilation. This makes sure that the compiler supports the necessary C++ features.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Install RKNN Benchmark on Linux via ADB\nDESCRIPTION: Installs the rknn_benchmark executable onto a device via ADB. Assumes the device is connected and accessible via ADB. Copies the built executable to the /userdata directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadb push install/rknn_benchmark_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Run RKNN Benchmark on Android\nDESCRIPTION: Runs the rknn_benchmark tool on an Android device after pushing the executable and setting the LD_LIBRARY_PATH. Assumes the executable has been copied to the /data/rknn_benchmark_Android/ directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nadb shell\ncd /data/rknn_benchmark_Android/\nexport LD_LIBRARY_PATH=./lib\n./rknn_benchmark xxx.rknn\n```\n\n----------------------------------------\n\nTITLE: Converting MP4 to H264 with FFmpeg\nDESCRIPTION: This command converts an MP4 video file to H264 format using ffmpeg. It takes the input MP4 file and specifies the H264 codec for the output file.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -i xxx.mp4 -vcodec h264 xxx.h264\n```\n\n----------------------------------------\n\nTITLE: Running the Demo (Shell)\nDESCRIPTION: This snippet executes the compiled demo on the target board using ADB. It sets the LD_LIBRARY_PATH to include the path to the required libraries and then runs the 'rknn_yolov5_demo' executable with the model and image as arguments. The LD_LIBRARY_PATH is required for the demo to locate shared libraries.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nadb shell\ncd /userdata/rknn_yolov5_demo_Linux/\n\nexport LD_LIBRARY_PATH=/userdata/rknn_yolov5_demo_Linux/lib\n./rknn_yolov5_demo model/RV1106/yolov5s-640-640.rknn model/bus.jpg\n```\n\n----------------------------------------\n\nTITLE: Converting the Model with rknn_convert\nDESCRIPTION: Converts the PyTorch model to the RKNN format using the rknn_convert tool. Requires the model configuration file model_config.yml.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/pytorch/resnet18_qat/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Running Yolo-v5 Video Demo (RTSP)\nDESCRIPTION: This command runs the Yolo-v5 video demo with an RTSP video stream. The first argument is the RKNN model, the second is the RTSP URL, and the third is the codec type (265).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_yolov5_video_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn <RTSP_URL> 265\n```\n\n----------------------------------------\n\nTITLE: Model definition with torch.nn.Threshold\nDESCRIPTION: This code defines a PyTorch model that uses the torch.nn.Threshold operator. When attempting to export this model to ONNX, it will raise an error if a custom symbolic function is not registered for the threshold operator. The opset version is set to 12.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README_EN.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport torch\n\nclass Model(torch.nn.Module):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.m = torch.nn.Threshold(0.1, 20)\n\n    def forward(self, x):\n        y = self.m(x)\n        return y\n\nx = torch.randn(1, 3, 10, 10)\nm = Model()\ntorch.onnx.export(m, (x,), \"threshold.onnx\", opset_version=12)\n```\n\n----------------------------------------\n\nTITLE: Installing Aarch64 Linux Demo via ADB\nDESCRIPTION: This command pushes the compiled RKNN mobilenet demo to the /userdata/ directory of the target device using ADB. It requires the device to be connected and ADB to be configured correctly.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_mobilenet_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: Executes the test script to demonstrate dynamic shape functionality. The script utilizes the RKNN toolkit to perform inference with a model that supports dynamic input shapes. The expected output is a list of top 5 labels and scores for each input shape.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/dynamic_shape/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Converting Caffe model to RKNN format\nDESCRIPTION: This snippet demonstrates the usage of `rknn_convert` to convert a Caffe model defined in `model_config.yml` to the RKNN format. The `-t` flag specifies the target platform (rk3566), `-i` specifies the input model configuration file, and `-o` specifies the output directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/caffe/vgg-ssd/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3566 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Target\nDESCRIPTION: Specifies the libraries to link to the target library 'rknn4j'. It links prebuilt shared libraries 'librknnrt.so' and 'librga.so' (located in jniLibs directory for specific ABI) and the 'log' library from NDK. These libraries provide necessary functionality for the target library.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/app/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries( # Specifies the target library.\n                       rknn4j\n\n                       # Links the target library to the log library\n                       # included in the NDK.\n                       ${CMAKE_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/librknnrt.so\n                       ${CMAKE_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/librga.so\n                       ${log-lib} )\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies\nDESCRIPTION: This snippet specifies the dependencies and their version constraints required for the rknn-toolkit2 project. It includes libraries like protobuf, psutil, ruamel.yaml, scipy, tqdm, opencv-python, fast-histogram, numpy, onnx, onnxruntime, torch and tensorflow. The version constraints are defined using operators such as >=, <=, and == to ensure compatibility.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/x86_64/requirements_cp311-2.3.2.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nprotobuf>=4.21.6,<=4.25.4\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.21\nscipy>=1.9.3\ntqdm>=4.64.1\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\n\n# base\nonnx>=1.16.1\nonnxruntime>=1.10.0\ntorch>=1.10.1,<=2.4.0\n# tensorflow>=2.12.0rc0,<=2.14.0\n```\n\n----------------------------------------\n\nTITLE: Performing Sparse Inference with RKNN-Toolkit\nDESCRIPTION: This command executes the `test.py` script to perform sparse inference using RKNN-Toolkit2. This step assumes a sparse model has been created and is compatible with the toolkit. It is explicitly noted to only support RK3576 target platform.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython examples/test.py\n```\n\n----------------------------------------\n\nTITLE: Running Android Demo\nDESCRIPTION: These commands connect to the device via ADB shell, navigate to the demo directory, set the LD_LIBRARY_PATH to include the local lib directory, and execute several RKNN demo applications using specific models. The LD_LIBRARY_PATH must be set before running the executable. The models used are mobilenet_v1.rknn and dog_224x224.jpg. These examples demonstrate different memory allocation methods.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_api_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_api_demo_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_create_mem_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n./rknn_create_mem_with_rga_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n./rknn_with_mmz_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n./rknn_set_internal_mem_from_fd_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Building rknn_common_test for Android\nDESCRIPTION: This shell script builds the `rknn_common_test` application for Android. It requires setting the `ANDROID_NDK_PATH` environment variable to point to the Android NDK installation directory. The script takes target architecture and build type as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_common_test/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux: File Transfer via ADB\nDESCRIPTION: This command pushes the compiled rknn_mobilenet_demo_Linux to the /userdata directory on the target device using ADB. This step is necessary to install the demo application on the device for execution.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README_CN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_mobilenet_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Android Demo Execution Commands\nDESCRIPTION: These shell commands execute the rknn_matmul_api_demo and rknn_matmul_api_dynshape_demo on the target Android device.  It requires setting the LD_LIBRARY_PATH environment variable to point to the directory containing the required libraries.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_matmul_api_demo_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_matmul_api_demo 2 4 64 32\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_matmul_api_dynshape_demo 2 1,64,32#4,64,32#8,64,32 1 1\n```\n\n----------------------------------------\n\nTITLE: Perform sparse inference using test.py\nDESCRIPTION: This command executes the `test.py` script to perform sparse inference. It is assumed that the script contains the necessary logic to load the sparse model, run inference, and evaluate the results. It also assumes necessary dependencies like RKNN libraries are installed.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/examples/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Pushing Files to the Board (Shell)\nDESCRIPTION: This command uses ADB (Android Debug Bridge) to push the compiled demo folder to the '/userdata' directory on the target board. ADB is required to connect to the board and transfer files. This allows the demo to be executed on the target hardware.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadb push install/rknn_yolov5_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Running AutoSparsity Example\nDESCRIPTION: This command executes the `autosparsity.py` example script, which demonstrates how to generate a sparse ResNet50 model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython examples/autosparsity.py\n```\n\n----------------------------------------\n\nTITLE: Running Demo on Device (Shell)\nDESCRIPTION: These commands execute the demo application on the target device. It sets the `LD_LIBRARY_PATH` environment variable and then runs the `rknn_mobilenet_demo` executable with the specified model and image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nadb shell\ncd /userdata/rknn_mobilenet_demo_Linux/\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux: Build Script Execution\nDESCRIPTION: This script builds the mobilenet_v1 demo for a specified target platform and architecture on Aarch64 Linux. The script takes target, architecture, and build type as parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README_CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type]\n\n# 例如: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Running rknn_benchmark on Android\nDESCRIPTION: These commands set the LD_LIBRARY_PATH and run the rknn_benchmark executable with a specified RKNN model on an Android environment. It assumes the executable and required libraries are located in the current directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README_CN.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nadb shell\ncd /data/rknn_benchmark_Android/\nexport LD_LIBRARY_PATH=./lib\n./rknn_benchmark xxx.rknn\n```\n\n----------------------------------------\n\nTITLE: Push demo program to Android board\nDESCRIPTION: This command uses ADB to push the compiled demo program directory to the target Android board's system. It assumes ADB is configured and the device is connected and authorized. Requires root access and remounting for Android.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#If using Android system, make sure to run adb root & adb remount first.\nadb push ./install/rknn_dynshape_demo_Android/ /data\n```\n\n----------------------------------------\n\nTITLE: rknn-toolkit2 Dependency Versions\nDESCRIPTION: This snippet specifies the version requirements for various Python packages used by rknn-toolkit2. These packages include protobuf, psutil, ruamel.yaml, scipy, tqdm, opencv-python, fast-histogram, Pillow, numpy, onnx, onnxruntime, and torch. It is important to install these packages with the specified versions to ensure compatibility and avoid potential issues.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/arm64/arm64_requirements_cp312.txt#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nprotobuf>=4.21.0,<=4.25.4\npsutil>=5.9.0\nruamel.yaml>=0.17.21\nscipy>=1.9.3\ntqdm>=4.64.1\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nPillow>=10.0.1\nnumpy<=1.26.4\nonnx==1.16.1\nonnxruntime>=1.17.0\ntorch>=1.13.1,<=2.2.0\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Paths\nDESCRIPTION: This snippet sets the installation prefix and related paths for the project.  It configures the RPATH settings to ensure that the application can find its shared libraries at runtime after installation.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/rknn_yolov5_demo_${CMAKE_SYSTEM_NAME})\n\nset(CMAKE_SKIP_INSTALL_RPATH FALSE)\nset(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Inference Result Example\nDESCRIPTION: This shows example output from the model inference. Note that the specific values may differ based on the target platform, toolkit version and driver version.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/multi_input/README.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\ninference result:  [array([[ -3.1041162,  -7.0548096,  -5.361655 , ..., -14.391811 ,\n        -15.802773 , -11.287695 ]], dtype=float32)]\n```\n\n----------------------------------------\n\nTITLE: Script Usage Instructions\nDESCRIPTION: These are the instructions to execute the quantization scripts in the correct order. It includes running step1.py, modifying ssd_mobilenet_v2.quantization.cfg, and finally running step2.py.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/hybrid_quant/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. python step1.py\n2. modify ssd_mobilenet_v2.quantization.cfg according to the prompt of step1.py\n3. python step2.py\n```\n\n----------------------------------------\n\nTITLE: Pushing Android Demo Files\nDESCRIPTION: These commands push the compiled demo files to the Android device. It requires adb to be configured and the device connected. First, the adb is set to root, then the filesystem is remounted to allow writing. Finally, the demo directory is pushed to /data.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb root\nadb remount\nadb push install/rknn_yolov5_demo /data/\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Inference\nDESCRIPTION: This block shows the expected output format of the test script after performing inference with the converted RKNN model.  It shows the top 5 predictions with their scores and class labels.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tensorflow/inception_v3_qat/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-----TOP 5-----\n[   2] score:0.996572 class:\"goldfish, Carassius auratus\"\n[ 408] score:0.000464 class:\"ambulance\"\n[ 795] score:0.000201 class:\"shower curtain\"\n[ 352] score:0.000070 class:\"hartebeest\"\n[ 974] score:0.000051 class:\"coral reef\"\n```\n\n----------------------------------------\n\nTITLE: Transpose (0,3,1,2)\nDESCRIPTION: Example of transposing a 4D tensor with the dimensions reordered as (0,3,1,2) using the onnx_edit tool. The transformation equation 'a,b,c,d->a,d,b,c' reorders the dimensions of the input tensor, effectively swapping the second and fourth dimensions, and the third and second dimensions.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README_EN.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n3. Transpose(0,3,1,2):              'a,b,c,d->a,d,b,c'\n```\n\n----------------------------------------\n\nTITLE: Running Yolo-v5 Video Demo (H265)\nDESCRIPTION: This command executes the Yolo-v5 video demo with an H265 video input.  It requires the model file, H265 video file, and video codec type (265) as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_yolov5_video_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn xxx.hevc 265\n```\n\n----------------------------------------\n\nTITLE: Installing rknn_common_test on Android\nDESCRIPTION: This command copies the built `rknn_common_test_Android` executable to the `/data/` directory on the target device using `adb`. This assumes that the device is connected and accessible via `adb`.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_common_test/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_common_test_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Compile for Arm Linux\nDESCRIPTION: This command compiles the application for Arm Linux targets. It requires setting `GCC_COMPILER` environment variable and specifies the target architecture and build type.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n\n# such as: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Android Build Script\nDESCRIPTION: This shell script builds the RKNN matmul API demo for Android. It requires the ANDROID_NDK_PATH environment variable to be set. The script takes target, architecture and build type as input parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# 例如: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: This snippet shows how to run the main testing script using Python. The script likely performs object detection using the converted RKNN model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/caffe/vgg-ssd/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Building rknn_common_test for Aarch64 Linux\nDESCRIPTION: This shell script builds the `rknn_common_test` application for aarch64 Linux. It requires setting the `GCC_COMPILER` environment variable to point to the appropriate cross-compiler. The script takes target architecture and build type as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_common_test/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script for MMSE Quantization\nDESCRIPTION: This snippet shows how to execute the `test.py` script, which demonstrates the MMSE quantization algorithm in the rknn-toolkit2. The script quantizes a model, performs inference, and prints the top 5 classification results along with accuracy analysis.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/quantize_algorithm_mmse/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Map Custom Torch Op to ONNX Op\nDESCRIPTION: This code defines a symbolic function `dual_residual_symbolic` that maps the custom Pytorch operator `cst::dual_residual` to an ONNX operator `rknn_cst::cstDualResidual`.  It uses `register_custom_op_symbolic` to register this mapping, enabling the custom operator to be exported to ONNX. The `parse_args` decorator specifies the expected input types.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README_EN.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom torch.onnx import register_custom_op_symbolic\nfrom torch.onnx.symbolic_helper import parse_args\n\n@parse_args('v', 'v', 'f')\ndef dual_residual_symbolic(g, x, y, alpha):\n    output = g.op(\"rknn_cst::cstDualResidual\", x, y, alpha_f=alpha, \n                outputs=2)\n    return output\n\nregister_custom_op_symbolic(\"cst::dual_residual\", dual_residual_symbolic, 12)\n```\n\n----------------------------------------\n\nTITLE: Connect to device via USB in WSL (adbkit)\nDESCRIPTION: These commands demonstrate using `adbkit` in the Windows environment to convert a USB connection to a TCP connection, then connecting to it from WSL. This requires installing adbkit in Windows and configuring WSL to access the Windows network. Replace `<device_id>` and `<port>` appropriately.  The Windows host IP will then be the IP used in the `adb connect` command in WSL.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/Using RKNN-ToolKit2 in WSL.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save adbkit\nadbkit usb-device-to-tcp <device_id> -p <port>\nadb connect <IP address:port>\n```\n\n----------------------------------------\n\nTITLE: Include Additional Directories\nDESCRIPTION: This snippet includes additional directories required for the project, specifically the 3rdparty directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_SOURCE_DIR}/../3rdparty)\n```\n\n----------------------------------------\n\nTITLE: Push Demo to Device (Shell)\nDESCRIPTION: This command pushes the compiled demo application to the `/userdata/` directory on the target device using `adb`. Requires `adb` to be configured and the device to be connected.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README_CN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_mobilenet_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Pushing to Rockchip EVB via ADB\nDESCRIPTION: This command pushes the compiled rknn_benchmark_Linux executable to the /userdata directory on a Rockchip EVB board using ADB. This requires a device connected via ADB.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README_CN.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nadb push install/rknn_benchmark_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Integrating AutoSparsity into PyTorch Model Training\nDESCRIPTION: This code snippet demonstrates how to integrate the AutoSparsity package into a PyTorch model training loop. It imports necessary modules, initializes the model, and calls the `sparsity_model` function before the training loop begins. It requires `torch`, `torchvision.models`, and `autosparsity.sparsity`.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# insert model autosparsity code before training\nimport torch\nimport torchvision.models as models\nfrom autosparsity.sparsity import sparsity_model\n\n...\n\nmodel = models.resnet34(pretrained=True).cuda()\nmode = 0\nsparsity_model(model, optimizer, mode)\n\n# normal training\nx, y = DataLoader(args)\nfor epoch in range(epochs):\n    y_pred = model(x)\n    loss = loss_func(y_pred, y)\n    loss.backward()\n    optimizer.step()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: This snippet shows how to execute the test script, which is used to validate the converted Yolo V5s model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/onnx/yolov5/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Installing Aarch64 Linux Demo\nDESCRIPTION: This command pushes the built Aarch64 Linux demo to the /userdata directory on a connected Rockchip device via ADB. It assumes the device is connected and ADB is configured correctly. This command is specific to Rockchip EVB boards.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_api_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_api_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Running Yolo-v5 Video Demo (H264)\nDESCRIPTION: This command runs the Yolo-v5 video demo with an H264 video stream.  The first argument is the RKNN model, the second is the H264 video file, and the third is the codec type (264).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_yolov5_video_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn xxx.h264 264\n```\n\n----------------------------------------\n\nTITLE: Running Dynamic Shape Test Script with Python\nDESCRIPTION: This command executes the `test.py` script, which demonstrates the dynamic shape functionality of a MobileNet model converted to RKNN format. The script processes the model with different input shapes and prints the TOP5 classification results for each shape. No specific dependencies are listed, but it relies on the RKNN Toolkit2 environment and the `test.py` script being properly set up.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit-lite2/examples/dynamic_shape/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Setting RKNN API Paths and Include Directories\nDESCRIPTION: This snippet defines the paths to the RKNN API library and include directories. It sets the `RKNN_API_PATH` and `RKNN_RT_LIB` variables, which are used to locate the necessary header files and shared libraries for the RKNN runtime. It also includes directories for the RKNN API headers and third-party dependencies.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# rknn api\n\nset(RKNN_API_PATH ${CMAKE_SOURCE_DIR}/../../../runtime/${CMAKE_SYSTEM_NAME}/librknn_api)\nset(RKNN_RT_LIB ${RKNN_API_PATH}/armhf-uclibc/librknnmrt.so)\n\ninclude_directories(${RKNN_API_PATH}/include)\ninclude_directories(${CMAKE_SOURCE_DIR}/../../3rdparty)\n```\n\n----------------------------------------\n\nTITLE: Android Installation (ADB Push)\nDESCRIPTION: Copies the compiled Android demo application to the `/data` directory on the Android device using ADB (Android Debug Bridge).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README_CN.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_multiple_input_demo_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Registering ONNX Symbolic - Example 1\nDESCRIPTION: Registers a custom ONNX symbolic function for the `aten::threshold` operator. This example demonstrates the simplest case, where operator attributes are not recorded. It takes the input tensor `x` and creates a custom ONNX operator `rknn_cst::cstThreshold`.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom torch.onnx.symbolic_helper import parse_args\n\n'''\n需要注意，该op映射函数必须使用 parse_args 进行修饰，修饰每一个输入的数据类型，根据torch的代码，有以下定义:\nArgs:\n    arg_descriptors: list of str, where each element is\n        a string that specifies the type to convert to. Valid descriptors:\n        \"v\": no conversion, keep torch._C.Value.\n        \"i\": int\n        \"is\": list of int\n        \"f\": float\n        \"fs\": list of float\n        \"b\": bool\n        \"s\": str\n        \"t\": torch.Tensor\n        \"none\": the variable is unused\n'''\n\n'''\n自定义op的命名规范为: <生成组织>:<自定义op的名称>，例如以下例子是 rknn_cst::cst_threshold\n'''\n\n'''\n例子一\n不需要记录op属性时，可以忽略这些输入，在 g.op 函数中只记录 tensor输入\n'''\n@parse_args('v', 'f', 'f')\ndef threshold_symbolic(g, x, threshold, value):\n    output = g.op(\"rknn_cst::cstThreshold\", x)\n    return output\n```\n\n----------------------------------------\n\nTITLE: Building Aarch64 Linux Demo\nDESCRIPTION: This script builds the Aarch64 Linux demo for a specific target platform and architecture. It requires setting the GCC_COMPILER environment variable. The -t flag specifies the target platform (e.g., rk3588), -a specifies the architecture (e.g., aarch64), and -b specifies the build type (e.g., Release).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n\n# 例如: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Load Custom Operator\nDESCRIPTION: Loads the C++ code defined in cpp_source as a custom operator into PyTorch using `torch.utils.cpp_extension.load_inline`. It specifies the name of the module, the C++ source code, the function to be exposed, and sets verbose to True. The `is_python_module=True` argument indicates that the loaded code should be treated as a Python module.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntorch.utils.cpp_extension.load_inline(\n        name=\"test\",\n        cpp_sources=cpp_source,\n        functions=\"dual_residual\",\n        verbose=True,\n        is_python_module=True,\n    )\n# functions的字符串输入 dual_residual 需要和 cpp 定义中的函数名字一致\n```\n\n----------------------------------------\n\nTITLE: Gradle: Adding jniLibs source directory\nDESCRIPTION: This snippet shows how to add the 'libs' directory as a source for jniLibs in the app's build.gradle file. This is required to resolve the 'files found with path 'lib/arm64-v8a/xxx.so' from inputs:' error when using jniLibs and CMake IMPORTED targets.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/README_CN.md#_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\njniLibs.srcDirs = ['libs']\n```\n\n----------------------------------------\n\nTITLE: Android Demo Execution Script in Shell\nDESCRIPTION: This shell script pushes the compiled Android demo to the target device and executes it. It assumes the device is connected via ADB and rooted. The script first remounts the file system, pushes the demo executable to `/data`, sets the `LD_LIBRARY_PATH`, and then runs the demo with specified model and image files.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_internal_mem_reuse_demo/README_CN.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nadb root\nadb remount\nadb push install/rknn_internal_mem_reuse_demo_Android /data/\n```\n\nLANGUAGE: Shell\nCODE:\n```\nadb shell\ncd /data/rknn_internal_mem_reuse_demo_Android/\n\nexport LD_LIBRARY_PATH=./lib\n./rknn_internal_mem_reuse_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn model/bus.jpg model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/cat_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: ADB Push Command (Linux)\nDESCRIPTION: This command pushes the compiled rknn_matmul_api_demo_Linux executable to the /userdata directory on a Rockchip EVB board connected via ADB.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_matmul_api_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Model Pruning Result Indicators\nDESCRIPTION: These console outputs from the build process indicate successful model pruning. The messages show the reduction in model size (in MB) and the decrease in computational workload (in T). This implies that the model's weights have been effectively reduced due to pruning, resulting in a more efficient model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/model_pruning/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nI model_pruning ...\nI model_pruning results:\nI     -1.12144 MB (-6.9%)\nI     -0.00016 T (-13.4%)\nI model_pruning done.\n```\n\n----------------------------------------\n\nTITLE: Generating C++ Deploy Demo with rknn.codegen (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `rknn.codegen` function to generate a C++ deployment demo for an RKNN model. It takes the output path, a list of input files, and an overwrite flag as parameters. If overwrite is set to False, and the output path already exists, the generation is skipped.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/codegen/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrknn.codegen(output_path='./rknn_app_demo', inputs=['./dog_224x224.jpg'], overwrite=False)\n```\n\n----------------------------------------\n\nTITLE: Run autosparsity.py to generate sparse model\nDESCRIPTION: This command executes the `autosparsity.py` script to generate a sparse version of the model. It is assumed that the script contains the necessary logic to load, sparsify, and save the model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/examples/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython autosparsity.py\n```\n\n----------------------------------------\n\nTITLE: Run Android Demo via ADB Shell\nDESCRIPTION: These commands execute the RKNN multiple input demo on the target device after connecting via adb shell.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_multiple_input_demo_Android/\n```\n\n----------------------------------------\n\nTITLE: Converting the model to RKNN format\nDESCRIPTION: This command converts the TensorFlow Inception V3 QAT model to the RKNN format using rknn_convert. It specifies the target platform as 'rk3568', uses 'model_config.yml' for configuration, and outputs the converted model to the current directory.  The configuration file likely contains details about the input and output layers of the model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tensorflow/inception_v3_qat/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Build librknn_api_android.so\nDESCRIPTION: This snippet shows how to build the `librknn_api_android.so` library using the Android SDK. It requires sourcing the build environment, selecting the target device, and then running `mmm` on the neuralnetworks interface directory. The `-j16` flag specifies the number of parallel build processes.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/librknn_api_android_demo/README_CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource build/envsetup.sh\nlunch your target ##需要根据自己的实际情况进行选择\nmmm vendor/rockchip/hardware/interfaces/neuralnetworks/ -j16\n```\n\n----------------------------------------\n\nTITLE: Install libGL and Set Environment Variable\nDESCRIPTION: These commands install the `libgl1-mesa-glx` library and sets the `LD_LIBRARY_PATH` environment variable. This resolves the 'ImportError: libGL.so.1' error that can occur when using RKNN-Toolkit2 in WSL.  Requires `apt` package manager.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/WSL中使用RKNN_ToolKit2.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install libgl1-mesa-glx\necho 'export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/mesa' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Converting MP4 to H265\nDESCRIPTION: This command uses ffmpeg to convert an MP4 video file to an H265 video file. The -i flag specifies the input file, and -vcodec hevc specifies the video codec to use.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -i xxx.mp4 -vcodec hevc xxx.hevc\n```\n\n----------------------------------------\n\nTITLE: Install Targets and Files\nDESCRIPTION: Specifies the installation targets and files. Installs the executable, the RKNN runtime library, and model files (images and labels) into the appropriate destination directories. It also installs a directory based on the 'TARGET_SOC' variable.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS rknn_custom_cpu_op_demo DESTINATION ./)\ninstall(PROGRAMS ${RKNN_RT_LIB} DESTINATION lib)\nfile(GLOB IMAGE_FILES \"model/*.jpg\")\ninstall(FILES ${IMAGE_FILES} DESTINATION ./model/)\nfile(GLOB LABELS_FILES \"model/*.txt\")\ninstall(FILES ${LABELS_FILES} DESTINATION ./model/)\nmessage(STATUS \"target_soc = ${TARGET_SOC}\")\ninstall(DIRECTORY model/${TARGET_SOC} DESTINATION ./model)\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux Demo Build Script in Shell\nDESCRIPTION: This shell script builds the Aarch64 Linux demo for RKNN internal memory reuse. It requires the `GCC_COMPILER` environment variable to be set. The script takes target platform, architecture, and build type as arguments and compiles the demo.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_internal_mem_reuse_demo/README_CN.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n\n# 例如: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Expected Results Output\nDESCRIPTION: This output shows the expected top 5 classification results for a test image using the MobileNet V2 model after inference on an RKNN platform. The output includes the label index, score, and class name for each of the top 5 predictions.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/caffe/mobilenet_v2/README.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n-----TOP 5-----\n[155] score:0.994629 class:\"Shih-Tzu\"\n[154] score:0.001950 class:\"Pekinese, Pekingese, Peke\"\n[204] score:0.001950 class:\"Lhasa, Lhasa apso\"\n[283] score:0.000674 class:\"Persian cat\"\n[196] score:0.000109 class:\"miniature schnauzer\"\n```\n\n----------------------------------------\n\nTITLE: Build Custom Op Plugin\nDESCRIPTION: These commands build the custom op plugin library for either Linux or Android. This library is used for accuracy analysis with the rknn-toolkit2.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux_<TARGET_PLATFORM>.sh\nor\n./build-android_<TARGET_PLATFORM>.sh\n```\n\n----------------------------------------\n\nTITLE: Construct Model using Custom Pytorch Operator\nDESCRIPTION: This code defines a Pytorch model that uses the custom `dual_residual` operator. The `forward` method of the model calls `torch.ops.cst.dual_residual` with input tensors x, y, and a constant value, and returns the two output tensors from the custom operator.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README_EN.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Model(torch.nn.Module):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.const = .5\n\n    def forward(self, x, y):\n        r1, r2 = torch.ops.cst.dual_residual(x, y, self.const)\n        return r1, r2\n```\n\n----------------------------------------\n\nTITLE: Registering the custom symbolic function\nDESCRIPTION: This code registers the defined symbolic function (`threshold_symbolic`) with the torch.onnx exporter.  The first argument must match the aten operator name (`aten::threshold`). The third parameter specifies the onnx opset version.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README_EN.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nregister_custom_op_symbolic(\"aten::threshold\", threshold_symbolic, 12)\n#The first parameter, \"aten::threshold\", must match the existing op definition of pytorch and cannot be changed at will.\n#The second parameter is the op mapping function defined earlier\n#The third parameter is the configured onnx-opset version. You can ignore it for now. Just fill in the commonly used opset version.\n```\n\n----------------------------------------\n\nTITLE: Converting MP4 to H265 with FFmpeg\nDESCRIPTION: This command converts an MP4 video file to H265 format using ffmpeg. It takes the input MP4 file and specifies the HEVC codec for the output file.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -i xxx.mp4 -vcodec hevc xxx.hevc\n```\n\n----------------------------------------\n\nTITLE: Running Yolo-v5 Video Demo (H265)\nDESCRIPTION: This command runs the Yolo-v5 video demo with an H265 video stream. The first argument is the RKNN model, the second is the H265 video file, and the third is the codec type (265).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n./rknn_yolov5_video_demo model/<TARGET_PLATFORM>/yolov5s-640-640.rknn xxx.hevc 265\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake and Setting Project Properties\nDESCRIPTION: This snippet initializes the CMake build system and sets basic project properties, including the minimum required CMake version and the project name. It also configures compiler flags for C and C++ to ensure compatibility and enable C++11 features.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(rknn_mobilenet_demo)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n```\n\n----------------------------------------\n\nTITLE: Compile librknn_api_android.so\nDESCRIPTION: These commands compile the librknn_api_android.so library within the Android SDK environment. The `source build/envsetup.sh` command initializes the build environment. `lunch` selects the target device. `mmm` compiles the neuralnetworks interface. The -j16 flag specifies the number of parallel jobs.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/librknn_api_android_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource build/envsetup.sh\nlunch your target ## Choose according to your actual situation\nmmm vendor/rockchip/hardware/interfaces/neuralnetworks/ -j16\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux: Demo Execution\nDESCRIPTION: These commands navigate to the directory containing the demo, set the LD_LIBRARY_PATH, and then execute the rknn_mobilenet_demo with the specified model and image. The LD_LIBRARY_PATH ensures that the necessary libraries are found at runtime.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README_CN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_mobilenet_demo_Linux/\nexport LD_LIBRARY_PATH=./lib\n./rknn_mobilenet_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Define RKNN API Path and Runtime Library\nDESCRIPTION: Defines the path to the RKNN API and sets the RKNN runtime library based on the target system (Android or other). It dynamically sets the library based on the target architecture (aarch64 or armhf).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(RKNN_API_PATH ${CMAKE_SOURCE_DIR}/../../../runtime/${CMAKE_SYSTEM_NAME}/librknn_api)\nif(CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n  set(RKNN_RT_LIB ${RKNN_API_PATH}/${CMAKE_ANDROID_ARCH_ABI}/librknnrt.so)\nelse()\n  if(CMAKE_C_COMPILER MATCHES \"aarch64\")\n    set(LIB_ARCH aarch64)\n  else()\n    set(LIB_ARCH armhf)\n  endif()\n\n  set(RKNN_RT_LIB ${RKNN_API_PATH}/${LIB_ARCH}/librknnrt.so)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Export Model to ONNX\nDESCRIPTION: Exports the PyTorch model `m` to ONNX format using `torch.onnx.export`. It takes the model, input tensors (x, y), the output file name \"dual_residual.onnx\", and the opset version as arguments. This converts the PyTorch model, including the custom operator, into an ONNX graph.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntorch.onnx.export(m, (x, y), \"dual_residual.onnx\", opset_version=12)\n```\n\n----------------------------------------\n\nTITLE: Running Aarch64 Linux Demo\nDESCRIPTION: These commands execute the RKNN mobilenet demo on the target device. It first changes the current directory to the demo directory, then sets the LD_LIBRARY_PATH, and finally executes the demo with the specified model and image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_mobilenet_demo_Linux/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_mobilenet_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Fix libGL.so.1 error in WSL\nDESCRIPTION: These commands install the required libGL library and set the LD_LIBRARY_PATH environment variable to resolve the `ImportError: libGL.so.1: cannot open shared object file: No such file or directory` error when using RKNN-ToolKit2 in WSL.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/Using RKNN-ToolKit2 in WSL.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install libgl1-mesa-glx\necho 'export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/mesa' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Install adbkit and USB-to-TCP Conversion\nDESCRIPTION: These commands install `adbkit` using npm and then use it to forward a USB connection to a TCP port. `device_id` can be obtained using `adb devices` on Windows. Replace `<device_id>` and `<端口号>` with the appropriate values.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/WSL中使用RKNN_ToolKit2.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save adbkit\nadbkit usb-device-to-tcp <device_id> -p <端口号>\n```\n\n----------------------------------------\n\nTITLE: Installing Target and Setting Installation Prefix\nDESCRIPTION: This snippet sets the installation prefix and installs the executable target `rknn_mobilenet_demo`. The `CMAKE_INSTALL_PREFIX` variable defines the base directory where the demo application will be installed. The `install` command copies the executable to the specified destination (./).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# install target and libraries\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/rknn_mobilenet_demo_${CMAKE_SYSTEM_NAME})\ninstall(TARGETS rknn_mobilenet_demo DESTINATION ./)\n```\n\n----------------------------------------\n\nTITLE: Install Android Demo via ADB\nDESCRIPTION: This command pushes the built Android demo to the /data directory on the target device using adb.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_multiple_input_demo_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Building libjpeg-turbo with libjpeg v7 ABI Emulation (CMake)\nDESCRIPTION: This CMake command allows building libjpeg-turbo with emulation of the libjpeg v7 Application Binary Interface (ABI). This is achieved by passing the `-DWITH_JPEG7=1` argument to CMake during the configuration step.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n-DWITH_JPEG7=1\n```\n\n----------------------------------------\n\nTITLE: Example Build Linux Command\nDESCRIPTION: Example command to build the Linux RKNN demo, specifying the target as rk3588, architecture as aarch64, and build type as Release.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Pushing to Android device via ADB\nDESCRIPTION: This command pushes the compiled rknn_benchmark_Android executable to the /data directory on an Android device using ADB. Requires an Android device connected via ADB.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README_CN.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nadb push install/rknn_benchmark_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Android: Demo Execution\nDESCRIPTION: These commands navigate to the directory containing the demo, set the LD_LIBRARY_PATH, and then execute the rknn_mobilenet_demo with the specified model and image. The LD_LIBRARY_PATH ensures that the necessary libraries are found at runtime.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README_CN.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_mobilenet_demo_Android/\nexport LD_LIBRARY_PATH=./lib\n./rknn_mobilenet_demo model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Using in-memory source/destination manager functions\nDESCRIPTION: This snippet demonstrates the usage of `jpeg_mem_src()` and `jpeg_mem_dest()` functions provided by libjpeg-turbo for handling JPEG data in memory. Note that programs using these functions built against libjpeg-turbo 1.3+ must use the libjpeg-turbo 1.3+ DLL at runtime on Windows.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\njpeg_mem_src(/* ... */);\njpeg_mem_dest(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Disabling in-memory source/destination managers via configure\nDESCRIPTION: This configuration argument disables the inclusion of `jpeg_mem_src()` and `jpeg_mem_dest()` functions in libjpeg-turbo, reverting to pre-1.3 behavior where they are only included with libjpeg v8 API/ABI emulation. This is for maintaining strict conformance with libjpeg v6b or v7 API.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-armhf/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--without-mem-srcdst\n```\n\n----------------------------------------\n\nTITLE: Converting TFLite Model with rknn_convert\nDESCRIPTION: This command uses the 'rknn_convert' tool to convert a TFLite model to the RKNN format for a specific target platform. It specifies the target platform ('rk3568'), input configuration file ('./model_config.yml'), and output directory ('./').\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tflite/mobilenet_v1_qat/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: RKNN Toolkit2 Python Dependencies\nDESCRIPTION: Specifies Python package dependencies and version constraints for the RKNN Toolkit2. This includes core dependencies, utility libraries, and deep learning frameworks like ONNX, ONNX Runtime, PyTorch, and TensorFlow. Versions are constrained for compatibility.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/x86_64/requirements_cp39-2.3.2.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# if install failed, please change the pip source to 'https://pypi.tuna.tsinghua.edu.cn/simple/'\n\n# base deps\nprotobuf>=4.21.6,<=4.25.4\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.4\nscipy>=1.5.4\ntqdm>=4.64.0\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\n\n# base\nonnx>=1.16.1\nonnxruntime>=1.10.0\ntorch>=1.10.1,<=2.4.0\n# tensorflow>=2.5.0,<=2.14.0\n```\n\n----------------------------------------\n\nTITLE: Push Demo to Board (RV1106/RV1103)\nDESCRIPTION: Pushes the compiled demo directory to the `/userdata` directory on the target board using `adb`. This requires the board to be connected to the PC via USB and `adb` to be configured correctly. The entire `install/rknn_yolov5_demo_Linux` directory is copied to the board.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/README_CN.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nadb push install/rknn_yolov5_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Checking for Colorspace Extensions in C\nDESCRIPTION: This snippet demonstrates how to check for the existence of colorspace extensions in libjpeg-turbo at compile time using preprocessor directives. It allows you to conditionally compile code based on whether these extensions are available.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-armhf/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_EXTENSIONS\n```\n\n----------------------------------------\n\nTITLE: Build for Arm Linux System\nDESCRIPTION: This shell script builds the application for an Arm Linux system. It requires the GCC_COMPILER environment variable to be set.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README_CN.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# 例如: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Navigate to convert_rknn_demo directory\nDESCRIPTION: This command changes the current directory to the convert_rknn_demo folder, which contains scripts for creating and converting the PyTorch custom operator model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd /path_to_rknn_custom_pytorch_op_demo/convert_rknn_demo/\n```\n\n----------------------------------------\n\nTITLE: Android Build Script Execution\nDESCRIPTION: This script compiles the Android demo for a specific target and architecture, optionally specifying a build type.  It requires the ANDROID_NDK_PATH environment variable to be set. It builds the demo for a specific target, architecture and build type.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# sush as: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Running the Aarch64 Linux Demo\nDESCRIPTION: These shell commands execute the RKNN custom CPU OP demo on the target device after it has been installed. The commands first open an ADB shell, navigate to the demo directory, set the LD_LIBRARY_PATH, and then execute the demo with the specified model, image, and parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_custom_cpu_op_demo_Linux\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_custom_cpu_op_demo model/<TARGET_PLATFORM>/yolox_s_custom_sigmoid.rknn model/test_image.jpg 1\n```\n\n----------------------------------------\n\nTITLE: Fixing Camera Configuration Exception - Java\nDESCRIPTION: This snippet addresses the 'Exception configuring surface' error that occurs during app launch. This is typically caused by an unsupported camera resolution. The fix involves modifying the CAMERA_PREVIEW_WIDTH constant in the HALDefine.java file to a supported resolution.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/README.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Building the Android Demo\nDESCRIPTION: This shell script builds the RKNN custom CPU OP demo for Android. It requires the ANDROID_NDK_PATH environment variable to be set to the path of the Android NDK. The script takes target platform, architecture, and optionally build type as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# sush as: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Set Cross-Compiler Path (Shell)\nDESCRIPTION: This command sets the environment variable `RK_RV1106_TOOLCHAIN` to the path of the cross-compiler for RV1106/RV1103. This is a prerequisite for building the demo application.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README_CN.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport RK_RV1106_TOOLCHAIN=~/opts/toolchain/arm-rockchip830-linux-uclibcgnueabihf/bin/arm-rockchip830-linux-uclibcgnueabihf\n```\n\n----------------------------------------\n\nTITLE: Check for Alpha Channel Colorspace Extensions (Compile Time)\nDESCRIPTION: This snippet shows how to check if alpha channel colorspace extensions are available in libjpeg-turbo at compile time. If JCS_ALPHA_EXTENSIONS is defined, the alpha channel extensions (JCS_EXT_RGBA, JCS_EXT_BGRA, JCS_EXT_ABGR, JCS_EXT_ARGB) can be used.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/OpenCV-android-sdk/sdk/etc/licenses/libjpeg-turbo-README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_ALPHA_EXTENSIONS\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building Android Demo\nDESCRIPTION: This command builds the Android demo. It requires the ANDROID_NDK_PATH environment variable to be set to the path of the Android NDK. The script takes target architecture, target, and build type as arguments. The target specifies the RK chip. The arch specifies the target architecture and the build_type specifies the build configuration (e.g., Release).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_api_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Execute rknn_create_mem_demo\nDESCRIPTION: This command executes the compiled `rknn_create_mem_demo` application on the target Android device. It takes the path to the RKNN model and the input image as arguments. The demo performs inference using the specified model and input.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/librknn_api_android_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrknn_create_mem_demo /data/model/RK3566_RK3568/mobilenet_v1.rknn /data/model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Running the Android Demo\nDESCRIPTION: These shell commands execute the RKNN custom CPU OP demo on the target device after it has been installed. The commands open an ADB shell, navigate to the demo directory, set the LD_LIBRARY_PATH, and then execute the demo with the specified model, image, and parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_custom_cpu_op_demo_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_custom_cpu_op_demo model/<TARGET_PLATFORM>/yolox_s_custom_sigmoid.rknn model/test_image.jpg 1\n```\n\n----------------------------------------\n\nTITLE: Building for Aarch64 Linux\nDESCRIPTION: This script compiles the rknn_benchmark tool for Aarch64 Linux platform. It requires setting the GCC_COMPILER environment variable and uses the build-linux.sh script with target architecture and build type arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README_CN.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>] \n# 例如: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Expected Accuracy Analysis Results\nDESCRIPTION: This output shows the expected accuracy analysis results after performing quantization. It includes the simulator error for each layer, with both entire and single values, represented by cosine similarity and Euclidean distance. Note that the specific results may vary slightly depending on the platform, tool version, and drivers used.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/hybrid_quant/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlayer_name                                                                                                            simulator_error                    \n                                                                                                                  entire              single             \n                                                                                                               cos      euc        cos      euc          \n-----------------------------------------------------------------------------------------------------------------------------------------------------\n[Input] FeatureExtractor/MobilenetV2/MobilenetV2/input:0                                                     1.00000 | 0.0       1.00000 | 0.0           \n[exDataConvert] FeatureExtractor/MobilenetV2/MobilenetV2/input:0_int8                                        0.99996 | 2.0377    0.99996 | 2.0377        \n[Conv] Conv__350:0                                                                                           \n[Clip] FeatureExtractor/MobilenetV2/Conv/Relu6:0                                                             0.99998 | 9.5952    0.99998 | 9.5952        \n[Conv] FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/batchnorm/add_1:0                      \n[Clip] FeatureExtractor/MobilenetV2/expanded_conv/depthwise/Relu6:0                                          0.99951 | 65.269    0.99957 | 61.673        \n\n....\n\n[Concat] concat:0_before_conv                                                                                0.99817 | 9.3381    1.00000 | 0.0317        \n[exDataConvert] concat:0_before_conv__int8                                                                   0.99812 | 9.4634    0.99994 | 1.6116        \n[Conv] concat:0_int8                                                                                         0.99812 | 9.4634    0.99994 | 1.6115        \n[exDataConvert] concat:0                                                                                     0.99812 | 9.4634    0.99994 | 1.6115        \n```\n\n----------------------------------------\n\nTITLE: Disabling in-memory source/destination managers via cmake\nDESCRIPTION: This cmake argument disables the inclusion of `jpeg_mem_src()` and `jpeg_mem_dest()` functions in libjpeg-turbo. It provides an alternative way to exclude these functions during the build process, offering control over API compatibility.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-armhf/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n-DWITH_MEM_SRCDST=0\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux Installation (ADB Push)\nDESCRIPTION: Copies the compiled Linux demo application to the `/userdata` directory on the Rockchip EVB board using ADB (Android Debug Bridge).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README_CN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_multiple_input_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Construct Model with Custom Op\nDESCRIPTION: Defines a PyTorch model `Fake_model` that utilizes the custom operator 'dual_residual'. The forward method calls the custom operator `torch.ops.cst.dual_residual` with input tensors x, y, and a constant alpha. The results are then returned as the output of the model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_pytorch_op/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Fake_model(torch.nn.Module):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.const = .5\n\n    def forward(self, x, y):\n        r1, r2 = torch.ops.cst.dual_residual(x, y, self.const)\n        return r1, r2\n```\n\n----------------------------------------\n\nTITLE: Navigate to Demo Directory (Shell)\nDESCRIPTION: These commands execute in an `adb shell` environment. The first command opens a shell on the device. The second command changes the current directory to the location where the demo was pushed.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README_CN.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_mobilenet_demo_Linux/\n```\n\n----------------------------------------\n\nTITLE: ADB Push Command (Android)\nDESCRIPTION: This command pushes the compiled rknn_matmul_api_demo_Android executable to the /data directory on an Android device connected via ADB.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_matmul_api_demo/README_CN.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_matmul_api_demo_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Compile Demo (Shell)\nDESCRIPTION: This script compiles the RKNN demo for the specified target platform (`TARGET_PLATFORM`) in Release mode.  The `-t` flag specifies the target platform (RV1106, RV1106B, RV1103, or RV1103B) and the `-b` flag specifies the build type (Release).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README_CN.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./build-linux.sh -t <TARGET_PLATFORM> -b Release\n```\n\n----------------------------------------\n\nTITLE: Pushing Android Demo Files to Device\nDESCRIPTION: These commands push the compiled Android demo files to the target device via adb. It requires adb to be configured and the device to be connected. It remounts the filesystem as read-write before pushing the files to the /data/ directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb root\nadb remount\nadb push install/rknn_yolov5_demo /data/\n```\n\n----------------------------------------\n\nTITLE: Building for Android\nDESCRIPTION: This script compiles the rknn_benchmark tool for Android. It requires setting the ANDROID_NDK_PATH environment variable and uses the build-android.sh script with target architecture and build type arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README_CN.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# 例如: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Android Compilation\nDESCRIPTION: Compiles the Android demo application for the specified target architecture and build type. It requires setting the `ANDROID_NDK_PATH` environment variable pointing to the Android NDK (Native Development Kit) path.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README_CN.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# 例如: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Build rknn_create_mem_demo\nDESCRIPTION: This snippet shows how to compile the `rknn_create_mem_demo` application after copying the RKNPU2 SDK into the Android SDK root directory. It uses `mmm` to build the demo, which is located in the `rknpu2/examples/librknn_api_android_demo` directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/librknn_api_android_demo/README_CN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmmm rknpu2/examples/librknn_api_android_demo\n```\n\n----------------------------------------\n\nTITLE: Running the test script in Python\nDESCRIPTION: This command executes the test.py script, which handles the model conversion, custom operator registration, inference, and result saving. The default target platform is RK3588, which can be modified in the script.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/model/convert/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Build RKNN Benchmark on Android\nDESCRIPTION: Builds the rknn_benchmark tool for Android. It requires setting the ANDROID_NDK_PATH environment variable and then executing the build-android.sh script with target, architecture, and build type parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# sush as: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: rknn-toolkit2 Dependency List\nDESCRIPTION: This snippet shows a list of Python package dependencies with version constraints required for the rknn-toolkit2 project. These packages are necessary for the proper functioning of the toolkit and its associated functionalities. The comments suggest that the pip source may need to be changed if installation fails.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/x86_64/requirements_cp37-2.3.2.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# if install failed, please change the pip source to 'https://pypi.tuna.tsinghua.edu.cn/simple/'\n\n# base deps\nprotobuf>=3.20.2,<=3.20.3\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.4\nscipy>=1.5.4\ntqdm>=4.64.0\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\n\n# base\nonnx>=1.10.0\nonnxruntime>=1.10.0\ntorch>=1.10.1,<=2.4.0\n# tensorflow>=1.13.1,<=2.8.1\n```\n\n----------------------------------------\n\nTITLE: Install autosparsity package using pip\nDESCRIPTION: This command installs the autosparsity package using pip. It assumes the wheel file is located in the `../packages/` directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/examples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ../packages/autosparsity-1.0-cp38-cp38m-linux_x86_64.whl\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name. Setting the minimum required version ensures compatibility and access to specific CMake features.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(rknn_yolov5_demo)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags\nDESCRIPTION: This snippet sets the compiler flags for C and C++ compilers. The `-Wl,--allow-shlib-undefined` flag allows undefined symbols in shared libraries, and `-std=c++11` specifies the C++11 standard.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wl,--allow-shlib-undefined\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wl,--allow-shlib-undefined\")\n```\n\n----------------------------------------\n\nTITLE: Android: Build Script Execution\nDESCRIPTION: This script builds the mobilenet_v1 demo for a specified target platform and architecture on Android. The script takes target, architecture, and optionally build type as parameters.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README_CN.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n\n# 例如: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Setting Cross Compiler Path (Shell)\nDESCRIPTION: This snippet shows how to set the `RK_RV1106_TOOLCHAIN` environment variable to specify the path to the cross-compiler for RV1106 and RV1103.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport RK_RV1106_TOOLCHAIN=~/opts/toolchain/arm-rockchip830-linux-uclibcgnueabihf/bin/arm-rockchip830-linux-uclibcgnueabihf\n```\n\n----------------------------------------\n\nTITLE: Registering ONNX Symbolic - Example 2\nDESCRIPTION: Registers a custom ONNX symbolic function for the `aten::threshold` operator. This example shows how to record operator attributes (threshold and value) in the ONNX graph. The attributes are specified as keyword arguments in the `g.op` call, with the suffix `_{type}` indicating the data type.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n'''\n例子二\n当需要记录op属性时，必须在 g.op 中声明，声明方式为添加参数关键字，请注意参数关键字的结尾需要用 _{type} 声明数据类型，这里由于每一个参数都是浮点型，故末尾加上 _f 的数据类型声明\n'''\n@parse_args('v', 'f', 'f')\ndef threshold_symbolic(g, x, threshold, value):\n    output = g.op(\"rknn_cst::cstThreshold\", x, threshold_f=threshold, value_f=value)\n    return output\n```\n\n----------------------------------------\n\nTITLE: Compiling Demo (Shell)\nDESCRIPTION: This script compiles the demo application for the specified target platform (RV1106, RV1106B, RV1103, RV1103B) in Release mode.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./build-linux.sh -t <TARGET_PLATFORM> -b Release\n```\n\n----------------------------------------\n\nTITLE: Configuring libjpeg-turbo without in-memory source/destination managers\nDESCRIPTION: This snippet shows how to configure libjpeg-turbo to exclude the in-memory source/destination managers (jpeg_mem_src() and jpeg_mem_dest()) to maintain strict conformance with the libjpeg v6b or v7 API. It uses the configure script with the `--without-mem-srcdst` argument or CMake with the `-DWITH_MEM_SRCDST=0` argument.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nconfigure --without-mem-srcdst\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncmake -DWITH_MEM_SRCDST=0\n```\n\n----------------------------------------\n\nTITLE: Install Target and Libraries\nDESCRIPTION: This snippet defines the installation prefix and specifies the installation targets, including the executable and the RKNN runtime library.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# install target and libraries\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/rknn_benchmark_${CMAKE_SYSTEM_NAME})\ninstall(TARGETS rknn_benchmark DESTINATION ./)\ninstall(PROGRAMS ${RKNN_RT_LIB} DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Android: File Transfer via ADB\nDESCRIPTION: This command pushes the compiled rknn_mobilenet_demo_Android to the /data directory on the target device using ADB. This step is necessary to install the demo application on the device for execution.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README_CN.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_mobilenet_demo_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Compile librknn_api_android_demo\nDESCRIPTION: This command compiles the demo application, `rknn_create_mem_demo`, within the Android SDK environment. It assumes that the RKNPU2 SDK is copied to the root of the Android SDK.  The `mmm` command compiles the specified demo application.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/librknn_api_android_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmmm rknpu2/examples/librknn_api_android_demo\n```\n\n----------------------------------------\n\nTITLE: Aarch64 Linux Compilation\nDESCRIPTION: Compiles the Linux demo application for the specified target architecture and build type. It requires setting the `GCC_COMPILER` environment variable pointing to the AArch64 Linux GNU compiler.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README_CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# 例如: \n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Run Linux Demo via ADB Shell\nDESCRIPTION: These commands execute the RKNN multiple input demo on the target device after connecting via adb shell. It sets the LD_LIBRARY_PATH and runs the demo with the specified model and input data.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_multiple_input_demo_Linux/\n```\n\n----------------------------------------\n\nTITLE: Install Linux Demo via ADB\nDESCRIPTION: This command pushes the compiled Linux demo to the /data/ directory on a Rockchip EVB board using ADB. It assumes that the device is connected and ADB is properly configured.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_custom_gpu_op_demo_Linux/ /data/\n```\n\n----------------------------------------\n\nTITLE: Push Demo to Android Device via ADB\nDESCRIPTION: This command pushes the compiled demo application directory to the /data directory on the Android device using the adb command. It requires root access and remounting of the filesystem.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README_CN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb push ./install/rknn_dynshape_demo_Android/ /data\n注意：如果是安卓系统，需要adb root & adb remount\n```\n\n----------------------------------------\n\nTITLE: Run Aarch64 Linux Demo\nDESCRIPTION: These commands set the `LD_LIBRARY_PATH` and execute the demo application. The `<TARGET_PLATFORM>` should match the target platform used during the build process. Input files must exist.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_custom_pytorch_op_demo_Linux\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_custom_pytorch_op_demo model/<TARGET_PLATFORM>/dual_residual_custom.rknn\nmodel/dual_residual_input_0_nhwc.npy#model/dual_residual_input_1_nhwc.npy  1\n```\n\n----------------------------------------\n\nTITLE: Alternative Pip Source\nDESCRIPTION: This comment suggests changing the pip source to 'https://mirror.baidu.com/pypi/simple' if the package installation fails using the default pip source. This is a common workaround for network connectivity issues or slow download speeds when installing Python packages.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/arm64/arm64_requirements_cp312.txt#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n# if install failed, please change the pip source to 'https://mirror.baidu.com/pypi/simple'\n```\n\n----------------------------------------\n\nTITLE: rknn-toolkit2 Python Dependencies\nDESCRIPTION: This snippet lists the Python dependencies required for the rknn-toolkit2 project along with specific version constraints. These dependencies include protobuf, psutil, ruamel.yaml, scipy, tqdm, opencv-python, fast-histogram, numpy, onnx, onnxruntime, torch, and tensorflow. The snippet suggests changing the pip source to 'https://pypi.tuna.tsinghua.edu.cn/simple/' if installation fails.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/x86_64/requirements_cp38-2.3.2.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# if install failed, please change the pip source to 'https://pypi.tuna.tsinghua.edu.cn/simple/'\n\n# base deps\nprotobuf>=4.21.6,<=4.25.4\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.4\nscipy>=1.5.4\ntqdm>=4.64.0\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\n\n# base\nonnx>=1.16.1\nonnxruntime>=1.10.0\ntorch>=1.10.1,<=2.4.0\n# tensorflow>=2.2.0,<=2.13.1\n```\n\n----------------------------------------\n\nTITLE: Install adb in WSL\nDESCRIPTION: These commands update the package list and install the adb (Android Debug Bridge) tool within the WSL environment. adb is necessary for communicating with Android devices connected to the host machine.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/Using RKNN-ToolKit2 in WSL.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install adb\n```\n\n----------------------------------------\n\nTITLE: ONNX Export Error\nDESCRIPTION: This is the error message that occurs when attempting to export a model with an unsupported operator. It signals the need for a custom symbolic function.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/custom_op/gen_custom_onnx_from_pytorch/register_onnx_symbolic/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nraise errors.SymbolicValueError(\ntorch.onnx.errors.SymbolicValueError: Unsupported: ONNX export of operator threshold, non-zero threshold. Please feel free to request support or submit a pull request on PyTorch GitHub: https://github.com/pytorch/pytorch/issues\n```\n\n----------------------------------------\n\nTITLE: Build Linux Demo\nDESCRIPTION: This script builds the Linux demo for a specific target platform, architecture, and build type. It requires the GCC_COMPILER environment variable to be set to the path of the AArch64 cross-compiler.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: This code snippet shows how to run the test script using python. The script will perform inference using a pre-converted RKNN model and print the top 5 classification results for a test image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit-lite2/examples/resnet18/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Run Android Demo\nDESCRIPTION: These commands set the `LD_LIBRARY_PATH` and execute the demo application. The `<TARGET_PLATFORM>` should match the target platform used during the build process. Input files must exist.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_custom_pytorch_op_demo_Android/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_custom_pytorch_op_demo model/<TARGET_PLATFORM>/dual_residual_custom.rknn\nmodel/dual_residual_input_0_nhwc.npy#model/dual_residual_input_1_nhwc.npy  1\n```\n\n----------------------------------------\n\nTITLE: Running the RKNN Test Script in Python\nDESCRIPTION: This code snippet shows how to execute the test script for RKNN models. It's a simple command-line instruction to run the 'test.py' file using the Python interpreter.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/multi_batch/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Installing Android Demo via ADB\nDESCRIPTION: This command pushes the compiled RKNN mobilenet demo to the /data/ directory of the target Android device using ADB. It requires the device to be connected and ADB to be configured correctly.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_mobilenet_demo_Android /data/\n```\n\n----------------------------------------\n\nTITLE: Install ADB in WSL (Ubuntu)\nDESCRIPTION: These commands update the package list and install ADB (Android Debug Bridge) in the WSL environment. ADB is required for connecting to and communicating with Android devices.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/WSL中使用RKNN_ToolKit2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install adb\n```\n\n----------------------------------------\n\nTITLE: Installing rknn_common_test on Aarch64 Linux\nDESCRIPTION: This command copies the built `rknn_common_test_Linux` executable to the `/userdata/` directory on the target device using `adb`. This assumes that the device is connected and accessible via `adb`.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_common_test/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_common_test_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Pushing Linux Demo Files to Device via ADB\nDESCRIPTION: This command pushes the compiled Linux demo files to the target device via adb. Assumes adb is configured. It copies the executable to the /userdata directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_yolov5_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Pushing Aarch64 Linux Demo Files (ADB)\nDESCRIPTION: This command pushes the compiled demo files to the board using adb. This is specific to Rockchip EVB boards. It pushes the rknn_yolov5_demo_Linux executable to the /userdata/ directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_yolov5_demo_Linux /userdata/\n```\n\n----------------------------------------\n\nTITLE: Set Installation Prefix\nDESCRIPTION: Defines the installation prefix for the project. This is where the installed files will be located after the installation process. Includes the system name in the install path.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/rknn_custom_cpu_op_demo_${CMAKE_SYSTEM_NAME})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for RV1106/RV1103 SOCs\nDESCRIPTION: This snippet conditionally adds another executable target `rknn_mobilenet_nhwc_demo` if the `TARGET_SOC` variable is set to `RV1106_RV1103`. This allows for building a separate demo application specifically for these SOCs, potentially with different optimizations or configurations.  It also links against the RKNN runtime library and installs the target.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET_SOC STREQUAL \"RV1106_RV1103\")\n  add_executable(rknn_mobilenet_nhwc_demo\n      src/main_nhwc.cc\n  )\n  target_link_libraries(rknn_mobilenet_nhwc_demo\n    ${RKNN_RT_LIB}\n  )\n  install(TARGETS rknn_mobilenet_nhwc_demo DESTINATION ./)\nendif()\n```\n\n----------------------------------------\n\nTITLE: rknn-toolkit2 Dependency List\nDESCRIPTION: This snippet defines the dependencies required for the rknn-toolkit2 project using a format suitable for pip. It includes version constraints using operators like >=, <=, and == to ensure compatibility between the toolkit and its dependencies.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/x86_64/requirements_cp312-2.3.2.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# if install failed, please change the pip source to 'https://pypi.tuna.tsinghua.edu.cn/simple/'\n\n# base deps\nprotobuf>=4.21.6,<=4.25.4\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.21\nscipy>=1.9.3\ntqdm>=4.64.1\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\n\n# base\nonnx>=1.16.1\nonnxruntime>=1.17.0\ntorch>=1.10.1,<=2.4.0\n# tensorflow<=2.16.0rc0\n```\n\n----------------------------------------\n\nTITLE: Build Android Demo\nDESCRIPTION: This script builds the Android demo for a specific target platform, architecture, and build type. It requires the ANDROID_NDK_PATH environment variable to be set to the path of the Android NDK.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Convert model using rknn_convert\nDESCRIPTION: This snippet shows how to convert a model using rknn_convert for a specific target (rk3568) using the specified model configuration file (model_config.yml).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tensorflow/ssd_mobilenet_v1/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m rknn.api.rknn_convert -t rk3568 -i ./model_config.yml -o ./\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project and compiler flags\nDESCRIPTION: This snippet sets the minimum required CMake version, project name, and compiler flags for C and C++. It also configures C++11 standard support.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(rknn_multiple_input_demo)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: This command executes the test.py script.  This script likely performs inference on the converted RKNN model using a test image and prints the top 5 classification results.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tensorflow/inception_v3_qat/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Run Linux Demo on Device\nDESCRIPTION: These commands execute the RKNN custom GPU operator demo on a Linux device via ADB shell. It sets the LD_LIBRARY_PATH and runs the demo with the specified model, image, and argument.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /data/rknn_custom_gpu_op_demo_Linux\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_custom_gpu_op_demo model/<TARGET_PLATFORM>/pp_human_segv2_custom_argmax.rknn model/test_image.jpg 1\n```\n\n----------------------------------------\n\nTITLE: Install Android Demo via ADB\nDESCRIPTION: This command pushes the compiled Android demo to the /data/ directory on an Android device using ADB. It assumes that the device is connected and ADB is properly configured.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_custom_gpu_op_demo_Android/ /data/\n```\n\n----------------------------------------\n\nTITLE: Install Custom Op Plugin Library\nDESCRIPTION: This command pushes the compiled custom operator plugin library to the appropriate directory on the target device (either Linux or Android).  The location depends on the platform.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_gpu_op_demo/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_custom_gpu_op_demo_Linux/lib/librkcst_argmax.so /usr/lib/rknpu/op_plugins\n```\n\n----------------------------------------\n\nTITLE: Set Runtime Library Path\nDESCRIPTION: This command sets the LD_LIBRARY_PATH environment variable to include the ./lib directory, ensuring that the runtime libraries are found when the application is executed.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README_CN.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n```\n\n----------------------------------------\n\nTITLE: Dependency List\nDESCRIPTION: This snippet lists the required Python packages along with their version constraints for the rknn-toolkit2 project. It specifies the versions of packages like protobuf, psutil, ruamel.yaml, scipy, tqdm, opencv-python, fast-histogram, numpy, onnx, onnxoptimizer, onnxruntime, and torch. These dependencies are crucial for the proper functioning of the toolkit.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/arm64/arm64_requirements_cp37.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprotobuf==3.20.3\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.4\nscipy>=1.5.4\ntqdm>=4.64.0\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\n\n# base\nonnx==1.14.1\nonnxoptimizer==0.2.7\nonnxruntime==1.14.1\ntorch>=1.10.1,<=2.1.0\n```\n\n----------------------------------------\n\nTITLE: Connect to device via Ethernet in WSL\nDESCRIPTION: This command connects to an Android device via its IP address. Replace `<IP address:port>` with the actual IP address and port of the target device.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/Using RKNN-ToolKit2 in WSL.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadb connect <IP address:port>\n```\n\n----------------------------------------\n\nTITLE: Installing the Aarch64 Linux Demo\nDESCRIPTION: This ADB command pushes the compiled RKNN custom CPU OP demo to the /data/ directory of the connected Android device. This is specifically for Rockchip's EVB boards.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nadb push install/rknn_custom_cpu_op_demo_Linux/ /data/\n```\n\n----------------------------------------\n\nTITLE: Building libjpeg-turbo with libjpeg v8 ABI Emulation (CMake)\nDESCRIPTION: This CMake command allows building libjpeg-turbo with emulation of the libjpeg v8 Application Binary Interface (ABI). This is achieved by passing the `-DWITH_JPEG8=1` argument to CMake during the configuration step.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n-DWITH_JPEG8=1\n```\n\n----------------------------------------\n\nTITLE: Running Test Script with Python\nDESCRIPTION: This snippet demonstrates how to execute the test script using Python. It assumes that the necessary dependencies and environment are already set up.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tflite/mobilenet_v1/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Link Libraries\nDESCRIPTION: Links the RKNN runtime library to the executable target 'rknn_custom_cpu_op_demo'.  On Android, it also links the 'log' library.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(rknn_custom_cpu_op_demo\n  ${RKNN_RT_LIB}\n)\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Android\")\n  target_link_libraries(rknn_custom_cpu_op_demo log)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generate Pytorch custom op model\nDESCRIPTION: This command executes a Python script to export a PyTorch custom operator model to ONNX format. It assumes that the rknn-toolkit2 is already properly setup and configured.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 generate_pytorch_custom_op_model.py\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target and Linking Libraries\nDESCRIPTION: This snippet adds an executable target named `rknn_mobilenet_demo` and links it against the RKNN runtime library (`librknnmrt.so`).  The `target_link_libraries` command ensures that the necessary symbols from the RKNN library are available during linking, allowing the demo application to call RKNN API functions.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"lib\")\n\nadd_executable(rknn_mobilenet_demo\n    src/main.cc\n)\n\ntarget_link_libraries(rknn_mobilenet_demo\n  ${RKNN_RT_LIB}\n)\n```\n\n----------------------------------------\n\nTITLE: rknn-toolkit2 Dependencies\nDESCRIPTION: This snippet lists the dependencies required for the rknn-toolkit2 project. It specifies exact or minimum versions for packages like protobuf, psutil, ruamel.yaml, scipy, tqdm, opencv-python, fast-histogram, numpy, onnx, onnxoptimizer, onnxruntime and torch.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/arm64/arm64_requirements_cp310.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nprotobuf==3.20.3\npsutil>=5.9.0\nruamel.yaml>=0.17.21\nscipy>=1.9.3\ntqdm>=4.64.1\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\nonnx==1.16.1\nonnxoptimizer==0.3.8\nonnxruntime>=1.16.0\ntorch>=1.13.1,<=2.2.0\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up the basic CMake project, specifies the minimum required CMake version, and sets compiler flags for C and C++.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(rknn_benchmark)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++14\")\n```\n\n----------------------------------------\n\nTITLE: Installing Models and Data Files\nDESCRIPTION: This snippet installs the models, images, and text files to the specified destination.  It uses `file(GLOB)` to find all JPG and TXT files in the model directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY model/${TARGET_SOC} DESTINATION ./model)\nfile(GLOB IMAGE_FILES \"model/*.jpg\")\ninstall(FILES ${IMAGE_FILES} DESTINATION ./model/)\n\nfile(GLOB TXT_FILES \"model/*.txt\")\ninstall(FILES ${TXT_FILES} DESTINATION ./model/)\n```\n\n----------------------------------------\n\nTITLE: Build Aarch64 Linux Demo\nDESCRIPTION: This command executes a shell script to build the Aarch64 Linux demo application. It requires the GCC_COMPILER environment variable to be set to the path of the Aarch64 cross-compiler.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t <target> -a <arch> -b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-linux.sh -t rk3588 -a aarch64 -b Release\n```\n\n----------------------------------------\n\nTITLE: Installing AutoSparsity Package\nDESCRIPTION: This command installs the AutoSparsity package using pip. It assumes the package file is located in the `packages` directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/autosparsity/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install packages/autosparsity-1.0-cp38-cp38m-linux_x86_64.whl\n```\n\n----------------------------------------\n\nTITLE: Installing Models, Libraries, and Images\nDESCRIPTION: This snippet installs the model files, the RKNN runtime library, and image files required for the demo. It copies the contents of the `model/${TARGET_SOC}` directory to the `./model` directory in the installation prefix.  It also installs the RKNN runtime library to the `lib` directory and copies all JPG images from the `model` directory to the `./model` directory in the installation prefix.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_mobilenet_demo/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY model/${TARGET_SOC} DESTINATION ./model)\ninstall(PROGRAMS ${RKNN_RT_LIB} DESTINATION lib)\nfile(GLOB IMAGE_FILES \"model/*.jpg\")\ninstall(FILES ${IMAGE_FILES} DESTINATION ./model/)\n```\n\n----------------------------------------\n\nTITLE: Build Android Demo\nDESCRIPTION: This command executes a shell script to build the Android demo application. It requires the `ANDROID_NDK_PATH` environment variable to be set to the path of the Android NDK.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_pytorch_op_demo/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Running test.py for Inference\nDESCRIPTION: This command executes the 'test.py' script to perform inference on the TFLite MobileNet V1 QAT model. It requires the necessary dependencies and the model to be available in the same directory or a specified path.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tflite/mobilenet_v1_qat/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Run rknn_create_mem_demo\nDESCRIPTION: This snippet demonstrates how to execute the compiled `rknn_create_mem_demo` application on an Android device. It assumes that the application and model files are located in specific directories on the device. The command takes the path to the RKNN model and the input image as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/librknn_api_android_demo/README_CN.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrknn_create_mem_demo /data/model/RK3566_RK3568/mobilenet_v1.rknn /data/model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Build for Android System\nDESCRIPTION: This shell script builds the application for an Android system. It requires the ANDROID_NDK_PATH environment variable to be set.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README_CN.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\n```\n\nLANGUAGE: shell\nCODE:\n```\n# 例如: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Build Application for Android (RK3562)\nDESCRIPTION: This shell script compiles the application for the RK3562 Android system. It builds the demo application for Android using a predefined build configuration.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_dynamic_shape_input_demo/README_CN.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build-android_RK3562.sh\n```\n\n----------------------------------------\n\nTITLE: Include Directories\nDESCRIPTION: Includes the specified directory containing header files, allowing the compiler to find necessary declarations and definitions during the build process. Here it includes the rga directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/app/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(src/main/cpp/rga)\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: Executes the object detection script using Python. This script performs inference using the converted YOLO V3 model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/darknet/yolov3_416x416/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH\nDESCRIPTION: This command sets the LD_LIBRARY_PATH environment variable, which is used by the dynamic linker to locate shared libraries at runtime.  It adds the specified path to the beginning of the existing LD_LIBRARY_PATH.  <LOCATION_LIBRGA.SO> needs to be the absolute path to the librga.so file.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_demo/README_CN.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib:<LOCATION_LIBRGA.SO>\n```\n\n----------------------------------------\n\nTITLE: Checking for Alpha Channel Colorspace Extensions in C\nDESCRIPTION: This code snippet shows how to verify the presence of alpha channel colorspace extensions in libjpeg-turbo during compilation. It uses a preprocessor directive to check if the `JCS_ALPHA_EXTENSIONS` macro is defined, enabling conditional compilation based on its availability.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-armhf/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_ALPHA_EXTENSIONS\n```\n\n----------------------------------------\n\nTITLE: Running rknn_common_test on Aarch64 Linux\nDESCRIPTION: These commands execute the `rknn_common_test` application on the target device. It first uses `adb shell` to access the device's shell, then navigates to the directory where the executable is located. The `LD_LIBRARY_PATH` is set to include the `./lib` directory, and finally, the `rknn_common_test` application is executed with the specified model and image.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_common_test/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\ncd /userdata/rknn_common_test_Linux/\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=./lib\n./rknn_common_test model/<TARGET_PLATFORM>/mobilenet_v1.rknn model/dog_224x224.jpg\n```\n\n----------------------------------------\n\nTITLE: Installing the Android Demo\nDESCRIPTION: This ADB command pushes the compiled RKNN custom CPU OP demo to the /data/ directory of the connected Android device.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n adb push install/rknn_custom_cpu_op_demo_Android/ /data/\n```\n\n----------------------------------------\n\nTITLE: Check for Colorspace Extensions in libjpeg-turbo (Compile Time)\nDESCRIPTION: This snippet demonstrates how to check for the existence of colorspace extensions in libjpeg-turbo at compile time. This allows you to conditionally enable or disable code that depends on these extensions. If JCS_EXTENSIONS is defined, the extensions are available.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/OpenCV-android-sdk/sdk/etc/licenses/libjpeg-turbo-README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_EXTENSIONS\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Run test.py\nDESCRIPTION: This snippet shows how to execute the test.py script to run object detection with the TensorFlow SSD Mobilenet V1 model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/tensorflow/ssd_mobilenet_v1/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Create and Name Native Library\nDESCRIPTION: Creates and names a shared library named 'rknn4j'. It specifies the source files to be compiled into the library, which include C++ sources and a header file related to the rknn API, object tracking and image processing.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/app/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( # Sets the name of the library.\n             rknn4j\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/cpp/native-lib.cc\n             src/main/cpp/post_process.cc\n             src/main/cpp/yolo_image.cc\n             src/main/cpp/rknn_api.h\n             src/main/cpp/object_tracker/track_link.cc\n             src/main/cpp/object_tracker/objects_tracker.cc\n             src/main/cpp/object_tracker/objects_update.cc\n             )\n```\n\n----------------------------------------\n\nTITLE: Checking for Alpha Channel Colorspace Extensions (C)\nDESCRIPTION: This C code snippet demonstrates how to check for the existence of the alpha channel colorspace extensions in libjpeg-turbo at compile time. It relies on the `#ifdef` preprocessor directive to conditionally compile code that utilizes alpha channel functionality. If `JCS_ALPHA_EXTENSIONS` is defined, it indicates that alpha channel extensions are supported.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_ALPHA_EXTENSIONS\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Set RKNN API Path and Library\nDESCRIPTION: This snippet defines the path to the RKNN API and sets the appropriate librknnrt.so library based on the target system (Android or other) and architecture (aarch64 or armhf). It includes the necessary header files.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_benchmark/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# rknn api\nset(RKNN_API_PATH ${CMAKE_SOURCE_DIR}/../../runtime//${CMAKE_SYSTEM_NAME}/librknn_api)\nif (CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n  set(RKNN_RT_LIB ${RKNN_API_PATH}/${CMAKE_ANDROID_ARCH_ABI}/librknnrt.so)\nelse()\n  if (CMAKE_C_COMPILER MATCHES \"aarch64\")\n    set(LIB_ARCH aarch64)\n  else()\n    set(LIB_ARCH armhf)\n  endif()\n  set(RKNN_RT_LIB ${RKNN_API_PATH}/${LIB_ARCH}/librknnrt.so)\nendif()\ninclude_directories(${RKNN_API_PATH}/include)\n```\n\n----------------------------------------\n\nTITLE: Running the Test Script\nDESCRIPTION: Executes the test script to perform inference on the converted QAT model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/pytorch/resnet18_qat/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Defining RKNN API path and runtime library\nDESCRIPTION: This snippet defines the path to the RKNN API and sets the RKNN runtime library (librknnrt.so) location based on the target system (Android or Linux) and architecture (ARMHF or AArch64). It also includes the RKNN API include directory for header files.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# rknn api\nset(RKNN_API_PATH ${CMAKE_SOURCE_DIR}/../../runtime//${CMAKE_SYSTEM_NAME}/librknn_api)\nif (CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n  set(RKNN_RT_LIB ${RKNN_API_PATH}/${CMAKE_ANDROID_ARCH_ABI}/librknnrt.so)\nelse()\n  if (CMAKE_C_COMPILER MATCHES \"aarch64\")\n    set(LIB_ARCH aarch64)\n  else()\n    set(LIB_ARCH armhf)\n  endif()\n  set(RKNN_RT_LIB ${RKNN_API_PATH}/${LIB_ARCH}/librknnrt.so)\nendif()\ninclude_directories(${RKNN_API_PATH}/include)\n```\n\n----------------------------------------\n\nTITLE: Add Executable\nDESCRIPTION: Adds the executable target 'rknn_custom_cpu_op_demo' and specifies the source file to be compiled (src/rknn_api_test_custom_cpu_op.cpp).\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(rknn_custom_cpu_op_demo\n  src/rknn_api_test_custom_cpu_op.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Python Script Usage\nDESCRIPTION: This snippet shows how to execute the provided Python script.  The target platform should be modified as needed in the script for specific debugging.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/npu_device_test/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Setting RKNN API Path and Include Directories\nDESCRIPTION: This snippet sets the path to the RKNN API and adds include directories for the RKNN API and other dependencies.  It also specifies the path to the RKNN runtime library.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(RKNN_API_PATH ${CMAKE_SOURCE_DIR}/../../../runtime/${CMAKE_SYSTEM_NAME}/librknn_api)\nset(RKNN_RT_LIB ${RKNN_API_PATH}/armhf-uclibc/librknnmrt.so)\n\ninclude_directories(${RKNN_API_PATH}/include)\ninclude_directories(${CMAKE_SOURCE_DIR}/../../3rdparty)\n\n# rknn_yolov5_demo\ninclude_directories(${CMAKE_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Transpose and Merge Dimensions\nDESCRIPTION: Examples demonstrating how to transpose and merge dimensions of a 4D tensor using the onnx_edit tool. 'a,b,c,d->ad,c,b' merges the first and last dimensions after transposing. 'a,b,c,d->d,acb,1' merges the first three dimensions into one dimension and inserts a dimension of size 1.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README_EN.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n4. Transpose, merge dim:            'a,b,c,d->ad,c,b' or 'a,b,c,d->d,acb,1'\n```\n\n----------------------------------------\n\nTITLE: Transformation Log Example\nDESCRIPTION: This is an example log output from the onnx_edit tool, illustrating how the tool transforms the input and output tensors of an ONNX model.  It shows the original shape of the tensor, the transformed shape according to the provided equation, and the reshape/transpose operations inserted to achieve the transformation.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README_EN.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nI For 'k_cache.1':'a,b,c,d->1,ad,b,c'\n  Input:'k_cache.1' was reset as shape-[1, 32, 48, 1].(Origin shape is [4, 48, 1, 8])\n  Insert ops to transform [1, 32, 48, 1] to [4, 48, 1, 8]:\n  - Insert reshape op. [1, 32, 48, 1] reshape to [4, 8, 48, 1].\n  - Insert transpose op. [4, 8, 48, 1] transpose(0, 2, 3, 1) to [4, 48, 1, 8].\nI For 'k_cache':'a,b,c,d->1,ab,c,d'\n  Output:'k_cache' was reset as shape-[1, 32, 48, 1].(Origin shape is [4, 8, 48, 1]) \n  Insert ops to transform [4, 8, 48, 1] to [1, 32, 48, 1]:\n  - Insert reshape op. [4, 8, 48, 1] reshape to [1, 32, 48, 1].\n```\n\n----------------------------------------\n\nTITLE: Find Prebuilt Library\nDESCRIPTION: Locates a prebuilt NDK library ('log') and stores its path in a variable ('log-lib').  This allows the library to be linked to the target library. The NDK library provides logging functionality.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/app/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log )\n```\n\n----------------------------------------\n\nTITLE: Expected Results\nDESCRIPTION: Shows the expected output of the test script, which includes the top 5 predicted labels and their corresponding scores. Results may vary slightly depending on the platform, tool versions and drivers.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/pytorch/resnet18_qat/README.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n-----TOP 5-----\n[812] score:0.999741 class:\"space shuttle\"\n[404] score:0.000194 class:\"airliner\"\n[657] score:0.000015 class:\"missile\"\n[466] score:0.000008 class:\"bullet train, bullet\"\n[744] score:0.000008 class:\"projectile, missile\"\n```\n\n----------------------------------------\n\nTITLE: Installing Target and Libraries\nDESCRIPTION: This snippet installs the target executable and the RKNN runtime library to the specified destination.  The installation path is based on the build directory.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# install target and libraries\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/rknn_yolov5_demo_${CMAKE_SYSTEM_NAME})\ninstall(TARGETS rknn_yolov5_demo DESTINATION ./)\n\n\ninstall(PROGRAMS ${RKNN_RT_LIB} DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Pip Source Recommendation\nDESCRIPTION: This snippet suggests changing the pip source to 'https://pypi.tuna.tsinghua.edu.cn/simple/' if the installation of rknn-toolkit2 fails. This is often recommended when the default pip source is slow or unreliable, especially in certain geographic locations.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/x86_64/requirements_cp36-2.3.2.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n# if install failed, please change the pip source to 'https://pypi.tuna.tsinghua.edu.cn/simple/'\n```\n\n----------------------------------------\n\nTITLE: Building Android Demo\nDESCRIPTION: This script builds the RKNN mobilenet demo for Android. It requires the ANDROID_NDK_PATH environment variable to be set. The script takes target platform, architecture, and build type as arguments.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_mobilenet_demo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build-android.sh -t <target> -a <arch> [-b <build_type>]\\n# sush as: \n./build-android.sh -t rk3568 -a arm64-v8a -b Release\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name as 'rknn_custom_cpu_op_demo'. This name is used to identify the project in CMake and during the build process.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(rknn_custom_cpu_op_demo)\n```\n\n----------------------------------------\n\nTITLE: Split, Transpose, and Merge Dimensions\nDESCRIPTION: Examples demonstrating splitting, transposing, and merging dimensions of a tensor using `onnx_edit`. 'a,bc,de,f[b=2,d=4]->ab,fe,dc,1' splits dimensions 'bc' and 'de' based on provided assignments, then transposes and merges the resulting dimensions.  'a,bc,de,f[b=2,c=24,d=4]->ab,fe,dc,1' is similar but provides specific values for more split dimensions.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/onnx_edit/README_EN.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n5. Split dim, transpose, merge dim: 'a,bc,de,f[b=2,d=4]->ab,fe,dc,1',  \t\t#  'c','e' will be auto infered\n6. Split dim, transpose, merge dim: 'a,bc,de,f[b=2,c=24,d=4]->ab,fe,dc,1',  #  'bc' = 24 shuold be equal to tensor's 2nd-dim, 'e' will be auto infered\n```\n\n----------------------------------------\n\nTITLE: Checking for Colorspace Extensions in libjpeg-turbo (C)\nDESCRIPTION: This C code snippet demonstrates how to check for the existence of the libjpeg-turbo colorspace extensions at compile time using the preprocessor directive `#ifdef`. This allows applications to conditionally use the extended colorspaces if they are available.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/3rdparty/opencv/opencv-linux-aarch64/share/OpenCV/licenses/libjpeg-turbo-README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifdef JCS_EXTENSIONS\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Defining rknn-toolkit2 dependencies\nDESCRIPTION: This code defines the dependencies required for the rknn-toolkit2 project using a pip-compatible format.  It specifies the required versions or version ranges for packages such as protobuf, psutil, ruamel.yaml, scipy, tqdm, opencv-python, fast-histogram, numpy, onnx, onnxoptimizer, onnxruntime and torch.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/arm64/arm64_requirements_cp38.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nprotobuf==3.20.3\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.4\nscipy>=1.5.4\ntqdm>=4.64.0\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nnumpy<=1.26.4\n\n# base\nonnx==1.16.1\nonnxoptimizer==0.2.7\nonnxruntime>=1.16.0\ntorch>=1.10.1,<=2.2.0\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH for RV1106/1103 (Shell)\nDESCRIPTION: This shell command demonstrates how to correctly set the LD_LIBRARY_PATH environment variable on RV1106 or RV1103 platforms.  It emphasizes the requirement to use a full path when specifying the library location. This is necessary for the system to properly locate and load the required shared libraries at runtime.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=/userdata/lib\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum version of CMake required to build the native library. This ensures compatibility with the required CMake features and commands.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_yolov5_android_apk_demo/app/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n```\n\n----------------------------------------\n\nTITLE: Adding SOC Specific Definitions\nDESCRIPTION: This snippet adds a preprocessor definition based on the target SOC.  If the target SOC is RV1106_RV1103, then the preprocessor macro DRV1106_RV1103 is defined.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/RV1106_RV1103/rknn_yolov5_demo/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET_SOC STREQUAL \"RV1106_RV1103\")\n    add_definitions(-DRV1106_RV1103)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the CMake features used in the CMakeLists.txt file.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_custom_op_demo/rknn_custom_cpu_op_demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: Executes the test script to perform inference on the ResNet50 V2 model. No specific dependencies are mentioned beyond Python itself, implying standard library usage.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/onnx/resnet50v2/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Example Classification Results\nDESCRIPTION: This output represents the top 5 classification results from the test image, showcasing the labels and corresponding scores. Note that the actual results may vary slightly based on different platforms, tool versions, and driver versions. This provides insight on the accuracy of the pruned model.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/examples/functions/model_pruning/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-----TOP 5-----\n[155] score:0.734863 class:\"Shih-Tzu\"\n[154] score:0.180176 class:\"Pekinese, Pekingese, Peke\"\n[204] score:0.051605 class:\"Lhasa, Lhasa apso\"\n[284] score:0.004234 class:\"Siamese cat, Siamese\"\n[252] score:0.003918 class:\"affenpinscher, monkey pinscher, monkey dog\"\n```\n\n----------------------------------------\n\nTITLE: rknn-toolkit2 Dependencies\nDESCRIPTION: This snippet shows the required Python packages and their specific versions for the rknn-toolkit2 project. These packages are necessary for the toolkit to function correctly.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknn-toolkit2/packages/arm64/arm64_requirements_cp311.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nprotobuf==3.20.3\n\n# utils\npsutil>=5.9.0\nruamel.yaml>=0.17.21\nscipy>=1.9.3\ntqdm>=4.64.1\nopencv-python>=4.5.5.64\nfast-histogram>=0.11\nPillow>=10.0.1\nnumpy<=1.26.4\n\n# base\nonnx==1.16.1\nonnxoptimizer==0.3.8\nonnxruntime>=1.16.0\ntorch>=1.13.1,<=2.2.0\n```\n\n----------------------------------------\n\nTITLE: Connect to Device via TCP using ADB\nDESCRIPTION: This command connects to an Android device over TCP using ADB. Replace `<IP地址:端口号>` with the IP address and port number of the Windows host machine where the USB connection is being forwarded. Requires ADB to be installed.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/WSL中使用RKNN_ToolKit2.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nadb connect <IP地址:端口号>\n```\n\n----------------------------------------\n\nTITLE: Configuring installation directories\nDESCRIPTION: This snippet configures the installation prefix and installs the executable, model directory, RKNN runtime library, and model data files to the specified destination directories. It uses GLOB to find all model binary files.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/rknpu2/examples/rknn_multiple_input_demo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# install target and libraries\nset(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install/rknn_multiple_input_demo_${CMAKE_SYSTEM_NAME})\ninstall(TARGETS rknn_multiple_input_demo DESTINATION ./)\ninstall(DIRECTORY model/${TARGET_SOC} DESTINATION ./model)\ninstall(PROGRAMS ${RKNN_RT_LIB} DESTINATION lib)\nfile(GLOB DATA_FILES \"model/*.bin\")\ninstall(FILES ${DATA_FILES} DESTINATION ./model/)\n```\n\n----------------------------------------\n\nTITLE: Connect to Device via Network using ADB\nDESCRIPTION: This command connects to an Android device over the network using ADB.  Replace `<IP地址:端口号>` with the actual IP address and port number of the device. Requires ADB to be installed.\nSOURCE: https://github.com/airockchip/rknn-toolkit2/blob/master/doc/WSL中使用RKNN_ToolKit2.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadb connect <IP地址:端口号>\n```"
  }
]