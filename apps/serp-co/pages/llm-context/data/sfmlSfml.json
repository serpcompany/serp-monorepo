[
  {
    "owner": "sfml",
    "repo": "sfml",
    "content": "TITLE: Configuring OpenGL Example Build in CMake with SFML\nDESCRIPTION: This CMake script sets up an OpenGL example application using SFML. It defines source files, handles iOS-specific resources, creates the build target with proper dependencies, and configures include paths for external dependencies.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/opengl/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC OpenGL.cpp)\n\nif(SFML_OS_IOS)\n    set(RESOURCES\n        resources/background.jpg\n        resources/tuffy.ttf)\n    set_source_files_properties(${RESOURCES} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)\nendif()\n\n# define the opengl target\nsfml_add_example(opengl GUI_APP\n                 SOURCES ${SRC}\n                 BUNDLE_RESOURCES ${RESOURCES}\n                 DEPENDS SFML::Graphics)\n\n# external dependency headers\ntarget_include_directories(opengl SYSTEM PRIVATE ${PROJECT_SOURCE_DIR}/examples/include)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Vulkan Example in CMake\nDESCRIPTION: This CMake snippet defines and configures a Vulkan example application for SFML. It specifies the source files, adds the example as a GUI application with a dependency on SFML::Graphics, and sets up the necessary include directories for external Vulkan dependencies.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/vulkan/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC Vulkan.cpp)\n\n# define the window target\nsfml_add_example(vulkan GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n\n# external dependency headers\ntarget_include_directories(vulkan SYSTEM PRIVATE ${PROJECT_SOURCE_DIR}/examples/vulkan)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Android Project with CMake\nDESCRIPTION: This CMake script sets up an SFML-based Android project. It defines the project, locates SFML, creates a shared library, and configures necessary linkage for Android compatibility. The script also ensures proper exposure of the ANativeActivity_onCreate function for runtime loading.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/android/app/src/main/jni/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\nproject(sfml-example CXX)\n\nset(SFML_ROOT \"${CMAKE_ANDROID_NDK}/sources/third_party/sfml/lib/${CMAKE_ANDROID_ARCH_ABI}/cmake/SFML\")\n\n# Create the libsfml-example.so library that contains the application's c++ code\nadd_library(sfml-example SHARED main.cpp)\n\n# Find and link SFML\nfind_package(SFML 3 REQUIRED COMPONENTS Graphics Main)\ntarget_link_libraries(sfml-example PRIVATE SFML::Graphics android log)\n\n# The ANativeActivity_onCreate function from SFML::Main needs to be exposed in\n# our libsfml-example.so file so that is can be loaded at runtime.\ntarget_link_libraries(sfml-example PUBLIC\n  -Wl,--whole-archive\n  SFML::Main\n  -Wl,--no-whole-archive\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Target Configuration in SFML 3\nDESCRIPTION: Updated CMake configuration for SFML 3, demonstrating the new namespaced targets (SFML::) and capitalized component names.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SFML 3 REQUIRED COMPONENTS Graphics Audio Network)\n...\ntarget_link_libraries(my_app PRIVATE SFML::Graphics SFML::Audio SFML::Network)\n```\n\n----------------------------------------\n\nTITLE: Window Creation with State in SFML 3\nDESCRIPTION: Updated window creation in SFML 3 using the new State enumeration to specify fullscreen state.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nsf::RenderWindow window(sf::VideoMode::getFullscreenModes().at(0), \"Title\", sf::State::Fullscreen);\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Raw Input Example in CMake\nDESCRIPTION: This CMake snippet sets up the source files and defines the build target for the SFML raw input example. It specifies the source file 'RawInput.cpp' and creates a target named 'raw_input' with a dependency on SFML::Graphics.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/raw_input/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC RawInput.cpp)\n\n# define the raw_input target\nsfml_add_example(raw_input GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Resource Loading Error Handling in SFML 2 vs 3\nDESCRIPTION: Shows the two approaches to resource loading and error handling in SFML 3, maintaining backward compatibility while adding new constructor-based loading.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nsf::SoundBuffer soundBuffer;\nif (!soundBuffer.loadFromFile(\"sound.wav\"))\n{\n    // Handle error\n}\n```\n\nLANGUAGE: cpp\nCODE:\n```\nsf::SoundBuffer soundBuffer;\nif (!soundBuffer.loadFromFile(\"sound.wav\"))\n{\n    // Handle error\n}\n\n// OR\n\nconst sf::SoundBuffer soundBuffer(\"sound.wav\");\n```\n\n----------------------------------------\n\nTITLE: SFML Module Build Configuration\nDESCRIPTION: Configures build options for SFML modules including Window, Graphics, Audio, and Network components. Sets dependencies and relationships between modules.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nsfml_set_option(SFML_BUILD_WINDOW ON BOOL \"ON to build SFML's Window module. This setting is ignored, if the graphics module is built.\")\nsfml_set_option(SFML_BUILD_GRAPHICS ON BOOL \"ON to build SFML's Graphics module.\")\nsfml_set_option(SFML_BUILD_AUDIO ON BOOL \"ON to build SFML's Audio module.\")\nsfml_set_option(SFML_BUILD_NETWORK ON BOOL \"ON to build SFML's Network module.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing RenderStates in SFML 3\nDESCRIPTION: Demonstrates the new RenderStates constructor in SFML 3. It includes additional parameters for stencil mode and coordinate type, reflecting the expanded functionality in SFML 3.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nauto renderStates = sf::RenderStates(sf::BlendAlpha,\n                                     sf::StencilMode(),\n                                     transform,\n                                     sf::CoordinateTye::Pixels,\n                                     texture,\n                                     nullptr);\n```\n\n----------------------------------------\n\nTITLE: Rectangle Intersection in SFML 3\nDESCRIPTION: Example of SFML 3's new findIntersection method that returns a std::optional containing the overlapping area if rectangles intersect.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nsf::IntRect rect1({0, 0}, {200, 200});\nsf::IntRect rect2({100, 100}, {200, 200});\nstd::optional<sf::IntRect> intersection = rect1.findIntersection(rect2);\n// position={100, 100} size={100, 100}\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Tennis Game Build\nDESCRIPTION: CMake configuration that sets up source files and resources for a Tennis game. Includes special handling for iOS builds to properly package audio and font resources. Links against SFML Audio and Graphics modules.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/tennis/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC Tennis.cpp)\nif(SFML_OS_IOS)\n    set(RESOURCES\n        resources/ball.wav\n        resources/tuffy.ttf)\n    set_source_files_properties(${RESOURCES} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)\nendif()\n\n# define the tennis target\nsfml_add_example(tennis GUI_APP\n                 SOURCES ${SRC}\n                 BUNDLE_RESOURCES ${RESOURCES}\n                 DEPENDS SFML::Audio SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Using Vector2 Parameters in SFML 3\nDESCRIPTION: Updated SFML 3 code showing how pairs of parameters are now represented with Vector2 types, making the interface more expressive and composable.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nsf::VideoMode videoMode({480, 640}, 24);\nsf::CircleShape circle(10);\ncircle.setPosition({10, 20});\nsf::IntRect rect({250, 400}, {50, 100});\n```\n\n----------------------------------------\n\nTITLE: Event Handling with handleEvents in SFML 3\nDESCRIPTION: Alternative approach to event handling in SFML 3 using the new handleEvents function with callback functions for different event types.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nconst auto onClose = [&window](const sf::Event::Closed&)\n{\n    window.close();\n};\n\nconst auto onKeyPressed = [&window](const sf::Event::KeyPressed& keyPressed)\n{\n    if (keyPressed.scancode == sf::Keyboard::Scancode::Escape)\n        window.close();\n};\n\nwhile (window.isOpen())\n{\n    window.handleEvents(onClose, onKeyPressed);\n\n    // Remainder of main loop\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling with getIf<T> in SFML 3\nDESCRIPTION: Example of SFML 3's new type-safe event handling using std::optional with getIf<T> and is<T> methods to check event types.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nwhile (window.isOpen())\n{\n    while (const std::optional event = window.pollEvent())\n    {\n        if (event->is<sf::Event::Closed>())\n        {\n            window.close();\n        }\n        else if (const auto* keyPressed = event->getIf<sf::Event::KeyPressed>())\n        {\n            if (keyPressed->scancode == sf::Keyboard::Scancode::Escape)\n                window.close();\n        }\n    }\n\n    // Remainder of main loop\n}\n```\n\n----------------------------------------\n\nTITLE: Shape Rotation in SFML 2 vs 3\nDESCRIPTION: Comparison of shape rotation between SFML 2 and 3, showing the transition to using the new sf::Angle type.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nsf::RectangleShape shape(sf::Vector2f(50, 50));\nshape.setRotation(90);\nstd::cout << \"Rotation: \" << shape.getRotation() << '\\n';\n```\n\nLANGUAGE: cpp\nCODE:\n```\nsf::RectangleShape shape({50, 50});\nshape.setRotation(sf::degrees(90));\nstd::cout << \"Rotation: \" << shape.getRotation().asDegrees() << '\\n';\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Window Example Build\nDESCRIPTION: Configures CMake build settings for an SFML window example. Sets source files, creates the window target with SFML::Window dependency, and configures include directories for external dependencies.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/window/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC Window.cpp)\n\n# define the window target\nsfml_add_example(window GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Window)\n\n# external dependency headers\ntarget_include_directories(window SYSTEM PRIVATE ${PROJECT_SOURCE_DIR}/examples/include)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML VoIP Example Build in CMake\nDESCRIPTION: Configures CMake build settings for an SFML VoIP example application. Sets up source files including VoIP.cpp, Client.cpp, and Server.cpp, and declares dependencies on SFML Audio and Network modules.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/voip/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC VoIP.cpp\n        Client.cpp\n        Server.cpp)\n\n# define the voip target\nsfml_add_example(voip\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Audio SFML::Network)\n```\n\n----------------------------------------\n\nTITLE: Channel Map Implementation in SFML 3\nDESCRIPTION: Demonstrates the new Channel Map feature in SFML 3 for defining sound channel mapping in multi-channel audio systems.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nauto samples = std::vector<std::int16_t>();\n// ...\n\nauto channelMap = std::vector<sf::SoundChannel>{\n    sf::SoundChannel::FrontLeft,\n    sf::SoundChannel::FrontCenter,\n    sf::SoundChannel::FrontRight,\n    sf::SoundChannel::BackRight,\n    sf::SoundChannel::BackLeft,\n    sf::SoundChannel::LowFrequencyEffects\n};\nauto soundBuffer = sf::SoundBuffer(samples.data(), samples.size(), channelMap.size(), 44100, channelMap);\nauto sound = sf::Sound(soundBuffer);\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML X11 Example in CMake\nDESCRIPTION: This CMake snippet sets up an SFML X11 example project. It finds the X11 package, defines source files, creates the target, and sets up dependencies and include directories.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/X11/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(X11 REQUIRED)\n\n# all source files\nset(SRC X11.cpp)\n\n# define the X11 target\nsfml_add_example(X11Example GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Window X11::X11)\n\n# external dependency headers\ntarget_include_directories(X11Example SYSTEM PRIVATE ${PROJECT_SOURCE_DIR}/examples/include)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Sockets Example in CMake\nDESCRIPTION: This CMake snippet defines the source files for the SFML sockets example and creates a build target with a dependency on the SFML Network module. It includes three source files related to socket functionality and uses a custom SFML macro to define the example target.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/sockets/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC Sockets.cpp\n        TCP.cpp\n        UDP.cpp)\n\n# define the sockets target\nsfml_add_example(sockets\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Network)\n```\n\n----------------------------------------\n\nTITLE: Sound Buffer Initialization in SFML 2 vs 3\nDESCRIPTION: Demonstrates the difference in sound buffer initialization between SFML 2 and 3, showing the removal of default constructors.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nconst sf::SoundBuffer soundBuffer(\"sound.flac\");\nsf::Sound sound;\nsound.setBuffer(soundBuffer);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nconst sf::SoundBuffer soundBuffer(\"sound.flac\");\nsf::Sound sound(soundBuffer);\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Event Handling Example in CMake\nDESCRIPTION: Defines the source files and configures the SFML event handling example target. This CMake script sets up the source files list and creates a GUI application target that depends on the SFML::Graphics component.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/event_handling/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC EventHandling.cpp)\n\n# define the event_handling target\nsfml_add_example(event_handling GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Setting up SFML CMake Environment\nDESCRIPTION: Initializes the CMake environment for SFML by including macros, setting module paths, and configuring the library output directory. This establishes the foundation for building SFML modules.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# include the SFML specific macros\ninclude(${PROJECT_SOURCE_DIR}/cmake/Macros.cmake)\n\n# define the path of our additional CMake modules\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake/Modules/\")\n\n# set the output directory for SFML libraries\nset(LIBRARY_OUTPUT_PATH \"${PROJECT_BINARY_DIR}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Rect Usage in SFML 3\nDESCRIPTION: Updated sf::Rect usage in SFML 3, showing the new constructor that takes Vector2 objects and direct member access to position and size properties.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nsf::FloatRect rect({10, 20}, {30, 40});\nsf::Vector2f position = rect.position;\nsf::Vectro2f size = rect.size;\n```\n\n----------------------------------------\n\nTITLE: Initializing RenderStates in SFML 2\nDESCRIPTION: Shows how to create a RenderStates object in SFML 2. This constructor takes blend mode, transform, texture, and shader as parameters.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nauto renderStates = sf::RenderStates(sf::BlendAlpha,\n                                     transform,\n                                     texture,\n                                     nullptr);\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Installation Configuration\nDESCRIPTION: Sets up installation directories based on target platform, handling Windows, Linux, macOS, iOS, Android, and BSD systems differently.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SFML_OS_WINDOWS OR SFML_OS_IOS)\n    set(DEFAULT_INSTALL_MISC_DIR .)\nelseif(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n    set(DEFAULT_INSTALL_MISC_DIR share/SFML)\nelseif(SFML_OS_MACOS)\n    set(DEFAULT_INSTALL_MISC_DIR /usr/local/share/SFML)\nelseif(SFML_OS_ANDROID)\n    set(DEFAULT_INSTALL_MISC_DIR ${CMAKE_ANDROID_NDK}/sources/third_party/sfml)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Win32 Example for SFML with CMake\nDESCRIPTION: This CMake snippet sets up a Win32 example application for SFML. It collects the source files and defines the target as a GUI application with a dependency on SFML::Graphics.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/win32/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC Win32.cpp)\n\n# define the win32 target\nsfml_add_example(win32 GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Shader Example in CMake\nDESCRIPTION: This CMake snippet sets up the source files and defines the build target for an SFML shader example. It specifies 'Shader.cpp' as the source file and configures the target to depend on SFML::Graphics.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/shader/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC Shader.cpp)\n\n# define the shader target\nsfml_add_example(shader GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Joystick Example with CMake\nDESCRIPTION: CMake configuration that defines source files and creates a joystick example target. The target depends on SFML::Graphics and builds as a GUI application.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/joystick/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC Joystick.cpp)\n\n# define the joystick target\nsfml_add_example(joystick GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Keyboard Example Build in CMake\nDESCRIPTION: CMake script for building an SFML keyboard example application. It sets up source files, handles iOS-specific resources, and defines the build target with dependencies on SFML Audio and Graphics modules.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/keyboard/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC Keyboard.cpp)\nif(SFML_OS_IOS)\n    set(RESOURCES\n        resources/error_005.ogg\n        resources/mouseclick1.ogg\n        resources/mouserelease1.ogg\n        resources/Tuffy.ttf)\n    set_source_files_properties(${RESOURCES} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)\nendif()\n\n# define the keyboard target\nsfml_add_example(keyboard GUI_APP\n                 SOURCES ${SRC}\n                 BUNDLE_RESOURCES ${RESOURCES}\n                 DEPENDS SFML::Audio SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Stencil Example Build\nDESCRIPTION: CMake configuration that defines source files and creates a build target for the SFML stencil example. Sets up dependencies on SFML Graphics library.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/stencil/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC Stencil.cpp)\n\n# define the stencil target\nsfml_add_example(stencil GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Sound Example Build Target\nDESCRIPTION: Defines CMake build configuration for an SFML sound example. Sets up source files and specifies dependency on SFML::Audio module.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/sound/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC Sound.cpp)\n\n# define the sound target\nsfml_add_example(sound\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Audio)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Sound Capture Example in CMake\nDESCRIPTION: This CMake snippet defines the build configuration for an SFML sound capture example. It first sets up the source files in a variable, then creates the example target with the appropriate dependencies on the SFML::Audio module.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/sound_capture/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC SoundCapture.cpp)\n\n# define the sound-capture target\nsfml_add_example(sound-capture\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Audio)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Framework Build for macOS\nDESCRIPTION: Sets up the SFML framework build for macOS, including creating the framework structure, handling headers for each module, and configuring installation. Builds a unified framework with module-specific headers copied into the final package.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n    # find only \"root\" headers\n    file(GLOB SFML_HEADERS RELATIVE ${PROJECT_SOURCE_DIR} \"include/SFML/*\")\n\n    # Because we use generator expressions in the post build scripts we need to\n    # suppress the generation of \"EFFECTIVE_PLATFORM_NAME\" as it will fail\n    set_property(GLOBAL PROPERTY XCODE_EMIT_EFFECTIVE_PLATFORM_NAME OFF)\n\n    # in fact we have to fool cmake to copy all the headers in subdirectories\n    # to do that we have to add the \"root\" headers to the PUBLIC_HEADER\n    # then we can run a post script to copy the remaining headers\n\n    # we need a dummy file in order to compile the framework\n    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp\n                       COMMAND touch ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp\n                       VERBATIM)\n\n    set(SFML_SOURCES ${SFML_HEADERS})\n    list(APPEND SFML_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp)\n\n    # create SFML.framework\n    add_library(SFML ${SFML_SOURCES})\n\n    # enable C++17 support\n    target_compile_features(SFML PUBLIC cxx_std_17)\n\n    # set the target flags to use the appropriate C++ standard library\n    sfml_set_stdlib(SFML)\n\n    # edit target properties\n    set_target_properties(SFML PROPERTIES\n                          FRAMEWORK ON\n                          FRAMEWORK_VERSION ${PROJECT_VERSION}\n                          MACOSX_FRAMEWORK_IDENTIFIER org.sfml-dev.SFML\n                          MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${PROJECT_VERSION}\n                          MACOSX_FRAMEWORK_BUNDLE_VERSION ${PROJECT_VERSION}\n                          PUBLIC_HEADER \"${SFML_HEADERS}\")\n\n    # add the non-optional SFML headers\n    add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                       ${PROJECT_SOURCE_DIR}/include/SFML/Config.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/OpenGL.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/GpuPreference.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/System.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/Main.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/System\n                       $<TARGET_FILE_DIR:SFML>/Headers\n                       VERBATIM)\n\n    # add window module headers if enabled\n    if(SFML_BUILD_WINDOW)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Window.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Window\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n    # add network module headers if enabled\n    if(SFML_BUILD_NETWORK)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Network.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Network\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n     # add graphics module headers if enabled\n    if(SFML_BUILD_GRAPHICS)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Graphics.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Graphics\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n     # add audio module headers if enabled\n    if(SFML_BUILD_AUDIO)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Audio.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Audio\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n    # adapt install directory to allow distributing dylibs/frameworks in user's frameworks/application bundle\n    # NOTE: it's not required to link against SFML.framework\n    set_target_properties(SFML PROPERTIES INSTALL_NAME_DIR \"@rpath\")\n    if(NOT CMAKE_SKIP_BUILD_RPATH)\n        set_target_properties(SFML PROPERTIES BUILD_WITH_INSTALL_NAME_DIR ON)\n    endif()\n\n    # install rule\n    install(TARGETS SFML\n            FRAMEWORK DESTINATION \".\"\n            COMPONENT devel)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined Graphics and Audio SFML Examples in CMake\nDESCRIPTION: Sets up example subdirectories that require both the Graphics and Audio components of SFML. Includes games and applications that use both visual and sound elements.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(SFML_BUILD_GRAPHICS AND SFML_BUILD_AUDIO)\n    add_subdirectory(tennis)\n    add_subdirectory(keyboard)\n\n    if(NOT SFML_OPENGL_ES)\n        add_subdirectory(sound_effects)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring SFML Audio Target in CMake\nDESCRIPTION: Creates the sfml-audio target, sets up compile definitions, and links necessary libraries. It also handles platform-specific linking for iOS and Android.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Audio/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nsfml_add_library(Audio\n                 SOURCES ${SRC} ${CODECS_SRC}\n                 DEPENDENCIES \"Dependencies.cmake.in\")\n\ntarget_compile_definitions(sfml-audio PRIVATE OV_EXCLUDE_STATIC_CALLBACKS FLAC__NO_DLL)\ntarget_compile_definitions(sfml-audio PRIVATE MA_NO_MP3 MA_NO_FLAC MA_NO_ENCODING MA_NO_RESOURCE_MANAGER MA_NO_GENERATION)\ntarget_compile_definitions(sfml-audio PRIVATE MA_USE_STDINT)\ntarget_compile_definitions(sfml-audio PRIVATE SFML_IS_BIG_ENDIAN=$<STREQUAL:${CMAKE_CXX_BYTE_ORDER},BIG_ENDIAN>)\n\ntarget_link_libraries(sfml-audio\n                      PUBLIC SFML::System\n                      PRIVATE Vorbis::vorbis Vorbis::vorbisfile Vorbis::vorbisenc FLAC::FLAC Threads::Threads)\nif(SFML_OS_IOS)\n    target_link_libraries(sfml-audio PRIVATE \"-framework Foundation\" \"-framework CoreFoundation\" \"-framework CoreAudio\" \"-framework AudioToolbox\" \"-framework AVFoundation\")\nendif()\n\nif(SFML_OS_ANDROID)\n    target_link_libraries(sfml-audio PRIVATE android OpenSLES)\nendif()\n\nif(SFML_OS_LINUX)\n    target_link_libraries(sfml-audio PRIVATE dl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for SFML Graphics\nDESCRIPTION: Defines the main source files for the SFML graphics module including core components like BlendMode, Font, Image, and Render classes.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Graphics/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n    ${SRCROOT}/BlendMode.cpp\n    ${INCROOT}/BlendMode.hpp\n    ${INCROOT}/Color.hpp\n    ${INCROOT}/Color.inl\n    ${INCROOT}/CoordinateType.hpp\n    ${INCROOT}/Export.hpp\n    ${SRCROOT}/Font.cpp\n    ${INCROOT}/Font.hpp\n    ${SRCROOT}/Glsl.cpp\n    ${INCROOT}/Glsl.hpp\n    ${INCROOT}/Glsl.inl\n    ${INCROOT}/Glyph.hpp\n    ${SRCROOT}/GLCheck.cpp\n    ${SRCROOT}/GLCheck.hpp\n    ${SRCROOT}/GLExtensions.hpp\n    ${SRCROOT}/GLExtensions.cpp\n    ${SRCROOT}/Image.cpp\n    ${INCROOT}/Image.hpp\n    ${INCROOT}/PrimitiveType.hpp\n    ${INCROOT}/Rect.hpp\n    ${INCROOT}/Rect.inl\n    ${SRCROOT}/RenderStates.cpp\n    ${INCROOT}/RenderStates.hpp\n    ${SRCROOT}/RenderTexture.cpp\n    ${INCROOT}/RenderTexture.hpp\n    ${SRCROOT}/RenderTarget.cpp\n    ${INCROOT}/RenderTarget.hpp\n    ${SRCROOT}/RenderWindow.cpp\n    ${INCROOT}/RenderWindow.hpp\n    ${SRCROOT}/Shader.cpp\n    ${INCROOT}/Shader.hpp\n    ${SRCROOT}/StencilMode.cpp\n    ${INCROOT}/StencilMode.hpp\n    ${SRCROOT}/Texture.cpp\n    ${INCROOT}/Texture.hpp\n    ${SRCROOT}/TextureSaver.cpp\n    ${SRCROOT}/TextureSaver.hpp\n    ${SRCROOT}/Transform.cpp\n    ${INCROOT}/Transform.hpp\n    ${INCROOT}/Transform.inl\n    ${SRCROOT}/Transformable.cpp\n    ${INCROOT}/Transformable.hpp\n    ${SRCROOT}/View.cpp\n    ${INCROOT}/View.hpp\n    ${INCROOT}/Vertex.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI-based SFML Examples in CMake\nDESCRIPTION: Sets up GUI-based example subdirectories when the SFML Window and Graphics components are being built. Includes conditional inclusion of platform-specific examples for Windows, Linux, macOS, and other systems.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# GUI based examples\nif(SFML_BUILD_WINDOW)\n    add_subdirectory(window)\nendif()\n\nif(SFML_BUILD_GRAPHICS)\n    add_subdirectory(event_handling)\n    add_subdirectory(opengl)\n    add_subdirectory(stencil)\n\n    if(NOT SFML_OS_IOS)\n        add_subdirectory(joystick)\n        add_subdirectory(shader)\n        add_subdirectory(island)\n        add_subdirectory(vulkan)\n    endif()\n\n    if(SFML_OS_WINDOWS)\n        add_subdirectory(win32)\n        add_subdirectory(raw_input)\n    elseif(SFML_OS_LINUX OR SFML_OS_FREEBSD)\n        if(NOT SFML_USE_DRM)\n            add_subdirectory(X11)\n            add_subdirectory(raw_input)\n        endif()\n    elseif(SFML_OS_MACOS)\n        add_subdirectory(cocoa)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI-based SFML Examples in CMake\nDESCRIPTION: Sets up CLI-based example subdirectories based on which SFML components are being built. Includes networking, audio, and VOIP examples when the respective components are enabled and not building for iOS.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# CLI based examples\nif(NOT SFML_OS_IOS)\n    if(SFML_BUILD_NETWORK)\n        add_subdirectory(ftp)\n        add_subdirectory(sockets)\n    endif()\n    if(SFML_BUILD_NETWORK AND SFML_BUILD_AUDIO)\n        add_subdirectory(voip)\n    endif()\n    if(SFML_BUILD_AUDIO)\n        add_subdirectory(sound)\n        add_subdirectory(sound_capture)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Common Source Files for SFML Window Module\nDESCRIPTION: Creates a comprehensive list of all source files that make up the SFML Window module, including both implementation files and headers. This forms the core codebase used across all platforms.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC\n    ${INCROOT}/Clipboard.hpp\n    ${SRCROOT}/Clipboard.cpp\n    ${SRCROOT}/ClipboardImpl.hpp\n    ${SRCROOT}/Context.cpp\n    ${INCROOT}/Context.hpp\n    ${SRCROOT}/Cursor.cpp\n    ${INCROOT}/Cursor.hpp\n    ${SRCROOT}/CursorImpl.hpp\n    ${INCROOT}/Export.hpp\n    ${SRCROOT}/GlContext.cpp\n    ${SRCROOT}/GlContext.hpp\n    ${SRCROOT}/GlResource.cpp\n    ${INCROOT}/GlResource.hpp\n    ${INCROOT}/ContextSettings.hpp\n    ${INCROOT}/Event.hpp\n    ${INCROOT}/Event.inl\n    ${SRCROOT}/InputImpl.hpp\n    ${INCROOT}/Joystick.hpp\n    ${SRCROOT}/Joystick.cpp\n    ${SRCROOT}/JoystickImpl.hpp\n    ${SRCROOT}/JoystickManager.cpp\n    ${SRCROOT}/JoystickManager.hpp\n    ${INCROOT}/Keyboard.hpp\n    ${SRCROOT}/Keyboard.cpp\n    ${INCROOT}/Mouse.hpp\n    ${SRCROOT}/Mouse.cpp\n    ${INCROOT}/Touch.hpp\n    ${SRCROOT}/Touch.cpp\n    ${INCROOT}/Sensor.hpp\n    ${SRCROOT}/Sensor.cpp\n    ${SRCROOT}/SensorImpl.hpp\n    ${SRCROOT}/SensorManager.cpp\n    ${SRCROOT}/SensorManager.hpp\n    ${SRCROOT}/VideoMode.cpp\n    ${INCROOT}/VideoMode.hpp\n    ${SRCROOT}/VideoModeImpl.hpp\n    ${SRCROOT}/Vulkan.cpp\n    ${INCROOT}/Vulkan.hpp\n    ${SRCROOT}/VulkanImpl.hpp\n    ${SRCROOT}/Window.cpp\n    ${INCROOT}/Window.hpp\n    ${SRCROOT}/WindowBase.cpp\n    ${INCROOT}/WindowBase.hpp\n    ${INCROOT}/WindowBase.inl\n    ${INCROOT}/WindowEnums.hpp\n    ${INCROOT}/WindowHandle.hpp\n    ${SRCROOT}/WindowImpl.cpp\n    ${SRCROOT}/WindowImpl.hpp\n)\nsource_group(\"\" FILES ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cocoa Application Target in CMake\nDESCRIPTION: Defines and configures the final Cocoa application target using SFML's custom add_example function. Sets up bundle properties, links required frameworks, and specifies dependencies.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/cocoa/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# define the cocoa target and customize it\nsfml_add_example(cocoa\n                 SOURCES ${SRC}\n                 BUNDLE_RESOURCES ${RESOURCES}\n                 DEPENDS SFML::Graphics)\nset_target_properties(cocoa PROPERTIES\n                      MACOSX_BUNDLE ON\n                      MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/resources/Cocoa-Info.plist)\ntarget_link_libraries(cocoa PRIVATE \"-framework Cocoa\" \"-framework Foundation\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional SFML Components\nDESCRIPTION: Sets up options for building additional SFML components such as API documentation, examples, and test suite. Each component can be enabled or disabled through CMake options.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# add an option for building the API documentation\nsfml_set_option(SFML_BUILD_DOC OFF BOOL \"ON to generate the API documentation, OFF to ignore it\")\nif(SFML_BUILD_DOC)\n    add_subdirectory(doc)\nendif()\n\n# add an option for building the examples\nsfml_set_option(SFML_BUILD_EXAMPLES OFF BOOL \"ON to build the SFML examples, OFF to ignore them\")\nif(SFML_BUILD_EXAMPLES AND NOT SFML_OS_ANDROID)\n    add_subdirectory(examples)\nendif()\n\n# add an option for building the test suite\nsfml_set_option(SFML_BUILD_TEST_SUITE OFF BOOL \"ON to build the SFML test suite, OFF to ignore it\")\n```\n\n----------------------------------------\n\nTITLE: Defining SFML Audio Source Files in CMake\nDESCRIPTION: Sets up source file lists for the main SFML Audio module and audio codecs. It includes both source and header files from the project's source and include directories.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Audio/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INCROOT ${PROJECT_SOURCE_DIR}/include/SFML/Audio)\nset(SRCROOT ${PROJECT_SOURCE_DIR}/src/SFML/Audio)\n\n# all source files\nset(SRC\n    ${SRCROOT}/AudioResource.cpp\n    ${INCROOT}/AudioResource.hpp\n    ${SRCROOT}/AudioDevice.cpp\n    ${SRCROOT}/AudioDevice.hpp\n    ${INCROOT}/Export.hpp\n    ${SRCROOT}/Listener.cpp\n    ${INCROOT}/Listener.hpp\n    ${SRCROOT}/Miniaudio.cpp\n    ${SRCROOT}/MiniaudioUtils.hpp\n    ${SRCROOT}/MiniaudioUtils.cpp\n    ${SRCROOT}/Music.cpp\n    ${INCROOT}/Music.hpp\n    ${SRCROOT}/PlaybackDevice.cpp\n    ${INCROOT}/PlaybackDevice.hpp\n    ${SRCROOT}/Sound.cpp\n    ${INCROOT}/Sound.hpp\n    ${SRCROOT}/SoundBuffer.cpp\n    ${INCROOT}/SoundBuffer.hpp\n    ${SRCROOT}/SoundBufferRecorder.cpp\n    ${INCROOT}/SoundBufferRecorder.hpp\n    ${INCROOT}/SoundChannel.hpp\n    ${SRCROOT}/InputSoundFile.cpp\n    ${INCROOT}/InputSoundFile.hpp\n    ${SRCROOT}/OutputSoundFile.cpp\n    ${INCROOT}/OutputSoundFile.hpp\n    ${SRCROOT}/SoundRecorder.cpp\n    ${INCROOT}/SoundRecorder.hpp\n    ${SRCROOT}/SoundSource.cpp\n    ${INCROOT}/SoundSource.hpp\n    ${SRCROOT}/SoundStream.cpp\n    ${INCROOT}/SoundStream.hpp\n)\nsource_group(\"\" FILES ${SRC})\n\nset(CODECS_SRC\n    ${SRCROOT}/SoundFileFactory.cpp\n    ${INCROOT}/SoundFileFactory.hpp\n    ${INCROOT}/SoundFileFactory.inl\n    ${INCROOT}/SoundFileReader.hpp\n    ${SRCROOT}/SoundFileReaderFlac.hpp\n    ${SRCROOT}/SoundFileReaderFlac.cpp\n    ${SRCROOT}/SoundFileReaderMp3.hpp\n    ${SRCROOT}/SoundFileReaderMp3.cpp\n    ${SRCROOT}/SoundFileReaderOgg.hpp\n    ${SRCROOT}/SoundFileReaderOgg.cpp\n    ${SRCROOT}/SoundFileReaderWav.hpp\n    ${SRCROOT}/SoundFileReaderWav.cpp\n    ${INCROOT}/SoundFileWriter.hpp\n    ${SRCROOT}/SoundFileWriterFlac.hpp\n    ${SRCROOT}/SoundFileWriterFlac.cpp\n    ${SRCROOT}/SoundFileWriterOgg.hpp\n    ${SRCROOT}/SoundFileWriterOgg.cpp\n    ${SRCROOT}/SoundFileWriterWav.hpp\n    ${SRCROOT}/SoundFileWriterWav.cpp\n)\nsource_group(\"codecs\" FILES ${CODECS_SRC})\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Build Options in CMake\nDESCRIPTION: Sets up various build configuration options for the SFML project including coverage reporting, OpenGL error handling, and test suite configuration. It also defines custom targets for code formatting and linting using clang-format and clang-tidy.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# add an option for enabling coverage reporting\nsfml_set_option(SFML_ENABLE_COVERAGE OFF BOOL \"ON to enable coverage reporting, OFF to ignore it\")\n\nif(SFML_BUILD_TEST_SUITE)\n    if(SFML_BUILD_WINDOW AND SFML_BUILD_GRAPHICS AND SFML_BUILD_NETWORK AND SFML_BUILD_AUDIO)\n        enable_testing()\n        add_subdirectory(test)\n    else()\n        message(WARNING \"Cannot build unit testing unless all modules are enabled\")\n    endif()\nendif()\n\n# add an option for making OpenGL errors fatal\nsfml_set_option(SFML_FATAL_OPENGL_ERRORS OFF BOOL \"ON to make SFML OpenGL errors fatal, OFF to simply warn about them\")\n\nsfml_set_option(CLANG_FORMAT_EXECUTABLE clang-format STRING \"Override clang-format executable, requires version 17\")\nadd_custom_target(format\n    COMMAND ${CMAKE_COMMAND} -DCLANG_FORMAT_EXECUTABLE=${CLANG_FORMAT_EXECUTABLE} -P ./cmake/Format.cmake\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} VERBATIM)\n\nsfml_set_option(CLANG_TIDY_EXECUTABLE clang-tidy STRING \"Override clang-tidy executable, requires minimum version 14\")\nadd_custom_target(tidy\n    COMMAND ${CMAKE_COMMAND} -DCLANG_TIDY_EXECUTABLE=${CLANG_TIDY_EXECUTABLE} -DPROJECT_BINARY_DIR=${PROJECT_BINARY_DIR} -P ./cmake/Tidy.cmake\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Network Module Source Files in CMake\nDESCRIPTION: This snippet defines the source and include directories for the SFML Network module, and sets up a list of all source files to be compiled. It includes both .cpp and .hpp files from the Network module.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Network/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INCROOT ${PROJECT_SOURCE_DIR}/include/SFML/Network)\nset(SRCROOT ${PROJECT_SOURCE_DIR}/src/SFML/Network)\n\n# all source files\nset(SRC\n    ${INCROOT}/Export.hpp\n    ${SRCROOT}/Ftp.cpp\n    ${INCROOT}/Ftp.hpp\n    ${SRCROOT}/Http.cpp\n    ${INCROOT}/Http.hpp\n    ${SRCROOT}/IpAddress.cpp\n    ${INCROOT}/IpAddress.hpp\n    ${SRCROOT}/Packet.cpp\n    ${INCROOT}/Packet.hpp\n    ${SRCROOT}/Socket.cpp\n    ${INCROOT}/Socket.hpp\n    ${SRCROOT}/SocketImpl.hpp\n    ${INCROOT}/SocketHandle.hpp\n    ${SRCROOT}/SocketSelector.cpp\n    ${INCROOT}/SocketSelector.hpp\n    ${SRCROOT}/TcpListener.cpp\n    ${INCROOT}/TcpListener.hpp\n    ${SRCROOT}/TcpSocket.cpp\n    ${INCROOT}/TcpSocket.hpp\n    ${SRCROOT}/UdpSocket.cpp\n    ${INCROOT}/UdpSocket.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining XIB Compilation Function in CMake\nDESCRIPTION: Creates a custom CMake function called compile_xib that compiles Apple XIB interface files into NIB files using the ibtool utility. The function takes INPUT and OUTPUT path arguments and sets up a custom build command.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/cocoa/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Usage: compile_xib(INPUT path/to/file.xib OUTPUT path/to/file.nib)\nfunction(compile_xib)\n    cmake_parse_arguments(THIS \"\" \"INPUT;OUTPUT\" \"\" ${ARGN})\n    if(NOT THIS_INPUT)\n        message(FATAL_ERROR \"Missing required argument INPUT in call to compile_xib()\")\n    endif()\n\n    if(NOT THIS_OUTPUT)\n        message(FATAL_ERROR \"Missing required argument OUTPUT in call to compile_xib()\")\n    endif()\n\n    if(NOT DEFINED IBTOOL)\n        find_program(IBTOOL ibtool HINTS \"/usr/bin\" \"${OSX_DEVELOPER_ROOT}/usr/bin\")\n    endif()\n    if(NOT IBTOOL)\n        message(FATAL_ERROR \"ibtool is required to compile .xib files but wasn't found.\")\n    endif()\n\n    # Default args taken from Xcode 9 when it generates a nib from a xib\n    set(DEFAULT_ARGS --errors --warnings --notices --module cocoa --auto-activate-custom-fonts --target-device mac --output-format human-readable-text)\n\n    add_custom_command(OUTPUT \"${THIS_OUTPUT}\"\n        COMMAND \"${IBTOOL}\" ${DEFAULT_ARGS} \"${THIS_INPUT}\" --compile \"${THIS_OUTPUT}\"\n        DEPENDS \"${THIS_INPUT}\"\n        COMMENT \"Generating ${THIS_OUTPUT}\"\n        VERBATIM)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining SFML System Module Source Files in CMake\nDESCRIPTION: Creates a list of all source files (header and implementation files) that are part of the SFML System module. This comprehensive list includes components like Angle, Clock, String, Vector classes, and input stream implementations.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC\n    ${INCROOT}/Angle.hpp\n    ${INCROOT}/Angle.inl\n    ${SRCROOT}/Clock.cpp\n    ${INCROOT}/Clock.hpp\n    ${SRCROOT}/EnumArray.hpp\n    ${SRCROOT}/Err.cpp\n    ${INCROOT}/Err.hpp\n    ${INCROOT}/Exception.hpp\n    ${INCROOT}/Export.hpp\n    ${INCROOT}/InputStream.hpp\n    ${INCROOT}/NativeActivity.hpp\n    ${SRCROOT}/Sleep.cpp\n    ${INCROOT}/Sleep.hpp\n    ${SRCROOT}/String.cpp\n    ${INCROOT}/String.hpp\n    ${INCROOT}/String.inl\n    ${INCROOT}/Time.hpp\n    ${INCROOT}/Time.inl\n    ${INCROOT}/Utf.hpp\n    ${INCROOT}/Utf.inl\n    ${SRCROOT}/Utils.hpp\n    ${SRCROOT}/Utils.cpp\n    ${SRCROOT}/Vector2.cpp\n    ${INCROOT}/Vector2.hpp\n    ${INCROOT}/Vector2.inl\n    ${SRCROOT}/Vector3.cpp\n    ${INCROOT}/Vector3.hpp\n    ${INCROOT}/Vector3.inl\n    ${SRCROOT}/FileInputStream.cpp\n    ${INCROOT}/FileInputStream.hpp\n    ${SRCROOT}/MemoryInputStream.cpp\n    ${INCROOT}/MemoryInputStream.hpp\n    ${INCROOT}/SuspendAwareClock.hpp\n)\nsource_group(\"\" FILES ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cocoa Application Resources\nDESCRIPTION: Defines the resources to be included in the application bundle, including icons, fonts, images, and the compiled NIB file. Also sets properties to ensure proper location within the bundle.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/cocoa/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# all resource files\nset(RESOURCES resources/icon.icns\n              resources/tuffy.ttf\n              resources/logo.png\n              resources/blue.png\n              resources/green.png\n              resources/red.png\n              resources/Credits.rtf\n              ${CMAKE_CURRENT_BINARY_DIR}/MainMenu.nib)\nset_source_files_properties(${RESOURCES} PROPERTIES\n                            MACOSX_PACKAGE_LOCATION Resources)\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawable Components\nDESCRIPTION: Defines source files for drawable components including shapes, sprites, text, and vertex arrays/buffers.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Graphics/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(DRAWABLES_SRC\n    ${INCROOT}/Drawable.hpp\n    ${SRCROOT}/Shape.cpp\n    ${INCROOT}/Shape.hpp\n    ${SRCROOT}/CircleShape.cpp\n    ${INCROOT}/CircleShape.hpp\n    ${SRCROOT}/RectangleShape.cpp\n    ${INCROOT}/RectangleShape.hpp\n    ${SRCROOT}/ConvexShape.cpp\n    ${INCROOT}/ConvexShape.hpp\n    ${SRCROOT}/Sprite.cpp\n    ${INCROOT}/Sprite.hpp\n    ${SRCROOT}/Text.cpp\n    ${INCROOT}/Text.hpp\n    ${SRCROOT}/VertexArray.cpp\n    ${INCROOT}/VertexArray.hpp\n    ${SRCROOT}/VertexBuffer.cpp\n    ${INCROOT}/VertexBuffer.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Catch2 Testing Framework with CMake\nDESCRIPTION: Fetches and configures the Catch2 testing framework from GitHub, setting it up for use with SFML tests. This snippet enables C++17 features and ensures Catch2 is not affected by any analysis tools.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FetchContent)\n\nadd_subdirectory(install)\nset_target_warnings(test-sfml-install)\n\nset(CATCH_CONFIG_NO_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT ON CACHE BOOL \"\")\nFetchContent_Declare(Catch2\n    GIT_REPOSITORY https://github.com/catchorg/Catch2.git\n    GIT_TAG v3.8.1\n    GIT_SHALLOW ON)\nFetchContent_MakeAvailable(Catch2)\ninclude(Catch)\n\n# Build Catch2 in C++17 mode to enable C++17 features\ntarget_compile_features(Catch2 PRIVATE cxx_std_17)\n\n# Ensure that Catch2 sources and headers are not analyzed by any tools\nset_target_properties(Catch2 PROPERTIES COMPILE_OPTIONS \"\" EXPORT_COMPILE_COMMANDS OFF)\nset_target_properties(Catch2WithMain PROPERTIES EXPORT_COMPILE_COMMANDS OFF)\nset_target_properties(Catch2 Catch2WithMain PROPERTIES FOLDER \"Dependencies\")\nget_target_property(CATCH2_INCLUDE_DIRS Catch2 INTERFACE_INCLUDE_DIRECTORIES)\ntarget_include_directories(Catch2 SYSTEM INTERFACE ${CATCH2_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: CMake Version Requirements Check\nDESCRIPTION: Sets minimum required CMake version based on host system, requiring 3.24+ for Windows and 3.22+ for other systems due to Visual Studio SYSTEM include directory support.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_HOST_WIN32)\n    cmake_minimum_required(VERSION 3.24)\nelse()\n    cmake_minimum_required(VERSION 3.22)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining SFML Window Module Library Target\nDESCRIPTION: Creates the final CMake library target for the SFML Window module, combining all source files and platform-specific implementations into a single build target with appropriate dependencies.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# define the sfml-window target\nsfml_add_library(Window\n                 SOURCES ${SRC} ${PLATFORM_SRC}\n                 DEPENDENCIES \"Dependencies.cmake.in\")\n```\n\n----------------------------------------\n\nTITLE: SFML Option Setting Macro Definition\nDESCRIPTION: Defines a utility macro for setting SFML build options with default values, type, and documentation string. Creates cached CMake variables.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(sfml_set_option var default type docstring)\n    if(NOT DEFINED ${var})\n        set(${var} ${default})\n    endif()\n    set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring Threading Dependency and Creating SFML System Library Target\nDESCRIPTION: Finds the required threading package and defines the sfml-system library target with its sources and dependencies. This establishes the core build configuration for the System module.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\n\n# define the sfml-system target\nsfml_add_library(System\n                 SOURCES ${SRC} ${PLATFORM_SRC}\n                 DEPENDENCIES \"Dependencies.cmake.in\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cocoa Application Source Files\nDESCRIPTION: Defines a list of source files needed for the Cocoa application, including Objective-C and Objective-C++ implementation files.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/cocoa/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# all source files\nset(SRC CocoaAppDelegate.h\n        CocoaAppDelegate.mm\n        NSString+stdstring.h\n        NSString+stdstring.mm\n        main.m)\n```\n\n----------------------------------------\n\nTITLE: CMake Target Configuration in SFML 2\nDESCRIPTION: Example of how to configure CMake targets in SFML 2, showing the use of lowercase component names and direct target references without namespaces.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SFML 2 REQUIRED COMPONENTS graphics audio network)\n...\ntarget_link_libraries(my_app PRIVATE sfml-graphics sfml-audio sfml-network)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for SFML Audio in CMake\nDESCRIPTION: Sets up platform-specific configurations for SFML Audio, including special handling for iOS and Android. It also configures the use of system dependencies or fetches and builds them if not using system deps.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Audio/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SFML_OS_IOS)\n    enable_language(OBJCXX)\n    set_source_files_properties(${SRCROOT}/Miniaudio.cpp PROPERTIES LANGUAGE OBJCXX)\nendif()\n\n# find external libraries\nif(SFML_USE_SYSTEM_DEPS)\n    find_package(Vorbis REQUIRED)\n    find_package(FLAC REQUIRED)\nelse()\n    # use an immediately invoked function to scope option variables we have to set\n    function(sfml_add_audio_dependencies)\n        include(FetchContent)\n\n        # remember whether we are building SFML as a shared library\n        if(BUILD_SHARED_LIBS)\n            set(SFML_BUILD_SHARED_LIBS ON)\n        endif()\n\n        # ... (additional dependency configuration)\n\n        sfml_add_audio_dependencies()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling XIB Interface File\nDESCRIPTION: Uses the previously defined compile_xib function to compile the MainMenu.xib file into a MainMenu.nib file that will be included in the application bundle.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/cocoa/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncompile_xib(INPUT \"${CMAKE_CURRENT_SOURCE_DIR}/MainMenu.xib\" OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/MainMenu.nib\")\n```\n\n----------------------------------------\n\nTITLE: Defining SFML Network Library Target in CMake\nDESCRIPTION: This snippet defines the sfml-network target as a library using the custom sfml_add_library command. It uses the previously defined SRC list as the source files for the library.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Network/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nsource_group(\"\" FILES ${SRC})\n\n# define the sfml-network target\nsfml_add_library(Network\n                 SOURCES ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Enabling Objective-C Languages in CMake\nDESCRIPTION: Enables Objective-C and Objective-C++ languages for the CMake project, which is necessary for compiling Cocoa applications.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/cocoa/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nenable_language(OBJC OBJCXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies for SFML Network in CMake\nDESCRIPTION: This snippet sets up the dependencies for the sfml-network target. It links against SFML::System for all platforms and adds ws2_32 as a private dependency for Windows platforms.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Network/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# setup dependencies\ntarget_link_libraries(sfml-network PUBLIC SFML::System)\nif(SFML_OS_WINDOWS)\n    target_link_libraries(sfml-network PRIVATE ws2_32)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Library Dependencies\nDESCRIPTION: Links different platform-specific libraries based on the target operating system. Linux uses rt, Windows uses winmm, and Android uses android and log libraries to provide necessary low-level functionality.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(SFML_OS_LINUX)\n    target_link_libraries(sfml-system PRIVATE rt)\nelseif(SFML_OS_WINDOWS)\n    target_link_libraries(sfml-system PRIVATE winmm)\nelseif(SFML_OS_ANDROID)\n    target_link_libraries(sfml-system PRIVATE android log)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Precompiled Headers Option\nDESCRIPTION: Sets up a CMake option for enabling precompiled headers in SFML builds with platform-specific restrictions. PCH is currently not supported for shared library builds or on macOS.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# option to enable precompiled headers\nsfml_set_option(SFML_ENABLE_PCH OFF BOOL \"ON to enable precompiled headers for SFML builds -- only supported on Windows/Linux and for static library builds\")\n\nif(SFML_ENABLE_PCH AND BUILD_SHARED_LIBS)\n    message(FATAL_ERROR \"Precompiled headers are currently not supported for shared library builds\")\nendif()\n\nif(SFML_ENABLE_PCH AND SFML_OS_MACOS)\n    message(FATAL_ERROR \"Precompiled headers are currently not supported in macOS builds\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Installation Test with CMake\nDESCRIPTION: This CMake script configures a test project to verify proper SFML installation. It sets up project requirements, handles special configuration for iOS platforms, finds the SFML package with specific components, and creates an executable that links against SFML libraries. It also includes special handling for static library linking when appropriate.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/install/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\nproject(test-sfml-install CXX)\n\n# This skips the find_package call when building via add_subdirectory since that will fail under those circumstances\nif(PROJECT_IS_TOP_LEVEL)\n    if(NOT BUILD_SHARED_LIBS)\n        set(SFML_STATIC_LIBRARIES ON)\n    endif()\n\n    # cmake by default will only search inside the iOS SDK for packages/libraries, so we need to tell it to look elsewhere\n    if(IOS)\n        set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)\n        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)\n    endif()\n\n    find_package(SFML 3.1.0 EXACT CONFIG REQUIRED COMPONENTS Graphics Network Audio)\nendif()\n\nadd_executable(test-sfml-install Install.cpp)\ntarget_link_libraries(test-sfml-install PRIVATE SFML::Graphics SFML::Network SFML::Audio)\n\nif(SFML_USE_STATIC_STD_LIBS)\n    set_target_properties(test-sfml-install PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Standard SFML Installation Rules\nDESCRIPTION: Configures standard installation rules for SFML when not building as frameworks. Installs headers, CMake modules, and optionally PDB files for debug builds.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# setup the install rules\nif(NOT SFML_BUILD_FRAMEWORKS)\n    install(DIRECTORY include/\n            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n            COMPONENT devel\n            FILES_MATCHING PATTERN \"*.hpp\" PATTERN \"*.inl\")\n    install(DIRECTORY cmake/Modules/\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/SFML\n            COMPONENT devel)\n\n    if(SFML_GENERATE_PDB)\n        install(DIRECTORY ${PROJECT_BINARY_DIR}/lib/\n                DESTINATION ${CMAKE_INSTALL_LIBDIR}\n                COMPONENT devel\n                FILES_MATCHING PATTERN \"*.pdb\")\n    endif()\nelse()\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Island Example Build\nDESCRIPTION: CMake configuration for building an SFML island example application. Sets up required dependencies including Threads and SFML::Graphics, defines source files, and configures include directories and linking.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/island/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Threads REQUIRED)\n\n# all source files\nset(SRC Island.cpp)\n\n# define the island target\nsfml_add_example(island GUI_APP\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Graphics)\n\n# external dependency headers\ntarget_include_directories(island SYSTEM PRIVATE ${PROJECT_SOURCE_DIR}/examples/island)\n\ntarget_link_libraries(island PRIVATE Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Window Creation with Style in SFML 2\nDESCRIPTION: Example of creating a fullscreen window in SFML 2 using the Style enumeration.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nsf::RenderWindow window(sf::VideoMode::getFullscreenModes().at(0), \"Title\", sf::Style::Fullscreen);\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Sound Effects Project Source Files and Resources\nDESCRIPTION: CMake configuration that sets up source files and handles iOS-specific resource bundling for an SFML sound effects example. Manages sound, image, and font resources while configuring the build target with required SFML dependencies.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/sound_effects/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC SoundEffects.cpp)\nif(SFML_OS_IOS)\n    set(RESOURCES\n        resources/doodle_pop.ogg\n        resources/text-background.png\n        resources/tuffy.ttf)\n    set_source_files_properties(${RESOURCES} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)\nendif()\n\n# define the sound-effects target\nsfml_add_example(sound-effects GUI_APP\n                 SOURCES ${SRC}\n                 BUNDLE_RESOURCES ${RESOURCES}\n                 DEPENDS SFML::Audio SFML::Graphics)\n```\n\n----------------------------------------\n\nTITLE: Creating Doxygen Documentation Build Target\nDESCRIPTION: Creates a custom CMake target named 'doc' that executes Doxygen to generate the API documentation for SFML.\nSOURCE: https://github.com/sfml/sfml/blob/master/doc/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# target setup\nadd_custom_target(doc\n                  COMMAND ${CMAKE_COMMAND} -E echo_append \"Building API Documentation...\"\n                  COMMAND Doxygen::doxygen ${CMAKE_CURRENT_BINARY_DIR}/doxyfile\n                  COMMAND ${CMAKE_COMMAND} -E echo \"Done.\"\n                  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML FTP Example Build\nDESCRIPTION: Sets up CMake configuration for building an SFML FTP example. Defines source files and specifies SFML::Network as a dependency.\nSOURCE: https://github.com/sfml/sfml/blob/master/examples/ftp/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# all source files\nset(SRC Ftp.cpp)\n\n# define the ftp target\nsfml_add_example(ftp\n                 SOURCES ${SRC}\n                 DEPENDS SFML::Network)\n```\n\n----------------------------------------\n\nTITLE: Setting up SFML Window Module Source and Include Paths in CMake\nDESCRIPTION: Defines the source and include paths for the SFML Window module. Sets up variables that will be used throughout the build configuration to reference files.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INCROOT ${PROJECT_SOURCE_DIR}/include/SFML/Window)\nset(SRCROOT ${PROJECT_SOURCE_DIR}/src/SFML/Window)\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Files for SFML Documentation\nDESCRIPTION: Configures Doxygen input files by replacing variables in template files, and copies necessary CSS files for documentation styling.\nSOURCE: https://github.com/sfml/sfml/blob/master/doc/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# configure the source Doxyfile by copying it and replacing all @variables@\nconfigure_file(doxyfile.in doxyfile @ONLY)\nconfigure_file(header.html.in header.html @ONLY)\n\n# copy the files needed by the documentation\nconfigure_file(doxygen.css html/doxygen.css COPYONLY)\nconfigure_file(searchOverrides.css html/searchOverrides.css COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Dependencies\nDESCRIPTION: Sets up OpenGL dependencies with platform-specific handling for iOS, Android, and desktop systems.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(SFML_OS_IOS)\n    target_link_libraries(sfml-window PRIVATE \"-framework OpenGLES\")\nelseif(SFML_OS_ANDROID)\n    find_package(EGL REQUIRED)\n    find_package(GLES REQUIRED)\n    target_link_libraries(sfml-window PRIVATE EGL::EGL GLES::GLES)\nelse()\n    find_package(OpenGL REQUIRED COMPONENTS OpenGL)\n    target_link_libraries(sfml-window PRIVATE OpenGL::GL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Help Compiler for Windows Documentation\nDESCRIPTION: Checks if HTML Help Compiler is available on Windows systems to generate CHM (compressed HTML) documentation. Includes version compatibility check for Doxygen.\nSOURCE: https://github.com/sfml/sfml/blob/master/doc/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# see if we can generate the CHM documentation\nset(DOXYGEN_HHC_PROGRAM)\nset(DOXYGEN_GENERATE_HTMLHELP NO)\nif(SFML_OS_WINDOWS)\n    # if HHC is found, we can generate the CHM (compressed HTML) output\n    find_program(DOXYGEN_HHC_PROGRAM\n                 NAMES hhc.exe\n                 PATHS \"C:/Program Files/HTML Help Workshop\" \"C:/Program Files (x86)/HTML Help Workshop\"\n                 DOC \"HTML Help Compiler program\")\n    if(DOXYGEN_HHC_PROGRAM)\n        if(DOXYGEN_VERSION VERSION_LESS \"1.10.0\")\n            set(DOXYGEN_GENERATE_HTMLHELP YES)\n        else()\n            message(\"Due to conflicts with the HTML output settings in Doxygen ${DOXYGEN_VERSION}, the HTML Help generation will be disabled\")\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeType Dependencies\nDESCRIPTION: Sets up FreeType library integration with specific build options and Git repository source.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Graphics/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(sfml_add_graphics_dependencies)\n    include(FetchContent)\n    set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n    set(BUILD_SHARED_LIBS OFF)\n    set(SKIP_INSTALL_HEADERS ON)\n    set(FT_DISABLE_ZLIB ON)\n    set(FT_DISABLE_BZIP2 ON)\n    set(FT_DISABLE_PNG ON)\n    set(FT_DISABLE_HARFBUZZ ON)\n    set(FT_DISABLE_BROTLI ON)\n    set(FT_ENABLE_ERROR_STRINGS ON)\n\n    FetchContent_Declare(Freetype\n        GIT_REPOSITORY https://github.com/freetype/freetype.git\n        GIT_TAG VER-2-13-2\n        GIT_SHALLOW ON\n        PATCH_COMMAND ${CMAKE_COMMAND} -DFREETYPE_DIR=${FETCHCONTENT_BASE_DIR}/freetype-src -P ${PROJECT_SOURCE_DIR}/tools/freetype/PatchFreetype.cmake)\n    FetchContent_MakeAvailable(Freetype)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML CPack Packaging Settings\nDESCRIPTION: Sets up CPack settings for SFML package generation, including package metadata, version information, and NSIS-specific configurations for installer customization on Windows. Configures packaging details for distribution.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nsfml_export_targets()\n\n# configure extras by default when building SFML directly, otherwise hide them\nsfml_set_option(SFML_CONFIGURE_EXTRAS ${PROJECT_IS_TOP_LEVEL} BOOL \"ON to configure extras, OFF to ignore them\")\n\nif(NOT SFML_CONFIGURE_EXTRAS)\n    return()\nendif()\n\nset(CPACK_PACKAGE_NAME_SUMMARY \"Simple and Fast Multimedia Library\")\nset(CPACK_PACKAGE_VENDOR \"SFML Team\")\nset(CPACK_PACKAGE_FILE_NAME \"SFML-${PROJECT_VERSION}-${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}-${CMAKE_BUILD_TYPE}\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/readme.md\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/license.md\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${PROJECT_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${PROJECT_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"SFML ${PROJECT_VERSION}\")\nset(CPACK_MONOLITHIC_INSTALL ON)\n\n# NSIS configurations\nset(CPACK_NSIS_DISPLAY_NAME \"SFML ${PROJECT_VERSION} (${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION})\")\nset(CPACK_NSIS_CONTACT \"team@sfml-dev.org\")\nset(NSIS_IMAGE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/tools/nsis/\")\nstring(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" NSIS_IMAGE_PATH ${NSIS_IMAGE_PATH})\nset(CPACK_NSIS_INSTALLER_MUI_ICON_CODE \"!define MUI_WELCOMEFINISHPAGE_BITMAP \\\"${NSIS_IMAGE_PATH}sidebar.bmp\\\"\\n!define MUI_HEADERIMAGE_BITMAP \\\"${NSIS_IMAGE_PATH}header.bmp\\\"\\n!define MUI_ICON \\\"${NSIS_IMAGE_PATH}sfml.ico\\\"\")\n\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Dependencies\nDESCRIPTION: Configures platform-specific library dependencies for various operating systems including Linux, Windows, FreeBSD, macOS, iOS, and Android.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(SFML_OS_LINUX)\n    find_package(UDev REQUIRED)\n    target_link_libraries(sfml-window PRIVATE UDev::UDev dl)\nelseif(SFML_OS_WINDOWS)\n    target_link_libraries(sfml-window PRIVATE winmm gdi32)\nelseif(SFML_OS_FREEBSD)\n    target_link_libraries(sfml-window PRIVATE usbhid)\nelseif(SFML_OS_MACOS)\n    target_link_libraries(sfml-window PRIVATE \"-framework Foundation\" \"-framework AppKit\" \"-framework IOKit\" \"-framework Carbon\")\nelseif(SFML_OS_IOS)\n    target_link_libraries(sfml-window PUBLIC \"-framework Foundation\" \"-framework UIKit\" \"-framework CoreGraphics\" \"-framework QuartzCore\" \"-framework CoreMotion\")\nelseif(SFML_OS_ANDROID)\n    target_link_libraries(sfml-window PRIVATE android)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules for SFML Documentation\nDESCRIPTION: Configures CMake installation rules for the generated documentation, including HTML files, tags, and conditionally the CHM file if it was generated.\nSOURCE: https://github.com/sfml/sfml/blob/master/doc/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# setup install rules\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/SFML.tag\n        DESTINATION ${CMAKE_INSTALL_DOCDIR}\n        COMPONENT doc)\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/html\n        DESTINATION ${CMAKE_INSTALL_DOCDIR}\n        COMPONENT doc)\nif(DOXYGEN_GENERATE_HTMLHELP)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/sfml.chm\n            DESTINATION ${CMAKE_INSTALL_DOCDIR}\n            COMPONENT doc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation and Xcode Templates\nDESCRIPTION: Configures installation of documentation files and optional Xcode templates. Handles license and readme files installation for all builds, and includes special handling for Xcode template installation when specifically requested.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES license.md DESTINATION ${CMAKE_INSTALL_DOCDIR})\ninstall(FILES readme.md DESTINATION ${CMAKE_INSTALL_DOCDIR})\n\n# install the Xcode templates if requested\nif(SFML_INSTALL_XCODE_TEMPLATES)\n    # configure the templates plist files\n    foreach(TEMPLATE \"SFML Compiler\" \"SFML App\")\n        configure_file(\n                    \"tools/xcode/templates/SFML/${TEMPLATE}.xctemplate/TemplateInfo.plist.in\"\n                    \"${CMAKE_CURRENT_BINARY_DIR}/tools/xcode/templates/SFML/${TEMPLATE}.xctemplate/TemplateInfo.plist\"\n                    @ONLY)\n    endforeach()\n    install(DIRECTORY \"tools/xcode/templates/SFML\" \"${CMAKE_CURRENT_BINARY_DIR}/tools/xcode/templates/SFML\"\n            DESTINATION /Library/Developer/Xcode/Templates\n            PATTERN \"*.in\" EXCLUDE\n            PATTERN \".DS_Store\" EXCLUDE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux and BSD-Specific Sources for SFML Window Module\nDESCRIPTION: Sets up platform-specific source files for Linux and BSD builds, with special handling for DRM support and different BSD variants. This includes X11 implementation for window management.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n    if(SFML_USE_DRM)\n        add_definitions(-DSFML_USE_DRM)\n        set(PLATFORM_SRC\n            ${SRCROOT}/EGLCheck.cpp\n            ${SRCROOT}/EGLCheck.hpp\n            ${SRCROOT}/DRM/CursorImpl.hpp\n            ${SRCROOT}/DRM/CursorImpl.cpp\n            ${SRCROOT}/DRM/ClipboardImpl.hpp\n            ${SRCROOT}/DRM/ClipboardImpl.cpp\n            ${SRCROOT}/Unix/SensorImpl.cpp\n            ${SRCROOT}/Unix/SensorImpl.hpp\n            ${SRCROOT}/DRM/InputImpl.cpp\n            ${SRCROOT}/DRM/VideoModeImpl.cpp\n            ${SRCROOT}/DRM/DRMContext.cpp\n            ${SRCROOT}/DRM/DRMContext.hpp\n            ${SRCROOT}/DRM/WindowImplDRM.cpp\n            ${SRCROOT}/DRM/WindowImplDRM.hpp\n        )\n    else()\n        set(PLATFORM_SRC\n            ${SRCROOT}/Unix/CursorImpl.hpp\n            ${SRCROOT}/Unix/CursorImpl.cpp\n            ${SRCROOT}/Unix/ClipboardImpl.hpp\n            ${SRCROOT}/Unix/ClipboardImpl.cpp\n            ${SRCROOT}/Unix/InputImpl.cpp\n            ${SRCROOT}/Unix/KeyboardImpl.hpp\n            ${SRCROOT}/Unix/KeyboardImpl.cpp\n            ${SRCROOT}/Unix/KeySymToKeyMapping.hpp\n            ${SRCROOT}/Unix/KeySymToKeyMapping.cpp\n            ${SRCROOT}/Unix/KeySymToUnicodeMapping.hpp\n            ${SRCROOT}/Unix/KeySymToUnicodeMapping.cpp\n            ${SRCROOT}/Unix/SensorImpl.cpp\n            ${SRCROOT}/Unix/SensorImpl.hpp\n            ${SRCROOT}/Unix/Display.cpp\n            ${SRCROOT}/Unix/Display.hpp\n            ${SRCROOT}/Unix/Utils.hpp\n            ${SRCROOT}/Unix/VideoModeImpl.cpp\n            ${SRCROOT}/Unix/VulkanImplX11.cpp\n            ${SRCROOT}/Unix/WindowImplX11.cpp\n            ${SRCROOT}/Unix/WindowImplX11.hpp\n        )\n        if(SFML_OPENGL_ES)\n            list(APPEND PLATFORM_SRC\n                ${SRCROOT}/EGLCheck.cpp\n                ${SRCROOT}/EGLCheck.hpp\n                ${SRCROOT}/EglContext.cpp\n                ${SRCROOT}/EglContext.hpp\n            )\n        else()\n             list(APPEND PLATFORM_SRC\n                ${SRCROOT}/Unix/GlxContext.cpp\n                ${SRCROOT}/Unix/GlxContext.hpp\n            )\n        endif()\n    endif()\n    if(SFML_OS_LINUX)\n        list(APPEND PLATFORM_SRC\n            ${SRCROOT}/Unix/JoystickImpl.cpp\n            ${SRCROOT}/Unix/JoystickImpl.hpp\n        )\n    elseif(SFML_OS_FREEBSD)\n        list(APPEND PLATFORM_SRC\n            ${SRCROOT}/FreeBSD/JoystickImpl.cpp\n            ${SRCROOT}/FreeBSD/JoystickImpl.hpp\n        )\n    elseif(SFML_OS_OPENBSD)\n        list(APPEND PLATFORM_SRC\n            ${SRCROOT}/OpenBSD/JoystickImpl.cpp\n            ${SRCROOT}/OpenBSD/JoystickImpl.hpp\n        )\n    elseif(SFML_OS_NETBSD)\n        list(APPEND PLATFORM_SRC\n            ${SRCROOT}/NetBSD/JoystickImpl.cpp\n            ${SRCROOT}/NetBSD/JoystickImpl.hpp\n        )\n    endif()\n    source_group(\"unix\" FILES ${PLATFORM_SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Up RenderTexture Implementation\nDESCRIPTION: Configures source files for render texture implementation including FBO and default implementations.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Graphics/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(RENDER_TEXTURE_SRC\n    ${SRCROOT}/RenderTextureImpl.hpp\n    ${SRCROOT}/RenderTextureImplFBO.cpp\n    ${SRCROOT}/RenderTextureImplFBO.hpp\n    ${SRCROOT}/RenderTextureImplDefault.cpp\n    ${SRCROOT}/RenderTextureImplDefault.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Doxygen on macOS with Additional Paths\nDESCRIPTION: Sets up additional paths for finding Doxygen on macOS systems, adding various possible installation locations to the CMake program path.\nSOURCE: https://github.com/sfml/sfml/blob/master/doc/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(SFML_OS_MACOS)\n    # Add some path to search doxygen in more directories.\n    set(ADDITIONAL_PATHS\n        /Developer/Applications/Doxygen.app/Contents/Resources\n        /Developer/Applications/Doxygen.app/Contents/MacOS\n        $ENV{HOME}/Applications/Doxygen.app/Contents/Resources\n        $ENV{HOME}/Applications/Doxygen.app/Contents/MacOS\n        $ENV{HOME}/Applications/Developer/Doxygen.app/Contents/Resources\n        $ENV{HOME}/Applications/Developer/Doxygen.app/Contents/MacOS)\n\n    list(APPEND CMAKE_PROGRAM_PATH ${ADDITIONAL_PATHS})\nendif()\n\nfind_package(Doxygen REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS-Specific Sources for SFML Window Module\nDESCRIPTION: Sets up platform-specific source files for iOS builds, enabling Objective-C++ compilation and including UIKit-based implementations for window management and touch input handling.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(SFML_OS_IOS)\n    enable_language(OBJCXX)\n    set(PLATFORM_SRC\n        ${SRCROOT}/iOS/CursorImpl.hpp\n        ${SRCROOT}/iOS/CursorImpl.cpp\n        ${SRCROOT}/iOS/ClipboardImpl.mm\n        ${SRCROOT}/iOS/ClipboardImpl.hpp\n        ${SRCROOT}/iOS/EaglContext.mm\n        ${SRCROOT}/iOS/EaglContext.hpp\n        ${SRCROOT}/iOS/InputImpl.mm\n        ${SRCROOT}/iOS/JoystickImpl.mm\n        ${SRCROOT}/iOS/JoystickImpl.hpp\n        ${SRCROOT}/iOS/SensorImpl.mm\n        ${SRCROOT}/iOS/SensorImpl.hpp\n        ${SRCROOT}/iOS/VideoModeImpl.mm\n        ${SRCROOT}/iOS/WindowImplUIKit.hpp\n        ${SRCROOT}/iOS/WindowImplUIKit.mm\n        ${SRCROOT}/iOS/ObjCType.hpp\n        ${SRCROOT}/iOS/SFAppDelegate.hpp\n        ${SRCROOT}/iOS/SFAppDelegate.mm\n        ${SRCROOT}/iOS/SFView.hpp\n        ${SRCROOT}/iOS/SFView.mm\n        ${SRCROOT}/iOS/SFViewController.hpp\n        ${SRCROOT}/iOS/SFViewController.mm\n        ${SRCROOT}/iOS/SFMain.hpp\n        ${SRCROOT}/iOS/SFMain.mm\n    )\n    source_group(\"ios\" FILES ${PLATFORM_SRC})\n```\n\n----------------------------------------\n\nTITLE: Rect Usage in SFML 2\nDESCRIPTION: Example of creating and accessing sf::Rect properties in SFML 2 using individual parameters and getter methods.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nsf::FloatRect rect(10, 20, 30, 40);\nsf::Vector2f position = rect.getPosition();\nsf::Vector2f size = rect.getSize();\n```\n\n----------------------------------------\n\nTITLE: Using Scalar Parameters in SFML 2\nDESCRIPTION: Example of SFML 2 code using pairs of scalar parameters for representing concepts like positions and sizes.\nSOURCE: https://github.com/sfml/sfml/blob/master/migration.md#2025-04-20_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nsf::VideoMode videoMode(480, 640, 24);\nsf::CircleShape circle(10);\ncircle.setPosition(10, 20);\nsf::IntRect rect(250, 400, 50, 100);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android-Specific Sources for SFML Window Module\nDESCRIPTION: Sets up platform-specific source files for Android builds, implementing EGL context support and Android-specific implementations for window management and input handling.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(SFML_OS_ANDROID)\n    set(PLATFORM_SRC\n        ${SRCROOT}/EGLCheck.cpp\n        ${SRCROOT}/EGLCheck.hpp\n        ${SRCROOT}/EglContext.cpp\n        ${SRCROOT}/EglContext.hpp\n        ${SRCROOT}/Android/CursorImpl.hpp\n        ${SRCROOT}/Android/CursorImpl.cpp\n        ${SRCROOT}/Android/ClipboardImpl.hpp\n        ${SRCROOT}/Android/ClipboardImpl.cpp\n        ${SRCROOT}/Android/WindowImplAndroid.hpp\n        ${SRCROOT}/Android/WindowImplAndroid.cpp\n        ${SRCROOT}/Android/VideoModeImpl.cpp\n        ${SRCROOT}/Android/InputImpl.cpp\n        ${SRCROOT}/Android/JoystickImpl.hpp\n        ${SRCROOT}/Android/JoystickImpl.cpp\n        ${SRCROOT}/Android/SensorImpl.hpp\n        ${SRCROOT}/Android/SensorImpl.cpp\n    )\n    source_group(\"android\" FILES ${PLATFORM_SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Sources for Windows in CMake\nDESCRIPTION: Conditionally adds Windows-specific implementation files when building for Windows platforms. This branch includes the Windows implementation of sleep functionality.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# add platform specific sources\nif(SFML_OS_WINDOWS)\n    set(PLATFORM_SRC\n        ${SRCROOT}/Win32/SleepImpl.cpp\n        ${SRCROOT}/Win32/SleepImpl.hpp\n    )\n    source_group(\"windows\" FILES ${PLATFORM_SRC})\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Sources for Unix and Android in CMake\nDESCRIPTION: Adds Unix-specific implementation files and conditionally includes additional Android-specific files when targeting Android. This handles sleep implementation for Unix systems and adds specialized Android functionality.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n    set(PLATFORM_SRC\n        ${SRCROOT}/Unix/SleepImpl.cpp\n        ${SRCROOT}/Unix/SleepImpl.hpp\n    )\n\n    if(SFML_OS_ANDROID)\n        list(APPEND PLATFORM_SRC\n            ${SRCROOT}/Android/Activity.hpp\n            ${SRCROOT}/Android/Activity.cpp\n            ${SRCROOT}/Android/NativeActivity.cpp\n            ${SRCROOT}/Android/ResourceStream.cpp\n            ${SRCROOT}/Android/ResourceStream.cpp\n            ${SRCROOT}/Android/SuspendAwareClock.cpp\n        )\n    endif()\n\n    source_group(\"unix\" FILES ${PLATFORM_SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Sources for SFML Network in CMake\nDESCRIPTION: This snippet adds platform-specific source files to the SRC list based on the target operating system. It includes Win32/SocketImpl.cpp for Windows and Unix/SocketImpl.cpp for other platforms.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Network/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# add platform specific sources\nif(SFML_OS_WINDOWS)\n    list(APPEND SRC\n        ${SRCROOT}/Win32/SocketImpl.cpp\n    )\nelse()\n    list(APPEND SRC\n        ${SRCROOT}/Unix/SocketImpl.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM and X11 Dependencies for Linux Systems\nDESCRIPTION: Sets up dependencies for Linux and BSD systems, choosing between DRM/GBM or X11 based on configuration.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n    if(SFML_USE_DRM)\n        find_package(DRM REQUIRED)\n        find_package(GBM REQUIRED)\n        target_link_libraries(sfml-window PRIVATE DRM::DRM GBM::GBM)\n    else()\n        find_package(X11 REQUIRED COMPONENTS Xrandr Xcursor Xi)\n        target_link_libraries(sfml-window PRIVATE X11::X11 X11::Xrandr X11::Xcursor X11::Xi)\n    endif()\nendif()\ntarget_link_libraries(sfml-window PUBLIC SFML::System)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Sources for SFML Window Module\nDESCRIPTION: Sets up platform-specific source files for Windows builds, handling both standard OpenGL and OpenGL ES configurations. This includes Win32-specific implementations for various window components.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# add platform specific sources\nif(SFML_OS_WINDOWS)\n    set(PLATFORM_SRC\n        ${SRCROOT}/Win32/CursorImpl.hpp\n        ${SRCROOT}/Win32/CursorImpl.cpp\n        ${SRCROOT}/Win32/ClipboardImpl.hpp\n        ${SRCROOT}/Win32/ClipboardImpl.cpp\n        ${SRCROOT}/Win32/InputImpl.cpp\n        ${SRCROOT}/Win32/JoystickImpl.cpp\n        ${SRCROOT}/Win32/JoystickImpl.hpp\n        ${SRCROOT}/Win32/SensorImpl.hpp\n        ${SRCROOT}/Win32/SensorImpl.cpp\n        ${SRCROOT}/Win32/Utils.hpp\n        ${SRCROOT}/Win32/VideoModeImpl.cpp\n        ${SRCROOT}/Win32/VulkanImplWin32.cpp\n        ${SRCROOT}/Win32/WindowImplWin32.cpp\n        ${SRCROOT}/Win32/WindowImplWin32.hpp\n    )\n    if(SFML_OPENGL_ES)\n        list(APPEND PLATFORM_SRC\n            ${SRCROOT}/EGLCheck.cpp\n            ${SRCROOT}/EGLCheck.hpp\n            ${SRCROOT}/EglContext.cpp\n            ${SRCROOT}/EglContext.hpp\n        )\n    else()\n        list(APPEND PLATFORM_SRC\n            ${SRCROOT}/Win32/WglContext.cpp\n            ${SRCROOT}/Win32/WglContext.hpp\n        )\n    endif()\n    source_group(\"windows\" FILES ${PLATFORM_SRC})\n```\n\n----------------------------------------\n\nTITLE: Configuring pkg-config Files Installation for SFML on Unix-like Systems\nDESCRIPTION: Sets up conditional pkg-config files installation for SFML on Linux and BSD-like operating systems. It determines the appropriate installation directory and generates configuration files if all main SFML modules are enabled.\nSOURCE: https://github.com/sfml/sfml/blob/master/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# on Linux and BSD-like OS, install pkg-config files by default\nset(SFML_INSTALL_PKGCONFIG_DEFAULT OFF)\n\nif(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n    set(SFML_INSTALL_PKGCONFIG_DEFAULT ON)\nendif()\n\nsfml_set_option(SFML_INSTALL_PKGCONFIG_FILES ${SFML_INSTALL_PKGCONFIG_DEFAULT} BOOL \"ON to automatically install pkg-config files so other projects can find SFML\")\n\nif(SFML_INSTALL_PKGCONFIG_FILES)\n    # account for CMAKE_INSTALL_LIBDIR potentially being an absolute path\n    file(RELATIVE_PATH SFML_RELATIVE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX} ${CMAKE_INSTALL_FULL_LIBDIR})\n\n    # set pkgconfig install directory\n    # this could be e.g. macports on mac or msys2 on windows etc.\n    set(SFML_PKGCONFIG_DIR \"${SFML_RELATIVE_INSTALL_LIBDIR}/pkgconfig\")\n\n    if(SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n        set(SFML_PKGCONFIG_DIR \"libdata/pkgconfig\")\n    endif()\n\n    sfml_set_option(SFML_PKGCONFIG_INSTALL_DIR \"${SFML_PKGCONFIG_DIR}\" PATH \"Install directory for SFML's pkg-config .pc files\")\n\n    if(SFML_BUILD_AUDIO AND SFML_BUILD_NETWORK AND SFML_BUILD_GRAPHICS AND SFML_BUILD_WINDOW)\n        configure_file(\n            \"tools/pkg-config/sfml-all.pc.in\"\n            \"tools/pkg-config/sfml-all.pc\"\n            @ONLY)\n        install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/tools/pkg-config/sfml-all.pc\"\n            DESTINATION \"${SFML_PKGCONFIG_INSTALL_DIR}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Thread Support Library to SFML System Module\nDESCRIPTION: Links the threading library to the sfml-system target, enabling multithreading support across all platforms. This is essential for functionality like Sleep and concurrent operations.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(sfml-system PRIVATE Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Setting SFML System Module Source Paths in CMake\nDESCRIPTION: Defines the include and source root directories for the SFML System module. These paths are used as base locations for the source files listed later in the file.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INCROOT ${PROJECT_SOURCE_DIR}/include/SFML/System)\nset(SRCROOT ${PROJECT_SOURCE_DIR}/src/SFML/System)\n```\n\n----------------------------------------\n\nTITLE: Creating SFML Test Utilities Library\nDESCRIPTION: Defines a shared test utility library for SFML tests. This library provides helper functions for testing System, Window, Graphics, and Audio modules, and links with SFML::System and Catch2.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(sfml-test-main STATIC\n    TestUtilities/SystemUtil.hpp\n    TestUtilities/SystemUtil.cpp\n    TestUtilities/WindowUtil.hpp\n    TestUtilities/WindowUtil.cpp\n    TestUtilities/GraphicsUtil.hpp\n    TestUtilities/GraphicsUtil.cpp\n    TestUtilities/AudioUtil.hpp\n    TestUtilities/AudioUtil.cpp\n)\ntarget_include_directories(sfml-test-main PUBLIC TestUtilities)\ntarget_link_libraries(sfml-test-main PUBLIC SFML::System Catch2::Catch2WithMain)\nset_target_warnings(sfml-test-main)\n\n# set the target flags to use the appropriate C++ standard library\nsfml_set_stdlib(Catch2)\nsfml_set_stdlib(Catch2WithMain)\nsfml_set_stdlib(sfml-test-main)\n```\n\n----------------------------------------\n\nTITLE: Setting Up SFML Module Test Targets\nDESCRIPTION: Defines the test targets for each SFML module (System, Window, Graphics, Network, and Audio). Each target compiles and links a set of test files specific to the respective module.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SYSTEM_SRC\n    System/Angle.test.cpp\n    System/Clock.test.cpp\n    System/Config.test.cpp\n    System/Err.test.cpp\n    System/Exception.test.cpp\n    System/FileInputStream.test.cpp\n    System/MemoryInputStream.test.cpp\n    System/Sleep.test.cpp\n    System/String.test.cpp\n    System/Time.test.cpp\n    System/Utf.test.cpp\n    System/Vector2.test.cpp\n    System/Vector3.test.cpp\n)\nsfml_add_test(test-sfml-system \"${SYSTEM_SRC}\" \"\")\ntarget_compile_definitions(test-sfml-system PRIVATE\n    EXPECTED_SFML_VERSION_MAJOR=${SFML_VERSION_MAJOR}\n    EXPECTED_SFML_VERSION_MINOR=${SFML_VERSION_MINOR}\n    EXPECTED_SFML_VERSION_PATCH=${SFML_VERSION_PATCH}\n    EXPECTED_SFML_VERSION_IS_RELEASE=$<IF:$<BOOL:${VERSION_IS_RELEASE}>,true,false>\n)\n\nset(WINDOW_SRC\n    Window/Clipboard.test.cpp\n    Window/Context.test.cpp\n    Window/ContextSettings.test.cpp\n    Window/Cursor.test.cpp\n    Window/Event.test.cpp\n    Window/GlResource.test.cpp\n    Window/Joystick.test.cpp\n    Window/Keyboard.test.cpp\n    Window/Mouse.test.cpp\n    Window/VideoMode.test.cpp\n    Window/Vulkan.test.cpp\n    Window/Window.test.cpp\n    Window/WindowBase.test.cpp\n)\nsfml_add_test(test-sfml-window \"${WINDOW_SRC}\" SFML::Window)\n\nset(GRAPHICS_SRC\n    Graphics/BlendMode.test.cpp\n    Graphics/CircleShape.test.cpp\n    Graphics/Color.test.cpp\n    Graphics/ConvexShape.test.cpp\n    Graphics/CoordinateType.test.cpp\n    Graphics/Drawable.test.cpp\n    Graphics/Font.test.cpp\n    Graphics/Glsl.test.cpp\n    Graphics/Glyph.test.cpp\n    Graphics/Image.test.cpp\n    Graphics/Rect.test.cpp\n    Graphics/RectangleShape.test.cpp\n    Graphics/Render.test.cpp\n    Graphics/RenderStates.test.cpp\n    Graphics/RenderTarget.test.cpp\n    Graphics/RenderTexture.test.cpp\n    Graphics/RenderWindow.test.cpp\n    Graphics/Shader.test.cpp\n    Graphics/Shape.test.cpp\n    Graphics/Sprite.test.cpp\n    Graphics/StencilMode.test.cpp\n    Graphics/Text.test.cpp\n    Graphics/Texture.test.cpp\n    Graphics/Transform.test.cpp\n    Graphics/Transformable.test.cpp\n    Graphics/Vertex.test.cpp\n    Graphics/VertexArray.test.cpp\n    Graphics/VertexBuffer.test.cpp\n    Graphics/View.test.cpp\n)\nif(SFML_OS_WINDOWS)\n    list(APPEND GRAPHICS_SRC\n        Graphics/WindowHandleWin32.test.cpp\n    )\nendif()\nsfml_add_test(test-sfml-graphics \"${GRAPHICS_SRC}\" SFML::Graphics)\nif(SFML_RUN_DISPLAY_TESTS)\n    target_compile_definitions(test-sfml-graphics PRIVATE SFML_RUN_DISPLAY_TESTS)\nendif()\n\nset(NETWORK_SRC\n    Network/Ftp.test.cpp\n    Network/Http.test.cpp\n    Network/IpAddress.test.cpp\n    Network/Packet.test.cpp\n    Network/Socket.test.cpp\n    Network/SocketSelector.test.cpp\n    Network/TcpListener.test.cpp\n    Network/TcpSocket.test.cpp\n    Network/UdpSocket.test.cpp\n)\nsfml_add_test(test-sfml-network \"${NETWORK_SRC}\" SFML::Network)\n\nset(AUDIO_SRC\n    Audio/AudioResource.test.cpp\n    Audio/InputSoundFile.test.cpp\n    Audio/Listener.test.cpp\n    Audio/Music.test.cpp\n    Audio/OutputSoundFile.test.cpp\n    Audio/Sound.test.cpp\n    Audio/SoundBuffer.test.cpp\n    Audio/SoundBufferRecorder.test.cpp\n    Audio/SoundFileFactory.test.cpp\n    Audio/SoundFileReader.test.cpp\n    Audio/SoundFileWriter.test.cpp\n    Audio/SoundRecorder.test.cpp\n    Audio/SoundSource.test.cpp\n    Audio/SoundStream.test.cpp\n)\nsfml_add_test(test-sfml-audio \"${AUDIO_SRC}\" SFML::Audio)\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Test Runner with CMake\nDESCRIPTION: Sets up a custom target 'runtests' that builds and runs all SFML tests. It includes dependencies for various SFML modules, executes tests using CTest, and applies coverage reporting.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Convenience for building and running tests in a single command\nadd_custom_target(runtests DEPENDS test-sfml-system test-sfml-window test-sfml-graphics test-sfml-network test-sfml-audio)\nadd_custom_command(TARGET runtests\n                   COMMENT \"Run tests\"\n                   POST_BUILD\n                   COMMAND ${COVERAGE_PREFIX} ${CMAKE_CTEST_COMMAND} --output-on-failure -C $<CONFIG>\n                   COMMAND ${CMAKE_COMMAND} -P \"${PROJECT_BINARY_DIR}/patch_coverage.cmake\"\n                   VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS-Specific Sources for SFML Window Module\nDESCRIPTION: Sets up platform-specific source files for macOS builds, enabling Objective-C and Objective-C++ compilation and including Cocoa-based implementations for window management and input handling.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(SFML_OS_MACOS)\n    enable_language(OBJC OBJCXX)\n    set(PLATFORM_SRC\n        ${SRCROOT}/macOS/cg_sf_conversion.hpp\n        ${SRCROOT}/macOS/cg_sf_conversion.mm\n        ${SRCROOT}/macOS/CursorImpl.hpp\n        ${SRCROOT}/macOS/CursorImpl.mm\n        ${SRCROOT}/macOS/ClipboardImpl.hpp\n        ${SRCROOT}/macOS/ClipboardImpl.mm\n        ${SRCROOT}/macOS/InputImpl.mm\n        ${SRCROOT}/macOS/HIDInputManager.hpp\n        ${SRCROOT}/macOS/HIDInputManager.mm\n        ${SRCROOT}/macOS/HIDJoystickManager.hpp\n        ${SRCROOT}/macOS/HIDJoystickManager.cpp\n        ${SRCROOT}/macOS/JoystickImpl.cpp\n        ${SRCROOT}/macOS/JoystickImpl.hpp\n        ${SRCROOT}/macOS/NSImage+raw.h\n        ${SRCROOT}/macOS/NSImage+raw.mm\n        ${SRCROOT}/macOS/Scaling.h\n        ${SRCROOT}/macOS/SensorImpl.cpp\n        ${SRCROOT}/macOS/SensorImpl.hpp\n        ${SRCROOT}/macOS/SFApplication.h\n        ${SRCROOT}/macOS/SFApplication.m\n        ${SRCROOT}/macOS/SFApplicationDelegate.h\n        ${SRCROOT}/macOS/SFApplicationDelegate.m\n        ${SRCROOT}/macOS/SFContext.hpp\n        ${SRCROOT}/macOS/SFContext.mm\n        ${SRCROOT}/macOS/SFKeyboardModifiersHelper.h\n        ${SRCROOT}/macOS/SFKeyboardModifiersHelper.mm\n        ${SRCROOT}/macOS/SFOpenGLView.h\n        ${SRCROOT}/macOS/SFOpenGLView.mm\n        ${SRCROOT}/macOS/SFOpenGLView+keyboard.mm\n        ${SRCROOT}/macOS/SFOpenGLView+keyboard_priv.h\n        ${SRCROOT}/macOS/SFOpenGLView+mouse.mm\n        ${SRCROOT}/macOS/SFOpenGLView+mouse_priv.h\n        ${SRCROOT}/macOS/SFSilentResponder.h\n        ${SRCROOT}/macOS/SFSilentResponder.m\n        ${SRCROOT}/macOS/SFWindow.h\n        ${SRCROOT}/macOS/SFWindow.m\n        ${SRCROOT}/macOS/SFWindowController.h\n        ${SRCROOT}/macOS/SFWindowController.mm\n        ${SRCROOT}/macOS/SFViewController.h\n        ${SRCROOT}/macOS/SFViewController.mm\n        ${SRCROOT}/macOS/VideoModeImpl.cpp\n        ${SRCROOT}/macOS/WindowImplCocoa.hpp\n        ${SRCROOT}/macOS/WindowImplCocoa.mm\n        ${SRCROOT}/macOS/WindowImplDelegateProtocol.h\n        ${SRCROOT}/macOS/AutoreleasePoolWrapper.hpp\n        ${SRCROOT}/macOS/AutoreleasePoolWrapper.mm\n    )\n    source_group(\"mac\" FILES ${PLATFORM_SRC})\n```\n\n----------------------------------------\n\nTITLE: Atomic Library Linking for GCC on 32-bit Architectures\nDESCRIPTION: Handles special case for platforms requiring libatomic linkage when using atomic operations with GCC. This is particularly needed for platforms like Raspberry Pi 3 (armhf) where 64-bit atomic operations on 32-bit architecture aren't natively supported by the CPU.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# on some platforms (e.g. Raspberry Pi 3 armhf), GCC requires linking libatomic to use <atomic> features\n# that aren't supported by native CPU instructions (64-bit atomic operations on 32-bit architecture)\nif(SFML_COMPILER_GCC)\n    include(CheckCXXSourceCompiles)\n    check_cxx_source_compiles(\"#include <atomic>\n        int main(){std::atomic_ullong x(1); return x.fetch_add(1);}\" ATOMIC_TEST)\n    if(NOT ATOMIC_TEST)\n        if(SFML_BUILD_GRAPHICS)\n            target_link_libraries(sfml-graphics PRIVATE atomic)\n        endif()\n        if(SFML_BUILD_AUDIO)\n            target_link_libraries(sfml-audio PRIVATE atomic)\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Atomic Operations Compatibility Check\nDESCRIPTION: Checks and configures atomic operations support for platforms requiring libatomic linking.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Window/CMakeLists.txt#2025-04-20_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(SFML_COMPILER_GCC)\n    include(CheckCXXSourceCompiles)\n    check_cxx_source_compiles(\"#include <atomic>\n        int main(){std::atomic_ullong x(1); return x.fetch_add(1);}\" ATOMIC_TEST)\n    if(NOT ATOMIC_TEST)\n        target_link_libraries(sfml-window PRIVATE atomic)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting SFML Module in Xcode Build Settings\nDESCRIPTION: Instructions for adding or removing an SFML module in an existing Xcode project by modifying the build settings. This involves setting the SFML_XXX variable, where XXX is the module name.\nSOURCE: https://github.com/sfml/sfml/blob/master/tools/xcode/templates/readme.txt#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"$(SFML_LINK_PREFIX) sfml-XXX$(SFML_LINK_SUFFIX)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Debug Libraries in Xcode\nDESCRIPTION: Instructions for using or not using SFML debug binaries in an existing Xcode project. This involves setting the SFML_LINK_DYLIBS_SUFFIX variable in the build settings.\nSOURCE: https://github.com/sfml/sfml/blob/master/tools/xcode/templates/readme.txt#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"-d\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Test Environment\nDESCRIPTION: Sets up special handling for running tests on Android. This generates shell scripts to copy necessary files to the Android device and to run the tests through ADB.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(SFML_OS_ANDROID AND DEFINED ENV{LIBCXX_SHARED_SO})\n    # Because we can only write to the tmp directory on the Android virtual device we will need to build our directory tree under it\n    set(TARGET_DIR \"/data/local/tmp/$<TARGET_FILE_DIR:test-sfml-system>\")\n\n    # Generate script that copies necessary files over to the Android virtual device\n    file(GENERATE OUTPUT \"${PROJECT_BINARY_DIR}/prepare-android-files.sh\" CONTENT\n        \"#!/bin/bash\\n\\\n        adb shell \\\"mkdir -p ${TARGET_DIR}\\\"\\n\\\n        adb push $<TARGET_FILE:test-sfml-audio>    ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:test-sfml-graphics> ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:test-sfml-network>  ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:test-sfml-system>   ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:test-sfml-window>   ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:SFML::Audio>        ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:SFML::Graphics>     ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:SFML::Network>      ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:SFML::System>       ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:SFML::Window>       ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:Catch2>             ${TARGET_DIR}\\n\\\n        adb push $<TARGET_FILE:Catch2WithMain>     ${TARGET_DIR}\\n\\\n        adb push $ENV{LIBCXX_SHARED_SO}            ${TARGET_DIR}\\n\\\n        adb push ${CMAKE_CURRENT_LIST_DIR}         ${TARGET_DIR}\\n\\\n        adb shell \\\"chmod -R 775 ${TARGET_DIR} && ls -la ${TARGET_DIR}\\\"\\n\"\n        FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE)\n\n    # Add the target to invoke the file copy script\n    add_custom_target(prepare-android-files COMMAND \"${PROJECT_BINARY_DIR}/prepare-android-files.sh\")\n\n    # Generate proxy script that translates CTest commands into adb shell commands\n    file(GENERATE OUTPUT \"${PROJECT_BINARY_DIR}/run-in-adb-shell.sh\" CONTENT\n        \"#!/bin/bash\\n\\\n        adb shell \\\"cd ${TARGET_DIR}/test; LD_LIBRARY_PATH=${TARGET_DIR} /data/local/tmp/$1 \\\\\\\"$2\\\\\\\" \\\\\\\"$3\\\\\\\" \\\\\\\"$4\\\\\\\" \\\\\\\"$5\\\\\\\" \\\\\\\"$6\\\\\\\" \\\\\\\"$7\\\\\\\" \\\\\\\"$8\\\\\\\" \\\\\\\"$9\\\\\\\"\\\"\\n\"\n        FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Static Libraries in Xcode\nDESCRIPTION: Instructions for using SFML static libraries in an Xcode project, although not recommended. This involves setting SFML_LINK_DYLIBS_SUFFIX for debug and release modes.\nSOURCE: https://github.com/sfml/sfml/blob/master/tools/xcode/templates/readme.txt#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n\"-s-d\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"-s\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Precompiled Headers for SFML System Module\nDESCRIPTION: Conditionally enables precompiled headers for the sfml-system library if the SFML_ENABLE_PCH option is set. This optimization improves build times by reusing the precompiled headers across multiple SFML libraries.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# enable precompiled headers\nif (SFML_ENABLE_PCH)\n    message(VERBOSE \"enabling PCH for SFML library 'sfml-system' (reused as the PCH for other SFML libraries)\")\n    target_precompile_headers(sfml-system PRIVATE ${PROJECT_SOURCE_DIR}/src/SFML/PCH.hpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Android-Specific Include Directories\nDESCRIPTION: Adds the Glad library headers as a system include directory when building for Android platforms. This ensures proper OpenGL support on Android devices.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/System/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(SFML_OS_ANDROID)\n    # glad sources\n    target_include_directories(sfml-system SYSTEM PRIVATE \"${PROJECT_SOURCE_DIR}/extlibs/headers/glad/include\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SFML Main Library Sources\nDESCRIPTION: Sets up the source files and compilation settings for SFML's main library component based on the target platform (Windows, iOS, or Android). Includes special handling for Android with position independent code and glad library integration.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Main/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRCROOT ${PROJECT_SOURCE_DIR}/src/SFML/Main)\n\n# sources\nif(SFML_OS_WINDOWS)\n    set(SRC ${SRCROOT}/MainWin32.cpp)\nelseif(SFML_OS_IOS)\n    enable_language(OBJCXX)\n    set(SRC ${SRCROOT}/MainiOS.mm)\nelseif(SFML_OS_ANDROID)\n    set(SRC ${SRCROOT}/MainAndroid.cpp)\nelse()\n    return()\nendif()\n\n# define the sfml-main target\nsfml_add_library(Main STATIC SOURCES ${SRC})\n\nif(SFML_OS_ANDROID)\n    # ensure that linking into shared libraries doesn't fail\n    set_target_properties(sfml-main PROPERTIES POSITION_INDEPENDENT_CODE ON)\n\n    # glad sources\n    target_include_directories(sfml-main SYSTEM PRIVATE \"${PROJECT_SOURCE_DIR}/extlibs/headers/glad/include\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment Options\nDESCRIPTION: Sets up configuration options for tests that require special environment conditions, such as a display for graphics tests or an audio device for audio tests.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nsfml_set_option(SFML_RUN_DISPLAY_TESTS ON BOOL \"ON to run tests that require a display, OFF to ignore it\")\nif(SFML_RUN_DISPLAY_TESTS)\n    target_compile_definitions(sfml-test-main PRIVATE SFML_RUN_DISPLAY_TESTS)\nendif()\n\nsfml_set_option(SFML_RUN_AUDIO_DEVICE_TESTS ON BOOL \"ON to run tests that require an audio device, OFF to ignore it\")\nif(SFML_RUN_AUDIO_DEVICE_TESTS)\n    target_compile_definitions(sfml-test-main PRIVATE SFML_RUN_AUDIO_DEVICE_TESTS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Code Coverage with OpenCppCoverage\nDESCRIPTION: Configures code coverage reporting for Windows builds using OpenCppCoverage. This includes finding the tool, setting up path exclusions, and creating a script to patch the coverage output for compatibility with Coveralls.\nSOURCE: https://github.com/sfml/sfml/blob/master/test/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(SFML_ENABLE_COVERAGE AND SFML_OS_WINDOWS AND NOT SFML_COMPILER_GCC)\n    # Try to find and use OpenCppCoverage for coverage reporting when building with MSVC\n    find_program(OpenCppCoverage_BINARY \"OpenCppCoverage.exe\")\n\n    if(OpenCppCoverage_BINARY)\n        execute_process(COMMAND \"${OpenCppCoverage_BINARY}\" --help ERROR_VARIABLE OpenCppCoverage_HELP_OUTPUT OUTPUT_QUIET)\n\n        if(OpenCppCoverage_HELP_OUTPUT MATCHES \"OpenCppCoverage Version: ([.0-9]+)\")\n            set(OpenCppCoverage_VERSION \"${CMAKE_MATCH_1}\")\n        endif()\n    endif()\n\n    include(FindPackageHandleStandardArgs)\n\n    find_package_handle_standard_args(OpenCppCoverage\n        REQUIRED_VARS OpenCppCoverage_BINARY\n        VERSION_VAR OpenCppCoverage_VERSION\n    )\nendif()\n\nif(SFML_ENABLE_COVERAGE AND OpenCppCoverage_FOUND)\n    # Use OpenCppCoverage\n    message(STATUS \"Using OpenCppCoverage to generate coverage report\")\n\n    string(REPLACE \"/\" \"\\\\\" COVERAGE_EXCLUDE \"${CMAKE_CTEST_COMMAND}\")\n    string(REPLACE \"/\" \"\\\\\" COVERAGE_SRC \"${PROJECT_SOURCE_DIR}/src\")\n    string(REPLACE \"/\" \"\\\\\" COVERAGE_INCLUDE \"${PROJECT_SOURCE_DIR}/include\")\n\n    # We need to patch the OpenCppCoverage output to remove path prefixes so Coveralls doesn't get confused\n    cmake_path(GET PROJECT_SOURCE_DIR ROOT_NAME COVERAGE_ROOT_NAME)\n    string(REPLACE \"/\" \"\\\\\\\\\" COVERAGE_PATH_PREFIX \"${PROJECT_SOURCE_DIR}/\")\n    string(REPLACE \"${COVERAGE_ROOT_NAME}\\\\\\\\\" \"\" COVERAGE_PATH_PREFIX \"${COVERAGE_PATH_PREFIX}\")\n\n    file(WRITE \"${PROJECT_BINARY_DIR}/patch_coverage.cmake\"\n         \"file(READ \\\"${PROJECT_BINARY_DIR}/coverage.out\\\" COVERAGE_OUT)\\n\\\n         string(REPLACE \\\"${COVERAGE_PATH_PREFIX}\\\" \\\"\\\" COVERAGE_OUT \\\"\\${COVERAGE_OUT}\\\")\\n\\\n         string(REPLACE \\\"${COVERAGE_ROOT_NAME}\\\" \\\".\\\" COVERAGE_OUT \\\"\\${COVERAGE_OUT}\\\")\\n\\\n         file(WRITE \\\"${PROJECT_BINARY_DIR}/coverage.out\\\" \\\"\\${COVERAGE_OUT}\\\")\\n\")\n\n    set(COVERAGE_PREFIX ${OpenCppCoverage_BINARY} --quiet --export_type cobertura:${PROJECT_BINARY_DIR}/coverage.out --cover_children --excluded_modules \"${COVERAGE_EXCLUDE}\" --sources \"${COVERAGE_SRC}\" --sources \"${COVERAGE_INCLUDE}\" --)\nelse()\n    # On all other systems, we just run an empty script\n    file(WRITE \"${PROJECT_BINARY_DIR}/patch_coverage.cmake\" \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenGL Extension List for SFML\nDESCRIPTION: A comprehensive list of OpenGL extensions that SFML depends on, including texture, blending, shader, framebuffer, and buffer functionality extensions. This list was generated with a Lua script as indicated in the header comment.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/Graphics/GLExtensions.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// Created with:\n// lua LoadGen.lua\n\nSGIS_texture_edge_clamp\nEXT_texture_edge_clamp\nEXT_blend_minmax\nEXT_blend_subtract\nARB_multitexture\nEXT_blend_func_separate\nARB_vertex_buffer_object\nARB_shading_language_100\nARB_shader_objects\nARB_vertex_shader\nARB_fragment_shader\nARB_texture_non_power_of_two\nEXT_blend_equation_separate\nEXT_texture_sRGB\nEXT_framebuffer_object\nEXT_packed_depth_stencil\nEXT_framebuffer_blit\nEXT_framebuffer_multisample\nARB_copy_buffer\nARB_geometry_shader4\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Addition in SFML\nDESCRIPTION: Adds SFML module subdirectories based on build flags and platform requirements. The System module is always included, while other modules like Window, Network, Graphics, and Audio are conditionally added based on build configuration flags.\nSOURCE: https://github.com/sfml/sfml/blob/master/src/SFML/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# add the modules subdirectories\n\n# sfml-system\nadd_subdirectory(System)\n\n# sfml-main\nif(SFML_OS_WINDOWS OR SFML_OS_ANDROID OR SFML_OS_IOS)\n    add_subdirectory(Main)\nendif()\n\n# sfml-window\nif(SFML_BUILD_WINDOW OR SFML_BUILD_GRAPHICS)\n    add_subdirectory(Window)\nendif()\n\n# sfml-network\nif(SFML_BUILD_NETWORK)\n    add_subdirectory(Network)\nendif()\n\n# sfml-graphics\nif(SFML_BUILD_GRAPHICS)\n    add_subdirectory(Graphics)\nendif()\n\n# sfml-audio\nif(SFML_BUILD_AUDIO)\n    add_subdirectory(Audio)\nendif()\n```"
  }
]