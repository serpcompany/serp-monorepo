[
  {
    "owner": "containrrr",
    "repo": "watchtower",
    "content": "TITLE: Docker Compose Configuration for Watchtower with Private Registry\nDESCRIPTION: Complete Docker Compose file that sets up a container from a private GitHub Container Registry and monitors it with Watchtower. Configures Watchtower to check for updates every 30 seconds instead of the default 24 hours.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/usage-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  cavo:\n    image: ghcr.io/<org>/<image>:<tag>\n    ports:\n      - \"443:3443\"\n      - \"80:3080\"\n  watchtower:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /root/.docker/config.json:/config.json\n    command: --interval 30\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Docker CLI\nDESCRIPTION: Command to run Watchtower as a Docker container, mounting the Docker socket to enable container management. This setup allows Watchtower to monitor and update other containers.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d \\\n--name watchtower \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\ncontainrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower to Monitor Specific Containers\nDESCRIPTION: Example of launching watchtower as a daemon to monitor only specific containers (nginx and redis) for updates. This mounts the Docker socket to allow watchtower to communicate with the Docker daemon.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d \\\n    --name watchtower \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower \\\n    nginx redis\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchtower HTTP API with Docker Compose\nDESCRIPTION: Docker Compose configuration demonstrating how to set up Watchtower with HTTP API enabled, including volume mounts, environment variables, and container labels for selective monitoring.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/http-api-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  app-monitored-by-watchtower:\n    image: myapps/monitored-by-watchtower\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=true\"\n\n  watchtower:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    command: --debug --http-api-update\n    environment:\n      - WATCHTOWER_HTTP_API_TOKEN=mytoken\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=false\"\n    ports:\n      - 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Deploying Watchtower with Docker Compose\nDESCRIPTION: Docker Compose configuration for running Watchtower, defining the service with necessary volume mounts for Docker socket access. This allows integration with existing Docker Compose deployments.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  watchtower:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Watchtower with AWS ECR Credential Helper\nDESCRIPTION: A Docker Compose configuration that runs Watchtower with the AWS ECR credential helper mounted from a volume, enabling authentication with AWS ECR registries.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.4\"\nservices:\n # Check for new images and restart things if a new image exists\n # for any of our containers.\n watchtower:\n   image: containrrr/watchtower:latest\n   volumes:\n     - /var/run/docker.sock:/var/run/docker.sock\n     - .docker/config.json:/config.json\n     - helper:/go/bin\n   environment:\n     - HOME=/\n     - PATH=$PATH:/go/bin\n     - AWS_REGION=us-west-1\nvolumes:\n helper: \n   external: true\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Basic Configuration in Docker\nDESCRIPTION: Basic command to run Watchtower in Docker with the required Docker socket volume mount. This allows Watchtower to interact with the Docker API to monitor running containers.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/usage-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with TLS Verification\nDESCRIPTION: Docker run command that configures Watchtower to connect to a TLS-protected Docker host. Mounts docker-machine certificates and enables TLS verification for secure communication.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/secure-connections.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -e DOCKER_HOST=$DOCKER_HOST \\\n  -e DOCKER_CERT_PATH=/etc/ssl/docker \\\n  -v $DOCKER_CERT_PATH:/etc/ssl/docker \\\n  containrrr/watchtower --tlsverify\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Hooks in Dockerfile for Watchtower\nDESCRIPTION: Example of how to define pre-check, pre-update, post-update, and post-check lifecycle hooks using LABEL instructions in a Dockerfile. These hooks execute shell scripts at different stages of the container update process.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/lifecycle-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nLABEL com.centurylinklabs.watchtower.lifecycle.pre-check=\"/sync.sh\"\nLABEL com.centurylinklabs.watchtower.lifecycle.pre-update=\"/dump-data.sh\"\nLABEL com.centurylinklabs.watchtower.lifecycle.post-update=\"/restore-data.sh\"\nLABEL com.centurylinklabs.watchtower.lifecycle.post-check=\"/send-heartbeat.sh\"\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Remote Docker Endpoint using DOCKER_HOST Environment Variable\nDESCRIPTION: This command launches Watchtower in a Docker container and configures it to monitor a remote Docker daemon using the DOCKER_HOST environment variable. The remote Docker endpoint is specified as a TCP URL.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/remote-hosts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -e DOCKER_HOST=\"tcp://10.0.1.2:2375\" \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Initializing Watchtower Docker Container\nDESCRIPTION: Command to start the Watchtower container in detached mode with access to the Docker socket. This enables Watchtower to monitor and update other containers on the host system.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --detach \\\n    --name watchtower \\\n    --volume /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Custom Docker Config Path\nDESCRIPTION: A Docker Compose configuration for Watchtower that specifies a custom location for the Docker config using the DOCKER_CONFIG environment variable, useful when the config file changes during runtime.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.4\"\n\nservices: \n  watchtower:\n    image: containrrr/watchtower\n    environment:\n        DOCKER_CONFIG: /config\n    volumes:\n      - /etc/watchtower/config/:/config/\n      - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Docker Login Credentials\nDESCRIPTION: Docker command that uses the credentials from a previous docker login by mounting the Docker credentials file to the Watchtower container.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run [...] -v <PATH_TO_HOME_DIR>/.docker/config.json:/config.json containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus scrape_config for Watchtower Metrics\nDESCRIPTION: Example YAML configuration for setting up Prometheus to scrape metrics from Watchtower. This configuration establishes a job that scrapes the Watchtower metrics endpoint every 5 seconds using bearer token authentication.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: watchtower\n    scrape_interval: 5s\n    metrics_path: /v1/metrics\n    bearer_token: demotoken\n    static_configs:\n      - targets:\n        - 'watchtower:8080'\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Private Registry Authentication Using Environment Variables\nDESCRIPTION: Command to run Watchtower with credentials for private Docker registries using environment variables. Includes debug mode and ability to specify which containers to watch.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/usage-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -e REPO_USER=username \\\n  -e REPO_PASS=password \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  containrrr/watchtower container_to_watch --debug\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with notify-upgrade (Docker Compose)\nDESCRIPTION: This snippet shows how to use Docker Compose to run Watchtower with the 'notify-upgrade' command. It sets up the necessary environment variables and volume mounts.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  watchtower:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    env:\n      WATCHTOWER_NOTIFICATIONS: slack\n      WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy\n    command: notify-upgrade\n```\n\n----------------------------------------\n\nTITLE: Including Containers for Watchtower Monitoring in Dockerfile\nDESCRIPTION: This snippet demonstrates how to set a label in a Dockerfile to explicitly include a container for Watchtower monitoring when using the --label-enable flag.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nLABEL com.centurylinklabs.watchtower.enable=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Registry Authentication Configuration in JSON\nDESCRIPTION: A JSON configuration template for manually setting up Docker registry authentication. Requires a base64-encoded username and password string in the auth field.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"<REGISTRY_NAME>\": {\n            \"auth\": \"XXXXXXX\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchtower Scopes in Docker Compose\nDESCRIPTION: This Docker Compose configuration demonstrates how to set up multiple Watchtower instances with different scopes. It includes examples of scoped containers, unscoped containers, and shows how to configure both scoped and unscoped Watchtower instances using the --scope command line argument and appropriate container labels.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/running-multiple-instances.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  app-with-scope:\n    image: myapps/monitored-by-watchtower\n    labels: [ \"com.centurylinklabs.watchtower.scope=myscope\" ]\n\n  scoped-watchtower:\n    image: containrrr/watchtower\n    volumes: [ \"/var/run/docker.sock:/var/run/docker.sock\" ]\n    command: --interval 30 --scope myscope\n    labels: [ \"com.centurylinklabs.watchtower.scope=myscope\" ] \n\n  unscoped-app-a:\n    image: myapps/app-a\n\n  unscoped-app-b:\n    image: myapps/app-b\n    labels: [ \"com.centurylinklabs.watchtower.scope=none\" ]\n    \n  unscoped-app-c:\n    image: myapps/app-b\n    labels: [ \"com.centurylinklabs.watchtower.scope=\" ]\n    \n  unscoped-watchtower:\n    image: containrrr/watchtower\n    volumes: [ \"/var/run/docker.sock:/var/run/docker.sock\" ]\n    command: --interval 30 --scope none\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchtower with Secrets in Docker Compose\nDESCRIPTION: Example of using Docker secrets with watchtower in a docker-compose configuration. This demonstrates how to securely provide sensitive information like API tokens to watchtower without exposing them in the command line or environment variables.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  access_token:\n    file: access_token\n\nservices:\n  watchtower:\n    secrets:\n      - access_token\n    environment:\n      - WATCHTOWER_HTTP_API_TOKEN=/run/secrets/access_token\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Remote Docker Endpoint using --host Flag\nDESCRIPTION: This command launches Watchtower in a Docker container and configures it to monitor a remote Docker daemon using the --host command line flag. The remote Docker endpoint is specified as a TCP URL.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/remote-hosts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  containrrr/watchtower --host \"tcp://10.0.1.2:2375\"\n```\n\n----------------------------------------\n\nTITLE: Watchtower Label Enable Filter Documentation\nDESCRIPTION: Documentation for the --label-enable flag, which makes watchtower only monitor and update containers that have the specified enable label set to true.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --label-enable\nEnvironment Variable: WATCHTOWER_LABEL_ENABLE\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Custom Notification Settings using Docker\nDESCRIPTION: Docker command to run Watchtower with Discord and Slack notifications using a custom template that includes timestamp and log level information.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATION_URL=\"discord://token@channel slack://watchtower@token-a/token-b/token-c\" \\\n  -e WATCHTOWER_NOTIFICATION_TEMPLATE=\"{{range .}}{{.Time.Format \\\"2006-01-02 15:04:05\\\"}} ({{.Level}}): {{.Message}}{{println}}{{end}}\" \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Watchtower with Registry Credentials\nDESCRIPTION: A Docker Compose configuration for running Watchtower with mounted Docker credentials, allowing it to access private registries.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.4\"\nservices:\n  watchtower:\n    image: containrrr/watchtower:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - <PATH_TO_HOME_DIR>/.docker/config.json:/config.json\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuration for TLS Verification in Watchtower\nDESCRIPTION: Defines the configuration option to use TLS when connecting to the Docker socket and verify the server's certificate.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --tlsverify\nEnvironment Variable: DOCKER_TLS_VERIFY\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Custom Notification Template\nDESCRIPTION: Docker Compose YAML configuration for Watchtower with report notifications enabled and a custom template that formats update information for Discord and Slack services.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  watchtower:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    env:\n      WATCHTOWER_NOTIFICATION_REPORT: \"true\"\n      WATCHTOWER_NOTIFICATION_URL: >\n        discord://token@channel\n        slack://watchtower@token-a/token-b/token-c\n      WATCHTOWER_NOTIFICATION_TEMPLATE: |\n        {{- if .Report -}}\n          {{- with .Report -}}\n        {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n              {{- range .Updated}}\n        - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n              {{- end -}}\n              {{- range .Fresh}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}\n            {{- end -}}\n            {{- range .Skipped}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n            {{- end -}}\n            {{- range .Failed}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n            {{- end -}}\n          {{- end -}}\n        {{- else -}}\n          {{range .Entries -}}{{.Message}}{{\"\\n\"}}{{- end -}}\n        {{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Watchtower Revive Stopped Option Documentation\nDESCRIPTION: Documentation for the --revive-stopped flag, which makes watchtower start stopped containers that have had their images updated. Requires the --include-stopped flag.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --revive-stopped\nEnvironment Variable: WATCHTOWER_REVIVE_STOPPED\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration File for AWS ECR Authentication\nDESCRIPTION: A JSON configuration for Docker that specifies AWS ECR authentication settings, including the credential helper to use for the specific ECR registry.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"credsStore\" : \"ecr-login\",\n   \"HttpHeaders\" : {\n     \"User-Agent\" : \"Docker-Client/19.03.1 (XXXXXX)\"\n   },\n   \"auths\" : {\n     \"<AWS_ACCOUNT_ID>.dkr.ecr.<AWS_ECR_REGION>.amazonaws.com\" : {}\n   },\n   \"credHelpers\": {\n     \"<AWS_ACCOUNT_ID>.dkr.ecr.<AWS_ECR_REGION>.amazonaws.com\" : \"ecr-login\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Watchtower Include Restarting Option Documentation\nDESCRIPTION: Documentation for the --include-restarting flag, which makes watchtower also monitor and update containers that are in the restarting state.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --include-restarting\nEnvironment Variable: WATCHTOWER_INCLUDE_RESTARTING\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Teams Notifications for Watchtower\nDESCRIPTION: This snippet demonstrates how to set up Watchtower to send notifications to Microsoft Teams. It configures the Teams webhook URL and enables sending log data as message facts.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=msteams \\\n  -e WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL=\"https://outlook.office.com/webhook/xxxxxxxx@xxxxxxx/IncomingWebhook/yyyyyyyy/zzzzzzzzzz\" \\\n  -e WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA=true \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Configuration for HTTP API Authentication Token in Watchtower\nDESCRIPTION: Defines the configuration option to set an authentication token for HTTP API requests, which can be provided directly or referenced from a file.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --http-api-token\nEnvironment Variable: WATCHTOWER_HTTP_API_TOKEN\n                Type: String\n             Default: -\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Notifications for Watchtower\nDESCRIPTION: This snippet shows how to configure Watchtower to send notifications to Slack. It sets up the Slack webhook URL and other optional parameters.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=slack \\\n  -e WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=\"https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy\" \\\n  -e WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1 \\\n  -e WATCHTOWER_NOTIFICATION_SLACK_CHANNEL=#my-custom-channel \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Watchtower Include Stopped Option Documentation\nDESCRIPTION: Documentation for the --include-stopped flag, which makes watchtower also monitor and update containers that are in the created or exited states.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --include-stopped, -S\nEnvironment Variable: WATCHTOWER_INCLUDE_STOPPED\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Notifications for Watchtower\nDESCRIPTION: This snippet demonstrates how to configure Watchtower to send email notifications. It sets up various SMTP-related environment variables for email delivery.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=email \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_FROM=fromaddress@gmail.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_TO=toaddress@gmail.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587 \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=fromaddress@gmail.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=app_password \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_DELAY=2 \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Watchtower Monitor-Only Mode Documentation\nDESCRIPTION: Documentation for the --monitor-only flag, which makes watchtower only monitor for updates and send notifications without actually updating containers. Still pulls the latest images due to Docker API limitations.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --monitor-only\nEnvironment Variable: WATCHTOWER_MONITOR_ONLY\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuration for Rolling Restart in Watchtower\nDESCRIPTION: Defines the configuration option to restart one container at a time instead of stopping and starting all at once, useful for zero-downtime deployments with lifecycle hooks.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --rolling-restart\nEnvironment Variable: WATCHTOWER_ROLLING_RESTART\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Watchtower Docker API Version Configuration\nDESCRIPTION: Documentation for specifying which Docker API version watchtower should use when connecting to the Docker daemon. Has a minimum supported version of 1.24.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --api-version, -a\nEnvironment Variable: DOCKER_API_VERSION\n                Type: String\n             Default: \"1.24\"\n```\n\n----------------------------------------\n\nTITLE: Configuration for HTTP API Mode in Watchtower\nDESCRIPTION: Defines the configuration option to run Watchtower in HTTP API mode, allowing image updates to be triggered only by HTTP requests.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --http-api-update\nEnvironment Variable: WATCHTOWER_HTTP_API_UPDATE\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Watchtower Docker Host Configuration\nDESCRIPTION: Documentation for specifying which Docker daemon watchtower should connect to. Can be the local socket or a remote Docker host using a TCP endpoint.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --host, -H\nEnvironment Variable: DOCKER_HOST\n                Type: String\n             Default: \"unix:///var/run/docker.sock\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Watchtower Updates via HTTP API\nDESCRIPTION: CURL command example showing how to trigger container updates through Watchtower's HTTP API using bearer token authentication.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/http-api-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer mytoken\" localhost:8080/v1/update\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Notification Environment File (Docker Compose)\nDESCRIPTION: This snippet shows how to use Docker Compose to run Watchtower with a generated notification environment file. It uses the 'env_file' option to specify the environment variables.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  watchtower:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    env_file:\n      - watchtower-notifications.env\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Images via Watchtower HTTP API\nDESCRIPTION: CURL command demonstrating how to update specific container images by providing image names as query parameters in the HTTP API request.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/http-api-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer mytoken\" localhost:8080/v1/update?image=foo/bar,foo/baz\n```\n\n----------------------------------------\n\nTITLE: Watchtower Volume Removal Option Documentation\nDESCRIPTION: Documentation for the --remove-volumes flag, which enables automatic removal of anonymous volumes when updating containers. Named volumes are preserved.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --remove-volumes\nEnvironment Variable: WATCHTOWER_REMOVE_VOLUMES\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Setting Monitor-Only Mode for Containers with Docker Run\nDESCRIPTION: This command demonstrates how to set a container to monitor-only mode for Watchtower when using the docker run command.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --label=com.centurylinklabs.watchtower.monitor-only=true someimage\n```\n\n----------------------------------------\n\nTITLE: Configuration for Single-Run Mode in Watchtower\nDESCRIPTION: Defines the configuration option to make Watchtower run one update attempt against container name list immediately and then exit.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --run-once, -R\nEnvironment Variable: WATCHTOWER_RUN_ONCE\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Setting Monitor-Only Mode for Containers in Dockerfile\nDESCRIPTION: This snippet shows how to set a label in a Dockerfile to put a container in monitor-only mode for Watchtower.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\nLABEL com.centurylinklabs.watchtower.monitor-only=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Watchtower Stop Signal with Dockerfile LABEL\nDESCRIPTION: This snippet demonstrates how to set a custom stop signal for Watchtower using a LABEL instruction in a Dockerfile. It sets the signal to SIGHUP.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/stop-signals.md#2025-04-22_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nLABEL com.centurylinklabs.watchtower.stop-signal=\"SIGHUP\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Containers from Watchtower Monitoring in Docker Compose\nDESCRIPTION: This YAML snippet shows how to exclude a container from Watchtower monitoring in a docker-compose file.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  someimage:\n    container_name: someimage\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchtower Lifecycle Hooks with Docker Run Command\nDESCRIPTION: Example of how to set up lifecycle hooks using the --label flag when running a container with Docker. This approach allows specifying the hooks without modifying the container image.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/lifecycle-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n--label=com.centurylinklabs.watchtower.lifecycle.pre-check=\"/sync.sh\" \\\n--label=com.centurylinklabs.watchtower.lifecycle.pre-update=\"/dump-data.sh\" \\\n--label=com.centurylinklabs.watchtower.lifecycle.post-update=\"/restore-data.sh\" \\\nsomeimage --label=com.centurylinklabs.watchtower.lifecycle.post-check=\"/send-heartbeat.sh\" \\\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower in Run-Once Mode for Specific Containers\nDESCRIPTION: Example of using watchtower in run-once mode for specific containers (nginx and redis). This executes a single update attempt and removes the watchtower container afterward, useful for debugging and interactive use.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower \\\n    --run-once \\\n    nginx redis\n```\n\n----------------------------------------\n\nTITLE: Configuration for HEAD Failure Warnings in Watchtower\nDESCRIPTION: Defines the configuration option to set when to warn about HEAD pull requests failing, with auto detecting registries that may rate limit pull requests.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --warn-on-head-failure\nEnvironment Variable: WATCHTOWER_WARN_ON_HEAD_FAILURE\n     Possible values: always, auto, never\n             Default: auto\n```\n\n----------------------------------------\n\nTITLE: Watchtower Poll Interval Configuration\nDESCRIPTION: Documentation for setting the polling interval in watchtower, which controls how frequently it checks for image updates. Cannot be used with the --schedule option.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --interval, -i\nEnvironment Variable: WATCHTOWER_POLL_INTERVAL\n                Type: Integer\n             Default: 86400 (24 hours)\n```\n\n----------------------------------------\n\nTITLE: Configuration for Scheduling Updates in Watchtower\nDESCRIPTION: Defines the configuration option to set a cron expression that determines when and how often to check for new images, as an alternative to the interval option.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --schedule, -s\nEnvironment Variable: WATCHTOWER_SCHEDULE\n                Type: String\n             Default: -\n```\n\n----------------------------------------\n\nTITLE: Watchtower Cleanup Option Documentation\nDESCRIPTION: Documentation for the --cleanup flag, which enables automatic removal of old Docker images after container updates to prevent orphaned images from accumulating on the system.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --cleanup\nEnvironment Variable: WATCHTOWER_CLEANUP\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Specifying Watchtower Stop Signal at Container Runtime\nDESCRIPTION: This bash command shows how to set a custom stop signal for Watchtower when running a container. It uses the --label flag to set the signal to SIGHUP.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/stop-signals.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --label=com.centurylinklabs.watchtower.stop-signal=SIGHUP someimage\n```\n\n----------------------------------------\n\nTITLE: Configuration for Label Precedence Over Arguments in Watchtower\nDESCRIPTION: Defines the configuration option for making container labels take precedence over command-line arguments, which affects the behavior of options like monitor-only and no-pull.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --label-take-precedence\nEnvironment Variable: WATCHTOWER_LABEL_TAKE_PRECEDENCE\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuration for Disabling Container Restarts in Watchtower\nDESCRIPTION: Defines the configuration option to prevent Watchtower from restarting containers after updates, useful when container lifecycle is managed by external systems like systemd.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --no-restart\nEnvironment Variable: WATCHTOWER_NO_RESTART\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuration for Disabling Image Pulling in Watchtower\nDESCRIPTION: Defines the configuration option to prevent Watchtower from pulling new images from registries, instead monitoring only the local image cache for changes.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --no-pull\nEnvironment Variable: WATCHTOWER_NO_PULL\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Notification Environment File (Docker)\nDESCRIPTION: This snippet demonstrates how to run Watchtower using a generated notification environment file. It uses the '--env-file' option to specify the environment variables.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d \\\n--name watchtower \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n--env-file watchtower-notifications.env \\\ncontainrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Configuration for HTTP API Metrics in Watchtower\nDESCRIPTION: Defines the configuration option to enable a metrics endpoint that exposes Prometheus metrics via HTTP.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --http-api-metrics\nEnvironment Variable: WATCHTOWER_HTTP_API_METRICS\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Registry Credentials via Docker CLI\nDESCRIPTION: Docker command to run Watchtower with a mounted config.json file containing registry credentials, enabling access to private registries.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run [...] -v <PATH>/config.json:/config.json containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Configuration for Health Check in Watchtower\nDESCRIPTION: Defines the configuration option for a simple health check that returns a success exit code to work with Docker's HEALTHCHECK feature.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --health-check\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with Docker Hub 2FA Authentication Using config.json\nDESCRIPTION: Command to run Watchtower with authentication for Docker Hub when 2FA is enabled. This mounts the Docker config.json file which contains authentication tokens from previous 'docker login' commands.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/usage-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v $HOME/.docker/config.json:/config.json \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  containrrr/watchtower container_to_watch --debug\n```\n\n----------------------------------------\n\nTITLE: Configuration for Enabling Periodic Polls in HTTP API Mode\nDESCRIPTION: Defines the configuration option to maintain periodic update checks even when HTTP API mode is enabled, which would otherwise prevent periodic polls.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --http-api-periodic-polls\nEnvironment Variable: WATCHTOWER_HTTP_API_PERIODIC_POLLS\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Building AWS ECR Credential Helper\nDESCRIPTION: A Dockerfile that builds the Amazon ECR credential helper tool, which enables Watchtower to authenticate with AWS ECR private registries.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM golang:1.20\n\nENV GO111MODULE off\nENV CGO_ENABLED 0\nENV REPO github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login\n\nRUN go get -u $REPO\n\nRUN rm /go/bin/docker-credential-ecr-login\n\nRUN go build \\\n -o /go/bin/docker-credential-ecr-login \\\n /go/src/$REPO\n\nWORKDIR /go/bin/\n```\n\n----------------------------------------\n\nTITLE: Configuration for Stop Timeout in Watchtower\nDESCRIPTION: Defines the configuration option to set the timeout before a container is forcefully stopped, changing the default wait time of 10 seconds.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --stop-timeout\nEnvironment Variable: WATCHTOWER_TIMEOUT\n                Type: Duration\n             Default: 10s\n```\n\n----------------------------------------\n\nTITLE: Watchtower Time Zone Configuration\nDESCRIPTION: Documentation for setting the time zone in watchtower, which affects log timestamps and cron scheduling. Shows how to set via environment variable or by mounting the host's timezone file.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n            Argument: N/A\nEnvironment Variable: TZ\n                Type: String\n             Default: \"UTC\"\n```\n\n----------------------------------------\n\nTITLE: Watchtower Help Command Documentation\nDESCRIPTION: Documentation for the --help flag in watchtower, which displays information about all supported command-line arguments and options.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --help\nEnvironment Variable: N/A\n                Type: N/A\n             Default: N/A\n```\n\n----------------------------------------\n\nTITLE: Excluding Containers from Watchtower Monitoring in Dockerfile\nDESCRIPTION: This snippet shows how to set a label in a Dockerfile to exclude a container from being monitored by Watchtower.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nLABEL com.centurylinklabs.watchtower.enable=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Watchtower Disable Containers Option Documentation\nDESCRIPTION: Documentation for the --disable-containers flag, which allows excluding specific containers from watchtower monitoring by name when setting labels is not an option.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --disable-containers, -x\nEnvironment Variable: WATCHTOWER_DISABLE_CONTAINERS\n                Type: Comma- or space-separated string list\n             Default: \"\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Containers from Watchtower Monitoring with Docker Run\nDESCRIPTION: This command demonstrates how to exclude a container from Watchtower monitoring when using the docker run command.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --label=com.centurylinklabs.watchtower.enable=false someimage\n```\n\n----------------------------------------\n\nTITLE: Configuration for Disabling Startup Messages in Watchtower\nDESCRIPTION: Defines the configuration option to prevent Watchtower from sending an info-level notification message upon startup.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --no-startup-message\nEnvironment Variable: WATCHTOWER_NO_STARTUP_MESSAGE\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuration for Scope Filtering in Watchtower\nDESCRIPTION: Defines the configuration option to update only containers with matching scope label, enabling multiple Watchtower instances to manage different container groups.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --scope\nEnvironment Variable: WATCHTOWER_SCOPE\n                Type: String\n             Default: -\n```\n\n----------------------------------------\n\nTITLE: Configuration for Programmatic Output (Porcelain) in Watchtower\nDESCRIPTION: Defines the configuration option to write session results to STDOUT in a stable, machine-readable format, acting as an alias for a set of notification-related options.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --porcelain, -P\nEnvironment Variable: WATCHTOWER_PORCELAIN\n     Possible values: v1\n             Default: -\n```\n\n----------------------------------------\n\nTITLE: Watchtower Log Level Configuration\nDESCRIPTION: Documentation for setting the maximum log level in watchtower. Controls the verbosity of logging that will be written to STDERR and visible in Docker logs.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --log-level\nEnvironment Variable: WATCHTOWER_LOG_LEVEL\n     Possible values: panic, fatal, error, warn, info, debug or trace\n             Default: info\n```\n\n----------------------------------------\n\nTITLE: Watchtower Log Format Configuration\nDESCRIPTION: Documentation for setting the logging format for console output in watchtower. Supports multiple formatting options for different use cases.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --log-format, -l\nEnvironment Variable: WATCHTOWER_LOG_FORMAT\n     Possible values: Auto, LogFmt, Pretty or JSON\n             Default: Auto\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with Spaces for Multiple Notifications in Watchtower\nDESCRIPTION: A workaround for using multiple notification services with environment variables in Watchtower, addressing a bug in Viper that prevents comma-separated values.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWATCHTOWER_NOTIFICATIONS=\"slack msteams\"\n```\n\n----------------------------------------\n\nTITLE: Watchtower ANSI Color Configuration\nDESCRIPTION: Documentation for disabling ANSI color escape codes in watchtower log output. Useful for environments that don't support color output.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --no-color\nEnvironment Variable: NO_COLOR\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Checking Go Version for Watchtower Development\nDESCRIPTION: Command to verify the installed Go version. Watchtower requires at least Go 1.11 as it uses Go modules for dependency management.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  ~ $ go version\n  go version go1.12.1 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Running Watchtower with notify-upgrade (Docker)\nDESCRIPTION: This snippet demonstrates how to run Watchtower with the 'notify-upgrade' command using Docker. It generates a .env file with legacy notification options converted to shoutrrr URLs.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d \\\n--name watchtower \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-e WATCHTOWER_NOTIFICATIONS=slack \\\n-e WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=\"https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy\" \\\ncontainrrr/watchtower \\\nnotify-upgrade\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Watchtower\nDESCRIPTION: Commands for building the Watchtower binary, running tests, and executing the application locally. These commands should be run from the root of the repository.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo build                               # compiles and packages an executable binary, watchtower\ngo test ./... -v                       # runs tests with verbose output\n./watchtower                           # runs the application (outside of a container)\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with Custom Report Notification Template\nDESCRIPTION: Complete Docker command to run Watchtower with a custom report template that always sends notifications after each run, regardless of update status.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATION_REPORT=\"true\" \\\n  -e WATCHTOWER_NOTIFICATION_URL=\"discord://token@channel slack://watchtower@token-a/token-b/token-c\" \\\n  -e WATCHTOWER_NOTIFICATION_TEMPLATE=\"\n  {{- if .Report -}}\n    {{- with .Report -}}\n  {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n        {{- range .Updated}}\n  - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n        {{- end -}}\n        {{- range .Fresh}}\n  - {{.Name}} ({{.ImageName}}): {{.State}}\n      {{- end -}}\n      {{- range .Skipped}}\n  - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n      {{- end -}}\n      {{- range .Failed}}\n  - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n      {{- end -}}\n    {{- end -}}\n  {{- else -}}\n    {{range .Entries -}}{{.Message}}{{\\\"\\\\n\\\"}}{{- end -}}\n  {{- end -}}\n  \" \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Watchtower Trace Mode Documentation\nDESCRIPTION: Documentation for enabling trace mode in watchtower with very verbose logging. This exposes credentials and is an alias for setting the log level to 'trace'.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --trace\nEnvironment Variable: WATCHTOWER_TRACE\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchtower with SMTP Relay (Docker Compose)\nDESCRIPTION: This snippet provides a Docker Compose configuration for running Watchtower with an SMTP relay. It includes both the Watchtower service and a Postfix SMTP relay service.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  watchtower:\n    image: containrrr/watchtower:latest\n    container_name: watchtower\n    environment:\n      WATCHTOWER_MONITOR_ONLY: 'true'\n      WATCHTOWER_NOTIFICATIONS: email\n      WATCHTOWER_NOTIFICATION_EMAIL_FROM: from-address@your-domain.com\n      WATCHTOWER_NOTIFICATION_EMAIL_TO: to-address@your-domain.com\n      # you have to use a network alias here, if you use your own certificate\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: smtp.your-domain.com\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: 25\n      WATCHTOWER_NOTIFICATION_EMAIL_DELAY: 2\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    networks:\n      - watchtower\n    depends_on:\n      - postfix\n\n  # SMTP needed to send out status emails\n  postfix:\n    image: freinet/postfix-relay:latest\n    expose:\n      - 25\n    environment:\n      MAILNAME: somename.your-domain.com\n      TLS_KEY: '/etc/ssl/domains/your-domain.com/your-domain.com.key'\n      TLS_CRT: '/etc/ssl/domains/your-domain.com/your-domain.com.crt'\n      TLS_CA: '/etc/ssl/domains/your-domain.com/intermediate.crt'\n    volumes:\n      - /etc/ssl/domains/your-domain.com/:/etc/ssl/domains/your-domain.com/:ro\n    networks:\n      watchtower:\n        # this alias is really important to make your certificate work\n        aliases:\n          - smtp.your-domain.com\nnetworks:\n  watchtower:\n    external: false\n```\n\n----------------------------------------\n\nTITLE: Watchtower Debug Mode Documentation\nDESCRIPTION: Documentation for enabling debug mode in watchtower with verbose logging. This is an alias for setting the log level to 'debug'.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/arguments.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n            Argument: --debug, -d\nEnvironment Variable: WATCHTOWER_DEBUG\n                Type: Boolean\n             Default: false\n```\n\n----------------------------------------\n\nTITLE: Including Containers for Watchtower Monitoring in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to include a container for Watchtower monitoring in a docker-compose file when using the --label-enable flag.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  someimage:\n    container_name: someimage\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gotify Notifications for Watchtower\nDESCRIPTION: This snippet shows how to configure Watchtower to send push notifications to a Gotify instance. It sets up the Gotify URL and app token.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=gotify \\\n  -e WATCHTOWER_NOTIFICATION_GOTIFY_URL=\"https://my.gotify.tld/\" \\\n  -e WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=\"SuperSecretToken\" \\\n  containrrr/watchtower\n```\n\n----------------------------------------\n\nTITLE: Including Containers for Watchtower Monitoring with Docker Run\nDESCRIPTION: This command shows how to include a container for Watchtower monitoring when using the docker run command and the --label-enable flag.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/container-selection.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --label=com.centurylinklabs.watchtower.enable=true someimage\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Auth String for GCloud Registry\nDESCRIPTION: A bash command specifically for generating the authentication string for Google Cloud Registry, using _json_key as username and the content of gcloudauth.json as password.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"_json_key:$(cat gcloudauth.json)\" | base64 -w0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Watchtower Container Monitoring with Docker PS\nDESCRIPTION: This example shows the output of 'docker ps' command displaying two running containers: a wetty-cli container that will be monitored and the watchtower container itself. Watchtower will check for updates to the wetty-cli image and automatically update the container when changes are detected.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                   STATUS          PORTS                    NAMES\n967848166a45   centurylink/wetty-cli   Up 10 minutes   0.0.0.0:8080->3000/tcp   wetty\n6cc4d2a9d1a5   containrrr/watchtower   Up 15 minutes                            watchtower\n```\n\n----------------------------------------\n\nTITLE: Defining the Default Watchtower Notification Template in Go Template Syntax\nDESCRIPTION: A Go Template for Watchtower container update notifications that formats information about scanned, updated, and failed containers. The template includes sections for container status reports and log entries, with conditional formatting based on available data.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/template-preview.md#2025-04-22_snippet_3\n\nLANGUAGE: Go Template\nCODE:\n```\n{{- with .Report -}}\n  {{- if ( or .Updated .Failed ) -}}\n{{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n    {{- range .Updated}}\n- {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n    {{- end -}}\n    {{- range .Fresh}}\n- {{.Name}} ({{.ImageName}}): {{.State}}\n    {{- end -}}\n    {{- range .Skipped}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n    {{- end -}}\n    {{- range .Failed}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n      {{- end -}}\n  {{- end -}}\n{{- end -}}\n{{- if (and .Entries .Report) }}\n\nLogs:\n{{ end -}}\n{{range .Entries -}}{{.Time.Format \"2006-01-02T15:04:05Z07:00\"}} [{{.Level}}] {{.Message}}{{\"\\n\"}}{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Building and Storing AWS ECR Credential Helper in a Docker Volume\nDESCRIPTION: Bash commands to build the AWS ECR credential helper in a Docker container and store it in a named volume for use with Watchtower.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Create a volume to store the command (once built)\ndocker volume create helper \n\n# Build the container\ndocker build -t aws-ecr-dock-cred-helper .\n\n# Build the command and store it in the new volume in the /go/bin directory.\ndocker run  -d --rm --name aws-cred-helper \\\n  --volume helper:/go/bin aws-ecr-dock-cred-helper\n```\n\n----------------------------------------\n\nTITLE: Watchtower Default Report Notification Template\nDESCRIPTION: The default Go template used for report-based notifications in Watchtower, showing container update status with conditional formatting for updates, failures, and skipped containers.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{- if .Report -}}\n  {{- with .Report -}}\n    {{- if ( or .Updated .Failed ) -}}\n{{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n      {{- range .Updated}}\n- {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n      {{- end -}}\n      {{- range .Fresh}}\n- {{.Name}} ({{.ImageName}}): {{.State}}\n\t  {{- end -}}\n\t  {{- range .Skipped}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n\t  {{- end -}}\n\t  {{- range .Failed}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n\t  {{- end -}}\n    {{- end -}}\n  {{- end -}}\n{{- else -}}\n  {{range .Entries -}}{{.Message}}{{\"\\n\"}}{{- end -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Auth String for Docker Registry Credentials\nDESCRIPTION: A bash command to generate the base64-encoded authentication string required for the Docker config.json file by combining username and password.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/private-registries.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho -n 'username:password' | base64\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Contributors Grid in HTML\nDESCRIPTION: HTML markup for displaying a responsive grid of project contributors with their GitHub profiles, avatars, and contribution types using aligned table cells.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victorcmoura\"><img src=\"https://avatars1.githubusercontent.com/u/26290053?v=4?s=100\" width=\"100px;\" alt=\"Victor Moura\"/><br /><sub><b>Victor Moura</b></sub></a><br /><a href=\"https://github.com/containrrr/watchtower/commits?author=victorcmoura\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/containrrr/watchtower/commits?author=victorcmoura\" title=\"Code\">💻</a> <a href=\"https://github.com/containrrr/watchtower/commits?author=victorcmoura\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Building Custom Watchtower Docker Image\nDESCRIPTION: Command to build a custom Watchtower Docker image from local files using the development self-contained Dockerfile. This creates an image tagged as containrrr/watchtower.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker build . -f dockerfiles/Dockerfile.dev-self-contained -t containrrr/watchtower # to build an image from local files\n```\n\n----------------------------------------\n\nTITLE: Styling the Template Preview UI with CSS\nDESCRIPTION: CSS styling rules for the template preview application interface, including layout, colors, and responsive design elements. The styles use CSS variables for theming compatibility and define the appearance of the form controls, text areas, and result display.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/template-preview.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#tplprev {\n        margin: 0;\n        display: flex; \n        flex-direction: column; \n        row-gap: 1rem; \n        box-sizing: border-box; \n        position: relative; \n        margin-right: -13.3rem\n    }\n    #tplprev textarea {\n        box-decoration-break: slice;\n        overflow: auto;\n        padding: 0.77em 1.18em;\n        scrollbar-color: var(--md-default-fg-color--lighter) transparent;\n        scrollbar-width: thin;\n        touch-action: auto;\n        word-break: normal;\n        height: 420px;\n        flex: 1;\n    }\n    #tplprev .controls {\n        display: flex; \n        flex-direction: row; \n        column-gap: 0.5rem\n    }\n    #tplprev textarea, #tplprev input {\n        background-color: var(--md-code-bg-color);\n        border-width: 0;\n        border-radius: 0.1rem;\n        color: var(--md-code-fg-color);\n        font-feature-settings: \"kern\";\n        font-family: var(--md-code-font-family);\n    }\n    .numfield {\n        font-size: .7rem;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n    }\n    #tplprev button {\n        border-radius: 0.1rem;\n        color: var(--md-primary-bg-color);\n        background-color: var(--md-primary-fg-color);\n        flex:1; \n        min-width: 12ch; \n        padding: 0.5rem\n    }\n    #tplprev button:hover {\n        background-color: var(--md-accent-fg-color);\n    }\n    #tplprev input[type=\"number\"] { width: 5ch; flex: 1; font-size: 1rem; }\n    #tplprev fieldset {\n        margin-top: -0.5rem;\n        display: flex;\n        flex: 1;\n        column-gap: 0.5rem;\n    }\n    #tplprev .template-wrapper {\n        display: flex; \n        flex:1; \n        column-gap: 1rem;\n    }\n    #tplprev .result-wrapper {\n        flex: 1; \n        display: flex\n    }\n    #result {\n        font-size: 0.7rem;\n        background-color: var(--md-code-bg-color);\n        scrollbar-color: var(--md-default-fg-color--lighter) transparent;\n        scrollbar-width: thin;\n        touch-action: auto;\n        overflow: auto;\n        padding: 0.77em 1.18em;\n        margin:0;\n        height: 540px;\n        flex:1; \n        width:100%\n    }\n    #result b {color: var(--md-code-hl-special-color)}\n    #result i {color: var(--md-code-hl-keyword-color)}\n    #tplprev .loading {\n        position: absolute; \n        inset: 0; \n        display: flex; \n        padding: 1rem; \n        box-sizing: border-box; \n        background: var(--md-code-bg-color); \n        margin-top: 0\n    }\n```\n\n----------------------------------------\n\nTITLE: Cloning Watchtower Repository\nDESCRIPTION: Commands to clone your fork of the Watchtower repository and navigate to the project directory. Note that the code should not be placed in the Go source path.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<yourfork>/watchtower.git\ncd watchtower\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Query Parameter Handling in JavaScript\nDESCRIPTION: JavaScript function to load form values from URL query parameters, enabling sharing of specific template configurations. It handles both regular form fields and toggle checkboxes by updating their state based on the URL parameters.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/template-preview.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst loadQueryVals = () => {\n    const form = document.querySelector('#tplprev');\n    const params =  new URLSearchParams(location.search);\n    for(const [key, value] of params){\n        form[key].value = value;\n        const toggleInput = form.querySelector(`[data-toggle=\"${key}\"]`);\n        if (toggleInput) {\n            toggleInput.checked = value === \"yes\";\n        }\n    }\n}\nif (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", loadQueryVals());\n} else {\n    loadQueryVals();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running WebAssembly for Template Processing in JavaScript\nDESCRIPTION: JavaScript code that initializes WebAssembly functionality for template processing. It handles loading the WASM module, setting up event handlers for form interactions, and includes functions for updating the preview based on user input.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs/template-preview.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet wasmLoaded = false;\n    const updatePreview = () => {\n        if (!wasmLoaded) return;\n        const form = document.querySelector('#tplprev');\n        const input = form.template.value;\n        console.log('Input: %o', input);\n        const arrFromCount = (key) => Array.from(Array(form[key]?.valueAsNumber ?? 0), () => key);\n        const states = form.report.value === \"yes\" ? [\n            ...arrFromCount(\"skipped\"),\n            ...arrFromCount(\"scanned\"),\n            ...arrFromCount(\"updated\"),\n            ...arrFromCount(\"failed\" ),\n            ...arrFromCount(\"fresh\"  ),\n            ...arrFromCount(\"stale\"  ),\n        ] : [];\n        console.log(\"States: %o\", states);\n        const levels = form.log.value === \"yes\" ? [\n            ...arrFromCount(\"error\"),\n            ...arrFromCount(\"warning\"),\n            ...arrFromCount(\"info\"),\n            ...arrFromCount(\"debug\"),\n        ] : [];\n        console.log(\"Levels: %o\", levels);\n        const output = WATCHTOWER.tplprev(input, states, levels);\n        console.log('Output: \\n%o', output);\n        if (output.startsWith('Error: ')) {\n            document.querySelector('#result').innerHTML = `<b>Error</b>: ${output.substring(7)}`;\n        } else if (output.length) {\n            document.querySelector('#result').innerText = output;\n        } else {\n            document.querySelector('#result').innerHTML = '<i>empty (would not be sent as a notification)</i>';\n        }\n    }\n    const formSubmitted = (e) => {\n        //e.preventDefault();\n        //updatePreview();\n    }\n    let debounce;\n    const inputUpdated = () => {\n        if(debounce) clearTimeout(debounce);\n        debounce = setTimeout(() => updatePreview(), 400);\n    }\n    const formChanged = (e) =>  {\n        console.log('form changed: %o', e);\n        const targetToggle = e.target.dataset['toggle'];\n        if (targetToggle) {\n            e.target.form[targetToggle].value = e.target.checked ? \"yes\" : \"no\";\n        }\n        updatePreview()\n    }\n    const go = new Go();\n    WebAssembly.instantiateStreaming(fetch(\"../assets/tplprev.wasm\"), go.importObject).then((result) => {\n        go.run(result.instance);\n        document.querySelector('#tplprev .loading').style.display = \"none\";\n        wasmLoaded = true;\n        updatePreview();\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Contributors HTML Table\nDESCRIPTION: An HTML table displaying contributor information including profile images, usernames, and contribution types. The table has a responsive layout with cells aligned center and organized in rows of 7 columns (14.28% width each).\nSOURCE: https://github.com/containrrr/watchtower/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SrihariThalla\"><img src=\"https://avatars1.githubusercontent.com/u/7479937?v=4?s=100\" width=\"100px;\" alt=\"Srihari Thalla\"/><br /><sub><b>Srihari Thalla</b></sub></a><br /><a href=\"https://github.com/containrrr/watchtower/commits?author=SrihariThalla\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Watchtower Documentation\nDESCRIPTION: This snippet lists the required Python packages for building the Watchtower documentation. It includes mkdocs for site generation, mkdocs-material for theming, and md-toc for table of contents creation.\nSOURCE: https://github.com/containrrr/watchtower/blob/main/docs-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs\nmkdocs-material\nmd-toc\n```"
  }
]