[
  {
    "owner": "titan-systems",
    "repo": "titan",
    "content": "TITLE: Define Password Policy in YAML\nDESCRIPTION: This YAML snippet shows how to define a password policy using a declarative configuration. It includes parameters such as password length constraints, character type requirements, password age, retry limits, lockout time, password history, a comment, and the policy owner. This is useful for configuring password policies in a configuration-as-code manner.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/password_policy.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npassword_policies:\n  - name: some_password_policy\n    password_min_length: 10\n    password_max_length: 128\n    password_min_upper_case_chars: 2\n    password_min_lower_case_chars: 2\n    password_min_numeric_chars: 2\n    password_min_special_chars: 1\n    password_min_age_days: 1\n    password_max_age_days: 60\n    password_max_retries: 3\n    password_lockout_time_mins: 30\n    password_history: 5\n    comment: Strict policy for admin accounts\n    owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Define Authentication Policy in YAML for Snowflake\nDESCRIPTION: This snippet demonstrates how to define an authentication policy using YAML. It specifies the policy's name, authentication methods, MFA settings, client types, security integrations, and a descriptive comment. The YAML configuration will likely be used to create the policy through a deployment tool or API call to Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/authentication_policy.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_policies:\n  - name: some_authentication_policy\n    authentication_methods:\n      - PASSWORD\n      - SAML\n    mfa_authentication_methods:\n      - PASSWORD\n    mfa_enrollment: REQUIRED\n    client_types:\n      - SNOWFLAKE_UI\n    security_integrations:\n      - ALL\n    comment: Policy for secure authentication.\n```\n\n----------------------------------------\n\nTITLE: Defining a Network Rule in YAML\nDESCRIPTION: This YAML snippet shows how to define a Network Rule configuration. It includes the name, type (IPV4), a list of IP addresses for the value_list, sets the mode to INGRESS, and provides a comment. This configuration is typically used for defining infrastructure as code or for declarative configuration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/network_rule.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nnetwork_rules:\n  - name: some_network_rule\n    type: IPV4\n    value_list: [\"192.168.1.1\", \"192.168.1.2\"]\n    mode: INGRESS\n    comment: \"Example network rule\"\n```\n\n----------------------------------------\n\nTITLE: Defining Email Notification Integration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define an email notification integration. It sets the name, enables the integration, specifies the allowed recipient email addresses in a list, and adds a comment describing the integration. This configuration would typically be used with a tool or process that parses YAML files to manage Snowflake configurations.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/email_notification_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemail_notification_integrations:\n  - name: some_email_notification_integration\n    enabled: true\n    allowed_recipients:\n      - user1@example.com\n      - user2@example.com\n    comment: \"Example email notification integration\"\n```\n\n----------------------------------------\n\nTITLE: Snowflake Warehouse Initialization in Python\nDESCRIPTION: This Python snippet demonstrates how to initialize a Snowflake warehouse object with various configuration options. It sets parameters such as warehouse size, scaling policies, auto-suspend behavior, and resource monitoring, allowing for fine-grained control over the warehouse's compute resources.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/warehouse.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwarehouse = Warehouse(\n    name=\"some_warehouse\",\n    owner=\"SYSADMIN\",\n    warehouse_type=\"STANDARD\",\n    warehouse_size=\"XSMALL\",\n    max_cluster_count=10,\n    min_cluster_count=1,\n    scaling_policy=\"STANDARD\",\n    auto_suspend=600,\n    auto_resume=True,\n    initially_suspended=False,\n    resource_monitor=None,\n    comment=\"This is a test warehouse\",\n    enable_query_acceleration=False,\n    query_acceleration_max_scale_factor=1,\n    max_concurrency_level=8,\n    statement_queued_timeout_in_seconds=0,\n    statement_timeout_in_seconds=172800,\n    tags={\"env\": \"test\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring External Access Integration in YAML\nDESCRIPTION: This YAML code snippet illustrates how to configure an External Access Integration in Snowflake using a YAML configuration file. It specifies the integration's name, allowed network rules as a list, and sets the enabled property to true.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/external_access_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_access_integrations:\n  - name: some_external_access_integration\n    allowed_network_rules:\n      - rule1\n      - rule2\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Database Role in YAML\nDESCRIPTION: This snippet shows how to define a Snowflake DatabaseRole using YAML. It specifies the role's name, database, owner, tags, and a comment. The YAML structure allows for a declarative representation of the DatabaseRole's configuration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database_role.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase_roles:\n  - name: some_database_role\n    database: some_database\n    owner: USERADMIN\n    tags:\n      department: finance\n    comment: This role is for database-specific access control.\n```\n\n----------------------------------------\n\nTITLE: Snowflake Warehouse Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Snowflake warehouse using a declarative approach. It defines parameters such as warehouse size, scaling policies, auto-suspend behavior, and resource monitoring within a YAML structure, allowing for easy configuration and deployment of warehouses.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/warehouse.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwarehouses:\n  - name: some_warehouse\n    owner: SYSADMIN\n    warehouse_type: STANDARD\n    warehouse_size: XSMALL\n    max_cluster_count: 10\n    min_cluster_count: 1\n    scaling_policy: STANDARD\n    auto_suspend: 600\n    auto_resume: true\n    initially_suspended: false\n    resource_monitor: null\n    comment: This is a test warehouse\n    enable_query_acceleration: false\n    query_acceleration_max_scale_factor: 1\n    max_concurrency_level: 8\n    statement_queued_timeout_in_seconds: 0\n    statement_timeout_in_seconds: 172800\n    tags:\n      env: test\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake Task in YAML\nDESCRIPTION: This YAML snippet shows how to define a Snowflake task using YAML configuration. It specifies the task's name, warehouse, schedule, state (SUSPENDED), and the SQL statement to execute (SELECT 1). It assumes a YAML parser and a system that understands the YAML structure to create the Snowflake task.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/task.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  - name: some_task\n    warehouse: some_warehouse\n    schedule: \"USING CRON 0 9 * * * UTC\"\n    state: SUSPENDED\n    as_: |+\n        SELECT 1\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake Database in Python\nDESCRIPTION: This code snippet demonstrates how to define a Snowflake database in Python using the `Database` object. It sets properties such as name, transient status, owner, data retention time, default collation, tags, and comment. It shows how to create a database object with specific configurations.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndatabase = Database(\n    name=\"some_database\",\n    transient=True,\n    owner=\"SYSADMIN\",\n    data_retention_time_in_days=7,\n    max_data_extension_time_in_days=28,\n    default_ddl_collation=\"utf8\",\n    tags={\"project\": \"research\", \"priority\": \"high\"},\n    comment=\"This is a database.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Table in YAML\nDESCRIPTION: This code snippet demonstrates how to define a Snowflake table using YAML. It specifies the table name, columns (with data types), and owner in a YAML structure. The example defines a table named `some_table` with a single string column `col1` owned by `SYSADMIN`.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/table.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntables:\n  - name: some_table\n    columns:\n      - name: col1\n        data_type: STRING\n    owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake Database in YAML\nDESCRIPTION: This code snippet demonstrates how to define a Snowflake database in YAML format.  It illustrates setting properties like name, transient status, owner, data retention, default collation, tags, and comment. This config defines the database object.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndatabases:\n  - name: some_database\n    transient: true\n    owner: SYSADMIN\n    data_retention_time_in_days: 7\n    max_data_extension_time_in_days: 28\n    default_ddl_collation: utf8\n    tags:\n      project: research\n      priority: high\n    comment: This is a database.\n```\n\n----------------------------------------\n\nTITLE: Define Azure Storage Integration in YAML\nDESCRIPTION: This YAML snippet defines an Azure Storage Integration object for Snowflake. It requires specifying the name, enabled status, Azure tenant ID, allowed storage locations, and optionally blocked storage locations and a comment. It leverages YAML's list syntax for specifying `storage_allowed_locations` and `storage_blocked_locations`.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/azure_storage_integration.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nazure_storage_integrations:\n  - name: some_azure_storage_integration\n    enabled: true\n    azure_tenant_id: some_tenant_id\n    storage_allowed_locations:\n      - azure://somebucket/somepath/\n    storage_blocked_locations:\n      - azure://someotherbucket/somepath/\n    comment: This is an Azure storage integration.\n```\n\n----------------------------------------\n\nTITLE: Define Role Grants in Snowflake with YAML\nDESCRIPTION: Illustrates how to define multiple role grants in a YAML configuration for Snowflake.  Each grant specifies the 'role' to be granted and either the 'to_role' or 'to_user' to whom the role is granted. This configuration can be used to automate role grant provisioning.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/role_grant.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrole_grants:\n  - role: somerole\n    to_role: someotherrole\n  - role: somerole\n    to_user: someuser\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Object Privileges on All Resources - Python\nDESCRIPTION: This snippet demonstrates how to grant schema object privileges on all tables or views within a schema or database to a specified role using the GrantOnAll object in Python. It showcases the usage of `on_all_tables_in_schema` and `on_all_views_in_database` parameters. Requires the GrantOnAll class and Database class.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/grant_on_all.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ngrant_on_all = GrantOnAll(\n    priv=\"SELECT\",\n    on_all_tables_in_schema=\"someschema\",\n    to=\"somerole\",\n)\ngrant_on_all = GrantOnAll(\n    priv=\"SELECT\",\n    on_all_views_in_database=\"somedb\",\n    to=\"somerole\",\n)\n```\n\n----------------------------------------\n\nTITLE: Define Future Grants - Snowflake - YAML\nDESCRIPTION: This snippet shows how to define a future grant for tables in a schema using YAML. It specifies the privilege to grant (SELECT), the target schema (someschema), and the role to grant the privilege to (somerole). This YAML configuration is used to manage future grants declaratively.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/future_grant.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfuture_grants:\n  - priv: SELECT\n    on_future_tables_in_schema: someschema\n    to: somerole\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake Failover Group in YAML\nDESCRIPTION: This snippet demonstrates how to define a Snowflake failover group using YAML configuration.  It specifies the failover group's properties such as name, object types, allowed accounts, databases, shares, integration types, replication schedule, and owner.  This configuration is often used in infrastructure-as-code deployments.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/failover_group.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfailover_groups:\n  - name: some_failover_group\n    object_types:\n      - DATABASES\n      - ROLES\n    allowed_accounts:\n      - org1.account1\n      - org2.account2\n    allowed_databases:\n      - db1\n      - db2\n    allowed_shares:\n      - share1\n      - share2\n    allowed_integration_types:\n      - SECURITY INTEGRATIONS\n      - API INTEGRATIONS\n    ignore_edition_check: true\n    replication_schedule: \"USING CRON 0 0 * * * UTC\"\n    owner: ACCOUNTADMIN\n```\n\n----------------------------------------\n\nTITLE: Define Snowflake Grant in YAML\nDESCRIPTION: This snippet demonstrates how to define a Snowflake grant using YAML. It configures a Grant object with the necessary fields such as privilege, resource (table), target role, and the grant option. This YAML configuration is used to manage Snowflake access control through declarative definitions.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/grant.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n- Grant:\n    priv: \"SELECT\"\n    on_table: \"some_table\"\n    to: \"some_role\"\n    grant_option: true\n```\n\n----------------------------------------\n\nTITLE: Grant Role to Role/User in Snowflake with Python\nDESCRIPTION: Demonstrates how to create RoleGrant objects in Python to grant a role to another role or to a user in Snowflake. It requires the RoleGrant class and optionally the Role or User class. The 'role' parameter specifies the role to be granted, while 'to_role' or 'to_user' specifies the recipient role or user.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/role_grant.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Grant to Role:\nrole_grant = RoleGrant(role=\"somerole\", to_role=\"someotherrole\")\nrole_grant = RoleGrant(role=\"somerole\", to=Role(name=\"someotherrole\"))\n# Grant to User:\nrole_grant = RoleGrant(role=\"somerole\", to_user=\"someuser\")\nrole_grant = RoleGrant(role=\"somerole\", to=User(name=\"someuser\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Network Policy in YAML\nDESCRIPTION: This YAML snippet shows how to define a Snowflake Network Policy using YAML syntax. It specifies the name, allowed and blocked network rules, allowed and blocked IP addresses, and a comment for the network policy. No external dependencies are required beyond a YAML parser.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/network_policy.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nnetwork_policies:\n  - name: some_network_policy\n    allowed_network_rule_list:\n      - rule1\n      - rule2\n    blocked_network_rule_list:\n      - rule3\n    allowed_ip_list: [\"192.168.1.1\", \"192.168.1.2\"]\n    blocked_ip_list: [\"10.0.0.1\"]\n    comment: \"Example network policy\"\n```\n\n----------------------------------------\n\nTITLE: Define Future Grants - Snowflake - Python\nDESCRIPTION: These snippets demonstrate how to define future grants for database and schema objects in Snowflake using Python. The `FutureGrant` object is used to specify the privilege, target resource (database or schema), and the role to grant the privilege to.  Different ways of specifying the target schema/database are shown.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/future_grant.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfuture_grant = FutureGrant(\n    priv=\"CREATE TABLE\",\n    on_future_schemas_in=Database(name=\"somedb\"),\n    to=\"somerole\",\n)\nfuture_grant = FutureGrant(\n    priv=\"CREATE TABLE\",\n    on_future_schemas_in_database=\"somedb\",\n    to=\"somerole\",\n)\n# Schema Object Privs:\nfuture_grant = FutureGrant(\n    priv=\"SELECT\",\n    on_future_tables_in=Schema(name=\"someschema\"),\n    to=\"somerole\",\n)\nfuture_grant = FutureGrant(\n    priv=\"READ\",\n    on_future_image_repositories_in_schema=\"someschema\",\n    to=\"somerole\",\n)\n```\n\n----------------------------------------\n\nTITLE: Grant Snowflake Privileges in Python\nDESCRIPTION: This snippet demonstrates how to grant various privileges on different Snowflake resources to a role using Python. It uses the Grant object to define the privilege, resource (account, warehouse, schema, or table), and the target role. Different resource types are represented using strings (like \"ACCOUNT\") or resource objects (Warehouse, Schema).\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/grant.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Global Privs:\ngrant = Grant(priv=\"CREATE WAREHOUSE\", on=\"ACCOUNT\", to=\"somerole\")\n# Warehouse Privs:\ngrant = Grant(priv=\"OPERATE\", on=Warehouse(name=\"foo\"), to=\"somerole\")\ngrant = Grant(priv=\"OPERATE\", on_warehouse=\"foo\", to=\"somerole\")\n# Schema Privs:\ngrant = Grant(priv=\"CREATE TABLE\", on=Schema(name=\"foo\"), to=\"somerole\")\ngrant = Grant(priv=\"CREATE TABLE\", on_schema=\"foo\", to=\"somerole\")\n# Table Privs:\ngrant = Grant(priv=\"SELECT\", on_table=\"sometable\", to=\"somerole\")\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Integration with YAML\nDESCRIPTION: This YAML configuration provides an example of defining an S3 storage integration for Snowflake.  It includes parameters for enabling the integration, specifying the AWS IAM role, defining allowed and blocked locations, setting the object ACL, and adding a comment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/s3storage_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ns3_storage_integrations:\n  - name: some_s3_storage_integration\n    enabled: true\n    storage_aws_role_arn: \"arn:aws:iam::123456789012:role/MyS3AccessRole\"\n    storage_allowed_locations:\n      - \"s3://mybucket/myfolder/\"\n    storage_blocked_locations:\n      - \"s3://mybucket/myblockedfolder/\"\n    storage_aws_object_acl: \"bucket-owner-full-control\"\n    comment: \"This is a sample S3 storage integration.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Secret in YAML\nDESCRIPTION: This YAML configuration defines a Snowflake Secret with attributes such as name, type, API authentication, OAuth scopes, refresh token, expiry time, username, password, secret string, comment, and owner.  This configuration can be used to automate the creation and management of secrets within Snowflake, often through infrastructure-as-code tools.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/secret.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  - name: some_secret\n    type: OAUTH2\n    api_authentication: some_security_integration\n    oauth_scopes:\n      - scope1\n      - scope2\n    oauth_refresh_token: some_refresh_token\n    oauth_refresh_token_expiry_time: some_expiry_time\n    username: some_username\n    password: some_password\n    secret_string: some_secret_string\n    comment: some_comment\n    owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Configure and Deploy Snowflake Resources using Python\nDESCRIPTION: This Python code demonstrates how to configure Snowflake resources (Role, Warehouse, Grant) using the Titan Core library. It connects to a Snowflake account using environment variables, creates a Blueprint, and plans and applies the configuration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport snowflake.connector\n\nfrom titan.blueprint import Blueprint, print_plan\nfrom titan.resources import Grant, Role, Warehouse\n\n# Configure resources by instantiating Python objects.\n\nrole = Role(name=\"transformer\")\n\nwarehouse = Warehouse(\n    name=\"transforming\",\n    warehouse_size=\"large\",\n    auto_suspend=60,\n)\n\nusage_grant = Grant(priv=\"usage\", to=role, on=warehouse)\n\n# Titan compares your config to a Snowflake account. Create a Snowflake \n# connection to allow Titan to connect to your account.\n\nconnection_params = {\n    \"account\": os.environ[\"SNOWFLAKE_ACCOUNT\"],\n    \"user\": os.environ[\"SNOWFLAKE_USER\"],\n    \"password\": os.environ[\"SNOWFLAKE_PASSWORD\"],\n    \"role\": \"SYSADMIN\",\n}\nsession = snowflake.connector.connect(**connection_params)\n\n# Create a Blueprint and pass your resources into it. A Blueprint helps you\n# validate and deploy a set of resources.\n\nbp = Blueprint(resources=[\n    role,\n    warehouse,\n    usage_grant,\n])\n\n# Blueprint works like Terraform. Calling plan(...) will compare your config\n# to the state of your Snowflake account and return a list of changes.\n\nplan = bp.plan(session)\nprint_plan(plan) # =>\n\"\"\"\n» titan core\n» Plan: 4 to add, 0 to change, 0 to destroy.\n\n+ urn::ABCD123:warehouse/transforming {\n  + name                                = \"transforming\"\n  + owner                               = \"SYSADMIN\"\n  + warehouse_type                      = \"STANDARD\"\n  + warehouse_size                      = \"LARGE\"\n  ...\n}\n\n+ urn::ABCD123:role/transformer {\n  + name    = \"transformer\"\n  + owner   = \"USERADMIN\"\n  + tags    = None\n  + comment = None\n}\n\n+ urn::ABCD123:grant/TRANSFORMER?priv=USAGE&on=warehouse/TRANSFORMING {\n  + priv         = \"USAGE\"\n  + on           = \"transforming\"\n  + on_type      = \"WAREHOUSE\"\n  + to           = TRANSFORMER\n  ...\n}\n\"\"\"\n\n# Calling apply(...) will convert your plan into the right set of SQL commands\n# and run them against your Snowflake account.\nbp.apply(session, plan) # =>\n\"\"\"\n[TITAN_USER:SYSADMIN]  > USE SECONDARY ROLES ALL\n[TITAN_USER:SYSADMIN]  > CREATE WAREHOUSE TRANSFORMING warehouse_type = STANDARD ...\n[TITAN_USER:SYSADMIN]  > USE ROLE USERADMIN\n[TITAN_USER:USERADMIN] > CREATE ROLE TRANSFORMER\n[TITAN_USER:USERADMIN] > USE ROLE SYSADMIN\n[TITAN_USER:SYSADMIN]  > GRANT USAGE ON WAREHOUSE transforming TO TRANSFORMER\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Pipe with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Snowflake Pipe.  It defines the pipe's name, the associated COPY INTO statement, the owner, auto-ingest setting, and configurations for error and data integration. The YAML configuration will likely be used to programmatically create or update the Snowflake Pipe.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/pipe.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npipes:\n  - name: some_pipe\n    as_: \"COPY INTO some_table FROM @%some_stage\"\n    owner: SYSADMIN\n    auto_ingest: true\n    error_integration: some_integration\n    aws_sns_topic: some_topic\n    integration: some_integration\n    comment: \"This is a sample pipe\"\n```\n\n----------------------------------------\n\nTITLE: Python UDF Configuration in YAML\nDESCRIPTION: This snippet shows how to define a Snowflake Python UDF using a YAML configuration file. It specifies the function's attributes, including name, return type, runtime version, handler, arguments, and metadata like comments and external access integrations. The YAML format provides a declarative way to define the UDF's configuration, enabling easier management and version control of function settings.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/python_udf.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npython_udfs:\n  - name: some_python_udf\n    returns: string\n    runtime_version: 3.8\n    handler: process_data\n    args:\n      - name: input_data\n        data_type: string\n    as_: process_data_function\n    comment: This function processes data.\n    copy_grants: false\n    external_access_integrations:\n      - s3_integration\n    imports:\n      - pandas\n      - numpy\n    null_handling: CALLED_ON_NULL_INPUT\n    owner: SYSADMIN\n    packages:\n      - pandas\n      - numpy\n    secrets:\n      api_key: secret_value\n    secure: false\n    volatility: IMMUTABLE\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Role in YAML\nDESCRIPTION: This YAML snippet shows how to define a Snowflake role using YAML syntax. It defines a list named `roles` containing a role with a name, owner, and comment. The `roles` list suggests it is meant to be used with a system that can interpret the YAML definition to create Snowflake roles.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/role.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n  - name: some_role\n    owner: USERADMIN\n    comment: This is a sample role.\n```\n\n----------------------------------------\n\nTITLE: Creating a DynamicTable in Python\nDESCRIPTION: This Python snippet demonstrates how to define a DynamicTable object with its configurations. It includes the table name, columns, target lag, warehouse, refresh mode, initialization behavior, the query used to populate the table (as_), a comment, and the owner. The dynamic table is named 'some_dynamic_table' with two columns 'id' and 'data'.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/dynamic_table.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndynamic_table = DynamicTable(\n    name=\"some_dynamic_table\",\n    columns=[{\"name\": \"id\"}, {\"name\": \"data\"}],\n    target_lag=\"1 HOUR\",\n    warehouse=\"some_warehouse\",\n    refresh_mode=\"AUTO\",\n    initialize=\"ON_CREATE\",\n    as_=\"SELECT id, data FROM source_table\",\n    comment=\"This is a sample dynamic table\",\n    owner=\"SYSADMIN\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Secret in YAML\nDESCRIPTION: This snippet shows how to define a generic secret using YAML configuration. It defines a secret with fields like `name`, `secret_type`, `secret_string`, `comment`, and `owner`. The `secret_type` is set to `GENERIC_STRING` indicating a string-based secret. The `secret_string` field contains the actual secret.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/generic_secret.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  - name: some_secret\n    secret_type: GENERIC_STRING\n    secret_string: some_secret_string\n    comment: some_comment\n    owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Creating External Access Integration in Python\nDESCRIPTION: This Python code snippet demonstrates how to create an External Access Integration in Snowflake using a Python framework. It defines the integration's name, allowed network rules, and sets the enabled flag to True.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/external_access_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexternal_access_integration = ExternalAccessIntegration(\n    name=\"some_external_access_integration\",\n    allowed_network_rules=[\"rule1\", \"rule2\"],\n    enabled=True\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a DynamicTable in YAML\nDESCRIPTION: This YAML snippet shows how to define a DynamicTable object using YAML configuration. It covers the same configuration options as the Python example, including name, columns, target_lag, warehouse, refresh_mode, initialize, as_ query, comment, and owner. The target_lag is set to '1 HOUR', refresh_mode is 'AUTO', and the initialization behavior is 'ON_CREATE'.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/dynamic_table.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndynamic_table:\n  name: some_dynamic_table\n  columns:\n    - name: id\n    - name: data\n  target_lag: \"1 HOUR\"\n  warehouse: some_warehouse\n  refresh_mode: AUTO\n  initialize: ON_CREATE\n  as_: \"SELECT id, data FROM source_table\"\n  comment: \"This is a sample dynamic table\"\n  owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Adding a Schema to a Database in YAML using the `schemas` field\nDESCRIPTION: This YAML snippet demonstrates adding a schema to a database directly using the `schemas` field within the database definition. It configures the schema as a part of the database's properties.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndatabases:\n  - name: some_database\n    schemas:\n      - name: another_schema\n```\n\n----------------------------------------\n\nTITLE: Adding a Schema to a Database by Name in YAML\nDESCRIPTION: This YAML configuration shows how to define a schema and associate it with a database by specifying the database name. The schema is defined separately and linked by name.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndatabases:\n  - name: some_database\nschemas:\n    - name: another_schema\n      database: some_database\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Network Policy in Python\nDESCRIPTION: This Python snippet demonstrates how to define a Snowflake Network Policy using the NetworkPolicy class. It configures allowed and blocked network rules and IP addresses, and sets a comment for the policy.  Dependencies: NetworkPolicy, NetworkRule classes (assumed to be defined elsewhere).\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/network_policy.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nnetwork_policy = NetworkPolicy(\n    name=\"some_network_policy\",\n    allowed_network_rule_list=[NetworkRule(name=\"rule1\"), NetworkRule(name=\"rule2\"]),\n    blocked_network_rule_list=[NetworkRule(name=\"rule3\"]),\n    allowed_ip_list=[\"192.168.1.1\", \"192.168.1.2\"],\n    blocked_ip_list=[\"10.0.0.1\"],\n    comment=\"Example network policy\"\n)\n```\n\n----------------------------------------\n\nTITLE: Granting Table Privileges on All Resources - YAML\nDESCRIPTION: This YAML snippet demonstrates how to grant SELECT privileges on all tables within a specified schema to a specified role using the `grants_on_all` configuration.  It requires the definition of `priv`, `on_all_tables_in_schema`, and `to` fields.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/grant_on_all.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ngrants_on_all:\n    - priv: SELECT\n        on_all_tables_in_schema: someschema\n        to: somerole\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Materialized View using YAML\nDESCRIPTION: This YAML snippet illustrates how to define a Snowflake Materialized View. It specifies the view's name, owner, security setting, and the SQL query used to populate the view. The YAML structure defines a list of materialized views, allowing for the creation of multiple views in a single configuration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/materialized_view.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmaterialized_views:\n  - name: some_materialized_view\n    owner: SYSADMIN\n    secure: true\n    as_: SELECT * FROM some_table\n```\n\n----------------------------------------\n\nTITLE: Creating Email Notification Integration in Python\nDESCRIPTION: This Python code snippet demonstrates how to create and configure an email notification integration using a hypothetical `EmailNotificationIntegration` class.  It sets the name, enables the integration, specifies allowed recipient email addresses, and adds a comment. The code assumes the existence of an `EmailNotificationIntegration` class in the execution environment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/email_notification_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nemail_notification_integration = EmailNotificationIntegration(\n    name=\"some_email_notification_integration\",\n    enabled=True,\n    allowed_recipients=[\"user1@example.com\", \"user2@example.com\"],\n    comment=\"Example email notification integration\"\n)\n```\n\n----------------------------------------\n\nTITLE: Snowflake Tag Definition in YAML\nDESCRIPTION: This snippet demonstrates how to define a Snowflake tag using YAML. The example specifies the tag's name, a comment, and a list of allowed values. This is a declarative way to define tags for Snowflake resources. There are no external dependencies beyond a YAML parser.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/tag.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  - name: cost_center\n    comment: This is a sample tag\n    allowed_values:\n      - finance\n      - engineering\n      - sales\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Alert in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a Snowflake alert using a hypothetical `Alert` class. It sets the alert's name, warehouse, schedule (using a cron expression), condition (a SQL query), and action (sending an email). The `Alert` class is assumed to exist and handle the Snowflake alert creation process.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/alert.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalert = Alert(\n    name=\"some_alert\",\n    warehouse=\"some_warehouse\",\n    schedule=\"USING CRON * * * * *\",\n    condition=\"SELECT COUNT(*) FROM some_table\",\n    then=\"CALL SYSTEM$SEND_EMAIL('example@example.com', 'Alert Triggered', 'The alert condition was met.')\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Roles and Grants in YAML\nDESCRIPTION: This YAML file defines a Snowflake role named 'reporter' along with grants for usage on the 'reporting' warehouse and the 'analytics' database. It also includes role grants assigning the 'reporter' role to the 'SYSADMIN' role. These configurations dictate the permissions within the Snowflake environment, managed via the Titan Core action.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/titan-core-github-action.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nroles:\n  - name: reporter\n    comment: \"Has permissions on the analytics database...\"\n\ngrants:\n  - to_role: reporter\n    priv: usage\n    on_warehouse: reporting\n  - to_role: reporter\n    priv: usage\n    on_database: analytics\n\nrole_grants:\n  - role: reporter\n    roles:\n      - SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Privileges on All Resources - Python\nDESCRIPTION: This snippet demonstrates how to grant schema privileges on all resources within a database to a specified role using the GrantOnAll object in Python. It showcases the usage of `on_all_schemas_in_database` and `on_all_schemas_in` parameters. Requires the GrantOnAll class and Database class.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/grant_on_all.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ngrant_on_all = GrantOnAll(\n    priv=\"CREATE TABLE\",\n    on_all_schemas_in_database=\"somedb\",\n    to=\"somerole\",\n)\ngrant_on_all = GrantOnAll(\n    priv=\"CREATE VIEW\",\n    on_all_schemas_in=Database(name=\"somedb\"),\n    to=\"somerole\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Stored Procedure in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a Python stored procedure for Snowflake using a YAML configuration. It showcases the parameters required to define a procedure such as name, arguments, return type, runtime version, packages, handler, procedure definition, comment, copy grants, execution rights, external access integrations, imports, null handling, owner and secure flag.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/python_stored_procedure.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprocedures:\n- name: some_procedure\n    args: []\n    returns: STRING\n    runtime_version: \"3.8\"\n    packages:\n    - snowflake-snowpark-python\n    handler: process_data\n    as_: \"def process_data(): return 'Hello, World!'\"\n    comment: \"A simple procedure\"\n    copy_grants: false\n    execute_as: CALLER\n    external_access_integrations: null\n    imports: null\n    null_handling: CALLED_ON_NULL_INPUT\n    owner: SYSADMIN\n    secure: false\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake View in Python\nDESCRIPTION: This Python snippet demonstrates how to define a Snowflake view using a hypothetical `View` class.  It sets the view's name, owner, security setting, and the underlying SQL SELECT statement.  The `View` class is assumed to be part of a larger system or library for managing Snowflake resources.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/view.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nview = View(\n    name=\"some_view\",\n    owner=\"SYSADMIN\",\n    secure=True,\n    as_=\"SELECT * FROM some_table\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Storage Integration with Python\nDESCRIPTION: This Python snippet demonstrates how to create an S3 storage integration in Snowflake. It defines parameters like name, enabled status, AWS IAM role ARN, allowed and blocked storage locations, and object ACL.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/s3storage_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ns3_storage_integration = S3StorageIntegration(\n    name=\"some_s3_storage_integration\",\n    enabled=True,\n    storage_aws_role_arn=\"arn:aws:iam::123456789012:role/MyS3AccessRole\",\n    storage_allowed_locations=[\"s3://mybucket/myfolder/\"],\n    storage_blocked_locations=[\"s3://mybucket/myblockedfolder/\"],\n    storage_aws_object_acl=\"bucket-owner-full-control\",\n    comment=\"This is a sample S3 storage integration.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON File Format in Snowflake using Python\nDESCRIPTION: This code snippet demonstrates how to create a JSON file format in Snowflake using Python. It utilizes the `JSONFileFormat` class with parameters to define the format's properties such as compression, date/time formats, binary format, null value handling, and other options. The snippet sets properties like `name`, `owner`, `compression`, `date_format`, `time_format`, `timestamp_format`, `binary_format`, `trim_space`, `null_if`, `file_extension`, `enable_octal`, `allow_duplicate`, `strip_outer_array`, `strip_null_values`, `replace_invalid_characters`, `ignore_utf8_errors`, `skip_byte_order_mark`, and `comment`.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/json_file_format.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfile_format = JSONFileFormat(\n    name=\"some_json_file_format\",\n    owner=\"SYSADMIN\",\n    compression=\"AUTO\",\n    date_format=\"AUTO\",\n    time_format=\"AUTO\",\n    timestamp_format=\"AUTO\",\n    binary_format=BinaryFormat.HEX,\n    trim_space=False,\n    null_if=[\"NULL\"],\n    file_extension=\"json\",\n    enable_octal=False,\n    allow_duplicate=False,\n    strip_outer_array=False,\n    strip_null_values=False,\n    replace_invalid_characters=False,\n    ignore_utf8_errors=False,\n    skip_byte_order_mark=True,\n    comment=\"This is a JSON file format.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Table with Table Object in Python\nDESCRIPTION: This code snippet demonstrates how to define a Snowflake table using a Python object. It showcases the use of the `Table` class to specify the table name, columns (with data types), and owner. The example defines a table named `some_table` with a single string column `col1` owned by `SYSADMIN`.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/table.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntable = Table(\n    name=\"some_table\",\n    columns=[{\"name\": \"col1\", \"data_type\": \"STRING\"}],\n    owner=\"SYSADMIN\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Snowflake Task in Python\nDESCRIPTION: This Python snippet demonstrates how to define a Snowflake task using the `Task` class. It sets the task's name, warehouse, schedule, state (SUSPENDED), and the SQL statement to execute (SELECT 1). Requires a `Task` class, presumably part of a Snowflake library or ORM.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/task.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntask = Task(\n    name=\"some_task\",\n    warehouse=\"some_warehouse\",\n    schedule=\"USING CRON 0 9 * * * UTC\",\n    state=\"SUSPENDED\",\n    as_=\"SELECT 1\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Group in YAML\nDESCRIPTION: This YAML snippet illustrates the configuration of a Snowflake replication group.  It specifies the name, object types (DATABASES), and allowed accounts for a single replication group within a `replication_groups` list.  The structure is designed for declarative configuration management.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/replication_group.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nreplication_groups:\n  - name: some_replication_group\n    object_types:\n      - DATABASES\n    allowed_accounts:\n      - account1\n      - account2\n```\n\n----------------------------------------\n\nTITLE: Defining Parquet File Format in Snowflake using YAML\nDESCRIPTION: This YAML code snippet illustrates how to define a Parquet file format configuration for Snowflake. It includes properties such as name, owner, compression, binary_as_text, trim_space, replace_invalid_characters, null_if, and comment to specify the desired file format settings.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/parquet_file_format.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nfile_formats:\n  - name: some_file_format\n    owner: SYSADMIN\n    compression: AUTO\n    binary_as_text: true\n    trim_space: false\n    replace_invalid_characters: false\n    null_if:\n      - NULL\n    comment: This is a Parquet file format.\n```\n\n----------------------------------------\n\nTITLE: Defining a Session Policy in YAML\nDESCRIPTION: This YAML snippet shows how to define a Snowflake session policy using YAML configuration. It specifies the policy name, session idle timeout in minutes, session UI idle timeout in minutes, and a comment for the policy. This configuration can be used to automate the creation of session policies.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/session_policy.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession_policies:\n  - name: some_session_policy\n    session_idle_timeout_mins: 30\n    session_ui_idle_timeout_mins: 10\n    comment: Policy for standard users.\n```\n\n----------------------------------------\n\nTITLE: Define Azure Storage Integration in Python\nDESCRIPTION: This Python snippet creates an Azure Storage Integration object for Snowflake. It requires specifying the name, enabled status, Azure tenant ID, allowed storage locations, and optionally blocked storage locations and a comment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/azure_storage_integration.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nazure_storage_integration = AzureStorageIntegration(\n    name=\"some_azure_storage_integration\",\n    enabled=True,\n    azure_tenant_id=\"some_tenant_id\",\n    storage_allowed_locations=[\"azure://somebucket/somepath/\"],\n    storage_blocked_locations=[\"azure://someotherbucket/somepath/\"],\n    comment=\"This is an Azure storage integration.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake View in YAML\nDESCRIPTION: This YAML snippet illustrates how to define a Snowflake view using a declarative configuration.  It specifies the view's name, owner, security setting, and the SQL SELECT statement that defines the view. The `as_` field holds the SELECT statement.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/view.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: some_view\n    owner: SYSADMIN\n    secure: true\n    as_: \"SELECT * FROM some_table\"\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Secret in Python\nDESCRIPTION: This Python code defines a Snowflake Secret object with various parameters such as name, type (OAUTH2), API authentication, OAuth scopes, refresh token, expiry time, username, password, secret string, comment, and owner.  It utilizes the Secret class and assigns values to its attributes. This code assumes the Secret class is defined elsewhere in the project.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/secret.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsecret = Secret(\n    name=\"some_secret\",\n    type=\"OAUTH2\",\n    api_authentication=\"some_security_integration\",\n    oauth_scopes=[\"scope1\", \"scope2\"],\n    oauth_refresh_token=\"some_refresh_token\",\n    oauth_refresh_token_expiry_time=\"some_expiry_time\",\n    username=\"some_username\",\n    password=\"some_password\",\n    secret_string=\"some_secret_string\",\n    comment=\"some_comment\",\n    owner=\"SYSADMIN\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Snowflake ViewStream using YAML\nDESCRIPTION: This YAML snippet shows how to define a Snowflake ViewStream configuration.  It includes settings for the stream's name, the view it monitors (`on_view`), the owner, grant copying behavior, specific points in time for data capture (`at` and `before`), and flags to control append-only behavior and initial row visibility. It also sets a comment to describe the stream.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/view_stream.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstreams:\n  - name: some_stream\n    on_view: some_view\n    owner: SYSADMIN\n    copy_grants: true\n    at:\n      TIMESTAMP: \"2022-01-01 00:00:00\"\n    before:\n      STREAM: some_other_stream\n    append_only: false\n    show_initial_rows: true\n    comment: This is a sample stream on a view.\n```\n\n----------------------------------------\n\nTITLE: Creating Parquet File Format in Snowflake using Python\nDESCRIPTION: This Python code snippet demonstrates how to create a Parquet file format in Snowflake. It defines various parameters such as name, owner, compression, binary_as_text, trim_space, replace_invalid_characters, null_if, and comment to configure the file format.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/parquet_file_format.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfile_format = ParquetFileFormat(\n    name=\"some_file_format\",\n    owner=\"SYSADMIN\",\n    compression=\"AUTO\",\n    binary_as_text=True,\n    trim_space=False,\n    replace_invalid_characters=False,\n    null_if=[\"NULL\"],\n    comment=\"This is a Parquet file format.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Alert in YAML\nDESCRIPTION: This YAML configuration defines a Snowflake alert by specifying the alert's name, warehouse, schedule (using a cron expression), condition (a SQL query), and action (sending an email). This snippet is part of a larger YAML configuration file and requires a system to parse and apply the alert definition to Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/alert.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nalerts:\n  - name: some_alert\n    warehouse: some_warehouse\n    schedule: USING CRON * * * * * \n    condition: SELECT COUNT(*) FROM some_table\n    then: CALL SYSTEM$SEND_EMAIL('example@example.com', 'Alert Triggered', 'The alert condition was met.')\n```\n\n----------------------------------------\n\nTITLE: Define Aggregation Policy in YAML\nDESCRIPTION: This YAML snippet shows how to define a Snowflake AggregationPolicy using a YAML configuration. It specifies the name, body (SQL expression defining the constraint), and owner for the policy. This YAML can be used to generate Snowflake configuration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/aggregation_policy.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naggregation_policies:\n  - name: some_aggregation_policy\n    body: AGGREGATION_CONSTRAINT(MIN_GROUP_SIZE => 5)\n    owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Define Snowflake Account Parameter in YAML\nDESCRIPTION: This YAML snippet defines a Snowflake AccountParameter. It specifies the 'name' and 'value' attributes, which are essential for configuring account-level settings within Snowflake. The parameters are grouped under the 'account_parameters' key, allowing for multiple account parameters to be configured at once.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/account_parameter.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\naccount_parameters:\n  - name: some_parameter\n    value: some_value\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Database Role in Python\nDESCRIPTION: This snippet demonstrates how to define a Snowflake DatabaseRole using Python.  It initializes a DatabaseRole object with a name, database, owner, tags, and comment. The database role will be associated with 'some_database' and owned by 'USERADMIN'.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database_role.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndatabase_role = DatabaseRole(\n    name=\"some_database_role\",\n    database=\"some_database\",\n    owner=\"USERADMIN\",\n    tags={\"department\": \"finance\"},\n    comment=\"This role is for database-specific access control.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Stage in Snowflake using YAML\nDESCRIPTION: This YAML snippet defines an internal stage configuration for Snowflake. It specifies properties such as the stage name, type (internal), owner, encryption settings (type: SNOWFLAKE_SSE), directory enablement, tags (department: finance), and a comment. This configuration can be used to provision or manage the internal stage using a configuration management tool or framework.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/internal_stage.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nstages:\n  - name: some_internal_stage\n    type: internal\n    owner: SYSADMIN\n    encryption:\n      type: SNOWFLAKE_SSE\n    directory:\n      enable: true\n    tags:\n      department: finance\n    comment: Data loading stage\n```\n\n----------------------------------------\n\nTITLE: OAuth Secret Creation with Authorization Code Grant Flow - Python\nDESCRIPTION: This Python code snippet demonstrates the creation of an OAuth secret for an authorization code grant flow.  It includes parameters for the refresh token and its expiry time, in addition to the name, API authentication, optional comment, and owner.  The refresh token and expiry time are essential for this flow.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/oauth_secret.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsecret = OAuthSecret(\n    name=\"another_secret\",\n    api_authentication=\"some_security_integration\",\n    oauth_refresh_token=\"34n;vods4nQsdg09wee4qnfvadH\",\n    oauth_refresh_token_expiry_time=\"2049-01-06 20:00:00\",\n    comment=\"some_comment\",\n    owner=\"SYSADMIN\",\n)\n```\n\n----------------------------------------\n\nTITLE: OAuth Secret Definition - YAML\nDESCRIPTION: This YAML configuration defines two OAuth secrets: one for client credentials flow and another for authorization code grant flow.  It specifies the secret name, type, API authentication, OAuth scopes (for the client credentials flow), refresh token and expiry time (for the authorization code grant flow), an optional comment, and the owner.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/oauth_secret.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  - name: some_secret\n    secret_type: OAUTH2\n    api_authentication: some_security_integration\n    oauth_scopes:\n      - scope1\n      - scope2\n    comment: some_comment\n    owner: SYSADMIN\n  - name: another_secret\n    secret_type: OAUTH2\n    api_authentication: some_security_integration\n    oauth_refresh_token: 34n;vods4nQsdg09wee4qnfvadH\n    oauth_refresh_token_expiry_time: 2049-01-06 20:00:00\n    comment: some_comment\n    owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Defining API Authentication Security Integration in Snowflake (YAML)\nDESCRIPTION: This YAML snippet shows how to define an API authentication security integration.  It mirrors the Python example, configuring OAuth 2.0 settings such as the token endpoint, client authentication method, client credentials, grant type, access token validity, and allowed scopes. The integration is also named 'some_api_authentication_security_integration'.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/api_authentication_security_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_integrations:\n- name: some_api_authentication_security_integration\n    type: api_authentication\n    auth_type: OAUTH2\n    oauth_token_endpoint: https://example.com/oauth/token\n    oauth_client_auth_method: CLIENT_SECRET_POST\n    oauth_client_id: your_client_id\n    oauth_client_secret: your_client_secret\n    oauth_grant: client_credentials\n    oauth_access_token_validity: 3600\n    oauth_allowed_scopes: [read, write]\n    enabled: true\n    comment: Integration for external API authentication.\n```\n\n----------------------------------------\n\nTITLE: Defining Python Stored Procedure in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a Python stored procedure for Snowflake using the PythonStoredProcedure class. It showcases the various parameters such as name, arguments, return type, runtime version, packages, handler, procedure definition (as_), comment, copy grants, execution rights, external access integrations, imports, null handling, owner, and secure flag.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/python_stored_procedure.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprocedure = PythonStoredProcedure(\n    name=\"some_procedure\",\n    args=[],\n    returns=\"STRING\",\n    runtime_version=\"3.8\",\n    packages=[\"snowflake-snowpark-python\"],\n    handler=\"process_data\",\n    as_=\"def process_data(): return 'Hello, World!'\",\n    comment=\"A simple procedure\",\n    copy_grants=False,\n    execute_as=\"CALLER\",\n    external_access_integrations=None,\n    imports=None,\n    null_handling=\"CALLED_ON_NULL_INPUT\",\n    owner=\"SYSADMIN\",\n    secure=False\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Schema in YAML\nDESCRIPTION: This YAML configuration demonstrates how to define a Snowflake schema. It specifies the schema name, transient status, managed access, data retention settings, collation, associated tags, owner, and a comment. This configuration provides an alternative way to define the schema's properties using a declarative approach.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/schema.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschemas:\n  - name: some_schema\n    transient: true\n    managed_access: true\n    data_retention_time_in_days: 7\n    max_data_extension_time_in_days: 28\n    default_ddl_collation: utf8\n    tags:\n      project: analytics\n    owner: SYSADMIN\n    comment: Schema for analytics project.\n```\n\n----------------------------------------\n\nTITLE: OAuth Secret Creation with Client Credentials Flow - Python\nDESCRIPTION: This code snippet demonstrates how to create an OAuth secret using the `OAuthSecret` class in Python for a client credentials flow.  It requires specifying the secret name, API authentication security integration, OAuth scopes, an optional comment, and the owner. The owner defaults to SYSADMIN.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/oauth_secret.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsecret = OAuthSecret(\n    name=\"some_secret\",\n    api_authentication=\"some_security_integration\",\n    oauth_scopes=[\"scope1\", \"scope2\"],\n    comment=\"some_comment\",\n    owner=\"SYSADMIN\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Rule in Python\nDESCRIPTION: This Python snippet demonstrates how to define a NetworkRule object. It initializes a NetworkRule with a name, type (IPV4), a list of IP addresses for the value_list, sets the mode to INGRESS, and includes a comment.  It requires the NetworkRule class to be defined elsewhere in the project.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/network_rule.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nnetwork_rule = NetworkRule(\n    name=\"some_network_rule\",\n    type=\"IPV4\",\n    value_list=[\"192.168.1.1\", \"192.168.1.2\"],\n    mode=\"INGRESS\",\n    comment=\"Example network rule\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Policy in Python\nDESCRIPTION: This Python snippet demonstrates how to create a Snowflake session policy. It defines the policy name, session idle timeout in minutes, session UI idle timeout in minutes, and a comment for the policy.  This requires the SessionPolicy class to be defined and available.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/session_policy.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsession_policy = SessionPolicy(\n    name=\"some_session_policy\",\n    session_idle_timeout_mins=30,\n    session_ui_idle_timeout_mins=10,\n    comment=\"Policy for standard users.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Snowflake OAuth Security Integration in Python\nDESCRIPTION: This Python code snippet demonstrates how to create a SnowflakePartnerOAuthSecurityIntegration object. It sets properties such as name, enabled status, OAuth client type (LOOKER), client secret, redirect URI, refresh token issuance, refresh token validity period, and a comment. This integration configures OAuth for external applications like Looker to securely access Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/snowflake_partner_oauth_security_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsnowflake_partner_oauth_security_integration = SnowflakePartnerOAuthSecurityIntegration(\n    name=\"some_security_integration\",\n    enabled=True,\n    oauth_client=\"LOOKER\",\n    oauth_client_secret=\"secret123\",\n    oauth_redirect_uri=\"https://example.com/oauth/callback\",\n    oauth_issue_refresh_tokens=True,\n    oauth_refresh_token_validity=7776000,\n    comment=\"Integration for Looker OAuth\"\n)\n```\n\n----------------------------------------\n\nTITLE: Apply Titan Core Configuration via CLI\nDESCRIPTION: This shell script creates a `titan.yml` configuration file, sets environment variables for Snowflake connection, generates a plan using the Titan CLI, and then applies the configuration to Snowflake. It uses the `cat` command to create the YAML config and `export` to set environment variables.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Create a resource config file\ncat <<EOF > titan.yml\nroles:\n  - name: transformer\n\nwarehouses:\n  - name: transforming\n    warehouse_size: LARGE\n    auto_suspend: 60\n\ngrants:\n  - to_role: transformer\n    priv: usage\n    on_warehouse: transforming\nEOF\n\n# Set connection variables\nexport SNOWFLAKE_ACCOUNT=\"my-account\"\nexport SNOWFLAKE_USER=\"my-user\"\nexport SNOWFLAKE_PASSWORD=\"my-password\"\n\n# Generate a plan\ntitan plan --config titan.yml\n\n# Apply the config\ntitan apply --config titan.yml\n```\n\n----------------------------------------\n\nTITLE: Python UDF Configuration in Python\nDESCRIPTION: This snippet demonstrates how to configure a Snowflake Python UDF using Python.  It defines parameters such as the function's name, return type, runtime version, handler, arguments, and associated metadata like comments and external access integrations. It uses the `PythonUDF` class to encapsulate these settings, effectively outlining the function's behavior and security context within Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/python_udf.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython_udf = PythonUDF(\n    name=\"some_python_udf\",\n    returns=\"string\",\n    runtime_version=\"3.8\",\n    handler=\"process_data\",\n    args=[{\"name\": \"input_data\", \"data_type\": \"string\"}],\n    as_=\"process_data_function\",\n    comment=\"This function processes data.\",\n    copy_grants=False,\n    external_access_integrations=[\"s3_integration\"],\n    imports=[\"pandas\", \"numpy\"],\n    null_handling=\"CALLED_ON_NULL_INPUT\",\n    owner=\"SYSADMIN\",\n    packages=[\"pandas\", \"numpy\"],\n    secrets={\"api_key\": \"secret_value\"},\n    secure=False,\n    volatility=\"IMMUTABLE\"\n)\n```\n\n----------------------------------------\n\nTITLE: PackagesPolicy Definition in Python\nDESCRIPTION: This Python snippet defines a PackagesPolicy named 'some_packages_policy' that allows 'numpy' and 'pandas' and blocks 'os' and 'sys'. It sets a comment for the policy.  It requires the PackagesPolicy class to be defined.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/packages_policy.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npackages_policy = PackagesPolicy(\n    name=\"some_packages_policy\",\n    allowlist=[\"numpy\", \"pandas\"],\n    blocklist=[\"os\", \"sys\"],\n    comment=\"Policy for data processing packages.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Schema to a Database using the `add` method (Python)\nDESCRIPTION: This snippet demonstrates using the `add` method of the `Database` object to associate a schema with the database.  This example initializes the Database and Schema separately and then uses db.add(sch) to associate the objects.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb = Database(name = \"my_test_db\")\nsch = Schema(name = \"some_schema\")\ndb.add(sch)\n```\n\n----------------------------------------\n\nTITLE: Defining Object Store Catalog Integration in YAML\nDESCRIPTION: This YAML snippet defines an Object Store Catalog Integration. It specifies the name, table format, enabled status, and a comment for the integration. It assumes that the YAML structure is part of a larger configuration file for catalog integrations.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/object_store_catalog_integration.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ncatalog_integrations:\n  - name: some_catalog_integration\n    table_format: ICEBERG\n    enabled: true\n    comment: Integration for object storage.\n```\n\n----------------------------------------\n\nTITLE: Create GlueCatalogIntegration in Python\nDESCRIPTION: This Python snippet demonstrates how to define a GlueCatalogIntegration object for Snowflake using specific configuration parameters.  It showcases the creation of a catalog integration named 'some_catalog_integration' for ICEBERG tables, specifying the AWS role ARN, Glue catalog ID, namespace, region, and other integration details.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/glue_catalog_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nglue_catalog_integration = GlueCatalogIntegration(\n    name=\"some_catalog_integration\",\n    table_format=\"ICEBERG\",\n    glue_aws_role_arn=\"arn:aws:iam::123456789012:role/SnowflakeAccess\",\n    glue_catalog_id=\"some_glue_catalog_id\",\n    catalog_namespace=\"some_namespace\",\n    enabled=True,\n    glue_region=\"us-west-2\",\n    comment=\"Integration for AWS Glue with Snowflake.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an API Integration in Python\nDESCRIPTION: This Python code snippet demonstrates how to create an API integration in Snowflake. It defines parameters such as name, API provider, AWS role ARN, allowed and blocked prefixes, API key, and a comment. This is a setup for secure interaction with external services.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/api_integration.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napi_integration = APIIntegration(\n    name=\"some_api_integration\",\n    api_provider=\"AWS_API_GATEWAY\",\n    api_aws_role_arn=\"arn:aws:iam::123456789012:role/MyRole\",\n    enabled=True,\n    api_allowed_prefixes=[\"/prod/\", \"/dev/\"],\n    api_blocked_prefixes=[\"/test/\"],\n    api_key=\"ABCD1234\",\n    comment=\"Example API integration\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Stage in Snowflake using Python\nDESCRIPTION: This Python code snippet demonstrates how to create an internal stage in Snowflake. It initializes an `InternalStage` object with various parameters such as name, owner, encryption type, directory settings, tags, and a comment. The encryption type is set to SNOWFLAKE_SSE and directory is enabled. This example assumes the existence of an `InternalStage` class or function.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/internal_stage.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ninternal_stage = InternalStage(\n    name=\"some_internal_stage\",\n    owner=\"SYSADMIN\",\n    encryption={\"type\": \"SNOWFLAKE_SSE\"},\n    directory={\"enable\": True},\n    tags={\"department\": \"finance\"},\n    comment=\"Data loading stage\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Snowflake ViewStream in Python\nDESCRIPTION: This code snippet demonstrates how to create a Snowflake ViewStream using Python. It initializes a `ViewStream` object with various properties such as the stream name, the view it's based on, ownership, and options for copying grants, setting time travel points (`at` and `before`), enabling append-only mode, showing initial rows, and adding a comment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/view_stream.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nview_stream = ViewStream(\n    name=\"some_stream\",\n    on_view=\"some_view\",\n    owner=\"SYSADMIN\",\n    copy_grants=True,\n    at={\"TIMESTAMP\": \"2022-01-01 00:00:00\"},\n    before={\"STREAM\": \"some_other_stream\"},\n    append_only=False,\n    show_initial_rows=True,\n    comment=\"This is a sample stream on a view.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake External Stage in YAML\nDESCRIPTION: This snippet shows how to configure an external stage using YAML.  The `name`, `type`, and `url` are the mandatory fields.  Optional fields like `owner` and `storage_integration` are also supported to further customize the external stage definition.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/external_stage.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - name: some_external_stage\n    type: external\n    url: https://example.com/storage\n    owner: SYSADMIN\n    storage_integration: some_integration\n```\n\n----------------------------------------\n\nTITLE: Creating GCS Storage Integration in Python\nDESCRIPTION: Defines a GCS storage integration using Python, specifying the name, status, allowed storage locations, and blocked storage locations. The example demonstrates how to enable access to specific GCS paths while restricting others. This requires the Snowflake Python connector and related GCS libraries to be configured.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/gcs_storage_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngcs_storage_integration = GCSStorageIntegration(\n    name=\"some_gcs_storage_integration\",\n    enabled=True,\n    storage_allowed_locations=['gcs://bucket/path/'],\n    storage_blocked_locations=['gcs://bucket/blocked_path/']\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Materialized View using Python\nDESCRIPTION: This Python code snippet demonstrates the creation of a Snowflake Materialized View. It defines the view's name, owner, security setting, and the underlying SELECT query. The `MaterializedView` class is assumed to be defined elsewhere and handles the creation process.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/materialized_view.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmaterialized_view = MaterializedView(\n    name=\"some_materialized_view\",\n    owner=\"SYSADMIN\",\n    secure=True,\n    as_=\"SELECT * FROM some_table\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating API Authentication Security Integration in Snowflake (Python)\nDESCRIPTION: This Python snippet demonstrates how to create an API authentication security integration in Snowflake. It configures various OAuth 2.0 settings, including the token endpoint, client authentication method, client ID and secret, grant type, access token validity, allowed scopes, and enables the integration. The integration is named 'some_api_authentication_security_integration'.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/api_authentication_security_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napi_auth_integration = APIAuthenticationSecurityIntegration(\n    name=\"some_api_authentication_security_integration\",\n    auth_type=\"OAUTH2\",\n    oauth_token_endpoint=\"https://example.com/oauth/token\",\n    oauth_client_auth_method=\"CLIENT_SECRET_POST\",\n    oauth_client_id=\"your_client_id\",\n    oauth_client_secret=\"your_client_secret\",\n    oauth_grant=\"client_credentials\",\n    oauth_access_token_validity=3600,\n    oauth_allowed_scopes=[\"read\", \"write\"],\n    enabled=True,\n    comment=\"Integration for external API authentication.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake OAuth Security Integration in YAML\nDESCRIPTION: This YAML snippet shows how to define a SnowflakePartnerOAuthSecurityIntegration. It configures settings such as the integration's name, whether it's enabled, the OAuth client type (LOOKER), client secret, redirect URI, whether to issue refresh tokens, the refresh token validity period, and a descriptive comment. This YAML configuration allows for declarative setup of the Snowflake security integration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/snowflake_partner_oauth_security_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_integrations:\n  - name: some_security_integration\n    enabled: true\n    oauth_client: LOOKER\n    oauth_client_secret: secret123\n    oauth_redirect_uri: https://example.com/oauth/callback\n    oauth_issue_refresh_tokens: true\n    oauth_refresh_token_validity: 7776000\n    comment: Integration for Looker OAuth\n```\n\n----------------------------------------\n\nTITLE: Defining Replication Group in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a Snowflake replication group using the `ReplicationGroup` class. It sets the name, object types (DATABASES), and allowed accounts for the replication group. This assumes the existence of a `ReplicationGroup` class in the Python environment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/replication_group.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nreplication_group = ReplicationGroup(\n    name=\"some_replication_group\",\n    object_types=[\"DATABASES\"],\n    allowed_accounts=[\"account1\", \"account2\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Hybrid Table in Python\nDESCRIPTION: This code snippet demonstrates how to define a Snowflake Hybrid Table using Python. It shows how to specify the table name, columns, owner, and comment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/hybrid_table.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhybrid_table = HybridTable(\n    name=\"some_hybrid_table\",\n    columns=[Column(name=\"col1\", type=\"STRING\")],\n    owner=\"SYSADMIN\",\n    comment=\"This is a hybrid table.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Titan Workflow File in YAML\nDESCRIPTION: This YAML file defines a GitHub workflow that triggers on push events to the `main` branch when changes are made within the 'titan/**' path. It checks out the code and then uses the Titan Core GitHub Action to deploy resources to Snowflake with specified settings.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/titan-core-github-action.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: Deploy to Snowflake with Titan\non:\n  push:\n    branches: [ main ]\n    paths:\n    - 'titan/**'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Deploy to Snowflake\n        uses: Titan-Systems/titan-core-action@main\n        with:\n          run-mode: 'create-or-update'\n          resource-path: './titan'\n          allowlist: 'warehouse,role,grant'\n          dry-run: 'false'\n        env:\n          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}\n          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}\n          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}\n          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}\n          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Event Table with Python\nDESCRIPTION: This Python snippet shows how to define a Snowflake Event Table using the `EventTable` class. It configures attributes like name, clustering columns (`cluster_by`), data retention period, change tracking, collation, grant copying, a comment, and associated tags.  Dependencies: Snowflake connector for Python.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/event_table.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nevent_table = EventTable(\n    name=\"some_event_table\",\n    cluster_by=[\"timestamp\", \"user_id\"],\n    data_retention_time_in_days=365,\n    max_data_extension_time_in_days=30,\n    change_tracking=True,\n    default_ddl_collation=\"utf8\",\n    copy_grants=True,\n    comment=\"This is a sample event table.\",\n    tags={\"department\": \"analytics\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Compute Pool in Python\nDESCRIPTION: This code snippet demonstrates how to create a Snowflake Compute Pool using Python. It initializes a `ComputePool` object with specified parameters such as name, owner, node counts, instance family, and auto-suspend settings. The owner defaults to 'ACCOUNTADMIN'.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/compute_pool.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncompute_pool = ComputePool(\n    name=\"some_compute_pool\",\n    owner=\"ACCOUNTADMIN\",\n    min_nodes=2,\n    max_nodes=10,\n    instance_family=\"CPU_X64_S\",\n    auto_resume=True,\n    initially_suspended=False,\n    auto_suspend_secs=1800,\n    comment=\"Example compute pool\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Snowflake Failover Group in Python\nDESCRIPTION: This snippet shows how to define a Snowflake failover group using Python. It initializes a `FailoverGroup` object with parameters such as name, object types, allowed accounts, and replication schedule. The snippet demonstrates how to configure a failover group programmatically.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/failover_group.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfailover_group = FailoverGroup(\n    name=\"some_failover_group\",\n    object_types=[\"DATABASES\", \"ROLES\"],\n    allowed_accounts=[\"org1.account1\", \"org2.account2\"],\n    allowed_databases=[\"db1\", \"db2\"],\n    allowed_shares=[\"share1\", \"share2\"],\n    allowed_integration_types=[\"SECURITY INTEGRATIONS\", \"API INTEGRATIONS\"],\n    ignore_edition_check=True,\n    replication_schedule=\"USING CRON 0 0 * * * UTC\",\n    owner=\"ACCOUNTADMIN\"\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Resources by Instance in Titan\nDESCRIPTION: This snippet explains how resources can be passed directly to other resources in Titan to establish relationships or configurations. Passing the resource instance directly ensures a clear and direct reference. This allows for defining configurations and dependencies between different Snowflake objects.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/working-with-resources.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Creating Snowflake External Stage in Python\nDESCRIPTION: This snippet demonstrates how to define an external stage using Python.  It requires the `ExternalStage` class. The `name` and `url` parameters are mandatory. Other optional parameters like `owner` and `storage_integration` can also be specified.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/external_stage.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexternal_stage = ExternalStage(\n    name=\"some_external_stage\",\n    url=\"https://example.com/storage\",\n    owner=\"SYSADMIN\",\n    storage_integration=\"some_integration\"\n)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Snowflake Resources in Python\nDESCRIPTION: This snippet demonstrates how to instantiate Snowflake resources like users or warehouses in Python using the Titan framework. It involves passing the required parameters to the class constructor, such as username and password for a user, or size and name for a warehouse.  The example shows how resources can be created simply by providing the required information.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/working-with-resources.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Snowflake User in Python\nDESCRIPTION: This snippet demonstrates how to define a Snowflake user using Python, specifying attributes like name, owner, email, and type. It showcases the creation of a `User` object with specific user properties for Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/user.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuser = User(\n    name=\"some_user\",\n    owner=\"USERADMIN\",\n    email=\"some.user@example.com\",\n    type=\"PERSON\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Store Catalog Integration in Python\nDESCRIPTION: This Python snippet demonstrates how to create an ObjectStoreCatalogIntegration object.  It requires the ObjectStoreCatalogIntegration class to be available in the current scope. The example sets the name, table format, enabled status, and comment for the integration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/object_store_catalog_integration.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nobject_store_catalog_integration = ObjectStoreCatalogIntegration(\n    name=\"some_catalog_integration\",\n    table_format=\"ICEBERG\",\n    enabled=True,\n    comment=\"Integration for object storage.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Define Snowflake Account Parameter in Python\nDESCRIPTION: This Python snippet defines a Snowflake AccountParameter object. It sets the 'name' and 'value' attributes of the parameter, which are required for configuring account-level settings in Snowflake. The snippet demonstrates how to programmatically define an account parameter for use with Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/account_parameter.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\naccount_parameter = AccountParameter(\n    name=\"some_parameter\",\n    value=\"some_value\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Warehouses in YAML\nDESCRIPTION: This YAML file defines a Snowflake warehouse named 'reporting' with specified properties such as warehouse size, auto-suspend duration, and auto-resume setting.  This configuration is used by the Titan Core action to manage Snowflake resources.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/titan-core-github-action.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nwarehouses:\n  - name: reporting\n    warehouse_size: XSMALL\n    auto_suspend: 60\n    auto_resume: true\n```\n\n----------------------------------------\n\nTITLE: Define Password Policy in Python\nDESCRIPTION: This Python snippet demonstrates how to create a PasswordPolicy object with specific parameters for password validation.  It defines constraints such as minimum and maximum length, character requirements (uppercase, lowercase, numeric, special), age limits, retry attempts, lockout duration, password history, and includes a comment and owner.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/password_policy.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npassword_policy = PasswordPolicy(\n    name=\"some_password_policy\",\n    password_min_length=10,\n    password_max_length=128,\n    password_min_upper_case_chars=2,\n    password_min_lower_case_chars=2,\n    password_min_numeric_chars=2,\n    password_min_special_chars=1,\n    password_min_age_days=1,\n    password_max_age_days=60,\n    password_max_retries=3,\n    password_lockout_time_mins=30,\n    password_history=5,\n    comment=\"Strict policy for admin accounts.\",\n    owner=\"SYSADMIN\"\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Action Configuration for Titan Core\nDESCRIPTION: This YAML file configures a GitHub Action workflow to deploy Snowflake resources using Titan Core. It defines a workflow that triggers on pushes to the `main` branch within the `titan/**` path, checks out the code, and then uses the `Titan-Systems/titan-core-action` to deploy resources. It sets the `run-mode`, `resource-path`, `allowlist`, and `dry-run` parameters and passes Snowflake credentials through environment variables defined in GitHub Secrets.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n-- .github/workflows/titan.yml\nname: Deploy to Snowflake with Titan\non:\n  push:\n    branches: [ main ]\n    paths:\n    - 'titan/**'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Deploy to Snowflake\n        uses: Titan-Systems/titan-core-action@main\n        with:\n          run-mode: 'create-or-update'\n          resource-path: './titan'\n          allowlist: 'warehouse,role,grant'\n          dry-run: 'false'\n        env:\n          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}\n          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}\n          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}\n          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}\n          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Snowflake Sequence in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a Snowflake sequence named 'some_sequence' with a specified owner, start value, increment, and comment. It shows how to configure a sequence programmatically for deployment or management purposes.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/sequence.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsequence = Sequence(\n    name=\"some_sequence\",\n    owner=\"SYSADMIN\",\n    start=100,\n    increment=10,\n    comment=\"This is a sample sequence.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Role in Python\nDESCRIPTION: This Python snippet demonstrates how to define a Snowflake role using a hypothetical `Role` class.  It initializes a `Role` object named `some_role` with properties for owner and a comment.  The `Role` class is assumed to be defined elsewhere, handling the actual role creation in Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/role.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrole = Role(\n    name=\"some_role\",\n    owner=\"USERADMIN\",\n    comment=\"This is a sample role.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Define Authentication Policy in Python for Snowflake\nDESCRIPTION: This snippet demonstrates how to define an authentication policy using Python. It sets parameters such as allowed authentication methods, MFA requirements, client types, security integrations, and a descriptive comment. The AuthenticationPolicy class is assumed to be defined elsewhere.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/authentication_policy.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nauthentication_policy = AuthenticationPolicy(\n    name=\"some_authentication_policy\",\n    authentication_methods=[\"PASSWORD\", \"SAML\"],\n    mfa_authentication_methods=[\"PASSWORD\"],\n    mfa_enrollment=\"REQUIRED\",\n    client_types=[\"SNOWFLAKE_UI\"],\n    security_integrations=[\"ALL\"],\n    comment=\"Policy for secure authentication.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Titan CLI Apply Resource Config Example\nDESCRIPTION: This snippet shows how to create a Titan Core YAML config file, set environment variables for Snowflake connection, generate a plan, and then apply the config to Snowflake using the Titan CLI.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Create a resource config file\ncat <<EOF > titan.yml\nroles:\n  - name: transformer\n\nwarehouses:\n  - name: transforming\n    warehouse_size: LARGE\n    auto_suspend: 60\n\ngrants:\n  - to_role: transformer\n    priv: usage\n    on_warehouse: transforming\nEOF\n\n# Set connection variables\nexport SNOWFLAKE_ACCOUNT=\"my-account\"\nexport SNOWFLAKE_USER=\"my-user\"\nexport SNOWFLAKE_PASSWORD=\"my-password\"\n\n# Generate a plan\ntitan plan --config titan.yml\n\n# Apply the config\ntitan apply --config titan.yml\n```\n\n----------------------------------------\n\nTITLE: Titan Core GitHub Action Example\nDESCRIPTION: This YAML file configures a GitHub Action to deploy Snowflake resources using Titan Core. It checks out the code, then uses the `Titan-Systems/titan-core-action` action to deploy resources from the `./titan` directory, allowing warehouse, role, and grant resources and setting the run mode to 'create-or-update'.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n-- .github/workflows/titan.yml\nname: Deploy to Snowflake with Titan\non:\n  push:\n    branches: [ main ]\n    paths:\n    - 'titan/**'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Deploy to Snowflake\n        uses: Titan-Systems/titan-core-action@main\n        with:\n          run-mode: 'create-or-update'\n          resource-path: './titan'\n          allowlist: 'warehouse,role,grant'\n          dry-run: 'false'\n        env:\n          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}\n          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}\n          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}\n          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}\n          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Pipe with Python\nDESCRIPTION: This Python snippet demonstrates how to create a Snowflake Pipe object.  It sets properties like the pipe name, the COPY INTO statement, owner, auto-ingest settings, and integrations for error handling and data loading. The snippet requires the `Pipe` class to be defined, presumably as part of a Snowflake management library.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/pipe.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npipe = Pipe(\n    name=\"some_pipe\",\n    as_=\"COPY INTO some_table FROM @%some_stage\",\n    owner=\"SYSADMIN\",\n    auto_ingest=True,\n    error_integration=\"some_integration\",\n    aws_sns_topic=\"some_topic\",\n    integration=\"some_integration\",\n    comment=\"This is a sample pipe\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Image Repository in YAML\nDESCRIPTION: This code snippet demonstrates how to define a Snowflake ImageRepository using YAML. It includes the repository's name, specified under the `image_repositories` key.  The `name` parameter is required.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/image_repository.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nimage_repositories:\n  - name: some_image_repository\n```\n\n----------------------------------------\n\nTITLE: Vars in Python\nDESCRIPTION: Illustrates how to define and use vars in Python using the `titan.var` module and Jinja-style template syntax, passing values to Titan using the `vars` parameter.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom titan.blueprint import Blueprint\nfrom titan.resources import Database\n\n# In Python, a var can be specifed using Titan's var module\nfrom titan import var\ndb1 = Database(name=var.db1_name)\n\n# Alternatively, a var can be specified inside a string with double curly braces. This is Jinja-style template syntax, not an f-string.\ndb2 = Database(name=\"db_{{ var.db2_name }}\")\n\n# Use the vars parameter to pass values to Titan\nBlueprint(\n  resources=[db1, db2],\n  vars={\n    \"db1_name\": \"pineapple\",\n    \"db2_name\": \"durian\",\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Snowflake Share in Python\nDESCRIPTION: This code snippet demonstrates how to create a Snowflake Share resource using Python. It defines the share's name and a comment. No external dependencies are required as this is a conceptual example.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/share.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nshare = Share(\n    name=\"some_share\",\n    comment=\"This is a snowflake share.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Vars Defaults in YAML\nDESCRIPTION: Shows how to define a list of expected vars using the top-level `vars:` key. It specifies a `type`, and optionally a `default`.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nvars:\n  - name: color\n    type: string\n\n  - name: fruit\n    type: string\n    default: apple\n\ndatabases:\n  - name: \"db_{{ var.color }}_{{ var.fruit }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Javascript UDF in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a Javascript UDF in Snowflake using a `JavascriptUDF` object. It sets the name, return type, Javascript code, arguments, and a comment for the function. The UDF converts a string to uppercase.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/javascript_udf.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\njs_udf = JavascriptUDF(\n    name=\"some_function\",\n    returns=\"STRING\",\n    as_=\"function(x) { return x.toUpperCase(); }\",\n    args=[{\"name\": \"x\", \"data_type\": \"STRING\"}],\n    comment=\"Converts a string to uppercase\",\n)\n```\n\n----------------------------------------\n\nTITLE: Blueprint Initialization and Usage - Python\nDESCRIPTION: This example demonstrates how to initialize a Blueprint object in Python with specified resources, run mode, and allowlist. It showcases the planning and application stages using a Snowflake session.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom titan.blueprint import Blueprint\nfrom titan.resources import Database, Schema\n\nbp = Blueprint(\n    run_mode='create-or-update',\n    resources=[\n        Database('my_database'),\n        Schema('my_schema', database='my_database'),\n    ],\n    allowlist=[\"database\", \"schema\"],\n    dry_run=False,\n)\nplan = bp.plan(session)\nbp.apply(session, plan)\n```\n\n----------------------------------------\n\nTITLE: Titan CLI Module Syntax Example\nDESCRIPTION: This command demonstrates how to use the Titan CLI with Python module syntax.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npython -m titan plan --config titan.yml\n```\n\n----------------------------------------\n\nTITLE: PackagesPolicy Definition in YAML\nDESCRIPTION: This YAML snippet defines a PackagesPolicy named 'some_packages_policy' with an allowlist of 'numpy' and 'pandas', a blocklist of 'os' and 'sys', and a comment for the policy.  This YAML configuration is for defining a PackagesPolicy object.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/packages_policy.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npackages_policy:\n  - name: some_packages_policy\n    allowlist:\n      - numpy\n      - pandas\n    blocklist:\n      - os\n      - sys\n    comment: Policy for data processing packages.\n```\n\n----------------------------------------\n\nTITLE: Passing Resources by Name in Titan\nDESCRIPTION: This snippet explains passing resources by their name, which is useful for serialization or when configurations require names as strings. Although not explicitly shown in code, the description explains the concept and usage, which typically involves referencing resources using their names in strings within configuration settings or API calls.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/working-with-resources.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding a Schema to a Database by Name (Python)\nDESCRIPTION: This snippet shows how to add a schema to a database by specifying the database name as a string within the schema definition. It instantiates a `Schema` object and links it to a database by name.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsch = Schema(\n    name = \"some_schema\",\n    database = \"my_test_db\",\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Vars via Environment Variables\nDESCRIPTION: Demonstrates how to pass values to Titan using environment variables. Vars environment variables must start with `TITAN_VAR_` and must be in uppercase.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nexport TITAN_VAR_FRUIT=\"peach\"\ntitan plan --config titan.yml\n```\n\n----------------------------------------\n\nTITLE: Install Titan Core from PyPi (Windows)\nDESCRIPTION: This snippet shows how to install Titan Core from PyPi using a virtual environment on Windows. It creates a virtual environment, activates it using the Windows-specific syntax, and then installs the `titan-core` package using pip.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\npython -m venv .venv\n.\\.venv\\Scripts\\activate\npython -m pip install titan-core\n```\n\n----------------------------------------\n\nTITLE: Define GlueCatalogIntegration in YAML\nDESCRIPTION: This YAML snippet illustrates how to configure a GlueCatalogIntegration within a catalog_integrations list. It specifies the name, table format as ICEBERG, Glue AWS role ARN, Glue catalog ID, catalog namespace, enabled status, Glue region, and an optional comment for the Snowflake integration with AWS Glue.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/glue_catalog_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncatalog_integrations:\n  - name: some_catalog_integration\n    table_format: ICEBERG\n    glue_aws_role_arn: arn:aws:iam::123456789012:role/SnowflakeAccess\n    glue_catalog_id: some_glue_catalog_id\n    catalog_namespace: some_namespace\n    enabled: true\n    glue_region: us-west-2\n    comment: Integration for AWS Glue with Snowflake.\n```\n\n----------------------------------------\n\nTITLE: Install Titan Core from PyPi (Windows)\nDESCRIPTION: These commands create a Python virtual environment, activate it, and install the `titan-core` package using pip. This is the recommended way to install Titan Core on Windows systems.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv .venv\n.\\.venv\\Scripts\\activate\npython -m pip install titan-core\n```\n\n----------------------------------------\n\nTITLE: Schema Scope Reuse - Shell\nDESCRIPTION: Shows example shell commands for applying a schema setup for multiple engineers\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ntitan apply --config dev_schema.yml --schema=SCH_TEEJ\ntitan apply --config dev_schema.yml --schema=SCH_ALLY\ntitan apply --config dev_schema.yml --schema=SCH_DAVE\n```\n\n----------------------------------------\n\nTITLE: Titan CLI Export Resources Example\nDESCRIPTION: This shell command demonstrates how to export existing Snowflake resources (warehouse, grant, role) to a YAML file named `titan.yml` using the Titan CLI.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ntitan export \\\n  --resource=warehouse,grant,role \\\n  --out=titan.yml\n```\n\n----------------------------------------\n\nTITLE: Vars in YAML configuration\nDESCRIPTION: Shows how to define vars in YAML using double curly braces.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n-- titan.yml\ndatabases:\n  - name: \"db_{{ var.fruit }}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Secret in Python\nDESCRIPTION: This snippet demonstrates how to define a generic secret using the Python SDK. It initializes a `GenericSecret` object with parameters like `name`, `secret_string`, `comment`, and `owner`. The `owner` defaults to SYSADMIN if not specified. The `secret_string` holds the actual secret value.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/generic_secret.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsecret = GenericSecret(\n    name=\"some_secret\",\n    secret_string=\"some_secret_string\",\n    comment=\"some_comment\",\n    owner=\"SYSADMIN\",\n)\n```\n\n----------------------------------------\n\nTITLE: Example .titanignore File\nDESCRIPTION: This example `.titanignore` file shows how to exclude files from being processed by the Titan Core action, similar to a `.gitignore` file.  In this example, it excludes a file named `dbt_project.yml`.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/titan-core-github-action.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# .titanignore\n\n# Ignore dbt config\ndbt_project.yml\n```\n\n----------------------------------------\n\nTITLE: Install Titan Core from PyPi (MacOS, Linux)\nDESCRIPTION: This snippet shows how to install Titan Core from PyPi using a virtual environment on MacOS or Linux. It creates a virtual environment, activates it, and then installs the `titan-core` package using pip.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npython -m pip install titan-core\n```\n\n----------------------------------------\n\nTITLE: Resource Monitor Definition in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a resource monitor with specified attributes such as name, credit quota, frequency, start and end timestamps, and a list of users to notify. It creates an instance of the `ResourceMonitor` class and configures its properties.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/resource_monitor.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresource_monitor = ResourceMonitor(\n    name=\"some_resource_monitor\",\n    credit_quota=1000,\n    frequency=\"DAILY\",\n    start_timestamp=\"2049-01-01 00:00\",\n    end_timestamp=\"2049-12-31 23:59\",\n    notify_users=[\"user1\", \"user2\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Install Titan Core from PyPi (MacOS, Linux)\nDESCRIPTION: These commands create a Python virtual environment, activate it, and install the `titan-core` package using pip. This is the recommended way to install Titan Core on MacOS and Linux systems.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npython -m pip install titan-core\n```\n\n----------------------------------------\n\nTITLE: Defining a TableStream in YAML\nDESCRIPTION: This YAML code snippet demonstrates how to define a TableStream object, specifying various attributes such as name, source table, owner, grant copying, start time using the 'at' parameter, start time using the 'before' parameter, append-only mode, initial row visibility, and a comment. It's typically used in configuration files for infrastructure-as-code tools that interact with Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/table_stream.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nstreams:\n  - name: some_stream\n    on_table: some_table\n    owner: SYSADMIN\n    copy_grants: true\n    at:\n      TIMESTAMP: \"2022-01-01 00:00:00\"\n    before:\n      STREAM: some_other_stream\n    append_only: false\n    show_initial_rows: true\n    comment: This is a sample stream.\n```\n\n----------------------------------------\n\nTITLE: Execute Titan CLI with Python Module Syntax\nDESCRIPTION: This command demonstrates an alternative way to run the Titan CLI using Python's module execution syntax. It allows for more control over the Python environment and avoids potential conflicts with system-wide installations.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython -m titan plan --config titan.yml\n```\n\n----------------------------------------\n\nTITLE: Adding a Schema to a Database by Object (Python)\nDESCRIPTION: This example demonstrates adding a schema to a database using a `Database` object reference.  A `Database` object is created, and then passed to the `Schema` during schema initialization, creating a direct object relationship between the database and the schema.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/database.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb = Database(name = \"my_test_db\")\nsch = Schema(\n    name = \"some_schema\",\n    database = db,\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Vars via CLI\nDESCRIPTION: Demonstrates how to pass values to Titan using the `--vars` flag in the CLI.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# Specify values as a key-value JSON string\ntitan plan --config titan.yml \\\n  --vars '{\"fruit\": \"banana\"}'\n```\n\n----------------------------------------\n\nTITLE: Database Scope - YAML\nDESCRIPTION: Illustrates the use of the `scope` parameter with a value of `DATABASE` in YAML, limiting Titan's scope to a specific database.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n-- raw.yml\nscope: DATABASE\ndatabase: RAW\n\nschemas:\n  - name: FINANCE\n  - name: LEGAL\n  - name: MARKETING\n\ntables:\n  - name: products\n    schema: FINANCE\n    columns:\n      - name: product\n        data_type: string\n```\n\n----------------------------------------\n\nTITLE: Defining GCS Storage Integration in YAML\nDESCRIPTION: Defines a GCS storage integration using YAML. It specifies the name, enabled status, allowed storage locations, and blocked storage locations, representing a configuration-as-code approach for managing Snowflake storage integrations. This YAML configuration needs to be processed and applied using a suitable deployment or management tool for Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/gcs_storage_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngcs_storage_integrations:\n  - name: some_gcs_storage_integration\n    enabled: true\n    storage_allowed_locations:\n      - 'gcs://bucket/path/'\n    storage_blocked_locations:\n      - 'gcs://bucket/blocked_path/'\n```\n\n----------------------------------------\n\nTITLE: Schema Scope - YAML\nDESCRIPTION: Illustrates the use of the `scope` parameter with a value of `SCHEMA` in YAML, limiting Titan's scope to a specific schema within a database.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n-- salesforce.yml\nscope: SCHEMA\ndatabase: DEV\nschema: SALESFORCE\n\ntables:\n  - name: products\n    columns:\n      - name: product\n        data_type: string\n\ntags:\n  - name: cost_center\n    allowed_values: [\"finance\", \"engineering\"]\n```\n\n----------------------------------------\n\nTITLE: Scope Combined with Vars - YAML\nDESCRIPTION: Shows an example of how to combine scope with vars in YAML.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n-- finance.yml\nscope: SCHEMA\ndatabase: \"ANALYTICS_{{ vars.env }}\"\nschema: FINANCE\n\ntables: ...\nviews: ...\nprocedures: ...\n```\n\n----------------------------------------\n\nTITLE: Service Configuration in YAML\nDESCRIPTION: This YAML snippet defines a Snowflake Service configuration, specifying parameters like the service name, compute pool, stage, and scaling options in a declarative format.  It illustrates how to define a service using a YAML configuration file, including external access integrations, auto-resume settings, and tags. Dependencies: YAML parser.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/service.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - name: some_service\n    compute_pool: some_compute_pool\n    stage: @tutorial_stage\n    yaml_file_stage_path: echo_spec.yaml\n    specification: FROM SPECIFICATION $$some_specification$$\n    external_access_integrations:\n      - some_integration\n    auto_resume: true\n    min_instances: 1\n    max_instances: 2\n    query_warehouse: some_warehouse\n    tags:\n      key: value\n    comment: This is a sample service.\n```\n\n----------------------------------------\n\nTITLE: Defining a StageStream in Python\nDESCRIPTION: This Python code defines a StageStream object with properties such as name, on_stage, owner, copy_grants, and comment. It uses a class constructor (presumably part of a larger framework or library) to instantiate the StageStream. The 'owner' defaults to 'SYSADMIN' if not provided, and 'copy_grants' determines whether grants are copied from the source stage.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/stage_stream.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstream = StageStream(\n    name=\"some_stream\",\n    on_stage=\"some_stage\",\n    owner=\"SYSADMIN\",\n    copy_grants=True,\n    comment=\"This is a sample stream.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Service Definition in Python\nDESCRIPTION: This Python code snippet defines a Snowflake Service object, specifying various parameters such as the service name, compute pool, stage, and scaling options.  It showcases how to configure a service programmatically using Python, including external access integrations, auto-resume settings, and tags. Dependencies: Snowflake Python Connector.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/service.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nservice = Service(\n    name=\"some_service\",\n    compute_pool=\"some_compute_pool\",\n    stage=\"@tutorial_stage\",\n    yaml_file_stage_path=\"echo_spec.yaml\",\n    specification=\"FROM SPECIFICATION $$some_specification$$\",\n    external_access_integrations=[\"some_integration\"],\n    auto_resume=True,\n    min_instances=1,\n    max_instances=2,\n    query_warehouse=\"some_warehouse\",\n    tags={\"key\": \"value\"},\n    comment=\"This is a sample service.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a StageStream in YAML\nDESCRIPTION: This YAML configuration defines a list of StageStream objects, each with properties such as name, on_stage, owner, copy_grants, and comment. This format is commonly used for declarative configuration.  The 'owner' field specifies the role that owns the stream, and 'copy_grants' indicates whether grants should be copied from the source stage.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/stage_stream.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstreams:\n  - name: some_stream\n    on_stage: some_stage\n    owner: SYSADMIN\n    copy_grants: true\n    comment: This is a sample stream.\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Event Table with YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a Snowflake Event Table configuration. It showcases the usage of fields such as name, cluster_by columns, data_retention_time_in_days, max_data_extension_time_in_days, change_tracking, default_ddl_collation, copy_grants, a comment, and tags for the event table.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/event_table.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nevent_tables:\n  - name: some_event_table\n    cluster_by:\n      - timestamp\n      - user_id\n    data_retention_time_in_days: 365\n    max_data_extension_time_in_days: 30\n    change_tracking: true\n    default_ddl_collation: utf8\n    copy_grants: true\n    comment: This is a sample event table.\n    tags:\n      department: analytics\n```\n\n----------------------------------------\n\nTITLE: Resource Monitor Definition in YAML\nDESCRIPTION: This YAML snippet shows how to configure a resource monitor using a declarative approach. The configuration includes the resource monitor's name, credit quota, frequency, start and end timestamps, and a list of users who should be notified when certain thresholds are reached. It's a representation of the resource monitor's properties using YAML syntax.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/resource_monitor.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresource_monitors:\n  - name: some_resource_monitor\n    credit_quota: 1000\n    frequency: DAILY\n    start_timestamp: \"2049-01-01 00:00\"\n    end_timestamp: \"2049-12-31 23:59\"\n    notify_users:\n      - user1\n      - user2\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordSecret in YAML for Snowflake\nDESCRIPTION: This YAML snippet defines a PasswordSecret with specified name, secret_type, username, password, comment, and owner. The 'secret_type' is explicitly set to 'PASSWORD'. It provides a declarative way to define secrets for Snowflake deployment or configuration.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/password_secret.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsecrets:\n  - name: some_secret\n    secret_type: PASSWORD\n    username: some_username\n    password: some_password\n    comment: some_comment\n    owner: SYSADMIN\n```\n\n----------------------------------------\n\nTITLE: Defining Snowservices OAuth Integration in YAML\nDESCRIPTION: This snippet shows how to define a Snowservices OAuth security integration in YAML.  The configuration includes the integration's name, status (enabled), and a comment for documentation purposes. This YAML configuration can be used with tools that provision Snowflake resources declaratively.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/snowservices_oauth_security_integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsnowservices_oauth:\n  - name: some_security_integration\n    enabled: true\n    comment: Integration for external OAuth services.\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordSecret in Python for Snowflake\nDESCRIPTION: This Python snippet demonstrates how to create a PasswordSecret object with specified name, username, password, comment, and owner. It requires the PasswordSecret class to be available in the current scope. It constructs a secret with provided credentials and metadata for use in Snowflake.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/password_secret.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsecret = PasswordSecret(\n    name=\"some_secret\",\n    username=\"some_username\",\n    password=\"some_password\",\n    comment=\"some_comment\",\n    owner=\"SYSADMIN\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a TableStream in Python\nDESCRIPTION: This Python code snippet demonstrates how to create a TableStream object, specifying various attributes like name, source table, owner, grant copying, start time using the 'at' parameter, start time using the 'before' parameter, append-only mode, initial row visibility, and a comment. It requires a library or framework that supports interacting with Snowflake and creating stream objects.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/table_stream.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nstream = TableStream(\n    name=\"some_stream\",\n    on_table=\"some_table\",\n    owner=\"SYSADMIN\",\n    copy_grants=True,\n    at={\"TIMESTAMP\": \"2022-01-01 00:00:00\"},\n    before={\"STREAM\": \"some_other_stream\"},\n    append_only=False,\n    show_initial_rows=True,\n    comment=\"This is a sample stream.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Snowflake Tag Definition in Python\nDESCRIPTION: This snippet shows how to define a Snowflake tag using the Python SDK, specifying the tag's name, allowed values, and a comment. It demonstrates how to create a `Tag` object with the specified attributes. There are no external dependencies other than the Snowflake SDK.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/tag.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntag = Tag(\n    name=\"cost_center\",\n    allowed_values=[\"finance\", \"engineering\", \"sales\"],\n    comment=\"This is a sample tag\",\n)\n```\n\n----------------------------------------\n\nTITLE: Define Aggregation Policy in Python\nDESCRIPTION: This Python snippet demonstrates how to define a Snowflake AggregationPolicy using a custom class. It sets the name, body (SQL expression for the constraint), and owner for the policy. Requires a class or function named `AggregationPolicy` to be defined elsewhere.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/aggregation_policy.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naggregation_policy = AggregationPolicy(\n    name=\"some_aggregation_policy\",\n    body=\"AGGREGATION_CONSTRAINT(MIN_GROUP_SIZE => 5)\",\n    owner=\"SYSADMIN\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON File Format in Snowflake using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a JSON file format within a Snowflake environment. It defines the properties of the file format, including its name, owner, compression type, date/time/timestamp formats, binary format, null value representation, file extension, and various boolean flags controlling data handling. This example sets properties similar to the Python example such as `name`, `owner`, `compression`, `date_format`, `time_format`, `timestamp_format`, `binary_format`, `trim_space`, `null_if`, `file_extension`, `enable_octal`, `allow_duplicate`, `strip_outer_array`, `strip_null_values`, `replace_invalid_characters`, `ignore_utf8_errors`, `skip_byte_order_mark`, and `comment`.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/json_file_format.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nfile_formats:\n  - name: some_json_file_format\n    owner: SYSADMIN\n    compression: AUTO\n    date_format: AUTO\n    time_format: AUTO\n    timestamp_format: AUTO\n    binary_format: HEX\n    trim_space: false\n    null_if:\n      - NULL\n    file_extension: json\n    enable_octal: false\n    allow_duplicate: false\n    strip_outer_array: false\n    strip_null_values: false\n    replace_invalid_characters: false\n    ignore_utf8_errors: false\n    skip_byte_order_mark: true\n    comment: This is a JSON file format.\n```\n\n----------------------------------------\n\nTITLE: Creating Snowservices OAuth Integration in Python\nDESCRIPTION: This snippet demonstrates how to create a Snowservices OAuth security integration in Snowflake using Python. It defines the integration's name, enables it, and adds a comment.  Requires the `SnowservicesOAuthSecurityIntegration` class from a relevant Snowflake integration library.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/snowservices_oauth_security_integration.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsnowservices_oauth = SnowservicesOAuthSecurityIntegration(\n    name=\"some_security_integration\",\n    enabled=True,\n    comment=\"Integration for external OAuth services.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Organizing Resources into Containers in Titan\nDESCRIPTION: This section describes how resources can be organized into containers that reflect their hierarchical relationships in Snowflake, such as a Database containing Schemas and Tables.  This reflects Snowflake's hierarchy, supporting clear resource organization and relationships within the Titan framework.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/working-with-resources.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Combining Snowflake Resources in Titan\nDESCRIPTION: This section details how multiple related Snowflake resources can be grouped into a coherent structure or configuration within the Titan framework. This is especially useful in complex setups where resources need to interact closely. This is typically done by nesting resources in containers or through more explicit resource dependency definitions.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/working-with-resources.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Defining Snowflake Compute Pool in YAML\nDESCRIPTION: This YAML snippet defines a Snowflake Compute Pool with various parameters including name, owner, node counts, instance family, and auto-suspend settings. The owner defaults to 'ACCOUNTADMIN'. This configuration can be used to provision a compute pool in a Snowflake environment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/compute_pool.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncompute_pools:\n  - name: some_compute_pool\n    owner: ACCOUNTADMIN\n    min_nodes: 2\n    max_nodes: 10\n    instance_family: CPU_X64_S\n    auto_resume: true\n    initially_suspended: false\n    auto_suspend_secs: 1800\n    comment: Example compute pool\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Image Repository in Python\nDESCRIPTION: This code snippet shows how to define a Snowflake ImageRepository using Python.  It initializes an `ImageRepository` object with a specified name. The `name` parameter is required.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/image_repository.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimage_repository = ImageRepository(\n    name=\"some_image_repository\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake Share in YAML\nDESCRIPTION: This code snippet illustrates how to define a Snowflake Share resource using YAML. It specifies the share's name and a comment within a YAML structure. This is a declarative approach to define the share.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/share.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nshares:\n  - name: some_share\n    comment: This is a snowflake share.\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake User in YAML\nDESCRIPTION: This snippet demonstrates how to define a Snowflake user using YAML format, specifying attributes like name, owner, email, and type. It presents a structured representation of user properties suitable for configuration files or data serialization.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/user.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n  - name: some_user\n    owner: USERADMIN\n    email: some.user@example.com\n    type: PERSON\n```\n\n----------------------------------------\n\nTITLE: Defining a Snowflake Sequence in YAML\nDESCRIPTION: This YAML configuration defines a Snowflake sequence named 'some_sequence' with a specified owner, start value, increment, and comment. This allows for declarative sequence definition, typically used in configuration-as-code scenarios.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/sequence.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsequences:\n  - name: some_sequence\n    owner: SYSADMIN\n    start: 100\n    increment: 10\n    comment: This is a sample sequence.\n```\n\n----------------------------------------\n\nTITLE: Defining Javascript UDF in YAML\nDESCRIPTION: This YAML code snippet illustrates how to define a Javascript UDF in Snowflake using a YAML configuration. It includes the function's name, return type, Javascript code, arguments, and a comment. This UDF also converts a string to uppercase.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/javascript_udf.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  - name: some_function\n    returns: STRING\n    as_: function(x) { return x.toUpperCase(); }\n    args:\n      - name: x\n        data_type: STRING\n    comment: Converts a string to uppercase\n```\n\n----------------------------------------\n\nTITLE: Configuring an API Integration in YAML\nDESCRIPTION: This YAML snippet provides an alternative way to define an API integration. It specifies the same parameters as the Python example, including name, API provider, AWS role ARN, allowed and blocked prefixes, API key, and a comment. This configuration is useful for declarative setup.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/api_integration.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napi_integrations:\n  - name: some_api_integration\n    api_provider: AWS_API_GATEWAY\n    api_aws_role_arn: \"arn:aws:iam::123456789012:role/MyRole\"\n    enabled: true\n    api_allowed_prefixes: [\"/prod/\", \"/dev/\"]\n    api_blocked_prefixes: [\"/test/\"]\n    api_key: \"ABCD1234\"\n    comment: \"Example API integration\"\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Schema in Python\nDESCRIPTION: This Python snippet demonstrates how to define a Snowflake schema using the Schema class. It configures various properties such as the schema name, transient status, managed access, data retention time, collation, tags, owner, and a descriptive comment. This configuration defines the behavior and metadata of the Snowflake schema.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/schema.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nschema = Schema(\n    name=\"some_schema\",\n    transient=True,\n    managed_access=True,\n    data_retention_time_in_days=7,\n    max_data_extension_time_in_days=28,\n    default_ddl_collation=\"utf8\",\n    tags={\"project\": \"analytics\"},\n    owner=\"SYSADMIN\",\n    comment=\"Schema for analytics project.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Hybrid Table in YAML\nDESCRIPTION: This code snippet demonstrates how to define a Snowflake Hybrid Table using YAML. It shows how to specify the table name, columns, owner, and comment.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/resources/hybrid_table.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhybrid_tables:\n  - name: some_hybrid_table\n    columns:\n      - name: col1\n        type: STRING\n    owner: SYSADMIN\n    comment: This is a hybrid table.\n```\n\n----------------------------------------\n\nTITLE: Export Snowflake Resources to YAML using Titan CLI\nDESCRIPTION: This command uses the `titan export` CLI command to generate a YAML configuration file (`titan.yml`) representing existing Snowflake resources (warehouse, grant, role).  The `--resource` flag specifies which resource types to export.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntitan export \\\n  --resource=warehouse,grant,role \\\n  --out=titan.yml\n```\n\n----------------------------------------\n\nTITLE: Schema Scope Reuse - YAML\nDESCRIPTION: Shows an example of re-using the same schema setup for multiple engineers.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n-- dev_schema.yml\nscope: SCHEMA\ndatabase: DEV\n\ntables: ...\nviews: ...\nprocedures: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Dependencies Manually in Titan\nDESCRIPTION: This snippet describes the manual registration of dependencies between resources using the `Resource.requires(...)` method. While Titan generally manages dependencies automatically, this method can be used to explicitly define dependencies in rare cases where automatic dependency resolution is insufficient or circular dependencies need to be avoided.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/working-with-resources.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Vars Defaults in Python\nDESCRIPTION: Demonstrates how to define a list of expected vars using the `vars_spec` parameter, specifying a `type` and optionally a `default` value.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom titan.blueprint import Blueprint\nfrom titan.resources import Database\n\n# Use the vars_spec parameter to define a list of expected vars. You must specify a `type`, you can optionally specify a `default`.\nBlueprint(\n  resources=[Database(name=\"db_{{ var.color }}_{{ var.fruit }}\")],\n  vars={\"color\": \"blue\"},\n  vars_spec=[\n    {\n      \"name\": \"color\",\n      \"type\": \"string\",\n    },\n    {\n      \"name\": \"fruit\",\n      \"type\": \"string\",\n      \"default\": \"apple\",\n    }\n\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Titan Core Python Example\nDESCRIPTION: This Python code snippet demonstrates how to use Titan Core to define and deploy Snowflake resources such as roles, warehouses, and grants. It configures resources using Python objects, establishes a connection to Snowflake, creates a Blueprint, plans the changes, prints the plan, and then applies the plan to the Snowflake account.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport snowflake.connector\n\nfrom titan.blueprint import Blueprint, print_plan\nfrom titan.resources import Grant, Role, Warehouse\n\n# Configure resources by instantiating Python objects.\n\nrole = Role(name=\"transformer\")\n\nwarehouse = Warehouse(\n    name=\"transforming\",\n    warehouse_size=\"large\",\n    auto_suspend=60,\n)\n\nusage_grant = Grant(priv=\"usage\", to=role, on=warehouse)\n\n# Titan compares your config to a Snowflake account. Create a Snowflake \n# connection to allow Titan to connect to your account.\n\nconnection_params = {\n    \"account\": os.environ[\"SNOWFLAKE_ACCOUNT\"],\n    \"user\": os.environ[\"SNOWFLAKE_USER\"],\n    \"password\": os.environ[\"SNOWFLAKE_PASSWORD\"],\n    \"role\": \"SYSADMIN\",\n}\nsession = snowflake.connector.connect(**connection_params)\n\n# Create a Blueprint and pass your resources into it. A Blueprint helps you\n# validate and deploy a set of resources.\n\nbp = Blueprint(resources=[\n    role,\n    warehouse,\n    usage_grant,\n])\n\n# Blueprint works like Terraform. Calling plan(...) will compare your config\n# to the state of your Snowflake account and return a list of changes.\n\nplan = bp.plan(session)\nprint_plan(plan) # =>\n\"\"\"\n» titan core\n» Plan: 4 to add, 0 to change, 0 to destroy.\n\n+ urn::ABCD123:warehouse/transforming {\n  + name                                = \"transforming\"\n  + owner                               = \"SYSADMIN\"\n  + warehouse_type                      = \"STANDARD\"\n  + warehouse_size                      = \"LARGE\"\n  ...\n}\n\n+ urn::ABCD123:role/transformer {\n  + name    = \"transformer\"\n  + owner   = \"USERADMIN\"\n  + tags    = None\n  + comment = None\n}\n\n+ urn::ABCD123:grant/TRANSFORMER?priv=USAGE&on=warehouse/TRANSFORMING {\n  + priv         = \"USAGE\"\n  + on           = \"transforming\"\n  + on_type      = \"WAREHOUSE\"\n  + to           = TRANSFORMER\n  ...\n}\n\"\"\"\n\n# Calling apply(...) will convert your plan into the right set of SQL commands\n# and run them against your Snowflake account.\nbp.apply(session, plan) # =>\n\"\"\"\n[TITAN_USER:SYSADMIN]  > USE SECONDARY ROLES ALL\n[TITAN_USER:SYSADMIN]  > CREATE WAREHOUSE TRANSFORMING warehouse_type = STANDARD ...\n[TITAN_USER:SYSADMIN]  > USE ROLE USERADMIN\n[TITAN_USER:USERADMIN] > CREATE ROLE TRANSFORMER\n[TITAN_USER:USERADMIN] > USE ROLE SYSADMIN\n[TITAN_USER:SYSADMIN]  > GRANT USAGE ON WAREHOUSE transforming TO TRANSFORMER\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Scope Combined with Vars - Shell\nDESCRIPTION: Shows example shell commands of how to combine scope with vars.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/blueprint.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ntitan apply --config finance.yml --vars='{\"env\": \"stage\"}'\ntitan apply --config finance.yml --vars='{\"env\": \"prod\"}'\n```\n\n----------------------------------------\n\nTITLE: Display Titan CLI Help Message\nDESCRIPTION: This command executes the `titan` command with the `--help` flag, displaying the CLI's help message. It lists available commands and options.\nSOURCE: https://github.com/titan-systems/titan/blob/main/docs/getting-started.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntitan --help\n```\n\n----------------------------------------\n\nTITLE: Titan CLI Help Message\nDESCRIPTION: This shell command executes the Titan CLI with the `--help` flag, displaying a help message outlining available commands and options.\nSOURCE: https://github.com/titan-systems/titan/blob/main/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntitan --help\n\n# Usage: titan [OPTIONS] COMMAND [ARGS]...\n# \n#   titan core helps you manage your Snowflake environment.\n# \n# Options:\n#   --help  Show this message and exit.\n# \n# Commands:\n#   apply    Apply a resource config to a Snowflake account\n#   connect  Test the connection to Snowflake\n#   export   Generate a resource config for existing Snowflake resources\n#   plan     Compare a resource config to the current state of Snowflake\n```"
  }
]