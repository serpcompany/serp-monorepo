[
  {
    "owner": "pixijs",
    "repo": "pixijs.com",
    "content": "TITLE: Setting Explicit Width and Height for PixiJS Sprites\nDESCRIPTION: This snippet demonstrates setting the width and height properties to define the sprite's size in pixels. Internally, these properties adjust the sprite's scale based on the texture's original dimensions, providing precise control over size independent of the texture's intrinsic resolution.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.width = 200; // Sets sprite width to 200 pixels\nsprite.height = 100; // Sets sprite height to 100 pixels\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rectangle with Graphics API - PixiJS/TypeScript\nDESCRIPTION: This snippet demonstrates the simplified method for drawing and filling a rectangle in the updated PixiJS Graphics API. It shows how to use chaining for brevity.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngraphics\n    .rect(50, 50, 100, 100)\n    .fill('blue');\n```\n\n----------------------------------------\n\nTITLE: Initializing Asynchronous PixiJS Application/Renderer - TypeScript/JavaScript\nDESCRIPTION: Demonstrates the new asynchronous initialization pattern for PixiJS v8 using `app.init()` or `autoDetectRenderer()`. This is required because WebGPU initialization is asynchronous and allows PixiJS to selectively load only the necessary rendering backend (WebGL or WebGPU) based on user capabilities.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, autoDetectRenderer } from \"pixi.js\";\n\nconst app = new Application();\n\n(async () => {\n  await app.init({\n    // application options\n  });\n\n  // or\n  const renderer = await autoDetectRenderer({}); // WebGL or WebGPU\n\n  // do pixi things\n})();\n```\n\n----------------------------------------\n\nTITLE: Loading Textures and Creating Sprites in PixiJS Using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates asynchronously loading an image texture with PixiJS's Assets loader, then using the loaded texture to create Sprite objects. It includes three ways to create sprites: passing a texture instance directly, passing texture as an options object, and creating a sprite from a texture cached by the loader using Sprite.from(). The snippet requires the PixiJS library and assumes the 'myTexture.png' asset is available on the server. The input is the texture name as a string, and the output is Sprite instances ready for use in the scene graph. This approach handles asynchronous loading and caching of textures efficiently, permitting reuse and optimal performance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/textures.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst texture = await Assets.load('myTexture.png');\n\n// pass a texture explicitly\nconst sprite = new Sprite(texture);\n// as options\nconst sprite2 = new Sprite({texture});\n// from the cache as the texture is loaded\nconst sprite3 = Sprite.from('myTexture.png')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Populating PixiJS v8 ParticleContainer in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a ParticleContainer using PixiJS v8's API, emphasizing setting dynamic properties to optimize rendering speed. It includes importing necessary classes, configuring the container to treat only position as dynamic, loading a shared texture, and efficiently adding 100,000 particles with randomized positions. The code finally shows adding the container to the PixiJS application stage. Dependencies include PixiJS v8's ParticleContainer, Particle, and Texture classes, and a pre-existing PixiJS application instance. Inputs are particle texture paths and count, with expected output of a highly performant particle system on a WebGL stage.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-10-03-pixi-v8-particle-container.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ParticleContainer, Particle, Texture } from 'pixi.js';\n\n// Create a particle container with default options\nconst container = new ParticleContainer({\n    // this is the default, but we show it here for clarity\n    dynamicProperties: {\n        position: true,  // Allow dynamic position changes (default)\n        scale: false,    // Static scale for extra performance\n        rotation: false, // Static rotation\n        color: false     // Static color\n    }\n});\n\n// Add particles\nconst texture = Texture.from('path/to/bunny.png');\n\nfor (let i = 0; i < 100000; ++i) {\n    let particle = new Particle({\n        texture,\n        x: Math.random() * 800,\n        y: Math.random() * 600,\n    });\n\n    container.addParticle(particle);\n}\n\n// Add container to the Pixi stage\napp.stage.addChild(container);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Initialization of PixiJS Application in TypeScript\nDESCRIPTION: Demonstrates the updated async initialization pattern required for PixiJS v8 applications. It shows creating a new Application instance, then calling asynchronously the init method with optional ApplicationOptions. This pattern is required due to new renderer technologies such as WebGPU, and replaces the previous synchronous constructor initialization. The example uses an immediately-invoked async function to await initialization before proceeding.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Application } from 'pixi.js';\n\nconst app = new Application();\n\n(async () => {\n    await app.init({\n        // application options\n    });\n\n    // do pixi things\n})()\n```\n\n----------------------------------------\n\nTITLE: Adding and Loading Multiple Assets Simultaneously with PixiJS Assets in JavaScript\nDESCRIPTION: Illustrates adding multiple assets to the cache with `PIXI.Assets.add(...)` and then loading them simultaneously using `PIXI.Assets.load(...)`, enabling parallel asynchronous loading. Inputs are keys referencing cached assets; output is a resolved promise containing all requested assets. This pattern improves efficiency when working with groups of assets.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/assets.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage (inside iframe sample, no direct snippet provided in input)\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS v8 Modules - TypeScript/JavaScript\nDESCRIPTION: Explains the simplified import structure in PixiJS v8, moving from scoped packages (`@pixi/*`) to a single `pixi.js` package import. This change improves tree-shaking during compilation by only including necessary modules, reducing bundle size.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sprite } from \"@pixi/sprite\";\nimport { Graphic } from \"@pixi/graphics\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sprite, Graphic } from \"pixi.js\";\n```\n\n----------------------------------------\n\nTITLE: Initialize PixiJS Application and Add to DOM (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a new PixiJS application, initialize it asynchronously with specified options (background color and resizing to window), and append its canvas element to the document body. It highlights the changes introduced in PixiJS v8 regarding application initialization using the `init` method with an object parameter and awaiting its completion. The code uses an Application instance from PixiJS, implicitly assuming PixiJS is already loaded as a dependency. The `resizeTo` property is used to have the canvas automatically resize to the window size.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/gettingStarted/step1-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = new Application();\n\nawait app.init({ background: '#1099bb', resizeTo: window });\ndocument.body.appendChild(app.canvas);\n```\n\n----------------------------------------\n\nTITLE: Preloading Assets using PixiJS Assets\nDESCRIPTION: This code uses the PixiJS Assets class to preload various assets required for the SpineBoy Adventure. It loads Spine skeleton data, atlas, and several images for the scene's background and platform. The `Assets.load()` function takes an array of objects, each specifying an alias and source URL for an asset. This preloading ensures all the necessary resources are available before the game starts rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step1/step1-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Assets.load([\n    {\n        alias: 'spineSkeleton',\n        src: 'https://raw.githubusercontent.com/pixijs/spine-v8/main/examples/assets/spineboy-pro.skel',\n    },\n    {\n        alias: 'spineAtlas',\n        src: 'https://raw.githubusercontent.com/pixijs/spine-v8/main/examples/assets/spineboy-pma.atlas',\n    },\n    {\n        alias: 'sky',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png',\n    },\n    {\n        alias: 'background',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/background.png',\n    },\n    {\n        alias: 'midground',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png',\n    },\n    {\n        alias: 'platform',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/platform.png',\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Loading Single Asset with Promises in PixiJS\nDESCRIPTION: Demonstrates how to initialize a PixiJS application, load a single texture asset using `Assets.load` which returns a Promise, and then use the resolved texture to create and display a Sprite on the stage when the Promise resolves.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Application, Assets, Sprite } from 'pixi.js';\n\n// Create a new application\nconst app = new Application();\n\n// Initialize the application\nawait app.init({ background: '#1099bb', resizeTo: window });\n\n// Append the application canvas to the document body\ndocument.body.appendChild(app.canvas);\n\n// Start loading right away and create a promise\nconst texturePromise = Assets.load('https://pixijs.com/assets/bunny.png');\n\n// When the promise resolves, we have the texture!\ntexturePromise.then((resolvedTexture) =>\n{\n    // create a new Sprite from the resolved loaded Texture\n    const bunny = Sprite.from(resolvedTexture);\n\n    // center the sprite's anchor point\n    bunny.anchor.set(0.5);\n\n    // move the sprite to the center of the screen\n    bunny.x = app.screen.width / 2;\n    bunny.y = app.screen.height / 2;\n\n    app.stage.addChild(bunny);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading an Image and Creating a PixiJS Sprite (JavaScript)\nDESCRIPTION: Creates a PixiJS Sprite object by asynchronously loading an image from the specified URL using the `PIXI.Sprite.from()` helper method. This simplifies the process of loading and displaying an image.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v7.0.0/gettingStarted/step2-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Magically load the PNG asynchronously\nconst bunny = PIXI.Sprite.from('https://pixijs.com/assets/bunny.png')\n```\n\n----------------------------------------\n\nTITLE: Complete Basic PixiJS Application in HTML/JavaScript\nDESCRIPTION: This code snippet presents a full HTML document embedding a basic PixiJS application. It loads the PixiJS library (v7.4.2) from a CDN, creates a PixiJS application instance with specified dimensions, appends its view (canvas element) to the document body, loads a sprite from 'sample.png', adds the sprite to the application's stage, and uses the `app.ticker` to continuously update the sprite's horizontal position, creating a simple back-and-forth animation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <script src=\"https://pixijs.download/v7.4.2/pixi.min.js\"></script>\n  </head>\n  <body>\n    <script>\n      // Create the application helper and add its render target to the page\n      let app = new PIXI.Application({ width: 640, height: 360 });\n      document.body.appendChild(app.view);\n\n      // Create the sprite and add it to the stage\n      let sprite = PIXI.Sprite.from('sample.png');\n      app.stage.addChild(sprite);\n\n      // Add a ticker callback to move the sprite back and forth\n      let elapsed = 0.0;\n      app.ticker.add((delta) => {\n        elapsed += delta;\n        sprite.x = 100.0 + Math.cos(elapsed/50.0) * 100.0;\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Preloading Assets in PixiJS\nDESCRIPTION: This snippet preloads image assets required for the fish pond project. It defines an array of asset objects, each specifying an alias and source URL.  The `Assets.load()` function is used to load the assets, and the aliases allow for easier referencing of the textures later in the program.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step1/step1-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function preload()\n{\n    const assets = [\n        { alias: 'background', src: 'https://pixijs.com/assets/tutorials/fish-pond/pond_background.jpg' },\n        { alias: 'fish1', src: 'https://pixijs.com/assets/tutorials/fish-pond/fish1.png' },\n        { alias: 'fish2', src: 'https://pixijs.com/assets/tutorials/fish-pond/fish2.png' },\n        { alias: 'fish3', src: 'https://pixijs.com/assets/tutorials/fish-pond/fish3.png' },\n        { alias: 'fish4', src: 'https://pixijs.com/assets/tutorials/fish-pond/fish4.png' },\n        { alias: 'fish5', src: 'https://pixijs.com/assets/tutorials/fish-pond/fish5.png' },\n        { alias: 'overlay', src: 'https://pixijs.com/assets/tutorials/fish-pond/wave_overlay.png' },\n        { alias: 'displacement', src: 'https://pixijs.com/assets/tutorials/fish-pond/displacement_map.png' },\n    ];\n    await Assets.load(assets);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Assets with a Manifest JSON in JavaScript\nDESCRIPTION: Demonstrates initializing `PIXI.Assets` with an asset manifest by calling `PIXI.Assets.init(...)` with either a manifest object or a URL string. This action configures the asset loading system with structured bundles and asset keys to manage loading groups efficiently. It should only be called once per application lifecycle. Input is a manifest JSON or path, and there is no direct output except setup within PIXI.Assets.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/assets.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nPIXI.Assets.init({manifest: \"path/manifest.json\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing Assets with Manifest in PixiJS\nDESCRIPTION: Shows how to initialize the PixiJS Assets system by providing a manifest file path or object using `Assets.init`. This is the recommended way to manage complex asset structures and bundles, typically done once at the start of the application.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nAssets.init({manifest: \"path/manifest.json\"});\n```\n\n----------------------------------------\n\nTITLE: Enabling Interaction and Handling Pointer Events in PixiJS\nDESCRIPTION: Demonstrates how to make a PixiJS Sprite interactive and respond to pointerdown events. It sets the `eventMode` property to 'static' to enable interaction and uses the `on` method to attach an event listener that triggers an alert when the sprite is clicked or tapped.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/interaction.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet sprite = Sprite.from('/some/texture.png');\nsprite.on('pointerdown', (event) => { alert('clicked!'); });\nsprite.eventMode = 'static';\n```\n\n----------------------------------------\n\nTITLE: Loading Fonts with Assets in PixiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to load font files asynchronously using PixiJS's Assets module, and then create a Text object using the loaded font. It ensures that the font is available in the browser before rendering text, emphasizing dependency management and style configuration for text rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/text.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait Assets.load('short-stack.woff2');\n\nconst text = new Text({\n  text: 'hello',\n  style: {\n    fontFamily: 'short-stack'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a PixiJS Application Instance\nDESCRIPTION: JavaScript code that initializes a new PixiJS application with specified dimensions. Uses the Application helper class to simplify setup.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"module\">\n  const app = new PIXI.Application();\n  await app.init({ width: 640, height: 360 });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using PixiJS Components with React\nDESCRIPTION: This JSX snippet demonstrates the use of PixiJS components within a React application using the new pragma. It imports necessary components like `Application` and `Sprite` from `@pixi/react` and `pixi.js` respectively. The code defines a component that renders a sprite and a graphics object with specific properties.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2025-03-26-pixi-react-v8-launches.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Application } from '@pixi/react'\nimport { Sprite } from 'pixi.js'\n\nfunction MyComponent() {\n  const draw = useCallback(graphics => {\n    graphics.setFillStyle({ color: 'red' })\n    graphics.rect(0, 0, 25, 25)\n  }, [])\n\n  const texture = useMemo(() => Assets.get('bunny.png'), [])\n\n  return (\n    <Application>\n      <pixiSprite x={100} y={100} texture={texture} />\n      <pixiGraphics x={0} y={0} draw={graphics => {\n        graphics.setFillStyle({ color: 'red' })\n        graphics.rect(0, 0, 25, 25)\n      }} />\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Anchor and Positioning Sprite in PixiJS\nDESCRIPTION: This code sets the anchor point of the Sprite to the center (0.5, 0.5) and then positions the Sprite at the center of the screen.  Requires PixiJS and a Sprite object. The input is a Sprite object, and it modifies its properties such as `anchor` and `x`,`y` based on the screen size, resulting in the Sprite centered on the screen.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/gettingStarted/step2-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbunny.anchor.set(0.5);\n\nbunny.x = app.screen.width / 2;\nbunny.y = app.screen.height / 2;\n```\n\n----------------------------------------\n\nTITLE: Creating PIXI.Sprite from Image\nDESCRIPTION: Loads an image asset asynchronously and creates a PIXI.Sprite object from it. The `PIXI.Sprite.from()` helper method simplifies this process, automatically handling the loading and texture creation from a given image URL or path.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Magically load the PNG asynchronously\nlet sprite = PIXI.Sprite.from('sample.png');\n```\n\n----------------------------------------\n\nTITLE: Loading a Texture Asset with PixiJS Assets using Promises in JavaScript\nDESCRIPTION: Demonstrates how to load a single texture asset using the PIXI.Assets.load method, which returns a promise resolving to the loaded resource. It illustrates the caching behavior by showing that repeated loads of the same URL return the identical promise instance, avoiding redundant downloads. Dependencies include the @pixi/assets package. The input is a string URL of the asset, and the output is a promise resolving to a usable PixiJS texture.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/assets.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npromise1 = PIXI.Assets.load('bunny.png')\npromise2 = PIXI.Assets.load('bunny.png')\n\n//promise1 === promise2\n```\n\n----------------------------------------\n\nTITLE: Creating a Fish Sprite Container in PIXI.js (JavaScript)\nDESCRIPTION: This code initializes a new PIXI.Container to hold all fish sprites and adds it to the main stage. The container is essential for grouping and managing fish as a single entity and maintaining scene organization. Outputs are the creation of the fishContainer variable and its hierarchical addition to the PIXI application stage; input requirement is that the PIXI Application ('app') must already be initialized.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step3/step3-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fishContainer = new Container();\n\napp.stage.addChild(fishContainer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation with Ticker\nDESCRIPTION: Sets up an update loop using the PIXI.Application's ticker. A callback function is added to the ticker, which is executed every frame. The `delta` parameter provides the time elapsed since the last frame, allowing for smooth, time-based animations, such as updating a sprite's position.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a variable to count up the seconds our demo has been running\nlet elapsed = 0.0;\n// Tell our application's ticker to run a new callback every frame, passing\n// in the amount of time that has passed since the last tick\napp.ticker.add((delta) => {\n  // Add the time to our total elapsed time\n  elapsed += delta;\n  // Update the sprite's X position based on the cosine of our elapsed time.  We divide\n  // by 50 to slow the animation down a bit...\n  sprite.x = 100.0 + Math.cos(elapsed/50.0) * 100.0;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Masking with PixiJS Container\nDESCRIPTION: This snippet demonstrates how to use a PixiJS Container and a Graphics object to implement content masking. It initializes a PixiJS application, creates a frame, defines a rectangular mask shape, sets up a Container with the mask, adds textual content to the container, and animates the text vertically using the application's ticker to show the masking effect.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/containers.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create the application helper and add its render target to the page\nlet app = new Application({ width: 640, height: 360 });\ndocument.body.appendChild(app.view);\n\n// Create window frame\nlet frame = new Graphics({\n  x:320 - 104,\n  y:180 - 104\n})\n.rect(0, 0, 208, 208)\n.fill(0x666666)\n.stroke({ color: 0xffffff, width: 4, alignment: 0 })\n\napp.stage.addChild(frame);\n\n// Create a graphics object to define our mask\nlet mask = new Graphics()\n// Add the rectangular area to show\n .rect(0,0,200,200)\n .fill(0xffffff);\n\n// Add container that will hold our masked content\nlet maskContainer = new Container();\n// Set the mask to use our graphics object from above\nmaskContainer.mask = mask;\n// Add the mask as a child, so that the mask is positioned relative to its parent\nmaskContainer.addChild(mask);\n// Offset by the window's frame width\nmaskContainer.position.set(4,4);\n// And add the container to the window!\nframe.addChild(maskContainer);\n\n// Create contents for the masked container\nlet text = new Text({\n  text:'This text will scroll up and be masked, so you can see how masking works.  Lorem ipsum and all that.\\n\\n' +\n  'You can put anything in the container and it will be masked!',\n  style:{\n    fontSize: 24,\n    fill: 0x1010ff,\n    wordWrap: true,\n    wordWrapWidth: 180\n  },\n  x:10\n});\n\nmaskContainer.addChild(text);\n\n// Add a ticker callback to scroll the text up and down\nlet elapsed = 0.0;\napp.ticker.add((ticker) => {\n  // Update the text's y coordinate to scroll it\n  elapsed += ticker.deltaTime;\n  text.y = 10 + -100.0 + Math.cos(elapsed/50.0) * 100.0;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up a complete PixiJS project with HTML and JavaScript\nDESCRIPTION: A complete minimal PixiJS project that initializes the application, loads a sprite, and animates it using the ticker. The code demonstrates the core application setup, asset loading, sprite creation, and animation implementation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <script src=\"https://pixijs.download/release/pixi.min.js\"></script>\n  </head>\n  <body>\n    <script type=\"module\">\n      // Create the application helper and add its render target to the page\n      const app = new PIXI.Application();\n      await app.init({ width: 640, height: 360 })\n      document.body.appendChild(app.canvas);\n\n      // Create the sprite and add it to the stage\n      await PIXI.Assets.load('sample.png');\n      let sprite = PIXI.Sprite.from('sample.png');\n      app.stage.addChild(sprite);\n\n      // Add a ticker callback to move the sprite back and forth\n      let elapsed = 0.0;\n      app.ticker.add((ticker) => {\n        elapsed += ticker.deltaTime;\n        sprite.x = 100.0 + Math.cos(elapsed/50.0) * 100.0;\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Texture Fill with Local Space in PixiJS\nDESCRIPTION: This snippet shows how to fill multiple shapes (rectangle, circle, star, round rectangle) with a texture, using the default 'local' texture space.  The `textureSpace` property specifies that the texture coordinates are mapped relative to each shape's dimensions and position.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst shapes = new PIXI.Graphics()\n    .rect(50,50,100, 100)\n    .circle(250,100,50)\n    .star(400,100,6,60,40)\n    .roundRect(500,50,100,100,10)\n    .fill({\n        texture,\n        textureSpace:'local' // default!\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Sprite to PixiJS Stage\nDESCRIPTION: Adds a created PIXI.Sprite object as a child to the application's root stage (`app.stage`). The stage is a Container that serves as the root of the scene graph; any display object added to the stage (or its children) will be rendered.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.stage.addChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Adding an Animation Update Callback with PixiJS Ticker in JavaScript\nDESCRIPTION: This code snippet shows how to register an update callback with the PixiJS application ticker to animate scene objects. The callback receives a delta parameter representing frame time scaling, which is used here to incrementally rotate the 'bunny' sprite in each frame for smooth, time-adjusted animation. Requires PixiJS to be initialized with an application object named 'app' and a sprite named 'bunny'; further dependencies include a running render loop typically managed by PixiJS. Inputs: none directly—context requires previously defined scene objects. Output: continuous animation applied to the specified sprite on every animation frame. Limitations: relies on referenced variables existing and appropriate PixiJS setup.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v7.0.0/gettingStarted/step3-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Listen for animate update\napp.ticker.add((delta) => {\n    // just for fun, let's rotate mr rabbit a little\n    // delta is 1 if running at 100% performance\n    // creates frame-independent transformation\n    bunny.rotation += 0.1 * delta;\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from updateTransform to onRender in PixiJS\nDESCRIPTION: Shows how to migrate from the removed updateTransform method to the new onRender pattern for custom per-frame logic in sprites.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nclass MySprite extends Sprite {\n    constructor() {\n        super();\n        this.updateTransform();\n    }\n\n    updateTransform() {\n        super.updateTransform();\n        // do custom logic\n    }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nclass MySprite extends Sprite {\n    constructor() {\n        super();\n        this.onRender = this._onRender.bind(this);\n    }\n\n    _onRender() {\n        // do custom logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with PixiJS Assets for Asset Loading in JavaScript\nDESCRIPTION: Shows how to define an async function to load an asset using `await PIXI.Assets.load(...)`, which pauses execution until the asset's promise resolves, simplifying asynchronous code flows. The texture variable holds the actual resolved texture instead of a promise. Requires ES2017+ support or transpilation. The input is an asset URL string, and the output is the loaded PixiJS texture object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/assets.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function test() {\n    // ...\n}\n\nconst texture = await PIXI.Assets.load('examples/assets/bunny.png');\n```\n\n----------------------------------------\n\nTITLE: Configuring EventSystem for Performance in PixiJS - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a PixiJS Application with custom event system settings to improve performance, especially in large scenes. Dependencies include the PixiJS library and its Application class. The configuration options, such as setting eventMode to 'passive' and selectively enabling or disabling global move and other event features, reduce unnecessary event handling. Expected input is an options object for Application; output is an initialized PixiJS Application instance, with optimizations applied. Avoid setting essential interactive features to false unless required, as it may limit user interaction.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/interaction.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst app = new Application({\n    eventMode: 'passive',\n    eventFeatures: {\n        move: true,\n        /** disables the global move events which can be very expensive in large scenes */\n        globalMove: false,\n        click: true,\n        wheel: true,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Assets in PixiJS v7\nDESCRIPTION: Example of loading an asset using the new Promise-based Assets API in PixiJS v7, which replaces the legacy Loader.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Assets, Sprite } from 'pixi.js';\n\nconst texture = await Assets.load('path/to/assets/background.jpg');\nconst image = Sprite.from(texture);\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Sprite with Spritesheet in PixiJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create an animated sprite using a spritesheet in PixiJS. It defines the spritesheet data, creates a Spritesheet object, parses it asynchronously, creates an AnimatedSprite, sets its animation speed, plays the animation on a loop, and adds it to the stage for rendering. It requires PixiJS library to be installed.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprite-sheets.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// Create object to store sprite sheet data\nconst atlasData = {\n\tframes: {\n\t\tenemy1: {\n\t\t\tframe: { x: 0, y:0, w:32, h:32 },\n\t\t\tsourceSize: { w: 32, h: 32 },\n\t\t\tspriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n\t\t},\n\t\tenemy2: {\n\t\t\tframe: { x: 32, y:0, w:32, h:32 },\n\t\t\tsourceSize: { w: 32, h: 32 },\n\t\t\tspriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n\t\t},\n\t},\n\tmeta: {\n\t\timage: 'images/spritesheet.png',\n\t\tformat: 'RGBA8888',\n\t\tsize: { w: 128, h: 32 },\n\t\tscale: 1\n\t},\n\tanimations: {\n\t\tenemy: ['enemy1','enemy2'] //array of frames by name\n\t}\n}\n\n\n// Create the SpriteSheet from data and image\nconst spritesheet = new Spritesheet(\n\tTexture.from(atlasData.meta.image),\n\tatlasData\n);\n\n// Generate all the Textures asynchronously\nawait spritesheet.parse();\n\n// spritesheet is ready to use!\nconst anim = new AnimatedSprite(spritesheet.animations.enemy);\n\n// set the animation speed\nanim.animationSpeed = 0.1666;\n// play the animation on a loop\nanim.play();\n// add it to the stage to render\napp.stage.addChild(anim);\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading Asset Bundles with PixiJS Assets in JavaScript\nDESCRIPTION: Shows how to group related assets into bundles using `PIXI.Assets.addBundle(...)` and load all assets in the bundle simultaneously with `PIXI.Assets.loadBundle(...)`. This modular approach allows better organization and targeted loading of assets by game screen or feature. Inputs are bundle name and an object mapping keys to asset URLs. Output is a promise resolving to an object of loaded assets keyed by their bundle names.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/assets.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nPIXI.Assets.addBundle('animals', {\n  bunny: 'bunny.png',\n  chicken: 'chicken.png',\n  thumper: 'thumper.png',\n});\n\nconst assets = await PIXI.Assets.loadBundle('animals');\n```\n\n----------------------------------------\n\nTITLE: Adding Children to Display Objects - PixiJS TypeScript\nDESCRIPTION: Demonstrates the change in PixiJS v8 where only `Container` objects can have children. The old method of adding children directly to leaf nodes like `Sprite` is deprecated; the new method requires wrapping leaf nodes within a `Container` to manage hierarchy.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sprite = new Sprite();\nconst spriteChild = new Sprite();\nsprite.addChild(spriteChild);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst container = new Container();\nconst sprite = new Sprite();\nconst spriteChild = new Sprite();\n\ncontainer.addChild(sprite);\ncontainer.addChild(spriteChild);\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Project with npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) `create` command (a shorthand for `npm init`) to execute the `create-pixi.js` package, specifically requesting the latest available version (`@latest`). Running this command in a terminal initiates the interactive PixiJS project scaffolding process provided by the `PixiJS Create` CLI tool, prompting the user for configuration choices like template type (Bundler or Creation).\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-12-06-pixi-create.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create pixi.js@latest\n```\n\n----------------------------------------\n\nTITLE: Drawing Randomized Stars with PixiJS Graphics API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the PixiJS Graphics API in JavaScript to draw 20 five-pointed stars at randomized positions within the visible area of the application. It initializes a single Graphics object, then iteratively creates stars with randomized positions, radii (between 2 and 5 units), and rotations. Each star is filled with a semi-transparent yellow color, where the opacity is proportional to the star's radius. The final graphics object containing all stars is added to the application's stage. Dependencies: PixiJS library and an initialized 'app' object with 'screen.width', 'screen.height', and 'stage' properties.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step2/step2-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst starCount = 20;\nconst graphics = new Graphics();\n\nfor (let index = 0; index < starCount; index++)\n{\n    const x = (index * 0.78695 * app.screen.width) % app.screen.width;\n    const y = (index * 0.9382 * app.screen.height) % app.screen.height;\n    const radius = 2 + Math.random() * 3;\n    const rotation = Math.random() * Math.PI * 2;\n\n    graphics.star(x, y, 5, radius, 0, rotation).fill({ color: 0xffdf00, alpha: radius / 5 });\n}\n\napp.stage.addChild(graphics);\n```\n\n----------------------------------------\n\nTITLE: Rotating Textures Using PixiJS in JavaScript\nDESCRIPTION: This code snippet demonstrates how to rotate textures with PixiJS, utilizing the official NPM package as a dependency. It showcases the loading and manipulation of a texture on a 2D sprite, applying rotation through the PixiJS API. To execute, ensure 'pixi.js' is included as a dependency and a browser environment with canvas support is available. The input is typically an image asset, and the output is the rendered, rotated sprite displayed on the canvas. Limitations include relying on browser-based rendering and requiring correct asset pathing.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/textures/texture-rotate.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as PIXI from 'pixi.js';\n\n// Create a PixiJS application\nconst app = new PIXI.Application({ width: 800, height: 600 });\ndocument.body.appendChild(app.view);\n\n// Load the texture\nconst texture = PIXI.Texture.from('path/to/image.png');\n\n// Create a sprite from the texture\nconst sprite = new PIXI.Sprite(texture);\n\n// Set the anchor to the center of the sprite\nsprite.anchor.set(0.5);\n\n// Set initial sprite position\nsprite.x = app.screen.width / 2;\nsprite.y = app.screen.height / 2;\n\n// Add the sprite to the stage\napp.stage.addChild(sprite);\n\n// Animate sprite rotation\napp.ticker.add(() => {\n  sprite.rotation += 0.01;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Application and Adding Canvas\nDESCRIPTION: This snippet initializes a PixiJS application, sets its background color, and resizes it to fit the window. It then appends the application's canvas element to the document's body.  It uses the `app.init()` function (likely a custom or helper function) for initialization and asset loading.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step1/step1-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function setup()\n{\n    await app.init({ background: '#1099bb', resizeTo: window });\n    document.body.appendChild(app.canvas);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the PixiJS Canvas to the DOM\nDESCRIPTION: JavaScript code that appends the canvas element created by the PixiJS application to the document body, making it visible on the page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.appendChild(app.canvas);\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Sprite to Stage in PixiJS\nDESCRIPTION: This snippet creates a Sprite object using the previously loaded texture. It then adds this Sprite to the stage, which is the root container in the scene graph.  Requires PixiJS and a loaded texture object. The input is a texture object and the output is the addition of a Sprite to the stage for rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/gettingStarted/step2-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bunny = new Sprite(texture);\n\napp.stage.addChild(bunny);\n```\n\n----------------------------------------\n\nTITLE: Loading Texture with Assets in PixiJS\nDESCRIPTION: This snippet uses the `Assets.load` function to asynchronously load an image from a URL. It waits for the image to load and returns a texture object which can then be used to create a Sprite.  Requires the PixiJS library.  The input is the image URL and the output is a texture object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/gettingStarted/step2-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst texture = await Assets.load('https://pixijs.com/assets/bunny.png');\n```\n\n----------------------------------------\n\nTITLE: Example Assets Manifest JSON Structure\nDESCRIPTION: Provides a JSON example of an asset manifest file. This structure defines bundles, each containing a list of assets with aliases and source URLs. This format is commonly used to manage large numbers of assets and bundles.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"bundles\":[\n      {\n         \"name\":\"load-screen\",\n         \"assets\":[\n            {\n               \"alias\":\"background\",\n               \"src\":\"sunset.png\"\n            },\n            {\n               \"alias\":\"bar\",\n               \"src\":\"load-bar.{png,webp}\"\n            }\n         ]\n      },\n      {\n         \"name\":\"game-screen\",\n         \"assets\":[\n            {\n               \"alias\":\"character\",\n               \"src\":\"robot.png\"\n            },\n            {\n               \"alias\":\"enemy\",\n               \"src\":\"bad-guy.png\"\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Render Order and Hierarchy in PixiJS (JavaScript)\nDESCRIPTION: This snippet illustrates the drawing order in a PixiJS scene graph using labeled colored blocks and nested containers. It defines objects A, B, C, and D arranged in a specific hierarchy, where B and C are children of A, and each object's visibility animates in order using the ticker. Dependencies include '@pixi/app', '@pixi/text', '@pixi/sprite', '@pixi/container', and '@pixi/core'. Inputs are positions, letters, and colors for each block. The output is a stepwise visualization of the scene graph demonstrating render order and parent-child relationships.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/scene-graph.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create the application helper and add its render target to the page\nconst app = new Application();\nawait app.init({ width: 640, height: 360 })\ndocument.body.appendChild(app.canvas);\n\n// Label showing scene graph hierarchy\nconst label = new Text({\n  text:'Scene Graph:\\n\\napp.stage\\n  ┗ A\\n     ┗ B\\n     ┗ C\\n  ┗ D',\n  style:{fill: '#ffffff'},\n  position: {x: 300, y: 100}\n});\n\napp.stage.addChild(label);\n\n// Helper function to create a block of color with a letter\nconst letters = [];\nfunction addLetter(letter, parent, color, pos) {\n  const bg = new Sprite(Texture.WHITE);\n  bg.width = 100;\n  bg.height = 100;\n  bg.tint = color;\n\n  const text = new Text({\n    text:letter,\n    style:{fill: \"#ffffff\"}\n  });\n\n  text.anchor.set(0.5);\n  text.position = {x: 50, y: 50};\n\n  const container = new Container();\n  container.position = pos;\n  container.visible = false;\n  container.addChild(bg, text);\n  parent.addChild(container);\n\n  letters.push(container);\n  return container;\n}\n\n// Define 4 letters\nlet a = addLetter('A', app.stage, 0xff0000, {x: 100, y: 100});\nlet b = addLetter('B', a,         0x00ff00, {x: 20,  y: 20});\nlet c = addLetter('C', a,         0x0000ff, {x: 20,  y: 40});\nlet d = addLetter('D', app.stage, 0xff8800, {x: 140, y: 100});\n\n// Display them over time, in order\nlet elapsed = 0.0;\napp.ticker.add((ticker) => {\n  elapsed += ticker.deltaTime / 60.0;\n  if (elapsed >= letters.length) { elapsed = 0.0; }\n  for (let i = 0; i < letters.length; i ++) {\n    letters[i].visible = elapsed >= i;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PIXI.Application Instance\nDESCRIPTION: Initializes a new PIXI.Application object in JavaScript. The Application helper class simplifies setup by creating the renderer, stage, and ticker with basic configurations, such as specifying the desired width and height for the rendering canvas.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet app = new PIXI.Application({ width: 640, height: 360 });\n```\n\n----------------------------------------\n\nTITLE: Animating Sprite Hierarchy in PixiJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize a PixiJS application, create a container centered on the screen, load a texture, and build a nested sprite hierarchy where each sprite is a child of the previous one. It then animates their scale, alpha, rotation, and position over time using the app's ticker. Dependencies include '@pixi/app', '@pixi/sprite', '@pixi/container', '@pixi/assets'. Input parameters are canvas dimensions and texture asset paths; outputs are animated sprites rendered in a parent-child chain. All sprite properties set are relative and cumulative due to the hierarchy.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/scene-graph.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create the application helper and add its render target to the page\nconst app = new Application();\nawait app.init({ width: 640, height: 360 })\ndocument.body.appendChild(app.canvas);\n\n// Add a container to center our sprite stack on the page\nconst container = new Container({\n  x:app.screen.width / 2,\n  y:app.screen.height / 2\n});\n\napp.stage.addChild(container);\n\n// load the texture\nawait Assets.load('assets/images/sample.png');\n\n// Create the 3 sprites, each a child of the last\nconst sprites = [];\nlet parent = container;\nfor (let i = 0; i < 3; i++) {\n  let wrapper = new Container();\n  let sprite = Sprite.from('assets/images/sample.png');\n  sprite.anchor.set(0.5);\n  wrapper.addChild(sprite);\n  parent.addChild(wrapper);\n  sprites.push(wrapper);\n  parent = wrapper;\n}\n\n// Set all sprite's properties to the same value, animated over time\nlet elapsed = 0.0;\napp.ticker.add((delta) => {\n  elapsed += delta.deltaTime / 60;\n  const amount = Math.sin(elapsed);\n  const scale = 1.0 + 0.25 * amount;\n  const alpha = 0.75 + 0.25 * amount;\n  const angle = 40 * amount;\n  const x = 75 * amount;\n  for (let i = 0; i < sprites.length; i++) {\n    const sprite = sprites[i];\n    sprite.scale.set(scale);\n    sprite.alpha = alpha;\n    sprite.angle = angle;\n    sprite.x = x;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Alpha Property to Fade Sprites in PixiJS\nDESCRIPTION: This code snippet demonstrates how to animate a sprite's alpha property to create fade-in or fade-out effects. Alpha controls the transparency level, ranging from 0.0 (fully transparent) to 1.0 (fully opaque), useful for visual effects like fading or blinking.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.alpha = 0.0; // Starts fully transparent\n// Animate alpha to 1 over time to fade in\n// Could use a ticker or animation library for gradual change\n```\n\n----------------------------------------\n\nTITLE: Batch Creating and Configuring Animated Fish Sprites (JavaScript)\nDESCRIPTION: This loop iterates to create the desired number of fish sprites, cycling through the available asset aliases. Each fish receives randomized speed, turn speed, scale, and direction, and custom properties are attached to control animation. Fish are positioned randomly within the application screen, anchored at the center, and added to both the container and the main fishes array. Requires global access to the PIXI Sprite class, a loaded 'app' object, the 'fishes' array, and previously defined 'fishAssets' and 'fishCount'.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step3/step3-content.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (let i = 0; i < fishCount; i++)\n{\n    const fishAsset = fishAssets[i % fishAssets.length];\n    const fish = Sprite.from(fishAsset);\n\n    fish.anchor.set(0.5);\n\n    fish.direction = Math.random() * Math.PI * 2;\n    fish.speed = 2 + Math.random() * 2;\n    fish.turnSpeed = Math.random() - 0.8;\n\n    fish.x = Math.random() * app.screen.width;\n    fish.y = Math.random() * app.screen.height;\n    fish.scale.set(0.5 + Math.random() * 0.2);\n\n    fishContainer.addChild(fish);\n    fishes.push(fish);\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Sprites in a PixiJS Scene Graph\nDESCRIPTION: This code snippet demonstrates how to create a scene graph with three sprites, each a child of the previous one, and animate their position, rotation, scale, and alpha properties. It showcases how parent-child relationships amplify the changes applied to each sprite, creating a cumulative effect.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/scene-graph.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the application helper and add its render target to the page\nconst app = new PIXI.Application({ width: 640, height: 360 });\ndocument.body.appendChild(app.view);\n\n// Add a container to center our sprite stack on the page\nconst container = new PIXI.Container();\ncontainer.x = app.screen.width / 2;\ncontainer.y = app.screen.height / 2;\napp.stage.addChild(container);\n\n// Create the 3 sprites, each a child of the last\nconst sprites = [];\nlet parent = container;\nfor (let i = 0; i < 3; i++) {\n  let sprite = PIXI.Sprite.from('assets/images/sample.png');\n  sprite.anchor.set(0.5);\n  parent.addChild(sprite);\n  sprites.push(sprite);\n  parent = sprite;\n}\n\n// Set all sprite's properties to the same value, animated over time\nlet elapsed = 0.0;\napp.ticker.add((delta) => {\n  elapsed += delta / 60;\n  const amount = Math.sin(elapsed);\n  const scale = 1.0 + 0.25 * amount;\n  const alpha = 0.75 + 0.25 * amount;\n  const angle = 40 * amount;\n  const x = 75 * amount;\n  for (let i = 0; i < sprites.length; i++) {\n    const sprite = sprites[i];\n    sprite.scale.set(scale);\n    sprite.alpha = alpha;\n    sprite.angle = angle;\n    sprite.x = x;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Static Interaction and Handling Pointer Events in PixiJS\nDESCRIPTION: This snippet demonstrates how to make a PixiJS Sprite interactive by setting its `eventMode` property to `static`. It then attaches an event listener using the `on` method to respond to the `pointerdown` event (triggered by mouse click or touch tap), executing a callback function when the event occurs. This requires the PixiJS library.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/interaction.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet sprite = PIXI.Sprite.from('/some/texture.png');\nsprite.on('pointerdown', (event) => { alert('clicked!'); });\nsprite.eventMode = 'static';\n```\n\n----------------------------------------\n\nTITLE: Drawing SVG Path Using Graphics\nDESCRIPTION: This snippet demonstrates drawing an SVG path within a PixiJS `Graphics` object.  It showcases how to use the `svg()` method to render SVG paths.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n let mySvg = new Graphics().svg(`\n    <svg>\n      <path d=\"M 100 350 q 150 -300 300 0\" stroke=\"blue\" />\n    </svg>\n   `);\n```\n\n----------------------------------------\n\nTITLE: Adding PixiJS View to DOM\nDESCRIPTION: Appends the canvas element generated by the PIXI.Application's renderer (available via `app.view`) to the HTML document's body. This step makes the rendered PixiJS content visible on the web page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.appendChild(app.view);\n```\n\n----------------------------------------\n\nTITLE: Reusing Parsed Inline SVG with GraphicsContext in PixiJS\nDESCRIPTION: Parses an inline SVG string once using `GraphicsContext` and then reuses the resulting context to create multiple `Graphics` objects. This avoids redundant parsing, improving performance when the same SVG geometry needs to be rendered multiple times.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/svg.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst context = new GraphicsContext().svg('<svg width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"red\"/></svg>');\n\nconst graphics1 = new Graphics(context);\nconst graphics2 = new Graphics(context);\n```\n\n----------------------------------------\n\nTITLE: Caching Container as Texture in PixiJS v8.6.0 - JavaScript\nDESCRIPTION: Demonstrates how to use the new cacheAsTexture() function on Containers to render a container's display output to a texture for improved rendering performance. This reduces GPU load when containers are static by caching their children as a texture. Requires PixiJS v8.6.0 or later. Inputs include the container instance; outputs are internally managed cached textures to render instead of children. The trade-off involves increased memory usage for textures versus increased rendering speed.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport CacheAsTextureFile from '!!raw-loader!../docs/examples/basic/cache-as-texture';\n```\n\n----------------------------------------\n\nTITLE: Migrating from Texture.from URL Loading to Assets in PixiJS\nDESCRIPTION: Demonstrates the change requiring textures from URLs to be first loaded via Assets before using Texture.from.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\nimport { Texture } from 'pixi.js';\n\nconst texture = Texture.from('https://i.imgur.com/IaUrttj.png');\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { Assets, Texture } from 'pixi.js';\n\nawait Assets.load('https://i.imgur.com/IaUrttj.png');\nconst texture = Texture.from('https://i.imgur.com/IaUrttj.png');\n```\n\n----------------------------------------\n\nTITLE: Loading Asset Bundle Defined in Code in PixiJS\nDESCRIPTION: Shows how to define a bundle of assets directly in code using `Assets.addBundle` and then load that entire bundle using `Assets.loadBundle`. The returned Promise resolves with an object containing all assets in the bundle, keyed by their aliases.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n  Assets.addBundle('animals', {\n    bunny: 'bunny.png',\n    chicken: 'chicken.png',\n    thumper: 'thumper.png',\n  });\n\n const assets = await Assets.loadBundle('animals');\n```\n\n----------------------------------------\n\nTITLE: Using Anchor Point for Rotation in PixiJS Sprites\nDESCRIPTION: This snippet illustrates how to set the anchor point in percentage terms (0.5, 0.5) to rotate the sprite around its center. Anchors are resolution-agnostic and maintain correct rotation when the texture's size changes, providing a flexible way to control rotation origins.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.anchor.set(0.5, 0.5); // Sets anchor to center for midpoint rotation\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Application in JavaScript\nDESCRIPTION: This code snippet initializes a PixiJS application with a specified background color and resizes it to the window dimensions. It then appends the application's canvas to the document body, making the PixiJS scene visible in the browser. The `app` object is assumed to be a pre-existing PixiJS application instance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step1/step1-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait app.init({ background: '#021f4b', resizeTo: window });\ndocument.body.appendChild(app.canvas);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Trees Across the Screen in PixiJS\nDESCRIPTION: Generates multiple trees to fill the screen width with slight random height variations. Each tree is positioned along the bottom of the screen with consistent spacing between them.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step5/step5-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeWidth = 200;\nconst y = app.screen.height - 20;\nconst spacing = 15;\nconst count = app.screen.width / (treeWidth + spacing) + 1;\nconst trees = [];\n\nfor (let index = 0; index < count; index++)\n{\n    const treeHeight = 225 + Math.random() * 50;\n    const tree = createTree(treeWidth, treeHeight);\n\n    tree.x = index * (treeWidth + spacing);\n    tree.y = y;\n\n    app.stage.addChild(tree);\n    trees.push(tree);\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pixel-Perfect Debug Box and Matching Bounds (TypeScript)\nDESCRIPTION: Constructs a square debug box (100x100) with a 1px magenta stroke and provides a helper function to position and scale this box to visually match the bounds of any PixiJS Container object. The 'graphicsBox' is reused efficiently, a recommended technique for real-time updates. Usage: call 'drawDebugBounds' with an object to sync the debug box bounds. Requires PixiJS and proper Graphics/Container imports. Input: Target Container object. Output: A 1px magenta rectangle, accurately fitted to the object's position and size.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-pixel-line.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a debug box with pixel-perfect stroke\nconst graphicsBox = new Graphics()\n    .rect(0, 0, 100, 100)\n  .stroke({ color: 0xff00ff, pixelLine: true });\n\n/**\n * Updates the debug box to match the bounds of a given object\n * @param {Container} obj - The object to draw bounds for\n */\nfunction drawDebugBounds(obj) {\n    // Get the bounds of the object\n    let bounds = obj.getBounds().rectangle;\n\n    // Position and scale the debug box to match the bounds\n    // this is faster than using `moveTo` and `lineTo` each frame!\n    graphicsBox.position.set(bounds.x, bounds.y);\n    graphicsBox.scale.set(bounds.width / 100, bounds.height / 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Blur Filter in PixiJS (JavaScript)\nDESCRIPTION: This JavaScript code snippet, loaded into the ExampleEditor component, demonstrates applying a BlurFilter to a PixiJS display object. It typically involves initializing a PixiJS application, adding an element (like a sprite), creating a PIXI.filters.BlurFilter instance, and assigning it to the element's filter array. Requires the pixi.js library.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-basic/blur.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Content loaded from './blur' via raw-loader\n// This code implements the PixiJS blur filter example displayed in the ExampleEditor.\n// Expected content likely includes:\n// - PIXI.Application setup\n// - Creating display objects (e.g., PIXI.Sprite)\n// - Instantiating PIXI.filters.BlurFilter\n// - Applying the filter: displayObject.filters = [blurFilter];\n// (Actual code content resides in the './blur' file and is dynamically loaded)\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Render Groups in PixiJS (TypeScript)\nDESCRIPTION: Demonstrates how to create PixiJS Container objects and explicitly designate them as Render Groups using the `isRenderGroup: true` property. This allows specific parts of the scene (like a game world and a HUD) to be managed and optimized independently. The example also notes that the root scene container is implicitly converted to a Render Group when passed to the renderer.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-groups.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myGameWorld = new Container({\n  isRenderGroup:true\n})\n\nconst myHud = new Container({\n  isRenderGroup:true\n})\n\nscene.addChild(myGameWorld, myHud)\n\nrenderer.render(scene) // this action will actually convert the scene to a render group under the hood\n```\n\n----------------------------------------\n\nTITLE: Basic Color Fill in PixiJS\nDESCRIPTION: This snippet creates a new `Graphics` object, draws a rectangle with dimensions 200x100, and fills it with the color red using the `fill()` method. It demonstrates how to fill a shape with a basic color.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = new Graphics()\n  .rect(0, 0, 200, 100) // Create a rectangle with dimensions 200x100\n  .fill('red'); // Fill the rectangle with a red color\n```\n\n----------------------------------------\n\nTITLE: Drawing Static Snow Layer in PixiJS\nDESCRIPTION: Creates a static snow ground layer as a filled rectangle at the bottom of the scene using PixiJS Graphics. It depends on the app's screen width and height, and defines a specific ground height. The rectangle is added to the scene as a child for rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step6/step6-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst width = app.screen.width;\nconst groundHeight = 20;\nconst groundY = app.screen.height;\nconst ground = new Graphics()\n    .rect(0, groundY - groundHeight, width, groundHeight)\n    .fill({ color: 0xdddddd });\n\napp.stage.addChild(ground);\n```\n\n----------------------------------------\n\nTITLE: Creating and Anchoring a PixiJS Sprite in JavaScript\nDESCRIPTION: Creates a PixiJS Sprite instance from a preloaded texture asset aliased as 'background'. It then sets the sprite's anchor point to its center (0.5, 0.5), which affects its positioning and rotation origin.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step2/step2-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst background = Sprite.from('background');\n\nbackground.anchor.set(0.5);\n```\n\n----------------------------------------\n\nTITLE: Disabling Cached Texture in PixiJS\nDESCRIPTION: Demonstrates how to turn off cacheAsTexture for a container when it's no longer needed.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/cache-as-texture.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.cacheAsTexture(false);\n```\n\n----------------------------------------\n\nTITLE: Creating Smoke Particle Groups with PixiJS in JavaScript\nDESCRIPTION: This snippet creates multiple groups of circular smoke particles using PixiJS's Graphics API. Each group clusters several circles with random sizes and positions and is initialized with position and a custom 'tick' property for animation progress. Dependencies: PixiJS library (Graphics), a container 'trainContainer' for positioning. Key parameters include 'groupCount' (groups to create), 'particleCount' (circles per group), and uses randomization for a natural appearance. The array 'groups' holds all generated smoke group objects for later animation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step9/step9-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst groupCount = 5;\nconst particleCount = 7;\nconst groups = [];\nconst baseX = trainContainer.x + 170;\nconst baseY = trainContainer.y - 120;\n\nfor (let index = 0; index < groupCount; index++)\n{\n    const smokeGroup = new Graphics();\n\n    for (let i = 0; i < particleCount; i++)\n    {\n        const radius = 20 + Math.random() * 20;\n        const x = (Math.random() * 2 - 1) * 40;\n        const y = (Math.random() * 2 - 1) * 40;\n\n        smokeGroup.circle(x, y, radius);\n    }\n\n    smokeGroup.fill({ color: 0xc9c9c9, alpha: 0.5 });\n\n    smokeGroup.x = baseX;\n    smokeGroup.y = baseY;\n    smokeGroup.tick = index * (1 / groupCount);\n\n    groups.push(smokeGroup);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TilingSprite Objects for Parallax Layers in PixiJS\nDESCRIPTION: Constructs TilingSprite objects for the background, midground, and platform layers with appropriate textures, dimensions, and anchoring. Uses shared base options for consistent properties across sprites.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step5/step5-content.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseOptions = {\n    tileScale: { x: scale, y: scale },\n    anchor: { x: 0, y: 1 },\n    applyAnchorToTexture: true,\n};\n\nthis.background = new TilingSprite({\n    texture: backgroundTexture,\n    width,\n    height: backgroundTexture.height * scale,\n    ...baseOptions,\n});\nthis.midground = new TilingSprite({\n    texture: midgroundTexture,\n    width,\n    height: midgroundTexture.height * scale,\n    ...baseOptions,\n});\nthis.platform = new TilingSprite({\n    texture: platformTexture,\n    width,\n    height: platformHeight,\n    ...baseOptions,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SpriteSheet\nDESCRIPTION: This JavaScript snippet demonstrates how to create a `PIXI.Spritesheet` instance from the data and the image. It then asynchronously parses the spritesheet, enabling it to create individual textures. Afterwards, it creates an `AnimatedSprite` using the parsed textures, sets its animation speed, plays the animation, and adds it to the stage.  Dependencies: PixiJS library, atlasData from the previous code snippet.  Requires the image referenced in atlasData.meta.image\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/sprite-sheets.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the SpriteSheet from data and image\nconst spritesheet = new PIXI.Spritesheet(\n\tPIXI.BaseTexture.from(atlasData.meta.image),\n\tatlasData\n);\n\n// Generate all the Textures asynchronously\nawait spritesheet.parse();\n\n// spritesheet is ready to use!\nconst anim = new PIXI.AnimatedSprite(spritesheet.animations.enemy);\n\n// set the animation speed\nanim.animationSpeed = 0.1666;\n// play the animation on a loop\nanim.play();\n// add it to the stage to render\napp.stage.addChild(anim);\n```\n\n----------------------------------------\n\nTITLE: Scaling a PixiJS Sprite to Fit Screen in JavaScript\nDESCRIPTION: Scales the 'background' sprite to fit the application screen while maintaining aspect ratio. It checks if the screen width is greater than the height, scales the corresponding dimension by 1.2 (to slightly overflow), and applies the resulting scale factor to the other dimension. Requires the 'app' object (PixiJS Application instance) and the 'background' sprite.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step2/step2-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (app.screen.width > app.screen.height)\n{\n    background.width = app.screen.width * 1.2;\n    background.scale.y = background.scale.x;\n}\nelse\n{\n    background.height = app.screen.height  * 1.2;\n    background.scale.x = background.scale.y;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tint Color on PixiJS Sprites\nDESCRIPTION: This code snippet illustrates how to apply a tint to a sprite by setting its tint property to a hexadecimal color value such as 0x00FF00 for green. Tinting multiplies each pixel's color by the specified tint color, allowing dynamic coloration effects like indicating status changes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.tint = 0x00FF00; // Applies green tint to the sprite\n```\n\n----------------------------------------\n\nTITLE: Calculating Scale for Parallax Layers in PixiJS\nDESCRIPTION: Determines the ideal platform height (40% of scene height but not exceeding texture height) and calculates the scale factor to apply to all parallax layers for visual consistency.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step5/step5-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxPlatformHeight = platformTexture.height;\nconst platformHeight = Math.min(maxPlatformHeight, height * 0.4);\nconst scale = this.scale = platformHeight / maxPlatformHeight;\n```\n\n----------------------------------------\n\nTITLE: Animating Smoke Groups with the PixiJS Ticker in JavaScript\nDESCRIPTION: This snippet animates each smoke group by incrementally updating a 'tick' property, which represents the normalized progress of animation, within a PixiJS ticker callback. The tick value is used to change group position (x, y) and scale, causing smoke to drift and fade as if moving from a chimney. Dependencies: 'app' must be a running PixiJS application, and 'groups' is an array of smoke group Graphics. Input is automatic via the ticker, output is an animated scene; the loop modulates tick so particle groups cycle endlessly from emission to disappearance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step9/step9-content.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.ticker.add((time) =>\n{\n    const dt = time.deltaTime * 0.01;\n\n    groups.forEach((group) =>\n    {\n        group.tick = (group.tick + dt) % 1;\n        group.x = baseX - Math.pow(group.tick, 2) * 400;\n        group.y = baseY - group.tick * 200;\n        group.scale.set(Math.pow(group.tick, 0.75));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if a PixiJS Object is Interactive\nDESCRIPTION: Shows how to check if a PixiJS display object (like a Sprite) is currently interactive. It uses the `isInteractive()` method, which returns true if the object's `eventMode` is set to either 'static' or 'dynamic'.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/interaction.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (sprite.isInteractive()) {\n    // sprite is interactive\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradient Fill with FillGradient in TypeScript for PixiJS\nDESCRIPTION: This snippet demonstrates how to define a gradient fill using FillGradient, specifying color stops from blue to red, and applying it to a Graphics rectangle with color 'yellow' and 50% transparency. It showcases how gradients can be used as fills to produce smooth color transitions for graphics objects.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst gradient = new FillGradient({\n    colorStops: [\n        { offset: 0, color: 'blue' },\n        { offset: 1, color: 'red' },\n    ]\n});\n\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill({\n    fill: gradient,\n    color: 'yellow',\n    alpha: 0.5,\n  });\n```\n\n----------------------------------------\n\nTITLE: Positioning Scene and Character in PixiJS\nDESCRIPTION: Positions the scene at the bottom of the screen and adjusts the character's position and scale to align with the scene's floor height and scaling factor.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step5/step5-content.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.view.y = app.screen.height;\nspineBoy.view.x = app.screen.width / 2;\nspineBoy.view.y = app.screen.height - scene.floorHeight;\nspineBoy.spine.scale.set(scene.scale * 0.32);\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor with PixiJS dependency in JavaScript\nDESCRIPTION: This code imports components and data required to render an example editor for a PixiJS container. It sets up the Editor with the container source code and specifies the PixiJS dependency version, enabling live editing or viewing of the container example within the documentation. The code relies on dynamic importing of raw source files and version information.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/basic/container.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./container';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Using the Slot Attachments API with PixiJS and Spine\nDESCRIPTION: API methods for attaching PixiJS Container objects to slots in Spine animations. These methods allow developers to add, remove, and retrieve objects attached to named slots in the animation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-06-14-pixi-spine.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\naddSlotObject(slotName, object)\nremoveSlotObject(slotName)\ngetSlotObject(slotName)\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Sprites to Stage - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create two PIXI.Sprite objects, assign them different tints (red and blue), and add them to the stage. This establishes a default rendering order based on the order in which they are added.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst redGuy = new PIXI.Sprite('red guy');\nredGuy.tint = 0xff0000;\n\nconst blueGuy = new PIXI.Sprite('blue guy');\nblueGuy.tint = 0x0000ff;\n\nstage.addChild(redGuy, blueGuy);\n```\n\n----------------------------------------\n\nTITLE: Handling Key-Up Events for Controller State (JavaScript)\nDESCRIPTION: Updates the controller's state when a key is released. It resets the 'pressed' flag to false. If a double-tap was detected, it resets the 'doubleTap' flag; otherwise, it updates the timestamp for potential future double-tap detection. Requires `keyMap` and `this.keys`.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step3/step3-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst key = keyMap[event.code];\n\nif (!key) return;\n\nconst now = Date.now();\n\nthis.keys[key].pressed = false;\n\nif (this.keys[key].doubleTap) this.keys[key].doubleTap = false;\nelse this.keys[key].timestamp = now;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Web Font Using CSS @font-face\nDESCRIPTION: Defines a custom web font named \"Short Stack\" using CSS @font-face rule. This includes specifying the font-family name and providing multiple font file sources and formats (woff2 and woff) to ensure browser compatibility. This declaration enables the browser to recognize and load the font files prior to usage in canvas or WebGL rendering. There are no direct dependencies, but this snippet must be included in the project's CSS for proper font resolution and rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/text.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n@font-face {\n  font-family: Short Stack;\n  src: url(short-stack.woff2) format('woff2'),\n       url(short-stack.woff) format('woff');\n}\n```\n\n----------------------------------------\n\nTITLE: Removing from Stage - TypeScript\nDESCRIPTION: This code snippet demonstrates that removing a sprite from its logical parent also removes it from any associated RenderLayer. `stage.removeChild(redGuy)` will automatically detach redGuy from any layer it was attached to.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstage.removeChild(redGuy); // if the red guy was removed from the stage, it will also be removed from the layer\n```\n\n----------------------------------------\n\nTITLE: Sorting Within Layers - JavaScript\nDESCRIPTION: This code snippet shows how to sort objects within a RenderLayer based on their `zIndex` property. `layer.sortableChildren = true` enables sorting, and `layer.sortRenderLayerChildren()` applies the sorting based on the objects' `zIndex` values.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrect.zIndex = 10; // Higher values render later\nlayer.sortableChildren = true; // Enable sorting\nlayer.sortRenderLayerChildren(); // Apply the sorting\n```\n\n----------------------------------------\n\nTITLE: Handling Character Direction with Getter and Setter\nDESCRIPTION: Implements a property `direction` with getter and setter to manage horizontal orientation, allowing external code to set the character facing direction easily. The character instance is wrapped in a container `directionalView` to separate transform manipulations, particularly horizontal scaling for facing directions.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step4/step4-content.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.defineProperty(character, 'direction', {\n    get() {\n        return this._direction;\n    },\n    set(value) {\n        this._direction = value;\n        this.directionalView.scale.x = value; // -1 for facing left, 1 for facing right\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Single Asset with Async/Await in PixiJS\nDESCRIPTION: Shows how to load a single texture asset using `Assets.load` within an `async` function and the `await` keyword. This approach pauses execution until the asset is loaded, providing a more synchronous-looking and often more readable code flow compared to `.then()`.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new application\nconst app = new Application();\n// Initialize the application\nawait app.init({ background: '#1099bb', resizeTo: window });\n// Append the application canvas to the document body\ndocument.body.appendChild(app.canvas);\nconst texture = await Assets.load('https://pixijs.com/assets/bunny.png');\n// Create a new Sprite from the awaited loaded Texture\nconst bunny = Sprite.from(texture);\n// Center the sprite's anchor point\nbunny.anchor.set(0.5);\n// Move the sprite to the center of the screen\nbunny.x = app.screen.width / 2;\nbunny.y = app.screen.height / 2;\napp.stage.addChild(bunny);\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions in PixiJS v7\nDESCRIPTION: Example of the simplified extension installation in PixiJS v7, which now happens automatically upon import.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@pixi/accessibility';\n```\n\n----------------------------------------\n\nTITLE: Using GIF Support in PixiJS with Playback Controls\nDESCRIPTION: Demonstrates the new GIF support in PixiJS v8.7.0, showing how to load and display an animated GIF with controls for play, pause, and speed adjustment.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2025-01-24-pixi-v8.7.0.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Application, Assets, Container, Graphics, RenderTexture, Sprite, Text } from 'pixi.js';\n\nconst app = new Application();\n\nawait app.init({ background: '#1099bb', resizeTo: window });\ndocument.body.appendChild(app.canvas);\n\n// Load the GIF\nconst url = 'https://sample-videos.com/gif/4.gif';\nconst gif = await Assets.load(url);\n\n// The gif is automatically playing\n// Create a sprite from the gif\nconst sprite = Sprite.from(gif);\n\n// Center the sprite\nsprite.anchor.set(0.5);\nsprite.x = app.screen.width / 2;\nsprite.y = app.screen.height / 2;\n\napp.stage.addChild(sprite);\n\n// Create UI Controls\nconst createButton = (text, x, y, onClick) => {\n    const button = new Container();\n    \n    const bg = new Graphics()\n        .rect(0, 0, 100, 40)\n        .fill({ color: 0xffffff });\n    \n    const buttonText = new Text({ text, fill: 0x000000 });\n    buttonText.anchor.set(0.5);\n    buttonText.x = bg.width / 2;\n    buttonText.y = bg.height / 2;\n    \n    button.addChild(bg, buttonText);\n    button.x = x;\n    button.y = y;\n    button.eventMode = 'static';\n    button.cursor = 'pointer';\n    button.onpointerdown = onClick;\n    \n    return button;\n};\n\nconst controls = new Container();\n\n// Play button\ncontrols.addChild(createButton('Play', 10, 10, () => {\n    gif.play();\n}));\n\n// Pause button\ncontrols.addChild(createButton('Pause', 120, 10, () => {\n    gif.pause();\n}));\n\n// Speed control buttons\ncontrols.addChild(createButton('Speed x0.5', 230, 10, () => {\n    gif.playbackRate = 0.5;\n}));\n\ncontrols.addChild(createButton('Speed x1', 340, 10, () => {\n    gif.playbackRate = 1;\n}));\n\ncontrols.addChild(createButton('Speed x2', 450, 10, () => {\n    gif.playbackRate = 2;\n}));\n\napp.stage.addChild(controls);\n\n// Display information about the GIF\nconst info = new Text({ \n    text: `Total Frames: ${gif.totalFrames}\\nLoop: ${gif.loop ? 'Yes' : 'No'}`, \n    fill: 0xffffff,\n    fontSize: 16\n});\ninfo.x = 10;\ninfo.y = 60;\n\napp.stage.addChild(info);\n\n// Frame counter display\nconst frameCounter = new Text({ \n    text: `Current Frame: ${gif.currentFrame}`, \n    fill: 0xffffff,\n    fontSize: 16\n});\nframeCounter.x = 10;\nframeCounter.y = 100;\n\napp.stage.addChild(frameCounter);\n\n// Update the frame counter when the frame changes\napp.ticker.add(() => {\n    frameCounter.text = `Current Frame: ${gif.currentFrame}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling PixiJS Animation with Keyboard Input (JavaScript)\nDESCRIPTION: Demonstrates using the controller state within a PixiJS application ticker (`app.ticker`). It checks if the 'right' key is pressed and sets the character's animation ('walk' or 'idle') accordingly using `spineBoy.spine.state.setAnimation`. It ensures the animation is only set once per state change by tracking the `currentAnimation`.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step3/step3-content.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet currentAnimation;\n\napp.ticker.add((time) =>\n{\n    const rightPressed = controller.keys.right.pressed;\n    const animationName = rightPressed ? 'walk' : 'idle';\n    const loop = true;\n\n    if (currentAnimation !== animationName)\n    {\n        currentAnimation = animationName;\n        spineBoy.spine.state.setAnimation(0, animationName, loop);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Scaling PixiJS Sprites via Scale Properties\nDESCRIPTION: This example clarifies how to use the sprite's scale property to resize the sprite proportionally on the x and y axes. Adjusting scale affects the visual size, but the texture's actual dimensions remain unchanged. It facilitates dynamic resizing during runtime.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.scale.x = 2; // Doubles width\nsprite.scale.y = 0.5; // Halves height\n```\n\n----------------------------------------\n\nTITLE: Creating a Masked Scrollable Container with PixiJS - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a PixiJS application that contains a window frame with a masked container to enable scrolling masked content. It sets up a Graphics object as a rectangular mask, applies it to a Container holding text content, and animates the text's vertical position using the application's ticker callback to simulate scrolling. The code relies on PixiJS v7.x and requires HTML DOM access to append the rendering canvas. This example highlights key steps: defining the mask shape, attaching it to the container, positioning the masked container relative to the frame, and dynamically animating content inside the mask. Limitations include that masking with Graphics objects does not support anti-aliasing, and complex masks require handling relative positioning correctly.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/containers.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create the application helper and add its render target to the page\nlet app = new PIXI.Application({ width: 640, height: 360 });\ndocument.body.appendChild(app.view);\n\n// Create window frame\nlet frame = new PIXI.Graphics();\nframe.beginFill(0x666666);\nframe.lineStyle({ color: 0xffffff, width: 4, alignment: 0 });\nframe.drawRect(0, 0, 208, 208);\nframe.position.set(320 - 104, 180 - 104);\napp.stage.addChild(frame);\n\n// Create a graphics object to define our mask\nlet mask = new PIXI.Graphics();\n// Add the rectangular area to show\nmask.beginFill(0xffffff);\nmask.drawRect(0,0,200,200);\nmask.endFill();\n\n// Add container that will hold our masked content\nlet maskContainer = new PIXI.Container();\n// Set the mask to use our graphics object from above\nmaskContainer.mask = mask;\n// Add the mask as a child, so that the mask is positioned relative to its parent\nmaskContainer.addChild(mask);\n// Offset by the window's frame width\nmaskContainer.position.set(4,4);\n// And add the container to the window!\nframe.addChild(maskContainer);\n\n// Create contents for the masked container\nlet text = new PIXI.Text(\n  'This text will scroll up and be masked, so you can see how masking works.  Lorem ipsum and all that.\\n\\n' +\n  'You can put anything in the container and it will be masked!',\n  {\n    fontSize: 24,\n    fill: 0x1010ff,\n    wordWrap: true,\n    wordWrapWidth: 180\n  }\n);\ntext.x = 10;\nmaskContainer.addChild(text);\n\n// Add a ticker callback to scroll the text up and down\nlet elapsed = 0.0;\napp.ticker.add((delta) => {\n  // Update the text's y coordinate to scroll it\n  elapsed += delta;\n  text.y = 10 + -100.0 + Math.cos(elapsed/50.0) * 100.0;\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from InteractionManager to EventSystem\nDESCRIPTION: Example showing how to switch from InteractionManager to EventSystem while still on PixiJS v6.5.x, as a preparation step for v7 migration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v7.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InteractionManager, extensions, Application } from 'pixi.js';\nimport { EventSystem } from '@pixi/events';\n\n// Uninstall interaction\nextensions.remove(InteractionManager);\n\n// Create the renderer or application\nconst app = new Application();\n\n// Install events\napp.renderer.addSystem(EventSystem, 'events');\n```\n\n----------------------------------------\n\nTITLE: Creating Sprites Using Texture URLs in PixiJS (JavaScript)\nDESCRIPTION: This snippet explains how to instantiate a sprite from a texture URL by first loading the texture using the Assets class, then creating a sprite with Sprite.from(url). It emphasizes the importance of loading textures explicitly before use for best practices.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sprite = Sprite.from('path/to/image.png');\n// Creates a sprite from the loaded texture URL; ensure texture is preloaded.\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Files for Mouse Trail Example in React/JSX\nDESCRIPTION: This code imports the ExampleEditor component, loads the mouse trail implementation file using raw-loader, and imports the PixiJS version information. These imports are used to set up the interactive example editor on the page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/advanced/mouse-trail.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./mouse-trail';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Assembling and Animating Train with Head and Carriage in PIXI.js (JavaScript)\nDESCRIPTION: This snippet shows how to use `createTrainHead()` and `createTrainCarriage()` to instantiate the train's main sections, offset and group them within a container, and add overall animation to simulate travel. It sets position, scale, and shaking for the assembled train by leveraging PIXI.js's container system and animation ticker. Dependencies include prior definitions of `createTrainHead`, `createTrainCarriage`, an initialized PIXI Application (`app`), and a parent container (`trainContainer`). Inputs and parameters include graphical object references and numerical constants for positioning and motion. Outputs are animated visual updates on the PIXI canvas.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step8/step8-content.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst head = createTrainHead();\nconst carriage = createTrainCarriage();\n\ncarriage.x = -carriage.width;\n\ntrainContainer.addChild(head, carriage);\napp.stage.addChild(trainContainer);\n\nconst scale = 0.75;\n\ntrainContainer.scale.set(scale);\ntrainContainer.x = app.screen.width / 2 - head.width / 2;\n\nlet elapsed = 0;\nconst shakeDistance = 3;\nconst baseY = app.screen.height - 35 - 55 * scale;\nconst speed = 0.5;\n\ntrainContainer.y = baseY;\n\napp.ticker.add((time) =>\n{\n    elapsed += time.deltaTime;\n    const offset = (Math.sin(elapsed * 0.5 * speed) * 0.5 + 0.5) * shakeDistance;\n\n    trainContainer.y = baseY + offset;\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from settings to AbstractRenderer.defaultOptions in PixiJS\nDESCRIPTION: Demonstrates how to migrate from the removed settings object to the new AbstractRenderer.defaultOptions pattern for configuring renderer defaults.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nimport { settings, BrowserAdapter } from 'pixi.js';\n\nsettings.RESOLUTION = 1;\nsettings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;\nsettings.ADAPTER = BrowserAdapter;\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { AbstractRenderer, DOMAdapter, BrowserAdapter } from 'pixi.js';\n\n// Can also be passed into the renderer directly e.g `autoDetectRenderer({resolution: 1})`\nAbstractRenderer.defaultOptions.resolution = 1;\n\n// Can also be passed into the renderer directly e.g `autoDetectRenderer({failIfMajorPerformanceCaveat: false})`\nAbstractRenderer.defaultOptions.failIfMajorPerformanceCaveat = false;\n\n// See below for more information about changes to the adapter\nDOMAdapter.set(BrowserAdapter);\n```\n\n----------------------------------------\n\nTITLE: Update Mesh Render Uniform Setting (v6)\nDESCRIPTION: Illustrates the required change in PixiJS v6 for setting the `translationMatrix` uniform in `Mesh._renderDefault`. The conditional check (present in v5) must be removed, ensuring the world transform array is always assigned directly to the shader uniform. This prevents potential sync issues or null pointer errors.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v6.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring PixiJS Application EventSystem for Performance\nDESCRIPTION: This snippet shows how to configure the PixiJS EventSystem during Application initialization for better performance. It sets the default `eventMode` for all display objects to `passive` (more performant than the default `auto`) and customizes `eventFeatures` to disable expensive `globalMove` events while keeping `move`, `click`, and `wheel` events enabled. This requires the PixiJS library.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/interaction.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = new PIXI.Application({\n    /**\n     * by default we use `auto` for backwards compatibility.\n     * However `passive` is more performant and will be used by default in the future,\n     */\n    eventMode: 'passive',\n    eventFeatures: {\n        move: true,\n        /** disables the global move events which can be very expensive in large scenes */\n        globalMove: false,\n        click: true,\n        wheel: true,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Creating a Sprite in PixiJS\nDESCRIPTION: JavaScript code that loads an image file asynchronously using PIXI.Assets and creates a sprite from it. This is the basic method to display images in PixiJS.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// load the PNG asynchronously\nawait PIXI.Assets.load('sample.png');\nlet sprite = PIXI.Sprite.from('sample.png');\n```\n\n----------------------------------------\n\nTITLE: Animating Mountain Groups (PixiJS Ticker, JavaScript)\nDESCRIPTION: This snippet adds a function to the PixiJS application's ticker to animate the horizontally looping background. It calculates the movement distance based on `deltaTime` for consistent speed across different frame rates. It updates the horizontal position of both mountain groups and checks if either group has moved completely off-screen to the left, looping it back to the right side.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step4/step4-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.ticker.add((time) =>\n{\n    const dx = time.deltaTime * 0.5;\n\n    group1.x -= dx;\n    group2.x -= dx;\n\n    if (group1.x <= -app.screen.width)\n    {\n        group1.x += app.screen.width * 2;\n    }\n    if (group2.x <= -app.screen.width)\n    {\n        group2.x += app.screen.width * 2;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying PixiJS Displacement Map Example Source in React Using JavaScript\nDESCRIPTION: This snippet imports the raw source code of a PixiJS displacement map example (\"Displacement Map Crawlies\") and the PixiJS version, then renders an ExampleEditor component that shows the code and manages relevant dependencies. It requires React environment and appropriate webpack loaders (e.g., raw-loader) to import file content as text. The snippet has no direct logic for PixiJS but is meant to facilitate interactive code editing and display on a documentation or demo site.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-basic/displacement-map-crawlies.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./displacement-map-crawlies';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Generating Tutorial Documentation\nDESCRIPTION: Compiles tutorial files from src/tutorials into markdown compilations for both working docs and versioned docs directories.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run generate-tutorial-docs\n```\n\n----------------------------------------\n\nTITLE: Importing from Core Package in PixiJS v7\nDESCRIPTION: Example of importing classes from the core package in PixiJS v7, which now re-exports content from several sub-packages.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rectangle, settings, ALPHA_MODES, utils } from '@pixi/core';\n\nconst { string2hex } = utils;\n```\n\n----------------------------------------\n\nTITLE: Graphics Alpha\nDESCRIPTION: This snippet demonstrates the correct way to set alpha on a graphics object for interaction purposes in PixiJS. Setting `graphics.alpha = 0` is preferred over using a fill with alpha=0.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ngraphics.beginFill(0xffffff, 0.0); //bad\ngraphics.alpha = 0; //good\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Canvas - PixiJS TypeScript\nDESCRIPTION: Illustrates the deprecation of `Application.view` in PixiJS v8 and its replacement with `Application.canvas`. The example also shows the updated asynchronous `app.init` method for configuring the application with specific options, such as providing an external canvas element.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst app = new Application({ view: document.createElement('canvas') });\ndocument.body.appendChild(app.view);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst app = new Application();\nawait app.init({ view: document.createElement('canvas') });\ndocument.body.appendChild(app.canvas);\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Rendering Loop for Three.js and PixiJS in JavaScript\nDESCRIPTION: Defines a recursive rendering loop using `requestAnimationFrame`. Within each frame, it first calls `resetState()` on the Three.js renderer before rendering the 3D scene. Then, it calls `resetState()` on the PixiJS renderer before rendering the 2D stage on top. Resetting state is crucial for preventing rendering conflicts between the two libraries sharing the same WebGL context.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/mixing-three-and-pixi.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n    // Render the Three.js scene\n    threeRenderer.resetState();\n    threeRenderer.render(scene, camera);\n\n    // Render the PixiJS stage\n    pixiRenderer.resetState();\n    pixiRenderer.render({ container: stage });\n\n    requestAnimationFrame(render);\n}\n\nrequestAnimationFrame(render);\n```\n\n----------------------------------------\n\nTITLE: Initializing ParticleContainer with Bounds (v8)\nDESCRIPTION: This snippet shows the v8 initialization of a `ParticleContainer` where a `boundsArea` must be provided. This is required because the container no longer calculates its own bounds for performance reasons.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst container = new ParticleContainer({\n  boundsArea:new Rectangle(0,0,500,500)\n});\n```\n\n----------------------------------------\n\nTITLE: Loading SVG as Texture with Resolution in PixiJS\nDESCRIPTION: Loads an SVG file as a texture, specifying a `resolution` option during loading. This controls the size and fidelity of the resulting texture, balancing memory usage and visual quality, particularly when the SVG needs to appear larger than its native dimensions.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/svg.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst svgTexture = await Assets.load('path/to.svg', {\n    resolution: 4 // will be 4 times as big!\n});\nconst mySprite = new Sprite(svgTexture);\n```\n\n----------------------------------------\n\nTITLE: Using Property-Based Event Handlers in PixiJS v6\nDESCRIPTION: Example of setting an event handler using property assignment in PixiJS v6, which is no longer supported in v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.pointertap = () => {\n // handler the pointertap\n};\n```\n\n----------------------------------------\n\nTITLE: Color Fill Examples in PixiJS\nDESCRIPTION: This snippet demonstrates filling a rectangle with a color using different color formats: number, hex string, array, and Color object. Each method achieves the same result of filling the rectangle with red color.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a number\nconst obj1 = new Graphics().rect(0, 0, 100, 100).fill(0xff0000);\n\n// Using a hex string\nconst obj2 = new Graphics().rect(0, 0, 100, 100).fill('#ff0000');\n\n// Using an array\nconst obj3 = new Graphics().rect(0, 0, 100, 100).fill([255, 0, 0]);\n\n// Using a Color object\nconst color = new Color();\nconst obj4 = new Graphics().rect(0, 0, 100, 100).fill(color);\n```\n\n----------------------------------------\n\nTITLE: Creating a Red Rectangle Using Graphics\nDESCRIPTION: This snippet demonstrates creating a `Graphics` object, drawing a red rectangle, and adding it to the stage for rendering. It highlights the basic usage of the `rect()` and `fill()` methods.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a Graphics object, draw a rectangle and fill it\nlet obj = new Graphics()\n  .rect(0, 0, 200, 100)\n  .fill(0xff0000);\n\n// Add it to the stage to render\napp.stage.addChild(obj);\n```\n\n----------------------------------------\n\nTITLE: Cutting Holes in Graphics (v7)\nDESCRIPTION: This snippet shows the v7 method for cutting holes in Graphics shapes using the `beginHole` and `endHole` methods, which enclosed the drawing commands for the hole shape.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const rectAndHole = new Graphics()\n    .beginFill(0x00FF00)\n    .drawRect(0, 0, 100, 100)\n    .beginHole()\n    .drawCircle(50, 50, 20)\n    .endHole()\n    .endFill();\n```\n\n----------------------------------------\n\nTITLE: Loading SVG as Texture in PixiJS\nDESCRIPTION: Loads an SVG file as a texture using the PixiJS `Assets.load` method for subsequent use with a `Sprite`. This is suitable for static SVG images where vector scalability is not required.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/svg.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst svgTexture = await Assets.load('tiger.svg');\nconst mySprite = new Sprite(svgTexture);\n```\n\n----------------------------------------\n\nTITLE: Loading SVG File as GraphicsContext in PixiJS\nDESCRIPTION: Loads an SVG file using `Assets.load` with the `parseAsGraphicsContext: true` option. This loads the SVG and parses it into a reusable `GraphicsContext` object, which can then be used to instantiate `Graphics` objects from the loaded file data efficiently, similar to loading and reusing textures.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/svg.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst svgContext = await Assets.load('path/to.svg', {\n    parseAsGraphicsContext: true // If false, it returns a texture instead.\n});\nconst myGraphics = new Graphics(svgContext);\n```\n\n----------------------------------------\n\nTITLE: Using Extract Methods in PixiJS v6\nDESCRIPTION: Example of using the synchronous extract methods in PixiJS v6.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application, EventBoundary} from 'pixi.js';\n\nconst app = new Application();\nconst dataUri = app.renderer.extract.base64();\n```\n\n----------------------------------------\n\nTITLE: Adding a Sprite to the PixiJS Stage\nDESCRIPTION: JavaScript code that adds a sprite to the application's stage (root container), making it part of the scene graph to be rendered.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.stage.addChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Applying Texture with Color and Transparency in PixiJS using fill()\nDESCRIPTION: This code applies a pre-loaded texture to a Graphics rectangle, combined with a yellow color overlay at 50% opacity, demonstrating how textures and color tints can be combined for complex visual effects in PixiJS. Dependencies include the texture object and the Graphics class, with the fill() method accepting a pattern of properties.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill({\n    texture: texture,\n    color: 'yellow',\n    alpha: 0.5,\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing Raw Font File with Webpack Loader\nDESCRIPTION: This snippet imports the content of the 'from-font' file as a raw string using the 'raw-loader' syntax, enabling inline access to the font resource data. It assumes Webpack configuration with raw-loader support and provides the raw font data for dynamic loading or processing within the application.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/from-font.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./from-font';\n```\n\n----------------------------------------\n\nTITLE: Draw Train Head Body with PixiJS Graphics - JavaScript\nDESCRIPTION: Draws the train head's body parts (chimney, front, cabin, roof, door, window) using PixiJS Graphics. It uses the dimensions defined in the previous snippet and applies specific colors and stroke styles.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step7/step7-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphics = new Graphics()\n    // Draw the chimney\n    .moveTo(chimneyStartX, chimneyStartY)\n    .lineTo(chimneyStartX - chimneyTopOffset, chimneyStartY - chimneyHeight + chimneyDomeHeight)\n    .quadraticCurveTo(\n        chimneyStartX + chimneyBaseWidth / 2,\n        chimneyStartY - chimneyHeight - chimneyDomeHeight,\n        chimneyStartX + chimneyBaseWidth + chimneyTopOffset,\n        chimneyStartY - chimneyHeight + chimneyDomeHeight,\n    )\n    .lineTo(chimneyStartX + chimneyBaseWidth, chimneyStartY)\n    .fill({ color: 0x121212 })\n\n    // Draw the head front\n    .roundRect(\n        cabinWidth - frontRadius - cabinRadius,\n        -frontHeight,\n        frontWidth + frontRadius + cabinRadius,\n        frontHeight,\n        frontRadius,\n    )\n    .fill({ color: 0x7f3333 })\n\n    // Draw the cabin\n    .roundRect(0, -cabinHeight, cabinWidth, cabinHeight, cabinRadius)\n    .fill({ color: 0x725f19 })\n\n    // Draw the roof\n    .rect(-roofExcess / 2, cabinRadius - cabinHeight - roofHeight, cabinWidth + roofExcess, roofHeight)\n    .fill({ color: 0x52431c })\n\n    // Draw the door\n    .roundRect(doorStartX, doorStartY, doorWidth, doorHeight, cabinRadius)\n    .stroke({ color: 0x52431c, width: 3 })\n\n    // Draw the window\n    .roundRect(doorStartX + offset, doorStartY + offset, windowWidth, windowHeight, 10)\n    .fill({ color: 0x848484 });\n```\n\n----------------------------------------\n\nTITLE: Updating PixiJS Imports to Single-Package Structure in TypeScript\nDESCRIPTION: Demonstrates how to update code importing PixiJS components from multiple sub-packages to a single package import in PixiJS v8. Requires removing deprecated individual package imports and replacing them with unified imports from 'pixi.js'. Expected input is any v7 style imports; output is an updated import statement compatible with v8’s package structure.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Application } from '@pixi/app';\nimport { Sprite } from '@pixi/sprite';\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Application, Sprite } from 'pixi.js';\n```\n\n----------------------------------------\n\nTITLE: Using Pivot Point for Rotation in PixiJS Sprites\nDESCRIPTION: This example shows how to set the pivot property to offset the rotation origin within the sprite, such as the center point. The pivot is specified in pixels, enabling rotations around arbitrary points, which can be outside the sprite's bounds for complex animations.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.pivot.set(50, 25); // Sets pivot to center for a 100x50 texture\n```\n\n----------------------------------------\n\nTITLE: Applying Stroke with Options (v8)\nDESCRIPTION: This snippet demonstrates applying strokes, including textured strokes, in PixiJS v8. The `stroke` method now accepts a `StrokeStyle` options object or a color and width directly, replacing `lineTextureStyle` and the old `lineStyle` signature.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const rect = new Graphics()\n   .rect(0, 0, 100, 100)\n   .stroke({texture:Texture.WHITE,  width:10, color:0xFF0000})\n   .rect(100, 0, 100, 100)\n   .stroke({color:0xFEEB77, width:2});\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for PixiJS Application\nDESCRIPTION: The minimal HTML file structure needed to host a PixiJS application, including the document type declaration and basic body content.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello PixiJS</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Animation Loop in PixiJS\nDESCRIPTION: JavaScript code that uses the application's ticker to create an animation loop. Updates the sprite's position using a cosine function to create a smooth back-and-forth motion.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a variable to count up the seconds our demo has been running\nlet elapsed = 0.0;\n// Tell our application's ticker to run a new callback every frame, passing\n// in the amount of time that has passed since the last tick\napp.ticker.add((ticker) => {\n  // Add the time to our total elapsed time\n  elapsed += ticker.deltaTime;\n  // Update the sprite's X position based on the cosine of our elapsed time.  We divide\n  // by 50 to slow the animation down a bit...\n  sprite.x = 100.0 + Math.cos(elapsed/50.0) * 100.0;\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Container Children with Generic Typing in PixiJS v8.1.0 - TypeScript\nDESCRIPTION: Demonstrates the use of generic typing to restrict the types of children allowed in a Container. This provides compile-time type checking, preventing invalid child additions. Requires PixiJS v8.1.0 or later and TypeScript. Input is the child instance and container generic parameter; output is enforced type safety during development, aiding maintainability.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst container = new Container<Sprite>();\ncontainer.addChild(new Sprite());\ncontainer.addChild(new Graphics()); // This will throw a type error\n```\n\n----------------------------------------\n\nTITLE: Rendering Shader Files with ExampleEditor Component in PixiJS\nDESCRIPTION: This snippet uses the imported shader source files to initialize an ExampleEditor component, passing the shader files as a files object. The component facilitates visualization, editing, and testing of multiple shader formats within a web interface. It depends on the ExampleEditor component and raw-loader for file imports, enabling shader management in the project.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/triangle.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\n    \"index.js\": IndexFile,\n    'triangle.vert': triangleVert,\n    'triangle.frag': triangleFrag,\n    'triangle.wgsl': triangleWgsl,\n}} />\n```\n\n----------------------------------------\n\nTITLE: Using Event Listeners in PixiJS v7\nDESCRIPTION: Example of setting an event handler using the on method in PixiJS v7, replacing the property-based approach.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.on('pointertap', () => {\n // handler the pointertap\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor with bitmap-text source code\nDESCRIPTION: This code renders the ExampleEditor component, passing the loaded source code as a prop, enabling users to view and interact with the 'bitmap-text' example code directly within the documentation page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/bitmap-text.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Box with Pixel-Perfect Stroke in PixiJS (TypeScript)\nDESCRIPTION: Demonstrates how to create and display a solid (white-filled) rectangle with a 1px red stroke using PixiJS Graphics and the 'pixelLine' property. The snippet scales the object after adding it to the stage, but the border remains 1 pixel thick. Dependencies: PixiJS Graphics, app instance. Inputs: None. Outputs: A white box with a persistent crisp red outline, regardless of size or scaling applied.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-pixel-line.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a Graphics object and draw a filled box with a pixel-perfect stroke\nlet box = new Graphics()\n    .rect(0, 0, 100, 100)\n    .fill('white')\n    .stroke({ color: 0xff0000, pixelLine: true });\n\n// Add it to the stage\napp.stage.addChild(box);\n\n// Scale the box\nbox.scale.set(2);\n```\n\n----------------------------------------\n\nTITLE: Import PIXI (pixi.js-legacy)\nDESCRIPTION: This snippet illustrates how to import PixiJS from the `pixi.js-legacy` package, which includes the canvas renderer. This allows access to both WebGL and Canvas renderers.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as PIXI from \"pixi.js-legacy\";\nconst renderer = PIXI.autoDetectRenderer(); // returns PIXI.Renderer or PIXI.CanvasRenderer\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PixiJS Logger Component in React\nDESCRIPTION: This code snippet shows how a React component is used to display an interactive example of PixiJS Logger. It imports the ExampleEditor component and raw source code, then renders the editor with the specified dependencies.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/logger.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./logger';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Culling in PixiJS\nDESCRIPTION: Demonstrates the new manual container culling approach using the Culler class, which replaces the previous automatic culling behavior during rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nconst container = new Container();\nconst view = new Rectangle(0, 0, 800, 600);\n\ncontainer.cullable = true;\ncontainer.cullArea = new Rectangle(0,0,400,400);\ncontainer.cullableChildren = false;\n\nCuller.shared.cull(myContainer, view);\nrenderer.render(myContainer);\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {extensions, CullerPlugin} from 'pixi.js'\nextensions.add(CullerPlugin)\n```\n\n----------------------------------------\n\nTITLE: Reparenting Containers Without Visual Jumps in PixiJS v8.2.0 - TypeScript\nDESCRIPTION: Shows how to reparent children containers preserving their visual position and scale using the new reparentChild and reparentChildAt methods. Avoids the typical 'jump' effect caused by transform recalculations when changing parents. Requires PixiJS v8.2.0+. Inputs include source and target containers and child display objects; outputs are reparented child containers with visually unchanged appearance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst container1 = new Container();\nconst container2 = new Container();\n\nconst sprite = new Sprite();\ncontainer1.scale = 5;\ncontainer1.addChild(sprite);\n\n// visually the sprite will remain in the same position and scale\n// despite container1 and container2 having different scales.\ncontainer2.reparentChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Creating a PixiJS React Project with CLI\nDESCRIPTION: This shell command utilizes the `npm create` command along with the `pixi.js@latest` package to scaffold a new PixiJS React project. The `--template framework-react` flag specifies that the project should be initialized with a React framework setup. This command simplifies the setup process for developers by providing a pre-configured project structure.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2025-03-26-pixi-react-v8-launches.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm create pixi.js@latest --template framework-react\n```\n\n----------------------------------------\n\nTITLE: Creating a BitmapText Object - PixiJS/TypeScript\nDESCRIPTION: This snippet shows how to create a `BitmapText` object in PixiJS with dynamically created font. This demonstrates a simple setup for rendering text using a bitmap font. Required imports include BitmapText, and related styling configurations.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst myText = new BitmapText({\n  text: 'hello im a bitmap font!',\n  // font will be dynamically created\n  style:{\n    fontFamily: 'Outfit',\n    fontSize: 12,\n    fill: 'red',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Structure\nDESCRIPTION: Provides the minimal HTML boilerplate required for a web page that will host the PixiJS application. It includes the necessary `<!doctype html>`, `<html>`, `<head>`, and `<body>` tags.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello PixiJS</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Real-Time Character Animation Update Loop\nDESCRIPTION: Updates the character's animation based on current state variables on each frame. Prioritizes jump animation, then hover, run, walk, and idle states, ensuring appropriate animation transitions. The jump animation persists until completion regardless of subsequent state changes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step4/step4-content.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (this.state.jump) this.playAnimation(animationMap.jump);\nif (this.isAnimationPlaying(animationMap.jump)) return;\nif (this.state.hover) this.playAnimation(animationMap.hover);\nelse if (this.state.run) this.playAnimation(animationMap.run);\nelse if (this.state.walk) this.playAnimation(animationMap.walk);\nelse this.playAnimation(animationMap.idle);\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Area in PixiJS\nDESCRIPTION: This snippet shows how to set a filter area using `displayObject.filterArea = new PIXI.Rectangle(x,y,w,h)`. This is an optimization technique for filters to speed up rendering by limiting the area the filter affects. The filter area can be set to improve performance when using filters. It requires a PixiJS display object to have filters applied to it. The `x, y, w, h` parameters define the rectangle. The output is improved performance because the filter calculations will be limited to the specified area.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/production/performance-tips.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndisplayObject.filterArea = new PIXI.Rectangle(x,y,w,h)\n```\n\n----------------------------------------\n\nTITLE: Initializing UniformGroup (v8)\nDESCRIPTION: This snippet shows the v8 method for initializing a `UniformGroup`. It now requires providing the expected type (`'f32'`, etc.) for each uniform within the initialization object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst uniformGroup = new UniformGroup({\n  uTime:{value:1, type:'f32'}\n});\n\nuniformGroup.uniforms.uTime = 100; // still accessed the same!\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Application\nDESCRIPTION: This snippet initializes a PixiJS application, sets the background color, and resizes the canvas to the window. The application is then appended to the document body.  This setup is crucial for the basic functionality and visual rendering of the PixiJS application.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step1/step1-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait app.init({ background: '#021f4b', resizeTo: window });\ndocument.body.appendChild(app.canvas);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering PixiJS Blend Modes Example\nDESCRIPTION: JSX code that imports an example editor component and raw content from a blend-modes file to create an interactive example demonstrating PixiJS blend modes. The component requires dependencies on pixi.js with a specific version.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/basic/blend-modes.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./blend-modes';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Creating GraphicsContext Internally\nDESCRIPTION: This snippet shows that if no `GraphicsContext` is explicitly passed, the `Graphics` object creates one internally. It also illustrates that calling the `circle()` and `fill()` methods can directly modify the internal context.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet circleGraphics = new Graphics()\n  .circle(100, 100, 50)\n  .fill('red')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet circleGraphics = new Graphics()\n\ncircleGraphics.context\n  .circle(100, 100, 50)\n  .fill('red')\n```\n\n----------------------------------------\n\nTITLE: Importing modules for PixiJS ExampleEditor\nDESCRIPTION: This snippet imports necessary modules for rendering and displaying a PixiJS example. It imports the ExampleEditor component and the content of the 'basic' JavaScript file using raw-loader. These components are used to render an interactive code example within the documentation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/offscreen-canvas/basic.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./basic';\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Example with ExampleEditor\nDESCRIPTION: This JSX snippet renders the PixiJS example using the imported ExampleEditor component. It passes the content of the IndexFile, representing the 'basic' JavaScript example, to the ExampleEditor component as the 'files' prop, allowing it to be displayed and potentially edited within the documentation page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/offscreen-canvas/basic.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Graphics Holes (v4)\nDESCRIPTION: This snippet illustrates how to create holes in a `PIXI.Graphics` object in PixiJS v4 using the `addHole` method. This method is deprecated in v5.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst graphic = new PIXI.Graphics()\n  .beginFill(0xff0000)\n  .moveTo(0, 0)\n  .lineTo(100, 0)\n  .lineTo(100, 100)\n  .lineTo(0, 100)\n  .moveTo(10, 10)\n  .lineTo(90, 10)\n  .lineTo(90, 90)\n  .lineTo(10, 90)\n  .addHole();\n```\n\n----------------------------------------\n\nTITLE: Creating and Attaching to RenderLayer - TypeScript\nDESCRIPTION: This code snippet shows how to create a RenderLayer instance and attach a sprite (redGuy) to it. Attaching an object to a layer overrides the object's default render order defined by its logical parent, placing it within the layer's rendering context.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// a layer..\nconst layer = new RenderLayer();\nstage.addChild(layer);\nlayer.attach(redGuy);\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Assets by Alias with Promises in PixiJS\nDESCRIPTION: Demonstrates adding multiple assets with aliases using `Assets.add` and then loading them simultaneously by passing an array of aliases to `Assets.load`. The returned Promise resolves with an object containing the loaded assets keyed by their aliases.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Append the application canvas to the document body\ndocument.body.appendChild(app.canvas);\n// Add the assets to load\nAssets.add({ alias: 'flowerTop', src: 'https://pixijs.com/assets/flowerTop.png' });\nAssets.add({ alias: 'eggHead', src: 'https://pixijs.com/assets/eggHead.png' });\n// Load the assets and get a resolved promise once both are loaded\nconst texturesPromise = Assets.load(['flowerTop', 'eggHead']); // => Promise<{flowerTop: Texture, eggHead: Texture}>\n// When the promise resolves, we have the texture!\ntexturesPromise.then((textures) =>\n{\n    // Create a new Sprite from the resolved loaded Textures\n    const flower = Sprite.from(textures.flowerTop);\n    flower.anchor.set(0.5);\n    flower.x = app.screen.width * 0.25;\n    flower.y = app.screen.height / 2;\n    app.stage.addChild(flower);\n    const egg = Sprite.from(textures.eggHead);\n    egg.anchor.set(0.5);\n    egg.x = app.screen.width * 0.75;\n    egg.y = app.screen.height / 2;\n    app.stage.addChild(egg);\n});\n```\n\n----------------------------------------\n\nTITLE: Get Global Position of a PixiJS Object\nDESCRIPTION: This snippet demonstrates how to obtain the global position of a PixiJS object using the `toGlobal()` function. It shows how to convert local coordinates relative to the object's parent to global coordinates relative to the top-left corner of the screen, which is useful for tasks like culling offscreen objects.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/scene-graph.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the global position of an object, relative to the top-left of the screen\nlet globalPos = obj.toGlobal(new PIXI.Point(0,0));\n```\n\n----------------------------------------\n\nTITLE: ParticleContainer Optimization for Large Onscreen Objects in PixiJS v8.5.0 - JavaScript\nDESCRIPTION: Illustrates usage of the ParticleContainer class optimized for rendering extremely large quantities of objects with static or dynamic properties for performance tuning. Suitable for particles, swarms, or similar effects in PixiJS v8.5.0 and above. Inputs are particle data and configuration flags; output is high-performance rendering with reduced overhead. Dependencies include PixiJS core and optionally supporting GPU acceleration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ParticleContainerFile from '!!raw-loader!../docs/examples/basic/particle-container';\n```\n\n----------------------------------------\n\nTITLE: PixiJS Displacement Map Crawlies\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a displacement map effect using PixiJS. It uses a displacement sprite to distort another sprite, creating a crawlies effect. The code initializes a PixiJS application, loads necessary assets (an image and a displacement map), and applies the displacement filter.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/filters-basic/displacement-map-crawlies.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./displacement-map-crawlies';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Texture Fill with Global Space in PixiJS\nDESCRIPTION: This snippet shows how to fill multiple shapes with a texture using 'global' texture space. With `textureSpace: 'global'`, the texture's position and scale are relative to the Graphics object's coordinate system, meaning the texture appears across all the shapes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst shapes = new PIXI.Graphics()\n    .rect(50,50,100, 100)\n    .circle(250,100,50)\n    .star(400,100,6,60,40)\n    .roundRect(500,50,100,100,10)\n    .fill({\n        texture,\n        textureSpace:'global'\n    });\n```\n\n----------------------------------------\n\nTITLE: Constructor Signature Changes - PixiJS TypeScript\nDESCRIPTION: Highlights the change in PixiJS v8 where many class constructors now accept a single options object instead of multiple positional arguments. This provides a more flexible and readable way to instantiate objects.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst blurFilter = new BlurFilter(8, 4, 1, 5);\nconst displacementFilter = new DisplacementFilter(sprite, 5);\nconst meshGeometry = new MeshGeometry(vertices, uvs, index);\nconst mesh = new Mesh(geometry, shader, state, drawMode);\nconst plane = new PlaneGeometry(width, height, segWidth, segHeight);\nconst nineSlicePlane = new NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight);\nconst tileSprite = new TileSprite(texture, width, height);\nconst text = new Text('Hello World', style);\nconst bitmapText = new BitmapText('Hello World', style);\nconst htmlText = new HTMLText('Hello World', style);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst blurFilter = new BlurFilter({\n    blur: 8,\n    quality: 4,\n    resolution: 1,\n    kernelSize: 5,\n});\nconst displacementFilter = new DisplacementFilter({\n    sprite,\n    scale: 5,\n});\nconst meshGeometry = new MeshGeometry({\n    positions: vertices,\n    uvs,\n    indices: index,\n    topology: 'triangle-list';\n    shrinkBuffersToFit: boolean;\n});\nconst mesh = new Mesh({\n    geometry\n    shader\n    texture\n});\nconst plane = new PlaneGeometry({\n    width,\n    height,\n    verticesX: segWidth,\n    verticesY: segHeight,\n});\nconst nineSliceSprite = new NineSliceSprite({\n    texture,\n    leftWidth,\n    topHeight,\n    rightWidth,\n    bottomHeight,\n});\nconst tileSprite = new TileSprite({\n    texture,\n    width,\n    height,\n});\nconst text = new Text({\n    text: 'Hello World',\n    style,\n});\nconst bitmapText = new BitmapText({\n    text:'Hello World',\n    style,\n});\nconst htmlText = new HTMLText({\n    text:'Hello World',\n    style,\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing and Animating Train Carriage in PIXI.js (JavaScript)\nDESCRIPTION: This snippet defines the `createTrainCarriage()` function, which assembles a train carriage from graphics primitives using PIXI.js. It creates a container with a rounded body, top edge, connectors, and animated wheels by calling the external `createTrainWheel(radius)` helper. The wheels are animated by updating their rotation each frame via the `app.ticker`. Dependencies include PIXI.js and the pre-existing `createTrainWheel` function. Inputs include no parameters (assumes required PIXI.js classes are in scope); the function returns a PIXI.Container with animated children. Ensure the PIXI Application (`app`) is already initialized.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step8/step8-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst container = new Container();\n\nconst containerHeight = 125;\nconst containerWidth = 200;\nconst containerRadius = 15;\nconst edgeHeight = 25;\nconst edgeExcess = 20;\nconst connectorWidth = 30;\nconst connectorHeight = 10;\nconst connectorGap = 10;\nconst connectorOffsetY = 20;\n\nconst graphics = new Graphics()\n    // Draw the body\n    .roundRect(edgeExcess / 2, -containerHeight, containerWidth, containerHeight, containerRadius)\n    .fill({ color: 0x725f19 })\n\n    // Draw the top edge\n    .rect(0, containerRadius - containerHeight - edgeHeight, containerWidth + edgeExcess, edgeHeight)\n    .fill({ color: 0x52431c })\n\n    // Draw the connectors\n    .rect(containerWidth + edgeExcess / 2, -connectorOffsetY - connectorHeight, connectorWidth, connectorHeight)\n    .rect(\n        containerWidth + edgeExcess / 2,\n        -connectorOffsetY - connectorHeight * 2 - connectorGap,\n        connectorWidth,\n        connectorHeight,\n    )\n    .fill({ color: 0x121212 });\n\nconst wheelRadius = 35;\nconst wheelGap = 40;\nconst centerX = (containerWidth + edgeExcess) / 2;\nconst offsetX = wheelRadius + wheelGap / 2;\n\nconst backWheel = createTrainWheel(wheelRadius);\nconst frontWheel = createTrainWheel(wheelRadius);\n\nbackWheel.x = centerX - offsetX;\nfrontWheel.x = centerX + offsetX;\nfrontWheel.y = backWheel.y = 25;\n\ncontainer.addChild(graphics, backWheel, frontWheel);\n\napp.ticker.add((time) =>\n{\n    const dr = time.deltaTime * 0.15;\n\n    backWheel.rotation += dr;\n    frontWheel.rotation += dr;\n});\n\nreturn container;\n```\n\n----------------------------------------\n\nTITLE: Animating PixiJS TilingSprite Position in JavaScript\nDESCRIPTION: This code snippet animates the tile position of a PixiJS `TilingSprite` (`overlay`). It subtracts the delta time from the ticker (`time.deltaTime`) from both the x and y components of the `tilePosition`, causing the textured pattern within the sprite to shift, creating a sense of continuous movement for the water effect. This is typically called within a game loop or ticker function.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step4/step4-content.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Extract the delta time from the Ticker object.\nconst delta = time.deltaTime;\n\n// Animate the overlay.\noverlay.tilePosition.x -= delta;\noverlay.tilePosition.y -= delta;\n```\n\n----------------------------------------\n\nTITLE: Integrating Three.js with PixiJS Using Shared WebGL Context\nDESCRIPTION: Demonstrates how to integrate Three.js with PixiJS in the same project by sharing a WebGL context, allowing seamless combination of 2D and 3D rendering capabilities.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2025-01-24-pixi-v8.7.0.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Application, Container, Graphics, Text } from 'pixi.js';\nimport * as THREE from 'three';\n\nconst app = new Application();\n\nawait app.init({\n    background: '#1099bb',\n    resizeTo: window,\n    // This enables compatibility with Three.js\n    preferences: { compatibilityMode: true }\n});\ndocument.body.appendChild(app.canvas);\n\n// Create a PixiJS UI\nconst createPixiUI = () => {\n    const ui = new Container();\n    \n    // Create a header\n    const header = new Container();\n    \n    const headerBg = new Graphics()\n        .rect(0, 0, app.screen.width, 60)\n        .fill({ color: 0x0066ff });\n    \n    const title = new Text({\n        text: 'Three.js + PixiJS Integration',\n        style: { fill: 0xffffff, fontSize: 24 }\n    });\n    title.x = 20;\n    title.y = 15;\n    \n    header.addChild(headerBg, title);\n    \n    // Create a sidebar\n    const sidebar = new Container();\n    \n    const sidebarBg = new Graphics()\n        .rect(0, 60, 200, app.screen.height - 60)\n        .fill({ color: 0x333333 });\n    \n    const buttons = ['Dashboard', 'Scene Settings', 'Lighting', 'Export'];\n    \n    buttons.forEach((text, i) => {\n        const button = new Container();\n        \n        const buttonBg = new Graphics()\n            .rect(10, 70 + i * 50, 180, 40)\n            .fill({ color: 0x555555 });\n        \n        const buttonText = new Text({\n            text,\n            style: { fill: 0xffffff, fontSize: 16 }\n        });\n        buttonText.x = 20;\n        buttonText.y = 80 + i * 50;\n        \n        button.addChild(buttonBg, buttonText);\n        button.eventMode = 'static';\n        button.cursor = 'pointer';\n        \n        sidebar.addChild(button);\n    });\n    \n    sidebar.addChild(sidebarBg);\n    \n    for (const child of sidebar.children) {\n        if (child !== sidebarBg) {\n            sidebar.addChild(child);\n        }\n    }\n    \n    ui.addChild(header, sidebar);\n    return ui;\n};\n\n// Create a Three.js scene\nconst setupThree = () => {\n    // Setup Three.js scene\n    const scene = new THREE.Scene();\n    \n    // Make the camera match our canvas size\n    const camera = new THREE.PerspectiveCamera(\n        75,\n        app.screen.width / app.screen.height,\n        0.1,\n        1000\n    );\n    camera.position.z = 5;\n    \n    // Create a cube\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshNormalMaterial();\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    \n    // Create a renderer that shares the WebGL context with PixiJS\n    const renderer = new THREE.WebGLRenderer({\n        canvas: app.canvas,\n        context: app.renderer.gl,\n        // This is important - we want Three.js to build on top of PixiJS's render\n        autoClear: false\n    });\n    \n    // Make Three.js renderer use the same viewport as PixiJS\n    renderer.setSize(app.screen.width, app.screen.height);\n    \n    // Animation loop\n    app.ticker.add(() => {\n        // We need to tell PixiJS not to clear the screen after it renders\n        app.renderer.gl.clear(app.renderer.gl.DEPTH_BUFFER_BIT);\n        \n        // Animate the cube\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        \n        // Render the Three.js scene\n        renderer.render(scene, camera);\n    });\n};\n\n// Add the PixiJS UI\napp.stage.addChild(createPixiUI());\n\n// Setup Three.js scene\nsetupThree();\n\n// Handle window resize\nwindow.addEventListener('resize', () => {\n    // No need to update PixiJS as we set resizeTo: window\n    // But we might need to update Three.js camera aspect ratio here\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Raw Code Example (JavaScript/Webpack)\nDESCRIPTION: Uses Webpack's `raw-loader` syntax (indicated by `!!raw-loader!`) to import the verbatim content of the `./texture` file (presumably containing PixiJS texture example code) into the `IndexFile` JavaScript variable.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/texture.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./texture';\n```\n\n----------------------------------------\n\nTITLE: Displaying Click Interaction with PixiJS and ExampleEditor\nDESCRIPTION: This snippet leverages the ExampleEditor component to showcase a PixiJS application. It imports the ExampleEditor component and a raw JavaScript file ('index.js') and PixiJS version dependency.  The ExampleEditor then renders the 'index.js' file which is expected to have the click implementation.\n\nDependencies: @site/src/components/Editor/ExampleEditor, raw-loader, pixi-version.json, pixi.js.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/click.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./click';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Basic cacheAsTexture Implementation in PixiJS\nDESCRIPTION: A complete example showing how to create a container with multiple sprite elements and cache it as a texture to improve rendering performance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/cache-as-texture.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as PIXI from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ background: '#1099bb', resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    // load sprite sheet..\n    await Assets.load('https://pixijs.com/assets/spritesheet/monsters.json');\n\n    // holder to store aliens\n    const aliens = [];\n    const alienFrames = ['eggHead.png', 'flowerTop.png', 'helmlok.png', 'skully.png'];\n\n    let count = 0;\n\n    // create an empty container\n    const alienContainer = new Container();\n\n    alienContainer.x = 400;\n    alienContainer.y = 300;\n\n    app.stage.addChild(alienContainer);\n\n    // add a bunch of aliens with textures from image paths\n    for (let i = 0; i < 100; i++)\n    {\n        const frameName = alienFrames[i % 4];\n\n        // create an alien using the frame name..\n        const alien = Sprite.from(frameName);\n\n        alien.tint = Math.random() * 0xffffff;\n\n        alien.x = Math.random() * 800 - 400;\n        alien.y = Math.random() * 600 - 300;\n        alien.anchor.x = 0.5;\n        alien.anchor.y = 0.5;\n        aliens.push(alien);\n        alienContainer.addChild(alien);\n    }\n\n    // this will cache the container and its children as a single texture\n    // so instead of drawing 100 sprites, it will draw a single texture!\n    alienContainer.cacheAsTexture()\n})();\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor component from PixiJS site source\nDESCRIPTION: This snippet imports the 'ExampleEditor' component from the site's source folder, enabling it to be used within the page for displaying code examples. It also imports a raw loader-loaded file containing the texture rotation code for demonstration purposes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/textures/texture-rotate.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./texture-rotate';\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetPack with PixiJS Pipes - JavaScript\nDESCRIPTION: Demonstrates a basic AssetPack configuration file (`.assetpack.js`). It shows how to import `pixiPipes` from `@assetpack/core` and define input (`entry`) and output (`output`) directories for asset processing. It utilizes the pre-configured `pixiPipes` for easy integration with PixiJS projects.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-07-18-assetpack-1.0.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .assetpack.js\nimport { pixiPipes } from '@assetpack/core';\n\nexport default {\n    entry: './raw-assets',\n    output: './public/assets',\n    pipes: [\n      /* If you are using AssetPack with PixiJS, you can use the `pixiPipes` function\n       * to add a pre-configured set of plugins, with an opinionated\n       * set of defaults for PixiJS.\n       */\n      ...pixiPipes()\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Centering a PixiJS Sprite in JavaScript\nDESCRIPTION: Positions the 'background' sprite at the center of the application screen. It sets the sprite's x and y coordinates to half the screen's width and height, respectively. Depends on the 'app.screen.width', 'app.screen.height', and the 'background' sprite object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step2/step2-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbackground.x = app.screen.width / 2;\nbackground.y = app.screen.height / 2;\n```\n\n----------------------------------------\n\nTITLE: Importing Playground Component and Version Data in JavaScript\nDESCRIPTION: This snippet imports the 'Playground' React component from a local module and JSON data containing the PixiJS version. These imports prepare the environment for rendering the component with version-specific configurations.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/playground/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Playground from '@site/src/components/Playground/index';\nimport version from '../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Loading a Web Font With FontFaceObserver in JavaScript\nDESCRIPTION: This JavaScript snippet uses the FontFaceObserver library to ensure the custom web font \"Short Stack\" is fully loaded before initializing the PixiJS application. It creates a FontFaceObserver instance targeting the font-family, calls `.load()` which returns a Promise, and upon successful loading, instantiates a PixiJS Application and appends its view to the DOM. On failure, it triggers an alert to notify that the font could not be loaded. This approach prevents fallback font rendering and ensures text appears with the correct font from the start. The snippet requires inclusion of the FontFaceObserver library and PixiJS framework.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/text.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create the loader\nlet font = new FontFaceObserver('Short Stack', {});\n// Start loading the font\nfont.load().then(() => {\n  // Successful load, start up your PixiJS app as usual\n  let app = new PIXI.Application({ width: 640, height: 360 });\n  document.body.appendChild(app.view);\n  // ... etc ...\n\n}, () => {\n  // Failed load, log the error or display a message to the user\n  alert('Unable to load required font!');\n});\n```\n\n----------------------------------------\n\nTITLE: Internal Implementation of cacheAsTexture in PixiJS\nDESCRIPTION: Explains how cacheAsTexture works internally by enabling render groups and setting the cacheAsTexture property.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/cache-as-texture.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.enableRenderGroup();\ncontainer.renderGroup.cacheAsTexture = true;\n```\n\n----------------------------------------\n\nTITLE: Adding ButtonMode Back to DisplayObject in PixiJS v7\nDESCRIPTION: Example of extending DisplayObject to add back the buttonMode property functionality in PixiJS v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DisplayObject } from 'pixi.js';\n\nObject.defineProperty(DisplayObject.prototype, 'buttonMode', {\n  get() { return this.cursor === 'pointer'; },\n  set(value) { this.cursor = value ? 'pointer' : null; },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Texture Fill to Graphics (v7)\nDESCRIPTION: This snippet illustrates how texture fills were applied to Graphics shapes in PixiJS v7 using the `beginTextureFill` method. It required specific parameters for the texture and fill options.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const rect = new Graphics()\n    .beginTextureFill({texture:Texture.WHITE, alpha:0.5, color:0xFF0000})\n    .drawRect(0, 0, 100, 100)\n    .endFill()\n    .beginFill(0xFFFF00, 0.5)\n    .drawRect(100, 0, 100, 100)\n    .endFill();\n```\n\n----------------------------------------\n\nTITLE: Animating Trees for Parallax Effect in PixiJS\nDESCRIPTION: Implements a ticker-based animation that continuously moves trees from right to left and repositions them when they move off-screen. The trees move faster than background elements to create a parallax scrolling effect.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step5/step5-content.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.ticker.add((time) =>\n{\n    const dx = time.deltaTime * 3;\n\n    trees.forEach((tree) =>\n    {\n        tree.x -= dx;\n\n        if (tree.x <= -(treeWidth / 2 + spacing))\n        {\n            tree.x += count * (treeWidth + spacing) + spacing * 3;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Fill with Style Object in PixiJS\nDESCRIPTION: This snippet creates a rectangle and fills it with a specified color and alpha (opacity) using a `FillStyle` object. This allows for more advanced customization like setting opacity.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill({\n    color: 'red',\n    alpha: 0.5, // 50% opacity\n  });\n```\n\n----------------------------------------\n\nTITLE: Drawing SVG with Graphics API - PixiJS/TypeScript\nDESCRIPTION: This snippet showcases the use of SVG drawing capabilities within the PixiJS Graphics API. It demonstrates how to use the 'svg' method to render an SVG path.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngraphics.svg('M 100 350 q 150 -300 300 0');\n```\n\n----------------------------------------\n\nTITLE: Fill with Texture in PixiJS\nDESCRIPTION: This snippet loads a texture from an asset and uses it to fill a rectangle.  It assumes that `Assets.load` is an asynchronous function that loads the image.  The texture is applied to the rectangle using the `fill` method.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst texture = await Assets.load('assets/image.png');\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill(texture);\n```\n\n----------------------------------------\n\nTITLE: Import Slots Example\nDESCRIPTION: This JavaScript code snippet imports the ExampleEditor component from a specific path and imports the Slots component's source code using raw-loader.  It then renders the ExampleEditor, passing the Slots component's code as the content for the editor to display. The index.js file contains the actual Slots component implementation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/slots.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./slots';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Creating Displacement Sprite in PixiJS (JavaScript)\nDESCRIPTION: This snippet creates a PixiJS Sprite instance from an asset named 'displacement'. It then sets the `wrapMode` of the base texture to 'repeat', which is required for the displacement filter's shader to tile the texture correctly across the affected area.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step5/step5-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sprite = Sprite.from('displacement');\n\nsprite.texture.baseTexture.wrapMode = 'repeat';\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Object with Graphics-like Styling - PixiJS/TypeScript\nDESCRIPTION: This snippet illustrates the creation of a `Text` object in PixiJS, demonstrating how to apply styles that mirror the graphics API, including filling with textures and applying strokes. This allows more versatility with textures and gradients.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst myText = new Text({\n  text: 'hello im some fancy text',\n  // font will be dynamically created!\n  style:{\n    fontFamily: 'Outfit',\n    fontSize: 12,\n    fill: { texture, color:'red'} // same as graphics api fills\n    stroke: { width:3, color:'blue' } // same as graphics api strokes\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Promises with PixiJS in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement and utilize JavaScript Promises to handle asynchronous behavior within a PixiJS context. It requires the PixiJS library as a dependency and assumes familiarity with JavaScript asynchronous programming constructs. The example typically loads resources or performs asynchronous operations, with parameters specifying resource locations or callback behavior, and outputs processed or loaded data through standard Promise resolution or rejection patterns. Limitations are inherent to browser support for Promises and the necessity of a proper resource path for successful execution.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/assets/promise.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example PixiJS code using Promises for async operations\n// ...actual code would be loaded from ./promise file\n\n```\n\n----------------------------------------\n\nTITLE: Await Assets.load with Alias or URL in PixiJS\nDESCRIPTION: A simple example showing the use of `await Assets.load()` with a file path or alias within an async function, yielding the resolved asset directly into a variable.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst texture = await Assets.load('examples/assets/bunny.png');\n```\n\n----------------------------------------\n\nTITLE: Creating a Texture Source Using ImageSource in PixiJS v8 with JavaScript\nDESCRIPTION: Displays how to create a new texture source using the ImageSource class in PixiJS v8. This replaces the older BaseTexture construction model. The snippet loads an image resource asynchronously, then creates an ImageSource wrapping the loaded image, followed by creating a Texture object sourcing from the ImageSource. This approach assumes that resource management and loading happen outside the Texture creation, consistent with v8’s separation of loading and texturing.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst image = new Image();\n\nimage.onload = function(){\n  // create a texture source\n  const source = new ImageSource({\n    resource: image,\n  });\n\n  // create a texture\n  const texture = new Texture({\n    source\n  });\n}\n\nimage.src = 'myImage.png';\n```\n\n----------------------------------------\n\nTITLE: Importing Scratch Card JavaScript Source for Pixi.js Demo in JSX\nDESCRIPTION: This code snippet demonstrates importing raw JavaScript source code for a scratch card example using a raw-loader and preparing it to be passed as a file into the ExampleEditor React component. Dependencies including the Pixi.js version are also imported from a JSON file. It is essential for setting up the live editable environment in the documentation site, allowing users to interact with and view the example code alongside the running demo.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/advanced/scratch-card.mdx#_snippet_0\n\nLANGUAGE: JavaScript/JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";  import IndexFile from '!!raw-loader!./scratch-card';  import version from '../../pixi-version.json';  <ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Adding a Sprite to the PixiJS Stage (JavaScript)\nDESCRIPTION: Adds the previously created 'bunny' Sprite object to the application's stage (`app.stage`). The stage is the root container in the PixiJS scene graph, and any objects added as its children will be rendered.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v7.0.0/gettingStarted/step2-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.stage.addChild(bunny)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter (v7)\nDESCRIPTION: This snippet demonstrates the v7 signature for creating a custom `Filter`. It took vertex and fragment source strings directly, followed by a uniform object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const filter = new Filter(vertex, fragment, {\n      uTime: 0.0,\n  });\n```\n\n----------------------------------------\n\nTITLE: Combine Parts and Animate Train - JavaScript\nDESCRIPTION: Combines the train head body (graphics), the back wheel, the middle wheel, and the front wheel into a PixiJS Container. It then adds a ticker to animate the rotation of each wheel, with the back wheel rotating slower than the others.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step7/step7-content.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = new Container();\n\ncontainer.addChild(graphics, backWheel, midWheel, frontWheel);\n\napp.ticker.add((time) =>\n{\n    const dr = time.deltaTime * 0.15;\n\n    backWheel.rotation += dr * (smallWheelRadius / bigWheelRadius);\n    midWheel.rotation += dr;\n    frontWheel.rotation += dr;\n});\n\nreturn container;\n```\n\n----------------------------------------\n\nTITLE: Converting Loader to Assets in PixiJS v7\nDESCRIPTION: Example showing how to migrate from the v6 Loader pattern to the new Promise-based Assets API in v7. The new approach is more concise and uses modern JavaScript features like async/await.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v7.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Loader, Sprite } from 'pixi.js';\n\nconst loader = new Loader();\nloader.add('background', 'path/to/assets/background.jpg');\nloader.load((loader, resources) => {\n  const image = Sprite.from(resources.background.texture);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Assets, Sprite } from 'pixi.js';\n\nconst texture = await Assets.load('path/to/assets/background.jpg');\nconst image = Sprite.from(texture);\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pixel-Perfect Line with PixiJS Graphics (TypeScript)\nDESCRIPTION: Demonstrates how to instantiate a PixiJS Graphics object and draw a single line with the 'pixelLine' property set to true, ensuring it stays 1 pixel thick regardless of object scaling. Requires PixiJS to be installed and initialized as 'app'. The 'moveTo' and 'lineTo' methods are chained, followed by 'stroke' with a red color and 'pixelLine' enabled. After adding the graphics object to the stage, scaling the object does not affect the line's thickness. Input: None (direct script initialization). Output: Stateless—renders a 1px red line on the canvas, even if scaled.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-pixel-line.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a Graphics object and draw a pixel-perfect line\nlet graphics = new Graphics()\n  .moveTo(0, 0)\n  .lineTo(100, 100)\n  .stroke({ color: 0xff0000, pixelLine: true });\n\n// Add it to the stage\napp.stage.addChild(graphics);\n\n// Even if we scale the Graphics object, the line remains 1 pixel wide\ngraphics.scale.set(2);\n```\n\n----------------------------------------\n\nTITLE: Texture Fill from Sprite Sheet in PixiJS\nDESCRIPTION: This snippet demonstrates how to use a specific frame from a sprite sheet as a texture fill. It creates a new texture from a sprite sheet texture using `renderer.generateTexture(Sprite.from(spriteSheetTexture))` and then fills the rectangle with it.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst spriteSheetTexture = Texture.from('assets/my-sprite-sheet.png');\nconst newTexture = renderer.generateTexture(Sprite.from(spriteSheetTexture));\n\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill(newTexture);\n```\n\n----------------------------------------\n\nTITLE: Configuring ExampleEditor for Three.js and PixiJS Integration\nDESCRIPTION: React JSX code instantiating the `ExampleEditor` component. It configures the editor to display the content of the `index.js` file (loaded into the `IndexFile` variable) and specifies project dependencies on the latest versions of 'three' and 'pixi.js'.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/three-and-pixi.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={\n    { \"three\": \"latest\", \"pixi.js\": \"latest\" }\n} />\n```\n\n----------------------------------------\n\nTITLE: Handling Key-Down Events for Controller State (JavaScript)\nDESCRIPTION: Updates the controller's state when a key is pressed. It sets the 'pressed' flag to true and checks for a double-tap by comparing the current time with the last key-up timestamp for that key (within a 300ms threshold). Requires `keyMap` (mapping event codes to internal key names) and `this.keys` (controller state object) to be defined.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step3/step3-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst key = keyMap[event.code];\n\nif (!key) return;\n\nconst now = Date.now();\n\nthis.keys[key].pressed = true;\nthis.keys[key].doubleTap = this.keys[key].doubleTap || now - this.keys[key].timestamp < 300;\n```\n\n----------------------------------------\n\nTITLE: Using HitTest with Events in PixiJS v6\nDESCRIPTION: Example of using the hitTest method with the interaction plugin in PixiJS v6.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application} from 'pixi.js';\n\nconst app = new Application();\napp.renderer.plugins.interaction.hitTest({x, y});\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Collision Detection Example in PixiJS\nDESCRIPTION: This JSX code imports the necessary components for displaying an interactive code editor with a collision detection example in PixiJS. It uses a raw loader to import the example file and sets up the editor with appropriate dependencies.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/advanced/collision-detection.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./collision-detection';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Updating translationMatrix Uniform in PixiJS v5 Mesh._renderDefault Override\nDESCRIPTION: Illustrates the PixiJS v5 approach for conditionally updating the 'translationMatrix' uniform within a custom Mesh._renderDefault method override. This code snippet checks if the uniform exists on the shader program before assigning the mesh's world transform.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v6.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (shader.program.uniformData.translationMatrix)\n{\n    shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ExampleEditor in JSX for PixiJS Blend Modes Demo\nDESCRIPTION: This code imports the ExampleEditor component and a raw blend-modes file to create an interactive example of blend modes in PixiJS. The component loads the index.js file content to display a live demonstration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/blend-modes.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./blend-modes';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing Shader Files in JavaScript\nDESCRIPTION: This snippet imports raw shader source files in JavaScript for use in a WebGL rendering context. It imports index.js, and shader files in GLSL (vertex and fragment shaders) and WGSL, utilizing raw-loader syntax. These imported files are passed as props to the ExampleEditor component, enabling dynamic shader editing and display within the page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/triangle-color.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./triangle-color/index';\nimport triangleColorVert from '!!raw-loader!./triangle-color/triangleColor.vert';\nimport triangleColorFrag from '!!raw-loader!./triangle-color/triangleColor.frag';\nimport triangleColorWgsl from '!!raw-loader!./triangle-color/triangleColor.wgsl';\n\n<ExampleEditor files={{\n    \"index.js\": IndexFile,\n    'triangleColor.vert': triangleColorVert,\n    'triangleColor.frag': triangleColorFrag,\n    'triangleColor.wgsl': triangleColorWgsl,\n}} />\n```\n\n----------------------------------------\n\nTITLE: Loading PixiJS Library via CDN\nDESCRIPTION: HTML script tag for loading the PixiJS library from the official CDN. Uses the non-minified development version for better debugging.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://pixijs.download/release/pixi.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor with texture-rotate code file\nDESCRIPTION: This snippet renders the 'ExampleEditor' component, passing the imported 'IndexFile' as a file to display within the editor. It provides an interactive environment to view and test the texture rotation implementation, integrating the code snippet directly into the documentation page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/textures/texture-rotate.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: PixiJS Multipass Mesh Example Setup\nDESCRIPTION: This JavaScript snippet sets up a PixiJS example using the ExampleEditor component. It imports necessary modules like ExampleEditor and raw-loader for code inclusion. It specifies the files to be included, such as JavaScript and shader files for rendering a multipass mesh effect. The ExampleEditor is used to display the code example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/multipass-mesh.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./multipass-mesh/index';\nimport multipassMeshVert from '!!raw-loader!./multipass-mesh/multipassMesh.vert';\nimport multipassMeshGridFrag from '!!raw-loader!./multipass-mesh/grid.frag';\nimport multipassMeshRippleFrag from '!!raw-loader!./multipass-mesh/ripple.frag';\nimport multipassMeshNoiseFrag from '!!raw-loader!./multipass-mesh/noise.frag';\nimport multipassMeshWaveFrag from '!!raw-loader!./multipass-mesh/wave.frag';\nimport multipassMeshCombineFrag from '!!raw-loader!./multipass-mesh/combine.frag';\n\n<ExampleEditor files={{\n    \"index.js\": IndexFile,\n    'multipassMesh.vert': multipassMeshVert,\n    'grid.frag': multipassMeshGridFrag,\n    'ripple.frag': multipassMeshRippleFrag,\n    'noise.frag': multipassMeshNoiseFrag,\n    'wave.frag': multipassMeshWaveFrag,\n    'combine.frag': multipassMeshCombineFrag,\n}} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting up PixiJS Spinner Example in React\nDESCRIPTION: This code imports necessary components and files for displaying a PixiJS spinner example in an embedded editor. It uses the ExampleEditor component to render an interactive code editor with the spinner implementation, including the appropriate PixiJS dependency version.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/advanced/spinners.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./spinners';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Code with ExampleEditor Component\nDESCRIPTION: This JSX snippet demonstrates using the custom `ExampleEditor` React component within an MDX file. It passes the imported example code (`IndexFile`) as a file named `index.js` and the PixiJS dependency version (`version.npm`) to the component's props. This renders the interactive code editor on the page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-advanced/custom.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}}/>\n```\n\n----------------------------------------\n\nTITLE: Manually Managing PixiJS Extensions in Custom Builds Using TypeScript\nDESCRIPTION: Shows how to manually import specific PixiJS extensions when disabling the default auto-import feature during application initialization. Useful for controlling bundle size and application features. Requires importing needed extensions explicitly before creating the application. The code imports both default and non-default extensions, initializes an Application instance, then disables automatic imports via the init option.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n  // imported by default\n  import 'pixi.js/accessibility';\n  import 'pixi.js/app';\n  import 'pixi.js/events';\n  import 'pixi.js/filters';\n  import 'pixi.js/sprite-tiling';\n  import 'pixi.js/text';\n  import 'pixi.js/text-bitmap';\n  import 'pixi.js/text-html';\n  import 'pixi.js/graphics';\n  import 'pixi.js/mesh';\n  import 'pixi.js/sprite-nine-slice';\n\n  // not added by default, everyone needs to import these manually\n  import 'pixi.js/advanced-blend-modes';\n  import 'pixi.js/unsafe-eval';\n  import 'pixi.js/prepare';\n  import 'pixi.js/math-extras';\n  import 'pixi.js/dds';\n  import 'pixi.js/ktx';\n  import 'pixi.js/ktx2';\n  import 'pixi.js/basis';\n\n  import { Application } from 'pixi.js';\n\n  const app = new Application();\n\n  await app.init({\n      manageImports: false, // disable importing the above extensions\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter (v8)\nDESCRIPTION: This snippet shows the v8 signature for creating a custom `Filter`. It now requires an options object containing a `glProgram` (created from vertex/fragment sources) and a `resources` object for uniforms and other resources.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n    const filter = new Filter({\n        glProgram: GlProgram.from({\n            fragment,\n            vertex,\n        }),\n        resources: {\n            timeUniforms: {\n                uTime: { value: 0.0, type: 'f32' },\n            },\n        },\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating Assets API in PixiJS\nDESCRIPTION: Shows the updated syntax for adding assets to the Assets manager after deprecations were removed.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nimport { Assets } from 'pixi.js';\n\nAssets.add('bunny', 'bunny.png');\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { Assets } from 'pixi.js';\n\nAssets.add({ alias: 'bunny', src: 'bunny.png' });\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Render Group on PixiJS Container - TypeScript/JavaScript\nDESCRIPTION: Shows how to enable GPU-accelerated transforms for a PixiJS Container by setting the `isRenderGroup` option during creation. This feature improves performance for scenarios involving camera movement (panning/zooming) over large static worlds by handling container transforms on the GPU.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = new Container({\n  isRenderGroup:true // this containers transform is now handled on the GPU!\n})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Async Nature of Promise Handlers\nDESCRIPTION: Demonstrates the asynchronous nature of `.then()` promise handlers. Even if a promise is already resolved, the code within `.then()` will execute after the synchronous code following the `.then()` call finishes, due to the microtask queue.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(1);\nalreadyResolvedPromise.then(() => console.log(2));\nconsole.log(3);\n\n// Console output:\n// 1\n// 3\n// 2\n```\n\n----------------------------------------\n\nTITLE: Instantiate Train Wheels and Position - JavaScript\nDESCRIPTION: Instantiates three train wheels (one big and two small) using the `createTrainWheel` helper function.  It also sets their positions relative to each other to create a realistic train wheel arrangement.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step7/step7-content.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bigWheelRadius = 55;\nconst smallWheelRadius = 35;\nconst wheelGap = 5;\nconst wheelOffsetY = 5;\n\nconst backWheel = createTrainWheel(bigWheelRadius);\nconst midWheel = createTrainWheel(smallWheelRadius);\nconst frontWheel = createTrainWheel(smallWheelRadius);\n\nbackWheel.x = bigWheelRadius;\nbackWheel.y = wheelOffsetY;\nmidWheel.x = backWheel.x + bigWheelRadius + smallWheelRadius + wheelGap;\nmidWheel.y = backWheel.y + bigWheelRadius - smallWheelRadius;\nfrontWheel.x = midWheel.x + smallWheelRadius * 2 + wheelGap;\nfrontWheel.y = midWheel.y;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Asynchronous Nature of Promise Handlers in JavaScript\nDESCRIPTION: Shows the asynchronous execution order of promise handlers (.then) even when the promise is already resolved. Highlights that synchronous code following a .then executes before the .then callback. There are no external dependencies. Input involves an already resolved promise, and output is console logging order. This example demonstrates microtask queue behavior relevant for understanding PixiJS asset promise usage.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/assets.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(1);\nalreadyResolvedPromise.then(() => console.log(2));\nconsole.log(3);\n\n// Console output:\n// 1\n// 3\n// 2\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Mountain Groups (PixiJS, JavaScript)\nDESCRIPTION: This snippet demonstrates setting up two instances of the mountain group for a seamless looping effect. It assumes the existence of a `createMountainGroup(app)` function that returns a Graphics object configured as shown in the previous snippet. It creates two groups, offsets the second group horizontally by the screen width, and adds both to the application's stage for display.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step4/step4-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst group1 = createMountainGroup(app);\nconst group2 = createMountainGroup(app);\n\ngroup2.x = app.screen.width;\napp.stage.addChild(group1, group2);\n```\n\n----------------------------------------\n\nTITLE: Setting Transparency for Interactive Graphics in PixiJS v5 JavaScript\nDESCRIPTION: Compares the recommended way (setting the overall `alpha` property to 0) versus an unreliable way (setting alpha to 0 in `beginFill`) for making a `PIXI.Graphics` object transparent while retaining interactivity in v5. Using fill alpha for this specific purpose is considered undefined behavior.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ngraphics.beginFill(0xffffff, 0.0); //bad\ngraphics.alpha = 0; //good\n```\n\n----------------------------------------\n\nTITLE: Switching from InteractionManager to EventSystem in PixiJS v6\nDESCRIPTION: Example of how to use EventSystem from @pixi/events package in PixiJS v6 before upgrading to v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InteractionManager, extensions, Application } from 'pixi.js';\nimport { EventSystem } from '@pixi/events';\n\n// Uninstall interaction\nextensions.remove(InteractionManager);\n\n// Create the renderer or application\nconst app = new Application();\n\n// Install events\napp.renderer.addSystem(EventSystem, 'events');\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for PixiJS Example (JavaScript)\nDESCRIPTION: Imports the necessary React component `ExampleEditor`, loads the raw content of the example code file (`./merging-geometry/index.js`) using `raw-loader`, and imports the required PixiJS version from a JSON file.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/merging-geometry.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./merging-geometry';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Editor for Nested Boundary with Projection in PixiJS - JavaScript\nDESCRIPTION: This snippet imports the ExampleEditor React component and references an external implementation file (index.js) to display an interactive example of nested boundaries using projection in PixiJS. Dependencies include 'pixi.js' and '@pixi/graphics-extras', both pulled from a version specification. The main parameters are the example file and the required module versions; this setup is intended for integration in a documentation or demo page, does not handle business logic or rendering directly, and assumes a compatible project environment with required dependencies installed.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/nested-boundary-with-projection.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from '@site/src/components/Editor/ExampleEditor';\nimport IndexFile from '!!raw-loader!./nested-boundary-with-projection';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor\n    files={{ 'index.js': IndexFile }}\n    dependencies={{ 'pixi.js': version.npm, '@pixi/graphics-extras': version.npm }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating from getBounds to getBounds().rectangle in PixiJS\nDESCRIPTION: Shows how to access the rectangle from the new Bounds object returned by getBounds() instead of accessing the Rectangle directly.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\nconst bounds = container.getBounds();\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst bounds = container.getBounds().rectangle;\n```\n\n----------------------------------------\n\nTITLE: Initializing Shader Toy Mesh Example with pixi.js in JavaScript\nDESCRIPTION: This snippet imports the raw source code for the Shader Toy Mesh example and the current pixi.js version, then provides these as props to the ExampleEditor React component. It enables rendering and live editing of the shader mesh demo within the web application. Dependencies include React and the pixi.js library at the specified npm version. Inputs are the example source code and pixi.js version; the output is an interactive editor embedding the example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/shader-toy-mesh.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./shader-toy-mesh';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline SVG String as Graphics in PixiJS\nDESCRIPTION: Creates a new PixiJS `Graphics` object and renders an inline SVG string directly using the `.svg()` method. This parses the SVG and converts it into vector geometry within the Graphics object, allowing for scalable rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/svg.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst graphics = new Graphics()\n   .svg('<svg width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"red\"/></svg>');\n```\n\n----------------------------------------\n\nTITLE: Positioning and Adding Layers to Scene in PixiJS\nDESCRIPTION: Calculates the floor height for proper vertical positioning, offsets the background and midground layers to align with the platform floor, and adds all layers to the scene view.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step5/step5-content.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.floorHeight = platformHeight * 0.43;\nthis.background.y = this.midground.y = -this.floorHeight;\nthis.view.addChild(this.sky, this.background, this.midground, this.platform);\n```\n\n----------------------------------------\n\nTITLE: Importing Community Filters (v8)\nDESCRIPTION: This snippet demonstrates the v8 import path for community filters from the `pixi-filters` package, accessed as sub-modules. The `@pixi/filter-*` packages are no longer maintained for v8.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AdjustmentFilter } from 'pixi-filters/adjustment';\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Shared Shader in JavaScript\nDESCRIPTION: This snippet imports required modules and raw files. It imports the ExampleEditor component from the local components folder, and raw-loader imports for the index.js file, sharedShader.vert file, and sharedShader.frag file. These imports prepare the environment for rendering the shader example within the Docusaurus context.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/shared-shader.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./shared-shader/index';\nimport sharedShaderVert from '!!raw-loader!./shared-shader/sharedShader.vert';\nimport sharedShaderFrag from '!!raw-loader!./shared-shader/sharedShader.frag';\n```\n\n----------------------------------------\n\nTITLE: Accessing Extract and Prepare in PixiJS v7\nDESCRIPTION: Example of accessing the extract and prepare systems in PixiJS v7, which are now directly on the renderer.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrenderer.extract\nrenderer.prepare\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Matrix Example with PixiJS in JavaScript\nDESCRIPTION: This snippet imports the PixiJS ExampleEditor UI component and loads a JavaScript file (color-matrix) containing a code example. It integrates the code and editor into the documentation page, allowing users to view and interact with code demonstrating the use of a color matrix effect. Dependencies include the ExampleEditor component and the color-matrix code file, with the expected input being a valid example JavaScript file and the output being a rendered, interactive editor for demonstration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/filters-basic/color-matrix.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./color-matrix';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pixel-Perfect UI Separator with PixiJS Graphics (TypeScript)\nDESCRIPTION: Creates a single horizontal green separator line using PixiJS Graphics, ensuring the line remains 1 pixel thick using the 'pixelLine' option. Prerequisites include a PixiJS app environment. The line begins at (0, 50) and spans 200 pixels horizontally. Input: None. Output: Statically renders a crisp 1px horizontal green separator.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-pixel-line.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a separator line that will always be 1 pixel thick\nconst separator = new Graphics()\n    // Start at x=0, y=50\n    .moveTo(0, 50)\n    // Draw a horizontal line 200 pixels to the right\n    .lineTo(200, 50)\n    // Stroke in green with pixel-perfect 1px width\n    .stroke({ color: 0x00ff00, pixelLine: true });\n```\n\n----------------------------------------\n\nTITLE: Loading raw code of textured mesh example\nDESCRIPTION: Imports the raw text content of 'textured-mesh-basic' JavaScript file using Webpack's raw-loader, enabling it to be rendered or analyzed as code within the editor. This step captures the code snippet for documentation or educational display purposes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/textured-mesh-basic.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./textured-mesh-basic';\n```\n\n----------------------------------------\n\nTITLE: Initiating Background Asset Bundle Loading in PixiJS (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates initializing a PixiJS application, defining an asset manifest with multiple bundles, and using `Assets.backgroundLoadBundle` to start loading these bundles in the background. This allows the application to become interactive faster while subsequent assets are downloaded passively.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Assets, Sprite } from 'pixi.js';\n\n// Create a new application\nconst app = new Application();\n\nasync function init()\n{\n    // Initialize the application\n    await app.init({ background: '#1099bb', resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    // Manifest example\n    const manifestExample = {\n        bundles: [\n            {\n                name: 'load-screen',\n                assets: [\n                    {\n                        alias: 'flowerTop',\n                        src: 'https://pixijs.com/assets/flowerTop.png',\n                    },\n                ],\n            },\n            {\n                name: 'game-screen',\n                assets: [\n                    {\n                        alias: 'eggHead',\n                        src: 'https://pixijs.com/assets/eggHead.png',\n                    },\n                ],\n            },\n        ],\n    };\n\n    await Assets.init({ manifest: manifestExample });\n\n    // Bundles can be loaded in the background too!\n    Assets.backgroundLoadBundle(['load-screen', 'game-screen']);\n}\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Animating GraphicsContext Swap\nDESCRIPTION: This snippet demonstrates swapping between two pre-created `GraphicsContext` objects for animation purposes. It leverages the `context` property of the `Graphics` object to update the displayed shape. The method uses pre-built GraphicsContexts to save performance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet circleContext = new GraphicsContext()\n  .circle(100, 100, 50)\n  .fill('red')\n\nlet rectangleContext = new GraphicsContext()\n  .rect(0, 0, 50, 50)\n  .fill('red')\n\nlet frames = [circleContext, rectangleContext];\nlet frameIndex = 0;\n\nconst graphics = new Graphics(frames[frameIndex]);\n\n// animate from square to circle:\n\nfunction update()\n{\n  // swap the context - this is a very cheap operation!\n  // much cheaper than clearing it each frame.\n  graphics.context = frames[frameIndex++%frames.length];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Animated Sprite Jet Example\nDESCRIPTION: This code snippet renders the ExampleEditor component with the JavaScript code and dependencies for the animated sprite jet example. It passes the JavaScript code as a file named \"index.js\" and specifies \"pixi.js\" as a dependency with its version number.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/sprite/animated-sprite-jet.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Drawing Mountain Group Shapes (PixiJS Graphics, JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the PixiJS Graphics API to draw multiple mountain shapes within a single Graphics instance. It calculates positions and heights based on the screen dimensions and uses `moveTo` and `bezierCurveTo` to define the shapes, followed by `fill` to color them. This instance represents a single group of mountains.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step4/step4-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphics = new Graphics();\nconst width = app.screen.width / 2;\nconst startY = app.screen.height;\nconst startXLeft = 0;\nconst startXMiddle = Number(app.screen.width) / 4;\nconst startXRight = app.screen.width / 2;\nconst heightLeft = app.screen.height / 2;\nconst heightMiddle = (app.screen.height * 4) / 5;\nconst heightRight = (app.screen.height * 2) / 3;\nconst colorLeft = 0xc1c0c2;\nconst colorMiddle = 0x7e818f;\nconst colorRight = 0x8c919f;\n\ngraphics\n    // Draw the middle mountain\n    .moveTo(startXMiddle, startY)\n    .bezierCurveTo(\n        startXMiddle + width / 2,\n        startY - heightMiddle,\n        startXMiddle + width / 2,\n        startY - heightMiddle,\n        startXMiddle + width,\n        startY,\n    )\n    .fill({ color: colorMiddle })\n\n    // Draw the left mountain\n    .moveTo(startXLeft, startY)\n    .bezierCurveTo(\n        startXLeft + width / 2,\n        startY - heightLeft,\n        startXLeft + width / 2,\n        startY - heightLeft,\n        startXLeft + width,\n        startY,\n    )\n    .fill({ color: colorLeft })\n\n    // Draw the right mountain\n    .moveTo(startXRight, startY)\n    .bezierCurveTo(\n        startXRight + width / 2,\n        startY - heightRight,\n        startXRight + width / 2,\n        startY - heightRight,\n        startXRight + width,\n        startY,\n    )\n    .fill({ color: colorRight });\n\nreturn graphics;\n```\n\n----------------------------------------\n\nTITLE: Preloading Bitmap Fonts Before PixiJS Application Initialization in TypeScript\nDESCRIPTION: Illustrates how to preload bitmap fonts using PixiJS’s Assets system before initializing the Application to ensure resources are available when needed. The example imports the 'text-bitmap' extension and Assets utility, loads a font asset asynchronously, then initializes a new Application instance. This sequence is necessary because without the 'text-bitmap' extension, bitmap fonts won't load properly.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport 'pixi.js/text-bitmap';\nimport { Assets, Application } from 'pixi.js';\n\nawait Assets.load('my-font.fnt'); // If 'pixi.js/text-bitmap' is not imported, this will not load\nawait new Application().init();\n```\n\n----------------------------------------\n\nTITLE: Radial Gradient Fill in PixiJS\nDESCRIPTION: This snippet creates a radial gradient using `FillGradient` with a color transition from yellow to green and fills a rectangle with it. Radial gradients blend colors from one circle to another.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst gradient = new FillGradient({\n  type: 'radial',\n  colorStops: [\n    { offset: 0, color: 'yellow' },\n    { offset: 1, color: 'green' },\n  ],\n});\n\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill(gradient);\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions in PixiJS v6\nDESCRIPTION: Example of manually installing extensions in PixiJS v6, which required explicit registration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AccessibilityManager } from '@pixi/accessibility';\nimport { extensions } from '@pixi/core';\nextensions.add(AccessibilityManager);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering the PixiJS Playground Component in React - JavaScript\nDESCRIPTION: This snippet imports the Playground component from the local project and the PixiJS version from a JSON file. It then renders the Playground component, passing in the version as a prop to ensure the proper library version is used. Dependencies include React, the custom Playground component, and the pixi-version.json file. The Playground is integrated via JSX and is expected to render an interactive canvas or editor within the documentation site.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/playground/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Playground from '@site/src/components/Playground/index';\nimport version from '../pixi-version.json';\n\n<Playground pixiVersion={version} />\n```\n\n----------------------------------------\n\nTITLE: Defining the Animation Map for Character States\nDESCRIPTION: Creates an object mapping character movement states to their corresponding Spine animation names and behavior customizations such as looping and timing scale. This map facilitates easy reference and management of animations within the character control system.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step4/step4-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst animationMap = {\n    idle: {\n        name: 'idle',\n        loop: true,\n    },\n    walk: {\n        name: 'walk',\n        loop: true,\n    },\n    run: {\n        name: 'run',\n        loop: true,\n    },\n    jump: {\n        name: 'jump',\n        timeScale: 1.5,\n    },\n    hover: {\n        name: 'hoverboard',\n        loop: true,\n    },\n    spawn: {\n        name: 'portal',\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component in JavaScript\nDESCRIPTION: This snippet imports the 'ExampleEditor' React component from the specified path, enabling embedding of code examples within documentation. It also imports raw content of 'tiling-sprite' and the PixiJS version for use in the editor environment.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/sprite/tiling-sprite.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./tiling-sprite';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for PixiJS v6 TypeScript Projects\nDESCRIPTION: Updates the tsconfig.json file for TypeScript projects using PixiJS v6. Sets 'moduleResolution' to 'node' and enables 'esModuleInterop' to ensure proper handling of module imports and compatibility with third-party dependencies like EventEmitter3.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v6.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",\n    // Required for importing 3rd-party dependencies like EventEmitter3\n    \"esModuleInterop\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Shader (v8)\nDESCRIPTION: This snippet demonstrates the v8 method for creating a WebGL-only shader using `Shader.from`. It now requires an options object with a `gl` property containing vertex and fragment sources, and a `resources` property for texture sources, styles, and uniform groups.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst shader = Shader.from({\n    gl: { vertex, fragment },\n    resources, // resource used from above including uniform groups\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cross-Fade Duration for Spine State\nDESCRIPTION: Sets the default transition duration between animations in the Spine `state.data`, enabling smooth cross-fades when switching animations, which enhances visual fluidity. Default mix duration is specified in seconds.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step4/step4-content.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.spine.state.data.defaultMix = 0.2; // seconds for animation blending\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code for Example Editor\nDESCRIPTION: JavaScript import statements used within a React component or MDX file. It imports the `ExampleEditor` component from a local path and loads the raw content of the `./three-and-pixi` file (presumably `index.js`) into the `IndexFile` variable using `raw-loader`.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/three-and-pixi.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./three-and-pixi';\n```\n\n----------------------------------------\n\nTITLE: Drawing Tree Crown with Stacked Triangles in PixiJS\nDESCRIPTION: Creates a tree crown by drawing multiple stacked triangles that get progressively smaller towards the top. Each triangle slightly overlaps with the one below it, creating a pine tree appearance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step5/step5-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst crownHeight = height - trunkHeight;\nconst crownLevels = 4;\nconst crownLevelHeight = crownHeight / crownLevels;\nconst crownWidthIncrement = width / crownLevels;\nconst crownColor = 0x264d3d;\n\nfor (let index = 0; index < crownLevels; index++)\n{\n    const y = -trunkHeight - crownLevelHeight * index;\n    const levelWidth = width - crownWidthIncrement * index;\n    const offset = index < crownLevels - 1 ? crownLevelHeight / 2 : 0;\n\n    graphics\n        .moveTo(-levelWidth / 2, y)\n        .lineTo(0, y - crownLevelHeight - offset)\n        .lineTo(levelWidth / 2, y)\n        .fill({ color: crownColor });\n}\n\nreturn graphics;\n```\n\n----------------------------------------\n\nTITLE: PerspectiveMesh for 3D Effects in PixiJS v8.3.0 - JavaScript\nDESCRIPTION: Introduces the PerspectiveMesh type that enables 3D perspective effects on 2D meshes within PixiJS. This experimental feature lets developers simulate depth and 3D transformations. Inputs are mesh vertices and textures; output is a transformed mesh with perspective distortion. Requires PixiJS v8.3.0 or later and familiarity with mesh manipulation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PerspectiveMeshFile from '!!raw-loader!../docs/examples/mesh-and-shaders/perspective-mesh';\n```\n\n----------------------------------------\n\nTITLE: Migrating from Math Package to Core in PixiJS v7\nDESCRIPTION: Examples showing how to update import statements for math, settings, constants, and utils which are now re-exported through the core package instead of requiring separate imports.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v7.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { ALPHA_MODES } from '@pixi/constants';\nimport { string2hex } from '@pixi/utils';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rectangle, settings, ALPHA_MODES, utils } from '@pixi/core';\n\nconst { string2hex } = utils;\n```\n\n----------------------------------------\n\nTITLE: Creating PixiJS TilingSprite in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TilingSprite` in PixiJS using a texture loaded from an alias ('overlay'). It sets the sprite's dimensions to the application screen size and adds it as a child to the main application stage, making it visible. Requires a PixiJS application instance (`app`) and a loaded texture.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step4/step4-content.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a water texture object.\nconst texture = Texture.from('overlay');\n\n// Create a tiling sprite with the water texture and specify the dimensions.\noverlay = new TilingSprite({\n    texture,\n    width: app.screen.width,\n    height: app.screen.height,\n});\n\n// Add the overlay to the stage.\napp.stage.addChild(overlay);\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL and WebGPU Shader (v8)\nDESCRIPTION: This snippet shows how to create a shader compatible with both WebGL and WebGPU in PixiJS v8. The `Shader.from` options object requires separate `gl` and `gpu` properties for the respective shader sources, plus a `resources` property.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst shader = Shader.from({\n    gl: { vertex, fragment },\n    gpu: {\n        vertex: {\n            entryPoint: 'mainVert',\n            source,\n        },\n        fragment: {\n            entryPoint: 'mainFrag',\n            source,\n        },\n    },\n    resources, // resource used from above including uniform groups\n\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor in PixiJS v7\nDESCRIPTION: Example of setting the cursor property directly in PixiJS v7, replacing the buttonMode property.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.cursor = 'pointer';\n```\n\n----------------------------------------\n\nTITLE: Using ExampleEditor to Display Code\nDESCRIPTION: This snippet utilizes the `<ExampleEditor>` component to display and potentially allow editing of the code contained within the `IndexFile`. It passes a JavaScript object as the `files` prop, where the keys are file names and the values are file contents. In this case, the 'index.js' file is assigned the content of the IndexFile variable.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/filters-basic/blur.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Import PIXI (Namespace)\nDESCRIPTION: This snippet demonstrates the correct way to import PixiJS as a namespace when using a bundler in v5. This is the recommended way to access PixiJS functionality.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as PIXI from \"pixi.js\";\nconst renderer = PIXI.autoDetectRenderer();\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Dependencies in PixiJS\nDESCRIPTION: This snippet imports required components and data for the interactive example. It uses the ExampleEditor component to render the code examples. It also imports a raw-loader and a version file for dependency resolution.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/interleaving-geometry.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./interleaving-geometry';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Creating Pixel-Perfect Lines with PixiJS Graphics API - JavaScript\nDESCRIPTION: Shows usage of the pixelLine property to draw lines that maintain a fixed 1-pixel thickness regardless of scaling, ideal for retro and grid-based visuals. Requires PixiJS Graphics module and v8.6.0 or later. The snippet inputs are graphics drawing commands and outputs are crisp, consistent lines. This feature is designed to maintain visual fidelity across zoom levels with minimal performance impact.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PixelLineFile from '!!raw-loader!../docs/examples/graphics/pixel-line';\n```\n\n----------------------------------------\n\nTITLE: Updating Cached Texture in PixiJS\nDESCRIPTION: Shows how to update a texture after making changes to a container that has been cached using cacheAsTexture.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/cache-as-texture.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.updateCacheTexture();\n```\n\n----------------------------------------\n\nTITLE: Creating Graphics Holes (v4 Method) in PixiJS JavaScript\nDESCRIPTION: Provides an example of the deprecated v4 approach to creating holes within a `PIXI.Graphics` object using chained drawing commands (`moveTo`, `lineTo`) and the `addHole()` method. This API is superseded in v5.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst graphic = new PIXI.Graphics()\n  .beginFill(0xff0000)\n  .moveTo(0, 0)\n  .lineTo(100, 0)\n  .lineTo(100, 100)\n  .lineTo(0, 100)\n  .moveTo(10, 10)\n  .lineTo(90, 10)\n  .lineTo(90, 90)\n  .lineTo(10, 90)\n  .addHole();\n```\n\n----------------------------------------\n\nTITLE: Accessing SimpleMesh UV Buffer in PixiJS v5 JavaScript\nDESCRIPTION: Illustrates retrieving the UV buffer data from a `PIXI.SimpleMesh` instance in v5. Explains that mesh attribute buffers like `uvs` are now accessed via the `geometry.buffers` array property, unlike in v4.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nget uvBuffer()\n{\n    return this.geometry.buffers[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack ProvidePlugin for Global PIXI Variable in JavaScript\nDESCRIPTION: This snippet configures Webpack's ProvidePlugin to automatically inject the 'pixi.js' module as the global 'PIXI' variable at build time, solving runtime errors such as 'ReferenceError: PIXI is not defined' triggered by plugins that expect a global 'PIXI'. Ensure that 'webpack' is installed as a project dependency and that this configuration is inserted into your 'webpack.config.js' file. The 'entry' and 'output' properties in the configuration should be updated to match your project structure.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: '...',\n    output: {\n        ...\n    },\n    plugins: [\n     new webpack.ProvidePlugin({\n       PIXI: 'pixi.js'\n     })\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from cacheAsBitmap to cacheAsTexture in PixiJS\nDESCRIPTION: Shows how to use the new cacheAsTexture method instead of the removed cacheAsBitmap property for texture caching.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_38\n\nLANGUAGE: ts\nCODE:\n```\ncontainer.cacheAsBitmap = true;\n```\n\nLANGUAGE: ts\nCODE:\n```\ncontainer.cacheAsTexture(true);\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor and IndexFile in JavaScript\nDESCRIPTION: This snippet imports the `ExampleEditor` component and `IndexFile` (which contains the actual code examples) from their respective locations.  `ExampleEditor` is a custom component used to render and display the code. `IndexFile` is imported using `raw-loader` which allows importing code directly from files. The files provide the necessary components and example code for the application.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/assets/multiple.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./multiple';\n```\n\n----------------------------------------\n\nTITLE: BaseTexture from Canvas\nDESCRIPTION: This snippet shows how to create a `PIXI.BaseTexture` from a canvas element using the `from` method in PixiJS v5. All `from*` methods have been removed in v5.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst canvas = document.createElement('canvas');\nconst baseTexture = PIXI.BaseTexture.from(canvas);\n```\n\n----------------------------------------\n\nTITLE: Creating Circles Sharing GraphicsContext\nDESCRIPTION: This code creates five circles by reusing a single `GraphicsContext`. The code pre-creates the graphics context and then reuses it for multiple `Graphics` objects. This approach optimizes performance by reducing redundant GPU operations.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a master Graphicscontext\nlet circleContext = new GraphicsContext()\n  .circle(100, 100, 50)\n  .fill('red')\n\n// Create 5 duplicate objects\nfor (let i = 0; i < 5; i++) {\n  // Initialize the duplicate using our circleContext\n  let duplicate = new Graphics(circleContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pixel-Perfect Grid for Retro Games with PixiJS (TypeScript)\nDESCRIPTION: Shows how to build a grid of evenly spaced vertical and horizontal lines using PixiJS Graphics with 'pixelLine' enabled for each stroke, ensuring all lines retain 1px width regardless of transformations. Dependencies: PixiJS, a Graphics instance. The snippet loops to draw both vertical and horizontal lines, finalizing with a white pixel-perfect stroke. Input: None. Output: A 10x10 grid where all lines remain crisp and single-pixel-thick.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-pixel-line.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a grid of vertical and horizontal lines\nconst grid = new Graphics();\n\n// Draw 10 vertical lines spaced 10 pixels apart\n// Draw vertical lines\nfor (let i = 0; i < 10; i++) {\n    // Move to top of each line (x = i*10, y = 0)\n    grid.moveTo(i * 10, 0)\n        // Draw down to bottom (x = i*10, y = 100)\n        .lineTo(i * 10, 100);\n}\n\n// Draw horizontal lines\nfor (let i = 0; i < 10; i++) {\n    // Move to start of each line (x = 0, y = i*10)\n    grid.moveTo(0, i * 10)\n        // Draw across to end (x = 100, y = i*10)\n        .lineTo(100, i * 10);\n}\n\n// Stroke all lines in white with pixel-perfect width\ngrid.stroke({ color: 0xffffff, pixelLine: true });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Example Editor for PixiJS Sprite Demo in JavaScript\nDESCRIPTION: This snippet imports necessary components and resources, then renders an ExampleEditor component that displays source code and dependencies related to PixiJS sprites. It integrates raw-loader for source inclusion and manages dependencies based on a version JSON.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/masks/sprite.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./sprite';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Updating Ticker Callback Signature in PixiJS\nDESCRIPTION: Shows how to update ticker callbacks to work with the new signature that passes the ticker instance instead of just delta time.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_36\n\nLANGUAGE: ts\nCODE:\n```\nTicker.shared.add((dt)=> {\n    bunny.rotation += dt\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nTicker.shared.add((ticker)=> {\n    bunny.rotation += ticker.deltaTime;\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing buttonMode with cursor Property\nDESCRIPTION: Example showing how to replace the removed buttonMode property with the cursor property, plus a polyfill to maintain backward compatibility.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v7.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.buttonMode = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.cursor = 'pointer';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DisplayObject } from 'pixi.js';\n\nObject.defineProperty(DisplayObject.prototype, 'buttonMode', {\n  get() { return this.cursor === 'pointer'; },\n  set(value) { this.cursor = value ? 'pointer' : null; },\n});\n```\n\n----------------------------------------\n\nTITLE: Cutting Holes in Graphics (v8)\nDESCRIPTION: This snippet demonstrates the v8 approach for cutting holes in Graphics shapes. After drawing the base shape and filling it, draw the shape for the hole and then call the new `cut()` method to apply the hole.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const rectAndHole = new Graphics()\n   .rect(0, 0, 100, 100)\n   .fill(0x00FF00)\n   .circle(50, 50, 20)\n   .cut();\n```\n\n----------------------------------------\n\nTITLE: Svg Load using PixiJS\nDESCRIPTION: This snippet loads an SVG file and displays it using PixiJS. It assumes that the 'svg-load' module exports the necessary code for loading and rendering the SVG. The code is used within an ExampleEditor component for demonstration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/svg-load.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./svg-load';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Reusing GraphicsGeometry with Multiple PIXI.Graphics Objects in JavaScript\nDESCRIPTION: This snippet illustrates how to create a master PIXI.Graphics object, define a circle primitive on it, and then reuse its underlying geometry by passing its 'geometry' property into new PIXI.Graphics instances. This enables efficient rendering and memory usage when replicating identical shapes across the scene. PixiJS must be available, and all created Graphics objects should eventually be destroyed using 'destroy()' to prevent memory leaks. The circle's center and radius are defined as (x:100, y:100, r:50), and the code creates five duplicate graphics objects, each initialized with the same geometry for fast instantiation and rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/graphics.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a master graphics object\nlet template = new PIXI.Graphics();\n// Add a circle\ntemplate.drawCircle(100, 100, 50);\n\n// Create 5 duplicate objects\nfor (let i = 0; i < 5; i++) {\n  // Initialize the duplicate using our template's pre-built geometry\n  let duplicate = new PIXI.Graphics(template.geometry);\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Render Order in PixiJS Scene Graph\nDESCRIPTION: This snippet demonstrates the render order of objects in a PixiJS scene graph. It creates a hierarchy with parent objects A and D, and children B and C under A. The code then displays these objects over time, showcasing how PixiJS renders the tree from the root down, with children rendered in the order of insertion.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/scene-graph.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the application helper and add its render target to the page\nconst app = new PIXI.Application({ width: 640, height: 360 });\ndocument.body.appendChild(app.view);\n\n// Label showing scene graph hierarchy\nconst label = new PIXI.Text('Scene Graph:\\n\\napp.stage\\n  ┗ A\\n     ┗ B\\n     ┗ C\\n  ┗ D', {fill: '#ffffff'});\nlabel.position = {x: 300, y: 100};\napp.stage.addChild(label);\n\n// Helper function to create a block of color with a letter\nconst letters = [];\nfunction addLetter(letter, parent, color, pos) {\n  const bg = new PIXI.Sprite(PIXI.Texture.WHITE);\n  bg.width = 100;\n  bg.height = 100;\n  bg.tint = color;\n\n  const text = new PIXI.Text(letter, {fill: \"#ffffff\"});\n  text.anchor.set(0.5);\n  text.position = {x: 50, y: 50};\n\n  const container = new PIXI.Container();\n  container.position = pos;\n  container.visible = false;\n  container.addChild(bg, text);\n  parent.addChild(container);\n\n  letters.push(container);\n  return container;\n}\n\n// Define 4 letters\nlet a = addLetter('A', app.stage, 0xff0000, {x: 100, y: 100});\nlet b = addLetter('B', a,         0x00ff00, {x: 20,  y: 20});\nlet c = addLetter('C', a,         0x0000ff, {x: 20,  y: 40});\nlet d = addLetter('D', app.stage, 0xff8800, {x: 140, y: 100});\n\n// Display them over time, in order\nlet elapsed = 0.0;\napp.ticker.add((delta) => {\n  elapsed += delta / 60.0;\n  if (elapsed >= letters.length) { elapsed = 0.0; }\n  for (let i = 0; i < letters.length; i ++) {\n    letters[i].visible = elapsed >= i;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to Filters in PixiJS v5 JavaScript\nDESCRIPTION: Shows how to explicitly set the `padding` property on a filter instance (e.g., `GlowFilter`) in PixiJS v5. This is necessary because the default padding was changed from 4 (v4) to 0 (v5), which might affect filter appearance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Glow filter from https://github.com/pixijs/pixi-filters\nconst filter = new PIXI.filters.GlowFilter();\nfilter.padding = 4;\n```\n\n----------------------------------------\n\nTITLE: Initializing UniformGroup (v7)\nDESCRIPTION: This snippet demonstrates how a `UniformGroup` was initialized in PixiJS v7. It accepted an object containing the initial values for uniforms.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst uniformGroup = new UniformGroup({\n  uTime:1,\n});\n\nuniformGroup.uniforms.uTime = 100;\n```\n\n----------------------------------------\n\nTITLE: Displaying Bitmap Text with PixiJS in JavaScript\nDESCRIPTION: This snippet demonstrates how to render bitmap text using PixiJS in a JavaScript application. It requires the 'pixi.js' library as a dependency and the presence of a bitmap font asset. The key functionality involves creating a PixiJS Application, loading the bitmap font, creating a BitmapText object, and adding it to the stage for rendering on the canvas. The example expects valid font file URLs and placement parameters, and outputs rendered bitmap text to the browser. Limitations include the necessity for compatible browser support and correctly loaded font assets.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/text/bitmap-text.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Sample for displaying bitmap text in PixiJS\nimport * as PIXI from 'pixi.js';\nimport fontXML from 'path/to/font.fnt';\nimport fontPNG from 'path/to/font.png';\n\nconst app = new PIXI.Application({width: 800, height: 600});\ndocument.body.appendChild(app.view);\n\n// Load the bitmap font\nPIXI.Loader.shared\n  .add('fontXML', fontXML)\n  .add('fontPNG', fontPNG)\n  .load(() => {\n    PIXI.BitmapFont.from('Desyrel', {\n      fontFamily: 'Desyrel',\n      fontSize: 35,\n      fill: '#ffffff'\n    });\n    \n    const bitmapText = new PIXI.BitmapText('Hello PixiJS!', {\n      fontName: 'Desyrel',\n      fontSize: 35\n    });\n    bitmapText.x = 100;\n    bitmapText.y = 100;\n    app.stage.addChild(bitmapText);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Circles Without Sharing GraphicsContext\nDESCRIPTION: This code creates five circles using individual `Graphics` objects, each with its own `GraphicsContext`. This approach may be less efficient for performance reasons compared to sharing a context.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create 5 circles\nfor (let i = 0; i < 5; i++) {\n  let circle = new Graphics()\n    .circle(100, 100, 50)\n    .fill('red');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Texture Basic - JavaScript\nDESCRIPTION: This code snippet demonstrates the use of the ExampleEditor component to display a PixiJS render texture example. It imports necessary modules, including the ExampleEditor component and the example code from 'render-texture-basic'. The ExampleEditor then renders the code example for interactive usage.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/textures/render-texture-basic.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./render-texture-basic';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Import PIXI (Invalid)\nDESCRIPTION: This snippet shows an invalid way to import PixiJS when using a bundler in v5. The global `PIXI` object is no longer automatically created, so importing `pixi.js` without assigning it to a variable will not work.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"pixi.js\";\nconst renderer = PIXI.autoDetectRenderer(); // INVALID! No more global.PIXI!\n```\n\n----------------------------------------\n\nTITLE: Advanced cacheAsTexture Configuration in PixiJS\nDESCRIPTION: Shows how to use advanced configuration options with cacheAsTexture, including custom resolution and antialiasing settings.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/cache-as-texture.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.cacheAsTexture({\n    resolution: 2,\n    antialias: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from settings.ADAPTER to DOMAdapter in PixiJS\nDESCRIPTION: Shows how to use the new DOMAdapter static class instead of the removed settings.ADAPTER property for configuring DOM operations.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nimport { settings, WebWorkerAdapter } from 'pixi.js';\n\nsettings.ADAPTER = WebWorkerAdapter;\nsettings.ADAPTER.createCanvas();\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { DOMAdapter, WebWorkerAdapter } from 'pixi.js';\n\nDOMAdapter.set(WebWorkerAdapter);\nDOMAdapter.get().createCanvas();\n```\n\n----------------------------------------\n\nTITLE: Using Loader in PixiJS v6\nDESCRIPTION: Example of loading an asset using the legacy Loader API in PixiJS v6, which uses a callback-based approach.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Loader, Sprite } from 'pixi.js';\n\nconst loader = new Loader();\nloader.add('background', 'path/to/assets/background.jpg');\nloader.load((loader, resources) => {\n  const image = Sprite.from(resources.background.texture);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a React Functional Component for Displaying GIFs (JavaScript/JSX)\nDESCRIPTION: This snippet defines and exports a React functional component named `Gif`. It accepts `src` (image source URL) and `alt` (alternative text) as props. The component renders an `<img>` tag wrapped in a `<div>` styled using inline CSS to center the image horizontally, apply padding, set a maximum width, ensure responsiveness (`width: '100%'`), add rounded corners, and apply a border. This component is likely used within the documentation page itself to display illustrative GIFs.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-12-06-pixi-create.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Gif = ({ src, alt }) => {\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', padding: '2rem 4rem', paddingTop: '1rem' }}>\n      <img src={src} alt={alt} style={{ maxWidth: '600px', width: '100%', borderRadius: '0.5rem', border: '1px solid #676767' }} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component (JavaScript/JSX)\nDESCRIPTION: Imports the `ExampleEditor` React component from the site's components directory. This component is likely used to display interactive code examples within the documentation page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/texture.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a Rectangle with PIXI.Graphics in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new PIXI.Graphics object, set a fill color, and define a rectangle geometry using the 'beginFill' and 'drawRect' methods. The rectangle is then added to the scene graph to be rendered on the stage via 'app.stage.addChild'. Required dependencies include the PixiJS library, and an initialized 'app' instance. The main parameters are the color (0xff0000) and rectangle dimensions (x:0, y:0, width:200, height:100). The output is a red rectangle displayed on the rendered stage. This approach constructs geometry for deferred rendering and supports further use of the Graphics object, for example as a mask.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/graphics.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a Graphics object, set a fill color, draw a rectangle\nlet obj = new PIXI.Graphics();\nobj.beginFill(0xff0000);\nobj.drawRect(0, 0, 200, 100);\n\n// Add it to the stage to render\napp.stage.addChild(obj);\n```\n\n----------------------------------------\n\nTITLE: Texture Fill with Matrix Transformation in PixiJS\nDESCRIPTION: This snippet demonstrates how to use a transformation matrix to scale a texture before filling a rectangle. A matrix is created to scale the texture down by half, and then passed into the fill options.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst matrix = new Matrix().scale(0.5, 0.5);\n\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill({\n    texture: texture,\n    matrix: matrix, // scale the texture down by 2\n  });\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor Component with Fill Gradient Code\nDESCRIPTION: This snippet renders the 'ExampleEditor' React component, passing the imported 'IndexFile' as a prop to display the fill gradient example code. It manages the display of the code example on the webpage, facilitating interactive visualization and editing.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/fill-gradient.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Custom Radial Gradient Fill in PixiJS\nDESCRIPTION: This snippet creates a custom radial gradient using `FillGradient` with specific center, innerRadius, outerCenter, and outerRadius values.  It transitions from blue to red, demonstrating fine-grained control over gradient appearance.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst radialGradient = new FillGradient({\n  type: 'radial',\n  center: { x: 0.5, y: 0.5 },\n  innerRadius: 0.25,\n  outerCenter: { x: 0.5, y: 0.5 },\n  outerRadius: 0.5,\n  colorStops: [\n    { offset: 0, color: 'blue' },\n    { offset: 1, color: 'red' },\n  ],\n});\n\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill(gradient);\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallax Scene Position Setter in JavaScript\nDESCRIPTION: Defines a setter for the 'positionX' property within a Scene class, implementing a parallax scrolling effect. It updates the 'tilePosition.x' of the background, midground, and platform TilingSprite layers based on the input 'value', applying different multipliers (0.1, 0.25, 1.0) to create depth. Assumes 'this' refers to the Scene instance with 'background', 'midground', and 'platform' TilingSprite properties.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step6/step6-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.background.tilePosition.x = value * 0.1;\nthis.midground.tilePosition.x = value * 0.25;\nthis.platform.tilePosition.x = value;\n```\n\n----------------------------------------\n\nTITLE: Updating Application Generic Type in PixiJS\nDESCRIPTION: Shows how to correctly type the Application class to work with the updated renderer pattern rather than the view element.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_34\n\nLANGUAGE: ts\nCODE:\n```\nconst app = new Application<HTMLCanvasElement>();\n```\n\nLANGUAGE: ts\nCODE:\n```\n// WebGL or WebGPU renderer\nconst app = new Application<Renderer<HTMLCanvasElement>>();\n// WebGL specific renderer\nconst app = new Application<WebGLRenderer<HTMLCanvasElement>>();\n// WebGPU specific renderer\nconst app = new Application<WebGPURenderer<HTMLCanvasElement>>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Layers in PixiJS for Independent Object Ordering\nDESCRIPTION: Demonstrates how to use PixiJS's new Render Layers feature to control rendering order of objects independently of their scene graph hierarchy, showing a fish with UI elements layered correctly.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2025-01-24-pixi-v8.7.0.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Application, Assets, Container, RenderLayer } from 'pixi.js';\nimport { Fish } from './Fish';\nimport { CharacterUI } from './CharacterUI';\n\nconst app = new Application();\n\nawait app.init({ background: '#11436F', resizeTo: window });\ndocument.body.appendChild(app.canvas);\n\n// Create the different render layers\n// The RenderLayer with the lowest index renders first\nconst backgroundLayer = new RenderLayer(10);\nconst characterLayer = new RenderLayer(20);\nconst uiLayer = new RenderLayer(30);\n\n// Create a fish\nconst fish = new Fish();\nfish.x = app.screen.width / 2;\nfish.y = app.screen.height / 2;\n\n// Add its UI\nconst ui = new CharacterUI({ name: 'Fish', maxHealth: 100, health: 50 });\n\n// Add everything to the scene\nconst container = new Container();\ncontainer.addChild(fish);\ncontainer.addChild(ui);\n\napp.stage.addChild(container);\n\n// We give our background layer the lowest priority (10)\n// so that it renders first (under everything else)\nfish.renderLayer = backgroundLayer;\n\n// Since the UI should always be on top, we assign it to the uiLayer\n// with the highest priority (30)\nui.renderLayer = uiLayer;\n\napp.ticker.add(() => {\n  // Move the fish around\n  fish.x = app.screen.width / 2 + Math.sin(app.ticker.lastTime / 1000) * 100;\n  fish.y = app.screen.height / 2 + Math.cos(app.ticker.lastTime / 1000) * 100;\n});\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Container, Graphics, Sprite, Texture } from 'pixi.js';\n\nexport class Fish extends Container {\n  constructor() {\n    super();\n\n    // Create a circle representing our fish\n    const body = new Graphics();\n    body.beginFill(0xfb6a4b);\n    body.drawCircle(0, 0, 30);\n    body.endFill();\n\n    // Create eyes\n    const eyeLeft = new Graphics();\n    eyeLeft.beginFill(0x000000);\n    eyeLeft.drawCircle(-10, -10, 5);\n    eyeLeft.endFill();\n\n    const eyeRight = new Graphics();\n    eyeRight.beginFill(0x000000);\n    eyeRight.drawCircle(10, -10, 5);\n    eyeRight.endFill();\n\n    // Create a placeholder tail\n    const tail = new Graphics();\n    tail.beginFill(0xfb6a4b);\n    tail.moveTo(0, 0);\n    tail.lineTo(-40, -20);\n    tail.lineTo(-40, 20);\n    tail.lineTo(0, 0);\n    tail.endFill();\n    tail.x = 30;\n\n    // Add everything to the fish container\n    this.addChild(tail);\n    this.addChild(body);\n    this.addChild(eyeLeft);\n    this.addChild(eyeRight);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BitmapFont, BitmapText, Container, Graphics, Text } from 'pixi.js';\n\nexport class CharacterUI extends Container {\n  constructor({ name, maxHealth, health }) {\n    super();\n\n    this.name = name;\n    this.maxHealth = maxHealth;\n    this.health = health;\n\n    // Create a transparent background for the UI\n    const background = new Graphics();\n    background.beginFill(0x000000, 0.5);\n    background.drawRoundedRect(-50, -60, 100, 30, 5);\n    background.endFill();\n\n    // Create the name text\n    const nameText = new Text(name, {\n      fontFamily: 'Arial',\n      fontSize: 20,\n      fill: 0xffffff,\n      align: 'center',\n    });\n    nameText.anchor.set(0.5);\n    nameText.y = -45;\n\n    // Create a health bar background\n    const healthBarBg = new Graphics();\n    healthBarBg.beginFill(0x444444);\n    healthBarBg.drawRoundedRect(-50, -20, 100, 15, 3);\n    healthBarBg.endFill();\n\n    // Create the actual health bar that we'll update\n    const healthBar = new Graphics();\n    this.updateHealthBar(healthBar);\n\n    // Add all elements to the container\n    this.addChild(background);\n    this.addChild(nameText);\n    this.addChild(healthBarBg);\n    this.addChild(healthBar);\n\n    // Store the health bar for updates\n    this.healthBar = healthBar;\n  }\n\n  // Method to update the health bar based on current health\n  updateHealthBar(healthBar) {\n    const healthPercent = this.health / this.maxHealth;\n    const width = 100 * healthPercent;\n\n    // Choose color based on health percentage\n    let color;\n    if (healthPercent > 0.6) color = 0x00ff00; // Green for high health\n    else if (healthPercent > 0.3) color = 0xffff00; // Yellow for medium health\n    else color = 0xff0000; // Red for low health\n\n    healthBar.clear();\n    healthBar.beginFill(color);\n    healthBar.drawRoundedRect(-50, -20, width, 15, 3);\n    healthBar.endFill();\n  }\n\n  // Method to update the character's health\n  setHealth(value) {\n    this.health = Math.max(0, Math.min(value, this.maxHealth));\n    this.updateHealthBar(this.healthBar);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive Code Editor for Triangle Color Example in JSX\nDESCRIPTION: This snippet renders the ExampleEditor component with the Triangle Color example code and the appropriate PixiJS dependency version, allowing users to interact with the code directly in the documentation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/triangle-color.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Import JavaScript example\nDESCRIPTION: This snippet imports a JavaScript file containing the Shader Toy filter render texture example using `raw-loader`. This allows the example code to be embedded directly into the component for display and execution. The imported code is assigned to the `IndexFile` variable.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-advanced/shader-toy-filter-render-texture.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./shader-toy-filter-render-texture';\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Blend Modes in PixiJS - TypeScript/JavaScript\nDESCRIPTION: Demonstrates how to import and apply the new Photoshop-like advanced blend modes in PixiJS v8. After importing the necessary module from `pixi.js/advanced-blend-modes`, these blend modes can be applied to any display object by setting its `blendMode` property using the corresponding string name.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport `pixi.js/advanced-blend-modes` // make sure to include them in you lib! (or cherry pick one!)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyContainer.blendMode = 'color-burn` // easy!\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Mouse Trail Example Editor in React/JSX\nDESCRIPTION: This JSX code renders the ExampleEditor component, passing the mouse trail implementation file and the PixiJS dependency with its version. This creates an interactive code editor where users can view and modify the mouse trail example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/advanced/mouse-trail.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor React Component with Pixi.js Dependency and Source Files\nDESCRIPTION: Renders the ExampleEditor React component by passing the loaded screen shot source code as 'index.js' in the files prop and the installed Pixi.js package version as a dependency. This configuration allows users to view and interact with the screen shot example code in an editor environment with proper Pixi.js context.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/advanced/screen-shot.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Animating and Wrapping Fish Sprites Across the Stage (JavaScript)\nDESCRIPTION: This loop animates each fish by updating its direction, position, and rotation frame-by-frame. If a fish crosses beyond the stage's padded borders, its position is wrapped to the opposite edge, creating seamless movement. The code assumes each fish object has animation properties set, and depends on variables such as 'fishes', 'stagePadding', 'boundWidth', and 'boundHeight' from previous snippets. Inputs are each fish sprite and current positional properties; outputs are updated positions and rotations, supporting smooth animation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step3/step3-content.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfishes.forEach((fish) =>\n{\n    fish.direction += fish.turnSpeed * 0.01;\n    fish.x += Math.sin(fish.direction) * fish.speed;\n    fish.y += Math.cos(fish.direction) * fish.speed;\n    fish.rotation = -fish.direction - Math.PI / 2;\n\n    if (fish.x < -stagePadding)\n    {\n        fish.x += boundWidth;\n    }\n    if (fish.x > app.screen.width + stagePadding)\n    {\n        fish.x -= boundWidth;\n    }\n    if (fish.y < -stagePadding)\n    {\n        fish.y += boundHeight;\n    }\n    if (fish.y > app.screen.height + stagePadding)\n    {\n        fish.y -= boundHeight;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering an Interactive PixiJS Example\nDESCRIPTION: This code renders an interactive PixiJS example using the ExampleEditor component. It specifies the files (index.js) to be displayed and declares pixi.js as a dependency with a version number pulled from the version.npm file. It takes the \"files\" object to indicate which files to render and \"dependencies\" to link external packages.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/interleaving-geometry.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing raw content of bundle file using Webpack raw-loader\nDESCRIPTION: This snippet uses Webpack's raw-loader to import the raw text of the 'bundle' file, allowing it to be embedded or displayed in the editor. Required dependencies include Webpack and raw-loader configured in the build system.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/bundle.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./bundle';\n```\n\n----------------------------------------\n\nTITLE: Creating and Positioning Track Planks in PixiJS\nDESCRIPTION: Defines parameters for train track planks, including dimensions, spacing, and quantity based on the scene width. It iteratively creates Graphics rectangles for each plank, positions them along the x-axis with spacing, and displays them above the snow layer. All planks are stored in an array for later animation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step6/step6-content.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst trackHeight = 15;\nconst plankWidth = 50;\nconst plankHeight = trackHeight / 2;\nconst plankGap = 20;\nconst plankCount = width / (plankWidth + plankGap) + 1;\nconst plankY = groundY - groundHeight;\nconst planks = [];\n\nfor (let index = 0; index < plankCount; index++) {\n    const plank = new Graphics()\n        .rect(0, plankY - plankHeight, plankWidth, plankHeight)\n        .fill({ color: 0x241811 });\n\n    plank.x = index * (plankWidth + plankGap);\n    app.stage.addChild(plank);\n    planks.push(plank);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor and IndexFile in JavaScript\nDESCRIPTION: This snippet imports the `ExampleEditor` component and the `IndexFile`. The `ExampleEditor` component is used to render an interactive code editor, and `IndexFile` contains the actual PixiJS container example code. This is a dependency required for displaying and editing the container example within the documentation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/container.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./container';\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Interactivity Example in JavaScript\nDESCRIPTION: This code snippet imports necessary modules for creating a PixiJS interactive example within an editor. It imports the `ExampleEditor` component and a raw-loader to load the example's code. It also imports a JSON file containing the PixiJS version for dependency management. The `ExampleEditor` component is then rendered, passing the example's code and PixiJS version as props. This setup allows for interactive editing and visualization of the PixiJS example directly within the user interface.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/interactivity.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./interactivity';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor with Source Code in React\nDESCRIPTION: This snippet renders the 'ExampleEditor' React component, passing the imported raw source code as a file object with the key 'index.js'. This setup allows the embedded editor to display the code snippet within the documentation, providing an interactive example for users.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/assets/async.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component in JavaScript\nDESCRIPTION: This snippet imports the ExampleEditor component from the specified path, enabling integration of code files into the visual editor for demonstration or testing. It includes raw source files for shaders and the main JavaScript code. Dependencies include the module '@site/src/components/Editor/ExampleEditor' and raw-loader for importing text files.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/triangle-textured.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./triangle-textured/index';\nimport triangleTexturedVert from '!!raw-loader!./triangle-textured/triangleTextured.vert';\nimport triangleTexturedFrag from '!!raw-loader!./triangle-textured/triangleTextured.frag';\n```\n\n----------------------------------------\n\nTITLE: Create Train Wheel with PixiJS Graphics - JavaScript\nDESCRIPTION: Creates a train wheel using PixiJS Graphics. The wheel consists of a base circle, a tyre around the base, and spokes. The radius is passed as input. This function returns a PixiJS Graphics object representing a wheel.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step7/step7-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst strokeThickness = radius / 3;\nconst innerRadius = radius - strokeThickness;\n\nreturn (\n    new Graphics()\n        .circle(0, 0, radius)\n        // Draw the wheel\n        .fill({ color: 0x848484 })\n        // Draw the tyre\n        .stroke({ color: 0x121212, width: strokeThickness, alignment: 1 })\n        // Draw the spokes\n        .rect(-strokeThickness / 2, -innerRadius, strokeThickness, innerRadius * 2)\n        .rect(-innerRadius, -strokeThickness / 2, innerRadius * 2, strokeThickness)\n        .fill({ color: 0x4f4f4f })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing PixiJS Website Dependencies\nDESCRIPTION: Installs all required npm dependencies for the PixiJS website project.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n```\n\n----------------------------------------\n\nTITLE: Using HitTest with Events in PixiJS v7\nDESCRIPTION: Example of using the hitTest method with the new EventBoundary class in PixiJS v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application, EventBoundary} from 'pixi.js';\n\nconst app = new Application();\nconst boundary = new EventBoundary(app.stage);\nboundary.hitTest(x, y);\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Moon Crescent Using PixiJS Graphics in JavaScript\nDESCRIPTION: This snippet demonstrates creating a PixiJS Graphics object and drawing an SVG path onto it using the svg() method. It positions the graphic relative to the app screen dimensions by setting x and y coordinates before adding it to the stage. Dependencies include PixiJS Graphics and a parsed SVG string named parsedSvg as input. The snippet expects parsedSvg to contain valid SVG markup representing the moon crescent. Output is a rendered moon shape positioned on the canvas. This method is useful for vector-based drawing inside PixiJS but requires an existing PixiJS application setup with app and parsedSvg prepared.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step3/step3-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphics = new Graphics().svg(parsedSvg);\ngraphics.x = app.screen.width / 2 + 100;\ngraphics.y = app.screen.height / 8;\napp.stage.addChild(graphics);\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS Version Information from JSON File\nDESCRIPTION: This snippet imports version details of PixiJS from a JSON file, enabling dynamic referencing of the package's version, usually for dependency management or display purposes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/multiple.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Initializing Three.js Renderer and Scene in JavaScript\nDESCRIPTION: Sets up a basic Three.js environment. It initializes a WebGLRenderer with stencil buffer enabled (required for PixiJS masking), sets its size and clear color, appends the canvas element to the DOM, creates a scene, a perspective camera, and adds a simple rotating cube mesh to the scene. This renderer's context and DOM element will be shared with PixiJS.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/mixing-three-and-pixi.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst WIDTH = window.innerWidth;\nconst HEIGHT = window.innerHeight;\n\nconst threeRenderer = new THREE.WebGLRenderer({\n    antialias: true,\n    stencil: true // so masks work in pixijs\n});\n\nthreeRenderer.setSize(WIDTH, HEIGHT);\nthreeRenderer.setClearColor(0xdddddd, 1);\ndocument.body.appendChild(threeRenderer.domElement);\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(70, WIDTH / HEIGHT);\ncamera.position.z = 50;\nscene.add(camera);\n\nconst boxGeometry = new THREE.BoxGeometry(10, 10, 10);\nconst basicMaterial = new THREE.MeshBasicMaterial({ color: 0x0095dd });\nconst cube = new THREE.Mesh(boxGeometry, basicMaterial);\ncube.rotation.set(0.4, 0.2, 0);\nscene.add(cube);\n```\n\n----------------------------------------\n\nTITLE: Defining an Asset Manifest for PixiJS Assets in JSON\nDESCRIPTION: Defines a JSON manifest describing bundles of assets, with each bundle containing named assets and their source patterns. This manifest assists in initializing PIXI.Assets with structured groups that can be loaded progressively. The manifest allows usage of multiple asset formats and patterns per asset. It should be passed to `PIXI.Assets.init({manifest})` or referenced by URL. Input is the JSON structure for grouping assets by app sections, and no direct output.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/assets.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"bundles\":[\n      {\n         \"name\":\"load-screen\",\n         \"assets\":[\n            {\n               \"name\":\"background\",\n               \"srcs\":\"sunset.png\"\n            },\n            {\n               \"name\":\"bar\",\n               \"srcs\":\"load-bar.{png,webp}\"\n            }\n         ]\n      },\n      {\n         \"name\":\"game-screen\",\n         \"assets\":[\n            {\n               \"name\":\"character\",\n               \"srcs\":\"robot.png\"\n            },\n            {\n               \"name\":\"enemy\",\n               \"srcs\":\"bad-guy.png\"\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the PixiJS Application with React/JSX\nDESCRIPTION: This snippet renders the ExampleEditor component, passing it the index file as a prop. The `files` prop takes an object, where the key is the filename and the value is the file content. The ExampleEditor component is responsible for rendering and managing the PixiJS application and handling user interactions within the editor.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/transparent-background.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Setting up a PixiJS Tiling Sprite Document Page\nDESCRIPTION: Imports and configures the ExampleEditor component to display a Tiling Sprite example. The example file is imported using raw-loader and passed to the editor component for display and interaction.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/sprite/tiling-sprite.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./tiling-sprite';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Define Train Head Body Dimensions - JavaScript\nDESCRIPTION: Defines constants for the dimensions of various parts of the train head body, including the front, cabin, chimney, roof, door, and window. These dimensions are used later when drawing the shapes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step7/step7-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst frontHeight = 100;\nconst frontWidth = 140;\nconst frontRadius = frontHeight / 2;\n\nconst cabinHeight = 200;\nconst cabinWidth = 150;\nconst cabinRadius = 15;\n\nconst chimneyBaseWidth = 30;\nconst chimneyTopWidth = 50;\nconst chimneyHeight = 70;\nconst chimneyDomeHeight = 25;\nconst chimneyTopOffset = (chimneyTopWidth - chimneyBaseWidth) / 2;\nconst chimneyStartX = cabinWidth + frontWidth - frontRadius - chimneyBaseWidth;\nconst chimneyStartY = -frontHeight;\n\nconst roofHeight = 25;\nconst roofExcess = 20;\n\nconst doorWidth = cabinWidth * 0.7;\nconst doorHeight = cabinHeight * 0.7;\nconst doorStartX = (cabinWidth - doorWidth) * 0.5;\nconst doorStartY = -(cabinHeight - doorHeight) * 0.5 - doorHeight;\n\nconst windowWidth = doorWidth * 0.8;\nconst windowHeight = doorHeight * 0.4;\nconst offset = (doorWidth - windowWidth) / 2;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Version Snapshot\nDESCRIPTION: Creates a versioned snapshot of the working docs directory, copying it to versioned_docs with appropriate versioning.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run create-docs-version-snapshot\n```\n\n----------------------------------------\n\nTITLE: Import Gif Example into ExampleEditor\nDESCRIPTION: This JavaScript snippet imports the ExampleEditor component and a JavaScript file ('./gif') using raw-loader. The file is then passed as a prop to the ExampleEditor component to display and execute the Gif example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/sprite/gif.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./gif';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor component from PixiJS documentation\nDESCRIPTION: This snippet imports the 'ExampleEditor' component from the project's local components directory. It facilitates rendering an editor interface for the bundle, enabling viewing or editing of code files within the development environment.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/bundle.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS Bundle Example\nDESCRIPTION: This code snippet imports the necessary modules and components for displaying a PixiJS Bundle example. It imports the ExampleEditor component from the site and the raw code from the 'bundle' file.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/assets/bundle.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./bundle';\n```\n\n----------------------------------------\n\nTITLE: Importing and Integrating PixiJS Bitmap Caching Example – JavaScript\nDESCRIPTION: This snippet imports the PixiJS example JavaScript file using raw-loader, retrieves the specific runtime version of PixiJS from a local JSON configuration, and mounts both into a custom example editor React component for live demonstration. Dependencies include Node.js, Webpack's raw-loader, PixiJS, and a configured React environment. Inputs are the raw example file and dependency map, resulting in an interactive code sample; outputs are visualized within the ExampleEditor. The implementation assumes the presence of @site/src/components/Editor/ExampleEditor and appropriate project setup for raw-loader execution.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/basic/cache-as-bitmap.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./cache-as-bitmap';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Removing Documentation Version Snapshot\nDESCRIPTION: Removes an existing versioned documentation snapshot using an interactive selection interface.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run remove-docs-version-snapshot\n```\n\n----------------------------------------\n\nTITLE: Converting hitTest from InteractionManager to EventBoundary\nDESCRIPTION: Example showing how to migrate from using the renderer's interaction plugin for hit testing to using the new EventBoundary class in PixiJS v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v7.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application} from 'pixi.js';\n\nconst app = new Application();\napp.renderer.plugins.interaction.hitTest({x, y});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application, EventBoundary} from 'pixi.js';\n\nconst app = new Application();\nconst boundary = new EventBoundary(app.stage);\nboundary.hitTest(x, y);\n```\n\n----------------------------------------\n\nTITLE: Loading Asset with Explicit Loader in PixiJS\nDESCRIPTION: Shows how to load an asset from a URL that does not have a recognizable file extension. By providing an object with `src` and `loadParser` properties to `Assets.load`, you can explicitly tell PixiJS which loader parser to use for the asset.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npromise = Assets.load({\n  src: 'https://example.com/ambiguous-file-name',\n  loadParser: 'loadTextures'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Project with pnpm (Bash)\nDESCRIPTION: This command employs the pnpm package manager's `create` command to run the `create-pixi.js` package. When run in a terminal, it triggers the `PixiJS Create` interactive scaffolding tool, allowing the user to select project templates and configure the initial setup for a new PixiJS application.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-12-06-pixi-create.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm create pixi.js\n```\n\n----------------------------------------\n\nTITLE: Creating Textures for Parallax Layers in PixiJS\nDESCRIPTION: Initializes Texture objects from preloaded assets for the background, midground, and platform layers in preparation for creating TilingSprites.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step5/step5-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst backgroundTexture = Texture.from('background');\nconst midgroundTexture = Texture.from('midground');\nconst platformTexture = Texture.from('platform');\n```\n\n----------------------------------------\n\nTITLE: Creating SpriteSheet Data\nDESCRIPTION: This snippet defines a JavaScript object (`atlasData`) containing the data for a spritesheet. It includes frame definitions with their positions, source sizes, and sprite source sizes, along with metadata about the image and animations. The `frames` object holds individual sprite data, while `meta` contains image details.  Dependencies: PixiJS library.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/sprite-sheets.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create object to store sprite sheet data\nconst atlasData = {\n\tframes: {\n\t\tenemy1: {\n\t\t\tframe: { x: 0, y:0, w:32, h:32 },\n\t\t\tsourceSize: { w: 32, h: 32 },\n\t\t\tspriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n\t\t},\n\t\tenemy2: {\n\t\t\tframe: { x: 32, y:0, w:32, h:32 },\n\t\t\tsourceSize: { w: 32, h: 32 },\n\t\t\tspriteSourceSize: { x: 0, y: 0, w: 32, h: 32 }\n\t\t},\n\t},\n\tmeta: {\n\t\timage: 'images/spritesheet.png',\n\t\tformat: 'RGBA8888',\n\t\tsize: { w: 128, h: 32 },\n\t\tscale: 1\n\t},\n\tanimations: {\n\t\tenemy: ['enemy1','enemy2'] //array of frames by name\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS version information from JSON file\nDESCRIPTION: This snippet imports the PixiJS version data from a JSON file, providing version compatibility information that can be used to ensure correct dependencies are loaded. The JSON file should contain version details under 'npm'.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/bundle.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Render ExampleEditor with Code and Dependencies\nDESCRIPTION: Renders the ExampleEditor component, passing in the 'index.js' code as the file content and the pixi.js version as a dependency.  The file is accessible via the IndexFile variable, and the version information is used to specify the pixi.js version for the live example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/custom-mouse-icon.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Example Code\nDESCRIPTION: This snippet shows the necessary imports for the documentation page. It imports the `ExampleEditor` React component, loads the raw content of the `./async` file (presumably containing the PixiJS example code) using `raw-loader`, and imports the PixiJS version information.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/async.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./async';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor component in JavaScript\nDESCRIPTION: This snippet imports the 'ExampleEditor' React component from the specified path, which is used to display code examples within the page. It also imports a raw code file 'fill-gradient' using webpack's raw-loader, enabling inline code rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/fill-gradient.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./fill-gradient';\n```\n\n----------------------------------------\n\nTITLE: Import Example Editor Component\nDESCRIPTION: Imports the ExampleEditor component from the @site/src/components/Editor/ExampleEditor module. This component is used to display and interact with the code example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/custom-mouse-icon.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Setting up an Advanced PixiJS Example Page with ExampleEditor\nDESCRIPTION: This code configures an MDX page for displaying advanced PixiJS examples. It imports an ExampleEditor component, loads the example code from an 'advanced' file, and sets up the editor with the current PixiJS version as a dependency.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/graphics/advanced.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./advanced';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Texture Swap Example in JavaScript\nDESCRIPTION: This snippet imports an ExampleEditor React component and loads the raw content of 'texture-swap' JavaScript source file as a string using a raw-loader. The example code is passed as a file object to the editor component for rendering an interactive code viewer/editor. It requires '@site/src/components/Editor/ExampleEditor' for rendering the editor UI and 'raw-loader' for importing raw file content as text. The snippet primarily sets up visualization of the texture swap example source code inside a React-driven web UI.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/sprite/texture-swap.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./texture-swap';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Filter Padding\nDESCRIPTION: This snippet demonstrates how to set the padding for a filter in PixiJS v5. The default padding has changed from 4 to 0, so you might need to manually adjust it to avoid visual issues.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Glow filter from https://github.com/pixijs/pixi-filters\nconst filter = new PIXI.filters.GlowFilter();\nfilter.padding = 4;\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component and IndexFile\nDESCRIPTION: This snippet imports the `ExampleEditor` component from the `@site/src/components/Editor/ExampleEditor` module and the `IndexFile` from the `./blur` file using `raw-loader`. The `raw-loader` allows importing the file content as a string.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/filters-basic/blur.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./blur';\n```\n\n----------------------------------------\n\nTITLE: Implementing shared geometry in PixiJS with custom shaders\nDESCRIPTION: This code demonstrates how to use shared geometry across multiple mesh instances in PixiJS, utilizing custom vertex and fragment shaders for rendering. It shows how to efficiently reuse geometry data while applying different transformations to individual mesh instances.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/shared-geometry.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// index.js (inferred from IndexFile import)\n```\n\nLANGUAGE: GLSL\nCODE:\n```\n// sharedGeometry.vert (vertex shader)\n```\n\nLANGUAGE: GLSL\nCODE:\n```\n// sharedGeometry.frag (fragment shader)\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Bundle Example in Editor\nDESCRIPTION: This code snippet renders the PixiJS Bundle example within the ExampleEditor component.  It passes the 'index.js' file containing the bundle code to the editor for display and execution.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/assets/bundle.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Sharing Graphics Geometry (v7)\nDESCRIPTION: This snippet illustrates how Graphics data could be shared between multiple Graphics objects in PixiJS v7 by accessing and reusing the `geometry` property.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const rect = new Graphics()\n  .beginFill(0xFF0000)\n  .drawRect(50, 50, 100, 100)\n  .endFill();\n\n  const geometry = rect.geometry;\n\n  const secondRect = new Graphics(geometry);\n```\n\n----------------------------------------\n\nTITLE: Rendering the Playground Component with PixiJS Version\nDESCRIPTION: This snippet renders the imported Playground component, passing the PixiJS version as a prop. It integrates the component within a React environment to display an interactive playground for PixiJS version specified.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/playground/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Playground pixiVersion={version} />\n```\n\n----------------------------------------\n\nTITLE: Wrapper Methods for Spine Animation Control\nDESCRIPTION: Includes utility functions to control Spine animations: `playAnimation` starts a specified animation while preventing overlap; `isAnimationPlaying` checks if an animation is active; `spawn` triggers the spawn animation; `isSpawning` verifies if the spawn animation is ongoing. These methods streamline animation management and state checking.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step4/step4-content.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction playAnimation(animation) {\n    // Play specified animation if not already playing\n}\n\nfunction isAnimationPlaying(animation) {\n    // Return true if the animation is currently active\n}\n\nfunction spawn() {\n    // Trigger spawn animation\n}\n\nfunction isSpawning() {\n    // Check if spawn animation is still playing\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Blend Modes for Sprite Rendering in PixiJS\nDESCRIPTION: This snippet explains how to modify the blend mode of a sprite to achieve different visual effects. Main modes include add, multiply, and screen, which define how pixel colors are blended with underlying graphics, useful for glows, lighting, and overlay effects.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/sprites.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.blendMode = PIXI.BLEND_MODES.ADD; // Sets blend mode to add for glow effects\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Textured Mesh Advanced Example in React with PixiJS\nDESCRIPTION: This code snippet imports the ExampleEditor component and a raw example file, then renders the editor with the specified dependencies. It demonstrates how to embed a PixiJS textured mesh advanced example within a React-based documentation site.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/textured-mesh-advanced.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./textured-mesh-advanced';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Initializing ExampleEditor with Shader and Index Files\nDESCRIPTION: This code initializes the ExampleEditor component, passing an object containing three source files: the main index JavaScript file, and vertex and fragment shaders as raw text. It sets up a visual environment for displaying and testing WebGL shader programs within the editor interface. The component depends on correct file imports and the editor's rendering capabilities.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/triangle-textured.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\n    \"index.js\": IndexFile,\n    'triangleTextured.vert': triangleTexturedVert,\n    'triangleTextured.frag': triangleTexturedFrag\n}} />\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor component from PixiJS site components\nDESCRIPTION: This snippet imports the 'ExampleEditor' React component from a local component library, used for rendering an interactive code editor with associated files. It facilitates editing and previewing PixiJS code snippets within a webpage.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/mesh-plane.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Loading raw mesh-plane source code using raw-loader\nDESCRIPTION: This snippet imports the raw source code of 'mesh-plane' module as a string using Webpack's raw-loader, enabling the code to be displayed or processed as plain text within the ExampleEditor component. Ensures the source is available for editing and preview.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/mesh-plane.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./mesh-plane';\n```\n\n----------------------------------------\n\nTITLE: Importing PIXI.js and pixi-spine Plugins in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the 'pixi.js' library and a plugin such as 'pixi-spine' within a JavaScript module. 'pixi-spine' requires the global 'PIXI' object to be defined before loading; thus, it is critical to import 'pixi.js' prior to any dependent plugin. This approach assumes that your build environment will handle global symbols appropriately (e.g., via Webpack configuration) and that both packages are installed as dependencies.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as PIXI from 'pixi.js';\nimport 'pixi-spine'; // or other plugins that need global 'PIXI' to be defined first\n```\n\n----------------------------------------\n\nTITLE: Applying Line Texture Style (v7)\nDESCRIPTION: This snippet shows how textured strokes were defined in PixiJS v7 using the `lineTextureStyle` method, which accepted texture and style parameters.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const rect = new Graphics()\n    .lineTextureStyle({texture:Texture.WHITE, width:10, color:0xFF0000})\n    .drawRect(0, 0, 100, 100)\n    .endFill()\n    .lineStyle(2, 0xFEEB77);\n    .drawRect(100, 0, 100, 100)\n    .endFill();\n```\n\n----------------------------------------\n\nTITLE: Configuring ExampleEditor for a PixiJS Demo (JSX)\nDESCRIPTION: This JSX snippet instantiates the ExampleEditor component to display a PixiJS example. The 'files' prop maps the imported 'IndexFile' (raw JavaScript code from './simple') to 'index.js' within the editor environment. The 'dependencies' prop specifies required npm packages ('pixi.js', '@pixi/graphics-extras') and their versions, which are dynamically loaded from an imported 'version.json' object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/graphics/simple.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor\n    files={{ 'index.js': IndexFile }}\n    dependencies={{ 'pixi.js': version.npm, '@pixi/graphics-extras': version.npm }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor and Slider Code in JavaScript\nDESCRIPTION: This snippet imports the 'ExampleEditor' component from the project components and loads the raw content of the 'slider' module using webpack's raw-loader. It then renders the editor with the 'index.js' file preloaded, facilitating interactive editing within the documentation page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/events/slider.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./slider';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Position - TypeScript\nDESCRIPTION: This code snippet demonstrates how to change the position of a RenderLayer in the scene graph, influencing its rendering priority relative to other objects. Adding the layer at index 0 ensures it is rendered first.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// reparent the layer to render first in the stage\nstage.addChildAt(layer, 0);\n```\n\n----------------------------------------\n\nTITLE: Handling Texture UV Updates in PixiJS\nDESCRIPTION: Shows how to manually update sprite views when texture UVs are modified, as sprites are no longer automatically notified of texture UV changes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nconst texture = await Assets.load('bunny.png');\nconst sprite = new Sprite(texture);\n\ntexture.frame.width = texture.frame.width/2;\ntexture.update();\n\n// guarantees the texture changes will be reflected on the sprite\nsprite.onViewUpdate();\n\n\n// alternatively you can hooke into the sprites event\ntexture.on('update', ()=>{sprite.onViewUpdate});\n```\n\n----------------------------------------\n\nTITLE: Importing Community Filters (v7)\nDESCRIPTION: This snippet shows the v7 import path for community filters, typically using `@pixi/filter-*` packages.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\n```\n\n----------------------------------------\n\nTITLE: Centering a PixiJS Sprite on Screen (JavaScript)\nDESCRIPTION: Sets the anchor point of the 'bunny' Sprite to its center (0.5, 0.5) using `anchor.set(0.5)`. Then, positions the Sprite at the horizontal and vertical center of the application's screen by setting its `x` and `y` properties based on `app.screen.width` and `app.screen.height`.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v7.0.0/gettingStarted/step2-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// center the sprite's anchor point\nbunny.anchor.set(0.5)\n\n// move the sprite to the center of the screen\nbunny.x = app.screen.width / 2\nbunny.y = app.screen.height / 2\n```\n\n----------------------------------------\n\nTITLE: Render ExampleEditor with Web Font\nDESCRIPTION: This snippet renders the ExampleEditor component, passing the imported 'IndexFile' as the content for 'index.js'. This will display the web font example's code and allow it to be edited/executed.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/web-font.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Updating Scene Position in Ticker Callback (JavaScript)\nDESCRIPTION: Updates the scene's horizontal position ('scene.positionX') within the application's ticker callback based on character movement. It determines the scrolling speed based on the 'spineBoy' character's state (hover, run, or walk) and applies the movement only during the 'walk' state, adjusting for direction ('spineBoy.direction') and scene scale ('scene.scale'). This logic runs repeatedly to animate scene scrolling.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step6/step6-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet speed = 1.25;\n\nif (spineBoy.state.hover) speed = 7.5;\nelse if (spineBoy.state.run) speed = 3.75;\n\nif (spineBoy.state.walk)\n{\n    scene.positionX -= speed * scene.scale * spineBoy.direction;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Editor Component with Gradient Resource Example in React/JSX\nDESCRIPTION: This snippet renders the ExampleEditor component, passing it the gradient resource example file and setting the PixiJS dependency to the version specified in the imported version file.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/textures/gradient-resource.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Creating Graphics Shapes (v8)\nDESCRIPTION: This snippet shows the updated v8 PixiJS Graphics API for drawing shapes. The new pattern is to first define the shape geometry (`rect`, `circle`) and then apply fills or strokes using the `fill` or `stroke` methods, often with option objects.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// red rect\nconst graphics = new Graphics()\n  .rect(50, 50, 100, 100)\n  .fill(0xFF0000);\n\n\n// blur rect with stroke\nconst graphics2 = new Graphics()\n  .rect(50, 50, 100, 100)\n  .fill('blue')\n  .stroke({width:2, color:'white'});\n```\n\n----------------------------------------\n\nTITLE: Applying Displacement Filter to Stage in PixiJS (JavaScript)\nDESCRIPTION: This snippet creates a new instance of the `DisplacementFilter`, passing the previously created sprite and a scale value (50) as options. The created filter is then assigned to the `filters` array of the PixiJS application's stage, applying the distortion effect to all content within the stage.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step5/step5-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter = new DisplacementFilter({\n    sprite,\n    scale: 50,\n});\n\napp.stage.filters = [filter];\n```\n\n----------------------------------------\n\nTITLE: Instantiating Example Editor Component\nDESCRIPTION: JSX code using the custom `ExampleEditor` component to display the loaded code files. It passes an object where keys are the filenames and values are the imported file contents.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/filters-advanced/mouse-blending.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor files={{\n    \"index.js\": IndexFile,\n    'mouseBlending.vert': mouseBlendingVert,\n    'mouseBlending.frag': mouseBlendingFrag,\n}} />\n```\n\n----------------------------------------\n\nTITLE: Applying Fill with Options to Graphics (v8)\nDESCRIPTION: This snippet demonstrates applying fills, including texture fills, in PixiJS v8. The `fill` method now accepts a `FillStyle` options object or a color directly, replacing `beginTextureFill` and the old `beginFill` signature.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const rect = new Graphics()\n   .rect(0, 0, 100, 100)\n   .fill({texture:Texture.WHITE, alpha:0.5, color:0xFF0000})\n   .rect(100, 0, 100, 100)\n   .fill({color:0xFFFF00, alpha:0.5});\n```\n\n----------------------------------------\n\nTITLE: Connecting Character Control to User Input\nDESCRIPTION: Links user input from a controller to character movement states within the PixiJS application ticker. Handles spawn initiation, directional facing via `direction`, and various movement states (walk, run, hover, jump). The update function skips animation logic during spawn and updates states based on key presses.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step4/step4-content.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nspineBoy.spawn();\n\napp.ticker.add(() => {\n    if (spineBoy.isSpawning()) return;\n\n    spineBoy.state.walk = controller.keys.left.pressed || controller.keys.right.pressed;\n    if (spineBoy.state.run && spineBoy.state.walk) spineBoy.state.run = true;\n    else spineBoy.state.run = controller.keys.left.doubleTap || controller.keys.right.doubleTap;\n    spineBoy.state.hover = controller.keys.down.pressed;\n    if (controller.keys.left.pressed) spineBoy.direction = -1;\n    else if (controller.keys.right.pressed) spineBoy.direction = 1;\n    spineBoy.state.jump = controller.keys.space.pressed;\n\n    spineBoy.update();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Animated Sprite Jet Example\nDESCRIPTION: This code snippet imports necessary components for the Animated Sprite Jet example. It imports the ExampleEditor component from the site and the JavaScript code for the animated sprite jet example. It also imports the pixi.js version from a json file.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/sprite/animated-sprite-jet.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./animated-sprite-jet';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Assets Cache Behavior Example in PixiJS\nDESCRIPTION: Illustrates how the `Assets` system caches requests by URL. Loading the same URL multiple times with `Assets.load` will return the exact same Promise instance, ensuring the asset is only downloaded and processed once.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/assets.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npromise1 = Assets.load('bunny.png')\npromise2 = Assets.load('bunny.png')\n// promise1 === promise2\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component and Files for Simple Plane in React\nDESCRIPTION: This snippet shows how the documentation page imports the ExampleEditor component and loads raw content of the example file. It also imports the PixiJS version information to ensure the correct dependency is used.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/basic/simple-plane.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./simple-plane';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS Spinner Examples\nDESCRIPTION: This snippet imports various JavaScript files containing spinner implementations and the main index file. These files are loaded as raw text using '!!raw-loader!', allowing the ExampleEditor component to access and display the code. The 'ExampleEditor' component is the primary means of rendering and interacting with the spinners.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/spinners.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./spinners/index';\nimport SpinnerGenerator1 from '!!raw-loader!./spinners/spinner1';\nimport SpinnerGenerator2 from '!!raw-loader!./spinners/spinner2';\nimport SpinnerGenerator3 from '!!raw-loader!./spinners/spinner3';\nimport SpinnerGenerator4 from '!!raw-loader!./spinners/spinner4';\nimport SpinnerGenerator5 from '!!raw-loader!./spinners/spinner5';\nimport SpinnersIntersect from '!!raw-loader!./spinners/intersect';\n```\n\n----------------------------------------\n\nTITLE: Adding Spine Character to Stage with PixiJS\nDESCRIPTION: This code creates an instance of a `SpineBoy` class (assumed to contain the Spine animation) and adds its view to the PixiJS application's stage. It also sets the position and scale of the character for display. The character is positioned in the center and 80 pixels from the bottom, and scaled down to 0.5. The dependencies include a SpineBoy class and a PixiJS app object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step2/step2-content.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create our character\nconst spineBoy = new SpineBoy();\n\n// Adjust character transformation.\nspineBoy.view.x = app.screen.width / 2;\nspineBoy.view.y = app.screen.height - 80;\nspineBoy.spine.scale.set(0.5);\n\n// Add character to the stage.\napp.stage.addChild(spineBoy.view);\n```\n\n----------------------------------------\n\nTITLE: Rendering the Example Editor Component\nDESCRIPTION: This JSX snippet renders the `ExampleEditor` component. It passes the loaded example code (`IndexFile`) as the content for the `index.js` file within the editor and specifies the `pixi.js` dependency using the version imported earlier. This sets up the interactive PixiJS async example on the page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/async.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Example with ExampleEditor (JSX)\nDESCRIPTION: Utilizes the imported `ExampleEditor` React component to render a code editor instance within the Markdown page. It passes the raw code content stored in the `IndexFile` variable, assigning it to a virtual file named `index.js` within the editor.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/texture.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Tiling Sprite Example using ExampleEditor Component\nDESCRIPTION: This code renders the ExampleEditor component, passing in the 'index.js' file content and the PixiJS dependency based on the imported version. It enables interactive editing and visualization of Tiling Sprite code examples within the documentation page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/sprite/tiling-sprite.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Timing and Screen Wrap Bounds (JavaScript)\nDESCRIPTION: This snippet extracts the time delta from the ticker and calculates stage boundaries for fish movement. 'stagePadding' expands the movement area beyond the visible region, improving the natural appearance of fish entrances/exits. Inputs are the ticker's 'deltaTime' property and application screen width/height, while outputs are the calculated bounds for later wrap logic. Relies on a running PIXI app and a function receiving time data from the ticker.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step3/step3-content.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst delta = time.deltaTime;\n\nconst stagePadding = 100;\nconst boundWidth = app.screen.width + stagePadding * 2;\nconst boundHeight = app.screen.height + stagePadding * 2;\n```\n\n----------------------------------------\n\nTITLE: Loading PixiJS Library via CDN\nDESCRIPTION: Includes the PixiJS library in the HTML page by adding a `<script>` tag to the `<head>` section. This method uses a Content Delivery Network (CDN) link to fetch the library files directly from the web.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://pixijs.download/v7.4.2/pixi.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Re-Attaching to Layer - TypeScript\nDESCRIPTION: After adding an object back to the scene graph after it was removed, this snippet re-attaches the sprite to the RenderLayer. This ensures the sprite is rendered within the layer's context again.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlayer.attach(redGuy); // re attach it to the layer again!\n```\n\n----------------------------------------\n\nTITLE: Detaching from RenderLayer - TypeScript\nDESCRIPTION: This code snippet demonstrates how to detach a sprite (redGuy) from a RenderLayer using `layer.detach(redGuy)`. This removes the sprite from the layer's rendering context, causing it to be rendered according to its position in the scene graph.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlayer.detach(redGuy); //  Stop rendering the rect via the layer\n```\n\n----------------------------------------\n\nTITLE: Managing RenderTexture Mipmaps in PixiJS\nDESCRIPTION: Demonstrates the updated approach for creating render textures with mipmaps and manually updating them when needed, as automatic generation is no longer triggered automatically.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nconst myRenderTexture = RenderTexture.create({width:100, height:100, autoGenerateMipmaps:true});\n\n// do some rendering..\nrenderer.render({target:myRenderTexture, container:scene});\n\n// now refresh mipmaps when you are ready\nmyRenderTexture.source.updateMipmaps();\n```\n\n----------------------------------------\n\nTITLE: Importing and Managing Shader Files in PixiJS JavaScript Project\nDESCRIPTION: This snippet imports shader source code files in raw format for use in a PixiJS web application. It imports JavaScript, GLSL vertex and fragment shaders, and WGSL shader code, preparing them for rendering and editing within the ExampleEditor component. Dependencies include raw-loader for importing file content as strings.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/triangle.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./triangle/index';\nimport triangleVert from '!!raw-loader!./triangle/triangle.vert';\nimport triangleFrag from '!!raw-loader!./triangle/triangle.frag';\nimport triangleWgsl from '!!raw-loader!./triangle/triangle.wgsl';\n```\n\n----------------------------------------\n\nTITLE: Applying Inverse Masks in PixiJS v8.5.0 - JavaScript\nDESCRIPTION: Demonstrates the new method to create inverse masking effects using element.setMask with the inverse:true parameter. Enables cut-out visual effects and creative masking scenarios in PixiJS v8.5.0+. Inputs are mask elements and target display objects; outputs are masked rendering with areas outside the mask visible. Usage requires understanding of masking concepts in PixiJS and appropriate mask shapes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport InverseMaskFile from '!!raw-loader!../docs/examples/masks/inverse-mask';\n```\n\n----------------------------------------\n\nTITLE: Destroying a Texture in PixiJS\nDESCRIPTION: This snippet demonstrates how to manually destroy a texture in PixiJS using the `destroy()` method.  This is a crucial step when managing textures and reducing memory usage, especially when textures are no longer needed. It's often used to free up resources held by textures that have been removed or replaced.  Prerequisites include having a PixiJS texture object available.  The output is the texture being released from memory.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/production/performance-tips.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.destroy()\n```\n\n----------------------------------------\n\nTITLE: Using New Global Transform, Tint, and Alpha Methods on Container - TypeScript\nDESCRIPTION: Provides example usage of three new Container methods—getGlobalTransform, getGlobalTint, and getGlobalAlpha—which facilitate retrieving global transformation matrices, tints, and alpha values. Requires PixiJS v8.6.0+. The methods take optional 'skipUpdate' boolean parameter controlling update overhead versus accuracy. Inputs are container instances and optional flags; outputs are transformation matrices and color/alpha values allowing advanced rendering and compositing control.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-11-29-pixi-v8.6.0.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst skipUpdate = false;\nconst outMatrix = new Matrix();\n\n// writes and returns outMatrix;\nconst globalTransform = container.getGlobalTransform(outMatrix, skipUpdate);\n\nconst globalTint = container.getGlobalTint(skipUpdate);\n\nconst globalAlpha = container.getGlobalAlpha(skipUpdate);\n```\n\n----------------------------------------\n\nTITLE: Enable Mipmapping for RenderTexture (v4)\nDESCRIPTION: This snippet shows how to enable mipmapping for a render texture in PixiJS v4. This code is no longer needed in v5.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderer = PIXI.autoDetectRenderer();\nrenderer.bindTexture(baseRenderTex, false, 0);\nconst glTex = baseRenderTex._glTextures[renderer.CONTEXT_UID];\nglTex.enableMipmap(); // this is what actually generates mipmaps in WebGL\nglTex.enableLinearScaling(); // this is what tells WebGL to USE those mipmaps\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS version information\nDESCRIPTION: This code imports the PixiJS version data from a JSON file, providing version compatibility information for dependencies when rendering the example within the editor.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/triangle-textured.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Area in PixiJS\nDESCRIPTION: This snippet shows how to define a hit area for an object using `hitArea = new PIXI.Rectangle(x,y,w,h)`.  This is useful to set the area where the events can occur such as clicks. The `x, y, w, h` parameters define the rectangle that is the hit area.  The output is a defined area which can improve the performance by helping avoid unnecessary traversing of the object's children during event detection.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/production/performance-tips.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhitArea = new PIXI.Rectangle(x,y,w,h)\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Project with Yarn (Bash)\nDESCRIPTION: This command utilizes the Yarn package manager's `create` command to execute the `create-pixi.js` package. Similar to the npm version, executing this command in a terminal starts the interactive setup wizard for a new PixiJS project via the `PixiJS Create` CLI, guiding the user through template selection and initial project configuration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-12-06-pixi-create.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create pixi.js\n```\n\n----------------------------------------\n\nTITLE: Importing PIXI and pixi-spine Plugins in JavaScript\nDESCRIPTION: This snippet shows how to import the core PIXI.js library and the pixi-spine plugin using ES module syntax in JavaScript. Both libraries are imported so that PIXI is available within the module scope, and pixi-spine can be loaded as a plugin depending on the PIXI global variable. This code must be placed at the top of your modules requiring PIXI and pixi-spine functionality.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as PIXI from 'pixi.js';\nimport 'pixi-spine'; // or other plugins that need global 'PIXI' to be defined first\n```\n\n----------------------------------------\n\nTITLE: Clearing Filters in PixiJS\nDESCRIPTION: This snippet demonstrates how to release memory associated with filters applied to a display object by setting its `filters` property to `null`.  This is used to free up memory and improve performance, especially when filters are no longer needed. It's a cleanup procedure in the context of PixiJS. Prerequisites include having a PixiJS display object with filters applied. The output is the filters no longer being applied and the associated memory being released.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/production/performance-tips.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndisplayObject.filters = null\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Project with Bun (Bash)\nDESCRIPTION: This command uses the Bun runtime and package manager's `create` command to execute the `create-pixi.js` package. Executing this command in a terminal launches the interactive `PixiJS Create` CLI process for creating a new PixiJS project, prompting the user for choices regarding project templates and setup options.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-12-06-pixi-create.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun create pixi.js\n```\n\n----------------------------------------\n\nTITLE: Adding a Sprite to the PixiJS Stage in JavaScript\nDESCRIPTION: Adds the configured 'background' sprite to the main stage of the PixiJS application ('app.stage'). This makes the sprite visible and part of the application's scene graph. Requires the 'app' object and the 'background' sprite.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step2/step2-content.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.stage.addChild(background);\n```\n\n----------------------------------------\n\nTITLE: Creating Sky Sprite in PixiJS\nDESCRIPTION: Creates a sky sprite that fills the entire scene by setting its anchor to the bottom left and dimensions to match the scene width and height.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step5/step5-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.sky = Sprite.from('sky');\nthis.sky.anchor.set(0, 1);\nthis.sky.width = width;\nthis.sky.height = height;\n```\n\n----------------------------------------\n\nTITLE: Adding Child At - TypeScript\nDESCRIPTION: This code snippet adds 'redGuy' back to the stage at a specified index. If 'redGuy' was previously removed from both the stage and a render layer, adding it back to the stage alone will not re-attach it to the render layer. Explicit re-attachment is required.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/render-layers.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// add red guy to his original position\nstage.addChildAt(redGuy, 0);\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Example Code in MDX\nDESCRIPTION: This snippet shows JavaScript import statements within an MDX file. It imports the `ExampleEditor` React component, raw content from the `./custom` file (presumably containing PixiJS code) using `raw-loader`, and version information from a JSON file. These imports set up the necessary assets for the page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-advanced/custom.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./custom';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Animating Track Planks for Continuous Scrolling in PixiJS\nDESCRIPTION: Adds a ticker to animate the train track planks by moving them leftward at a speed faster than trees, creating the illusion of motion. When a plank moves completely off-screen to the left, it is repositioned to the right end to loop the animation infinitely.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step6/step6-content.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.ticker.add((time) => {\n    const dx = time.deltaTime * 6;\n\n    planks.forEach((plank) => {\n        plank.x -= dx;\n\n        if (plank.x <= -(plankWidth + plankGap)) {\n            plank.x += plankCount * (plankWidth + plankGap) + plankGap * 1.5;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Local to Global Coordinates in PixiJS (JavaScript)\nDESCRIPTION: This snippet shows how to obtain the global position of a display object in PixiJS using the toGlobal method. The method translates the local coordinate [0,0] for 'obj' (relative to its parent) into global scene coordinates, which is useful for tasks like viewport culling or collision detection. Requires an initialized DisplayObject (e.g., Sprite or Container) and accesses the '@pixi/display' module. Returns an object of type Point with global x and y values.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/scene-graph.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the global position of an object, relative to the top-left of the screen\nlet globalPos = obj.toGlobal(new Point(0,0));\n```\n\n----------------------------------------\n\nTITLE: Initializing Renderer in PixiJS v8\nDESCRIPTION: This snippet shows how to initialize the PixiJS v8 renderer using the `autoDetectRenderer` function.  The function automatically selects the most appropriate rendering method (WebGPU or WebGL) based on the browser's capabilities. This is a core part of setting up a PixiJS application, allowing developers to harness the benefits of the new engine.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2023-10-03-pixi-v8-beta.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { autoDetectRenderer } from \"pixi.js\";\n\nasync function init()\n{\n  const renderer = await autoDetectRenderer({\n    // any settings\n  }); // will return a WebGL or WebGPU renderer\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Spine Character with PixiJS\nDESCRIPTION: This snippet demonstrates how to instantiate a Spine character using the `Spine.from()` method.  It takes an options object as input, specifying the skeleton and atlas files. The created spine animation is stored as a member of the class and added to the class's view container. This requires preloaded spine skeleton and atlas files (spineSkeleton and spineAtlas).\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step2/step2-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.spine = Spine.from({\n    skeleton: 'spineSkeleton',\n    atlas: 'spineAtlas',\n});\nthis.view.addChild(this.spine);\n```\n\n----------------------------------------\n\nTITLE: Displacement Map Flag Example with PixiJS\nDESCRIPTION: This code snippet demonstrates the use of PixiJS to create a displacement map flag effect. It imports the necessary modules and uses the ExampleEditor component to display and run the example. The example uses a displacement map to distort an image, simulating a flag waving in the wind. It depends on pixi.js version specified in pixi-version.json.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-basic/displacement-map-flag.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./displacement-map-flag';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Updating PIXI.Renderer Constructor Call in JavaScript\nDESCRIPTION: Shows the correct way to instantiate `PIXI.Renderer` in v5 by passing `width` and `height` within the options object, replacing the deprecated v4 signature `(width, height, options)`. Mentions potential benefits of `transparent: true` and the `autoDensity: true` option for v4 resizing behavior.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst renderer = new PIXI.Renderer(800, 600, { transparent: true }); // bad\nconst renderer = new PIXI.Renderer({ width: 800, height: 600, transparent: true }); // good\n```\n\n----------------------------------------\n\nTITLE: Drawing the Train Track's Metal Rail in PixiJS\nDESCRIPTION: Creates a static metal rail above the track planks as a filled rectangle, using specified height and color. The rail is positioned just above the planks and added to the scene for rendering.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step6/step6-content.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst railHeight = trackHeight / 2;\nconst railY = plankY - plankHeight;\nconst rail = new Graphics()\n    .rect(0, railY - railHeight, width, railHeight)\n    .fill({ color: 0x5c5c5c });\n\napp.stage.addChild(rail);\n```\n\n----------------------------------------\n\nTITLE: Applying Inherited Tint and Blend Mode to PixiJS Container - TypeScript/JavaScript\nDESCRIPTION: Illustrates how setting `tint` or `blendMode` on a PixiJS Container in v8 now inherits the effect down to all its children. This simplifies applying common visual styles like color tints or blend modes to hierarchies of display objects.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// will make all the children tinted red\ncontainer.tint = 'red'\n// will make all the children have the add blend mode\ncontainer.blendMode = 'add'\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Mesh Example with React\nDESCRIPTION: This code renders the `ExampleEditor` React component, passing in a `files` prop. The `files` prop is an object that contains the example JavaScript code, keyed by the filename \"index.js\".  The `ExampleEditor` likely handles the loading and display of the PixiJS example code, enabling user interaction or editing of the example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/mesh-from-path.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for PixiJS Mesh in React\nDESCRIPTION: This snippet imports necessary modules for the React component that displays the PixiJS mesh example. It imports the `ExampleEditor` component from a local path. Additionally, it imports the raw JavaScript code for the PixiJS example using `raw-loader`, assigning it to `IndexFile`. This sets up the component to render and display the example code.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/mesh-from-path.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./mesh-from-path';\n```\n\n----------------------------------------\n\nTITLE: Drawing Tree Trunk with PixiJS Graphics API in JavaScript\nDESCRIPTION: Creates a tree trunk using PixiJS Graphics API's rectangle drawing method. The trunk is centered horizontally with a specified width and height, filled with a brown color.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/chooChooTrain/step5/step5-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst trunkWidth = 30;\nconst trunkHeight = height / 4;\nconst trunkColor = 0x563929;\nconst graphics = new Graphics()\n        .rect(-trunkWidth / 2, -trunkHeight, trunkWidth, trunkHeight)\n        .fill({ color: trunkColor });\n```\n\n----------------------------------------\n\nTITLE: Initializing PixiJS Renderer with Shared Context in JavaScript\nDESCRIPTION: Initializes a PixiJS WebGLRenderer using the WebGL context obtained from the previously created Three.js renderer via `threeRenderer.getContext()`. It sets the dimensions to match the Three.js renderer, disables automatic clearing before rendering (`clearBeforeRender: false`) to prevent erasing the Three.js output, creates a root container (stage), and adds a simple Graphics object to it.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/advanced/mixing-three-and-pixi.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pixiRenderer = new PIXI.WebGLRenderer();\n\nawait pixiRenderer.init({\n    context: threeRenderer.getContext(),\n    width: WIDTH,\n    height: HEIGHT,\n    clearBeforeRender: false, // Prevent PixiJS from clearing the Three.js render\n});\n\nconst stage = new PIXI.Container();\nconst amazingUI = new PIXI.Graphics()\n    .roundRect(20, 80, 100, 100, 5)\n    .roundRect(220, 80, 100, 100, 5)\n    .fill(0xffff00);\n\nstage.addChild(amazingUI);\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Adding Scene to Stage in PixiJS\nDESCRIPTION: Creates the scene with the application's screen dimensions and adds it to the stage, ensuring it's placed before the character in the display list.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step5/step5-content.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst scene = new Scene(app.screen.width, app.screen.height);\n\napp.stage.addChild(scene.view, spineBoy.view);\n```\n\n----------------------------------------\n\nTITLE: Configure TypeScript tsconfig.json for PixiJS v6\nDESCRIPTION: Describes the necessary modifications to the \"compilerOptions\" in your `tsconfig.json` file for compatibility with PixiJS v6. Setting \"moduleResolution\" to \"node\" and enabling \"esModuleInterop\" is required to correctly handle external dependencies like EventEmitter3 and prevent typing issues.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v6.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",\n    // Required for importing 3rd-party dependencies like EventEmitter3\n    \"esModuleInterop\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JavaScript ES5 and ES6 Syntax\nDESCRIPTION: Illustrates the syntactical differences between older ES5 JavaScript and newer ES6 JavaScript, specifically focusing on variable declaration (`var` vs `const`) and anonymous function syntax (`function()` vs `() =>`). This comparison highlights the cleaner syntax used in ES6 examples throughout the guide.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/basics/getting-started.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ES5\nvar x = 5;\nsetTimeout(function() { alert(x); }, 1000);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6\nconst x = 5;\nsetTimeout(() => alert(x), 1000);\n```\n\n----------------------------------------\n\nTITLE: Creating Graphics Holes (v5 Method) in PixiJS JavaScript\nDESCRIPTION: Demonstrates the updated v5 API for creating holes in `PIXI.Graphics`. Uses `beginHole()` and `endHole()` to define the hole area, which now supports shape-drawing methods like `drawRect` and `drawCircle` within the hole definition.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst graphic = new PIXI.Graphics()\n  .beginFill(0xff0000)\n  .drawRect(0, 0, 100, 100)\n  .beginHole()\n  .drawCircle(50, 50, 30)\n  .endHole();\n```\n\n----------------------------------------\n\nTITLE: Sharing Graphics Context (v8)\nDESCRIPTION: This snippet demonstrates how Graphics data is shared in PixiJS v8 using the new `GraphicsContext`. Drawing commands are applied to a `GraphicsContext` instance, which can then be passed to multiple `Graphics` objects for efficient sharing.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const context = new GraphicsContext()\n    .rect(50, 50, 100, 100)\n    .fill(0xFF0000);\n\n  const rect = new Graphics(context);\n  const secondRect = new Graphics(context);\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from GraphicsPath - PixiJS/TypeScript\nDESCRIPTION: This snippet demonstrates the creation of geometry from a `GraphicsPath`. It involves creating a path, generating geometry from that path, and then using the geometry with a `Mesh` object.  Dependencies include PixiJS and usage of GraphicsPath and buildGeometryFromPath function.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst path = new GraphicsPath()\n    .rect(-50, -50, 100, 100)\n\n// create geometry from the path:\nconst geometry = buildGeometryFromPath({\n    path,\n});\n\nconst mesh = new Mesh({\n    geometry,\n    texture: Texture.WHITE,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Antialiased PixiJS RenderTexture - TypeScript/JavaScript\nDESCRIPTION: Shows how to easily enable antialiasing when creating a `RenderTexture` in PixiJS v8 by setting the `antialias` property in the creation options. This simplifies obtaining smoother edges when rendering content off-screen to a texture, similar to setting antialiasing on the main renderer.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-03-05-pixi-v8-launches.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst texture = RenderTexture.create({\n    width:100,\n    height:100,\n    antialias:true // easy as that\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Particles to ParticleContainer (v8)\nDESCRIPTION: This snippet demonstrates the v8 method for adding items to a `ParticleContainer`. It requires creating instances of the new lightweight `Particle` class (or an object implementing `IParticle`) and adding them using the `addParticle` method.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst container = new ParticleContainer();\n\nfor (let i = 0; i < 100000; i++) {\n    const particle = new Particle(texture);\n    container.addParticle(particle);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Bundler Import Patterns in PixiJS v5 JavaScript\nDESCRIPTION: Presents the recommended ways to import PixiJS v5 when using module bundlers. Shows both namespace import (`import * as PIXI`) and named imports (`import { autoDetectRenderer }`) as valid approaches that work with tree-shaking.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport * as PIXI from \"pixi.js\";\nconst renderer = PIXI.autoDetectRenderer();\n\n// or even better:\nimport { autoDetectRenderer } from \"pixi.js\";\nconst renderer = autoDetectRenderer();\n```\n\n----------------------------------------\n\nTITLE: Using autoDetectRenderer with Default `pixi.js` Package (v5) in JavaScript\nDESCRIPTION: Demonstrates importing the standard `pixi.js` v5 package and calling `autoDetectRenderer`. Explains that this will return a WebGL `Renderer` or throw an error, as the `CanvasRenderer` is not included in this default package.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport * as PIXI from \"pixi.js\";\n// Will NOT return CanvasRenderer because canvas-based\n// functionality was removed from \"pixi.js\"\nconst renderer = PIXI.autoDetectRenderer(); // return PIXI.Renderer or throws error\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor React Component\nDESCRIPTION: This snippet imports the 'ExampleEditor' component from the specified path, enabling the use of a custom editor interface for code editing or display purposes within the React application. Dependencies include React and the component's internal module structure.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/from-font.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Checking if a PixiJS DisplayObject is Interactive\nDESCRIPTION: This snippet demonstrates how to check if a PixiJS DisplayObject (like a Sprite) is interactive by accessing its `isInteractive` property. This property returns `true` if the object's `eventMode` is set to either `static` or `dynamic`, indicating it can emit interaction events.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/components/interaction.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (sprite.isInteractive()) {\n    // sprite is interactive\n}\n```\n\n----------------------------------------\n\nTITLE: Diagonal Linear Gradient Fill in PixiJS\nDESCRIPTION: This snippet creates a diagonal linear gradient using `FillGradient`. It sets the `start` to `{x: 0, y: 0}` and `end` to `{x: 1, y: 1}`, creating a diagonal gradient from top-left to bottom-right.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst diagonalGradient = new FillGradient({\n  type: 'linear',\n  start: { x: 0, y: 0 },\n  end: { x: 1, y: 1 },\n  colorStops: [\n    { offset: 0, color: 'yellow' },\n    { offset: 1, color: 'green' },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Bundler Import Pattern in PixiJS v5 JavaScript\nDESCRIPTION: Illustrates an invalid import pattern for PixiJS v5 when using bundlers like Rollup or Parcel. Importing \"pixi.js\" solely for side effects no longer creates a global `PIXI` object, making subsequent calls like `PIXI.autoDetectRenderer()` fail.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport \"pixi.js\";\nconst renderer = PIXI.autoDetectRenderer(); // INVALID! No more global.PIXI!\n```\n\n----------------------------------------\n\nTITLE: Graphics Holes (v5)\nDESCRIPTION: This snippet demonstrates the new API for creating holes in `PIXI.Graphics` objects in PixiJS v5, using `beginHole` and `endHole` methods. This replaces the `addHole` method used in v4.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst graphic = new PIXI.Graphics()\n  .beginFill(0xff0000)\n  .drawRect(0, 0, 100, 100)\n  .beginHole()\n  .drawCircle(50, 50, 30)\n  .endHole();\n```\n\n----------------------------------------\n\nTITLE: Installing PixiJS v8 Beta via npm\nDESCRIPTION: This snippet demonstrates how to install the prerelease version of PixiJS v8 using npm. It's a direct command for developers to quickly get started with the beta version of the library and test its new features and improvements.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2023-10-03-pixi-v8-beta.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install pixi.js@prerelease-v8\n```\n\n----------------------------------------\n\nTITLE: Creating BaseTexture from Canvas in PixiJS v5 JavaScript\nDESCRIPTION: Illustrates the v5 method for creating a `PIXI.BaseTexture` directly from an HTML Canvas element using the static `BaseTexture.from()` method. This unified approach replaces the specific `fromCanvas` or other `from*` methods used in earlier versions.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst canvas = document.createElement('canvas');\nconst baseTexture = PIXI.BaseTexture.from(canvas);\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up PixiJS Promise Example\nDESCRIPTION: This code imports the ExampleEditor component, loads the Promise example file content, and sets up version dependencies for the PixiJS example. The ExampleEditor component is then rendered with the example code and dependency configuration.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/promise.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./promise';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Fill in PixiJS\nDESCRIPTION: This snippet creates a linear gradient using `FillGradient` with a color transition from yellow to green and fills a rectangle with it. The gradient transitions along a straight line.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/components/graphics-fill.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst gradient = new FillGradient({\n  type: 'linear',\n  colorStops: [\n    { offset: 0, color: 'yellow' },\n    { offset: 1, color: 'green' },\n  ],\n});\n\nconst obj = new Graphics().rect(0, 0, 100, 100)\n  .fill(gradient);\n```\n\n----------------------------------------\n\nTITLE: Using autoDetectRenderer with `pixi.js-legacy` Package (v5) in JavaScript\nDESCRIPTION: Shows how to import the `pixi.js-legacy` v5 package to ensure access to `CanvasRenderer`. Calling `autoDetectRenderer` with this package will return either a WebGL `Renderer` or a `CanvasRenderer`, providing the v4 fallback behavior.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport * as PIXI from \"pixi.js-legacy\";\nconst renderer = PIXI.autoDetectRenderer(); // returns PIXI.Renderer or PIXI.CanvasRenderer\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor component with mesh-plane code\nDESCRIPTION: This component renders the 'ExampleEditor' with the loaded 'mesh-plane' source code assigned to the 'index.js' file. It provides an interactive environment for users to view and modify the mesh-plane implementation, integrating source code with visual output.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/mesh-plane.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Renderer Constructor Parameters\nDESCRIPTION: This snippet demonstrates the change in the `Renderer` constructor in PixiJS v5. The `width` and `height` parameters should be included in the `options` object instead of being passed as separate arguments.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderer = new PIXI.Renderer(800, 600, { transparent: true }); // bad\nconst renderer = new PIXI.Renderer({ width: 800, height: 600, transparent: true }); // good\n```\n\n----------------------------------------\n\nTITLE: Comparing ES5 and ES6 JavaScript Syntax\nDESCRIPTION: Demonstrates the difference between old-school JavaScript (ES5) and modern ES6 syntax, showing variable declaration and function passing differences.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/basics/getting-started.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ES5\nvar x = 5;\nsetTimeout(function() { alert(x); }, 1000);\n// ES6\nconst x = 5;\nsetTimeout(() => alert(x), 1000);\n```\n\n----------------------------------------\n\nTITLE: Adding Children to ParticleContainer (v7)\nDESCRIPTION: This snippet shows how Sprites were added as children to a `ParticleContainer` in PixiJS v7 using the standard `addChild` method.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst container = new ParticleContainer();\n\nfor (let i = 0; i < 100000; i++) {\n    const particle = new Sprite(texture);\n    container.addChild(particle);\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to Async Extract Methods in PixiJS v7\nDESCRIPTION: Example showing how to update code to use the new async methods for extracting base64 and image data from the renderer.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v7.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application, EventBoundary} from 'pixi.js';\n\nconst app = new Application();\nconst dataUri = app.renderer.extract.base64();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application, EventBoundary} from 'pixi.js';\n\nconst app = new Application();\nconst dataUri = await app.renderer.extract.base64();\n```\n\n----------------------------------------\n\nTITLE: Using Extract Methods in PixiJS v7\nDESCRIPTION: Example of using the new asynchronous extract methods in PixiJS v7, which now return promises.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Application, EventBoundary} from 'pixi.js';\n\nconst app = new Application();\nconst dataUri = await app.renderer.extract.base64();\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Position Getter in JavaScript\nDESCRIPTION: Defines a getter for the 'positionX' property within a Scene class. It retrieves the horizontal tile position ('tilePosition.x') of the primary platform TilingSprite layer, representing the main scene scroll position.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step6/step6-content.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn this.platform.tilePosition.x;\n```\n\n----------------------------------------\n\nTITLE: Import Index File as Raw String\nDESCRIPTION: Imports the 'index.js' file as a raw string using raw-loader. This allows the code to be embedded directly into the component for display.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/custom-mouse-icon.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./custom-mouse-icon';\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Keyboard Controller (JavaScript)\nDESCRIPTION: Creates a new instance of the previously defined `Controller` class within the main IIFE of `index.js`. This instance will manage the keyboard state.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/spineBoyAdventure/step3/step3-content.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new Controller();\n```\n\n----------------------------------------\n\nTITLE: Import ExampleEditor component\nDESCRIPTION: Imports the ExampleEditor component from the specified path. This component is likely used to display and allow editing of code examples.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/textures/gradient-basic.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Converting Property-based Event Handlers to Event Listeners\nDESCRIPTION: Example showing how to migrate from using property-based event handlers to the standard event listener pattern in PixiJS v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v7.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.pointertap = () => {\n // handler the pointertap\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.on('pointertap', () => {\n // handler the pointertap\n});\n```\n\n----------------------------------------\n\nTITLE: Import PixiJS Version\nDESCRIPTION: Imports the pixi.js version from the pixi-version.json file. This version information is used as a dependency for the ExampleEditor component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/custom-mouse-icon.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Importing from Individual Packages in PixiJS v6\nDESCRIPTION: Example of importing classes from individual packages in PixiJS v6, which is no longer recommended in v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { ALPHA_MODES } from '@pixi/constants';\nimport { string2hex } from '@pixi/utils';\n```\n\n----------------------------------------\n\nTITLE: Import PixiJS version information\nDESCRIPTION: Imports the version information from the pixi-version.json file. This information is used to specify the PixiJS dependency for the example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/textures/gradient-basic.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Using ButtonMode in PixiJS v6\nDESCRIPTION: Example of setting buttonMode in PixiJS v6, which has been removed in v7.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.buttonMode = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fish Counts and Asset Aliases (JavaScript)\nDESCRIPTION: This snippet defines the number of fish to create and prepares an array of asset aliases, referencing five preloaded fish sprites. It serves as setup for later sprite instantiation within the application and depends on the prior successful preloading of fish asset textures with the listed aliases. Key variables are 'fishCount' for the total quantity and 'fishAssets' as the array of string names.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/src/tutorials/v8.0.0/fishPond/step3/step3-content.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fishCount = 20;\nconst fishAssets = ['fish1', 'fish2', 'fish3', 'fish4', 'fish5'];\n```\n\n----------------------------------------\n\nTITLE: Updating translationMatrix Uniform in PixiJS v6 Mesh Override\nDESCRIPTION: Shows the required update for PixiJS v6 when overriding Mesh rendering logic involving the 'translationMatrix' uniform. The conditional check present in v5 must be removed; the uniform should be assigned directly to ensure correct synchronization and prevent potential null pointer errors.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v6.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nshader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n```\n\n----------------------------------------\n\nTITLE: Import PIXI (pixi.js)\nDESCRIPTION: This snippet illustrates how to import PixiJS from the `pixi.js` package. In v5, this will NOT return CanvasRenderer because canvas-based functionality was removed.  It will return PIXI.Renderer or throw an error.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as PIXI from \"pixi.js\";\n// Will NOT return CanvasRenderer because canvas-based\n// functionality was removed from \"pixi.js\"\nconst renderer = PIXI.autoDetectRenderer(); // return PIXI.Renderer or throws error\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Shader (v7)\nDESCRIPTION: This snippet shows the v7 method for creating a shader using `PIXI.Shader.from`, directly passing vertex source, fragment source, and uniforms.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst shader = PIXI.Shader.from(vertex, fragment, uniforms);\n```\n\n----------------------------------------\n\nTITLE: Shimming PIXI Global with Webpack ProvidePlugin in webpack.config.js\nDESCRIPTION: This snippet demonstrates how to update your Webpack configuration by adding the ProvidePlugin to globally shim the PIXI variable. This configuration ensures the PIXI global is defined from the 'pixi.js' module before any dependent plugin code executes, which resolves runtime ReferenceError issues when plugins like pixi-spine expect PIXI to be a global variable. The example also includes placeholders for entry and output configuration requiring user replacement as appropriate.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: '...',\n    output: {\n        ...\n    },\n    plugins: [\n     new webpack.ProvidePlugin({\n       PIXI: 'pixi.js'\n     })\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Import PIXI (Individual)\nDESCRIPTION: This snippet demonstrates importing individual elements from PixiJS when using a bundler in v5. This can improve tree-shaking and reduce the bundle size.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { autoDetectRenderer } from \"pixi.js\";\nconst renderer = autoDetectRenderer();\n```\n\n----------------------------------------\n\nTITLE: Creating Graphics Shapes (v7)\nDESCRIPTION: This snippet demonstrates the v7 PixiJS Graphics API pattern for drawing shapes. It involves starting a fill or stroke mode (`beginFill`, `lineStyle`), drawing the shape (`drawRect`, `circle`), and ending the mode (`endFill`). This approach is deprecated in v8.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v8.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// red rect\nconst graphics = new Graphics()\n  .beginFill(0xFF0000)\n  .drawRect(50, 50, 100, 100)\n  .endFill();\n\n// blur rect with stroke\nconst graphics2 = new Graphics()\n  .lineStyle(2, 'white')\n  .beginFill('blue')\n  .circle(530, 50, 140, 100)\n  .endFill();\n```\n\n----------------------------------------\n\nTITLE: Get UV Buffer\nDESCRIPTION: This snippet demonstrates how to access UV buffer data inside `mesh.geometry` in PixiJS v5. Accessing `mesh.uvBuffer` property returns the UV buffer.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nget uvBuffer()\n{\n    return this.geometry.buffers[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Old Mesh Render Uniform Setting (v5)\nDESCRIPTION: Shows the method used in PixiJS v5's `Mesh._renderDefault` to conditionally set the `translationMatrix` uniform. This approach involved checking if the uniform data existed before assigning the world transform array. This conditional check should be removed in v6.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v6.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (shader.program.uniformData.translationMatrix)\n{\n    shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Mipmapping on RenderTexture (v4 Obsolete) in JavaScript\nDESCRIPTION: Presents the v4 technique for enabling mipmapping and linear scaling on a `BaseRenderTexture` by directly accessing internal WebGL texture properties (`_glTextures`, `enableMipmap`, `enableLinearScaling`). This method is noted as obsolete and unnecessary in PixiJS v5.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst renderer = PIXI.autoDetectRenderer();\nrenderer.bindTexture(baseRenderTex, false, 0);\nconst glTex = baseRenderTex._glTextures[renderer.CONTEXT_UID];\ntglTex.enableMipmap(); // this is what actually generates mipmaps in WebGL\ntglTex.enableLinearScaling(); // this is what tells WebGL to USE those mipmaps\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Shader Toy Mesh in PixiJS\nDESCRIPTION: This snippet imports the required modules and assets for displaying and interacting with a shader toy mesh within a PixiJS environment. It imports `ExampleEditor` for interactive display and code editing, and also imports the raw shader code using `raw-loader`.  The `IndexFile` likely contains the main PixiJS application code, while `shaderToy.vert` and `shaderToy.frag` contain the vertex and fragment shader code, respectively. These files provide necessary context to utilize shader toys, with the ExampleEditor being a container for demonstrating them.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/shader-toy-mesh.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./shader-toy-mesh/index';\nimport shaderToyMeshVert from '!!raw-loader!./shader-toy-mesh/shaderToy.vert';\nimport shaderToyMeshFrag from '!!raw-loader!./shader-toy-mesh/shaderToy.frag';\n```\n\n----------------------------------------\n\nTITLE: Accessing Extract and Prepare in PixiJS v6\nDESCRIPTION: Example of accessing the extract and prepare plugins in PixiJS v6, which were previously under the plugins namespace.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v7.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrenderer.plugins.extract\nrenderer.plugins.prepare\n```\n\n----------------------------------------\n\nTITLE: Manually Exposing Global PIXI (Not Recommended) in PixiJS v5 JavaScript\nDESCRIPTION: Demonstrates how to explicitly assign the imported PIXI namespace to the global scope (`window.PIXI` or `global.PIXI`). This practice is discouraged but may be necessary as a workaround for compatibility with older third-party plugins that expect a global `PIXI` object.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport * as PIXI from 'pixi.js';\nwindow.PIXI = PIXI; // some bundlers might prefer \"global\" instead of \"window\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Dragging Example with PixiJS and React\nDESCRIPTION: This snippet renders an example of a draggable PixiJS element using the ExampleEditor component. It defines dependencies including pixi.js with a version specified in pixi-version.json, and imports the example code from the 'dragging' file, allowing interactive execution in the browser. The example demonstrates dragging functionality within a PixiJS canvas context.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/events/dragging.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./dragging';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Embedding PixiJS Background Example Using React JSX\nDESCRIPTION: This snippet imports the raw source code of a PixiJS background example and the PixiJS package version, then uses the ExampleEditor React component to display the example inside a documentation site. It demonstrates how to integrate raw code files and external dependencies dynamically in JSX. Dependencies include '@site/src/components/Editor/ExampleEditor', 'raw-loader' for loading source code as text, and a local JSON file containing the PixiJS version. The snippet expects the source code as a string and a version number for the 'pixi.js' dependency, both passed as props to the ExampleEditor, which manages rendering and editing.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/background.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";import IndexFile from '!!raw-loader!./background';import version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering PixiJS Interactivity Example in React\nDESCRIPTION: This code imports a custom editor component and raw content from an interactivity file to display an interactive PixiJS example. The ExampleEditor component is used to render the imported file content as editable code examples.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/events/interactivity.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./interactivity';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor with Files and Dependencies\nDESCRIPTION: This snippet renders the 'ExampleEditor' component, passing in the loaded source files and dependency versions as props. It facilitates an embedded code editor or viewer that displays the source code and manages dependencies such as PixiJS.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/multiple.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Pointer Tracker Example with PixiJS in JavaScript\nDESCRIPTION: This snippet imports a raw source file containing a PixiJS pointer tracking example (\"pointer-tracker\") and uses a custom Editor component to render it interactively within a documentation page. It assumes dependencies on React (for JSX), PixiJS for rendering and pointer tracking, and a custom ExampleEditor component. The core input is the external JavaScript file, while the output is an embedded, interactive code editor for users to explore and test pointer event handling.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/events/pointer-tracker.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./pointer-tracker';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Integrating PixiJS Text Example with ExampleEditor\nDESCRIPTION: This snippet imports the `ExampleEditor` component, the example code from './pixi-text', and PixiJS version data from a JSON file.  The `ExampleEditor` component is then used with specified files and dependencies ('pixi.js' with its version from `version.npm`) to render and execute the PixiJS text example. It takes the example code as the value for the `files` prop and the necessary dependencies as the value for the `dependencies` prop.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/text/pixi-text.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./pixi-text';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Spinner Examples with ExampleEditor\nDESCRIPTION: This section utilizes the ExampleEditor component to display the imported spinner files. The 'files' prop of the ExampleEditor receives an object where keys are file names and values are the content of those files. This allows users to view the code, modify it, and interact with the spinner visualizations.  The structure is essential for the interactive nature of the examples.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/spinners.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\n    \"index.js\": IndexFile,\n    './spinner1.js': SpinnerGenerator1,\n    './spinner2.js': SpinnerGenerator2,\n    './spinner3.js': SpinnerGenerator3,\n    './spinner4.js': SpinnerGenerator4,\n    './spinner5.js': SpinnerGenerator5,\n    './intersect.js': SpinnersIntersect,\n}} />\n```\n\n----------------------------------------\n\nTITLE: Integrating PixiJS Example Editor Component in JSX\nDESCRIPTION: This snippet demonstrates how to import and embed the ExampleEditor React component configured with the raw source code of a PixiJS example and its package version as dependency. It imports the ExampleEditor component, fetches raw source code using raw-loader, and fetches the PixiJS npm version from a JSON file, then renders the editor with these properties to enable live editing capabilities.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/graphics/dynamic.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./dynamic';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor with Code\nDESCRIPTION: This snippet renders the `ExampleEditor` component, passing the imported JavaScript code (`IndexFile`) as a prop. The `files` prop is an object where the key is the file name (\"index.js\") and the value is the raw JavaScript code. This will display the code in an editable editor.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/tinting.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Example Code with ExampleEditor\nDESCRIPTION: This snippet demonstrates how to load the raw source code of the `./pixel-line` file using `raw-loader` and assign it to the `IndexFile` variable. This raw code content is then passed to the `<ExampleEditor>` component via the `files` prop, instructing the editor to display and potentially execute it as a file named `index.js`. This setup provides an interactive example for the user.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/pixel-line.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport IndexFile from '!!raw-loader!./pixel-line';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor and IndexFile in JavaScript\nDESCRIPTION: This snippet imports the ExampleEditor component, responsible for rendering code examples, and IndexFile, which presumably contains the code for a screen shot example. This setup enables the dynamic display and possible execution of the screen shot code within the page. Requires the `@site/src/components/Editor/ExampleEditor` dependency and a raw-loader for handling the content of './screen-shot'.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/screen-shot.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./screen-shot';\n```\n\n----------------------------------------\n\nTITLE: Importing Modules & Rendering Example Editor (JSX)\nDESCRIPTION: This code snippet imports necessary modules for rendering a PixiJS example within a documentation page.  It uses `ExampleEditor` component to display the code and handle dependencies. The example uses `IndexFile` (content from `basic/index.js`) and `version` to configure dependencies for the `ExampleEditor`.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/sprite/basic.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./basic';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Collision Detection Code in Editor\nDESCRIPTION: This snippet imports the raw collision detection code from the specified file and displays it in an embedded code editor component. It enables developers to view and potentially edit collision detection scripts within a web interface, streamlining the development process.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/collision-detection.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./collision-detection';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering the PixiJS Example using ExampleEditor (JSX)\nDESCRIPTION: Uses the `ExampleEditor` React component to display the interactive PixiJS example. It configures the component by passing the loaded example code (`IndexFile`) as the content for `index.js` within the editor's files, and specifies the required `pixi.js` dependency version.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/merging-geometry.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Files with React/JSX\nDESCRIPTION: This snippet imports necessary modules and files. It imports the ExampleEditor React component for displaying the code and the index file containing the PixiJS code. The `!!raw-loader!` webpack loader is used to import the raw content of the index file.  Dependencies include React and webpack loaders.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/transparent-background.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./transparent-background';\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS Dragging Example\nDESCRIPTION: This code snippet imports the ExampleEditor component and the JavaScript code for the dragging example from 'dragging.js'. It uses raw-loader to load the code as a string. The code is then passed as a prop to the ExampleEditor component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/events/dragging.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./dragging';\n```\n\n----------------------------------------\n\nTITLE: Integrating JavaScript Files with ExampleEditor in PixiJS\nDESCRIPTION: This snippet imports and integrates several JavaScript files (`index.js`, `Fish.js`, and `CharacterUI.js`) into an `ExampleEditor` component, presumably for display and interaction within a web page.  The `raw-loader!` webpack loader is used to load the raw content of the files, allowing them to be displayed in the editor. The files are then passed to the ExampleEditor as an object, mapping file names to their raw content.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/ordering/render-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./render-layer/index';\nimport Fish from '!!raw-loader!./render-layer/Fish';\nimport CharacterUI from '!!raw-loader!./render-layer/CharacterUI';\n\n<ExampleEditor files={{\n    \"index.js\": IndexFile,\n    'Fish.js': Fish,\n    'CharacterUI.js': CharacterUI,\n}} />\n```\n\n----------------------------------------\n\nTITLE: Render ExampleEditor with gradient example\nDESCRIPTION: Renders the ExampleEditor component with the imported gradient-basic.js code and PixiJS dependency. The ExampleEditor displays and allows editing of the JavaScript code, demonstrating the gradient example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/textures/gradient-basic.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering PixiJS Animated Sprite Jet Example\nDESCRIPTION: Imports the ExampleEditor component and a raw file containing the animated sprite jet example code, then renders it within an editor interface. This allows users to view and interact with the animation example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/sprite/animated-sprite-jet.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./animated-sprite-jet';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Enable WebGL1\nDESCRIPTION: This snippet shows how to enable WebGL1 even if WebGL2 is available in PixiJS v5. It sets the `PREFER_ENV` setting to `PIXI.ENV.WEBGL`.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPIXI.settings.PREFER_ENV = PIXI.ENV.WEBGL;\n```\n\n----------------------------------------\n\nTITLE: Forcing WebGL1 Environment in PixiJS v5 JavaScript\nDESCRIPTION: Demonstrates setting `PIXI.settings.PREFER_ENV` to `PIXI.ENV.WEBGL` to explicitly choose the WebGL1 rendering environment over the default WebGL2 (if available) in PixiJS v5.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/guides/migrations/v5.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nPIXI.settings.PREFER_ENV = PIXI.ENV.WEBGL;\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component in JavaScript\nDESCRIPTION: This snippet imports the 'ExampleEditor' React component from its source directory, enabling the embedding of code examples within the documentation page. It also imports raw source code for display purposes using 'raw-loader'. It sets up the example editor with the imported code as a file, allowing users to interact with or view the source code.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/assets/async.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./async';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for PixiJS SVG Display Example\nDESCRIPTION: This snippet imports the `ExampleEditor` component from the `@site/src/components/Editor/ExampleEditor` path and imports the `IndexFile` which is the SVG data, which will be rendered in the editor. The `ExampleEditor` component likely handles the rendering and display of the example code and the SVG data.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/svg.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./svg';\n```\n\n----------------------------------------\n\nTITLE: Import Web Font Example Code\nDESCRIPTION: This snippet imports the raw content of the 'web-font' JavaScript file using raw-loader. This allows the content of the file to be used as a string within the ExampleEditor component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/web-font.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./web-font';\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component\nDESCRIPTION: This snippet imports the `ExampleEditor` component from a local module.  This component is likely responsible for rendering an interactive code editor within the page. This enables users to modify and execute code examples directly within the documentation.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/tinting.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Rendering the ExampleEditor component with code file\nDESCRIPTION: Uses the imported 'ExampleEditor' component to display the 'index.js' code snippet within the page. It passes the code as a prop named 'files', creating an interactive or view-only display of the textured mesh example code. This component relies on the imported code content and provides a framework for example visualization.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/textured-mesh-basic.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Loading PixiJS Example Files\nDESCRIPTION: JavaScript import statements using 'raw-loader' to load the content of the example's core files: the main JavaScript logic, the vertex shader, and the fragment shader. These are then passed to the ExampleEditor component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/filters-advanced/mouse-blending.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./mouse-blending/index';\nimport mouseBlendingVert from '!!raw-loader!./mouse-blending/mouseBlending.vert';\nimport mouseBlendingFrag from '!!raw-loader!./mouse-blending/mouseBlending.frag';\n```\n\n----------------------------------------\n\nTITLE: Rendering Animated Sprite Animation Speed with PixiJS\nDESCRIPTION: This code snippet focuses on displaying and controlling the animation speed of an animated sprite within a PixiJS context. It leverages the `ExampleEditor` component to render the provided `IndexFile` JavaScript code, allowing interactive modification and immediate preview of the animated sprite's animation speed. The code is loaded from the './animated-sprite-animation-speed' location.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/sprite/animated-sprite-animation-speed.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./animated-sprite-animation-speed';\n```\n\n----------------------------------------\n\nTITLE: Import ExampleEditor Component\nDESCRIPTION: This code snippet imports the ExampleEditor component from the @site/src/components/Editor/ExampleEditor module. This component is used to display and allow editing of the example code.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/web-font.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Shader Toy Mesh using ExampleEditor in PixiJS\nDESCRIPTION: This code snippet demonstrates how to incorporate shader toy related files in the `ExampleEditor` component. It constructs the `ExampleEditor` component, injecting the file contents of `index.js`, `shaderToy.vert`, and `shaderToy.frag` for editing and rendering. This approach allows for real-time shader modification and visualization.  The `files` property of the `ExampleEditor` component accepts an object that maps file names to their contents.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/shader-toy-mesh.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{ \n    \"index.js\": IndexFile,\n    'shaderToy.vert': shaderToyMeshVert,\n    'shaderToy.frag': shaderToyMeshFrag,\n}} />\n```\n\n----------------------------------------\n\nTITLE: Importing raw index file for the textured triangle example\nDESCRIPTION: This snippet loads the raw content of the 'index.js' file related to the textured triangle example using a raw-loader, enabling it to be displayed or edited within the ExampleEditor component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/triangle-textured.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./triangle-textured';\n```\n\n----------------------------------------\n\nTITLE: Importing modules and dependencies for Texture Swap in JavaScript\nDESCRIPTION: This code snippet imports necessary modules required for the texture swap example, including a custom editor component, raw texture swap code, and version info for PixiJS. It then renders an editor component, passing in these files and dependencies to facilitate editing or viewing the texture swap functionality within a web interface.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/sprite/texture-swap.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./texture-swap';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor and Pixi.js Version Information in JavaScript\nDESCRIPTION: Imports the ExampleEditor React component used for rendering editable code examples, loads the raw source code of the screen shot example with a raw-loader, and imports the Pixi.js version from a JSON file. These imports are prerequisites to configuring the ExampleEditor component with relevant files and dependencies.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/advanced/screen-shot.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./screen-shot';\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Generating PixiJS Version Configuration\nDESCRIPTION: Retrieves up-to-date versions and tags from PixiJS and displays an interactive list for selection to create a version configuration file.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run generate-pixi-version-config\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component from Components Directory\nDESCRIPTION: This snippet imports the 'ExampleEditor' React component from the project's components directory, which is likely used for editing or displaying code examples within the application.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/multiple.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Resources for Gradient Resource Example in React/JSX\nDESCRIPTION: This code imports necessary components for the example page, including the ExampleEditor component, the raw content of the gradient-resource example file, and the PixiJS version information for dependencies.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/textures/gradient-resource.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./gradient-resource'\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SVG Example Code (JSX)\nDESCRIPTION: This snippet imports the raw source code of an SVG texture example file (`./svg-texture`) using Webpack's `raw-loader` and stores it in the `IndexFile` variable. It then renders the custom `ExampleEditor` component, passing the imported code as a file named 'index.js' to be displayed in the interactive editor.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/svg-texture.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./svg-texture';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: PixiJS Web Font Example Setup\nDESCRIPTION: This snippet sets up the web font example. It imports the ExampleEditor component, a raw-loader for the example's index.js file, and PixiJS version information. The ExampleEditor component then renders a code editor with the example code and its PixiJS dependency.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/text/web-font.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./web-font';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Loading raw bitmap-text source code using raw-loader\nDESCRIPTION: This snippet loads the raw content of the './bitmap-text' file as a string using Webpack's raw-loader, enabling inline display or processing of source code within the webpage; it requires Webpack's raw-loader setup. The loaded content is stored in the IndexFile variable for later use.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/bitmap-text.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./bitmap-text';\n```\n\n----------------------------------------\n\nTITLE: Switching Snapshot PixiJS Version Configuration\nDESCRIPTION: Changes the PixiJS version configuration for an existing documentation snapshot via an interactive selection interface.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run switch-snapshot-pixi-version-config\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor component from PixiJS site source\nDESCRIPTION: Imports the 'ExampleEditor' component from the specified path within the project source, enabling code display and interaction features. It depends on '@site/src/components/Editor/ExampleEditor' and assumes the component provides a UI for showing code snippets. This import prepares the component for rendering the code example within the page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/mesh-and-shaders/textured-mesh-basic.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ExampleEditor for PIXI.js (JavaScript + React)\nDESCRIPTION: Imports the ExampleEditor component and loads a PIXI.js example file using raw-loader, then renders the editor with the example code in the documentation page. Requires a React environment, the @site/src/components/Editor/ExampleEditor component, and raw-loader for file content. The main input is a JavaScript file representing the PIXI.js example, which is displayed in an interactive editor.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/graphics/simple.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./simple';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying a PixiJS Textured Mesh Example in JavaScript\nDESCRIPTION: This snippet imports the example source code as raw text using a loader, retrieves the PixiJS version from a JSON file, and passes these along with the editor component for rendering the textured mesh example. It requires the '@site/src/components/Editor/ExampleEditor' component, raw-loader for importing file content as strings, and a valid pixi-version.json file that holds version information. The inputs include the indexed JavaScript file content and PixiJS version dependency. The output is a configured example editor that allows viewing and editing of the textured mesh example within a documentation or demo page.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/textured-mesh-basic.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\\nimport IndexFile from '!!raw-loader!./textured-mesh-basic';\\nimport version from '../../pixi-version.json';\\n\\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Generating Example Documentation\nDESCRIPTION: Compiles JavaScript examples from src/examples into markdown files for both working docs and versioned docs directories.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run generate-example-docs\n```\n\n----------------------------------------\n\nTITLE: Building the Website for Production\nDESCRIPTION: Generates static content into the 'build' directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm build\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Version Data in JavaScript\nDESCRIPTION: This snippet imports the `TutorialGallery` component and PixiJS version data from external files. The `TutorialGallery` component is used to display the tutorials, and the version data is used to ensure the tutorials match the current PixiJS version. The imported version data will be passed as a prop to the TutorialGallery component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/tutorials/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport TutorialGallery from '@site/src/components/TutorialGallery/index';\nimport version from '../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Import PixiJS version\nDESCRIPTION: This snippet imports the version information of PixiJS from a JSON file. The version is then used as a dependency for the `ExampleEditor` component to ensure the example runs with the correct version of PixiJS. This ensures the code example is compatible with a specific version.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-advanced/shader-toy-filter-render-texture.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Display example using ExampleEditor\nDESCRIPTION: This snippet renders the `ExampleEditor` component, passing in the imported JavaScript code (`IndexFile`) and the PixiJS version as dependencies. The `ExampleEditor` component is responsible for displaying the code and allowing it to be executed. This allows the user to interact with the example and see the Shader Toy filter in action.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/filters-advanced/shader-toy-filter-render-texture.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Triangle Color Example in JSX\nDESCRIPTION: This snippet imports necessary React components for displaying the PixiJS Triangle Color example, including the ExampleEditor component and the raw content of the triangle-color file. It also imports the PixiJS version information.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/triangle-color.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./triangle-color'\nimport version from '../../pixi-version.json';\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor component from PixiJS site components\nDESCRIPTION: This code imports the ExampleEditor React component from the site components directory, which is used to showcase code examples with dependencies in a formatted editor interface.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/triangle-textured.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS Example Editor with Video Implementation\nDESCRIPTION: This code imports the ExampleEditor component and raw video implementation file, then renders the editor with the index.js file. The example likely demonstrates video texture handling in PixiJS.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/sprite/video.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./video';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring a PixiJS Particle Container Example in React\nDESCRIPTION: This code imports the ExampleEditor React component and loads a particle container example from an external file. It sets up the editor with the necessary dependencies including the specific version of pixi.js to be used in the example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/basic/particle-container.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./particle-container';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering ExampleEditor component with files and dependencies\nDESCRIPTION: This snippet renders the 'ExampleEditor' component, passing in the raw bundle file content and the PixiJS version as dependencies. It facilitates a dynamic code editing environment, showing the index.js file with the specified PixiJS version for development purposes.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/bundle.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor Component from @site/src/components/Editor/ExampleEditor\nDESCRIPTION: This code imports the ExampleEditor component from the specified path, which is used to display code examples and documentation within the webpage. It enables embedding a live code editor for user interaction; dependencies include the @site/src/components/Editor/ExampleEditor module.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/bitmap-text.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\n```\n\n----------------------------------------\n\nTITLE: Import gradient-basic.js as raw text\nDESCRIPTION: Imports the JavaScript file gradient-basic.js as a raw string using raw-loader. This allows the code to be embedded directly into the ExampleEditor component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/textures/gradient-basic.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./gradient-basic';\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Editor with Font File\nDESCRIPTION: This code renders the 'ExampleEditor' React component, passing the imported font file as part of the 'files' prop. It enables editing or displaying the example code that loads and utilizes a font resource within a graphical or web-based environment, facilitating development and debugging workflows.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/text/from-font.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Dragging Example\nDESCRIPTION: This code snippet renders the ExampleEditor component with the imported JavaScript code for the dragging example. The IndexFile variable contains the content of the 'dragging.js' file.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/events/dragging.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleEditor and IndexFile in JavaScript\nDESCRIPTION: This snippet imports the ExampleEditor component and the IndexFile. The ExampleEditor is used to render a code editor and the IndexFile likely contains the JavaScript code demonstrating the Logger functionality. The 'raw-loader' is used to import the raw content of the IndexFile. There are no explicit dependencies besides those that are implicit with PixiJS and the editor framework.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/events/logger.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./logger';\n```\n\n----------------------------------------\n\nTITLE: Loading Raw Source Code Using raw-loader\nDESCRIPTION: This snippet loads the source code of the 'multiple' module as a raw string using the Webpack 'raw-loader', facilitating code display or analysis within the editor or documentation. It requires configuration of Webpack loaders for raw loading.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/assets/multiple.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./multiple';\n```\n\n----------------------------------------\n\nTITLE: Rendering PixiJS Example using ExampleEditor Component (MDX)\nDESCRIPTION: This snippet renders an interactive code editor component. It loads the content of an external JavaScript file (`./filter`) into the `IndexFile` variable and passes it as the primary code example to the editor. It also provides the necessary PixiJS dependency version.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/masks/filter.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering the ExampleEditor component with files and dependencies\nDESCRIPTION: This snippet renders the ExampleEditor React component, passing the imported index file as a file in the 'files' prop and the PixiJS version as a dependency in the 'dependencies' prop. It enables an interactive view for the textured triangle example with associated dependencies.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/triangle-textured.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Importing Raw JavaScript Code\nDESCRIPTION: This snippet imports the raw JavaScript code from the `./tinting` file as a string. The `raw-loader` webpack loader is used to load the file content as a string, rather than executing it. This allows the code to be displayed and edited within the `ExampleEditor` component.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/basic/tinting.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IndexFile from '!!raw-loader!./tinting';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for PixiJS Example Editor\nDESCRIPTION: React component imports for displaying PixiJS examples in the documentation. The ExampleEditor component is used to render interactive code examples, while IndexFile loads the raw content of the inverse-mask example.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/masks/inverse-mask.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./inverse-mask';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ExampleEditor Component - JavaScript\nDESCRIPTION: This snippet imports the `ExampleEditor` component from a custom location, and uses it to render the file `star-warp.js`. It also imports the raw content of the file to render it within the editor, allowing interactive manipulation.  This setup assumes the `ExampleEditor` component handles the display and editability of the provided code.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/docs/examples/advanced/star-warp.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./star-warp';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Triangle Example with PixiJS\nDESCRIPTION: This snippet renders a triangle example using PixiJS within a React environment. It imports necessary components from the @site directory and PixiJS library, along with a raw loader for the index file. The `<ExampleEditor>` component likely handles the display and editing of the PixiJS code.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/examples/mesh-and-shaders/triangle.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleEditor } from \"@site/src/components/Editor/ExampleEditor\";\nimport IndexFile from '!!raw-loader!./triangle';\nimport version from '../../pixi-version.json';\n\n<ExampleEditor files={{\"index.js\": IndexFile}} dependencies={{\"pixi.js\": version.npm}} />\n```\n\n----------------------------------------\n\nTITLE: Installing AssetPack Core Package - Bash\nDESCRIPTION: Provides the command-line instruction to install the main AssetPack core package using npm. It installs `@assetpack/core` as a development dependency required to use AssetPack in a project.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/blog/2024-07-18-assetpack-1.0.0.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @assetpack/core\n```\n\n----------------------------------------\n\nTITLE: Expose PIXI Globally\nDESCRIPTION: This snippet shows how to explicitly expose the PIXI object globally (e.g., `window.PIXI`) for compatibility with older plugins, however, this is not recommended.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/versioned_docs/version-7.x/guides/migrations/v5.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as PIXI from 'pixi.js';\nwindow.PIXI = PIXI; // some bundlers might prefer \"global\" instead of \"window\"\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Starts a local development server with hot-reloading and opens a browser window to preview the website.\nSOURCE: https://github.com/pixijs/pixijs.com/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```"
  }
]