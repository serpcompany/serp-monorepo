[
  {
    "owner": "scverse",
    "repo": "scanpy",
    "content": "TITLE: Data Integration with Scanpy\nDESCRIPTION: This snippet documents the autosummary for the data integration functionality within Scanpy, specifically highlighting the tl.ingest function, which is used to integrate multiple datasets.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/tools.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   tl.ingest\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Analysis of Marker Genes in Scanpy\nDESCRIPTION: This snippet features the autosummary that includes functions for analyzing marker genes, such as tl.rank_genes_groups, tl.filter_rank_genes_groups, and tl.marker_gene_overlap, which assist in identifying and comparing gene expression across different groups.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/tools.md#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   tl.rank_genes_groups\n   tl.filter_rank_genes_groups\n   tl.marker_gene_overlap\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Scanpy in Python\nDESCRIPTION: Shows how to import the Scanpy library with the standard alias 'sc'.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/usage-principles.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport scanpy as sc\n```\n\n----------------------------------------\n\nTITLE: Clustering and Trajectory Inference with Scanpy\nDESCRIPTION: This snippet provides an autosummary documentation entry for various clustering and trajectory inference functions in Scanpy. Functions include tl.leiden, tl.louvain, tl.dendrogram, tl.dpt, and tl.paga, which are vital for categorizing and analyzing single-cell data.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/tools.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   tl.leiden\n   tl.louvain\n   tl.dendrogram\n   tl.dpt\n   tl.paga\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Generic Plotting Functions (reStructuredText)\nDESCRIPTION: This autosummary outlines generic plotting functions available in the scanning plotting module like scatter, heatmap, and others, facilitating easy access and reference for users.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: ../generated/...\\n   pl.scatter\\n   pl.heatmap\\n   pl.dotplot\\n   pl.tracksplot\\n   pl.violin\\n   pl.stacked_violin\\n   pl.matrixplot\\n   pl.clustermap\\n   pl.ranking\\n   pl.dendrogram\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Computing Densities on Embeddings with Scanpy\nDESCRIPTION: This snippet documents the autosummary feature for generating documentation for functions related to density computation on embeddings within the Scanpy framework. It includes the function tl.embedding_density which is essential for interpreting data in the context of computed embeddings.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/tools.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   tl.embedding_density\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: New Functionality for Graph Handling in Scanpy (Python)\nDESCRIPTION: Details the implementation of cell-by-cell graphs storage in AnnData, impacting functions for neighbor analysis and UMAP visualization.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.5.0.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.neighbors(data)\n# Computes the neighborhood graph for the data.\n```\n\nLANGUAGE: python\nCODE:\n```\nscanpy.tl.umap(data)\n# Executes UMAP dimensionality reduction on the dataset.\n```\n\n----------------------------------------\n\nTITLE: Adding Annotation to AnnData Object\nDESCRIPTION: Shows how to add additional annotation to an AnnData object using pandas. It includes examples of adding categorical and numerical annotations.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/usage-principles.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nanno = pd.read_csv(filename_sample_annotation)\nadata.obs['cell_groups'] = anno['cell_groups']  # categorical annotation of type pandas.Categorical\nadata.obs['time'] = anno['time']                # numerical annotation of type float\n# alternatively, you could also set the whole dataframe\n# adata.obs = anno\n```\n\n----------------------------------------\n\nTITLE: Using Graph-based Tools with Neighbors Pre-computation in Scanpy\nDESCRIPTION: Example showing how to use graph-based tools like Louvain clustering after computing neighbors, which is a breaking change in v1.0.0. The neighbors computation must be done separately before running clustering algorithms.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)\n```\n\n----------------------------------------\n\nTITLE: Writing AnnData Objects to Various File Formats\nDESCRIPTION: Demonstrates how to write AnnData objects to different file formats including H5AD, Zarr, CSV, and Loom.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/usage-principles.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nadata.write_h5ad(filename)\nadata.write_zarr(filename)\nadata.write_csvs(filename)\nadata.write_loom(filename)\n```\n\n----------------------------------------\n\nTITLE: Marker Genes Visualization Functions (reStructuredText)\nDESCRIPTION: Lists various functions designed to visualize and compare marker genes across different experimental conditions, facilitating identification of genetic signatures.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_8\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/...\\n   pl.rank_genes_groups\\n   pl.rank_genes_groups_violin\\n   pl.rank_genes_groups_stacked_violin\\n   pl.rank_genes_groups_heatmap\\n   pl.rank_genes_groups_dotplot\\n   pl.rank_genes_groups_matrixplot\\n   pl.rank_genes_groups_tracksplot\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Embeddings Visualization Methods (reStructuredText)\nDESCRIPTION: This section lists functions designed to visualize various embeddings, including t-SNE and UMAP, crucial for exploring high-dimensional single-cell data.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/...\\n   pl.tsne\\n   pl.umap\\n   pl.diffmap\\n   pl.draw_graph\\n   pl.spatial\\n   pl.embedding\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Gene Scoring and Cell Cycle Analysis in Scanpy\nDESCRIPTION: This snippet provides documentation for functions related to gene scoring, including tl.score_genes and tl.score_genes_cell_cycle, which are instrumental in evaluating and interpreting gene expression levels within single-cell data pertaining to cell cycle stages.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/tools.md#2025-04-16_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   tl.score_genes\n   tl.score_genes_cell_cycle\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Extracting and Visualizing Tool-Specific Annotations (reStructuredText)\nDESCRIPTION: This segment outlines methods for visualizing specific annotations from the AnnData object, indicating that each tool has a corresponding plotting method for ease of use.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/...\\n   pl.pca\\n   pl.pca_loadings\\n   pl.pca_variance_ratio\\n   pl.pca_overview\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Numba Kernel for Highly Variable Genes\nDESCRIPTION: This snippet highlights the use of a Numba kernel to accelerate the `pp.highly_variable_genes` function when used with `flavor=seurat_v3`. Numba provides just-in-time compilation, translating Python code to optimized machine code for improved performance.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.10.2.md#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"`pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`\"\n```\n\n----------------------------------------\n\nTITLE: Reading 10x Files in Scanpy with RST\nDESCRIPTION: Describes functions available for reading 10x formatted data. Functions include 'read_10x_h5' and 'read_10x_mtx', which load data into AnnData. Scanpy must be installed and correctly configured.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/io.md#2025-04-16_snippet_3\n\nLANGUAGE: eval-rst\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   read_10x_h5\n   read_10x_mtx\n   read_visium\n```\n\n----------------------------------------\n\nTITLE: Setup Development Environment with Conda\nDESCRIPTION: Describes using Conda to manage a complete development environment by generating an environment.yml file from pyproject.toml and activating the environment. It is followed by installing the necessary packages in an editable mode.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ pipx install beni\n$ beni pyproject.toml > environment.yml\n$ conda env create -f environment.yml\n$ conda activate scanpy\n$ pip install -e '.[dev,doc,test]'\n```\n\n----------------------------------------\n\nTITLE: Plotting UMAP Results with Scanpy\nDESCRIPTION: Shows how to plot the results of a UMAP analysis using Scanpy's plotting function. It takes an AnnData object and additional plotting parameters.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/usage-principles.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsc.pl.umap(adata, **plotting_params)\n```\n\n----------------------------------------\n\nTITLE: Reading Various Formats with AnnData in Scanpy with RST\nDESCRIPTION: Covers read functions borrowed from 'anndata' like 'read_h5ad', 'read_csv', etc., for diverse data types. Requires 'anndata' and file-specific dependencies to be installed.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/io.md#2025-04-16_snippet_4\n\nLANGUAGE: eval-rst\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   read_h5ad\n   read_csv\n   read_excel\n   read_hdf\n   read_loom\n   read_mtx\n   read_text\n   read_umi_tools\n```\n\n----------------------------------------\n\nTITLE: Speeding Up Scrublet\nDESCRIPTION: This snippet refers to performance improvements made to the `scanpy.pp.scrublet` function. The changes likely involve optimizing the algorithm or leveraging more efficient data structures to reduce computation time.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.10.2.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`\"\n```\n\n----------------------------------------\n\nTITLE: Reading Data into an AnnData Object\nDESCRIPTION: Demonstrates how to read a data file into an AnnData object using Scanpy's read function.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/usage-principles.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nadata = sc.read(filename)\n```\n\n----------------------------------------\n\nTITLE: Reading Common File Formats in Scanpy with RST\nDESCRIPTION: This section enumerates functions like 'read' for loading common file formats into Scanpy. It assumes the installation of necessary scanpy components.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/io.md#2025-04-16_snippet_2\n\nLANGUAGE: eval-rst\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   read\n```\n\n----------------------------------------\n\nTITLE: Speeding Up Scaling\nDESCRIPTION: This snippet refers to optimization efforts to improve the speed of the `scanpy.pp.scale` function. The implementation likely focuses on enhancing the array clipping process to minimize execution time.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.10.2.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanpy IO Settings in Python\nDESCRIPTION: This snippet shows various IO-related settings for Scanpy, including directories for figures, cache, and datasets, as well as file format settings.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/settings.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n\n   ~_settings.ScanpyConfig.figdir\n   ~_settings.ScanpyConfig.cachedir\n   ~_settings.ScanpyConfig.datasetdir\n   ~_settings.ScanpyConfig.file_format_figs\n   ~_settings.ScanpyConfig.file_format_data\n```\n\n----------------------------------------\n\nTITLE: Utilizing All Cores for Sparse Mean Variance\nDESCRIPTION: This snippet describes a performance optimization for the `sparse_mean_variance_axis` function. The function is now updated to utilize all available CPU cores during calculations, leading to faster processing times.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.10.2.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"`sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`\"\n```\n\n----------------------------------------\n\nTITLE: Importing Scanpy Module in Python\nDESCRIPTION: This snippet shows how to import the Scanpy module in Python, specifically for accessing its settings functionality.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: scanpy\n```\n\n----------------------------------------\n\nTITLE: Performance Improvements in PCA (Python)\nDESCRIPTION: Describes the enhancements to the PCA function for better performance with sparse matrices, leading to quicker analysis of large datasets.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.5.0.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.pca(data)\n# Performs PCA on the dataset, with optimized implementation for sparse matrices.\n```\n\n----------------------------------------\n\nTITLE: Using Scanpy's UMAP Tool for Data Analysis\nDESCRIPTION: Demonstrates how to use Scanpy's UMAP tool for embedding a neighborhood graph of the data. The function is called on an AnnData object and takes additional tool parameters.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/usage-principles.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsc.tl.umap(adata, **tool_params)  # embed a neighborhood graph of the data using UMAP\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Update Rules in Python for Gene Regulatory Network\nDESCRIPTION: Logical expressions defining how each gene's state is updated based on the states of other genes. Uses boolean operators 'and', 'or', and 'not' to represent regulatory relationships between genes.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/sim_models/krumsiek11.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1\nGata1 = (Gata1 or Gata2 or Fli1) and not Pu.1\nFog1 = Gata1\nEKLF = Gata1 and not Fli1\nFli1 = Gata1 and not EKLF\nSCL = Gata1 and not Pu.1\nCebpa = Cebpa and not (Gata1 and Fog1 and SCL)\nPu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2)\ncJun = Pu.1 and not Gfi1\nEgrNab = (Pu.1 and cJun) and not Gfi1\nGfi1 = Cebpa and not EgrNab\n```\n\n----------------------------------------\n\nTITLE: Listing Data Integration Functions in Scanpy\nDESCRIPTION: This code block lists the available data integration functions in the Scanpy external preprocessing module, including bbknn, harmony_integrate, mnn_correct, and scanorama_integrate.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/preprocessing.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/\n\n   pp.bbknn\n   pp.harmony_integrate\n   pp.mnn_correct\n   pp.scanorama_integrate\n```\n\n----------------------------------------\n\nTITLE: Writing AnnData Objects in Scanpy with RST\nDESCRIPTION: This snippet provides an overview of writing AnnData objects in Scanpy, utilizing the 'write' function. These methods are essential for persisting modifications made to AnnData objects. Ensure 'anndata' is properly installed.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/io.md#2025-04-16_snippet_0\n\nLANGUAGE: eval-rst\nCODE:\n```\n.. currentmodule:: scanpy\n```\n\nLANGUAGE: eval-rst\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   write\n```\n\n----------------------------------------\n\nTITLE: Documenting Plotting Module Discovery (reStructuredText)\nDESCRIPTION: This section indicates the availability of the plotting module in Scanpy, suggesting its functions parallel those in analysis and preprocessing modules. It provides a foundational understanding for plotting functions in the library.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. module:: scanpy.pl\\n\"\"\"\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. currentmodule:: scanpy\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Regress Out Functionality\nDESCRIPTION: This snippet highlights the update to the `scanpy.pp.regress_out` function, which now utilizes `joblib` as the parallel backend. This change is meant to prevent the oversubscription of threads, which could lead to performance issues.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.2.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.regress_out()\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Pandas in Scanpy with RST\nDESCRIPTION: This snippet explains the recommendation of using pandas to handle annotation data in AnnData objects, distinguishing data in 'X' matrix from annotation.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/io.md#2025-04-16_snippet_1\n\nLANGUAGE: eval-rst\nCODE:\n```\nFor reading annotation use {ref}`pandas.read_… <pandas:io>`\nand add it to your {class}`~anndata.AnnData` object. The following read functions are\nintended for the numeric data in the data matrix `X`.\n```\n\n----------------------------------------\n\nTITLE: Defining Gene Coupling Coefficients\nDESCRIPTION: Numerical coefficients defining the strength and direction of interactions between genes. Positive values indicate activation, negative values indicate inhibition. Format: source gene, target gene, coefficient value.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/sim_models/krumsiek11.txt#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGata2      Gata2                 1.0\nGata2      Gata1                -0.1\nGata2      Fog1                 -1.0\nGata2      Pu.1                -1.15\nGata1      Gata2                 1.0\nGata1      Gata1                 0.1\nGata1      Fli1                  1.0\nGata1      Pu.1                -1.21\nFog1       Gata1                 0.1\nEKLF       Gata1                 0.2\nEKLF       Fli1                 -1.0\nFli1       Gata1                 0.2\nFli1       EKLF                 -1.0\nSCL        Gata1                 1.0\nSCL        Pu.1                 -1.0\nCebpa      Gata1                -1.0\nCebpa      Fog1                 -1.0\nCebpa      SCL                  -1.0\nCebpa      Cebpa                10.0\nPu.1       Gata2                -1.0\nPu.1       Gata1                -1.0\nPu.1       Cebpa                10.0\nPu.1       Pu.1                 10.0\ncJun       Pu.1                  1.0\ncJun       Gfi1                 -1.0\nEgrNab     Pu.1                  1.0\nEgrNab     cJun                  1.0\nEgrNab     Gfi1                 -1.3\nGfi1       Cebpa                 1.0\nGfi1       EgrNab               -5.0\n```\n\n----------------------------------------\n\nTITLE: Correcting Highly Variable Genes Calculation\nDESCRIPTION: The `scanpy.pp.highly_variable_genes` function has been updated to return accurate gene means and variances when utilizing the `flavor=\"seurat_v3\"` option with a `batch_key`. This fix addresses previous discrepancies in the output results.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.2.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.highly_variable_genes(flavor=\"seurat_v3\", batch_key='your_batch_key')\n```\n\n----------------------------------------\n\nTITLE: Documenting Visualization Classes (reStructuredText)\nDESCRIPTION: This section provides an autosummary of classes used for fine-tuning visual parameters in plotting, such as DotPlot and MatrixPlot, enhancing the customization capabilities for users.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/classes\\n    pl.DotPlot\\n    pl.MatrixPlot\\n    pl.StackedViolin\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting Clustering and Trajectory Inference Tools - RST\nDESCRIPTION: This snippet sets up an autosummary for clustering and trajectory inference tools in Scanpy, including Phenograph, Harmony for time-series analysis, Wishbone, and Palantir. These tools help analyze the trajectories and grouping of single-cell data.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/tools.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :toctree: generated/\\n\\n   tl.phenograph\\n   tl.harmony_timeseries\\n   tl.wishbone\\n   tl.palantir\\n   tl.palantir_results\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Visualization Methods (reStructuredText)\nDESCRIPTION: Describes methods for visualizing quality control measures and results of preprocessing operations, highlighting their importance in single-cell analysis workflows.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/...\\n   pl.highest_expr_genes\\n   pl.filter_genes_dispersion\\n   pl.highly_variable_genes\\n   pl.scrublet_score_distribution\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Simulation Functionality in Scanpy\nDESCRIPTION: This snippet documents the autosummary entry for simulation functions within the Scanpy framework, specifically referencing the tl.sim function, which is used for creating mock datasets under various simulation parameters.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/tools.md#2025-04-16_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   tl.sim\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting Embeddings Tools - RST\nDESCRIPTION: This snippet creates an autosummary for various embedding techniques available in Scanpy, such as PHATE, Palantir, TRIMAP, and SAM. These tools facilitate dimensionality reduction and visualization of single-cell data.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/tools.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :toctree: generated/\\n\\n   tl.phate\\n   tl.palantir\\n   tl.trimap\\n   tl.sam\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Addressing Backed Mode Limitations\nDESCRIPTION: This snippet addresses a limitation in Scanpy where `backed` mode-like matrices (e.g., from `sparse_dataset`) are not fully supported. The fix ensures that clear errors are raised when these unsupported matrices are encountered, improving user experience and error handling.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.10.2.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`\"\n```\n\n----------------------------------------\n\nTITLE: Density Computation on Embeddings (reStructuredText)\nDESCRIPTION: Computes density visualizations on embeddings, allowing for a deeper analysis of the spatial distribution of data points.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_6\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/...\\n   pl.embedding_density\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: AnnData H5AD File Writing Optimization\nDESCRIPTION: Updated default compression settings and performance improvements for writing AnnData H5AD files, focusing on faster read/write operations and efficient string and category handling\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.3.3.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nanndata.AnnData.write_h5ad(compression=None)\n```\n\n----------------------------------------\n\nTITLE: Simulations Functionality in Visualization (reStructuredText)\nDESCRIPTION: Documents the simulation-related functions available in the plotting module, indicating their role in testing and visualizing synthetic datasets.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_9\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/...\\n   pl.sim\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanpy Simulation Parameters\nDESCRIPTION: Defines the settings for a Scanpy simulation using the Krumsiek11 model. It sets the simulation duration, enables branching, specifies the number of realizations, sets noise levels for observations and dynamics, and establishes a random seed for reproducibility.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/datasets/krumsiek11.txt#2025-04-16_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n# model = /Users/alexwolf/hholtz/01_projects/1512_scanpy/scanpy/scanpy/sim_models/krumsiek11.txt\n# tmax = 160\n# branching = True\n# nrRealizations = 4\n# noiseObs = 0\n# noiseDyn = 0.001\n# seed = 0\n```\n\n----------------------------------------\n\nTITLE: Complete PCA Results with Neighbors Function\nDESCRIPTION: This snippet ensures that complete PCA results are written out when `_choose_representation` is called, specifically in scenarios where `{func}`~scanpy.pp.neighbors` is used without first calling `{func}`~scanpy.pp.pca`. This guarantees consistent and complete data handling within the Scanpy workflow.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.10.2.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3078` {smaller}`I gold`\"\n```\n\n----------------------------------------\n\nTITLE: Fix for scanpy.tl.rank_genes_groups with Unsorted Groups - Python\nDESCRIPTION: This update improves the functionality of the function `scanpy.tl.rank_genes_groups` to correctly handle unsorted groups, enhancing data processing accuracy.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.9.4.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n* {func}`~scanpy.tl.rank_genes_groups` now handles unsorted groups as intended {pr}`2589` {smaller}`S Dicks`\n```\n\n----------------------------------------\n\nTITLE: Specifying Coupling Relationships in Network Model\nDESCRIPTION: This section defines the coupling relationships between variables in the network model. Each line represents a coupling, specifying the source variable, target variable, and coupling strength.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/sim_models/toggleswitch.txt#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n0          0             1.0\n0          1            -1.0\n1          1             1.0\n1          0            -1.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Datasets Module with reStructuredText\nDESCRIPTION: This snippet uses reStructuredText (reST) directives to specify the scanpy.datasets module and its submodules for autosummary documentation generation. Key dependencies are the Scanpy library and a documentation generator capable of processing reST directives. It sets the current module context and lists various available datasets such as blobs and pbmc3k for generating documentation pages.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/datasets.md#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. module:: scanpy.datasets\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: scanpy\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   datasets.blobs\n   datasets.ebi_expression_atlas\n   datasets.krumsiek11\n   datasets.moignard15\n   datasets.pbmc3k\n   datasets.pbmc3k_processed\n   datasets.pbmc68k_reduced\n   datasets.paul15\n   datasets.toggleswitch\n   datasets.visium_sge\n```\n\n----------------------------------------\n\nTITLE: Functionality for scanpy.get.rank_genes_groups_df with logreg method - Python\nDESCRIPTION: This bug fix ensures that the function `scanpy.get.rank_genes_groups_df` operates correctly for `scanpy.tl.rank_genes_groups` when the logreg method is selected, thereby enhancing its utility.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.9.4.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n* {func}`~scanpy.get.rank_genes_groups_df` now works for {func}`~scanpy.tl.rank_genes_groups` with `method=\"logreg\"` {pr}`2601` {smaller}`S Dicks`\n```\n\n----------------------------------------\n\nTITLE: Visualizing Clusters Using Embedding Methods (reStructuredText)\nDESCRIPTION: Explains how to visualize clusters in the dataset by utilizing methods tied to embedding representations, passing specific parameters for enhanced clarity.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/plotting.md#2025-04-16_snippet_7\n\nLANGUAGE: reStructuredText\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :nosignatures:\\n   :toctree: generated/...\\n   pl.dpt_groups_pseudotime\\n   pl.dpt_timeseries\\n   pl.paga\\n   pl.paga_path\\n   pl.paga_compare\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Functionality Fix for scanpy.tl._utils._choose_representation with n_pcs - Python\nDESCRIPTION: This change ensures that the utility function `scanpy.tl._utils._choose_representation` works correctly with the parameter `n_pcs` when it exceeds the value of `settings.N_PCS`, addressing a previous limitation.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.9.4.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n* `scanpy.tl._utils._choose_representation` now works with `n_pcs` if bigger than `settings.N_PCS` {pr}`2610` {smaller}`S Dicks`\n```\n\n----------------------------------------\n\nTITLE: Create and Checkout a New Git Branch\nDESCRIPTION: This sequence of commands creates and switches to a new Git branch named `{your-branch-name}`.  It starts by ensuring you are on the `main` branch, pulls the latest changes, and then creates and switches to the new branch. This workflow is essential for feature development or bug fixes.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/getting-set-up.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ git checkout main                 # Starting from the main branch\n$ git pull                          # Syncing with the repo\n$ git switch -c {your-branch-name}  # Making and changing to the new branch\n```\n\n----------------------------------------\n\nTITLE: Fixing Support for scikit-learn 1.3 - Python\nDESCRIPTION: This snippet documents a bug fix that adds support for scikit-learn version 1.3. It resolves compatibility issues that may arise when users attempt to utilize the library with this version.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.9.4.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* Support scikit-learn 1.3 {pr}`2515` {smaller}`P Angerer`\n```\n\n----------------------------------------\n\nTITLE: Installing Scanpy using Pip\nDESCRIPTION: Installs the Scanpy package and its additional dependencies by leveraging Pip. It is recommended to include the `[leiden]` extra for popular scanpy parts related to igraph and leiden. This requires using Pip with version 21.3 or higher.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install 'scanpy[leiden]'\n```\n\n----------------------------------------\n\nTITLE: Listing Imputation Functions in Scanpy\nDESCRIPTION: This code block lists the available imputation functions (dca and magic) in the Scanpy external preprocessing module, with a note on the ongoing debate about imputation limitations.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/preprocessing.md#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/\n\n   pp.dca\n   pp.magic\n```\n\n----------------------------------------\n\nTITLE: Handling None Value in .uns['log1p'] - Python\nDESCRIPTION: This change addresses the issue of `None` values disappearing from the .uns['log1p'] attribute, ensuring that the attribute behaves as expected even when `None` is present.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.9.4.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* Deal with `None` value vanishing from things like `.uns['log1p']` {pr}`2546` {smaller}`SP Shen`\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanpy Plotting Behavior in Python\nDESCRIPTION: This code block references the autoshow and autosave settings, which control the global behavior of Scanpy's plotting functions.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n\n   ~_settings.ScanpyConfig.autoshow\n   ~_settings.ScanpyConfig.autosave\n```\n\n----------------------------------------\n\nTITLE: Fixing PCA Random State Parameter in Scanpy\nDESCRIPTION: Resolved an issue where the random_state parameter was not functioning correctly for sparse input matrices in the PCA preprocessing function\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.5.1.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.pca(random_state=...)\n```\n\n----------------------------------------\n\nTITLE: Clone and Navigate to Scanpy Repository\nDESCRIPTION: Provides commands to clone the Scanpy repository from GitHub and change the working directory to its root. This is a prerequisite for working with the development version of Scanpy.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ gh repo clone scverse/scanpy\n$ cd scanpy\n```\n\n----------------------------------------\n\nTITLE: Setting Scanpy Logging Verbosity in Python\nDESCRIPTION: This code block references the verbosity setting, which controls the detail level of Scanpy's logging output.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/settings.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n\n   ~_settings.ScanpyConfig.verbosity\n```\n\n----------------------------------------\n\nTITLE: Fixing Logging Versions in Scanpy\nDESCRIPTION: This snippet describes a bug fix for the `scanpy.logging.print_versions` function, ensuring it operates correctly for Python versions less than 3.8. This change resolves an issue where versions were not logged correctly in older Python environments.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.2.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscanpy.logging.print_versions()\n```\n\n----------------------------------------\n\nTITLE: Fork and Clone Scanpy Repository Manually\nDESCRIPTION: This outlines the manual steps to fork and clone the Scanpy repository. It involves forking the repository on GitHub's website, cloning the fork to your local machine using `git clone`, navigating into the cloned directory with `cd`, and adding the original Scanpy repository as a remote named `upstream` for fetching updates.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/getting-set-up.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ # Clone your fork of the repository (substitute in your username)\n$ git clone https://github.com/{your-username}/scanpy.git\n$ # Enter the cloned repository\n$ cd scanpy\n$ # Add our repository as a remote\n$ git remote add upstream https://github.com/scverse/scanpy.git\n$ # git branch --set-upstream-to \"upstream/main\"\n```\n\n----------------------------------------\n\nTITLE: Generating Auto Summary - RST\nDESCRIPTION: This snippet generates an automatic summary for various exporting functionalities available in Scanpy. It creates an autosummary for modules like 'spring_project' and 'cellbrowser', which will be included in the documentation.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/exporting.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. autosummary::\n   :toctree: ../generated/\n\n   exporting.spring_project\n   exporting.cellbrowser\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes in Scanpy Functions (Python)\nDESCRIPTION: Enumerates various bug fixes enhancing the stability and performance of Scanpy functions such as combat adjustment and normalization tasks.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.5.0.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.combat(data)\n# Corrects batch effects in the dataset and now works with non-unique obs_names.\n```\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.scale(data)\n# Scales data matrices and can now be used on dense arrays without centering.\n```\n\n----------------------------------------\n\nTITLE: Building and Checking Package Distribution\nDESCRIPTION: This snippet provides commands to build the source distribution and wheel packages, check the build artifacts, and list the contents of the wheel archive.  It helps in verifying the package structure before publishing.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/release.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ # Clear out old distributions\n$ rm -r dist\n$ # Build source distribution and wheel both\n$ python -m build\n$ # Now check those build artifacts\n$ twine check dist/*\n$ # List the wheel archive’s contents\n$ bsdtar -tf dist/*.whl\n```\n\n----------------------------------------\n\nTITLE: Configuring Current Module and Summarizing Deprecated Functions in Scanpy\nDESCRIPTION: This snippet sets the current module to scanpy and generates an autosummary section for deprecated functions like pp.filter_genes_dispersion, pp.normalize_per_cell, and pp.subsample. Dependencies include the eval-rst directive for reStructuredText. Expected output is a structured summary display within the relevant documentation tree.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/deprecated.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: scanpy\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   pp.filter_genes_dispersion\n   pp.normalize_per_cell\n   pp.subsample\n```\n\n----------------------------------------\n\nTITLE: User-Level Install to Avoid Permission Denied Errors\nDESCRIPTION: Offers a solution to avoid `Permission denied` errors when installing Python packages by suggesting the use of the `--user` option with Pip commands.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --user scanpy\n```\n\n----------------------------------------\n\nTITLE: Importing Scanpy External Preprocessing Module\nDESCRIPTION: This snippet shows the module import and current module setting for the Scanpy external preprocessing functions.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/preprocessing.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: scanpy.external.pp\n.. currentmodule:: scanpy.external\n```\n\n----------------------------------------\n\nTITLE: Bug fix in argument handling for scanpy.pp.scrublet\nDESCRIPTION: This snippet describes a bug fix related to argument handling within the `scanpy.pp.scrublet` function. The fix ensures correct and consistent argument processing during scrublet execution.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.1.md#2025-04-16_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Listing Sample Demultiplexing Function in Scanpy\nDESCRIPTION: This code block shows the available sample demultiplexing function (hashsolo) in the Scanpy external preprocessing module.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/preprocessing.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/\n\n   pp.hashsolo\n```\n\n----------------------------------------\n\nTITLE: Python Version and Dependency Update for Scanpy\nDESCRIPTION: Implementing changes to Python version support following Scientific Python deprecation schedule, removing Python 3.10 and adding Python 3.13 support, with a requirement for anndata library version 0.9 or higher\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/3485.breaking.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Python version support update\n# - Remove Python 3.10 support\n# - Add Python 3.13 support\n# - Require anndata≥0.9\n```\n\n----------------------------------------\n\nTITLE: Editable Install with Pip\nDESCRIPTION: Instructs on setting up an editable installation of the development version of Scanpy using Python virtual environments managed by Pip. Ensures the environment is set for both development and testing purposes.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python -m venv .venv\n$ source .venv/bin/activate\n$ pip install -e '.[dev,test]'\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting Gene Scores and Cell Cycle Tools - RST\nDESCRIPTION: This snippet creates an autosummary for tools related to gene scoring and cell cycle analysis in Scanpy, specifically Sandbag and Cyclone. These tools are vital for interpreting gene expression dynamics in single cells.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/tools.md#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"{eval-rst}\\n.. autosummary::\\n   :toctree: generated/\\n\\n   tl.sandbag\\n   tl.cyclone\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated AnnData Constructor Argument\nDESCRIPTION: Addresses the removal of the deprecated `dtype` argument in the AnnData constructor, improving code compatibility and reducing warnings\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.9.5.md#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Bug fix in scanpy.tl.dendrogram using correlation as distance matrix\nDESCRIPTION: This snippet documents a bug fix in `scanpy.tl.dendrogram` function where `1 - correlation` is now used as the distance matrix for computing the dendrogram. This ensures correct dendrogram computation based on correlation distances.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.1.md#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Handling Non-Integer Method Values\nDESCRIPTION: A modification in the `scanpy.pp.highly_variable_genes` function now issues a warning instead of an error when non-integer values are supplied for the method argument set to \"seurat_v3\". Users can bypass this check by specifying `check_values=False`.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.2.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pp.highly_variable_genes(method=\"seurat_v3\", check_values=False)\n```\n\n----------------------------------------\n\nTITLE: Bug fix in scanpy.pl.violin regarding kwargs passing\nDESCRIPTION: This snippet documents a bug fix within `scanpy.pl.violin` concerning the correct passing of keyword arguments (`kwargs`). The fix specifically addresses the scenario where `stripplot` is also used, ensuring that keyword arguments are correctly passed through to the underlying plotting functions.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.1.md#2025-04-16_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Correcting PCA Docstring Documentation\nDESCRIPTION: Updated the docstring for the PCA preprocessing function to remove an unused argument and improve documentation clarity\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.5.1.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef pca(...)\n```\n\n----------------------------------------\n\nTITLE: Adding Feature Selection Methods to Ecosystem\nDESCRIPTION: This entry documents the inclusion of a new feature selection method, `triku`, in the ecosystem page of Scanpy, aimed at enhancing user capabilities in feature selection workflows.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.2.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntriku()\n```\n\n----------------------------------------\n\nTITLE: Class Documentation Template with Jinja2 for Scanpy\nDESCRIPTION: A Jinja2 template that generates Sphinx documentation for a Python class in Scanpy. It creates a structured page with autosummary sections for attributes and methods, ensuring each class member is properly documented with links to detailed pages.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/_templates/autosummary/class.rst#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. add toctree option to make autodoc generate the pages\n\n.. autoclass:: {{ objname }}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: .\n   {% for item in attributes %}\n      {% if has_member(fullname, item) %}\n      ~{{ name }}.{{ item }}\n      {% endif %}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block methods %}\n   {% if methods %}\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: .\n   {% for item in methods %}\n      {%- if item != '__init__' %}\n      ~{{ name }}.{{ item }}\n      {%- endif -%}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Updating Ecosystem with Additional Methods\nDESCRIPTION: In this snippet, `dorothea` and `progeny` are added to the Scanpy ecosystem page, broadening the available tools for users working with regulatory networks and pathway analysis.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.2.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndorothea()\nprogeny()\n```\n\n----------------------------------------\n\nTITLE: Importing Scanpy in Python\nDESCRIPTION: This code snippet demonstrates how to import the Scanpy library in Python. It imports Scanpy with the alias `sc`, which is the standard convention for using Scanpy. No dependencies are explicitly listed, but the Scanpy library must be installed prior to running this command.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/index.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport scanpy as sc\n```\n\n----------------------------------------\n\nTITLE: Reading 10x Genomics Data with Scanpy\nDESCRIPTION: Enhanced functions for reading Cell Ranger 3.0 output files, improving compatibility and data import capabilities\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.3.3.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscanpy.read_10x_h5\nscanpy.read_10x_mtx\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Toctree for Scanpy Basics\nDESCRIPTION: A Sphinx toctree directive that organizes basic tutorials for Scanpy. This directive creates a table of contents with links to pages on clustering, the 2017 clustering approach, and data integration using the ingest method.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/basics/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nclustering\nclustering-2017\nintegrating-data-using-ingest\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module in Scanpy\nDESCRIPTION: This snippet sets the current module to `scanpy` using a reStructuredText directive. This affects how functions and classes are referenced in the documentation.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/get.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: scanpy\n```\n\n----------------------------------------\n\nTITLE: Handling Spatial Data in Scanpy (Python)\nDESCRIPTION: Introduces functions for reading and plotting spatial data using Scanpy, facilitating integration of spatial and single cell data analysis.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.5.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscanpy.read_visium(path)\n# Reads 10x Visium data from the specified path.\n```\n\nLANGUAGE: python\nCODE:\n```\nscanpy.datasets.visium_sge()\n# Loads Visium data directly from 10x Genomics.\n```\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pl.spatial(data)\n# Plots spatial data provided in 'data'.\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Experimental Features in Markdown\nDESCRIPTION: This code snippet creates a table of contents using Markdown syntax, specifically for experimental features in Scanpy. It includes links to documentation for Pearson residuals and Dask integration.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/experimental/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\npearson_residuals\ndask\n```\n```\n\n----------------------------------------\n\nTITLE: Import Scanpy External API\nDESCRIPTION: This snippet demonstrates how to import the Scanpy external API, aliased as `sce`, for accessing external tools and functionalities.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/index.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scanpy.external as sce\n```\n\n----------------------------------------\n\nTITLE: Legacy Graph-based Tool Usage in Scanpy\nDESCRIPTION: Shows the previous method of using graph-based tools before v1.0.0, where neighbor computation was integrated into the clustering function call. This approach is no longer supported.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.0.0.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsc.tl.louvain(adata, n_neighbors=5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Trajectory Documentation\nDESCRIPTION: Sets up a table of contents tree structure in Sphinx documentation system, including a reference to the paga-paul15 documentation with a maxdepth setting of 1.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/trajectories/index.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:maxdepth: 1\n\npaga-paul15\n```\n\n----------------------------------------\n\nTITLE: Pull Scanpy from PyPI\nDESCRIPTION: Shows how to download and install Scanpy directly from the Python Package Index using Pip. This is a direct installation method that doesn’t leverage advanced environment management.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pip install scanpy\n```\n\n----------------------------------------\n\nTITLE: Adding Combat Function in Scanpy\nDESCRIPTION: This snippet documents the addition of the `scanpy.pp.combat` function for batch effect correction in Scanpy. The function is cited to Johnson2006, Leek2012, and Pedersen2012. This allows users to correct for batch effects in single-cell data.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.3.8.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Added {func}`~scanpy.pp.combat` function for batch effect correction {cite:p}`Johnson2006,Leek2012,Pedersen2012` {pr}`398` {smaller}`M Lange`\n```\n\n----------------------------------------\n\nTITLE: Creating TOC for Visualization Tutorials in Sphinx Documentation\nDESCRIPTION: A toctree directive to include visualization tutorials in the Sphinx documentation with a maximum depth of 2.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\nplotting/index\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Module Structure - RST\nDESCRIPTION: This snippet defines the module structure for exporting functionalities within Scanpy. It specifies that the current module is part of the 'scanpy.external' namespace, aiding in organization and access to the exporting capabilities of the library.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/exporting.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"\n.. module:: scanpy.external.exporting\n.. currentmodule:: scanpy.external\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Scanpy using Conda\nDESCRIPTION: Demonstrates using Conda to install Scanpy along with necessary dependencies like python-igraph and leidenalg from the conda-forge channel. This ensures the environment is set up correctly with all necessary packages for common functions.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ conda install -c conda-forge scanpy python-igraph leidenalg\n```\n\n----------------------------------------\n\nTITLE: Creating TOC for Trajectory Inference Tutorials in Sphinx Documentation\nDESCRIPTION: A toctree directive to include trajectory inference tutorials in the Sphinx documentation with a maximum depth of 2.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/index.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\ntrajectories/index\n```\n```\n\n----------------------------------------\n\nTITLE: Scanpy Queries Module Definition (RST)\nDESCRIPTION: This snippet defines the scanpy.queries module using reStructuredText (RST) directives. The `.. module::` directive specifies the module's name for documentation purposes.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/queries.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n```{eval-rst}\n.. module:: scanpy.queries\n```\n```\n\n----------------------------------------\n\nTITLE: Computing PAGA Graph in Scanpy\nDESCRIPTION: The `~scanpy.tl.paga` function computes the PAGA (Partition-based Graph Abstraction) graph from neighborhood data, allowing for coarse-grained analysis of single-cell data. Requires Scanpy and appropriate single-cell object as input.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/0.2.9.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscanpy.tl.paga\n```\n\n----------------------------------------\n\nTITLE: Creating TOC for Experimental Features in Sphinx Documentation\nDESCRIPTION: A toctree directive to include experimental feature tutorials in the Sphinx documentation with a maximum depth of 2.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/index.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\nexperimental/index\n```\n```\n\n----------------------------------------\n\nTITLE: Set Current Module (RST)\nDESCRIPTION: This snippet sets the current module to `scanpy` using reStructuredText (RST) directives. This is likely done to simplify references to functions and classes within the `scanpy` package in the subsequent documentation.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/queries.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n```{eval-rst}\n.. currentmodule:: scanpy\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing PAGA Graph Comparisons\nDESCRIPTION: The `~scanpy.pl.paga_compare` function visualizes the computed PAGA graph alongside an embedding for graphical comparison. Requires PAGA graph and embedding data as input for visualization.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/0.2.9.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pl.paga_compare\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Scanpy How-to Guides\nDESCRIPTION: This code snippet uses Sphinx's toctree directive to create a table of contents for Scanpy how-to guides. It links to two specific examples: 'knn-transformers' and 'plotting-with-marsilea'.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/how-to/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nknn-transformers\nplotting-with-marsilea\n```\n```\n\n----------------------------------------\n\nTITLE: Running Subset of Tests Using Hatch and Pytest\nDESCRIPTION: Provides commands for running specific subsets of tests in the scverse/scanpy project using Hatch and Pytest. It includes commands for specifying test paths or patterns and running tests in parallel. Dependencies include having Hatch and Pytest installed, and knowledge of test paths or patterns. The expected output is a run of the specified tests, possibly limiting the test set for faster iteration.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhatch test test_plotting.py\n```\n\nLANGUAGE: shell\nCODE:\n```\nhatch test -k \"test_umap*\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nhatch test -n 8\n```\n\n----------------------------------------\n\nTITLE: Plotting Heatmap Through PAGA Node Sequence\nDESCRIPTION: The `~scanpy.pl.paga_path` function plots a heatmap indicating the progression through a sequence of nodes in the PAGA graph. It requires the PAGA graph and specific node sequence as input to generate the visual output.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/0.2.9.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscanpy.pl.paga_path\n```\n\n----------------------------------------\n\nTITLE: Warning Block for Package Submission\nDESCRIPTION: Markdown warning block indicating that new tools should be submitted to the scverse ecosystem package listing instead of this page.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/ecosystem.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{warning}\nWe are no longer accepting new tools on this page.\nInstead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).\n```\n\n----------------------------------------\n\nTITLE: Matplotlib Testing Environment Setup\nDESCRIPTION: Configures a consistent plotting environment using matplotlib's testing setup utility to ensure reproducible plot generation across different test environments\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/ci.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmatplotlib.testing.setup()\n```\n\n----------------------------------------\n\nTITLE: Scanpy Module Declaration\nDESCRIPTION: This snippet declares the `scanpy.get` module using reStructuredText directives. It allows for referencing functions and classes defined within this module.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/get.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: scanpy.get\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Notes Directive in Sphinx Documentation\nDESCRIPTION: A Sphinx documentation directive that renders release notes content. The dot notation indicates the current directory as the source.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{release-notes} .\n```\n\n----------------------------------------\n\nTITLE: Identifying Slow Tests in Pytest\nDESCRIPTION: A command to show the runtime of each test during the execution of the test suite, which helps in identifying slow tests. Requires Pytest installed. This is useful for performance tuning of the test suite by identifying tests that could be optimized or parallelized.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--durations=0\n```\n\n----------------------------------------\n\nTITLE: Function References in Scanpy Documentation\nDESCRIPTION: List of function references showing new and improved features in Scanpy v1.1.0, including visualization parameters, graph layouts, data processing, and external tools integration.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.1.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscanpy.set_figure_params(vector_friendly=True)\nscanpy.tl.draw_graph()\nscanpy.pl.scatter()\nscanpy.pp.pca()\nscanpy.pp.log1p()\nscanpy.pp.regress_out()\nscanpy.read()\nscanpy.queries.mitochondrial_genes()\nscanpy.external.pp.mnn_correct()\nscanpy.external.tl.phate()\nscanpy.external.tl.sandbag()\nscanpy.external.tl.cyclone()\n```\n\n----------------------------------------\n\nTITLE: Bug fix in scanpy.get.obs_df/scanpy.get.var_df when keys are not passed\nDESCRIPTION: This snippet highlights a bug fix in `scanpy.get.obs_df` and `scanpy.get.var_df` functions. The fix addresses an error that occurred when the `keys` argument was not provided to these functions, ensuring they function correctly even when `keys` are not explicitly passed.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.1.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Push a New Git Branch to Remote\nDESCRIPTION: This command pushes a new Git branch to the remote repository (origin). The `--set-upstream` flag is used during the first push of a new branch to establish a tracking connection between the local and remote branch.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/getting-set-up.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ # The first time you push the branch, you'll need to tell git where\n$ git push --set-upstream origin {your-branch-name}\n$ # After that, just use\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Testing and Running Commands with Hatch\nDESCRIPTION: Highlights the use of predefined Hatch environments for testing and building documentation for Scanpy. Hatch commands allow running tests in parallel and creating changelog entries among other tasks.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ hatch test -p               # run tests in parallel\n$ hatch run docs:build        # build docs\n$ hatch run towncrier:create  # create changelog entry\n```\n\n----------------------------------------\n\nTITLE: Updating PAGA Tool Default Model in Scanpy\nDESCRIPTION: Modification of the default PAGA model with an option to restore the previous version by specifying the model parameter\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.2.0.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscanpy.tl.paga(adata, model='v1.0')  # Restore previous default model\n```\n\n----------------------------------------\n\nTITLE: Install pre-commit hooks\nDESCRIPTION: This command installs the `pre-commit` hooks from the root of the repository. These hooks are configured to run automatically on each commit, enforcing code style and quality standards before changes are committed.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/getting-set-up.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Autosummary of scanpy.get Functions\nDESCRIPTION: This snippet uses reStructuredText to generate an autosummary of functions within the `scanpy.get` module. It includes options to hide signatures and specify the table of contents location.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/get.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   get.obs_df\n   get.var_df\n   get.rank_genes_groups_df\n   get.aggregate\n```\n\n----------------------------------------\n\nTITLE: Registering External Plotting Module in Sphinx\nDESCRIPTION: Sphinx documentation configuration for the scanpy external plotting module, registering key plotting functions for automatic documentation generation\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/plotting.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: scanpy.external.pl\n.. currentmodule:: scanpy.external\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/\n\n   pl.phate\n   pl.trimap\n   pl.sam\n   pl.wishbone_marker_trajectory\n```\n\n----------------------------------------\n\nTITLE: Run pre-commit checks manually\nDESCRIPTION: This command executes the `pre-commit` checks manually on specific files. This is useful when you want to check only a subset of files or bypass the automatic execution on commit.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/getting-set-up.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pre-commit run --files={your files}\n```\n\n----------------------------------------\n\nTITLE: Fork and Clone Scanpy Repository using GitHub CLI\nDESCRIPTION: This command uses the GitHub CLI to fork the Scanpy repository to your GitHub account, clone it to your local machine, add the original repository as a remote, and set up branch tracking.  It simplifies the initial setup process for contributing to the project.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/getting-set-up.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ gh repo fork scverse/scanpy --clone --remote\n```\n\n----------------------------------------\n\nTITLE: Autosummary of Queries Functions (RST)\nDESCRIPTION: This snippet generates an autosummary of the functions within the scanpy.queries module using reStructuredText (RST) directives. The `:nosignatures:` option suppresses the display of function signatures, and `:toctree: ../generated/` specifies the directory where the generated documentation files will be placed.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/queries.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n```{eval-rst}\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   queries.biomart_annotations\n   queries.gene_coordinates\n   queries.mitochondrial_genes\n   queries.enrich\n\n```\n```\n\n----------------------------------------\n\nTITLE: Install pre-commit\nDESCRIPTION: This command installs the `pre-commit` package using pip. `pre-commit` is used to automate code styling checks.  It's a prerequisite for running the project's code styling checks locally.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/getting-set-up.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pip install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Setting Matplotlib Parameters for Scanpy in Python\nDESCRIPTION: This code block references the set_figure_params function, which is used to set default matplotlib parameters and configure a high-resolution Jupyter display backend.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   set_figure_params\n```\n\n----------------------------------------\n\nTITLE: Configuring Simulation Parameters for Scanpy\nDESCRIPTION: This snippet defines parameters for running a simulation using the Krumsiek11 model in Scanpy. It sets the simulation duration, enables branching, defines the number of realizations, configures noise levels for observation and dynamics, and sets the step size and random seed.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/sim_models/krumsiek11_params.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodel = SCANPY_PATH/sim_models/krumsiek11.txt\ntmax = 800\nbranching = True\nnrRealizations = 4\nnoiseObs = 0\nnoiseDyn = 0.001\nstep = 5\nseed = 0\n```\n\n----------------------------------------\n\nTITLE: Uploading Package to TestPyPI\nDESCRIPTION: This snippet provides the command to upload the package to the test PyPI repository. This is useful for testing the upload process without affecting the main PyPI repository.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/release.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ twine upload --repository testpypi dist/*\n```\n\n----------------------------------------\n\nTITLE: Bug fix in scanpy.pl.timeseries_as_heatmap colorbar creation\nDESCRIPTION: This snippet describes a bug fix in `scanpy.pl.timeseries_as_heatmap` function related to colorbar creation. This addresses inconsistencies or errors that were happening during the colorbar generation process.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.7.1.md#2025-04-16_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring SCANPY Toggle Switch Simulation Parameters in Python\nDESCRIPTION: This code snippet defines the parameters for a SCANPY simulation of a toggle switch model. It specifies the model file path, simulation duration, branching behavior, number of realizations, observation and dynamic noise levels, time step, and random seed.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/sim_models/toggleswitch_params.txt#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmodel = SCANPY_PATH/sim_models/toggleswitch.txt\ntmax = 100\nbranching = True\nnrRealizations = 2\nnoiseObs = 0.01\nnoiseDyn = 0.001\nstep = 1\nseed = 0\n```\n\n----------------------------------------\n\nTITLE: Hiding Warnings in Pytest\nDESCRIPTION: Command to disable warnings when running the test suite using Pytest. This can make the test output easier to read by reducing clutter. Requires Pytest to be installed and should be used when warnings obscure the test results. The default behavior will be to show test results without warnings.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--disable-pytest-warnings\n```\n\n----------------------------------------\n\nTITLE: Accessing Scanpy Configuration in Python\nDESCRIPTION: This snippet shows how to access the ScanpyConfig class, which is used to configure various Scanpy settings.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   _settings.ScanpyConfig\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Update Rules in Python\nDESCRIPTION: This snippet defines boolean update rules for variables 0 and 1 using logical expressions. The rules determine how the state of each variable changes based on the current state of other variables in the network.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/sim_models/toggleswitch.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n0 = 0 and not 1\n1 = 1 and not 0\n```\n\n----------------------------------------\n\nTITLE: Defining toctree structure for Scanpy plotting documentation in Markdown/reST\nDESCRIPTION: A toctree directive that organizes the plotting documentation into 'core' and 'advanced' sections with maximum depth of 1.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/plotting/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\ncore\nadvanced\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Scanpy External Tools Module - RST\nDESCRIPTION: This snippet initializes the external tools module in Scanpy, allowing access to its functionalities for single-cell analysis. It sets the current module to 'scanpy.external'.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/external/tools.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n\"\"\"{eval-rst}\\n.. module:: scanpy.external.tl\\n.. currentmodule:: scanpy.external\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Time Series Data of Biological Markers\nDESCRIPTION: Tabular data showing the progression of 11 biological markers over 106 time steps. Values represent concentration or expression levels of different transcription factors in a biological system.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/datasets/krumsiek11.txt#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# it   Gata2   Gata1    Fog1    EKLF    Fli1     SCL   Cebpa    Pu.1    cJun  EgrNab    Gfi1\n   0  0.8032 -0.0005 -0.0001  0.0003  0.0013  0.0011  0.7997  0.8017  0.0006  0.0009  0.0002\n   1  0.7239  0.0016 -0.0003 -0.0010  0.0011  0.0022  0.8195  0.7256  0.0784  0.0077  0.0941\n[...]\n 104 -0.0043  0.0163  0.0025  0.0038  0.0009 -0.0003  0.9945  0.9593  0.9806  0.9747 -0.0044\n 105 -0.0045  0.0147  0.0030  0.0044  0.0015  0.0000  0.9942  0.9609  0.9830  0.9734 -0.0003\n```\n\n----------------------------------------\n\nTITLE: Creating TOC for Basic Workflows in Sphinx Documentation\nDESCRIPTION: A toctree directive to include basic workflow tutorials in the Sphinx documentation with a maximum depth of 2.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/tutorials/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\nbasics/index\n```\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Configuration for Contribution Guide\nDESCRIPTION: Markdown table of contents for organizing contribution documentation sections using toctree directive\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/dev/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\ncode\ngetting-set-up\ntesting\ndocumentation\nci\nversioning\nrelease\n```\n```\n\n----------------------------------------\n\nTITLE: Training Loss Data Table\nDESCRIPTION: Numerical data representing training progress, with each row containing an epoch number (0-99) and two corresponding loss values. The table appears to show two separate runs, each with 100 epochs.\nSOURCE: https://github.com/scverse/scanpy/blob/main/src/scanpy/datasets/toggleswitch.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   0  0.8052  0.7880\n   1  0.7378  0.7237\n   2  0.6568  0.6589\n   3  0.5926  0.5886\n   4  0.5454  0.5314\n   5  0.4869  0.4905\n   6  0.4490  0.4493\n   7  0.4000  0.4066\n   8  0.3722  0.3757\n   9  0.3355  0.3014\n  10  0.3004  0.3247\n  11  0.2922  0.2865\n  12  0.2728  0.2553\n  13  0.2533  0.2504\n  14  0.2341  0.2504\n  15  0.2275  0.2192\n  16  0.2160  0.2120\n  17  0.2164  0.2017\n  18  0.2030  0.1865\n  19  0.2145  0.1973\n  20  0.1901  0.1991\n  21  0.1857  0.1772\n  22  0.2140  0.1781\n  23  0.1823  0.1899\n  24  0.1820  0.1734\n  25  0.2038  0.1831\n  26  0.1878  0.1833\n  27  0.2071  0.1546\n  28  0.1868  0.1561\n  29  0.1931  0.1545\n  30  0.1971  0.1606\n  31  0.2048  0.1480\n  32  0.2007  0.1665\n  33  0.2005  0.1567\n  34  0.2335  0.1688\n  35  0.1923  0.1687\n  36  0.2037  0.1463\n  37  0.2114  0.1620\n  38  0.2258  0.1510\n  39  0.2349  0.1464\n  40  0.2294  0.1453\n  41  0.2369  0.1557\n  42  0.2425  0.1334\n  43  0.2240  0.1440\n  44  0.2479  0.1287\n  45  0.2506  0.1361\n  46  0.2693  0.1287\n  47  0.2716  0.1226\n  48  0.2859  0.1214\n  49  0.2877  0.1017\n  50  0.2892  0.1042\n  51  0.2916  0.0954\n  52  0.3211  0.0971\n  53  0.3365  0.0777\n  54  0.3389  0.0806\n  55  0.3828  0.0666\n  56  0.3880  0.0715\n  57  0.4092  0.0604\n  58  0.4341  0.0590\n  59  0.4671  0.0591\n  60  0.4888  0.0547\n  61  0.5179  0.0392\n  62  0.5429  0.0457\n  63  0.5542  0.0351\n  64  0.5775  0.0466\n  65  0.6189  0.0559\n  66  0.6583  0.0100\n  67  0.6781  0.0164\n  68  0.6738  0.0121\n  69  0.7266  0.0161\n  70  0.7365  0.0267\n  71  0.7676  0.0108\n  72  0.7802  0.0189\n  73  0.7919  0.0223\n  74  0.7964  0.0000\n  75  0.8168  0.0206\n  76  0.8357 -0.0017\n  77  0.8590  0.0064\n  78  0.8631 -0.0063\n  79  0.8778  0.0118\n  80  0.8959  0.0151\n  81  0.8889  0.0045\n  82  0.8988 -0.0017\n  83  0.9048  0.0015\n  84  0.9058  0.0184\n  85  0.9106  0.0078\n  86  0.9427  0.0061\n  87  0.9504 -0.0172\n  88  0.9399 -0.0146\n  89  0.9312 -0.0045\n  90  0.9287  0.0014\n  91  0.9580 -0.0219\n  92  0.9492  0.0117\n  93  0.9513 -0.0021\n  94  0.9775 -0.0108\n  95  0.9771  0.0123\n  96  0.9576  0.0039\n  97  0.9823 -0.0137\n  98  0.9726  0.0075\n  99  0.9791 -0.0249\n   0  0.7856  0.7909\n   1  0.7232  0.7316\n   2  0.6652  0.6568\n   3  0.5844  0.5871\n   4  0.5261  0.5367\n   5  0.4828  0.4746\n   6  0.4317  0.4340\n   7  0.3951  0.4049\n   8  0.3363  0.3738\n   9  0.3265  0.3413\n  10  0.3014  0.3120\n  11  0.2903  0.2915\n  12  0.2452  0.2735\n  13  0.2541  0.2485\n  14  0.2376  0.2455\n  15  0.2073  0.2364\n  16  0.2148  0.2256\n  17  0.2077  0.2291\n  18  0.2010  0.2009\n  19  0.1830  0.2009\n  20  0.1730  0.1904\n  21  0.1850  0.1854\n  22  0.1864  0.1781\n  23  0.1844  0.2072\n  24  0.1840  0.1829\n  25  0.1703  0.1929\n  26  0.1910  0.1755\n  27  0.1793  0.1873\n  28  0.1672  0.1985\n  29  0.1709  0.1870\n  30  0.1602  0.1806\n  31  0.1674  0.1905\n  32  0.1586  0.1792\n  33  0.1521  0.1885\n  34  0.1617  0.1938\n  35  0.1813  0.1820\n  36  0.1710  0.1927\n  37  0.1813  0.1973\n  38  0.1668  0.1812\n  39  0.1697  0.1911\n  40  0.1802  0.1937\n  41  0.1641  0.2023\n  42  0.1605  0.1742\n  43  0.1634  0.2003\n  44  0.1485  0.2187\n  45  0.1607  0.1984\n  46  0.1578  0.2125\n  47  0.1378  0.2091\n  48  0.1630  0.2080\n  49  0.1525  0.2239\n  50  0.1459  0.2286\n  51  0.1377  0.2348\n  52  0.1228  0.2197\n  53  0.1515  0.2485\n  54  0.1118  0.2391\n  55  0.1275  0.2648\n  56  0.1248  0.2458\n  57  0.1199  0.2800\n  58  0.1128  0.2795\n  59  0.0929  0.2965\n  60  0.1039  0.3032\n  61  0.0973  0.3214\n  62  0.0875  0.3213\n  63  0.0771  0.3611\n  64  0.0652  0.3762\n  65  0.0894  0.3851\n  66  0.0579  0.4128\n  67  0.0593  0.4368\n  68  0.0598  0.4614\n  69  0.0671  0.5108\n  70  0.0523  0.5170\n  71  0.0545  0.5370\n  72  0.0182  0.5819\n  73  0.0376  0.6036\n  74  0.0318  0.6148\n  75  0.0389  0.6596\n  76  0.0265  0.6772\n  77  0.0222  0.7121\n  78  0.0297  0.7199\n  79  0.0300  0.7359\n  80  0.0108  0.7798\n  81  0.0335  0.7786\n  82  0.0247  0.8034\n  83  0.0248  0.8071\n  84 -0.0007  0.8537\n  85  0.0087  0.8359\n  86  0.0065  0.8508\n  87 -0.0025  0.8516\n  88  0.0052  0.8746\n  89  0.0136  0.8971\n  90  0.0023  0.8802\n  91  0.0133  0.9154\n  92  0.0067  0.9180\n  93  0.0115  0.9287\n  94  0.0010  0.9201\n  95  0.0070  0.9266\n  96  0.0115  0.9389\n  97  0.0145  0.9367\n  98  0.0012  0.9513\n  99  0.0075  0.9499\n```\n\n----------------------------------------\n\nTITLE: Dependency on igraph instead of python-igraph - Python\nDESCRIPTION: This change updates the library's dependency to igraph instead of the older python-igraph, helping to streamline the library and improve compatibility.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.9.4.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n* Depend on `igraph` instead of `python-igraph` {pr}`2566` {smaller}`P Angerer`\n```\n\n----------------------------------------\n\nTITLE: Fixing Sparse Matrix Deprecation\nDESCRIPTION: This snippet corrects the deprecated use of `.A` with sparse matrices in Scanpy. Using `.A` on sparse matrices is no longer the recommended approach, and this fix addresses the issue to maintain compatibility and utilize current best practices.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/release-notes/1.10.2.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`\"\n```\n\n----------------------------------------\n\nTITLE: Printing Scanpy Version Information in Python\nDESCRIPTION: This snippet shows functions for printing Scanpy's header information and version details of packages that may affect numerical results.\nSOURCE: https://github.com/scverse/scanpy/blob/main/docs/api/settings.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary::\n   :nosignatures:\n   :toctree: ../generated/\n\n   logging.print_header\n   logging.print_versions\n```"
  }
]