[
  {
    "owner": "neovim",
    "repo": "neovim",
    "content": "TITLE: Implementing a Python Remote Plugin for Neovim\nDESCRIPTION: An example Python plugin called 'Limit' that exports a command, a function, and an autocmd. The plugin demonstrates how to use the pynvim module to interact with Neovim, track state, and handle different types of calls with sync settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote_plugin.txt#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pynvim\n\n@pynvim.plugin\nclass Limit(object):\n    def __init__(self, vim):\n        self.vim = vim\n        self.calls = 0\n\n    @pynvim.command('Cmd', range='', nargs='*', sync=True)\n    def command_handler(self, args, range):\n        self._increment_calls()\n        self.vim.current.line = (\n            'Command: Called %d times, args: %s, range: %s' % (self.calls,\n                                                               args,\n                                                               range))\n\n    @pynvim.autocmd('BufEnter', pattern='*.py', eval='expand(\"<afile>\")',\n                    sync=True)\n    def autocmd_handler(self, filename):\n        self._increment_calls()\n        self.vim.current.line = (\n            'Autocmd: Called %s times, file: %s' % (self.calls, filename))\n\n    @pynvim.function('Func')\n    def function_handler(self, args):\n        self._increment_calls()\n        self.vim.current.line = (\n            'Function: Called %d times, args: %s' % (self.calls, args))\n\n    def _increment_calls(self):\n        if self.calls == 5:\n            raise Exception('Too many calls!')\n        self.calls += 1\n```\n\n----------------------------------------\n\nTITLE: Interrupt Handling with Tasks\nDESCRIPTION: Complex example showing how to handle user interrupts (CTRL-C) in a command loop with multiple tasks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_138\n\nLANGUAGE: vim\nCODE:\n```\n:function! TASK1()\n:  sleep 10\n:endfunction\n\n:function! TASK2()\n:  sleep 20\n:endfunction\n\n:while 1\n:  let command = input(\"Type a command: \")\n:  try\n:    if command == \"\"\n:      continue\n:    elseif command == \"END\"\n:      break\n:    elseif command == \"TASK1\"\n:      call TASK1()\n:    elseif command == \"TASK2\"\n:      call TASK2()\n:    else\n:      echo \"\\nIllegal command:\" command\n:      continue\n:    endif\n:  catch /^Vim:Interrupt$/\n:    echo \"\\nCommand interrupted\"\n:  endtry\n:endwhile\n```\n\n----------------------------------------\n\nTITLE: Neovim Editor Commands Reference\nDESCRIPTION: Structured list of Neovim commands showing the full command name, its abbreviated form in brackets, and a description of its functionality. This includes commands for navigation, editing, window management, scripting, and various editor modes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n|:ijump|    :ij[ump]    jump to definition of identifier\n|:ilist|    :il[ist]    list lines where identifier matches\n|:imap|     :im[ap]     like \":map\" but for Insert mode\n|:imapclear|    :imapc[lear]    like \":mapclear\" but for Insert mode\n[...additional commands truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Feeding Keys into Neovim\nDESCRIPTION: This example demonstrates how to feed keys into Neovim using `nvim_feedkeys()`. It shows how to replace termcodes to input special key sequences like `<C-o>`. The `nvim_replace_termcodes()` function is used to handle the keycode replacement, and the result is then passed to `nvim_feedkeys()`.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\n        :let key = nvim_replace_termcodes(\"<C-o>\", v:true, v:false, v:true)\n        :call nvim_feedkeys(key, 'n', v:false)\n\n```\n\n----------------------------------------\n\nTITLE: Executing Vimscript Block in Neovim\nDESCRIPTION: The 'nvim_exec2' function allows execution of Vimscript commands supporting script-scope and heredocs. Results include detailed output based on 'opts'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_38\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_exec2\\(\\{src\\}, \\{opts\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Window Management Commands in Neovim\nDESCRIPTION: Extensive set of window navigation and manipulation commands using CTRL-W prefix, enabling split window operations, window movement, resizing, and tab page interactions\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-W s - split window horizontally\nCTRL-W v - split window vertically\nCTRL-W h/j/k/l - move between windows\n```\n\n----------------------------------------\n\nTITLE: Configuring Lua Language Server in Neovim LSP\nDESCRIPTION: Example configuration for the Lua language server (lua-language-server) using vim.lsp.config. Sets up server command, filetypes, root markers, and specific Lua settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.config['luals'] = {\n  -- Command and arguments to start the server.\n  cmd = { 'lua-language-server' },\n\n  -- Filetypes to automatically attach to.\n  filetypes = { 'lua' },\n\n  -- Sets the \"root directory\" to the parent directory of the file in the\n  -- current buffer that contains either a \".luarc.json\" or a\n  -- \".luarc.jsonc\" file. Files that share a root directory will reuse\n  -- the connection to the same LSP server.\n  root_markers = { '.luarc.json', '.luarc.jsonc' },\n\n  -- Specific settings to send to the server. The schema for this is\n  -- defined by the server. For example the schema for lua-language-server\n  -- can be found here https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\n  settings = {\n    Lua = {\n      runtime = {\n        version = 'LuaJIT',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Exception Handling with Nested Try Blocks in Vim Script\nDESCRIPTION: A comprehensive example that demonstrates nested try blocks, exception propagation, and examining exception information using v:exception and v:throwpoint variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_126\n\nLANGUAGE: vim\nCODE:\n```\n:function! Caught()\n:  if v:exception != \"\"\n:    echo 'Caught \"' .. v:exception .. '\" in ' .. v:throwpoint\n:  else\n:    echo 'Nothing caught'\n:  endif\n:endfunction\n:\n:function! Foo()\n:  try\n:    try\n:      try\n:         throw 4711\n:      finally\n:         call Caught()\n:      endtry\n:    catch /.*/\n:      call Caught()\n:      throw \"oops\"\n:    endtry\n:  catch /.*/\n:    call Caught()\n:  finally\n:    call Caught()\n:  endtry\n:endfunction\n:\n:call Foo()\n```\n\n----------------------------------------\n\nTITLE: Autocommand Group Definition Pattern\nDESCRIPTION: Best practice pattern for defining autocommands within a group to avoid duplicate definitions when sourcing vimrc multiple times\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\naugroup vimrc\n  \" Remove all vimrc autocommands\n  autocmd!\n  au BufNewFile,BufRead *.html so <sfile>:h/html.vim\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Creating Autocommand Groups in Vim\nDESCRIPTION: Example showing the recommended pattern for defining autocommand groups: creating the group, clearing previous autocommands, defining new ones, and ending the group definition.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_26\n\nLANGUAGE: viml\nCODE:\n```\n:augroup uncompress\n:  au!\n:  au BufEnter *.gz\t%!gunzip\n:augroup END\n```\n\n----------------------------------------\n\nTITLE: Executing Vim Undo/Redo Commands\nDESCRIPTION: Commands for undoing and redoing changes in Vim. Includes undo, redo, and restore last changed line operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nu       N  u\t\tundo last N changes\nCTRL-R  N  CTRL-R\tredo last N undone changes\nU          U\t\trestore last changed line\n```\n\n----------------------------------------\n\nTITLE: Using mapcheck for Mapping Validation\nDESCRIPTION: Example showing how to safely add a new mapping by checking if it would conflict with existing mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_158\n\nLANGUAGE: vim\nCODE:\n```\nif mapcheck(\"_vv\") == \"\"\n   map _vv :set guifont=7x13<CR>\nendif\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Request to All LSP Clients in Lua\nDESCRIPTION: Sends an asynchronous request to all active LSP clients attached to a buffer, executing the handler with the combined results. Accepts buffer number, LSP method, parameters, and a completion handler, and returns a function to cancel all requests. Available since Neovim 0.5.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\nbuf_request_all({bufnr}, {method}, {params}, {handler})\n    Attributes: ~\n        Since: 0.5.0\n\n    Parameters: ~\n      • {bufnr}    (`integer`) Buffer handle, or 0 for current.\n      • {method}   (`string`) LSP method name\n      • {params}   (`table|(fun(client: vim.lsp.Client, bufnr: integer): table?)?`)\n                   Parameters to send to the server. Can also be passed as a\n                   function that returns the params table for cases where\n                   parameters are specific to the client.\n      • {handler}  (`function`) Handler called after all requests are\n                   completed. Server results are passed as a\n                   `client_id:result` map.\n\n    Return: ~\n        (`function`) cancel Function that cancels all requests.\n```\n\n----------------------------------------\n\nTITLE: LSP RPC Client Object Definition in Lua\nDESCRIPTION: Defines the structure of a Client RPC object with methods for requests, notifications, and connection management.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_63\n\nLANGUAGE: lua\nCODE:\n```\n{\n  request = function(method, params, callback, notify_reply_callback),\n  notify = function(method, params),\n  is_closing = function(),\n  terminate = function()\n}\n```\n\n----------------------------------------\n\nTITLE: Command Registration for Non-Spec LSP Commands in Lua\nDESCRIPTION: Registers client-side handlers for custom server-commands not defined in the LSP specification. Commands are defined in a table with functions triggered by LSP actions. Provides an example of registering a 'java.action.generateToStringPrompt' command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\ncommands                                                    *vim.lsp.commands*\n    If an LSP response contains a command which is not found in\n    `vim.lsp.commands`, the command will be executed via the LSP server using\n    `workspace/executeCommand`.\n\n    Example: >lua\n        vim.lsp.commands['java.action.generateToStringPrompt'] = function(_, ctx)\n          require(\"jdtls.async\").run(function()\n            local _, result = request(ctx.bufnr, 'java/checkToStringStatus', ctx.params)\n            local fields = ui.pick_many(result.fields, 'Include item in toString?', function(x)\n              return string.format('%s: %s', x.name, x.type)\n            end)\n            local _, edit = request(ctx.bufnr, 'java/generateToString', { context = ctx.params; fields = fields; })\n            vim.lsp.util.apply_workspace_edit(edit, offset_encoding)\n          end)\n        end\n<\n```\n\n----------------------------------------\n\nTITLE: CTRL-space mapping for triggering LSP completion\nDESCRIPTION: Defines a key mapping to trigger LSP completion manually using CTRL-space, with a reminder to use CTRL-Y to select an item from the completion menu.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\n-- Use CTRL-space to trigger LSP completion.\n-- Use CTRL-Y to select an item. |complete_CTRL-Y|\nvim.keymap.set('i', '<c-space>', function()\n  vim.lsp.completion.get()\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting up LSP-driven auto-completion\nDESCRIPTION: Configures LSP-driven auto-completion with completeopt settings optimized for the LSP experience, including a custom conversion function to clean up completion items.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_40\n\nLANGUAGE: lua\nCODE:\n```\n-- Works best with completeopt=noselect.\n-- Use CTRL-Y to select an item. |complete_CTRL-Y|\nvim.cmd[[set completeopt+=menuone,noselect,popup]]\nvim.lsp.start({\n  name = 'ts_ls',\n  cmd = …,\n  on_attach = function(client, bufnr)\n    vim.lsp.completion.enable(true, client.id, bufnr, {\n      autotrigger = true,\n      convert = function(item)\n        return { abbr = item.label:gsub('%b()', '') }\n      end,\n    })\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Starting an LSP Client in Neovim\nDESCRIPTION: Demonstrates how to create and start a new LSP client in Neovim. The example configures a language server with a name, command to execute, and root directory detection based on project files. This is typically used in a FileType autocmd or ftplugin file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.start({\n   name = 'my-server-name',\n   cmd = {'name-of-language-server-executable'},\n   root_dir = vim.fs.root(0, {'pyproject.toml', 'setup.py'}),\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling LSP Configuration\nDESCRIPTION: Example showing how to enable a previously defined LSP configuration using vim.lsp.enable().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.enable('luals')\n```\n\n----------------------------------------\n\nTITLE: Basic Try-Catch-Finally Structure\nDESCRIPTION: Illustrates the complete structure of a try-catch-finally block in Vim script, showing the proper syntax and organization.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_119\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:  ...\n:  ...             TRY BLOCK\n:  ...\n:catch /{pattern}/\n:  ...\n:  ...             CATCH CLAUSE\n:  ...\n:catch /{pattern}/\n:  ...\n:  ...             CATCH CLAUSE\n:  ...\n:finally\n:  ...\n:  ...             FINALLY CLAUSE\n:  ...\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications to LSP in Lua\nDESCRIPTION: Implements the `textDocument/did…` notifications required to track a buffer for any language server. The function attaches the specified client to a buffer, ensuring it receives change notifications. Required parameters include the buffer number and client id. Returns true on successful attachment.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\nbuf_attach_client({bufnr}, {client_id})          *vim.lsp.buf_attach_client()*\n    Parameters: ~\n      • {bufnr}      (`integer`) Buffer handle, or 0 for current\n      • {client_id}  (`integer`) Client id\n\n    Return: ~\n        (`boolean`) success `true` if client was attached successfully;\n        `false` otherwise\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Marks in Neovim Buffers\nDESCRIPTION: Function to create or modify extmarks in Neovim buffers. Supports range highlighting, virtual text, signs, and various display options. Used for buffer annotations and text decorations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_66\n\nLANGUAGE: vimdoc\nCODE:\n```\nnvim_buf_set_extmark({buffer}, {ns_id}, {line}, {col}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Basic Map Commands Overview in Neovim\nDESCRIPTION: This section outlines various commands used for defining, removing, and listing key mappings in Neovim. It explains the concepts of left-hand side (lhs) and right-hand side (rhs) within these commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:map {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:nm[ap] {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:vm[ap] {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:xm[ap] {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:smap {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:om[ap] {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map! {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:im[ap] {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:lm[ap] {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:cm[ap] {lhs} {rhs}\n```\n\nLANGUAGE: vim\nCODE:\n```\n:tma[p] {lhs} {rhs}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Vim Configuration Options\nDESCRIPTION: Basic configuration settings for Vim including backup and history options\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nset backup\nset history=50\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Signs in Neovim with Lua\nDESCRIPTION: This code snippet demonstrates how to configure the sign settings for different diagnostic severities within Neovim using Lua. It specifically sets configuration for signs like text, line highlighting, and number highlighting per the severity of the diagnostics. The snippet requires Neovim with a properly configured Lua environment. The inputs include diagnostic severity settings, and it modifies the visual representation of diagnostics in the UI.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Highlight entire line for errors\n-- Highlight the line number for warnings\nvim.diagnostic.config({\n    signs = {\n        text = {\n            [vim.diagnostic.severity.ERROR] = '',\n            [vim.diagnostic.severity.WARN] = '',\n        },\n        linehl = {\n            [vim.diagnostic.severity.ERROR] = 'ErrorMsg',\n        },\n        numhl = {\n            [vim.diagnostic.severity.WARN] = 'WarningMsg',\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Filetype Detection Autocommand\nDESCRIPTION: Vim autocommand configuration to detect files with a specific extension (.xyz) and set their filetype accordingly. This goes in a custom filetype.vim file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\naugroup filetypedetect\nau BufNewFile,BufRead *.xyz\tsetf xyz\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text with matchaddpos() in Vim\nDESCRIPTION: Demonstrates using matchaddpos() to highlight specific positions in a buffer, then deleting the highlight using matchdelete(). This is faster than matchadd() for simple highlighting tasks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_165\n\nLANGUAGE: vim\nCODE:\n```\nhighlight MyGroup ctermbg=green guibg=green\nlet m = matchaddpos(\"MyGroup\", [[23, 24], 34])\n\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall matchdelete(m)\n\n```\n\n----------------------------------------\n\nTITLE: Handling LspRequest event in Lua\nDESCRIPTION: This snippet demonstrates how to handle the LspRequest event, which is triggered for every change to the request's status. It tracks pending, canceling, and finished requests based on the request type.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('LspRequest', {\n  callback = function(args)\n    local bufnr = args.buf\n    local client_id = args.data.client_id\n    local request_id = args.data.request_id\n    local request = args.data.request\n    if request.type == 'pending' then\n      -- do something with pending requests\n      track_pending(client_id, bufnr, request_id, request)\n    elseif request.type == 'cancel' then\n      -- do something with pending cancel requests\n      track_canceling(client_id, bufnr, request_id, request)\n    elseif request.type == 'complete' then\n      -- do something with finished requests. this pending\n      -- request entry is about to be removed since it is complete\n      track_finish(client_id, bufnr, request_id, request)\n    end\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Autocommand in Vim\nDESCRIPTION: This snippet demonstrates how to create an autocommand that triggers a function just before writing a buffer to a file. The defined function updates a date stamp in the file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd BufWritePre *  call DateInsert()\n```\n\n----------------------------------------\n\nTITLE: Using map() Function with Lists and Dictionaries in Vim\nDESCRIPTION: Demonstrates various ways to use the map() function in Vim, including with lists, dictionaries, and different types of callback functions (named function, lambda, and short lambda forms).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_156\n\nLANGUAGE: vim\nCODE:\n```\ncall map(mylist, '\"> \" .. v:val .. \" <\"')\n\nfunc KeyValue(key, val)\n  return a:key .. '-' .. a:val\nendfunc\ncall map(myDict, function('KeyValue'))\n\ncall map(myDict, {key, val -> key .. '-' .. val})\n\ncall map(myDict, {key -> 'item: ' .. key})\n\ncall map(myDict, {_, val -> 'item: ' .. val})\n\nlet tlist = map(copy(mylist), ' v:val .. \"\\t\"')\n```\n\n----------------------------------------\n\nTITLE: Loop Control in Vim Script\nDESCRIPTION: Demonstrates while loops with continue and break statements in Vim script. Shows how to control loop execution flow.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_10\n\nLANGUAGE: viml\nCODE:\n```\n:while counter < 40\n:  call do_something()\n:  if skip_flag\n:    continue\n:  endif\n:  if finished_flag\n:    break\n:  endif\n:  sleep 50m\n:endwhile\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Highlighting and Autocommands in Vim\nDESCRIPTION: This snippet illustrates the use of autocommands to configure syntax highlighting in Vim based on file types. It shows how Vim uses these commands to load the appropriate syntax files from runtime paths, ensuring that each filetype is matched to its corresponding syntax. Dependencies include the presence of syntax and filetype vim scripts in the runtime path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_6\n\nLANGUAGE: Vim Script\nCODE:\n```\n:au BufReadPost * if b:current_syntax == \"csh\"\n:au BufReadPost *   do-some-things\n:au BufReadPost * endif\n```\n\nLANGUAGE: Vim Script\nCODE:\n```\n:let filetype_i = \"asm\"\n:let b:asmsyntax = \"nasm\"\n:let asmsyntax = \"nasm\"\n```\n\n----------------------------------------\n\nTITLE: Creating Range Parameters for Current Position in Neovim LSP (Lua)\nDESCRIPTION: Creates an object for LSP requests using the current position in the current buffer. Takes optional window ID and position encoding as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_58\n\nLANGUAGE: lua\nCODE:\n```\nmake_range_params({window}, {position_encoding})\n```\n\n----------------------------------------\n\nTITLE: Using For Loops with Lists in Vim\nDESCRIPTION: Demonstrates how to iterate over lists using for loops in Vim, including using the range() function to create numeric lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:let alist = ['one', 'two', 'three']\n:for n in alist\n:  echo n\n:endfor\n\n:for a in range(3)\n:  echo a\n:endfor\n\n:for a in range(8, 4, -2)\n:  echo a\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Using Leader Mapping in Vim\nDESCRIPTION: Shows how to define a mapping using the <Leader> prefix, which gets replaced with the value of mapleader variable. This mapping adds a new line in normal mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nmap <Leader>A  oanother line<Esc>\n```\n\n----------------------------------------\n\nTITLE: Advanced Filetype Detection with Multiple Patterns\nDESCRIPTION: Extended filetype detection configuration that recognizes files both by extension and by directory location. Demonstrates how to handle multiple filetype patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\naugroup filetypedetect\nau BufNewFile,BufRead *.xyz\t\t\tsetf xyz\nau BufNewFile,BufRead /usr/share/scripts/*\tsetf ruby\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Keys\nDESCRIPTION: Home row keys for cursor movement in Vim's Normal mode: h (left), j (down), k (up), l (right).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nh   left\nj   down\nk   up\nl   right\n```\n\n----------------------------------------\n\nTITLE: Creating Autocommands with Lua Callback in Neovim\nDESCRIPTION: Example of creating autocommands in Neovim using Lua. This creates event handlers for BufEnter and BufWinEnter events that trigger on C and header files and prints the event information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_84\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd({'BufEnter', 'BufWinEnter'}, {\n  pattern = {'*.c', '*.h'},\n  callback = function(ev)\n    print(string.format('event fired: %s', vim.inspect(ev)))\n  end\n})\n```\n\n----------------------------------------\n\nTITLE: Highlighting Document References in Neovim LSP (Lua)\nDESCRIPTION: Shows a list of document highlights for a specific buffer. Takes buffer id, references array, and position encoding as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_48\n\nLANGUAGE: lua\nCODE:\n```\nbuf_highlight_references({bufnr}, {references}, {position_encoding})\n```\n\n----------------------------------------\n\nTITLE: Converting LSP Locations to Quickfix Items in Neovim (Lua)\nDESCRIPTION: Converts LSP locations to items suitable for quickfix and location lists. Calculates byte positions and sorts the items.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_53\n\nLANGUAGE: lua\nCODE:\n```\nlocations_to_items({locations}, {position_encoding})\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Vimrc Configuration in Neovim\nDESCRIPTION: Commands to create a new init.vim configuration file in the standard Neovim config directory\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_01.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:call mkdir(stdpath('config'),'p')\n:exe 'edit' stdpath('config').'/init.vim'\n:write\n```\n\n----------------------------------------\n\nTITLE: Enabling Syntax Highlighting in Neovim\nDESCRIPTION: Commands to enable syntax highlighting in Neovim. Shows two equivalent methods using :syntax enable or :syntax on which internally sources the syntax.vim file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n:syntax enable\n\n:syntax on\n```\n\n----------------------------------------\n\nTITLE: Disabling Semantic Highlights in Lua\nDESCRIPTION: This snippet shows how to disable semantic highlights for functions and all semantic highlights using Lua's `vim.api.nvim_set_hl` function. It iterates through the highlight groups to clear them. This is usually placed within a `ColorScheme` autocommand.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n-- Hide semantic highlights for functions\nvim.api.nvim_set_hl(0, '@lsp.type.function', {})\n\n-- Hide all semantic highlights\nfor _, group in ipairs(vim.fn.getcompletion(\"@lsp\", \"highlight\")) do\n  vim.api.nvim_set_hl(0, group, {})\nend\n```\n\n----------------------------------------\n\nTITLE: Creating User-Configurable Mappings in VimScript\nDESCRIPTION: This snippet demonstrates how to create a mapping that can be customized by the user. It uses the <Leader> key and checks for existing mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_32\n\nLANGUAGE: VimScript\nCODE:\n```\nif !hasmapto('<Plug>TypecorrAdd;')\n  map <unique> <Leader>a  <Plug>TypecorrAdd;\nendif\n```\n\n----------------------------------------\n\nTITLE: Applying Text Document Edit in Neovim LSP (Lua)\nDESCRIPTION: Applies a TextDocumentEdit, which is a list of changes to a single document. Takes the edit object, an optional index, and the position encoding as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_44\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.util.apply_text_document_edit(text_document_edit, index, position_encoding)\n```\n\n----------------------------------------\n\nTITLE: Creating TreeSitter LanguageTree in Lua\nDESCRIPTION: Demonstrates how to create a LanguageTree (parser object) for a given buffer and language using the vim.treesitter.get_parser() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nlocal parser = vim.treesitter.get_parser(bufnr, lang)\n```\n\n----------------------------------------\n\nTITLE: Defining Character Classes in Vim Regular Expressions\nDESCRIPTION: This snippet demonstrates various character class definitions used in Vim regular expressions. It includes predefined character classes for digits, hex digits, word characters, and more.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n\\D  non-digit:            [^0-9]      */\\D*\n\\x  hex digit:            [0-9A-Fa-f]  */\\x*\n\\X  non-hex digit:        [^0-9A-Fa-f] */\\X*\n\\o  octal digit:          [0-7]       */\\o*\n\\O  non-octal digit:      [^0-7]      */\\O*\n\\w  word character:       [0-9A-Za-z_] */\\w*\n\\W  non-word character:   [^0-9A-Za-z_] */\\W*\n\\h  head of word character: [A-Za-z_]   */\\h*\n\\H  non-head of word character: [^A-Za-z_]  */\\H*\n\\a  alphabetic character: [A-Za-z]     */\\a*\n\\A  non-alphabetic character: [^A-Za-z]    */\\A*\n\\l  lowercase character:  [a-z]       */\\l*\n\\L  non-lowercase character: [^a-z]      */\\L*\n\\u  uppercase character:  [A-Z]       */\\u*\n\\U  non-uppercase character: [^A-Z]      */\\U*\n```\n\n----------------------------------------\n\nTITLE: Basic Autocommand Definition in Vim\nDESCRIPTION: Example showing how to create an autocommand for HTML files that sources a related vim configuration file\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:au BufNewFile,BufRead *.html so <sfile>:h/html.vim\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Echo Server using LibUV in Lua\nDESCRIPTION: This snippet demonstrates the setup of a simple TCP echo server that binds to a local address and port, listens for incoming connections, and echoes back any received data. It uses the Lua bindings provided by the LibUV library to manage TCP network operations. The server prints a message indicating that it is listening for connections.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal uv = vim.uv\n\nlocal server = uv.new_tcp()\nserver:bind(\"127.0.0.1\", 1337)\nserver:listen(128, function (err)\n  assert(not err, err)\n  local client = uv.new_tcp()\n  server:accept(client)\n  client:read_start(function (err, chunk)\n    assert(not err, err)\n    if chunk then\n      client:write(chunk)\n    else\n      client:shutdown()\n      client:close()\n    end\n  end)\nend)\nprint(\"TCP server listening at 127.0.0.1 port 1337\")\nuv.run() -- an explicit run call is necessary outside of luvit\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Client Defaults in Lua\nDESCRIPTION: Sets default configurations for LSP clients or all clients using the special name '.*'. Offers examples such as adding root markers or capabilities. Configurations are either accessed or redefined through table-indexing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nconfig({name}, {cfg})                                       *vim.lsp.config()*\n    Sets the default configuration for an LSP client (or all clients if the\n    special name \"*\" is used).\n\n    Examples:\n    • Add root markers for ALL clients: >lua\n      vim.lsp.config('*', {\n        root_markers = { '.git', '.hg' },\n      })\n<\n    • Add capabilities to ALL clients: >lua\n      vim.lsp.config('*', {\n      capabilities = {\n        textDocument = {\n          semanticTokens = {\n            multilineTokenSupport = true,\n          }\n        }\n      }\n    })\n<\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in Dictionary Context - Vim Script\nDESCRIPTION: This snippet demonstrates how to define a function that acts on a dictionary using the 'dict' attribute to access its properties via 'self'. The function calculates the length of the 'data' attribute. It returns the length of the data stored in the 'data' entry of the dictionary.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\n:function Mylen() dict\n:   return len(self.data)\n:endfunction\n:let mydict = {'data': [0, 1, 2, 3], 'len': function(\"Mylen\")}\n:echo mydict.len()\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Folding with Treesitter Fallback in Lua\nDESCRIPTION: Sets up folding configuration that uses LSP folding if available, and falls back to treesitter folding. The code sets the foldmethod to 'expr', configures treesitter for folding by default, and creates an autocommand to use LSP folding when a client with the folding capability connects.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nvim.o.foldmethod = 'expr'\n-- Default to treesitter folding\nvim.o.foldexpr = 'v:lua.vim.treesitter.foldexpr()'\n-- Prefer LSP folding if client supports it\nvim.api.nvim_create_autocmd('LspAttach', {\n  callback = function(args)\n    local client = vim.lsp.get_client_by_id(args.data.client_id)\n    if client:supports_method('textDocument/foldingRange') then\n      local win = vim.api.nvim_get_current_win()\n      vim.wo[win][0].foldexpr = 'v:lua.vim.lsp.foldexpr()'\n    end\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Synchronous Request to LSP Clients in Lua\nDESCRIPTION: Sends a synchronous request to all server clients and waits for the responses. Parameters include buffer number, LSP method, parameters, and an optional timeout in milliseconds. Blocks Neovim while waiting for results and is effective from version 0.5.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\nbuf_request_sync({bufnr}, {method}, {params}, {timeout_ms})\n    Attributes: ~\n        Since: 0.5.0\n\n    Parameters: ~\n      • {bufnr}       (`integer`) Buffer handle, or 0 for current.\n      • {method}      (`string`) LSP method name\n      • {params}      (`table|(fun(client: vim.lsp.Client, bufnr: integer): table?)?`)\n                      Parameters to send to the server. Can also be passed as\n                      a function that returns the params table for cases where\n                      parameters are specific to the client.\n      • {timeout_ms}  (`integer?`, default: `1000`) Maximum time in\n                      milliseconds to wait for a result.\n\n    Return (multiple): ~\n        (`table<integer, {error: lsp.ResponseError?, result: any}>?`) result\n        Map of client_id:request_result.\n        (`string?`) err On timeout, cancel, or error, `err` is a string\n        describing the failure reason, and `result` is nil.\n```\n\n----------------------------------------\n\nTITLE: Expanding Tabs to Spaces\nDESCRIPTION: Configuring Vim to convert tab key presses into spaces, ensuring consistent white space representation\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:set expandtab\n```\n\n----------------------------------------\n\nTITLE: Comparing List References vs. Values in Vim\nDESCRIPTION: Shows how the 'is' operator checks if two variables reference the same list, while '==' checks if two lists have the same values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:let alist = [1, 2, 3]\n:let blist = [1, 2, 3]\n:echo alist is blist\n```\n\n----------------------------------------\n\nTITLE: LSP Server Startup with Custom Handlers\nDESCRIPTION: Demonstrates starting an LSP server with custom handlers for specific methods\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.start {\n  ..., -- Other configuration omitted\n  handlers = {\n    ['textDocument/publishDiagnostics'] = my_custom_diagnostics_handler\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling LspAttach event in Lua\nDESCRIPTION: This snippet shows how to handle the LspAttach event, which is triggered after an LSP client attaches to a buffer. It overrides the default `client/registerCapability` handler to call custom on_attach logic.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.handlers['client/registerCapability'] = (function(overridden)\n  return function(err, res, ctx)\n    local result = overridden(err, res, ctx)\n    local client = vim.lsp.get_client_by_id(ctx.client_id)\n    if not client then\n      return\n    end\n    -- Call your custom on_attach logic...\n    -- my_on_attach(client, vim.api.nvim_get_current_buf())\n    return result\n  end\nend)(vim.lsp.handlers['client/registerCapability'])\n```\n\n----------------------------------------\n\nTITLE: Placing Multiple Signs in Vim Buffers\nDESCRIPTION: Examples of using sign_placelist() to place multiple signs at once. This function takes a list of sign definitions and places them in the specified buffers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_240\n\nLANGUAGE: vim\nCODE:\n```\n\" Place sign s1 with id 5 at line 20 and id 10 at line\n\" 30 in buffer a.c\nlet [n1, n2] = sign_placelist([\n    \\ {'id' : 5,\n    \\  'name' : 's1',\n    \\  'buffer' : 'a.c',\n    \\  'lnum' : 20},\n    \\ {'id' : 10,\n    \\  'name' : 's1',\n    \\  'buffer' : 'a.c',\n    \\  'lnum' : 30}\n    \\ ])\n\n\" Place sign s1 in buffer a.c at line 40 and 50\n\" with auto-generated identifiers\nlet [n1, n2] = sign_placelist([\n    \\ {'name' : 's1',\n    \\  'buffer' : 'a.c',\n    \\  'lnum' : 40},\n    \\ {'name' : 's1',\n    \\  'buffer' : 'a.c',\n    \\  'lnum' : 50}\n    \\ ])\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Vim Function\nDESCRIPTION: Demonstrates the basic structure for defining a function in Vim, including function name, arguments, and body.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:function {name}({var1}, {var2}, ...)\n:  {body}\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Using Script-Local Variables in Vim Functions\nDESCRIPTION: Example showing how to initialize and modify script-local variables that persist throughout plugin execution.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_38\n\nLANGUAGE: vim\nCODE:\n```\nlet s:count = 4\n..\nfunction s:Add(from, correct)\n..\n  let s:count = s:count + 1\n  echo s:count .. \" corrections now\"\nendfunction\n```\n\n----------------------------------------\n\nTITLE: List Manipulation Functions in Vim\nDESCRIPTION: Examples of common functions for adding, removing, and manipulating items in Vim lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\n:call insert(list, 'a')\t\t\" prepend item 'a'\n:call insert(list, 'a', 3)\t\" insert item 'a' before list[3]\n:call add(list, \"new\")\t\t\" append String item\n:call add(list, [1, 2])\t\t\" append a List as one new item\n:call extend(list, [1, 2])\t\" extend the list with two more items\n:let i = remove(list, 3)\t\" remove item 3\n:unlet list[3]\t\t\t\" idem\n:let l = remove(list, 3, -1)\t\" remove items 3 to last item\n:unlet list[3 : ]\t\t\" idem\n:call filter(list, 'v:val !~ \"x\"')  \" remove items with an 'x'\n```\n\n----------------------------------------\n\nTITLE: Hover Information Display with LSP in Lua\nDESCRIPTION: Shows how to configure Neovim to display hover information for symbols under the cursor using LSP, with an option to disable highlights. This setup is for Neovim users with LSP enabled.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('ColorScheme', {\n  callback = function()\n    vim.api.nvim_set_hl(0, 'LspReferenceTarget', {})\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Splitting a window with another file\nDESCRIPTION: This command opens a new window and starts editing the specified file. If a filename is provided, it will open that file in the new window; otherwise, it will open a new, empty file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\t:split two.c\n```\n\n----------------------------------------\n\nTITLE: Using function() to Create Partial Functions in Vim Script\nDESCRIPTION: Demonstrates how to use the function() call to create partial functions with predefined arguments in Vim script. It shows examples of passing arguments, using methods, and nesting function() calls.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_78\n\nLANGUAGE: vim\nCODE:\n```\nfunc Callback(arg1, arg2, name)\n\"...\nendfunc\nlet Partial = function('Callback', ['one', 'two'])\n\"...\ncall Partial('name')\n```\n\nLANGUAGE: vim\nCODE:\n```\nfunc Callback(one, two, three)\n\"...\nendfunc\nlet Partial = function('Callback', ['two'])\n\"...\neval 'one'->Partial('three')\n```\n\nLANGUAGE: vim\nCODE:\n```\nfunc Callback(arg1, arg2, name)\n\"...\nendfunc\nlet Func = function('Callback', ['one'])\nlet Func2 = function(Func, ['two'])\n\"...\ncall Func2('name')\n```\n\n----------------------------------------\n\nTITLE: Verbose Highlight Query\nDESCRIPTION: Command to show detailed highlight information including where it was last set\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_188\n\nLANGUAGE: vim\nCODE:\n```\n:verbose hi Comment\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks for LanguageTree (Lua)\nDESCRIPTION: Registers callbacks for various events in the LanguageTree, such as changes to the tree, child additions/removals, and buffer detachment. Callbacks can be applied recursively to all children.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:register_cbs({cbs}, {recursive})\n```\n\n----------------------------------------\n\nTITLE: Checking Existing Mappings in Vim\nDESCRIPTION: Shows how to check if a mapping already exists to a function and create a mapping only if one doesn't exist. This is useful in Vim scripts to avoid overriding user-defined mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_124\n\nLANGUAGE: vim\nCODE:\n```\nif !hasmapto('\\ABCdoit')\n   map <Leader>d \\ABCdoit\nendif\n```\n\n----------------------------------------\n\nTITLE: Searching for 'foo' and Replacing with 'bar' in Vim\nDESCRIPTION: This snippet demonstrates how to search for matches with a pattern 'foo' and replace it with 'bar' using Vim commands. It uses the search command, change command, and repeat search functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n/foo<CR>    find \"foo\"\nc//e<CR>    change until end of match\nbar<Esc>    type replacement\n//<CR>      go to start of next match\nc//e<CR>    change until end of match\nbeep<Esc>   type another replacement\n```\n\n----------------------------------------\n\nTITLE: For Loop Over List Items in Vim\nDESCRIPTION: Demonstrates how to iterate over each item in a list using a for loop.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\n:for item in mylist\n:   call Doit(item)\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Navigating to Quickfix Errors\nDESCRIPTION: Commands for displaying and navigating to errors in the quickfix list, including jumping to specific error numbers and moving through errors sequentially.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:cc[!] [nr]\n:[nr]cc[!]\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Lists in Vim\nDESCRIPTION: Shows how to create lists, add items to them, and concatenate lists in Vim scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n:let alist = ['aap', 'mies', 'noot']\n:let alist = []\n:call add(alist, 'foo')\n:call add(alist, 'bar')\n:echo alist\n:echo alist + ['foo', 'bar']\n:let alist = ['one']\n:call extend(alist, ['two', 'three'])\n:echo alist\n```\n\n----------------------------------------\n\nTITLE: Executing External Commands in Vim\nDESCRIPTION: Commands for executing external shell commands and looking up keywords using the 'keywordprg' program.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:!{command}\texecute {command} with a shell\nK\t\t   K\t\tlookup keyword under the cursor with\n\t\t\t\t   'keywordprg' program (default: \"man\")\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer Lines in Lua\nDESCRIPTION: Sets (replaces) a line-range in the buffer. Allows for inserting, replacing, or deleting lines using start and end indices.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_57\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_set_lines({buffer}, {start}, {end}, {strict_indexing}, {replacement})\n```\n\n----------------------------------------\n\nTITLE: Handling LspNotify event in Lua\nDESCRIPTION: This snippet shows how to handle the LspNotify event, which is triggered after each successful notification sent to an LSP server. It extracts the client ID, method, and parameters from the event data.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('LspNotify', {\n  callback = function(args)\n    local bufnr = args.buf\n    local client_id = args.data.client_id\n    local method = args.data.method\n    local params = args.data.params\n\n    -- do something with the notification\n    if method == 'textDocument/...' then\n      update_buffer(bufnr)\n    end\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Funcref with Argument List Using call() in Vimscript\nDESCRIPTION: This snippet demonstrates how to invoke a Funcref with a list of arguments using the `call()` function. This is useful when the arguments are stored in a list variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n\t:let r = call(Fn, mylist)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Scopes in Vim\nDESCRIPTION: This snippet shows how to use different variable scopes in Vim, including buffer-local, window-local, tab-local, global, and script-local variables. It also demonstrates how to access and manipulate these variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_85\n\nLANGUAGE: vim\nCODE:\n```\n:for k in keys(s:)\n:    unlet s:[k]\n:endfor\n\n:if my_changedtick != b:changedtick\n:   let my_changedtick = b:changedtick\n:   call My_Update()\n:endif\n\nlet s:counter = 0\nfunction MyCounter()\n  let s:counter = s:counter + 1\n  echo s:counter\nendfunction\ncommand Tick call MyCounter()\n\nlet s:counter = 0\ncommand Tick let s:counter = s:counter + 1 | echo s:counter\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Options Globally or by Namespace - Lua\nDESCRIPTION: Configures global or namespace-specific diagnostic options in Neovim. The function allows users to enable or disable virtual text for diagnostics, with priority given to ephemeral configurations. It accepts an options table and a namespace identifier for granular control.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nvim.diagnostic.config({ virtual_text = true })\n```\n\n----------------------------------------\n\nTITLE: Defining an Autocommand Group in Vim\nDESCRIPTION: This snippet shows how to define an autocommand group to manage related commands. It ensures that existing autocommands are cleared before defining new ones.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:augroup updateDate\n:  autocmd!\n:  autocmd BufWritePre *  call DateInsert()\n:augroup END\n```\n\n----------------------------------------\n\nTITLE: Handling DiagnosticChanged Event in Neovim with Lua\nDESCRIPTION: This snippet shows how to use the DiagnosticChanged event in Neovim, utilizing Lua to handle changes in diagnostics. An autocmd is created to automatically trigger a callback function, which receives new diagnostic data when changes occur. This requires Neovim version supporting Lua and the event API. It processes input as diagnostic change data and outputs this information using `vim.print` for debugging or logging purposes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('DiagnosticChanged', {\n  callback = function(args)\n    local diagnostics = args.data.diagnostics\n    vim.print(diagnostics)\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Auto-Completion Implementation in Lua\nDESCRIPTION: Basic auto-completion setup using Neovim's Lua API, triggering completion on specific characters without external plugins\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n  local triggers = {'.'}\\n  vim.api.nvim_create_autocmd('InsertCharPre', {\\n    buffer = vim.api.nvim_get_current_buf(),\\n    callback = function()\\n      if vim.fn.pumvisible() == 1 or vim.fn.state('m') == 'm' then\\n        return\\n      end\\n      local char = vim.v.char\\n      if vim.list_contains(triggers, char) then\\n        local key = vim.keycode('<C-x><C-n>')\\n        vim.api.nvim_feedkeys(key, 'm', false)\\n      end\\n    end\\n  })\n```\n\n----------------------------------------\n\nTITLE: Enabling Filetype Detection and Plugins\nDESCRIPTION: Configuration to enable filetype detection, plugins, and indentation\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nfiletype plugin indent on\n```\n\n----------------------------------------\n\nTITLE: Attaching to Buffer Events - Lua\nDESCRIPTION: Attaches handlers for buffer update events, allowing for monitoring changes in buffer content. This function is particularly useful for implementing features that react to user input or other changes in buffers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_52\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_attach({buffer}, {send_buffer}, {opts})  -- Activates updates on the specified buffer with optional callbacks\n```\n\n----------------------------------------\n\nTITLE: Setting Extmark in Buffer in Lua\nDESCRIPTION: Creates or updates an extmark in the buffer. Allows for specifying various options like highlighting, virtual text, and signs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_64\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_set_extmark({buffer}, {ns_id}, {line}, {col}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Node for Range in LanguageTree (Lua)\nDESCRIPTION: Gets the smallest named node that contains a specified range. Takes a range table and optional settings as parameters. Returns a TSNode or nil.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:named_node_for_range({range}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Complex Normal Mode Command Execution\nDESCRIPTION: This snippet shows using the ':normal' command within ':execute' to perform a complex sequence of commands, inserting a line with the current date in files with a '.chg' extension.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd BufReadPost *.chg execute \"normal ONew entry:\\<Esc>\" | \\ 1read !date\n```\n\n----------------------------------------\n\nTITLE: Folding Expression Integration for Neovim LSP in Lua\nDESCRIPTION: Provides integration between the built-in client and a `foldexpr` function. Demonstrates setting Neovim's `foldmethod` to expr and the `foldexpr` to use the Lua interface with LSP.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_29\n\nLANGUAGE: Lua\nCODE:\n```\nfoldexpr({lnum})                                          *vim.lsp.foldexpr()*\n    To use, set 'foldmethod' to \"expr\" and set the value of 'foldexpr': >lua\n        vim.o.foldmethod = 'expr'\n        vim.o.foldexpr = 'v:lua.vim.lsp.foldexpr()'\n<\n```\n\n----------------------------------------\n\nTITLE: Basic File Editing Commands in Vim\nDESCRIPTION: Essential commands for opening and editing multiple files in Vim, including handling unsaved changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:edit foo.txt\n:write\n:edit! foo.txt\n:hide edit foo.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Buffer and Setting Line in Neovim using Vim Script\nDESCRIPTION: This snippet demonstrates how to create a new buffer with a specified name, load it, and set its content to a list of strings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nlet bufnr = bufadd('someName')\ncall bufload(bufnr)\ncall setbufline(bufnr, 1, ['some', 'text'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Signs in Neovim with Lua\nDESCRIPTION: This code snippet demonstrates how to configure diagnostic signs in Neovim using Lua. It shows how to map diagnostic severities to specific sign texts, effectively customizing the visual representation of errors, warnings, information, and hints in the sign column.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\n\"vim.diagnostic.config({\n  signs = { text = { [vim.diagnostic.severity.ERROR] = 'E', ... } }\n})\"\n```\n\n----------------------------------------\n\nTITLE: Document Highlights with LSP in Lua\nDESCRIPTION: Illustrates how to setup autocmd events in Neovim that trigger LSP document highlights upon certain actions like cursor hold or movement. Requires Neovim configured with LSP and appropriate highlight groups defined.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nautocmd CursorHold  <buffer> lua vim.lsp.buf.document_highlight()\nautocmd CursorHoldI <buffer> lua vim.lsp.buf.document_highlight()\nautocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()\n```\n\n----------------------------------------\n\nTITLE: Using LocalLeader for Buffer-Local Mappings in Vim\nDESCRIPTION: Defines a buffer-local mapping using <LocalLeader>, which uses the maplocalleader variable instead of mapleader. Useful for filetype-specific plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:map <buffer> <LocalLeader>A  oanother line<Esc>\n```\n\n----------------------------------------\n\nTITLE: Creating Floating Window with Scratch Buffer\nDESCRIPTION: Example showing how to create a floating window with a scratch buffer, set its content and styling options\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nlet buf = nvim_create_buf(v:false, v:true)\ncall nvim_buf_set_lines(buf, 0, -1, v:true, [\"test\", \"text\"])\nlet opts = {'relative': 'cursor', 'width': 10, 'height': 2, 'col': 0,\n    \\ 'row': 1, 'anchor': 'NW', 'style': 'minimal'}\nlet win = nvim_open_win(buf, 0, opts)\n\" optional: change highlight, otherwise Pmenu is used\ncall nvim_set_option_value('winhl', 'Normal:MyHighlight', {'win': win})\n```\n\n----------------------------------------\n\nTITLE: Expression Mapping for List Numbering in Neovim\nDESCRIPTION: This example demonstrates how to create expression mappings that insert a list number which increases with each use, and another mapping to reset the count. It utilizes global variables and functions to manage the list numbering logic.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n\tlet counter = 0\n\tinoremap <expr> <C-L> ListItem()\n\tinoremap <expr> <C-R> ListReset()\n\n\tfunc ListItem()\n\t  let g:counter += 1\n\t  return g:counter .. '. '\n\tendfunc\n\n\tfunc ListReset()\n\t  let g:counter = 0\n\t  return ''\n\tendfunc\n```\n\n----------------------------------------\n\nTITLE: String Escape Example in Vim\nDESCRIPTION: Demonstrates escaping special characters in strings using the escape() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_57\n\nLANGUAGE: vim\nCODE:\n```\necho escape('c:\\program files\\vim', ' \\')\n```\n\n----------------------------------------\n\nTITLE: Vim Function with Variable Arguments\nDESCRIPTION: Shows how to define a function that accepts a variable number of arguments and processes them.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n:function Show(start, ...)\n:  echohl Title\n:  echo \"start is \" .. a:start\n:  echohl None\n:  let index = 1\n:  while index <= a:0\n:    echo \"  Arg \" .. index .. \" is \" .. a:{index}\n:    let index = index + 1\n:  endwhile\n:  echo \"\"\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme in Vim\nDESCRIPTION: Command to change the color scheme to 'evening' theme\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:colorscheme evening\n```\n\n----------------------------------------\n\nTITLE: Setting Custom TreeSitter Query in Lua\nDESCRIPTION: Shows how to set a custom runtime query for a specific language. This example enables spellchecking of C identifiers by extending the default highlights query.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nvim.treesitter.query.set(\n  'c',\n  'highlights',\n  [[;inherits c\n  (identifier) @spell]])\n]])\n```\n\n----------------------------------------\n\nTITLE: Embedding Nvim using Vimscript and RPC\nDESCRIPTION: A Vimscript example demonstrating how to embed Nvim via jobstart() and communicate using RPC functions. It shows starting a Nvim instance, sending an evaluation request, and closing the connection.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nlet nvim = jobstart(['nvim', '--embed'], {'rpc': v:true})\necho rpcrequest(nvim, 'nvim_eval', '\"Hello \" . \"world!\"')\ncall jobstop(nvim)\n```\n\n----------------------------------------\n\nTITLE: Using has() for feature detection in Vim\nDESCRIPTION: Example of safely using the has() function to check for a feature before using functionality that requires it, avoiding syntax errors by placing if and endif on separate lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_118\n\nLANGUAGE: vim\nCODE:\n```\nif has('feature')\n  let x = this_breaks_without_the_feature()\nendif\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Events for Background Selection\nDESCRIPTION: These methods handle mouse move, press, and release events for the background selection widget. They manage hover states, selection, and deletion of backgrounds.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid BackgroundBox::Inner::mouseMoveEvent(QMouseEvent *e) {\n\tconst auto newOver = [&] {\n\t\tconst auto x = e->pos().x();\n\t\tconst auto y = e->pos().y();\n\t\tconst auto width = st::backgroundSize.width();\n\t\tconst auto height = st::backgroundSize.height();\n\t\tconst auto skip = st::backgroundPadding;\n\t\tconst auto row = int((y - skip) / (height + skip));\n\t\tconst auto column = int((x - skip) / (width + skip));\n\t\tconst auto result = row * kBackgroundsInRow + column;\n\t\tif (y - row * (height + skip) > skip + height) {\n\t\t\treturn Selection();\n\t\t} else if (x - column * (width + skip) > skip + width) {\n\t\t\treturn Selection();\n\t\t} else if (result >= _papers.size()) {\n\t\t\treturn Selection();\n\t\t}\n\t\tauto &data = _papers[result].data;\n\t\tconst auto deleteLeft = (column + 1) * (width + skip)\n\t\t\t- st::stickerPanDeleteIconBg.width();\n\t\tconst auto deleteBottom = row * (height + skip) + skip\n\t\t\t+ st::stickerPanDeleteIconBg.height();\n\t\tconst auto inDelete = (x >= deleteLeft)\n\t\t\t&& (y < deleteBottom)\n\t\t\t&& Data::IsCloudWallPaper(data)\n\t\t\t&& !Data::IsDefaultWallPaper(data)\n\t\t\t&& !Data::IsLegacy2DefaultWallPaper(data)\n\t\t\t&& !Data::IsLegacy3DefaultWallPaper(data)\n\t\t\t&& (_currentId != data.id());\n\t\treturn (result >= _papers.size())\n\t\t\t? Selection()\n\t\t\t: inDelete\n\t\t\t? Selection(DeleteSelected{ result })\n\t\t\t: Selection(Selected{ result });\n\t}();\n\tif (_over != newOver) {\n\t\trepaintPaper(getSelectionIndex(_over));\n\t\t_over = newOver;\n\t\trepaintPaper(getSelectionIndex(_over));\n\t\tsetCursor((!v::is_null(_over) || !v::is_null(_overDown))\n\t\t\t? style::cur_pointer\n\t\t\t: style::cur_default);\n\t}\n}\n\nvoid BackgroundBox::Inner::mousePressEvent(QMouseEvent *e) {\n\t_overDown = _over;\n}\n\nvoid BackgroundBox::Inner::mouseReleaseEvent(QMouseEvent *e) {\n\tif (base::take(_overDown) == _over && !v::is_null(_over)) {\n\t\tconst auto index = getSelectionIndex(_over);\n\t\tif (index >= 0 && index < _papers.size()) {\n\t\t\tif (std::get_if<DeleteSelected>(&_over)) {\n\t\t\t\t_backgroundRemove.fire_copy(_papers[index].data);\n\t\t\t} else if (std::get_if<Selected>(&_over)) {\n\t\t\t\tauto &paper = _papers[index];\n\t\t\t\tif (!paper.dataMedia) {\n\t\t\t\t\tif (const auto document = paper.data.document()) {\n\t\t\t\t\t\t// Keep it alive while it is on the screen.\n\t\t\t\t\t\tpaper.dataMedia = document->createMediaView();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_backgroundChosen.fire_copy(paper.data);\n\t\t\t}\n\t\t}\n\t} else if (v::is_null(_over)) {\n\t\tsetCursor(style::cur_default);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Diagnostics to Quickfix Items in Vim\nDESCRIPTION: The `vim.diagnostic.toqflist` function converts a list of diagnostics into quickfix list items. It requires the diagnostics to be in a `vim.Diagnostic[]` format and returns a table of quickfix list items which can be used with `setqflist()` or `setloclist()`.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\ntoqflist({diagnostics})                            *vim.diagnostic.toqflist()*\n    Convert a list of diagnostics to a list of quickfix items that can be\n    passed to |setqflist()| or |setloclist()|.\n\n    Parameters: ~\n      • {diagnostics}  (`vim.Diagnostic[]`) See |vim.Diagnostic|.\n\n    Return: ~\n        (`table[]`) Quickfix list items |setqflist-what|\n```\n\n----------------------------------------\n\nTITLE: Parsing Diagnostics from a String - Lua\nDESCRIPTION: Processes a string containing diagnostic information, extracting severity, line number, column, and message into a structured format. This function is particularly useful for integrating diagnostics from external tools or linters into Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nlocal s = \"WARNING filename:27:3: Variable 'foo' does not exist\"\nlocal pattern = \"^(%w+) %w+:(%d+):(%d+): (.+)$\"\nlocal groups = { \"severity\", \"lnum\", \"col\", \"message\" }\nvim.diagnostic.match(s, pattern, groups, { WARNING = vim.diagnostic.WARN })\n```\n\n----------------------------------------\n\nTITLE: Mapping Function Key to Insert Date in Insert Mode\nDESCRIPTION: This snippet shows how to map the F2 key to insert the current date below the cursor in Insert mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\n:imap <F2> <CR>Date: <Esc>:read !date<CR>kJ\n```\n\n----------------------------------------\n\nTITLE: Recursive Mapping for Version Number Update\nDESCRIPTION: This recursive mapping updates version numbers in multiple files, demonstrating how to use mappings to repeat actions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n:map ,, :s/5.1/5.2/<CR>:wnext<CR>,,\n```\n\n----------------------------------------\n\nTITLE: Appending Text to Buffer in Vimscript\nDESCRIPTION: The append() function adds text lines to the current buffer below a specified line number. It can append single lines or multiple lines from a List.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_5\n\nLANGUAGE: vimscript\nCODE:\n```\nlet failed = append(line('$'), \"# THE END\")\n```\n\nLANGUAGE: vimscript\nCODE:\n```\nlet failed = append(0, [\"Chapter 1\", \"the beginning\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Decoration Provider in Neovim Lua API\nDESCRIPTION: Sets or changes the decoration provider for a namespace. This function allows Lua callbacks to be triggered during redraw, primarily for setting extmarks. Available since Neovim 0.5.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_68\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_decoration_provider({ns_id}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Catching Specific Exceptions in Vim Script\nDESCRIPTION: Demonstrates how to catch specific types of exceptions using pattern matching in catch statements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_106\n\nLANGUAGE: vim\nCODE:\n```\ntry | sleep 100 | catch /^Vim:Interrupt$/ | endtry\ntry | edit | catch /^Vim(edit):E\\d\\+/ | echo \"error\" | endtry\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Diagnostics - Lua\nDESCRIPTION: Toggles the diagnostic display state in Neovim. It allows users to enable or disable diagnostics globally or for specific namespaces and buffers, providing versatility in controlling the visibility of diagnostic information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nvim.diagnostic.enable(not vim.diagnostic.is_enabled())\n```\n\n----------------------------------------\n\nTITLE: Text Substitution with Range and Flags\nDESCRIPTION: Detailed syntax for performing text substitution with optional range, pattern, replacement, and flags in Neovim's command mode\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]\n```\n\n----------------------------------------\n\nTITLE: Using substitute() in Vim Script\nDESCRIPTION: Shows various ways to use the substitute() function for string replacement, including using expressions and function references.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_266\n\nLANGUAGE: vim\nCODE:\n```\nlet &path = substitute(&path, \",\\\\=[^,]*$\", \"\", \"\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho substitute(\"testing\", \".*\", \"\\\\U\\\\0\", \"\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho substitute(s, '%\\(\\x\\x\\)',\n   \\ '\\=nr2char(\"0x\" .. submatch(1))', 'g')\n```\n\nLANGUAGE: vim\nCODE:\n```\necho substitute(s, '%\\(\\x\\x\\)', SubNr, 'g')\n```\n\nLANGUAGE: vim\nCODE:\n```\necho substitute(s, '%\\(\\x\\x\\)', {m -> '0x' .. m[1]}, 'g')\n```\n\n----------------------------------------\n\nTITLE: Setting Client Information - Lua\nDESCRIPTION: This function identifies the client and sets optional attributes on the channel, including client name, version, and methods. It's recommended for clients to call this after connection to help with debugging.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_client_info({name}, {version}, {type}, {methods}, {attributes})\n```\n\n----------------------------------------\n\nTITLE: Defining a Vim Function with Range\nDESCRIPTION: Demonstrates how to define a function that handles a line range, counting words within the specified range.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n:function Count_words() range\n:  let lnum = a:firstline\n:  let n = 0\n:  while lnum <= a:lastline\n:    let n = n + len(split(getline(lnum)))\n:    let lnum = lnum + 1\n:  endwhile\n:  echo \"found \" .. n .. \" words\"\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Getting Lines from Current Buffer in Vim\nDESCRIPTION: The getline() function retrieves lines from the current buffer. It can return a single line or a range of lines. Line numbers can be specified as integers or special strings like '.' for the current line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_96\n\nLANGUAGE: vim\nCODE:\n```\ngetline(1)\ngetline(\".\")\nlet start = line('.')\nlet end = search(\"^$\") - 1\nlet lines = getline(start, end)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inlay Hints in Neovim LSP (Lua)\nDESCRIPTION: Gets a list of inlay hints, optionally filtered by buffer or range. Returns a table of hint objects containing buffer number, client ID, and inlay hint information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_43\n\nLANGUAGE: lua\nCODE:\n```\nlocal hint = vim.lsp.inlay_hint.get({ bufnr = 0 })[1] -- 0 for current buffer\n\nlocal client = vim.lsp.get_client_by_id(hint.client_id)\nlocal resp = client:request_sync('inlayHint/resolve', hint.inlay_hint, 100, 0)\nlocal resolved_hint = assert(resp and resp.result, resp.err)\nvim.lsp.util.apply_text_edits(resolved_hint.textEdits, 0, client.encoding)\n\nlocation = resolved_hint.label[1].location\nclient:request('textDocument/hover', {\n  textDocument = { uri = location.uri },\n  position = location.range.start,\n})\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Configurations with Diagnostics in Neovim\nDESCRIPTION: The 'vim.diagnostic.config()' function is utilized to set up diagnostic configurations, including a 'jump' table for default behaviors in diagnostics jumping. This setup enhances the functionality of 'vim.diagnostic.jump()'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.diagnostic.config({ jump = { ... } })\n```\n\n----------------------------------------\n\nTITLE: Function Usage in Vim Script\nDESCRIPTION: Demonstrates how to call built-in Vim functions and use their return values. Shows practical examples with search(), getline(), and substitute() functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_12\n\nLANGUAGE: viml\nCODE:\n```\n:call search(\"Date: \", \"W\")\n:let line = getline(\".\")\n:let repl = substitute(line, '\\a', \"*\", \"g\")\n:call setline(\".\", repl)\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim on Ubuntu - PPA Setup\nDESCRIPTION: Complete set of commands to install Neovim from PPA including prerequisites and Python support.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:neovim-ppa/stable\nsudo apt-get update\nsudo apt-get install neovim\nsudo apt-get install python-dev python-pip python3-dev python3-pip\n```\n\n----------------------------------------\n\nTITLE: Jumping Back with Backtick Command\nDESCRIPTION: Command to return to the previous cursor position using the backtick (`) command. This allows quick navigation between two points in a file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n``\n```\n\n----------------------------------------\n\nTITLE: Basic Substitution Pattern Replacement\nDESCRIPTION: Demonstrates various text substitution techniques using special characters and pattern matching in Vim/Neovim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:s/a\\|b/xxx\\0xxx/g\n```\n\nLANGUAGE: vim\nCODE:\n```\n:s/\\([abc]\\)\\([efg]\\)/\\2\\1/g\n```\n\nLANGUAGE: vim\nCODE:\n```\n:s/\\w\\+/\\u\\0/g\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Operator in Vim\nDESCRIPTION: Shows how to define a mapping for a custom operator in Vim that utilizes the 'operatorfunc' option to define functionality based on motion commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\nnnoremap <expr> <F4> CountSpaces()\n```\n\nLANGUAGE: vim\nCODE:\n```\nxnoremap <expr> <F4> CountSpaces()\n```\n\nLANGUAGE: vim\nCODE:\n```\nfunction CountSpaces(context = {}, type = '') abort\n```\n\n----------------------------------------\n\nTITLE: Unique Mapping Example in Neovim\nDESCRIPTION: This example demonstrates how to define a new mapping that will fail if it already exists. It checks for existing mappings at both global and buffer levels, ensuring uniqueness.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n\t:map <unique> ,w  /[#&!]<CR>\n\t:map ,w  /[#&!]<CR>\n\t:map <buffer> <unique> ,w  /[.,;]<CR>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Treesitter Query Captures in Lua\nDESCRIPTION: Shows how to iterate over captures from a Treesitter query in Lua. The example demonstrates accessing capture names, node types, and ranges for each capture.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nfor id, node, metadata, match in query:iter_captures(tree:root(), bufnr, first, last) do\n  local name = query.captures[id] -- name of the capture in the query\n  -- typically useful info about the node:\n  local type = node:type() -- type of the captured node\n  local row1, col1, row2, col2 = node:range() -- range of the capture\n  -- ... use the info here ...\nend\n```\n\n----------------------------------------\n\nTITLE: Text Objects Selection in Neovim\nDESCRIPTION: Provides a comprehensive list of text objects that can be used for selecting and manipulating text in different contexts, including quotes, brackets, words, and paragraphs\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\na\" - select double quoted string\naw - select a word with white space\nip - select inner paragraph\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Find Function - Vim\nDESCRIPTION: Implements a custom case-insensitive find function using getchar() to get user input and search through the current line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_85\n\nLANGUAGE: vim\nCODE:\n```\nnmap f :call FindChar()<CR>\nfunction FindChar()\n  let c = nr2char(getchar())\n  while col('.') < col('$') - 1\n    normal l\n    if getline('.')[col('.') - 1] ==? c\n      break\n    endif\n  endwhile\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Installing Python Provider for Neovim\nDESCRIPTION: Installs the pynvim Python module which is required for Python integration in Neovim. The --user flag installs it for the current user only, and --upgrade ensures the latest version is installed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install --user --upgrade pynvim\n```\n\n----------------------------------------\n\nTITLE: LSP Feature Configuration with LspAttach\nDESCRIPTION: Example showing how to configure LSP features like auto-completion and auto-formatting using LspAttach autocmd.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('LspAttach', {\n  group = vim.api.nvim_create_augroup('my.lsp', {}),\n  callback = function(args)\n    local client = assert(vim.lsp.get_client_by_id(args.data.client_id))\n    if client:supports_method('textDocument/implementation') then\n      -- Create a keymap for vim.lsp.buf.implementation ...\n    end\n\n    -- Enable auto-completion. Note: Use CTRL-Y to select an item. |complete_CTRL-Y|\n    if client:supports_method('textDocument/completion') then\n      vim.lsp.completion.enable(true, client.id, args.buf, {autotrigger = true})\n    end\n\n    -- Auto-format (\"lint\") on save.\n    -- Usually not needed if server supports \"textDocument/willSaveWaitUntil\".\n    if not client:supports_method('textDocument/willSaveWaitUntil')\n        and client:supports_method('textDocument/formatting') then\n      vim.api.nvim_create_autocmd('BufWritePre', {\n        group = vim.api.nvim_create_augroup('my.lsp', {clear=false}),\n        buffer = args.buf,\n        callback = function()\n          vim.lsp.buf.format({ bufnr = args.buf, id = client.id, timeout_ms = 1000 })\n        end,\n      })\n    end\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Catching Exceptions with Pattern Matching in Vim Script\nDESCRIPTION: Example showing how to use try-catch blocks with pattern matching to handle different types of exceptions. The function catches numeric exceptions with a specific pattern and other strings with a more general pattern.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_123\n\nLANGUAGE: vim\nCODE:\n```\n:function! Foo(value)\n:  try\n:    throw a:value\n:  catch /^\\d\\+$/\n:    echo \"Number thrown\"\n:  catch /.*/\n:    echo \"String thrown\"\n:  endtry\n:endfunction\n:\n:call Foo(0x1267)\n:call Foo('string')\n```\n\n----------------------------------------\n\nTITLE: Command Mapping Example in Neovim\nDESCRIPTION: This example demonstrates how to use `<Cmd>` to execute a command directly without changing modes. It is more flexible than using `:<C-U>` or `<C-O>:` because the commands are executed in the current mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n\tnoremap x <Cmd>echo mode(1)<CR>\n\tnnoremap <F3> aText <Cmd>echo mode(1)<CR> Added<Esc>\n```\n\n----------------------------------------\n\nTITLE: LSP Client On List Handler Example - Lua\nDESCRIPTION: Example showing how to customize the LSP client list handler to populate the quickfix list and jump to the first result. Used for operations like finding definitions and references.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nlocal function on_list(options)\n    vim.fn.setqflist({}, ' ', options)\n    vim.cmd.cfirst()\nend\n\nvim.lsp.buf.definition({ on_list = on_list })\nvim.lsp.buf.references(nil, { on_list = on_list })\n```\n\n----------------------------------------\n\nTITLE: Looping Over Dictionary Key-Value Pairs in Vim\nDESCRIPTION: Shows how to iterate over both keys and values using the items() function with destructuring assignment.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_51\n\nLANGUAGE: vim\nCODE:\n```\n:for [key, value] in items(mydict)\n:   echo key .. ': ' .. value\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Getting Option Info for All Options - Lua\nDESCRIPTION: Fetches detailed metadata for all available options in Neovim. Returns a dictionary with full option names as keys and their respective metadata. Useful for understanding what options are available and their properties.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_48\n\nLANGUAGE: lua\nCODE:\n```\nnvim_get_all_options_info()  -- Returns a dictionary of all options\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Rustfmt on Save\nDESCRIPTION: Enables automatic formatting of Rust code when saving a buffer by running the :RustFmt command automatically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustfmt_autosave = 0\n```\n\n----------------------------------------\n\nTITLE: Cursor Positioning - Lua\nDESCRIPTION: The cursor function positions the cursor in the editor based on line number and column, allowing for precise control over text navigation. It accepts various argument formats to accommodate different use cases.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_43\n\nLANGUAGE: lua\nCODE:\n```\ncursor({lnum}, {col} [, {off}])                                       *cursor()*\ncursor({list})\n\t\tPositions the cursor at the column (byte count) {col} in the\n\t\tline {lnum}.  The first column is one.\n\n\t\tWhen there is one argument {list} this is used as a |List|\n\t\twith two, three or four item:\n\t\t  [{lnum}, {col}]\n\t\t  [{lnum}, {col}, {off}]\n\t\t  [{lnum}, {col}, {off}, {curswant}]\n\t\tThis is like the return value of |getpos()| or |getcurpos()|,\n\t\tbut without the first item.\n\n\t\tTo position the cursor using {col} as the character count, use\n\t\t|setcursorcharpos()|.\n\n\t\tDoes not change the jumplist.\n\t\t{lnum} is used like with |getline()|, except that if {lnum} is\n\t\tzero, the cursor will stay in the current line.\n\t\tIf {lnum} is greater than the number of lines in the buffer,\n\t\tthe cursor will be positioned at the last line in the buffer.\n\t\tIf {col} is greater than the number of bytes in the line,\n\t\tthe cursor will be positioned at the last character in the\n\t\tline.\n\t\tIf {col} is zero, the cursor will stay in the current column.\n\t\tIf {curswant} is given it is used to set the preferred column\n\t\tfor vertical movement.  Otherwise {col} is used.\n\n\t\tWhen 'virtualedit' is used {off} specifies the offset in\n\t\tscreen columns from the start of the character.  E.g., a\n\t\tposition within a <Tab> or after the last character.\n\t\tReturns 0 when the position could be set, -1 otherwise.\n\n\t\tParameters: ~\n\t\t  • {list} (`integer[]`)\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color in Vim\nDESCRIPTION: Commands to set light or dark background for proper color contrast\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:set background=dark\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set background=light\n```\n\n----------------------------------------\n\nTITLE: Creating User Configuration for Neovim in Vim\nDESCRIPTION: This snippet demonstrates how to create and write to the init.vim file in Neovim using Vim commands. The file serves as the user configuration file where settings and script commands can be added.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:exe 'edit '.stdpath('config').'/init.vim'\n:write ++p\n```\n\n----------------------------------------\n\nTITLE: Shortened Mapping Example Using Remapping\nDESCRIPTION: This set of mappings demonstrates how to use remapping to shorten and simplify key mappings across different modes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\n:map <F2> G<F3>\n:imap <F2> <Esc><F3>\n:map <F3>  oDate: <Esc>:read !date<CR>kJ\n```\n\n----------------------------------------\n\nTITLE: Setting Filetype with Autocommand in Vim\nDESCRIPTION: This snippet explains how to automatically set the filetype for certain files when opened in Vim, using an autocommand with the appropriate file pattern.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd BufReadPost *.gsm  set filetype=asm\n```\n\n----------------------------------------\n\nTITLE: Version Check in Vim Script\nDESCRIPTION: Example of checking Nvim version using the has() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:if has(\"nvim-0.2.1\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Control Callbacks in Vim\nDESCRIPTION: Example showing how to set up job control callbacks for handling stdout, stderr, and exit events from spawned processes. Demonstrates spawning two bash shells and handling their output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nfunction! s:OnEvent(job_id, data, event) dict\n  if a:event == 'stdout'\n    let str = self.shell.' stdout: '.join(a:data)\n  elseif a:event == 'stderr'\n    let str = self.shell.' stderr: '.join(a:data)\n  else\n    let str = self.shell.' exited'\n  endif\n\n  call append(line('$'), str)\nendfunction\nlet s:callbacks = {\n\\ 'on_stdout': function('s:OnEvent'),\n\\ 'on_stderr': function('s:OnEvent'),\n\\ 'on_exit': function('s:OnEvent')\n\\ }\nlet job1 = jobstart(['bash'], extend({'shell': 'shell 1'}, s:callbacks))\nlet job2 = jobstart(['bash', '-c', 'for i in {1..10}; do echo hello $i!; sleep 1; done'], extend({'shell': 'shell 2'}, s:callbacks))\n```\n\n----------------------------------------\n\nTITLE: Setting Python 3 Host Path in Neovim\nDESCRIPTION: Sets the path to the Python 3 interpreter for Neovim's Python provider. Setting this makes startup faster and is useful when working with virtualenvs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nlet g:python3_host_prog = '/path/to/python3'\n```\n\n----------------------------------------\n\nTITLE: Looping Over Sorted Dictionary Keys in Vim\nDESCRIPTION: Shows how to loop over dictionary keys in sorted order by combining sort() and keys() functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_49\n\nLANGUAGE: vim\nCODE:\n```\n:for key in sort(keys(mydict))\n```\n\n----------------------------------------\n\nTITLE: Reversing Line Order in Vim\nDESCRIPTION: This snippet details how to reverse the order of lines in a file using the ':global' command in conjunction with ':move', allowing all lines to be moved to the top sequence.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:global/^/move 0\n```\n\nLANGUAGE: vim\nCODE:\n```\n:g/^/m 0\n```\n\nLANGUAGE: vim\nCODE:\n```\n:'t+1,.g/^/m 't\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Line Breaks in Vim - Vim\nDESCRIPTION: Configures Vim to automatically insert line breaks based on the specified 'textwidth'. This is particularly useful for maintaining readable text widths during editing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set textwidth=30\n```\n\n----------------------------------------\n\nTITLE: Creating a C Filetype Plugin\nDESCRIPTION: Example Vim script for a C language filetype plugin that sets softtabstop to 4 and creates a local mapping for inserting comments. Includes an undo_ftplugin variable to clean up when changing filetypes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\nsetlocal softtabstop=4\nnoremap <buffer> <LocalLeader>c o/**************<CR><CR>/<Esc>\nlet b:undo_ftplugin = \"setl softtabstop< | unmap <buffer> <LocalLeader>c\"\n```\n\n----------------------------------------\n\nTITLE: Complete Typing Correction Vim Plugin Example\nDESCRIPTION: A full example of a Vim plugin that corrects typing mistakes, showing script initialization, mappings, functions, and proper cleanup.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_39\n\nLANGUAGE: vim\nCODE:\n```\n\" Vim global plugin for correcting typing mistakes\n\" Last Change:\t2000 Oct 15\n\" Maintainer:\tBram Moolenaar <Bram@vim.org>\n\" License:\tThis file is placed in the public domain.\n\nif exists(\"g:loaded_typecorr\")\n  finish\nendif\nlet g:loaded_typecorr = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\niabbrev teh the\niabbrev otehr other\niabbrev wnat want\niabbrev synchronisation\n\t\\ synchronization\nlet s:count = 4\n\nif !hasmapto('<Plug>TypecorrAdd;')\n  map <unique> <Leader>a  <Plug>TypecorrAdd;\nendif\nnoremap <unique> <script> <Plug>TypecorrAdd;  <SID>Add\n\nnoremenu <script> Plugin.Add\\ Correction      <SID>Add\n\nnoremap <SID>Add  :call <SID>Add(expand(\"<cword>\"), 1)<CR>\n\nfunction s:Add(from, correct)\n  let to = input(\"type the correction for \" .. a:from .. \": \")\n  exe \":iabbrev \" .. a:from .. \" \" .. to\n  if a:correct | exe \"normal viws\\<C-R>\\\" \\b\\e\" | endif\n  let s:count = s:count + 1\n  echo s:count .. \" corrections now\"\nendfunction\n\nif !exists(\":Correct\")\n  command -nargs=1  Correct  :call s:Add(<q-args>, 0)\nendif\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n```\n\n----------------------------------------\n\nTITLE: Jumping Through Snippets in Neovim Using Lua\nDESCRIPTION: This snippet configures the <S-Tab> key mapping in Insert and Select mode to jump backwards through snippets, enhancing the snippet navigation experience for users. The relevant functionality is provided by the 'vim.snippet.jump' function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nvim.snippet.jump({ direction = -1 })\n```\n\n----------------------------------------\n\nTITLE: Conditional Tab Completion in Vim - Vimscript\nDESCRIPTION: This Vimscript function, 'CleverTab', conditionally inserts a tab character or starts a completion operation based on the content before the cursor. The function uses regular expressions to determine if the line is only whitespace. The function returns different sequences based on this check. The keymap binds this function to the Tab key in insert mode, requiring no additional input while modifying Tab key behavior in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_3\n\nLANGUAGE: Vimscript\nCODE:\n```\nfunction! CleverTab()\n   if strpart( getline('.'), 0, col('.')-1 ) =~ '^\\s*$'\n      return \"\\<Tab>\"\n   else\n      return \"\\<C-N>\"\n   endif\nendfunction\ninoremap <Tab> <C-R>=CleverTab()<CR>\n```\n\n----------------------------------------\n\nTITLE: Operator-pending Mapping Example in Neovim\nDESCRIPTION: This example demonstrates how to create an operator-pending mapping (omap) to define a movement command that can be used with any operator. It shows how to extend existing operators with custom movement logic.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\t:omap { w\n```\n\n----------------------------------------\n\nTITLE: Custom Paste Handler Definition in Neovim - Lua\nDESCRIPTION: This snippet redefines the 'vim.paste()' function to implement a custom paste handler that utilizes 'vim.api.nvim_put' to insert lines at the current cursor position. It accepts 'lines' and 'phase' parameters to manage the paste operation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nvim.paste = (function(lines, phase)\n  vim.api.nvim_put(lines, 'c', true, true)\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining a Quickfix List with LSP in Lua\nDESCRIPTION: Demonstrates how to use Neovim's LSP (Language Server Protocol) to define quickfix lists for navigating code definitions and references. This snippet requires Neovim with LSP support configured and assumes the availability of language server connections.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.buf.definition({ loclist = true })\nvim.lsp.buf.references(nil, { loclist = false })\n```\n\n----------------------------------------\n\nTITLE: LSP Client Capabilities Generator in Lua\nDESCRIPTION: Function to create a ClientCapabilities object describing LSP client capabilities.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_65\n\nLANGUAGE: lua\nCODE:\n```\nmake_client_capabilities()\n```\n\n----------------------------------------\n\nTITLE: Folding Commands in Vim\nDESCRIPTION: Commands for creating and managing code folding in Vim, including setting fold methods, creating and removing folds, and opening/closing folds.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\nset foldmethod=manual     # manual folding\nset foldmethod=indent     # folding by indent\nset foldmethod=expr       # folding by 'foldexpr'\nset foldmethod=syntax     # folding by syntax regions\nset foldmethod=marker     # folding by 'foldmarker'\nzf{motion}                # operator: Define a fold manually\n:{range}fold              # define a fold for {range} lines\nzd                        # delete one fold under the cursor\nzD                        # delete all folds under the cursor\nzo                        # open one fold under the cursor\nzO                        # open all folds under the cursor\nzc                        # close one fold under the cursor\nzC                        # close all folds under the cursor\nzm                        # fold more: decrease 'foldlevel'\nzM                        # close all folds: make 'foldlevel' zero\nzr                        # reduce folding: increase 'foldlevel'\nzR                        # open all folds: make 'foldlevel' max.\nzn                        # fold none: reset 'foldenable'\nzN                        # fold normal set 'foldenable'\nzi                        # invert 'foldenable'\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Filetype Indentation in Vim\nDESCRIPTION: Activates Vim's filetype detection system to automatically apply the appropriate indentation settings for different file types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:filetype indent on\n```\n\n----------------------------------------\n\nTITLE: Converting Existing Tabs to Spaces\nDESCRIPTION: A command sequence to convert all indents from tabs to spaces while preserving existing formatting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:set expandtab\n:%retab\n```\n\n----------------------------------------\n\nTITLE: Getting Detailed Option Info - Lua\nDESCRIPTION: Retrieves detailed information about a specific option in Neovim. The function can provide contextual metadata based on the option's current settings in buffers or windows. It allows for various scopes to be specified for retrieving local or global information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_49\n\nLANGUAGE: lua\nCODE:\n```\nnvim_get_option_info2({name}, {opts})  -- Get option info based on specified parameters\n```\n\n----------------------------------------\n\nTITLE: Adding Vim Configuration Contents to Neovim\nDESCRIPTION: This snippet is used to maintain compatibility with existing Vim configurations by setting the runtime path and including the existing .vimrc contents into Neovim's configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nset runtimepath^=~/.vim runtimepath+=~/.vim/after\nlet &packpath = &runtimepath\nsource ~/.vimrc\n```\n\n----------------------------------------\n\nTITLE: Starting a Job with Output Handling in Vim\nDESCRIPTION: Demonstrates how to use jobstart() to spawn a process and capture its output by using the on_stdout callback to append output to the current buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_146\n\nLANGUAGE: vim\nCODE:\n```\ncall jobstart(['nvim', '-h'], {'on_stdout':{j,d,e->append(line('.'),d)}})\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Arguments in Vim\nDESCRIPTION: This snippet explains how to define a user command that takes a variable number of arguments, indicated by the -nargs option. It demonstrates the command 'Say' which echoes any provided arguments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:command -nargs=+ Say :echo \"<args>\"\n```\n\n----------------------------------------\n\nTITLE: Normal-mode operator with lambda function\nDESCRIPTION: This snippet demonstrates how to create a normal-mode operator in Vim using a lambda function.  It adds quotes around text in the current line. The `opfunc` option is set to a lambda that splits the current line, inserts quotes, joins it back, and sets it as the current line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_24\n\nLANGUAGE: Vim Script\nCODE:\n```\nnnoremap <F4> <Cmd>let &opfunc='{t ->\n\t\t\t\t\\ getline(\".\")\n\t\t\t\t\\ ->split(\"\\\\zs\")\n\t\t\t\t\\ ->insert(\"\\\"\", col(\"'']\"))\n\t\t\t\t\\ ->insert(\"\\\"\", col(\"''[\") - 1)\n\t\t\t\t\\ ->join(\"\")\n\t\t\t\t\\ ->setline(\".\")}'<CR>g@\n```\n\n----------------------------------------\n\nTITLE: Custom Diagnostics Handler Configuration\nDESCRIPTION: Shows how to set a custom handler for publishing diagnostics globally\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.handlers['textDocument/publishDiagnostics'] = my_custom_diagnostics_handler\n```\n\n----------------------------------------\n\nTITLE: Buffer Highlight Management - Lua Example\nDESCRIPTION: Demonstrates how to create, modify and manage buffer highlights using extmarks in Lua. Shows creating highlights, changing highlight groups and positions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- create the highlight through an extmark\nextid = vim.api.nvim_buf_set_extmark(buf, ns_id, line, col_start, {end_col = col_end, hl_group = hl_group})\n\n-- example: modify the extmark's highlight group\nvim.api.nvim_buf_set_extmark(buf, ns_id, line, col_start, {end_col = col_end, hl_group = NEW_HL_GROUP, id = extid})\n\n-- example: change the highlight's position\nvim.api.nvim_buf_set_extmark(buf, ns_id, NEW_LINE, col_start, {end_col = col_end, hl_group = NEW_HL_GROUP, id = extid})\n```\n\n----------------------------------------\n\nTITLE: Temporarily Setting Current Buffer in Lua\nDESCRIPTION: Example of using nvim_buf_call to temporarily switch to a buffer in order to execute functions that require the buffer to be current. This is particularly useful for Vimscript functions like jobstart with 'term' option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_53\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_buf_call(0, function() -- some operation end)\n```\n\n----------------------------------------\n\nTITLE: Trailing Whitespace Trim Command with Preview - Lua\nDESCRIPTION: Implementation of a command that removes trailing whitespace with incremental preview support. Includes preview callback function that highlights trailing whitespace and main command function\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nlocal function trim_space_preview(opts, preview_ns, preview_buf)\n  vim.cmd('hi clear Whitespace')\n  local line1 = opts.line1\n  local line2 = opts.line2\n  local buf = vim.api.nvim_get_current_buf()\n  local lines = vim.api.nvim_buf_get_lines(buf, line1 - 1, line2, false)\n  local preview_buf_line = 0\n\n  for i, line in ipairs(lines) do\n    local start_idx, end_idx = string.find(line, '%s+$')\n\n    if start_idx then\n      vim.hl.range(\n        buf,\n        preview_ns,\n        'Substitute',\n        {line1 + i - 2, start_idx - 1},\n        {line1 + i - 2, end_idx},\n      )\n\n      if preview_buf then\n        local prefix = string.format('|%d| ', line1 + i - 1)\n\n        vim.api.nvim_buf_set_lines(\n          preview_buf,\n          preview_buf_line,\n          preview_buf_line,\n          false,\n          { prefix .. line }\n        )\n        vim.hl.range(\n          preview_buf,\n          preview_ns,\n          'Substitute',\n          {preview_buf_line, #prefix + start_idx - 1},\n          {preview_buf_line, #prefix + end_idx},\n        )\n        preview_buf_line = preview_buf_line + 1\n      end\n    end\n  end\n\n  return 2\nend\n\nlocal function trim_space(opts)\n  local line1 = opts.line1\n  local line2 = opts.line2\n  local buf = vim.api.nvim_get_current_buf()\n  local lines = vim.api.nvim_buf_get_lines(buf, line1 - 1, line2, false)\n\n  local new_lines = {}\n  for i, line in ipairs(lines) do\n    new_lines[i] = string.gsub(line, '%s+$', '')\n  end\n  vim.api.nvim_buf_set_lines(buf, line1 - 1, line2, false, new_lines)\nend\n\nvim.api.nvim_create_user_command(\n  'TrimTrailingWhitespace',\n  trim_space,\n  { nargs = '?', range = '%', addr = 'lines', preview = trim_space_preview }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Command History in Neovim\nDESCRIPTION: This snippet shows how to use the :history command to list the contents of various command histories in Neovim. It demonstrates different history types and how to specify ranges of entries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:his[tory]\n:his[tory] [{name}] [{first}][, [{last}]]\n\nExamples:\n:history / 6,12\n:history all -2\n:history all -2,\n```\n\n----------------------------------------\n\nTITLE: Setting C-style Indentation in Vim\nDESCRIPTION: Configures Vim for automatic C-style code indentation with a specified number of spaces for each level.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:set cindent shiftwidth=4\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostics in Vim\nDESCRIPTION: The `vim.diagnostic.show` function displays diagnostics for a specified namespace and buffer. It supports optional display options and can handle lists of diagnostics through the `opts` parameter. The function provides flexibility by allowing diagnostics visualization across all buffers or specific ones if parameters are omitted.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nshow({namespace}, {bufnr}, {diagnostics}, {opts})\n    Display diagnostics for the given namespace and buffer.\n\n    Parameters: ~\n      • {namespace}    (`integer?`) Diagnostic namespace. When omitted, show\n                       diagnostics from all namespaces.\n      • {bufnr}        (`integer?`) Buffer number, or 0 for current buffer.\n                       When omitted, show diagnostics in all buffers.\n      • {diagnostics}  (`vim.Diagnostic[]?`) The diagnostics to display. When\n                       omitted, use the saved diagnostics for the given\n                       namespace and buffer. This can be used to display a\n                       list of diagnostics without saving them or to display\n                       only a subset of diagnostics. May not be used when\n                       {namespace} or {bufnr} is nil. See |vim.Diagnostic|.\n      • {opts}         (`vim.diagnostic.Opts?`) Display options. See\n                       |vim.diagnostic.Opts|.\n```\n\n----------------------------------------\n\nTITLE: Adding Diagnostics to Quickfix List in Vim\nDESCRIPTION: The `vim.diagnostic.setqflist` function adds all diagnostics to the quickfix list. It requires a configuration table `opts` that can define the namespace, whether to open the list, and the title of the quickfix list. The function manages quickfix list creation or update based on the title and can filter diagnostics by severity.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nsetqflist({opts})                                 *vim.diagnostic.setqflist()*\n    Add all diagnostics to the quickfix list.\n\n    Parameters: ~\n      • {opts}  (`table?`) Configuration table with the following keys:\n                • {namespace}? (`integer`) Only add diagnostics from the given\n                  namespace.\n                • {open}? (`boolean`, default: `true`) Open quickfix list\n                  after setting.\n                • {title}? (`string`) Title of quickfix list. Defaults to\n                  \"Diagnostics\". If there's already a quickfix list with this\n                  title, it's updated. If not, a new quickfix list is created.\n                • {severity}? (`vim.diagnostic.SeverityFilter`) See\n                  |diagnostic-severity|.\n```\n\n----------------------------------------\n\nTITLE: Including POD Syntax in Perl Files with Vimscript\nDESCRIPTION: This snippet demonstrates how to include and manage POD syntax in Perl files using Vim. It outlines the use of ':syntax include' to include a POD syntax file, and ':syntax region' to define regions within a Perl file that contain POD content. The snippet requires that the pod.vim file be in the same directory as the Perl syntax file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_19\n\nLANGUAGE: Vimscript\nCODE:\n```\n:syntax include @Pod <sfile>:p:h/pod.vim\n:syntax region perlPOD start=/^=head/ end=/^=cut/ contains=@Pod\n```\n\n----------------------------------------\n\nTITLE: Using printf() as a Method in Vim\nDESCRIPTION: Shows how to use printf() as a method in Vim's expression syntax. The result of the Compute() function is passed as the second argument to printf().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_191\n\nLANGUAGE: vim\nCODE:\n```\nCompute()->printf(\"result: %d\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node for Range in LanguageTree (Lua)\nDESCRIPTION: Gets the smallest node that contains a specified range. Takes a range table and optional settings as parameters. Returns a TSNode or nil.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:node_for_range({range}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Creating a global user command in Neovim\nDESCRIPTION: This function creates a global user-defined command in Neovim. The function requires the command name, the replacement command, and a dictionary of options. The command name must begin with an uppercase letter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_44\n\nLANGUAGE: vim\nCODE:\n```\n\"                                                  *nvim_create_user_command()*\\nnvim_create_user_command({name}, {command}, {opts})\\n    Creates a global |user-commands| command.\\n\\n    For Lua usage see |lua-guide-commands-create|.\\n\\n    Example: >vim\\n        :call nvim_create_user_command('SayHello', 'echo \"Hello world!\"', {'bang': v:true})\\n        :SayHello\\n        Hello world!\\n<\\n\\n    Attributes: ~\\n        Since: 0.7.0\\n\\n    Parameters: ~\\n      • {name}     Name of the new user command. Must begin with an uppercase\\n                   letter.\\n      • {command}  Replacement command to execute when this user command is\\n                   executed. When called from Lua, the command can also be a\\n                   Lua function. The function is called with a single table\\n                   argument that contains the following keys:\\n                   • name: (string) Command name\\n                   • args: (string) The args passed to the command, if any\\n                     <args>\\n                   • fargs: (table) The args split by unescaped whitespace\\n                     (when more than one argument is allowed), if any <f-args>\\n                   • nargs: (string) Number of arguments |:command-nargs|\\n                   • bang: (boolean) \"true\" if the command was executed with a\\n                     ! modifier <bang>\\n                   • line1: (number) The starting line of the command range\\n                     <line1>\\n                   • line2: (number) The final line of the command range\\n                     <line2>\\n                   • range: (number) The number of items in the command range:\\n                     0, 1, or 2 <range>\\n                   • count: (number) Any count supplied <count>\\n                   • reg: (string) The optional register, if specified <reg>\\n                   • mods: (string) Command modifiers, if any <mods>\\n                   • smods: (table) Command modifiers in a structured format.\\n                     Has the same structure as the \"mods\" key of\\n                     |nvim_parse_cmd()|.\\n      • {opts}     Optional |command-attributes|.\\n                   • Set boolean attributes such as |:command-bang| or\\n                     |:command-bar| to true (but not |:command-buffer|, use\\n                     |nvim_buf_create_user_command()| instead).\\n                   • \"complete\" |:command-complete| also accepts a Lua\\n                     function which works like\\n                     |:command-completion-customlist|.\\n                   • Other parameters:\\n                     • desc: (string) Used for listing the command when a Lua\\n                       function is used for {command}.\\n                     • force: (boolean, default true) Override any previous\\n                       definition.\\n                     • preview: (function) Preview callback for 'inccommand'\\n                       |:command-preview|\n```\n\n----------------------------------------\n\nTITLE: Manually Loading a Library Script in Vim\nDESCRIPTION: This snippet demonstrates how to manually load a library script in Vim while avoiding duplicate loading using the exists() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_55\n\nLANGUAGE: vim\nCODE:\n```\nif !exists('*MyLibFunction')\n   runtime library/mylibscript.vim\nendif\ncall MyLibFunction(arg)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Buffer of Window in Neovim Lua API\nDESCRIPTION: Retrieves the current buffer in a specified window. Returns the buffer ID. Available since Neovim 0.1.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_74\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_get_buf({window})\n```\n\n----------------------------------------\n\nTITLE: Spell checking with Treesitter\nDESCRIPTION: This snippet demonstrates how to use the `@spell` capture to mark nodes, specifically comments, for spell checking by Neovim's built-in spell checker. The `@nospell` capture can be used to disable spellchecking.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n    (comment) @spell\n\n```\n\n----------------------------------------\n\nTITLE: Setting Options Syntax in Vim Script\nDESCRIPTION: This snippet illustrates the syntax for setting various options in Neovim with examples on how to show, toggle, and reset options. It demonstrates the various characters and options that can be used in command line operations to manipulate configuration settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:se[t][!]    Show all options that differ from their default value.\n\n:se[t][!] all    Show all options.\n\n:se[t] {option}?    Show value of {option}.\n\n:se[t] {option}    Toggle option: set, switch it on.\n\n:se[t] no{option}    Toggle option: Reset, switch it off.\n\n:se[t] {option}&    Reset option to its default value.\n:se[t] all&    Set all options to their default value.\n\n:se[t] {option}={value}    Set string or number option to {value}.\n:se[t] {option}+={value}    Add the {value} to a number option, or append the {value} to a string option.\n:se[t] {option}^={value}    Multiply {value} to a number option, or prepend {value} to a string option.\n:se[t] {option}-={value}    Subtract {value} from a number option, or remove {value} from a string option, if it is there.\n```\n\n----------------------------------------\n\nTITLE: Buffer-Local Mappings in Vim\nDESCRIPTION: Explains the precedence of buffer-local versus global mappings, and provides examples to illustrate this behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:map <buffer> <nowait> \\a   :echo \"Local \\a\"<CR>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map                   \\abc :echo \"Global \\abc\"<CR>\n```\n\n----------------------------------------\n\nTITLE: Installing a Vim Syntax File\nDESCRIPTION: Details the process of installing a new syntax file in Vim by placing it within a 'syntax' directory under 'runtimepath'. The snippet explains how file recognition is based on file type names, and includes steps for adding to existing syntax files while maintaining original files unchanged.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_21\n\nLANGUAGE: Vimscript\nCODE:\n```\n:syntax keyword cType off_t uint\n```\n\n----------------------------------------\n\nTITLE: Using Special Arguments in Key Mappings\nDESCRIPTION: This section describes various special arguments such as '<buffer>', '<nowait>', and '<silent>' that can modify the behavior of mappings in Neovim. Each argument is explored with an example.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:map <buffer> ,w /[.,;]<CR>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map <silent> ,h /Header<CR>\n```\n\n----------------------------------------\n\nTITLE: Autocommand Pattern Example 1 in Vimscript\nDESCRIPTION: This example shows how to set the 'et' option for all text files using the `BufRead` event and the `*.txt` pattern.  When a file ending with `.txt` is read, the 'et' option will be set.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n \":autocmd BufRead *.txt\\t\\tset et\"\n```\n\n----------------------------------------\n\nTITLE: Replacing a Word in Vim\nDESCRIPTION: This snippet demonstrates how to replace all occurrences of a specific word in a file using Vim's substitute command. The command can also match word boundaries to avoid incorrect replacements, with optional prompting for confirmation on each replacement.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n%s/four/4/g\n```\n\nLANGUAGE: vim\nCODE:\n```\n%s/\\<four/4/g\n```\n\nLANGUAGE: vim\nCODE:\n```\n%s/\\<four\\>/4/g\n```\n\nLANGUAGE: vim\nCODE:\n```\n%s/\\<four\\>/4/gc\n```\n\nLANGUAGE: vim\nCODE:\n```\n%s/\\<GetResp\\>/GetAnswer/g\n```\n\nLANGUAGE: vim\nCODE:\n```\n%s/\\<GetResp\\>/GetAnswer/ge\n```\n\n----------------------------------------\n\nTITLE: LSP Client Environment Configuration Example in Lua\nDESCRIPTION: Example showing how to configure environment variables for an LSP server using a table format. The values are coerced to strings when passed to the server.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\n{ PORT = 8080; HOST = \"0.0.0.0\"; }\n```\n\n----------------------------------------\n\nTITLE: Neovim Async Event Loop Implementation\nDESCRIPTION: Pseudocode showing how Neovim handles asynchronous events. This demonstrates the difference between the traditional input loop and the event-based approach used in Neovim for supporting RPC, job control, and timers.\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef state_enter(state_callback, data):\n  do\n    event = read_next_event()       # read an event from the operating system\n  while state_callback(data, event) # invoke the callback for the current state\n```\n\n----------------------------------------\n\nTITLE: Enable Treesitter Syntax Highlighting for Help Files in Lua\nDESCRIPTION: Configures Treesitter to start for syntax highlighting help files. Dependencies include a functional Nvim setup with Treesitter installed. Creates a `.config/nvim/ftplugin/help.lua` file containing Lua code to initialize Treesitter syntax highlighting for better code example visualization in help files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvim.treesitter.start()\n```\n\n----------------------------------------\n\nTITLE: LSP Handler Function Signature\nDESCRIPTION: Defines the standard signature for LSP response handlers with error, result, and context parameters\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction(err, result, ctx)\n    -- Handler implementation\nend\n```\n\n----------------------------------------\n\nTITLE: Navigating the Buffer List\nDESCRIPTION: This snippet provides commands for navigating through the buffer list, enabling users to move to previous and next buffers easily. It also explains how to delete buffers and the effect of deletion on active windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:bnext\n```\n\nLANGUAGE: vim\nCODE:\n```\n:bprevious\n```\n\nLANGUAGE: vim\nCODE:\n```\n:bfirst\n```\n\nLANGUAGE: vim\nCODE:\n```\n:blast\n```\n\nLANGUAGE: vim\nCODE:\n```\n:bdelete 3\n```\n\n----------------------------------------\n\nTITLE: Handling Partial Line Output in Job Control\nDESCRIPTION: Example showing how to handle partial line output in job control callbacks by maintaining a buffer of chunks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nlet s:chunks = ['']\nfunc! s:on_stdout(job_id, data, event) dict\n  let s:chunks[-1] .= a:data[0]\n  call extend(s:chunks, a:data[1:])\nendf\n```\n\n----------------------------------------\n\nTITLE: Function to consume character after abbreviation\nDESCRIPTION: This snippet defines a function `Eatchar` that consumes a character based on a pattern. It's used in an abbreviation to consume the space typed after the abbreviation.  The `getchar()` function reads a character, `nr2char()` converts it to a string, and the return value determines whether the character is consumed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_26\n\nLANGUAGE: Vim Script\nCODE:\n```\nfunc Eatchar(pat)\n   let c = nr2char(getchar(0))\n   return (c =~ a:pat) ? '' : c\nendfunc\niabbr <silent> if if ()<Left><C-R>=Eatchar('\\\\s')<CR>\n```\n\n----------------------------------------\n\nTITLE: Parsing Tree-sitter Tree in Lua\nDESCRIPTION: Example demonstrating how to parse a tree-sitter tree for a buffer range before accessing nodes. This ensures the tree is valid before node operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nvim.treesitter.get_parser(bufnr):parse(range)\n```\n\n----------------------------------------\n\nTITLE: Initializing Poll Handle in Lua with libuv\nDESCRIPTION: This snippet details the initialization of a poll handle using a file descriptor. It sets the file descriptor to non-blocking mode and returns a `uv_poll_t` userdata. This is crucial for monitoring I/O on file descriptors without blocking the event loop. The snippet demonstrates two functions: `uv.new_poll(fd)` for general file descriptors and `uv.new_socket_poll(fd)` specifically for socket descriptors on Unix and Windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nuv.new_poll({fd})\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.new_socket_poll({fd})\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Job Control Implementation\nDESCRIPTION: Advanced example showing an object-oriented approach to job control in Vim, with methods for handling stdout, stderr, and exit events.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nlet Shell = {}\n\nfunction Shell.on_stdout(_job_id, data, event)\n  call append(line('$'),\n        \\ printf('[%s] %s: %s', a:event, self.name, join(a:data[:-2])))\nendfunction\n\nlet Shell.on_stderr = function(Shell.on_stdout)\n\nfunction Shell.on_exit(job_id, _data, event)\n  let msg = printf('job %d (\"%s\") finished', a:job_id, self.name)\n  call append(line('$'), printf('[%s] BOOM!', a:event))\n  call append(line('$'), printf('[%s] %s!', a:event, msg))\nendfunction\n\nfunction Shell.new(name, cmd)\n  let object = extend(copy(g:Shell), {'name': a:name})\n  let object.cmd = ['sh', '-c', a:cmd]\n  let object.id = jobstart(object.cmd, object)\n  $\n  return object\nendfunction\n\nlet instance = Shell.new('bomb',\n      \\ 'for i in $(seq 9 -1 1); do echo $i 1>&$((i % 2 + 1)); sleep 1; done')\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nvim with Ruby using msgpack-rpc\nDESCRIPTION: A Ruby script that demonstrates how to connect to a running Nvim instance via msgpack-rpc and execute a command to print \"hello world!\". The script can be run from within Nvim or from another shell by setting NVIM_LISTEN_ADDRESS.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\n# Requires msgpack-rpc: gem install msgpack-rpc\n#\n# To run this script, execute it from a running Nvim instance (notice the\n# trailing '&' which is required since Nvim won't process events while\n# running a blocking command):\n#\n#   :!./hello.rb &\n#\n# Or from another shell by setting NVIM_LISTEN_ADDRESS:\n# $ NVIM_LISTEN_ADDRESS=[address] ./hello.rb\n\nrequire 'msgpack/rpc'\nrequire 'msgpack/rpc/transport/unix'\n\nnvim = MessagePack::RPC::Client.new(MessagePack::RPC::UNIXTransport.new, ENV['NVIM_LISTEN_ADDRESS'])\nresult = nvim.call(:nvim_command, 'echo \"hello world!\"')\n```\n\n----------------------------------------\n\nTITLE: Global Search and Replace in Vim\nDESCRIPTION: Shows how to use the global command to perform a search and replace operation across the entire file. This example replaces all occurrences of 'pat' with 'PAT'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:g/pat/s//PAT/g\n```\n\n----------------------------------------\n\nTITLE: Executing Normal Mode Commands in Global Command\nDESCRIPTION: Illustrates how to use the :normal command within a global command to execute Normal mode commands on matching lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:g/pat/normal {commands}\n```\n\n----------------------------------------\n\nTITLE: Searching for files with globpath in Vim\nDESCRIPTION: Examples of using globpath() to search for files across multiple directories. The first example finds a syntax file in the runtimepath, while the second uses the list return format.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_114\n\nLANGUAGE: vim\nCODE:\n```\necho globpath(&rtp, \"syntax/c.vim\")\n```\n\n----------------------------------------\n\nTITLE: LSP Server Capabilities Resolver in Lua\nDESCRIPTION: Function to normalize and resolve server capabilities into a standardized format.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_66\n\nLANGUAGE: lua\nCODE:\n```\nresolve_capabilities(server_capabilities)\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested List Elements in Vimscript\nDESCRIPTION: This example shows how to access elements within nested lists.  Multiple bracketed indices are used to traverse the list structure to retrieve the desired element.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\t:let item = nestlist[0][1]\t\" get the first list, second item: 12\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements in Vimscript\nDESCRIPTION: This snippet demonstrates how to access elements in a Vimscript list using their index.  List indices are zero-based, and negative indices can be used to access elements from the end of the list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n\t:let item = mylist[0]\t\t\" get the first item: 1\n\t:let item = mylist[2]\t\t\" get the third item: 3\n```\n\n----------------------------------------\n\nTITLE: Overriding Built-in Signs Handler\nDESCRIPTION: Example showing how to override Neovim's built-in signs handler to show only the highest severity diagnostic per line\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal ns = vim.api.nvim_create_namespace(\"my_namespace\")\n\nlocal orig_signs_handler = vim.diagnostic.handlers.signs\n\nvim.diagnostic.handlers.signs = {\n  show = function(_, bufnr, _, opts)\n    local diagnostics = vim.diagnostic.get(bufnr)\n\n    local max_severity_per_line = {}\n    for _, d in pairs(diagnostics) do\n      local m = max_severity_per_line[d.lnum]\n      if not m or d.severity < m.severity then\n        max_severity_per_line[d.lnum] = d\n      end\n    end\n\n    local filtered_diagnostics = vim.tbl_values(max_severity_per_line)\n    orig_signs_handler.show(ns, bufnr, filtered_diagnostics, opts)\n  end,\n  hide = function(_, bufnr)\n    orig_signs_handler.hide(ns, bufnr)\n  end,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating List Reference Behavior in Vim\nDESCRIPTION: Shows how lists in Vim are passed by reference, meaning changes to one variable affect another that references the same list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:let bb = aa\n:call add(aa, 4)\n:echo bb\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers in Vim\nDESCRIPTION: Example of using the rand() function to generate pseudo-random numbers with the xoshiro128** algorithm. Demonstrates basic random number generation, using a seed, and generating numbers within a specific range.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_198\n\nLANGUAGE: vim\nCODE:\n```\necho rand()\nlet seed = srand()\necho rand(seed)\necho rand(seed) % 16  \" random number 0 - 15\n```\n\n----------------------------------------\n\nTITLE: Customizing statusline with byte count and modified flag in Vim\nDESCRIPTION: Sets up a statusline with byte count, byte value, and a red-highlighted modified flag. It also defines a custom highlight group for the modified flag.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_69\n\nLANGUAGE: vim\nCODE:\n```\nset statusline=%<%f%=\\ [%1*%M%*%n%R%H]\\ %-19(%3l,%02c%03V%)%O'%02b'\nhi User1 term=inverse,bold cterm=inverse,bold ctermfg=red\n```\n\n----------------------------------------\n\nTITLE: Applying Workspace Edit in Neovim LSP (Lua)\nDESCRIPTION: Applies a WorkspaceEdit. Takes the WorkspaceEdit object and the position encoding as parameters. The position encoding is required.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_46\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.util.apply_workspace_edit(workspace_edit, position_encoding)\n```\n\n----------------------------------------\n\nTITLE: Defining Script-Local Functions in VimScript\nDESCRIPTION: This code shows how to define a function that is local to the script, avoiding naming conflicts with other scripts. It uses the 's:' prefix for script-local scope.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_33\n\nLANGUAGE: VimScript\nCODE:\n```\nfunction s:Add(from, correct)\n  let to = input(\"type the correction for \" .. a:from .. \": \")\n  exe \":iabbrev \" .. a:from .. \" \" .. to\n..\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Editing the Current Directory with netrw\nDESCRIPTION: This snippet demonstrates how to open the file browser in Vim for directory listing using the ':edit .' command. The netrw plugin displays directory contents and allows file operations such as browsing different directories, sorting, and file editing. Special keys like <Enter>, <F1>, and '-' provide navigation options within the browser.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_0\n\nLANGUAGE: VimScript\nCODE:\n```\n\" ============================================================================ ~\\n\" Netrw Directory Listing                                        (netrw v109) ~\\n\"   Sorted by      name ~\\n\"   Sort sequence: [\\/]$,\\.h$,\\.c$,\\.cpp$,*,\\.info$,\\.swp$,\\.o$\\.obj$,\\.bak$ ~\\n\"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec ~\\n\" ============================================================================ ~\\n../ ~\\n./ ~\\ncheck/ ~\\nMakefile ~\\nautocmd.txt ~\\nchange.txt ~\\neval.txt~ ~\\nfiletype.txt~ ~\\nhelp.txt.info ~\\n\\nv\n```\n\n----------------------------------------\n\nTITLE: Flattening a Nested List in Vim\nDESCRIPTION: Shows how to use the flatten() function to flatten a nested list. Two examples are provided: one fully flattening the list, and another limiting the flattening to one level deep.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_71\n\nLANGUAGE: vim\nCODE:\n```\necho flatten([1, [2, [3, 4]], 5])\n```\n\nLANGUAGE: vim\nCODE:\n```\necho flatten([1, [2, [3, 4]], 5], 1)\n```\n\n----------------------------------------\n\nTITLE: Using Vim Quickfix Commands\nDESCRIPTION: A set of commands for working with the quickfix list, including displaying errors, navigating through errors, and populating the quickfix list from various sources.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:cc [nr]\tdisplay error [nr] (default is the same again)\n:cn\t\tdisplay the next error\n:cp\t\tdisplay the previous error\n:cl\t\tlist all errors\n:cf\t\tread errors from the file 'errorfile'\n:cgetb\t\tlike :cbuffer but don't jump to the first error\n:cg\t\tlike :cfile but don't jump to the first error\n:cgete\t\tlike :cexpr but don't jump to the first error\n:caddf\t\tadd errors from the error file to the current\n\t\t   quickfix list\n:cad\t\tadd errors from an expression to the current\n\t\t   quickfix list\n:cb\t\tread errors from text in a buffer\n:cex\t\tread errors from an expression\n:cq\t\tquit without writing and return error code (to\n\t\t   the compiler)\n:make [args]\tstart make, read errors, and jump to first\n\t\t   error\n:gr[ep] [args]\texecute 'grepprg' to find matches and jump to\n\t\t   the first one\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with CMake\nDESCRIPTION: These commands build Neovim using CMake. It configures the CMake project in the `build` directory with the Ninja generator and RelWithDebInfo build type. Then, it builds Neovim using the configured CMake project.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n\"cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\\ncmake --build build\"\n```\n\n----------------------------------------\n\nTITLE: Setting Diagnostics for Namespace and Buffer in Vim\nDESCRIPTION: The `vim.diagnostic.setloclist` is used to add buffer diagnostics to the location list. Dependencies include a valid diagnostics namespace, buffer number, and optional display options. It modifies the location list based on buffer diagnostics and supports configuration through the `opts` parameter, which can specify the namespace, window number, open behavior, title, and severity filter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nsetloclist({opts})                               *vim.diagnostic.setloclist()*\n    Add buffer diagnostics to the location list.\n\n    Parameters: ~\n      • {opts}  (`table?`) Configuration table with the following keys:\n                • {namespace}? (`integer`) Only add diagnostics from the given\n                  namespace.\n                • {winnr}? (`integer`, default: `0`) Window number to set\n                  location list for.\n                • {open}? (`boolean`, default: `true`) Open the location list\n                  after setting.\n                • {title}? (`string`) Title of the location list. Defaults to\n                  \"Diagnostics\".\n                • {severity}? (`vim.diagnostic.SeverityFilter`) See\n                  |diagnostic-severity|.\n```\n\n----------------------------------------\n\nTITLE: Setting Case Sensitivity Options in Vim Search\nDESCRIPTION: Commands for controlling case sensitivity during searches using the 'ignorecase' and 'smartcase' options. These settings allow for flexible case matching behavior when searching for patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set ignorecase\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set noignorecase\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set ignorecase smartcase\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Namespaces in Neovim\nDESCRIPTION: Function to create a new namespace or retrieve an existing one. Used for buffer highlights and virtual text management. Returns a namespace ID that can be used with extmark operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_65\n\nLANGUAGE: vimdoc\nCODE:\n```\nnvim_create_namespace({name})\n```\n\n----------------------------------------\n\nTITLE: Generating Single Tags File Recursively\nDESCRIPTION: Command to generate a comprehensive tags file for an entire project directory using Universal or Exuberant ctags\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/proj\nctags -R .\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in Vim\nDESCRIPTION: Shows how to use strpart() function to extract a substring from a given string, specifying start position and length in bytes or characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_260\n\nLANGUAGE: vim\nCODE:\n```\necho strpart(\"abcdefg\", 3, 2)    \" returns 'de'\necho strpart(\"abcdefg\", -2, 4)   \" returns 'ab'\necho strpart(\"abcdefg\", 5, 4)    \" returns 'fg'\necho strpart(\"abcdefg\", 3)\t \" returns 'defg'\n```\n\nLANGUAGE: vim\nCODE:\n```\nstrpart(getline(\".\"), col(\".\") - 1, 1, v:true)\n```\n\n----------------------------------------\n\nTITLE: Toggling Inlay Hints in Neovim LSP (Lua)\nDESCRIPTION: Enables or disables inlay hints for the LSP. Takes an optional boolean parameter to explicitly enable or disable, and an optional filter table for targeting specific buffers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_42\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled())\n```\n\n----------------------------------------\n\nTITLE: Running the Make Command in Vim\nDESCRIPTION: The :make command runs the make program with specified arguments and captures the output for error navigation. This allows compiling directly from Vim and jumping to error locations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:make {arguments}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtualenv for Neovim\nDESCRIPTION: Creates a dedicated Python virtualenv for Neovim and installs the pynvim package. This is useful for isolating Neovim's Python dependencies from project-specific virtualenvs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.4.4\npyenv virtualenv 3.4.4 py3nvim\npyenv activate py3nvim\npython3 -m pip install pynvim\npyenv which python  # Note the path\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Matching with Positions using matchfuzzypos() in Vim\nDESCRIPTION: Shows how to use matchfuzzypos() to get not only the matched strings but also the character positions and matching scores. This is useful for more detailed fuzzy matching results.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_168\n\nLANGUAGE: vim\nCODE:\n```\necho matchfuzzypos(['testing'], 'tsg')\n\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchfuzzypos(['clay', 'lacy'], 'la')\n\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exceptions in Vim Script\nDESCRIPTION: Shows how to throw a custom exception and catch it using a pattern match.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_107\n\nLANGUAGE: vim\nCODE:\n```\n:try | throw \"oops\" | catch /^oo/ | echo \"caught\" | endtry\n```\n\n----------------------------------------\n\nTITLE: Displaying Syntax Stack Under Cursor in Vim\nDESCRIPTION: This example shows how to display the syntax stack under the cursor using a for loop and the synstack and synIDattr functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_271\n\nLANGUAGE: vim\nCODE:\n```\nfor id in synstack(line(\".\"), col(\".\"))\n   echo synIDattr(id, \"name\")\nendfor\n```\n\n----------------------------------------\n\nTITLE: Retrieving History Items in Vim\nDESCRIPTION: Examples of retrieving items from Vim's history using histget(). This includes reusing a previous search and defining a custom command to execute a specific history entry.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_127\n\nLANGUAGE: vim\nCODE:\n```\nexecute '/' .. histget(\"search\", -2)\n```\n\nLANGUAGE: vim\nCODE:\n```\ncommand -nargs=1 H execute histget(\"cmd\", 0+<args>)\n```\n\n----------------------------------------\n\nTITLE: Clearing and Redrawing Screen in Neovim - Vim\nDESCRIPTION: This snippet explains the functionality of commands for clearing and redrawing the screen in Neovim. It summarizes the CTRL-L and :redraw commands, which enable users to refresh the interface and clear search highlighting. These commands help maintain an organized workspace by ensuring the display is current and free of obstructions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-L\t\tClears and redraws the screen.  The redraw may happen later, after processing typeahead.\n\t\tSee also |nvim__redraw()|.\n```\n\nLANGUAGE: vim\nCODE:\n```\n:redr[aw][!] \tRedraws pending screen updates now, or the entire screen if \"!\" is included.  To CLEAR the screen use |:mode| or |CTRL-L|.\n\t\tIt can be used to redraw the screen in a script or function (or a mapping if |'lazyredraw'| is set).\n\t\tSee also |nvim__redraw()|.\n```\n\n----------------------------------------\n\nTITLE: Special Pattern Matching Atoms in Vim Regular Expressions\nDESCRIPTION: This snippet shows special pattern matching atoms in Vim regular expressions. It includes atoms for matching specific characters like <Esc>, <Tab>, <CR>, and end-of-line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\n\\e  matches <Esc>                  */\\e*\n\\t  matches <Tab>                  */\\t*\n\\r  matches <CR>                   */\\r*\n\\b  matches <BS>                   */\\b*\n\\n  matches an end-of-line          */\\n*\n```\n\n----------------------------------------\n\nTITLE: Automatically Setting Syntax-Based Omni Completion for All Filetypes\nDESCRIPTION: Autocmd configuration to set syntax-based completion for any filetype that doesn't already have a specific Omni completion function defined.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nif has(\"autocmd\") && exists(\"+omnifunc\")\n    autocmd Filetype *\n\t\t    \\\tif &omnifunc == \"\" |\n\t\t    \\\t\tsetlocal omnifunc=syntaxcomplete#Complete |\n\t\t    \\\tendif\nendif\n```\n\n----------------------------------------\n\nTITLE: Chain of Mapping Execution in Vim Plugin\nDESCRIPTION: Shows how a user mapping (\\a) gets translated through <Plug> to a script-local function call.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\n\\a  ->  <Plug>TypecorrAdd;  ->  <SID>Add  ->  :call <SID>Add()\n```\n\n----------------------------------------\n\nTITLE: Making Corrections with Keyboard Commands in Vim\nDESCRIPTION: Demonstrates how to correct mistakes in text using Vim's navigation and editing commands. Shows two approaches to fix a typing error: first using Normal mode commands and second using control keys while staying in Insert mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\n<Esc>4blraA\n```\n\nLANGUAGE: vimdoc\nCODE:\n```\n<C-Left><C-Left><C-Left><C-Left><Right><Del>a<End>\n```\n\n----------------------------------------\n\nTITLE: Implementing setTimeout and setInterval in Lua with UV Timer\nDESCRIPTION: Example showing how to create setTimeout and setInterval wrappers using UV timer handles. Includes functions for creating timed callbacks and clearing intervals.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal function setTimeout(timeout, callback)\n  local timer = uv.new_timer()\n  timer:start(timeout, 0, function ()\n    timer:stop()\n    timer:close()\n    callback()\n  end)\n  return timer\nend\n\nlocal function setInterval(interval, callback)\n  local timer = uv.new_timer()\n  timer:start(interval, interval, function ()\n    callback()\n  end)\n  return timer\nend\n\nlocal function clearInterval(timer)\n  timer:stop()\n  timer:close()\nend\n```\n\n----------------------------------------\n\nTITLE: Calling Functions with Dynamic Names in Vim\nDESCRIPTION: Example of calling a function with a dynamically constructed name using curly braces. This allows selecting which function to call based on variable values at runtime.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_89\n\nLANGUAGE: viml\nCODE:\n```\n:let func_end='whizz'\n:call my_func_{func_end}(parameter)\n```\n\n----------------------------------------\n\nTITLE: Detaching Client from Buffer in Lua\nDESCRIPTION: This function detaches a client from a specified buffer. It notifies the server that the text document (buffer) was closed, though the server may still send notifications. Accepts the buffer number and client id as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nbuf_detach_client({bufnr}, {client_id})          *vim.lsp.buf_detach_client()*\n    Parameters: ~\n      • {bufnr}      (`integer`) Buffer handle, or 0 for current\n      • {client_id}  (`integer`) Client id\n```\n\n----------------------------------------\n\nTITLE: Maintaining Persistent Script Variables in Vim\nDESCRIPTION: Example showing how to maintain a counter across multiple executions of the same script. The code checks if a script-scoped variable exists and either initializes it or increments it, demonstrating variable persistence.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_87\n\nLANGUAGE: viml\nCODE:\n```\nif !exists(\"s:counter\")\n  let s:counter = 1\n  echo \"script executed for the first time\"\nelse\n  let s:counter = s:counter + 1\n  echo \"script executed \" .. s:counter .. \" times now\"\nendif\n```\n\n----------------------------------------\n\nTITLE: Using get() Function for Lists, Blobs, and Dictionaries in Vim Script\nDESCRIPTION: Demonstrates the usage of the get() function for retrieving items from lists, blobs, and dictionaries in Vim script. It shows how to provide default values and handle non-existent keys.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_80\n\nLANGUAGE: vim\nCODE:\n```\nlet val = get(g:, 'var_name', 'default')\n```\n\n----------------------------------------\n\nTITLE: Getting system name using vim.uv in Lua\nDESCRIPTION: Example of using vim.uv.os_uname() in Lua to get the system name as an alternative to using has() for platform detection.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_117\n\nLANGUAGE: lua\nCODE:\n```\nprint(vim.uv.os_uname().sysname)\n```\n\n----------------------------------------\n\nTITLE: Converting LSP Input to Markdown in Neovim (Lua)\nDESCRIPTION: Converts MarkedString, MarkedString[], or MarkupContent into a list of valid markdown lines. Useful for populating hover windows and parsing signature help results.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_50\n\nLANGUAGE: lua\nCODE:\n```\nconvert_input_to_markdown_lines({input}, {contents})\n```\n\n----------------------------------------\n\nTITLE: Stopping All LSP Clients in Neovim\nDESCRIPTION: Shows how to stop all running LSP clients in Neovim. The example uses vim.lsp.get_clients() to get all active clients and passes them to vim.lsp.stop_client() to shut them down.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.stop_client(vim.lsp.get_clients())\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL Clipboard Integration in Neovim\nDESCRIPTION: Sets up a custom clipboard provider for Windows Subsystem for Linux (WSL) that uses clip.exe for copying and PowerShell for pasting. This bridges the Linux and Windows clipboard systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\nlet g:clipboard = {\n  \\   'name': 'WslClipboard',\n  \\   'copy': {\n  \\      '+': 'clip.exe',\n  \\      '*': 'clip.exe',\n  \\    },\n  \\   'paste': {\n  \\      '+': 'powershell.exe -NoLogo -NoProfile -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n  \\      '*': 'powershell.exe -NoLogo -NoProfile -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n  \\   },\n  \\   'cache_enabled': 0,\n  \\ }\n```\n\n----------------------------------------\n\nTITLE: Finding local identifiers in current function (Vim)\nDESCRIPTION: This snippet demonstrates how to find the first occurrence of the word under the cursor in the current function using the `gd` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\n\"gd\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Border with Custom Highlights in Neovim\nDESCRIPTION: Example showing how to configure a window border with custom highlight groups for different border components in Neovim's floating windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_82\n\nLANGUAGE: viml\nCODE:\n```\n[ [\"+\", \"MyCorner\"], [\"x\", \"MyBorder\"] ]\n```\n\n----------------------------------------\n\nTITLE: Nested Try-Catch Blocks in Vim Script\nDESCRIPTION: Demonstrates how an uncaught exception in an inner try block propagates to an outer try block while still executing the finally clause of the inner block.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_128\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:  try\n:    throw \"foo\"\n:  catch /foobar/\n:    echo \"foobar\"\n:  finally\n:    echo \"inner finally\"\n:  endtry\n:catch /foo/\n:  echo \"foo\"\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Scrolling Indicators in Neovim\nDESCRIPTION: This VimL snippet demonstrates how to enhance horizontal scrolling when 'wrap' is disabled. It sets 'sidescroll' to 5 characters and adds special indicators to 'listchars' to show when text extends beyond the visible area.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_87\n\nLANGUAGE: viml\nCODE:\n```\nset sidescroll=5\nset listchars+=precedes:<,extends:>\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell as Neovim Shell\nDESCRIPTION: Complete configuration for using PowerShell as the shell in Neovim. Sets shell executable with fallback, configures proper encoding, parameters for command execution, output redirection and disables aliases that might interfere.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_62\n\nLANGUAGE: vim\nCODE:\n```\nlet &shell = executable('pwsh') ? 'pwsh' : 'powershell'\nlet &shellcmdflag = '-NoLogo -NonInteractive -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.UTF8Encoding]::new();$PSDefaultParameterValues[\\'Out-File:Encoding\\']=\\'utf8\\';$PSStyle.OutputRendering=\\'plaintext\\';Remove-Alias -Force -ErrorAction SilentlyContinue tee;'\nlet &shellredir = '2>&1 | %%{ \"$_\" } | Out-File %s; exit $LastExitCode'\nlet &shellpipe  = '2>&1 | %%{ \"$_\" } | tee %s; exit $LastExitCode'\nset shellquote= shellxquote=\n```\n\n----------------------------------------\n\nTITLE: Vim Help Commands\nDESCRIPTION: Various help commands for accessing Vim's documentation system\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:help\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help x\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help deleting\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help index\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help CTRL-A\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help i_CTRL-H\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help -t\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help 'number'\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help i_<Up>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:help E37\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Window Layout in Vim\nDESCRIPTION: This code creates a custom window layout in Vim with a help window at the top and a file explorer on the left side.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:help\nCTRL-W w\n:vertical split ~/\n```\n\n----------------------------------------\n\nTITLE: Iterating TreeSitter Query Matches in Lua\nDESCRIPTION: Demonstrates how to iterate over matches of a TreeSitter query within a given node range. This example shows how to access captured nodes, pattern IDs, and metadata for each match.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nfor pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, 0, -1) do\n  for id, nodes in pairs(match) do\n    local name = query.captures[id]\n    for _, node in ipairs(nodes) do\n      -- `node` was captured by the `name` capture in the match\n\n      local node_data = metadata[id] -- Node level metadata\n      -- ... use the info here ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Functions Once in Vim Filetype Plugins\nDESCRIPTION: This snippet demonstrates how to ensure a function is only defined once in a filetype plugin, which is sourced multiple times.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_51\n\nLANGUAGE: vim\nCODE:\n```\n:if !exists(\"*s:Func\")\n:  function s:Func(arg)\n:    ...\n:  endfunction\n:endif\n```\n\n----------------------------------------\n\nTITLE: Defining a Command in Vim\nDESCRIPTION: This snippet shows how to define a new user command in Vim that deletes the first line of the current buffer when executed. The command is defined using the ':command' command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:command DeleteFirst 1delete\n```\n\n----------------------------------------\n\nTITLE: Opening Preview Window for Function Definition\nDESCRIPTION: Using the :ptag command to open a preview window showing the definition of a specific function without losing current editing context\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:ptag write_char\n```\n\n----------------------------------------\n\nTITLE: Setting quickfix list title and properties in Vim/Neovim\nDESCRIPTION: Examples of using setqflist() with the 'what' dictionary to set various properties like title and list number. These examples show how to modify an existing quickfix list or create a new one with specific attributes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_227\n\nLANGUAGE: viml\nCODE:\n```\ncall setqflist([], 'r', {'title': 'My search'})\ncall setqflist([], 'r', {'nr': 2, 'title': 'Errors'})\ncall setqflist([], 'a', {'id':qfid, 'lines':[\"F1:10:L10\"]})\n```\n\n----------------------------------------\n\nTITLE: VimEnter Autocommand Example in Vimscript\nDESCRIPTION: This snippet demonstrates how to use the `VimEnter` autocommand and the `v:vim_did_enter` variable to execute code only after Vim startup is complete. It checks if `v:vim_did_enter` is set; if so, it calls an initialization function; otherwise, it sets an autocommand to call the function when `VimEnter` is triggered.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n       \"if v:vim_did_enter\\n         call s:init()\\n       else\\n         au VimEnter * call s:init()\\n       endif\"\n```\n\n----------------------------------------\n\nTITLE: Recording and Playing Back Macros in Neovim\nDESCRIPTION: This Vimscript snippet demonstrates how to record a sequence of commands into a register to automate repetitive tasks. The recording starts with 'q' followed by a register name, and ends with 'q'. The macro can be executed using '@' followed by the register name. This method allows recording multiple commands, including movements, insertions, and deletions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_0\n\nLANGUAGE: Vimscript\nCODE:\n```\nqa\n^\ni#include \"<Esc>\n$\na\"<Esc>\nj\nq\n```\n\n----------------------------------------\n\nTITLE: Reordering List Items in Vim\nDESCRIPTION: Shows functions for changing the order of items in a list: sorting, reversing, and removing duplicates.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\n:call sort(list)\t\t\" sort a list alphabetically\n:call reverse(list)\t\t\" reverse the order of items\n:call uniq(sort(list))\t\t\" sort and remove duplicates\n```\n\n----------------------------------------\n\nTITLE: Calling a Function with Arguments in Neovim using Vim Script\nDESCRIPTION: The 'call' function invokes a given function with a list of arguments, optionally allowing a dictionary to set local variables, returning the result of the function call.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\ncall({func}, {arglist} [, {dict}])\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Severity in Lua\nDESCRIPTION: Examples of different ways to specify diagnostic severity when using vim.diagnostic.get()\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvim.diagnostic.get(0, { severity = vim.diagnostic.severity.WARN })\n\nvim.diagnostic.get(0, { severity = { min = vim.diagnostic.severity.WARN } })\n\nvim.diagnostic.get(0, { severity = {\n    vim.diagnostic.severity.WARN,\n    vim.diagnostic.severity.INFO,\n} })\n```\n\n----------------------------------------\n\nTITLE: Defining Lua Docstring with Class and Parameters\nDESCRIPTION: Example showing how to document a Lua function with class definition and inline documentation for parameters using LuaCATS annotations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n--- Object with fields:\n--- @class myOpts\n--- @inlinedoc\n---\n--- Documentation for some field\n--- @field somefield? integer\n\n--- @param opts? myOpts\nfunction foo(opts)\nend\n```\n\n----------------------------------------\n\nTITLE: Recursive Mappings in Vim\nDESCRIPTION: Describes the concept of recursive mappings in Vim and how to avoid issues associated with them by using the :noremap command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:map ab abcd\n```\n\nLANGUAGE: vim\nCODE:\n```\n:noremap k j\n```\n\nLANGUAGE: vim\nCODE:\n```\n:noremap j k\n```\n\n----------------------------------------\n\nTITLE: Modifying List Ranges in Vim\nDESCRIPTION: Shows how to change a range of items in a list by specifying start and end indices.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_30\n\nLANGUAGE: vim\nCODE:\n```\n:let list[3:5] = [3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Enabling Filetype Plugins for Omni Completion\nDESCRIPTION: Configuration commands for enabling filetype plugins in Vim, which are required for Omni completion (intelligent code completion) to work properly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_3\n\nLANGUAGE: vimdoc\nCODE:\n```\nfiletype plugin on\n```\n\nLANGUAGE: vimdoc\nCODE:\n```\nfiletype plugin indent on\n```\n\n----------------------------------------\n\nTITLE: Checking Executable Safety in Vim Scripts\nDESCRIPTION: Function to determine if it's safe to execute a given executable for a specific filetype. It returns TRUE or FALSE based on security settings and takes filetype and executable as arguments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_141\n\nLANGUAGE: vimdoc\nCODE:\n```\ndist#vim#IsSafeExecutable(filetype, executable) ~\n\nThis function takes a filetype and an executable and checks whether it is safe\nto execute the given executable.  For security reasons users may not want to\nhave Vim execute random executables or may have forbidden to do so for\nspecific filetypes by setting the \"<filetype>_exec\" variable (|plugin_exec|).\n\nIt returns |TRUE| or |FALSE| to indicate whether the plugin should run the given\nexecutable.  It takes the following arguments:\n\n\targument\ttype ~\n\n\tfiletype\tstring\n\texecutable\tstring\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Register Values in Vim\nDESCRIPTION: Examples demonstrating how to save and restore register values using getreginfo(), getreg(), and setreg() functions in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_229\n\nLANGUAGE: vim\nCODE:\n```\nlet var_a = getreginfo()\ncall setreg('a', var_a)\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet var_a = getreg('a', 1, 1)\nlet var_amode = getregtype('a')\n\" ....\ncall setreg('a', var_a, var_amode)\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer-Relative Float in Lua\nDESCRIPTION: Creates a floating window that follows buffer content as it scrolls, positioned relative to a specific buffer position.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_80\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_open_win(0, false, \n  {relative='win', width=12, height=3, bufpos={100,10}})\n```\n\n----------------------------------------\n\nTITLE: Dictionary Creation and Access in Vim\nDESCRIPTION: Examples of creating and accessing dictionary data structures in Vim, including basic key-value pair usage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_22\n\nLANGUAGE: viml\nCODE:\n```\n:let uk2nl = {'one': 'een', 'two': 'twee', 'three': 'drie'}\n:echo uk2nl['two']\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Argument List in Vimscript\nDESCRIPTION: This example demonstrates how to iterate through the argument list using argc() and argv() functions, creating a menu item for each argument.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_7\n\nLANGUAGE: vimscript\nCODE:\n```\nlet i = 0\nwhile i < argc()\n  let f = escape(fnameescape(argv(i)), '.')\n  exe 'amenu Arg.' .. f .. ' :e ' .. f .. '<CR>'\n  let i = i + 1\nendwhile\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Extmarks in Neovim\nDESCRIPTION: Example demonstrating how to create, get and manage extended marks (extmarks) in a buffer using namespaces\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nlet g:mark_ns = nvim_create_namespace('myplugin')\nlet g:mark_id = nvim_buf_set_extmark(0, g:mark_ns, 0, 2, {})\n```\n\nLANGUAGE: vim\nCODE:\n```\necho nvim_buf_get_extmark_by_id(0, g:mark_ns, g:mark_id, {})\n\" => [0, 2]\n```\n\nLANGUAGE: vim\nCODE:\n```\necho nvim_buf_get_extmarks(0, g:mark_ns, 0, -1, {})\n\" => [[1, 0, 2]]\n```\n\nLANGUAGE: vim\nCODE:\n```\necho nvim_buf_get_extmark_by_id(0, g:mark_ns, g:mark_id, {})\n\" => [0, 1]\n```\n\n----------------------------------------\n\nTITLE: Using wildcard to add directories to path (Vim)\nDESCRIPTION: This snippet shows how to use the `*` wildcard to add multiple subdirectories to the 'path' option, making Vim search within them for include files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n\":set path+=/usr/*/include\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lua Linting with Stylua in CMake\nDESCRIPTION: Creates a target for linting Lua files using stylua. The target checks Lua files in specified directories against stylua's formatting rules without modifying them.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nadd_glob_target(\n  TARGET lintlua-stylua\n  COMMAND ${STYLUA_PRG}\n  FLAGS --color=always --check --respect-ignores\n  GLOB_DIRS ${STYLUA_DIRS}\n  GLOB_PAT *.lua\n  TOUCH_STRATEGY PER_DIR)\n```\n\n----------------------------------------\n\nTITLE: Applying Text Edits in Neovim LSP (Lua)\nDESCRIPTION: Applies a list of text edits to a buffer. Takes an array of TextEdit objects, the buffer number, and the position encoding as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_45\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.util.apply_text_edits(text_edits, bufnr, position_encoding)\n```\n\n----------------------------------------\n\nTITLE: Lua Code Example for Treesitter Highlighting\nDESCRIPTION: This Lua code snippet demonstrates a simple function definition. It will be parsed by treesitter, and the identifiers `foo` and `bar` within the parameters will be highlighted based on the `@variable.parameter` capture in the associated query.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\n\"function f(foo, bar) end\"\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Quickfix List Entries in Vim Script\nDESCRIPTION: This Vim command executes a given command on each file in the quickfix list. It serves like a for-each loop over quickfix entries, using placeholder commands to iterate and execute. Ideal for batch processing files in a list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_26\n\nLANGUAGE: vimscript\nCODE:\n```\n:cfdo[!] {cmd}   Execute {cmd} in each file in the quickfix list.\nIt works like doing this: >\n  :cfirst\n  :{cmd}\n  :cnfile\n  :{cmd}\netc.\n```\n\n----------------------------------------\n\nTITLE: Getting Autocommands with Multiple Criteria in Lua\nDESCRIPTION: Example of using nvim_get_autocmds() with multiple criteria to retrieve autocommands. The first example shows matching all given criteria, while the second demonstrates retrieving all commands from a specific group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_87\n\nLANGUAGE: lua\nCODE:\n```\n-- Matches all criteria\nautocommands = vim.api.nvim_get_autocmds({\n  group = 'MyGroup',\n  event = {'BufEnter', 'BufWinEnter'},\n  pattern = {'*.c', '*.h'}\n})\n\n-- All commands from one group\nautocommands = vim.api.nvim_get_autocmds({\n  group = 'MyGroup',\n})\n```\n\n----------------------------------------\n\nTITLE: Expression Mapping Example in Neovim\nDESCRIPTION: This example illustrates how to create an expression mapping where the right-hand side (RHS) is evaluated to produce the actual mapping. It also shows the usage of script-local functions to avoid polluting the global namespace and potential issues with side effects.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\t:inoremap <expr> . <SID>InsertDot()\n\tfunc StoreColumn()\n\t  let g:column = col('.')\n\t  return 'x'\n\tendfunc\n\tnnoremap <expr> x StoreColumn()\n\tnmap ! f!x\n\tnmap ! f!<Ignore>x\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Directly Assigned to Dictionary - Vim Script\nDESCRIPTION: This snippet shows how to define an anonymous function directly assigned to a dictionary without the 'dict' attribute. This allows the function to obtain a reference via Funcref while using its own method of invoking.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_59\n\nLANGUAGE: vim\nCODE:\n```\n:let mydict = {'data': [0, 1, 2, 3]}\n:function mydict.len()\n:   return len(self.data)\n:endfunction\n:echo mydict.len()\n```\n\n----------------------------------------\n\nTITLE: Command Line Completion Examples in Neovim\nDESCRIPTION: Demonstrates file name and option completion using the Tab key.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:edit b<Tab>\n:edit i<Tab>\n:set isk<Tab>\n:set iskeyword=@,48-57,_,192-255\n```\n\n----------------------------------------\n\nTITLE: Handling Local Options\nDESCRIPTION: This snippet provides guidance on how local options work in Neovim, particularly in relation to windows and buffers. It discusses how local options are instantiated and manipulated when editing or splitting windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nSome of the options only apply to a window or buffer. Each window or buffer has its own copy of this option. When splitting a window, the local options are copied to the new window.\n```\n\n----------------------------------------\n\nTITLE: Using indexof() with string expressions and function references\nDESCRIPTION: Shows how to use the indexof() function which evaluates an expression for each item in a list or blob until it returns true. Examples demonstrate using a string expression to check an object property and using function references with different start indices.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_131\n\nLANGUAGE: vim\nCODE:\n```\nlet l = [#{n: 10}, #{n: 20}, #{n: 30}]\necho indexof(l, \"v:val.n == 20\")\necho indexof(l, {i, v -> v.n == 30})\necho indexof(l, \"v:val.n == 20\", #{startidx: 1})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Diagnostics - Lua\nDESCRIPTION: Fetches current diagnostic messages from a specified buffer. This function is essential for retrieving detailed information about existing diagnostics, allowing users to analyze and respond to issues in their code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nvim.diagnostic.get(bufnr, opts)\n```\n\n----------------------------------------\n\nTITLE: Insert mode abbreviation example\nDESCRIPTION: This snippet shows an example of how to create an insert mode abbreviation that inserts text and moves the cursor. It abbreviates 'if' to 'if ()' and places the cursor between the parentheses using `<Left>`.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_25\n\nLANGUAGE: Vim Script\nCODE:\n```\n:iab if if ()<Left>\n```\n\n----------------------------------------\n\nTITLE: Appending Items to Lists in Vimscript\nDESCRIPTION: The add() function appends an item to a List or Blob. It returns the modified List or Blob. For Lists, single items are appended as-is, even if they are Lists themselves.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimscript\nCODE:\n```\nlet alist = add([1, 2, 3], item)\n```\n\nLANGUAGE: vimscript\nCODE:\n```\ncall add(mylist, \"woodstock\")\n```\n\n----------------------------------------\n\nTITLE: Getting Current Diagnostics Count - Lua\nDESCRIPTION: Retrieves the current count of diagnostics present in a specified buffer or globally. It returns a table where the keys are severity levels and the values are counts, providing useful metrics for understanding the state of diagnostics in the editor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nvim.diagnostic.count(bufnr, opts)\n```\n\n----------------------------------------\n\nTITLE: Enable Experimental Vim Loader for Lua\nDESCRIPTION: Activates the new experimental Vim loader that byte-compiles and caches Lua files for improved loading efficiency. Requires a modification in the `init.lua` file during Nvim setup. This snippet enhances file loading performance by enabling the `vim.loader.enable` function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.loader.enable()\n```\n\n----------------------------------------\n\nTITLE: Reducing Collections with reduce() in Vim\nDESCRIPTION: Examples of using the reduce() function to process collections (lists, strings, blobs) by applying a function to accumulate results, including summation, concatenation, and conversion operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_203\n\nLANGUAGE: vim\nCODE:\n```\necho reduce([1, 3, 5], { acc, val -> acc + val })\necho reduce(['x', 'y'], { acc, val -> acc .. val }, 'a')\necho reduce(0z1122, { acc, val -> 2 * acc + val })\necho reduce('xyz', { acc, val -> acc .. ',' .. val })\n```\n\n----------------------------------------\n\nTITLE: Preserving cpoptions in VimScript\nDESCRIPTION: This snippet shows how to preserve and restore the 'cpoptions' setting to avoid side effects when using line continuation in a Vim script.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_30\n\nLANGUAGE: VimScript\nCODE:\n```\nlet s:save_cpo = &cpo\nset cpo&vim\n..\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n```\n\n----------------------------------------\n\nTITLE: Content-Based Filetype Detection for Script Files\nDESCRIPTION: Script to detect filetypes based on file contents rather than name. This example recognizes script files that start with a specific shebang line and sets their filetype appropriately.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\nif did_filetype()\n  finish\nendif\nif getline(1) =~ '^#!.*[/\\\\]xyz\\>'\n  setf xyz\nendif\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor Blinking in TUI\nDESCRIPTION: Command to enable cursor blinking in Neovim's TUI with customizable blink timing\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nset guicursor+=n-v-c:blinkon500-blinkoff500\n```\n\n----------------------------------------\n\nTITLE: Using nextgroup with skip options in Vim syntax\nDESCRIPTION: Example demonstrating the 'nextgroup' argument with 'skipwhite' and 'skipempty' to create a multi-line if-statement syntax. This allows highlighting to continue across lines and skip whitespace.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_163\n\nLANGUAGE: vim\nCODE:\n```\n:syn match ifstart \"\\<if.*\"    nextgroup=ifline skipwhite skipempty\n:syn match ifline  \"[^ \\t].*\" nextgroup=ifline skipwhite skipempty contained\n:syn match ifline  \"endif\"    contained\n```\n\n----------------------------------------\n\nTITLE: Copying v:event in TextYankPost Autocommand in Neovim VimL\nDESCRIPTION: This snippet shows how to properly copy the v:event dictionary in an autocommand. It uses deepcopy() to create a safe copy of the event data.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\nau TextYankPost * let g:foo = deepcopy(v:event)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Expansion in Neovim\nDESCRIPTION: This snippet explains how environment variables are expanded in specific string options within Neovim. It provides examples to illustrate how to use environment variables in setting options and the behavior of such expansion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set term=$TERM.new\n:set path=/usr/$INCLUDE,$HOME/include,.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buffer Number in Neovim using Vim Script\nDESCRIPTION: The 'bufnr' function returns the buffer number corresponding to a specified name, or creates a new buffer if the create argument is set to true.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\nbufnr([{buf} [, {create}])\n```\n\n----------------------------------------\n\nTITLE: Finding and Opening Files in Vim\nDESCRIPTION: This snippet explains how to find and open files within Vim using the ':find' and ':sfind' commands. It demonstrates how to specify file paths and use Vim's path option to locate files effectively.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:find inits.h\n```\n\nLANGUAGE: vim\nCODE:\n```\nvim \"+find stdio.h\"\n```\n\n----------------------------------------\n\nTITLE: Insert Mode Commands Reference\nDESCRIPTION: Lists all available commands and key combinations in Neovim's insert mode, including control sequences, special keys, and their corresponding actions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\n*index.txt*     Nvim\n\nCTRL-@ \t\tinsert previously inserted text and stop insert\nCTRL-A \t\tinsert previously inserted text\nCTRL-C \t\tquit insert mode, without checking for abbreviation\nCTRL-D \t\tdelete one shiftwidth of indent in the current line\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Sessions in Vim\nDESCRIPTION: This snippet demonstrates how to save the current session, switch to a different project, and load a previously saved session in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:wall\n:mksession! ~/.config/nvim/secret.vim\n:source ~/.config/nvim/boring.vim\n```\n\n----------------------------------------\n\nTITLE: Opening Quickfix Window in Vim Script\nDESCRIPTION: This command opens a dedicated window to show the current list of errors. It supports specifying window height and toggles the focus between existing and new quickfix windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_29\n\nLANGUAGE: vimscript\nCODE:\n```\n:cope[n] [height]   Open a window to show the current list of errors.\n```\n\n----------------------------------------\n\nTITLE: Using GDB for Crash Debugging\nDESCRIPTION: Commands for using GDB to debug Vim crashes in test files. Demonstrates how to run Vim under GDB with specific test parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd testdir\ngdb ../vim\nrun -u unix.vim -U NONE -s dotest.in test11.in\n```\n\n----------------------------------------\n\nTITLE: Using New Buffer Management Functions\nDESCRIPTION: Details the transition from deprecated buffer-related functions to their replacements. For example, vim.lsp.buf_get_clients() is replaced by vim.lsp.get_clients() with a buffer parameter for specific client queries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nvim.lsp.buf_get_clients()\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer-local Autocommands in Vim\nDESCRIPTION: Examples of defining buffer-local autocommands that are attached to specific buffers rather than matching patterns. Shows different ways to specify buffer targets.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_22\n\nLANGUAGE: viml\nCODE:\n```\n:au CursorHold <buffer>  echo 'hold'\n:au CursorHold <buffer=33>  echo 'hold'\n:au BufNewFile * au CursorHold <buffer=abuf>  echo 'hold'\n```\n\n----------------------------------------\n\nTITLE: Using Function References in Vim\nDESCRIPTION: Demonstrates how to create and use function references, allowing dynamic function calls based on conditions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n:let result = 0\t\t\" or 1\n:function! Right()\n:  return 'Right!'\n:endfunc\n:function! Wrong()\n:  return 'Wrong!'\n:endfunc\n:\n:if result == 1\n:  let Afunc = function('Right')\n:else\n:  let Afunc = function('Wrong')\n:endif\n:echo call(Afunc, [])\n```\n\n----------------------------------------\n\nTITLE: Treesitter Highlight Query Example\nDESCRIPTION: This snippet shows an example of a treesitter query used for syntax highlighting. It matches an `identifier` node inside a `parameters` node and assigns it to the `@variable.parameter` capture.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_13\n\nLANGUAGE: query\nCODE:\n```\n\"(parameters (identifier) @variable.parameter)\"\n```\n\n----------------------------------------\n\nTITLE: Previewing Location in Floating Window for Neovim LSP (Lua)\nDESCRIPTION: Previews a location in a floating window. Behavior depends on the type of location (Location or LocationLink).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_62\n\nLANGUAGE: lua\nCODE:\n```\npreview_location({location}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Search Behavior Settings\nDESCRIPTION: Commands to configure search wrapping and incremental search behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:set nowrapscan\n:set noincsearch\n```\n\n----------------------------------------\n\nTITLE: Syntax Group Sequencing in Vim\nDESCRIPTION: Illustrates how to define syntax matches with nextgroup and skipwhite arguments for sequential highlighting patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:syntax match xIf /if/ nextgroup=xIfCondition skipwhite\n:syntax match xIfCondition /([^)]*)/contained nextgroup=xThen skipwhite\n:syntax match xThen /then/ contained\n```\n\n----------------------------------------\n\nTITLE: Looping Over Dictionary Values in Vim\nDESCRIPTION: Demonstrates how to iterate over all values in a dictionary using the values() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_50\n\nLANGUAGE: vim\nCODE:\n```\n:for v in values(mydict)\n:   echo \"value: \" .. v\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Expression Execution in Vim Script\nDESCRIPTION: Shows how to execute expressions and Normal mode commands using :execute and :normal commands. Includes examples of string concatenation and special key handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_11\n\nLANGUAGE: viml\nCODE:\n```\n:execute \"tag \" .. tag_name\n:execute \"normal Inew text \\<Esc>\"\n```\n\n----------------------------------------\n\nTITLE: List and Dictionary Extension with extend()\nDESCRIPTION: Examples demonstrating how to extend lists and add items at specific positions using the extend() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_64\n\nLANGUAGE: vim\nCODE:\n```\necho sort(extend(mylist, [7, 5]))\ncall extend(mylist, [2, 3], 1)\nlet newlist = [1, 2, 3] + [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Creating Position Parameters in Neovim LSP (Lua)\nDESCRIPTION: Creates a TextDocumentPositionParams object for the current buffer and cursor position. Takes optional window ID and position encoding as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_57\n\nLANGUAGE: lua\nCODE:\n```\nmake_position_params({window}, {position_encoding})\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer-Local Options in Vim Filetype Plugins\nDESCRIPTION: This snippet shows how to use the :setlocal command to set options that only affect the current buffer in a filetype plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_45\n\nLANGUAGE: vim\nCODE:\n```\n:setlocal\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Mappings\nDESCRIPTION: Examples showing how to save and restore individual or multiple mappings using mapset.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_162\n\nLANGUAGE: vim\nCODE:\n```\nlet save_map = maparg('K', 'n', 0, 1)\nnnoremap K somethingelse\n\" ...\ncall mapset('n', 0, save_map)\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet save_maps = maplist()->filter(\n\t\t\t\\ {_, m -> m.lhs == 'K'})\nnnoremap K somethingelse\ncnoremap K somethingelse2\n\" ...\nunmap K\nfor d in save_maps\n    call mapset(d)\nendfor\n```\n\n----------------------------------------\n\nTITLE: Reading Binary Data from Files with readblob() in Vim\nDESCRIPTION: Examples of reading binary data from files using the readblob() function, including reading from specific offsets, reading limited sizes, and reading from character devices.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_200\n\nLANGUAGE: vim\nCODE:\n```\necho readblob('file.bin', -12)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho readblob('file.bin', 0, 100)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho readblob('/dev/ttyS0', 0, 10)\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in Vim Patterns\nDESCRIPTION: Demonstrates how to use the \\| operator to match alternative patterns in Vim searches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n/foo\\|bar\n/one\\|two\\|three\n/\\(foo\\|bar\\)\\+\n/end\\(if\\|while\\|for\\)\n```\n\n----------------------------------------\n\nTITLE: Vim Visual Search Mapping\nDESCRIPTION: A mapping that enables searching for selected text in Visual mode using the y register\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:vmap X y/<C-R>\"<CR>\n```\n\n----------------------------------------\n\nTITLE: Basic Help Navigation Commands in Nvim\nDESCRIPTION: Essential commands for navigating in Nvim and its help system, including movement keys, closing windows, jumping to topics, and searching for help.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/help.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\nMove around:  Use the cursor keys, or \"h\" to go left, \"j\" to go down, \"k\" to go up, \"l\" to go right.\nClose this window:  Use \":q<Enter>\".\nGet out of Vim:  Use \":qa!<Enter>\" (careful, all changes are lost!).\n\nJump to a subject:  Position the cursor on a tag (e.g. |bars|) and hit CTRL-].\nWith the mouse:  Double-click the left mouse button on a tag, e.g. |bars|.\nJump back:  Type CTRL-O.  Repeat to go further back.\n\nSearch for help:  Type \":help word\", then hit CTRL-D to see matching help entries for \"word\".\nOr use \":helpgrep word\". |:helpgrep|\n```\n\n----------------------------------------\n\nTITLE: Jumping to Function Definition\nDESCRIPTION: Demonstrates Vim commands for navigating to function definitions using tags, including using :tag and CTRL-] commands to explore code structure\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:tag startlist\nCTRL-]\n```\n\n----------------------------------------\n\nTITLE: Vim line types visualization showing buffer, logical, window and screen lines\nDESCRIPTION: ASCII diagram illustrating the four types of lines in Vim (buffer lines, logical lines, window lines, and screen lines) and how they relate to folding and display.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n  buffer lines    logical lines   window lines    screen lines\n  -----------------------------------------------------------------------\n  1. one          1. one          1. +-- folded   1.  +-- folded\n  2. two          2. +-- folded   2. five         2.  five\n  3. three        3. five         3. six          3.  six\n  4. four         4. six          4. seven        4.  seven\n  5. five         5. seven                        5.  === status line ===\n  6. six                                          6.  aaa\n  7. seven                                        7.  bbb\n                                                  8.  ccc ccc c\n  1. aaa          1. aaa          1. aaa          9.  cc\n  2. bbb          2. bbb          2. bbb          10. ddd\n  3. ccc ccc ccc  3. ccc ccc ccc  3. ccc ccc c    11. ~\n  4. ddd          4. ddd          4. cc           12. === status line ===\n                                  5. ddd          13. (command line)\n                                  6. ~\n```\n\n----------------------------------------\n\nTITLE: Configuring a scratch buffer in Vim\nDESCRIPTION: This code sets up a scratch buffer, which is used for temporary text that can be discarded. It sets the buffer type to 'nofile', hides the buffer instead of unloading it when it's no longer displayed, and disables the swap file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_9\n\nLANGUAGE: vimdoc\nCODE:\n```\n:setlocal buftype=nofile\n:setlocal bufhidden=hide\n:setlocal noswapfile\n```\n\n----------------------------------------\n\nTITLE: Navigation Between Jumping Positions\nDESCRIPTION: Demonstrates using commands to navigate between different cursor positions, including jumping to line numbers, searching, and using CTRL-O and CTRL-I for older and newer positions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n33G\n/^The\nCTRL-O\n```\n\n----------------------------------------\n\nTITLE: Help Context Prefixes in Nvim\nDESCRIPTION: Prefixes to use with the :help command to specify different contexts for help topics, such as normal mode commands, visual mode commands, and options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/help.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\nWHAT\t\t\tPREPEND    EXAMPLE\t~\nNormal mode command\t\t   :help x\nVisual mode command\ti_\t   :help v_u\nInsert mode command\ti_\t   :help i_<Esc>\nCommand-line command\t:\t   :help :quit\nCommand-line editing\tc_\t   :help c_<Del>\nVim command argument\t-\t   :help -r\nOption\t\t\t'\t   :help 'textwidth'\nRegular expression\t/\t   :help /[\n```\n\n----------------------------------------\n\nTITLE: Splitting Filetype Detection Across Different Files\nDESCRIPTION: Example showing how to split filetype detection rules across primary and 'after' directories to control precedence. The first file detects text files while the second handles script files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\naugroup filetypedetect\nau BufNewFile,BufRead *.txt\t\t\tsetf text\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Opening the Command Line Window in Vim\nDESCRIPTION: This snippet shows how to open the command line window in Vim using the `q:` command.  The command line window allows you to edit previous commands using normal mode commands before executing them.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\tq:\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Patterns for Syntax Highlighting in Vim\nDESCRIPTION: These snippets demonstrate how to define sync patterns for syntax highlighting in Vim. They show the usage of 'grouphere' and 'groupthere' arguments to specify syntax groups for parsing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_178\n\nLANGUAGE: viml\nCODE:\n```\n:syntax sync match {sync-group-name} grouphere {group-name} \"pattern\" ..\n\n:syntax sync match {sync-group-name} groupthere {group-name} \"pattern\" ..\n```\n\n----------------------------------------\n\nTITLE: Quitting all windows\nDESCRIPTION: Closes all windows. If any windows contain unsaved changes, Vim will not exit, and the cursor will be placed in the window with changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n\t:qall\n```\n\n----------------------------------------\n\nTITLE: Allargs Command with Complex Argument Handling\nDESCRIPTION: Demonstrates advanced command creation using <q-args> to execute a command across multiple files in the argument list\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\nfunction Allargs(command)\n   let i = 0\n   while i < argc()\n     if filereadable(argv(i))\n        execute \"e \" .. argv(i)\n        execute a:command\n     endif\n     let i = i + 1\n   endwhile\nendfunction\ncommand -nargs=+ -complete=command Allargs call Allargs(<q-args>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Slow Month Completion Function in Vim\nDESCRIPTION: This function demonstrates a custom completion function for month names that simulates a slow search process. It uses complete_add() and complete_check() to handle incremental completion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nfun! CompleteMonths(findstart, base)\n  if a:findstart\n    \" locate the start of the word\n    let line = getline('.')\n    let start = col('.') - 1\n    while start > 0 && line[start - 1] =~ '\\a'\n      let start -= 1\n    endwhile\n    return start\n  else\n    \" find months matching with \"a:base\"\n    for m in split(\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\")\n      if m =~ '^' .. a:base\n        call complete_add(m)\n      endif\n      sleep 300m\t\" simulate searching for next match\n      if complete_check()\n        break\n      endif\n    endfor\n    return []\n  endif\nendfun\nset completefunc=CompleteMonths\n```\n\n----------------------------------------\n\nTITLE: Integrating Treesitter Features in Neovim Using Lua\nDESCRIPTION: The 'vim.treesitter.get_node()' function is enhanced to include an option for returning anonymous nodes, enriching the capabilities of node retrieval with Treesitter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nvim.treesitter.get_node({ include_anonymous = true })\n```\n\n----------------------------------------\n\nTITLE: Defining Function Breakpoint\nDESCRIPTION: This command sets a breakpoint in the function named 'Explore'. When the 'Explore' function is called, the debugger will halt execution. This allows examination of the function's behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n\":breakadd func Explore\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Function Keys in Vim\nDESCRIPTION: Demonstrates how to create mappings using function keys in Vim. It includes examples of keyboard mappings and shows the expected behavior when triggering those mappings with counts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n:map <F3>  o#include\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map <M-g> /foo<CR>cwbar<Esc>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map _x    d/END/e<CR>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map! qq   quadrillion questions\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map <F4>  3w\n```\n\nLANGUAGE: vim\nCODE:\n```\n:map <F4>  @='3w'<CR>\n```\n\n----------------------------------------\n\nTITLE: Emulating 'insertmode' in Neovim using Vimscript and Lua\nDESCRIPTION: This code snippet provides a way to emulate Vim's 'insertmode' option in Neovim using a combination of autocmds, key mappings, and a Lua function. It starts insert mode automatically and handles various mode transitions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nautocmd BufWinEnter * startinsert\ninoremap <Esc> <C-X><C-Z><C-]>\ninoremap <C-C> <C-X><C-Z>\ninoremap <C-L> <C-X><C-Z><C-]><Esc>\ninoremap <C-Z> <C-X><C-Z><Cmd>suspend<CR>\nnoremap <C-C> <Esc>\nsnoremap <C-C> <Esc>\nnoremap <C-\\><C-G> <C-\\><C-N><Cmd>startinsert<CR>\ncnoremap <C-\\><C-G> <C-\\><C-N><Cmd>startinsert<CR>\ninoremap <C-\\><C-G> <C-X><C-Z>\nautocmd CmdwinEnter * noremap <buffer> <C-C> <C-C>\nautocmd CmdwinEnter * inoremap <buffer> <C-C> <C-C>\n\nlua << EOF\n  vim.on_key(function(c)\n    if c == '\\27' then\n      local mode = vim.api.nvim_get_mode().mode\n      if mode:find('^[nvV\\22sS\\19]') and vim.fn.getcmdtype() == '' then\n        vim.schedule(function()\n          vim.cmd('startinsert')\n        end)\n      end\n    end\n  end)\nEOF\n```\n\n----------------------------------------\n\nTITLE: Visual Mode Range Selection in Vim Script\nDESCRIPTION: Illustrates selecting a range of lines in Visual mode and using colon commands on that selection. The '<' and '>' marks define the start and end of the visually selected range, allowing line-based operations. Expected input is a line selection command, with outputs being modifications to those selected lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_4\n\nLANGUAGE: Vim Script\nCODE:\n```\n\n  :'<,'>\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer-Local Mappings in Vim Filetype Plugins\nDESCRIPTION: This snippet shows how to create mappings that only work in the current buffer using the :map <buffer> command in a filetype plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_47\n\nLANGUAGE: vim\nCODE:\n```\n:map <buffer>\n```\n\n----------------------------------------\n\nTITLE: Performing Substitution with Ranges in Neovim\nDESCRIPTION: This snippet demonstrates how to perform a substitution operation over a specific range of lines using the ':substitute' command. This technique is useful for applying changes only within delimited sections of a file, improving the specificity of large-scale text edits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_2\n\nLANGUAGE: Vimscript\nCODE:\n```\n:[range]substitute/from/to/[flags]\n```\n\n----------------------------------------\n\nTITLE: Multi-Item Matching in Vim\nDESCRIPTION: This snippet explains how to utilize multi-item matching expressions in Vim regex to repeat patterns a specified number of times. It illustrates variations for greedy and non-greedy matching with examples of common usage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n5. Multi items\t\t\t*pattern-multi-items*\n\nAn atom can be followed by an indication of how many times the atom can be\nmatched and in what way.  This is called a multi.  See |/multi| for an\noverview.\n\n\t\t\t\t*/star* */\\star*\n*\\t(use \\* when 'magic' is not set)\n\\t\tMatches 0 or more of the preceding atom, as many as possible.\n\\t\\tExample  'nomagic'\\tmatches ~\n\\ta*\\t\\ta\\*\\t\\t\"\", \"a\", \"aa\", \"aaa\", etc.\n\\t.*\\t\\t\\.\\*\\t\\tanything, also an empty string, no end-of-line\n\\t\\_.*\\t\\t\\_.\\*\\teverything up to the end of the buffer\n\\t\\_.*END\\t\\_.\\*END\\teverything up to and including the last \"END\"\n\\t\\tin the buffer\n\n\\t\\tException: When \"*\" is used at the start of the pattern or just after\n\\t\"^\" it matches the star character.\n\n\\t\\tBe aware that repeating \"\\_.\" can match a lot of text and take a long\ntime.  For example, \"\\_.*END\" matches all text from the current\n\\tposition to the last occurrence of \"END\" in the file.  Since the \"*\"\nwills match as many as possible, this first skips over all lines until\n\\tthe end of the file and then tries matching \"END\", backing up one\n\\tcharacter at a time.\n```\n\n----------------------------------------\n\nTITLE: Setting Option Value - Lua\nDESCRIPTION: Sets the value of a specific option within Neovim, allowing the modification of both global and local settings depending on the provided parameters. It's crucial for dynamically updating configuration within Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_51\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_option_value({name}, {value}, {opts})  -- Sets a new value for a specified option\n```\n\n----------------------------------------\n\nTITLE: Parsing Buffer with TreeSitter LanguageTree in Lua\nDESCRIPTION: Shows how to parse a buffer using a LanguageTree object to access the current syntax tree. This method returns a table of immutable tree objects representing the current state of the buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nlocal tree = parser:parse({ start_row, end_row })\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionaries in Vim\nDESCRIPTION: Demonstrates how to create dictionaries with key-value pairs using curly braces syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\n:let mydict = {1: 'one', 2: 'two', 3: 'three'}\n:let emptydict = {}\n```\n\n----------------------------------------\n\nTITLE: Controlling Match Start and End Positions\nDESCRIPTION: Explains zero-width assertions (\\zs and \\ze) to define where a match should start or end within a pattern. Useful for focusing search results on specific parts of the text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_16\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\zs\"\n\"\\\\ze\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over List Items in Vim Script\nDESCRIPTION: Demonstrates how to use a for loop to iterate over items in a list, assigning each item to multiple variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_104\n\nLANGUAGE: vim\nCODE:\n```\n:for [lnum, col] in [[1, 3], [2, 5], [3, 8]]\n   :echo getline(lnum)[col]\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Getting Option Value - Lua\nDESCRIPTION: Obtains the current value of a specified option, respecting its local or global scope. This function is essential for querying the current state of options during Neovim sessions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_50\n\nLANGUAGE: lua\nCODE:\n```\nnvim_get_option_value({name}, {opts})  -- Retrieves the value of an option, using order of local and global\n```\n\n----------------------------------------\n\nTITLE: Handling LspTokenUpdate event in Lua\nDESCRIPTION: This snippet shows how to handle the LspTokenUpdate event, which is triggered when a visible semantic token is sent or updated by the LSP server.  It highlights mutable variables with a custom highlight group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('LspTokenUpdate', {\n  callback = function(args)\n    local token = args.data.token\n    if token.type == 'variable' and not token.modifiers.readonly then\n      vim.lsp.semantic_tokens.highlight_token(\n        token, args.buf, args.data.client_id, 'MyMutableVariableHighlight'\n      )\n    end\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Linting Events in Neovim (Lua)\nDESCRIPTION: This snippet configures the events that trigger query linting for treesitter queries.  It sets `vim.g.query_lint_on` to a table containing `'InsertLeave'` and `'TextChanged'`, meaning linting will occur when leaving insert mode and after text changes. Requires treesitter and the query plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\n\tvim.g.query_lint_on = { 'InsertLeave', 'TextChanged' }\n```\n\n----------------------------------------\n\nTITLE: Multiple Tags Files Configuration\nDESCRIPTION: Setting the 'tags' option to search for tags files in multiple directories, allowing comprehensive code navigation across different project structures\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set tags=./tags,./../tags,./*/tags\n:set tags=~/proj/**/tags\n```\n\n----------------------------------------\n\nTITLE: Accessing String or List Items by Index in Neovim\nDESCRIPTION: Shows how to access individual bytes in a string or items in a list using array notation. Includes a practical example for getting the character under the cursor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_73\n\nLANGUAGE: vim\nCODE:\n```\n:let c = getline(\".\")[col(\".\") - 1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Syntax Highlighting Options\nDESCRIPTION: Sets various options for Vim syntax highlighting, including synchronization minlines and maxlines, embedded script highlighting, folding, and error highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_151\n\nLANGUAGE: vim\nCODE:\n```\ng:vimsyn_minlines : used to set synchronization minlines\ng:vimsyn_maxlines : used to set synchronization maxlines\n\ng:vimsyn_embed == 0      : disable (don't embed any scripts)\ng:vimsyn_embed == 'lpPr' : support embedded Lua, Perl, Python and Ruby\n\ng:vimsyn_folding == 0 or doesn't exist: no syntax-based folding\ng:vimsyn_folding =~ 'a' : fold augroups\ng:vimsyn_folding =~ 'f' : fold functions\ng:vimsyn_folding =~ 'h' : fold heredocs\ng:vimsyn_folding =~ 'l' : fold Lua      script\ng:vimsyn_folding =~ 'p' : fold Perl     script\ng:vimsyn_folding =~ 'P' : fold Python   script\ng:vimsyn_folding =~ 'r' : fold Ruby     script\n\nlet g:vimsyn_noerror = 1\n```\n\n----------------------------------------\n\nTITLE: Directory Search with Depth Argument\nDESCRIPTION: The function |vim.fs.dir()| has been updated to include an `opts` argument featuring a depth field, enabling recursive directory tree searches. This allows more granular control over directory explorations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Setting Buffer-Local Keymap in Lua\nDESCRIPTION: Sets a buffer-local mapping for the given mode. Takes parameters for buffer id, mode, left-hand side, right-hand side, and options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_56\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_set_keymap({buffer}, {mode}, {lhs}, {rhs}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Replacing an operator with a Unicode glyph using Treesitter\nDESCRIPTION: This snippet shows how to replace the `!=` operator with a Unicode glyph (≠) while maintaining the same highlighting as other operators. The `(#set! conceal \"≠\")` replaces the content of the node with the specified Unicode glyph.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n    \"!=\" @operator (#set! conceal \"≠\")\n\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operator in Neovim Vimscript\nDESCRIPTION: Demonstrates how to use the ternary conditional operator in Neovim, with both a single-line format and a more readable multi-line format using line-continuation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_67\n\nLANGUAGE: vim\nCODE:\n```\n:echo lnum == 1 ? \"top\" : lnum == 1000 ? \"last\" : lnum\n```\n\nLANGUAGE: vim\nCODE:\n```\n:echo lnum == 1\n:\\\t? \"top\"\n:\\\t: lnum == 1000\n:\\\t\t? \"last\"\n:\\\t\t: lnum\n```\n\n----------------------------------------\n\nTITLE: Common Dictionary Functions in Vim - Vim Script\nDESCRIPTION: This snippet illustrates several common operations that can be performed on a dictionary in Vim, such as checking for keys, counting items, and generating string representations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_60\n\nLANGUAGE: vim\nCODE:\n```\n:if has_key(dict, 'foo')  \" TRUE if dict has entry with key \"foo\"\n:if empty(dict)           \" TRUE if dict is empty\n:let l = len(dict)       \" number of items in dict\n:let big = max(dict)     \" maximum value in dict\n:let small = min(dict)   \" minimum value in dict\n:let xs = count(dict, 'x')\" count nr of times 'x' appears in dict\n:let s = string(dict)    \" String representation of dict\n:call map(dict, '\">> \" .. v:val')  \" prepend \">> \" to each item\n```\n\n----------------------------------------\n\nTITLE: Treesitter Parse Tree Example\nDESCRIPTION: This is an example of a treesitter parse tree.  It visually represents the structure of the Lua code snippet provided. This allows developers to create precise highlight queries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_15\n\nLANGUAGE: query\nCODE:\n```\n\"(function_declaration ; [1:1 - 24]\\n  name: (identifier) ; [1:10 - 10]\\n  parameters: (parameters ; [1:11 - 20]\\n    name: (identifier) ; [1:12 - 14]\\n    name: (identifier))) ; [1:17 - 19])\"\n```\n\n----------------------------------------\n\nTITLE: Enable LSP Server on Buffer Open in Lua\nDESCRIPTION: Enables an LSP server for automatic starting when a buffer is opened, using configurations defined in `vim.lsp.config`. Demonstrated through examples of enabling specific clients like 'clangd'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\nenable({name}, {enable})                                    *vim.lsp.enable()*\n    Enable an LSP server to automatically start when opening a buffer.\n\n    Examples: >lua\n          vim.lsp.enable('clangd')\n\n          vim.lsp.enable({'luals', 'pyright'})\n<\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Filetype Plugin in Vim\nDESCRIPTION: This snippet shows how to disable loading the default filetype plugin completely by setting a buffer-local variable in a custom filetype plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_43\n\nLANGUAGE: vim\nCODE:\n```\nlet b:did_ftplugin = 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating matchstr() in Vim\nDESCRIPTION: These snippets show various uses of the matchstr() function to extract substrings based on pattern matching, including examples with different start positions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_171\n\nLANGUAGE: vim\nCODE:\n```\necho matchstr(\"testing\", \"ing\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchstr(\"testing\", \"ing\", 2)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchstr(\"testing\", \"ing\", 5)\n```\n\n----------------------------------------\n\nTITLE: Setting the Current Buffer - Lua\nDESCRIPTION: This API call sets the current window's buffer to a specified buffer ID. It cannot be executed when text lock is active.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_current_buf({buffer})\n```\n\n----------------------------------------\n\nTITLE: Detecting Floating Windows in Neovim\nDESCRIPTION: Code snippet showing how to check if a window is floating using the nvim_win_get_config API\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nif vim.api.nvim_win_get_config(window_id).relative ~= '' then\n  -- window with this window_id is floating\nend\n```\n\n----------------------------------------\n\nTITLE: Asserting Command Failure with Exception Check\nDESCRIPTION: Demonstrates how to use assert_fails() and assert_exception() to verify that a command throws a specific error\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\ntry\n  commandthatfails\n  call assert_false(1, 'command should have failed')\ncatch\n  call assert_exception('E492:')\nendtry\n```\n\n----------------------------------------\n\nTITLE: Using Repetition Patterns in Vim Search\nDESCRIPTION: Various repetition pattern modifiers that allow matching patterns multiple times. These include asterisk (*), plus (\\+), and optional (\\=) operators for flexible pattern matching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n/a*\n```\n\nLANGUAGE: vim\nCODE:\n```\n/\\(ab\\)*\n```\n\nLANGUAGE: vim\nCODE:\n```\n/ab\\+\n```\n\nLANGUAGE: vim\nCODE:\n```\n/folders\\=\n```\n\n----------------------------------------\n\nTITLE: Reading and Processing Files with readfile() in Vim\nDESCRIPTION: Example of using the readfile() function to read a limited number of lines from a file and process them, specifically searching for lines containing 'Date'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_202\n\nLANGUAGE: vim\nCODE:\n```\nfor line in readfile(fname, '', 10)\n  if line =~ 'Date' | echo line | endif\nendfor\n```\n\n----------------------------------------\n\nTITLE: Portable Neovim Configuration Setup\nDESCRIPTION: This snippet provides a solution for sharing Neovim configurations across multiple machines, including different OS setups. It uses a source command in Windows to reference a main configuration file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nsource ~/.config/nvim/init.vim\n```\n\n----------------------------------------\n\nTITLE: Character Class Matching\nDESCRIPTION: Describes matching using pre-defined character classes such as '\\i', '\\k', '\\f', which are defined in Vim options, supporting both single-byte and multibyte characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_23\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\i\"\n\"\\\\I\"\n\"\\\\k\"\n\"\\\\K\"\n\"\\\\f\"\n\"\\\\F\"\n\"\\\\p\"\n\"\\\\P\"\n```\n\n----------------------------------------\n\nTITLE: Using input() with file completion\nDESCRIPTION: Demonstrates using input() with completion support, specifically for file paths. This allows users to use tab completion when entering a filename.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_134\n\nLANGUAGE: vim\nCODE:\n```\nlet fname = input(\"File: \", \"\", \"file\")\n```\n\n----------------------------------------\n\nTITLE: Managing Vim Sessions\nDESCRIPTION: Demonstrates creating, saving, and restoring Vim editing sessions across different instances and startup scenarios\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:mksession vimbook.vim\n:source vimbook.vim\nvim -S vimbook.vim\n:set sessionoptions+=resize\n```\n\n----------------------------------------\n\nTITLE: Executing Global Commands in Vim Script\nDESCRIPTION: Details the functionality of the ':global' command in Vim, used for applying commands over a pattern match across the entire text file. Dependencies include understanding of pattern matching and Vim's substitute commands. Expected inputs include pattern expressions and commands wrapped in global syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_6\n\nLANGUAGE: Vim Script\nCODE:\n```\n\n  :[range]global/{pattern}/{command}\n```\n\n----------------------------------------\n\nTITLE: Creating Window-Relative Float in Lua\nDESCRIPTION: Creates a floating window positioned relative to the current window with specific dimensions and position offsets.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_79\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_open_win(0, false, \n  {relative='win', row=3, col=3, width=12, height=3})\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Pattern in Vim Script\nDESCRIPTION: Demonstrates object-oriented programming patterns using dictionaries as objects with inheritance via copying.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_25\n\nLANGUAGE: viml\nCODE:\n```\n:let transdict = {}\n:function transdict.translate(line) dict\n:  return join(map(split(a:line), 'get(self.words, v:val, \"???\")'))\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Using Mappings with Counts\nDESCRIPTION: Explains how to effectively use counts in mappings and how they interact with the custom defined mappings for repeatable commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n:map <F4> @='3w'<CR>\n```\n\n----------------------------------------\n\nTITLE: Visual Mode Block Selection in Neovim\nDESCRIPTION: Shows how to use CTRL-V for block-wise visual selection to manipulate columnar text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_3\n\nLANGUAGE: vimdoc\nCODE:\n```\nname        Q1      Q2      Q3\npierre      123     455     234\njohn        0       90      39\nsteve       392     63      334\n```\n\n----------------------------------------\n\nTITLE: Change Operator Usage in Neovim\nDESCRIPTION: Shows how to use the change operator 'c' to modify text, including examples of changing words and dealing with whitespace behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\nTo err is human\nc2wbe<Esc>\nTo be human\n```\n\n----------------------------------------\n\nTITLE: Setting the Current Directory in Vim\nDESCRIPTION: Demonstrates command usage for setting Vim's current directory to simplify file paths. The ':cd' command changes the current directory, while ':lcd' sets a local directory for a window. ':pwd' displays the current directory, and 'cd -' reverts to the previous directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_1\n\nLANGUAGE: VimScript\nCODE:\n```\n:cd VeryLongFileName\\n:edit file1.txt\\n:edit file2.txt\\n:edit file3.txt\\n:pwd\\n/home/Bram/VeryLongFileName\\n:cd /etc\\n:pwd\\n/etc\\n:cd -\\n:pwd\\n/home/Bram/VeryLongFileName\\n:cd -\\n:pwd\\n/etc\n```\n\n----------------------------------------\n\nTITLE: Window Execute Command Example\nDESCRIPTION: Demonstrates how to execute a command in the context of a specific window using win_execute().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_284\n\nLANGUAGE: vim\nCODE:\n```\ncall win_execute(winid, 'syntax enable')\n```\n\n----------------------------------------\n\nTITLE: Using input() with inputsave() and inputrestore() in a mapping\nDESCRIPTION: Shows how to properly use input() within a mapping by using inputsave() and inputrestore() to preserve and restore typeahead. This prevents the mapping from consuming characters meant for the input function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_136\n\nLANGUAGE: vim\nCODE:\n```\nnmap \\x :call GetFoo()<CR>:exe \"/\" .. Foo<CR>\nfunction GetFoo()\n  call inputsave()\n  let g:Foo = input(\"enter search pattern: \")\n  call inputrestore()\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists with sort Function in Neovim\nDESCRIPTION: Demonstrates various ways to sort lists using the sort function in Neovim, including case-insensitive sorting, locale-based sorting, and custom comparison functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_247\n\nLANGUAGE: vim\nCODE:\n```\nfunc MyCompare(i1, i2)\n   return a:i1 == a:i2 ? 0 : a:i1 > a:i2 ? 1 : -1\nendfunc\neval mylist->sort(\"MyCompare\")\n\nfunc MyCompare(i1, i2)\n   return a:i1 - a:i2\nendfunc\n\neval mylist->sort({i1, i2 -> i1 - i2})\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Matching with matchfuzzy() in Vim\nDESCRIPTION: Demonstrates various uses of matchfuzzy() for fuzzy matching strings and dictionaries. It can be used with buffer names, file names, and custom data structures.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_167\n\nLANGUAGE: vim\nCODE:\n```\necho matchfuzzy([\"clay\", \"crow\"], \"cay\")\n\n```\n\nLANGUAGE: vim\nCODE:\n```\necho getbufinfo()->map({_, v -> v.name})->matchfuzzy(\"ndl\")\n\n```\n\nLANGUAGE: vim\nCODE:\n```\necho getbufinfo()->matchfuzzy(\"ndl\", {'key' : 'name'})\n\n```\n\nLANGUAGE: vim\nCODE:\n```\necho getbufinfo()->matchfuzzy(\"spl\",\n\t\t\t\t\t\\ {'text_cb' : {v -> v.name}})\n\n```\n\nLANGUAGE: vim\nCODE:\n```\necho v:oldfiles->matchfuzzy(\"test\")\n\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet l = readfile(\"buffer.c\")->matchfuzzy(\"str\")\n\n```\n\nLANGUAGE: vim\nCODE:\n```\necho ['one two', 'two one']->matchfuzzy('two one')\n\n```\n\nLANGUAGE: vim\nCODE:\n```\necho ['one two', 'two one']->matchfuzzy('two one',\n\t\t\t\t\t\\ {'matchseq': 1})\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Diagnostic Handler with Notifications\nDESCRIPTION: Example of creating a custom diagnostic handler that uses vim.notify() to display diagnostic information\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nvim.diagnostic.handlers[\"my/notify\"] = {\n  show = function(namespace, bufnr, diagnostics, opts)\n    local level = opts[\"my/notify\"].log_level\n\n    local name = vim.diagnostic.get_namespace(namespace).name\n    local msg = string.format(\"%d diagnostics in buffer %d from %s\",\n                              #diagnostics,\n                              bufnr,\n                              name)\n    vim.notify(msg, level)\n  end,\n}\n\nvim.diagnostic.config({\n  [\"my/notify\"] = {\n    log_level = vim.log.levels.INFO,\n    severity = vim.diagnostic.severity.ERROR,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous File Reading in Lua with Luv\nDESCRIPTION: A function that reads a file asynchronously using Luv's file system operations. It uses callbacks to handle each step of the process: opening the file, getting stats, reading the content, and closing the file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_45\n\nLANGUAGE: lua\nCODE:\n```\nlocal function readFile(path, callback)\n  uv.fs_open(path, \"r\", 438, function(err, fd)\n    assert(not err, err)\n    uv.fs_fstat(fd, function(err, stat)\n      assert(not err, err)\n      uv.fs_read(fd, stat.size, 0, function(err, data)\n        assert(not err, err)\n        uv.fs_close(fd, function(err)\n          assert(not err, err)\n          return callback(data)\n        end)\n      end)\n    end)\n  end)\nend\n\nreadFile(\"main.lua\", function(data)\n  print(\"asynchronous read\", data)\nend)\n```\n\n----------------------------------------\n\nTITLE: Quitting all without saving\nDESCRIPTION: Quits Vim and discards all changes without saving. This command should be used with caution.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n\t:qall!\n```\n\n----------------------------------------\n\nTITLE: Custom Search Direction Mapping - Vim\nDESCRIPTION: Creates custom mappings for ; and , keys that maintain consistent forward/backward search direction using getcharsearch().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_86\n\nLANGUAGE: vim\nCODE:\n```\nnnoremap <expr> ; getcharsearch().forward ? ';' : ','\nnnoremap <expr> , getcharsearch().forward ? ',' : ';'\n```\n\n----------------------------------------\n\nTITLE: Handling Buffered Output in Ruby with Job Control\nDESCRIPTION: Example demonstrating how to handle buffered output in Ruby when using Neovim job control, including auto-flushing configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nfunction! Receive(job_id, data, event)\n  echom printf('%s: %s',a:event,string(a:data))\nendfunction\ncall jobstart(['ruby', '-e',\n  \\ '$stdout.sync = true; 5.times do sleep 1 and puts \"Hello Ruby!\" end'],\n  \\ {'on_stdout': 'Receive'})\n```\n\n----------------------------------------\n\nTITLE: Using Curly Braces for Dynamic Variable Names in Vim\nDESCRIPTION: Examples of using curly braces to create dynamic variable names in Vim. This allows referencing variables whose names are constructed at runtime by evaluating expressions inside braces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_88\n\nLANGUAGE: viml\nCODE:\n```\necho my_{&background}_message\n```\n\nLANGUAGE: viml\nCODE:\n```\necho my_{adverb}_{adjective}_message\n```\n\nLANGUAGE: viml\nCODE:\n```\necho my_{ad{end_of_word}}_message\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let foo='a + b'\n:echo c{foo}d\n```\n\n----------------------------------------\n\nTITLE: Defining Autoload Variables in Vim\nDESCRIPTION: This snippet shows how to define variables in a library script that uses the autoload mechanism in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_60\n\nLANGUAGE: vim\nCODE:\n```\nlet dutch#weekdays = ['zondag', 'maandag', 'dinsdag', 'woensdag',\n    \\ 'donderdag', 'vrijdag', 'zaterdag']\n```\n\n----------------------------------------\n\nTITLE: Using matchstrlist() in Vim\nDESCRIPTION: These examples demonstrate the use of matchstrlist() function to perform pattern matching on lists of strings, including an example with submatch information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_172\n\nLANGUAGE: vim\nCODE:\n```\necho matchstrlist(['tik tok'], '\\<\\k\\+\\>')\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchstrlist(['a', 'b'], '\\<\\k\\+\\>')\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchstrlist(['acd'], '\\(a\\)\\?\\(b\\)\\?\\(c\\)\\?\\(.*\\)',\n\t\t\t\t\t\\ #{submatches: v:true})\n```\n\n----------------------------------------\n\nTITLE: String Pattern Matching in Vim\nDESCRIPTION: Demonstrates pattern matching behavior with newlines in strings using matchstr() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_297\n\nLANGUAGE: vim\nCODE:\n```\nlet a = \"aaaa\\nxxxx\"\necho matchstr(a, \"..\\n..\")\necho matchstr(a, \"a.x\")\n```\n\n----------------------------------------\n\nTITLE: Using CTRL-W } to view function definition in preview window (Vim)\nDESCRIPTION: This snippet shows how to use the CTRL-W } command in Vim to display the definition of a function in the preview window. The function name needs to be under the cursor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\"CTRL-W }\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Window Layout in Vim\nDESCRIPTION: These snippets demonstrate the use of winlayout() function to retrieve the layout of windows in a tabpage. It shows different scenarios including single window, horizontally split windows, and complex layouts with nested splits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_287\n\nLANGUAGE: vim\nCODE:\n```\n\" Only one window in the tab page\necho winlayout()\n```\n\nLANGUAGE: vim\nCODE:\n```\n\" Two horizontally split windows\necho winlayout()\n```\n\nLANGUAGE: vim\nCODE:\n```\n\" The second tab page, with three horizontally split\n\" windows, with two vertically split windows in the\n\" middle window\necho winlayout(2)\n```\n\n----------------------------------------\n\nTITLE: Deleting Files - Lua\nDESCRIPTION: The delete function removes a file specified by its name. It can handle symbolic links, and different flags allow for directory removals under certain conditions. The return value indicates whether the deletion was successful.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_46\n\nLANGUAGE: lua\nCODE:\n```\ndelete({fname} [, {flags}])                                           *delete()*\n\t\tWithout {flags} or with {flags} empty: Deletes the file by the\n\t\tname {fname}.\n\n\t\tThis also works when {fname} is a symbolic link.  The symbolic\n\t\tlink itself is deleted, not what it points to.\n\n\t\tWhen {flags} is \"d\": Deletes the directory by the name\n\t\t{fname}.  This fails when directory {fname} is not empty.\n\n\t\tWhen {flags} is \"rf\": Deletes the directory by the name\n\t\t{fname} and everything in it, recursively.  BE CAREFUL!\n\t\tNote: on MS-Windows it is not possible to delete a directory\n\t\tthat is being used.\n\n\t\tThe result is a Number, which is 0/false if the delete\n\t\toperation was successful and -1/true when the deletion failed\n\t\tor partly failed.\n\n\t\tParameters: ~\n\t\t  • {fname} (`string`)\n\t\t  • {flags} (`string?`)\n\n\t\tReturn: ~\n\t\t  (`integer`)\n```\n\n----------------------------------------\n\nTITLE: Setting the Current Tabpage - Lua\nDESCRIPTION: This function sets the current tabpage to the specified tab ID. It is not allowed when text lock is active.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_current_tabpage({tabpage})\n```\n\n----------------------------------------\n\nTITLE: Customizing C Indentation Style in Vim\nDESCRIPTION: Configures specific C indentation behavior using the cinoptions setting, allowing customization of brace placement and other style elements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:set cinoptions+={2\n```\n\n----------------------------------------\n\nTITLE: Executing an Ex command in Neovim\nDESCRIPTION: This function executes an Ex command in Neovim. It accepts a structured dictionary representing the command and optional parameters. It returns the command output if the `output` option is true, otherwise an empty string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_43\n\nLANGUAGE: vim\nCODE:\n```\nnvim_cmd({cmd}, {opts})                                           *nvim_cmd()*\\n    Executes an Ex command.\\n\\n    Unlike |nvim_command()| this command takes a structured Dict instead of a\\n    String. This allows for easier construction and manipulation of an Ex\\n    command. This also allows for things such as having spaces inside a\\n    command argument, expanding filenames in a command that otherwise doesn't\\n    expand filenames, etc. Command arguments may also be Number, Boolean or\\n    String.\\n\\n    The first argument may also be used instead of count for commands that\\n    support it in order to make their usage simpler with |vim.cmd()|. For\\n    example, instead of `vim.cmd.bdelete{ count = 2 }`, you may do\\n    `vim.cmd.bdelete(2)`.\\n\\n    On execution error: fails with Vimscript error, updates v:errmsg.\\n\\n    Attributes: ~\\n        Since: 0.8.0\\n\\n    Parameters: ~\\n      • {cmd}   Command to execute. Must be a Dict that can contain the same\\n                values as the return value of |nvim_parse_cmd()| except\\n                \"addr\", \"nargs\" and \"nextcmd\" which are ignored if provided.\\n                All values except for \"cmd\" are optional.\\n      • {opts}  Optional parameters.\\n                • output: (boolean, default false) Whether to return command\\n                  output.\\n\\n    Return: ~\\n        Command output (non-error, non-shell |:!|) if `output` is true, else\\n        empty string.\\n\\n    See also: ~\\n      • |nvim_exec2()|\\n      • |nvim_command()|\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Grepadd with Argdo in Vim\nDESCRIPTION: This Vim script demonstrates how to use the `grepadd!` command in conjunction with `argdo` to grep through all files in the argument list. The `try`/`catch` block handles the `E480` error that might occur if a file does not contain a match.  The `silent` command suppresses output from the `grepadd!` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\n:silent argdo try\n  \\ | grepadd! something %\n  \\ | catch /E480:/\n  \\ | endtry\"\n```\n\n----------------------------------------\n\nTITLE: Merging Dictionaries in Vim\nDESCRIPTION: Shows how to merge two dictionaries using the extend() function to add entries from one dictionary to another.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_55\n\nLANGUAGE: vim\nCODE:\n```\n:call extend(adict, bdict)\n```\n\n----------------------------------------\n\nTITLE: Starting Neovim in Diff Mode\nDESCRIPTION: Demonstrates how to start Neovim in diff mode to compare two files side by side. This command opens two vertically split windows showing the differences between the files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnvim -d main.c~ main.c\n```\n\n----------------------------------------\n\nTITLE: Defining Default Mappings in Vim Filetype Plugins\nDESCRIPTION: This example demonstrates how to define default mappings in a filetype plugin, checking if the user has already defined a mapping and using <LocalLeader>.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_48\n\nLANGUAGE: vim\nCODE:\n```\nif !hasmapto('<Plug>JavaImport;')\n  map <buffer> <unique> <LocalLeader>i <Plug>JavaImport;\nendif\nnoremap <buffer> <unique> <Plug>JavaImport; oimport \"\"<Left><Esc>\n```\n\n----------------------------------------\n\nTITLE: Multiple Pattern Autocommands for File Types\nDESCRIPTION: Collection of autocommands showing how to handle multiple file patterns and different settings for various file types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd BufRead   *  set tw=79 nocin ic infercase fo=2croq\n:autocmd BufRead   .letter set tw=72 fo=2tcrq\n:autocmd BufEnter  .letter set dict=/usr/lib/dict/words\n:autocmd BufLeave  .letter set dict=\n:autocmd BufRead,BufNewFile   *.c,*.h set tw=0 cin noic\n:autocmd BufEnter  *.c,*.h  abbr FOR for (i = 0; i < 3; ++i)<CR>{<CR>}<Esc>O\n:autocmd BufLeave  *.c,*.h  unabbr FOR\n```\n\n----------------------------------------\n\nTITLE: Handling Gzip Files with Autocommands in Vim\nDESCRIPTION: Example autocommands for automatically handling gzip compressed files, including reading, writing, and appending operations. Uses buffer and file events to manage compression/decompression.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_30\n\nLANGUAGE: vim\nCODE:\n```\n:augroup gzip\n:  autocmd!\n:  autocmd BufReadPre,FileReadPre *.gz set bin\n:  autocmd BufReadPost,FileReadPost *.gz '[,']!gunzip\n:  autocmd BufReadPost,FileReadPost *.gz set nobin\n:  autocmd BufReadPost,FileReadPost *.gz execute \":doautocmd BufReadPost \" .. expand(\"%:r\")\n:  autocmd BufWritePost,FileWritePost *.gz !mv <afile> <afile>:r\n:  autocmd BufWritePost,FileWritePost *.gz !gzip <afile>:r\n\n:  autocmd FileAppendPre  *.gz !gunzip <afile>\n:  autocmd FileAppendPre  *.gz !mv <afile>:r <afile>\n:  autocmd FileAppendPost  *.gz !mv <afile> <afile>:r\n:  autocmd FileAppendPost  *.gz !gzip <afile>:r\n:augroup END\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom TypeScript Compiler Command\nDESCRIPTION: Example of setting a custom TypeScript compiler command using npx with the --noEmit flag, which checks for errors without generating output files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_59\n\nLANGUAGE: vim\nCODE:\n```\nlet b:tsc_makeprg = \"npx tsc --noEmit\"\n```\n\n----------------------------------------\n\nTITLE: Using Autoload Mechanism for Library Scripts in Vim\nDESCRIPTION: This snippet shows how to use Vim's autoload mechanism to simplify loading and calling functions from library scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_56\n\nLANGUAGE: vim\nCODE:\n```\ncall mylib#myfunction(arg)\n```\n\n----------------------------------------\n\nTITLE: Setting Active Highlight Namespace - Lua\nDESCRIPTION: This function sets the active namespace for highlights defined, allowing for highlights to be applied to specific windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_hl_ns({ns_id})\n```\n\n----------------------------------------\n\nTITLE: Creating TextDocumentIdentifier in Neovim LSP (Lua)\nDESCRIPTION: Creates a TextDocumentIdentifier object for the current or specified buffer. Takes an optional buffer number as a parameter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_59\n\nLANGUAGE: lua\nCODE:\n```\nmake_text_document_params({bufnr})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Completion Behavior in Neovim\nDESCRIPTION: These snippets show how to configure wildcard completion behavior in Neovim using various options and mappings. They demonstrate emulating tcsh's autolist completion and setting wildmode options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:cnoremap X <C-L><C-D>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set wildmode=longest,list\n```\n\n----------------------------------------\n\nTITLE: Adding Highlighted Matches\nDESCRIPTION: Example showing how to add and remove highlighted matches in the current window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_164\n\nLANGUAGE: vim\nCODE:\n```\nhighlight MyGroup ctermbg=green guibg=green\nlet m = matchadd(\"MyGroup\", \"TODO\")\ncall matchdelete(m)\n```\n\n----------------------------------------\n\nTITLE: Escaping Filenames in Execute Commands\nDESCRIPTION: Demonstrates proper filename escaping techniques for both Vim and shell commands using fnameescape() and shellescape().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_115\n\nLANGUAGE: vim\nCODE:\n```\n:execute \"e \" .. fnameescape(filename)\n:execute \"!ls \" .. shellescape(filename, 1)\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Vim Script\nDESCRIPTION: Example of try-catch error handling in Vim, showing how to catch specific error codes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_26\n\nLANGUAGE: viml\nCODE:\n```\n:try\n:   read ~/templates/pascal.tmpl\n:catch /E484:/\n:   echo \"Sorry, the Pascal template file cannot be found.\"\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Executing Normal Mode Commands from a Vim Script\nDESCRIPTION: This snippet explains how to run a series of Normal mode commands in Vim using a script, highlighting the execution of commands recorded in a script file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_5\n\nLANGUAGE: Vim\nCODE:\n```\nvim -s script file.txt ...\n```\n\n----------------------------------------\n\nTITLE: Finding Mappings for Specific Modes\nDESCRIPTION: Example showing how to find all mappings available in Normal, Insert, or Command-line modes using mode_bits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_160\n\nLANGUAGE: vim\nCODE:\n```\nlet saved_maps = []\nfor m in maplist()\n    if and(m.mode_bits, 0x19) != 0\n\teval saved_maps->add(m)\n    endif\nendfor\necho saved_maps->mapnew({_, m -> m.lhs})\n```\n\n----------------------------------------\n\nTITLE: File Path Completion Function Example - Vim\nDESCRIPTION: Implementation of a custom completion function that returns filenames from directories specified in the 'path' option\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\n:com -nargs=1 -bang -complete=customlist,EditFileComplete\n\t\t\t\\ EditFile edit<bang> <args>\n:fun EditFileComplete(A,L,P)\n:    return split(globpath(&path, a:A), \"\\n\")\n:endfun\n```\n\n----------------------------------------\n\nTITLE: Insert Mode Events in Neovim\nDESCRIPTION: Documents events related to Insert mode including InsertChange, InsertCharPre, InsertEnter, InsertLeavePre, and InsertLeave.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nInsertChange\nInsertCharPre\nInsertEnter\nInsertLeavePre\nInsertLeave\n```\n\n----------------------------------------\n\nTITLE: Searching for a word in the current and included files (Vim)\nDESCRIPTION: This snippet shows how to search for a word in the current file and any included files using the `:psearch` command. The match is displayed in the preview window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n\":psearch popen\"\n```\n\n----------------------------------------\n\nTITLE: Joining Paragraphs into Single Lines\nDESCRIPTION: Global command that finds all non-empty lines and joins each paragraph (until the next empty line) into a single line, useful for preparing text for word processors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:g/./,/^$/join\n```\n\n----------------------------------------\n\nTITLE: Finding Neovim Installation Paths\nDESCRIPTION: Commands to locate where Neovim is installed on the system by displaying the program path and runtime directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:echo v:progpath\n:echo $VIMRUNTIME\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Dictionary Items in Vim\nDESCRIPTION: Shows how to use the items() function to retrieve all key-value pairs from a dictionary as a list of [key, value] pairs, enabling easy iteration through the dictionary.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_145\n\nLANGUAGE: vim\nCODE:\n```\nfor [key, value] in items(mydict)\n   echo key .. ': ' .. value\nendfor\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Vim Commands with a Shell Script\nDESCRIPTION: This snippet provides a shell script to run Vim in batch mode for replacing specific text in multiple files and printing the results. It's ideal for large edits across many files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nfor file in *.txt; do\n  vim -e -s $file < change.vim\n  lpr -r tempfile\n.done\n\n```\n\n----------------------------------------\n\nTITLE: Disabling TreeSitter Query Pattern in Lua\nDESCRIPTION: Shows how to disable a specific pattern in a TreeSitter query. This example disables the | links in vimdoc while keeping other @markup.link highlights.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nlocal link_pattern = 9 -- from :Inspect!\nlocal query = vim.treesitter.query.get('vimdoc', 'highlights')\nquery.query:disable_pattern(link_pattern)\nlocal tree = vim.treesitter.get_parser():parse()[1]\n```\n\n----------------------------------------\n\nTITLE: Creating a vertical split\nDESCRIPTION: The `:vsplit` command creates a new window to the left of the current one. It can be used with or without a filename to open.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\t:vsplit\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t:vsplit two.c\n```\n\n----------------------------------------\n\nTITLE: String/List Repetition with repeat()\nDESCRIPTION: Examples of repeating strings and lists using the repeat() function\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_209\n\nLANGUAGE: vim\nCODE:\n```\nlet separator = repeat('-', 80)\nlet longlist = repeat(['a', 'b'], 3)\n```\n\n----------------------------------------\n\nTITLE: Vim Python Syntax Configuration\nDESCRIPTION: Settings for controlling Python syntax highlighting features including number highlighting, builtins, and space errors\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_100\n\nLANGUAGE: vim\nCODE:\n```\nlet python_no_number_highlight = 1\nlet python_no_builtin_highlight = 1\nlet python_no_exception_highlight = 1\nlet python_highlight_all = 1\n```\n\n----------------------------------------\n\nTITLE: Dictionary Method Definition in Vim\nDESCRIPTION: Shows how to define and use methods in dictionary objects, implementing a translation function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_24\n\nLANGUAGE: viml\nCODE:\n```\n:function uk2nl.translate(line) dict\n:  return join(map(split(a:line), 'get(self, v:val, \"???\")'))\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Indentation in Vim\nDESCRIPTION: This snippet shows how to configure Python code indentation using Vim's 'g:python_indent' dictionary. It allows customization of indentation for open and nested parentheses, continuation lines, and closing parentheses alignment. Users can adjust the searchpair timeout or disable certain indenting features for performance improvements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_10\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:python_indent = {}\nlet g:python_indent.open_paren = 'shiftwidth() * 2'\nlet g:python_indent.nested_paren = 'shiftwidth()'\nlet g:python_indent.continue = 'shiftwidth() * 2'\nlet g:python_indent.closed_paren_align_last_line = v:false\nlet g:python_indent.searchpair_timeout = 500\nlet g:python_indent.disable_parentheses_indenting = 1\n```\n\n----------------------------------------\n\nTITLE: Converting File to Hex Dump using xxd\nDESCRIPTION: This command pipes the current buffer through the 'xxd' program, converting the file to a hexadecimal dump format. This displays the file content as hexadecimal values alongside their ASCII representations.  It is used when editing binary files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n\t:%!xxd\n```\n\n----------------------------------------\n\nTITLE: Adding ASCII value of cursor character to statusline in Vim\nDESCRIPTION: Configures the statusline to include the ASCII value of the character under the cursor, similar to the 'ga' command, along with other standard information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_68\n\nLANGUAGE: vim\nCODE:\n```\nset statusline=%<%f%h%m%r%=%b\\ 0x%B\\ \\ %l,%c%V\\ %P\n```\n\n----------------------------------------\n\nTITLE: Adding Dictionary Watcher - Lua\nDESCRIPTION: The dictwatcheradd function attaches a watcher to a specified dictionary to track changes based on a key pattern. When changes occur, a callback function is invoked with information about the change, making it useful for plugins that need to monitor state.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_48\n\nLANGUAGE: lua\nCODE:\n```\ndictwatcheradd({dict}, {pattern}, {callback})                 *dictwatcheradd()*\n\t\tAdds a watcher to a dictionary. A dictionary watcher is\n\t\tidentified by three components:\n\n\t\t- A dictionary({dict});\n\t\t- A key pattern({pattern});\n\t\t- A function({callback}).\n\n\t\tAfter this is called, every change on {dict} and on keys\n\t\tmatching {pattern} will result in {callback} being invoked.\n\n\t\tFor example, to watch all global variables: >vim\n\t\t\tsilent! call dictwatcherdel(g:, '*', 'OnDictChanged')\n\t\t\tfunction! OnDictChanged(d,k,z)\n\t\t\t  echomsg string(a:k) string(a:z)\n\t\t\tendfunction\n\t\t\tcall dictwatcheradd(g:, '*', 'OnDictChanged')\n\t\t<\n\t\tFor now {pattern} only accepts very simple patterns that can\n\t\tcontain a \"*\" at the end of the string, in which case it will\n\t\tmatch every key that begins with the substring before the \"*\".\n\t\tThat means if \"*\" is not the last character of {pattern}, only\n\t\tkeys that are exactly equal as {pattern} will be matched.\n\n\t\tThe {callback} receives three arguments:\n\n\t\t- The dictionary being watched.\n\t\t- The key which changed.\n\t\t- A dictionary containing the new and old values for the key.\n\n\t\tThe type of change can be determined by examining the keys\n\t\tpresent on the third argument:\n\n\t\t- If contains both `old` and `new`, the key was updated.\n\t\t- If it contains only `new`, the key was added.\n\t\t- If it contains only `old`, the key was deleted.\n\n\t\tThis function can be used by plugins to implement options with\n\t\tvalidation and parsing logic.\n\n\t\tParameters: ~\n\t\t  • {dict} (`table`)\n\t\t  • {pattern} (`string`)\n\t\t  • {callback} (`function`)\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Using nested wildcards to add directories to path (Vim)\nDESCRIPTION: This snippet shows how to use the `**` wildcard to recursively add directories to the 'path' option, instructing Vim to search within all subdirectories for include files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n\":set path+=/projects/invent/**/include\"\n```\n\n----------------------------------------\n\nTITLE: Getting Current Timestamp in Lua\nDESCRIPTION: This function returns the current timestamp in milliseconds.  The timestamp is cached at the start of the event loop tick. Don't make assumptions about the starting point. Returns an integer. Use `uv.hrtime()` for sub-millisecond granularity.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.now()                                                              *uv.now()*\\n\\n                Returns the current timestamp in milliseconds. The timestamp\\n                is cached at the start of the event loop tick, see\\n                |uv.update_time()| for details and rationale.\\n\\n                The timestamp increases monotonically from some arbitrary\\n                point in time. Don't make assumptions about the starting\\n                point, you will only get disappointed.\\n\\n                Returns: `integer`\\n\\n                Note: Use |uv.hrtime()| if you need sub-millisecond\\n                granularity.\"\n```\n\n----------------------------------------\n\nTITLE: Using index() to find items in a list or blob\nDESCRIPTION: Demonstrates how to use the index() function to find elements in lists or values in blobs. The function returns the index of the item or -1 if not found. The examples show checking for a word in a list and a number in another list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_130\n\nLANGUAGE: vim\nCODE:\n```\nlet idx = index(words, \"the\")\nif index(numbers, 123) >= 0\n  \" ...\nendif\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Script Variables in Vim\nDESCRIPTION: Example of how script variables remain accessible when functions are defined inside other functions in Vim. This demonstrates scope persistence with nested function definitions using the 's:' prefix for script-scoped variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_86\n\nLANGUAGE: viml\nCODE:\n```\nlet s:counter = 0\nfunction StartCounting(incr)\n  if a:incr\n    function MyCounter()\n      let s:counter = s:counter + 1\n    endfunction\n  else\n    function MyCounter()\n      let s:counter = s:counter - 1\n    endfunction\n  endif\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Function Reference (Funcref) Example in Vimscript\nDESCRIPTION: This snippet shows how to create a function reference (Funcref) in Vimscript using the `function()` function. The Funcref can then be used to call the referenced function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n\t:let Fn = function(\"MyFunc\")\n\t:echo Fn()\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Element of List in Vimscript\nDESCRIPTION: This snippet demonstrates accessing the last element of a list using a negative index (-1). Negative indices count from the end of the list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n\t:let last = mylist[-1]\t\t\" get the last item: \"four\"\n```\n\n----------------------------------------\n\nTITLE: Joining List Items with Newline Character in Vim\nDESCRIPTION: Example of using the join() function to combine items in a list with newline separators. This adds an additional newline at the end using the string concatenation operator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_149\n\nLANGUAGE: vim\nCODE:\n```\nlet lines = join(mylist, \"\\n\") .. \"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace in Vim\nDESCRIPTION: Examples of using the trim() function to remove whitespace from strings in Vim. Demonstrates various use cases including trimming from both ends, specific ends, and with custom characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_276\n\nLANGUAGE: vim\nCODE:\n```\necho trim(\"   some text \")\necho trim(\"  \\r\\t\\t\\r RESERVE \\t\\n\\x0B\\xA0\") .. \"_TAIL\"\necho trim(\"rm<Xrm<>X>rrm\", \"rm<>\")\necho trim(\"  vim  \", \" \", 2)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Scrolling in Vim\nDESCRIPTION: Commands and behaviors for binding windows together so they scroll synchronously using the 'scrollbind' option. Includes the :syncbind command to force all bound windows to the same position.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:syncbind       Force all 'scrollbind' windows to have the same relative offset.\n```\n\n----------------------------------------\n\nTITLE: Checking Job Status with jobwait in Vim\nDESCRIPTION: Example of using jobwait with a timeout of 0 to check if a job is still running. This creates a boolean variable indicating whether the job is running without waiting for it to complete.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_148\n\nLANGUAGE: vim\nCODE:\n```\nlet running = jobwait([{job-id}], 0)[0] == -1\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Neovim\nDESCRIPTION: Examples of string and value comparison in Neovim, demonstrating case-sensitive and case-insensitive comparisons using the various equality operators.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_70\n\nLANGUAGE: vim\nCODE:\n```\n\"abc\" ==# \"Abc\"\t  evaluates to 0\n\"abc\" ==? \"Abc\"\t  evaluates to 1\n\"abc\" == \"Abc\"\t  evaluates to 1 if 'ignorecase' is set, 0 otherwise\n```\n\nLANGUAGE: vim\nCODE:\n```\necho 4 == '4'\n1\necho 4 is '4'\n0\necho 0 is []\n0\n```\n\nLANGUAGE: vim\nCODE:\n```\necho 0 == 'x'\n1\n```\n\nLANGUAGE: vim\nCODE:\n```\necho [0] == ['x']\n0\n```\n\nLANGUAGE: vim\nCODE:\n```\n\"foo\\nbar\" =~ \"\\n\"\tevaluates to 1\n\"foo\\nbar\" =~ \"\\\\n\"\tevaluates to 0\n```\n\n----------------------------------------\n\nTITLE: Character Replacement in Neovim\nDESCRIPTION: Demonstrates using the 'r' command to replace single characters and multiple characters with counts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimdoc\nCODE:\n```\nthere is somerhing grong here\nrT     rt    rw\nThere is something wrong here\n```\n\n----------------------------------------\n\nTITLE: Subexpression Matching in Vim Regular Expressions\nDESCRIPTION: This snippet demonstrates subexpression matching in Vim regular expressions. It shows how to use parentheses for grouping and backreferences for matching previously matched subexpressions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n\\(\\)  A pattern enclosed by escaped parentheses.  */\\(* */\\(\\)* */\\)*\n       E.g., \"\\(^a\\)\" matches 'a' at the start of a line.\n       There can only be nine of these. You can use \"\\%(\" to add more, but\n       not counting it as a sub-expression.\n\n\\1     Matches the same string that was matched by  */\\1* *E65*\n       the first sub-expression in \\( and \\).\n       Example: \"\\([a-z]\\).\\1\" matches \"ata\", \"ehe\", \"tot\", etc.\n\\2     Like \"\\1\", but uses second sub-expression,  */\\2*\n   ...\n\\9     Like \"\\1\", but uses ninth sub-expression.   */\\9*\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer Text in Lua\nDESCRIPTION: Sets (replaces) a range in the buffer. Recommended for modifying parts of a line while preserving extmarks on non-modified parts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_59\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_set_text({buffer}, {start_row}, {start_col}, {end_row}, {end_col}, {replacement})\n```\n\n----------------------------------------\n\nTITLE: List Utility Functions in Vim\nDESCRIPTION: Examples of various utility functions for working with lists in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_40\n\nLANGUAGE: vim\nCODE:\n```\n:let r = call(funcname, list)\t\" call a function with an argument list\n:if empty(list)\t\t\t\" check if list is empty\n:let l = len(list)\t\t\" number of items in list\n:let big = max(list)\t\t\" maximum value in list\n:let small = min(list)\t\t\" minimum value in list\n:let xs = count(list, 'x')\t\" count nr of times 'x' appears in list\n:let i = index(list, 'x')\t\" index of first 'x' in list\n:let lines = getline(1, 10)\t\" get ten text lines from buffer\n:call append('$', lines)\t\" append text lines in buffer\n:let list = split(\"a b c\")\t\" create list from items in a string\n:let string = join(list, ', ')\t\" create string from list items\n:let s = string(list)\t\t\" String representation of list\n:call map(list, '\">> \" .. v:val')  \" prepend \">> \" to each item\n```\n\n----------------------------------------\n\nTITLE: Execute Command Example in Vim\nDESCRIPTION: Shows how to execute commands and capture their output using the execute() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\necho execute('echon \"foo\"')\necho execute(['echon \"foo\"', 'echon \"bar\"'])\nexecute('args')->split(\"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Using inputlist() for menu selection\nDESCRIPTION: Demonstrates the inputlist() function which displays a list of options and prompts the user to select one by number. The example shows a color selection menu where items are numbered for clarity.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_137\n\nLANGUAGE: vim\nCODE:\n```\nlet color = inputlist(['Select color:', '1. red',\n\t\\ '2. green', '3. blue'])\n```\n\n----------------------------------------\n\nTITLE: Cursor Style Management with Autocommands\nDESCRIPTION: Autocommands to manage cursor style when entering, leaving, suspending or resuming Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nau VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n  \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n  \\,sm:block-blinkwait175-blinkoff150-blinkon175\n\nau VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n```\n\n----------------------------------------\n\nTITLE: Selecting an Item in the Completion Popup Menu - Lua\nDESCRIPTION: This function allows the selection of an item in the completion popup menu for Neovim. It requires the item index and has options to insert the selection and finish the completion. If no popup menu is active, the call is ignored.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nnvim_select_popupmenu_item({item}, {insert}, {finish}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Matching Patterns with Custom Keywords in Vim Script\nDESCRIPTION: Handles custom keyword definitions by modifying the 'iskeyword' option or using pattern matching. This is particularly useful when unconventional characters are part of keywords or when defining abbreviated keywords.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_4\n\nLANGUAGE: Vim Script\nCODE:\n```\n:setlocal iskeyword+=-\n:syntax keyword xStatement when-not\n:syntax keyword xStatement n[ext]\n```\n\n----------------------------------------\n\nTITLE: Disabling LSP Default Settings\nDESCRIPTION: Example showing how to remove or override buffer-local LSP defaults using LspAttach autocmd.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('LspAttach', {\n  callback = function(args)\n    -- Unset 'formatexpr'\n    vim.bo[args.buf].formatexpr = nil\n    -- Unset 'omnifunc'\n    vim.bo[args.buf].omnifunc = nil\n    -- Unmap K\n    vim.keymap.del('n', 'K', { buffer = args.buf })\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Finally for Cleanup Code in Vim Script\nDESCRIPTION: Demonstrates using a finally block to ensure settings are restored whether the script completes normally, encounters an error, or is interrupted.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_132\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:  let s:saved_ts = &ts\n:  set ts=17\n:\n:  \" Do the hard work here.\n:\n:finally\n:  let &ts = s:saved_ts\n:  unlet s:saved_ts\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Retrieving Matches in Vim\nDESCRIPTION: The getmatches() function returns a list of all matches previously defined for the current window using matchadd() and :match commands. It can be used with setmatches() to save and restore matches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_99\n\nLANGUAGE: vim\nCODE:\n```\necho getmatches()\nlet m = getmatches()\ncall clearmatches()\necho getmatches()\ncall setmatches(m)\necho getmatches()\nunlet m\n```\n\n----------------------------------------\n\nTITLE: Setting Up Automatic View Saving for C Files\nDESCRIPTION: Autocommand configuration to automatically save and restore views for C files. When leaving a window with a .c file, the view is saved, and when entering it again, the view is restored.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nau BufWinLeave *.c mkview\nau BufWinEnter *.c silent! loadview\n```\n\n----------------------------------------\n\nTITLE: Preferred Namespace Interface Pattern\nDESCRIPTION: Demonstrates a recommended single interface pattern for namespace operations with flexible scoping\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nnvim_ns_add(\n  ns_id: int,\n  filter: {\n    handle: integer (buf/win/tabpage id)\n    scope: \"global\" | \"win\" | \"buf\" | \"tabpage\"\n  }\n): { ok: boolean }\n```\n\n----------------------------------------\n\nTITLE: Searching Files with Vim's Built-in Grep Command\nDESCRIPTION: Uses Vim's internal :grep command to search for 'error_string' in all C files. This command opens the first file with a match and positions the cursor on the matching line. Results can be navigated with :cnext, :cprev, and :clist commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:grep error_string *.c\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographically Strong Random Bytes with uv.random()\nDESCRIPTION: Fills a string with cryptographically strong random bytes of specified length. Can be used synchronously or asynchronously with a callback.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_102\n\nLANGUAGE: lua\nCODE:\n```\nuv.random({len}, {flags} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Mapping with Count in Neovim VimL\nDESCRIPTION: This snippet demonstrates how to create a mapping that echoes the count given for the last Normal mode command. It uses the v:count variable and removes the line range with <C-U>.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n:map _x :<C-U>echo \"the count is \" .. v:count<CR>\n```\n\n----------------------------------------\n\nTITLE: Modifying List Items in Vim\nDESCRIPTION: Demonstrates how to change specific items in a list using indexing and assignment.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\n:let list[4] = \"four\"\n:let listlist[0][3] = item\n```\n\n----------------------------------------\n\nTITLE: Searching for Nested Pairs with searchpair() in Neovim (Vimscript)\nDESCRIPTION: This example demonstrates how to use searchpair() to find matching 'if' and 'endif' statements in a Vim script, skipping comments at the start of a line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_220\n\nLANGUAGE: vim\nCODE:\n```\necho searchpair('\\<if\\>', '\\<el\\%[seif]\\>', '\\<en\\%[dif]\\>', 'W',\n\\ 'getline(\".\") =~ \"^\\\\s*\\\"\"')\n```\n\n----------------------------------------\n\nTITLE: Configuring SpotBugs Buffer Autocommands in Vim\nDESCRIPTION: Example configuration for setting up buffer-local autocommands that will trigger SpotBugs actions on BufWritePost and Signal events. This code would typically be placed in a Java filetype plugin file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_52\n\nLANGUAGE: vim\nCODE:\n```\nif exists(':SpotBugsDefineBufferAutocmd') == 2\n\tSpotBugsDefineBufferAutocmd BufWritePost Signal\nendif\n```\n\n----------------------------------------\n\nTITLE: Allowing Users to Disable Mappings in Vim Filetype Plugins\nDESCRIPTION: This snippet shows how to give users the option to disable mappings in a filetype plugin without disabling everything, using global variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_49\n\nLANGUAGE: vim\nCODE:\n```\nif !exists(\"no_plugin_maps\") && !exists(\"no_mail_maps\")\n  \" Quote text by inserting \"> \"\n  if !hasmapto('<Plug>MailQuote;')\n    vmap <buffer> <LocalLeader>q <Plug>MailQuote;\n    nmap <buffer> <LocalLeader>q <Plug>MailQuote;\n  endif\n  vnoremap <buffer> <Plug>MailQuote; :s/^/> /<CR>\n  nnoremap <buffer> <Plug>MailQuote; :.,$s/^/> /<CR>\nendif\n```\n\n----------------------------------------\n\nTITLE: Getting Color by Name in Neovim\nDESCRIPTION: This example demonstrates how to retrieve a color's RGB value by name using `nvim_get_color_by_name()`. The function can accept either a color name (e.g., \"Pink\") or a hexadecimal color code (e.g., \"#cbcbcb\"). The returned value is a 24-bit RGB value.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n\n        :echo nvim_get_color_by_name(\"Pink\")\n        :echo nvim_get_color_by_name(\"#cbcbcb\")\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buffer Viewport Width in Vim\nDESCRIPTION: This snippet shows how to use getwininfo() to calculate the actual text width of a window, excluding UI elements like the sign column. It's useful for scripts that need to know the true text area width.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_292\n\nLANGUAGE: vim\nCODE:\n```\n:echo getwininfo(win_getid())[0].width - getwininfo(win_getid())[0].textoff\n```\n\n----------------------------------------\n\nTITLE: Nested Parentheses Syntax Highlighting\nDESCRIPTION: Creates three levels of nested parentheses highlighting with different colors using syntax regions\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_158\n\nLANGUAGE: viml\nCODE:\n```\n:sy region par1 matchgroup=par1 start=/(/ end=/)/ contains=par2\n:sy region par2 matchgroup=par2 start=/(/ end=/)/ contains=par3 contained\n:sy region par3 matchgroup=par3 start=/(/ end=/)/ contains=par1 contained\n:hi par1 ctermfg=red guifg=red\n:hi par2 ctermfg=blue guifg=blue\n:hi par3 ctermfg=darkgreen guifg=darkgreen\n```\n\n----------------------------------------\n\nTITLE: Getting Mark List in Vim\nDESCRIPTION: The getmarklist() function returns a list of all global marks or local marks for a specified buffer. Each item in the list is a dictionary containing information about the mark, including its name, position, and associated file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_98\n\nLANGUAGE: vim\nCODE:\n```\ngetmarklist([{buf}])\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Lambda Expressions in Vim\nDESCRIPTION: This snippet shows how to create and use lambda expressions in Vim. It demonstrates the syntax for defining lambda functions and provides examples of using them with built-in Vim functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_84\n\nLANGUAGE: vim\nCODE:\n```\n:let F = {arg1, arg2 -> arg1 - arg2}\n:echo F(5, 2)\n\n:let F = {-> 'error function'}\n:echo F('ignored')\n\n:function Foo(arg)\n:  let i = 3\n:  return {x -> x + i - a:arg}\n:endfunction\n:let Bar = Foo(4)\n:echo Bar(6)\n\n:echo map([1, 2, 3], {idx, val -> val + 1})\n:echo sort([3,7,2,1,4], {a, b -> a - b})\n\n:let timer = timer_start(500,\n        \\ {-> execute(\"echo 'Handler called'\", \"\")},\n        \\ {'repeat': 3})\n```\n\n----------------------------------------\n\nTITLE: Setting Treesitter Fold Expression in Lua\nDESCRIPTION: Example showing how to set the fold expression to use treesitter folding in Neovim. This sets the window-local foldexpr option to use vim.treesitter.foldexpr().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nvim.wo.foldexpr = 'v:lua.vim.treesitter.foldexpr()'\n```\n\n----------------------------------------\n\nTITLE: String Variables in VimL\nDESCRIPTION: This snippet explains how to use string variables in VimL, distinguishing between single and double-quoted strings, and handling of escape sequences in strings, essential for managing text data in Vim scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_6\n\nLANGUAGE: VimL\nCODE:\n```\n:let name = \"peter\"\n:echo name\n:let name = \"\\\"peter\\\"\"\n:echo name\n:let name = '\"peter\"'\n:echo name\n```\n\n----------------------------------------\n\nTITLE: Splitting a window\nDESCRIPTION: This command splits the current window horizontally, creating two views of the same file. The cursor remains in the top window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\t:split\n```\n\n----------------------------------------\n\nTITLE: Running the libuv Event Loop in Lua\nDESCRIPTION: This function runs the libuv event loop in different modes: default, once, and nowait. Each mode has a different behavior for polling I/O and handling callbacks, as well as different return conditions.  It returns a boolean or fail. Luvit implicitly calls uv.run() but direct luv bindings require explicit calls.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.run([{mode}])                                                      *uv.run()*\\n\\n                Parameters:\\n                - `mode`: `string` or `nil` (default: `\\\"default\\\"`)\\n\\n                This function runs the event loop. It will act differently\\n                depending on the specified mode:\\n\\n                  - `\\\"default\\\"`: Runs the event loop until there are no more\\n                    active and referenced handles or requests. Returns `true`\\n                    if |uv.stop()| was called and there are still active\\n                    handles or requests. Returns `false` in all other cases.\\n\\n                  - `\\\"once\\\"`: Poll for I/O once. Note that this function\\n                    blocks if there are no pending callbacks. Returns `false`\\n                    when done (no active handles or requests left), or `true`\\n                    if more callbacks are expected (meaning you should run the\\n                    event loop again sometime in the future).\\n\\n                  - `\\\"nowait\\\"`: Poll for I/O once but don't block if there are\\n                    no pending callbacks. Returns `false` if done (no active\\n                    handles or requests left), or `true` if more callbacks are\\n                    expected (meaning you should run the event loop again\\n                    sometime in the future).\\n\\n                Returns: `boolean` or `fail`\\n\\n                Note: Luvit will implicitly call `uv.run()` after loading user\\n                code, but if you use the luv bindings directly, you need to\\n                call this after registering your initial set of event\\n                callbacks to start the event loop.\"\n```\n\n----------------------------------------\n\nTITLE: Substituting Text Across Multiple Files in Vim\nDESCRIPTION: This snippet illustrates the use of ':args' and ':argdo' commands to perform substitutions across multiple C source files. It shows how to replace variable names effectively without altering other text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_2\n\nLANGUAGE: Vim\nCODE:\n```\n\"Put all relevant C files in the argument list\n:args *.c\n\" Execute substitution command on all files\n:argdo %s/\\<x_cnt\\>/x_counter/ge | update\n```\n\n----------------------------------------\n\nTITLE: Re-indenting Code in Vim\nDESCRIPTION: Commands for re-indenting code at different scopes, from a single line to an entire file, using Vim's indentation engine.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n==\n```\n\nLANGUAGE: vim\nCODE:\n```\n=a{\n```\n\nLANGUAGE: vim\nCODE:\n```\ngg=G\n```\n\n----------------------------------------\n\nTITLE: Generating Tags for C Files\nDESCRIPTION: Command to generate a tags file for all C files in the current directory using ctags, enabling efficient code navigation and exploration\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nctags *.c\n```\n\n----------------------------------------\n\nTITLE: Opening a new file in vertical split\nDESCRIPTION: Opens a new, empty file in a vertically split window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n\t:vnew\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t:vertical new\n```\n\n----------------------------------------\n\nTITLE: Offset Pattern Matching in Vim\nDESCRIPTION: Shows how to use pattern offsets to fine-tune the exact portion of text that gets highlighted.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region xCond start=/if\\s*(/ms=e+1 end=/)/me=s-1\n```\n\n----------------------------------------\n\nTITLE: Recursive Syntax Region Definitions in Vim Script\nDESCRIPTION: Illustrates recursive nesting of syntax regions with examples of code blocks within blocks, using start and end patterns to identify nested elements. These examples use curly braces typical of many programming languages.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_8\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax region xBlock start=/{/ end=/}/ contains=xBlock\n```\n\n----------------------------------------\n\nTITLE: Arithmetic and Concatenation Operators in Neovim\nDESCRIPTION: Examples of arithmetic operators and string concatenation in Neovim. Shows the difference between addition and string concatenation and explains operator precedence.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_71\n\nLANGUAGE: vim\nCODE:\n```\n\"123\" + \"456\" = 579\n\"123\" . \"456\" = \"123456\"\n```\n\nLANGUAGE: vim\nCODE:\n```\n1 . 90 + 90.0\n```\n\nLANGUAGE: vim\nCODE:\n```\n(1 . 90) + 90.0\n```\n\nLANGUAGE: vim\nCODE:\n```\n1 . 90 * 90.0\n```\n\nLANGUAGE: vim\nCODE:\n```\n1 . (90 * 90.0)\n```\n\n----------------------------------------\n\nTITLE: Customizing Runtimepath in Vim\nDESCRIPTION: Example configuration for the 'runtimepath' option that changes the runtime file search order. It prioritizes a personal runtime directory, then a group directory, followed by the default Vim runtime directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_57\n\nLANGUAGE: vim\nCODE:\n```\nset runtimepath=~/vimruntime,/mygroup/vim,$VIMRUNTIME\n```\n\n----------------------------------------\n\nTITLE: Retabbing Indented Text in Vim - Vim\nDESCRIPTION: Uses the ':retab' command to adjust existing tabs in a file after setting 'tabstop'. This is useful for maintaining consistent indentation when opening files with different tab settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:set tabstop=3\n```\n\nLANGUAGE: vim\nCODE:\n```\n:retab 8\n```\n\n----------------------------------------\n\nTITLE: Using Escaped Arguments in Custom Commands\nDESCRIPTION: This snippet illustrates how to handle special characters in arguments using '<q-args>' within a user-defined command, ensuring that special characters are escaped correctly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:command -nargs=+ Say :echo <q-args>\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Dictionary and List Entries in Vim\nDESCRIPTION: Shows how to access nested entries in complex data structures combining dictionaries and lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_47\n\nLANGUAGE: vim\nCODE:\n```\n:echo dict.key[idx].key\n```\n\n----------------------------------------\n\nTITLE: Using a Function for Fold Expressions in Vim\nDESCRIPTION: A more efficient approach to fold expressions that uses a function without arguments. This defers the complexity to a separate function while using v:lnum for line information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:set foldexpr=MyFoldLevel()\n```\n\n----------------------------------------\n\nTITLE: Checking Python availability in Vim script\nDESCRIPTION: Conditional statements to test if Python support is available in Neovim using the has() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_10\n\nLANGUAGE: viml\nCODE:\n```\nif has('pythonx')\n  echo 'there is Python'\nendif\nif has('python3')\n  echo 'there is Python 3.x'\nendif\n```\n\n----------------------------------------\n\nTITLE: Defining Regions for Strings in Vim Script\nDESCRIPTION: Creates syntax regions for string elements within double quotes and accounts for escaped quote marks using the 'skip' keyword. This prevents premature region termination inside strings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_6\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax region xString start=/\"/ end=/\"/\n:syntax region xString start=/\"/ skip=/\\\\\"/ end=/\"/\n```\n\n----------------------------------------\n\nTITLE: Accessing Buffer Variables Example - Vim\nDESCRIPTION: Demonstrates how to use getbufvar() to access buffer-local options and variables. Shows retrieving the 'modified' option and a custom variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_83\n\nLANGUAGE: vim\nCODE:\n```\nlet bufmodified = getbufvar(1, \"&mod\")\necho \"todo myvar = \" .. getbufvar(\"todo\", \"myvar\")\n```\n\n----------------------------------------\n\nTITLE: Setting Tab and Trailing Space Characters\nDESCRIPTION: Configures listchars to show tabs with '>' followed by '-' characters, and trailing spaces as '-'. This improves visibility of whitespace characters in the editor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_44\n\nLANGUAGE: viml\nCODE:\n```\nset lcs=tab:>-,trail:-\n```\n\n----------------------------------------\n\nTITLE: Removing Dictionary Entries in Vim\nDESCRIPTION: Demonstrates different ways to remove entries from a dictionary using remove() or unlet.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_54\n\nLANGUAGE: vim\nCODE:\n```\n:let i = remove(dict, 'aaa')\n:unlet dict.aaa\n:unlet dict['aaa']\n```\n\n----------------------------------------\n\nTITLE: Creating a Quickload Vim Plugin\nDESCRIPTION: This example shows how to create a plugin that loads quickly by defining commands and mappings first, and deferring function definitions until they are needed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_54\n\nLANGUAGE: vim\nCODE:\n```\nif !exists(\"s:did_load\")\n    command -nargs=* BNRead  call BufNetRead(<f-args>)\n    map <F19> :call BufNetWrite('something')<CR>\n\n    let s:did_load = 1\n    exe 'au FuncUndefined BufNet* source ' .. expand('<sfile>')\n    finish\nendif\n\nfunction BufNetRead(...)\n    echo 'BufNetRead(' .. string(a:000) .. ')'\n    \" read functionality here\nendfunction\n\nfunction BufNetWrite(...)\n    echo 'BufNetWrite(' .. string(a:000) .. ')'\n    \" write functionality here\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Forcing OSC 52 Clipboard in Neovim - Lua\nDESCRIPTION: This code configures Neovim to exclusively use the OSC 52 provider for clipboard operations by setting 'vim.g.clipboard' to 'osc52'. It specifies clipboard operations for both the '+' and '*' registers, requiring 'require('vim.ui.clipboard.osc52')' as a dependency.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nvim.g.clipboard = 'osc52'\n```\n\n----------------------------------------\n\nTITLE: Lua Error Handling in Neovim\nDESCRIPTION: Shows how Lua error messages are emitted with additional context in Neovim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n:lua error('TEST')\n```\n\n----------------------------------------\n\nTITLE: Getting Existing Autocommand Group in Lua\nDESCRIPTION: Lua example showing how to get an existing autocommand group ID without clearing its existing commands by setting the clear option to false.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_83\n\nLANGUAGE: lua\nCODE:\n```\nlocal id = vim.api.nvim_create_augroup('my.lsp.config', {\n    clear = false\n})\n```\n\n----------------------------------------\n\nTITLE: Opening files in split windows\nDESCRIPTION: Opens each specified file in a separate window. The layout will be horizontal splits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n\tvim -o one.txt two.txt three.txt\n```\n\n----------------------------------------\n\nTITLE: Controlling Vim Syntax Settings\nDESCRIPTION: Commands for controlling syntax highlighting behavior, including turning syntax on/off globally.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_74\n\nLANGUAGE: vim\nCODE:\n```\nset syntax=OFF\nset syntax=ON\n```\n\n----------------------------------------\n\nTITLE: Buffer List Management Commands in Vim\nDESCRIPTION: Commands for managing the buffer list in Vim, including listing buffers, navigating between buffers, loading and unloading buffers, and buffer deletion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:buffers  or  :files     # list all known buffer and file names\n:ball     or  :sball     # edit all args/buffers\n:unhide   or  :sunhide   # edit all loaded buffers\n:badd {fname}            # add file name {fname} to the list\n:bunload[!] [N]          # unload buffer [N] from memory\n:bdelete[!] [N]          # unload buffer [N] and delete it from the buffer list\n:[N]buffer [N]           # to arg/buf N (in current window)\n:[N]sbuffer [N]          # to arg/buf N (in new window)\n:[N]bnext [N]            # to Nth next arg/buf (in current window)\n:[N]sbnext [N]           # to Nth next arg/buf (in new window)\n:[N]bNext [N]            # to Nth previous arg/buf (in current window)\n:[N]sbNext [N]           # to Nth previous arg/buf (in new window)\n:[N]bprevious [N]        # to Nth previous arg/buf (in current window)\n:[N]sbprevious [N]       # to Nth previous arg/buf (in new window)\n:bfirst                  # to first arg/buf (in current window)\n:sbfirst                 # to first arg/buf (in new window)\n:blast                   # to last arg/buf (in current window)\n:sblast                  # to last arg/buf (in new window)\n:[N]bmod [N]             # to Nth modified buf (in current window)\n:[N]sbmod [N]            # to Nth modified buf (in new window)\n```\n\n----------------------------------------\n\nTITLE: Modifying Options with Let Command in Vim\nDESCRIPTION: Examples of setting and modifying Vim options using the :let command with the & prefix, including global and local option variants.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_94\n\nLANGUAGE: viml\nCODE:\n```\n:let &{option-name} = {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let &path = &path .. ',/usr/local/include'\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let &{option-name} .= {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let &{option-name} += {expr1}\n:let &{option-name} -= {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let &l:{option-name} = {expr1}\n:let &l:{option-name} .= {expr1}\n:let &l:{option-name} += {expr1}\n:let &l:{option-name} -= {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let &g:{option-name} = {expr1}\n:let &g:{option-name} .= {expr1}\n:let &g:{option-name} += {expr1}\n:let &g:{option-name} -= {expr1}\n```\n\n----------------------------------------\n\nTITLE: Configuring grepprg for ripgrep in Neovim\nDESCRIPTION: Sets the 'grepprg' option to use ripgrep with specific flags for the :grep command. This configuration enables case-insensitive searching and includes hidden files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_22\n\nLANGUAGE: viml\nCODE:\n```\nset grepprg=rg --vimgrep -uu\n```\n\n----------------------------------------\n\nTITLE: Matching Start-of-Line and End-of-Line\nDESCRIPTION: This section describes how to match the start-of-line and end-of-line in Vim patterns using special characters like '^', '\\$', and their variations with backslashes. It includes examples for matching lines starting or ending with specific sequences.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_13\n\nLANGUAGE: regex\nCODE:\n```\n\"^beep(\"\n\"\\\\^\"\n\"\\\\_^\"\n\"\\\\_s*\\\\_^foo\"\n\"$\"\n\"\\\\$\"\n\"foo\\\\_$\\\\_s*\"\n```\n\n----------------------------------------\n\nTITLE: Defining Key Mappings in Vim\nDESCRIPTION: Examples of key mappings including formatting command Q and grep search functionality\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nmap Q gq\nvnoremap _g y:exe \"grep /\" .. escape(@\", '\\\\/') .. \"/ *.c *.h\"<CR>\n```\n\n----------------------------------------\n\nTITLE: Closing all other windows\nDESCRIPTION: This command closes all windows except the current one. If any of the other windows contain unsaved changes, an error message will be displayed, and the window will not be closed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n\t:only\n```\n\n----------------------------------------\n\nTITLE: Getting Mouse Position in Vim\nDESCRIPTION: The getmousepos() function returns a dictionary with the last known position of the mouse. It includes screen coordinates, window information, and text position details. Useful for mouse click mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_100\n\nLANGUAGE: vim\nCODE:\n```\ngetmousepos()\n```\n\n----------------------------------------\n\nTITLE: Creating Formatting Parameters in Neovim LSP (Lua)\nDESCRIPTION: Creates a DocumentFormattingParams object for the current buffer and cursor position. Takes optional formatting options as a parameter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_55\n\nLANGUAGE: lua\nCODE:\n```\nmake_formatting_params({options})\n```\n\n----------------------------------------\n\nTITLE: Creating a Key Mapping to Save Current Session\nDESCRIPTION: Example of a mapping that saves all files and updates the current session file. The mapping uses the v:this_session variable to determine which session file to update, then prepares to load another session.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:nmap <F2> :wa<Bar>exe \"mksession! \" .. v:this_session<CR>:so ~/sessions/\n```\n\n----------------------------------------\n\nTITLE: Mapping Function Keys in Neovim\nDESCRIPTION: This snippet demonstrates how to map the F2 key to insert the current date and time using the strftime function. It appends the result after the cursor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:map <F2> a<C-R>=strftime(\"%c\")<CR><Esc>\n```\n\n----------------------------------------\n\nTITLE: Mapping Function Key to Insert Date in Neovim\nDESCRIPTION: This snippet demonstrates how to map the F2 key to insert the current date at the end of the file in Normal mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n:map <F2> GoDate: <Esc>:read !date<CR>kJ\n```\n\n----------------------------------------\n\nTITLE: Starting Profiling in Vim\nDESCRIPTION: These commands demonstrate how to start profiling a Vim script. It starts profiling, specifies the file to profile and the output location, sources the target script, and then exits Vim to generate the profiling report.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\n\":profile start /tmp/one_script_profile\"\n\t\t\":profile file one_script.vim\"\n\t\t\":source one_script.vim\"\n\t\t\":exit\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Treesitter Parser in Lua\nDESCRIPTION: This Lua code snippet initializes a Treesitter parser for the C language, explicitly parses the syntax tree. It requires the Treesitter plugin with the parsers properly installed. The primary parameter is the language identifier ('c' in this case), and the expected behavior is to parse and manage syntax structure, with no direct output returned as the purpose is internal parsing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal p = vim.treesitter.get_parser(0, 'c')\np:parse()\n```\n\n----------------------------------------\n\nTITLE: Creating a Function-Based Clipboard Provider in Neovim\nDESCRIPTION: Sets up a custom clipboard provider using Vim functions instead of external commands. This example uses g:foo as a fake clipboard storage, demonstrating the lambda function approach.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\nlet g:clipboard = {\n  \\   'name': 'myClipboard',\n  \\   'copy': {\n  \\      '+': {lines, regtype -> extend(g:, {'foo': [lines, regtype]}) },\n  \\      '*': {lines, regtype -> extend(g:, {'foo': [lines, regtype]}) },\n  \\    },\n  \\   'paste': {\n  \\      '+': {-> get(g:, 'foo', [])},\n  \\      '*': {-> get(g:, 'foo', [])},\n  \\   },\n  \\ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Tab Stops in Vim\nDESCRIPTION: Setting the 'softtabstop' option to modify tab behavior, allowing cursor movement and text insertion across 4-column boundaries\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:set softtabstop=4\n```\n\n----------------------------------------\n\nTITLE: Checking if Variables are Locked in Vim\nDESCRIPTION: Shows how to use the islocked() function to determine if a variable or list element is locked from modification. The function returns 1 for locked variables and 0 for unlocked variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_143\n\nLANGUAGE: vim\nCODE:\n```\nlet alist = [0, ['a', 'b'], 2, 3]\nlockvar 1 alist\necho islocked('alist')        \" 1\necho islocked('alist[1]')    \" 0\n```\n\n----------------------------------------\n\nTITLE: Setting finer-grained commentstrings in Treesitter\nDESCRIPTION: This snippet showcases how to set finer-grained 'commentstring's using the `bo.commentstring` metadata property, which is used by the built-in |commenting| plugin. This is useful for languages like JSX that have different comment syntax depending on the code region.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n    ((jsx_element) @_tag (#set! @_tag bo.commentstring \"{/* %s */}\"))\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Dictionary Entries in Vim\nDESCRIPTION: Demonstrates how to remove entries from a dictionary based on a condition using the filter() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_56\n\nLANGUAGE: vim\nCODE:\n```\n:call filter(dict, 'v:val =~ \"x\"')\n```\n\n----------------------------------------\n\nTITLE: In-place List Concatenation in Vimscript\nDESCRIPTION: This snippet demonstrates two ways to concatenate a list with another list in-place (modifying the original list): using the `+=` operator and the `extend()` function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\t:let mylist += [7, 8]\n\t:call extend(mylist, [7, 8])\n```\n\n----------------------------------------\n\nTITLE: Using max() function in Vim\nDESCRIPTION: This example demonstrates how to use the max() function to find the maximum value in a list of variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_174\n\nLANGUAGE: vim\nCODE:\n```\necho max([apples, pears, oranges])\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Brackets to matchpairs\nDESCRIPTION: Adds angle brackets to the matchpairs option, enabling the % command to jump between matching '<' and '>' characters, which is particularly useful for HTML editing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_50\n\nLANGUAGE: viml\nCODE:\n```\nset mps+=<:>\n```\n\n----------------------------------------\n\nTITLE: Syntax Toggle Function in Neovim\nDESCRIPTION: Command to toggle syntax highlighting on/off using g:syntax_on variable\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\n:if exists(\"g:syntax_on\") | syntax off | else | syntax enable | endif\n```\n\n----------------------------------------\n\nTITLE: Specific Count Matching in Vim Search Patterns\nDESCRIPTION: Using count specifications in search patterns to match items a specific number of times. The \\{n,m} syntax provides precise control over repetition frequency.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n/ab\\{3,5}\n```\n\n----------------------------------------\n\nTITLE: Mapping Completion Commands in Vim - Vimscript\nDESCRIPTION: This code snippet provides custom key mappings for improving the efficiency of completion commands in Vim. Dependencies include the 'inoremap' command in Vim and an understanding of Vim insert mode mappings. These mappings change default combinations to easier shortcuts. No additional inputs are needed to apply these settings, and the output affects only the behavior of the insert mode in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_2\n\nLANGUAGE: Vimscript\nCODE:\n```\n:inoremap <C-]> <C-X><C-]>\n:inoremap <C-F> <C-X><C-F>\n:inoremap <C-D> <C-X><C-D>\n:inoremap <C-L> <C-X><C-L>\n```\n\n----------------------------------------\n\nTITLE: Copying text to registers in Vim\nDESCRIPTION: This snippet demonstrates how to copy text to named registers (a-z) in Vim, allowing for multiple copy operations between files. The register name precedes the yank command. This enables you to copy multiple blocks of text into different registers, and then paste them in any order.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\t\"fyas\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t\"l3yy\n```\n\nLANGUAGE: vim\nCODE:\n```\n\tCTRL-Vjjww\"by\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t\"fp\n```\n\n----------------------------------------\n\nTITLE: Deep Copying Data Structures - Lua\nDESCRIPTION: The deepcopy function creates a duplicate of the provided expression. For Lists, it performs a full copy, allowing for independent manipulation. The function supports a parameter to control reference handling during copying.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_45\n\nLANGUAGE: lua\nCODE:\n```\ndeepcopy({expr} [, {noref}])                                   *deepcopy()* *E698*\n\t\tMake a copy of {expr}.  For Numbers and Strings this isn't\n\t\tdifferent from using {expr} directly.\n\t\tWhen {expr} is a |List| a full copy is created.  This means\n\t\tthat the original |List| can be changed without changing the\n\t\tcopy, and vice versa.  When an item is a |List|, a copy for it\n\t\tis made, recursively.  Thus changing an item in the copy does\n\t\tnot change the contents of the original |List|.\n\n\t\tWhen {noref} is omitted or zero a contained |List| or\n\t\t|Dictionary| is only copied once.  All references point to\n\t\tthis single copy.  With {noref} set to 1 every occurrence of a\n\t\t|List| or |Dictionary| results in a new copy.  This also means\n\t\tthat a cyclic reference causes deepcopy() to fail.\n\t\t\t\t\t\t*E724*\n\t\tNesting is possible up to 100 levels.  When there is an item\n\t\tthat refers back to a higher level making a deep copy with\n\t\t{noref} set to 1 will fail.\n\t\tAlso see |copy()|.\n\n\t\tParameters: ~\n\t\t  • {expr} (`T`)\n\t\t  • {noref} (`boolean?`)\n\n\t\tReturn: ~\n\t\t  (`T`)\n```\n\n----------------------------------------\n\nTITLE: Square Root Calculation using sqrt()\nDESCRIPTION: Examples of using the sqrt() function for calculating square roots of numbers, including handling negative numbers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_250\n\nLANGUAGE: vim\nCODE:\n```\necho sqrt(100)\necho sqrt(-4.01)\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Nvim Communication Example in Lua\nDESCRIPTION: Demonstrates how to detect and communicate with a parent Nvim process from a child Nvim instance using the $NVIM environment variable and RPC calls.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nif vim.env.NVIM then\n  local ok, chan = pcall(vim.fn.sockconnect, 'pipe', vim.env.NVIM, {rpc=true})\n  if ok and chan then\n    local client = vim.api.nvim_get_chan_info(chan).client\n    local rv = vim.rpcrequest(chan, 'nvim_exec_lua', [[return ... + 1]], { 41 })\n    vim.print(('got \"%s\" from parent Nvim'):format(rv))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Variable in Neovim\nDESCRIPTION: Sets a global variable using 'nvim_set_var'. This API requires the name and value of the variable as strings. Errors if the variable cannot be set.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_set_var\\(\\{name\\}, \\{value\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Window Quitting Examples in Vim\nDESCRIPTION: Examples showing different ways to quit windows by number in Vim using counts with the quit command. Demonstrates quitting specific windows by position or relative reference.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:1quit  \" quit the first window\n:$quit  \" quit the last window\n:9quit  \" quit the last window\n        \" if there are fewer than 9 windows opened\n:-quit  \" quit the previous window\n:+quit  \" quit the next window\n:+2quit \" quit the second next window\n```\n\n----------------------------------------\n\nTITLE: Setting Undo Variables in Vim Filetype Plugins\nDESCRIPTION: This example shows how to set the b:undo_ftplugin variable to undo the settings in a filetype plugin when the filetype changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_52\n\nLANGUAGE: vim\nCODE:\n```\nlet b:undo_ftplugin = \"setlocal fo< com< tw< commentstring<\"\n    \\ .. \"| unlet b:match_ignorecase b:match_words b:match_skip\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Placed Signs in Vim Buffers\nDESCRIPTION: Examples of using sign_getplaced() to get information about signs placed in buffers. This function can return signs from specific buffers, groups, or with specific attributes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_237\n\nLANGUAGE: vim\nCODE:\n```\n\" Get a List of signs placed in eval.c in the\n\" global group\necho sign_getplaced(\"eval.c\")\n\n\" Get a List of signs in group 'g1' placed in eval.c\necho sign_getplaced(\"eval.c\", {'group' : 'g1'})\n\n\" Get a List of signs placed at line 10 in eval.c\necho sign_getplaced(\"eval.c\", {'lnum' : 10})\n\n\" Get sign with identifier 10 placed in a.py\necho sign_getplaced(\"a.py\", {'id' : 10})\n\n\" Get sign with id 20 in group 'g1' placed in a.py\necho sign_getplaced(\"a.py\", {'group' : 'g1',\n                               \\  'id' : 20})\n\n\" Get a List of all the placed signs\necho sign_getplaced()\n```\n\n----------------------------------------\n\nTITLE: Using getbufinfo() Function to Retrieve Buffer Information in Vim Script\nDESCRIPTION: Shows how to use the getbufinfo() function to get information about buffers in Vim script. It demonstrates iterating over buffer information and checking for specific buffer properties.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_81\n\nLANGUAGE: vim\nCODE:\n```\nfor buf in getbufinfo()\n    echo buf.name\nendfor\nfor buf in getbufinfo({'buflisted':1})\n    if buf.changed\n        \" ....\n    endif\nendfor\n```\n\nLANGUAGE: vim\nCODE:\n```\ngetbufvar({bufnr}, '&option_name')\n```\n\n----------------------------------------\n\nTITLE: Line and Column Specific Matching\nDESCRIPTION: Covers using line ('\\%23l') and column ('\\%23c') specific matches, including above ('\\%<23') and below ('\\%>23') operators for more targeted searches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_21\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\%23l\"\n\"\\\\%<23l\"\n\"\\\\%>23l\"\n\"\\\\%.l\"\n\"\\\\%.c\"\n\":\"exe '/\\\\% .. line(\".\") .. 'l'\"\n\":\"exe '/\\\\% .. col(\".\") .. 'c'\"\n```\n\n----------------------------------------\n\nTITLE: Compound Assignment Operations in Vim\nDESCRIPTION: Various compound assignment operators in Vim that combine an operation with assignment. These operate on different variable types, including numbers, strings, lists, and blobs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_91\n\nLANGUAGE: viml\nCODE:\n```\n:let {var} += {expr1}\n:let {var} -= {expr1}\n`:let {var} *= {expr1}`\n:let {var} /= {expr1}\n:let {var} %= {expr1}\n:let {var} .= {expr1}\n:let {var} ..= {expr1}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Access in Vim Script\nDESCRIPTION: Demonstrates dictionary creation and access using dot notation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_78\n\nLANGUAGE: vim\nCODE:\n```\n:let dict = {\"one\": 1, 2: \"two\"}\\n:echo dict.one\\n:echo dict.2\\n:echo dict .2\n```\n\n----------------------------------------\n\nTITLE: Calling Environment Functions with libcall in Vim\nDESCRIPTION: Example of using libcall() to call the getenv() function from the C library to retrieve the HOME environment variable. This demonstrates interfacing with external system libraries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_151\n\nLANGUAGE: vim\nCODE:\n```\necho libcall(\"libc.so\", \"getenv\", \"HOME\")\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise Inversion in Vim\nDESCRIPTION: Demonstrates how to use the invert() function to perform bitwise inversion on an integer value. The example shows toggling bits in a variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_140\n\nLANGUAGE: vim\nCODE:\n```\nlet bits = invert(bits)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Provider for Neovim\nDESCRIPTION: Installs the neovim NPM package globally, which is required for Node.js integration in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g neovim\n```\n\n----------------------------------------\n\nTITLE: Filter Command Example - Filtering XML Files\nDESCRIPTION: Demonstrates using the :filter command to restrict output to only XML files when listing oldfiles.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n:filter /\\.xml$/ oldfiles\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buffer List for All Tab Pages in Vim\nDESCRIPTION: This example shows how to get a list of all buffers in all tab pages using a for loop and the tabpagebuflist function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_275\n\nLANGUAGE: vim\nCODE:\n```\nlet buflist = []\nfor i in range(tabpagenr('$'))\n   call extend(buflist, tabpagebuflist(i + 1))\nendfor\n```\n\n----------------------------------------\n\nTITLE: Managing Buffer-local Autocommands in Vim\nDESCRIPTION: Commands for managing buffer-local autocommands, showing how to remove, list, and apply them to specific buffers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_23\n\nLANGUAGE: viml\nCODE:\n```\n:au! * <buffer>                \" remove buffer-local autocommands for\n                              \" current buffer\n:au! * <buffer=33>              \" remove buffer-local autocommands for\n                              \" buffer #33\n:bufdo :au! CursorHold <buffer>  \" remove autocmd for given event for all\n                              \" buffers\n:au * <buffer>                 \" list buffer-local autocommands for\n                              \" current buffer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Syntax Item Color in Vim\nDESCRIPTION: This example shows how to echo the color of the syntax item under the cursor using synID, synIDtrans, and synIDattr functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_269\n\nLANGUAGE: vim\nCODE:\n```\necho synIDattr(synIDtrans(synID(line(\".\"), col(\".\"), 1)), \"fg\")\n```\n\n----------------------------------------\n\nTITLE: Replacing Diagnostic Functions in Neovim\nDESCRIPTION: Explains migration from deprecated diagnostic functions to newer alternatives in Neovim. It includes dependencies on vim.diagnostic module for updated functions. Functions like vim.lsp.diagnostic.get_count() are replaced with vim.diagnostic.count(), enhancing functionality and performance.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nvim.lsp.diagnostic.get_count()\n```\n\n----------------------------------------\n\nTITLE: Using glob2regpat to match filenames in Vim\nDESCRIPTION: Example of using glob2regpat() to convert a glob pattern into a regular expression pattern that can be used with the =~ operator to match a filename.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_112\n\nLANGUAGE: vim\nCODE:\n```\nif filename =~ glob2regpat('Make*.mak')\n  \" ...\nendif\n```\n\n----------------------------------------\n\nTITLE: List Slice Operations in Vim Script\nDESCRIPTION: Examples of list slicing operations including getting first four items and creating shallow copies.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_76\n\nLANGUAGE: vim\nCODE:\n```\n:let l = mylist[:3]\\n:let l = mylist[4:4]\\n:let l = mylist[:]\n```\n\n----------------------------------------\n\nTITLE: Setting automatic fold closing\nDESCRIPTION: Configures folds to automatically close when the cursor moves out of them. This applies the foldlevel to folds not containing the cursor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_10\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set foldclose=all\n```\n\n----------------------------------------\n\nTITLE: Setting indent-based folding method\nDESCRIPTION: Changes the folding method to use indentation levels for determining fold regions. This is useful for structured code with consistent indentation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_15\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set foldmethod=indent\n```\n\n----------------------------------------\n\nTITLE: Parsing Regions in LanguageTree (Lua)\nDESCRIPTION: Recursively parses all regions in the language tree using treesitter parsers. Can parse specific ranges or the entire source. Supports asynchronous parsing with a callback function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:parse({range}, {on_parse})\n```\n\n----------------------------------------\n\nTITLE: Configuring Clipboard for All Operations in Neovim\nDESCRIPTION: Configures Neovim to use the system clipboard for all operations by adding 'unnamedplus' to the clipboard option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nset clipboard+=unnamedplus\n```\n\n----------------------------------------\n\nTITLE: Using Substitute Command with Range in Vim\nDESCRIPTION: This snippet demonstrates how to use the substitute command with a range and the 'c' flag in Vim. It searches for 'Pattern' from the cursor position to line 300, prompting for action at each match.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n:.,300s/Pattern//gc\n```\n\n----------------------------------------\n\nTITLE: LSP Configuration Examples and Merging\nDESCRIPTION: Example demonstrating LSP configuration merging behavior across different configuration sources.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n-- Defined in init.lua\nvim.lsp.config('*', {\n  capabilities = {\n    textDocument = {\n      semanticTokens = {\n        multilineTokenSupport = true,\n      }\n    }\n  },\n  root_markers = { '.git' },\n})\n\n-- Defined in <rtp>/lsp/clangd.lua\nreturn {\n  cmd = { 'clangd' },\n  root_markers = { '.clangd', 'compile_commands.json' },\n  filetypes = { 'c', 'cpp' },\n}\n\n-- Defined in init.lua\nvim.lsp.config('clangd', {\n  filetypes = { 'c' },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Hide Command with Buffer in Vim\nDESCRIPTION: Example showing how to use the :hide command with another command to edit a new file while hiding the current buffer, regardless of the 'hidden' option setting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:hide edit Makefile\n```\n\n----------------------------------------\n\nTITLE: Checking Buffer Existence in Neovim using Vim Script\nDESCRIPTION: The function 'bufexists' checks if a buffer exists by accepting either a buffer number or a string name. Returns 1 if it exists, otherwise returns 0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nbufexists({buf})\n```\n\n----------------------------------------\n\nTITLE: Defining Perl Functions in Vim Scripts\nDESCRIPTION: Example of defining a Perl function within a Vim function using heredoc syntax, demonstrating how to include Perl code in Vim scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nfunction! MyVimMethod()\nperl << EOF\nsub my_vim_method\n{\n\tprint \"Hello World!\\n\";\n}\nEOF\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords in Vim Script\nDESCRIPTION: Defines keywords within a specified syntax group for highlighting, with examples using 'xType' and 'xStatement'. It also connects these groups to standard Vim groups using the ':highlight link' command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_3\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax keyword {group} {keyword} ...\n:syntax keyword xType int long char\n:syntax keyword xStatement if then else endif\n:highlight link xType Type\n:highlight link xStatement Statement\n```\n\n----------------------------------------\n\nTITLE: Insert Mode Completion Example - Month List\nDESCRIPTION: Demonstrates how to implement custom insert mode completion using the complete() function to display a list of months.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\ninoremap <F5> <C-R>=ListMonths()<CR>\n\nfunc ListMonths()\n  call complete(col('.'), ['January', 'February', 'March',\n    \\ 'April', 'May', 'June', 'July', 'August', 'September',\n    \\ 'October', 'November', 'December'])\n  return ''\nendfunc\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildmode Completion Behavior\nDESCRIPTION: Examples of different wildmode configurations for controlling command-line completion behavior and menu display.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_84\n\nLANGUAGE: vim\nCODE:\n```\nset wildmode=full\nset wildmode=longest,full\nset wildmode=list:full\nset wildmode=list,full\nset wildmode=longest,list\nset wildmode=noselect:full\nset wildmode=noselect:lastused,full\n```\n\n----------------------------------------\n\nTITLE: Parsing a command line in Neovim\nDESCRIPTION: This function parses a command line string in Neovim. The function requires the command line string and optional parameters. It returns a dictionary containing the parsed command information. It does not check the validity of command arguments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_47\n\nLANGUAGE: vim\nCODE:\n```\nnvim_parse_cmd({str}, {opts})                               *nvim_parse_cmd()*\\n    Parse command line.\\n\\n    Doesn't check the validity of command arguments.\\n\\n    Attributes: ~\\n        |api-fast|\\n        Since: 0.8.0\\n\\n    Parameters: ~\\n      • {str}   Command line string to parse. Cannot contain \"\\n\".\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer for Window in Neovim Lua API\nDESCRIPTION: Sets the current buffer in a window without side effects. Not allowed when textlock is active. Available since Neovim 0.3.2.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_76\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_set_buf({window}, {buffer})\n```\n\n----------------------------------------\n\nTITLE: Heredoc Syntax for Multi-line Text in Vim\nDESCRIPTION: Using the heredoc syntax in Vim to assign multi-line text to a variable as a List. Supports both literal text and evaluated expressions with the 'eval' option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_96\n\nLANGUAGE: viml\nCODE:\n```\n:let {var-name} =<< [trim] [eval] {endmarker}\ntext...\ntext...\n{endmarker}\n```\n\n----------------------------------------\n\nTITLE: Echo Example in Lua\nDESCRIPTION: Example showing how to use nvim_echo API to print formatted messages with highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_echo({ { 'chunk1-line1\\nchunk1-line2\\n' }, { 'chunk2-line1' } }, true, {})\n```\n\n----------------------------------------\n\nTITLE: Platform detection with has() in Vim\nDESCRIPTION: Example of using has() to check if the current system is Windows before executing platform-specific code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_120\n\nLANGUAGE: vim\nCODE:\n```\nif has(\"win32\")\n  \" ...\nendif\n```\n\n----------------------------------------\n\nTITLE: File Status Operation in Lua\nDESCRIPTION: Retrieves file status information including size, permissions, and timestamps. Equivalent to stat(2).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_50\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_stat({path} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Getting All Trees in LanguageTree (Lua)\nDESCRIPTION: Returns all trees of the regions parsed by this parser, excluding child languages. The result is list-like under certain conditions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:trees()\n```\n\n----------------------------------------\n\nTITLE: Using submatch() in Vim Script\nDESCRIPTION: Demonstrates the usage of submatch() function to retrieve submatches in a substitute command or substitute() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_265\n\nLANGUAGE: vim\nCODE:\n```\ns/\\d\\+/\\=submatch(0) + 1/\n```\n\nLANGUAGE: vim\nCODE:\n```\necho substitute(text, '\\d\\+', '\\=submatch(0) + 1', '')\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations in Vim Script\nDESCRIPTION: Demonstrates basic mathematical operations and string concatenation in Vim script. Shows operator precedence and grouping with parentheses.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_8\n\nLANGUAGE: viml\nCODE:\n```\n:echo 10 + 5 * 2\n:echo (10 + 5) * 2\n:echo \"foo\" .. \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Buffer-local abbreviation example\nDESCRIPTION: This snippet demonstrates how to create a buffer-local abbreviation.  The abbreviation 'FF' is defined for the current buffer only, and it expands to a `for` loop structure in C.  This is typically used within a filetype plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_27\n\nLANGUAGE: Vim Script\nCODE:\n```\n:abb <buffer> FF  for (i = 0; i < ; ++i)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiline Paste Mapping in Lua\nDESCRIPTION: This snippet demonstrates how to use nvim_paste to create a keymap that inserts multiline text. The function creates a buffer-local mapping that pastes predefined text when 'x' is pressed in normal mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nvim.keymap.set('n', 'x', function()\n  vim.api.nvim_paste([[\n    line1\n    line2\n    line3\n  ]], false, -1)\nend, { buffer = true })\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Start Default Keymaps in Neovim\nDESCRIPTION: This snippet outlines how `vim.lsp.start()` sets default keymaps for LSP servers in Neovim, such as mapping `K` in Normal mode to `vim.lsp.buf.hover()`. The functionality assumes server support and depends on Neovim's LSP integration. Users can customize 'keywordprg' prior to calling `vim.lsp.start()`. The input is a function call, and it outputs configured keymaps within Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.start()\n```\n\n----------------------------------------\n\nTITLE: Setting File Formats in Vim\nDESCRIPTION: This command sets the 'fileformats' option to specify the order in which Vim should try to detect file formats. It tells Vim to try Unix format first and MS-DOS format second. This helps Vim automatically handle line-break differences between operating systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\t:set fileformats=unix,dos\n```\n\n----------------------------------------\n\nTITLE: File Editing Commands in Vim\nDESCRIPTION: Commands for editing files, including file loading, reloading, finding, and navigating between files. Also includes directory manipulation commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:e[dit][!] {file}    edit {file}\n:e[dit][!]           reload the current file\n:ene[w][!]           edit a new, unnamed buffer\n:fin[d][!] {file}    find {file} in 'path' and edit it\n\nN  CTRL-^           edit alternate file N (equivalent to \":e #N\")\ngf  or ]f           edit the file whose name is under the cursor\n:pwd                print the current directory name\n:cd [path]          change the current directory to [path]\n:cd -               back to previous current directory\n:f[ile]             print the current file name and the cursor position\n:f[ile] {name}      set the current file name to {name}\n:files              show alternate file names\n```\n\n----------------------------------------\n\nTITLE: Disabling Function Key with <Nop> in Vim\nDESCRIPTION: Demonstrates how to disable a key (F8 in this example) by mapping it to <Nop>, which produces no output. The mapping is done for both normal and insert/command modes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n:map  <F8>  <Nop>\n:map! <F8>  <Nop>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Syntax with Vimscript\nDESCRIPTION: Shows how to use the ':syntax sync' command to synchronize syntax highlighting in Vim. The snippet includes setting minimum and maximum line limits for scanning, skipping certain syntax items for faster syncing, and specifying custom syntax groups for various programming constructs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_20\n\nLANGUAGE: Vimscript\nCODE:\n```\n:syntax sync ccomment\n:syntax sync ccomment minlines=10 maxlines=500\n:syntax sync ccomment xAltComment\n:syntax sync minlines=150\n:syntax sync match {sync-group-name} \\ \\\\grouphere {group-name} {pattern}\n:syntax sync match shIfSync grouphere shIf \"\\\\<if\\\\>\"\n:syntax sync match shIfSync groupthere NONE \"\\\\<fi\\\\>\"\n:syntax sync match xSpecial /{.*}/\n```\n\n----------------------------------------\n\nTITLE: Normal Mode Commands Reference\nDESCRIPTION: Documents commands available in Neovim's normal mode, including cursor movements, text manipulation, and window operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\nCTRL-@ \t\tnot used\nCTRL-A \t\tadd N to number at/after cursor\nCTRL-B \t\tscroll N screens Backwards\nCTRL-C \t\tinterrupt current (search) command\nCTRL-D \t\tscroll Down N lines (default: half a screen)\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Throwing\nDESCRIPTION: Shows how to throw exceptions in Vim script using literals and expressions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_120\n\nLANGUAGE: vim\nCODE:\n```\n:throw 4711\n:throw \"string\"\n:throw 4705 + strlen(\"string\")\n:throw strpart(\"strings\", 0, 6)\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal True Colors in Neovim\nDESCRIPTION: Configuration snippet to enable true color (24-bit) support in compatible terminals.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nset termguicolors\n```\n\n----------------------------------------\n\nTITLE: Lua Bitwise Operations Examples\nDESCRIPTION: Presents examples of various bitwise operations including tobit, tohex, bnot, bor, band, bxor, lshift, rshift, arshift, rol, and ror, each showcasing its purpose and the expected output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nprint(0xffffffff)                --> 4294967295 (see Note)\nprint(bit.tobit(0xffffffff))     --> -1\nprintx(bit.tobit(0xffffffff))    --> 0xffffffff\nprint(bit.tobit(0xffffffff + 1)) --> 0\nprint(bit.tobit(2^40 + 1234))    --> 1234\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\nprint(bit.tohex(1))              --> 00000001\nprint(bit.tohex(-1))             --> ffffffff\nprint(bit.tohex(0xffffffff))     --> ffffffff\nprint(bit.tohex(-1, -8))         --> FFFFFFFF\nprint(bit.tohex(0x21, 4))        --> 0021\nprint(bit.tohex(0x87654321, 4))  --> 4321\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\nprint(bit.bnot(0))            --> -1\nprintx(bit.bnot(0))           --> 0xffffffff\nprint(bit.bnot(-1))           --> 0\nprint(bit.bnot(0xffffffff))   --> 0\nprintx(bit.bnot(0x12345678))  --> 0xedcba987\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\nprint(bit.bor(1, 2, 4, 8))                --> 15\nprintx(bit.band(0x12345678, 0xff))        --> 0x00000078\nprintx(bit.bxor(0xa5a5f0f0, 0xaa55ff00))  --> 0x0ff00ff0\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\nprint(bit.lshift(1, 0))              --> 1\nprint(bit.lshift(1, 8))              --> 256\nprint(bit.lshift(1, 40))             --> 256\nprint(bit.rshift(256, 8))            --> 1\nprint(bit.rshift(-256, 8))           --> 16777215\nprint(bit.arshift(256, 8))           --> 1\nprint(bit.arshift(-256, 8))          --> -1\nprintx(bit.lshift(0x87654321, 12))   --> 0x54321000\nprintx(bit.rshift(0x87654321, 12))   --> 0x00087654\nprintx(bit.arshift(0x87654321, 12))  --> 0xfff87654\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\nprintx(bit.rol(0x12345678, 12))   --> 0x45678123\nprintx(bit.ror(0x12345678, 12))   --> 0x67812345\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\nprintx(bit.bswap(0x12345678)) --> 0x78563412\nprintx(bit.bswap(0x78563412)) --> 0x12345678\n\n```\n\n----------------------------------------\n\nTITLE: Defining a User Command in Vim/Neovim\nDESCRIPTION: Example of defining a user command named 'Rename' using the :command directive. This demonstrates the basic syntax for creating a custom command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_29\n\nLANGUAGE: viml\nCODE:\n```\n:command Rename ...\n```\n\n----------------------------------------\n\nTITLE: Mapping Commands in Vim\nDESCRIPTION: This snippet provides Vim mappings to navigate code blocks using custom keybindings. The key sequences map specific keystrokes to search and navigate through code blocks, such as '{' and '}'. Dependencies include having Vim installed and appropriate configuration loaded. This enables efficient code navigation by customizing directional controls like searches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:map [[ ?{<CR>w99[{\\n:map ][ /}<CR>b99]}\\n:map ]] j0[[%/{<CR>\\n:map [] k$][%?}<CR>\n```\n\n----------------------------------------\n\nTITLE: Mapping Cursor Keys to Visual Line Movement\nDESCRIPTION: Mappings to bind the Up and Down cursor keys to gk and gj commands for more intuitive navigation in wrapped lines, allowing movement by visible lines rather than logical lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:map <Up> gk\n:map <Down> gj\n```\n\n----------------------------------------\n\nTITLE: Sample Health Check Module Implementation in Lua\nDESCRIPTION: Example implementation of a health check module for a plugin, showing the basic structure and usage of health reporting functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal M = {}\n\nM.check = function()\n  vim.health.start(\"foo report\")\n  -- make sure setup function parameters are ok\n  if check_setup() then\n    vim.health.ok(\"Setup is correct\")\n  else\n    vim.health.error(\"Setup is incorrect\")\n  end\n  -- do some more checking\n  -- ...\nend\n\nreturn M\n```\n\n----------------------------------------\n\nTITLE: Matchgroup Region Definition in Vim\nDESCRIPTION: Examples of using matchgroup to highlight region boundaries differently from their content.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region xInside matchgroup=xParen start=/(/ end=/)/\n:syntax region xInside matchgroup=xParen start=/(/\n\t\\ matchgroup=xParenEnd end=/)/\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Placed Sign in Vim\nDESCRIPTION: Example of using sign_jump() to move the cursor to a specific sign in a buffer. This function opens the buffer or jumps to the window containing the sign.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_238\n\nLANGUAGE: vim\nCODE:\n```\n\" Jump to sign 10 in the current buffer\ncall sign_jump(10, '', '')\n```\n\n----------------------------------------\n\nTITLE: Unary Operators in Neovim\nDESCRIPTION: Examples of unary operators in Neovim, including logical NOT (!), unary minus (-), and unary plus (+). Shows how these operators can be combined.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_72\n\nLANGUAGE: vim\nCODE:\n```\n!-1\t    == 0\n!!8\t    == 1\n--9\t    == 9\n```\n\n----------------------------------------\n\nTITLE: Using function() with Dictionaries for Dict Functions in Vim Script\nDESCRIPTION: Shows how to use function() with dictionaries to create dict functions in Vim script. It demonstrates passing a dictionary as 'self' to the function and combining argument lists with dictionaries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_79\n\nLANGUAGE: vim\nCODE:\n```\nfunction Callback() dict\n   echo \"called for \" .. self.name\nendfunction\n\"...\nlet context = {\"name\": \"example\"}\nlet Func = function('Callback', context)\n\"...\ncall Func()\t\" will echo: called for example\n```\n\nLANGUAGE: vim\nCODE:\n```\nfunction Callback(arg1, count) dict\n\"...\nendfunction\nlet context = {\"name\": \"example\"}\nlet Func = function('Callback', ['one'], context)\n\"...\ncall Func(500)\n```\n\n----------------------------------------\n\nTITLE: Custom Patch Expression Function in Vim\nDESCRIPTION: Example implementation of a custom patch expression function that applies patches to files using the system patch command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\nset patchexpr=MyPatch()\nfunction MyPatch()\n   :call system(\"patch -o \" .. v:fname_out .. \" \" .. v:fname_in ..\n   \\  \" < \" .. v:fname_diff)\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Autocommand Management in Vim\nDESCRIPTION: Commands for defining, listing, and managing automatic commands that execute on certain events. Provides syntax for creating event patterns and removing autocommands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n:au                     # list all autocommands\n:au {event}               # list all autocommands for {event}\n:au {event} {pat}         # list all autocommands for {event} with {pat}\n:au {event} {pat} {cmd}   # enter new autocommands for {event} with {pat}\n:au!                     # remove all autocommands\n:au! {event}              # remove all autocommands for {event}\n:au! * {pat}              # remove all autocommands for {pat}\n:au! {event} {pat}        # remove all autocommands for {event} with {pat}\n:au! {event} {pat} {cmd}  # remove all autocommands for {event} with {pat} and enter new one\n```\n\n----------------------------------------\n\nTITLE: Vim Configuration File Edit\nDESCRIPTION: Commands to edit Vim configuration file and add search settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:edit ~/.config/nvim/init.vim\nGo:set hlsearch<Esc>\nZZ\n```\n\n----------------------------------------\n\nTITLE: Using Marks in Vim Script\nDESCRIPTION: Demonstrates the use of marks 't' and 'b' in Vim to specify line ranges for commands. This allows users to refer to specific lines without manually counting line numbers. Inputs include mark placements and typical commands applied to the ranges between 't' and 'b'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_3\n\nLANGUAGE: Vim Script\nCODE:\n```\n\n  :'t,'b\n```\n\n----------------------------------------\n\nTITLE: Using Character Offsets in Vim Search\nDESCRIPTION: Various character offset techniques in Vim search patterns that allow positioning the cursor at specific character positions relative to the match, including at the end of matches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n/const/e\n```\n\nLANGUAGE: vim\nCODE:\n```\n/const/e+1\n```\n\nLANGUAGE: vim\nCODE:\n```\n/const/e-1\n```\n\nLANGUAGE: vim\nCODE:\n```\n/const/b+2\n```\n\n----------------------------------------\n\nTITLE: Listing Runtime Directories in Neovim\nDESCRIPTION: Command to list all runtime directories and packages with Lua paths using nvim_get_runtime_file function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n\" List all runtime dirs and packages with Lua paths.\n:echo nvim_get_runtime_file(\"lua/\", v:true)\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Filetype Detection in Vim\nDESCRIPTION: Basic command to enable Vim's filetype detection system. This loads filetype.lua and filetype.vim from VIMRUNTIME.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:filetype on\n```\n\n----------------------------------------\n\nTITLE: Executing Normal Mode Command with Register and Count in Neovim\nDESCRIPTION: This snippet shows a more advanced use of CTRL-O in Insert mode, utilizing a register and count with the command 'g3dw'. It deletes up to the third word into register 'g', illustrating the flexibility of command execution in Insert mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCTRL-O \"g3dw\n```\n\n----------------------------------------\n\nTITLE: Counting Matched Texts in Neovim Buffer (Vimscript)\nDESCRIPTION: This snippet demonstrates how to use searchcount() to count occurrences of a specific pattern in the current buffer. It also shows how to restore the old search count.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_218\n\nLANGUAGE: vim\nCODE:\n```\n\" Count '\\<foo\\>' in this buffer\n\" (Note that it also updates search count)\nlet result = searchcount(#{pattern: '\\<foo\\>'})\n\n\" To restore old search count by old pattern,\n\" search again\ncall searchcount()\n```\n\n----------------------------------------\n\nTITLE: Detailed OSC 52 Clipboard Configuration in Neovim - Lua\nDESCRIPTION: This snippet provides a detailed Lua table configuration for using the OSC 52 clipboard provider in Neovim. It specifies the 'copy' and 'paste' functions to handle the '+' and '*' registers, leveraging 'vim.ui.clipboard.osc52'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nvim.g.clipboard = {\n  name = 'OSC 52',\n  copy = {\n    ['+'] = require('vim.ui.clipboard.osc52').copy('+'),\n    ['*'] = require('vim.ui.clipboard.osc52').copy('*'),\n  },\n  paste = {\n    ['+'] = require('vim.ui.clipboard.osc52').paste('+'),\n    ['*'] = require('vim.ui.clipboard.osc52').paste('*'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Zero-width Assertions in Vim Regex\nDESCRIPTION: This snippet covers zero-width assertions in Vim regex, illustrating how to use different types of conditions, such as lookaheads (\\@=) and lookbehinds (\\@<=), along with their specific use cases and examples.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n*/\\@=*\\\n\\@=\\tMatches the preceding atom with zero width.\n\\tLike \"(?=pattern)\" in Perl.\n\\tExample\\tmatches ~\n\\tfoo\\(bar\\)\\@=\\t\"foo\" in \"foobar\"\n\\tfoo\\(bar\\)\\@=foo\\tnothing\n\n\\t\\tUsing \"\\@=\" (or \"^\", \"$\", \"\\<\", \"\\>\") no characters are included\n\\tin the match.  These items are only used to check if a match can be\n\\tmade.  This can be tricky, because a match with following items will\n\\tbe done in the same position.  The last example above will not match\n\\t\"foobarfoo\", because it tries match \"foo\" in the same position where\n\\t\"bar\" matched.\n```\n\n----------------------------------------\n\nTITLE: Optimizing Fold Expression Performance with Caching in Vim\nDESCRIPTION: A performance optimization technique for fold expressions that caches fold levels in a buffer-local variable. This reduces computation by only recalculating fold levels when the buffer has been changed, using b:changedtick as a trigger.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nfunc MyFoldFunc()\n  if b:lasttick == b:changedtick\n    return b:foldlevels[v:lnum - 1]\n  endif\n  let b:lasttick = b:changedtick\n  let b:foldlevels = []\n  \" compute foldlevels ...\n  return b:foldlevels[v:lnum - 1]\nenddef\nset foldexpr=s:MyFoldFunc()\n```\n\n----------------------------------------\n\nTITLE: Customizing Colorscheme in Vim\nDESCRIPTION: This snippet demonstrates how to customize a colorscheme in Vim. It shows how to create a new colorscheme file, load an existing one, and modify specific highlight groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_184\n\nLANGUAGE: viml\nCODE:\n```\nruntime colors/evening.vim\nhi Statement ctermfg=Blue guifg=Blue\n```\n\n----------------------------------------\n\nTITLE: Managing Case Sensitivity in Vim Syntax Files\nDESCRIPTION: Defines whether language syntax in Vim should be case-sensitive or not. Useful for languages with varying case sensitivity. Can be placed anywhere in a syntax file to affect subsequent definitions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_2\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax case match\n:syntax case ignore\n```\n\n----------------------------------------\n\nTITLE: Cargo Command Shortcuts (Vim)\nDESCRIPTION: These commands provide shortcuts for invoking various Cargo commands directly from within Vim. Each command maps to a specific cargo action such as build, clean, doc, init, run, test, update, bench, search, publish, install, and runtarget.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n:Cargo <args>                                                       *:Cargo*\n                Runs `cargo` with the provided arguments.\n\n:Cbuild <args>                                                     *:Cbuild*\n                Shortcut for `cargo build` .\n\n:Cclean <args>                                                     *:Cclean*\n                Shortcut for `cargo clean` .\n\n:Cdoc <args>                                                         *:Cdoc*\n                Shortcut for `cargo doc` .\n\n:Cinit <args>                                                       *:Cinit*\n                Shortcut for `cargo init` .\n\n:Crun <args>                                                         *:Crun*\n                Shortcut for `cargo run` .\n\n:Ctest <args>                                                       *:Ctest*\n                Shortcut for `cargo test` .\n\n:Cupdate <args>                                                   *:Cupdate*\n                Shortcut for `cargo update` .\n\n:Cbench <args>                                                     *:Cbench*\n                Shortcut for `cargo bench` .\n\n:Csearch <args>                                                   *:Csearch*\n                Shortcut for `cargo search` .\n\n:Cpublish <args>                                                 *:Cpublish*\n                Shortcut for `cargo publish` .\n\n:Cinstall <args>                                                 *:Cinstall*\n                Shortcut for `cargo install` .\n\n:Cruntarget <args>                                                 *:Cruntarget*\n                Shortcut for `cargo run --bin` or `cargo run --example`,\n                depending on the currently open buffer.\n```\n\n----------------------------------------\n\nTITLE: Mapping Escape Key in Neovim\nDESCRIPTION: This Neovim-specific snippet maps the Escape key to a terminal mode command escape sequence. This mapping is enclosed in a conditional block to ensure it only applies when Neovim is being used.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nif has('nvim')\n    tnoremap <Esc> <C-\\><C-n>\nendif\n```\n\n----------------------------------------\n\nTITLE: Autocommand with Environment Variable in Vimscript\nDESCRIPTION: This demonstrates how to use an environment variable in an autocommand pattern. The 'expandtab' option will be set for all text files in the `$VIMRUNTIME/doc/` directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n \":autocmd BufRead $VIMRUNTIME/doc/*.txt  set expandtab\"\n```\n\n----------------------------------------\n\nTITLE: List Unpacking in Vim\nDESCRIPTION: Examples of unpacking lists into multiple variables in Vim, including basic unpacking, compound operations, and collecting remaining items into a variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_95\n\nLANGUAGE: viml\nCODE:\n```\n:let [s, item] = GetItem(s)\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let x = [0, 1]\n:let i = 0\n:let [i, x[i]] = [1, 2]\n:echo x\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let [{name1}, {name2}, ...] .= {expr1}\n:let [{name1}, {name2}, ...] += {expr1}\n:let [{name1}, {name2}, ...] -= {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let [a, b; rest] = [\"aval\", \"bval\", 3, 4]\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let [{name}, ..., ; {lastname}] .= {expr1}\n:let [{name}, ..., ; {lastname}] += {expr1}\n:let [{name}, ..., ; {lastname}] -= {expr1}\n```\n\n----------------------------------------\n\nTITLE: Partial Application (Funcref with Bound Args) in Vimscript\nDESCRIPTION: This snippet demonstrates the creation of a Partial, a Funcref with bound arguments and/or a Dictionary, using the `function()` function.  When the Partial is called, the bound arguments and Dictionary are passed to the underlying function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n\tlet Cb = function('Callback', ['foo'], myDict)\n\tcall Cb('bar')\n```\n\n----------------------------------------\n\nTITLE: Creating and Removing Mode-Specific Mappings in Vim\nDESCRIPTION: Demonstrates how to define a mapping for all modes and then remove it for specific modes. This example defines 'xx' for all modes, then removes it for operator-pending mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:map    xx something-difficult\n:ounmap xx\n```\n\n----------------------------------------\n\nTITLE: Example Vimgrep Usage in Vim\nDESCRIPTION: This Vim script demonstrates how to use the `vimgrep` command to search for the function `read_file` in all `.c` files. Then subsequently search for the function `msg` in all `.c` files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\n:vimgrep /\\<read_file\\>/ *.c\n```\n\nLANGUAGE: vim\nCODE:\n```\n:vimgrep /\\<msg\\>/ *.c\n```\n\n----------------------------------------\n\nTITLE: Getting Position in Vim\nDESCRIPTION: The getpos() function retrieves the position for a given string expression. It can return cursor position, last line, mark positions, and visible line ranges. Useful for working with marks and Visual mode selections.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_102\n\nLANGUAGE: vim\nCODE:\n```\ngetpos({expr})\n```\n\n----------------------------------------\n\nTITLE: File Path Expansion with expand()\nDESCRIPTION: Examples showing how to use expand() function to handle file paths and modifiers in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_62\n\nLANGUAGE: vim\nCODE:\n```\nlet &tags = expand(\"%:p:h\") .. \"/tags\"\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet doesntwork = expand(\"%:h.bak\")\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet doeswork = expand(\"%:h\") .. \".bak\"\n```\n\nLANGUAGE: vim\nCODE:\n```\necho expand(expand(\"<cfile>\"))\n```\n\nLANGUAGE: vim\nCODE:\n```\necho expand(\"**/README\")\n```\n\n----------------------------------------\n\nTITLE: Defining an Autoload Function in a Subdirectory in Vim\nDESCRIPTION: This snippet shows how to define a function in a library script that uses subdirectories with the autoload mechanism in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\nfunction netlib#ftp#read(fname)\n    \"  Read the file fname through ftp\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Defining Script-Local Mappings Using <SID> in Vim\nDESCRIPTION: Example of using <SID> in mappings to create script-specific identifiers. This shows how to map user commands to script-local functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\nnoremap <unique> <script> <Plug>TypecorrAdd;  <SID>Add\nnoremap <SID>Add  :call <SID>Add(expand(\"<cword>\"), 1)<CR>\n```\n\n----------------------------------------\n\nTITLE: Using Magic and Nomagic Patterns in Vim\nDESCRIPTION: This snippet demonstrates the use of magic and nomagic prefixes in Vim regex patterns, which control the interpretation of characters in search patterns. The patterns include flags for ignoring case and matching specific Unicode characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n|/\\c|\\c\\c\tignore case, do not use the 'ignorecase' option\n|/\\C|\\C\\C\tmatch case, do not use the 'ignorecase' option\n|/\\Z|\\Z\\Z\tignore differences in Unicode \"combining characters\".\n\t\t\tUseful when searching voweled Hebrew or Arabic text.\n\n\t\tmagic   nomagic\tmatches ~\n|/\\m|\\m\\m\t'magic' on for the following chars in the pattern\n|/\\M|\\M\\M\t'magic' off for the following chars in the pattern\n|/\\v|\\v\\v\tthe following chars in the pattern are \"very magic\"\n|/\\V|\\V\\V\tthe following chars in the pattern are \"very nomagic\"\n|/\\%#=|   \\%#=1   \\%#=1\tselect regexp engine |/zero-width|\n```\n\n----------------------------------------\n\nTITLE: Finding Window Number for a Buffer in Neovim using Vim Script\nDESCRIPTION: The 'bufwinnr' function behaves similarly to 'bufwinid', returning the window number associated with a given buffer, or -1 if not found.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\nbufwinnr({buf})\n```\n\n----------------------------------------\n\nTITLE: Setting the Current Line - Lua\nDESCRIPTION: Sets the text of the current line in the active buffer. This function is restricted when text lock is active.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_current_line({line})\n```\n\n----------------------------------------\n\nTITLE: Buffer Attachment Check for LSP Client in Lua\nDESCRIPTION: Checks whether a specific buffer is attached to a given LSP client. This utility function takes the buffer handle and client id, returning a boolean indicating the attachment status.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\nbuf_is_attached({bufnr}, {client_id})              *vim.lsp.buf_is_attached()*\n    Parameters: ~\n      • {bufnr}      (`integer`) Buffer handle, or 0 for current\n      • {client_id}  (`integer`) the client id\n```\n\n----------------------------------------\n\nTITLE: Cursor Position Save and Restore in Vim\nDESCRIPTION: Example demonstrating how to save and restore cursor position using getcurpos() and setpos() functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_89\n\nLANGUAGE: vim\nCODE:\n```\nlet save_cursor = getcurpos()\nMoveTheCursorAround\ncall setpos('.', save_cursor)\n```\n\n----------------------------------------\n\nTITLE: Pattern Search with Flags Example\nDESCRIPTION: Demonstration of using search() with multiple flags to find specific keywords\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_215\n\nLANGUAGE: vim\nCODE:\n```\necho search('\\<if\\|\\(else\\)\\|\\(endif\\)', 'ncpe')\n```\n\n----------------------------------------\n\nTITLE: Formatting an Entire File in Vim\nDESCRIPTION: Uses a combination of commands to navigate to the first line (gg), apply the format operator (gq), and move to the last line (G).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\ngggqG\n```\n\n----------------------------------------\n\nTITLE: Getting Cursor Position in Window in Neovim Lua API\nDESCRIPTION: Gets the (1,0)-indexed, buffer-relative cursor position for a given window. Returns a (row, col) tuple. Available since Neovim 0.1.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_75\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_get_cursor({window})\n```\n\n----------------------------------------\n\nTITLE: Wildmenu Control Mapping\nDESCRIPTION: Shows how to map Ctrl-J to work like Down arrow in wildmenu mode using conditional mapping.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_283\n\nLANGUAGE: vim\nCODE:\n```\ncnoremap <expr> <C-j> wildmenumode() ? \"\\<Down>\\<Tab>\" : \"\\<c-j>\"\n```\n\n----------------------------------------\n\nTITLE: Sorting a List in Vim\nDESCRIPTION: This snippet shows how to sort a list of items in Vim by utilizing an external 'sort' command. It details selection and sorting methods while ensuring line continuity with backslashes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n/^OBJS\n```\n\nLANGUAGE: vim\nCODE:\n```\nj\n```\n\nLANGUAGE: vim\nCODE:\n```\n:.,/^$/-1!sort\n```\n\nLANGUAGE: vim\nCODE:\n```\nA \\<Esc>\n```\n\n----------------------------------------\n\nTITLE: Interrupting Script Execution in Vim\nDESCRIPTION: Shows how to use the interrupt() function to abort script execution from within a function. This example creates an autocommand that checks filenames before saving and interrupts if a potential typo is detected.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_139\n\nLANGUAGE: vim\nCODE:\n```\nfunction s:check_typoname(file)\n   if fnamemodify(a:file, ':t') == '['\n       echomsg 'Maybe typo'\n       call interrupt()\n   endif\nendfunction\nau BufWritePre * call s:check_typoname(expand('<amatch>'))\n```\n\n----------------------------------------\n\nTITLE: Getting All Environment Variables with uv.os_environ()\nDESCRIPTION: Returns a table containing all environment variables as key-value pairs. This function is not thread-safe.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_94\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_environ()\n```\n\n----------------------------------------\n\nTITLE: Clearing a List or Dictionary in Vim\nDESCRIPTION: Demonstrates how to use the filter() function to remove all items from a list or dictionary, effectively clearing it.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_67\n\nLANGUAGE: vim\nCODE:\n```\ncall filter(var, 0)\n```\n\n----------------------------------------\n\nTITLE: Various Vim Commands Reference\nDESCRIPTION: A collection of various Vim commands for operations like screen display, file information, character inspection, and mode switching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-L        clear and redraw the screen\nCTRL-G        show current file name (with path) and cursor position\nga            show ascii value of character under cursor in decimal, hex, and octal\ng8            for utf-8 encoding: show byte sequence for character under cursor in hex\ng CTRL-G      show cursor column, line, and character position\nCTRL-C        during searches: Interrupt the search\n<Del>         while entering a count: delete last character\n:ve[rsion]    show version information\n:norm[al][!] {commands}  execute Normal mode commands\ngQ            switch to \"Ex\" mode\n\n:redir >{file}         redirect messages to {file}\n:silent[!] {command}  execute {command} silently\n:confirm {command}     quit, write, etc., asking about unsaved changes or read-only files\n:browse {command}      open/read/write file, using a file selection dialog\n```\n\n----------------------------------------\n\nTITLE: Multi-Window Commands in Vim\nDESCRIPTION: Commands for managing multiple windows in Vim, including splitting windows horizontally and vertically, navigating between windows, and adjusting window sizes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-W s  or  :split      # split window into two parts\n:split {file}             # split window and edit {file} in one of them\n:vsplit {file}            # same, but split vertically\n:vertical {cmd}           # make {cmd} split vertically\n:sf[ind] {file}           # split window, find {file} in 'path' and edit it\n:terminal {cmd}           # open a terminal window\nCTRL-W ]                 # split window and jump to tag under cursor\nCTRL-W f                 # split window and edit file name under the cursor\nCTRL-W ^                 # split window and edit alternate file\nCTRL-W n  or  :new       # create new empty window\nCTRL-W q  or  :q[uit]    # quit editing and close window\nCTRL-W c  or  :clo[se]   # make buffer hidden and close window\nCTRL-W o  or  :on[ly]    # make current window only one on the screen\nCTRL-W j                 # move cursor to window below\nCTRL-W k                 # move cursor to window above\nCTRL-W CTRL-W            # move cursor to window below (wrap)\nCTRL-W W                 # move cursor to window above (wrap)\nCTRL-W t                 # move cursor to top window\nCTRL-W b                 # move cursor to bottom window\nCTRL-W p                 # move cursor to previous active window\nCTRL-W r                 # rotate windows downwards\nCTRL-W R                 # rotate windows upwards\nCTRL-W x                 # exchange current window with next one\nCTRL-W =                 # make all windows equal height & width\nCTRL-W -                 # decrease current window height\nCTRL-W +                 # increase current window height\nCTRL-W _                 # set current window height (default: very high)\nCTRL-W <                 # decrease current window width\nCTRL-W >                 # increase current window width\nCTRL-W |                 # set current window width (default: widest possible)\n```\n\n----------------------------------------\n\nTITLE: Restricting LSP Formatting by Client Name in Lua\nDESCRIPTION: Defines a filter predicate in Neovim to avoid using certain language servers, like `typescript-language-server`, for formatting operations. Applicable for Neovim configurations using LSP.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.buf.format {\n  filter = function(client) return client.name ~= \"ts_ls\" end\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Completion Function Example - Vim\nDESCRIPTION: Example showing how to implement a custom completion function that lists usernames for a Finger command using /etc/passwd data\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\n:com -complete=custom,ListUsers -nargs=1 Finger !finger <args>\n:fun ListUsers(A,L,P)\n:    return system(\"cut -d: -f1 /etc/passwd\")\n:endfun\n```\n\n----------------------------------------\n\nTITLE: Autocommands for Loading C Types Highlighting\nDESCRIPTION: Vim autocommands to load the types.vim file when opening C source or header files, applying type highlighting automatically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_206\n\nLANGUAGE: vim\nCODE:\n```\n\" load the types.vim highlighting file, if it exists\nautocmd BufRead,BufNewFile *.[ch] let fname = expand('<afile>:p:h') .. '/types.vim'\nautocmd BufRead,BufNewFile *.[ch] if filereadable(fname)\nautocmd BufRead,BufNewFile *.[ch]   exe 'so ' .. fname\nautocmd BufRead,BufNewFile *.[ch] endif\n```\n\n----------------------------------------\n\nTITLE: Spawning a Process with Pipe Communication in Lua UV\nDESCRIPTION: Demonstrates how to spawn a 'cat' process with stdin, stdout, and stderr pipes. The example shows how to initialize pipes, start the process, read from stdout and stderr, write to stdin, and properly clean up resources when finished.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal stdin = uv.new_pipe()\nlocal stdout = uv.new_pipe()\nlocal stderr = uv.new_pipe()\n\nprint(\"stdin\", stdin)\nprint(\"stdout\", stdout)\nprint(\"stderr\", stderr)\n\nlocal handle, pid = uv.spawn(\"cat\", {\n  stdio = {stdin, stdout, stderr}\n}, function(code, signal) -- on exit\n  print(\"exit code\", code)\n  print(\"exit signal\", signal)\nend)\n\nprint(\"process opened\", handle, pid)\n\nuv.read_start(stdout, function(err, data)\n  assert(not err, err)\n  if data then\n    print(\"stdout chunk\", stdout, data)\n  else\n    print(\"stdout end\", stdout)\n  end\nend)\n\nuv.read_start(stderr, function(err, data)\n  assert(not err, err)\n  if data then\n    print(\"stderr chunk\", stderr, data)\n  else\n    print(\"stderr end\", stderr)\n  end\nend)\n\nuv.write(stdin, \"Hello World\")\n\nuv.shutdown(stdin, function()\n  print(\"stdin shutdown\", stdin)\n  uv.close(handle, function()\n    print(\"process closed\", handle, pid)\n  end)\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Indentexpr in Vim\nDESCRIPTION: This Vim command sets the 'indentexpr' option to call a custom function for determining indentation. The function 'GetMyIndent()' would need to be defined elsewhere in the Vim configuration to provide the indentation logic.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\nset indentexpr=GetMyIndent()\n```\n\n----------------------------------------\n\nTITLE: Highlighting Debugging Functions in Haskell\nDESCRIPTION: This snippet illustrates how to highlight the names of debugging functions in Haskell code.  The 'hs_highlight_debug' variable must be set to 1 in your vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_47\n\nLANGUAGE: vim\nCODE:\n```\n\t:let hs_highlight_debug = 1\n```\n\n----------------------------------------\n\nTITLE: Creating Floating Window Options in Neovim LSP (Lua)\nDESCRIPTION: Creates a table with default options for a floating window. Takes width, height, and optional additional options as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_54\n\nLANGUAGE: lua\nCODE:\n```\nmake_floating_popup_options({width}, {height}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Defining Signs in Vim\nDESCRIPTION: Examples of using sign_define() function to define new signs or modify existing ones in Vim, demonstrating both single sign definition and defining multiple signs at once.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_235\n\nLANGUAGE: vim\nCODE:\n```\ncall sign_define(\"mySign\", {\n\t\\ \"text\" : \"=>\",\n\t\\ \"texthl\" : \"Error\",\n\t\\ \"linehl\" : \"Search\"})\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall sign_define([\n\t\\ {'name' : 'sign1',\n\t\\  'text' : '=>'},\n\t\\ {'name' : 'sign2',\n\t\\  'text' : '!!'}\n\t\\ ])\n```\n\n----------------------------------------\n\nTITLE: Using Lists for Strict Type Comparison in Vim\nDESCRIPTION: Shows how putting values in lists can be used for more strict type comparison, avoiding automatic conversion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\n:let a = 5\n:let b = \"5\"\n:echo a == b\n```\n\n----------------------------------------\n\nTITLE: Sourcing nosyntax.vim to Disable Syntax\nDESCRIPTION: Actual command executed by ':syntax off', which sources the nosyntax.vim file from the $VIMRUNTIME directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_202\n\nLANGUAGE: vim\nCODE:\n```\n:source $VIMRUNTIME/syntax/nosyntax.vim\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Blob - Vim Script\nDESCRIPTION: This snippet demonstrates the use of a for loop to iterate through each byte in a Blob and perform operations with it using a callable function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_63\n\nLANGUAGE: vim\nCODE:\n```\n:for byte in 0z112233\n:   call Doit(byte)\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Moving between #ifdef, #else, and #endif (Vim)\nDESCRIPTION: This snippet demonstrates using the `%` key to jump between matching preprocessor directives like `#ifdef`, `#else`, and `#endif` in C code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n\"#ifdef USE_POPEN\\n    fd = popen(\\\"ls\\\", \\\"r\\\")\\n#else\\n    fd = fopen(\\\"tmp\\\", \\\"w\\\")\\n#endif\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocmd for Incsearch Highlight in Vim\nDESCRIPTION: This Vim script sets up an autocommand group to automatically enable 'hlsearch' when entering a search command and disable it when leaving. This provides highlighting for all matches during incremental search without keeping 'hlsearch' on permanently.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\naugroup vimrc-incsearch-highlight\n  autocmd!\n  autocmd CmdlineEnter /,\\? :set hlsearch\n  autocmd CmdlineLeave /,\\? :set nohlsearch\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Filetype Plugin Settings in Vim\nDESCRIPTION: This example demonstrates how to override a specific setting from the default filetype plugin by placing it in an 'after' directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_44\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal textwidth=70\n```\n\n----------------------------------------\n\nTITLE: Customizing an Existing Color Scheme in VimL\nDESCRIPTION: This example shows how to customize an existing colorscheme by loading it with the runtime command and then overriding specific highlight groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n\" load the \"evening\" colorscheme\nruntime colors/evening.vim\n\" change the color of statements\nhi Statement ctermfg=Blue guifg=Blue\n```\n\n----------------------------------------\n\nTITLE: Retrieving Quickfix List Information in Vim\nDESCRIPTION: These examples demonstrate how to use getqflist() with a dictionary argument to retrieve specific information about quickfix lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_105\n\nLANGUAGE: vim\nCODE:\n```\necho getqflist({'all': 1})\necho getqflist({'nr': 2, 'title': 1})\necho getqflist({'lines' : [\"F1:10:L10\"]})\n```\n\n----------------------------------------\n\nTITLE: Defining a User Command in Vim Plugin\nDESCRIPTION: Code to define a custom user command that calls a script-local function, with a check to avoid overriding existing commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\nif !exists(\":Correct\")\n  command -nargs=1  Correct  :call s:Add(<q-args>, 0)\nendif\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Signs with sign_unplacelist in Neovim\nDESCRIPTION: Shows how to use the sign_unplacelist function to remove multiple signs from different buffers in a single call. Accepts a list of dictionaries specifying the signs to remove.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_244\n\nLANGUAGE: vim\nCODE:\n```\n\" Remove sign with id 10 from buffer a.vim and sign\n\" with id 20 from buffer b.vim\ncall sign_unplacelist([\n\t\\ {'id' : 10, 'buffer' : \"a.vim\"},\n\t\\ {'id' : 20, 'buffer' : 'b.vim'},\n\t\\ ])\n```\n\n----------------------------------------\n\nTITLE: Running Health Check Command in Vim\nDESCRIPTION: Basic command to run all health checks in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:checkhealth\n```\n\n----------------------------------------\n\nTITLE: Deleting a user command in Neovim\nDESCRIPTION: This function deletes a global user-defined command in Neovim. The function requires the name of the command to delete.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_45\n\nLANGUAGE: vim\nCODE:\n```\nnvim_del_user_command({name})                        *nvim_del_user_command()*\\n    Delete a user-defined command.\\n\\n    Attributes: ~\\n        Since: 0.7.0\\n\\n    Parameters: ~\\n      • {name}  Name of the command to delete.\n```\n\n----------------------------------------\n\nTITLE: Setting Shell with Spaces using let-& Syntax in Vim\nDESCRIPTION: A more readable way to set the 'shell' option with spaces in the path using the let-& syntax. This approach simplifies the escaping needed for shell paths with spaces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_61\n\nLANGUAGE: vim\nCODE:\n```\nlet &shell='\"C:\\Program Files\\unix\\sh.exe\" -f'\n```\n\n----------------------------------------\n\nTITLE: State Checking Example using state()\nDESCRIPTION: Shows how to check Neovim's current state for specific conditions using the state() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_252\n\nLANGUAGE: vim\nCODE:\n```\nif state('s') == ''\n   \" screen has not scrolled\n```\n\n----------------------------------------\n\nTITLE: Creating Async Handle in Lua with libuv\nDESCRIPTION: This snippet demonstrates how to create an async handle using libuv in Lua. The async handle allows operations to be performed in a non-blocking manner by running a callback when the async operation is triggered. The `async:send()` method is called to wake up the event loop and execute the callback function. The `async:close()` method is used to close the async handle after the operation completes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal async\nasync = uv.new_async(function()\n  print(\"async operation ran\")\n  async:close()\nend)\n\nasync:send()\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with v:exception in Neovim VimL\nDESCRIPTION: This snippet demonstrates how to use v:exception to catch and echo an exception in a try-catch block.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\ntry\n  throw \"oops\"\ncatch /.*/\n  echo \"caught \" .. v:exception\nendtry\n```\n\n----------------------------------------\n\nTITLE: Executing Vimscript Function in Neovim\nDESCRIPTION: Calls a Vimscript function using 'nvim_call_function', providing support for passing arguments within an array. Errors update 'v:errmsg'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_35\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_call_function\\(\\{fn\\}, \\{args\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Recursive directory search using globpath in Vim\nDESCRIPTION: Using the '**' pattern with globpath() to recursively search for README.txt files in all directories and subdirectories within the runtimepath.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_116\n\nLANGUAGE: vim\nCODE:\n```\necho globpath(&rtp, \"**/README.txt\")\n```\n\n----------------------------------------\n\nTITLE: Change Name Format in Vim\nDESCRIPTION: This snippet outlines how to change the format of names from 'Last, First' to 'First Last' within a file using Vim's substitute command with backreferences for matched groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:%s/\\([^,]*\\), \\(.*\\)/\\2 \\1/\n```\n\n----------------------------------------\n\nTITLE: Executing Normal Mode Command to Delete from Cursor to End of Line in Neovim\nDESCRIPTION: This snippet demonstrates how to use CTRL-O followed by 'D' to delete from the cursor position to the end of the line while in Insert mode in Neovim. This provides a quick way to modify text without leaving Insert mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCTRL-O D\n```\n\n----------------------------------------\n\nTITLE: Custom Filetype.vim Configuration\nDESCRIPTION: Example of creating a custom filetype.vim file for defining multiple file type detection rules.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\" my filetype file\nif exists(\"did_load_filetypes\")\n  finish\nendif\naugroup filetypedetect\n  au! BufRead,BufNewFile *.mine\t\tsetfiletype mine\n  au! BufRead,BufNewFile *.xyz\t\tsetfiletype drawing\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Handling LspProgress event in Vim\nDESCRIPTION: This snippet shows how to handle the LspProgress event, which is triggered upon receipt of a progress notification from the server.  It simply redraws the status line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nautocmd LspProgress * redrawstatus\n```\n\n----------------------------------------\n\nTITLE: Using CTRL-R for Register Insertion in Neovim Command-line\nDESCRIPTION: This snippet explains how to use CTRL-R to insert the contents of registers in Neovim's command-line mode. It includes an example of using the expression register with setcmdpos() to manipulate the cursor position.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\n<C-R><C-R>=setcmdpos(2)[-1]<CR>\n```\n\n----------------------------------------\n\nTITLE: Looping Over Dictionary Keys in Vim\nDESCRIPTION: Demonstrates how to loop over all keys in a dictionary using the keys() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_48\n\nLANGUAGE: vim\nCODE:\n```\n:for key in keys(mydict)\n:   echo key .. ': ' .. mydict[key]\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Finally Block Usage in Vim Script\nDESCRIPTION: Demonstrates using try-finally for cleanup operations like temporary file handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_27\n\nLANGUAGE: viml\nCODE:\n```\n:let tmp = tempname()\n:try\n:   exe \".,$write \" .. tmp\n:   exe \"!filter \" .. tmp\n:   .,$delete\n:   exe \"$read \" .. tmp\n:finally\n:   call delete(tmp)\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Opening Floating Preview Window in Neovim LSP (Lua)\nDESCRIPTION: Shows contents in a floating window. Takes content lines, syntax, and optional configuration parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_61\n\nLANGUAGE: lua\nCODE:\n```\nopen_floating_preview({contents}, {syntax}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Checking if FileType Set - Lua\nDESCRIPTION: The did_filetype function verifies if the FileType event has triggered at least once during the execution of autocommands. This can help scripts avoid re-triggering the event unnecessarily for performance improvement.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_50\n\nLANGUAGE: lua\nCODE:\n```\ndid_filetype()                                                  *did_filetype()*\n\t\tReturns |TRUE| when autocommands are being executed and the\n\t\tFileType event has been triggered at least once.  Can be used\n\t\tto avoid triggering the FileType event again in the scripts\n\t\tthat detect the file type. |FileType|\n\t\tReturns |FALSE| when `:setf FALLBACK` was used.\n\t\tWhen editing another file, the counter is reset, thus this\n\t\treally checks if the FileType event has been triggered for the\n\t\tcurrent buffer.  This allows an autocommand that starts\n\t\tediting another buffer to set 'filetype' and load a syntax\n\t\tfile.\n\n\t\tReturn: ~\n\t\t  (`integer`)\n```\n\n----------------------------------------\n\nTITLE: Basic Vim Search Pattern\nDESCRIPTION: Demonstrates how to search for the word 'include' in Vim using forward slash command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n/include\n```\n\n----------------------------------------\n\nTITLE: Evaluating Vimscript Expression in Neovim\nDESCRIPTION: Uses 'nvim_eval' to recursively evaluate a Vimscript expression. Recursive expansion applies to dicts and lists, errors reflect in 'v:errmsg'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_37\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_eval\\(\\{expr\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Custom Filetype Detection Configuration\nDESCRIPTION: Example of creating custom filetype detection rules in a user's ftdetect directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nau BufRead,BufNewFile *.mine\t\tset filetype=mine\n```\n\n----------------------------------------\n\nTITLE: Filtering Lines Through External Programs\nDESCRIPTION: Demonstrates methods for passing text through external filters to modify content, using various motion and range selectors in Neovim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n!{motion}{filter}\n!!{filter}\n{Visual}!{filter}\n:{range}![!]{filter}\n```\n\n----------------------------------------\n\nTITLE: Toggling Diagnostic Virtual Lines\nDESCRIPTION: Example of creating a keymap to toggle diagnostic virtual lines display\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nvim.keymap.set('n', 'gK', function()\n  local new_config = not vim.diagnostic.config().virtual_lines\n  vim.diagnostic.config({ virtual_lines = new_config })\nend, { desc = 'Toggle diagnostic virtual_lines' })\n```\n\n----------------------------------------\n\nTITLE: LineNumber Command Implementation in Vim Script\nDESCRIPTION: A practical example showing how to create a :LineNumber command that displays the line number where it was called by using v:throwpoint information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_127\n\nLANGUAGE: vim\nCODE:\n```\n:function! LineNumber()\n:    return substitute(v:throwpoint, '.*\\D\\(\\d\\+\\).*', '\\1', \"\")\n:endfunction\n:command! LineNumber try | throw \"\" | catch | echo LineNumber() | endtry\n```\n\n----------------------------------------\n\nTITLE: Mapping with Multiple Ex Commands and Line Terminators in Vim\nDESCRIPTION: Creates a mapping that executes multiple Ex commands by using <CR> as line terminators. This example lists file details and then displays a message.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n:map  _ls  :!ls -l %:S<CR>:echo \"the end\"<CR>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pre-Compiler Commands for SpotBugs\nDESCRIPTION: Defines functions for handling pre-compiler commands with autocmd hooks for both regular and test compilation in SpotBugs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_50\n\nLANGUAGE: vim\nCODE:\n```\nfunction! GenericPreCompilerCommand(arguments) abort\n\tif !exists('g:spotbugs_compilation_done')\n\t\tdoautocmd java_spotbugs_post User\n\t\texecute 'make ' . a:arguments\n\t\t\" only run doautocmd when :make was synchronous\n\t\t\" see note below\n\t\tdoautocmd java_spotbugs_post ShellCmdPost \" XXX: (a)\n\t\tlet g:spotbugs_compilation_done = 1\n\telse\n\t\tcc\n\tendif\nendfunction\n\nfunction! GenericPreCompilerTestCommand(arguments) abort\n\tif !exists('g:spotbugs_test_compilation_done')\n\t\tdoautocmd java_spotbugs_post User\n\t\texecute 'make ' . a:arguments\n\t\t\" only run doautocmd when :make was synchronous\n\t\t\" see note below\n\t\tdoautocmd java_spotbugs_post ShellCmdPost \" XXX: (b)\n\t\tlet g:spotbugs_test_compilation_done = 1\n\telse\n\t\tcc\n\tendif\nendfunction\n\nlet g:spotbugs_properties = {\n\t\\ 'compiler':\t\t'maven',\n\t\\ 'DefaultPreCompilerCommand':\n\t\t\\ function('GenericPreCompilerCommand'),\n\t\\ 'DefaultPreCompilerTestCommand':\n\t\t\\ function('GenericPreCompilerTestCommand'),\n\t\\ 'PostCompilerActionExecutor':\n\t\t\\ function('GenericPostCompilerActionExecutor'),\n\\ }\n```\n\n----------------------------------------\n\nTITLE: Working with exists() Function Examples\nDESCRIPTION: Additional examples showing proper and improper usage of the exists() function for checking command existence.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_60\n\nLANGUAGE: vim\nCODE:\n```\necho exists(\":make\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho exists(\":make install\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho exists(bufcount)\n```\n\n----------------------------------------\n\nTITLE: Trimming Blanks in Vim\nDESCRIPTION: This snippet shows how to remove trailing whitespace at the end of each line in a file using Vim's substitute command. It highlights the importance of proper matching for whitespace patterns to clean up text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:%s/\\s\\+$//\n```\n\nLANGUAGE: vim\nCODE:\n```\n/ \n```\n\n----------------------------------------\n\nTITLE: Autocommand Pattern Example 4 in Vimscript\nDESCRIPTION: This shows how to use `*` to match part of a path, but not from the root. This will be executed for files like `/tmp/doc/xx.txt` and `/usr/home/piet/doc/yy.txt`.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n \":autocmd BufRead */doc/*.txt\\tset tw=78\"\n```\n\n----------------------------------------\n\nTITLE: Character Collections in Vim Regular Expressions\nDESCRIPTION: This snippet explains how to use character collections in Vim regular expressions. It covers the syntax for defining collections, ranges, and special cases like matching end-of-line within collections.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n[]   (with 'nomagic': \\[])    */[]* */\\[]* */\\_[]* */collection* *E76*\n\\_[]\nA collection.  This is a sequence of characters enclosed in square\nbrackets.  It matches any single character in the collection.\nExample     matches ~\n[xyz]      any 'x', 'y' or 'z'\n[a-zA-Z]$  any alphabetic character at the end of a line\n\\c[a-z]$   same\n[А-яЁё]    Russian alphabet (with utf-8 and cp1251)\n```\n\n----------------------------------------\n\nTITLE: Autowrite Configuration in Vim\nDESCRIPTION: Commands to enable or disable automatic file saving when switching between files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:set autowrite\n:set noautowrite\n```\n\n----------------------------------------\n\nTITLE: Alternative includeexpr using tr() in Vim\nDESCRIPTION: An alternative way to set the 'includeexpr' option using the tr() function. This achieves the same result as the previous example but avoids the need for escaping backslashes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_31\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal includeexpr=tr(v:fname,'.','/')\n```\n\n----------------------------------------\n\nTITLE: Handling LspDetach event in Lua\nDESCRIPTION: This snippet demonstrates how to handle the LspDetach event, which is triggered before an LSP client detaches from a buffer. It removes the autocommand for formatting the buffer on save, if it exists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('LspDetach', {\n  callback = function(args)\n    -- Get the detaching client\n    local client = vim.lsp.get_client_by_id(args.data.client_id)\n\n    -- Remove the autocommand to format the buffer on save, if it exists\n    if client:supports_method('textDocument/formatting') then\n      vim.api.nvim_clear_autocmds({\n        event = 'BufWritePre',\n        buffer = args.buf,\n      })\n    end\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Alias for Vim Command in C Shell\nDESCRIPTION: This snippet defines an alias `lvim` in a C shell descendant, which executes Vim with a normal mode command to jump to the last cursor position.  The single quotes and double quotes are carefully escaped to be interpreted correctly by the shell.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nalias lvim vim -c '\"'normal '\"'0'\"'\n```\n\n----------------------------------------\n\nTITLE: Error Handling with v:errmsg in Neovim VimL\nDESCRIPTION: This snippet demonstrates how to use the v:errmsg variable for error handling. It clears the error message, attempts a command silently, and then checks if an error occurred.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\nlet v:errmsg = \"\"\nsilent! next\nif v:errmsg != \"\"\n  \" ... handle error\n```\n\n----------------------------------------\n\nTITLE: Deleting a Buffer in Lua\nDESCRIPTION: Example of how to delete a buffer using nvim_buf_delete with the behavior similar to :bdelete command. This involves setting buflisted to false and passing the unload parameter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_54\n\nLANGUAGE: lua\nCODE:\n```\nvim.bo.buflisted = false\nvim.api.nvim_buf_delete(0, { unload = true })\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Examples\nDESCRIPTION: Examples demonstrating the use of match() function with strings and lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_163\n\nLANGUAGE: vim\nCODE:\n```\necho match(\"testing\", \"ing\")\t\" results in 4\necho match([1, 'x'], '\\a')\t\" results in 1\n```\n\n----------------------------------------\n\nTITLE: Restore Cursor Position Autocommand\nDESCRIPTION: Autocommand group to restore cursor position when reopening files, with special handling for certain filetypes\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\naugroup RestoreCursor\n  autocmd!\n  autocmd BufReadPre * autocmd FileType <buffer> ++once\n    \\ let s:line = line(\"'\\\"\")\n    \\ | if s:line >= 1 && s:line <= line(\"$\") && &filetype !~# 'commit'\n    \\      && index(['xxd', 'gitrebase'], &filetype) == -1\n    \\      && !&diff\n    \\ |   execute \"normal! g`\\\"\"\n    \\ | endif\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Code Formatting Commands (Vim)\nDESCRIPTION: These commands allow formatting Rust code using rustfmt. :RustFmt formats the entire buffer, while :RustFmtRange formats a selected range. They utilize the rustfmt executable specified by g:rustfmt_command and respect the options defined in g:rustfmt_options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n:RustFmt                                                       *:RustFmt*\n\t\tRuns |g:rustfmt_command| on the current buffer. If\n\t\t|g:rustfmt_options| is set then those will be passed to the\n\t\texecutable.\n\n\t\tIf |g:rustfmt_fail_silently| is 0 (the default) then it\n\t\twill populate the |location-list| with the errors from\n\t\t|g:rustfmt_command|. If |g:rustfmt_fail_silently| is set to 1\n\t\tthen it will not populate the |location-list|.\n\n:RustFmtRange                                                  *:RustFmtRange*\n\t\tRuns |g:rustfmt_command| with selected range. See\n\t\t|:RustFmt| for any other information.\n```\n\n----------------------------------------\n\nTITLE: Accessing Exception Information in Vim Script\nDESCRIPTION: Shows how to use v:exception to access the thrown exception value and v:throwpoint to see where the exception was thrown.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_125\n\nLANGUAGE: vim\nCODE:\n```\n:  catch /^\\d\\+$/\n:    echo \"Number thrown.  Value is\" v:exception\n```\n\n----------------------------------------\n\nTITLE: Enabling Additional Java Syntax Highlighting Features\nDESCRIPTION: Configures options for highlighting generics, debug statements, and Javadoc comments in Java code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_65\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:java_highlight_generics = 1\n:let g:java_highlight_debug = 1\n:let g:java_ignore_javadoc = 1\n:let g:java_ignore_html = 1\n:let g:java_ignore_markdown = 1\n```\n\n----------------------------------------\n\nTITLE: Getting Extmarks in Buffer Range in Lua\nDESCRIPTION: Gets extmarks in 'traversal order' from a charwise region defined by buffer positions. Supports various options for filtering and formatting results.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_63\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_get_extmarks({buffer}, {ns_id}, {start}, {end}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Operator-pending Mapping to Start Visual Mode in Neovim\nDESCRIPTION: This example shows how to use an operator-pending mapping to start Visual mode, allowing the mapping to select text to be operated on. This enables more complex selection logic within operator mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n\t:omap { w\nmakes \"y{\" work like \"yw\" and \"d{\" like \"dw\".\n\nTo ignore the starting cursor position and select different text, you can have\nthe omap start Visual mode to select the text to be operated upon.  Example\nthat operates on a function name in the current line: >\n```\n\n----------------------------------------\n\nTITLE: Explicit Dictionary Binding to Function in Vimscript\nDESCRIPTION: This snippet demonstrates how to explicitly bind a function to a dictionary using the `function()` command when creating the Funcref. Even if the Funcref is assigned to another dictionary, it will still be called with the original dictionary bound to it.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n\tlet myDict.myFunction = function(MyFunction, myDict)\n\tlet otherDict.myFunction = myDict.myFunction\n\tcall otherDict.myFunction()\n```\n\n----------------------------------------\n\nTITLE: Horizontal Scrolling in Vim\nDESCRIPTION: Commands for scrolling the text horizontally, which only work when 'wrap' is off. Includes zl, zh, zL, zH, zs, and ze commands for moving the view left and right.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nz<Right> or zl  Move view [count] characters right.\nz<Left> or zh   Move view [count] characters left.\nzL              Move view half screenwidth right.\nzH              Move view half screenwidth left.\nzs              Scroll to position cursor at start of screen.\nze              Scroll to position cursor at end of screen.\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous File Reading in Lua with Luv\nDESCRIPTION: A function that reads a file synchronously using Luv's file system operations. It opens the file, gets its stats, reads the content, and closes the file, all in a blocking manner.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_44\n\nLANGUAGE: lua\nCODE:\n```\nlocal function readFileSync(path)\n  local fd = assert(uv.fs_open(path, \"r\", 438))\n  local stat = assert(uv.fs_fstat(fd))\n  local data = assert(uv.fs_read(fd, stat.size, 0))\n  assert(uv.fs_close(fd))\n  return data\nend\n\nlocal data = readFileSync(\"main.lua\")\nprint(\"synchronous read\", data)\n```\n\n----------------------------------------\n\nTITLE: Auto-Activating Netrw Directory Browser on Vim Startup\nDESCRIPTION: Vim autocmd configuration to automatically open netrw directory browser when starting Vim without specifying a filename.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n\" Augroup VimStartup:\naugroup VimStartup\n  au!\n  au VimEnter * if expand(\"%\") == \"\" | e . | endif\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time in Vim\nDESCRIPTION: Illustrates the usage of strftime() function to format dates and times with various format strings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_258\n\nLANGUAGE: vim\nCODE:\n```\necho strftime(\"%c\")\t\t   \" Sun Apr 27 11:49:23 1997\necho strftime(\"%Y %b %d %X\")\t   \" 1997 Apr 27 11:53:25\necho strftime(\"%y%m%d %T\")\t   \" 970427 11:53:55\necho strftime(\"%H:%M\")\t\t   \" 11:55\necho strftime(\"%c\", getftime(\"file.c\"))\n\t\t\t\t   \" Show mod time of file.c.\n```\n\n----------------------------------------\n\nTITLE: Run Lua Scripts with Nvim from Shell\nDESCRIPTION: Illustrates running a Lua script 'foo.lua' using Nvim with the '-l' flag, accepting optional arguments. It's a command-line operation requiring Nvim installation and a compatible shell environment. Prints Lua execution results to standard output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnvim -l foo.lua --arg1 --arg2\n```\n\n----------------------------------------\n\nTITLE: Mapping Operator-Pending Mode for C Program Block Selection\nDESCRIPTION: This mapping defines F7 to select a C program block (text enclosed in curly braces) in operator-pending mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\n:omap <F7> a{\n```\n\n----------------------------------------\n\nTITLE: Using printf() Function for String Formatting in Vim\nDESCRIPTION: Demonstrates how to use printf() to format strings with various placeholders. This example formats line numbers, error codes, and messages with specific alignment and width constraints.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_190\n\nLANGUAGE: vim\nCODE:\n```\necho printf(\"%4d: E%d %.30s\", lnum, errno, msg)\n```\n\n----------------------------------------\n\nTITLE: Using Unicode in the GUI with Vim - Vimscript\nDESCRIPTION: This snippet illustrates how to set Vim to use Unicode internally and configure the GUI font for proper display of Unicode characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_2\n\nLANGUAGE: Vim\nCODE:\n```\n:set encoding=utf-8\n```\n\nLANGUAGE: Vim\nCODE:\n```\n:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1\n```\n\nLANGUAGE: Vim\nCODE:\n```\n:set guifont=courier_new:h12\n```\n\n----------------------------------------\n\nTITLE: Dictionary Reference Behavior in Vim\nDESCRIPTION: Demonstrates that dictionaries are passed by reference, with changes affecting all variables referencing the same dictionary.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_52\n\nLANGUAGE: vim\nCODE:\n```\n:let onedict = {'a': 1, 'b': 2}\n:let adict = onedict\n:let adict['a'] = 11\n:echo onedict['a']\n```\n\n----------------------------------------\n\nTITLE: Getting User Home Directory with uv.os_homedir()\nDESCRIPTION: Returns the path to the current user's home directory. This function is not thread-safe.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_95\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_homedir()\n```\n\n----------------------------------------\n\nTITLE: Navigating Through Compilation Errors in Vim\nDESCRIPTION: Commands for moving through the error list after compilation, allowing easy navigation between errors for efficient debugging.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:cnext\n```\n\nLANGUAGE: vim\nCODE:\n```\n:cc\n```\n\nLANGUAGE: vim\nCODE:\n```\n:clist\n```\n\nLANGUAGE: vim\nCODE:\n```\n:clist!\n```\n\nLANGUAGE: vim\nCODE:\n```\n:cprevious\n```\n\nLANGUAGE: vim\nCODE:\n```\n:cfirst\n```\n\nLANGUAGE: vim\nCODE:\n```\n:clast\n```\n\nLANGUAGE: vim\nCODE:\n```\n:cc 3\n```\n\n----------------------------------------\n\nTITLE: Opening URLs and File Paths in Neovim - Vim\nDESCRIPTION: This snippet details commands that allow users to open file paths or URLs from Neovim using the system's default handler, via the gx command and its visual mode equivalent. This functionality enhances user productivity by providing easy access to files and links directly from the editor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\ngx\t\tOpens the current filepath or URL (decided by |<cfile>|, 'isfname') at cursor using the system default handler, by calling |vim.ui.open()|.\n```\n\nLANGUAGE: vim\nCODE:\n```\n{Visual}gx\t\tOpens the selected text using the system default handler, by calling |vim.ui.open()|.\n```\n\n----------------------------------------\n\nTITLE: Using the :compiler Command in Vim\nDESCRIPTION: Shows the syntax for the :compiler command which sets options to work with a specific compiler. It can be used with or without the ! modifier to set options globally or locally.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_39\n\nLANGUAGE: vim\nCODE:\n```\n:comp[iler][!] {name}\n```\n\n----------------------------------------\n\nTITLE: Allowing Hash Operator in Haskell\nDESCRIPTION: This snippet configures Haskell syntax highlighting to treat operators starting with '#' as operators rather than errors.  The 'hs_allow_hash_operator' variable must be set to 1 in your vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_48\n\nLANGUAGE: vim\nCODE:\n```\n\t:let hs_allow_hash_operator = 1\n```\n\n----------------------------------------\n\nTITLE: Using searchpairpos() in Neovim (Vimscript)\nDESCRIPTION: This example demonstrates how to use searchpairpos() to find the position of a matching brace pair and store the result in variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_222\n\nLANGUAGE: vim\nCODE:\n```\nlet [lnum,col] = searchpairpos('{', '', '}', 'n')\n```\n\n----------------------------------------\n\nTITLE: Using getbufline() Function to Retrieve Buffer Lines in Vim Script\nDESCRIPTION: Demonstrates how to use the getbufline() function to retrieve lines from a buffer in Vim script. It shows how to specify line ranges and handle special cases like the last line of the buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_82\n\nLANGUAGE: vim\nCODE:\n```\nlet lines = getbufline(bufnr(\"myfile\"), 1, \"$\")\n```\n\n----------------------------------------\n\nTITLE: Getting Line Numbers with line() Function in Vim\nDESCRIPTION: Examples of using the line() function to get line numbers of cursor position and marks. This demonstrates different ways to reference positions in a buffer, including with a specific window ID.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_153\n\nLANGUAGE: vim\nCODE:\n```\necho line(\".\")            \" line number of the cursor\necho line(\".\", winid)        \" idem, in window \"winid\"\necho line(\"'t\")            \" line number of mark t\necho line(\"'\" .. marker)    \" line number of mark marker\n```\n\n----------------------------------------\n\nTITLE: Creating Autocommands with Ex Command in Neovim\nDESCRIPTION: Example of creating autocommands in Neovim using an Ex command as the handler. This displays a message when entering C or C++ files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_85\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd({'BufEnter', 'BufWinEnter'}, {\n  pattern = {'*.c', '*.h'},\n  command = \"echo 'Entering a C or C++ file'\",\n})\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting Control Commands\nDESCRIPTION: Commands to control syntax highlighting behavior including clearing, disabling, and manual mode\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:syntax clear\n:syntax off\n:syntax manual\n:set syntax=ON\n```\n\n----------------------------------------\n\nTITLE: Listing Defined Syntax Items in Vim Script\nDESCRIPTION: Lists currently defined syntax items and their colors, aiding in debugging and experimenting with syntax files. The command takes an optional group name to list specific syntax groups or clusters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_1\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax\n:syntax list {group-name}\n```\n\n----------------------------------------\n\nTITLE: Basic Help Command Examples\nDESCRIPTION: Examples showing basic help command usage for searching and navigating help documentation\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimscript\nCODE:\n```\n:help options\n:help z?\n:help z.\n:help :?\n:help cont<Ctrl-D>\n```\n\n----------------------------------------\n\nTITLE: Deleting Buffer Lines - Lua\nDESCRIPTION: The deletebufline function removes lines from a specified buffer based on given start and end line numbers. If the end line is omitted, only the start line is deleted. It ensures only loaded buffers are affected.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_47\n\nLANGUAGE: lua\nCODE:\n```\ndeletebufline({buf}, {first} [, {last}])                       *deletebufline()*\n\t\tDelete lines {first} to {last} (inclusive) from buffer {buf}.\n\t\tIf {last} is omitted then delete line {first} only.\n\t\tOn success 0 is returned, on failure 1 is returned.\n\n\t\tThis function works only for loaded buffers. First call\n\t\t|bufload()| if needed.\n\n\t\tFor the use of {buf}, see |bufname()| above.\n\n\t\t{first} and {last} are used like with |getline()|. Note that\n\t\twhen using |line()| this refers to the current buffer. Use \"$\"\n\t\tto refer to the last line in buffer {buf}.\n\n\t\tParameters: ~\n\t\t  • {buf} (`integer|string`)\n\t\t  • {first} (`integer|string`)\n\t\t  • {last} (`integer|string?`)\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Events\nDESCRIPTION: These snippets configure 'eventignore' to prevent certain events from triggering autocommands, with examples for ignoring window enter and leave events, all events altogether, and resetting to normal.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n:set eventignore=WinEnter,WinLeave\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set eventignore=all\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set eventignore=\n```\n\n----------------------------------------\n\nTITLE: Word Boundary Search\nDESCRIPTION: Search patterns using word boundary markers for exact word matches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n/the\\>\n/\\<the\\>\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression in Vim Script\nDESCRIPTION: Example of using lambda expressions with method chaining.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_80\n\nLANGUAGE: vim\nCODE:\n```\nGetPercentage()->{x -> x * 100}()->printf('%d%%')\n```\n\n----------------------------------------\n\nTITLE: For Loop with Destructuring in Vim\nDESCRIPTION: Demonstrates how to use destructuring assignment within a for loop when iterating over a list of lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\n:for [lnum, col] in [[1, 3], [2, 8], [3, 0]]\n:   call Doit(lnum, col)\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Listing LSP Handlers in Neovim\nDESCRIPTION: Demonstrates how to list available LSP handlers using Lua print function\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n:lua vim.print(vim.tbl_keys(vim.lsp.handlers))\n```\n\n----------------------------------------\n\nTITLE: Checking if Buffer is Loaded in Neovim using Vim Script\nDESCRIPTION: The 'bufloaded' function checks if a buffer is loaded and returns 1 for loaded buffers and 0 for unloaded ones.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\nbufloaded({buf})\n```\n\n----------------------------------------\n\nTITLE: Displaying UI Information in Lua\nDESCRIPTION: This snippet demonstrates how to check if the TUI (Terminal UI) is running by inspecting the client name of the attached UI. It uses nvim_list_uis and nvim_get_chan_info functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nvim.print(vim.api.nvim_get_chan_info(vim.api.nvim_list_uis()[1].chan).client.name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Syntax Highlighting for Comments and Errors\nDESCRIPTION: Sets options for highlighting strings in comments, folding behavior, and marking whitespace errors in Java code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_66\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:java_comment_strings = 1\n:let g:java_foldtext_show_first_or_second_line = 1\n:let g:java_space_errors = 1\n:let g:java_no_trail_space_error = 1\n:let g:java_no_tab_space_error = 1\n```\n\n----------------------------------------\n\nTITLE: Defining tcsh-style Editing Keys in Neovim Command-line\nDESCRIPTION: This snippet demonstrates how to remap keys for tcsh-style editing in Neovim's command-line mode. It defines common navigation and editing shortcuts using the :cnoremap command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\n:cnoremap <C-A> <Home>\n:cnoremap <C-F> <Right>\n:cnoremap <C-B> <Left>\n:cnoremap <Esc>b <S-Left>\n:cnoremap <Esc>f <S-Right>\n```\n\n----------------------------------------\n\nTITLE: Nesting Autocommands in Vim with doautocmd\nDESCRIPTION: Example showing how to nest autocommands by using the doautocmd command to apply autocommands from one file type to another.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_28\n\nLANGUAGE: viml\nCODE:\n```\n:au BufEnter *.cpp so ~/.config/nvim/init_cpp.vim\n:au BufEnter *.cpp doau BufEnter x.c\n```\n\n----------------------------------------\n\nTITLE: Including Specific Syntax Groups for PHP Omni Completion\nDESCRIPTION: Configuration to include JavaScript and HTML syntax groups in PHP files for syntax-based Omni completion, using either regex patterns or specific group names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nlet g:omni_syntax_group_include_php = 'php\\w\\+,javaScript\\w\\+,html\\w\\+'\nlet g:omni_syntax_group_include_php = 'phpFunctions,phpMethods'\n```\n\n----------------------------------------\n\nTITLE: Prime Counting using Sieve of Eratosthenes in Lua\nDESCRIPTION: An implementation of the Sieve of Eratosthenes algorithm in Lua using the BitOp module to count primes up to a specified number. Demonstrates the use of bitwise operations for manipulating a bit-vector stored in a Lua table.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bit = require(\"bit\")\nlocal band, bxor = bit.band, bit.bxor\nlocal rshift, rol = bit.rshift, bit.rol\n\nlocal m = tonumber(arg and arg[1]) or 100000\nif m < 2 then m = 2 end\nlocal count = 0\nlocal p = {}\n\nfor i=0,(m+31)/32 do p[i] = -1 end\n\nfor i=2,m do\n  if band(rshift(p[rshift(i, 5)], i), 1) ~= 0 then\n    count = count + 1\n    for j=i+i,m,i do\n      local jx = rshift(j, 5)\n      p[jx] = band(p[jx], rol(-2, j))\n    end\n  end\nend\n\nio.write(string.format(\"Found %d primes up to %d\\n\", count, m))\n\n```\n\n----------------------------------------\n\nTITLE: Autocmd configuration for LSP CodeLens refresh\nDESCRIPTION: Sets up an autocmd to refresh CodeLens on specific events (BufEnter, CursorHold, InsertLeave) for the current buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_39\n\nLANGUAGE: vim\nCODE:\n```\nautocmd BufEnter,CursorHold,InsertLeave <buffer> lua vim.lsp.codelens.refresh({ bufnr = 0 })\n```\n\n----------------------------------------\n\nTITLE: Checking for Vim patches with version comparison in Vim\nDESCRIPTION: Complex version checking example using v:version and has(\"patch\") to determine if Vim is at version 6.02 with patch 148 or higher.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_121\n\nLANGUAGE: vim\nCODE:\n```\nif v:version > 602 || v:version == 602 && has(\"patch148\")\n  \" ...\nendif\n```\n\n----------------------------------------\n\nTITLE: Increasing window size\nDESCRIPTION: Increases the height of the current window by a specified number of lines.  A count can be prepended to increase the height by multiple lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\tCTRL-W +\n```\n\n----------------------------------------\n\nTITLE: Appending Diagnostic Messages with Suffix - Lua\nDESCRIPTION: Creates a function to format and append a suffix to LSP diagnostic error codes. If the severity of the diagnostic is an error, it formats the message to include 'E:' prefix; otherwise, it returns the message as-is. This function is useful for customizing how diagnostics are displayed in the editor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nfunction(diagnostic)\n    if diagnostic.severity == vim.diagnostic.severity.ERROR then\n      return string.format(\"E: %s\", diagnostic.message)\n    end\n    return diagnostic.message\nend\n```\n\n----------------------------------------\n\nTITLE: Closing Handles Using uv.walk Example\nDESCRIPTION: Example demonstrating how to use uv.walk to iterate through and close all handles that aren't already in a closing state.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nuv.walk(function (handle)\n  if not handle:is_closing() then\n    handle:close()\n  end\nend)\n```\n\n----------------------------------------\n\nTITLE: Vim Module Usage Examples\nDESCRIPTION: Collection of examples showing various ways to interact with Vim from Python\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:python from vim import *\n:python current.line = str.upper(current.line)\n:python print(\"Hello\")\n:python str = current.buffer[42]\n```\n\n----------------------------------------\n\nTITLE: Configuring ShaDa File Options\nDESCRIPTION: Demonstrates how to configure Vim's ShaDa file to save and restore editor state, including marks, registers, and history\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set shada='1000,f1,<500\n```\n\n----------------------------------------\n\nTITLE: Character Range Matching in Vim\nDESCRIPTION: Shows how to use character ranges with [] syntax to match specific sets of characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n/[a-z]\n/[0123456789abcdef]\n/[0-9a-f]\n```\n\n----------------------------------------\n\nTITLE: Customizing Java Syntax Highlighting Colors\nDESCRIPTION: Demonstrates how to customize colors for nested parentheses and concept kinds in Java syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_67\n\nLANGUAGE: VimScript\nCODE:\n```\n:hi link javaParen Comment\n:hi javaParen ctermfg=blue guifg=#0000ff\n:hi link javaConceptKind NonText\n```\n\n----------------------------------------\n\nTITLE: Handling Terminal Response with Autocommand in Neovim using Lua\nDESCRIPTION: This snippet demonstrates how to create an autocommand in Neovim using Lua to handle terminal responses.  It specifically queries the terminal palette for the RGB value of color 1 (red) using OSC 4 and extracts the RGB components from the response.  The autocommand is set to run only once when a 'TermResponse' event is triggered.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n\"-- Query the terminal palette for the RGB value of color 1\n-- (red) using OSC 4\nvim.api.nvim_create_autocmd('TermResponse', {\n  once = true,\n  callback = function(args)\n    local resp = args.data.sequence\n    local r, g, b = resp:match(\"\\027%]4;1;rgb:(%w+)/(%w+)/(%w+)\")\n  end,\n})\nio.stdout:write(\"\\027]4;1;?\\027\\\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shada Settings Example in Vim\nDESCRIPTION: Example of setting the 'shada' option to control how Neovim stores and retrieves information between sessions. This example configures marks, register contents, skip size limit, command history, and shada file location.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_59\n\nLANGUAGE: vim\nCODE:\n```\nset shada='50,<1000,s100,:0,n~/nvim/shada\n```\n\n----------------------------------------\n\nTITLE: Counting Words in Current File using External Command\nDESCRIPTION: Pipes the current file content to the Unix 'wc' command to count words, lines, and characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n:write !wc\n```\n\n----------------------------------------\n\nTITLE: Next Command with Escaped Spaces\nDESCRIPTION: Example showing how to use the next command with filenames containing spaces that need to be escaped.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:next foo\\ bar goes\\ to school\\\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace Parameters in Neovim LSP (Lua)\nDESCRIPTION: Creates workspace parameters for LSP requests. Takes arrays of added and removed workspace folders as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_60\n\nLANGUAGE: lua\nCODE:\n```\nmake_workspace_params({added}, {removed})\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands from Vim\nDESCRIPTION: Shows various methods of executing shell commands and interacting with external programs directly from the Vim editor\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:!ls\n:!dir\n:r !{program}\n:w !{program}\n:[range]!{program}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Clipboard Content in Vim\nDESCRIPTION: This snippet shows how to retrieve the content of the clipboard (system register '*') using the getreg() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_106\n\nLANGUAGE: vim\nCODE:\n```\nlet cliptext = getreg('*')\n```\n\n----------------------------------------\n\nTITLE: Using printf() with Variable Field Width in Vim\nDESCRIPTION: Example of using printf() with an asterisk to specify variable field width and precision. The width parameter controls how many characters from the line are displayed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_192\n\nLANGUAGE: vim\nCODE:\n```\necho printf(\"%d: %.*s\", nr, width, line)\n```\n\n----------------------------------------\n\nTITLE: Visual Area Matching\nDESCRIPTION: Describes matching patterns within the Visual area of Vim using '\\%V'. These patterns ensure matches stay within a visually selected range.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_18\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\%V\"\n```\n\n----------------------------------------\n\nTITLE: Establishing a TCP Connection\nDESCRIPTION: Establishes a TCP connection to the specified host and port. A callback function can be provided to handle the result of the connection attempt, enabling error handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nuv.tcp_connect({tcp}, {host}, {port}, {callback})\n```\n\n----------------------------------------\n\nTITLE: Job Control Basic Commands\nDESCRIPTION: Examples of basic job control commands including sending data to stdin and stopping jobs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:call chansend(job1, \"ls\\n\")\n:call chansend(job1, \"invalid-command\\n\")\n:call chansend(job1, \"exit\\n\")\n:call jobstop(job1)\n```\n\n----------------------------------------\n\nTITLE: Setting guifont for Mac OSX in Neovim\nDESCRIPTION: Configures the 'guifont' option specifically for Mac OSX, setting the Monaco font with a size of 10 points.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_25\n\nLANGUAGE: viml\nCODE:\n```\nset guifont=Monaco:h10\n```\n\n----------------------------------------\n\nTITLE: Accessing Recently Edited Files\nDESCRIPTION: Shows how to view and restore recently edited files using Vim's :oldfiles and :browse oldfiles commands\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:oldfiles\n:e #<2\n:browse oldfiles\n```\n\n----------------------------------------\n\nTITLE: Creating Portable Vim Syntax Files\nDESCRIPTION: Outlines best practices for creating portable syntax files that can be shared among Vim users. Suggestions include defining unique group names for highlighting, avoiding user preferences in syntax files, and ensuring compatibility across various color schemes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_22\n\nLANGUAGE: Vimscript\nCODE:\n```\n\" Vim syntax file\n\" Language:\tC\n\" Maintainer:\tBram Moolenaar <Bram@vim.org>\n\" Last Change:\t2001 Jun 18\n\" Remark:\tIncluded by the C++ syntax.\n\nif exists(\"b:current_syntax\")\n  finish\nendif\n\nhi def link nameString\tString\nhi def link nameNumber\tNumber\nhi def link nameCommand\tStatement\n```\n\n----------------------------------------\n\nTITLE: Preventing Key Mapping Ambiguity in Neovim\nDESCRIPTION: This section discusses how ambiguity occurs when two mappings start with the same sequence and offers an example of how it works with the 'aa' mapping. This is important for understanding user-defined key sequences.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:imap aa foo\n```\n\nLANGUAGE: vim\nCODE:\n```\n:imap aaa bar\n```\n\n----------------------------------------\n\nTITLE: Listing Buffers in Vim\nDESCRIPTION: This snippet describes how to list active and inactive buffers using the ':buffers' and ':ls' commands. It presents the structure and details displayed in the buffer list, including buffer numbers and flags.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:buffers\n```\n\nLANGUAGE: vim\nCODE:\n```\n:ls\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jump List in Vim\nDESCRIPTION: The getjumplist() function returns the jump list for a specified window. It can take optional window and tab number arguments. The result is a list containing jump locations and the last used jump position number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_95\n\nLANGUAGE: vim\nCODE:\n```\ngetjumplist([{winnr} [, {tabnr}]])\n```\n\n----------------------------------------\n\nTITLE: Word Boundary Matching\nDESCRIPTION: Details patterns to match the start ('\\\\<') and end ('\\\\>') of words, governed by the 'iskeyword' option in Vim. These patterns are zero-width and facilitate precise word boundary identification.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_15\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\<\"\n\"\\\\>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Month Completion Function in Vim\nDESCRIPTION: This function demonstrates a basic implementation of a custom completion function in Vim for month names. It handles both the initial find start position and the actual completion phases.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nfun! CompleteMonths(findstart, base)\n  if a:findstart\n    \" locate the start of the word\n    let line = getline('.')\n    let start = col('.') - 1\n    while start > 0 && line[start - 1] =~ '\\a'\n      let start -= 1\n    endwhile\n    return start\n  else\n    \" find months matching with \"a:base\"\n    let res = []\n    for m in split(\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\")\n      if m =~ '^' .. a:base\n        call add(res, m)\n      endif\n    endfor\n    return res\n  endif\nendfun\nset completefunc=CompleteMonths\n```\n\n----------------------------------------\n\nTITLE: Setting Window-Local Syntax in Neovim\nDESCRIPTION: Command to set a window-specific syntax highlighting scheme that's separate from other windows displaying the same buffer. Useful for viewing the same file with different highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_207\n\nLANGUAGE: vim\nCODE:\n```\n:ownsyntax foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Behavior\nDESCRIPTION: Commands to make the mouse behave similar to Microsoft Windows standards\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nset selection=exclusive\nset selectmode=mouse,key\nset keymodel=startsel,stopsel\n```\n\n----------------------------------------\n\nTITLE: Filtering List Items in Vim\nDESCRIPTION: Demonstrates how to use the filter() function to remove items from a list based on a condition. The example removes items containing 'OLD' from mylist.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_65\n\nLANGUAGE: vim\nCODE:\n```\ncall filter(mylist, 'v:val !~ \"OLD\"')\n```\n\n----------------------------------------\n\nTITLE: VimLeavePre Autocommand Example in Vimscript\nDESCRIPTION: This snippet shows how to define a `VimLeavePre` autocommand to execute a cleanup function before Vim exits. The autocommand is triggered for all files (`*` pattern) and calls the `CleanupStuff()` function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n   \":autocmd VimLeavePre * call CleanupStuff()\"\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting Commands in Vim\nDESCRIPTION: Commands for configuring syntax highlighting in Vim, including enabling/disabling syntax highlighting, defining syntax elements, and configuring highlighting groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:syntax on                # start using syntax highlighting\n:syntax off               # stop using syntax highlighting\n:syntax keyword {group-name} {keyword} ..  # add a syntax keyword item\n:syntax match {group-name} {pattern} ...    # add syntax match item\n:syntax region {group-name} {pattern} ...   # add syntax region item\n:syntax sync [ccomment | lines {N} | ...]  # tell syntax how to sync\n:syntax [list]            # list current syntax items\n:syntax clear             # clear all syntax info\n:highlight clear          # clear all highlight info\n:highlight {group-name} {key}={arg} ..     # set highlighting for {group-name}\n:filetype on              # switch on file type detection, without syntax highlighting\n:filetype plugin indent on # switch on file type detection, with automatic indenting and settings\n```\n\n----------------------------------------\n\nTITLE: Filtering Dictionary Items in Vim\nDESCRIPTION: Shows how to use the filter() function to remove items from a dictionary based on a key condition. The example removes items with keys below 8 from mydict.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_66\n\nLANGUAGE: vim\nCODE:\n```\ncall filter(mydict, 'v:key >= 8')\n```\n\n----------------------------------------\n\nTITLE: Conditional Bitwise Operations in Lua\nDESCRIPTION: This snippet demonstrates how to correctly handle conditionals when converting C/C++ bitwise operations to Lua, highlighting the need for explicit comparisons with zero. It is crucial to ensure correct boolean handling in Lua, where all numbers except nil and false are truthy.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n    if band(x, 3) ~= 0 then ... -- correct!\n```\n\n----------------------------------------\n\nTITLE: Setting Marker-based Folding in Vim\nDESCRIPTION: Demonstrates how to enable marker-based folding in Vim using the foldmethod option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n:set foldmethod=marker\n```\n\n----------------------------------------\n\nTITLE: Creating a buffer-local user command in Neovim\nDESCRIPTION: This function creates a user-defined command that is specific to a buffer in Neovim. The command is associated with the given buffer ID. The function requires the buffer ID, the command name, the replacement command, and a dictionary of options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_40\n\nLANGUAGE: vim\nCODE:\n```\n\"                                              *nvim_buf_create_user_command()*\\nnvim_buf_create_user_command({buffer}, {name}, {command}, {opts})\\n    Creates a buffer-local command |user-commands|.\\n\\n    Attributes: ~\\n        Since: 0.7.0\\n\\n    Parameters: ~\\n      • {buffer}   Buffer id, or 0 for current buffer.\\n\\n    See also: ~\\n      • nvim_create_user_command\n```\n\n----------------------------------------\n\nTITLE: Complete Info Examples\nDESCRIPTION: Shows different ways to use complete_info() function to get information about the current completion state.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\n\" Get all items\ncall complete_info()\n\" Get only 'mode'\ncall complete_info(['mode'])\n\" Get only 'mode' and 'pum_visible'\ncall complete_info(['mode', 'pum_visible'])\n```\n\n----------------------------------------\n\nTITLE: Directory Change Events in Neovim\nDESCRIPTION: Documents directory-related events DirChanged and DirChangedPre that trigger when the current directory changes. Includes scope patterns and event variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nDirChanged\nDirChangedPre\n```\n\n----------------------------------------\n\nTITLE: Getting global user commands in Neovim\nDESCRIPTION: This function retrieves a map of global user-defined commands in Neovim. The function requires optional parameters, currently only supporting {\"builtin\":false}. The return value is a map of maps describing commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_46\n\nLANGUAGE: vim\nCODE:\n```\nnvim_get_commands({opts})                                *nvim_get_commands()*\\n    Gets a map of global (non-buffer-local) Ex commands.\\n\\n    Currently only |user-commands| are supported, not builtin Ex commands.\\n\\n    Attributes: ~\\n        Since: 0.3.0\\n\\n    Parameters: ~\\n      • {opts}  Optional parameters. Currently only supports {\"builtin\":false}\\n\\n    Return: ~\\n        Map of maps describing commands.\\n\\n    See also: ~\\n      • |nvim_get_all_options_info()|\n```\n\n----------------------------------------\n\nTITLE: Using Wincmd for Window Navigation in Vim\nDESCRIPTION: Examples demonstrating the :wincmd command, which allows executing CTRL-W window commands as Ex commands. Useful in situations where Normal mode commands cannot be used.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:wincmd j\n```\n\n----------------------------------------\n\nTITLE: Implementing FindGitFiles Function for Vim's findfunc Setting\nDESCRIPTION: A Vim function that uses git ls-files to find files in a git repository, filtering results based on the command argument. This function is assigned to the findfunc setting to customize file finding behavior in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\nfunc FindGitFiles(cmdarg, cmdcomplete)\n\tlet fnames = systemlist('git ls-files')\n\treturn fnames->filter('v:val =~? a:cmdarg')\nendfunc\nset findfunc=FindGitFiles\n```\n\n----------------------------------------\n\nTITLE: Character Column Position Example in Vim\nDESCRIPTION: Shows the difference between charcol() and col() functions when handling multibyte characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_31\n\nLANGUAGE: vim\nCODE:\n```\necho charcol('.')\t\" returns 3\necho col('.')\t\t\" returns 7\n```\n\n----------------------------------------\n\nTITLE: Getting the Name of a Buffer in Neovim using Vim Script\nDESCRIPTION: The 'bufname' function retrieves the name of a specified buffer, returning the current buffer name if no arguments are provided.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\nbufname([{buf}])\n```\n\n----------------------------------------\n\nTITLE: Changing the file name in Vim\nDESCRIPTION: This snippet demonstrates how to change the file name in Vim using the `:saveas` and `:file` commands. `:saveas` saves the current buffer under a new name and continues editing that file. `:file` changes the file name associated with the current buffer without saving it.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n\t:edit copy.c\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t:saveas move.c\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t:file move.c\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Filetype Plugins in Neovim\nDESCRIPTION: Shell command to create the necessary directory structure for custom filetype plugins. Creates the ftplugin directory within the user's Neovim configuration directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.config/nvim/ftplugin\n```\n\n----------------------------------------\n\nTITLE: Binding a TCP Handle\nDESCRIPTION: Binds a TCP handle to a specified host and port. This function ensures that a TCP socket can listen for incoming connections. The host can be an IP address, while flags can dictate certain behaviors, such as IPv6 usage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nuv.tcp_bind({tcp}, {host}, {port} [, {flags}])\n```\n\n----------------------------------------\n\nTITLE: Creating Directory with Protection Flags in Vim\nDESCRIPTION: Example of using mkdir() to create a directory with specific protection flags. Creates a directory in the user's home directory with restricted permissions (0o700).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_178\n\nLANGUAGE: vim\nCODE:\n```\ncall mkdir($HOME .. \"/tmp/foo/bar\", \"p\", 0o700)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Rustfmt Based on Config Presence\nDESCRIPTION: Automatically enables rustfmt on save if a rustfmt.toml configuration file is detected in any parent directory of the current file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustfmt_autosave_if_config_present = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Errorformat for Ant with Both Javac and Jikes in Vim\nDESCRIPTION: Sets properties in an Ant build.xml file to use Jikes compiler with the +E switch for one-line error messages, followed by the Vim errorformat configuration that handles both Javac and Jikes output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_65\n\nLANGUAGE: xml\nCODE:\n```\n<property name = \"build.compiler\"       value = \"jikes\"/>\n<property name = \"build.compiler.emacs\" value = \"true\"/>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set efm=\\ %#[javac]\\ %#%f:%l:%c:%*\\\\d:%*\\\\d:\\ %t%[%^:]%#:%m,\n\t   \\%A\\ %#[javac]\\ %f:%l:\\ %m,%-Z\\ %#[javac]\\ %p^,%-C%.%#\n```\n\n----------------------------------------\n\nTITLE: Namespace Naming Example in Lua\nDESCRIPTION: Demonstrates the recommended namespace naming convention using the 'nvim.foo.bar' format for creating namespaces in Neovim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_namespace('nvim.lsp.codelens')\n```\n\n----------------------------------------\n\nTITLE: Visual mode mapping with count example\nDESCRIPTION: Example of creating a visual mode mapping that uses v:prevcount to access the previous command count\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:vmap % <Esc>:call MyFilter(v:prevcount)<CR>\n```\n\n----------------------------------------\n\nTITLE: Setting Wildignore Patterns\nDESCRIPTION: Configures file patterns to be ignored during wildcard expansion and file completion, specifically ignoring object files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_82\n\nLANGUAGE: vim\nCODE:\n```\nset wildignore=*.o,*.obj\n```\n\n----------------------------------------\n\nTITLE: Overriding LSP Method Handling\nDESCRIPTION: Example of requesting a definition from an LSP client directly\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal client = assert(vim.lsp.get_clients()[1])\nclient:request('textDocument/definition')\n```\n\n----------------------------------------\n\nTITLE: Loading a Buffer in Neovim using Vim Script\nDESCRIPTION: This function 'bufload' ensures that a specified buffer is loaded, returning to the user to either read from a file if it exists or leave it empty if it does not.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\nbufload({buf})\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements in Vim Script\nDESCRIPTION: Shows the syntax for if-else conditionals in Vim script, including else and elseif clauses. Includes a practical example checking terminal type.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_9\n\nLANGUAGE: viml\nCODE:\n```\n:if &term == \"xterm\"\n:  \" Do stuff for xterm\n:elseif &term == \"vt100\"\n:  \" Do stuff for a vt100 terminal\n:else\n:  \" Do something for other terminals\n:endif\n```\n\n----------------------------------------\n\nTITLE: VIM Module Usage Examples in Perl\nDESCRIPTION: Various examples of using the VIM module to interact with Neovim, including accessing buffers, windows, and evaluating Vim expressions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_4\n\nLANGUAGE: perl\nCODE:\n```\nprint \"Hello\"\nVIM::Msg(\"Hello\")\nVIM::SetOption(\"ai\")\n$nbuf = VIM::Buffers()\n@buflist = VIM::Buffers()\n$mybuf = (VIM::Buffers('a.c'))[0]\n@winlist = VIM::Windows()\n$nwin = VIM::Windows()\n($success, $v) = VIM::Eval('&path')\n($success, $v) = VIM::Eval('&xyz')\n$v = VIM::Eval('expand(\"<cfile>\")')\n$curwin->SetHeight(10)\n@pos = $curwin->Cursor()\n@pos = (10, 10)\n$curwin->Cursor(@pos)\n$curwin->Cursor(10,10)\n$mybuf = $curwin->Buffer()\n$curbuf->Name()\n$curbuf->Number()\n$curbuf->Count()\n$l = $curbuf->Get(10)\n@l = $curbuf->Get(1 .. 5)\n$curbuf->Delete(10)\n$curbuf->Delete(10, 20)\n$curbuf->Append(10, \"Line\")\n$curbuf->Append(10, \"L1\", \"L2\", \"L3\")\n@l = (\"L1\", \"L2\", \"L3\")\n$curbuf->Append(10, @l)\n$curbuf->Set(10, \"Line\")\n$curbuf->Set(10, \"Line1\", \"Line2\")\n$curbuf->Set(10, @l)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filetype Detection Script\nDESCRIPTION: Script to detect filetypes based on file content by checking first line patterns and setting appropriate filetype.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nif did_filetype()\n  finish\nendif\nif getline(1) =~ '^#!.*\\<mine\\>'\n  setfiletype mine\nelseif getline(1) =~? '\\<drawing\\>'\n  setfiletype drawing\nendif\n```\n\n----------------------------------------\n\nTITLE: Lua Yank Ring Implementation\nDESCRIPTION: Begins implementation of a yank ring feature that stores yanked text in registers 1-9 using an autocmd for TextYankPost events.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd('TextYankPost', {\n  callback = function()\n    if vim.v.event.operator == 'y' then\n```\n\n----------------------------------------\n\nTITLE: Navigating to Last Quickfix Error\nDESCRIPTION: Command for displaying the last error in the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:cla[st][!] [nr]\n```\n\n----------------------------------------\n\nTITLE: XML Completion Usage Example in Vim\nDESCRIPTION: This Vim example demonstrates how XML completion works with namespaces. It shows how to use the :XMLns command to load data files and connect them with namespaces, as well as how to use XML completion in different scenarios.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n\t:XMLns xhtml10s\n\t:XMLns xsl xsl\n```\n\n----------------------------------------\n\nTITLE: Checking Vim compatibility version with has() in Vim\nDESCRIPTION: Example of using has() with the patch-x.y.z format to check if Nvim is compatible with Vim version 7.4.237 or later.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_122\n\nLANGUAGE: vim\nCODE:\n```\nif has(\"patch-7.4.237\")\n  \" ...\nendif\n```\n\n----------------------------------------\n\nTITLE: Sourcing Vim Script Files in Neovim\nDESCRIPTION: Demonstrates how to source Vim script files or Lua code files using the :runtime command. This example sources all plugin files during startup.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:runtime! plugin/**/*.{vim,lua}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Window Numbers in Vim\nDESCRIPTION: This snippet shows various ways to use the winnr() function to get window numbers, including the current window, last window, and relative window positions. It's useful for scripts that need to navigate between windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_288\n\nLANGUAGE: vim\nCODE:\n```\nlet window_count = winnr('$')\nlet prev_window = winnr('#')\nlet wnum = winnr('3k')\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Position in Window in Neovim Lua API\nDESCRIPTION: Sets the (1,0)-indexed cursor position in the window. This scrolls the window even if it is not the current one. Available since Neovim 0.1.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_77\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_set_cursor({window}, {pos})\n```\n\n----------------------------------------\n\nTITLE: Creating and using pipes with pipe_open in Lua\nDESCRIPTION: This snippet demonstrates how to create a pair of connected pipe handles using `uv.pipe` in Lua, open them with `pipe_open`, and then write and read data between them. The `nonblock` flag is set to true for both read and write operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\n                    -- Simple read/write with pipe_open\n                    local fds = uv.pipe({nonblock=true}, {nonblock=true})\n\n                    local read_pipe = uv.new_pipe()\n                    read_pipe:open(fds.read)\n\n                    local write_pipe = uv.new_pipe()\n                    write_pipe:open(fds.write)\n\n                    write_pipe:write(\"hello\")\n                    read_pipe:read_start(function(err, chunk)\n                      assert(not err, err)\n                      print(chunk)\n                    end)\n```\n\n----------------------------------------\n\nTITLE: Setting comments option in Vim\nDESCRIPTION: This snippet demonstrates how to set the 'comments' option in Vim to define different comment types. The example shows how to include both \"-\" and \"->\" as comment leaders using the f flag.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n\":set comments=f:->,f:-\"\n```\n\n----------------------------------------\n\nTITLE: Changing the Global Working Directory - Lua\nDESCRIPTION: This function changes the global working directory for Neovim. It requires a valid directory path and does not have any additional constraints.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_current_dir({dir})\n```\n\n----------------------------------------\n\nTITLE: Filtering Mappings with MultiMatch Pattern\nDESCRIPTION: Example demonstrating how to filter mapping list to show all mappings containing 'MultiMatch' in their right-hand side.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_159\n\nLANGUAGE: vim\nCODE:\n```\necho maplist()->filter({_, m ->\n\tmatch(get(m, 'rhs', ''), 'MultiMatch') >= 0\n\t})\n```\n\n----------------------------------------\n\nTITLE: C Code Folding Configuration in VimL\nDESCRIPTION: Sets up code folding in C files based on syntax methods, specifically controlling the folding behavior of comments and conditional blocks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_13\n\nLANGUAGE: VimL\nCODE:\n```\n:let c_no_comment_fold = 1\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:let c_no_if0_fold = 1\n```\n\n----------------------------------------\n\nTITLE: List Item Removal with remove()\nDESCRIPTION: Examples of removing items from a list, either single items or ranges\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_206\n\nLANGUAGE: vim\nCODE:\n```\necho \"last item: \" .. remove(mylist, -1)\ncall remove(mylist, 0, 9)\n```\n\n----------------------------------------\n\nTITLE: Setting Script Encoding in Vim\nDESCRIPTION: The :scriptencoding command specifies the character encoding used in the script, allowing for conversion between different encodings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:scripte[ncoding] [encoding]\n```\n\n----------------------------------------\n\nTITLE: Resetting a TCP Connection\nDESCRIPTION: Resets a TCP connection by sending a RST packet, effectively closing the connection. This method has certain platform inconsistencies that developers should be aware of.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nuv.tcp_close_reset([{callback}])\n```\n\n----------------------------------------\n\nTITLE: Creating Sublists in Vimscript\nDESCRIPTION: This code demonstrates how to create a sublist from an existing list using the slicing notation `[start:end]`. The `start` index is inclusive, and the `end` index is also inclusive.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n\t:let shortlist = mylist[2:-1]\t\" get List [3, \"four\"]\n```\n\n----------------------------------------\n\nTITLE: Ineffective Catch Order in Vim Script\nDESCRIPTION: Example demonstrating why catch patterns should be ordered from specific to general. The first catch with the general pattern will always match, making the second catch unreachable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_124\n\nLANGUAGE: vim\nCODE:\n```\n:  catch /.*/\n:    echo \"String thrown\"\n:  catch /^\\d\\+$/\n:    echo \"Number thrown\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Typst Compiler Command Path\nDESCRIPTION: Example of setting a custom path to the Typst document compiler command, allowing users to specify an alternative location for the Typst executable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_60\n\nLANGUAGE: vim\nCODE:\n```\nlet g:typst_cmd = \"/path/to/other/command\"\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Tree in LanguageTree (Lua)\nDESCRIPTION: Returns the parent tree of the current LanguageTree. Returns nil for the root tree.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:parent()\n```\n\n----------------------------------------\n\nTITLE: Creating Directory with Recursive Deletion Flag\nDESCRIPTION: Example showing mkdir() usage with recursive deletion flag. Creates nested directories that will be scheduled for deletion at the end of the current function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_179\n\nLANGUAGE: vim\nCODE:\n```\ncall mkdir('subdir/tmp/autoload', 'pR')\n```\n\n----------------------------------------\n\nTITLE: Navigating Command History with Partial Input in Vim\nDESCRIPTION: This snippet demonstrates how to use the <Up> key to navigate command history based on the text already typed. Vim filters the history to only show lines that start with the entered text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\t:se<Up>\n```\n\n----------------------------------------\n\nTITLE: Configuring C-Style Multi-Part Comments in Vim\nDESCRIPTION: Defines three-part C-style comment formatting with /* start, * middle, and */ end patterns. Includes spacing and formatting rules for each part.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n:set comments=s1:/*,mb:*,ex:*/\n```\n\n----------------------------------------\n\nTITLE: Loading Vim Package with :packadd Command\nDESCRIPTION: The :packadd command loads a single package from the 'packpath' directory, adding it to 'runtimepath' and sourcing plugin files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:packadd[!] {name}\n```\n\n----------------------------------------\n\nTITLE: Checking PythonX version in Neovim\nDESCRIPTION: Commands to import the sys module and display the Python version information using the PythonX interface.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_12\n\nLANGUAGE: viml\nCODE:\n```\n:pyx import sys\n:pyx print(sys.version)\n```\n\n----------------------------------------\n\nTITLE: Moving windows up\nDESCRIPTION: Moves the current window to the very top, and if the window is vertically split, occupies the full width of the vim window\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n\tCTRL-W K\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Maximize Current Window on Startup in Neovim\nDESCRIPTION: This VimL snippet demonstrates how to use the VimEnter event to automatically set winheight to 999 after Vim startup is complete. This effectively makes the current window fill most of the screen while still allowing multiple windows to be created during startup.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_85\n\nLANGUAGE: viml\nCODE:\n```\nau VimEnter * set winheight=999\n```\n\n----------------------------------------\n\nTITLE: Restoring Specific View Settings in Vim\nDESCRIPTION: This snippet shows how to use winrestview() to restore specific view settings, such as the cursor's desired column position. It's useful for maintaining cursor position after performing operations that might move it.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_290\n\nLANGUAGE: vim\nCODE:\n```\ncall winrestview({'curswant': 4})\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Filler Lines in Diff - Lua\nDESCRIPTION: The diff_filler function returns the count of filler lines above a specific line in a diff'ed window. These lines are used for display purposes and do not exist in the actual buffer, which aids in managing views during diff sessions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_51\n\nLANGUAGE: lua\nCODE:\n```\ndiff_filler({lnum})                                              *diff_filler()*\n\t\tReturns the number of filler lines above line {lnum}.\n\t\tThese are the lines that were inserted at this point in\n\t\tanother diff'ed window.  These filler lines are shown in the\n\t\tdisplay but don't exist in the buffer.\n\t\t{lnum} is used like with |getline()|.  Thus \".\" is the current\n\t\tline, \"'m\" mark m, etc.\n\t\tReturns 0 if the current window is not in diff mode.\n\n\t\tParameters: ~\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregate Linting Target in CMake\nDESCRIPTION: Creates a composite target that depends on all linting targets (C, Lua, and shell scripts), allowing all linting to be run with a single command.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(lint)\nadd_dependencies(lint lintc lintlua lintsh)\n```\n\n----------------------------------------\n\nTITLE: Implementing custom findfunc using glob() in Vim\nDESCRIPTION: Example of a custom findfunc implementation using glob() to find files for the :find command in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_19\n\nLANGUAGE: viml\nCODE:\n```\nfunc FindFuncGlob(cmdarg, cmdcomplete)\n    let pat = a:cmdcomplete ? ${a:cmdarg}* : a:cmdarg\n    return glob(pat, v:false, v:true)\nendfunc\nset findfunc=FindFuncGlob\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with Ninja on MSYS2/MinGW\nDESCRIPTION: CMake commands to build Neovim on Windows using MSYS2/MinGW toolchain with the Ninja generator, including building dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build .deps\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Mouse Event Handling in Neovim JSON\nDESCRIPTION: This snippet defines mouse event handling with actions for enabling or disabling mouse support in Neovim. It is particularly useful for embedding applications or terminal UIs where mouse interactions might conflict.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\"mouse_on\"] ~\n[\"mouse_off\"] ~\n\t'mouse' was enabled/disabled in the current editor mode. Useful for\na terminal UI, or embedding into an application where Nvim mouse would\nconflict with other usages of the mouse. Other UI:s may ignore this event.\n```\n\n----------------------------------------\n\nTITLE: Modifying Dictionary Entries in Vim\nDESCRIPTION: Shows how to add or change entries in a dictionary using bracket notation or dot notation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_53\n\nLANGUAGE: vim\nCODE:\n```\n:let dict[4] = \"four\"\n:let dict['one'] = item\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Breakpoint\nDESCRIPTION: This command sets a breakpoint that triggers whenever the value of the global variable 'g:lnum' changes.  It's a useful way to monitor variables and halt execution when they are modified.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n\":breakadd expr g:lnum\"\n```\n\n----------------------------------------\n\nTITLE: Heredoc String Assignment in Vim\nDESCRIPTION: Demonstrates using heredoc-style syntax for multiline string assignment with optional trim and eval modifiers\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_97\n\nLANGUAGE: vim\nCODE:\n```\nlet lines =<< trim eval END\n  some text\n  See the file {$HOME}/.vimrc\n  more text\nEND\n```\n\n----------------------------------------\n\nTITLE: Finding Matching Braces with searchpair() in Neovim (Vimscript)\nDESCRIPTION: This snippet shows how to use searchpair() to find a matching opening brace for a closing brace, searching backwards and ignoring matches in syntax-highlighted strings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_221\n\nLANGUAGE: vim\nCODE:\n```\necho searchpair('{', '', '}', 'bW',\n     \\ 'synIDattr(synID(line(\".\"), col(\".\"), 0), \"name\") =~? \"string\"')\n```\n\n----------------------------------------\n\nTITLE: Opening Diff Mode from within Vim\nDESCRIPTION: Shows how to enter diff mode after already editing a file in Vim. This creates a vertical split and compares the current file with its backup version.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:edit main.c\n:vertical diffsplit main.c~\n```\n\n----------------------------------------\n\nTITLE: Moving to Specific Window by Number in Vim\nDESCRIPTION: Example showing how to navigate to a specific window by number using the :wincmd command with expression concatenation, useful in scripts or functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:exe nr .. \"wincmd w\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nvim with Python using pynvim\nDESCRIPTION: A Python example showing how to connect to Nvim using the pynvim package in an interactive REPL session. It demonstrates attaching to a socket and executing a command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pynvim import attach\n>>> nvim = attach('socket', path='[address]')\n>>> nvim.command('echo \"hello world!\"')\n```\n\n----------------------------------------\n\nTITLE: Matching Any Character or Line\nDESCRIPTION: Illustrates the use of '.' to match any character excluding end-of-line, and '\\_.' to include end-of-line. It warns about the potential of '\\_.*' to match until the end of the buffer, potentially leading to unintended matches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_14\n\nLANGUAGE: regex\nCODE:\n```\n\".\"\n\"\\\\_.\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ada Entity Name with ada#Word Function\nDESCRIPTION: Function to get the full name of an Ada entity under the cursor or at a given line/column, with whitespace and newlines stripped properly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\nada#Word([{line}, {col}])\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Parser in Lua\nDESCRIPTION: Shows how to load a custom parser from a specific filepath using the Treesitter API.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvim.treesitter.language.add('python', { path = \"/path/to/python.so\" })\n```\n\n----------------------------------------\n\nTITLE: Timestamp-based Backup Extension AutoCommand\nDESCRIPTION: BufWritePre autocommand that dynamically changes the backup extension to include a timestamp before writing the file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nau BufWritePre * let &bex = '-' .. strftime(\"%Y%b%d%X\") .. '~'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Highlight Group Attributes in Vim\nDESCRIPTION: Demonstrates how to get information about a highlight group using hlID() and related functions. This example retrieves the background color of the \"Comment\" highlight group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_129\n\nLANGUAGE: vim\nCODE:\n```\necho synIDattr(synIDtrans(hlID(\"Comment\")), \"bg\")\n```\n\n----------------------------------------\n\nTITLE: Example User Autocommand in Vimscript\nDESCRIPTION: This example showcases how to create and trigger a custom 'User' autocommand in Vimscript.  The autocommand 'MyPlugin' is defined to echo a message when triggered. The `:doautocmd` command is then used to manually trigger the autocommand.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n    \":autocmd User MyPlugin echom 'got MyPlugin event'\\n    :doautocmd User MyPlugin\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Dependency Example\nDESCRIPTION: Example showing how to structure plugins with shared dependencies using autoload functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\npack/foo/start/one/plugin/one.vim\ncall foolib#getit()\n\npack/foo/start/two/plugin/two.vim\ncall foolib#getit()\n\npack/foo/start/lib/autoload/foolib.vim\nfunc foolib#getit()\n```\n\n----------------------------------------\n\nTITLE: Counting Words in Vim\nDESCRIPTION: This snippet describes how to count words in a file or a selected range using the 'g CTRL-G' command in Vim, providing statistics about the text being worked on.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\ng CTRL-G\n```\n\n----------------------------------------\n\nTITLE: LSP RPC Response Error Constructor in Lua\nDESCRIPTION: Function to create an RPC response error table with code, message, and optional data.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_64\n\nLANGUAGE: lua\nCODE:\n```\nrpc_response_error(code, message, data)\n```\n\n----------------------------------------\n\nTITLE: Help Commands with Pattern Matching\nDESCRIPTION: Examples showing advanced help navigation using tags and patterns\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimscript\nCODE:\n```\n:help index\n:tselect /.*mode\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Script Indentation in Vim\nDESCRIPTION: This snippet details configuring shell script indentation in Vim by setting keys in the 'b:sh_indent_defaults' dictionary. Users can specify indentation amounts for general cases, continuation lines, case labels and statements, providing comprehensive control over shell script formatting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_12\n\nLANGUAGE: VimL\nCODE:\n```\nb:sh_indent_options[\"default\"]\nb:sh_indent_options[\"continuation-line\"]\nb:sh_indent_options[\"case-labels\"]\nb:sh_indent_options[\"case-statements\"]\nb:sh_indent_options[\"case-breaks\"]\n```\n\n----------------------------------------\n\nTITLE: Environment Check Example in Vim\nDESCRIPTION: Shows how to check for existence of environment variables using environ() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_56\n\nLANGUAGE: vim\nCODE:\n```\necho has_key(environ(), 'HOME')\n\necho index(keys(environ()), 'HOME', 0, 1) != -1\n```\n\n----------------------------------------\n\nTITLE: Measuring Syntax Highlighting Performance\nDESCRIPTION: Commands for measuring and analyzing syntax highlighting performance, useful for syntax file authors to identify slow patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_209\n\nLANGUAGE: vim\nCODE:\n```\n:syntime on\n[ redraw the text at least once with CTRL-L ]\n:syntime report\n```\n\n----------------------------------------\n\nTITLE: Processing Quickfix List Entries in Vim\nDESCRIPTION: This example shows how to iterate through quickfix list entries after running vimgrep, displaying the filename, line number, and text for each match.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_104\n\nLANGUAGE: vim\nCODE:\n```\nvimgrep /theword/jg *.c\nfor d in getqflist()\n   echo bufname(d.bufnr) ':' d.lnum '=' d.text\nendfor\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Options for Pylint Python Linter\nDESCRIPTION: Example of setting custom parameters for the Pylint Python linter, using the current buffer's textwidth setting to set the maximum line length allowed by the linter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_56\n\nLANGUAGE: vim\nCODE:\n```\nlet b:pylint_makeprg_params = \"--max-line-length \"..&textwidth\n```\n\n----------------------------------------\n\nTITLE: Mapping Spacebar to Move Forward a Word\nDESCRIPTION: This snippet maps the spacebar to move forward a blank-separated word, demonstrating the use of <Space> in mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\n:map <Space> W\n```\n\n----------------------------------------\n\nTITLE: Silent Redirection Example\nDESCRIPTION: Shows how to redirect command output to a file silently using :redir and :silent commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\n:redir >/tmp/foobar\n:silent g/Aap/p\n:redir END\n```\n\n----------------------------------------\n\nTITLE: Converting SignatureHelp to Markdown in Neovim LSP (Lua)\nDESCRIPTION: Converts textDocument/signatureHelp response to markdown lines. Takes signature help object, optional filetype, and optional trigger characters as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_51\n\nLANGUAGE: lua\nCODE:\n```\nconvert_signature_help_to_markdown_lines({signature_help}, {ft}, {triggers})\n```\n\n----------------------------------------\n\nTITLE: Setting Language for Messages in Vim - Vimscript\nDESCRIPTION: This code snippet demonstrates how to check and set the language for messages in Vim. The command ':language' shows the current language, while setting the environment variable LANG changes language before starting Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_0\n\nLANGUAGE: Vim\nCODE:\n```\n:language\n```\n\nLANGUAGE: Vim\nCODE:\n```\nenv LANG=de_DE.ISO_8859-1  vim\n```\n\nLANGUAGE: Vim\nCODE:\n```\n:language fr_FR.ISO_8859-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Syntax Region with Skip Pattern\nDESCRIPTION: Example showing syntax region definition with start, skip and end patterns using external references\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_169\n\nLANGUAGE: vim\nCODE:\n```\n:syn region foo start=\"start \\z(\\I\\i*\\)\" skip=\"not end \\z1\" end=\"end \\z1\"\n```\n\n----------------------------------------\n\nTITLE: Repeating Changes with Visual Mode in Vim\nDESCRIPTION: This snippet demonstrates how to use Visual mode and the 'gv' command in Vim to repeat a substitution across a selected range of lines. It illustrates changing specific text occurrences efficiently.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_0\n\nLANGUAGE: Vim\nCODE:\n```\n\"Example of changing years in a text block\n:s/2001/2002/g\n\" Now reselect the same text and make the second change\n\"gv\" will select the same area again\n:s/2000/2001/g\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Indentation and Formatting in Vim\nDESCRIPTION: This section describes various Vim global variables used to control PHP code indentation and formatting. Features include removing carriage returns, extra indentation for comments and default line indentation, aligning PHP escape tags, and configuring behavior for braces and multi-line chained calls. Options allow fine-tuning of PHP code style to achieve desired indentation patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_9\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:PHP_autoformatcomment = 0\nlet g:PHP_outdentSLComments = N\nlet g:PHP_default_indenting = N\nlet g:PHP_outdentphpescape = 0\nlet g:PHP_removeCRwhenUnix = 1\nlet g:PHP_BracesAtCodeLevel = 1\nlet g:PHP_vintage_case_default_indent = 1\nlet g:PHP_noArrowMatching = 1\nlet g:PHP_IndentFunctionCallParameters = 1\nlet g:PHP_IndentFunctionDeclarationParameters = 1\n```\n\n----------------------------------------\n\nTITLE: Setting Syntax in C Files with Modeline\nDESCRIPTION: Examples of setting syntax highlighting through modelines in C files, including basic and combined syntax settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_73\n\nLANGUAGE: c\nCODE:\n```\n/* vim: set syntax=idl : */\n/* vim: set syntax=c.doxygen : */\n```\n\n----------------------------------------\n\nTITLE: Sourcing Other Vim Scripts Relatively\nDESCRIPTION: Example of sourcing another Vim script file relative to the current script's location using the <sfile> special string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:source <sfile>:h/other.vimrc\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Using the 'gq' Operator - Vim\nDESCRIPTION: Utilizes the 'gq' operator in combination with visual selections to reformat a selected paragraph of text. This is essential for adjusting spacing and improving text alignment within Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nv4jgq\n```\n\nLANGUAGE: vim\nCODE:\n```\ngq}\n```\n\nLANGUAGE: vim\nCODE:\n```\ngqap\n```\n\nLANGUAGE: vim\nCODE:\n```\ngggqG\n```\n\n----------------------------------------\n\nTITLE: Setting specific fold level\nDESCRIPTION: Sets the fold level to determine which folds are closed. Folds with a level higher than the specified number will be closed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_16\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set foldlevel=3\n```\n\n----------------------------------------\n\nTITLE: Limiting Search Range in Vim\nDESCRIPTION: This snippet shows how to limit the search command to a certain range of lines in Vim. It uses the \\%>l item to match the word 'limit' between lines 199 and 300.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\n/\\%>199l\\%<300llimit\n```\n\n----------------------------------------\n\nTITLE: Scrolling Downwards in Vim\nDESCRIPTION: Commands to move the edit window downwards in the buffer, showing more lines below. Includes CTRL-E, CTRL-D, PageDown, CTRL-F, and z+ commands with their behaviors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-E          Scroll window [count] lines downwards in the buffer.\nCTRL-D          Scroll window Downwards in the buffer.\n<S-Down> or <PageDown> or CTRL-F    Scroll window [count] pages Forwards.\nz+              Redraw with the line just below the window at the top.\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Neovim AppImage on Linux\nDESCRIPTION: Commands to download, make executable, and configure Neovim AppImage on Linux systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./nvim-linux-x86_64.appimage --appimage-extract\n./squashfs-root/AppRun --version\n\n# Optional: exposing nvim globally.\nsudo mv squashfs-root /\nsudo ln -s /squashfs-root/AppRun /usr/bin/nvim\nnvim\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color Based on Terminal Type\nDESCRIPTION: Example of conditionally setting the background color option based on terminal type in Vim configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nif $TERM ==# \"xterm\"\n  set background=dark\nendif\n```\n\n----------------------------------------\n\nTITLE: Setting Local Scrolloff Values in Vim\nDESCRIPTION: Code demonstrating how to reset the scrolloff option to either global value or disable it locally in a window. This controls the minimum number of screen lines kept visible above and below the cursor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal scrolloff<\nsetlocal scrolloff=-1\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Modification Time in Vim\nDESCRIPTION: The getftime() function returns the last modification time of a given file as a number of seconds since January 1, 1970. It can be used with strftime() for formatting. Returns -1 if the file is not found.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_93\n\nLANGUAGE: vim\nCODE:\n```\ngetftime({fname})\n```\n\n----------------------------------------\n\nTITLE: Concealing an entire line with Treesitter\nDESCRIPTION: This snippet demonstrates how to conceal an entire line by using the `conceal_lines` metadata. The `(#set! conceal_lines \"\")` hides the entire line from being drawn, effectively removing it from the view.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n    ((comment) @comment @spell\n      (#set! conceal_lines \"\"))\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Vim Paste Handler\nDESCRIPTION: Example of documenting the vim.paste handler function with comprehensive docstring including description, example usage, and parameter documentation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n--- Paste handler, invoked by |nvim_paste()| when a conforming UI\n--- (such as the |TUI|) pastes text into the editor.\n---\n--- Example: To remove ANSI color codes when pasting:\n---\n--- ```lua\n--- vim.paste = (function()\n---   local overridden = vim.paste\n---   ...\n--- end)()\n--- ```\n---\n--- @since 12\n--- @see |paste|\n---\n--- @param lines  ...\n--- @param phase  ...\n--- @returns false if client should cancel the paste.\n```\n\n----------------------------------------\n\nTITLE: Using Thesaurus for Completion in Vim - Vimscript\nDESCRIPTION: The 'Thesaur' function facilitates word completion based on a thesaurus when the 'thesaurusfunc' option is set in Vim. The function leverages the external tool 'aiksaurus' to generate completion matches. It requires the 'aiksaurus' command to be accessible in the system environment. Input involves specifying the starting point and base word, and it outputs a list of words with similar meanings for completion. The function runs in environments supporting Vim with '+thesaurusfunc'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_4\n\nLANGUAGE: Vimscript\nCODE:\n```\nfunc Thesaur(findstart, base)\n  if a:findstart\n    return searchpos('\\<', 'bnW', line('.'))[1] - 1\n  endif\n  let res = []\n  let h = ''\n  for l in systemlist('aiksaurus ' .. shellescape(a:base))\n    if l[:3] == '=== '\n      let h = '(' .. substitute(l[4:], ' =*$', ')', '')\n    elseif l ==# 'Alphabetically similar known words are: '\n      let h = \"\\U0001f52e\"\n    elseif l[0] =~ '\\a' || (h ==# \"\\U0001f52e\" && l[0] ==# \"\\t\")\n      call extend(res, map(split(substitute(l, '^\\t', '', ''), ', '), {_, val -> {'word': val, 'menu': h}}))\n    endif\n  endfor\n  return res\nendfunc\n\nif exists('+thesaurusfunc')\n  set thesaurusfunc=Thesaur\nendif\n```\n\n----------------------------------------\n\nTITLE: Directory Creation Example with mkdir()\nDESCRIPTION: Illustrates the changed behavior of directory creation in Neovim's mkdir() function\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nmkdir('/tmp/foo/bar', 'p', 0700)\n```\n\n----------------------------------------\n\nTITLE: String Splitting Examples using split()\nDESCRIPTION: Shows different ways to split strings using the split() function, including splitting by whitespace, pattern matching, and character separation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_249\n\nLANGUAGE: vim\nCODE:\n```\nlet words = split(getline('.'), '\\W\\+')\n\nfor c in split(mystring, '\\zs') | endfor\n\necho split('abc:def:ghi', ':\\zs')\n\nlet items = split(line, ':', 1)\n```\n\n----------------------------------------\n\nTITLE: Building Neovim without Bundled Dependencies\nDESCRIPTION: These commands build Neovim using system-wide dependencies. The `USE_BUNDLED` and `USE_BUNDLED_TS` flags are set to OFF and ON, respectively, during the CMake configuration to control which dependencies are bundled.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\n\"cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_BUNDLED=OFF -DUSE_BUNDLED_TS=ON\\ncmake --build .deps\\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\\ncmake --build build\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Location List Error After Cursor Position\nDESCRIPTION: Command for going to the error after the current cursor position in the current buffer from the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:[count]laf[ter]\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Language Syntax in Vim\nDESCRIPTION: This snippet shows how to customize syntax highlighting for specific languages in Vim. Users can define syntax-related variables in their vimrc files to enable or disable parts of the syntax highlighting. Variables like `abel_obsolete_ok` and `g:asy_syn_plain` control the highlighting behavior for ABEL and Asymptote syntax, respectively.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_7\n\nLANGUAGE: Vim Script\nCODE:\n```\n:let abel_obsolete_ok=1\n:unlet abel_obsolete_ok\n```\n\nLANGUAGE: Vim Script\nCODE:\n```\n:let g:asy_syn_plain = 1\n:let g:asy_syn_three = 1\n:let g:asy_syn_texcolors = 1\n:let g:asy_syn_x11colors = 1\n```\n\n----------------------------------------\n\nTITLE: Notifying LSP Server in Lua\nDESCRIPTION: Sends a notification to the LSP server. Requires buffer number, the method name, and parameters to be sent, returning true on success. This is utilized starting from Neovim version 0.5.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_22\n\nLANGUAGE: Lua\nCODE:\n```\nbuf_notify({bufnr}, {method}, {params})                 *vim.lsp.buf_notify()*\n    Attributes: ~\n        Since: 0.5.0\n\n    Parameters: ~\n      • {bufnr}   (`integer?`) The number of the buffer\n      • {method}  (`string`) Name of the request method\n      • {params}  (`any`) Arguments to send to the server\n\n    Return: ~\n        (`boolean`) success true if any client returns true; false otherwise\n```\n\n----------------------------------------\n\nTITLE: Finding and Editing Include Files in C\nDESCRIPTION: Illustrates the use of the 'gf' command to find and edit files such as included headers in C programs. The 'path' option specifies directories for Vim to search for files, supporting both absolute and relative paths to manage file locations effectively.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_2\n\nLANGUAGE: VimScript\nCODE:\n```\n:set path+=c:/prog/include\\n:set path+=./proto\\n#include \"inits.h\" ~\\ngf\n```\n\n----------------------------------------\n\nTITLE: Next Non-Blank Line Check\nDESCRIPTION: Example of using nextnonblank() to find the first non-blank line and check if it contains a specific pattern.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_183\n\nLANGUAGE: vim\nCODE:\n```\nif getline(nextnonblank(1)) =~ \"Java\" | endif\n```\n\n----------------------------------------\n\nTITLE: List Unpacking in Vim\nDESCRIPTION: Demonstrates how to unpack items from a list into individual variables using square bracket notation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n:let [var1, var2] = mylist\n```\n\n----------------------------------------\n\nTITLE: Ex Ranges in Vim\nDESCRIPTION: Reference for specifying line ranges in Ex commands, including line number specifiers, position markers, pattern references, and arithmetic operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n,               separates two line numbers\n;               idem, set cursor to the first line number before interpreting the second one\n\n{number}        an absolute line number\n.               the current line\n$               the last line in the file\n%               equal to 1,$ (the entire file)\n*               equal to '<,'> (visual area)\n't              position of mark t\n/{pattern}[/]   the next line where {pattern} matches\n?{pattern}[?]   the previous line where {pattern} matches\n\n+[num]          add [num] to the preceding line number (default: 1)\n-[num]          subtract [num] from the preceding line number (default: 1)\n```\n\n----------------------------------------\n\nTITLE: SQL Objects Pattern Definition in Vim\nDESCRIPTION: Default pattern definition for SQL objects used in navigation, including tables, procedures, events and other database objects with support for existing and temporary tables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\nlet g:ftplugin_sql_objects = 'function,procedure,event,' ..\n\t\t\\ '\\\\(existing\\\\\\\\|global\\\\s\\\\+temporary\\\\s\\\\+\\\\)\\\\{,1}' ..\n\t\t\\ 'table,trigger' ..\n\t\t\\ ',schema,service,publication,database,datatype,domain' ..\n\t\t\\ ',index,subscription,synchronization,view,variable'\n```\n\n----------------------------------------\n\nTITLE: Getting Namespace Properties in Neovim Lua API\nDESCRIPTION: Experimental function to get properties for a namespace. Returns a map defining the namespace properties.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_69\n\nLANGUAGE: lua\nCODE:\n```\nnvim__ns_get({ns_id})\n```\n\n----------------------------------------\n\nTITLE: Autocommand Group Naming Example in Lua\nDESCRIPTION: Shows the recommended autocommand group naming convention using the 'nvim.foo.bar' format\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_augroup('nvim.treesitter.dev')\n```\n\n----------------------------------------\n\nTITLE: Non-Greedy Pattern Matching in Vim\nDESCRIPTION: Search patterns that match as few characters as possible using the non-greedy modifier \\{-}. These patterns match the minimum required characters rather than the maximum possible.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n/ab\\{-1,3}\n```\n\nLANGUAGE: vim\nCODE:\n```\n/a.\\{-}b\n```\n\nLANGUAGE: vim\nCODE:\n```\n/a.*b\n```\n\n----------------------------------------\n\nTITLE: Sign Place List Commands in Neovim\nDESCRIPTION: Commands for listing placed signs in files and buffers with various group specifications\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_5\n\nLANGUAGE: vimdoc\nCODE:\n```\n:sign place file={fname}\n:sign place group={group} file={fname}\n:sign place group=* file={fname}\n:sign place buffer={nr}\n:sign place group={group} buffer={nr}\n:sign place group=* buffer={nr}\n:sign place\n:sign place group={group}\n:sign place group=*\n```\n\n----------------------------------------\n\nTITLE: Search and Select Next Match in Visual Mode in Neovim\nDESCRIPTION: This command searches forward for the last used search pattern and starts Visual mode to select the match. If the cursor is already on a match, it selects that match. If an operator is pending, the operator is applied to the match.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n\"gn\"\n```\n\n----------------------------------------\n\nTITLE: Equivalent While Loop for List Iteration in Vim\nDESCRIPTION: Shows the equivalent while loop implementation of iterating through a list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\n:let index = 0\n:while index < len(mylist)\n:   let item = mylist[index]\n:   :call Doit(item)\n:   let index = index + 1\n:endwhile\n```\n\n----------------------------------------\n\nTITLE: Nested Autocommand Example\nDESCRIPTION: Demonstrates how to use nested autocommands with the ++nested flag to allow autocommand nesting for specific file operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_31\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd FileChangedShell *.c ++nested e!\n```\n\n----------------------------------------\n\nTITLE: Parsing Vimscript Expression in Neovim\nDESCRIPTION: Parses a Vimscript expression with 'nvim_parse_expression', accommodating multiple flags influencing parsing behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_39\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_parse_expression\\(\\{expr\\}, \\{flags\\}, \\{highlight\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Expression Mapping with getchar() in Neovim\nDESCRIPTION: This snippet demonstrates how to use `getchar()` within an expression mapping to consume typeahead and dynamically determine the mapping's behavior based on the next character entered.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n  inoremap <expr> <C-L> nr2char(getchar())\n  inoremap <expr> <C-L>x \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Using foreach() Function in Vim Script\nDESCRIPTION: Demonstrates the foreach() function which iterates over each item in a List, String, Blob, or Dictionary and executes a command for each item. The example shows using v:val to access the current item value.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_77\n\nLANGUAGE: vim\nCODE:\n```\ncall foreach(mylist, 'let used[v:val] = v:true')\n```\n\n----------------------------------------\n\nTITLE: Customizing Quickfix Window Display with quickfixtextfunc in Vim\nDESCRIPTION: Example of using the 'quickfixtextfunc' option to customize how entries are displayed in the quickfix window, specifically showing a simplified file path for a list of old files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_69\n\nLANGUAGE: vim\nCODE:\n```\n\" create a quickfix list from v:oldfiles\ncall setqflist([], ' ', {'lines' : v:oldfiles, 'efm' : '%f',\n\t\t\t\t\t\\ 'quickfixtextfunc' : 'QfOldFiles'})\nfunc QfOldFiles(info)\n\t\" get information about a range of quickfix entries\n\tlet items = getqflist({'id' : a:info.id, 'items' : 1}).items\n\tlet l = []\n\tfor idx in range(a:info.start_idx - 1, a:info.end_idx - 1)\n\t    \" use the simplified file name\n\t  call add(l, fnamemodify(bufname(items[idx].bufnr), ':p:.'))\n\tendfor\n\treturn l\nendfunc\n```\n\n----------------------------------------\n\nTITLE: Basic Delete Operations in Neovim\nDESCRIPTION: Demonstrates using the delete operator 'd' with motion commands like 'w' to delete words and text segments. Shows how the motion determines whether the target character is included.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_04.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\nTo err is human. To really foul up you need a computer.\nd4w\nTo err is human. you need a computer.\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraph Folds with Blank Line Separators in Vim\nDESCRIPTION: A fold expression that creates folds for paragraphs separated by blank lines. This method detects when a non-blank line follows a blank line to identify the start of a paragraph fold.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set foldexpr=getline(v:lnum)=~'^\\s*$'&&getline(v:lnum+1)=~'\\S'?'<1':1\n```\n\n----------------------------------------\n\nTITLE: Embedding AWK Syntax Highlighting in Shell Scripts\nDESCRIPTION: A script to enable AWK syntax highlighting within shell scripts. This allows AWK code in single quotes following the 'awk' command to be highlighted properly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_127\n\nLANGUAGE: vim\nCODE:\n```\n\" AWK Embedding:\n\" ==============\n\" Shamelessly ripped from aspperl.vim by Aaron Hope.\nif exists(\"b:current_syntax\")\n  unlet b:current_syntax\nendif\nsyn include @AWKScript syntax/awk.vim\nsyn region AWKScriptCode matchgroup=AWKCommand start=+[=\\\\]\\@<!'+ skip=+\\\\'+ end=+'+ contains=@AWKScript contained\nsyn region AWKScriptEmbedded matchgroup=AWKCommand start=+\\<awk\\>+ skip=+\\\\$+ end=+[=\\\\]\\@<!'+me=e-1 contains=@shIdList,@shExprList2 nextgroup=AWKScriptCode\nsyn cluster shCommandSubList add=AWKScriptEmbedded\nhi def link AWKCommand Type\n```\n\n----------------------------------------\n\nTITLE: Conditional Packaging Setup in CMake\nDESCRIPTION: Conditionally includes the packaging configuration if this is the top-level CMake project, which helps with generating installation packages.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})\n  add_subdirectory(cmake.packaging)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking if a Path is Absolute in Vim\nDESCRIPTION: Shows how to use the isabsolutepath() function to determine if a path is absolute on both Unix and Windows systems. The function returns 1 for absolute paths and 0 for relative paths.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_141\n\nLANGUAGE: vim\nCODE:\n```\necho isabsolutepath('/usr/share/')    \" 1\necho isabsolutepath('./foobar')        \" 0\necho isabsolutepath('C:\\Windows')    \" 1\necho isabsolutepath('foobar')        \" 0\necho isabsolutepath('\\\\remote\\file')    \" 1\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionaries with Literal Syntax in Vim\nDESCRIPTION: Shows the #{} syntax for creating dictionaries without requiring quotes around keys.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_43\n\nLANGUAGE: vim\nCODE:\n```\n:let mydict = #{zero: 0, one_key: 1, two-key: 2, 333: 3}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH and SCP for Windows with Netrw in VimL\nDESCRIPTION: This snippet demonstrates how to configure Netrw to use plink, pscp, and psftp for SSH and SCP operations on Windows. It sets up the list command and optionally specifies paths for sftp and scp executables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_52\n\nLANGUAGE: VimL\nCODE:\n```\n\" list files, it's the key setting, if you haven't set,\n\" you will get a blank buffer\nlet g:netrw_list_cmd = \"plink HOSTNAME ls -Fa\"\n\" if you haven't add putty directory in system path, you should\n\" specify scp/sftp command.  For examples:\n\"let g:netrw_sftp_cmd = \"d:\\\\dev\\\\putty\\\\PSFTP.exe\"\n\"let g:netrw_scp_cmd = \"d:\\\\dev\\\\putty\\\\PSCP.exe\"\n```\n\n----------------------------------------\n\nTITLE: Complex Exception Handling with Function Calls\nDESCRIPTION: Demonstrates how exceptions affect function evaluation in complex expressions with multiple function calls.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_121\n\nLANGUAGE: vim\nCODE:\n```\n:function! Foo(arg)\n:  try\n:    throw a:arg\n:  catch /foo/\n:  endtry\n:  return 1\n:endfunction\n:\n:function! Bar()\n:  echo \"in Bar\"\n:  return 4710\n:endfunction\n:\n:throw Foo(\"arrgh\") + Bar()\n```\n\n----------------------------------------\n\nTITLE: Implementing File Operations in Neovim with Lua\nDESCRIPTION: This snippet demonstrates the use of 'vim.fs.rm()' to delete files and directories, allowing for efficient file management in user scripts and configurations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nvim.fs.rm('path/to/file')\n```\n\n----------------------------------------\n\nTITLE: Disabling Recommended Rust Style\nDESCRIPTION: Disables the recommended Rust styling conventions (4-space indentation and 99-character text width) that are enabled by default.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_recommended_style = 0\n```\n\n----------------------------------------\n\nTITLE: Listing Syntax Items in Vim\nDESCRIPTION: These commands demonstrate how to list syntax items in Vim. They show how to list all syntax items, items for a specific group, and items in a cluster.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_182\n\nLANGUAGE: viml\nCODE:\n```\n:sy[ntax] [list]\n\n:sy[ntax] list {group-name}\n\n:sy[ntax] list @{cluster-name}\n```\n\n----------------------------------------\n\nTITLE: Using Vertical Split with File Example in Vim\nDESCRIPTION: This example demonstrates how to use command modifiers to create a vertically split window that occupies the full height of the Vim interface, opening the 'tags' file on the far left.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:vertical topleft split tags\n```\n\n----------------------------------------\n\nTITLE: Repeating Global Command with Pattern Matching in Vim\nDESCRIPTION: Demonstrates how to use the global command to find lines matching a pattern and execute a command on those lines. In this example, it deletes lines starting with 'Obsolete'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:g/^Obsolete/d _\n```\n\n----------------------------------------\n\nTITLE: Removing Signs with sign_unplace in Neovim\nDESCRIPTION: Demonstrates various ways to remove signs from buffers using the sign_unplace function in Neovim. Shows examples of removing signs by group, buffer, or ID.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_243\n\nLANGUAGE: vim\nCODE:\n```\n\" Remove all the signs in group 'g2' from buffer 10\ncall sign_unplace('g2', {'buffer' : 10})\n\n\" Remove sign 30 in group 'g3' from all the buffers\ncall sign_unplace('g3', {'id' : 30})\n\n\" Remove all the signs placed in buffer 5\ncall sign_unplace('*', {'buffer' : 5})\n\n\" Remove the signs in group 'g4' from all the buffers\ncall sign_unplace('g4')\n\n\" Remove sign 40 from all the buffers\ncall sign_unplace('*', {'id' : 40})\n\n\" Remove all the placed signs from all the buffers\ncall sign_unplace('*')\n```\n\n----------------------------------------\n\nTITLE: Vim Jumplist Example State\nDESCRIPTION: Shows the state of a jumplist after three jump commands, displaying the jump number, line number, column number, and file/text information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\njump line  col file/text\n  3     1    0 some text\n  2    70    0 another line\n  1  1154   23 end.\n >\n```\n\n----------------------------------------\n\nTITLE: Setting Line Continuation Indicators\nDESCRIPTION: Configures listchars to show indicators when text extends beyond the visible area or precedes the visible area when wrap is disabled, using '>' and '<' characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_46\n\nLANGUAGE: viml\nCODE:\n```\nset lcs=extends:>,precedes:<\n```\n\n----------------------------------------\n\nTITLE: Testing for Buffer-local Autocommands in Vim\nDESCRIPTION: Examples showing how to check for the existence of buffer-local autocommands using the exists() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_24\n\nLANGUAGE: viml\nCODE:\n```\n:if exists(\"#CursorHold#<buffer=12>\") | ... | endif\n:if exists(\"#CursorHold#<buffer>\") | ... | endif    \" for current buffer\n```\n\n----------------------------------------\n\nTITLE: Ubuntu/Debian Build Prerequisites\nDESCRIPTION: Installs the necessary packages on Ubuntu/Debian systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo apt-get install ninja-build gettext cmake curl build-essential\"\n```\n\n----------------------------------------\n\nTITLE: Removing Placed Signs in Vim Buffers\nDESCRIPTION: Examples of using sign_unplace() to remove placed signs from buffers. This function can remove signs based on group, buffer, and sign identifier.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_242\n\nLANGUAGE: vim\nCODE:\n```\n\" Remove sign 10 from buffer a.vim\ncall sign_unplace('', {'buffer' : \"a.vim\", 'id' : 10})\n\n\" Remove sign 20 in group 'g1' from buffer 3\ncall sign_unplace('g1', {'buffer' : 3, 'id' : 20})\n```\n\n----------------------------------------\n\nTITLE: Joining Threads in Lua with Libuv\nDESCRIPTION: Waits for the specified thread to finish executing its entry function. Can be used as a method on a thread object.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_65\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_join({thread})\n```\n\n----------------------------------------\n\nTITLE: Navigating to Error After Cursor Position\nDESCRIPTION: Command for going to the error after the current cursor position in the current buffer from the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:[count]caf[ter]\n```\n\n----------------------------------------\n\nTITLE: Interacting With Environment Variables and Options\nDESCRIPTION: Demonstrates accessing environment variables and options within VimL using the $ and & symbols respectively. It highlights how VimL can interact with and manipulate related data. No prerequisites aside from basic VimL syntax understanding.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_7\n\nLANGUAGE: VimL\nCODE:\n```\n:echo \"The value of 'tabstop' is\" &ts\n:echo \"Your home directory is\" $HOME\n```\n\n----------------------------------------\n\nTITLE: Fixing Encoding with QuickFixCmdPost in Vim\nDESCRIPTION: This Vim script defines a function `QfMakeConv` to convert the encoding of error messages in the quickfix list from `cp936` to `utf-8`. It then uses the `QuickfixCmdPost` autocommand to automatically call this function after each make command, ensuring correct encoding of error messages.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\nfunction QfMakeConv()\n   let qflist = getqflist()\n   for i in qflist\n      let i.text = iconv(i.text, \"cp936\", \"utf-8\")\n   endfor\n   call setqflist(qflist)\nendfunction\n\nau QuickfixCmdPost make call QfMakeConv()\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim via Scoop on Windows\nDESCRIPTION: Commands to install Neovim using the Scoop package manager on Windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nscoop bucket add main\nscoop install neovim\n```\n\n----------------------------------------\n\nTITLE: Moving forward to the start of the next function (Vim)\nDESCRIPTION: This snippet shows how to move forward to the start of the next function using the `]]` command. The end of a function is defined by a `}` in the first column.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n\"]]\"\n```\n\n----------------------------------------\n\nTITLE: Setting window height\nDESCRIPTION: Sets the height of the current window to a specified number of lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n\t{height}CTRL-W _\n```\n\n----------------------------------------\n\nTITLE: Getting Context from Stack - Lua\nDESCRIPTION: The ctxget function retrieves a Dictionary representing the context at the specified index from the top of the context stack. If no index is provided, it defaults to 0, which refers to the top context. This function is useful for accessing the state of the editor at different points.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nctxget([{index}])                                                     *ctxget()*\n\t\tReturns a |Dictionary| representing the |context| at {index}\n\t\tfrom the top of the |context-stack| (see |context-dict|).\n\t\tIf {index} is not given, it is assumed to be 0 (i.e.: top).\n\n\t\tParameters: ~\n\t\t  • {index} (`integer?`)\n\n\t\tReturn: ~\n\t\t  (`table`)\n```\n\n----------------------------------------\n\nTITLE: Evaluating String with Msgpack in Vim\nDESCRIPTION: Transforms a string produced by msgpack#string() into a value suitable for msgpackdump(). It manages special values and maintains key order when evaluating maps.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#eval({string}, {dict})\n```\n\n----------------------------------------\n\nTITLE: Playpen Integration Command (Vim)\nDESCRIPTION: The :RustPlay command sends the current selection (or the entire buffer if no selection exists) to the Rust playpen. It depends on the web-api.vim plugin and uses global variables like g:rust_playpen_url, g:rust_shortener_url, and g:rust_clip_command to configure the playpen URL, URL shortener, and clipboard command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\n:RustPlay                                                          *:RustPlay*\n\t\tThis command will only work if you have web-api.vim installed\n\t\t(available at https://github.com/mattn/webapi-vim).  It sends the\n\t\tcurrent selection, or if nothing is selected, the entirety of the\n\t\tcurrent buffer to the Rust playpen, and emits a message with the\n\t\tshortened URL to the playpen.\n\n\t\t|g:rust_playpen_url| is the base URL to the playpen, by default\n\t\t\"https://play.rust-lang.org/\".\n\n\t\t|g:rust_shortener_url| is the base url for the shorterner, by\n\t\tdefault \"https://is.gd/\"\n\n\t\t|g:rust_clip_command| is the command to run to copy the\n\t\tplaypen url to the clipboard of your system.\n```\n\n----------------------------------------\n\nTITLE: Force File Encoding When Writing File in Vim\nDESCRIPTION: Example of forcing UTF-8 encoding when saving a Russian text file, effectively converting the file encoding.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:write ++enc=utf-8 russian.txt\n```\n\n----------------------------------------\n\nTITLE: Using getscriptinfo() to Retrieve Vim Script Information\nDESCRIPTION: Example of using getscriptinfo() to retrieve information about loaded Vim scripts. The first example searches for scripts matching a name pattern, while the second retrieves variables from a specific script using its script ID.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_108\n\nLANGUAGE: vim\nCODE:\n```\necho getscriptinfo({'name': 'myscript'})\necho getscriptinfo({'sid': 15})[0].variables\n```\n\n----------------------------------------\n\nTITLE: Creating a fold with the zf operator\nDESCRIPTION: Creates a fold around a paragraph using the zf operator with the ap text object selection. This command is used in Normal mode to manually create a fold.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\nzfap\n```\n\n----------------------------------------\n\nTITLE: Adding Items to History in Vim\nDESCRIPTION: Demonstrates how to add items to the input history in Vim using histadd(). This example adds the current date to the input history before prompting the user for a date input.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_125\n\nLANGUAGE: vim\nCODE:\n```\ncall histadd(\"input\", strftime(\"%Y %b %d\"))\nlet date=input(\"Enter date: \")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tab with Split\nDESCRIPTION: Demonstrates how to create a new tab page with a split view of the current buffer. This creates a new tab with the same file open.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n:tab split\n```\n\n----------------------------------------\n\nTITLE: Checking for Null Values in Vim\nDESCRIPTION: Example of checking for null values in Vim using the v:null special variable. This is preferred over checking the type for null.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_279\n\nLANGUAGE: vim\nCODE:\n```\nif myvar is v:null | endif\n```\n\n----------------------------------------\n\nTITLE: Managing Error Lists in Vim\nDESCRIPTION: Commands to navigate between different error lists from previous compilation attempts, allowing review of warnings and errors from earlier builds.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:colder\n```\n\nLANGUAGE: vim\nCODE:\n```\n:cnewer\n```\n\n----------------------------------------\n\nTITLE: Vim Highlight Command Example (Language Specific)\nDESCRIPTION: This snippet demonstrates how to specify language-specific highlight groups in Vim. It shows how to set different foreground colors for comments in C and Lua, and how to link a documentation comment in Java to the String highlight group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nhi @comment.c guifg=Blue\\nhi @comment.lua guifg=DarkBlue\\nhi link @comment.documentation.java String\n```\n\n----------------------------------------\n\nTITLE: Demonstrating menu_get() in Vim\nDESCRIPTION: These examples show how to use the menu_get() function to retrieve information about menus, including retrieving all menus and menus with a specific path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_175\n\nLANGUAGE: vim\nCODE:\n```\necho menu_get('File','')\n```\n\nLANGUAGE: vim\nCODE:\n```\necho menu_get('')\n```\n\nLANGUAGE: vim\nCODE:\n```\nnnoremenu &Test.Test inormal\ninoremenu Test.Test insert\nvnoremenu Test.Test x\necho menu_get(\"\")\n```\n\n----------------------------------------\n\nTITLE: Test Screen Visualization Setup in Lua\nDESCRIPTION: Code to setup screen visualization for debugging functional tests by attaching a screen object that can take snapshots.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal Screen = require('test.functional.ui.screen')\nlocal screen = Screen.new()\nscreen:attach()\n```\n\n----------------------------------------\n\nTITLE: Insert Mode Navigation (Vim)\nDESCRIPTION: Navigation and control commands available while in Insert mode, including cursor movement and mode switching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n<Esc>          end Insert mode, back to Normal mode\nCTRL-C          like <Esc>, but do not use abbreviation\nCTRL-O {cmd}    execute {cmd} and return to Insert mode\ncursor keys     move cursor left/right/up/down\nshift-left/right one word left/right\nshift-up/down   one screenful backward/forward\n<End>           cursor after last character in line\n<Home>          cursor to first character in line\n```\n\n----------------------------------------\n\nTITLE: Using Vim Modelines (First Form)\nDESCRIPTION: Examples of the first form of modelines that can be used to set Vim options within a file. Modelines are special comments that allow configuring editor options on a per-file basis.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\nvi:noai:sw=3 ts=6\n```\n\nLANGUAGE: viml\nCODE:\n```\nvim: tw=77\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Integer in Vim\nDESCRIPTION: Demonstrates the use of float2nr() function to convert floating-point numbers to integers by truncating the decimal part. Several examples with different input values are shown.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_72\n\nLANGUAGE: vim\nCODE:\n```\necho float2nr(3.95)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho float2nr(-23.45)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho float2nr(1.0e100)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho float2nr(-1.0e150)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho float2nr(1.0e-100)\n```\n\n----------------------------------------\n\nTITLE: Vim Heredoc Multiple Examples\nDESCRIPTION: Multiple examples of heredoc usage including plain text, trimmed data, and evaluated code\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_99\n\nLANGUAGE: vim\nCODE:\n```\nlet var1 =<< END\nSample text 1\n    Sample text 2\nSample text 3\nEND\n\nlet data =<< trim DATA\n\t\t1 2 3 4\n\t\t5 6 7 8\nDATA\n\nlet code =<< trim eval CODE\n   let v = {10 + 20}\n   let h = \"{$HOME}\"\n   let s = \"{Str1()} abc {Str2()}\"\n   let n = {MyFunc(3, 4)}\nCODE\n```\n\n----------------------------------------\n\nTITLE: Error Message Viewing Commands\nDESCRIPTION: Commands for viewing the last error message and message history in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:echo v:errmsg\n:messages\n```\n\n----------------------------------------\n\nTITLE: Triggering Autocommands Manually\nDESCRIPTION: This snippet is used to manually trigger an autocommand by simulating a BufReadPost event for files ending in '.new'. It uses the ':execute' command to dynamically construct and run the resultant command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd BufReadPost *.new  execute \"doautocmd BufReadPost \" . expand(\"<afile>:r\")\n```\n\n----------------------------------------\n\nTITLE: Running Neovim with Development Lua Modules\nDESCRIPTION: Command to run Neovim with development Lua modules for testing runtime changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nVIMRUNTIME=./runtime ./build/bin/nvim --luamod-dev\n```\n\n----------------------------------------\n\nTITLE: Simplifying File Paths with simplify in Neovim\nDESCRIPTION: Demonstrates the use of the simplify function to reduce file paths to their simplest form without changing their meaning. Does not resolve shortcuts or symbolic links.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_245\n\nLANGUAGE: vim\nCODE:\n```\nsimplify(\"./dir/.././/file/\") == \"./file/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Syntax Sync from Start\nDESCRIPTION: Example showing how to configure syntax to always parse from the start of file\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_175\n\nLANGUAGE: vim\nCODE:\n```\n:syntax sync fromstart\n```\n\n----------------------------------------\n\nTITLE: Creating a Terminal Highlighter Command in Lua\nDESCRIPTION: Implements a custom 'TermHl' command that converts and displays ANSI terminal codes with proper highlighting. This allows using Nvim as a terminal scrollback pager for reviewing and colorizing terminal output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_user_command('TermHl', function()\n  local b = vim.api.nvim_create_buf(false, true)\n  local chan = vim.api.nvim_open_term(b, {})\n  vim.api.nvim_chan_send(chan, table.concat(vim.api.nvim_buf_get_lines(0, 0, -1, false), '\\n'))\n  vim.api.nvim_win_set_buf(0, b)\nend, { desc = 'Highlights ANSI termcodes in curbuf' })\n```\n\n----------------------------------------\n\nTITLE: Checking Window Height in Vim\nDESCRIPTION: This example shows how to use the winheight() function to get the height of the current window. It's helpful for scripts that need to adjust layout based on available space.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_286\n\nLANGUAGE: vim\nCODE:\n```\necho \"Current window has \" .. winheight(0) .. \" lines.\"\n```\n\n----------------------------------------\n\nTITLE: Digraph List Example in Vim\nDESCRIPTION: Shows how to retrieve lists of digraphs, both user-defined and all available digraphs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_53\n\nLANGUAGE: vim\nCODE:\n```\n\" Get user-defined digraphs\necho digraph_getlist()\n\n\" Get all the digraphs, including default digraphs\necho digraph_getlist(1)\n```\n\n----------------------------------------\n\nTITLE: Binary File Copy in Vim\nDESCRIPTION: Example of copying a file byte by byte using readfile() and writefile() with binary mode flag.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_295\n\nLANGUAGE: vim\nCODE:\n```\nlet fl = readfile(\"foo\", \"b\")\ncall writefile(fl, \"foocopy\", \"b\")\n```\n\n----------------------------------------\n\nTITLE: Using strptime() in Vim Script\nDESCRIPTION: Demonstrates the usage of strptime() function to parse date and time strings according to a specified format.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_261\n\nLANGUAGE: vim\nCODE:\n```\necho strptime(\"%Y %b %d %X\", \"1997 Apr 27 11:49:23\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho strftime(\"%c\", strptime(\"%y%m%d %T\", \"970427 11:53:55\"))\n```\n\nLANGUAGE: vim\nCODE:\n```\necho strftime(\"%c\", strptime(\"%Y%m%d%H%M%S\", \"19970427115355\") + 3600)\n```\n\n----------------------------------------\n\nTITLE: Getting Source Content of LanguageTree (Lua)\nDESCRIPTION: Returns the source content of the language tree, which can be either a buffer number or a string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_39\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:source()\n```\n\n----------------------------------------\n\nTITLE: Using Execute Command with Buffer Navigation\nDESCRIPTION: Demonstrates using the :execute command to dynamically select a buffer using a variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_111\n\nLANGUAGE: vim\nCODE:\n```\n:execute \"buffer\" nextbuf\n```\n\n----------------------------------------\n\nTITLE: Defining and Placing a Sign in Vim\nDESCRIPTION: Example demonstrating how to define a sign named 'piet' with '>>' text and Search highlighting, then placing it on line 23 of the current file\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:sign define piet text=>> texthl=Search\n:exe \":sign place 2 line=23 name=piet file=\" .. expand(\"%:p\")\n```\n\n----------------------------------------\n\nTITLE: Virtual Column Matching\nDESCRIPTION: Includes match patterns specific to virtual columns like '\\%23v' and their relational counterparts '\\%<23v' and '\\%>23v', taking tab stops and window dimensions into account.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_22\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\%23v\"\n\"\\\\%<23v\"\n\"\\\\%>23v\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Job in a Terminal Buffer in Vim\nDESCRIPTION: Shows how to use jobstart() with the term option to spawn a process in a terminal that's connected to the current buffer, providing an interactive terminal interface.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_147\n\nLANGUAGE: vim\nCODE:\n```\ncall jobstart(['nvim', '-h'], {'term':v:true})\n```\n\n----------------------------------------\n\nTITLE: Setting Keywordprg Option in Vim\nDESCRIPTION: Examples of setting the keywordprg option which defines the program used for the K command. Shows how to set it to man pages or Vim's internal help system.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\nset keywordprg=man\\ -s\nset keywordprg=:Man\n```\n\n----------------------------------------\n\nTITLE: Setting Shell with Spaces in Path in Vim\nDESCRIPTION: Example showing how to set the 'shell' option when the shell path contains spaces. This demonstrates the need for escaping quotes and spaces in option values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_60\n\nLANGUAGE: vim\nCODE:\n```\nset shell=\\\"c:\\program\\ files\\unix\\sh.exe\\\"\\  -f\n```\n\n----------------------------------------\n\nTITLE: Getting Effective Shiftwidth in Vim\nDESCRIPTION: Example of creating a function to get the effective shiftwidth value in Vim, ensuring backwards compatibility with indent plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_234\n\nLANGUAGE: vim\nCODE:\n```\nif exists('*shiftwidth')\n  func s:sw()\n    return shiftwidth()\n  endfunc\nelse\n  func s:sw()\n    return &sw\n  endfunc\nendif\n```\n\n----------------------------------------\n\nTITLE: Getting Network Interface Information with uv.interface_addresses()\nDESCRIPTION: Returns a table containing information about all network interfaces on the system, including IP addresses, address family, netmask, internal flag, and MAC address.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_85\n\nLANGUAGE: lua\nCODE:\n```\nuv.interface_addresses()\n```\n\n----------------------------------------\n\nTITLE: Jumping to the start of the outer code block (Vim)\nDESCRIPTION: This snippet shows how to move to the start of the outer code block using the `[[` command, assuming that the `{` and `}` are in the first column.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n\"[[\"\n```\n\n----------------------------------------\n\nTITLE: Getting Resource Usage Information with LibUV in Lua\nDESCRIPTION: Functions for retrieving detailed resource usage statistics for the current process or thread, including CPU time, memory usage, and context switch information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_78\n\nLANGUAGE: lua\nCODE:\n```\nuv.getrusage()                                                  *uv.getrusage()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.getrusage_thread()                                    *uv.getrusage_thread()*\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Indentation Styles\nDESCRIPTION: This snippet details the configuration of indentation settings for HTML tags within Vim. It allows setting indent levels for script and style blocks as well as for HTML attributes, enhancing readability and maintainability of HTML code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_5\n\nLANGUAGE: Vim\nCODE:\n```\n:let g:html_indent_script1 = \"inc\"\n:let g:html_indent_style1 = \"inc\"\n:let g:html_indent_attribute = 1\n```\n\n----------------------------------------\n\nTITLE: Closing the preview window (Vim)\nDESCRIPTION: This snippet demonstrates how to close the preview window in Vim using the `:pclose` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\":pclose\"\n```\n\n----------------------------------------\n\nTITLE: List Concatenation in Vim\nDESCRIPTION: Demonstrates how to add items to a list in-place using the += operator for list concatenation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_31\n\nLANGUAGE: vim\nCODE:\n```\n:let listA = [1, 2]\n:let listA += [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Setting Keyword Options in Neovim (Vim)\nDESCRIPTION: This snippet shows how to configure the 'iskeyword' option in Neovim, allowing specific characters to be part of words. It illustrates adding a dash and removing an underscore to the keyword list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:set iskeyword\n<\tiskeyword=@,48-57,_,192-255 ~\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set iskeyword+=-\n:set iskeyword\n<\tiskeyword=@,48-57,_,192-255,- ~\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set iskeyword-=_\n:set iskeyword\n<\tiskeyword=@,48-57,192-255,- ~\n```\n\n----------------------------------------\n\nTITLE: Enabling Mouse Support in Normal and Visual Modes in Neovim\nDESCRIPTION: Example of configuring the 'mouse' option to enable mouse support specifically for Normal mode and Visual mode in Neovim. This allows using the mouse for cursor positioning and text selection in these modes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_53\n\nLANGUAGE: vim\nCODE:\n```\nset mouse=nv\n```\n\n----------------------------------------\n\nTITLE: Mouse Position Handling Example - Vim\nDESCRIPTION: Shows how to handle mouse click events using getchar() and position the cursor accordingly using mouse position variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_84\n\nLANGUAGE: vim\nCODE:\n```\nlet c = getchar()\nif c == \"\\<LeftMouse>\" && v:mouse_win > 0\n  exe v:mouse_win .. \"wincmd w\"\n  exe v:mouse_lnum\n  exe \"normal \" .. v:mouse_col .. \"|\"\nendif\n```\n\n----------------------------------------\n\nTITLE: Basic Python Print Command in Vim\nDESCRIPTION: Simple example showing how to execute a Python print statement from within Vim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:python print(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Summing List Numbers in Vim\nDESCRIPTION: Shows a technique to sum all numbers in a list by joining them with '+' and evaluating the expression.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_41\n\nLANGUAGE: vim\nCODE:\n```\n:exe 'let sum = ' .. join(nrlist, '+')\n```\n\n----------------------------------------\n\nTITLE: Writing Files with Append Mode in Vim\nDESCRIPTION: Demonstrates using writefile() function with append mode flag to add lines to a log file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_293\n\nLANGUAGE: vim\nCODE:\n```\ncall writefile([\"foo\"], \"event.log\", \"a\")\ncall writefile([\"bar\"], \"event.log\", \"a\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntastic with Cargo Check (Vim)\nDESCRIPTION: These global (g:) and buffer-local (b:) variables configure the Syntastic plugin to include examples, tests, and benches when running cargo check. Setting these options to 1 ensures that Syntastic lints code in the specified directories.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n\t                                                 *g:rust_cargo_check_examples*\n                                                 *b:rust_cargo_check_examples*\ng:rust_cargo_check_examples ~\n\tWhen set to 1, the `--examples` option will be passed to cargo when\n\tSyntastic executes it, to prevent the exclusion of examples from\n\tlinting. The examples are normally under the `examples/` directory of\n\tthe crate.\n\tThe default is 0.\n\n                                                    *g:rust_cargo_check_tests*\n                                                    *b:rust_cargo_check_tests*\ng:rust_cargo_check_tests ~\n\tWhen set to 1, the `--tests` option will be passed to cargo when\n\tSyntastic executes it, to prevent the exclusion of tests from linting.\n\tThe tests are normally under the `tests/` directory of the crate.\n\tThe default is 0.\n\n                                                  *g:rust_cargo_check_benches*\n                                                  *b:rust_cargo_check_benches*\ng:rust_cargo_check_benches ~\n\tWhen set to 1, the `--benches` option will be passed to cargo when\n\tSyntastic executes it.  The benches are normally under the `benches/`\n\tdirectory of the crate.\n\tThe default is 0.\n```\n\n----------------------------------------\n\nTITLE: Converting File Format in Vim\nDESCRIPTION: This command sets the 'fileformat' option to 'unix', converting the file to Unix format. Followed by the ':write' command, the file will be saved in the specified format. This provides a way to convert between file formats (e.g., from DOS to Unix) directly within Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n\t:set fileformat=unix\n\t:write\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Existence with exists()\nDESCRIPTION: Examples demonstrating how to check for existence of various Vim entities like variables, functions, commands and autocommands using the exists() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_59\n\nLANGUAGE: vim\nCODE:\n```\necho exists(\"&mouse\")\necho exists(\"$HOSTNAME\")\necho exists(\"*strftime\")\necho exists(\"*s:MyFunc\")\necho exists(\"*MyFunc\")\necho exists(\"*v:lua.Func\")\necho exists(\"bufcount\")\necho exists(\":Make\")\necho exists(\"#CursorHold\")\necho exists(\"#BufReadPre#*.gz\")\necho exists(\"#filetypeindent\")\necho exists(\"#filetypeindent#FileType\")\necho exists(\"#filetypeindent#FileType#*\")\necho exists(\"##ColorScheme\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Location List in Vim\nDESCRIPTION: The getloclist() function returns the location list for a specified window. It can take an optional dictionary argument to filter the returned information. Similar to getqflist() but for location lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_97\n\nLANGUAGE: vim\nCODE:\n```\necho getloclist(3, {'all': 0})\necho getloclist(5, {'filewinid': 0})\n```\n\n----------------------------------------\n\nTITLE: Jumping to the start of the current code block (Vim)\nDESCRIPTION: This snippet shows how to move to the start of the current block using the `[{` command. It skips over pairs of {} at the same level.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n\"[{\"\n```\n\n----------------------------------------\n\nTITLE: Additional C Syntax Highlighting using cCommentGroup\nDESCRIPTION: Defines additional syntax highlighting for C comments by leveraging custom clusters, enabling users to add keywords dynamically within comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_12\n\nLANGUAGE: VimL\nCODE:\n```\n:au Syntax c call MyCadd()\n:function MyCadd()\n:  syn keyword cMyItem contained Ni\n:  syn cluster cCommentGroup add=cMyItem\n:  hi link cMyItem Title\n:endfun\n```\n\n----------------------------------------\n\nTITLE: Setting formatoptions in Neovim\nDESCRIPTION: Configures the 'formatoptions' option to control automatic text formatting behavior. The default value is 'tcqj'. Users can modify this option using the += and -= features of :set to add or remove flags.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_21\n\nLANGUAGE: viml\nCODE:\n```\nset formatoptions=tcqj\n```\n\n----------------------------------------\n\nTITLE: Deleting History Items in Vim\nDESCRIPTION: Shows various ways to delete history items using histdel(). Examples include clearing the entire expression history, removing items matching a pattern, and deleting the most recent search history entry.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_126\n\nLANGUAGE: vim\nCODE:\n```\ncall histdel(\"expr\")\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall histdel(\"/\", '^\\*')\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall histdel(\"search\", histnr(\"search\"))\ncall histdel(\"search\", -1)\ncall histdel(\"search\", '^' .. histget(\"search\", -1) .. '$')\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall histdel(\"search\", -1)\nlet @/ = histget(\"search\", -1)\n```\n\n----------------------------------------\n\nTITLE: Debugging Program Process - Lua\nDESCRIPTION: The debugbreak function interrupts a running program identified by its process id (pid). When called, it sends a SIGTRAP to the specified process, effectively allowing control during debugging sessions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_44\n\nLANGUAGE: lua\nCODE:\n```\ndebugbreak({pid})                                                 *debugbreak()*\n\t\tSpecifically used to interrupt a program being debugged.  It\n\t\twill cause process {pid} to get a SIGTRAP.  Behavior for other\n\t\tprocesses is undefined. See |terminal-debug|.\n\t\t(Sends a SIGINT to a process {pid} other than MS-Windows)\n\n\t\tReturns |TRUE| if successfully interrupted the program.\n\t\tOtherwise returns |FALSE|.\n\n\t\tParameters: ~\n\t\t  • {pid} (`integer`)\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Blob Operations in Vim Script\nDESCRIPTION: Examples of blob slicing and copying operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_77\n\nLANGUAGE: vim\nCODE:\n```\n:let b = 0zDEADBEEF\\n:let bs = b[1:2]\\n:let bs = b[]\n```\n\n----------------------------------------\n\nTITLE: Custom Format Function Implementation\nDESCRIPTION: Implementation of a custom formatting function that removes trailing whitespace from selected text. Used with formatexpr option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nfunc! format#Format()\n  \" only reformat on explicit gq command\n  if mode() != 'n'\n    \" fall back to Vim's internal reformatting\n    return 1\n  endif\n  let lines = getline(v:lnum, v:lnum + v:count - 1)\n  call map(lines, {key, val -> substitute(val, '\\s\\+$', '', 'g')})\n  call setline('.', lines)\n\n  \" do not run internal formatter!\n  return 0\nendfunc\n```\n\n----------------------------------------\n\nTITLE: Copying text from one file to another in Vim\nDESCRIPTION: This snippet outlines how to copy text from one file to another within Vim. It demonstrates using visual mode ('v'), movement commands, and the 'y' (yank) command to copy text, and the 'p' command to paste it into another file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\t:edit thisfile\n\t/This\n\tvjjjj$y\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t:edit otherfile\n\t/There\n\tp\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Netrw Tree Squeeze Mapping in Vim\nDESCRIPTION: This snippet shows how to create a custom key mapping to squeeze (close) the current directory in Netrw's tree listing mode. It should be placed in the user's Netrw-specific ftplugin file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\nnmap <buffer> <silent> <nowait> YOURKEYCOMBO  <Plug>NetrwTreeSqueeze\n```\n\n----------------------------------------\n\nTITLE: Setting Line Continuation Pattern for Syntax Sync in Vim\nDESCRIPTION: This code shows how to set a line continuation pattern for syntax syncing in Vim. It uses the 'linecont' argument to specify a pattern that indicates line continuation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_179\n\nLANGUAGE: viml\nCODE:\n```\n:syntax sync linecont {pattern}\n```\n\n----------------------------------------\n\nTITLE: Counting Lines for Range Specification in Vim Script\nDESCRIPTION: Defines the use of numeric input to specify a range of lines from the current line downward, allowing efficient line-based command application. The range command starts from the current line extending to four lines below. Inputs include numeric line count commands, and outputs are the commands applied within the specified range.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_5\n\nLANGUAGE: Vim Script\nCODE:\n```\n\n  :.,.+4\n```\n\n----------------------------------------\n\nTITLE: Setting Wildchar Completion Key\nDESCRIPTION: Demonstrates different ways to set the wildchar key for command-line completion, including using numeric value, character, control key notation, and special key notation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_80\n\nLANGUAGE: vim\nCODE:\n```\n:set wc=27\n:set wc=X\n:set wc=^I\nset wc=<Tab>\n```\n\n----------------------------------------\n\nTITLE: Reading Stream Data with uv.read_start in Lua\nDESCRIPTION: Shows how to read data from an incoming stream using read_start method. The callback will be called repeatedly until there is no more data or read_stop is called. When EOF is reached, data will be nil.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nstream:read_start(function (err, chunk)\n  if err then\n    -- handle read error\n  elseif chunk then\n    -- handle data\n  else\n    -- handle disconnect\n  end\nend)\n```\n\n----------------------------------------\n\nTITLE: Converting Hex Dump Back to Binary using xxd\nDESCRIPTION: This command pipes the current buffer through 'xxd -r', converting the hexadecimal dump back into the original binary format. It's used after editing a file that was previously converted to a hex dump using ':%!xxd'.  Only changes made to the hex part are applied.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n\t:%!xxd -r\n```\n\n----------------------------------------\n\nTITLE: Executing Normal Mode Commands in Autocommand\nDESCRIPTION: The snippet demonstrates executing normal mode commands during an autocommand triggered by the BufReadPost event for '.log' files. It moves the cursor to the last line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd BufReadPost *.log normal G\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Script Execution\nDESCRIPTION: Example showing how to conditionally execute Python code based on Python support\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nif has('python')\n  python << EOF\n    print(\"python works\")\nEOF\nendif\n```\n\n----------------------------------------\n\nTITLE: Basic Vim Recovery Command\nDESCRIPTION: Command to start Vim in recovery mode for a specific file using the -r flag.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nvim -r help.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Line Numbers on Mode Change (Vim)\nDESCRIPTION: Demonstrates using the ModeChanged event to dynamically toggle relative line numbers based on the current mode, specifically when entering visual modes\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:au ModeChanged [vV\\x16]*:* let &l:rnu = mode() =~# '^[vV\\x16]'\n:au ModeChanged *:[vV\\x16]* let &l:rnu = mode() =~# '^[vV\\x16]'\n:au WinEnter,WinLeave * let &l:rnu = mode() =~# '^[vV\\x16]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective LaTeX Conceal Mode with VimL\nDESCRIPTION: Setting to control which character sets use conceal mode in LaTeX documents. The letters determine which types of characters will be concealed and replaced with utf-8 glyphs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_143\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_conceal= \"admgs\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tmux Clipboard in Neovim\nDESCRIPTION: Sets up a custom clipboard provider that integrates with tmux. It defines the commands for copying to and pasting from the tmux buffer, and enables caching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\nlet g:clipboard = {\n  \\   'name': 'myClipboard',\n  \\   'copy': {\n  \\      '+': ['tmux', 'load-buffer', '-'],\n  \\      '*': ['tmux', 'load-buffer', '-'],\n  \\    },\n  \\   'paste': {\n  \\      '+': ['tmux', 'save-buffer', '-'],\n  \\      '*': ['tmux', 'save-buffer', '-'],\n  \\   },\n  \\   'cache_enabled': 1,\n  \\ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Display in List Mode\nDESCRIPTION: Enables list mode and sets listchars to display tabs as spaces, which changes the cursor behavior to appear at the start of tab characters rather than at the end.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_41\n\nLANGUAGE: viml\nCODE:\n```\nset listchars=eol:\\x24\n```\n\n----------------------------------------\n\nTITLE: Emulating standard status line with ruler in Vim\nDESCRIPTION: Sets the statusline option to emulate the standard status line with the ruler set. It includes file name, flags, and position information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_67\n\nLANGUAGE: vim\nCODE:\n```\nset statusline=%<%f\\ %h%w%m%r%=%-14.(%l,%c%V%)\\ %P\n```\n\n----------------------------------------\n\nTITLE: LSP Protocol Constant Lookup\nDESCRIPTION: Shows how to lookup constants in the LSP protocol module\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.protocol.TextDocumentSyncKind.Full == 1\nvim.lsp.protocol.TextDocumentSyncKind[1] == \"Full\"\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment with Let Command in Vim\nDESCRIPTION: Examples of using the :let command in Vim to assign values to variables, including regular variables, list items, and ranges within lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_90\n\nLANGUAGE: viml\nCODE:\n```\n:let {var-name} = {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let {var-name}[{idx}] = {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let {var-name}[{idx1}:{idx2}] = {expr1}\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Neovim Expressions\nDESCRIPTION: Examples of using logical OR (||) and logical AND (&&) operators in Neovim. Shows how operators can be concatenated and demonstrates short-circuit evaluation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_69\n\nLANGUAGE: vim\nCODE:\n```\n&nu || &list && &shell == \"csh\"\n```\n\nLANGUAGE: vim\nCODE:\n```\n&nu || (&list && &shell == \"csh\")\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet a = 1\necho a || b\n```\n\nLANGUAGE: vim\nCODE:\n```\necho exists(\"b\") && b == \"yes\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Autocommands in a Group\nDESCRIPTION: This snippet demonstrates how to remove all autocommands within the 'cprograms' group. It uses the ':autocmd!' command which requires specifying the group name to clear.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd! cprograms\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Position in Vim\nDESCRIPTION: This command displays information about the current cursor position, including the byte position in the file.  It accounts for the 'fileformat' setting. This helps you navigate and identify specific locations within the file when working with binary data.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\tg CTRL-G\n```\n\n----------------------------------------\n\nTITLE: Defining Operator-Pending Mode Mapping in Vim\nDESCRIPTION: Creates an operator-pending mapping for 'F' that selects a function name. It uses CTRL-U to remove any automatically inserted range, then finds the first parenthesis and selects the word before it.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nonoremap <silent> F :<C-U>normal! 0f(hviw<CR>\n```\n\n----------------------------------------\n\nTITLE: Removing Dictionary Watcher - Lua\nDESCRIPTION: The dictwatcherdel function removes an existing watcher from a dictionary. It requires that all three parameters match those used when the watcher was added to ensure accurate removal.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_49\n\nLANGUAGE: lua\nCODE:\n```\ndictwatcherdel({dict}, {pattern}, {callback})                 *dictwatcherdel()*\n\t\tRemoves a watcher added  with |dictwatcheradd()|. All three\n\t\targuments must match the ones passed to |dictwatcheradd()| in\n\t\torder for the watcher to be successfully deleted.\n\n\t\tParameters: ~\n\t\t  • {dict} (`any`)\n\t\t  • {pattern} (`string`)\n\t\t  • {callback} (`function`)\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Custom Window Layouts in Vim\nDESCRIPTION: These commands demonstrate how to save a custom window layout as a session and later load it when starting Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:mksession ~/.config/nvim/mine.vim\n```\n\nLANGUAGE: vim\nCODE:\n```\nvim -S ~/.config/nvim/mine.vim\n```\n\n----------------------------------------\n\nTITLE: Example of Defining the eqnarray Math Zone in LaTeX with VimL\nDESCRIPTION: Concrete example of creating a new math zone for the eqnarray environment. The 'D' is a unique suffix, and '1' indicates it has a starred form (eqnarray*).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_141\n\nLANGUAGE: viml\nCODE:\n```\ncall TexNewMathZone(\"D\",\"eqnarray\",1)\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Indentation in Vim - Vim\nDESCRIPTION: Enables automatic indentation for new lines based on the previous line's indent using the 'autoindent' option. This simplifies editing structured text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:set autoindent\n```\n\n----------------------------------------\n\nTITLE: Nvim Stdin Handling Examples\nDESCRIPTION: Examples of how to pipe text into Nvim through stdin and handle different input modes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho text | nvim - file\necho text | nvim file\necho \"ifoo\" | nvim -s -\necho \"echo getpid()\" | nvim -e - -V1\necho foo | nvim -- -\n```\n\n----------------------------------------\n\nTITLE: Character Index Examples in Vim\nDESCRIPTION: Demonstrates charidx() function usage with different parameters to handle multibyte characters and UTF-16.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\necho charidx('áb́ć', 3)\t\t\" returns 1\necho charidx('áb́ć', 6, 1)\t\" returns 4\necho charidx('áb́ć', 16)\t\t\" returns -1\necho charidx('a😊😊', 4, 0, 1)\t\" returns 2\n```\n\n----------------------------------------\n\nTITLE: Preventing Multiple Plugin Loads in VimScript\nDESCRIPTION: This code checks if the plugin has already been loaded and prevents multiple loading. It uses a global variable to track the loaded state.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_31\n\nLANGUAGE: VimScript\nCODE:\n```\nif exists(\"g:loaded_typecorr\")\n  finish\nendif\nlet g:loaded_typecorr = 1\n```\n\n----------------------------------------\n\nTITLE: Defining VarExists function for conditional statusline elements in Vim\nDESCRIPTION: Defines a VarExists function used to conditionally display elements in the statusline based on the existence of a variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_71\n\nLANGUAGE: vim\nCODE:\n```\nfunction VarExists(var, val)\n    if exists(a:var) | return a:val | else | return '' | endif\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Vim Visual Text Replacement with Date\nDESCRIPTION: A mapping to replace selected text with the output of the date command\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:vmap _a <Esc>`>a<CR><Esc>`<i<CR><Esc>!!date<CR>kJJ\n```\n\n----------------------------------------\n\nTITLE: Starting Insert Mode in Command Window - VimL\nDESCRIPTION: This snippet sets Neovim to automatically enter Insert mode when the command window is opened. It's helpful for users who want to start typing commands immediately without extra keystrokes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_14\n\nLANGUAGE: VimL\nCODE:\n```\n:au CmdwinEnter [/?]  startinsert\n```\n\n----------------------------------------\n\nTITLE: Simulating Rethrow in Vim Script\nDESCRIPTION: Since Vim has no built-in rethrow mechanism, this example shows how to simulate it by throwing v:exception.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_130\n\nLANGUAGE: vim\nCODE:\n```\n:function! Bar()\n:  try\n:    call Foo()\n:  catch /.*/\n:    echo \"Rethrow\" v:exception\n:    throw v:exception\n:  endtry\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Querying Buffer Line Count in Lua\nDESCRIPTION: Returns the number of lines in the given buffer. Takes a buffer id parameter, with 0 representing the current buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_55\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_line_count({buffer})\n```\n\n----------------------------------------\n\nTITLE: Using `memset` for C Struct Initialization\nDESCRIPTION: This snippet demonstrates how to use the `memset` function to initialize a struct to zero in C. It involves setting every byte of the struct to zero, aiding in initializing or resetting a struct without manual assignment. This can be used when exact values aren't known, or a full reset is desired.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nStruct data;\nmemset(&data, 0, sizeof(data));\n```\n\n----------------------------------------\n\nTITLE: Creating a complex syntax chain with nextgroup in Vim\nDESCRIPTION: Example of using the 'nextgroup' argument to create a sequence of syntax matches. This highlights 'Foo' and 'Bar' differently, but only when they appear in a specific sequence.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_162\n\nLANGUAGE: vim\nCODE:\n```\n:syntax match  ccFoobar  \"Foo.\\{-}Bar\"  contains=ccFoo\n:syntax match  ccFoo     \"Foo\"        contained nextgroup=ccFiller\n:syntax region ccFiller  start=\".\"  matchgroup=ccBar  end=\"Bar\"  contained\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Polling in Lua with libuv\nDESCRIPTION: This snippet covers how to start polling on a file descriptor using `uv.poll_start(poll, events, callback)`, where `events` specifies the types of events to watch (readable or writable). It also illustrates stopping the polling with `uv.poll_stop(poll)`. The callback function is triggered upon the detection of specified events.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nuv.poll_start({poll}, {events}, {callback})\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.poll_stop({poll})\n```\n\n----------------------------------------\n\nTITLE: Starting Vim in Diff Mode (VimL)\nDESCRIPTION: Command to start Vim in diff mode for comparing multiple files. Options are automatically set for diff viewing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\nnvim -d file1 file2 [file3 [file4]]\n```\n\n----------------------------------------\n\nTITLE: Python Module Installation\nDESCRIPTION: Commands to install and upgrade the required Python modules for Neovim support.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install setuptools\npython -m pip install --upgrade pynvim\npython3 -m pip install --upgrade pynvim\n```\n\n----------------------------------------\n\nTITLE: Navigating to First Location List Error\nDESCRIPTION: Command for displaying the first error in the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n:lr[ewind][!] [nr]\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Window Style in Lua\nDESCRIPTION: Configuration example for setting the health check display style to use a floating window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.g.health = { style = 'float' }\n```\n\n----------------------------------------\n\nTITLE: Syntax Autocommands in Neovim\nDESCRIPTION: Example autocommands for loading C and CPP syntax files\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\n:au Syntax c    runtime! syntax/c.vim\n:au Syntax cpp   runtime! syntax/cpp.vim\n```\n\n----------------------------------------\n\nTITLE: Defining Breakpoint at Cursor\nDESCRIPTION: This command sets a breakpoint at the current line of the current file.  It provides a quick way to pause execution at the cursor position to examine the program's state.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n\":breakadd file <cursor-line> <current-file>\"\n```\n\n----------------------------------------\n\nTITLE: Search and Select Previous Match in Visual Mode in Neovim\nDESCRIPTION: This command searches backward for the last used search pattern and starts Visual mode to select the match, similar to using `N`. It mirrors the functionality of `gn` but in the reverse direction.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\"gN\"\n```\n\n----------------------------------------\n\nTITLE: Managing LSP Diagnostic Representation in Lua\nDESCRIPTION: The 'vim.lsp.diagnostic.from()' function is introduced for converting Neovim diagnostics into their LSP compatible representations, streamlining the integration of Neovim with LSP servers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nvim.lsp.diagnostic.from(diagnostics_list)\n```\n\n----------------------------------------\n\nTITLE: Syntax Toggle Mapping in Neovim\nDESCRIPTION: Key mapping to toggle syntax highlighting using F7 key\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\n:map <F7> :if exists(\"g:syntax_on\") <Bar>\n\t\\   syntax off <Bar>\n\t\\ else <Bar>\n\t\\   syntax enable <Bar>\n\t\\ endif <CR>\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Line Range in Vim\nDESCRIPTION: This snippet shows how to define a command that operates on a specified line range using the -range option, allowing the user to save a defined range to a specified file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:command -range=% SaveIt :<line1>,<line2>write! save_file\n```\n\n----------------------------------------\n\nTITLE: Using matchlist() in Vim\nDESCRIPTION: This example demonstrates the use of matchlist() function to perform regex matching. It matches a pattern with optional submatches against a string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_170\n\nLANGUAGE: vim\nCODE:\n```\necho matchlist('acd', '\\(a\\)\\?\\(b\\)\\?\\(c\\)\\?\\(.*\\)')\n```\n\n----------------------------------------\n\nTITLE: Creating and Reading Blobs - Vim Script\nDESCRIPTION: This snippet describes how to create a Blob from a hexadecimal literal and read a binary file into a Blob object in Vim, specifying the reading type.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_61\n\nLANGUAGE: vim\nCODE:\n```\n:let b = 0zFF00ED015DAF\n:let b = readfile('image.png', 'B')\n```\n\n----------------------------------------\n\nTITLE: Using CTRL-A for Incrementing Numbers in Vim\nDESCRIPTION: This snippet shows how to use the CTRL-A command in Vim to increment numbers systematically in a document, demonstrating its ease of use for changing years in text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_1\n\nLANGUAGE: Vim\nCODE:\n```\n\"Search for years in the text\n/19[0-9][0-9]\\|20[0-9][0-9]\n\" Use CTRL-A to increment the year\nCTRL-A\n\n```\n\n----------------------------------------\n\nTITLE: Using Case Modifiers in Vim Search Patterns\nDESCRIPTION: Pattern modifiers '\\c' and '\\C' for overriding case sensitivity settings for specific searches. These modifiers take precedence over the 'ignorecase' and 'smartcase' options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n\\Cword\n```\n\nLANGUAGE: vim\nCODE:\n```\n\\CWord\n```\n\nLANGUAGE: vim\nCODE:\n```\n\\cword\n```\n\nLANGUAGE: vim\nCODE:\n```\n\\cWord\n```\n\n----------------------------------------\n\nTITLE: Inspecting Variable in Debug Mode\nDESCRIPTION: This command displays the value of the variable 'idx' within the current function's scope during debugging.  It's essential for understanding the state of the program at different execution points.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n\"echo idx\"\n```\n\n----------------------------------------\n\nTITLE: Opening Diagnostic Float with Suffix Option\nDESCRIPTION: The function |vim.diagnostic.open_float()| now accepts a `suffix` option for displaying LSP error codes by default. This enhances the diagnostic float's contextual information presentation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Backward Search Pattern\nDESCRIPTION: Demonstrates backward search functionality using the question mark command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n?word\n```\n\n----------------------------------------\n\nTITLE: Configuring DOS Batch Syntax Highlighting Options\nDESCRIPTION: Sets options for DOS batch file syntax highlighting, including Windows command extensions version and comment handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_26\n\nLANGUAGE: VimScript\nCODE:\n```\nlet dosbatch_cmdextversion = 1\nlet dosbatch_colons_comment = 1\nlet g:dosbatch_syntax_for_btm = 1\n```\n\n----------------------------------------\n\nTITLE: Whitespace and Digit Matching\nDESCRIPTION: Covers matching patterns for whitespace ('\\s') and digits ('\\d'), essential for structured text searches. Highlights distinctions between whitespace and non-whitespace, as well as digit and non-digit matches.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_24\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\s\"\n\"\\\\S\"\n\"\\\\d\"\n```\n\n----------------------------------------\n\nTITLE: Setting Autocommands for C and CPP Files\nDESCRIPTION: This snippet sets specific shift width and soft tab stop values for .c, .h, and .cpp files using the BufReadPost event. Dependencies include having these file extensions recognized by Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n:  autocmd BufReadPost *.c,*.h :set sw=4 sts=4\n```\n\nLANGUAGE: vim\nCODE:\n```\n:  autocmd BufReadPost *.cpp   :set sw=3 sts=3\n```\n\nLANGUAGE: vim\nCODE:\n```\n:augroup END\n```\n\n----------------------------------------\n\nTITLE: Finding Window ID for a Buffer in Neovim using Vim Script\nDESCRIPTION: The 'bufwinid' function returns the window ID of the first window associated with a given buffer, or -1 if the buffer does not exist.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\nbufwinid({buf})\n```\n\n----------------------------------------\n\nTITLE: Clipboard Operations\nDESCRIPTION: Commands demonstrating how to interact with the system clipboard using registers\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n\"*P\n\"+y$\n\"+P\n```\n\n----------------------------------------\n\nTITLE: Matching Start and End of File\nDESCRIPTION: Uses '\\%^' to match the start and '\\%$' for the end of a file or string. These patterns help in locating items based on their positional relationship to the file boundaries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_17\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\%^\"\n\"\\\\%$\"\n```\n\n----------------------------------------\n\nTITLE: Setting mkspellmem for Systems with 1GB RAM in Neovim\nDESCRIPTION: Example of setting the 'mkspellmem' option to optimize memory usage for spell checking on systems with 1GB of RAM. This increases the available memory before compression, allows more words before each compression cycle, and permits more words to be added after compression.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_52\n\nLANGUAGE: vim\nCODE:\n```\nset mkspellmem=900000,3000,800\n```\n\n----------------------------------------\n\nTITLE: Conditional Package Loading Example\nDESCRIPTION: Example showing how to conditionally load different versions of a plugin based on compiler version.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nif foo_compiler_version > 34\n  packadd foo_new\nelse\n  packadd foo_old\nendif\n```\n\n----------------------------------------\n\nTITLE: Using Nested Autocommands\nDESCRIPTION: The snippet adds the '++nested' flag to make sure that triggering an event will also execute other related autocommands, using the FileChangedShell event as an example.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd FileChangedShell * ++nested  edit\n```\n\n----------------------------------------\n\nTITLE: Setting Syntax-Based Omni Completion for Current Buffer\nDESCRIPTION: Command to enable syntax-based code completion for the current buffer, providing minimal language-sensitive completion based on Vim's syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal omnifunc=syntaxcomplete#Complete\n```\n\n----------------------------------------\n\nTITLE: Remote File Editing with SCP\nDESCRIPTION: Example of editing remote files using SCP protocol in Neovim. Demonstrates how to open files on remote hosts directly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimscript\nCODE:\n```\nvim scp://hostname/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Syntax Highlighting Options in Vim\nDESCRIPTION: Sets options for Markdown syntax highlighting, including increasing the number of lines for syncing, enabling fenced code block highlighting, and disabling syntax concealing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_82\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:markdown_minlines = 500\n\n:let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']\n\n:let g:markdown_syntax_conceal = 0\n```\n\n----------------------------------------\n\nTITLE: Recovering Swap Files in Vim\nDESCRIPTION: This snippet provides the command to recover a file from the swap file in Vim, particularly useful when you want changes that are not saved in the main file. The command can be used if the user is aware of the presence of a swap file containing recoverable changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_5\n\nLANGUAGE: Vim\nCODE:\n```\n:recover\n```\n\n----------------------------------------\n\nTITLE: List Reference Behavior with Concatenation in Vim\nDESCRIPTION: Shows how concatenation affects both variables when they reference the same list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\n:let listA = [1, 2]\n:let listB = listA\n:let listB += [3, 4]\n:echo listA\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Value in Vimscript\nDESCRIPTION: The abs() function returns the absolute value of a number or float expression. It handles both integer and float inputs, returning the same type as the input.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimscript\nCODE:\n```\necho abs(1.456)\n```\n\nLANGUAGE: vimscript\nCODE:\n```\necho abs(-5.456)\n```\n\nLANGUAGE: vimscript\nCODE:\n```\necho abs(-4)\n```\n\n----------------------------------------\n\nTITLE: Configuring Greek Language Mapping in Vim\nDESCRIPTION: Example of setting langmap option for Greek keyboard layout in UTF-8, allowing Greek characters to be mapped to their English equivalents for normal mode commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\nset langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,QQ,ΡR,ΣS,ΤT,ΘU,ΩV,WW,ΧX,ΥY,ΖZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,υy,ζz\n```\n\n----------------------------------------\n\nTITLE: Checking Ruby Version in Neovim\nDESCRIPTION: Demonstrates how to print the Ruby version used in Neovim using the :ruby command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\n:ruby print RUBY_VERSION\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Mark Position in Vim\nDESCRIPTION: This snippet demonstrates how to save the position of a mark ('a) and restore it later using getpos() and setpos() functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_103\n\nLANGUAGE: vim\nCODE:\n```\nlet save_a_mark = getpos(\"'a\")\n\" ...\ncall setpos(\"'a\", save_a_mark)\n```\n\n----------------------------------------\n\nTITLE: Repeating Spell Replacement in Vim\nDESCRIPTION: Command to repeat the replacement done by z= for all matches with the replaced word in the current window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_4\n\nLANGUAGE: vimdoc\nCODE:\n```\n:spellr[epall]\n```\n\n----------------------------------------\n\nTITLE: Remote Server Control Example\nDESCRIPTION: Example showing how to send commands to a remote server to write all files and exit.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnvim --server ~/.cache/nvim/server.pipe --remote-send '<C-\\><C-N>:wqa<CR>'\n```\n\n----------------------------------------\n\nTITLE: Disabling Cargo Workspace Directory Avoidance\nDESCRIPTION: Controls whether Cargo commands in a workspace should operate at the crate level (default) or at the workspace level. Working at the workspace level may be slower but can check dependencies between crates.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_cargo_avoid_whole_workspace = 0\n```\n\n----------------------------------------\n\nTITLE: Editing Buffers by Number\nDESCRIPTION: This snippet illustrates how to edit specific buffers by their number using the ':buffer' command, allowing users to quickly switch between buffers without typing full file names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:buffer 2\n```\n\nLANGUAGE: vim\nCODE:\n```\n:buffer help\n```\n\nLANGUAGE: vim\nCODE:\n```\n:sbuffer 3\n```\n\n----------------------------------------\n\nTITLE: Enabling Rails Environment Detection for Ruby Omni Completion\nDESCRIPTION: Vim configuration to enable detection of Rails environment for files within a Rails project, enhancing Ruby Omni completion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rubycomplete_rails = 1\n```\n\n----------------------------------------\n\nTITLE: Insert Mode Abbreviations for Raku Unicode Operators\nDESCRIPTION: Comprehensive set of Vim insert mode abbreviations that automatically convert ASCII-based operators to their Unicode equivalents for Raku programming.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_raku.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\niabbrev <buffer> !(<) ⊄\niabbrev <buffer> !(<=) ⊈\niabbrev <buffer> !(>) ⊅\niabbrev <buffer> !(>=) ⊉\niabbrev <buffer> !(cont) ∌\niabbrev <buffer> !(elem) ∉\niabbrev <buffer> != ≠\niabbrev <buffer> (&) ∩\niabbrev <buffer> (+) ⊎\niabbrev <buffer> (-) ∖\niabbrev <buffer> (.) ⊍\niabbrev <buffer> (<) ⊂\niabbrev <buffer> (<+) ≼\niabbrev <buffer> (<=) ⊆\niabbrev <buffer> (>) ⊃\niabbrev <buffer> (>+) ≽\niabbrev <buffer> (>=) ⊇\niabbrev <buffer> (\\|) ∪\niabbrev <buffer> (^) ⊖\niabbrev <buffer> (atomic) ⚛\niabbrev <buffer> (cont) ∋\niabbrev <buffer> (elem) ∈\niabbrev <buffer> * ×\niabbrev <buffer> **0 ⁰\niabbrev <buffer> **1 ¹\niabbrev <buffer> **2 ²\niabbrev <buffer> **3 ³\niabbrev <buffer> **4 ⁴\niabbrev <buffer> **5 ⁵\niabbrev <buffer> **6 ⁶\niabbrev <buffer> **7 ⁷\niabbrev <buffer> **8 ⁸\niabbrev <buffer> **9 ⁹\niabbrev <buffer> ... …\niabbrev <buffer> / ÷\niabbrev <buffer> << «\niabbrev <buffer> <<[=]<< «=«\niabbrev <buffer> <<[=]>> «=»\niabbrev <buffer> <= ≤\niabbrev <buffer> =~= ≅\niabbrev <buffer> >= ≥\niabbrev <buffer> >> »\niabbrev <buffer> >>[=]<< »=«\niabbrev <buffer> >>[=]>> »=»\niabbrev <buffer> Inf ∞\niabbrev <buffer> atomic-add-fetch ⚛+=\niabbrev <buffer> atomic-assign ⚛=\niabbrev <buffer> atomic-fetch ⚛\niabbrev <buffer> atomic-dec-fetch --⚛\niabbrev <buffer> atomic-fetch-dec ⚛--\niabbrev <buffer> atomic-fetch-inc ⚛++\niabbrev <buffer> atomic-inc-fetch ++⚛\niabbrev <buffer> atomic-sub-fetch ⚛−=\niabbrev <buffer> e 𝑒\niabbrev <buffer> o ∘\niabbrev <buffer> pi π\niabbrev <buffer> set() ∅\niabbrev <buffer> tau τ\n```\n\n----------------------------------------\n\nTITLE: Autocommand Pattern Example 2 in Vimscript\nDESCRIPTION: This example illustrates how to set the 'cindent' option for C files in the `/vim/src` directory using the `BufRead` event and the `/vim/src/*.c` pattern. When a C file within that directory is read, the 'cindent' option will be set.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n \":autocmd BufRead /vim/src/*.c\\tset cindent\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Mouse Support Configuration in Neovim\nDESCRIPTION: This snippet shows how to conditionally apply the mouse support configuration based on whether Neovim is being used. It prevents errors in Neovim due to deprecated options like 'ttymouse'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nif !has('nvim')\n    set ttymouse=xterm2\nendif\n```\n\n----------------------------------------\n\nTITLE: Reading Files in Vim\nDESCRIPTION: Example of using the ':read' command to insert file contents above the first line of a file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:0read patch\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom HTML Rendering\nDESCRIPTION: This snippet allows users to redefine HTML syntax groups for custom rendering. To enable this, you need to redefine all required syntax groups and define the 'html_my_rendering' variable in your vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_52\n\nLANGUAGE: vim\nCODE:\n```\n\t:let html_my_rendering=1\n```\n\n----------------------------------------\n\nTITLE: Shell Error Handling in Vim Script\nDESCRIPTION: Example showing how to check shell command execution status using v:shell_error variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n!mv foo bar\nif v:shell_error\n  echo 'could not rename \"foo\" to \"bar\"!'\nendif\n```\n\n----------------------------------------\n\nTITLE: Vim PHP Syntax Configuration\nDESCRIPTION: Configuration options for PHP syntax highlighting including SQL, HTML, and folding settings\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_99\n\nLANGUAGE: vim\nCODE:\n```\nlet php_sql_query = 1\nlet php_baselib = 1\nlet php_htmlInStrings = 1\nlet php_oldStyle = 1\nlet php_asp_tags = 1\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with Custom Install Location\nDESCRIPTION: Commands to build and install Neovim to a custom location using CMake. This allows installation to a non-default directory path.\nSOURCE: https://github.com/neovim/neovim/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=/full/path/\nmake install\n```\n\n----------------------------------------\n\nTITLE: Getting Extmark Position in Lua\nDESCRIPTION: Gets the position (0-indexed) of an extmark. Returns a tuple or empty list if the extmark id is absent.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_62\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_get_extmark_by_id({buffer}, {ns_id}, {id}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Handling System Command Output with Split in Vim\nDESCRIPTION: This snippet demonstrates how to handle system command output by splitting it into a list, preserving empty lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_274\n\nLANGUAGE: vim\nCODE:\n```\necho split(system('echo hello'), '\\n', 1)\n```\n\n----------------------------------------\n\nTITLE: Custom Cursor Color Configuration\nDESCRIPTION: Advanced cursor styling configuration that sets different colors for insert and normal modes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set termguicolors\n:hi Cursor guifg=green guibg=green\n:hi Cursor2 guifg=red guibg=red\n:set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n```\n\n----------------------------------------\n\nTITLE: Filetype Detection in After Directory\nDESCRIPTION: Continuation of the split filetype detection example, showing the content that would go in the 'after' directory to be processed later in the detection sequence.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\naugroup filetypedetect\nau BufNewFile,BufRead /usr/share/scripts/*\tsetf ruby\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Joining Paragraphs with Improved Blank Line Handling\nDESCRIPTION: Enhanced global command for joining paragraphs that works with blank lines (containing spaces/tabs) by finding all lines with non-whitespace characters and joining until the next line that is blank or empty.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:g/\\S/,/^\\s*$/join\n```\n\n----------------------------------------\n\nTITLE: Restoring fold state from view\nDESCRIPTION: Restores previously saved fold states and view settings. This is used after returning to a file where you previously used mkview.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_12\n\nLANGUAGE: vimdoc\nCODE:\n```\n:loadview\n```\n\n----------------------------------------\n\nTITLE: Creating DiffOrig Command for Comparing with Original File (VimL)\nDESCRIPTION: Defines a custom command 'DiffOrig' to compare the current buffer with the original file version.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\ncommand DiffOrig vert new | set buftype=nofile | read ++edit # | 0d_\n   \\ | diffthis | wincmd p | diffthis\n```\n\n----------------------------------------\n\nTITLE: Getting System Load Average with uv.loadavg()\nDESCRIPTION: Returns the system load average as a triad of numbers representing 1, 5, and 15 minute averages. Not supported on Windows platforms.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_88\n\nLANGUAGE: lua\nCODE:\n```\nuv.loadavg()\n```\n\n----------------------------------------\n\nTITLE: Case Sensitivity Settings\nDESCRIPTION: Commands to toggle case sensitivity in search patterns using set commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:set ignorecase\n:set noignorecase\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax with End Constraints in Vim Script\nDESCRIPTION: Handles syntax items with end constraints, using examples such as preprocessor directives that may include contained comments, ensuring the outer syntax region ends appropriately even with inner contained items.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_9\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax region xComment start=/%/ end=/$/ contained\n:syntax region xPreProc start=/#/ end=/$/ contains=xComment\n```\n\n----------------------------------------\n\nTITLE: Hiding Currently Displayed Diagnostics - Lua\nDESCRIPTION: Clears the visible diagnostic decorations from the buffer. This function only removes the display of diagnostics and does not erase the diagnostics themselves, allowing for redisplay when necessary.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nvim.diagnostic.hide(namespace, bufnr)\n```\n\n----------------------------------------\n\nTITLE: Using Deferred File Deletion in Vim\nDESCRIPTION: Shows how to use the 'D' flag with writefile() to delete a file when the current function ends.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_294\n\nLANGUAGE: vim\nCODE:\n```\ndefer delete({fname})\n```\n\n----------------------------------------\n\nTITLE: Perl String Statement Example\nDESCRIPTION: Example showing how Perl strings are highlighted differently based on perl_string_as_statement setting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_98\n\nLANGUAGE: perl\nCODE:\n```\n\"hello world!\"; qq|hello world|;\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Assertion Example\nDESCRIPTION: Demonstrates assert_match() function with pattern matching and start/end anchors\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\ncall assert_match('^f.*o$', 'foobar')\n```\n\n----------------------------------------\n\nTITLE: Repeating Searches with Different Offsets in Vim\nDESCRIPTION: Commands for repeating the previous search with modified or same offsets. These shortcuts allow efficient repetition of searches with different positioning behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n/that\n```\n\nLANGUAGE: vim\nCODE:\n```\n//e\n```\n\nLANGUAGE: vim\nCODE:\n```\n/\n```\n\nLANGUAGE: vim\nCODE:\n```\n//\n```\n\n----------------------------------------\n\nTITLE: Time Measurement with reltimestr\nDESCRIPTION: Shows how to measure and format execution time as a string with microsecond precision\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_205\n\nLANGUAGE: vim\nCODE:\n```\nlet start = reltime()\ncall MyFunction()\necho reltimestr(reltime(start))\necho split(reltimestr(reltime(start)))[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic Highlight Groups in Vim\nDESCRIPTION: This snippet demonstrates how to define custom highlight groups for semantic tokens in Vim using the `hi` command.  It sets the foreground color for function names, Lua variables, deprecated symbols, and asynchronous functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nhi @lsp.type.function guifg=Yellow        \" function names are yellow\nhi @lsp.type.variable.lua guifg=Green     \" variables in lua are green\nhi @lsp.mod.deprecated gui=strikethrough  \" deprecated is crossed out\nhi @lsp.typemod.function.async guifg=Blue \" async functions are blue\n```\n\n----------------------------------------\n\nTITLE: Testing PythonX availability in Vim script\nDESCRIPTION: Conditional statement to check if PythonX functions and commands are available in Neovim using the has() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_13\n\nLANGUAGE: viml\nCODE:\n```\nif has('pythonx')\n  echo 'pyx* commands are available. (Python ' .. &pyx .. ')'\nendif\n```\n\n----------------------------------------\n\nTITLE: Using searchdecl() in Neovim (Vimscript)\nDESCRIPTION: This example shows how to use the searchdecl() function to search for the declaration of a variable and echo the line containing the declaration if found.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_219\n\nLANGUAGE: vim\nCODE:\n```\nif searchdecl('myvar') == 0\n   echo getline('.')\nendif\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Index in a String in Neovim using Vim Script\nDESCRIPTION: The 'byteidx' function calculates the byte index of a specified character in a provided string, taking into account multibyte characters and returns -1 for invalid indices.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\nbyteidx({expr}, {nr} [, {utf16}])\n```\n\n----------------------------------------\n\nTITLE: Using For Loop and Range in VimL\nDESCRIPTION: This snippet is a more compact version of the while loop, using a for loop. It iterates over a range from 1 to 4, printing each number. This snippet highlights the for loop's efficiency in iterating over sequences in VimL. Understanding of Vim scripting and the :for and range() functionality is necessary.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_1\n\nLANGUAGE: VimL\nCODE:\n```\n:for i in range(1, 4)\n:  echo \"count is\" i\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Exception Handling\nDESCRIPTION: Example showing a complete exception handling structure with specific and catch-all handlers, including interrupt and custom exception handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_139\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:\n:  \" do the hard work here\n:\n:catch /MyException/\n:\n:  \" handle known problem\n:\n:catch /^Vim:Interrupt$/\n:    echo \"Script interrupted\"\n:catch /.*/\n:  echo \"Internal error (\" .. v:exception .. \")\"\n:  echo \" - occurred at \" .. v:throwpoint\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Reselecting Previous Visual Area in Neovim\nDESCRIPTION: This command reselects the same area as the previous Visual selection, using the same mode (characterwise, linewise, or blockwise). It exchanges the current and previous Visual areas in Visual mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\"gv\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Text Display Width in Neovim\nDESCRIPTION: Uses 'nvim_strwidth' to determine the number of display cells a string occupies. Control characters are counted as single cells.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_strwidth\\(\\{text\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Defining a function for foldtext in Vim\nDESCRIPTION: This example demonstrates defining a Vim function and using it to customize the foldtext. This improves readability and allows for more complex foldtext logic. It retrieves the first line, substitutes patterns, and prepends dashes indicating the fold level.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:set foldtext=MyFoldText()\n:function MyFoldText()\n:  let line = getline(v:foldstart)\n:  let sub = substitute(line, '/\\*\\|\\*/\\|{{{\\d\\=', '', 'g')\n:  return v:folddashes .. sub\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Starting Vim with a Previously Saved Session\nDESCRIPTION: Shows how to quickly start editing with a previously saved Session file using the -S command-line argument. This loads all windows, settings, and files from the specified session.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvim -S Session.vim\n```\n\n----------------------------------------\n\nTITLE: Mapping Mouse Buttons in Neovim\nDESCRIPTION: This snippet demonstrates how to remap Shift-LeftMouse actions to RightMouse actions in Neovim, allowing customization of mouse behavior. These mappings affect how mouse buttons interact with selections and editor functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_54\n\nLANGUAGE: vim\nCODE:\n```\nmap <S-LeftMouse>     <RightMouse>\nmap <S-LeftDrag>      <RightDrag>\nmap <S-LeftRelease>   <RightRelease>\nmap <2-S-LeftMouse>   <2-RightMouse>\nmap <2-S-LeftDrag>    <2-RightDrag>\nmap <2-S-LeftRelease> <2-RightRelease>\nmap <3-S-LeftMouse>   <3-RightMouse>\nmap <3-S-LeftDrag>    <3-RightDrag>\nmap <3-S-LeftRelease> <3-RightRelease>\nmap <4-S-LeftMouse>   <4-RightMouse>\nmap <4-S-LeftDrag>    <4-RightDrag>\nmap <4-S-LeftRelease> <4-RightRelease>\n```\n\n----------------------------------------\n\nTITLE: Accessing Option Values in Vim Expressions\nDESCRIPTION: This snippet demonstrates how to access option values in Vim expressions. It shows how to use the '&' prefix to get local or global option values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_83\n\nLANGUAGE: vim\nCODE:\n```\necho \"tabstop is \" .. &tabstop\nif &expandtab\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading Views in Vim\nDESCRIPTION: These commands demonstrate how to create and load views in Vim, which store window-specific settings and can be numbered for multiple views per file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:mkview\n```\n\nLANGUAGE: vim\nCODE:\n```\n:loadview\n```\n\nLANGUAGE: vim\nCODE:\n```\n:mkview 1\n```\n\nLANGUAGE: vim\nCODE:\n```\n:loadview 1\n```\n\n----------------------------------------\n\nTITLE: Character Conversion Examples\nDESCRIPTION: Demonstrations of using nr2char() to convert number values to characters, including ASCII and UTF-8 examples.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_184\n\nLANGUAGE: vim\nCODE:\n```\necho nr2char(64)\t\t\" returns '@'\necho nr2char(32)\t\t\" returns ' '\n```\n\nLANGUAGE: vim\nCODE:\n```\necho nr2char(300)\t\t\" returns I with bow character\n```\n\n----------------------------------------\n\nTITLE: Executing Vim Command with Normal Mode\nDESCRIPTION: This snippet shows how to start Vim and execute a normal mode command to jump to the last cursor position when Vim was exited (mark '0). This is done using the `-c` option to pass the command `normal '0` to Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nvim -c \"normal '0\"\n```\n\n----------------------------------------\n\nTITLE: Remote File Editing with FTP\nDESCRIPTION: Example of editing remote files using FTP protocol in Neovim. Shows how to open files on FTP hosts directly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimscript\nCODE:\n```\nvim ftp://hostname/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Using While Loop in VimL\nDESCRIPTION: This snippet demonstrates the use of a while loop in VimL. The loop initializes a variable i to 1, checks whether it is less than 5, and prints the current value while incrementing it by one in each iteration. The goal is to illustrate the implementation of a loop structure in Vim script. Dependencies include understanding Vim scripting basics and using the :let and :echo commands. Inputs specify initial and condition values for loop execution, while outputs are printed values during loop execution.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_0\n\nLANGUAGE: VimL\nCODE:\n```\n:let i = 1\n:while i < 5\n:  echo \"count is\" i\n:  let i += 1\n:endwhile\n```\n\n----------------------------------------\n\nTITLE: Configuring tmux terminal overrides\nDESCRIPTION: This code snippet shows how to configure tmux to properly handle cursor shape changes sent by Neovim. It sets the `terminal-overrides` option in the tmux configuration file to define the `Ss` and `Se` capabilities, which control the cursor shape.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset -ga terminal-overrides '*:Ss=\\E[%p1%d q:Se=\\E[ q'\n```\n\n----------------------------------------\n\nTITLE: Error in Finally Block in Vim Script\nDESCRIPTION: Shows a problematic case where an error in a finally clause can prevent proper handling of an interrupt, emphasizing the need for careful error handling in cleanup code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_135\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:  try\n:    echo \"Press CTRL-C for interrupt\"\n:    while 1\n:    endwhile\n:  finally\n:    unlet novar\n:  endtry\n:catch /novar/\n:endtry\n:echo \"Script still running\"\n:sleep 1\n```\n\n----------------------------------------\n\nTITLE: Filetype Detection in Vim Plugins\nDESCRIPTION: Shows how to create a filetype detection pattern that sets the appropriate filetype for specific file extensions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_41\n\nLANGUAGE: vim\nCODE:\n```\nau BufNewFile,BufRead *.foo\t\t\tset filetype=foofoo\n```\n\n----------------------------------------\n\nTITLE: Setting Verilog indentation width\nDESCRIPTION: Configures the indentation width for Verilog files. The default width is 'shiftwidth', but this can be customized by setting the b:verilog_indent_width variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nlet b:verilog_indent_width = 4\nlet b:verilog_indent_width = shiftwidth() * 2\n```\n\n----------------------------------------\n\nTITLE: Creating Number Sequences with range() in Vim\nDESCRIPTION: Examples of using the range() function to generate lists of sequential numbers with different starting points, end points, and stride values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_199\n\nLANGUAGE: vim\nCODE:\n```\necho range(4)\t\t\" [0, 1, 2, 3]\necho range(2, 4)\t\" [2, 3, 4]\necho range(2, 9, 3)\t\" [2, 5, 8]\necho range(2, -2, -1)\t\" [2, 1, 0, -1, -2]\necho range(0)\t\t\" []\necho range(2, 0)\t\" error!\n```\n\n----------------------------------------\n\nTITLE: Setting showbreak String in Vim\nDESCRIPTION: Examples of setting the showbreak option which defines the string displayed at the start of wrapped lines. Shows two common patterns for visual indication of wrapped lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_64\n\nLANGUAGE: vim\nCODE:\n```\nlet &showbreak = \"> \"\nlet &showbreak = '+++ '\n```\n\n----------------------------------------\n\nTITLE: WinScrolled Event Handler Example\nDESCRIPTION: Example structure of the v:event dictionary provided by the WinScrolled autocommand event, showing window change information including dimensions and scroll positions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n{\n   all: {width: 0, height: 2, leftcol: 0, skipcol: 0, topline: 1, topfill: 0},\n   1003: {width: 0, height: -1, leftcol: 0, skipcol: 0, topline: 0, topfill: 0},\n   1006: {width: 0, height: 1, leftcol: 0, skipcol: 0, topline: 1, topfill: 0},\n}\n```\n\n----------------------------------------\n\nTITLE: File Iteration Search and Replace Example\nDESCRIPTION: Example of iterating through files in arglist to perform search and replace operations\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_214\n\nLANGUAGE: vim\nCODE:\n```\nlet n = 1\nwhile n <= argc()     \" loop over all files in arglist\n  exe \"argument \" .. n\n  \" start at the last char in the file and wrap for the\n  \" first search to find match at start of file\n  normal G$\n  let flags = \"w\"\n  while search(\"foo\", flags) > 0\n    s/foo/bar/g\n    let flags = \"W\"\n  endwhile\n  update            \" write the file if modified\n  let n = n + 1\nendwhile\n```\n\n----------------------------------------\n\nTITLE: Basic Match Pattern Configuration in Vim\nDESCRIPTION: Example of setting basic match patterns for if/endif and while/continue/break/endwhile keywords using b:match_words variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:let b:match_words = '\\<if\\>:\\<endif\\>,' . '\\<while\\>:\\<continue\\>:\\<break\\>:\\<endwhile\\>'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variable Value with uv.os_getenv()\nDESCRIPTION: Gets the value of a specified environment variable with an optional buffer size parameter. Returns the value or an error code if the variable doesn't exist or exceeds buffer size.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_91\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_getenv({name} [, {size}])\n```\n\n----------------------------------------\n\nTITLE: Changing the Shell Command Runner for Cargo Commands\nDESCRIPTION: Specifies how shell commands for Cargo should be executed. By default, :terminal is used, but this can be changed to use the :! command instead.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\nlet g:cargo_shell_command_runner = '!'\n```\n\n----------------------------------------\n\nTITLE: Three-piece comment example in Vim\nDESCRIPTION: This snippet demonstrates how to define a three-piece comment (start, middle, and end) for C-style comments using the 'comments' option.  It includes the sr (start), mb (middle), and ex (end) flags, along with an explanation of the 'b' flag to prevent recognizing \"*ptr\" as a comment.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n\":set comments=sr:/*,mb:*,ex:*/\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Reinstalling Python Modules for Neovim\nDESCRIPTION: Uninstalls both the old 'neovim' module and the new 'pynvim' module, then reinstalls 'pynvim'. This is useful when troubleshooting Python integration issues.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip uninstall neovim pynvim\npython -m pip install --user --upgrade pynvim\n```\n\n----------------------------------------\n\nTITLE: Autocommand Pattern Example 3 in Vimscript\nDESCRIPTION: This example demonstrates how to set the 'ts=5' option for C files in the `/tmp` directory. If a link from `/tmp/test.c` points to `/home/nobody/vim/src/test.c`, editing `/tmp/test.c` will trigger this autocommand.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n \":autocmd BufRead /tmp/*.c\\tset ts=5\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Error in Next File\nDESCRIPTION: Command for displaying the first error in the next file in the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:[count]cnf[ile][!]\n```\n\n----------------------------------------\n\nTITLE: Centering Text in Vim - Vim\nDESCRIPTION: Centers specified lines of text within Vim using the ':center' command. Optionally allows setting the width for centering, defaulting to 'textwidth' if not provided.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:1,5center 40\n```\n\n----------------------------------------\n\nTITLE: Checking Python version in Neovim\nDESCRIPTION: Commands to import the sys module and display the Python version information in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_8\n\nLANGUAGE: viml\nCODE:\n```\n:py3 import sys\n:py3 print(sys.version)\n```\n\n----------------------------------------\n\nTITLE: Confirm Dialog Example\nDESCRIPTION: Demonstrates how to create an interactive dialog with multiple choices using the confirm() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\nlet choice = confirm(\"What do you want?\",\n\t\t\t\\ \"&Apples\\n&Oranges\\n&Bananas\", 2)\nif choice == 0\n\techo \"make up your mind!\"\nelseif choice == 3\n\techo \"tasteful\"\nelse\n\techo \"I prefer bananas myself.\"\nendif\n```\n\n----------------------------------------\n\nTITLE: C Code with Folding Markers Example\nDESCRIPTION: Example of C code using folding markers to define collapsible sections. The markers use {{{ and }}} syntax to define fold boundaries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n/* foobar () {{{ */\nint foobar()\n{\n    /* return a value {{{ */\n    return 42;\n    /* }}} */\n}\n/* }}} */\n```\n\n----------------------------------------\n\nTITLE: Using prevnonblank() Function for Line Navigation in Vim\nDESCRIPTION: Example of using prevnonblank() to find the nearest non-blank line above the current position. Commonly used in indent scripts to determine the indentation of the previous non-empty line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_189\n\nLANGUAGE: vim\nCODE:\n```\nlet ind = indent(prevnonblank(v:lnum - 1))\n```\n\n----------------------------------------\n\nTITLE: Automatic Clipboard Provider Reloading in Neovim\nDESCRIPTION: Function to automatically reload the clipboard provider when g:clipboard changes using dictwatcheradd.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nfunction! s:clipboard_changed(...) abort\n  if exists('g:loaded_clipboard_provider')\n    unlet g:loaded_clipboard_provider\n  endif\n  runtime autoload/provider/clipboard.vim\nendfunction\n\nif !exists('s:loaded\")\n  call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\nendif\nlet s:loaded = v:true\n```\n\n----------------------------------------\n\nTITLE: Ascii Value and Hex Display Command - Vim\nDESCRIPTION: This snippet demonstrates the usage of the 'ga' command in Neovim to print the ASCII value of the character under the cursor. It includes additional details on how to interpret the displayed values in decimal, hexadecimal, and octal formats, as well as information on dealing with non-standard ASCII characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nga\t\tPrint the ascii value of the character under the cursor in decimal, hexadecimal and octal.\n\t\tMnemonic: Get Ascii value.\n```\n\n----------------------------------------\n\nTITLE: Defining a Comment region with character offsets in Vim\nDESCRIPTION: Example of using character offsets to exclude delimiters from highlighting. This defines a Comment region where the '/*' and '*/' delimiters are not included in the highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_164\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region Comment start=\"/\\*\"hs=e+1 end=\"\\*/\"he=s-1\n```\n\n----------------------------------------\n\nTITLE: Using searchpos() in Neovim (Vimscript)\nDESCRIPTION: This snippet shows how to use searchpos() to find the position of a pattern match and store the result in variables. It also demonstrates using the 'p' flag to get sub-pattern match information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_223\n\nLANGUAGE: vim\nCODE:\n```\nlet [lnum, col] = searchpos('mypattern', 'n')\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet [lnum, col, submatch] = searchpos('\\(\\l\\)\\|\\(\\u\\)', 'np')\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Time with uv.gettimeofday()\nDESCRIPTION: Cross-platform implementation of the gettimeofday(2) system call that returns the seconds and microseconds of Unix time as a pair of integers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_84\n\nLANGUAGE: lua\nCODE:\n```\nuv.gettimeofday()\n```\n\n----------------------------------------\n\nTITLE: Navigating to First Quickfix Error\nDESCRIPTION: Commands for displaying the first error in the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n:cr[ewind][!] [nr]\n```\n\n----------------------------------------\n\nTITLE: Configuring Clipboard Provider in Neovim\nDESCRIPTION: Configuration snippet for reloading the clipboard provider after changing settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\nlet g:clipboard = { 'name' : ... }\nif exists('g:loaded_clipboard_provider')\n  unlet g:loaded_clipboard_provider\n  runtime autoload/provider/clipboard.vim\nendif\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shell Type to POSIX Shell\nDESCRIPTION: Configuring Vim to use POSIX shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_115\n\nLANGUAGE: vim\nCODE:\n```\nlet g:is_posix     = 1\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Function Examples\nDESCRIPTION: Demonstrates usage of atan() and atan2() mathematical functions\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\necho atan(100)\necho atan(-4.01)\necho atan2(-1, 1)\necho atan2(1, -1)\n```\n\n----------------------------------------\n\nTITLE: Vim For Loop with List Modification\nDESCRIPTION: Demonstrates for loop usage with list manipulation and copy operations\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_103\n\nLANGUAGE: vim\nCODE:\n```\n:for item in copy(mylist)\n\nfor item in mylist\n   call remove(mylist, 0)\nendfor\n```\n\n----------------------------------------\n\nTITLE: Argument List Commands in Vim\nDESCRIPTION: Commands for manipulating and navigating through the argument list, including displaying arguments, writing files with navigation, and opening files in current or new windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:ar[gs]              print the argument list, with the current file in \"[]\"\n:all  or :sall       open a window for every file in the arg list\n:wn[ext][!]          write file and edit next file\n:wn[ext][!] {file}   write to {file} and edit next file, unless {file} exists; With !, overwrite existing file\n:wN[ext][!] [file]   write file and edit previous file\n\n# in current window    in new window\n:argu[ment] N         :sar[gument] N      edit file N\n:n[ext]               :sn[ext]           edit next file\n:n[ext] {arglist}     :sn[ext] {arglist} define new arg list and edit first file\n:N[ext]               :sN[ext]           edit previous file\n:fir[st]              :sfir[st]          edit first file\n:la[st]               :sla[st]           edit last file\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Post-Compiler Command for SpotBugs\nDESCRIPTION: Creates a custom function for handling post-compiler commands in SpotBugs and assigns it to the DefaultPostCompilerCommand property.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_48\n\nLANGUAGE: vim\nCODE:\n```\nfunction! GenericPostCompilerCommand(arguments) abort\n\texecute 'make ' . a:arguments\nendfunction\n\nlet g:spotbugs_properties = {\n\t\\ 'DefaultPostCompilerCommand':\n\t\t\\ function('GenericPostCompilerCommand'),\n\\ }\n```\n\n----------------------------------------\n\nTITLE: Reading from Standard Input in Vim\nDESCRIPTION: This snippet demonstrates how to edit output from a shell command directly in Vim by using standard input. It shows how to leverage the '-' argument for editing streamed data.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_26.txt#2025-04-20_snippet_4\n\nLANGUAGE: Vim\nCODE:\n```\nls | vim -\n```\n\n----------------------------------------\n\nTITLE: Finding global identifiers with included files (Vim)\nDESCRIPTION: This snippet shows how to find the declaration of an identifier (variable, function, etc.) in the current file and all included files using the `[I` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n\"[I\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new UDP handle in Lua\nDESCRIPTION: Creates and initializes a new UDP handle. The function accepts optional flags to specify the address family and number of messages to receive at once.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nuv.new_udp([{flags}])\n```\n\n----------------------------------------\n\nTITLE: Mapping CTRL-H to <Home> in Vim\nDESCRIPTION: Examples of mapping CTRL-H to the <Home> key using different escape techniques in Vim configuration. Demonstrates how to use key notation and escaping special characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:imap <C-H> \\<Home>\n```\n\nLANGUAGE: vim\nCODE:\n```\n:imap <C-H> <lt>Home>\n```\n\n----------------------------------------\n\nTITLE: Writing and Quitting Commands in Vim\nDESCRIPTION: Commands for saving files, appending to files, executing commands with file content as input, and exiting Vim with various options for handling unsaved changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:[range]w[rite][!]                  write to the current file\n:[range]w[rite] {file}              write to {file}, unless it already exists\n:[range]w[rite]! {file}             write to {file}.  Overwrite an existing file\n:[range]w[rite][!] >>                append to the current file\n:[range]w[rite][!] >> {file}         append to {file}\n:[range]w[rite] !{cmd}               execute {cmd} with [range] lines as standard input\n:[range]up[date][!]                  write to current file if modified\n:wa[ll][!]                           write all changed buffers\n\n:q[uit]                              quit current buffer, unless changes have been made\n:q[uit]!                             quit current buffer always, discard any changes\n:qa[ll]                              exit Vim, unless changes have been made\n:qa[ll]!                             exit Vim always, discard any changes\n:cq                                  quit without writing and return error code\n\n:wq[!]                               write the current file and exit\n:wq[!] {file}                        write to {file} and exit\n```\n\n----------------------------------------\n\nTITLE: Closing Quickfix or Location List Windows in Vim Script\nDESCRIPTION: These commands close the quickfix or location list windows to free up the display. They provide cleanup and manageable ways to toggle visibility of error and location lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_30\n\nLANGUAGE: vimscript\nCODE:\n```\n:ccl[ose]   Close the quickfix window.\n:lcl[ose]   Close the window showing the location list for the current window.\n```\n\n----------------------------------------\n\nTITLE: Switch Visual Selection End Point in Neovim\nDESCRIPTION: This command switches the active end of the highlighted text, making the current cursor position the new start and moving the cursor to the opposite end, while keeping the selected area consistent.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n\"o\"\n```\n\n----------------------------------------\n\nTITLE: Vim Syntax Utility Scripts\nDESCRIPTION: Utility scripts for HTML conversion, color testing, highlight inspection, and whitespace visualization in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/syntax/README.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n2html.vim      # Converts highlighted file to HTML\ncolortest.vim  # Check color names and screen display\nhitest.vim     # View current highlight settings\nwhitespace.vim # View Tabs and Spaces\n```\n\n----------------------------------------\n\nTITLE: Regex Engine Selection in Vim\nDESCRIPTION: Shows syntax for forcing specific regex engine selection in patterns\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\\%#=0\n\\%#=1\n\\%#=2\n```\n\n----------------------------------------\n\nTITLE: File System Write Operation in Lua\nDESCRIPTION: Writes data to a file descriptor at optional offset. Equivalent to pwritev(2). Returns number of bytes written.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_48\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_write({fd}, {data} [, {offset} [, {callback}]])\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruler Format in Vim\nDESCRIPTION: Example showing how to set a custom ruler format with a specific width of 15 characters. This ruler will display the cursor's column position, virtual column position, and the file position as a percentage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_56\n\nLANGUAGE: vim\nCODE:\n```\nset rulerformat=%15(%c%V\\ %p%%%)\n```\n\n----------------------------------------\n\nTITLE: Vim Register Mapping Command\nDESCRIPTION: Disables middle mouse button paste functionality in both normal and insert modes to prevent accidental pasting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:map <MiddleMouse> <Nop>\n:imap <MiddleMouse> <Nop>\n```\n\n----------------------------------------\n\nTITLE: Setting file suffixes priority in Vim\nDESCRIPTION: Configures the 'suffixes' option to set priority for files with specific extensions when multiple files match a wildcard.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_72\n\nLANGUAGE: vim\nCODE:\n```\nset suffixesadd=.java\n```\n\n----------------------------------------\n\nTITLE: Using fnamemodify() Function in Vim Script\nDESCRIPTION: Demonstrates the fnamemodify() function which modifies a file name according to the specified modifiers. In this example, it extracts the directory path (:p:h) of a file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_76\n\nLANGUAGE: vim\nCODE:\n```\necho fnamemodify(\"main.c\", \":p:h\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Syntax Synchronization Lines\nDESCRIPTION: This snippet allows configuration of the number of lines Vim synchronizes syntax to before the first displayed line. Set the 'html_minlines' variable to the desired number in your vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_54\n\nLANGUAGE: vim\nCODE:\n```\n\t:let html_minlines = 500\n```\n\n----------------------------------------\n\nTITLE: Checking the File Format in Vim\nDESCRIPTION: This command displays the current value of the 'fileformat' option, showing which file format Vim has detected for the currently edited file. It's useful for verifying that Vim has correctly identified the file format (e.g., unix, dos, mac).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n\t:set fileformat?\n```\n\n----------------------------------------\n\nTITLE: Defining Vim Syntax Cluster Groups\nDESCRIPTION: Examples showing how to define and use syntax clusters to group related syntax items\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_170\n\nLANGUAGE: vim\nCODE:\n```\n:syntax match Thing \"# [^#]\\+ #\" contains=@ThingMembers\n:syntax cluster ThingMembers contains=ThingMember1,ThingMember2\n```\n\n----------------------------------------\n\nTITLE: Customizing Syntax Colors in Vim\nDESCRIPTION: Example of customizing syntax highlighting colors for comments\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:highlight Comment ctermfg=green guifg=green\n```\n\n----------------------------------------\n\nTITLE: Setting Language for Menus in Vim - Vimscript\nDESCRIPTION: This code snippet shows how to set the language for menus in Vim. You can switch to English menus or specify a different language using the 'langmenu' option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_1\n\nLANGUAGE: Vim\nCODE:\n```\n:set langmenu=none\n```\n\nLANGUAGE: Vim\nCODE:\n```\n:set langmenu=nl_NL.ISO_8859-1\n```\n\nLANGUAGE: Vim\nCODE:\n```\n:source $VIMRUNTIME/delmenu.vim\n```\n\nLANGUAGE: Vim\nCODE:\n```\n:set langmenu=de_DE.ISO_8859-1\n```\n\nLANGUAGE: Vim\nCODE:\n```\n:source $VIMRUNTIME/menu.vim\n```\n\n----------------------------------------\n\nTITLE: Search Range Examples in Vim\nDESCRIPTION: Examples of using search() with stopline parameter to restrict search range to visible window area\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_213\n\nLANGUAGE: vim\nCODE:\n```\nlet match = search('(', 'b', line(\"w0\"))\nlet end = search('END', '', line(\"w$\"))\n```\n\n----------------------------------------\n\nTITLE: Opening Help in a New Tab\nDESCRIPTION: Shows how to open a help topic in a new tab page. This command opens the help for 'gt' in a new tab.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\n:tab help gt\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Entries with Script-Local Functions in Vim\nDESCRIPTION: Example of creating a menu entry that calls a script-local function using <SID> prefix.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\nnoremenu <script> Plugin.Add\\ Correction      <SID>Add\n```\n\n----------------------------------------\n\nTITLE: Copying Plugin to Global Plugin Directory - Vim\nDESCRIPTION: This snippet demonstrates the command used to copy a plugin file into the global plugin directory, allowing for immediate use of its functionality within Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_7\n\nLANGUAGE: Vim\nCODE:\n```\ncp /tmp/yourplugin.vim ~/.local/share/nvim/site/plugin\n```\n\n----------------------------------------\n\nTITLE: Finding local identifiers in the current file (Vim)\nDESCRIPTION: This snippet shows how to search for the first place where the word under the cursor is used in the current file using the `gD` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\n\"gD\"\n```\n\n----------------------------------------\n\nTITLE: Enabling PL/SQL Folding in Neovim\nDESCRIPTION: This command sets the `g:plsql_fold` variable to `1`, enabling syntax folding for PL/SQL filetypes. Requires the plsql plugin to be installed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n\t:let g:plsql_fold = 1\n```\n\n----------------------------------------\n\nTITLE: Customizing Window Highlighting in Neovim\nDESCRIPTION: This VimL snippet shows how to use the 'winhighlight' option to set different highlight groups for active and non-active windows. It overrides the Normal highlight group with custom highlight groups MyNormal and MyNormalNC.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_86\n\nLANGUAGE: viml\nCODE:\n```\nset winhighlight=Normal:MyNormal,NormalNC:MyNormalNC\n```\n\n----------------------------------------\n\nTITLE: Resetting Syntax Highlighting to Defaults\nDESCRIPTION: Command to reset syntax highlighting colors to their defaults. Note that this affects only colors, not syntax items, and will override colors from your vimrc and color schemes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_203\n\nLANGUAGE: vim\nCODE:\n```\n:syntax reset\n```\n\n----------------------------------------\n\nTITLE: File Operation Events in Neovim\nDESCRIPTION: Documents events related to file operations like FileAppendCmd, FileReadCmd, FileWriteCmd, and their Pre/Post variants.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nFileAppendCmd\nFileAppendPost\nFileAppendPre\nFileReadCmd\nFileReadPost\nFileReadPre\nFileWriteCmd\nFileWritePost\nFileWritePre\n```\n\n----------------------------------------\n\nTITLE: Printf Positional Arguments Examples in Vim\nDESCRIPTION: Shows how to use positional arguments in printf to control argument order and formatting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_194\n\nLANGUAGE: vim\nCODE:\n```\necho printf(\"In The Netherlands, vim's creator's name is: %1$s %2$s\", \"Bram\", \"Moolenaar\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho printf(\"In Belgium, vim's creator's name is: %2$s %1$s\", \"Bram\", \"Moolenaar\")\n```\n\n----------------------------------------\n\nTITLE: Generating Local Tags for Help Files - Vim\nDESCRIPTION: This snippet describes how to generate a local tags file for a help file associated with a plugin, making it easier to navigate to the relevant documentation within Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_10\n\nLANGUAGE: Vim\nCODE:\n```\n:helptags ~/.local/share/nvim/site/doc\n```\n\n----------------------------------------\n\nTITLE: Disabling TreeSitter Query Capture in Lua\nDESCRIPTION: Demonstrates how to disable a specific capture in a TreeSitter query. This example disables the @variable.parameter capture in the vimdoc highlights query.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nlocal query = vim.treesitter.query.get('vimdoc', 'highlights')\nquery.query:disable_capture(\"variable.parameter\")\nvim.treesitter.get_parser():parse()\n```\n\n----------------------------------------\n\nTITLE: Autocommand with Home Directory in Vimscript\nDESCRIPTION: This demonstrates how to use `~` to represent the home directory in an autocommand pattern. The first autocommand sources the `init.vim` file after it's written and the second set a file as readonly when the user try to open file under the `~archive/*` path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n \":autocmd BufWritePost ~/.config/nvim/init.vim   so <afile>\\n\\t:autocmd BufRead ~archive/*      set readonly\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Folding for Baan Syntax in Vim\nDESCRIPTION: This snippet demonstrates how to enable syntax folding for Baan code in Vim. By setting specific variables in the init.vim, developers can enable folding at function, block, and SQL levels. It notes that some folding can be CPU intensive if complex levels are enabled.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_8\n\nLANGUAGE: Vim Script\nCODE:\n```\n:let baan_fold=1\n:let baan_fold_block=1\n:let baan_fold_sql=1\n```\n\n----------------------------------------\n\nTITLE: Using doautoall with Autocommand Groups in Vim\nDESCRIPTION: Example demonstrating how doautoall applies autocommands to all loaded buffers, showing the relationship between the autocommand pattern and buffer application.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_29\n\nLANGUAGE: viml\nCODE:\n```\naugroup mine\n  autocmd!\n  autocmd FileType * echo expand('<amatch>')\naugroup END\ndoautoall mine FileType Loaded-Buffer\n```\n\n----------------------------------------\n\nTITLE: Starting Vim Commands and Options\nDESCRIPTION: Command-line options for starting Vim, including file specification, view options, recovery, swap settings, and script handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nvim [options] {file} ..   start editing one or more files\nvim [options] -           read file from stdin\nvim [options] -t {tag}    edit the file associated with {tag}\nvim [options] -q [fname]  start editing in QuickFix mode, display the first error\n\n+[num]              put the cursor at line [num] (default: last line)\n+{command}          execute {command} after loading the file\n+/{pat} {file} ..   put the cursor at the first occurrence of {pat}\n-e                  Ex mode, start vim in Ex mode\n-R                  Read-only mode, implies -n\n-m                  modifications not allowed (resets 'write' option)\n-d                  diff-mode\n-b                  binary mode\n-l                  lisp mode\n-A                  Arabic mode ('arabic' is set)\n-H                  Hebrew mode (Hebrew keymap & 'rightleft' are set)\n-V                  Verbose, give informative messages\n-r                  give list of swap files\n-r {file} ..        recover aborted edit session\n-n                  do not create a swap file\n-o [num]            open [num] windows (default: one for each file)\n-s {scriptin}       first read commands from the file {scriptin}\n-w {scriptout}      write typed chars to file {scriptout} (append)\n-W {scriptout}      write typed chars to file {scriptout} (overwrite)\n-u {vimrc}          read inits from {vimrc} instead of other inits\n-i {shada}          read info from {shada} instead of other files\n--                  end of options, other arguments are file names\n--help              show list of arguments and exit\n--version           show version info and exit\n-                   read file from stdin\n```\n\n----------------------------------------\n\nTITLE: Using globpath with list return format in Vim\nDESCRIPTION: Example of using globpath() with the list return format (fourth parameter set to 1) to get results as a Vim List rather than a newline-separated string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_115\n\nLANGUAGE: vim\nCODE:\n```\necho globpath(&rtp, \"syntax/c.vim\", 0, 1)\n```\n\n----------------------------------------\n\nTITLE: Enabling Doxygen Syntax Highlighting for C/C++/PHP Files\nDESCRIPTION: Configures Vim to automatically apply Doxygen syntax highlighting to C, C++, C#, IDL, and PHP files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_27\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:load_doxygen_syntax=1\n```\n\n----------------------------------------\n\nTITLE: Creating Folds for C-style Comments in Vim\nDESCRIPTION: An example of using fold level changes to create folds for multi-line C comments. The expression uses 'a1' to start a fold when a '/*' is found and 's1' to end the fold after a line containing '*/'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nif match(thisline, '/\\*') >= 0\n  return 'a1'\nelseif match(thisline, '\\*/') >= 0\n  return 's1'\nelse\n  return '='\nendif\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Existence in VimL\nDESCRIPTION: Demonstrates the use of the exists() function to check for a variable's existence and conditionally assign a value if it's undefined. It ensures that variables maintain continuity throughout various script executions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_5\n\nLANGUAGE: VimL\nCODE:\n```\n:if !exists(\"s:call_count\")\n:  let s:call_count = 0\n:endif\n:let s:call_count = s:call_count + 1\n:echo \"called\" s:call_count \"times\"\n```\n\n----------------------------------------\n\nTITLE: For Loop Over String Characters in Vim\nDESCRIPTION: Demonstrates iterating over each character in a string using a for loop.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_39\n\nLANGUAGE: vim\nCODE:\n```\nfor c in text\n  echo 'This character is ' .. c\nendfor\n```\n\n----------------------------------------\n\nTITLE: Setting variable tab width in Vim\nDESCRIPTION: Example of configuring vartabstop to define different widths for each tab position, making the first tab 4 spaces wide, second 20 spaces, third 10 spaces, and all subsequent tabs 8 spaces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_78\n\nLANGUAGE: viml\nCODE:\n```\nset vartabstop=4,20,10,8\n```\n\n----------------------------------------\n\nTITLE: Exception Hierarchy Implementation\nDESCRIPTION: Demonstrates implementing exception hierarchies and parameterized exceptions in Vim script with mathematical and I/O error handling examples.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_140\n\nLANGUAGE: vim\nCODE:\n```\n:function! CheckRange(a, func)\n:  if a:a < 0\n:    throw \"EXCEPT:MATHERR:RANGE(\" .. a:func .. \")\"\n:  endif\n:endfunction\n\n:function! Add(a, b)\n:  call CheckRange(a:a, \"Add\")\n:  call CheckRange(a:b, \"Add\")\n:  let c = a:a + a:b\n:  if c < 0\n:    throw \"EXCEPT:MATHERR:OVERFLOW\"\n:  endif\n:  return c\n:endfunction\n\n:function! Div(a, b)\n:  call CheckRange(a:a, \"Div\")\n:  call CheckRange(a:b, \"Div\")\n:  if (a:b == 0)\n:    throw \"EXCEPT:MATHERR:ZERODIV\"\n:  endif\n:  return a:a / a:b\n:endfunction\n\n:function! Write(file)\n:  try\n:    execute \"write\" fnameescape(a:file)\n:  catch /^Vim(write):/\n:    throw \"EXCEPT:IO(\" .. getcwd() .. \", \" .. a:file .. \"):WRITEERR\"\n:  endtry\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Using maparg() Function to Remap Keys in Vim\nDESCRIPTION: Shows how to use the maparg() function to retrieve an existing key mapping and use it to create a new mapping that includes the original functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_157\n\nLANGUAGE: vim\nCODE:\n```\nexe 'nnoremap <Tab> ==' .. maparg('<Tab>', 'n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Verilog Indentation in Vim\nDESCRIPTION: This snippet provides configuration for Verilog code indentation in Vim. By setting the 'b:verilog_indent_modules' variable, users can enable or disable indentation for module blocks. Additional autocmd statements demonstrate applying these settings selectively for Verilog files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_13\n\nLANGUAGE: VimL\nCODE:\n```\nlet b:verilog_indent_modules = 1\n:unlet b:verilog_indent_modules\nau BufReadPost * if exists(\"b:current_syntax\")\nau BufReadPost *   if b:current_syntax == \"verilog\"\nau BufReadPost *     let b:verilog_indent_modules = 1\nau BufReadPost *   endif\nau BufReadPost * endif\n```\n\n----------------------------------------\n\nTITLE: Using fnameescape() Function in Vim Script\nDESCRIPTION: Demonstrates the fnameescape() function which escapes special characters in a string to make it safe for use as a filename in commands. Characters like %, |, spaces, and others are escaped with backslashes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_75\n\nLANGUAGE: vim\nCODE:\n```\nlet fname = '+some str%nge|name'\nexe \"edit \" .. fnameescape(fname)\n```\n\nLANGUAGE: vim\nCODE:\n```\nedit \\+some\\ str\\%nge\\|name\n```\n\n----------------------------------------\n\nTITLE: Ruby VIM Module Usage Examples\nDESCRIPTION: Provides examples of using the VIM module in Ruby to interact with Neovim, including executing commands, accessing windows and buffers, and manipulating text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nprint \"Hello\"                        # displays a message\nVIM.command(cmd)                    # execute an Ex command\nnum = VIM::Window.count             # gets the number of windows\nw = VIM::Window[n]                  # gets window \"n\"\ncw = VIM::Window.current            # gets the current window\nnum = VIM::Buffer.count             # gets the number of buffers\nb = VIM::Buffer[n]                  # gets buffer \"n\"\ncb = VIM::Buffer.current            # gets the current buffer\nw.height = lines                    # sets the window height\nw.cursor = [row, col]               # sets the window cursor position\npos = w.cursor                      # gets an array [row, col]\nname = b.name                       # gets the buffer file name\nline = b[n]                         # gets a line from the buffer\nnum = b.count                       # gets the number of lines\nb[n] = str                          # sets a line in the buffer\nb.delete(n)                         # deletes a line\nb.append(n, str)                    # appends a line after n\nline = VIM::Buffer.current.line     # gets the current line\nnum = VIM::Buffer.current.line_number # gets the current line number\nVIM::Buffer.current.line = \"test\"   # sets the current line number\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Sync with ccomment in Vim\nDESCRIPTION: This snippet demonstrates how to configure syntax syncing using the 'ccomment' argument in Vim. It sets up syncing for C-style comments, with an option to specify an alternate group name.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_176\n\nLANGUAGE: viml\nCODE:\n```\n:syntax sync ccomment\n\n:syntax sync ccomment javaComment\n```\n\n----------------------------------------\n\nTITLE: Exiting Vim Commands\nDESCRIPTION: Commands for exiting Vim with various behaviors for saving changes. Includes commands like :xit, ZZ, ZQ, and options for writing all buffers when exiting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:x[it][!] [file]     # like \":wq\" but write only when changes have been made\nZZ                  # same as \":x\"\nZQ                  # same as \":q!\"\n:xa[ll][!]  or :wqall[!]  # write all changed buffers and exit\n:st[op][!]         # suspend Vim or start new shell\nCTRL-Z             # same as \":stop\"\n```\n\n----------------------------------------\n\nTITLE: Setting Window Variables in Vim\nDESCRIPTION: Examples of using settabwinvar() and setwinvar() functions to set window-specific variables and options in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_231\n\nLANGUAGE: vim\nCODE:\n```\ncall settabwinvar(1, 1, \"&list\", 0)\ncall settabwinvar(3, 2, \"myvar\", \"foobar\")\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall setwinvar(1, \"&list\", 0)\ncall setwinvar(2, \"myvar\", \"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Starting Nvim Server Example\nDESCRIPTION: Example command showing how to start an Nvim server listening on a named pipe at a specific location.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvim --listen ~/.cache/nvim/server.pipe\n```\n\n----------------------------------------\n\nTITLE: VimLeave Autocommand with Dying Check in Neovim VimL\nDESCRIPTION: This snippet shows an autocommand that checks if Vim is terminating abnormally using the v:dying variable. It echoes a message if a deadly signal was caught.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\n:au VimLeave * if v:dying | echo \"\\nAAAAaaaarrrggghhhh!!!\\n\" | endif\n```\n\n----------------------------------------\n\nTITLE: Remote File Editing Example\nDESCRIPTION: Example command demonstrating how to edit a file in a remote Nvim server instance using the --remote flag.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvim --server ~/.cache/nvim/server.pipe --remote file.txt\n```\n\n----------------------------------------\n\nTITLE: Inserting Items in Lists or Blobs in Vim\nDESCRIPTION: Demonstrates how to use the insert() function to add elements to a List or Blob. The function inserts an item either at the start of the list (default), before a specific index, or at a specific position using a negative index.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_138\n\nLANGUAGE: vim\nCODE:\n```\nlet mylist = insert([2, 3, 5], 1)\ncall insert(mylist, 4, -1)\ncall insert(mylist, 6, len(mylist))\n```\n\n----------------------------------------\n\nTITLE: Syntax Cluster Definition in Vim\nDESCRIPTION: Shows how to create and use syntax clusters to group related syntax elements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n:syntax cluster xState contains=xNumber,xIdent\n:syntax match xFor /^for.*/ contains=@xState\n:syntax match xIf /^if.*/ contains=@xState\n:syntax match xWhile /^while.*/ contains=@xState\n```\n\n----------------------------------------\n\nTITLE: Combined Concat Pattern Example in Vim\nDESCRIPTION: Shows a pattern that matches lines containing both specified strings\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n.*Peter\\&.*Bob\n```\n\n----------------------------------------\n\nTITLE: Typing Unicode Characters in Vim\nDESCRIPTION: Demonstrates how to input Unicode characters using hexadecimal notation when system input methods do not support UTF-8 directly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-V u 1234\n```\n\n----------------------------------------\n\nTITLE: Deleting Variables in VimL\nDESCRIPTION: Illustrates how to delete a variable using the :unlet command to free up memory. Includes an example using script-local variable deletion with an optional bang (!) to avoid errors if the variable does not exist.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_4\n\nLANGUAGE: VimL\nCODE:\n```\n:unlet s:count\n:unlet! s:count\n```\n\n----------------------------------------\n\nTITLE: File System Read Operation in Lua\nDESCRIPTION: Reads data from a file descriptor with specified size and optional offset. Equivalent to preadv(2). Returns read data or empty string for EOF.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_47\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_read({fd}, {size} [, {offset} [, {callback}]])\n```\n\n----------------------------------------\n\nTITLE: Setting Diff Context Lines (VimL)\nDESCRIPTION: Command to set the number of context lines shown around differences in diff mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\n:set diffopt=filler,context:3\n```\n\n----------------------------------------\n\nTITLE: Setting a Highlight Group - Lua\nDESCRIPTION: Updates or creates a highlight group definition in Neovim. Unlike the :highlight command, this function completely replaces existing definitions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_hl({ns_id}, {name}, {val})\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Memory Information with LibUV in Lua\nDESCRIPTION: Functions for querying available system memory. Includes methods to get free memory, constrained memory, and available memory to the process in bytes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_77\n\nLANGUAGE: lua\nCODE:\n```\nuv.get_constrained_memory()                        *uv.get_constrained_memory()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.get_available_memory()                            *uv.get_available_memory()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.resident_set_memory()                              *uv.resident_set_memory()*\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby Syntax Highlighting Options in Vim\nDESCRIPTION: Controls operator highlighting, whitespace error detection, code folding, performance optimizations, and string spellchecking for Ruby files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_108\n\nLANGUAGE: vim\nCODE:\n```\nlet ruby_operators = 1\nlet ruby_space_errors = 1\nlet ruby_fold = 1\nlet ruby_foldable_groups = 'if case %'\nlet ruby_no_expensive = 1\nlet ruby_minlines = 100\nlet ruby_spellcheck_strings = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring PApp Syntax HTML Inclusion\nDESCRIPTION: Enables HTML syntax highlighting inside phtml sections of PApp files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_95\n\nLANGUAGE: vim\nCODE:\n```\n:let papp_include_html=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcharm for Mapped Completions\nDESCRIPTION: Sets up wildcharm for use in mappings that invoke completion mode, with an example of session file completion mapping.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_81\n\nLANGUAGE: vim\nCODE:\n```\nset wcm=<C-Z>\ncnoremap ss so $vim/sessions/*.vim<C-Z>\n```\n\n----------------------------------------\n\nTITLE: Navigating Changes in Diff Mode\nDESCRIPTION: Demonstrates commands for jumping between changes in diff mode. These commands allow quick navigation to next and previous differences.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n]c\n[c\n```\n\n----------------------------------------\n\nTITLE: Starting Function Profiling in Vim/Neovim\nDESCRIPTION: Commands to start profiling and direct the output to a temporary file. This snippet demonstrates how to begin profiling a specific function named MyFunc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\nprofile start /tmp/vimprofile\nprofile func MyFunc\n```\n\n----------------------------------------\n\nTITLE: Controlling Search Wrapping in Vim\nDESCRIPTION: Command to disable search wrapping in Vim. When disabled, searches will stop at the end or beginning of the file instead of wrapping around to continue from the opposite end.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set nowrapscan\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Grepadd with Bufdo in Vim\nDESCRIPTION: This Vim script demonstrates how to use the `grepadd!` command in conjunction with `bufdo` to grep through all buffers. The `setqflist([])` command ensures an empty error list, and the `try`/`catch` block handles the `E480` error that might occur if a file does not contain a match.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\n:call setqflist([])\n:bufdo grepadd! something %\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining Function Name from Funcref in Vimscript\nDESCRIPTION: This snippet shows how to obtain the name of the function referenced by a Funcref using the `string()` function. This returns the function name as a string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n\t:let func = string(Fn)\n```\n\n----------------------------------------\n\nTITLE: Command Expansion with expandcmd()\nDESCRIPTION: Examples showing how to use expandcmd() to expand special items in command strings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_63\n\nLANGUAGE: vim\nCODE:\n```\necho expandcmd('make %<.o')\n```\n\nLANGUAGE: vim\nCODE:\n```\necho expandcmd('make %<.o', {'errmsg': v:true})\n```\n\n----------------------------------------\n\nTITLE: Setting guifont for GUI Vim\nDESCRIPTION: Configures the 'guifont' option to set the font used in GUI Vim. This example sets multiple font options, allowing Vim to try each font in order until a valid one is found.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_24\n\nLANGUAGE: viml\nCODE:\n```\nset guifont=Screen15,\\ 7x13,font\\,with\\,commas\n```\n\n----------------------------------------\n\nTITLE: String to Number Conversion in Vimscript\nDESCRIPTION: This demonstrates string to number conversion in Vimscript. If a string starts with digits, those digits are converted to a number. If the string does not start with digits, the result is zero.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n\tString \"456\"\t-->\tNumber 456 ~\n\tString \"6bar\"\t-->\tNumber 6 ~\n\tString \"foo\"\t-->\tNumber 0 ~\n\tString \"0xf1\"\t-->\tNumber 241 ~\n\tString \"0100\"\t-->\tNumber 64 ~\n\tString \"0o100\"\t-->\tNumber 64 ~\n\tString \"0b101\"\t-->\tNumber 5 ~\n\tString \"-8\"\t-->\tNumber -8 ~\n\tString \"+8\"\t-->\tNumber 0 ~\n```\n\n----------------------------------------\n\nTITLE: Search Count Status Line Integration\nDESCRIPTION: Function to display search match counts in the status line with various formatting options\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_216\n\nLANGUAGE: vim\nCODE:\n```\nfunction! LastSearchCount() abort\n  let result = searchcount(#{recompute: 0})\n  if empty(result)\n    return ''\n  endif\n  if result.incomplete ==# 1     \" timed out\n    return printf(' /%s [?/??]', @/)\n  elseif result.incomplete ==# 2 \" max count exceeded\n    if result.total > result.maxcount &&\n    \\  result.current > result.maxcount\n      return printf(' /%s [>%d/>%d]', @/,\n      \\             result.current, result.total)\n    elseif result.total > result.maxcount\n      return printf(' /%s [%d/>%d]', @/,\n      \\             result.current, result.total)\n    endif\n  endif\n  return printf(' /%s [%d/%d]', @/,\n  \\             result.current, result.total)\nendfunction\nlet &statusline ..= '%{LastSearchCount()}'\n```\n\n----------------------------------------\n\nTITLE: Accessing Netrw Internal Variables with Expose Function\nDESCRIPTION: Example of using netrw#Expose() to access internal netrw script-local variables, specifically retrieving the marked file list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_50\n\nLANGUAGE: vim\nCODE:\n```\nlet netrwmarkfilelist= netrw#Expose(\"netrwmarkfilelist\")\n```\n\n----------------------------------------\n\nTITLE: Basic Errorformat Pattern Example - Python\nDESCRIPTION: Error format pattern for parsing Python test failure output, capturing file path, line number and error message.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_61\n\nLANGUAGE: vim\nCODE:\n```\n:set efm=%C\\ %.%#,%A\\ \\ File\\ \\\"%f\"\\\\,\\ line\\ %l%.%#,%Z%[%^\\ ]%\\\\@=%m\n```\n\n----------------------------------------\n\nTITLE: Scrolling Upwards in Vim\nDESCRIPTION: Commands to move the edit window upwards in the buffer, showing more lines above. Includes CTRL-Y, CTRL-U, PageUp, CTRL-B, and z^ commands with their behaviors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-Y          Scroll window [count] lines upwards in the buffer.\nCTRL-U          Scroll window Upwards in the buffer.\n<S-Up> or <PageUp> or CTRL-B    Scroll window [count] pages Backwards.\nz^              Redraw with line above window at the bottom.\n```\n\n----------------------------------------\n\nTITLE: Checking for unfound include files (Vim)\nDESCRIPTION: This snippet shows how to check for included files that cannot be found in the 'path' option using the `:checkpath` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n\":checkpath\"\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Propagation Example in Vim Script\nDESCRIPTION: Demonstrates how exceptions propagate to the caller of a command, showing that when an exception is thrown in a function called from a conditional, neither branch of the conditional is executed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_122\n\nLANGUAGE: vim\nCODE:\n```\n:if Foo(\"arrgh\")\n:  echo \"then\"\n:else\n:  echo \"else\"\n:endif\n```\n\n----------------------------------------\n\nTITLE: Checking If Buffer is Listed in Neovim using Vim Script\nDESCRIPTION: The 'buflisted' function determines if a buffer is listed and returns 1 if it is, otherwise returns 0, using a similar argument structure as 'bufexists'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nbuflisted({buf})\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Style Comments in Vim\nDESCRIPTION: Configures Vim to recognize C++ style single-line comments starting with //\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:set comments=://\n```\n\n----------------------------------------\n\nTITLE: Setting Diff Context for Fold Display in Vim\nDESCRIPTION: Configuration example for the 'diff' folding method that specifies the context (number of unchanged lines) to show around changes. This uses the diffopt option to set a context of 8 lines around each change.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:set diffopt=filler,context:8\n```\n\n----------------------------------------\n\nTITLE: Viewing Neovim Log File Location\nDESCRIPTION: Vim command to display the location of Neovim's log file using the NVIM_LOG_FILE environment variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n:echo $NVIM_LOG_FILE\n```\n\n----------------------------------------\n\nTITLE: Clearing the quickfix list in Vim/Neovim\nDESCRIPTION: Example of using setqflist() to clear the current quickfix list by passing an empty list with the 'r' (replace) action.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_226\n\nLANGUAGE: viml\nCODE:\n```\ncall setqflist([], 'r')\n```\n\n----------------------------------------\n\nTITLE: License Plate Pattern Matching\nDESCRIPTION: Different approaches to match California license plate format with one digit, three uppercase letters, and three digits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n/\\d\\u\\u\\u\\d\\d\\d\n/\\d\\u\\{3}\\d\\{3}\n/[0-9][A-Z]\\{3}[0-9]\\{3}\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality in Vimscript\nDESCRIPTION: The assert_equal() function compares two values for equality. If they are not equal, it adds an error message to v:errors. This is useful for writing tests in Vimscript.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_9\n\nLANGUAGE: vimscript\nCODE:\n```\ncall assert_equal('foo', 'bar', 'baz')\n```\n\n----------------------------------------\n\nTITLE: Jumping to a numbered match in the [I list (Vim)\nDESCRIPTION: This snippet shows how to jump to a specific numbered item in the list produced by `[I` by typing the number followed by `[<Tab>`.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_31\n\nLANGUAGE: vim\nCODE:\n```\n\"3[<Tab>\"\n```\n\n----------------------------------------\n\nTITLE: Testing if an Option Exists in Vim Script\nDESCRIPTION: Code snippets demonstrating how to test if an option is valid or supported in Vim script. The first checks if an option exists, while the second verifies if it's actually supported rather than hidden.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_9\n\nLANGUAGE: viml\nCODE:\n```\nif exists('&foo')\n```\n\nLANGUAGE: viml\nCODE:\n```\nif exists('+foo')\n```\n\n----------------------------------------\n\nTITLE: Working Directory Access in Vim\nDESCRIPTION: Examples showing equivalent ways to get the current working directory using getcwd() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_90\n\nLANGUAGE: vim\nCODE:\n```\ngetcwd(0)\ngetcwd(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Using Confirmation Dialog when Editing a New File in Vim\nDESCRIPTION: This snippet demonstrates how to use the confirmation dialog when attempting to edit a new file while the current buffer has unsaved changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:confirm edit foo.txt\n```\n\n----------------------------------------\n\nTITLE: Jumping to the next #else or #endif (Vim)\nDESCRIPTION: This snippet shows how to jump forward to the next `#else` or `#endif` using the `]#` command, skipping any nested `#if` blocks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n\"]#\"\n```\n\n----------------------------------------\n\nTITLE: Fortran Indent Configuration with Buffer Commands\nDESCRIPTION: This snippet provides instructions for configuring indentation settings specific to Fortran code in Vim. It includes commands for setting buffer flags that dictate how loops and program units are indented based on file types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_6\n\nLANGUAGE: Vim\nCODE:\n```\nlet fortran_do_enddo=1\nau! BufRead,BufNewFile *.f90 let b:fortran_do_enddo=1\n```\n\n----------------------------------------\n\nTITLE: Vim List and Dictionary Manipulation\nDESCRIPTION: Examples of unletting (removing) items from Lists and Dictionaries\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_100\n\nLANGUAGE: vim\nCODE:\n```\n:unlet list[3]\t  \" remove fourth item\n:unlet list[3:]   \" remove fourth item to last\n:unlet dict['two']\n:unlet dict.two\n```\n\n----------------------------------------\n\nTITLE: Executing Commands Without Affecting Search History in Neovim\nDESCRIPTION: This snippet demonstrates the :keeppatterns command, which allows executing a command without modifying the search history or last substitute pattern in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:keepp[atterns] {command}\n```\n\n----------------------------------------\n\nTITLE: Conditional dot command execution\nDESCRIPTION: This snippet conditionally executes a dot command based on a context. It gets the 'virtualedit' option from either a 'save' context or an 'a:context', depending on 'a:context.dot_command'. It then sets 'a:context.dot_command' to `v:true` within a `try...finally` block to ensure it's always set, even if an error occurs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_28\n\nLANGUAGE: Vim Script\nCODE:\n```\nlet [&l:virtualedit, &g:virtualedit] = get(a:context.dot_command ? save : a:context, 'virtualedit')\nlet a:context.dot_command = v:true\n```\n\n----------------------------------------\n\nTITLE: Setting the Make Program in Vim\nDESCRIPTION: Commands to configure the program used by :make, allowing customization for different compilers and build systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set makeprg=nmake\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set makeprg=nmake\\ -f\\ project.mak\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set makeprg=make\\ %:S\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set makeprg=make\\ %:r:S.o\n```\n\n----------------------------------------\n\nTITLE: Mapping Rare Word Addition in Vim\nDESCRIPTION: Example of mapping keys to add words as rare to the spell file and internal word list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_6\n\nLANGUAGE: vimdoc\nCODE:\n```\nnnoremap z?  :exe ':spellrare  ' .. expand('<cWORD>')<CR>\nnnoremap z/  :exe ':spellrare! ' .. expand('<cWORD>')<CR>\n```\n\n----------------------------------------\n\nTITLE: Optimizing color terminal performance in Neovim\nDESCRIPTION: This code snippet shows how to optimize Neovim's performance in slow color terminals by preventing redundant drawing of whitespace. By setting the `NonText` highlight group's `cterm` and `ctermfg` attributes to `NONE`, the default colors are used, allowing Neovim to optimize drawing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nhi NonText cterm=NONE ctermfg=NONE\n```\n\n----------------------------------------\n\nTITLE: Creating an unlisted buffer in Vim\nDESCRIPTION: This command creates an unlisted buffer, which is not shown in the buffer list and is typically used for temporary purposes like showing help files or remembering file names or marks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_10\n\nLANGUAGE: vimdoc\nCODE:\n```\n:setlocal nobuflisted\n```\n\n----------------------------------------\n\nTITLE: Limiting Sync Search Range in Vim\nDESCRIPTION: This snippet demonstrates how to limit the number of lines searched for a sync point in Vim. It uses the 'maxlines' argument to restrict the search range.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_180\n\nLANGUAGE: viml\nCODE:\n```\n:syntax sync maxlines=100\n```\n\n----------------------------------------\n\nTITLE: Modifying Option Values in Vim Filetype Plugins\nDESCRIPTION: This example demonstrates how to modify option values that are lists of flags or items, preserving existing values and resetting to defaults first.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_46\n\nLANGUAGE: vim\nCODE:\n```\n:setlocal formatoptions& formatoptions+=ro\n```\n\n----------------------------------------\n\nTITLE: Filtering Text Through External Program in Vim\nDESCRIPTION: Using the '!' command to filter lines 1-5 through the external 'sort' program, replacing those lines with the sorted output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n!5Gsort\n```\n\n----------------------------------------\n\nTITLE: Location List Diagnostic Handler\nDESCRIPTION: Example of creating a handler to show diagnostics in the location list window\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diagnostic.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.diagnostic.handlers.loclist = {\n  show = function(_, _, _, opts)\n    opts.loclist.open = opts.loclist.open or false\n    local winid = vim.api.nvim_get_current_win()\n    vim.diagnostic.setloclist(opts.loclist)\n    vim.api.nvim_set_current_win(winid)\n  end\n}\n\nvim.diagnostic.config({\n  loclist = {\n    open = true,\n    severity = { min = vim.diagnostic.severity.WARN },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using File Browser with Split Command in Vim\nDESCRIPTION: This snippet demonstrates how to use the file browser with the split command in Vim. The 'browse' keyword is prepended to the split command to open the file browser.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:browse split\n```\n\n----------------------------------------\n\nTITLE: Creating DiffOrig Command\nDESCRIPTION: Custom command to show differences between the current buffer and the original file\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\ncommand DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis\n      \\ | wincmd p | diffthis\n```\n\n----------------------------------------\n\nTITLE: Basic Cinkeys Configuration for Emacs-style Indentation\nDESCRIPTION: Example configuration for emacs-style indent mode where lines are only indented when pressing Tab instead of automatically on Enter\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set cinkeys=0{,0},:,0#,!<Tab>,!^F\n```\n\n----------------------------------------\n\nTITLE: Typical Netrw Tree Display Usage in Vim\nDESCRIPTION: Demonstrates a common workflow for using Netrw's tree display, including opening files in split windows and navigating between Netrw and file windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\nvim .\n(use i until a tree display shows)\nnavigate to a file\nv  (edit as desired in vertically split window)\nctrl-w h  (to return to the netrw listing)\nP (edit newly selected file in the previous window)\nctrl-w h  (to return to the netrw listing)\nP (edit newly selected file in the previous window)\n...etc...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tree for Range in LanguageTree (Lua)\nDESCRIPTION: Gets the tree that contains a specified range. Takes a range table and optional settings as parameters. Returns a TSTree or nil.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_40\n\nLANGUAGE: lua\nCODE:\n```\nLanguageTree:tree_for_range({range}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Configuring SGML Rendering in Vim\nDESCRIPTION: Setting a user-defined variable to enable custom SGML tag rendering. This allows users to redefine syntax highlighting groups for SGML tags.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_112\n\nLANGUAGE: vim\nCODE:\n```\nlet sgml_my_rendering=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Compiler Options for PyTest\nDESCRIPTION: Example of setting custom command-line options for the PyTest testing framework, adding verbose output and suppressing summary and warnings in the output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_57\n\nLANGUAGE: vim\nCODE:\n```\nlet b:pytest_makeprg_params = \"--verbose --no-summary --disable-warnings\"\n```\n\n----------------------------------------\n\nTITLE: Setting matchpairs for Programming Languages\nDESCRIPTION: Uses an autocommand to set matchpairs for C, C++, and Java files, adding the ability to jump between '=' and ';' in assignment statements with the % command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_51\n\nLANGUAGE: viml\nCODE:\n```\nau FileType c,cpp,java set mps+==:;\n```\n\n----------------------------------------\n\nTITLE: Changing Case to Uppercase in Vim\nDESCRIPTION: Uses the 'gU' operator with 'w' motion to convert the current word to uppercase.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\ngUw\n```\n\n----------------------------------------\n\nTITLE: Disabling Vim Filetype Plugin Mappings\nDESCRIPTION: Configuration to disable default mappings for Vim filetype\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_40\n\nLANGUAGE: vim\nCODE:\n```\nlet g:no_vim_maps = 1\n```\n\n----------------------------------------\n\nTITLE: Using pathshorten() Function in Vim\nDESCRIPTION: Examples of using pathshorten() to abbreviate path components while preserving the filename. The first example uses default length of 1, while the second specifies a length of 2 characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_186\n\nLANGUAGE: vim\nCODE:\n```\necho pathshorten('~/.config/nvim/autoload/file1.vim')\n```\n\nLANGUAGE: vim\nCODE:\n```\necho pathshorten('~/.config/nvim/autoload/file2.vim', 2)\n```\n\n----------------------------------------\n\nTITLE: Toggling Line Numbers in Vim\nDESCRIPTION: Commands to enable and disable line numbers in Vim using the number option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set number\n:set nonumber\n```\n\n----------------------------------------\n\nTITLE: Getting Executable Path in Lua with Libuv\nDESCRIPTION: Returns the path of the current executable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_70\n\nLANGUAGE: lua\nCODE:\n```\nuv.exepath()\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Named Views in Vim\nDESCRIPTION: This snippet shows how to save a view with a custom name and later load it, which can be used to quickly switch between different file configurations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:mkview ~/.config/nvim/main.vim\n```\n\nLANGUAGE: vim\nCODE:\n```\n:source ~/.config/nvim/main.vim\n```\n\n----------------------------------------\n\nTITLE: Disabling Spell Checking in LaTeX Comments with VimL\nDESCRIPTION: Configuration to disable spell checking only in comments within LaTeX documents. Useful when comments contain code or other content that shouldn't be spell-checked.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_133\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_comment_nospell= 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Special Characters in listchars\nDESCRIPTION: Sets listchars to display tabs, end-of-line markers, and non-breaking spaces with special characters, improving visibility of these otherwise invisible characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_45\n\nLANGUAGE: viml\nCODE:\n```\nset lcs=tab:>-,eol:<,nbsp:%\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Editing Mode for Table Editing\nDESCRIPTION: Command to enable virtual editing mode, which allows the cursor to be placed anywhere in the display, including positions where no text exists, making table editing easier.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nset virtualedit=all\n```\n\n----------------------------------------\n\nTITLE: Clearing All Dictionary Entries in Vim\nDESCRIPTION: Shows how to remove all entries from a dictionary by using filter() with a false condition.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_57\n\nLANGUAGE: vim\nCODE:\n```\ncall filter(dict, 0)\n```\n\n----------------------------------------\n\nTITLE: Combined Highlight Attributes Example\nDESCRIPTION: Example showing combined highlighting attributes including terminal color, GUI color and GUI attributes\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_187\n\nLANGUAGE: vim\nCODE:\n```\n:hi Comment\tctermfg=Cyan guifg=#80a0ff gui=bold\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Diagnostic Namespace in Lua\nDESCRIPTION: This Lua code adjusts the configuration for LSP diagnostics by specifying a diagnostic namespace using the 'vim.lsp.diagnostic.get_namespace' method. This requires an active LSP setup with a valid client ID. Key parameters include the configuration object and the client_namespace retrieved with a client ID, which helps in segmenting diagnostics per LSP client, with no direct visual output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvim.diagnostic.config(config, vim.lsp.diagnostic.get_namespace(client_id))\n```\n\n----------------------------------------\n\nTITLE: Buffer Event Example - Lua Callback\nDESCRIPTION: Example showing how to access new text content inside a buffer update callback using nvim_buf_get_lines API call.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_buf_get_lines(buf, firstline, new_lastline, true)\n```\n\n----------------------------------------\n\nTITLE: Jumping to a match in the [I list (Vim)\nDESCRIPTION: This snippet shows how to jump to the first item in the list produced by `[I` using `[<Tab>`.  `[ CTRL-I` also works.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_30\n\nLANGUAGE: vim\nCODE:\n```\n\"[<Tab>\"\n```\n\n----------------------------------------\n\nTITLE: Keepjumps Example in Vim\nDESCRIPTION: Demonstrates how to use keepjumps command to prevent adding positions to the jumplist when making automatic changes, such as updating a timestamp in the first line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\n:let lnum = line(\".\")\n:keepjumps normal gg\n:call SetLastChange()\n:keepjumps exe \"normal \" .. lnum .. \"G\"\n```\n\n----------------------------------------\n\nTITLE: Nvim Lua Script Shebang\nDESCRIPTION: Example of a shebang line for making Lua scripts executable with Nvim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env -S nvim -l\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Entries with Dot Notation in Vim\nDESCRIPTION: Demonstrates using dot notation to access dictionary entries when keys are valid identifiers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_46\n\nLANGUAGE: vim\nCODE:\n```\n:let val = mydict.one\n:let mydict.four = 4\n```\n\n----------------------------------------\n\nTITLE: Updating Search Count in Neovim (Vimscript)\nDESCRIPTION: This function updates the search count using a timer. It calls searchcount() with specific options and redraws the status line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_217\n\nLANGUAGE: vim\nCODE:\n```\nfunction! s:update_searchcount(timer) abort\n  if a:timer ==# s:searchcount_timer\n    call searchcount(#{\n    \\ recompute: 1, maxcount: 0, timeout: 100})\n    redrawstatus\n  endif\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Changing Default Syntax Highlighting in Neovim\nDESCRIPTION: Example command to place in after/syntax/{filetype}.vim to change the default link for cComment syntax group to Question highlight group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_197\n\nLANGUAGE: vim\nCODE:\n```\nhighlight! default link cComment Question\n```\n\n----------------------------------------\n\nTITLE: Undefining Signs in Vim\nDESCRIPTION: Examples of using sign_undefine() to remove sign definitions. This function can undefine a single sign, multiple signs, or all defined signs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_241\n\nLANGUAGE: vim\nCODE:\n```\n\" Delete a sign named mySign\ncall sign_undefine(\"mySign\")\n\n\" Delete signs 'sign1' and 'sign2'\ncall sign_undefine([\"sign1\", \"sign2\"])\n\n\" Delete all the signs\ncall sign_undefine()\n```\n\n----------------------------------------\n\nTITLE: Disabling showbreak Setting Locally\nDESCRIPTION: Example of how to disable the showbreak setting specifically for the current window while preserving the global value.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_65\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal showbreak=NONE\n```\n\n----------------------------------------\n\nTITLE: Vim Jumplist After CTRL-O\nDESCRIPTION: Demonstrates the state of the jumplist after using CTRL-O to move to a previous position, showing how the pointer (>) moves in the list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\njump line  col file/text\n  2     1    0 some text\n  1    70    0 another line\n >  0  1154   23 end.\n  1  1167    0 foo bar\n```\n\n----------------------------------------\n\nTITLE: Signal Event Handler Example (Vim)\nDESCRIPTION: Shows how to define an autocmd to handle specific signals, in this case processing SIGUSR1\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nautocmd Signal SIGUSR1 call some#func()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Error Below Current Line\nDESCRIPTION: Command for going to the error below the current line in the current buffer from the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:[count]cbel[ow]\n```\n\n----------------------------------------\n\nTITLE: Implicit Dictionary Binding to Function in Vimscript\nDESCRIPTION: This snippet illustrates implicit dictionary binding when a function is assigned as a member of a dictionary. When the function is called through the dictionary, the dictionary itself is passed as the 'self' argument to the function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n\tlet myDict.myFunction = MyFunction\n\tcall myDict.myFunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Lisp Indentation Options in Vim\nDESCRIPTION: Sets lispoptions to use indentexpr for Lisp indenting when the option is set, changing how the Vim editor handles Lisp code indentation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_40\n\nLANGUAGE: viml\nCODE:\n```\nset list lcs=tab:\\ \\\n```\n\n----------------------------------------\n\nTITLE: Handling Completion with Events in Neovim\nDESCRIPTION: The 'CompleteDone' event has been extended to include a 'reason' key in 'v:event', providing more context about the completion trigger. It supports a more granular control over completion actions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nvim.on_key(function() return '' end)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pair of Connected Sockets\nDESCRIPTION: Creates a pair of connected sockets that can be used for inter-process communication or other purposes. Offers options for non-blocking behavior and specific socket types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nuv.socketpair([{socktype}, [{protocol}, [{flags1}, [{flags2}]]]])\n```\n\n----------------------------------------\n\nTITLE: Loading WASM Parser in Lua\nDESCRIPTION: Example of loading a WebAssembly parser when Nvim is built with ENABLE_WASMTIME support.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvim.treesitter.language.add('python', { path = \"/path/to/python.wasm\" })\n```\n\n----------------------------------------\n\nTITLE: Using character offsets for String highlighting in Vim\nDESCRIPTION: Example showing how to use character offsets to adjust the highlighted area of a match. This highlights the content of a string but excludes the quotation marks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_165\n\nLANGUAGE: vim\nCODE:\n```\n:syn match String  /\"[^\"]*\"/hs=s+1,he=e-1\n```\n\n----------------------------------------\n\nTITLE: Moving to a Specific Byte in Vim\nDESCRIPTION: This command moves the cursor to a specific byte position in the file. Replace '2345' with the desired byte number. This allows for precise navigation to specific locations when editing binary files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n\t2345go\n```\n\n----------------------------------------\n\nTITLE: Closing Window in Neovim Lua API\nDESCRIPTION: Closes a window, similar to :close command. Can force close with unsaved changes. Available since Neovim 0.4.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_72\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_close({window}, {force})\n```\n\n----------------------------------------\n\nTITLE: Print Lua Code with Nvim from Stdin\nDESCRIPTION: Executes Lua code passed via standard input using the Nvim '-l' flag. This integrates scripting with Nvim and assumes a functioning Nvim and shell setup. Demonstrated by piping a simple `print` statement yielding an output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \"print(42)\" | nvim -l -\n```\n\n----------------------------------------\n\nTITLE: Clearing Last Used Search Pattern in Vim\nDESCRIPTION: This snippet demonstrates how to clear the last used search pattern in Vim using a Vim script command. This effectively clears the search history.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\n:let @/ = \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Grepprg and Grepformat for id-utils in Vim\nDESCRIPTION: This Vim script demonstrates how to configure the `grepprg` and `grepformat` options to work with the GNU id-utils. This allows Vim's `:grep` command to leverage `lid` for searching based on identifiers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\n:set grepprg=lid\\ -Rgrep\\ -s\n:set grepformat=%f:%l:%m\n```\n\n----------------------------------------\n\nTITLE: Concat Pattern Example in Vim Regular Expressions\nDESCRIPTION: Demonstrates concatenated patterns with the \\& operator requiring both patterns to match\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nfoobeep\\&...\n```\n\n----------------------------------------\n\nTITLE: Displaying Unprintable Characters in Hex in Vim\nDESCRIPTION: This command sets the 'display' option to 'uhex', which makes Vim display unprintable characters in hexadecimal format. This is useful when editing binary files, as it allows you to see the underlying byte values of characters that would otherwise appear as garbled or empty.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n\t:set display=uhex\n```\n\n----------------------------------------\n\nTITLE: Using Search Offsets in Vim\nDESCRIPTION: This snippet shows examples of using search offsets in Vim. Offsets allow you to position the cursor relative to the found match, including line offsets and character offsets.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\n/test/+1    one line below \"test\", in column 1\n/test/e     on the last t of \"test\"\n/test/s+2   on the 's' of \"test\"\n/test/b-3   three characters before \"test\"\n```\n\n----------------------------------------\n\nTITLE: Creating Signal Handler in Lua with libuv\nDESCRIPTION: This snippet shows how to create a new signal handler using `uv.new_signal()`, which allows the application to respond to specific Unix signals. It demonstrates starting the signal handler with `uv.signal_start(signal, signame, callback)`, specifying the signal to watch for and executing a callback function when the signal is received. Additionally, `uv.signal_stop(signal)` is used to stop the signal handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\n-- Create a new signal handler\nlocal signal = uv.new_signal()\n-- Define a handler function\nuv.signal_start(signal, \"sigint\", function(signame)\n  print(\"got \" .. signame .. \", shutting down\")\n  os.exit(1)\nend)\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.new_signal()\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.signal_stop({signal})\n```\n\n----------------------------------------\n\nTITLE: Setting showmatch Option in Vim\nDESCRIPTION: Command to enable the showmatch feature, which briefly highlights matching parentheses, brackets, and braces when typing the closing character.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set showmatch\n```\n\n----------------------------------------\n\nTITLE: Getting Runtime File Paths in Neovim\nDESCRIPTION: Retrieves file paths in runtime directories using 'nvim__get_runtime'. You can specify patterns and options to refine search, returning a list of paths.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_29\n\nLANGUAGE: Lua\nCODE:\n```\nnvim__get_runtime\\(\\{pat\\}, \\{all\\}, \\{opts\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Syntax Highlighting in Vim\nDESCRIPTION: Sets options for JSON syntax highlighting, including disabling concealment and error highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_69\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:vim_json_conceal = 0\nlet g:vim_json_warnings = 0\n```\n\n----------------------------------------\n\nTITLE: Appending to a Register in Neovim\nDESCRIPTION: This snippet illustrates appending commands to an existing register. Using an uppercase register name allows concatenating additional commands to the existing recorded sequence. This is useful for extending macros without starting over.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_1\n\nLANGUAGE: Vimscript\nCODE:\n```\nqC/word<Enter>q\n```\n\n----------------------------------------\n\nTITLE: Using Complete Control Structures in Execute\nDESCRIPTION: Demonstrates a valid approach to using control structures with :execute by including the entire block in one string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_117\n\nLANGUAGE: vim\nCODE:\n```\n:execute 'while i < 5 | echo i | let i = i + 1 | endwhile'\n```\n\n----------------------------------------\n\nTITLE: File Recovery Commands\nDESCRIPTION: Commands for recovering file contents from swap files, with optional force flag for modified buffers\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:rec[over] [file]\n:rec[over]! [file]\n```\n\n----------------------------------------\n\nTITLE: Trim Directive Example in Treesitter Query (All Whitespace)\nDESCRIPTION: This code demonstrates using the `trim!` directive to remove all whitespace (both linewise and charwise) from both sides of a node matched in the treesitter query.  It sets all trim parameters to 1.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_10\n\nLANGUAGE: query\nCODE:\n```\n\"(#trim! @fold 1 1 1 1)\"\n```\n\n----------------------------------------\n\nTITLE: Lua Keystroke Callback Replacement\nDESCRIPTION: Describes the replacement of vim.register_keystroke_callback() with vim.on_key() in Lua, emphasizing improved handling of keystrokes across plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nvim.register_keystroke_callback()\n```\n\n----------------------------------------\n\nTITLE: Vim Visual Search Prevention Mapping\nDESCRIPTION: A mapping to prevent the / command from extending the Visual area, instead searching for highlighted text\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:vmap / y/<C-R>\"<CR>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Older Inform Language Features\nDESCRIPTION: This snippet is for highlighting language features conforming to older Inform development environments. To enable, set the 'inform_highlight_old' variable to 1.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_63\n\nLANGUAGE: vim\nCODE:\n```\n\t:let inform_highlight_old=1\n```\n\n----------------------------------------\n\nTITLE: Including HTML in R Markdown Files in Neovim\nDESCRIPTION: This command sets the `rmd_include_html` variable to `1`, which forces ftplugin/html.vim to be sourced when editing R Markdown files. This is useful for syntax highlighting and other features of HTML within R Markdown documents.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\n\tlet rmd_include_html = 1\n```\n\n----------------------------------------\n\nTITLE: Command Concatenation with Bar in Vim\nDESCRIPTION: Examples demonstrating how to use the bar character to concatenate multiple commands on a single line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:execute 'r !ls' | '[\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Function for Filtering in Vim\nDESCRIPTION: Shows how to use a custom function with filter() to keep odd-indexed items in a list. The function 'Odd' is defined to check if the index is odd.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_68\n\nLANGUAGE: vim\nCODE:\n```\nfunc Odd(idx, val)\n  return a:idx % 2 == 1\nendfunc\ncall filter(mylist, function('Odd'))\n```\n\n----------------------------------------\n\nTITLE: Echoing Error Messages in Vim Script\nDESCRIPTION: Shows how to echo an error message that will be saved in the message history and can be raised as an exception.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_109\n\nLANGUAGE: vim\nCODE:\n```\n:echoerr \"This script just failed!\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Vimrc Setup for Diff Mode (VimL)\nDESCRIPTION: Vimrc code snippet to apply different configurations based on whether Vim is started in diff mode or not.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\nif &diff\n   setup for diff mode\nelse\n   setup for non-diff mode\nendif\n```\n\n----------------------------------------\n\nTITLE: Highlighting Haskell Delimiter Characters\nDESCRIPTION: This snippet shows how to enable highlighting of delimiter characters in Haskell code.  This is achieved by setting the 'hs_highlight_delimiters' variable to 1 in your vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_43\n\nLANGUAGE: vim\nCODE:\n```\n\t:let hs_highlight_delimiters = 1\n```\n\n----------------------------------------\n\nTITLE: Running Commands in Neovim - Vim\nDESCRIPTION: This snippet introduces various commands that enable users to execute shell commands directly from Neovim. It highlights the :!cmd command for running external commands, with additional context on command execution behavior concerning interactive shells and background tasks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:!{cmd}\t\tExecute {cmd} with 'shell'. See also |:terminal|.\n\t\tThe command runs in a non-interactive shell connected to a pipe (not a terminal).\n```\n\n----------------------------------------\n\nTITLE: Sign Jump Commands in Neovim\nDESCRIPTION: Commands for jumping to specific signs in files and buffers, with optional group specifications\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_6\n\nLANGUAGE: vimdoc\nCODE:\n```\n:sign jump {id} file={fname}\n:sign jump {id} group={group} file={fname}\n:sign jump {id} [buffer={nr}]\n:sign jump {id} group={group} [buffer={nr}]\n```\n\n----------------------------------------\n\nTITLE: Setting iskeyword Option in Vim\nDESCRIPTION: Command to reset the iskeyword option to its default value, which affects how Vim determines word boundaries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set iskeyword&\n```\n\n----------------------------------------\n\nTITLE: Querying Defined Signs in Vim\nDESCRIPTION: Examples of using sign_getdefined() to retrieve information about defined signs. This function can return attributes of all signs or a specific sign.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_236\n\nLANGUAGE: vim\nCODE:\n```\n\" Get a list of all the defined signs\necho sign_getdefined()\n\n\" Get the attribute of the sign named mySign\necho sign_getdefined(\"mySign\")\n```\n\n----------------------------------------\n\nTITLE: Setting Vietnamese Keymap in Neovim\nDESCRIPTION: Command to enable the Vietnamese Telex input method with UTF-8 encoding. This allows typing Vietnamese characters in Insert mode and search commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vietnamese.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set keymap=vietnamese-telex_utf-8\n```\n\n----------------------------------------\n\nTITLE: Replacing text within a fold in Vim\nDESCRIPTION: This example demonstrates using an Ex command to replace text within all lines of a closed fold. The range of the command is automatically adjusted to include all lines within the fold.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n\t:s/foo/bar/g\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Vim Script\nDESCRIPTION: Shows how to catch and inspect exception information using v:throwpoint variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\ntry\n  throw \"oops\"\ncatch /.*/ \n  echo \"Exception from\" v:throwpoint\nendtry\n```\n\n----------------------------------------\n\nTITLE: Editing Files with Different Encodings in Vim - Vimscript\nDESCRIPTION: This snippet explains the internal handling of 16-bit Unicode files in Vim, highlighting the necessity of encoding conversion when editing files with different encodings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Moving backward to the end of a function (Vim)\nDESCRIPTION: This snippet shows how to move backward to the end of a function using the `[]` command. The end of a function is defined by a `}` in the first column.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n\"[]\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating matchfuzzypos() in Vim\nDESCRIPTION: This snippet shows how to use the matchfuzzypos() function to perform fuzzy matching on a list of dictionaries. It matches the string 'll' against the 'text' key of the dictionary.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_169\n\nLANGUAGE: vim\nCODE:\n```\necho [{'text': 'hello', 'id' : 10}]\n\t\\->matchfuzzypos('ll', {'key' : 'text'})\n```\n\n----------------------------------------\n\nTITLE: Pattern Branch Example in Vim Regular Expressions\nDESCRIPTION: Shows how branch patterns are matched using the \\| operator to match alternative patterns\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nfoo\\|beep\n```\n\n----------------------------------------\n\nTITLE: C Code with Numbered Folding Markers\nDESCRIPTION: Example of C code using numbered folding markers to create hierarchical folds with specific levels.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n/* global variables {{{1 */\nint varA, varB;\n\n/* functions {{{1 */\n/* funcA() {{{2 */\nvoid funcA() {}\n\n/* funcB() {{{2 */\nvoid funcB() {}\n/* }}}1 */\n```\n\n----------------------------------------\n\nTITLE: Enabling Cargo Check for All Targets\nDESCRIPTION: When enabled, passes the '--all-targets' option to Cargo when Syntastic performs linting, allowing checking of all targets under the package including tests, examples, and benchmarks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_cargo_check_all_targets = 0\n```\n\n----------------------------------------\n\nTITLE: API Documentation Example in C\nDESCRIPTION: Demonstrates the docstring format for documenting Nvim API functions in C source code. Shows how to document parameters, examples, and formatting for nvim_open_win() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/// Opens a new window.\n/// ...\n///\n/// Example (Lua): window-relative float\n///\n/// ```lua\n/// vim.api.nvim_open_win(0, false, {\n///   relative='win',\n///   row=3,\n///   col=3,\n///   width=12,\n///   height=3,\n/// })\n/// ```\n///\n/// @param buffer Buffer to display\n/// @param enter  Enter the window\n/// @param config Map defining the window configuration. Keys:\n///   - relative: Sets the window layout, relative to:\n///      - \"editor\" The global editor grid.\n///      - \"win\"    Window given by the `win` field.\n///      - \"cursor\" Cursor position in current window.\n/// ...\n/// @param[out] err Error details, if any\n///\n```\n\n----------------------------------------\n\nTITLE: Creating Spell File with mkspell Command\nDESCRIPTION: Basic command syntax for generating a Vim spell file from word lists, with optional ascii flag and support for multiple input files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:mkspell /tmp/nl nl_NL.words\n```\n\n----------------------------------------\n\nTITLE: Standard Path Retrieval using stdpath()\nDESCRIPTION: Example of retrieving standard configuration path using stdpath() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_253\n\nLANGUAGE: vim\nCODE:\n```\necho stdpath(\"config\")\n```\n\n----------------------------------------\n\nTITLE: Retabulation and Whitespace Manipulation\nDESCRIPTION: Demonstrates commands for manipulating tab stops and whitespace across files with different tab configurations\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:auto BufReadPost\t*.xx\tretab! 4\n:auto BufWritePre\t*.xx\tretab! 8\n:auto BufWritePost\t*.xx\tretab! 4\n:auto BufNewFile\t*.xx\tset ts=4\n```\n\n----------------------------------------\n\nTITLE: Configuring Zig Plugin Settings\nDESCRIPTION: Configuration options for Zig filetype plugin including style settings and standard library path\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_41\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal expandtab shiftwidth=4 softtabstop=4 tabstop=8\nlet g:zig_recommended_style = 0\nlet g:zig_std_dir = json_decode(system('zig env'))['std_dir']\n```\n\n----------------------------------------\n\nTITLE: Deleting text to a register in Vim\nDESCRIPTION: This snippet demonstrates how to delete text into a named register in Vim. It shows how to use the register specification before the delete command to store the deleted text in the specified register.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n\t\"wdaw\n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Iteration in Vim\nDESCRIPTION: Demonstrates iterating over dictionary keys using loops and sorting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_23\n\nLANGUAGE: viml\nCODE:\n```\n:for key in keys(uk2nl)\n:  echo key\n:endfor\n\n:for key in sort(keys(uk2nl))\n:  echo key\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Auto-resetting iminsert in Vim\nDESCRIPTION: Example of using an insert mode mapping to automatically reset the 'iminsert' option to 0 when leaving Insert mode. This ensures that the Input Method (IM) is turned off when returning to Normal mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\ninoremap <ESC> <ESC>:set iminsert=0<CR>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UTF-8, UTF-16, and UTF-32 Offsets in Vim\nDESCRIPTION: This snippet shows the different offsets for the string \"a©😊\" in UTF-8, UTF-16, and UTF-32 encodings. It demonstrates how characters are represented in different Unicode encodings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_82\n\nLANGUAGE: vim\nCODE:\n```\nUTF-8 offsets:\n    [0]: 61, [1]: C2, [2]: A9, [3]: F0, [4]: 9F, [5]: 98, [6]: 8A\nUTF-16 offsets:\n    [0]: 0061, [1]: 00A9, [2]: D83D, [3]: DE0A\nUTF-32 (character) offsets:\n    [0]: 00000061, [1]: 000000A9, [2]: 0001F60A\n```\n\n----------------------------------------\n\nTITLE: Calling Function Reference Using :call in Vimscript\nDESCRIPTION: This snippet demonstrates how to call a function reference using the `:call` command. This is an alternative method to calling the function directly using parentheses.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n\t:call Fn()\n\t:call dict.init()\n```\n\n----------------------------------------\n\nTITLE: Enabling Control Structure Folding for Shell Scripts\nDESCRIPTION: Setting the shell folding option to 4 to enable folding of if/do/for structures in shell scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_122\n\nLANGUAGE: vim\nCODE:\n```\nlet g:sh_fold_enabled= 4\n```\n\n----------------------------------------\n\nTITLE: Rust Test Command (Vim)\nDESCRIPTION: The :RustTest command runs tests within a Cargo project or a standalone Rust file. It leverages `cargo test` for projects and `rustc --test` for individual files. The command supports specifying the size of the new window, running all tests regardless of the cursor position, and passing options to the underlying cargo or rustc command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_31\n\nLANGUAGE: vim\nCODE:\n```\n:[N]RustTest[!] [options]                                       *:RustTest*\n\t\tRuns a test under the cursor when the current buffer is in a\n\t\tcargo project with \"cargo test\" command. If the command did\n\t\tnot find any test function under the cursor, it stops with an\n\t\terror message.\n\n\t\tWhen N is given, adjust the size of the new window to N lines\n\t\tor columns.\n\n\t\tWhen ! is given, runs all tests regardless of current cursor\n\t\tposition.\n\n\t\tWhen [options] is given, it is passed to \"cargo\" command\n\t\targuments.\n\n\t\tWhen the current buffer is outside cargo project, the command\n\t\truns `rustc --test` command instead of \"cargo test\" as\n\t\tfallback. All tests are run regardless of adding ! since there\n\t\tis no way to run specific test function with rustc. [options]\n\t\tis passed to `rustc` command arguments in the case.\n\n\t\tTakes optional modifiers (see |<mods>|):  >vim\n\t\t    :tab RustTest\n\t\t    :belowright 16RustTest\n\t\t    :leftabove vert 80RustTest\n<\n```\n\n----------------------------------------\n\nTITLE: Calculating UTF-16 Indices in Vim\nDESCRIPTION: Examples of using the utf16idx() function to calculate UTF-16 code unit indices for characters in a string. Demonstrates various use cases including different input strings and parameter combinations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_281\n\nLANGUAGE: vim\nCODE:\n```\necho utf16idx('a😊😊', 3)\t\" returns 2\necho utf16idx('a😊😊', 7)\t\" returns 4\necho utf16idx('a😊😊', 1, 0, 1)\t\" returns 2\necho utf16idx('a😊😊', 2, 0, 1)\t\" returns 4\necho utf16idx('aą́c', 6)\t\t\" returns 2\necho utf16idx('aą́c', 6, 1)\t\" returns 4\necho utf16idx('a😊😊', 9)\t\" returns -1\n```\n\n----------------------------------------\n\nTITLE: Default Highlight Link Example for C Comments\nDESCRIPTION: Example showing how to set default highlight linking for C comments in a syntax file, and how to override it in a user's vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_196\n\nLANGUAGE: viml\nCODE:\n```\n:highlight default link cComment Comment\n:highlight link cComment Question\n```\n\n----------------------------------------\n\nTITLE: Setting fillchars option in Vim\nDESCRIPTION: Example of setting the fillchars option to customize various UI elements in Vim, including statusline, vertical separators, and fold indicators.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_18\n\nLANGUAGE: viml\nCODE:\n```\nset fillchars=stl:\\ ,stlnc:\\ ,vert:│,fold:·,diff:-\n```\n\n----------------------------------------\n\nTITLE: Language-aware Script Example\nDESCRIPTION: Conditional script that outputs different messages based on the user's language setting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n:if v:lang =~ \"de_DE\"\n:  echo \"Guten Morgen\"\n:else\n:  echo \"Good morning\"\n:endif\n```\n\n----------------------------------------\n\nTITLE: Writing all modified files\nDESCRIPTION: Writes all modified files. Vim only writes files with changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n\t:wall\n```\n\n----------------------------------------\n\nTITLE: GUI Menu Commands in Vim\nDESCRIPTION: Commands for managing menus in Vim's graphical user interface, including listing, creating, and removing menu items and adding tooltips.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:menu                     # list all menus\n:menu {mpath}             # list menus starting with {mpath}\n:menu {mpath} {rhs}        # add menu {mpath}, giving {rhs}\n:menu {pri} {mpath} {rhs}  # idem, with priorities {pri}\n:menu ToolBar.{name} {rhs} # add toolbar item, giving {rhs}\n:tmenu {mpath} {text}      # add tooltip to menu {mpath}\n:unmenu {mpath}           # remove menu {mpath}\n```\n\n----------------------------------------\n\nTITLE: Opening a file in read-only mode in Vim\nDESCRIPTION: This snippet shows how to open a file in read-only mode in Vim, preventing accidental modifications. This prevents accidental writes by displaying an error message when the user tries to write the file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\tvim -R file\n```\n\nLANGUAGE: vim\nCODE:\n```\n\tview file\n```\n\nLANGUAGE: vim\nCODE:\n```\n\tvim -M file\n```\n\nLANGUAGE: vim\nCODE:\n```\n\t:set modifiable\n\t:set write\n```\n\n----------------------------------------\n\nTITLE: Setting Text Width for Automatic Line Breaks\nDESCRIPTION: Sets the 'textwidth' option to 78 characters, which will automatically break lines at 78 characters when entering text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:set textwidth=78\n```\n\n----------------------------------------\n\nTITLE: HTML Last Modified Date Insertion\nDESCRIPTION: Function and autocommands to automatically update the last modified date in HTML files when writing them. Searches first 20 lines for the modification date line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd BufWritePre,FileWritePre *.html   ks|call LastMod()|'s\n:fun LastMod()\n:  if line(\"$\") > 20\n:    let l = 20\n:  else\n:    let l = line(\"$\")\n:  endif\n:  exe \"1,\" .. l .. \"g/Last modified: /s/Last modified: .*/Last modified: \" ..\n:  \\ strftime(\"%Y %b %d\")\n:endfun\n```\n\n----------------------------------------\n\nTITLE: Calculating Character Offset in Neovim LSP (Lua)\nDESCRIPTION: Returns the UTF-32 and UTF-16 offsets for a position in a buffer. Takes buffer number, row, column, and optional offset encoding as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_49\n\nLANGUAGE: lua\nCODE:\n```\ncharacter_offset({buf}, {row}, {col}, {offset_encoding})\n```\n\n----------------------------------------\n\nTITLE: Finding Spelling Suggestions in Vim\nDESCRIPTION: Normal mode command to suggest correctly spelled words for the word under or after the cursor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_3\n\nLANGUAGE: vimdoc\nCODE:\n```\nz=\n```\n\n----------------------------------------\n\nTITLE: Customizing Matchparen Highlighting in Neovim\nDESCRIPTION: Example of how to customize the colors used for highlighting matching parentheses by modifying the MatchParen highlight group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\n:hi MatchParen ctermbg=blue guibg=lightblue\n```\n\n----------------------------------------\n\nTITLE: Using getwinpos to poll for window position in Vim\nDESCRIPTION: Code snippet demonstrates how to poll for the window position using getwinpos(), waiting until a valid position is received while doing some work in the meantime.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_109\n\nLANGUAGE: vim\nCODE:\n```\nwhile 1\n  let res = getwinpos(1)\n  if res[0] >= 0\n    break\n  endif\n  \" Do some work here\nendwhile\n```\n\n----------------------------------------\n\nTITLE: Executing System Command with Simplified Escaping in Vim\nDESCRIPTION: This example shows an alternative way to execute a system command using the ::S modifier for simplified escaping of special characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_273\n\nLANGUAGE: vim\nCODE:\n```\necho system('ls '..expand('%:h:S'))\n```\n\n----------------------------------------\n\nTITLE: Ambiguous Insert Mode Mappings Example\nDESCRIPTION: This example demonstrates ambiguous mappings in Insert mode, showing how Vim handles overlapping key sequences.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\n:imap aa foo\n:imap aaa bar\n```\n\n----------------------------------------\n\nTITLE: Appending to a File in Vim\nDESCRIPTION: Shows how to append the current line to an existing file using the '>>' operator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:.write >>collection\n```\n\n----------------------------------------\n\nTITLE: Enabling HTML Syntax Folding\nDESCRIPTION: This snippet configures Vim to enable syntax folding for HTML files. This is enabled by setting 'g:html_syntax_folding' to 1 and setting 'foldmethod' to syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_56\n\nLANGUAGE: vim\nCODE:\n```\n\n\t:let g:html_syntax_folding = 1\n\t:set foldmethod=syntax\n\n```\n\n----------------------------------------\n\nTITLE: Adding Comments After Echo Commands\nDESCRIPTION: Shows how to properly add comments after commands like :echo by using the command separator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_118\n\nLANGUAGE: vim\nCODE:\n```\n:echo \"foo\" | \"this is a comment\n```\n\n----------------------------------------\n\nTITLE: Using Custom CTags Definitions for Rust\nDESCRIPTION: Disables the built-in CTags definitions for Rust provided by rust.vim in favor of user-defined custom definitions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_use_custom_ctags_defs = 1\n```\n\n----------------------------------------\n\nTITLE: Opening all folds completely\nDESCRIPTION: Reduces all folding levels completely, opening all folds in the file regardless of nesting depth.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_5\n\nLANGUAGE: vimdoc\nCODE:\n```\nzR\n```\n\n----------------------------------------\n\nTITLE: Setting Verbose Option in Debug Mode\nDESCRIPTION: This command sets the 'verbose' option to level 20 in Vim, which will display detailed information about executed commands.  This is useful for closely observing the program's behavior during debugging.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n\":set verbose=20\"\n```\n\n----------------------------------------\n\nTITLE: Installing Perl Provider for Neovim\nDESCRIPTION: Installs the Neovim::Ext CPAN package required for Perl integration in Neovim. The -n option skips tests which might be necessary for troubleshooting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncpanm -n Neovim::Ext\n```\n\n----------------------------------------\n\nTITLE: Converting String to Number in Vim\nDESCRIPTION: Demonstrates the use of str2nr() function to convert a string to a number, ignoring quotes and handling different bases.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_256\n\nLANGUAGE: vim\nCODE:\n```\nlet nr = str2nr('0123')\n```\n\n----------------------------------------\n\nTITLE: Setting undolevels to 0 for Vi compatibility in Vim\nDESCRIPTION: Code to set the undolevels option to 0, which provides Vi compatibility by allowing only one level of undo where 'u' undoes itself.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_75\n\nLANGUAGE: viml\nCODE:\n```\nset ul=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim to Use Python Virtualenv\nDESCRIPTION: Sets the Python 3 interpreter path in Neovim's configuration to use a specific virtualenv, which avoids needing to install pynvim in every project virtualenv.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nlet g:python3_host_prog = '/path/to/py3nvim/bin/python'\n```\n\n----------------------------------------\n\nTITLE: Disabling Python 3 Support in Neovim\nDESCRIPTION: Disables the Python 3 provider in Neovim by setting the g:loaded_python3_provider variable to 0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nlet g:loaded_python3_provider = 0\n```\n\n----------------------------------------\n\nTITLE: String to List Conversion Examples\nDESCRIPTION: Demonstrates converting strings to lists of character values using str2list() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_255\n\nLANGUAGE: vim\nCODE:\n```\necho str2list(\" \")        \" returns [32]\necho str2list(\"ABC\")        \" returns [65, 66, 67]\necho str2list(\"á\")        \" returns [97, 769]\n```\n\n----------------------------------------\n\nTITLE: Expression-based Substitution with Character Manipulation\nDESCRIPTION: Shows advanced substitution techniques using expressions and special character replacements\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:s@\\n@\\=\"\\r\" .. expand(\"$HOME\") .. \"\\r\"@\n```\n\nLANGUAGE: vim\nCODE:\n```\ns/E/\\=\"\\<Char-0x20ac>\"/g\n```\n\n----------------------------------------\n\nTITLE: Running the Sort Command in Unix/Windows\nDESCRIPTION: Demonstrates using external sort command to sort input.txt and write the result to output.txt.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nsort <input.txt >output.txt\n```\n\n----------------------------------------\n\nTITLE: Character Class Expressions in Vim Regular Expressions\nDESCRIPTION: This snippet shows various character class expressions available in Vim regular expressions. It includes classes for alphanumeric characters, whitespace, punctuation, and more.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\n*[:alnum:]*   [:alnum:]   isalnum ASCII letters and digits\n*[:alpha:]*   [:alpha:]   isalpha ASCII letters\n*[:blank:]*   [:blank:]       space and tab\n*[:cntrl:]*   [:cntrl:]   iscntrl ASCII control characters\n*[:digit:]*   [:digit:]       decimal digits '0' to '9'\n*[:graph:]*   [:graph:]   isgraph ASCII printable characters excluding space\n*[:lower:]*   [:lower:]   (1)    lowercase letters (all letters when 'ignorecase' is used)\n*[:print:]*   [:print:]   (2)    printable characters including space\n*[:punct:]*   [:punct:]   ispunct ASCII punctuation characters\n*[:space:]*   [:space:]       whitespace characters: space, tab, CR, NL, vertical tab, form feed\n*[:upper:]*   [:upper:]   (3)    uppercase letters (all letters when 'ignorecase' is used)\n*[:xdigit:]*  [:xdigit:]      hexadecimal digits: 0-9, a-f, A-F\n*[:return:]*  [:return:]      the <CR> character\n*[:tab:]*     [:tab:]         the <Tab> character\n*[:escape:]*  [:escape:]      the <Esc> character\n*[:backspace:]* [:backspace:]   the <BS> character\n*[:ident:]*   [:ident:]       identifier character (same as \"\\i\")\n*[:keyword:]* [:keyword:]     keyword character (same as \"\\k\")\n*[:fname:]*   [:fname:]       file name character (same as \"\\f\")\n```\n\n----------------------------------------\n\nTITLE: Python Script Execution with Arguments\nDESCRIPTION: Example showing how to pass arguments to a Python script executed in Vim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:python sys.argv = [\"foo\", \"bar\"]\n:pyfile myscript.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Reply Comments in Vim\nDESCRIPTION: Sets up nested comment recognition for email replies using > and ! characters as comment markers\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:set comments=n:>,n:!\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scheme Based on Background Setting in VimL\nDESCRIPTION: This approach uses the default Normal color and automatically adjusts to the value of 'background'. It demonstrates conditional highlighting based on whether the background is light or dark.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\nhighlight clear Normal\nset background&\nhighlight clear\nif &background == \"light\"\n  highlight Error ...\n  ...\nelse\n  highlight Error ...\n  ...\nendif\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Source Path for Rust Files\nDESCRIPTION: Sets a custom path to be prepended to the 'path' option for Rust source files, making it easier to navigate to Rust standard library sources.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\nlet g:ftplugin_rust_source_path = $HOME . '/dev/rust'\n```\n\n----------------------------------------\n\nTITLE: Stop Visual Mode with Escape in Neovim\nDESCRIPTION: This command stops Visual mode. ALT (|META|) may act like <Esc> if the chord is not mapped. For example <A-x> acts like <Esc>x if <A-x> does not have a visual-mode mapping.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\"<Esc>\"\n```\n\n----------------------------------------\n\nTITLE: Diff-based Folding Configuration\nDESCRIPTION: Vim settings to enable folding of unchanged lines when comparing files in diff mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1\n```\n\n----------------------------------------\n\nTITLE: Disabling Node.js Support in Neovim\nDESCRIPTION: Disables the Node.js provider in Neovim by setting the g:loaded_node_provider variable to 0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:let g:loaded_node_provider = 0\n```\n\n----------------------------------------\n\nTITLE: Executing Perl Statements in Neovim\nDESCRIPTION: Examples of using the :perl command to execute Perl statements within Neovim, including printing and manipulating the current line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:perl print \"Hello\"\n:perl $current->line (uc ($current->line))\n:perl my $str = $current->buffer->[42]; print \"Set \\$str to: $str\"\n```\n\n----------------------------------------\n\nTITLE: Configuring R Restructured Text Syntax Highlighting in Vim\nDESCRIPTION: Enables syntax highlighting for R code in knitr chunk headers within R Restructured Text files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_104\n\nLANGUAGE: vim\nCODE:\n```\nlet rrst_syn_hl_chunk = 1\n```\n\n----------------------------------------\n\nTITLE: SQLite Syntax and Indent Files\nDESCRIPTION: Defines the locations for SQLite syntax and indent files within the Neovim configuration directory. These files allow customization of syntax highlighting and indentation for SQLite files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\t~/.config/nvim/syntax/sqlite.vim\n\t~/.config/nvim/indent/sqlite.vim\n```\n\n----------------------------------------\n\nTITLE: Visual Mode Key Mapping Example\nDESCRIPTION: Demonstrates how to execute normal mode commands using the previous visual mode selection type.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_282\n\nLANGUAGE: vim\nCODE:\n```\nexe \"normal \" .. visualmode()\n```\n\n----------------------------------------\n\nTITLE: Clearing Syntax Definitions in Vim Script\nDESCRIPTION: Begins a syntax file by clearing existing syntax definitions to start fresh. It's useful during experimentation and prior to defining new syntax rules. No required dependencies. No inputs or outputs, as it serves as a preparatory command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_0\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax clear\n```\n\n----------------------------------------\n\nTITLE: Implementing a Min Function in Vim\nDESCRIPTION: Shows how to define a function that returns the smaller of two numbers, demonstrating conditional statements and local variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:function Min(num1, num2)\n:  if a:num1 < a:num2\n:    let smaller = a:num1\n:  else\n:    let smaller = a:num2\n:  endif\n:  return smaller\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Filetype Plugin Initialization Check\nDESCRIPTION: Code to check if a filetype plugin has already been loaded for the current buffer to prevent duplicate initialization.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\n\" Only do this when not done yet for this buffer\nif exists(\"b:did_ftplugin\")\n  finish\nendif\nlet b:did_ftplugin = 1\n```\n\n----------------------------------------\n\nTITLE: WinDbg Minidump Generation\nDESCRIPTION: Command for generating a minidump file in WinDbg for crash analysis.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n.dump vim.dmp\n```\n\n----------------------------------------\n\nTITLE: Navigating the Quickfix Window in Vim Script\nDESCRIPTION: These commands allow navigation within the quickfix window, such as moving the cursor to the bottom. It's useful for asynchronous updates to ensure visibility of recent entries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_31\n\nLANGUAGE: vimscript\nCODE:\n```\n:cb[ottom]   Put the cursor in the last line of the quickfix window\nand scroll to make it visible.\n```\n\n----------------------------------------\n\nTITLE: Adding Buffer-Specific User Commands in Vim Filetype Plugins\nDESCRIPTION: This example shows how to add a user command that can only be used in one buffer using the -buffer argument to :command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_50\n\nLANGUAGE: vim\nCODE:\n```\n:command -buffer  Make  make %:r.s\n```\n\n----------------------------------------\n\nTITLE: Basic Highlight Command Example\nDESCRIPTION: Simple example showing how to set bold GUI attribute for Comment highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_186\n\nLANGUAGE: vim\nCODE:\n```\n:hi Comment\tgui=bold\n```\n\n----------------------------------------\n\nTITLE: Checking Nvim version with has() in Vim\nDESCRIPTION: Example of using has() to check if the current Nvim version is 0.2.1 or later before using version-specific features.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_119\n\nLANGUAGE: vim\nCODE:\n```\nif has(\"nvim-0.2.1\")\n  \" ...\nendif\n```\n\n----------------------------------------\n\nTITLE: RPC Notification Example\nDESCRIPTION: Example of sending an asynchronous RPC notification on VimLeave event\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_210\n\nLANGUAGE: vim\nCODE:\n```\nau VimLeave call rpcnotify(0, \"leaving\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MATLAB Function Indenting in Vim\nDESCRIPTION: This snippet configures MATLAB function indentation in Vim by setting the 'g:MATLAB_function_indent' variable. This controls whether nested functions and all functions are indented. Users can choose between Classic (0), Indent nested functions (1), and Indent all functions (2) formats.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_8\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:MATLAB_function_indent = {0, 1 or 2 (default)}\n```\n\n----------------------------------------\n\nTITLE: Executing Ex Command in Neovim\nDESCRIPTION: Executes an Ex command with 'nvim_command'. Prefer using 'nvim_cmd()' or 'nvim_exec2()' for a more structured command execution.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_36\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_command\\(\\{command\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Getting File Type in Vim\nDESCRIPTION: The getftype() function returns a string describing the type of the given file. It can return various types like 'file', 'dir', 'link', etc. Returns an empty string if the file doesn't exist.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_94\n\nLANGUAGE: vim\nCODE:\n```\ngetftype(\"/home\")\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Omni Completion Variable for Custom XML Data\nDESCRIPTION: Example showing how b:html_omni_flavor can be used to point to a custom XML data file, allowing mixing of PHP completion with any XML dialect.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nb:html_omni_flavor\n```\n\n----------------------------------------\n\nTITLE: Register Shifting Loop in Vim\nDESCRIPTION: Shifts the contents of numbered registers down by one position, from register 9 to 1.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nfor i = 9, 1, -1 do\n  vim.fn.setreg(tostring(i), vim.fn.getreg(tostring(i - 1)))\nend\n```\n\n----------------------------------------\n\nTITLE: Shell Escaping in Vim\nDESCRIPTION: Examples of using shellescape() function to escape strings for use as shell command arguments in Vim, demonstrating its use with :! command and system() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_233\n\nLANGUAGE: vim\nCODE:\n```\nexe '!dir ' .. shellescape(expand('<cfile>'), 1)\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall system(\"chmod +w -- \" .. shellescape(expand(\"%\")))\n```\n\n----------------------------------------\n\nTITLE: Using UDP try_send2 Method for Multiple Datagrams in Lua\nDESCRIPTION: Demonstrates how to send multiple UDP datagrams using the try_send2 method with both connected and non-connected UDP clients. When a client is not connected, you must specify the destination address.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_43\n\nLANGUAGE: lua\nCODE:\n```\n-- If client:connect(...) was not called\nlocal addr = { ip = \"127.0.0.1\", port = 1234 }\nclient:try_send2({\n  { data = \"Message 1\", addr = addr },\n  { data = \"Message 2\", addr = addr },\n})\n-- If client:connect(...) was called\nclient:try_send2({\n  { data = \"Message 1\" },\n  { data = \"Message 2\" },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Height in Neovim (Vim)\nDESCRIPTION: This snippet demonstrates how to set the 'cmdheight' option in Neovim, which controls the number of lines used for displaying messages at the bottom. This option impacts the available space for editing text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:set cmdheight=3\n```\n\n----------------------------------------\n\nTITLE: Demonstrating matchstrpos() in Vim\nDESCRIPTION: These snippets show how to use matchstrpos() function to get the matched string along with its start and end positions, including examples with different start positions and list input.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_173\n\nLANGUAGE: vim\nCODE:\n```\necho matchstrpos(\"testing\", \"ing\")\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchstrpos(\"testing\", \"ing\", 2)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchstrpos(\"testing\", \"ing\", 5)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho matchstrpos([1, '__x'], '\\a')\n```\n\n----------------------------------------\n\nTITLE: Back Reference Pattern Configuration\nDESCRIPTION: Example of using back references in match patterns to match corresponding text patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:let b:match_words = '\\<b\\(o\\+\\)\\>:\\(h\\)\\1\\>'\n```\n\n----------------------------------------\n\nTITLE: Using Highlight Command in Vim\nDESCRIPTION: These snippets show various uses of the highlight command in Vim. They demonstrate how to list highlight groups, clear highlighting, and modify highlight groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_185\n\nLANGUAGE: viml\nCODE:\n```\n:hi[ghlight]\n\n:hi[ghlight] {group-name}\n\n:hi[ghlight] clear\n\n:hi[ghlight] clear {group-name}\n:hi[ghlight] {group-name} NONE\n\n:hi[ghlight] [default] {group-name} {key}={arg} ..\n```\n\n----------------------------------------\n\nTITLE: Basic State Machine Implementation in Python\nDESCRIPTION: Pseudocode showing how Neovim implements its basic state machine structure. This demonstrates how the editor reads user input and processes it through state-specific callbacks.\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef state_enter(state_callback, data):\n  do\n    key = readkey()                 # read a key from the user\n  while state_callback(data, key)   # invoke the callback for the current state\n```\n\n----------------------------------------\n\nTITLE: Increasing Shell Syntax Synchronization Lines\nDESCRIPTION: Setting the minimum number of lines for shell syntax synchronization to improve highlighting accuracy during backward scrolling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_124\n\nLANGUAGE: vim\nCODE:\n```\nlet sh_minlines = 500\n```\n\n----------------------------------------\n\nTITLE: Using matchbufline() to Find Matches in Vim Buffer\nDESCRIPTION: Shows how to use matchbufline() to find matches in a specific buffer. It returns a list of dictionaries containing match information, including line numbers and byte indices.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_166\n\nLANGUAGE: vim\nCODE:\n```\n\" Assuming line 3 in buffer 5 contains \"a\"\necho matchbufline(5, '\\<\\k\\+\\>', 3, 3)\n\n```\n\nLANGUAGE: vim\nCODE:\n```\n\" Assuming line 4 in buffer 10 contains \"tik tok\"\necho matchbufline(10, '\\<\\k\\+\\>', 1, 4)\n\n```\n\nLANGUAGE: vim\nCODE:\n```\n\" Assuming line 2 in buffer 2 contains \"acd\"\necho matchbufline(2, '\\(a\\)\\?\\(b\\)\\?\\(c\\)\\?\\(.*\\)', 2, 2\n\t\t\t\t\t\\ {'submatches': v:true})\n\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Shell Syntax Synchronization Lines\nDESCRIPTION: Setting the maximum number of lines for shell syntax synchronization to improve performance in large files at the cost of potentially reduced highlighting accuracy.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_125\n\nLANGUAGE: vim\nCODE:\n```\nlet sh_maxlines = 100\n```\n\n----------------------------------------\n\nTITLE: Defining File Breakpoint\nDESCRIPTION: This command sets a breakpoint on line 43 of the 'init.vim' file. Vim will pause execution when this line is reached during sourcing of the file. This can be used to examine the state of the program at a particular point.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n\":breakadd file 43 init.vim\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers vs. Strings in Vim\nDESCRIPTION: Shows that when comparing numbers and strings directly in Vim, there is automatic type conversion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\necho 4 == \"4\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-party Dependencies URL\nDESCRIPTION: Example of how to specify a custom commit or local path for third-party dependencies in cmake.deps/deps.txt file.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nLUAJIT_URL https://github.com/LuaJIT/LuaJIT/archive/<sha>.tar.gz\n```\n\nLANGUAGE: bash\nCODE:\n```\nLUAJIT_URL /home/user/luajit\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Cosine in Vimscript\nDESCRIPTION: The acos() function returns the arc cosine of a number in radians. It accepts inputs in the range [-1, 1] and returns a float in the range [0, pi].\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimscript\nCODE:\n```\necho acos(0)\n```\n\nLANGUAGE: vimscript\nCODE:\n```\necho acos(-0.5)\n```\n\n----------------------------------------\n\nTITLE: Writing a Vim Compiler Plugin\nDESCRIPTION: This snippet demonstrates the structure of a compiler plugin, including the use of the current_compiler variable and the CompilerSet command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_53\n\nLANGUAGE: vim\nCODE:\n```\n:if exists(\"current_compiler\")\n:  finish\n:endif\n:let current_compiler = \"mine\"\n\nCompilerSet errorformat&    \" use the default 'errorformat'\nCompilerSet makeprg=nmake\n```\n\n----------------------------------------\n\nTITLE: Grid Line Redraw Event in Neovim JSON\nDESCRIPTION: This snippet is for drawing a line in a grid at specified coordinates, critical for updating visible text and highlights effectively.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\"grid_line\", grid, row, col_start, cells, wrap] ~\n\tRedraw a continuous part of a `row` on a `grid`, starting at the column\n`col_start`. `cells` is an array of arrays each with 1 to 3 items:\n`[text(, hl_id, repeat)]`. `text` is the UTF-8 text that should be put in\na cell, with the highlight `hl_id` defined by a previous `hl_attr_define`\ncall.\n```\n\n----------------------------------------\n\nTITLE: Setting Register Values in Vim\nDESCRIPTION: Examples of using setreg() function to set register values in Vim. This function allows setting register contents with various options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_228\n\nLANGUAGE: vim\nCODE:\n```\ncall setreg(v:register, @*)\ncall setreg('*', @%, 'ac')\ncall setreg('a', \"1\\n2\\n3\", 'b5')\ncall setreg('\"', { 'points_to': 'a'})\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Release Updates in Changelog\nDESCRIPTION: Setting to disable the automatic prompting for release number updates when changes are detected, preventing the plugin from asking to increase the release number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\nlet spec_chglog_never_increase_release = 1\n```\n\n----------------------------------------\n\nTITLE: Saving fold state with view\nDESCRIPTION: Saves the current fold state and other view-related settings to be restored later. This preserves manually created folds when switching files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_11\n\nLANGUAGE: vimdoc\nCODE:\n```\n:mkview\n```\n\n----------------------------------------\n\nTITLE: Enabling Cursor Position Display in Vim\nDESCRIPTION: Command to enable the ruler option that displays cursor position in the bottom right corner. This helps track your position when navigating through search results.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:set ruler\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User Map for Netrw\nDESCRIPTION: Example of creating a custom mapping 'gu' to clear the marked file list in netrw by implementing a user-defined function and registering it with g:Netrw_UserMaps.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_48\n\nLANGUAGE: vim\nCODE:\n```\n\" ExampleUserMap: {{{2\nfun! ExampleUserMap(islocal)\n  call netrw#Modify(\"netrwmarkfilelist\",[])\n  call netrw#Modify('netrwmarkfilemtch_{bufnr(\"%\")}',\"\")\n  let retval= [\"refresh\"]\n  return retval\nendfun\nlet g:Netrw_UserMaps= [[\"gu\",\"ExampleUserMap\"]]\n```\n\n----------------------------------------\n\nTITLE: Calculating String Character Length in Vim\nDESCRIPTION: Shows how to use strchars() function to count characters in a string, with an option to include or ignore composing characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_257\n\nLANGUAGE: vim\nCODE:\n```\nif has(\"patch-7.4.755\")\n  function s:strchars(str, skipcc)\n    return strchars(a:str, a:skipcc)\n  endfunction\nelse\n  function s:strchars(str, skipcc)\n    if a:skipcc\n      return strlen(substitute(a:str, \".\", \"x\", \"g\"))\n    else\n      return strchars(a:str)\n    endif\n  endfunction\nendif\n```\n\n----------------------------------------\n\nTITLE: Start of Line Pattern Configuration\nDESCRIPTION: Setting up patterns to match keywords at line start or after semicolons with optional whitespace.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:let s:sol = '\\%(^\\|;\\)\\s*'\n```\n\n----------------------------------------\n\nTITLE: Setting End-of-Line Character with Unicode\nDESCRIPTION: Sets the end-of-line character in listchars to the U+21B5 (↵) character using Unicode notation. This provides a graphical representation of line endings in list mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_43\n\nLANGUAGE: viml\nCODE:\n```\nset listchars=eol:\\U000021b5\n```\n\n----------------------------------------\n\nTITLE: Setting Modeline Options in Vim\nDESCRIPTION: These examples demonstrate how to use modelines in Vim to set file-specific options, and how to configure Vim to recognize modelines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n/* vim:set shiftwidth=4: */\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set modelines=10\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set nomodeline\n```\n\nLANGUAGE: vim\nCODE:\n```\n// vim:set textwidth=72 dir=c\\:\\tmp:  use c:\\tmp here\n```\n\n----------------------------------------\n\nTITLE: Setting Normal Group Colors\nDESCRIPTION: Example of setting terminal colors for the Normal highlight group\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_189\n\nLANGUAGE: vim\nCODE:\n```\n:highlight Normal ctermfg=grey ctermbg=darkblue\n```\n\n----------------------------------------\n\nTITLE: Vim New Line Insertion\nDESCRIPTION: Shows how to insert a new line below the cursor using the 'o' command in Vim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\noThat liked using Vim<Esc>\n```\n\n----------------------------------------\n\nTITLE: Try-Catch-Finally Block in Vim Script\nDESCRIPTION: Shows how to use a try-catch-finally block to handle errors and perform cleanup actions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_105\n\nLANGUAGE: vim\nCODE:\n```\ntry | call Unknown() | finally | echomsg \"cleanup\" | endtry\nechomsg \"not reached\"\n```\n\n----------------------------------------\n\nTITLE: Mark Position Matching\nDESCRIPTION: Explains pattern matching using marks in Vim. Patterns like '\\%'m', '\\%>'m', and '\\%<'m' facilitate searches relative to these referential positions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_20\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\%'m\"\n\"\\\\%<'m\"\n\"\\\\%>'m\"\n```\n\n----------------------------------------\n\nTITLE: Setting Browse Directory to Current Working Directory in Vim\nDESCRIPTION: This example sets the 'browsedir' option to use the current working directory when opening the file browser, then opens the browser for editing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:set browsedir=current\n:browse edit\n```\n\n----------------------------------------\n\nTITLE: Customizing LaTeX Superscript and Subscript Concealment with VimL\nDESCRIPTION: Settings to control which characters can be displayed as superscripts and subscripts in concealed LaTeX syntax. Can be adjusted based on font support for unicode characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_144\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_superscripts= \"[0-9a-zA-W.,:;+-<>/()=]\"\nlet g:tex_subscripts= \"[0-9aehijklmnoprstuvx,+-/().]\"\n```\n\n----------------------------------------\n\nTITLE: Setting Browse Directory to Current Buffer's Directory in Vim\nDESCRIPTION: This snippet sets the 'browsedir' option to use the same directory as the current buffer when opening the file browser, then opens the browser for editing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set browsedir=buffer\n:browse edit\n```\n\n----------------------------------------\n\nTITLE: Continuation Line Handling in Vim\nDESCRIPTION: Demonstrates how to handle syntax highlighting for continuation lines in preprocessor directives.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region xPreProc start=/^#/ end=/$/ contains=xLineContinue\n:syntax match xLineContinue \"\\\\$\" contained\n```\n\n----------------------------------------\n\nTITLE: Post-Recovery File Writing\nDESCRIPTION: Commands for saving a recovered file under a new name and comparing it with the original using diff mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:write help.txt.recovered\n:edit #\n:diffsp help.txt\n```\n\n----------------------------------------\n\nTITLE: Disabling Shell Syntax Folding\nDESCRIPTION: Setting the shell folding option to 0 to disable all syntax-based folding in shell scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_119\n\nLANGUAGE: vim\nCODE:\n```\nlet g:sh_fold_enabled= 0\n```\n\n----------------------------------------\n\nTITLE: Using serverstart() in Neovim (Vimscript)\nDESCRIPTION: This example demonstrates how to use the serverstart() function without arguments to start a server with a default address and echo the result.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_225\n\nLANGUAGE: vim\nCODE:\n```\necho serverstart()\n```\n\n----------------------------------------\n\nTITLE: Disabling Cursor Shape Changes\nDESCRIPTION: Configuration to disable cursor shape changes and prevent plugins from modifying cursor behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set guicursor=\n:autocmd OptionSet guicursor noautocmd set guicursor=\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Provider for Neovim\nDESCRIPTION: Installs the neovim RubyGem which is required for Ruby integration in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngem install neovim\n```\n\n----------------------------------------\n\nTITLE: Setting Rustc Path in Vim Configuration\nDESCRIPTION: Sets the path to the Rust compiler (rustc) for use with the :RustRun and :RustExpand commands. If not set, rustc will be found in the system PATH.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustc_path = $HOME.\"/bin/rustc\"\n```\n\n----------------------------------------\n\nTITLE: List Available Keymap Files in Vim\nDESCRIPTION: Command to show all available keymap files in the runtime path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:echo globpath(&rtp, \"keymap/*.vim\")\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Host Program Path in Neovim\nDESCRIPTION: Sets the path to the Node.js host program. This makes startup faster by avoiding the slow 'npm root -g' lookup.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nlet g:node_host_prog = '/usr/local/bin/neovim-node-host'\n```\n\n----------------------------------------\n\nTITLE: Setting includeexpr for Java in Vim\nDESCRIPTION: Example of setting the 'includeexpr' option for Java files in Vim. This expression transforms the file names found by the 'include' option, replacing dots with forward slashes to match Java package structures.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_30\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal includeexpr=substitute(v:fname,'\\\\.','/','g')\n```\n\n----------------------------------------\n\nTITLE: Executing System Command with File Expansion in Vim\nDESCRIPTION: This snippet demonstrates how to use the system function to execute a shell command with proper file name expansion and escaping.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_272\n\nLANGUAGE: vim\nCODE:\n```\necho system('ls '..shellescape(expand('%:h')))\n```\n\n----------------------------------------\n\nTITLE: Multiple Command Examples with Bar Separator\nDESCRIPTION: Various examples showing different ways to use the bar separator for command chaining and mapping.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:!ls | wc\n:r !ls | wc\n:%g/foo/p|>\n:%s/foo/bar/|>\n:map q 10^V|\n:map q 10\\| map \\ l\n```\n\n----------------------------------------\n\nTITLE: Using UV Check Handle for Post-I/O Operations\nDESCRIPTION: Example showing how to use a check handle to execute code after I/O polling in the event loop.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nlocal check = uv.new_check()\ncheck:start(function()\n  print(\"After I/O polling\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Clearing Syntax in Current Buffer\nDESCRIPTION: Command to clear all syntax highlighting in the current buffer. Useful when switching off syntax highlighting or switching to a different syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_198\n\nLANGUAGE: vim\nCODE:\n```\n:syntax clear\n```\n\n----------------------------------------\n\nTITLE: Navigating to Last Location List Error\nDESCRIPTION: Command for displaying the last error in the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n:lla[st][!] [nr]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Mapping for SpecChangelog in Vim\nDESCRIPTION: Example of how to create a custom mapping for the SpecChangelog functionality, binding it to the F5 key for spec files only.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\nau FileType spec map <buffer> <F5> <Plug>SpecChangelog\n```\n\n----------------------------------------\n\nTITLE: Time Measurement with reltimefloat\nDESCRIPTION: Demonstrates measuring execution time of a function using reltime() and reltimefloat()\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_204\n\nLANGUAGE: vim\nCODE:\n```\nlet start = reltime()\ncall MyFunction()\nlet seconds = reltimefloat(reltime(start))\n```\n\n----------------------------------------\n\nTITLE: Getting Thread Affinity in Lua with Libuv\nDESCRIPTION: Retrieves the CPU affinity settings for a specified thread. Takes a thread object and an optional mask size parameter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_60\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_getaffinity({thread} [, {mask_size}])\n```\n\n----------------------------------------\n\nTITLE: Setting Modula-2 Syntax Highlighting Options in Vim\nDESCRIPTION: Configures options for Modula-2 syntax highlighting, including setting the default dialect and allowing specific syntax features for different dialects.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_85\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:modula2_default_dialect = 'm2pim'\n```\n\n----------------------------------------\n\nTITLE: Rust File Evaluation Commands (Vim)\nDESCRIPTION: These commands are designed for working with standalone Rust files, allowing compilation, execution, expansion, and IR/assembly code generation. They include :RustRun, :RustExpand, :RustEmitIr, and :RustEmitAsm. The commands rely on the rustc compiler and respect the g:rustc_path configuration if set.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_30\n\nLANGUAGE: vim\nCODE:\n```\n:RustRun  [args]                                                    *:RustRun*\n:RustRun! [rustc-args] [--] [args]\n\t\tCompiles and runs the current file. If it has unsaved changes,\n\t\tit will be saved first using |:update|. If the current file is\n\t\tan unnamed buffer, it will be written to a temporary file\n\t\tfirst. The compiled binary is always placed in a temporary\n\t\tdirectory, but is run from the current directory.\n\n\t\tThe arguments given to |:RustRun| will be passed to the\n\t\tcompiled binary.\n\n\t\tIf ! is specified, the arguments are passed to rustc instead.\n\t\tA \"--\" argument will separate the rustc arguments from the\n\t\targuments passed to the binary.\n\n\t\tIf |g:rustc_path| is defined, it is used as the path to rustc.\n\t\tOtherwise it is assumed rustc can be found in $PATH.\n\n:RustExpand  [args]                                              *:RustExpand*\n:RustExpand! [TYPE] [args]\n\t\tExpands the current file using `--pretty` and displays the\n\t\tresults in a new split. If the current file has unsaved\n\t\tchanges, it will be saved first using |:update|. If the\n\t\tcurrent file is an unnamed buffer, it will be written to a\n\t\ttemporary file first.\n\n\t\tThe arguments given to |:RustExpand| will be passed to rustc.\n\t\tThis is largely intended for specifying various `--cfg`\n\t\tconfigurations.\n\n\t\tIf ! is specified, the first argument is the expansion type to\n\t\tpass to `rustc --pretty` . Otherwise it will default to\n\t\t\"expanded\".\n\n\t\tIf |g:rustc_path| is defined, it is used as the path to rustc.\n\t\tOtherwise it is assumed rustc can be found in $PATH.\n\n:RustEmitIr [args]                                               *:RustEmitIr*\n\t\tCompiles the current file to LLVM IR and displays the results\n\t\tin a new split. If the current file has unsaved changes, it\n\t\twill be saved first using |:update|. If the current file is an\n\t\tunnamed buffer, it will be written to a temporary file first.\n\n\t\tThe arguments given to |:RustEmitIr| will be passed to rustc.\n\n\t\tIf |g:rustc_path| is defined, it is used as the path to rustc.\n\t\tOtherwise it is assumed rustc can be found in $PATH.\n\n:RustEmitAsm [args]                                             *:RustEmitAsm*\n\t\tCompiles the current file to assembly and displays the results\n\t\tin a new split. If the current file has unsaved changes, it\n\t\twill be saved first using |:update|. If the current file is an\n\t\tunnamed buffer, it will be written to a temporary file first.\n\n\t\tThe arguments given to |:RustEmitAsm| will be passed to rustc.\n\n\t\tIf |g:rustc_path| is defined, it is used as the path to rustc.\n\t\tOtherwise it is assumed rustc can be found in $PATH.\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Functions for Filtering in Vim\nDESCRIPTION: Demonstrates how to use lambda functions with filter() for more concise filtering. Two examples are shown: one keeping items where index * value <= 42, and another keeping odd-indexed items.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_69\n\nLANGUAGE: vim\nCODE:\n```\ncall filter(myList, {idx, val -> idx * val <= 42})\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall filter(myList, {idx -> idx % 2 == 1})\n```\n\n----------------------------------------\n\nTITLE: Managing Sessions and Shada in Vim\nDESCRIPTION: This snippet shows how to save and restore both a session and shada (shared data) file in Vim, allowing for complete state preservation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:mksession! ~/.config/nvim/secret.vim\n:wshada! ~/.local/state/nvim/shada/secret.shada\n```\n\nLANGUAGE: vim\nCODE:\n```\n:source ~/.config/nvim/secret.vim\n:rshada! ~/.local/state/nvim/shada/secret.shada\n```\n\n----------------------------------------\n\nTITLE: Adjusting Syntax Synchronization for LaTeX in VimL\nDESCRIPTION: Commands to adjust synchronization settings for LaTeX syntax highlighting. Can be tuned based on computer performance to optimize syntax highlighting speed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_136\n\nLANGUAGE: viml\nCODE:\n```\n:syn sync maxlines=200\n:syn sync minlines=50\n```\n\n----------------------------------------\n\nTITLE: Trim Directive Example in Treesitter Query (Both Sides)\nDESCRIPTION: This snippet illustrates the use of the `trim!` directive to trim whitespace, including blank lines, from both the beginning and end of the matched node. It shows the parameters required for trimming both sides.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_9\n\nLANGUAGE: query\nCODE:\n```\n\"(#trim! @fold 1 0 1 0)\"\n```\n\n----------------------------------------\n\nTITLE: Blob to List Conversion\nDESCRIPTION: Shows how to convert a blob to a list of byte values\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nblob2list(0z0102.0304)  \" returns [1, 2, 3, 4]\nblob2list(0z)        \" returns []\n```\n\n----------------------------------------\n\nTITLE: Using perldo for Line-by-Line Processing\nDESCRIPTION: Examples of using the :perldo command to process each line in a range, including reversing lines and adding line numbers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:perldo $_ = reverse($_);\n:perldo $_ = \"\".$linenr.\" => $line\";\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Script Block Folding in Vim\nDESCRIPTION: Vim configuration setting to disable folding of PowerShell script blocks in the syntax highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:let g:ps1_nofold_blocks = 1\n```\n\n----------------------------------------\n\nTITLE: RGB Color Definition\nDESCRIPTION: Example of setting RGB colors using hexadecimal values\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_194\n\nLANGUAGE: vim\nCODE:\n```\n:highlight Comment guifg=#11f0c3 guibg=#ff00ff\n```\n\n----------------------------------------\n\nTITLE: Enum Switch Statement in C\nDESCRIPTION: Example showing proper handling of switch statements for enumerated types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_17\n\nLANGUAGE: c\nCODE:\n```\ncase A:\n  ...\ncase B:\n  ...\ncase C:\n  ...\ncase D:\ncase E:\ncase F:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Forcing File Overwrite in Vim\nDESCRIPTION: Shows how to overwrite an existing file when writing a line range by appending '!' to the write command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:.,$write! tempo\n```\n\n----------------------------------------\n\nTITLE: Inclusive Syntax Containment in Vim\nDESCRIPTION: Shows how to create syntax regions that can contain all other syntax items or exclude specific groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region xList start=/\\[/ end=/\\]/ contains=ALL\n:syntax region xList start=/\\[/ end=/\\]/ contains=ALLBUT,xString\n```\n\n----------------------------------------\n\nTITLE: Setting Backup Directory Configuration in Vim\nDESCRIPTION: Example of setting backup directory paths with escaped characters to handle spaces and commas in directory names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nset bdir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n```\n\n----------------------------------------\n\nTITLE: Disabling Spell Checking in LaTeX Documents with VimL\nDESCRIPTION: Configuration to disable spell checking throughout an entire LaTeX document. This setting needs to be placed in your vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_132\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_nospell=1\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Contents into Vim\nDESCRIPTION: Shows how to insert the output of ls (Unix) or dir (Windows) commands into the current file below the cursor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:read !ls\n```\n\nLANGUAGE: vim\nCODE:\n```\n:read !dir\n```\n\n----------------------------------------\n\nTITLE: Opening URL in Vim\nDESCRIPTION: This command opens a file specified by a URL.  Move the cursor to any character of the URL and then use this command, Vim will figure out which program to use for downloading the file, download it and edit the copy. It uses the netrw plugin to handle the network access.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\tgf\n```\n\n----------------------------------------\n\nTITLE: Disabling Filetype Detection in Neovim Init File\nDESCRIPTION: Add this line to init.vim to disable the default filetype detection in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n:filetype off\n```\n\n----------------------------------------\n\nTITLE: Getting Process Priority with uv.os_getpriority()\nDESCRIPTION: Returns the scheduling priority of the specified process ID as a number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_100\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_getpriority({pid})\n```\n\n----------------------------------------\n\nTITLE: Moving windows to the left\nDESCRIPTION: Moves the current window to the far left.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n\tCTRL-W H\n```\n\n----------------------------------------\n\nTITLE: Enabling ReStructuredText Style in Neovim\nDESCRIPTION: This command sets the `g:rst_style` variable to `1`, enabling the optional formatting settings (expandtab, shiftwidth=3, softtabstop=3, tabstop=8) for ReStructuredText files. Requires the rst plugin to be installed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\n\tlet g:rst_style = 1\n```\n\n----------------------------------------\n\nTITLE: Automatically Opening Directory Listing on GVim Startup in VimL\nDESCRIPTION: This snippet demonstrates how to configure GVim to automatically open a directory listing on startup when no files are specified. It uses an autocommand to check startup conditions and open the current directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_56\n\nLANGUAGE: VimL\nCODE:\n```\naugroup VimStartup\n  au!\n  au VimEnter * if expand(\"%\") == \"\" && argc() == 0 &&\n  \\ (v:servername =~ 'GVIM\\d*' || v:servername == \"\")\n  \\ | e . | endif\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Channel Send Data Example in Vim\nDESCRIPTION: Shows how to send data through a channel using chansend() function, demonstrating list handling and newline processing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\ncall chansend(id, [\"abc\", \"123\\n456\", \"\"])\n```\n\n----------------------------------------\n\nTITLE: Registering Filetypes with Treesitter Language\nDESCRIPTION: Demonstrates how to associate specific filetypes with a Treesitter language parser.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nvim.treesitter.language.register('xml', { 'svg', 'xslt' })\n```\n\n----------------------------------------\n\nTITLE: Setting Russian keymap in Vim\nDESCRIPTION: Command to set a Russian keymap in Vim, which allows switching between languages independently from system keyboard settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/russian.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set keymap=russian-jcukenwin\n```\n\n----------------------------------------\n\nTITLE: Starting GUI Vim in Foreground Mode\nDESCRIPTION: This command starts gvim in foreground mode, which prevents it from disconnecting from the shell. This is useful when editing files from other programs that wait for the editor to finish.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngvim -f file.txt\n```\n\n----------------------------------------\n\nTITLE: Using UV Idle Handle for Loop Iteration Operations\nDESCRIPTION: Example demonstrating how to use an idle handle to execute code on every loop iteration before prepare handles.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal idle = uv.new_idle()\nidle:start(function()\n  print(\"Before I/O polling, no blocking\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Simple Word Wrapping Mappings\nDESCRIPTION: Key mappings for surrounding words with brackets and parentheses\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nmap <F5> i{<Esc>ea}<Esc>\nmap \\p i(<Esc>ea)<Esc>\nmap \\c i{<Esc>ea}<Esc>\n```\n\n----------------------------------------\n\nTITLE: Setting System Locale for makeencoding\nDESCRIPTION: Sets the makeencoding option to use the system locale encoding ('char') for reading output from external commands, which is particularly useful on Windows systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_47\n\nLANGUAGE: viml\nCODE:\n```\nset makeencoding=char\t\" system locale is used\n```\n\n----------------------------------------\n\nTITLE: Enabling Cargo Check with All Features\nDESCRIPTION: When enabled, passes the '--all-features' option to Cargo when Syntastic performs linting, enabling all features of the package during the check regardless of their default status.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_cargo_check_all_features = 0\n```\n\n----------------------------------------\n\nTITLE: Basic Function Documentation in C\nDESCRIPTION: Example showing how to document a function without using Doxygen comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n// Note that we don't use Doxygen comments here.\nIterator *get_iterator(void *arg1, void *arg2)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting guifont in Vim\nDESCRIPTION: Examples of setting the 'guifont' option in Vim, which specifies the font used for the GUI version of Vim. The option allows for various font properties to be set, including name, size, weight, and character set.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\nset guifont=courier_new:h12:w5:b:cRUSSIAN\nset guifont=Andale_Mono:h7.5:w4.5\n```\n\n----------------------------------------\n\nTITLE: Editing a specific file in the preview window (Vim)\nDESCRIPTION: This snippet shows how to edit a specific file in the preview window using the `:pedit` command, useful for editing header files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n\":pedit defs.h\"\n```\n\n----------------------------------------\n\nTITLE: Starting Blockwise Visual Mode in Neovim\nDESCRIPTION: This command starts blockwise Visual mode, allowing for rectangular selections of text. The [count] argument can be used to specify the dimensions of the block to be selected.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n\"[count]CTRL-V\"\n```\n\n----------------------------------------\n\nTITLE: Expression-based Folding for Email Quotes\nDESCRIPTION: Vim configuration for folding email quoted text based on '>' characters at the start of lines using foldexpr.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:set foldmethod=expr\n:set foldexpr=strlen(substitute(substitute(getline(v:lnum),'\\\\s','','g'),'[^>].*','',''))\n```\n\n----------------------------------------\n\nTITLE: Force File Encoding When Opening File in Vim\nDESCRIPTION: Example of forcing a specific encoding (KOI8-R) when opening a Russian text file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:edit ++enc=koi8-r russian.txt\n```\n\n----------------------------------------\n\nTITLE: Square Bracket Navigation Commands in Neovim\nDESCRIPTION: Advanced navigation commands using square brackets for moving between sections, changes, marks, and searching through code and included files\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n[ CTRL-D - jump to first #define\n[I - list lines containing word under cursor\n]] - move to next section\n```\n\n----------------------------------------\n\nTITLE: Searching Files with Unix Grep and Vim\nDESCRIPTION: Opens Vim to edit all C files containing the word 'frame_counter'. Uses backticks to execute the grep command and feed its results as file arguments to Vim. The -l flag makes grep only output matching filenames.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvim `grep -l frame_counter *.c`\n```\n\n----------------------------------------\n\nTITLE: Disabling hlsearch highlight in Vim\nDESCRIPTION: Example of using the :nohlsearch command to temporarily disable the highlighting of search matches without changing the 'hlsearch' option value. This is useful when the highlighting becomes distracting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n:nohlsearch\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access in Vim\nDESCRIPTION: Example showing how to get the value of HOME environment variable using getenv() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_91\n\nLANGUAGE: vim\nCODE:\n```\nmyHome = getenv('HOME')\n```\n\n----------------------------------------\n\nTITLE: Checking Neovim Runtime Path\nDESCRIPTION: Vim command to display the current runtime path setting, which shows where Neovim looks for configuration files including filetype plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_43.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\nset runtimepath?\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Keys for Column/Table Lists\nDESCRIPTION: Allows the user to customize the keys for navigating between table and column lists in the dynamic completion popup.  This example shows how to set the right and left arrow keys.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n                                let g:ftplugin_sql_omni_key_right = '<Right>'\n                                let g:ftplugin_sql_omni_key_left  = '<Left>'\n```\n\n----------------------------------------\n\nTITLE: Sending Redraw Batch in RPC Notification for Nvim UI\nDESCRIPTION: Example of a typical 'redraw' batch sent in a single RPC notification to update the UI. It includes various events like grid_resize, grid_line, msg_showmode, win_pos, grid_cursor_goto, and flush.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n['notification', 'redraw',\n  [\n    ['grid_resize', [2, 77, 36]],\n    ['grid_line',\n      [2, 0, 0, [[' ' , 0, 77]], false],\n      [2, 1, 0, [['~', 7], [' ', 7, 76]], false],\n      [2, 9, 0, [['~', 7], [' ', 7, 76]], false],\n      ...\n      [2, 35, 0, [['~', 7], [' ', 7, 76]], false],\n      [1, 36, 0, [['[', 9], ['N'], ['o'], [' '], ['N'], ['a'], ['m'], ['e'], [']']], false],\n      [1, 36, 9, [[' ', 9, 50]], false],\n      [1, 36, 59, [['0', 9], [','], ['0'], ['-' ], ['1'], [' ', 9, 10], ['A'], ['l', 9, 2]], false]\n    ],\n    ['msg_showmode', [[]]],\n    ['win_pos', [2, 1000, 0, 0, 77, 36]],\n    ['grid_cursor_goto', [2, 0, 0]],\n    ['flush', []]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Using Nested Syntax Items in Vim Script\nDESCRIPTION: Allows for nested syntax highlighting, such as highlighting specific words within comments, by defining contained items and specifying which items may contain others.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_7\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax keyword xTodo TODO contained\n:syntax match xComment /%.*/ contains=xTodo\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Scheme Directory\nDESCRIPTION: Commands to create a custom color scheme directory and copy an existing scheme as template\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n!mkdir -p ~/.config/nvim/colors\n!cp $VIMRUNTIME/colors/morning.vim ~/.config/nvim/colors/mine.vim\n```\n\n----------------------------------------\n\nTITLE: Configuring Dotnet Compiler Output Options\nDESCRIPTION: Configuration for the .NET CLI compiler to limit output to errors only and suppress project name in error messages.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_41\n\nLANGUAGE: vim\nCODE:\n```\nlet dotnet_errors_only = v:true\nlet dotnet_show_project_file = v:false\ncompiler dotnet\n```\n\n----------------------------------------\n\nTITLE: Parsing Treesitter Query in Lua\nDESCRIPTION: Demonstrates how to parse a Treesitter query string and iterate over captures in Lua. The example parses a 'vimdoc' query, retrieves the syntax tree, and prints node types and text for each capture.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nlocal query = vim.treesitter.query.parse('vimdoc', [[\n  ; query\n  ((h1) @str\n    (#trim! @str 1 1 1 1))\n]])\nlocal tree = vim.treesitter.get_parser():parse()[1]\nfor id, node, metadata in query:iter_captures(tree:root(), 0) do\n   -- Print the node name and source text.\n   vim.print({node:type(), vim.treesitter.get_node_text(node, vim.api.nvim_get_current_buf())})\nend\n```\n\n----------------------------------------\n\nTITLE: Enhancing Clojure Syntax Highlighting in VimL\nDESCRIPTION: Adds additional symbols to Clojure syntax highlighting via the 'g:clojure_syntax_keywords' dictionary. Users can also toggle core keyword highlighting and enable code folding.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_15\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:clojure_syntax_keywords = { 'clojureMacro': [\"defproject\", \"defcustom\"], 'clojureFunc': [\"string/join\", \"string/replace\"] }\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Metadata in Vimscript\nDESCRIPTION: The api_info() function returns a Dictionary containing Neovim API metadata. It can be used to inspect the available API functions and their parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_4\n\nLANGUAGE: vimscript\nCODE:\n```\nlua vim.print(vim.fn.api_info())\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Dictionaries in Vim\nDESCRIPTION: Demonstrates how to create nested dictionaries with dictionaries as values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_44\n\nLANGUAGE: vim\nCODE:\n```\n:let nestdict = {1: {11: 'a', 12: 'b'}, 2: {21: 'c'}}\n```\n\n----------------------------------------\n\nTITLE: File Navigation Commands in Vim\nDESCRIPTION: Examples of various file navigation and command syntax including line printing and searching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:|\n:3|\n:3\n:1,$:s/pat/string\n```\n\n----------------------------------------\n\nTITLE: Setting guicursor for mode-specific cursor styles in Neovim\nDESCRIPTION: Configures the 'guicursor' option to set different cursor styles for various Vim modes. This example sets block cursors for normal/visual modes, a vertical bar for insert mode, and a horizontal bar for replace mode, with custom blinking settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_23\n\nLANGUAGE: viml\nCODE:\n```\nset guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n  \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n  \\,sm:block-blinkwait175-blinkoff150-blinkon175\n```\n\n----------------------------------------\n\nTITLE: Window Equalizing Command\nDESCRIPTION: Command to equalize window sizes vertically or horizontally using wincmd. Shows how to make windows equally high or wide while respecting winheight and winwidth settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nvertical wincmd =\nhorizontal wincmd =\n```\n\n----------------------------------------\n\nTITLE: Enabling multiline scalar detection in YAML\nDESCRIPTION: Enables detection of multiline scalars in YAML files. By default, the YAML indent script does not try to detect multiline scalars.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\nlet g:yaml_indent_multiline_scalar = 1\n```\n\n----------------------------------------\n\nTITLE: Identifier Pattern Matching\nDESCRIPTION: Patterns for matching programming language identifiers that start with a letter and contain letters, digits, and underscores.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n/\\<\\h\\w*\\>\n/\\w\\@<!\\h\\w*\\w\\@!\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace Properties in Neovim Lua API\nDESCRIPTION: Experimental function to set properties for a namespace. Allows setting optional parameters like a list of windows to be scoped in.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_70\n\nLANGUAGE: lua\nCODE:\n```\nnvim__ns_set({ns_id}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Getting $VIMRUNTIME value using nvim command\nDESCRIPTION: This command executes nvim in headless mode with a clean environment to echo the value of the $VIMRUNTIME environment variable. This is particularly useful for scripts that need to locate support files like documentation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n\"VIMRUNTIME=\\\"$(nvim --clean --headless --cmd 'echo $VIMRUNTIME|q')\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Loading specific numbered view\nDESCRIPTION: Loads the second numbered view that was previously saved. This allows managing multiple view configurations for the same file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_14\n\nLANGUAGE: vimdoc\nCODE:\n```\n:loadview 2\n```\n\n----------------------------------------\n\nTITLE: Disabling Translated Headers in Diff Syntax Highlighting\nDESCRIPTION: Turns off translation of headers in Vim's diff syntax highlighting to improve performance for files with very long lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_23\n\nLANGUAGE: VimScript\nCODE:\n```\nlet diff_translations = 0\n```\n\n----------------------------------------\n\nTITLE: Custom Diff Expression Function in Vim\nDESCRIPTION: Example implementation of a custom diff expression function that handles case sensitivity and whitespace options when comparing files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\nset diffexpr=MyDiff()\nfunction MyDiff()\n   let opt = \"\"\n   if &diffopt =~ \"icase\"\n     let opt = opt .. \"-i \"\n   endif\n   if &diffopt =~ \"iwhite\"\n     let opt = opt .. \"-b \"\n   endif\n   silent execute \"!diff -a --binary \" .. opt .. v:fname_in .. \" \" .. v:fname_new ..\n\t\\  \" > \" .. v:fname_out\n   redraw!\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Best Practices in C\nDESCRIPTION: Example showing proper formatting and handling of switch statements with default case.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nswitch (var) {\n  case 0:\n    ...\n    break;\n  case 1:\n    ...\n    break;\n  default:\n    abort();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TeX Flavor for LaTeX Compilation\nDESCRIPTION: Example of setting the TeX flavor for compiling TeX documents, specifically configuring amstex as the processing engine for the current buffer when working with AMS-TeX files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\n:let b:tex_flavor = 'amstex'\n:compiler tex\n[editing...]\n:make mypaper\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Sign with Multiple Attributes\nDESCRIPTION: Example showing how to define a sign named 'MySign' with text, text highlighting and line highlighting attributes\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:sign define MySign text=>> texthl=Search linehl=DiffText\n```\n\n----------------------------------------\n\nTITLE: Using UV Prepare Handle for Pre-I/O Operations\nDESCRIPTION: Example demonstrating how to use a prepare handle to execute code before I/O polling in the event loop.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal prepare = uv.new_prepare()\nprepare:start(function()\n  print(\"Before I/O polling\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting Language in Neovim\nDESCRIPTION: Command to change the language/locale setting within Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:language ja_JP.EUC\n```\n\n----------------------------------------\n\nTITLE: Activating Form Enhanced Color Mode in Vim\nDESCRIPTION: Enhances the color distinction for FORM programs in Vim, beneficial for dark theme users, by setting 'form_enhanced_color' to 1. There's a focus on distinguishing header statements from body statements with specific color changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_33\n\nLANGUAGE: VimScript\nCODE:\n```\n:let form_enhanced_color=1\n```\n\n----------------------------------------\n\nTITLE: Removing Toolbar from GUI\nDESCRIPTION: Command to permanently disable the toolbar in gVim by modifying guioptions\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set guioptions-=T\n```\n\n----------------------------------------\n\nTITLE: Custom EditorConfig Property Implementation\nDESCRIPTION: Demonstrates how to add a custom EditorConfig property named 'foo' that validates against charset and sets a buffer-local variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/editorconfig.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nrequire('editorconfig').properties.foo = function(bufnr, val, opts)\n  if opts.charset and opts.charset ~= \"utf-8\" then\n    error(\"foo can only be set when charset is utf-8\", 0)\n  end\n  vim.b[bufnr].foo = val\nend\n```\n\n----------------------------------------\n\nTITLE: Function Arguments Documentation in C\nDESCRIPTION: Examples of documenting function arguments with poor and improved comment styles.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nbool success = calculate_something(interesting_value,\n                                   10,\n                                   false,\n                                   NULL);  // What are these arguments??\n```\n\n----------------------------------------\n\nTITLE: Script-Local Variables in VimL\nDESCRIPTION: This snippet emphasizes the use of script-local variables to avoid conflicts when sourcing different scripts in VimL. By using s: prefix, variables are confined to the script, preventing interference. This example demonstrates using a counter within a script call, which remains unaffected by external script inclusions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_3\n\nLANGUAGE: VimL\nCODE:\n```\n:let s:count = 1\n:while s:count < 5\n:  source other.vim\n:  let s:count += 1\n:endwhile\n```\n\n----------------------------------------\n\nTITLE: Truncating Floating-Point Numbers in Vim\nDESCRIPTION: Examples of using the trunc() function to truncate floating-point numbers towards zero in Vim. Shows behavior for positive and negative numbers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_277\n\nLANGUAGE: vim\nCODE:\n```\necho trunc(1.456)\necho trunc(-5.456)\necho trunc(4.0)\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax Region Definition in Vim\nDESCRIPTION: Demonstrates defining contained syntax regions with keepend argument to prevent double end-of-line matching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region xComment start=/%/ end=/$/ contained\n:syntax region xPreProc start=/#/ end=/$/ contains=xComment keepend\n```\n\n----------------------------------------\n\nTITLE: Enabling Erlang Special Atoms Highlighting in Vim\nDESCRIPTION: This snippet enables syntax highlighting for special atoms in Erlang within Vim by setting the 'g:erlang_highlight_special_atoms' variable to 1. No additional plugins or dependencies are required.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_32\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:erlang_highlight_special_atoms = 1\n```\n\n----------------------------------------\n\nTITLE: Setting mapleader Variable in Vim\nDESCRIPTION: Sets the mapleader variable to a comma, changing the prefix used by <Leader> mappings from the default backslash to a comma.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nlet mapleader = \",\"\n```\n\n----------------------------------------\n\nTITLE: Printf Width and Precision Examples in Vim\nDESCRIPTION: Demonstrates using width and precision specifiers with printf formatting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_195\n\nLANGUAGE: vim\nCODE:\n```\necho printf(\"%1$*2$.*3$d\", 1, 2, 3)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho printf(\"%1$4.*2$f\", 1.4142135, 6)\n```\n\n----------------------------------------\n\nTITLE: Getting buffer-local user commands in Neovim\nDESCRIPTION: This function retrieves a map of buffer-local user-defined commands in Neovim. The function requires the buffer ID and optional parameters. The return value is a map of maps describing commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\nnvim_buf_get_commands({buffer}, {opts})              *nvim_buf_get_commands()*\\n    Gets a map of buffer-local |user-commands|.\\n\\n    Attributes: ~\\n        Since: 0.3.0\\n\\n    Parameters: ~\\n      • {buffer}  Buffer id, or 0 for current buffer\\n      • {opts}    Optional parameters. Currently not used.\\n\\n    Return: ~\\n        Map of maps describing commands.\n```\n\n----------------------------------------\n\nTITLE: Moving windows to the bottom\nDESCRIPTION: Moves the current window to the bottom.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n\tCTRL-W J\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Information with uv.os_uname()\nDESCRIPTION: Returns a table containing system information including operating system name, release, version, and machine architecture.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_89\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_uname()\n```\n\n----------------------------------------\n\nTITLE: Comment alignment example in Vim\nDESCRIPTION: This snippet illustrates the use of alignment flags ('r' and offset) within the 'comments' option to customize the appearance of a comment. It demonstrates how the 'r' flag and the offset are used to align the start and end of a comment.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n\":set comments=sr:/***,m:**,ex-2:******/\"\n```\n\n----------------------------------------\n\nTITLE: Disabling PDF Maps in Neovim\nDESCRIPTION: This command sets the `g:no_pdf_maps` variable to `1`, which disables the default key mappings (<C-]> and <C-T>) for navigating PDF files. It requires the pdf plugin to be installed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n\t:let g:no_pdf_maps = 1\n```\n\n----------------------------------------\n\nTITLE: Random Number Seed Initialization with srand()\nDESCRIPTION: Demonstrates initializing random number generator seed using srand() function with and without parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_251\n\nLANGUAGE: vim\nCODE:\n```\nlet seed = srand()\nlet seed = srand(userinput)\necho rand(seed)\n```\n\n----------------------------------------\n\nTITLE: List Unpacking with Rest Parameter in Vim\nDESCRIPTION: Shows how to handle extra list items during unpacking by using a semicolon and rest variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\n:let [var1, var2; rest] = mylist\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tab Page\nDESCRIPTION: Shows how to create a new tab page and open a file in it. This command creates a new tab and opens 'thatfile' for editing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n:tabedit thatfile\n```\n\n----------------------------------------\n\nTITLE: Chaining Execute with Other Commands\nDESCRIPTION: Demonstrates executing an external shell command and then echoing text afterward, bypassing Vim's command separator limitations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_113\n\nLANGUAGE: vim\nCODE:\n```\n:execute '!ls' | echo \"theend\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vim Process ID\nDESCRIPTION: The getpid() function returns the process ID of the Vim process as a number. This ID is unique until Vim exits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_101\n\nLANGUAGE: vim\nCODE:\n```\ngetpid()\n```\n\n----------------------------------------\n\nTITLE: Setting Autoread Local to Global Value\nDESCRIPTION: Command to switch back to using the global value for the autoread option when it has a local value.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nset autoread<\n```\n\n----------------------------------------\n\nTITLE: Setting Unix Backup Directory Paths\nDESCRIPTION: Example of configuring backup directory paths for Unix systems, including hidden backup directories.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nset backupdir=./.backup,~/.backup,.,/tmp\n```\n\n----------------------------------------\n\nTITLE: GDB Stack Trace Commands\nDESCRIPTION: Commands for examining stack traces in GDB during Vim debugging sessions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwhere\nframe 3\n```\n\n----------------------------------------\n\nTITLE: Comparing Lists with Different Types in Vim\nDESCRIPTION: Demonstrates that Vim lists with different types (number vs string) are considered not equal, unlike direct comparison.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\necho [4] == [\"4\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring R Indentation in Vim\nDESCRIPTION: This snippet configures R code indentation by modifying Vim variables such as 'r_indent_align_args', 'r_indent_ess_comments', and 'r_indent_comment_column'. It addresses alignment of function arguments, comment indentation, and compatibility with Emacs/ESS indentation behavior. Users can achieve desired layout by setting these variables in their Vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_11\n\nLANGUAGE: VimL\nCODE:\n```\nlet r_indent_align_args = 0\nlet r_indent_ess_comments = 1\nlet r_indent_comment_column = 30\nlet r_indent_ess_compatible = 1\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim from Pre-built Linux Archive\nDESCRIPTION: Shell commands to download and install Neovim from pre-built archive on Linux systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz\nsudo rm -rf /opt/nvim\nsudo tar -C /opt -xzf nvim-linux-x86_64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Gsub Directive Example in Treesitter Query\nDESCRIPTION: This code snippet demonstrates the usage of the `gsub!` directive within a treesitter query. It shows how to use regular expressions to replace parts of the matched node's text and stores the result in the metadata.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_7\n\nLANGUAGE: query\nCODE:\n```\n\"(#gsub! @_node \\\".*%.(.*)\\\" \\\"%1\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Getting Process Title in Lua with Libuv\nDESCRIPTION: Retrieves the title of the current process.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_73\n\nLANGUAGE: lua\nCODE:\n```\nuv.get_process_title()\n```\n\n----------------------------------------\n\nTITLE: Configuring R Code Syntax Highlighting in Vim\nDESCRIPTION: Sets configuration options for R syntax highlighting, including the number of lines to parse backwards, ROxygen highlighting, folding options, and function pattern highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_102\n\nLANGUAGE: vim\nCODE:\n```\nlet r_syntax_minlines = 60\nlet r_syntax_hl_roxygen = 0\nlet r_syntax_folding = 1\nlet r_syntax_fun_pattern = 1\n```\n\n----------------------------------------\n\nTITLE: Listing Sourced Scripts in Vim\nDESCRIPTION: The :scriptnames command lists all sourced script names in the order they were first sourced, including their script ID.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:scr[iptnames]\n```\n\n----------------------------------------\n\nTITLE: Cleanup Before Loading New Color Scheme in VimL\nDESCRIPTION: This autocmd example demonstrates how to clean up resources just before loading another colorscheme using the ColorSchemePre event. It unregisters itself after executing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\nlet g:term_ansi_colors = ...\naugroup MyColorscheme\n  au!\n  au ColorSchemePre * unlet g:term_ansi_colors\n  au ColorSchemePre * au! MyColorscheme\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Setting makeprg for LaTeX Non-stop Mode in Vim\nDESCRIPTION: Configures the makeprg option to run LaTeX in non-stop mode, so it continues processing even when errors are encountered, making it possible to collect multiple errors at once.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_67\n\nLANGUAGE: vim\nCODE:\n```\n:set makeprg=latex\\ \\\\\\\\nonstopmode\\ \\\\\\\\input\\\\{$*}\n```\n\n----------------------------------------\n\nTITLE: Getting Script Number in Vim/Neovim Function\nDESCRIPTION: A function to retrieve the unique script number for use in complex scripts. It uses the expand() function with <SID> to extract the script number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_30\n\nLANGUAGE: viml\nCODE:\n```\nfunc s:ScriptNumber()\n  return matchstr(expand('<SID>'), '<SNR>\\zs\\d\\+\\ze_')\nendfunc\n```\n\n----------------------------------------\n\nTITLE: Netrw Sort Options Configuration in VimL\nDESCRIPTION: Example showing how to configure g:netrw_sort_options to use case-insensitive sorting in the Netrw file browser. This setting is added to the :sort command used by Netrw internally.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_39\n\nLANGUAGE: viml\nCODE:\n```\nlet g:netrw_sort_options=\"i\"\n```\n\n----------------------------------------\n\nTITLE: Repeating a Functional Test\nDESCRIPTION: This command repeats a specified functional test a defined number of times using the BUSTED_ARGS environment variable to modify the test execution parameters, specifically to repeat and avoid maintaining the current state across runs.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nBUSTED_ARGS=\"--repeat=100 --no-keep-going\" TEST_FILE=test/functional/foo_spec.lua make functionaltest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake -E env \"TEST_FILE=test/functional/foo_spec.lua\" cmake -E env BUSTED_ARGS=\"--repeat=100 --no-keep-going\" cmake --build build --target functionaltest\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Raw String Literal Highlighting in Vim\nDESCRIPTION: Sets the maximum number of quote marks and interpolation braces recognized for C# raw string literals in Vim syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_21\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:cs_raw_string_quote_count = 8\nlet g:cs_raw_string_interpolation_brace_count = 8\n```\n\n----------------------------------------\n\nTITLE: Binding a Pipe to a Name\nDESCRIPTION: Binds a pipe handle to a specified file path or name, making it ready for listening or communication. This function takes note of platform-specific considerations for naming conventions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nuv.pipe_bind({pipe}, {name})\n```\n\n----------------------------------------\n\nTITLE: Enabling Heredoc Folding for Shell Scripts\nDESCRIPTION: Setting the shell folding option to 2 to enable folding of heredocs in shell scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_121\n\nLANGUAGE: vim\nCODE:\n```\nlet g:sh_fold_enabled= 2\n```\n\n----------------------------------------\n\nTITLE: Enabling Directory Tracking in Netrw\nDESCRIPTION: Setting to make the current directory track the browsing location in netrw by disabling the keepdir option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_47\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_keepdir= 0\n```\n\n----------------------------------------\n\nTITLE: Equivalent regex matching for filenames in Vim\nDESCRIPTION: An equivalent example to the glob2regpat() usage, using a direct regular expression pattern to match filenames with the =~ operator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_113\n\nLANGUAGE: vim\nCODE:\n```\nif filename =~ '^Make.*\\.mak$'\n  \" ...\nendif\n```\n\n----------------------------------------\n\nTITLE: Swap File Location Check\nDESCRIPTION: Command to list all swap files in the current directory and standard swap file locations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nvim -r\n```\n\n----------------------------------------\n\nTITLE: Setting Right-to-Left Mode in Neovim\nDESCRIPTION: Toggles the window orientation to right-to-left mode, which is necessary for proper Arabic text display.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_6\n\nLANGUAGE: VimScript\nCODE:\n```\n:set rightleft\n```\n\n----------------------------------------\n\nTITLE: Example Lua Code with Comments\nDESCRIPTION: Sample Lua code demonstrating comment structure for query examples.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- TODO: This is a\\n-- very long\\n-- comment (just imagine it)\n```\n\n----------------------------------------\n\nTITLE: Setting filetype in a C file comment\nDESCRIPTION: Example of setting the filetype option in a C file comment to specify the file as an IDL file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n/* vim: set filetype=idl : */\n```\n\n----------------------------------------\n\nTITLE: Cinoptions Function Brace Placement\nDESCRIPTION: Demonstrates function opening brace placement with different 'f' cinoption values\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n  func()\n  {\n      int foo;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Process ID with uv.os_getpid()\nDESCRIPTION: Returns the process ID of the current process as a number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_98\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_getpid()\n```\n\n----------------------------------------\n\nTITLE: Finding files with backticks using glob in Vim\nDESCRIPTION: Using the glob() function with backticks to execute an external command ('find' in this case) to locate tag files, then processing the result to set the 'tags' option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_111\n\nLANGUAGE: vim\nCODE:\n```\nlet tagfiles = glob(\"`find . -name tags -print`\")\nlet &tags = substitute(tagfiles, \"\\n\", \",\", \"g\")\n```\n\n----------------------------------------\n\nTITLE: Valgrind Memory Leak Detection\nDESCRIPTION: Command for running Vim under Valgrind to detect memory leaks with full leak checking enabled.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/debug.txt#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvalgrind --log-file=valgrind.log --leak-check=full ./vim\n```\n\n----------------------------------------\n\nTITLE: Conditional Folding in Fortran Files in Vim\nDESCRIPTION: Enables the creation of fold regions for Fortran's conditional constructs (e.g., do loops, if blocks) by setting 'fortran_fold_conditionals'. This aids in managing complex control structures in large files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_41\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_fold_conditionals=1\n```\n\n----------------------------------------\n\nTITLE: Silent Error Handling Example\nDESCRIPTION: Demonstrates error handling with :silent! command and checking v:errmsg.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\n:let v:errmsg = \"\"\n:silent! /^begin\n:if v:errmsg != \"\"\n: ... pattern was not found\n```\n\n----------------------------------------\n\nTITLE: Disabling Line Wrapping in Vim\nDESCRIPTION: This command disables line wrapping by setting the 'nowrap' option. This is helpful when editing files with long lines, such as binary files, as it prevents Vim from breaking the lines and making it difficult to view the content.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n\t:set nowrap\n```\n\n----------------------------------------\n\nTITLE: Query Pattern with Any-Match Predicate\nDESCRIPTION: Query pattern demonstrating the any-match? predicate for flexible comment matching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_6\n\nLANGUAGE: query\nCODE:\n```\n(((comment)+ @comment)\\n (#any-match? @comment \"TODO\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable with uv.os_setenv()\nDESCRIPTION: Sets an environment variable with the specified name and value. This function is not thread-safe.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_92\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_setenv({name}, {value})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Autocommand for File Processing\nDESCRIPTION: Example of defining an autocommand that checks the first line of a file for a specific string and calls a function if found, providing an alternative to modelines for custom file processing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_8\n\nLANGUAGE: viml\nCODE:\n```\nau BufReadPost * if getline(1) =~ \"VAR\" | call SetVar() | endif\n```\n\n----------------------------------------\n\nTITLE: Defining a NewGrep Command in Vim\nDESCRIPTION: This Vim command defines a new command called `NewGrep` that executes a silent grep command with the provided arguments and then opens the quickfix window with 42 lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\ncommand! -nargs=+ NewGrep execute 'silent grep! <args>' | copen 42\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Errorformat Configuration for LaTeX in Vim\nDESCRIPTION: Sets a complex errorformat that properly parses LaTeX's multi-line error and warning messages, handles file inclusions, and filters out irrelevant information from the LaTeX compiler output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_68\n\nLANGUAGE: vim\nCODE:\n```\n:set efm=%E!\\ LaTeX\\ %trror:\\ %m,\n\t\\%E!\\ %m,\n\t\\%+WLaTeX\\ %.%#Warning:\\ %.%#line\\ %l%.%#,\n\t\\%+W%.%#\\ at\\ lines\\ %l--%*\\\\d,\n\t\\%WLaTeX\\ %.%#Warning:\\ %m,\n\t\\%Cl.%l\\ %m,\n\t\\%+C\\ \\ %m.,\n\t\\%+C%.%#-%.%#,\n\t\\%+C%.%#[]%.%#,\n\t\\%+C[]%.%#,\n\t\\%+C%.%#%[{}\\\\]%.%#,\n\t\\%+C<%.%#>%.%#,\n\t\\%C\\ \\ %m,\n\t\\%-GSee\\ the\\ LaTeX%m,\n\t\\%-GType\\ \\ H\\ <return>%m,\n\t\\%-G\\ ...%.%#,\n\t\\%-G%.%#\\ (C)\\ %.%#,\n\t\\%-G(see\\ the\\ transcript%.%#),\n\t\\%-G\\\\s%#,\n\t\\%+O(%f)%r,\n\t\\%+P(%f%r,\n\t\\%+P\\ %\\\\=(%f%r,\n\t\\%+P%*[^()](%f%r,\n\t\\%+P[%\\\\d%[^()]%#(%f%r,\n\t\\%+Q)%r,\n\t\\%+Q%*[^()])%r,\n\t\\%+Q[%\\\\d%*[^()])%r\n```\n\n----------------------------------------\n\nTITLE: Column Position Examples in Vim\nDESCRIPTION: Demonstrates various ways to get column positions using col() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\necho col(\".\")\t\t\t\" column of cursor\necho col(\"$\")\t\t\t\" length of cursor line plus one\necho col(\"'t\")\t\t\t\" column of mark t\necho col(\"'\" .. markname)\t\" column of mark markname\n```\n\n----------------------------------------\n\nTITLE: Changing Case to Lowercase in Vim\nDESCRIPTION: Uses the 'gu' operator with 'w' motion to convert the current word to lowercase.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\nguw\n```\n\n----------------------------------------\n\nTITLE: Setting Java Source Path\nDESCRIPTION: Code snippets showing how to configure Java source path for .jar or .zip files and update the path option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nlet g:ftplugin_java_source_path = '/path/to/src.jar'\nlet g:ftplugin_java_source_path = '/path/to/src.zip'\nlet g:ftplugin_java_source_path = $JDK_SRC_PATH\nlet &l:path = g:ftplugin_java_source_path . ',' . &l:path\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Command in Vim\nDESCRIPTION: This snippet describes how to delete a user-defined command in Vim. The example shows deleting a command named 'SaveIt'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:delcommand SaveIt\n```\n\n----------------------------------------\n\nTITLE: Getting Msgpack Type with Msgpack in Vim\nDESCRIPTION: Returns the name of the key in v:msgpack_types for a given Msgpack value. It always returns a type description and never zero.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#type({msgpack-value})\n```\n\n----------------------------------------\n\nTITLE: Resetting SQL Completion Cache\nDESCRIPTION: Defines a key mapping to reset the SQL completion plugin's cache. This is useful when database schema changes occur, requiring a refresh of the completion suggestions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n    imap <buffer> <C-C>R <C-\\><C-O>:call sqlcomplete#Map('ResetCache')<CR><C-X><C-O>\n```\n\n----------------------------------------\n\nTITLE: Disabling isKeyword Option for Syntax Omni Completion\nDESCRIPTION: Configuration to disable the use of isKeyword option for syntax-based Omni completion, forcing the plugin to break on word characters instead of using filetype-specific word boundaries.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\nlet g:omni_syntax_use_iskeyword = 0\n```\n\n----------------------------------------\n\nTITLE: Moving Vim Window to Specific Position in GUI\nDESCRIPTION: This command moves the Vim window to a specific position on the screen, specified in pixels. In this example, it moves the window 172 pixels from the left and 103 pixels from the top.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:winpos 172 103\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Syntax Matches with Leading Context\nDESCRIPTION: Example demonstrating syntax matches with leading context and no-backslash patterns\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_167\n\nLANGUAGE: vim\nCODE:\n```\n:syn match ZNoBackslash \"[^\\\\]z\"ms=s+1\n:syn match WNoBackslash \"[^\\\\]w\"lc=1\n:syn match Underline \"_\\+\"\n```\n\n----------------------------------------\n\nTITLE: Setting File Encodings Example in Vim\nDESCRIPTION: Example of configuring fileencodings to try different character encodings when reading files, falling back to Japanese encoding (sjis) if UTF-8 detection fails.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:set fileencodings=ucs-bom,utf-8,sjis\n```\n\n----------------------------------------\n\nTITLE: Setting foldtext expression in Vim\nDESCRIPTION: This snippet shows how to customize the text displayed for a closed fold using the 'foldtext' option.  It uses a Vim command to set the 'foldtext' to an expression that removes certain patterns from the first line of the fold.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\\\*\\\\\\|\\\\*/\\\\\\|{{{\\\\d\\\\=','','g')\n```\n\n----------------------------------------\n\nTITLE: EndOfBuffer and Normal Highlighting Fix\nDESCRIPTION: Configuration to fix cursor flickering in tmux by setting background colors to NONE.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nhi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\nhi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n```\n\n----------------------------------------\n\nTITLE: Accessing Bytes in a Blob - Vim Script\nDESCRIPTION: This code snippet shows how to access bytes within a Blob using indexing, with support for both positive and negative indexing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_62\n\nLANGUAGE: vim\nCODE:\n```\n:let myblob = 0z00112233\n:let byte = myblob[0]   \" get the first byte: 0x00\n:let byte = myblob[2]   \" get the third byte: 0x22\n:let last = myblob[-1]  \" get the last byte: 0x33\n```\n\n----------------------------------------\n\nTITLE: Setting Highlight Namespace for Window in Neovim Lua API\nDESCRIPTION: Sets the highlight namespace for a window, using highlights defined with nvim_set_hl() for this namespace. Falls back to global highlights when missing. Available since Neovim 0.8.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_78\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_set_hl_ns({window}, {ns_id})\n```\n\n----------------------------------------\n\nTITLE: Enabling Markdown Folding in Neovim\nDESCRIPTION: This command sets the `g:markdown_folding` variable to `1`, which enables folding in Markdown files. Requires the markdown plugin to be installed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n\tlet g:markdown_folding = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Syntax Synchronization\nDESCRIPTION: Example showing syntax synchronization configuration with maximum lines constraint\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_173\n\nLANGUAGE: vim\nCODE:\n```\n:syntax sync maxlines=500 ccomment\n```\n\n----------------------------------------\n\nTITLE: Opening Files in Multiple Horizontal Windows with Command Line Arguments\nDESCRIPTION: Command to open Vim with three files, each in its own horizontally split window. The '-o' argument creates horizontal splits, while '-O' would create vertical splits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nvim -o file1 file2 file3\n```\n\n----------------------------------------\n\nTITLE: Compressed File Writing Autocommands\nDESCRIPTION: Alternative method for writing compressed files using FileWritePre and FileWritePost events with binary mode handling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\n:autocmd FileWritePre *.gz   set bin|'[,']!gzip\n:autocmd FileWritePost *.gz  undo|set nobin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lua Formatting with Stylua in CMake\nDESCRIPTION: Creates a target for formatting Lua files using stylua. The target processes Lua files in specified directories and applies stylua's formatting rules to modify them.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nadd_glob_target(\n  TARGET formatlua\n  COMMAND ${STYLUA_PRG}\n  FLAGS --respect-ignores\n  GLOB_DIRS ${STYLUA_DIRS}\n  GLOB_PAT *.lua\n  TOUCH_STRATEGY PER_DIR)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Indentation Settings in Vim - Vim\nDESCRIPTION: Modifies the indentation behavior in Vim by setting 'shiftwidth' and 'softtabstop'. This ensures that pressing the <Tab> key inserts the desired number of spaces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:set shiftwidth=4\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set softtabstop=4\n```\n\n----------------------------------------\n\nTITLE: Writing Line Ranges to Files in Vim\nDESCRIPTION: Demonstrates how to write a range of lines from current position to end of file into a new file named 'tempo'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:.,$write tempo\n```\n\n----------------------------------------\n\nTITLE: Extending Fortran Line Length in Vim\nDESCRIPTION: Allows longer line lengths up to 132 characters for Fortran code in Vim by setting 'fortran_extended_line_length'. Useful for modern compilers which support extended line lengths.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_36\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_extended_line_length=1\n```\n\n----------------------------------------\n\nTITLE: Customizing JQ Syntax Highlighting in Vim\nDESCRIPTION: Configures options for JQ syntax highlighting, including number color and quote highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_70\n\nLANGUAGE: VimScript\nCODE:\n```\nhi link jqNumber Normal\nlet g:jq_quote_highlight = 1\n```\n\n----------------------------------------\n\nTITLE: Using Falsy (Null Coalescing) Operator in Neovim\nDESCRIPTION: Shows how to use the falsy operator (??) to provide default values when an expression evaluates to a falsy value. Includes examples and comparison with the ternary operator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_68\n\nLANGUAGE: vim\nCODE:\n```\necho theList ?? 'list is empty'\necho GetName() ?? 'unknown'\n```\n\nLANGUAGE: vim\nCODE:\n```\nexpr2 ?? expr1\nexpr2 ? expr2 : expr1\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Cppcheck\nDESCRIPTION: Example of setting custom parameters for the cppcheck compiler in Vim, including adding git repository folders to the path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_40\n\nLANGUAGE: vim\nCODE:\n```\nlet &l:path = join(systemlist('git ls-tree -d --name-only -r HEAD'), ',')\n```\n\n----------------------------------------\n\nTITLE: Highlighting Spaces in ChangeLog Files in VimL\nDESCRIPTION: Customizes highlight options for spaces in ChangeLog files by toggling the 'changelog_spacing_errors' variable and linking highlight groups to 'Error' or 'NONE' as needed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_14\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:changelog_spacing_errors = 0\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:hi link ChangelogError Error\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:hi link ChangelogError NONE\n```\n\n----------------------------------------\n\nTITLE: Modifying Tag Stack in Vim\nDESCRIPTION: Examples of using settagstack() function to modify the tag stack of a window in Vim, including emptying the stack and saving/restoring it.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_232\n\nLANGUAGE: vim\nCODE:\n```\ncall settagstack(3, {'items' : []})\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet stack = gettagstack(1003)\n\" do something else\ncall settagstack(1003, stack)\nunlet stack\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Workaround for SpotBugs with Spaces in Paths\nDESCRIPTION: Workaround configuration for SpotBugs to handle directories with spaces in their names, which SpotBugs doesn't natively support in textui mode. Creates a symbolic link alternative path mapping.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_53\n\nLANGUAGE: vim\nCODE:\n```\nlet g:spotbugs_alternative_path = {\n\t\\ 'fromPath':\t'path/to/dir_without_blanks',\n\t\\ 'toPath':\t'path/to/dir with blanks',\n\\ }\n```\n\n----------------------------------------\n\nTITLE: Creating Named Marks\nDESCRIPTION: Shows how to create named marks (a through z) in a file and navigate to them. Demonstrates marking positions and jumping to specific marks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nma      # Mark current position as mark 'a'\n`a      # Jump to mark 'a'\n's      # Jump to mark 's'\n'e      # Jump to mark 'e'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom File Edit Command with Multiple Files\nDESCRIPTION: Defines a custom command 'MyEdit' that allows opening multiple files using file expansion and modifiers\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\ncommand! -nargs=+ -complete=file MyEdit\n\\ for f in expand(<q-args>, 0, 1) |\n\\ exe '<mods> split ' .. f |\n\\ endfor\n```\n\n----------------------------------------\n\nTITLE: Vim PostScript Syntax Configuration\nDESCRIPTION: Configuration options for PostScript language version and feature highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_101\n\nLANGUAGE: vim\nCODE:\n```\nlet postscr_level = 2\nlet postscr_display = 1\nlet postscr_ghostscript = 1\nlet postscr_fonts = 1\nlet postscr_encodings = 1\n```\n\n----------------------------------------\n\nTITLE: Method Chaining in Vim Script\nDESCRIPTION: Example of method chaining using the arrow operator for filter, map, sort, and join operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_79\n\nLANGUAGE: vim\nCODE:\n```\nmylist->filter(filterexpr)->map(mapexpr)->sort()->join()\n```\n\n----------------------------------------\n\nTITLE: Getting Peer Name of Pipe Connection\nDESCRIPTION: Obtains the name of the peer connected to the pipe handle. This is particularly important for debugging and monitoring communication endpoints.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nuv.pipe_getpeername({pipe})\n```\n\n----------------------------------------\n\nTITLE: Provider Reload Example in Vim\nDESCRIPTION: Shows how to reload a provider by unsetting its loaded flag and reloading the provider script. Used when a GUI or application needs to force provider reload.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/develop.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:unlet g:loaded_clipboard_provider\n:runtime autoload/provider/clipboard.vim\n```\n\n----------------------------------------\n\nTITLE: SQL Macro Pattern Definition\nDESCRIPTION: Regular expression pattern for finding SQL macro definitions, supporting VARIABLE, DECLARE, IN, OUT, and INOUT declarations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\n\\c\\<\\(VARIABLE\\|DECLARE\\|IN\\|OUT\\|INOUT\\)\\>\n```\n\n----------------------------------------\n\nTITLE: Customizing NROFF Definition Highlighting\nDESCRIPTION: Sets custom highlighting for NROFF definition and special definition groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_92\n\nLANGUAGE: vim\nCODE:\n```\nhi def nroffDefinition cterm=italic gui=reverse\nhi def nroffDefSpecial cterm=italic,bold gui=reverse,bold\n```\n\n----------------------------------------\n\nTITLE: Defining Match Syntax Items in Vim Script\nDESCRIPTION: Uses pattern matching to define syntax items, such as lowercase identifiers and comments. Keywords take precedence over match items, ensuring that defined keywords are highlighted.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_5\n\nLANGUAGE: Vim Script\nCODE:\n```\n:syntax match xIdentifier /\\<\\l\\+\\>/\n:syntax match xComment /#.*/\n```\n\n----------------------------------------\n\nTITLE: Temporary Directory Management in Nvim\nDESCRIPTION: Example of handling temporary file creation and error scenarios related to tempdir management in Neovim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nE5431: tempdir disappeared (2 times)\n```\n\n----------------------------------------\n\nTITLE: Configuring SED Syntax Highlighting in Vim\nDESCRIPTION: Controls tab highlighting and comment style (GNU vs BSD) in SED files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_111\n\nLANGUAGE: vim\nCODE:\n```\nlet g:sed_highlight_tabs = 1\nlet g:sed_dialect = \"bsd\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving window variables with getwinvar in Vim\nDESCRIPTION: Examples of using getwinvar() to retrieve window-local variables and options. The first example gets the 'list' option from window 2, and the second retrieves a custom variable 'myvar' from window 1.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_110\n\nLANGUAGE: vim\nCODE:\n```\nlet list_is_on = getwinvar(2, '&list')\necho \"myvar = \" .. getwinvar(1, 'myvar')\n```\n\n----------------------------------------\n\nTITLE: Opening the tutorial format guide in Vim\nDESCRIPTION: Command to open the 'tutor.tutor' file which explains the format used for creating vim-tutor-mode tutorials.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_tutor.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimscript\nCODE:\n```\n:Tutor tutor\n```\n\n----------------------------------------\n\nTITLE: Backup File Configuration in Vim\nDESCRIPTION: Commands for configuring backup file behavior including naming and location.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:set backup\n:set backupext=.bak\n:set patchmode=.orig\n```\n\n----------------------------------------\n\nTITLE: Stop Visual Mode with CTRL-C in Neovim\nDESCRIPTION: This command stops Visual mode.  When insert mode is pending (the mode message shows \"-- (insert) VISUAL --\"), it is also stopped. On MS-Windows, you may need to press CTRL-Break.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n\"CTRL-C\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Extensions to Zip Browser via BufReadCmd Autocmd\nDESCRIPTION: Adds support for additional file extensions to be treated as zip archives by creating an autocmd that calls the zip#Browse function when opening files with the specified extensions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nau BufReadCmd *.jar,*.xpi call zip#Browse(expand(\"<amatch>\"))\n```\n\n----------------------------------------\n\nTITLE: Getting Current History Entry Number in Vim\nDESCRIPTION: Shows how to retrieve the current entry number in the history using histnr(). This example saves the current index of the expression history.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_128\n\nLANGUAGE: vim\nCODE:\n```\nlet inp_index = histnr(\"expr\")\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Window Height in Vim\nDESCRIPTION: Example of setting the maximum possible window height using the lines option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_39\n\nLANGUAGE: vim\nCODE:\n```\nset lines=999\n```\n\n----------------------------------------\n\nTITLE: Placing Signs with Groups and Priorities\nDESCRIPTION: Examples showing various ways to place signs with different groups and priority values\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:sign place 5 line=3 name=sign1 file=a.py\n:sign place 6 group=g2 line=2 name=sign2 file=x.py\n:sign place 9 group=g2 priority=50 line=5 name=sign1 file=a.py\n```\n\n----------------------------------------\n\nTITLE: Starting Vim with Specific Locale\nDESCRIPTION: Shell commands to start Vim with a specific locale setting for both sh and csh shells.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nLANG=ko vim {vim-arguments}\nenv LANG=ko vim {vim-arguments}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic Comments in RNoweb Files in Neovim\nDESCRIPTION: This command sets the `rnw_dynamic_comments` variable to `0`, which prevents Neovim from dynamically setting the 'formatexpr' option for R code and LaTeX code in RNoweb files. This allows users to configure their own preferred formatting expressions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\n\tlet rnw_dynamic_comments = 0\n```\n\n----------------------------------------\n\nTITLE: Generating Neovim Help Documentation\nDESCRIPTION: Commands to generate and validate Neovim's help documentation files using make commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake doc\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake lintdoc\n```\n\n----------------------------------------\n\nTITLE: Setting Right-to-Left Window Orientation in Vim\nDESCRIPTION: This snippet shows how to set the window orientation to right-to-left using the 'rightleft' option in Vim. It's a key setting for working with right-to-left languages.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n'rightleft' ('rl') sets window orientation to right-to-left.\n```\n\n----------------------------------------\n\nTITLE: Vim Text Append Command\nDESCRIPTION: Demonstrates how to append text at the end of a line using the 'a' command in Vim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\na!!!<Esc>\n```\n\n----------------------------------------\n\nTITLE: Vim Put Expression Register Example\nDESCRIPTION: Demonstrates using the expression register to put text with escaped characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:put ='path' .. \",/test\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Document References in Neovim LSP (Lua)\nDESCRIPTION: Removes document highlights from a buffer. Takes an optional buffer number parameter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_47\n\nLANGUAGE: lua\nCODE:\n```\nbuf_clear_references({bufnr})\n```\n\n----------------------------------------\n\nTITLE: Command Line Escape Mapping - Vim\nDESCRIPTION: Creates a mapping to escape characters in the command line using getcmdline().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_87\n\nLANGUAGE: vim\nCODE:\n```\ncmap <F7> <C-\\>eescape(getcmdline(), ' \\')<CR>\n```\n\n----------------------------------------\n\nTITLE: Configuring Errorformat for Apache Ant with Javac in Vim\nDESCRIPTION: Sets the errorformat option to parse error messages from Apache Ant with the javac compiler, handling the '[javac]' prefix in output lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_64\n\nLANGUAGE: vim\nCODE:\n```\n:set efm=%A\\ %#[javac]\\ %f:%l:\\ %m,%-Z\\ %#[javac]\\ %p^,%-C%.%#\n```\n\n----------------------------------------\n\nTITLE: Silencing Rustfmt Errors\nDESCRIPTION: Prevents rustfmt from populating the location list with errors when formatting fails, allowing for silent failures.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustfmt_fail_silently = 0\n```\n\n----------------------------------------\n\nTITLE: Appending an Option Setting to vimrc Using Expression Register\nDESCRIPTION: Demonstrates how to add a configuration option to your vimrc file by using the expression register to insert the current value of an option. This example shows how to append a 'guifont' setting to your configuration file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\no:set guifont=<C-R>=&guifont<CR><Esc>\n```\n\n----------------------------------------\n\nTITLE: Combining Confirmation and Browse Commands in Vim\nDESCRIPTION: This example shows how to combine the confirmation dialog with the file browser when editing a new file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:confirm browse edit\n```\n\n----------------------------------------\n\nTITLE: Configuring variable-width tab stops in Vim\nDESCRIPTION: Example of setting varsofttabstop option for assembly language files, where statements start at column 9 and comments at column 41, using a mixture of spaces and tabs.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_77\n\nLANGUAGE: viml\nCODE:\n```\nset varsofttabstop=8,32,8\n```\n\n----------------------------------------\n\nTITLE: Defining Build Variables and Paths\nDESCRIPTION: Sets up key build variables including output paths for generated files, documentation sources, and compiler command exports.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n#-------------------------------------------------------------------------------\n# Variables\n#-------------------------------------------------------------------------------\nset(FUNCS_DATA ${PROJECT_BINARY_DIR}/funcs_data.mpack)\nset(TOUCHES_DIR ${PROJECT_BINARY_DIR}/touches)\nset(VTERM_TEST_FILE ${PROJECT_BINARY_DIR}/test/vterm_test_output)\n\nfile(GLOB DOCFILES CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/runtime/doc/*.txt)\n\nif(NOT CI_BUILD)\n  set(CMAKE_INSTALL_MESSAGE NEVER)\nendif()\n\nif(${CMAKE_VERSION} VERSION_LESS 3.20)\n  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nendif()\n\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.26)\n  set(COPY_DIRECTORY copy_directory_if_different)\nelse()\n  set(COPY_DIRECTORY copy_directory)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a directory to the 'path' option (Vim)\nDESCRIPTION: This snippet shows how to add a directory to the 'path' option, which specifies where Vim searches for included files.  This example adds `/usr/local/X11` to the path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\n\":set path+=/usr/local/X11\"\n```\n\n----------------------------------------\n\nTITLE: Using floor() Function in Vim Script\nDESCRIPTION: Demonstrates the floor() function which returns the largest integer value less than or equal to the given number. It works with both positive and negative floating-point numbers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_73\n\nLANGUAGE: vim\nCODE:\n```\necho floor(1.856)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho floor(-5.456)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho floor(4.0)\n```\n\n----------------------------------------\n\nTITLE: Writing to a Collection File in Vim\nDESCRIPTION: Demonstrates how to write the current line to a new file named 'collection'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:.write collection\n```\n\n----------------------------------------\n\nTITLE: Format Function Configuration\nDESCRIPTION: Command to enable custom formatting function by setting the formatexpr option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal formatexpr=format#Format()\n```\n\n----------------------------------------\n\nTITLE: Configuring Idris2 Indentation in Vim\nDESCRIPTION: This snippet shows how to set Vim global variables to control indentation levels for different constructs in Idris2 code. Key indentation areas include 'if', 'case', 'let', 'rewrite', 'where', and 'do' blocks. Users can modify the default indentation by changing the values of these variables accordingly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_7\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:idris2_indent_if = 2\nlet g:idris2_indent_case = 4\nlet g:idris2_indent_let = 4\nlet g:idris2_indent_rewrite = 8\nlet g:idris2_indent_where = 6\nlet g:idris2_indent_do = 3\n```\n\n----------------------------------------\n\nTITLE: Example Mark Usage in Vim\nDESCRIPTION: Demonstrates using marks for navigation between files and within buffers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:delmarks a      deletes mark a\n:delmarks a b 1    deletes marks a, b and 1\n:delmarks Aa       deletes marks A and a\n:delmarks p-z      deletes marks in the range p to z\n:delmarks ^.[]     deletes marks ^ . [ ]\n:delmarks \\\"      deletes mark \\\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Plugin Health Checks in Vim\nDESCRIPTION: Command example for running health checks for specific Neovim plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:checkhealth vim.health\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shell Type to Dash\nDESCRIPTION: Configuring Vim to use Dash shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_117\n\nLANGUAGE: vim\nCODE:\n```\nlet g:is_dash      = 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Function Folding for Shell Scripts\nDESCRIPTION: Setting the shell folding option to 1 to enable folding of function bodies in shell scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_120\n\nLANGUAGE: vim\nCODE:\n```\nlet g:sh_fold_enabled= 1\n```\n\n----------------------------------------\n\nTITLE: Trim Directive Example in Treesitter Query (Blank Lines)\nDESCRIPTION: This example showcases how to use the `trim!` directive in a treesitter query to remove whitespace from a node, specifically blank lines from the end.  It demonstrates the basic usage with only the capture ID.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_8\n\nLANGUAGE: query\nCODE:\n```\n\"(#trim! @fold)\"\n```\n\n----------------------------------------\n\nTITLE: Basic Treesitter Query Pattern\nDESCRIPTION: Shows a basic query pattern using eq? predicate to match specific identifiers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_3\n\nLANGUAGE: query\nCODE:\n```\n((identifier) @variable.builtin\\n  (#eq? @variable.builtin \"self\"))\n```\n\n----------------------------------------\n\nTITLE: C Synctax Synchronization in VimL\nDESCRIPTION: Adjusts syntax synchronization for C files to manage highlighting errors when scrolling, aiming to start syntax checks a number of lines before the currently displayed line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_11\n\nLANGUAGE: VimL\nCODE:\n```\n:let c_minlines = 100\n```\n\n----------------------------------------\n\nTITLE: Implementing Special File Edit Function\nDESCRIPTION: Creates a function 'SpecialEdit' that supports file expansion and custom split modifiers for opening multiple files\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_36\n\nLANGUAGE: vim\nCODE:\n```\nfunction! SpecialEdit(files, mods)\n    for f in expand(a:files, 0, 1)\n        exe a:mods .. ' split ' .. f\n    endfor\nendfunction\ncommand! -nargs=+ -complete=file Sedit\n\\ call SpecialEdit(<q-args>, <q-mods>)\n```\n\n----------------------------------------\n\nTITLE: File System Rename Operation in libuv\nDESCRIPTION: Renames a file from one path to another. Equivalent to rename(2) system call. Supports both synchronous and asynchronous operations through an optional callback.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_51\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_rename({path}, {new_path} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Including Pod Syntax in Perl Configuration\nDESCRIPTION: Example showing how to include Pod syntax within Perl syntax configuration\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_172\n\nLANGUAGE: vim\nCODE:\n```\n:syntax include @Pod <sfile>:p:h/pod.vim\n:syntax region perlPOD start=\"^=head\" end=\"^=cut\" contains=@Pod\n```\n\n----------------------------------------\n\nTITLE: Setting multicast membership for UDP handle in Lua\nDESCRIPTION: Sets membership for a multicast address. Allows joining or leaving a multicast group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\nuv.udp_set_membership({udp}, {multicast_addr}, {interface_addr}, {membership})\n```\n\n----------------------------------------\n\nTITLE: Getting Socket Name of TCP Handle\nDESCRIPTION: Obtains the address to which the TCP handle is bound. This includes details such as IP address, address family, and port information of the local socket.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nuv.tcp_getsockname({tcp})\n```\n\n----------------------------------------\n\nTITLE: Setting showbreak for improved readability with line numbers in Vim\nDESCRIPTION: Sets the 'showbreak' option to eight spaces, which indents wrapped lines for better visual distinction when the 'number' option is enabled.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\n:set showbreak=\\ \\ \\ \\ \\ \\ \\ \\ \n```\n\n----------------------------------------\n\nTITLE: Vim screen layout diagram showing windows and status lines\nDESCRIPTION: ASCII diagram showing the layout of a Vim screen with multiple windows, status lines, and command line at the bottom.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------------+\n screen | window 1      | window 2      |\n        |               |               |\n        |               |               |\n        |= status line =|= status line =|\n        | window 3                      |\n        |                               |\n        |                               |\n        |==== status line ==============|\n        |command line                   |\n        +-------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Nvim as Manpager in Bash\nDESCRIPTION: This command sets the `MANPAGER` environment variable to `nvim +Man!`, which configures Neovim to be used as the default manpage viewer.  When `man` is invoked from the shell, it will launch Nvim to display the manpage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nexport MANPAGER='nvim +Man!'\n```\n\n----------------------------------------\n\nTITLE: Command Line Completion Example in Vim\nDESCRIPTION: Example showing how to get command line completion results after a :call command using getcompletion() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_88\n\nLANGUAGE: vim\nCODE:\n```\necho getcompletion('call ', 'cmdline')\n```\n\n----------------------------------------\n\nTITLE: Alternative First Location List Error Command\nDESCRIPTION: An alternative command for displaying the first error in the location list, equivalent to :lrewind.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:lfir[st][!] [nr]\n```\n\n----------------------------------------\n\nTITLE: Checking libuv Loop Activity in Lua\nDESCRIPTION: This function returns `true` if there are referenced active handles, active requests, or closing handles in the loop; otherwise, it returns `false`. It's a way to determine if the event loop has any pending work.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.loop_alive()                                                *uv.loop_alive()*\\n\\n                Returns `true` if there are referenced active handles, active\\n                requests, or closing handles in the loop; otherwise, `false`.\\n\\n                Returns: `boolean` or `fail`\"\n```\n\n----------------------------------------\n\nTITLE: File List Management in Vim\nDESCRIPTION: Commands for managing and viewing lists of files in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:args\n:args five.c six.c seven.h\n:args *.txt\n```\n\n----------------------------------------\n\nTITLE: Setting sidescrolloff Options in Vim\nDESCRIPTION: Examples showing how to set and reset the sidescrolloff option, which controls horizontal scrolling behavior when 'nowrap' is enabled. The first example resets to global value, the second demonstrates practical usage with sidescroll and listchars.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_66\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal sidescrolloff<\nsetlocal sidescrolloff=-1\n```\n\nLANGUAGE: vim\nCODE:\n```\nset nowrap sidescroll=1 listchars=extends:>,precedes:<\nset sidescrolloff=1\n```\n\n----------------------------------------\n\nTITLE: ColdFusion Comment Highlighting in VimL\nDESCRIPTION: Activates syntax highlighting for ColdFusion-style comments, building upon the existing HTML syntax highlighting framework.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_17\n\nLANGUAGE: VimL\nCODE:\n```\n:let html_wrong_comments = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Markdown Formatting\nDESCRIPTION: Code snippets for enabling Markdown comment formatting in Java files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal formatexpr=g:javaformat#RemoveCommonMarkdownWhitespace()\nsetlocal formatexpr=javaformat#RemoveCommonMarkdownWhitespace()\n```\n\n----------------------------------------\n\nTITLE: Constants-based Function Arguments in C\nDESCRIPTION: Example showing the use of constants for self-documenting code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nconst int kDefaultBaseValue = 10;\nconst bool kFirstTimeCalling = false;\nCallback *null_callback = NULL;\nbool success = calculate_something(interesting_value,\n                                   kDefaultBaseValue,\n                                   kFirstTimeCalling,\n                                   null_callback);\n```\n\n----------------------------------------\n\nTITLE: Treesitter Query Modeline Example (Inherits and Extends)\nDESCRIPTION: This example demonstrates the use of treesitter query modelines to inherit queries from other languages and extend existing queries. It shows the syntax for specifying multiple languages to inherit from and extending the current query.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_11\n\nLANGUAGE: query\nCODE:\n```\n\";; inherits: typescript,jsx\\n;; extends\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Special Characters via Execute and Normal\nDESCRIPTION: Shows how to use :execute with the normal command to insert text followed by an Escape key press.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_114\n\nLANGUAGE: vim\nCODE:\n```\n:execute \"normal ixxx\\<Esc>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MOO Syntax Highlighting Options in Vim\nDESCRIPTION: Sets various options for MOO syntax highlighting, including extended C-style comment matching, pronoun substitution, regexp highlighting, and builtin function recognition.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_86\n\nLANGUAGE: VimScript\nCODE:\n```\n:let moo_extended_cstyle_comments = 1\n\n:let moo_no_pronoun_sub = 1\n\n:let moo_no_regexp = 1\n\n:let moo_unmatched_quotes = 1\n\n:let moo_builtin_properties = 1\n\n:let moo_unknown_builtin_functions = 1\n\n:syn keyword mooKnownBuiltinFunction sprintf contained\n```\n\n----------------------------------------\n\nTITLE: Using Ada Folding Options in Neovim\nDESCRIPTION: Configuration for Ada code folding with different strategies including syntax folding, gnat pretty print folding, and indent folding. The value is a string where each character represents a different folding option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\ng:ada_folding = \"sigpft\"\n```\n\n----------------------------------------\n\nTITLE: Modular Arithmetic with Bitwise Operations in Lua\nDESCRIPTION: This snippet illustrates how to handle modular arithmetic with bitwise operations in Lua, emphasizing the behavior of integer wrap-around when the result exceeds the defined range. It explains the normalization process for different Lua number types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n                bit.tobit(0xffffffff + 1)\n```\n\n----------------------------------------\n\nTITLE: Moving in braces (Vim)\nDESCRIPTION: This snippet shows how to move in parenthesis using the `[(` and `])` commands, analogous to `[{` and `]}` for curly braces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n\"[(\"\n```\n\nLANGUAGE: vim\nCODE:\n```\n\"])\"\n```\n\n----------------------------------------\n\nTITLE: Register Content Insertion Comparison\nDESCRIPTION: Example demonstrating the difference between regular and literal register content insertion, using a register containing backspace characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\nCTRL-R a\t\tresults in \"ac\".\nCTRL-R CTRL-R a\t\tresults in \"ab^Hc\".\n```\n\n----------------------------------------\n\nTITLE: Quitting Vim from Python\nDESCRIPTION: Correct approach to exit Vim from Python by using vim.command() instead of raising SystemExit exception.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_9\n\nLANGUAGE: viml\nCODE:\n```\n:py vim.command(\"qall!\")\n```\n\n----------------------------------------\n\nTITLE: Unsilent Argdo Example\nDESCRIPTION: Shows how to use :unsilent within a :silent command to selectively show output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_8\n\nLANGUAGE: viml\nCODE:\n```\n:silent argdo unsilent echo expand('%') .. \": \" .. getline(1)\n```\n\n----------------------------------------\n\nTITLE: Finding Date Lines with Vim Script\nDESCRIPTION: A script to search lines 1-20 for dates and echo any found dates using pattern matching.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_21\n\nLANGUAGE: viml\nCODE:\n```\n:for line in getline(1, 20)\n:  if line =~ \"Date: \"\n:    echo matchstr(line, 'Date: \\zs.*')\n:  endif\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Saving specific numbered view\nDESCRIPTION: Saves the current view as the third numbered view. You can save up to ten different views for the same file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_13\n\nLANGUAGE: vimdoc\nCODE:\n```\n:mkview 3\n```\n\n----------------------------------------\n\nTITLE: ShaDa MessagePack Entry Type Format\nDESCRIPTION: Specification for the MessagePack-based ShaDa file format showing the structure of different entry types including Header, SearchPattern, SubString, HistoryEntry and Register entries\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_17\n\nLANGUAGE: messagepack\nCODE:\n```\n1. Entry Type (unsigned integer)\n2. Timestamp (unsigned integer)\n3. Length (unsigned integer)\n4. Data (map or array)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Rustfmt Command\nDESCRIPTION: Sets the name of the rustfmt executable to use for code formatting. Defaults to 'rustfmt' if not specified.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustfmt_command = 'rustfmt'\n```\n\n----------------------------------------\n\nTITLE: Changing Tree Top in Netrw with :Ntree Command\nDESCRIPTION: Uses the :Ntree command to specify a new top directory for tree listings in Netrw. Without an argument, it uses the current line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n:Ntree [dirname]\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Shortener Service\nDESCRIPTION: Overrides the default URL shortener service used when generating shareable links to Rust code examples.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_shortener_url = 'https://is.gd/'\n```\n\n----------------------------------------\n\nTITLE: Running Submodule Health Checks in Vim\nDESCRIPTION: Examples of running health checks for specific Neovim submodules using dot notation or wildcards.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:checkhealth vim.lsp vim.treesitter\n:checkhealth vim*\n```\n\n----------------------------------------\n\nTITLE: Disabling Recommended Markdown Style in Neovim\nDESCRIPTION: This command sets the `g:markdown_recommended_style` variable to `0`, which disables the default 'expandtab' setting for Markdown files.  This allows users to configure their own preferred tab settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n\tlet g:markdown_recommended_style = 0\n```\n\n----------------------------------------\n\nTITLE: Using input() with custom highlighting\nDESCRIPTION: A complex example showing how to use input() with custom highlighting. The example creates a rainbow parentheses highlighting function that colors matching parentheses in different colors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_135\n\nLANGUAGE: vim\nCODE:\n```\nhighlight RBP1 guibg=Red ctermbg=red\nhighlight RBP2 guibg=Yellow ctermbg=yellow\nhighlight RBP3 guibg=Green ctermbg=green\nhighlight RBP4 guibg=Blue ctermbg=blue\nlet g:rainbow_levels = 4\nfunction! RainbowParens(cmdline)\n  let ret = []\n  let i = 0\n  let lvl = 0\n  while i < len(a:cmdline)\n    if a:cmdline[i] is# '('\n      call add(ret, [i, i + 1, 'RBP' .. ((lvl % g:rainbow_levels) + 1)])\n      let lvl += 1\n    elseif a:cmdline[i] is# ')'\n      let lvl -= 1\n      call add(ret, [i, i + 1, 'RBP' .. ((lvl % g:rainbow_levels) + 1)])\n    endif\n    let i += 1\n  endwhile\n  return ret\nendfunction\ncall input({'prompt':'>','highlight':'RainbowParens'})\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim to custom location\nDESCRIPTION: Command to install the Neovim executable to a custom directory specified by CMAKE_INSTALL_PREFIX.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake CMAKE_INSTALL_PREFIX=$HOME/local/nvim install\n```\n\n----------------------------------------\n\nTITLE: Search History Examples\nDESCRIPTION: Sequence of search patterns demonstrating search history functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n/one\n/two\n/three\n```\n\n----------------------------------------\n\nTITLE: Enabling Ruby Buffer Loading for Omni Completion\nDESCRIPTION: Vim configuration to enable loading/evaluating Ruby code for Omni completion, which allows for more accurate suggestions but may execute code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rubycomplete_buffer_loading = 1\n```\n\n----------------------------------------\n\nTITLE: Setting up a directory buffer in Vim\nDESCRIPTION: This snippet shows how to configure a buffer to display directory contents, typically used by file explorer plugins. It sets the buffer type to 'nowrite', hides the buffer when it's no longer displayed, and disables the swap file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/windows.txt#2025-04-20_snippet_8\n\nLANGUAGE: vimdoc\nCODE:\n```\n:setlocal buftype=nowrite\n:setlocal bufhidden=delete\n:setlocal noswapfile\n```\n\n----------------------------------------\n\nTITLE: Adding Mac File Format to Fileformats in Vim\nDESCRIPTION: This command adds the \"mac\" file format to the 'fileformats' option.  This instructs Vim to also check for Mac file format even on Unix systems, where it's less common. This is useful when you anticipate editing Mac files on a Unix system.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n\t:set fileformats+=mac\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Options for Ruff Python Linter\nDESCRIPTION: Example of setting custom parameters for the Ruff Python linter, using the current buffer's textwidth setting to set the maximum line length allowed by the linter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_55\n\nLANGUAGE: vim\nCODE:\n```\nlet b:ruff_makeprg_params = \"--max-line-length \"..&textwidth\n```\n\n----------------------------------------\n\nTITLE: Configuring Typst Plugin Settings\nDESCRIPTION: Configuration options for Typst filetype plugin including folding settings\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_39\n\nLANGUAGE: vim\nCODE:\n```\nlet g:typst_folding = 1\nlet g:typst_foldnested = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Syntastic Rust Checkers\nDESCRIPTION: Configures which checkers Syntastic should use for Rust files. The default is 'cargo', but it can be changed to use direct 'rustc' compilation or other checkers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\nlet g:syntastic_rust_checkers = ['cargo']\n```\n\n----------------------------------------\n\nTITLE: Redrawing the Screen in Vim\nDESCRIPTION: Uses Ctrl-L to force Vim to redraw the screen, useful after external commands have produced output that may have affected the display.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-L\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim from Source\nDESCRIPTION: Commands to build and install Neovim from source code with custom installation path.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmake CMAKE_BUILD_TYPE=Release\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Forcibly Terminating LaTeX Zones with the stopzone Comment\nDESCRIPTION: Special TeX comment to forcibly terminate highlighting of texZone or texMathZone regions. Useful for synchronization issues with regions delineated by $ and $$.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_135\n\nLANGUAGE: viml\nCODE:\n```\n%stopzone\n```\n\n----------------------------------------\n\nTITLE: Disabling Erlang BIF Highlighting in Vim\nDESCRIPTION: This snippet disables the default highlighting of Erlang's built-in functions (BIFs) in Vim. No dependencies other than Vim are required. It sets a Vim script variable 'g:erlang_highlight_bifs' to 0 to disable BIF highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_31\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:erlang_highlight_bifs = 0\n```\n\n----------------------------------------\n\nTITLE: Close Folds of Specific Kind in Lua\nDESCRIPTION: Closes all folds of a specified kind in a window. It includes an example of automatically folding imports when opening a file using an autocommand, emphasizing its utility for organizing code views.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\nfoldclose({kind}, {winid})                               *vim.lsp.foldclose()*\n    Close all {kind} of folds in the window with {winid}.\n\n    To automatically fold imports when opening a file, you can use an autocmd: >lua\n        vim.api.nvim_create_autocmd('LspNotify', {\n          callback = function(args)\n            if args.data.method == 'textDocument/didOpen' then\n              vim.lsp.foldclose('imports', vim.fn.bufwinid(args.buf))\n            end\n          end,\n        })\n<\n```\n\n----------------------------------------\n\nTITLE: Getting Peer Name of TCP Connection\nDESCRIPTION: Retrieves the address of the peer connected to the TCP handle. This provides details about the connected remote address, including IP, address family, and port.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nuv.tcp_getpeername({tcp})\n```\n\n----------------------------------------\n\nTITLE: Ceiling Function Example in Vim\nDESCRIPTION: Demonstrates the ceil() function usage to round floating point numbers up to the nearest integer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_28\n\nLANGUAGE: vim\nCODE:\n```\necho ceil(1.456)\necho ceil(-5.456)\necho ceil(4.0)\n```\n\n----------------------------------------\n\nTITLE: Suspending Vim and Returning to Shell\nDESCRIPTION: Demonstrates how to suspend Vim using CTRL-Z and return to the original shell context using the 'fg' command on Unix systems\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_21.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCTRL-Z\n{any sequence of shell commands}\nfg\n```\n\n----------------------------------------\n\nTITLE: Switching Compilers in Vim\nDESCRIPTION: The :compiler command switches between different compiler configurations, setting appropriate options for error format and make program.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:compiler msvc\n```\n\n----------------------------------------\n\nTITLE: Setting priority for highlighting in Treesitter\nDESCRIPTION: This snippet illustrates how to change the priority of an individual query pattern using the `priority` metadata attribute. Setting the priority allows you to control the order in which highlights are applied, which is important when multiple queries match the same region.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n    ((super_important_node) @superimportant (#set! priority 105))\n\n```\n\n----------------------------------------\n\nTITLE: List Identity in Vimscript\nDESCRIPTION: This example demonstrates how assigning one list variable to another creates a reference, not a copy.  Modifying one variable will affect the other, as they both point to the same list in memory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\t:let aa = [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Getting Current CPU in Lua with Libuv\nDESCRIPTION: Returns the CPU number on which the calling thread is currently running. The first CPU is returned as number 1.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_61\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_getcpu()\n```\n\n----------------------------------------\n\nTITLE: ShaDa File Commands in Vim\nDESCRIPTION: Commands for reading from and writing to the ShaDa file, which stores Vim session information like registers, marks, and history.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n:rsh[ada] [file]     # read info from ShaDa file [file]\n:rsh[ada]! [file]    # idem, overwrite existing info\n:wsh[ada] [file]     # add info to ShaDa file [file]\n:wsh[ada]! [file]    # write info to ShaDa file [file]\n```\n\n----------------------------------------\n\nTITLE: Verbose Runtime Check Example\nDESCRIPTION: Demonstrates checking for runtime errors using :silent, :verbose, and v:statusmsg.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_9\n\nLANGUAGE: viml\nCODE:\n```\n:let v:statusmsg = \"\"\n:silent verbose runtime foobar.vim\n:if v:statusmsg != \"\"\n:  \" foobar.vim could not be found\n:endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheme Syntax Highlighting in Vim\nDESCRIPTION: Enables support for CHICKEN Scheme compiler extensions in addition to standard R7RS keywords.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_109\n\nLANGUAGE: vim\nCODE:\n```\nlet b:is_chicken = 1\nlet g:is_chicken = 1\n```\n\n----------------------------------------\n\nTITLE: Styling Table Cells with CSS and Font Properties in HTML\nDESCRIPTION: HTML markup for rendering table cells with consistent styling. Each cell has bottom and left borders, right alignment, Arial font, red colored bold number 5 as content. This pattern is repeated across multiple cells in a table row.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Disabling Cursor Highlighting for Matchparen\nDESCRIPTION: Sets a variable to prevent the matchparen plugin from highlighting the paren under the cursor, only highlighting the matching paren instead.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n:let matchparen_disable_cursor_hl = 1\n```\n\n----------------------------------------\n\nTITLE: Mapping Alt Keys in Vim\nDESCRIPTION: Provides guidance on mapping keys with the Alt modifier in Vim, detailing the potential issues and scenarios for terminal use.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:imap <A-b> barritone\n```\n\n----------------------------------------\n\nTITLE: Starting Vim Editor Command\nDESCRIPTION: Basic command to start Vim editor with a new file. Can be used in both Unix and Windows command prompts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\ngvim file.txt\n```\n\n----------------------------------------\n\nTITLE: Navigating to Location List Error in Previous File\nDESCRIPTION: Commands for displaying the last error in the previous file in the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n:[count]lNf[ile][!]\n:[count]lpf[ile][!]\n```\n\n----------------------------------------\n\nTITLE: For Loop with Rest Parameter in Vim\nDESCRIPTION: Shows how to use a rest parameter when destructuring items in a for loop over lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_38\n\nLANGUAGE: vim\nCODE:\n```\n:for [i, j; rest] in listlist\n:   call Doit(i, j)\n:   if !empty(rest)\n:      echo \"remainder: \" .. string(rest)\n:   endif\n:endfor\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Priority in Lua with Libuv\nDESCRIPTION: Sets the scheduling priority for a specified thread. Takes a thread object and a priority value, which can be one of the predefined constants.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_62\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_setpriority({thread}, {priority})\n```\n\n----------------------------------------\n\nTITLE: Appending to a file in Vim\nDESCRIPTION: This snippet shows how to append the contents of the current file to another file in Vim. This allows you to quickly add the contents of the current buffer to the end of an existing file without needing to open and edit the target file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n\t:write >> logfile\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Syntax Groups for PHP Omni Completion\nDESCRIPTION: Configuration to exclude specific PHP syntax groups from Omni completion, using either specific group names or regex patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\nlet g:omni_syntax_group_exclude_php = 'phpCoreConstant,phpConstant'\nlet g:omni_syntax_group_exclude_php = 'php\\w*Constant'\n```\n\n----------------------------------------\n\nTITLE: Creating a New GNAT Object\nDESCRIPTION: Function to create a new GNAT object that manages GNAT compiles. The object is created automatically when the first Ada source file is loaded if g:ada_default_compiler is set to 'gnat'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\ngnat#New()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Manpage in the Current Window in Neovim\nDESCRIPTION: This command uses the `:Man` command with the `:hide` modifier to display the manpage for `printf` in the current window. This reuses the current window without opening a new one.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n\":hide Man printf\"\n```\n\n----------------------------------------\n\nTITLE: Validating Raw Size Against Integer Size\nDESCRIPTION: This C snippet checks if `raw_size` is smaller than the size of an integer and logs an error message if it is. This is necessary for ensuring sufficient buffer space is available for integer processing, thus avoiding potential truncation or data loss.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nif (raw_size < sizeof(int)) {\n  fprintf(stderr, \"compressed record not big enough for count: %ju\", raw_size);\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lisp Syntax Highlighting Options in Vim\nDESCRIPTION: Sets options for Lisp syntax highlighting, including instring highlighting and rainbow parentheses coloring.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_76\n\nLANGUAGE: VimScript\nCODE:\n```\ng:lisp_instring : If it exists, then \"(...)\" strings are highlighted\n\t\t\t  as if the contents of the string were lisp.\n\t\t\t  Useful for AutoLisp.\ng:lisp_rainbow  : If it exists and is nonzero, then differing levels\n\t\t\t  of parenthesization will receive different\n\t\t\t  highlighting.\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Syntax Region with Offsets\nDESCRIPTION: Example showing syntax region definition with highlight groups and offsets for start/end patterns\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_166\n\nLANGUAGE: vim\nCODE:\n```\n:syn region Exa matchgroup=Foo start=\"foo\"hs=s+2,rs=e+2 matchgroup=Bar end=\"bar\"me=e-1,he=e-1,re=s-1\n```\n\n----------------------------------------\n\nTITLE: Basic Neovim Motion Code Examples\nDESCRIPTION: Code examples demonstrating basic mapping and filtering operations in Neovim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:map CTRL-V<BS>     X\n```\n\nLANGUAGE: vim\nCODE:\n```\nd:call search(\"f\")<CR>\n```\n\nLANGUAGE: vim\nCODE:\n```\nd:if 1<CR>\n   call search(\"f\")<CR>\nendif<CR>\n```\n\n----------------------------------------\n\nTITLE: Helpgrep Command Examples\nDESCRIPTION: Examples demonstrating usage of helpgrep for searching through help files\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_4\n\nLANGUAGE: vimscript\nCODE:\n```\n:helpgrep Uganda\n:helpgrep uganda\\c\n:helpgrep backspace@fr\n```\n\n----------------------------------------\n\nTITLE: Supporting Gsplit Features\nDESCRIPTION: The function |vim.gsplit()| integrates all features available in |vim.split()|, ensuring backward compatibility and offering enhanced capabilities for string and buffer splitting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Clearing Syntax Sync Settings in Vim\nDESCRIPTION: These snippets show how to clear syntax sync settings in Vim. The first command clears all sync settings, while the second clears specific sync patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_181\n\nLANGUAGE: viml\nCODE:\n```\n:syntax sync clear\n\n:syntax sync clear {sync-group-name} ..\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic Comments in R ReStructuredText Files in Neovim\nDESCRIPTION: This command sets the `rrst_dynamic_comments` variable to `0`, which prevents Neovim from dynamically setting the 'formatexpr' option for R code and ReStructuredText code in R ReStructuredText files. This allows users to configure their own preferred formatting expressions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_35\n\nLANGUAGE: vim\nCODE:\n```\n\tlet rrst_dynamic_comments = 0\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML/OS Function Color\nDESCRIPTION: This snippet customizes the color of functions in HTML/OS files. It involves setting the 'Function' highlight group using the ':hi' command to change its ctermfg and cterm attributes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_57\n\nLANGUAGE: vim\nCODE:\n```\n  :hi Function cterm=bold ctermfg=LightGray\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Behavior After behave Removal\nDESCRIPTION: Configuration commands to replicate the behavior of the removed :behave xterm and :behave mswin commands\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nset mousemodel=extend\n```\n\nLANGUAGE: vim\nCODE:\n```\nset selection=exclusive\nset selectmode=mouse,key\nset mousemodel=popup\nset keymodel=startsel,stopsel\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Color Support in Shell\nDESCRIPTION: Commands to set the terminal type for color support in different shell environments\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsetenv TERM xterm-color\n```\n\nLANGUAGE: shell\nCODE:\n```\nTERM=xterm-color; export TERM\n```\n\n----------------------------------------\n\nTITLE: Expanding Path Patterns for Autocommands in Neovim\nDESCRIPTION: Example showing how to properly expand file paths like ~ for use in autocommand patterns, as Neovim doesn't automatically expand these patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_86\n\nLANGUAGE: lua\nCODE:\n```\npattern = vim.fn.expand('~') .. '/some/path/*.py'\n```\n\n----------------------------------------\n\nTITLE: Executing Vim Commands on Marked Files (netrw-mv)\nDESCRIPTION: The 'mv' command executes arbitrary Vim commands on each marked file individually. Files are processed by opening each one in a split, executing the command, and then saving and closing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_31\n\nLANGUAGE: viml\nCODE:\n```\n* 1split\n* sil! keepalt e file\n* run vim command\n* sil! keepalt wq!\n```\n\n----------------------------------------\n\nTITLE: GDB Remote Debugging Connection\nDESCRIPTION: Command to connect GDB to a remote debugging session.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngdb -ex 'target remote localhost:7777' build/bin/nvim\n```\n\n----------------------------------------\n\nTITLE: Asserting Command Failure with Error Pattern\nDESCRIPTION: Shows how to use assert_fails() with different error pattern matching strategies\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\ncall assert_fails('bad cmd', 'E987:')\ncall assert_fails('cmd', ['E987:.*expected bool'])\ncall assert_fails('cmd', ['', 'E987:'])\n```\n\n----------------------------------------\n\nTITLE: Search Highlighting Commands\nDESCRIPTION: Commands to control search result highlighting behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:set nohlsearch\n:set hlsearch\n:nohlsearch\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Lines for Syntax Sync in Vim\nDESCRIPTION: This code shows how to set a minimum number of lines for syntax syncing in Vim. It uses the 'minlines' argument to specify the number of lines to parse before the current line.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_177\n\nLANGUAGE: viml\nCODE:\n```\n:syntax sync minlines=50\n```\n\n----------------------------------------\n\nTITLE: Setting End-of-Line Character with Hex Value\nDESCRIPTION: Sets the end-of-line character in listchars to the dollar sign using hex notation. This affects how end-of-line markers appear when list mode is enabled.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_42\n\nLANGUAGE: viml\nCODE:\n```\nset listchars=eol:\\u21b5\n```\n\n----------------------------------------\n\nTITLE: Treating Primitive Types as Keywords in Haskell\nDESCRIPTION: This snippet demonstrates how to treat primitive type names as keywords in Haskell syntax highlighting. It involves setting the 'hs_highlight_types' variable to 1 in your vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_45\n\nLANGUAGE: vim\nCODE:\n```\n\t:let hs_highlight_types = 1\n```\n\n----------------------------------------\n\nTITLE: Alternative Paragraph Folding Expression in Vim\nDESCRIPTION: An alternative fold expression that also creates folds for paragraphs separated by blank lines. This method detects when a non-blank line follows a blank line in a slightly different way than the previous example.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set foldexpr=getline(v:lnum-1)=~'^\\s*$'&&getline(v:lnum)=~'\\S'?'>1':1\n```\n\n----------------------------------------\n\nTITLE: Get Option Value with Filetype Parameter\nDESCRIPTION: |nvim_get_option_value()| has been updated to include a `filetype` option, allowing users to retrieve default option values specific to the filetype in use.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Setting Up Lua Linting with Luacheck in CMake\nDESCRIPTION: Creates a target for linting Lua files using luacheck. The target scans runtime, scripts, src, and test directories for .lua files and uses a custom Lua runner script.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_glob_target(\n  TARGET lintlua-luacheck\n  COMMAND $<TARGET_FILE:nvim_bin>\n  FLAGS -ll ${PROJECT_SOURCE_DIR}/test/lua_runner.lua ${CMAKE_BINARY_DIR}/usr luacheck -q\n  GLOB_DIRS runtime scripts src test\n  GLOB_PAT *.lua\n  TOUCH_STRATEGY PER_DIR)\nadd_dependencies(lintlua-luacheck lua_dev_deps)\n```\n\n----------------------------------------\n\nTITLE: Setting Indentation Options for Clojure\nDESCRIPTION: This snippet provides an example of setting up indentation options for Clojure code within Vim. It defines custom patterns and blacklists for fuzzy indentation, leveraging Vim's flexible indenting capabilities.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_4\n\nLANGUAGE: Vim\nCODE:\n```\n\" Default\nlet g:clojure_fuzzy_indent = 1\nlet g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']\nlet g:clojure_fuzzy_indent_blacklist = \\\n  ['-fn$', '\\v^with-%(meta|out-str|loading-context)$']\n```\n\n----------------------------------------\n\nTITLE: Targeting Glulx/Glk in Inform Programs\nDESCRIPTION: This snippet shows how to configure Inform syntax highlighting for Glulx/Glk environments.  Set the 'inform_highlight_glulx' variable to 1 in your startup sequence.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_61\n\nLANGUAGE: vim\nCODE:\n```\n\t:let inform_highlight_glulx=1\n```\n\n----------------------------------------\n\nTITLE: Configuring ReStructured Text Syntax Options in Vim\nDESCRIPTION: Controls syntax highlighting for code blocks, emphasis text coloring, and section folding in ReStructured Text files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_106\n\nLANGUAGE: vim\nCODE:\n```\nlet rst_syntax_code_list = ['vim', 'lisp', ...]\nlet rst_syntax_code_list = {\n\t\\ 'cpp': ['cpp', 'c++'],\n\t\\ 'bash': ['bash', 'sh'],\n\t...\n\\ }\nlet rst_use_emphasis_colors = 1\nlet rst_fold_enabled = 1\n```\n\n----------------------------------------\n\nTITLE: Registering VimEnter Autocmd in Lua for Nvim UI Startup\nDESCRIPTION: Lua code to register a VimEnter autocmd during UI startup. This allows the UI to perform additional setup after user configuration is loaded.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nnvim_command(\"autocmd VimEnter * call rpcrequest(1, 'vimenter')\")\n```\n\n----------------------------------------\n\nTITLE: Translating System Error Codes with uv.translate_sys_error()\nDESCRIPTION: Converts platform-specific error codes to libuv error messages and names, handling both POSIX errors on Unix and Win32 error codes on Windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_103\n\nLANGUAGE: lua\nCODE:\n```\nuv.translate_sys_error({errcode})\n```\n\n----------------------------------------\n\nTITLE: Changing Register Type in Vim\nDESCRIPTION: Example of changing the type of a register by appending nothing using setreg() function in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_230\n\nLANGUAGE: vim\nCODE:\n```\ncall setreg('a', '', 'al')\n```\n\n----------------------------------------\n\nTITLE: Placing Signs in Vim Buffers\nDESCRIPTION: Examples of using sign_place() to place signs in buffers. This function allows specifying sign attributes such as id, group, name, buffer, line number, and priority.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_239\n\nLANGUAGE: vim\nCODE:\n```\n\" Place a sign named sign1 with id 5 at line 20 in\n\" buffer json.c\ncall sign_place(5, '', 'sign1', 'json.c',\n                           \\ {'lnum' : 20})\n\n\" Updates sign 5 in buffer json.c to use sign2\ncall sign_place(5, '', 'sign2', 'json.c')\n\n\" Place a sign named sign3 at line 30 in\n\" buffer json.c with a new identifier\nlet id = sign_place(0, '', 'sign3', 'json.c',\n                           \\ {'lnum' : 30})\n\n\" Place a sign named sign4 with id 10 in group 'g3'\n\" at line 40 in buffer json.c with priority 90\ncall sign_place(10, 'g3', 'sign4', 'json.c',\n                \\ {'lnum' : 40, 'priority' : 90})\n```\n\n----------------------------------------\n\nTITLE: Search Pattern Register Example\nDESCRIPTION: Example of writing to the search pattern register in Vim to modify search highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:let @/ = \"the\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Key Mapping - Lua\nDESCRIPTION: Creates a global mapping for a specified mode in Neovim. This includes options for setting buffer-local mappings and handles whitespace in key bindings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_keymap({mode}, {lhs}, {rhs}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Configuring tmux terminal overrides for Konsole\nDESCRIPTION: This code snippet provides a specific configuration for Konsole 18.07.70 or older to handle cursor shape changes. Due to differences in how Konsole interprets control sequences, a more complex `terminal-overrides` setting is required.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nset -ga terminal-overrides 'xterm*:\\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%{1}%;%d\\007'\n```\n\n----------------------------------------\n\nTITLE: Setting includeexpr to a script-local function in Vim\nDESCRIPTION: Examples of setting the 'includeexpr' option to script-local functions in Vim. This allows for more complex file name transformations using custom functions defined in the script.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal includeexpr=s:MyIncludeExpr()\nsetlocal includeexpr=<SID>SomeIncludeExpr()\n```\n\n----------------------------------------\n\nTITLE: Tabline Update Event\nDESCRIPTION: Provides event for updating tabline with current tab, tab list, current buffer, and buffer list information\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n[\"tabline_update\", curtab, tabs, curbuf, buffers]\n```\n\n----------------------------------------\n\nTITLE: JavaScript DOM Compatibility Table\nDESCRIPTION: A table showing compatibility between Internet Explorer, Firefox, W3C standards, and what is available in Omni completion. Indicates feature support with '+' or '-' marks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n>\n\t\tIE\tFF\tW3C  Omni completion ~\n\t\t+/-\t+/-\t+    +\t\t     ~\n\t\t+\t+\t-    +\t\t     ~\n\t\t+\t-\t-    -\t\t     ~\n\t\t-\t+\t-    -\t\t     ~\n<\n```\n\n----------------------------------------\n\nTITLE: Ada Tag Listing with ada#List_Tag Function\nDESCRIPTION: Function to list all occurrences of an Ada entity under the cursor or at a given line/column in the quickfix window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\nada#List_Tag([{line}, {col}])\n```\n\n----------------------------------------\n\nTITLE: Cursor-Relative Scrolling in Vim\nDESCRIPTION: Commands that reposition the edit window while keeping the cursor on the same line. Includes z<CR>, zt, z{height}<CR>, z., zz, z-, and zb commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nz<CR>           Redraw, line [count] at top of window.\nzt              Like \"z<CR>\", but leave cursor in same column.\nz{height}<CR>   Redraw, make window {height} lines tall.\nz.              Redraw, line [count] at center of window.\nzz              Like \"z.\", but leave cursor in same column.\nz-              Redraw, line [count] at bottom of window.\nzb              Like \"z-\", but leave cursor in same column.\n```\n\n----------------------------------------\n\nTITLE: Enabling CUDA Fortran Highlighting in Vim\nDESCRIPTION: Activates syntax highlighting for CUDA Fortran extensions by setting 'fortran_CUDA' to 1. This customization is for developers using CUDA extensions in Fortran.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_37\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_CUDA=1\n```\n\n----------------------------------------\n\nTITLE: Neovim Workflow Implementation in Python\nDESCRIPTION: Extended pseudocode showing how Neovim handles different editor states and mode transitions. It demonstrates the implementation of normal mode, command-line mode, operator states, and insert mode with their respective callbacks.\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main()\n  state_enter(normal_state, {})\n\ndef normal_state(data, key):\n  if key == ':':\n    state_enter(command_line_state, {})\n  elif key == 'i':\n    state_enter(insert_state, {})\n  elif key == 'd':\n    state_enter(delete_operator_state, {})\n  elif key == 'g':\n    state_enter(g_command_state, {})\n  elif is_number(key):\n    state_enter(get_operator_count_state, {'count': key})\n  elif key == 'G'\n    jump_to_eof()\n  return true\n\ndef command_line_state(data, key):\n  if key == '<cr>':\n    if data['input']:\n      execute_ex_command(data['input'])\n    return false\n  elif key == '<esc>'\n    return false\n\n  if not data['input']:\n    data['input'] = ''\n\n  data['input'] += key\n  return true\n\ndef delete_operator_state(data, key):\n  count = data['count'] or 1\n  if key == 'w':\n    delete_word(count)\n  elif key == '$':\n    delete_to_eol(count)\n  return false  # return to normal mode\n\ndef g_command_state(data, key):\n  if key == 'g':\n    go_top()\n  elif key == 'v':\n    reselect()\n  return false  # return to normal mode\n\ndef get_operator_count_state(data, key):\n  if is_number(key):\n    data['count'] += key\n    return true\n  unshift_key(key)  # return key to the input buffer\n  state_enter(delete_operator_state, data)\n  return false\n\ndef insert_state(data, key):\n  if key == '<esc>':\n    return false  # exit insert mode\n  self_insert(key)\n  return true\n```\n\n----------------------------------------\n\nTITLE: Displaying Command History in Vim\nDESCRIPTION: This snippet shows how to display the history of colon commands using the `:history` command. This command lists all the previously executed colon commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n\t:history\n```\n\n----------------------------------------\n\nTITLE: Generic Syntax Group Include Variable Pattern\nDESCRIPTION: Template for the variable used to include specific syntax groups in Omni completion for any filetype, using regex patterns or comma-separated syntax group names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nlet g:omni_syntax_group_include_{filetype} = 'regex,comma,separated'\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests with Lua FFI Check\nDESCRIPTION: Sets up the unit test target with LuaJIT FFI dependency check. Creates a unittest target if FFI is available, otherwise displays a warning message.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_lua_module(${LUA_PRG} \"ffi\" LUA_HAS_FFI)\nif(LUA_HAS_FFI)\n  add_custom_target(unittest\n    COMMAND ${CMAKE_COMMAND}\n      -D TEST_TYPE=unit\n      ${TEST_OPTIONS}\n      -P ${PROJECT_SOURCE_DIR}/cmake/RunTests.cmake\n    USES_TERMINAL)\n  add_dependencies(unittest lua_dev_deps nvim)\nelse()\n  message(WARNING \"disabling unit tests: no Luajit FFI in ${LUA_PRG}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Bold Highlighting for Manpages in Neovim\nDESCRIPTION: This command uses the `:highlight` command to link the `manBold` highlight group to the `Normal` highlight group, effectively disabling bold highlighting in manpages.  This makes the manpages display without any bold text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n\":highlight link manBold Normal\"\n```\n\n----------------------------------------\n\nTITLE: Getting Socket Name of Pipe Handle\nDESCRIPTION: Retrieves the name associated with the Unix domain socket or named pipe to which the handle is connected. This is useful for understanding the connection context.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nuv.pipe_getsockname({pipe})\n```\n\n----------------------------------------\n\nTITLE: Working with Hidden Buffers\nDESCRIPTION: This snippet shows how to edit hidden buffers in Vim using the ':hide' command. It explains how buffers become hidden and the importance of saving changes to hidden buffers to avoid data loss.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_22.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:hide edit two.txt\n```\n\n----------------------------------------\n\nTITLE: Using :echoerr to Generate Error Exceptions in Vim Script\nDESCRIPTION: Example showing how to use :echoerr to convert an exception into a Vim error exception that can be caught elsewhere.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_131\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:  try\n:    asdf\n:  catch /.*/\n:    echoerr v:exception\n:  endtry\n:catch /.*/\n:  echo v:exception\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Alternate Buffer Register Manipulation\nDESCRIPTION: Examples of working with the alternate file register (#) in Vim, showing how to store and restore buffer numbers and names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nlet altbuf = bufnr(@#)\n...\nlet @# = altbuf\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet @# = 'buffer_name'\n```\n\n----------------------------------------\n\nTITLE: Basic usage of input() function\nDESCRIPTION: Demonstrates basic usage of the input() function which prompts the user for input on the command line. The example shows a simple conditional based on user response.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_132\n\nLANGUAGE: vim\nCODE:\n```\nif input(\"Coffee or beer? \") == \"beer\"\n  echo \"Cheers!\"\nendif\n```\n\n----------------------------------------\n\nTITLE: Setting Colors Name Variable Dynamically in VimL\nDESCRIPTION: This code snippet demonstrates how to set the g:colors_name variable dynamically based on the current file name, which is a recommended practice when creating color schemes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\nlet g:colors_name = expand('<sfile>:t:r')\n```\n\n----------------------------------------\n\nTITLE: Jumping to the end of the current code block (Vim)\nDESCRIPTION: This snippet shows how to jump to the end of the current code block using the `]}` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n\"]}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic Comments in R Markdown Files in Neovim\nDESCRIPTION: This command sets the `rmd_dynamic_comments` variable to `0`, which prevents Neovim from dynamically setting the 'formatexpr' option for R code and Markdown code in R Markdown files. This allows users to configure their own preferred formatting expressions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\n\tlet rmd_dynamic_comments = 0\n```\n\n----------------------------------------\n\nTITLE: Custom operator mapping example\nDESCRIPTION: Example of creating a custom operator mapping that uses v:operator to preserve the original operator\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:omap O <Esc>:call MyMotion(v:operator)<CR>\n```\n\n----------------------------------------\n\nTITLE: Customizing Left/Right Keys in Wildmenu\nDESCRIPTION: Remaps left and right arrow keys to move the cursor instead of selecting different matches in wildmenu completion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_83\n\nLANGUAGE: vim\nCODE:\n```\ncnoremap <Left> <Space><BS><Left>\ncnoremap <Right> <Space><BS><Right>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buffer Number for Window in Vim\nDESCRIPTION: This snippet demonstrates how to use the winbufnr() function to get the buffer number associated with the current window. It's useful for identifying which buffer is displayed in a specific window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_285\n\nLANGUAGE: vim\nCODE:\n```\necho \"The file in the current window is \" .. bufname(winbufnr(0))\n```\n\n----------------------------------------\n\nTITLE: Grepping in Marked Files (netrw-mg) Pattern Examples\nDESCRIPTION: Examples of pattern formats that can be used with the 'mg' command for grepping through marked files. Shows standard search pattern, negated pattern, and plain pattern formats.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_34\n\nLANGUAGE: viml\nCODE:\n```\n/pattern/[g][j]\n! /pattern/[g][j]\npattern\n```\n\n----------------------------------------\n\nTITLE: Converting WTF-8 Length to UTF-16 in Lua\nDESCRIPTION: This function calculates the length in UTF-16 code units of a WTF-8 string after converting it to UTF-16 (or UCS-2). Note that the number of bytes needed for the UTF-16 string is twice the number of code units.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_108\n\nLANGUAGE: lua\nCODE:\n```\nuv.wtf8_length_as_utf16({wtf16})\n```\n\n----------------------------------------\n\nTITLE: Setting Perl Filetype in Vim\nDESCRIPTION: This command configures the filetype of the current buffer to Perl within Vim, executing the relevant settings and plugins defined in ftplugin/perl.vim. It supports Perl syntax completion plugins, facilitating the use of omni-completion features.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_10\n\nLANGUAGE: vimscript\nCODE:\n```\n:set ft=perl\n```\n\n----------------------------------------\n\nTITLE: Setting Autoindent with Comment in Vim\nDESCRIPTION: Example showing how to set the autoindent option with an inline comment using double quotes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:set ai\t\t\"set 'autoindent' option\n```\n\n----------------------------------------\n\nTITLE: Static SQL Completion Mappings\nDESCRIPTION: Defines the default key mappings for static SQL completion in Vim. These mappings trigger the sqlcomplete#Map function to suggest items based on syntax highlighting groups.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n    imap <buffer> <C-C>a <C-\\><C-O>:call sqlcomplete#Map('syntax')<CR><C-X><C-O>\n    imap <buffer> <C-C>k <C-\\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>\n    imap <buffer> <C-C>f <C-\\><C-O>:call sqlcomplete#Map('sqlFunction')<CR><C-X><C-O>\n    imap <buffer> <C-C>o <C-\\><C-O>:call sqlcomplete#Map('sqlOption')<CR><C-X><C-O>\n    imap <buffer> <C-C>T <C-\\><C-O>:call sqlcomplete#Map('sqlType')<CR><C-X><C-O>\n    imap <buffer> <C-C>s <C-\\><C-O>:call sqlcomplete#Map('sqlStatement')<CR><C-X><C-O>\n```\n\n----------------------------------------\n\nTITLE: Implementing Less-like Initialization Function in Vim\nDESCRIPTION: Example function that sets up Vim options when using it as a less/more replacement viewer. Disables cursor column and line highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_10\n\nLANGUAGE: viml\nCODE:\n```\nfunc LessInitFunc()\n  set nocursorcolumn nocursorline\nendfunc\n```\n\n----------------------------------------\n\nTITLE: Static SQL Completion Mapping Example\nDESCRIPTION: Provides an example of a static SQL completion mapping using regular expressions.  This allows more flexible matching of syntax groups for completion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n    imap <buffer> <C-C>k <C-\\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>\n    imap <buffer> <C-C>k <C-\\><C-O>:call sqlcomplete#Map('sqlKeyword\\w*')<CR><C-X><C-O>\n```\n\n----------------------------------------\n\nTITLE: Continue and Break with Finally in Vim Script\nDESCRIPTION: Shows how finally blocks still execute when the try block or catch clauses are exited via continue or break statements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_133\n\nLANGUAGE: vim\nCODE:\n```\n:let first = 1\n:while 1\n:  try\n:    if first\n:      echo \"first\"\n:      let first = 0\n:      continue\n:    else\n:      throw \"second\"\n:    endif\n:  catch /.*/\n:    echo v:exception\n:    break\n:  finally\n:    echo \"cleanup\"\n:  endtry\n:  echo \"still in while\"\n:endwhile\n:echo \"end\"\n```\n\n----------------------------------------\n\nTITLE: Restoring Window Sizes in Vim\nDESCRIPTION: This example demonstrates how to use winrestcmd() to save and restore window sizes. It's useful for temporarily changing window layouts and then reverting them back to their original state.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_289\n\nLANGUAGE: vim\nCODE:\n```\nlet cmd = winrestcmd()\ncall MessWithWindowSizes()\nexe cmd\n```\n\n----------------------------------------\n\nTITLE: Profiling Using Bpftrace in Neovim\nDESCRIPTION: This bpftrace script is used to track performance bottlenecks in Neovim by analyzing slow functions and printing files opened during execution. It highlights functions that exceed a set execution time and prints a histogram of function timing. Prerequisites include having bpftrace installed and the ability to run scripts with sudo.\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bpftrace\nCODE:\n```\n#!/usr/bin/env bpftrace\n\nBEGIN {\n  @depth = -1;\n}\n\ntracepoint:sched:sched_process_fork /@pidmap[args->parent_pid]/ {\n  @pidmap[args->child_pid] = 1;\n}\n\ntracepoint:sched:sched_process_exit /@pidmap[args->pid]/ {\n  delete(@pidmap[args->pid]);\n}\n\nusdt:build/bin/nvim:neovim:eval__call_func__entry {\n    @pidmap[pid] = 1;\n    @depth++;\n    @funcentry[@depth] = nsecs;\n}\n\nusdt:build/bin/nvim:neovim:eval__call_func__return {\n    $func = str(arg0);\n    $msecs = (nsecs - @funcentry[@depth]) / 1000000;\n\n    @time_histo = hist($msecs);\n\n    if ($msecs >= 1000) {\n      printf(\"%u ms for %s\\n\", $msecs, $func);\n      print(@files);\n    }\n\n    clear(@files);\n    delete(@funcentry[@depth]);\n    @depth--;\n}\n\ntracepoint:syscalls:sys_enter_open,\ntracepoint:syscalls:sys_enter_openat {\n  if (@pidmap[pid] == 1 && @depth >= 0) {\n    @files[str(args->filename)] = count();\n  }\n}\n\nEND {\n  clear(@depth);\n}\n\n$ sudo bpftrace funcslower.bt\n1527 ms for Slower\n@files[/usr/lib/libstdc++.so.6]: 2\n@files[/etc/fish/config.fish]: 2\n<snip>\n\n^C\n@time_histo:\n[0]                71430 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[1]                  346 |                                                    |\n[2, 4)               208 |                                                    |\n[4, 8)                91 |                                                    |\n[8, 16)               22 |                                                    |\n[16, 32)              85 |                                                    |\n[32, 64)               7 |                                                    |\n[64, 128)              0 |                                                    |\n[128, 256)             0 |                                                    |\n[256, 512)             6 |                                                    |\n[512, 1K)              1 |                                                    |\n[1K, 2K)               5 |                                                    |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Namespaces in Neovim Lua API\nDESCRIPTION: Gets existing, non-anonymous namespaces. Returns a dictionary mapping names to namespace IDs. Available since Neovim 0.3.2.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_67\n\nLANGUAGE: lua\nCODE:\n```\nnvim_get_namespaces()\n```\n\n----------------------------------------\n\nTITLE: Enabling Arabic Settings in Neovim\nDESCRIPTION: Enables Arabic support, including keymap, right-to-left mode, and Arabic shaping. This is a shortcut command that sets up multiple Arabic-related options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_2\n\nLANGUAGE: VimScript\nCODE:\n```\n:set arabic\n```\n\n----------------------------------------\n\nTITLE: Treesitter Query Modeline Example (Extends and Inherits)\nDESCRIPTION: This example demonstrates the use of treesitter query modelines to extend existing queries and inherit queries from another language, showcasing that the directives can be separated by comments. It shows the syntax for specifying multiple languages to inherit from and extending the current query.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_12\n\nLANGUAGE: query\nCODE:\n```\n\";; extends\\n;;\\n;; inherits: css\"\n```\n\n----------------------------------------\n\nTITLE: Verbose Autocommand Example\nDESCRIPTION: Example showing verbose output format when listing autocommands with the verbose option enabled\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:verbose autocmd BufEnter\nFileExplorer  BufEnter\n    *     call s:LocalBrowse(expand(\"<amatch>\"))\n    Last set from /usr/share/vim/vim-7.0/plugin/NetrwPlugin.vim\n```\n\n----------------------------------------\n\nTITLE: Changing Mouse Model in Neovim\nDESCRIPTION: Change the 'mousemodel' option to 'extend' to make right-click extend selection instead of showing the popup menu.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\nset mousemodel=extend\n```\n\n----------------------------------------\n\nTITLE: Navigating to Location List Errors\nDESCRIPTION: Command for displaying errors from a window-local location list, similar to the :cc command for the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:ll[!] [nr]\n:[nr]ll[!]\n```\n\n----------------------------------------\n\nTITLE: Python String Replacement Function\nDESCRIPTION: Example demonstrating string replacement using Python with Vim registers\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:py3 << EOF\nneedle = vim.eval('@a')\nreplacement = vim.eval('@b')\n\ndef py_vim_string_replace(str):\n\treturn str.replace(needle, replacement)\nEOF\n:'<,'>py3do return py_vim_string_replace(line)\n```\n\n----------------------------------------\n\nTITLE: Cursor Movement Events in Neovim\nDESCRIPTION: Documents cursor-related events including CursorHoldI, CursorMoved, CursorMovedC, and CursorMovedI. These events trigger on various cursor movements in different modes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nCursorHoldI\nCursorMoved\nCursorMovedC\nCursorMovedI\n```\n\n----------------------------------------\n\nTITLE: Reducing folding level\nDESCRIPTION: Opens more folds by reducing the fold level. This command can be repeated to progressively open more nested folds.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_3\n\nLANGUAGE: vimdoc\nCODE:\n```\nzr\n```\n\n----------------------------------------\n\nTITLE: String Slice Operations in Vim Script\nDESCRIPTION: Examples of string slicing operations including getting last byte, whole string, and substring operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_75\n\nLANGUAGE: vim\nCODE:\n```\n:let c = name[-1:]\\n:let c = name[0:-1]\\n:let c = name[-2:-2]\\n:let s = line(\".\")[4:]\\n:let s = s[:-3]\n```\n\n----------------------------------------\n\nTITLE: Navigating to Location List Error Below Current Line\nDESCRIPTION: Command for going to the error below the current line in the current buffer from the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:[count]lbel[ow]\n```\n\n----------------------------------------\n\nTITLE: List Creation in Vimscript\nDESCRIPTION: This code snippet demonstrates how to create lists in Vimscript. Lists can contain items of any type and are created using square brackets with comma-separated items. An empty list can be created using empty square brackets.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\t:let mylist = [1, two, 3, \"four\"]\n\t:let emptylist = []\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions with Side Effects in Vim Script\nDESCRIPTION: Demonstrates how to use the eval command to evaluate expressions with side effects, such as appending text to a buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_110\n\nLANGUAGE: vim\nCODE:\n```\n:eval Getlist()->Filter()->append('$')\n```\n\n----------------------------------------\n\nTITLE: Conditional Autocommand Loading\nDESCRIPTION: Pattern for ensuring autocommands are only loaded once using a variable check\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:if !exists(\"autocommands_loaded\")\n:  let autocommands_loaded = 1\n:  au ...\n:endif\n```\n\n----------------------------------------\n\nTITLE: Setting Right-to-Left Orientation for Command-Line in Vim\nDESCRIPTION: This option sets the command-line to use right-to-left orientation in certain modes like search. It enhances the right-to-left experience in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n'rightleftcmd' ('rlc') sets the command-line within certain modes\n     (such as search) to be utilized in right-to-left orientation as well.\n```\n\n----------------------------------------\n\nTITLE: Setting fold open options\nDESCRIPTION: Configures which commands will automatically open folds. Setting it to 'all' means folds will always open when the cursor moves to them.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_8\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set foldopen=all\n```\n\n----------------------------------------\n\nTITLE: Msgpack Parsing from Shada File\nDESCRIPTION: Example of reading and parsing msgpack data from a Neovim shada file using readfile() and msgpackparse().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_182\n\nLANGUAGE: vim\nCODE:\n```\nlet fname = expand('~/.config/nvim/shada/main.shada')\nlet mpack = readfile(fname, 'b')\nlet shada_objects = msgpackparse(mpack)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Recommended Style\nDESCRIPTION: Code snippet for disabling the default Go style settings in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nlet g:go_recommended_style = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Double-Click Behavior for Netrw in VimL\nDESCRIPTION: This snippet demonstrates how to disable Netrw's default mouse mappings and set up a double-click mapping to open files or directories in Netrw. It involves modifying the .vimrc and creating a Netrw-specific ftplugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_54\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:netrw_mousemaps= 0\n```\n\nLANGUAGE: VimL\nCODE:\n```\nnmap <buffer> <2-leftmouse> <CR>\n```\n\n----------------------------------------\n\nTITLE: Starting Charwise Visual Mode in Neovim\nDESCRIPTION: This command starts Visual mode per character, allowing for selection based on character positions.  The [count] argument allows for extending a previous selection or selecting a specific number of characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\"[count]v\"\n```\n\n----------------------------------------\n\nTITLE: Closing all folds completely\nDESCRIPTION: Closes all folds in the file completely, regardless of nesting depth. This is the opposite of the zR command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_6\n\nLANGUAGE: vimdoc\nCODE:\n```\nzM\n```\n\n----------------------------------------\n\nTITLE: Using Method Chaining for Syntax Item Color Retrieval in Vim\nDESCRIPTION: This snippet demonstrates an alternative way to retrieve the syntax item color using method chaining in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_270\n\nLANGUAGE: vim\nCODE:\n```\necho synID(line(\".\"), col(\".\"), 1)->synIDtrans()->synIDattr(\"fg\")\n```\n\n----------------------------------------\n\nTITLE: Resolving Differences in Diff Mode\nDESCRIPTION: Demonstrates commands for resolving differences by moving text between windows in diff mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\ndp\ndo\n```\n\n----------------------------------------\n\nTITLE: Windows FTP Credentials Example\nDESCRIPTION: Example content for Windows FTP credentials file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nuserid\npassword\n```\n\n----------------------------------------\n\nTITLE: SQL Dialect Configuration Example\nDESCRIPTION: Example configuration for setting the default SQL dialect type in Vim initialization file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimdoc\nCODE:\n```\nlet g:sql_type_default = 'sqlanywhere'\nlet g:sql_type_default = 'sqlinformix'\nlet g:sql_type_default = 'mysql'\n```\n\n----------------------------------------\n\nTITLE: Configuring DTD Syntax Highlighting Options\nDESCRIPTION: Sets options for DTD syntax highlighting, including case sensitivity and parameter entity highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_28\n\nLANGUAGE: VimScript\nCODE:\n```\nlet dtd_ignore_case=1\nlet dtd_no_tag_errors=1\nlet dtd_no_param_entities=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Hare Recommended Style Settings\nDESCRIPTION: Default indentation and formatting settings following the official Hare style guide.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nsetlocal noexpandtab\nsetlocal shiftwidth=0\nsetlocal softtabstop=0\nsetlocal tabstop=8\nsetlocal textwidth=80\n```\n\n----------------------------------------\n\nTITLE: Cinoptions Indentation Examples - Basic\nDESCRIPTION: Demonstrates basic indentation patterns with different cinoptions settings using if-condition blocks\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n  if (cond)\n  {\n      foo;\n  }\n```\n\n----------------------------------------\n\nTITLE: Restoring Old Default Color Scheme in Neovim Color Scheme File\nDESCRIPTION: Add this line to your color scheme file to restore the old default color scheme links and colors in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\n:source $VIMRUNTIME/colors/vim.lua\n```\n\n----------------------------------------\n\nTITLE: Time Measurement Functions with LibUV in Lua\nDESCRIPTION: High-resolution time measurement functions for system uptime, monotonic and real-time clocks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_81\n\nLANGUAGE: lua\nCODE:\n```\nuv.hrtime()                                                        *uv.hrtime()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.clock_gettime({clock_id})                                *uv.clock_gettime()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.uptime()                                                        *uv.uptime()*\n```\n\n----------------------------------------\n\nTITLE: Stream Type Detection with LibUV in Lua\nDESCRIPTION: Function to detect what type of stream should be used with a given file descriptor, typically used during initialization to determine stdio stream types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_83\n\nLANGUAGE: lua\nCODE:\n```\nuv.guess_handle({fd})                                        *uv.guess_handle()*\n```\n\n----------------------------------------\n\nTITLE: Re-throwing Exceptions in Vim Script\nDESCRIPTION: Shows how to catch an exception in one function and throw a new one to be caught elsewhere, demonstrating exception chaining.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_129\n\nLANGUAGE: vim\nCODE:\n```\n:function! Foo()\n:  throw \"foo\"\n:endfunction\n:\n:function! Bar()\n:  try\n:    call Foo()\n:  catch /foo/\n:    echo \"Caught foo, throw bar\"\n:    throw \"bar\"\n:  endtry\n:endfunction\n:\n:try\n:  call Bar()\n:catch /.*/\n:  echo \"Caught\" v:exception\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Text Insertion Commands (Vim)\nDESCRIPTION: Commands for inserting text in different modes and positions, including normal insertion, append, and line operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\na               append text after the cursor (N times)\nA               append text at the end of the line (N times)\ni               insert text before the cursor (N times)\nI               insert text before first non-blank in line (N times)\ngI              insert text in column 1 (N times)\no               open new line below current line (N times)\nO               open new line above current line (N times)\n:startinsert    start Insert mode\n:startreplace   start Replace mode\n```\n\n----------------------------------------\n\nTITLE: Disable EditorConfig in Lua Configuration\nDESCRIPTION: Disables the default builtin EditorConfig support in Nvim. This Lua snippet sets the `vim.g.editorconfig` global variable to `false` within the user configuration file. It assumes Nvim is correctly installed and configured.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nvim.g.editorconfig = false\n```\n\n----------------------------------------\n\nTITLE: Disabling TypeScript Host-Specific API Highlighting with VimL\nDESCRIPTION: Configuration to disable highlighting of host-specific APIs like addEventListener in TypeScript syntax highlighting. Set to 0 to disable this feature.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_149\n\nLANGUAGE: viml\nCODE:\n```\nlet g:typescript_host_keyword = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Language Preferences in Vim\nDESCRIPTION: Example of language commands and their output showing how to view and set language preferences\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\n:language\nCurrent language: C\n:language de_DE.ISO_8859-1\n:language mes\nCurrent messages language: de_DE.ISO_8859-1\n:lang mes en\n```\n\n----------------------------------------\n\nTITLE: Conditional Function Deletion Based on Profiling Status\nDESCRIPTION: A condition check that deletes a function only if profiling is not active. This prevents functions from being deleted during profiling, which would prevent collecting their performance data.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\n:if !v:profiling\n:   delfunc MyFunc\n:endif\n```\n\n----------------------------------------\n\nTITLE: Toggling Case in Vim\nDESCRIPTION: Uses the 'g~' operator to swap the case of characters (line example shows the full line case swapping with g~~).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\ng~~\n```\n\n----------------------------------------\n\nTITLE: Setting Embedded Languages for Typst Files in Vim\nDESCRIPTION: Configures a list of language names whose syntax definitions will be included in Typst files using the g:typst_embedded_languages variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_150\n\nLANGUAGE: vim\nCODE:\n```\nlet g:typst_embedded_languages = ['python', 'r']\n```\n\n----------------------------------------\n\nTITLE: Rust Plugin Debugging Commands (Vim)\nDESCRIPTION: These commands are intended for debugging the Rust plugin itself. :RustInfo emits debugging information, :RustInfoToClipboard saves the info to the clipboard, and :RustInfoToFile saves it to a specified file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\n:RustInfo                                                          *:RustInfo*\n\t\tEmits debugging info of the Vim Rust plugin.\n\n:RustInfoToClipboard                                      *:RustInfoClipboard*\n\t\tSaves debugging info of the Vim Rust plugin to the default\n\t\tregister.\n\n:RustInfoToFile [filename]                                   *:RustInfoToFile*\n\t\tSaves debugging info of the Vim Rust plugin to the given file,\n\t\toverwriting it.\n```\n\n----------------------------------------\n\nTITLE: Shell Command Example with Marked Files (netrw-mx)\nDESCRIPTION: Example of using the 'mx' command to apply shell commands to marked files. The command demonstrates how 'cat' would be applied to each marked file individually.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_32\n\nLANGUAGE: viml\nCODE:\n```\n(mark files)\nmx\nEnter command: cat\n\nThe result is a series of shell commands:\ncat 'file1'\ncat 'file2'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Idris2 Tab Settings\nDESCRIPTION: Code snippet for allowing tab characters in Idris2 files instead of spaces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nlet g:idris2#allow_tabchar = 1\n```\n\n----------------------------------------\n\nTITLE: Search with Negative Line Offset in Vim\nDESCRIPTION: Example of a search pattern with a negative line offset that moves the cursor upward from the match. This demonstrates how line offsets can navigate in either direction.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n/const/-2\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shell Type to Korn Shell\nDESCRIPTION: Configuring Vim to use Korn shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_114\n\nLANGUAGE: vim\nCODE:\n```\nlet g:is_kornshell = 1\n```\n\n----------------------------------------\n\nTITLE: Grid Resize Event in Neovim JSON\nDESCRIPTION: This snippet defines the grid resize event specifying dimensions for a grid in Neovim, allowing for responsive UI adjustments when client grids are manipulated.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\"grid_resize\", grid, width, height] ~\n\tResize a `grid`. If `grid` wasn't seen by the client before, a new grid is\nbeing created with this size.\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Scripts File\nDESCRIPTION: Command to save custom filetype detection scripts to the user's Neovim configuration directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nw ~/.config/nvim/scripts.vim\n```\n\n----------------------------------------\n\nTITLE: Navigating to Previous Location List Error\nDESCRIPTION: Commands for displaying the previous error in the location list, similar to :cNext and :cprevious for the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:[count]lN[ext][!]\n:[count]lp[revious][!]\n```\n\n----------------------------------------\n\nTITLE: Configuring Right-to-Left Command-Line Mode\nDESCRIPTION: Sets or unsets right-to-left mode for command-line editing, particularly useful for search commands in Arabic.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_7\n\nLANGUAGE: VimScript\nCODE:\n```\n:set rightleftcmd=search\n```\n\nLANGUAGE: VimScript\nCODE:\n```\n:set rightleftcmd=\n```\n\n----------------------------------------\n\nTITLE: Disabling Diff Translations in Vim\nDESCRIPTION: Code to disable localization in diff syntax highlighting for better performance with long lines by setting a global variable and reloading syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/diff.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\nlet g:diff_translations = 0\nset syntax=diff\n```\n\n----------------------------------------\n\nTITLE: Vim Mark Navigation Command\nDESCRIPTION: Example of jumping to the last known position in a file using mark command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\ng`\\\"\n```\n\n----------------------------------------\n\nTITLE: Closing libuv Loop Resources in Lua\nDESCRIPTION: This function closes all internal libuv loop resources. It's automatically called when the loop is garbage collected by Lua.  It should only be called after the loop has finished executing and all open handles/requests are closed.  Returns `EBUSY` if called prematurely.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.loop_close()                                                *uv.loop_close()*\\n\\n                Closes all internal loop resources. In normal execution, the\\n                loop will automatically be closed when it is garbage collected\\n                by Lua, so it is not necessary to explicitly call\\n                `loop_close()`. Call this function only after the loop has\\n                finished executing and all open handles and requests have been\\n                closed, or it will return `EBUSY`.\\n\\n                Returns: `0` or `fail`\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Previous Quickfix Error\nDESCRIPTION: Commands for displaying the previous error in the quickfix list that includes a file name.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:[count]cN[ext][!]\n:[count]cp[revious][!]\n```\n\n----------------------------------------\n\nTITLE: Msgpack Data Writing Example\nDESCRIPTION: Demonstrates writing msgpack-encoded data to a file using msgpackdump(). Shows two methods: using writefile() with a list and with a Blob.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_181\n\nLANGUAGE: vim\nCODE:\n```\ncall writefile(msgpackdump([{}]), 'fname.mpack', 'b')\n```\n\nLANGUAGE: vim\nCODE:\n```\ncall writefile(msgpackdump([{}], 'B'), 'fname.mpack')\n```\n\n----------------------------------------\n\nTITLE: Setting Fold Expression for Tab-Indented Lines in Vim\nDESCRIPTION: A fold expression that creates a fold for all consecutive lines that start with a tab character. This uses the 'foldexpr' option with a simple expression that checks if the first character of the line is a tab.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set foldexpr=getline(v:lnum)[0]==\"\\t\"\n```\n\n----------------------------------------\n\nTITLE: Defining a syntax region with ALLBUT containment in Vim\nDESCRIPTION: Example of defining a syntax region that accepts all groups except specific ones. This creates a Block region that starts with '{' and ends with '}', containing all syntax groups except Function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_159\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region Block start=\"{\" end=\"}\" ... contains=ALLBUT,Function\n```\n\n----------------------------------------\n\nTITLE: Setting a V Variable in Neovim\nDESCRIPTION: Sets a v: variable with 'nvim_set_vvar', provided it is not readonly. Define both the name and value as strings, similar to global variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nnvim_set_vvar\\(\\{name\\}, \\{value\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Types in Vim\nDESCRIPTION: Examples of using the type() function to determine the type of variables in Vim. Demonstrates checks for various data types including numbers, strings, functions, lists, dictionaries, floats, and booleans.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_278\n\nLANGUAGE: vim\nCODE:\n```\nif type(myvar) == type(0) | endif\nif type(myvar) == type(\"\") | endif\nif type(myvar) == type(function(\"tr\")) | endif\nif type(myvar) == type([]) | endif\nif type(myvar) == type({}) | endif\nif type(myvar) == type(0.0) | endif\nif type(myvar) == type(v:true) | endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Text in Lua Diagnostic Handler\nDESCRIPTION: This code snippet enables the 'virtual_text' option in the Lua diagnostic configuration, allowing virtual text to be displayed for diagnostics. No specific dependencies are required other than having a working Lua environment with Nvim's diagnostic API. The main parameter is the option to enable virtual_text, and it does not return an output as it directly modifies the diagnostic behavior.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.11.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvim.diagnostic.config({ virtual_text = true })\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variables in Vim\nDESCRIPTION: Examples of setting environment variables within Vim to control test execution behavior, including test filtering, skipping tests, and handling failing tests.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/README.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:let $TEST_MAY_FAIL = 'Test_channel_one'\n:let $TEST_FILTER = '_set_mode'\n:let $TEST_SKIP_PAT = 'Test_loop_forever'\n:let $TEST_NO_RETRY = 'yes'\n:let $TEST_FILTER = ''\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Digraphs in Vim\nDESCRIPTION: Example showing how to add digraphs for special characters using decimal representation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:digr e: 235 a: 228\n```\n\n----------------------------------------\n\nTITLE: Help Command with Pipe Operator\nDESCRIPTION: Examples showing how to combine help command with other commands using the pipe operator\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_3\n\nLANGUAGE: vimscript\nCODE:\n```\n:help |\n:help k| only\n:help so<C-V><CR>only\n```\n\n----------------------------------------\n\nTITLE: SSH Key Generation and Setup for Passwordless Authentication\nDESCRIPTION: Commands for setting up SSH passwordless authentication through public/private key pairs. This sequence generates keys, creates necessary directories, and configures authorized keys to enable password-free access for SSH and SCP operations used by Netrw.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd\nmkdir -p .ssh\nchmod 0700 .ssh\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh {serverhostname} cat '>>' '~/.ssh/authorized_keys2' < ~/.ssh/id_rsa.pub\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh {serverhostname} cat '>>' '~/.ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh {serverhostname}\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh-agent $SHELL\nssh-add\nssh {serverhostname}\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh-agent vim\n```\n\nLANGUAGE: bash\nCODE:\n```\n:!ssh-add\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh-agent xterm &\n```\n\n----------------------------------------\n\nTITLE: Compound Word Flag Definition\nDESCRIPTION: Shows how to define compound word flags using COMPOUNDFLAG and COMPOUNDRULE directives\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_16\n\nLANGUAGE: spelling-definition\nCODE:\n```\nCOMPOUNDFLAG c ~\n\nCOMPOUNDRULE c+ ~\nCOMPOUNDRULE se ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Scroll Settings in Neovim\nDESCRIPTION: Example of setting the mousescroll option in Neovim to control vertical and horizontal scrolling behavior. This configures Neovim to scroll 5 lines vertically and 2 columns horizontally when using the mouse wheel.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_55\n\nLANGUAGE: vim\nCODE:\n```\nset mousescroll=ver:5,hor:2\n```\n\n----------------------------------------\n\nTITLE: Digraph Set Example in Vim\nDESCRIPTION: Example of setting a custom digraph with whitespace.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_54\n\nLANGUAGE: vim\nCODE:\n```\ncall digraph_set('  ', 'あ')\n```\n\n----------------------------------------\n\nTITLE: Creating Shallow Copies of Lists in Vim\nDESCRIPTION: Demonstrates how copy() creates a shallow copy of a list, where nested elements are still references to the original elements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:let aa = [[1, 'a'], 2, 3]\n:let bb = copy(aa)\n:call add(aa, 4)\n:let aa[0][1] = 'aaa'\n:echo aa\n```\n\n----------------------------------------\n\nTITLE: Recognizing Vendor Intrinsics in Fortran with Vim\nDESCRIPTION: Enables syntax recognition of common, non-standard, vendor-supplied intrinsics in Fortran files by setting 'fortran_vendor_intrinsics' to 1. This helps in highlighting additional functions provided by various Fortran compilers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_38\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_vendor_intrinsics=1\n```\n\n----------------------------------------\n\nTITLE: Increasing TCSH Syntax Synchronization Lines\nDESCRIPTION: Setting the minimum number of lines for TCSH syntax synchronization to improve highlighting accuracy during backward scrolling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_129\n\nLANGUAGE: vim\nCODE:\n```\nlet tcsh_minlines = 1000\n```\n\n----------------------------------------\n\nTITLE: Enabling BASH Extensions for Readline Syntax Highlighting\nDESCRIPTION: Adds highlighting for BASH-specific commands and options in Readline files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_105\n\nLANGUAGE: vim\nCODE:\n```\nlet readline_has_bash = 1\n```\n\n----------------------------------------\n\nTITLE: Searching Git History for Code Changes\nDESCRIPTION: Example of using git log to search for specific code changes in the repository history\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log -p -G reset_option_was_set\n```\n\n----------------------------------------\n\nTITLE: Getting libuv Version Integer in Lua\nDESCRIPTION: This function returns the libuv version packed into a single integer. It is useful for programmatic version comparisons.  8 bits are used for each component, with the patch number stored in the 8 least significant bits (e.g., 0x010203 for libuv 1.2.3).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.version()                                                      *uv.version()*\\n\\n                Returns the libuv version packed into a single integer. 8 bits\\n                are used for each component, with the patch number stored in\\n                the 8 least significant bits. For example, this would be\\n                0x010203 in libuv 1.2.3.\\n\\n                Returns: `integer`\"\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Popup Menu Items in Neovim\nDESCRIPTION: Remove specific items from the default popup menu in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_9\n\nLANGUAGE: viml\nCODE:\n```\naunmenu PopUp.How-to\\ disable\\ mouse\naunmenu PopUp.-2-\n```\n\n----------------------------------------\n\nTITLE: Configuring Perl Syntax Options\nDESCRIPTION: Sets various Perl syntax highlighting options including POD inclusion and variable parsing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_97\n\nLANGUAGE: vim\nCODE:\n```\n:let perl_include_pod = 0\n```\n\nLANGUAGE: vim\nCODE:\n```\n:let perl_no_scope_in_variables = 1\n```\n\nLANGUAGE: vim\nCODE:\n```\n:let perl_no_extended_vars = 1\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Filetype in Vim\nDESCRIPTION: The line sets the filetype to SQL in Vim, triggering the SQL-specific plugin located at ftplugin/sql.vim. This setup configures buffer-specific maps for SQL syntax completion and determines how to toggle between different completion functionalities like omni-completion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_9\n\nLANGUAGE: vimscript\nCODE:\n```\n:set filetype=sql\n```\n\n----------------------------------------\n\nTITLE: System Processor Architecture Detection for ARM64\nDESCRIPTION: Normalizes the system processor identifier to 'arm64' when running on aarch64 architecture.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64\")\n  set(CMAKE_SYSTEM_PROCESSOR arm64)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding the previous start of a method in C++/Java (Vim)\nDESCRIPTION: This snippet shows how to find the previous start of a method when inside a class in C++ or Java using the `[m` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n\"[m\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Post-Compiler Action Executor for SpotBugs\nDESCRIPTION: Defines a function that decides whether to execute post-compiler actions based on the current compiler status.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_49\n\nLANGUAGE: vim\nCODE:\n```\nfunction! GenericPostCompilerActionExecutor(action) abort\n\ttry\n\t\tcc\n\tcatch /\\<E42:/\n\t\texecute a:action\n\tendtry\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Setting Arabic Keymap in Neovim\nDESCRIPTION: Activates the Arabic keymap, remapping the keyboard to a standard Arabic layout. This can be toggled with CTRL-^ in insert mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_4\n\nLANGUAGE: VimScript\nCODE:\n```\n:set keymap=arabic\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Drawing for XPM Files in Vim\nDESCRIPTION: Defines functions and mappings to enable drawing with the mouse in XPM files using Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_154\n\nLANGUAGE: vim\nCODE:\n```\n:function! GetPixel()\n:   let c = getline(\".\")[col(\".\") - 1]\n:   echo c\n:   exe \"noremap <LeftMouse> <LeftMouse>r\" .. c\n:   exe \"noremap <LeftDrag>\t<LeftMouse>r\" .. c\n:endfunction\n:noremap <RightMouse> <LeftMouse>:call GetPixel()<CR>\n:set guicursor=n:hor20\t   \" to see the color beneath the cursor\n```\n\n----------------------------------------\n\nTITLE: Optimized Lookbehind Pattern for Syntax Highlighting\nDESCRIPTION: Examples of optimizing syntax patterns with lookbehind assertions by adding a maximum size. This improves performance by limiting the search area.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_210\n\nLANGUAGE: vim\nCODE:\n```\n\"<\\@<=span\"\t\"Matches \"span\" in \"<span\".  This tries matching with \"<\" in\n\t\tmany places.\n\"<\\@1<=span\"\t\"Matches the same, but only tries one byte before \"span\".\n```\n\n----------------------------------------\n\nTITLE: Controlling LaTeX Delimiter Matching with VimL\nDESCRIPTION: Setting to determine which delimiters are checked for proper matching in LaTeX documents. Can be adjusted to avoid false positives in specific contexts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_146\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_matchcheck= '[{}]'\n```\n\n----------------------------------------\n\nTITLE: Aligned Comments in C\nDESCRIPTION: Example showing how to align multiple line comments for better readability.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_11\n\nLANGUAGE: c\nCODE:\n```\ndo_something();                      // Comment here so the comments line up.\ndo_something_else_that_is_longer();  // Comment here so there are two spaces between\n                                     // the code and the comment.\n{ // One space before comment when opening a new scope is allowed,\n  // thus the comment lines up with the following comments and code.\n  do_something_else();  // Two spaces before line comments normally.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Subdirectories with Autoload in Vim\nDESCRIPTION: This example demonstrates how to use subdirectories with the autoload mechanism for organizing complex library scripts in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_57\n\nLANGUAGE: vim\nCODE:\n```\ncall netlib#ftp#read('somefile')\n```\n\n----------------------------------------\n\nTITLE: Basic FTP URL Example in Vim\nDESCRIPTION: Example showing basic FTP URL usage in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nvim ftp://hostname/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Setting Up Platform-specific Lua Language Server Configuration in CMake\nDESCRIPTION: Determines the appropriate architecture (arm64 or x64) based on the system processor for downloading the Lua Language Server.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_PROCESSOR MATCHES arm64)\n  set(LUALS_ARCH arm64)\nelse()\n  set(LUALS_ARCH x64)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Quitting Vim with Error Code\nDESCRIPTION: Command for quitting Vim with a specified error code, useful when Vim is called from another program.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n:cq[uit][!]\n:{N}cq[uit][!]\n:cq[uit][!] {N}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Options\nDESCRIPTION: Sets additional parameters for the Maven compiler by configuring the maven_makeprg_params variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_43\n\nLANGUAGE: vim\nCODE:\n```\nlet g:maven_makeprg_params = \"-DskipTests -U -X\"\n```\n\n----------------------------------------\n\nTITLE: Starting Vim in Binary Mode\nDESCRIPTION: This command starts Vim in binary mode.  The '-b' argument sets the 'binary' option, which disables certain features that could interfere with editing binary files. This is important to prevent unintended modifications, such as automatic formatting, when working with binary data.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\tvim -b datafile\n```\n\n----------------------------------------\n\nTITLE: Preventing Matcher Inclusion in Styled Regions with VimL\nDESCRIPTION: Setting to prevent the texMatcher group from being included in bold and italicized regions. Helps avoid unwanted delimiter matching in these contexts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_147\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_excludematcher= 1\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Plugin Health Checks in Vim\nDESCRIPTION: Example of running health checks for multiple plugins named 'foo' and 'bar'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/health.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:checkhealth foo bar\n```\n\n----------------------------------------\n\nTITLE: Specific Error Pattern Catching\nDESCRIPTION: Shows how to catch specific write errors using a pattern match, which is the recommended approach to avoid catching unrelated errors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_137\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:  write\n:catch /^Vim(write):/\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Using pattern matching in contains argument for Vim syntax\nDESCRIPTION: Example showing how to use patterns in the 'contains' argument to include multiple groups that match a pattern. This includes all groups starting with 'Comment' and keywords named 'Keyw0' through 'Keyw3'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_160\n\nLANGUAGE: vim\nCODE:\n```\n... contains=Comment.*,Keyw[0-3]\n```\n\n----------------------------------------\n\nTITLE: Runtime Path Directory Creation\nDESCRIPTION: Shell command to create Neovim user runtime directory for custom configurations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.config/nvim\n```\n\n----------------------------------------\n\nTITLE: Setting TEX Flavor Configuration in Vim\nDESCRIPTION: Configuration options to set the default TEX flavor (plain, context, or latex) for .tex files\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_38\n\nLANGUAGE: vim\nCODE:\n```\nlet g:tex_flavor = \"plain\"\nlet g:tex_flavor = \"context\"\nlet g:tex_flavor = \"latex\"\n```\n\n----------------------------------------\n\nTITLE: Checking PythonX functionality in Vim script\nDESCRIPTION: Command to verify the PythonX integration is working by printing a hello message.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_11\n\nLANGUAGE: viml\nCODE:\n```\n:pyx print(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Inspecting Global Variable in Debug Mode\nDESCRIPTION: This command prints the value of the global variable 'idx' during a debugging session. The `g:` prefix specifies that the variable is in the global scope.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n\"echo g:idx\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Concealment for Module Path Separators\nDESCRIPTION: Enables concealment for the path connecting token \"::\" in Rust code, which can make deeply nested module paths more readable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_conceal_mod_path = 1\n```\n\n----------------------------------------\n\nTITLE: Busy State Indication in Neovim JSON\nDESCRIPTION: This snippet indicates the busy state of the Neovim UI, providing event occurrences to manage rendering, even though the naming may be misleading regarding actual usage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\"busy_start\"] ~\n[\"busy_stop\"] ~\n\tIndicates to the UI that it must stop rendering the cursor. This event\nis misnamed and does not actually have anything to do with busyness.\n```\n\n----------------------------------------\n\nTITLE: Navigating to Location List Error in Next File\nDESCRIPTION: Command for displaying the first error in the next file in the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:[count]lnf[ile][!]\n```\n\n----------------------------------------\n\nTITLE: File System Sync Operation in libuv\nDESCRIPTION: Synchronizes a file's contents to disk. Equivalent to fsync(2) system call. Takes a file descriptor and optional callback for async operations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_52\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_fsync({fd} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Configuring Lua Bytecode Compilation\nDESCRIPTION: Sets up options for pre-compiling Lua sources into bytecode to be included in the binary, with support for both standard Lua and LuaJIT compilers.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\noption(COMPILE_LUA \"Pre-compile Lua sources into bytecode (for sources that are included in the binary)\" ON)\nif(COMPILE_LUA AND NOT WIN32)\n  if(PREFER_LUA)\n    foreach(CURRENT_LUAC_PRG luac5.1 luac)\n      find_program(_CHECK_LUAC_PRG ${CURRENT_LUAC_PRG})\n      if(_CHECK_LUAC_PRG)\n        set(LUAC_PRG \"${_CHECK_LUAC_PRG} -s -o - %s\" CACHE STRING \"Format for compiling to Lua bytecode\")\n        break()\n      endif()\n    endforeach()\n  elseif(LUA_PRG MATCHES \"luajit\")\n    check_lua_module(${LUA_PRG} \"jit.bcsave\" LUAJIT_HAS_JIT_BCSAVE)\n    if(LUAJIT_HAS_JIT_BCSAVE)\n      set(LUAC_PRG \"${LUA_PRG} -b -s %s -\" CACHE STRING \"Format for compiling to Lua bytecode\")\n    endif()\n  endif()\nendif()\nmark_as_advanced(LUAC_PRG)\nif(LUAC_PRG)\n  message(STATUS \"Using Lua compiler: ${LUAC_PRG}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Moving windows to the right\nDESCRIPTION: Moves the current window to the far right.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n\tCTRL-W L\n```\n\n----------------------------------------\n\nTITLE: Disabling Arabic Support in Neovim\nDESCRIPTION: Disables Arabic support, resetting keymap and turning off right-to-left mode without affecting global settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_3\n\nLANGUAGE: VimScript\nCODE:\n```\n:set noarabic\n```\n\n----------------------------------------\n\nTITLE: Customizing Time Format in Netrw File Listings\nDESCRIPTION: Setting custom time format for file listings in netrw by modifying the g:netrw_timefmt variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_46\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_timefmt= \"%X\"  (where X is the option)\n```\n\n----------------------------------------\n\nTITLE: Setting helplang in Vim\nDESCRIPTION: Example of setting the 'helplang' option in Vim, which specifies the preferred languages for help files. This option allows users to prioritize help file languages, with English always used as a last resort.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\nset helplang=de,it\n```\n\n----------------------------------------\n\nTITLE: Filtering Directory Contents with readdir() in Vim\nDESCRIPTION: Examples of using the readdir() function to list and filter directory contents, including filtering by file extension and excluding hidden and backup files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_201\n\nLANGUAGE: vim\nCODE:\n```\necho readdir(dirname, {n -> n =~ '.txt$'})\n```\n\nLANGUAGE: vim\nCODE:\n```\necho readdir(dirname, {n -> n !~ '^\\.|\\~$'})\n```\n\nLANGUAGE: vim\nCODE:\n```\nfunction! s:tree(dir)\n    return {a:dir : map(readdir(a:dir),\n    \\ {_, x -> isdirectory(x) ?\n    \\          {x : s:tree(a:dir .. '/' .. x)} : x})}\nendfunction\necho s:tree(\".\")\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition in Vim Heredoc\nDESCRIPTION: Example showing how to define a Python class using Vim's heredoc syntax within a Vim function\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nfunction! IcecreamInitialize()\npython << EOF\nclass StrawberryIcecream:\n\tdef __call__(self):\n\t\tprint('EAT ME')\nEOF\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Restoring default fold open options\nDESCRIPTION: Resets the foldopen option to its default value, which only opens folds for specific commands like horizontal movements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_9\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set foldopen&\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Split Window in Lua\nDESCRIPTION: Creates a vertical split window to the left of the current window using the Neovim API.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_81\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_open_win(0, false, {\n  split = 'left',\n  win = 0\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Horizontal Scrollbar in Vim GUI\nDESCRIPTION: Command to enable the horizontal scrollbar at the bottom of the Vim window in GUI mode by modifying the guioptions setting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:set guioptions+=b\n```\n\n----------------------------------------\n\nTITLE: Displaying Vim Window Position in GUI\nDESCRIPTION: This command shows the current position of the Vim window on the screen in pixels. It only works in the GUI version of Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:winpos\n```\n\n----------------------------------------\n\nTITLE: Allowing Wrong HTML Comments\nDESCRIPTION: This snippet allows the use of incorrect HTML comment styles (starts with <!-- and ends with -->). Setting the 'html_wrong_comments' variable to 1 enables this feature.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_55\n\nLANGUAGE: vim\nCODE:\n```\n\t:let html_wrong_comments=1\n```\n\n----------------------------------------\n\nTITLE: Visual Mode Text Selection in Vim\nDESCRIPTION: This example demonstrates how to use getregion() to retrieve the selected text in visual mode, including the selection type.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_107\n\nLANGUAGE: vim\nCODE:\n```\nxnoremap <CR>\n\\ <Cmd>echom getregion(\n\\ getpos('v'), getpos('.'), #{ type: mode() })<CR>\n```\n\n----------------------------------------\n\nTITLE: Using pow() Function for Mathematical Calculations in Vim\nDESCRIPTION: Examples of using pow() to calculate power operations in Vim. Demonstrates integer exponents, large results, and fractional exponents, all returning floating-point results.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_188\n\nLANGUAGE: vim\nCODE:\n```\necho pow(3, 3)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho pow(2, 16)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho pow(32, 0.20)\n```\n\n----------------------------------------\n\nTITLE: Painting Individual Background Papers\nDESCRIPTION: This method paints individual background papers, including thumbnails and selection indicators. It handles different states such as current selection and delete hover states.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid BackgroundBox::Inner::paintPaper(\n\t\tQPainter &p,\n\t\tconst Paper &paper,\n\t\tint column,\n\t\tint row) const {\n\tconst auto x = st::backgroundPadding + column * (st::backgroundSize.width() + st::backgroundPadding);\n\tconst auto y = st::backgroundPadding + row * (st::backgroundSize.height() + st::backgroundPadding);\n\tvalidatePaperThumbnail(paper);\n\tif (!paper.thumbnail.isNull()) {\n\t\tp.drawPixmap(x, y, paper.thumbnail);\n\t}\n\n\tconst auto over = !v::is_null(_overDown) ? _overDown : _over;\n\tif (paper.data.id() == _currentId) {\n\t\tconst auto checkLeft = x + st::backgroundSize.width() - st::overviewCheckSkip - st::overviewCheck.size;\n\t\tconst auto checkTop = y + st::backgroundSize.height() - st::overviewCheckSkip - st::overviewCheck.size;\n\t\t_check->paint(p, checkLeft, checkTop, width());\n\t} else if (Data::IsCloudWallPaper(paper.data)\n\t\t&& !Data::IsDefaultWallPaper(paper.data)\n\t\t&& !Data::IsLegacy2DefaultWallPaper(paper.data)\n\t\t&& !Data::IsLegacy3DefaultWallPaper(paper.data)\n\t\t&& !v::is_null(over)\n\t\t&& (&paper == &_papers[getSelectionIndex(over)])) {\n\t\tconst auto deleteSelected = v::is<DeleteSelected>(over);\n\t\tconst auto deletePos = QPoint(x + st::backgroundSize.width() - st::stickerPanDeleteIconBg.width(), y);\n\t\tp.setOpacity(deleteSelected ? st::stickerPanDeleteOpacityBgOver : st::stickerPanDeleteOpacityBg);\n\t\tst::stickerPanDeleteIconBg.paint(p, deletePos, width());\n\t\tp.setOpacity(deleteSelected ? st::stickerPanDeleteOpacityFgOver : st::stickerPanDeleteOpacityFg);\n\t\tst::stickerPanDeleteIconFg.paint(p, deletePos, width());\n\t\tp.setOpacity(1.);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for NaN Values in Vim\nDESCRIPTION: Demonstrates how to use the isnan() function to determine if a floating-point value is Not-a-Number (NaN). The function returns 1 for NaN values and 0 otherwise.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_144\n\nLANGUAGE: vim\nCODE:\n```\necho isnan(0.0 / 0.0)\n\"1\n```\n\n----------------------------------------\n\nTITLE: Building Help Documentation\nDESCRIPTION: Generates help tags for main Neovim documentation and creates runtime target depending on generated files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${GENERATED_HELP_TAGS}\n  COMMAND ${CMAKE_COMMAND} -E remove_directory doc\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n    ${PROJECT_SOURCE_DIR}/runtime/doc doc\n  COMMAND $<TARGET_FILE:nvim_bin>\n    -u NONE -i NONE -e --headless -c \"helptags ++t doc\" -c quit\n  DEPENDS\n    nvim_bin\n    nvim_runtime_deps\n  WORKING_DIRECTORY \"${GENERATED_RUNTIME_DIR}\"\n)\n\nadd_custom_target(\n  nvim_runtime\n  DEPENDS\n    ${GENERATED_SYN_VIM}\n    ${GENERATED_HELP_TAGS}\n    ${GENERATED_PACKAGE_TAGS}\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping ScrollWheel Actions in VimScript\nDESCRIPTION: This snippet shows how to map mouse scroll actions to keyboard commands in Neovim. The ':map' command reassigns the \"<ScrollWheelUp>\" action to scroll a page up, and \"<ScrollWheelDown>\" to scroll a page down using '<C-B>' and '<C-F>' respectively. These mappings help customize scrolling behavior in normal mode. There are no additional dependencies required.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/scroll.txt#2025-04-20_snippet_5\n\nLANGUAGE: VimScript\nCODE:\n```\n:map <ScrollWheelUp> <C-B>\n:map <ScrollWheelDown> <C-F>\n```\n\n----------------------------------------\n\nTITLE: Example of Conditionals Not Working in Execute\nDESCRIPTION: Shows an invalid use of :execute with control structures, where Vim can't properly track blocks due to conditional evaluation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_116\n\nLANGUAGE: vim\nCODE:\n```\n:if 0\n: execute 'while i > 5'\n:  echo \"test\"\n: endwhile\n:endif\n```\n\n----------------------------------------\n\nTITLE: Pausing Thread Execution in Lua with Libuv\nDESCRIPTION: Pauses the execution of the current thread for a specified number of milliseconds.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_69\n\nLANGUAGE: lua\nCODE:\n```\nuv.sleep({msec})\n```\n\n----------------------------------------\n\nTITLE: Setting Free Source Form for Fortran in Vim\nDESCRIPTION: Configures Vim to always assume a free source form for new Fortran files by setting 'fortran_free_source' to 1, aligning with modern Fortran standards for syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_35\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_free_source=1\n```\n\n----------------------------------------\n\nTITLE: Complex Back Reference Pattern Configuration\nDESCRIPTION: Examples of complex pattern matching using multiple back references.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:let b:match_words = '\\(\\(foo\\)\\(bar\\)\\):\\3\\2:end\\1'\n```\n\n----------------------------------------\n\nTITLE: Setting g:netrw_winsize Example Configuration\nDESCRIPTION: Example configuration showing recommended netrw settings for preview window behavior, including vertical splitting, tree-style listing, and window size customization.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_40\n\nLANGUAGE: viml\nCODE:\n```\nlet g:netrw_preview   = 1\nlet g:netrw_liststyle = 3\nlet g:netrw_winsize   = 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies Paths and Auto-Building\nDESCRIPTION: Sets up paths for finding dependencies, with logic to automatically build bundled dependencies when running from certain IDEs like CLion or Visual Studio.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Prefer our bundled versions of dependencies.\nif(DEFINED ENV{DEPS_BUILD_DIR})\n  set(DEPS_PREFIX \"$ENV{DEPS_BUILD_DIR}/usr\" CACHE PATH \"Path prefix for finding dependencies\")\nelse()\n  set(DEPS_PREFIX \"${CMAKE_CURRENT_SOURCE_DIR}/.deps/usr\" CACHE PATH \"Path prefix for finding dependencies\")\n  # When running from within CLion or Visual Studio,\n  # build bundled dependencies automatically.\n  if(NOT EXISTS ${DEPS_PREFIX}\n     AND (DEFINED ENV{CLION_IDE}\n          OR DEFINED ENV{VisualStudioEdition}))\n    message(STATUS \"Building dependencies...\")\n    set(DEPS_BUILD_DIR ${PROJECT_BINARY_DIR}/.deps)\n    file(MAKE_DIRECTORY ${DEPS_BUILD_DIR})\n    execute_process(\n      COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}\n        -D CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}\n        -D CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n        -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n        -D CMAKE_C_FLAGS=${CMAKE_C_FLAGS}\n        -D CMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG}\n        -D CMAKE_C_FLAGS_MINSIZEREL=${CMAKE_C_FLAGS_MINSIZEREL}\n        -D CMAKE_C_FLAGS_RELWITHDEBINFO=${CMAKE_C_FLAGS_RELWITHDEBINFO}\n        -D CMAKE_C_FLAGS_RELEASE=${CMAKE_C_FLAGS_RELEASE}\n        -D CMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}\n        ${PROJECT_SOURCE_DIR}/cmake.deps\n      WORKING_DIRECTORY ${DEPS_BUILD_DIR})\n    execute_process(\n      COMMAND ${CMAKE_COMMAND} --build ${DEPS_BUILD_DIR}\n        --config ${CMAKE_BUILD_TYPE})\n    set(DEPS_PREFIX ${DEPS_BUILD_DIR}/usr)\n  endif()\nendif()\n\nlist(INSERT CMAKE_PREFIX_PATH 0 ${DEPS_PREFIX})\n```\n\n----------------------------------------\n\nTITLE: Disabling Modelines in YAML Files\nDESCRIPTION: Example of using a modeline at the start of a YAML file to disable modeline detection, which is useful when the file contains text that might be misinterpreted as a modeline.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\n# vim: nomodeline\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Header in VimScript\nDESCRIPTION: This code snippet demonstrates how to create a header for a Vim plugin. It includes information about the plugin's purpose, last change date, maintainer, and licensing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_29\n\nLANGUAGE: VimScript\nCODE:\n```\n\" Vim global plugin for correcting typing mistakes\n\" Last Change:\t2000 Oct 15\n\" Maintainer:\tBram Moolenaar <Bram@vim.org>\n\" License:\tThis file is placed in the public domain.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Loop Idle Time with uv.metrics_idle_time()\nDESCRIPTION: Returns the accumulated time the event loop has been idle in the kernel's event provider. The loop must be configured to collect idle time metrics first.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_104\n\nLANGUAGE: lua\nCODE:\n```\nuv.metrics_idle_time()\n```\n\n----------------------------------------\n\nTITLE: Popping Context from Stack - Lua\nDESCRIPTION: The ctxpop function restores the context at the top of the context stack, effectively popping the latest state that was saved. This is important for reverting state in the editor when navigating back.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_39\n\nLANGUAGE: lua\nCODE:\n```\nctxpop()                                                              *ctxpop()*\n\t\tPops and restores the |context| at the top of the\n\t\t|context-stack|.\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shell Type to Bourne Shell\nDESCRIPTION: Configuring Vim to use Bourne shell syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_118\n\nLANGUAGE: vim\nCODE:\n```\nlet g:is_sh        = 1\n```\n\n----------------------------------------\n\nTITLE: Cleaning Spell Files with VimScript\nDESCRIPTION: Script command for cleaning up comment lines in .add spell files. Only preserves comments starting with ##.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\n:runtime spell/cleanadd.vim\n```\n\n----------------------------------------\n\nTITLE: Disabling Hare Space Error Highlighting\nDESCRIPTION: Configuration to disable highlighting of trailing whitespace and tabs preceded by spaces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nlet g:hare_space_error = 0\n```\n\n----------------------------------------\n\nTITLE: Enabling @ in Command Names for LaTeX Documents with VimL\nDESCRIPTION: Buffer-local setting to allow the use of @ in LaTeX command names outside of .sty files. Useful when using \\makeatletter in regular .tex files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_142\n\nLANGUAGE: viml\nCODE:\n```\n:let b:tex_stylish = 1\n:set ft=tex\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Handling with Unsilent Commands in Vim\nDESCRIPTION: Examples showing how to use the unsilent command to work around Neovim's default shortmess+=F setting for inputlist and echomsg functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nunsilent let var = inputlist(['1. item1', '2. item2'])\nautocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n```\n\n----------------------------------------\n\nTITLE: Setting DocBook Type and Version for Syntax Highlighting\nDESCRIPTION: Configures the DocBook type (XML or SGML) and version for proper syntax highlighting in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_25\n\nLANGUAGE: VimScript\nCODE:\n```\nlet docbk_type = \"xml\"\nlet docbk_ver = 3\n:set filetype=docbkxml\n```\n\n----------------------------------------\n\nTITLE: Setting Long Listing Style as Default for Netrw\nDESCRIPTION: Configuration to set the long listing style (detailed view) as the default display mode for netrw file browsing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_45\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_liststyle= 1\n```\n\n----------------------------------------\n\nTITLE: Starting Linewise Visual Mode in Neovim\nDESCRIPTION: This command starts Visual mode linewise, selecting entire lines. The optional [count] argument can be used to select a specific number of lines or extend a previous linewise selection.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n\"[count]V\"\n```\n\n----------------------------------------\n\nTITLE: Creating Ada Tags with ada#Create_Tags Function\nDESCRIPTION: Function to create tag files for Ada code using Ctags. Takes an option parameter that can be 'file' for the current file, 'dir' for the directory of the current file, or a specific filename.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\nada#Create_Tags({option})\n```\n\n----------------------------------------\n\nTITLE: Checking for all include files (Vim)\nDESCRIPTION: This snippet demonstrates how to get a verbose list of included files using `:checkpath!`.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\n\":checkpath!\"\n```\n\n----------------------------------------\n\nTITLE: Generic Syntax Group Exclude Variable Pattern\nDESCRIPTION: Template for the variable used to exclude specific syntax groups from Omni completion for any filetype, using regex patterns or comma-separated syntax group names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\nlet g:omni_syntax_group_exclude_{filetype} = 'regex,comma,separated'\n```\n\n----------------------------------------\n\nTITLE: Setting Lua Version Configuration\nDESCRIPTION: Code snippet showing how to set the Lua version for syntax highlighting and include expressions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nlet g:lua_version = 5\nlet g:lua_subversion = 1\n```\n\n----------------------------------------\n\nTITLE: Checking Python functionality in Vim script\nDESCRIPTION: Simple command to verify Python integration is working by printing a hello message.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\n:py3 print(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: No Swapfile Command Modifier\nDESCRIPTION: Command modifier to execute a command without creating a swap file for new buffers\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:nos[wapfile] {command}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Next Location List Error\nDESCRIPTION: Command for displaying the next error in the location list, similar to the :cnext command for the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:[count]lne[xt][!]\n```\n\n----------------------------------------\n\nTITLE: Setting XFree86 Version for XF86Config Syntax Highlighting\nDESCRIPTION: Configures the XFree86 version for proper syntax highlighting of XF86Config files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_152\n\nLANGUAGE: vim\nCODE:\n```\n:let xf86conf_xfree86_version=3\n```\n\n----------------------------------------\n\nTITLE: List Keymap Mappings in Vim\nDESCRIPTION: Command to display all current keymap mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:lmap\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Pipe\nDESCRIPTION: Establishes a connection to a named pipe, allowing for data transfer. A callback may be provided to manage the connection's success or failure.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nuv.pipe_connect({pipe}, {name} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Checking for be64toh macros in C\nDESCRIPTION: Tests if the system provides be64toh macros for byte order conversion by attempting to compile a program that uses be64toh on a 64-bit integer. The test includes various endian header files based on platform availability.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n  #define _BSD_SOURCE 1\n  #define _DEFAULT_SOURCE 1\n  #include <stdint.h>\n\n  #include <${ENDIAN_INCLUDE_FILE}>\n  #ifndef be64toh\n  # error No be64toh macros\n  #endif\n  int main(int argc,char**argv)\n{\n  uint64_t i=0x0102030405060708ULL;\n    uint64_t j = be64toh(i);\n    return (j == 0);  // j must not be zero\n  }\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Type Variables in Vim\nDESCRIPTION: Example of checking if the v:t_ type variables exist in Vim. This can be useful for compatibility checks in scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_280\n\nLANGUAGE: vim\nCODE:\n```\nif exists('v:t_number') | endif\n```\n\n----------------------------------------\n\nTITLE: Creating Range Parameters in Neovim LSP (Lua)\nDESCRIPTION: Creates an object similar to make_range_params using a given range in the current buffer. Takes start position, end position, buffer number, and position encoding as parameters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_56\n\nLANGUAGE: lua\nCODE:\n```\nmake_given_range_params({start_pos}, {end_pos}, {bufnr}, {position_encoding})\n```\n\n----------------------------------------\n\nTITLE: Directory Change Example in Vim\nDESCRIPTION: Shows how to safely change directory using chdir() with proper directory restoration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\nlet save_dir = chdir(newdir)\nif save_dir != \"\"\n   \" ... do some work\n   call chdir(save_dir)\nendif\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Encoding for Arabic Support\nDESCRIPTION: Sets the character encoding to UTF-8, which is required for proper Arabic text handling in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_1\n\nLANGUAGE: VimScript\nCODE:\n```\n:set encoding=utf-8\n```\n\n----------------------------------------\n\nTITLE: Configuring NROFF Space Error Detection\nDESCRIPTION: Enables highlighting of trailing spaces and multiple spaces after punctuation as errors in NROFF files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_91\n\nLANGUAGE: vim\nCODE:\n```\n:let nroff_space_errors = 1\n```\n\n----------------------------------------\n\nTITLE: List Management (C)\nDESCRIPTION: This snippet illustrates changes in list management between Vim and Neovim. It describes how to access list elements, iterate through lists, and manipulate list metadata using the new tv_list_* functions.  The use of TV_LIST_ITER and TV_LIST_ITER_CONST are emphasized for safer iteration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n\"  Old                             New                                  Comment\n  ------------------------------- ------------------------------------------------------\n  list->lv_first                  tv_list_first(list)\n  list->lv_last                   tv_list_last(list)\n  li->li_next                     TV_LIST_ITEM_NEXT(list, li)          To be avoided if possible, must use list which li belongs to.\n  li->li_prev                     TV_LIST_ITEM_PREV(list, li)          To be avoided if possible, must use list which li belongs to.\n                                  Suggestion by @ZyX-l:                Use TV_LIST_ITER or indexing instead of the previous two calls.\n  list->lv_len                    tv_list_len(list)\n  list->lv_lock                   tv_list_locked(list)\n  &li->li_tv                      TV_LIST_ITEM_TV(li)\n  list->lv_refcount++             tv_list_ref(list)\n  val = list->lv_copyID           val = tv_list_copyid(list)\n  list->lv_copyID = val           tv_list_set_copyid(list, val)\n\n  for (li = list->lv_first;       TV_LIST_ITER_CONST(list, li,         Use TV_LIST_ITER(...) if you need to\n  li != NULL && another_cond;     { if (another_cond) {break;} code})  modify list items (note: assigning copyID is also modification and this happens\n  li = li->li_next) code                                               always when recursively traversing a list).\"\n```\n\n----------------------------------------\n\nTITLE: Legacy COBOL Code Highlighting in VimL\nDESCRIPTION: Enables or disables specialized syntax highlighting for legacy COBOL code, based on specific usage scenarios in existing code bases.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_16\n\nLANGUAGE: VimL\nCODE:\n```\n:let cobol_legacy_code = 1\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:unlet cobol_legacy_code\n```\n\n----------------------------------------\n\nTITLE: Modeline Configuration in Vim\nDESCRIPTION: Syntax for setting automatic options when editing a file using modelines, which are special comments in the first and last lines of a file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nvim:{set-arg}: ..    # In the first and last lines of the file (see 'ml' option), {set-arg} is given as an argument to \":set\"\n```\n\n----------------------------------------\n\nTITLE: Transparent Nested Regions in Vim\nDESCRIPTION: Demonstrates using transparent regions for nested structures that inherit highlighting from their container.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:syntax region cWhile matchgroup=cWhile start=/while\\s*(/ end=/)/\n\t\\ contains=cCondNest\n:syntax region cFor matchgroup=cFor start=/for\\s*(/ end=/)/\n\t\\ contains=cCondNest\n:syntax region cCondNest start=/(/ end=/)/ contained transparent\n```\n\n----------------------------------------\n\nTITLE: Styling Table Cell with Borders and Colored Text in HTML\nDESCRIPTION: This HTML snippet defines a table cell with specific border styling and red-colored text content. It uses inline CSS for styling and nested font tags for text formatting.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment Variables in CMake\nDESCRIPTION: Configures test environment options including build directories, program paths, and working directories for test execution. These variables are used across different test targets.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_OPTIONS\n      -D BUILD_DIR=${CMAKE_BINARY_DIR}\n      -D CIRRUS_CI=$ENV{CIRRUS_CI}\n      -D CI_BUILD=${CI_BUILD}\n      -D DEPS_INSTALL_DIR=${DEPS_INSTALL_DIR}\n      -D NVIM_PRG=$<TARGET_FILE:nvim_bin>\n      -D TEST_DIR=${CMAKE_CURRENT_SOURCE_DIR}\n      -D WORKING_DIR=${PROJECT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Word as Wrong in Vim Spell Checker\nDESCRIPTION: Normal mode command to mark the word under the cursor as a wrong (bad) word in the first entry of 'spellfile'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimdoc\nCODE:\n```\nzw\n```\n\n----------------------------------------\n\nTITLE: Backward Searching with Offsets in Vim\nDESCRIPTION: Example of backward searching with character offsets in Vim. The syntax uses question marks instead of forward slashes but offset behavior remains the same.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n?const?e-2\n```\n\n----------------------------------------\n\nTITLE: Using serverlist() in Neovim (Vimscript)\nDESCRIPTION: This example shows how to use the serverlist() function to get a list of server addresses and echo the result.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_224\n\nLANGUAGE: vim\nCODE:\n```\necho serverlist()\n```\n\n----------------------------------------\n\nTITLE: Setting Maple Syntax Highlighting Options in Vim\nDESCRIPTION: Configures package function highlighting for Maple V syntax, allowing users to select specific packages or enable all package functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_81\n\nLANGUAGE: VimScript\nCODE:\n```\n:let mvpkg_all= 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Release Information in Changelog Entries\nDESCRIPTION: Setting to automatically insert release information (package name, version, and release) in each changelog entry by enabling the spec_chglog_release_info variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\nlet spec_chglog_release_info = 1\n```\n\n----------------------------------------\n\nTITLE: Nvim Script Mode Examples\nDESCRIPTION: Examples of using Nvim in script/silent mode for automated text processing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nprintf \"put ='foo'\\n%%print\\n\" | nvim -es\nprintf \"foo\\n\" | nvim -Es +\"%print\"\n```\n\n----------------------------------------\n\nTITLE: NixOS/Nix Development Shell with Development Package\nDESCRIPTION: Enters a nix-shell with the neovim-dev package for development.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\n\"nix-shell '<nixpkgs>' -A neovim-dev\"\n```\n\n----------------------------------------\n\nTITLE: Modifying a Blob - Vim Script\nDESCRIPTION: This snippet shows how to modify specific bytes in a Blob and also how to change sequences of bytes using slicing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_65\n\nLANGUAGE: vim\nCODE:\n```\n:let blob[4] = 0x44\n:let blob[1:3] = 0z445566\n```\n\n----------------------------------------\n\nTITLE: Setting Vim Configuration for Netrw\nDESCRIPTION: Basic Vim configuration needed to enable netrw functionality, including setting nocompatible mode and enabling filetype plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nset nocp\nif version >= 600\n  filetype plugin indent on\nendif\n```\n\n----------------------------------------\n\nTITLE: List Item Access in Vim Script\nDESCRIPTION: Demonstrates accessing the last item of a list using negative indexing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_74\n\nLANGUAGE: vim\nCODE:\n```\n:let item = mylist[-1]\n```\n\n----------------------------------------\n\nTITLE: Finding the next start of a method in C++/Java (Vim)\nDESCRIPTION: This snippet shows how to find the next start of a method when inside a class in C++ or Java using the `]m` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n\"]m\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Vim Runtime Spell Files\nDESCRIPTION: Command to view spell configuration files in Vim's runtime directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_9\n\nLANGUAGE: viml\nCODE:\n```\n:next $VIMRUNTIME/spell/*.vim\n```\n\n----------------------------------------\n\nTITLE: Sending data over UDP socket in Lua\nDESCRIPTION: Sends data over the UDP socket. If the socket is not previously bound, it will be bound to 0.0.0.0 and a random port.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_42\n\nLANGUAGE: lua\nCODE:\n```\nuv.udp_send({udp}, {data}, {host}, {port}, {callback})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lex Syntax Highlighting in Vim\nDESCRIPTION: Sets the number of lines for syntax synchronization in Lex files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_74\n\nLANGUAGE: VimScript\nCODE:\n```\n:syn sync minlines=300\n```\n\n----------------------------------------\n\nTITLE: Blob Identity and Equality - Vim Script\nDESCRIPTION: This code snippet illustrates how to compare Blobs for equality and identity, as well as the implications of variable references in Blob usage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_66\n\nLANGUAGE: vim\nCODE:\n```\n:if blob == 0z001122\n:if blob is otherblob\n```\n\n----------------------------------------\n\nTITLE: Setting Zip Plugin Default Options\nDESCRIPTION: Shows the default values for various zip plugin configuration options including the unzip command, zip command, and extract command. These options control the external programs used by the plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nlet g:zip_unzipcmd= \"unzip\"\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet g:zip_zipcmd= \"zip\"\n```\n\nLANGUAGE: vim\nCODE:\n```\nlet g:zip_extractcmd= g:zip_unzipcmd\n```\n\n----------------------------------------\n\nTITLE: Cmdline Show Event Implementation\nDESCRIPTION: Handles displaying and updating the command-line interface with complex content, cursor positioning, and highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n[\"cmdline_show\", content, pos, firstc, prompt, indent, level, hl_id]\n```\n\n----------------------------------------\n\nTITLE: RPC Request Example\nDESCRIPTION: Example of making a synchronous RPC request and waiting for response\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_211\n\nLANGUAGE: vim\nCODE:\n```\nlet result = rpcrequest(rpc_chan, \"func\", 1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Setting Process Title in Lua with Libuv\nDESCRIPTION: Sets the title of the current process to the specified string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_74\n\nLANGUAGE: lua\nCODE:\n```\nuv.set_process_title({title})\n```\n\n----------------------------------------\n\nTITLE: 64-bit Integer Constants in C\nDESCRIPTION: Example showing proper use of LL and ULL suffixes for creating 64-bit constants\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint64_t my_value = 0x123456789LL;\nuint64_t my_mask = 3ULL << 48;\n```\n\n----------------------------------------\n\nTITLE: Translation Enable Check and Dependencies\nDESCRIPTION: Initial configuration to enable translations and verify required dependencies like Gettext, xgettext, and iconv are present\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\noption(ENABLE_TRANSLATIONS \"Localizations to build\" OFF)\nif(NOT ENABLE_TRANSLATIONS)\n  return()\nendif()\n\nfind_package(Gettext REQUIRED)\nfind_program(XGETTEXT_PRG xgettext)\nfind_program(ICONV_PRG iconv)\nmark_as_advanced(\n  GETTEXT_MSGFMT_EXECUTABLE\n  GETTEXT_MSGMERGE_EXECUTABLE\n  ICONV_PRG\n  XGETTEXT_PRG)\n```\n\n----------------------------------------\n\nTITLE: Disabling Virtual Editing Mode\nDESCRIPTION: Command to turn off virtual editing mode and return to standard cursor movement behavior where the cursor can only be placed on actual text characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:set virtualedit=\n```\n\n----------------------------------------\n\nTITLE: Using a Patch File in Diff Mode\nDESCRIPTION: Demonstrates how to apply and view a patch file in diff mode. This command opens the file to be patched and shows the differences from the patch file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n:edit main.c\n:vertical diffpatch main.c.diff\n```\n\n----------------------------------------\n\nTITLE: Disabling Python Recommended Style in Neovim\nDESCRIPTION: This command sets the `g:python_recommended_style` variable to `0`, disabling the default PEP8-compliant settings (expandtab, shiftwidth=4, softtabstop=4, tabstop=8) for Python files.  This allows users to configure their own preferred indentation and tab settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_29\n\nLANGUAGE: vim\nCODE:\n```\n\tlet g:python_recommended_style = 0\n```\n\n----------------------------------------\n\nTITLE: Enabling Deletion of Combining Characters in UTF-8 Encoded Languages\nDESCRIPTION: This setting allows the removal of composing characters in UTF-8 encoded languages. It's useful for languages that use combining characters extensively.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n'delcombine' ('deco'), boolean, if editing UTF-8 encoded languages,\n     allows one to remove a composing character which gets superimposed\n     on those that preceded them (some languages require this).\n```\n\n----------------------------------------\n\nTITLE: Jumping to the end of the outer code block (Vim)\nDESCRIPTION: This snippet shows how to find the end of the outer block using the `][' command, assuming that the `{` and `}` are in the first column.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n\"][`\"\n```\n\n----------------------------------------\n\nTITLE: Defining a contained keyword with containedin for C comments\nDESCRIPTION: Example of how to add a syntax item to be contained within an existing syntax group without modifying the original definition. This highlights the word 'HELP' within C comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_161\n\nLANGUAGE: vim\nCODE:\n```\n:syn keyword myword HELP containedin=cComment contained\n```\n\n----------------------------------------\n\nTITLE: Configuring OCaml Syntax Options\nDESCRIPTION: Sets options for OCaml syntax highlighting including revised syntax and end error highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_93\n\nLANGUAGE: vim\nCODE:\n```\n:let ocaml_revised = 1\n```\n\nLANGUAGE: vim\nCODE:\n```\n:let ocaml_noend_error = 1\n```\n\n----------------------------------------\n\nTITLE: Redrawing Components in Neovim\nDESCRIPTION: The 'nvim__redraw' function instructs Neovim to update various components. Parameters allow targeting specific windows, buffers, cursors, and more.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_34\n\nLANGUAGE: Lua\nCODE:\n```\nnvim__redraw\\(\\{opts\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Help Tag Language Example - Vim\nDESCRIPTION: Examples showing how to access help documentation in specific languages using two-letter language codes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:he user-manual@it\n:he user-manual@en\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Indentation for a Specific File Type\nDESCRIPTION: A method to disable automatic indentation for a specific file type by creating a file with a special flag\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:let b:did_indent = 1\n```\n\n----------------------------------------\n\nTITLE: Message Show Event Structure\nDESCRIPTION: Manages displaying various types of messages with detailed attributes including kind, content, replacement behavior, and history tracking\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n[\"msg_show\", kind, content, replace_last, history]\n```\n\n----------------------------------------\n\nTITLE: Path Examples for SCP Protocol in Vim\nDESCRIPTION: Examples showing how to use SCP protocol with relative and absolute paths in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nvim scp://user@host/somefile\nvim scp://user@host/subdir1/subdir2/somefile\n```\n\n----------------------------------------\n\nTITLE: Enabling Ruler in Vim\nDESCRIPTION: Command to enable the ruler option which displays cursor position in the bottom right corner of Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set ruler\n```\n\n----------------------------------------\n\nTITLE: Getting Total System Memory in Lua with Libuv\nDESCRIPTION: Returns the total amount of system memory in bytes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_75\n\nLANGUAGE: lua\nCODE:\n```\nuv.get_total_memory()\n```\n\n----------------------------------------\n\nTITLE: Setting Vim Window Size in Characters\nDESCRIPTION: These commands set the size of the Vim window to 50 lines and 80 columns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:set lines=50\n:set columns=80\n```\n\n----------------------------------------\n\nTITLE: Setting HTML/OS Syntax\nDESCRIPTION: This snippet shows how to enable HTML/OS syntax highlighting for a file.  The syntax is set to `htmlos` using the `:set syntax=htmlos` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\n  :set syntax=htmlos\n```\n\n----------------------------------------\n\nTITLE: Neovim Help File Header\nDESCRIPTION: Standard Vim help file header defining the document title and basic structure\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_theme.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\n*dev_theme.txt*          Nvim\n\n\n                            NVIM REFERENCE MANUAL\n\n\nNvim colorscheme guidelines                                   *dev-theme*\n```\n\n----------------------------------------\n\nTITLE: Netrw URL-based File Editing\nDESCRIPTION: Example showing how to edit a remote file using FTP protocol with URL notation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:e ftp://[user@]machine/path\n```\n\n----------------------------------------\n\nTITLE: macOS Homebrew Wget Certificate Fix\nDESCRIPTION: Installs curl-ca-bundle and configures wget to use it to resolve certificate errors on older macOS versions.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_34\n\nLANGUAGE: Shell\nCODE:\n```\n\"brew install curl-ca-bundle\\necho CA_CERTIFICATE=$(brew --prefix curl-ca-bundle)/share/ca-bundle.crt >> ~/.wgetrc\"\n```\n\n----------------------------------------\n\nTITLE: Disabling undo for current buffer in Vim\nDESCRIPTION: Code to disable undo functionality completely for the current buffer by setting undolevels to -1 locally, which helps when running out of memory for a single change.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_76\n\nLANGUAGE: viml\nCODE:\n```\nsetlocal ul=-1\n```\n\n----------------------------------------\n\nTITLE: Substitution within C++ Comments Using Vim Script\nDESCRIPTION: Performs text substitution only within C++ style comments (lines starting with '//') using the ':global' command where the pattern includes slashes. Modifies text within specified patterns. Inputs include a search pattern and substitution text, outputs the file with applied changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_7\n\nLANGUAGE: Vim Script\nCODE:\n```\n\n  :g+//+s/foobar/barfoo/g\n```\n\n----------------------------------------\n\nTITLE: Setting Hare Documentation Filetype Detection\nDESCRIPTION: Configuration to enable automatic detection of Hare module README files as haredoc filetype.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nlet g:filetype_haredoc = 1\n```\n\n----------------------------------------\n\nTITLE: Tag Navigation Commands (Vim)\nDESCRIPTION: Commands for navigating and managing tags in Neovim, including jumping to tags and managing preview windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:tl[ast][!]     jump to last matching tag\n:pt[ag] {tag}   open a preview window to show tag {tag}\nCTRL-W }        like CTRL-] but show tag in preview window\n:pts[elect]     like \":tselect\" but show tag in preview window\n:ptj[ump]       like \":tjump\" but show tag in preview window\n:pc[lose]       close tag preview window\nCTRL-W z        close tag preview window\n```\n\n----------------------------------------\n\nTITLE: Custom Netrw Syntax Highlighting Example in VimL\nDESCRIPTION: Example showing how to link a Netrw file group to Vim's Visual highlight group in your .vimrc file. This demonstrates how to customize the appearance of compressed files in the Netrw browser.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_37\n\nLANGUAGE: viml\nCODE:\n```\nhi link netrwCompress Visual\n```\n\n----------------------------------------\n\nTITLE: Configuring Make Syntax Highlighting Options in Vim\nDESCRIPTION: Sets options for Make syntax highlighting, including disabling command highlighting, comment highlighting, and specifying the Make flavor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_80\n\nLANGUAGE: VimScript\nCODE:\n```\n:let make_no_commands = 1\n\n:let make_no_comments = 1\n\n:let g:make_flavor = 'bsd'  \" or\n:let g:make_flavor = 'gnu'  \" or\n:let g:make_flavor = 'microsoft'\n```\n\n----------------------------------------\n\nTITLE: Finding a File in Vim's Path\nDESCRIPTION: Demonstrates how to use the findfile() function to search for a file named 'tags.vim' in the current directory and upwards.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_70\n\nLANGUAGE: vim\nCODE:\n```\necho findfile(\"tags.vim\", \".;\")\n```\n\n----------------------------------------\n\nTITLE: Defining Vim Here-Document Syntax Region\nDESCRIPTION: Example showing how to define a syntax region for here-documents using external pattern matching\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_168\n\nLANGUAGE: vim\nCODE:\n```\n:syn region hereDoc start=\"<<\\z(\\I\\i*\\)\" end=\"^\\z1$\"\n```\n\n----------------------------------------\n\nTITLE: Return Argument Dictionary in Neovim\nDESCRIPTION: The function 'nvim__id_dict' returns a dictionary argument, serving testing purposes and shouldn't be relied upon in plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_32\n\nLANGUAGE: Lua\nCODE:\n```\nnvim__id_dict\\(\\{dct\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Popupmenu Show Event Specification\nDESCRIPTION: Defines the event for displaying a completion popupmenu with details about items, selection, and positioning\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n[\"popupmenu_show\", items, selected, row, col, grid]\n```\n\n----------------------------------------\n\nTITLE: Checking for execinfo backtrace support in C\nDESCRIPTION: Tests if the system supports backtrace functionality from the execinfo.h header by attempting to compile a simple program that calls the backtrace function.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <execinfo.h>\nint main(void)\n{\n  void *trace[1];\n  backtrace(trace, 1);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Catching in Vim\nDESCRIPTION: Demonstrates basic error catching for a write command, though this simple form is not recommended as it may catch unintended errors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_136\n\nLANGUAGE: vim\nCODE:\n```\n:try\n:  write\n:catch\n:endtry\n```\n\n----------------------------------------\n\nTITLE: Cursor Position Matching\nDESCRIPTION: Focuses on matching patterns relative to the cursor position in Vim. Patterns like '\\%#' match exactly under the cursor, highlighting the limitations when the cursor moves.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_19\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\%#\"\n```\n\n----------------------------------------\n\nTITLE: Loading a ShaDa file in Neovim\nDESCRIPTION: This snippet demonstrates how to load a specific ShaDa file using the `:rshada!` command within the Neovim configuration file. The `!` forces overwriting existing data with the contents of the specified ShaDa file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_15\n\nLANGUAGE: Vim Script\nCODE:\n```\n:rshada! ~/.my.shada\n```\n\n----------------------------------------\n\nTITLE: Setting Mathematica File Type in Vim\nDESCRIPTION: Configures Vim to recognize .m files as Mathematica files instead of Matlab files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_83\n\nLANGUAGE: VimScript\nCODE:\n```\nlet filetype_m = \"mma\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Prepend Mode for Changelog Items in Vim\nDESCRIPTION: Setting to make new changelog items appear before existing ones rather than after them by enabling the spec_chglog_prepend variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\nlet spec_chglog_prepend = 1\n```\n\n----------------------------------------\n\nTITLE: List Concatenation in Vimscript\nDESCRIPTION: This code shows how to concatenate two lists using the `+` operator in Vimscript. The result is a new list containing all elements from both original lists. The order of concatenation matters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\t:let longlist = mylist + [5, 6]\n\t:let longlist = [5, 6] + mylist\n```\n\n----------------------------------------\n\nTITLE: Getting File Size with line2byte in Vim\nDESCRIPTION: Example of using line2byte() to get the byte count of a file. By querying one line past the end of the file, this returns the buffer size plus one.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_154\n\nLANGUAGE: vim\nCODE:\n```\necho line2byte(line(\"$\") + 1)\n```\n\n----------------------------------------\n\nTITLE: Defining GNU C Library Sources for Gettext in CMake\nDESCRIPTION: Defines a comprehensive list of GNU C Library source files needed by Gettext tools. These provide platform-independent implementations of various system functions and utilities required by Gettext.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLIBC_SOURCE\n  uniname/uniname.c javaexec.c unsetenv.c classpath.c setenv.c xsetenv.c\n  sh-quote.c execute.c javaversion.c csharpcomp.c csharpexec.c javacomp.c\n  gettimeofday.c getdtablesize.c fcntl.c dup-safer-flag.c cloexec.c\n  fd-safer-flag.c fd-safer.c pipe2.c pipe2-safer.c spawn-pipe.c xmemdup0.c\n  secure_getenv.c tmpdir.c tempname.c mkdtemp.c fnmatch.c clean-temp.c\n  wait-process.c waitpid.c getdelim.c getline.c sigprocmask.c sigaction.c\n  addext.c argmatch.c backupfile.c basename.c c-strcasecmp.c c-strncasecmp.c\n  c-strstr.c closeout.c concat-filename.c error-progname.c error.c exitfail.c\n  fstrcmp.c full-write.c fwriteerror.c getopt.c getopt1.c hash.c libxml/buf.c\n  localcharset.c malloca.c mbchar.c mbslen.c mbsstr.c mbswidth.c obstack.c\n  progname.c printf-args.c printf-parse.c propername.c quotearg.c rawmemchr.c\n  safe-read.c safe-write.c stpcpy.c stpncpy.c strchrnul.c striconv.c\n  striconveh.c striconveha.c strnlen1.c trim.c gcd.c gl_linkedhash_list.c\n  uniconv/u8-conv-from-enc.c unictype/ctype_space.c unilbrk/lbrktables.c\n  unilbrk/u8-possible-linebreaks.c unilbrk/u8-width-linebreaks.c\n  unilbrk/ulc-common.c unilbrk/ulc-width-linebreaks.c unistr/u16-mbtouc-aux.c\n  unistr/u16-mbtouc.c unistr/u8-check.c unistr/u8-mblen.c\n  unistr/u8-mbtouc-aux.c unistr/u8-mbtouc-unsafe-aux.c\n  unistr/u8-mbtouc-unsafe.c unistr/u8-mbtouc.c unistr/u8-mbtoucr.c\n  unistr/u8-prev.c unistr/u8-uctomb-aux.c unistr/u8-uctomb.c uniwidth/width.c\n  vasnprintf.c vasprintf.c wcwidth.c xasprintf.c xconcat-filename.c xerror.c\n  xmalloc.c xstrdup.c xstriconv.c xstriconveh.c xvasprintf.c\n  libxml/DOCBparser.c libxml/HTMLparser.c libxml/HTMLtree.c libxml/SAX.c\n  libxml/SAX2.c libxml/c14n.c libxml/catalog.c libxml/chvalid.c\n  libxml/debugXML.c libxml/dict.c libxml/encoding.c libxml/entities.c\n  libxml/error.c libxml/globals.c libxml/hash.c libxml/legacy.c libxml/list.c\n  libxml/nanoftp.c libxml/nanohttp.c libxml/parser.c libxml/parserInternals.c\n  libxml/pattern.c libxml/relaxng.c libxml/schematron.c libxml/threads.c\n  libxml/tree.c libxml/trionan.c libxml/uri.c libxml/valid.c libxml/xinclude.c\n  libxml/xlink.c libxml/xmlIO.c libxml/xmlmemory.c libxml/xmlmodule.c\n  libxml/xmlreader.c libxml/xmlregexp.c libxml/xmlsave.c libxml/xmlschemas.c\n  libxml/xmlschemastypes.c libxml/xmlstring.c libxml/xmlunicode.c\n  libxml/xmlwriter.c libxml/xpath.c libxml/xpointer.c fatal-signal.c\n  copy-file.c read-file.c ftello.c utime.c gettime.c utimens.c)\nPREFIX_LIST_ITEMS(GLIBC_SOURCE \"gettext-tools/gnulib-lib/\")\n\nfile(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/gnulib-lib/configmake.h \"#define PKGDATADIR \\\"gettext\\\"\")\n```\n\n----------------------------------------\n\nTITLE: Using exp() Function for Exponential Calculations\nDESCRIPTION: Examples demonstrating the use of exp() function to calculate exponential values in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_61\n\nLANGUAGE: vim\nCODE:\n```\necho exp(2)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho exp(-1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Regex Engine and Pattern Search\nDESCRIPTION: Setting Vim's regex engine and testing a pattern search for trailing whitespace. The regex engine is set to either 0 or 2, and the search pattern looks for whitespace before line endings.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set re=0 or 2\n```\n\nLANGUAGE: vim\nCODE:\n```\n/\\s\\+\\%#\\@<!$/\n```\n\n----------------------------------------\n\nTITLE: Granular Mapping Configuration Check\nDESCRIPTION: This snippet checks for the existence of ':tnoremap' before applying a terminal mode escape sequence mapping, ensuring compatibility and preventing errors if the command is not available.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/nvim.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nif exists(':tnoremap')\n    tnoremap <Esc> <C-\\><C-n>\nendif\n```\n\n----------------------------------------\n\nTITLE: Removing Runtime Directory in Bash\nDESCRIPTION: Command to remove the previously installed Neovim runtime directory to fix helptags generation issues.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrm -r /usr/local/share/nvim\n```\n\n----------------------------------------\n\nTITLE: Detaching Threads in Lua with Libuv\nDESCRIPTION: Detaches a thread, allowing it to automatically release resources upon termination without needing to call uv.thread_join.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_66\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_detach({thread})\n```\n\n----------------------------------------\n\nTITLE: Syntax Folding for Fortran Files in Vim\nDESCRIPTION: Activates syntax-driven folding in Fortran files by setting 'fortran_fold', creating fold regions for program units and statements to organize code clearly.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_40\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_fold=1\n```\n\n----------------------------------------\n\nTITLE: Disabling the Zip Plugin via Configuration Variables\nDESCRIPTION: Shows how to prevent the zip plugin from loading by setting the g:loaded_zipPlugin and g:loaded_zip variables to 1 in the user's .vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nlet g:loaded_zipPlugin= 1\nlet g:loaded_zip      = 1\n```\n\n----------------------------------------\n\nTITLE: Adjusting Window Width in Vim\nDESCRIPTION: This example demonstrates how to use winwidth() to get the width of the current window and conditionally resize it. It's useful for ensuring windows have a minimum width for readability or layout purposes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_291\n\nLANGUAGE: vim\nCODE:\n```\necho \"Current window has \" .. winwidth(0) .. \" columns.\"\nif winwidth(0) <= 50\n  50 wincmd |\nendif\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Target\nDESCRIPTION: Sets up the benchmark target for performance testing with necessary dependencies and test environment configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(benchmark\n  COMMAND ${CMAKE_COMMAND}\n    -D TEST_TYPE=benchmark\n    ${TEST_OPTIONS}\n    -P ${PROJECT_SOURCE_DIR}/cmake/RunTests.cmake\n  DEPENDS tty-test\n  USES_TERMINAL)\nadd_dependencies(benchmark lua_dev_deps nvim)\n```\n\n----------------------------------------\n\nTITLE: Combining perl and perldo for Text Replacement\nDESCRIPTION: A more complex example showing how to use :perl to define a function and :perldo to apply it to a range of lines, demonstrating string replacement.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_perl.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:perl << EOF\nsub perl_vim_string_replace\n{\n    my $line = shift;\n    my $needle = $vim->eval('@a');\n    my $replacement = $vim->eval('@b');\n    $line =~ s/$needle/$replacement/g;\n    return $line;\n}\nEOF\n:let @a='somevalue'\n:let @b='newvalue'\n:'<,'>perldo $_ = perl_vim_string_replace($_)\n```\n\n----------------------------------------\n\nTITLE: Activating Matchit Plugin: Vim Script\nDESCRIPTION: To utilize the Matchit plugin, users can either include a 'packadd' command in their vimrc file or execute it directly in Vim. This activates the plugin, allowing for enhanced matching capabilities, especially useful when working with languages that have nested structures.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\npackadd! matchit\n```\n\nLANGUAGE: vim\nCODE:\n```\npackadd matchit\n```\n\n----------------------------------------\n\nTITLE: Void Linux Build Prerequisites\nDESCRIPTION: Installs the necessary packages on Void Linux systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\n\"xbps-install base-devel cmake curl git\"\n```\n\n----------------------------------------\n\nTITLE: PHP Class Declaration with @var Tag\nDESCRIPTION: Example of using the @var tag in PHP to declare a variable as a specific class type, which helps the Omni completion provide class-specific suggestions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/* @var $myVar myClass */\n$myVar->\n```\n\n----------------------------------------\n\nTITLE: Treesitter Highlight Query Example (Literal Expressions)\nDESCRIPTION: This code snippet shows an example of a treesitter query that matches literal expressions. It assigns the `@keyword.conditional` capture to the literal strings \"if\" and \"else\".\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_16\n\nLANGUAGE: query\nCODE:\n```\n[\\n  \\\"if\\\"\\n  \\\"else\\\"\\n] @keyword.conditional\n```\n\n----------------------------------------\n\nTITLE: Using Version-Specific Modelines\nDESCRIPTION: Examples of modelines that are only applicable to specific versions of Vim, using version conditionals in the modeline syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\n/* vim700: set foldmethod=marker */\n```\n\nLANGUAGE: viml\nCODE:\n```\n/* vim>702: set cole=2: */\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Byte Order Mark (BOM) Detection\nDESCRIPTION: Identifies different Unicode encoding formats through byte sequence recognition. Used for automatic file encoding detection in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\\tEF BB BF     UTF-8\\n\\tFE FF        UTF-16 big endian\\n\\tFF FE        UTF-16 little endian\\n\\t00 00 FE FF  UTF-32 big endian\\n\\tFF FE 00 00  UTF-32 little endian\n```\n\n----------------------------------------\n\nTITLE: Terminal Key Backspace Fix\nDESCRIPTION: Commands to fix Ctrl-H mapping issues by adjusting terminal's key_backspace setting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninfocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\ntic $TERM.ti\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Language in Vim\nDESCRIPTION: Example of configuring Vim's menu language, including how to reload menus with a new language setting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_38\n\nLANGUAGE: vim\nCODE:\n```\nsource $VIMRUNTIME/delmenu.vim\nset langmenu=de_DE.ISO_8859-1\nsource $VIMRUNTIME/menu.vim\n```\n\n----------------------------------------\n\nTITLE: Preserve Buffer to Swap File Command\nDESCRIPTION: Command to write all text from current buffer into its swap file for recovery purposes\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:pre[serve]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shell Type to Bash\nDESCRIPTION: Configuring Vim to use Bash syntax highlighting as the default for shell scripts when the shell type cannot be determined automatically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_116\n\nLANGUAGE: vim\nCODE:\n```\nlet g:is_bash      = 1\n```\n\n----------------------------------------\n\nTITLE: Specific Swap File Recovery\nDESCRIPTION: Command to recover using a specific swap file when its location is known.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nvim -r .help.txt.swo\n```\n\n----------------------------------------\n\nTITLE: Getting Backend File Descriptor in Lua\nDESCRIPTION: This function gets the backend file descriptor for kqueue, epoll, or event ports. It can be used with `uv.run(\"nowait\")` to poll in one thread and run the loop's callbacks in another. Embedding a kqueue fd in another kqueue pollset might not work on all platforms.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.backend_fd()                                                *uv.backend_fd()*\\n\\n                Get backend file descriptor. Only kqueue, epoll, and event\\n                ports are supported.\\n\\n                This can be used in conjunction with `uv.run(\\\"nowait\\\")` to\\n                poll in one thread and run the event loop's callbacks in\\n                another\\n\\n                Returns: `integer` or `nil`\\n\\n                Note: Embedding a kqueue fd in another kqueue pollset doesn't\\n                work on all platforms. It's not an error to add the fd but it\\n                never generates events.\"\n```\n\n----------------------------------------\n\nTITLE: Remapping gx to use netrw in Vim\nDESCRIPTION: A Vim command to remap the gx key to continue using netrw for opening URLs instead of the new default vim.ui.open(). This is provided as a fallback for users who want to maintain the previous behavior with the now-deprecated netrw functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:call netrw#BrowseX(expand(exists(\"g:netrw_gx\") ? g:netrw_gx : '<cfile>'), netrw#CheckIfRemote())<CR>\n```\n\n----------------------------------------\n\nTITLE: Right and Left Aligning Text in Vim - Vim\nDESCRIPTION: Uses the ':right' and ':left' commands to align text either to the right or to the left respectively. These commands allow for precise control over text placement on the screen.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:1,5right 37\n```\n\nLANGUAGE: vim\nCODE:\n```\n:1left 5\n```\n\nLANGUAGE: vim\nCODE:\n```\n:2,5left\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Assertions in RelWithDebInfo Build\nDESCRIPTION: Ensures assertions are enabled in RelWithDebInfo build type by removing NDEBUG preprocessor definitions from compiler flags.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# We _want_ assertions in RelWithDebInfo build-type.\nif(CMAKE_C_FLAGS_RELWITHDEBINFO MATCHES DNDEBUG)\n  string(REPLACE \"-DNDEBUG\" \"\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n  string(REPLACE \"/DNDEBUG\" \"\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n  string(REPLACE \"  \" \" \" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\") # Remove duplicate whitespace\nendif()\n```\n\n----------------------------------------\n\nTITLE: C Highlighting Options in VimL\nDESCRIPTION: Enables or disables specific C syntax highlighting features. Highlights C++ style with filetype setting, and uses various variables to control specific highlighting details and folding of comments and blocks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_10\n\nLANGUAGE: VimL\nCODE:\n```\n:let c_comment_strings = 1\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:let c_no_bracket_error = 0\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:unlet c_comment_strings\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:set filetype=cpp\n```\n\n----------------------------------------\n\nTITLE: Updating Diff Highlighting\nDESCRIPTION: Shows how to manually update the diff highlighting when it becomes out of sync with the actual differences.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n:diffupdate\n```\n\n----------------------------------------\n\nTITLE: Setting YAML Schema for Syntax Highlighting in Vim\nDESCRIPTION: Configures the YAML schema option to determine how certain values will be highlighted in YAML files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_155\n\nLANGUAGE: vim\nCODE:\n```\nlet g:yaml_schema = 'core'\n```\n\n----------------------------------------\n\nTITLE: Setup and Use of Logging in Neovim\nDESCRIPTION: This snippet outlines commands for setting up and using logging within Neovim's development. Key functionalities include building with log debugging and configuring to log stack traces. Dependencies include Linux for `LOG_CALLSTACK()` and the need for specific build flags like `-no-pie`.\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf build/\nmake CMAKE_EXTRA_FLAGS=\"-DLOG_DEBUG\"\n\nrm -rf build/\nmake CMAKE_EXTRA_FLAGS=\"-DLOG_DEBUG -DCMAKE_C_FLAGS=-no-pie\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Region Spell File\nDESCRIPTION: Example of combining multiple regional word lists into a single spell file for English variants.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:mkspell ~/.config/nvim/spell/en /tmp/en_US /tmp/en_CA /tmp/en_AU\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Process ID with uv.os_getppid()\nDESCRIPTION: Returns the process ID of the parent process as a number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_99\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_getppid()\n```\n\n----------------------------------------\n\nTITLE: Using strridx() in Vim Script\nDESCRIPTION: Shows how to use strridx() function to find the last occurrence of a substring in a string, with an optional starting position.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_262\n\nLANGUAGE: vim\nCODE:\n```\nlet lastcomma = strridx(line, \",\")\nlet comma2 = strridx(line, \",\", lastcomma - 1)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho strridx(\"an angry armadillo\", \"an\")\n```\n\n----------------------------------------\n\nTITLE: Mappings for Tag Highlighting in Neovim\nDESCRIPTION: Function key mappings to generate and apply tag highlighting. F11 generates a tags.vim file from the tags file and F12 applies the highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_204\n\nLANGUAGE: vim\nCODE:\n```\n:map <F11>  :sp tags<CR>:%s/^\\([^\\t:]*:\\)\\=\\([^\\t]*\\).*/syntax keyword Tag \\2/<CR>:wq! tags.vim<CR>/^<CR><F12>\n:map <F12>  :so tags.vim<CR>\n```\n\n----------------------------------------\n\nTITLE: Return Argument Object in Neovim\nDESCRIPTION: Returns the provided object using 'nvim__id', a function mainly for testing purposes. Its presence in plugins shouldn't be relied upon.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_30\n\nLANGUAGE: Lua\nCODE:\n```\nnvim__id\\(\\{obj\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options for Neovim\nDESCRIPTION: Configures build options including Link Time Optimization (LTO), internationalization support, and WebAssembly support through wasmtime.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (MINGW)\n  # Disable LTO by default as it may not compile\n  # See https://github.com/Alexpux/MINGW-packages/issues/3516\n  # and https://github.com/neovim/neovim/pull/8654#issuecomment-402316672\n  option(ENABLE_LTO \"enable link time optimization\" OFF)\nelse()\n  option(ENABLE_LTO \"enable link time optimization\" ON)\nendif()\noption(ENABLE_LIBINTL \"enable libintl\" ON)\noption(ENABLE_WASMTIME \"enable wasmtime\" OFF)\n\nmessage(STATUS \"CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\")\n\nset_default_buildtype(Debug)\nget_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(NOT isMultiConfig)\n  # Unlike build dependencies in cmake.deps, we want dev dependencies such as\n  # Uncrustify to always be built with Release.\n  list(APPEND DEPS_CMAKE_ARGS -D CMAKE_BUILD_TYPE=Release)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Empty Filename Recovery\nDESCRIPTION: Command to recover a file that was being edited without a name.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_11.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nvim -r \"\"\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with Release optimization\nDESCRIPTION: Command to build Neovim with Release optimization level for maximum performance, commonly used by package maintainers.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake CMAKE_BUILD_TYPE=Release\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim via Snap - Stable\nDESCRIPTION: Command to install the stable version of Neovim using Snap package manager.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap install nvim --classic\n```\n\n----------------------------------------\n\nTITLE: Configuring Pascal Syntax Options\nDESCRIPTION: Sets various Pascal syntax highlighting options including file detection and compiler-specific features.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_96\n\nLANGUAGE: vim\nCODE:\n```\n:let filetype_p  = \"pascal\"\n:let filetype_pp = \"pascal\"\n```\n\nLANGUAGE: vim\nCODE:\n```\n:let pascal_traditional=1\n```\n\nLANGUAGE: vim\nCODE:\n```\n:let pascal_delphi=1\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregate Lua Linting Target in CMake\nDESCRIPTION: Creates a composite target that depends on both luacheck and stylua linting targets, allowing all Lua linting to be run with a single command.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(lintlua)\nadd_dependencies(lintlua lintlua-luacheck lintlua-stylua)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Error Above Current Line\nDESCRIPTION: Command for going to the error above the current line in the current buffer from the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:[count]cabo[ve]\n```\n\n----------------------------------------\n\nTITLE: Dependency URLs and SHA256 Checksums Configuration\nDESCRIPTION: Configuration block defining source URLs and SHA256 verification checksums for Neovim project dependencies. Includes core dependencies like libuv and LuaJIT, as well as tree-sitter parsers for various languages.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/deps.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLIBUV_URL https://github.com/libuv/libuv/archive/v1.50.0.tar.gz\nLIBUV_SHA256 b1ec56444ee3f1e10c8bd3eed16ba47016ed0b94fe42137435aaf2e0bd574579\n\nLUAJIT_URL https://github.com/luajit/luajit/archive/51d4c26ec7805d77bfc3470fdf99b73c4ef2faec.tar.gz\nLUAJIT_SHA256 7fd632850d28430b7e999bec9255d23ba7c6ecb3ecf1cafb481b8b8ecdb60612\n\nLUA_URL https://www.lua.org/ftp/lua-5.1.5.tar.gz\nLUA_SHA256 2640fc56a795f29d28ef15e13c34a47e223960b0240e8cb0a82d9b0738695333\n\nUNIBILIUM_URL https://github.com/neovim/unibilium/archive/v2.1.2.tar.gz\nUNIBILIUM_SHA256 370ecb07fbbc20d91d1b350c55f1c806b06bf86797e164081ccc977fc9b3af7a\n\nLUV_URL https://github.com/luvit/luv/archive/1.50.0-1.tar.gz\nLUV_SHA256 bb4f0570571e40c1d2a7644f6f9c1309a6ccdb19bf4d397e8d7bfd0c6b88e613\n\nLPEG_URL https://github.com/neovim/deps/raw/d495ee6f79e7962a53ad79670cb92488abe0b9b4/opt/lpeg-1.1.0.tar.gz\nLPEG_SHA256 4b155d67d2246c1ffa7ad7bc466c1ea899bbc40fef0257cc9c03cecbaed4352a\n\nLUA_COMPAT53_URL https://github.com/lunarmodules/lua-compat-5.3/archive/v0.13.tar.gz\nLUA_COMPAT53_SHA256 f5dc30e7b1fda856ee4d392be457642c1f0c259264a9b9bfbcb680302ce88fc2\n\nXXD_URL https://github.com/neovim/deps/raw/21c5e8bdda33521a6ed497b315e03265a2785cbc/opt/xxd.exe\nXXD_SHA256 7a581e3882d28161cc52850f9a11d634b3eaf2c029276f093c1ed4c90e45a10c\n\nWIN32YANK_X86_64_URL https://github.com/equalsraf/win32yank/releases/download/v0.1.1/win32yank-x64.zip\nWIN32YANK_X86_64_SHA256 247c9a05b94387a884b49d3db13f806b1677dfc38020f955f719be6902260cd6\n\nGETTEXT_URL https://github.com/neovim/deps/raw/b9bf36eb31f27e8136d907da38fa23518927737e/opt/gettext-0.20.1.tar.gz\nGETTEXT_SHA256 66415634c6e8c3fa8b71362879ec7575e27da43da562c798a8a2f223e6e47f5c\n\nLIBICONV_URL https://github.com/neovim/deps/raw/b9bf36eb31f27e8136d907da38fa23518927737e/opt/libiconv-1.17.tar.gz\nLIBICONV_SHA256 8f74213b56238c85a50a5329f77e06198771e70dd9a739779f4c02f65d971313\n\nUTF8PROC_URL https://github.com/JuliaStrings/utf8proc/archive/v2.10.0.tar.gz\nUTF8PROC_SHA256 6f4f1b639daa6dca9f80bc5db1233e9cbaa31a67790887106160b33ef743f136\n\nTREESITTER_C_URL https://github.com/tree-sitter/tree-sitter-c/archive/v0.23.4.tar.gz\nTREESITTER_C_SHA256 b66c5043e26d84e5f17a059af71b157bcf202221069ed220aa1696d7d1d28a7a\nTREESITTER_LUA_URL https://github.com/tree-sitter-grammars/tree-sitter-lua/archive/v0.3.0.tar.gz\nTREESITTER_LUA_SHA256 a34cc70abfd8d2d4b0fabf01403ea05f848e1a4bc37d8a4bfea7164657b35d31\nTREESITTER_VIM_URL https://github.com/tree-sitter-grammars/tree-sitter-vim/archive/v0.5.0.tar.gz\nTREESITTER_VIM_SHA256 90019d12d2da0751c027124f27f5335babf069a050457adaed53693b5e9cf10a\nTREESITTER_VIMDOC_URL https://github.com/neovim/tree-sitter-vimdoc/archive/v3.0.1.tar.gz\nTREESITTER_VIMDOC_SHA256 76b65e5bee9ff78eb21256619b1995aac4d80f252c19e1c710a4839481ded09e\nTREESITTER_QUERY_URL https://github.com/tree-sitter-grammars/tree-sitter-query/archive/v0.5.1.tar.gz\nTREESITTER_QUERY_SHA256 fe8c712880a529d454347cd4c58336ac2db22243bae5055bdb5844fb3ea56192\nTREESITTER_MARKDOWN_URL https://github.com/tree-sitter-grammars/tree-sitter-markdown/archive/v0.4.1.tar.gz\nTREESITTER_MARKDOWN_SHA256 e0fdb2dca1eb3063940122e1475c9c2b069062a638c95939e374c5427eddee9f\nTREESITTER_URL https://github.com/tree-sitter/tree-sitter/archive/v0.25.3.tar.gz\nTREESITTER_SHA256 862fac52653bc7bc9d2cd0630483e6bdf3d02bcd23da956ca32663c4798a93e3\n\nWASMTIME_URL https://github.com/bytecodealliance/wasmtime/archive/v29.0.1.tar.gz\nWASMTIME_SHA256 b94b6c6fd6aebaf05d4c69c1b12b5dc217b0d42c1a95f435b33af63dddfa5304\n\nUNCRUSTIFY_URL https://github.com/uncrustify/uncrustify/archive/uncrustify-0.80.1.tar.gz\nUNCRUSTIFY_SHA256 0e2616ec2f78e12816388c513f7060072ff7942b42f1175eb28b24cb75aaec48\nLUA_DEV_DEPS_URL https://github.com/neovim/deps/raw/06ef2b58b0876f8de1a3f5a710473dcd7afff251/opt/lua-dev-deps.tar.gz\nLUA_DEV_DEPS_SHA256 49f8399e453103064a23c65534f266f3067cda716b6502f016bfafeed5799354\n```\n\n----------------------------------------\n\nTITLE: Netrw Version History Changelog\nDESCRIPTION: Version history documenting changes to netrw plugin from v172 down to v157, including bug fixes, improvements, and feature additions. Contains specific changes by contributors and core maintainers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/README.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\tv172:\tSep 02, 2021\t* (Bram Moolenaar) Changed \"l:go\" to \"go\"\n\t\t\t\t* (Bram Moolenaar) no need for \"b\" in\n\t\t\t\t  netrw-safe guioptions\n\t\tNov 15, 2021\t* removed netrw_localrm and netrw_localrmdir\n\t\t\t\t  references\n\t\tAug 18, 2022\t* (Miguel Barro) improving compatibility with\n\t\t\t\t  powershell\n\tv171:\tOct 09, 2020\t* included code in s:NetrwOptionsSafe()\n\t\t\t\t  to allow |'bh'| to be set to delete when\n\t\t\t\t  rather than hide when g:netrw_fastbrowse\n\t\t\t\t  was zero.\n\t\t\t\t* Installed |g:netrw_clipboard| setting\n\t\t\t\t* Installed option bypass for |'guioptions'|\n\t\t\t\t  a/A settings\n\t\t\t\t* Changed popup_beval() to |popup_atcursor()|\n\t\t\t\t  in netrw#ErrorMsg (lacygoill). Apparently\n\t\t\t\t  popup_beval doesn't reliably close the\n\t\t\t\t  popup when the mouse is moved.\n\t\t\t\t* VimEnter() now using win_execute to examine\n\t\t\t\t  buffers for an attempt to open a directory.\n\t\t\t\t  Avoids issues with popups/terminal from\n\t\t\t\t  command line. (lacygoill)\n\t\tJun 28, 2021\t* (zeertzjq) provided a patch for use of\n\t\t\t\t  xmap,xno instead of vmap,vno in\n\t\t\t\t  netrwPlugin.vim. Avoids entanglement with\n\t\t\t\t  select mode.\n\t\tJul 14, 2021\t* Fixed problem addressed by tst976; opening\n\t\t\t\t  a file using tree mode, going up a\n\t\t\t\t  directory, and opening a file there was\n\t\t\t\t  opening the file in the wrong directory.\n\t\tJul 28, 2021\t* (Ingo Karkat) provided a patch fixing an\n\t\t\t\t  E488 error with netrwPlugin.vim\n\t\t\t\t  (occurred for vim versions < 8.02)\n\tv170:\tMar 11, 2020\t* (reported by Reiner Herrmann) netrw+tree\n\t\t\t\t  would not hide with the ^\\..* pattern\n\t\t\t\t  correctly.\n```\n\n----------------------------------------\n\nTITLE: Adding Left Scrollbar\nDESCRIPTION: Command to add a scrollbar to the left side of the gVim window\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:set guioptions+=l\n```\n\n----------------------------------------\n\nTITLE: Managing Process User and Group IDs with LibUV in Lua\nDESCRIPTION: Functions for getting and setting process user and group IDs. Note that these are not standard LibUV functions and are not supported on Windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_80\n\nLANGUAGE: lua\nCODE:\n```\nuv.getpid()                                                        *uv.getpid()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.getuid()                                                        *uv.getuid()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.getgid()                                                        *uv.getgid()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.setuid({id})                                                    *uv.setuid()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.setgid({id})                                                    *uv.setgid()*\n```\n\n----------------------------------------\n\nTITLE: Custom Digraph Definitions for Raku\nDESCRIPTION: Vim configuration commands to define custom digraphs for special mathematical and Raku-specific Unicode characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_raku.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nexec 'digraph \\\\ ' .. char2nr('∖')\nexec 'digraph \\< ' .. char2nr('≼')\nexec 'digraph \\> ' .. char2nr('≽')\nexec 'digraph (L ' .. char2nr('⊈')\nexec 'digraph )L ' .. char2nr('⊉')\nexec 'digraph (/ ' .. char2nr('⊄')\nexec 'digraph )/ ' .. char2nr('⊅')\nexec 'digraph )/ ' .. char2nr('⊅')\nexec 'digraph U+ ' .. char2nr('⊎')\nexec 'digraph 0- ' .. char2nr('⊖')\n\" Euler's constant\nexec 'digraph ne ' .. char2nr('𝑒')\n\" Raku's atomic operations marker\nexec 'digraph @@ ' .. char2nr('⚛')\n```\n\n----------------------------------------\n\nTITLE: Moving to the start of a comment (Vim)\nDESCRIPTION: This snippet shows how to move back to the start of a comment using the `[/` command. This only works for `/* - */` comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n\"[/\"\n```\n\n----------------------------------------\n\nTITLE: Listing Vim Patches Status in Neovim\nDESCRIPTION: Command to view the status of Vim patches in Neovim using vim-patch.sh script\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/vim-patch.sh -l\n```\n\n----------------------------------------\n\nTITLE: Checking Spelling Example with spellbadword()\nDESCRIPTION: Demonstrates using spellbadword() function to check for spelling errors in text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_248\n\nLANGUAGE: vim\nCODE:\n```\necho spellbadword(\"the quik brown fox\")\n```\n\n----------------------------------------\n\nTITLE: Including Base Syntax in Custom Syntax\nDESCRIPTION: Example of including C syntax file in CPP syntax file\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n:so $VIMRUNTIME/syntax/c.vim\n```\n\n----------------------------------------\n\nTITLE: Default Value of zipPlugin_ext Variable for Zip Extensions\nDESCRIPTION: Shows the default value of the g:zipPlugin_ext variable that contains all the file extensions that are automatically recognized as zip archives. This extensive list includes numerous extensions like .jar, .docx, .xlsx, and many more.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nlet g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,\n       \\ *.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,\n       \\ *.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,\n       \\ *.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,\n       \\ *.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.whl,*.wsz,\n       \\ *.xap,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'\n```\n\n----------------------------------------\n\nTITLE: Preserving Comment Leaders in Multi-line Doc Comments\nDESCRIPTION: Preserves the leader on multi-line doc comments that use the '/*!' syntax, maintaining the formatting of documentation comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_bang_comment_leader = 1\n```\n\n----------------------------------------\n\nTITLE: Getting System Temporary Directory with uv.os_tmpdir()\nDESCRIPTION: Returns the path to the system's temporary directory. This function is not thread-safe.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_96\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_tmpdir()\n```\n\n----------------------------------------\n\nTITLE: Deleting a buffer-local user command in Neovim\nDESCRIPTION: This function deletes a user-defined command that is specific to a buffer in Neovim. The command must have been created with `:command-buffer` or `nvim_buf_create_user_command()`.  The function requires the buffer ID and the name of the command to delete.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_41\n\nLANGUAGE: vim\nCODE:\n```\n\"                                                 *nvim_buf_del_user_command()*\\nnvim_buf_del_user_command({buffer}, {name})\\n    Delete a buffer-local user-defined command.\\n\\n    Only commands created with |:command-buffer| or\\n    |nvim_buf_create_user_command()| can be deleted with this function.\\n\\n    Attributes: ~\\n        Since: 0.7.0\\n\\n    Parameters: ~\\n      • {buffer}  Buffer id, or 0 for current buffer.\\n      • {name}    Name of the command to delete.\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Linting of Treesitter Query Files\nDESCRIPTION: This Lua code snippet demonstrates how to disable automatic linting of treesitter query files by setting `vim.g.query_lint_on`. It requires Neovim with treesitter integration. The primary input is setting this global variable to an empty table, resulting in the deactivation of linting for query files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.10.txt#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nvim.g.query_lint_on = {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Backslash Quote in TCSH Syntax\nDESCRIPTION: Setting a variable to disable backslash quote constructs in TCSH syntax highlighting, which is needed when the shell's 'backslash_quote' variable is not set.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_128\n\nLANGUAGE: vim\nCODE:\n```\nlet tcsh_backslash_quote = 0\n```\n\n----------------------------------------\n\nTITLE: Multi-file Navigation Commands in Vim\nDESCRIPTION: Commands for navigating between multiple files in Vim's argument list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_07.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:next\n:next!\n:wnext\n:previous\n:wprevious\n:last\n:first\n:2next\n```\n\n----------------------------------------\n\nTITLE: Filtering Oldfiles Command Example in Vim\nDESCRIPTION: Example showing how to filter the :oldfiles command output to only show .vim files\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nfilter /\\.vim/ oldfiles\n```\n\n----------------------------------------\n\nTITLE: Checking for Unsigned Integer using Msgpack in Vim\nDESCRIPTION: This function checks if a given Msgpack value is a non-negative integer, returning 1 for non-negative integers and 0 otherwise.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#is_uint({msgpack-value})\n```\n\n----------------------------------------\n\nTITLE: Appending Text to Specific Buffer in Vimscript\nDESCRIPTION: The appendbufline() function appends text to a specified buffer. It works similarly to append() but allows targeting a different buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_6\n\nLANGUAGE: vimscript\nCODE:\n```\nlet failed = appendbufline(13, 0, \"# THE START\")\n```\n\n----------------------------------------\n\nTITLE: Modeline Examples with Formatting\nDESCRIPTION: Examples of properly formatted modelines, including one demonstrating how to escape colons in option values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\n/* vi:set ts=4: */\n```\n\nLANGUAGE: viml\nCODE:\n```\n/* vi:set fillchars=stl\\:^,vert\\:\\|: */\n```\n\n----------------------------------------\n\nTITLE: Navigating to Error Before Cursor Position\nDESCRIPTION: Command for going to the error before the current cursor position in the current buffer from the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n:[count]cbe[fore]\n```\n\n----------------------------------------\n\nTITLE: Using Vim Modelines (Second Form)\nDESCRIPTION: Examples of the second form of modelines compatible with some versions of Vi. This form uses the 'set' keyword followed by options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n/* vim: set ai tw=75: */\n```\n\nLANGUAGE: viml\nCODE:\n```\n/* Vim: set ai tw=75: */\n```\n\n----------------------------------------\n\nTITLE: Setting Perl Executable Path in Neovim\nDESCRIPTION: Sets the path to the Perl executable for Neovim's Perl provider. This must be set before checking if Perl support is available.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nlet g:perl_host_prog = '/path/to/perl'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lua Language Server Linting Target in CMake\nDESCRIPTION: Creates a target that scans Lua files in the runtime directory using the downloaded Lua Language Server for linting and static analysis.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB_RECURSE LUAFILES runtime/*.lua)\nadd_target(luals\n  COMMAND ${DEPS_BIN_DIR}/luals/bin/lua-language-server\n    --configpath=${PROJECT_SOURCE_DIR}/.luarc.json\n    --check=${PROJECT_SOURCE_DIR}/runtime\n    --checklevel=Hint\n  DEPENDS ${LUAFILES}\n  CUSTOM_COMMAND_ARGS USES_TERMINAL)\n\nadd_dependencies(luals download_luals)\n```\n\n----------------------------------------\n\nTITLE: Disabling OSC 52 Auto-Detection in Neovim - Lua\nDESCRIPTION: This code snippet demonstrates how to disable the automatic detection of the OSC 52 feature in Neovim's terminal integration by setting the 'osc52' key in 'vim.g.termfeatures' to false. This should be done early in the configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal termfeatures = vim.g.termfeatures or {}\ntermfeatures.osc52 = false\nvim.g.termfeatures = termfeatures\n```\n\n----------------------------------------\n\nTITLE: General Nvim Startup Command\nDESCRIPTION: Generic form of starting Nvim with optional arguments and filenames. Arguments can be mixed in any order.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnvim [option | filename] ..\n```\n\n----------------------------------------\n\nTITLE: Vim Script Line Continuation Example\nDESCRIPTION: Shows how to handle line continuation in Vim script using cpoptions\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_98\n\nLANGUAGE: vim\nCODE:\n```\nset cpo+=C\nlet var =<< END\n   \\ leading backslash\nEND\nset cpo-=C\n```\n\n----------------------------------------\n\nTITLE: Adjusting matchtime in Vim\nDESCRIPTION: Command to change how long Vim shows the matching bracket. The time is specified in tenths of a second, with the example setting it to 1.5 seconds.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set matchtime=15\n```\n\n----------------------------------------\n\nTITLE: Return Floating-point Argument in Neovim\nDESCRIPTION: Returns the floating-point value passed as an argument using 'nvim__id_float'. Mainly for testing, professional developers shouldn't depend on its plugin availability.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_33\n\nLANGUAGE: Lua\nCODE:\n```\nnvim__id_float\\(\\{flt\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Additional Attribute for Highlight Command\nDESCRIPTION: The |:highlight| command now supports an additional attribute called 'altfont', expanding its functionality for text highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Setting Mail Syntax Highlighting Options in Vim\nDESCRIPTION: Configures the number of lines to synchronize for mail syntax highlighting to improve performance on slower machines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_79\n\nLANGUAGE: VimScript\nCODE:\n```\n:let mail_minlines = 30\n```\n\n----------------------------------------\n\nTITLE: Custom Color Name with Spaces\nDESCRIPTION: Example showing how to use a color name containing spaces\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_193\n\nLANGUAGE: vim\nCODE:\n```\n:hi comment guifg='salmon pink'\n```\n\n----------------------------------------\n\nTITLE: Treating True/False as Keywords in Haskell\nDESCRIPTION: This snippet shows how to treat 'True' and 'False' as keywords in Haskell syntax highlighting.  This is done by setting the 'hs_highlight_boolean' variable to 1 in your vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_44\n\nLANGUAGE: vim\nCODE:\n```\n\t:let hs_highlight_boolean = 1\n```\n\n----------------------------------------\n\nTITLE: UI Option Reporting Enhancements\nDESCRIPTION: |nvim_list_uis()| now reports all fields within |ui-option|, providing comprehensive details for users and plugins that rely on UI information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Implementing a Custom Command-line Mapping in Neovim\nDESCRIPTION: This snippet demonstrates how to create a custom mapping for Neovim's command-line mode. It defines a function 'AppendSome()' that modifies the command line and maps it to the F7 key.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimdoc\nCODE:\n```\n:cmap <F7> <C-\\>eAppendSome()<CR>\n:func AppendSome()\n   :let cmd = getcmdline() .. \" Some()\"\n   :\" place the cursor on the )\n   :call setcmdpos(strlen(cmd))\n   :return cmd\n:endfunc\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer Mark in Lua\nDESCRIPTION: Sets a named mark in the given buffer. Marks are (1,0)-indexed. Passing 0 as line deletes the mark.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_58\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_set_mark({buffer}, {name}, {line}, {col}, {opts})\n```\n\n----------------------------------------\n\nTITLE: Filtering Unmerged Vim Patches\nDESCRIPTION: Command to filter unmerged Vim patches using grep patterns with vim-patch.sh script\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/vim-patch.sh -L --grep quickfix -- src\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Filetype in Vim\nDESCRIPTION: Commands to check current filetype and manually set it for syntax highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set filetype\n```\n\nLANGUAGE: vim\nCODE:\n```\n:set filetype=fortran\n```\n\n----------------------------------------\n\nTITLE: Determining Special Type with Msgpack in Vim\nDESCRIPTION: Returns the type name of a Msgpack special dictionary or zero if the value is not special. This is used to handle special Msgpack values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#special_type({msgpack-value})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lace Syntax Highlighting in Vim\nDESCRIPTION: Sets an option for case-insensitive highlighting in Lace syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_72\n\nLANGUAGE: VimScript\nCODE:\n```\n:let lace_case_insensitive=1\n```\n\n----------------------------------------\n\nTITLE: Getting Line Number by Byte in Neovim using Vim Script\nDESCRIPTION: The 'byte2line' function returns the line number containing the character at a specified byte count in the current buffer, returning -1 for invalid bytes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\nbyte2line({byte})\n```\n\n----------------------------------------\n\nTITLE: Setting Changelog Format String in Vim\nDESCRIPTION: Example of how to customize the changelog entry format by setting the spec_chglog_format variable in vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\nlet spec_chglog_format = \"%a %b %d %Y My Name <my@email.com>\"\n```\n\n----------------------------------------\n\nTITLE: Help Command with CTRL-V Examples\nDESCRIPTION: Examples demonstrating how to search help for CTRL key combinations\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimscript\nCODE:\n```\n:help ^V\n:help i^V\n```\n\n----------------------------------------\n\nTITLE: Visual Mode Commands in Neovim\nDESCRIPTION: List of key mappings and their actions in Neovim's visual mode. Includes commands for text manipulation, movement, and selection modification.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n|v_>|      >       2  shift the highlighted lines one 'shiftwidth' right\n|v_b_A|     A       2  block mode: append same text in all lines, after the highlighted area\n|v_C|       C       2  delete the highlighted lines and start insert\n|v_D|       D       2  delete the highlighted lines\n|v_b_I|     I       2  block mode: insert same text in all lines, before the highlighted area\n|v_J|       J       2  join the highlighted lines\n|v_K|       K          run 'keywordprg' on the highlighted area\n|v_O|       O          move horizontally to other corner of area\n|v_P|       P          replace highlighted area with register contents; registers are unchanged\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard to OSC52 in Neovim\nDESCRIPTION: Forces Neovim to use the OSC52 clipboard provider, bypassing auto-detection of terminal support.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nlet g:clipboard = 'osc52'\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Directory Variables\nDESCRIPTION: Defines paths for generated runtime files including help tags, package directory and syntax files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(GENERATED_RUNTIME_DIR ${PROJECT_BINARY_DIR}/runtime)\n\nset(GENERATED_HELP_TAGS ${GENERATED_RUNTIME_DIR}/doc/tags)\nset(GENERATED_PACKAGE_DIR ${GENERATED_RUNTIME_DIR}/pack/dist/opt)\nset(GENERATED_SYN_VIM ${GENERATED_RUNTIME_DIR}/syntax/vim/generated.vim)\nset(SYN_VIM_GENERATOR ${PROJECT_SOURCE_DIR}/src/gen/gen_vimvim.lua)\n```\n\n----------------------------------------\n\nTITLE: Combining Execute with Normal Command and Count Concatenation\nDESCRIPTION: Shows how to use :execute with the normal command and string concatenation to repeat an action a specific number of times.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_112\n\nLANGUAGE: vim\nCODE:\n```\n:execute \"normal\" count .. \"w\"\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Digraph\nDESCRIPTION: Example showing how to define a digraph for the 'oe' ligature using Unicode value.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\ndigraph oe 339\n```\n\n----------------------------------------\n\nTITLE: Configuring libuv Loop Options in Lua\nDESCRIPTION: This function sets additional libuv loop options. It's typically called before the first call to uv_run(). Supported options include blocking signals (currently only `sigprof`) and accumulating idle time for metrics.  Returns 0 or fail, including ENOSYS if the option is unsupported.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.loop_configure({option}, {...})                         *uv.loop_configure()*\\n\\n                Parameters:\\n                - `option`: `string`\\n                - `...`: depends on `option`, see below\\n\\n                Set additional loop options. You should normally call this\\n                before the first call to uv_run() unless mentioned otherwise.\\n\\n                Supported options:\\n\\n                  - `\\\"block_signal\\\"`: Block a signal when polling for new\\n                    events. The second argument to loop_configure() is the\\n                    signal name (as a lowercase string) or the signal number.\\n                    This operation is currently only implemented for\\n                    `\\\"sigprof\\\"` signals, to suppress unnecessary wakeups when\\n                    using a sampling profiler. Requesting other signals will\\n                    fail with `EINVAL`.\\n                  - `\\\"metrics_idle_time\\\"`: Accumulate the amount of idle time\\n                    the event loop spends in the event provider. This option\\n                    is necessary to use `metrics_idle_time()`.\\n\\n                An example of a valid call to this function is:\\n\\n                    >lua\\n                    uv.loop_configure(\\\"block_signal\\\", \\\"sigprof\\\")\\n<\\n\\n                Returns: `0` or `fail`\\n\\n                Note: Be prepared to handle the `ENOSYS` error; it means the\\n                loop option is not supported by the platform.\"\n```\n\n----------------------------------------\n\nTITLE: Vim Visual Pattern Replacement\nDESCRIPTION: A command to replace all parentheses with # in the visual selection using pattern matching\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\n:'<,'>s/\\%V(/#/g\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Netrw Syntax Highlighting Configuration in VimL\nDESCRIPTION: A complete example showing how to customize the syntax highlighting for various file types in Netrw. This configuration sets custom colors for compressed files, data files, headers, libraries, and more, suitable for a dark background color scheme.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_38\n\nLANGUAGE: viml\nCODE:\n```\nhi netrwCompress term=NONE cterm=NONE gui=NONE ctermfg=10 guifg=green  ctermbg=0 guibg=black\nhi netrwData\t  term=NONE cterm=NONE gui=NONE ctermfg=9 guifg=blue ctermbg=0 guibg=black\nhi netrwHdr\t  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1\nhi netrwLex\t  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1\nhi netrwYacc\t  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1\nhi netrwLib\t  term=NONE cterm=NONE gui=NONE ctermfg=14 guifg=yellow\nhi netrwObj\t  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red\nhi netrwTilde\t  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red\nhi netrwTmp\t  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red\nhi netrwTags\t  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red\nhi netrwDoc\t  term=NONE cterm=NONE gui=NONE ctermfg=220 ctermbg=27 guifg=yellow2 guibg=Blue3\nhi netrwSymLink  term=NONE cterm=NONE gui=NONE ctermfg=220 ctermbg=27 guifg=grey60\n```\n\n----------------------------------------\n\nTITLE: Message Viewing Command Examples\nDESCRIPTION: Examples of Vim commands used to view and manage message history, including viewing all messages, specific number of messages, and clearing message history.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:mes[sages]            Show all messages.\n:{count}mes[sages]      Show the {count} most recent messages.\n:mes[sages] clear       Clear all messages.\n:{count}mes[sages] clear Clear messages, keeping only the {count} most recent ones.\n```\n\n----------------------------------------\n\nTITLE: Stopping Script Execution in Vim\nDESCRIPTION: The :finish command stops sourcing a Vim script file, skipping the rest of the file. It can only be used within a Vim script.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:fini[sh]\n```\n\n----------------------------------------\n\nTITLE: Basic Z-Y Key Mapping in Vim\nDESCRIPTION: Simple example of using langmap to exchange the meaning of z and y keys for commands in normal mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_37\n\nLANGUAGE: vim\nCODE:\n```\nset langmap=zy,yz,ZY,YZ\n```\n\n----------------------------------------\n\nTITLE: Debugging Handles with LibUV in Lua\nDESCRIPTION: Debugging functions to print active or all handles in the main loop. These functions are meant for ad hoc debugging and not available on Windows.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_82\n\nLANGUAGE: lua\nCODE:\n```\nuv.print_all_handles()                                  *uv.print_all_handles()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.print_active_handles()                            *uv.print_active_handles()*\n```\n\n----------------------------------------\n\nTITLE: Enabling verbose mode for Verilog indentation debugging\nDESCRIPTION: Turns on verbose mode for debugging Verilog indentation issues. Requires setting cmdheight to at least 2 to display debug messages.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nlet b:verilog_indent_verbose = 1\n```\n\n----------------------------------------\n\nTITLE: Customizing Rust Playpen URL\nDESCRIPTION: Overrides the default URL for the Rust Playpen (Rust Playground) service used by the plugin for code sharing and execution.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_playpen_url = 'https://play.rust-lang.org/'\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Fonts for UTF-8 in Neovim\nDESCRIPTION: Configuration commands for setting both regular and wide fonts in Neovim's GUI to support UTF-8 characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set guifont=-misc-fixed-medium-r-normal-*-18-120-100-100-c-90-iso10646-1\n:set guifontwide=-misc-fixed-medium-r-normal-*-18-120-100-100-c-180-iso10646-1\n```\n\n----------------------------------------\n\nTITLE: Return Argument Array in Neovim\nDESCRIPTION: Using 'nvim__id_array', return the given array argument. Primarily used in testing scenarios, not intended for broad adoption in plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_31\n\nLANGUAGE: Lua\nCODE:\n```\nnvim__id_array\\(\\{arr\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Updating Event Loop Time in Lua\nDESCRIPTION: This function updates the event loop's concept of \"now\". Libuv caches the current time at the start of the event loop tick to reduce the number of time-related system calls.  Normally, you won't need to call this function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.update_time()                                              *uv.update_time()*\\n\\n                Update the event loop's concept of \\\"now\\\". Libuv caches the\\n                current time at the start of the event loop tick in order to\\n                reduce the number of time-related system calls.\\n\\n                You won't normally need to call this function unless you have\"\n```\n\n----------------------------------------\n\nTITLE: Help File First Line Format - Vim\nDESCRIPTION: Demonstrates the required format for the first line of a Vim help file, including tag name and description.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n*plugin_name.txt*\t{short description of the plugin}\n```\n\n----------------------------------------\n\nTITLE: Removed Deprecated Features and APIs\nDESCRIPTION: This section lists deprecated functions and APIs removed from the codebase, urging users to transition to newer alternatives. For instance, `filetype.vim` has been replaced with |vim.filetype|.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: GitHub PR Review Command\nDESCRIPTION: Command to checkout a pull request locally using GitHub CLI for code review purposes.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngh pr checkout https://github.com/neovim/neovim/pull/1820\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL Syntax Highlighting in Vim\nDESCRIPTION: Controls the standard version of SDL syntax highlighting, with options for SDL-2000 case sensitivity and keyword recognition.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_110\n\nLANGUAGE: vim\nCODE:\n```\nlet sdl_2000 = 1\nlet SDL_no_96 = 1\n```\n\n----------------------------------------\n\nTITLE: Restoring Old Default Color Scheme in Neovim Init File\nDESCRIPTION: Add this line to init.vim to restore the old default color scheme links and colors in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\n:colorscheme vim\n```\n\n----------------------------------------\n\nTITLE: Manpage Viewer Supports Spaces in Names\nDESCRIPTION: The |:Man| command has been modified to correctly handle manpage names that contain spaces, improving usability for users with complex command access.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Creating an Interface Library in CMake\nDESCRIPTION: This snippet defines an interface library named `test_lib`. Interface libraries are used to propagate usage requirements (such as include directories, compile definitions, and linked libraries) to dependent targets.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/functional/fixtures/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(test_lib INTERFACE)\nif(WIN32)\n  target_compile_definitions(test_lib INTERFACE MSWIN)\nendif()\ntarget_link_libraries(test_lib INTERFACE nvim_bin)\n```\n\n----------------------------------------\n\nTITLE: Disabling Perl Support in Neovim\nDESCRIPTION: Disables the Perl provider in Neovim by setting the g:loaded_perl_provider variable to 0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:let g:loaded_perl_provider = 0\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregate Formatting Target in CMake\nDESCRIPTION: Creates a composite target that depends on all formatting targets (C and Lua), allowing all formatting to be run with a single command.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(format)\nadd_dependencies(format formatc formatlua)\n```\n\n----------------------------------------\n\nTITLE: Enabling Concealment for Public Keyword\nDESCRIPTION: Enables concealment for the \"pub\" token in Rust code, which can reduce visual clutter in files with many public items.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_conceal_pub = 1\n```\n\n----------------------------------------\n\nTITLE: Variable Initialization Patterns in C\nDESCRIPTION: Examples showing correct and incorrect ways to initialize variables in C, emphasizing declaration and initialization in one line\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint i;\ni = f();      // ❌: initialization separate from declaration.\n\nint j = g();  // ✅: declaration has initialization.\n```\n\n----------------------------------------\n\nTITLE: Building for Older macOS versions\nDESCRIPTION: Build Neovim for older macOS versions by setting the deployment target.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_37\n\nLANGUAGE: Shell\nCODE:\n```\n\"make CMAKE_BUILD_TYPE=Release MACOSX_DEPLOYMENT_TARGET=10.13 DEPS_CMAKE_FLAGS=\\\"-DCMAKE_CXX_COMPILER=$(xcrun -find c++)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Opening a fold\nDESCRIPTION: Opens a closed fold at the cursor position to display the folded text. This is a basic fold operation command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\nzo\n```\n\n----------------------------------------\n\nTITLE: Setting Ruby Host Program Path with rbenv\nDESCRIPTION: Sets the path to the Ruby host program using an absolute path with rbenv. This avoids the need to install the neovim gem in every project.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nlet g:ruby_host_prog = '~/.rbenv/versions/2.4.1/bin/neovim-ruby-host'\n```\n\n----------------------------------------\n\nTITLE: Disabling Quickfix Statusline Configuration in Neovim\nDESCRIPTION: This command sets the `g:qf_disable_statusline` variable to `1`, which disables the default configuration for displaying the command that produced the quickfix list in the statusline. It requires the qf plugin to be installed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\n\t:let g:qf_disable_statusline = 1\n```\n\n----------------------------------------\n\nTITLE: Using Justification Macros in Vim - Vim\nDESCRIPTION: Incorporates a macro package for justifying text within Vim. This requires adding the 'justify' package to provide additional functionality for text formatting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_25.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:packadd justify\n```\n\nLANGUAGE: vim\nCODE:\n```\npackadd! justify\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policy and Module Paths\nDESCRIPTION: Sets CMake policies, prevents Xcode generator usage, and configures module paths to include custom modules from the project source directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0135)\n  cmake_policy(SET CMP0135 NEW)\nendif()\n\nif(XCODE)\n  message(FATAL_ERROR [[Xcode generator is not supported. Use \"Ninja\" or \"Unix Makefiles\" instead]])\nendif()\n\n# Point CMake at any custom modules we may ship\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\n```\n\n----------------------------------------\n\nTITLE: Including External Syntax Files in Vim\nDESCRIPTION: Examples demonstrating how to include other syntax files and add their items to specific groups\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_171\n\nLANGUAGE: vim\nCODE:\n```\n:runtime! syntax/c.vim\n:unlet b:current_syntax\n```\n\n----------------------------------------\n\nTITLE: Python Module Loading with Vim Path Finder\nDESCRIPTION: This code snippet demonstrates how Neovim handles Python module loading using a custom path finder and loader. It defines classes to locate and load modules from specific directories within the 'runtimepath'. This allows Python code within Neovim to import modules from the correct locations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_pyth.txt#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"    from imp import find_module, load_module\n    import vim\n    import sys\n\n    class VimModuleLoader(object):\n        def __init__(self, module):\n            self.module = module\n\n        def load_module(self, fullname, path=None):\n            return self.module\n\n    def _find_module(fullname, oldtail, path):\n        idx = oldtail.find('.')\n        if idx > 0:\n            name = oldtail[:idx]\n            tail = oldtail[idx+1:]\n            fmr = find_module(name, path)\n            module = load_module(fullname[:-len(oldtail)] + name, *fmr)\n            return _find_module(fullname, tail, module.__path__)\n        else:\n            fmr = find_module(fullname, path)\n            return load_module(fullname, *fmr)\n\n    # It uses vim module itself in place of VimPathFinder class: it does not\n    # matter for python which object has find_module function attached to as\n    # an attribute.\n    class VimPathFinder(object):\n        @classmethod\n        def find_module(cls, fullname, path=None):\n            try:\n                return VimModuleLoader(_find_module(fullname, fullname, path or vim._get_paths()))\n            except ImportError:\n                return None\n\n        @classmethod\n        def load_module(cls, fullname, path=None):\n            return _find_module(fullname, fullname, path or vim._get_paths())\n\n    def hook(path):\n        if path == vim.VIM_SPECIAL_PATH:\n            return VimPathFinder\n        else:\n            raise ImportError\n\n    sys.path_hooks.append(hook)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NeoMutt Log Syntax Highlighting in Vim\nDESCRIPTION: Disables the default NeoMutt log colors for syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_88\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:neolog_disable_default_colors = 1\n```\n\n----------------------------------------\n\nTITLE: Core Vim Syntax Control Scripts\nDESCRIPTION: Primary scripts that control Vim's syntax highlighting behavior, including syntax.vim for enabling syntax highlighting, manual.vim for manual syntax control, synload.vim for file extension based autoloading, and nosyntax.vim for disabling syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/syntax/README.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nsyntax.vim   # Used for the \":syntax on\" command\nmanual.vim   # Used for the \":syntax manual\" command\nsynload.vim  # Contains autocommands for language file loading\nnosyntax.vim # Used for the \":syntax off\" command\n```\n\n----------------------------------------\n\nTITLE: Checking Current Text Width Setting\nDESCRIPTION: Displays the current value of the 'textwidth' option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:set textwidth\n```\n\n----------------------------------------\n\nTITLE: Building Bundled Dependencies with CMake\nDESCRIPTION: These commands build the bundled dependencies using CMake. It configures the CMake project in the `.deps` directory with the Ninja generator and RelWithDebInfo build type. Then, it builds the dependencies using the configured CMake project.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n\"cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\\ncmake --build .deps\"\n```\n\n----------------------------------------\n\nTITLE: String to Float Conversion Example\nDESCRIPTION: Shows how to convert string numbers to floating point values, including handling thousands separators.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_254\n\nLANGUAGE: vim\nCODE:\n```\nlet f = str2float(substitute(text, ',', '', 'g'))\n```\n\n----------------------------------------\n\nTITLE: Special Ex Characters in Vim\nDESCRIPTION: Special characters and sequences used in Ex commands for command separation, commenting, file references, and path manipulation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\n|           separates two commands (not for \":global\" and \":!\")\n\"           begins comment\n\n%           current file name (only where a file name is expected)\n#[num]      alternate file name [num] (only where a file name is expected)\n<abuf>      buffer number, for use in an autocommand (only where a file name is expected)\n<afile>     file name, for use in an autocommand (only where a file name is expected)\n<amatch>    what matched with the pattern, for use in an autocommand (only where a file name is expected)\n<cword>     word under the cursor (only where a file name is expected)\n<cWORD>     WORD under the cursor (only where a file name is expected) (see |WORD|)\n<cfile>     file name under the cursor (only where a file name is expected)\n<sfile>     file name of a \":source\"d file, within that file (only where a file name is expected)\n\nAfter \"%\", \"#\", \"<cfile>\", \"<sfile>\" or \"<afile>\"\n:p          full path\n:h          head (file name removed)\n:t          tail (file name only)\n:r          root (extension removed)\n:e          extension\n:s/{pat}/{repl}/  substitute {pat} with {repl}\n```\n\n----------------------------------------\n\nTITLE: Getting libuv Version String in Lua\nDESCRIPTION: This function returns the libuv version as a string. The string includes the version suffix for non-release versions. This is useful for displaying the version to the user.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.version_string()                                        *uv.version_string()*\\n\\n                Returns the libuv version number as a string. For example,\\n                this would be \\\"1.2.3\\\" in libuv 1.2.3. For non-release\\n                versions, the version suffix is included.\\n\\n                Returns: `string`\"\n```\n\n----------------------------------------\n\nTITLE: Starting Vim Tutorial\nDESCRIPTION: Command to launch the built-in Vim tutorial for new users\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_01.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:Tutor\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration for macOS\nDESCRIPTION: Sets macOS deployment target and handles case-insensitive filenames for macOS and Windows platforms.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  # If the macOS deployment target is not set manually (via $MACOSX_DEPLOYMENT_TARGET),\n  # fall back to local system version. Needs to be done both here and in cmake.deps.\n  if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)\n    execute_process(COMMAND sw_vers -productVersion\n                    OUTPUT_VARIABLE MACOS_VERSION\n                    OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set(CMAKE_OSX_DEPLOYMENT_TARGET \"${MACOS_VERSION}\")\n  endif()\n  message(STATUS \"Using deployment target ${CMAKE_OSX_DEPLOYMENT_TARGET}\")\nendif()\n\nif(WIN32 OR APPLE)\n  # Handle case-insensitive filenames for Windows and Mac.\n  set(CASE_INSENSITIVE_FILENAME TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Deleting Buffer in BufEnter Autocommand in Vim\nDESCRIPTION: Example showing how autocommands continue to execute even after buffer changes. This demonstrates that Vim matches patterns at trigger time and doesn't reconsider after buffer changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_21\n\nLANGUAGE: viml\nCODE:\n```\nau BufEnter *.foo  bdel\nau BufEnter *.foo  set modified\n```\n\n----------------------------------------\n\nTITLE: Setting Spell Clean Limit in VimScript\nDESCRIPTION: Variable declaration to set the time threshold (in seconds) for cleaning spell files. Files modified within this time limit will be skipped during cleanup.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_8\n\nLANGUAGE: viml\nCODE:\n```\nlet g:spell_clean_limit = 60 * 60\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Affinity in Lua with Libuv\nDESCRIPTION: Sets the CPU affinity for a specified thread. Takes a thread object, an affinity table, and an optional flag to return the old affinity settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_59\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_setaffinity({thread}, {affinity} [, {get_old_affinity}])\n```\n\n----------------------------------------\n\nTITLE: Displaying Search History in Vim\nDESCRIPTION: This snippet shows how to display the history of search commands (both `/` and `?`) using the `:history /` command. This lists all previously executed search commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\t:history /\n```\n\n----------------------------------------\n\nTITLE: Mapping Alt-LeftMouse to Temporarily Disable Mouse in Neovim\nDESCRIPTION: Create a mapping that temporarily disables the mouse until the next cursor move in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_7\n\nLANGUAGE: viml\nCODE:\n```\nnnoremap <A-LeftMouse> <Cmd>\n    \\ set mouse=<Bar>\n    \\ echo 'mouse OFF until next cursor-move'<Bar>\n    \\ autocmd CursorMoved * ++once set mouse&<Bar>\n    \\ echo 'mouse ON'<CR>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Man Page Installation in CMake\nDESCRIPTION: Configures the installation of Neovim's man page to the system's man directory using the install_helper function.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\ninstall_helper(\n  FILES ${CMAKE_SOURCE_DIR}/src/man/nvim.1\n  DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\n```\n\n----------------------------------------\n\nTITLE: Setting Swap File Directory Configuration\nDESCRIPTION: Commands to set custom directory locations for swap files on Unix and Windows systems\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set dir=~/tmp\n:set dir=c:\\\\tmp\n```\n\n----------------------------------------\n\nTITLE: Moving to the end of a comment (Vim)\nDESCRIPTION: This snippet shows how to move forward to the end of a comment using the `]/` command.  This only works for `/* - */` comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n\"]/\"\n```\n\n----------------------------------------\n\nTITLE: Setting REXX Syntax Synchronization and File Detection\nDESCRIPTION: Configures the synchronization start point for REXX files and sets the default filetype for .r files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_107\n\nLANGUAGE: vim\nCODE:\n```\nlet rexx_minlines = 50\nlet g:filetype_r = \"r\"\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard to Wayclip in Neovim\nDESCRIPTION: Forces Neovim to use the waycopy/waypaste clipboard provider, bypassing auto-detection.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\nlet g:clipboard = 'wayclip'\n```\n\n----------------------------------------\n\nTITLE: Custom Font with Spaces\nDESCRIPTION: Example showing how to set a font name containing spaces\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_192\n\nLANGUAGE: vim\nCODE:\n```\n:hi comment font='Monospace 10'\n```\n\n----------------------------------------\n\nTITLE: Setting Locale in Shell Environment\nDESCRIPTION: Commands to set the language locale environment variable in different shell environments (sh and csh).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsetenv LANG ja_JP.EUC\n```\n\n----------------------------------------\n\nTITLE: CWEB Filetype Configuration in VimL\nDESCRIPTION: Selects the CWEB file type for '*.w' files when automatic detection is unreliable, ensuring that the appropriate syntax is loaded for editing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_20\n\nLANGUAGE: VimL\nCODE:\n```\n:let filetype_w = \"cweb\"\n```\n\n----------------------------------------\n\nTITLE: Cinoptions Indentation Examples - End of Line Braces\nDESCRIPTION: Shows indentation patterns when opening brace is at the end of a line using the 'e' cinoption\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n  if (cond) {\n      foo;\n  }\n  else\n  {\n      bar;\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Context Stack Size - Lua\nDESCRIPTION: The ctxsize function returns the current size of the context stack, giving an overview of how many contexts are stored. This is useful for understanding how deep the context management is.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_42\n\nLANGUAGE: lua\nCODE:\n```\nctxsize()                                                            *ctxsize()*\n\t\tReturns the size of the |context-stack|.\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Test in Neovim\nDESCRIPTION: This command allows the user to run a specific unit test by setting the TEST_FILE environment variable to the path of the Lua test file and then invoking the unittest target with make. The command is compatible with both make and cmake build systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTEST_FILE=test/unit/foo.lua make unittest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake -E env \"TEST_FILE=test/unit/foo.lua\" cmake --build build --target unittest\n```\n\n----------------------------------------\n\nTITLE: Setting Vim Modeline for Makefile Syntax\nDESCRIPTION: Example of setting a modeline to specify file syntax type in a Makefile\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_06.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n# vim: syntax=make\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Syntax Synchronization and Preview Features\nDESCRIPTION: Sets the number of lines for syntax synchronization and enables preview features for Java syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_68\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:java_minlines = 50\n:let g:java_syntax_previews = [488, 494]\n```\n\n----------------------------------------\n\nTITLE: Setting Ruby Host Program with RVM System Ruby\nDESCRIPTION: Configures Neovim to use the RVM system Ruby installation for the Ruby host program.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\nlet g:ruby_host_prog = 'rvm system do neovim-ruby-host'\n```\n\n----------------------------------------\n\nTITLE: Netscape Color Configuration\nDESCRIPTION: Commands and configuration examples for managing Netscape's color usage to prevent color allocation issues with Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnetscape -install\nnetscape -ncols 64\n```\n\n----------------------------------------\n\nTITLE: Binding UDP handle to IP address and port in Lua\nDESCRIPTION: Binds the UDP handle to an IP address and port. Optional flags can be set for IPv6 only and address reuse.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_40\n\nLANGUAGE: lua\nCODE:\n```\nuv.udp_bind({udp}, {host}, {port} [, {flags}])\n```\n\n----------------------------------------\n\nTITLE: Print Range Examples in Vim\nDESCRIPTION: Examples demonstrating line range printing with folded text.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:3,4+2print\n:2,4-1print\n```\n\n----------------------------------------\n\nTITLE: Nvim Configuration Examples\nDESCRIPTION: Example commands showing how to set options and execute commands at startup.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvim  \"+set si\"  main.c\nvim  \"+find stdio.h\"\nvim  -c \"set ff=dos\"  -c wq  mine.mak\n```\n\n----------------------------------------\n\nTITLE: Avoiding Plugin Loading: Vim Script\nDESCRIPTION: To prevent the matchit plugin from loading automatically in Vim, the 'loaded_matchit' variable must be defined in the vimrc file. This is done by setting the variable to '1'. It's particularly useful for users who wish to manage their plugins manually or have compatibility concerns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:let loaded_matchit = 1\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise AND Operation in Vimscript\nDESCRIPTION: The and() function performs a bitwise AND operation on two number arguments. It converts both arguments to numbers and returns the result.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_3\n\nLANGUAGE: vimscript\nCODE:\n```\nlet flag = and(bits, 0x80)\n```\n\n----------------------------------------\n\nTITLE: Configuring User Settings for Neovim Build\nDESCRIPTION: Sets up user-configurable build settings, particularly the option to ignore SHA verification for dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n#-------------------------------------------------------------------------------\n# User settings\n#-------------------------------------------------------------------------------\n\nset(DEPS_IGNORE_SHA FALSE)\n```\n\n----------------------------------------\n\nTITLE: Setting Context in Stack - Lua\nDESCRIPTION: The ctxset function assigns a specific context to the specified index in the stack. If the index is not provided, it defaults to the top of the stack, making it a flexible tool for state management.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\nctxset({context} [, {index}])                                         *ctxset()*\n\t\tSets the |context| at {index} from the top of the\n\t\t|context-stack| to that represented by {context}.\n\t\t{context} is a Dictionary with context data (|context-dict|).\n\t\tIf {index} is not given, it is assumed to be 0 (i.e.: top).\n\n\t\tParameters: ~\n\t\t  • {context} (`table`)\n\t\t  • {index} (`integer?`)\n\n\t\tReturn: ~\n\t\t  (`integer`)\n```\n\n----------------------------------------\n\nTITLE: Header File Include Pattern for Generated Declarations\nDESCRIPTION: Example showing the required pattern for including generated header files in C source and header files\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// src/nvim/foo.c file\n#include <stddef.h>\n\ntypedef int FooType;\n\n#ifdef INCLUDE_GENERATED_DECLARATIONS\n# include \"foo.c.generated.h\"\n#endif\n\n…\n\n\n// src/nvim/foo.h file\n#pragma once\n\n…\n\n#ifdef INCLUDE_GENERATED_DECLARATIONS\n# include \"foo.h.generated.h\"\n#endif\n```\n\n----------------------------------------\n\nTITLE: Disabling Complex LaTeX Syntax Features for Performance with VimL\nDESCRIPTION: Setting to completely disable region definitions and synchronization for faster syntax highlighting. This improves performance at the cost of reduced highlighting features.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_137\n\nLANGUAGE: viml\nCODE:\n```\n:let g:tex_fast= \"\"\n```\n\n----------------------------------------\n\nTITLE: Silent Normal Mode Search\nDESCRIPTION: Executes a search command in normal mode silently using :silent and :execute commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\n:silent exe \"normal /path\\<CR>\"\n```\n\n----------------------------------------\n\nTITLE: Example C function prototype for popen (C)\nDESCRIPTION: This snippet shows the C function prototype for `popen()` as an example of what `:psearch` might find.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n\"FILE\t*popen __P((const char *, const char *));\"\n```\n\n----------------------------------------\n\nTITLE: Function Name Mapping (Vim to Neovim)\nDESCRIPTION: This snippet illustrates the mapping of function names between Vim and Neovim, highlighting changes necessary for porting code. It is crucial to update these function calls to maintain functionality in the new environment.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n\"  mb_lefthalve                                        grid_lefthalve\n  mb_fix_col                                           grid_fix_col\n  utf_off2cells                                       grid_off2cells\n  ml_get_curline                                    get_cursor_line_ptr\n  ml_get_cursor                                     get_cursor_pos_ptr\n  ml_get_curline_len                                get_cursor_line_len\n  ml_get_cursor_len                                 get_cursor_pos_len\n  screen_char                                             ui_line\n  screen_line                                        grid_put_linebuf\n  screen_* (most functions)                               grid_*\n  update_prepare, update_finish #9484                  removed; use update_screen only\n  ARRAY_LENGTH                                          ARRAY_SIZE\n  vim_strsave_escape_csi                           vim_strsave_escape_ks\n  vim_unescape_csi                                    vim_unescape_ks\n  gettail                                                path_tail\n  mch_isFullName                                     path_is_absolute\n  script_do_profile                                    profile_init\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Reverse Insert Mode in Vim\nDESCRIPTION: This snippet shows how to enable reverse insert mode, which allows typing right-to-left text without fully enabling the 'rightleft' option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/rileft.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nWhen the 'revins' (reverse insert) option is set,\n   inserting happens backwards.  This can be used to type right-to-left\n   text.\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration\nDESCRIPTION: Sets up platform-specific build configurations, including macOS deployment target handling and Windows-specific dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)\n    execute_process(COMMAND sw_vers -productVersion\n                    OUTPUT_VARIABLE MACOS_VERSION\n                    OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set(CMAKE_OSX_DEPLOYMENT_TARGET \"${MACOS_VERSION}\")\n  endif()\n  message(STATUS \"Using deployment target ${CMAKE_OSX_DEPLOYMENT_TARGET}\")\nendif()\n\nif(WIN32)\n  include(GetBinaryDeps)\n\n  GetExecutable(TARGET xxd)\n\n  GetBinaryDep(TARGET win32yank_X86_64\n    INSTALL_COMMAND ${CMAKE_COMMAND} -E copy win32yank.exe ${DEPS_BIN_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Line Continuation in Vim Append Commands\nDESCRIPTION: Example of using the 'C' flag in 'cpoptions' to handle line continuation properly with the :append command in Vim scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:set cpo+=C\n:1append\n\\asdf\n.\n:set cpo-=C\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with custom install prefix on MSYS2/MinGW\nDESCRIPTION: CMake commands to build Neovim on Windows using MSYS2/MinGW toolchain with a custom installation directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build .deps\ncmake -B build -G Ninja -D CMAKE_INSTALL_PREFIX=C:\\nvim -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: File System Open Operation in Lua\nDESCRIPTION: Opens a file with specified path, flags and mode. Supports both synchronous and asynchronous operation via callback. Access flags can be string or integer values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_46\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_open({path}, {flags}, {mode} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Syntax Highlighting in Vim\nDESCRIPTION: Sets options for Java syntax highlighting, including marking braces in parentheses as errors, highlighting Java lang IDs, and configuring function highlighting styles.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_64\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:java_mark_braces_in_parens_as_errors = 1\n:let g:java_highlight_java_lang_ids = 1\n:let g:java_highlight_functions = \"indent\"\n:let g:java_highlight_functions = \"style\"\n:let g:java_highlight_signature = 1\n```\n\n----------------------------------------\n\nTITLE: Building msgfmt Executable in CMake\nDESCRIPTION: This snippet defines the msgfmt executable, sets its sources, links it with libgettextsrc, and adds dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(msgfmt_SOURCES\n  msgfmt.c write-mo.c write-java.c write-csharp.c write-resources.c write-tcl.c\n  write-qt.c write-desktop.c write-xml.c\n  ../../gettext-runtime/intl/hash-string.c)\nPREFIX_LIST_ITEMS(msgfmt_SOURCES \"gettext-tools/src/\")\n\nadd_executable(msgfmt ${msgfmt_SOURCES})\ntarget_link_libraries(msgfmt libgettextsrc)\nadd_dependencies(msgfmt libgettextsrc libintl)\n```\n\n----------------------------------------\n\nTITLE: Custom SpellFileMissing Autocommand\nDESCRIPTION: Example of creating a custom autocommand to handle missing spell files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n:au SpellFileMissing * call Download_spell_file(expand('<amatch>'))\n```\n\n----------------------------------------\n\nTITLE: Enabling Ruby Classes in Global Scope for Omni Completion\nDESCRIPTION: Vim configuration to enable parsing the entire buffer to add classes to Ruby completion results, which is turned off by default.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rubycomplete_classes_in_global = 1\n```\n\n----------------------------------------\n\nTITLE: Setting IA64 Filetype for *.inc Files\nDESCRIPTION: This snippet configures Vim to recognize files with the `.inc` extension as IA64 assembly files.  This is done by setting the 'g:filetype_inc' variable to \"ia64\" in your vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_59\n\nLANGUAGE: vim\nCODE:\n```\n\t:let g:filetype_inc = \"ia64\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Abbreviations in VimScript\nDESCRIPTION: This snippet shows how to create basic abbreviations for common typing mistakes. It uses the 'iabbrev' command to define automatic corrections.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_28\n\nLANGUAGE: VimScript\nCODE:\n```\niabbrev teh the\niabbrev otehr other\niabbrev wnat want\niabbrev synchronisation\n    \\ synchronization\nlet s:count = 4\n```\n\n----------------------------------------\n\nTITLE: Command Line Abbreviation Example in Neovim\nDESCRIPTION: Shows how to use command abbreviations with the :substitute command and set options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:s[ubstitute]\n:set autoindent\n:set ai\n```\n\n----------------------------------------\n\nTITLE: Example .netrc File Configuration for Network Authentication\nDESCRIPTION: Format for a .netrc file that stores machine login credentials for automatic authentication with FTP and other network protocols.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nmachine {full machine name} login {user-id} password \"{password}\"\ndefault login {user-id} password \"{password}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim Version Information\nDESCRIPTION: Sets version numbers for Neovim, including major, minor, patch versions, and API compatibility levels for plugin developers.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# If not in a git repo (e.g., a tarball) these tokens define the complete\n# version string, else they are combined with the result of `git describe`.\nset(NVIM_VERSION_MAJOR 0)\nset(NVIM_VERSION_MINOR 12)\nset(NVIM_VERSION_PATCH 0)\nset(NVIM_VERSION_PRERELEASE \"-dev\") # for package maintainers\n\n# API level\nset(NVIM_API_LEVEL 14)        # Bump this after any API/stdlib change.\nset(NVIM_API_LEVEL_COMPAT 0)  # Adjust this after a _breaking_ API change.\nset(NVIM_API_PRERELEASE true)\n```\n\n----------------------------------------\n\nTITLE: Bitwise XOR Operation in Vim\nDESCRIPTION: Example of using the xor() function to perform a bitwise XOR operation on a number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_296\n\nLANGUAGE: vim\nCODE:\n```\nlet bits = xor(bits, 0x80)\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Comparisons in Lua\nDESCRIPTION: This snippet provides examples of safe comparisons of bitwise operations with hexadecimal literals in Lua. It advises against using hex literals larger than a signed 32-bit integer and suggests converting them using bit.tobit() for accurate comparisons across platforms.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n        bit.bor(x, 1) == bit.tobit(0xffffffff)\n```\n\n----------------------------------------\n\nTITLE: Selecting Euphoria Version for Syntax Highlighting\nDESCRIPTION: Configures Vim to use either Euphoria 3 or Euphoria 4 syntax highlighting for Euphoria files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_30\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:filetype_euphoria = \"euphoria3\"\n\" or\nlet g:filetype_euphoria = \"euphoria4\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Spell File URL\nDESCRIPTION: Configuration for customizing the spell file download location using a different URL.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nlet g:spellfile_URL = 'https://ftp.nluug.nl/vim/runtime/spell'\n```\n\n----------------------------------------\n\nTITLE: Enabling Plugins in Neovim Configuration\nDESCRIPTION: Basic configuration to enable plugins and Netrw functionality in Vim/Neovim. Sets non-compatible mode and enables filetype plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimscript\nCODE:\n```\nset nocp                    \" 'compatible' is not set\nfiletype plugin on          \" plugins are enabled\n```\n\n----------------------------------------\n\nTITLE: Disabling Inform Library Symbol Highlighting\nDESCRIPTION: This snippet demonstrates how to disable highlighting of Inform Library symbols.  The 'inform_highlight_simple' variable is set to 1 in your Vim startup file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_60\n\nLANGUAGE: vim\nCODE:\n```\n\t:let inform_highlight_simple=1\n```\n\n----------------------------------------\n\nTITLE: Vim Text Change Command Example\nDESCRIPTION: Example of a Vim mapping command that modifies the behavior of 'cw' to include trailing whitespace when changing a word.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:map cw dwi\n```\n\n----------------------------------------\n\nTITLE: OpenBSD CMake Build Instructions\nDESCRIPTION: These commands create necessary directories, configure cmake and build neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_32\n\nLANGUAGE: Shell\nCODE:\n```\n\"mkdir .deps\\ncd .deps\\ncmake ../cmake.deps/\\ngmake\\ncd ..\\nmkdir build\\ncd build\\ncmake ..\\ngmake\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Gettext Tools in CMake\nDESCRIPTION: This snippet sets the include directories for the msgmerge, msgfmt, xgettext, and libgettextsrc targets.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET msgmerge msgfmt xgettext libgettextsrc APPEND PROPERTY\n  INCLUDE_DIRECTORIES\n    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-runtime/intl\n    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/libgettextpo\n    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/gnulib-lib\n    ${CMAKE_CURRENT_SOURCE_DIR}/gettext-tools/gnulib-lib/libcroco\n    ${CMAKE_CURRENT_SOURCE_DIR}/build-aux/snippet\n    ${CMAKE_CURRENT_SOURCE_DIR}/libtextstyle/lib\n    ${CMAKE_CURRENT_SOURCE_DIR}/libtextstyle/lib/libcroco\n    ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl\n    ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools\n    ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/gnulib-lib\n    ${CMAKE_CURRENT_BINARY_DIR}/libtextstyle/lib\n    ${CMAKE_CURRENT_BINARY_DIR}/libtextstyle/lib/textstyle\n    ${LIBICONV_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Mapping SpecChangelog Command in Vim\nDESCRIPTION: Default mapping provided by the spec_chglog plugin that binds the SpecChangelog functionality to the LocalLeader+c key combination in spec files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_spec.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n:map <buffer> <LocalLeader>c <Plug>SpecChangelog\n```\n\n----------------------------------------\n\nTITLE: Removing Default Popup Menu in Neovim\nDESCRIPTION: Remove the default popup menu without disabling the mouse in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_8\n\nLANGUAGE: viml\nCODE:\n```\naunmenu PopUp\nautocmd! nvim.popupmenu\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Entries in Vim\nDESCRIPTION: Shows different ways to access and modify dictionary entries using bracket notation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_45\n\nLANGUAGE: vim\nCODE:\n```\n:let val = mydict[\"one\"]\n:let mydict[\"four\"] = 4\n```\n\n----------------------------------------\n\nTITLE: Character Mapping Table - Latin, Greek and Cyrillic Letters\nDESCRIPTION: A structured mapping between Unicode characters and their input sequences. Each line contains the character, its input combination, Unicode hex code, decimal code, and description.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nű\tu\"\t0171\t0369\tLATIN SMALL LETTER U WITH DOUBLE ACUTE\nŲ\tU;\t0172\t0370\tLATIN CAPITAL LETTER U WITH OGONEK\nų\tu;\t0173\t0371\tLATIN SMALL LETTER U WITH OGONEK\nŴ\tW>\t0174\t0372\tLATIN CAPITAL LETTER W WITH CIRCUMFLEX\n```\n\n----------------------------------------\n\nTITLE: Running Release Script for Neovim\nDESCRIPTION: This command runs the release script for Neovim, which requires the git cliff tool. It is used to generate release notes and update release assets.\nSOURCE: https://github.com/neovim/neovim/blob/master/MAINTAIN.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/release.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Groff Features in NROFF Syntax\nDESCRIPTION: Activates extra syntax highlighting features for GNU groff in NROFF files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_90\n\nLANGUAGE: vim\nCODE:\n```\n:let nroff_is_groff = 1\n```\n\n----------------------------------------\n\nTITLE: Displaying a Manpage with Vertical Split in Neovim\nDESCRIPTION: This command uses the `:Man` command with the `:vertical` modifier to display the manpage for `printf` in a vertical split window. It requires Neovim and the `Man` command, which is part of the manpage plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n\":vertical Man printf\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Functional Test in Neovim\nDESCRIPTION: Similar to the unit test command, this allows the user to run a specific functional test by setting the TEST_FILE environment variable. It supports both make and cmake.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTEST_FILE=test/functional/foo.lua make functionaltest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake -E env \"TEST_FILE=test/functional/foo.lua\" cmake --build build --target functionaltest\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Binding in Diff Mode\nDESCRIPTION: Shows how to temporarily disable scroll binding between diff windows, allowing independent scrolling.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n:set noscrollbind\n```\n\n----------------------------------------\n\nTITLE: Character to Number Conversion Examples in Vim\nDESCRIPTION: Demonstrates char2nr() function usage to convert characters to their numeric ASCII/Unicode values.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_30\n\nLANGUAGE: vim\nCODE:\n```\necho char2nr(\" \")\t\" returns 32\necho char2nr(\"ABC\")\t\" returns 65\necho char2nr(\"á\")\t\" returns 225\necho char2nr(\"á\"[0])\t\" returns 195\necho char2nr(\"\\<M-x>\")\t\" returns 128\n```\n\n----------------------------------------\n\nTITLE: Deterministic Code Generation Improvements\nDESCRIPTION: Several enhancements have been made to the code generation scripts to increase determinism. Additionally, a new build parameter, `LUA_GEN_PRG`, has been introduced to resolve some issues related to reproducibility.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Disabling VHDL generic/port mapping alignment\nDESCRIPTION: Turns off the default alignment of generic/port mapping statements in VHDL. By default, these statements are aligned for better readability.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nlet g:vhdl_indent_genportmap = 0\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Neovim\nDESCRIPTION: Commands to uninstall Neovim using CMake target or manual removal of installed files.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsudo cmake --build build/ --target uninstall\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundled Busted Testing Framework in CMake\nDESCRIPTION: Sets up the option to use a bundled version of the Busted testing framework for Lua, with the ability to toggle between bundled and system versions.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\noption(USE_BUNDLED_BUSTED \"Use bundled busted\" ON)\nif(USE_BUNDLED_BUSTED)\n  get_externalproject_options(lua_dev_deps ${DEPS_IGNORE_SHA})\n  ExternalProject_Add(lua_dev_deps\n    DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/lua_dev_deps\n    SOURCE_DIR ${DEPS_SHARE_DIR}\n    CONFIGURE_COMMAND \"\"\n    BUILD_COMMAND \"\"\n    INSTALL_COMMAND \"\"\n    EXCLUDE_FROM_ALL TRUE\n    ${EXTERNALPROJECT_OPTIONS})\nelse()\n  add_custom_target(lua_dev_deps)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring LPC Syntax Highlighting in Vim\nDESCRIPTION: Sets options for LPC (Lars Pensjö C) syntax highlighting, including recognizing .c files as LPC and setting compatibility options for different LPC versions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_78\n\nLANGUAGE: VimScript\nCODE:\n```\n:let lpc_syntax_for_c = 1\n\n:let lpc_pre_v22 = 1\n\n:let lpc_compat_32 = 1\n\n:let lpc_use_lpc4_syntax = 1\n```\n\n----------------------------------------\n\nTITLE: Selectively Enabling LaTeX Syntax Features with VimL\nDESCRIPTION: Configuration to selectively enable specific LaTeX syntax highlighting features. Each letter represents a different feature that can be enabled independently.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_138\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_fast= \"M\"\n```\n\n----------------------------------------\n\nTITLE: OpenBSD Build Prerequisites\nDESCRIPTION: Installs the necessary packages on OpenBSD systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_31\n\nLANGUAGE: Shell\nCODE:\n```\n\"doas pkg_add gmake cmake curl gettext-tools\"\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim on Ubuntu - Basic\nDESCRIPTION: Commands to install Neovim and Python support on Ubuntu using apt package manager.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install neovim\nsudo apt install python3-neovim\n```\n\n----------------------------------------\n\nTITLE: Customizing Netrw File Marking Highlight Group in VimL\nDESCRIPTION: Commands to change the highlighting for marked files in Netrw. By default, marked files use the 'netrwMarkFile' group linked to 'Identifier', but this can be customized by clearing the default and linking to a different highlighting group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_30\n\nLANGUAGE: viml\nCODE:\n```\nhighlight clear netrwMarkFile\nhi link netrwMarkFile ..whatever..\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim via Snap - Nightly\nDESCRIPTION: Command to install the nightly (edge) version of Neovim using Snap package manager.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap install --edge nvim --classic\n```\n\n----------------------------------------\n\nTITLE: Vim Help File Format Definition\nDESCRIPTION: Vim modeline configuration defining the help file format settings, including text width, tab stops, file type, and line wrapping options\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_88\n\nLANGUAGE: vimdoc\nCODE:\n```\nvim:tw=78:ts=8:noet:ft=help:norl:\n```\n\n----------------------------------------\n\nTITLE: Lua Function Documentation Template\nDESCRIPTION: Template showing the standard format for documenting Lua functions using LuaLS annotations, including brief description, detailed explanation, parameter types, and return values.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n--- {Brief}\n---\n--- {Long explanation}\n---\n--- @param arg1 type {description}\n--- @param arg2 type {description}\n--- ...\n---\n--- @return type {description}\n```\n\n----------------------------------------\n\nTITLE: Checking for shellslash Support in Vim\nDESCRIPTION: Code snippet to check if the 'shellslash' option is available in the current Vim/Neovim instance. This is useful for cross-platform scripts as 'shellslash' only works on systems where backslash can be used as a path separator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_63\n\nLANGUAGE: vim\nCODE:\n```\nif exists('+shellslash')\n```\n\n----------------------------------------\n\nTITLE: Enabling TeX Syntax Folding\nDESCRIPTION: Setting a variable to enable syntax-based folding for TeX/LaTeX documents, which will fold parts, chapters, sections, etc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_130\n\nLANGUAGE: vim\nCODE:\n```\nlet g:tex_fold_enabled=1\n```\n\n----------------------------------------\n\nTITLE: Configuring auto-pairs for Rust (Vim)\nDESCRIPTION: This global variable controls whether the plugin overrides the default behavior of the auto-pairs plugin for Rust files. Setting it to 1 disables the override, preserving the default auto-pairs configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\n                                                  *g:rust_keep_autopairs_default*\ng:rust_keep_autopairs_default ~\n\n\tDon't override auto-pairs default for the Rust filetype. The default\n\tis 0.\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Gettext Tools Components in CMake\nDESCRIPTION: Defines sets of source files for the Gettext tools components, including common sources, format-specific sources, and the main gettextsrc library. These provide the implementation for translation file manipulation tools.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(libgettextsrc_COMMON_SOURCE\n  message.c po-error.c po-xerror.c read-catalog-abstract.c po-lex.c\n  po-gram-gen.c po-charset.c read-po.c read-properties.c read-stringtable.c\n  open-catalog.c dir-list.c str-list.c)\n\nset(libgettextsrc_FORMAT_SOURCE\n  format.c format-invalid.h format-c.c format-c-parse.h format-sh.c\n  format-python.c format-python-brace.c format-lisp.c format-elisp.c\n  format-librep.c format-scheme.c format-java.c format-csharp.c format-awk.c\n  format-pascal.c format-ycp.c format-tcl.c format-perl.c format-perl-brace.c\n  format-php.c format-gcc-internal.c format-gfc-internal.c format-qt.c\n  format-qt-plural.c format-kde.c format-kde-kuit.c format-boost.c format-lua.c\n  format-javascript.c)\n\nset(libgettextsrc_SOURCES\n  ${libgettextsrc_COMMON_SOURCE} read-catalog.c\n  write-catalog.c write-properties.c write-stringtable.c write-po.c\n  msgl-ascii.c msgl-iconv.c msgl-equal.c msgl-cat.c msgl-header.c msgl-english.c\n  msgl-check.c file-list.c msgl-charset.c po-time.c plural-exp.c plural-eval.c\n  plural-table.c quote.h sentence.h sentence.c\n  ${libgettextsrc_FORMAT_SOURCE}\n  read-desktop.c locating-rule.c its.c search-path.c)\nPREFIX_LIST_ITEMS(libgettextsrc_SOURCES \"gettext-tools/src/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP Command with Passive Mode in Vim Script\nDESCRIPTION: Sets the global variable for the FTP command, including the passive mode option.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_18\n\nLANGUAGE: Vim script\nCODE:\n```\nlet g:netrw_ftp_cmd= \"ftp -p\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to CMake Build\nDESCRIPTION: Includes subdirectories in the CMake build process, such as the core Neovim source, configuration, runtime files, and tests.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/nvim)\nadd_subdirectory(cmake.config)\nadd_subdirectory(runtime)\nadd_subdirectory(test)\n```\n\n----------------------------------------\n\nTITLE: Getting Thread Priority in Lua with Libuv\nDESCRIPTION: Retrieves the scheduling priority of a specified thread. The returned priority value is platform-dependent.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_63\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_getpriority({thread})\n```\n\n----------------------------------------\n\nTITLE: Nested List Creation in Vimscript\nDESCRIPTION: This snippet shows how to create nested lists in Vimscript.  A nested list is created by using a list as an item within another list. This allows for multi-dimensional data structures.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n\t:let nestlist = [[11, 12], [21, 22], [31, 32]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Lua Language Server Download in CMake\nDESCRIPTION: Sets up variables for downloading a specific version of the Lua Language Server from GitHub, including version, architecture, and URL configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nset(LUALS_VERSION 3.14.0)\nset(LUALS \"lua-language-server-${LUALS_VERSION}-${CMAKE_SYSTEM_NAME}-${LUALS_ARCH}\")\nset(LUALS_TARBALL ${LUALS}.tar.gz)\nset(LUALS_URL https://github.com/LuaLS/lua-language-server/releases/download/${LUALS_VERSION}/${LUALS_TARBALL})\n```\n\n----------------------------------------\n\nTITLE: Changing Current Working Directory in Lua with Libuv\nDESCRIPTION: Changes the current working directory to the specified path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_72\n\nLANGUAGE: lua\nCODE:\n```\nuv.chdir({cwd})\n```\n\n----------------------------------------\n\nTITLE: Filetype Detection (Lua)\nDESCRIPTION: This snippet highlights how filetype detection in Neovim is implemented using Lua tables within `$VIMRUNTIME/lua/vim/filetype.lua`.  It describes the order of precedence (filename, pattern, extension) and the differences in pattern matching, using Lua patterns instead of Vim regexes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\n\"Nvim's filetype detection behavior matches Vim, but is implemented as part of\n|vim.filetype| (see `$VIMRUNTIME/lua/vim/filetype.lua`). The logic is encoded in\nthree tables, listed in order of precedence (the first match is returned):\n1. `filename` for literal full path or basename lookup;\n2. `pattern` for matching filenames or paths against |lua-patterns|, optimized\n   for fast lookup;\n3. `extension` for literal extension lookup.\n\nLogic that requires checking file contents or buffer variables is implemented\nin `$VIMRUNTIME/lua/vim/filetype/detect.lua`.\"\n```\n\n----------------------------------------\n\nTITLE: Checking for _BitScanForward64 function in C\nDESCRIPTION: Tests if the compiler supports the _BitScanForward64 intrinsic function from intrin.h, which is typically available on Windows platforms for bit manipulation.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#include <intrin.h>\n\nint main(void)\n{\n  unsigned long index;\n  unsigned char mask = 0x8000;\n  _BitScanForward64(&index, mask);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: File Truncate Operation in libuv\nDESCRIPTION: Truncates a file to a specified length. Equivalent to ftruncate(2) system call. Takes a file descriptor and offset.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_54\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_ftruncate({fd}, {offset} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Getting Free System Memory in Lua with Libuv\nDESCRIPTION: Returns the amount of free system memory in bytes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_76\n\nLANGUAGE: lua\nCODE:\n```\nuv.get_free_memory()\n```\n\n----------------------------------------\n\nTITLE: Other comment examples in Vim\nDESCRIPTION: This snippet shows more comment examples to demonstrate how to set comments with different flags. It includes examples for lines starting with \"*\", \">\", and \"- \" with different flags. It uses \"b:\" to avoid pointer dereference and \"n:\" to manage nested comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/change.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n   \"b:*\"\tIncludes lines starting with \"*\", but not if the \"*\" is\n\t\tfollowed by a non-blank.  This avoids a pointer dereference\n\t\tlike \"*str\" to be recognized as a comment.\n   \"n:>\"\tIncludes a line starting with \">\", \">>\">, \">>>\", etc.\n   \"fb:-\"\tFormat a list that starts with \"- \".\n\n```\n\n----------------------------------------\n\nTITLE: Setting Local Leader for Plugin Mappings\nDESCRIPTION: Configuration to set custom local leader key for filetype plugin mappings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nlet maplocalleader = \",\"\n```\n\n----------------------------------------\n\nTITLE: Setting Build Output Directory and .gitignore Configuration\nDESCRIPTION: Creates a .gitignore file in the build directory when out-of-source builds are used, which helps keep the build directory clean in version control.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)\n  # Auto-create a .gitignore in the specified \"build\" directory.\n  file(GENERATE OUTPUT .gitignore CONTENT \"*\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: macOS Homebrew Build Prerequisites\nDESCRIPTION: Installs the necessary packages on macOS systems using Homebrew to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_33\n\nLANGUAGE: Shell\nCODE:\n```\n\"brew install ninja cmake gettext curl\"\n```\n\n----------------------------------------\n\nTITLE: Finding only macros defined with #define (Vim)\nDESCRIPTION: This snippet shows how to find only macros defined with `#define` using the `[D` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_32\n\nLANGUAGE: vim\nCODE:\n```\n\"[D\"\n```\n\n----------------------------------------\n\nTITLE: Terminal-Dependent Settings Configuration\nDESCRIPTION: Example configuration for setting terminal-specific options based on $TERM environment variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nif $TERM =~ '^\\(rxvt\\|screen\\|interix\\|putty\\)\\(-.*\\)\\?$'\n    set notermguicolors\nelseif $TERM =~ '^\\(tmux\\|iterm\\|vte\\|gnome\\)\\(-.*\\)\\?$'\n    set termguicolors\nelseif $TERM =~ '^\\(xterm\\)\\(-.*\\)\\?$'\n    if $XTERM_VERSION != ''\n        set termguicolors\n    elseif $KONSOLE_PROFILE_NAME != ''\n        set termguicolors\n    elseif $VTE_VERSION != ''\n        set termguicolors\n    else\n        set notermguicolors\n    endif\nelseif $TERM =~ ...\n    ... and so forth ...\nendif\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Manual Display Settings in Vim\nDESCRIPTION: Commands to make help file markup visible by disabling concealment and adjusting highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_01.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:set conceallevel=0\n:hi link HelpBar Normal\n:hi link HelpStar Normal\n```\n\n----------------------------------------\n\nTITLE: Setting LC_CTYPE Environment Variable\nDESCRIPTION: Shell command example for setting the LC_CTYPE environment variable to support UTF-8 character encoding.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsetenv LC_CTYPE en_US.utf8\n```\n\n----------------------------------------\n\nTITLE: Cursor Position Mapping Examples in Vim\nDESCRIPTION: Three different ways to map the GG key to display the screen column position using screencol()\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_212\n\nLANGUAGE: vim\nCODE:\n```\nnnoremap <expr> GG \":echom \" .. screencol() .. \"\\n\"\nnnoremap <silent> GG :echom screencol()<CR>\nnoremap GG <Cmd>echom screencol()<CR>\n```\n\n----------------------------------------\n\nTITLE: Disabling Hare Recommended Style\nDESCRIPTION: Configuration to disable the default Hare style guide settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nlet g:hare_recommended_style = 0\n```\n\n----------------------------------------\n\nTITLE: Rust Plugin Mappings (Vim)\nDESCRIPTION: This section mentions that the plugin defines mappings for [[ and ]] to support hanging indents.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_33\n\nLANGUAGE: vim\nCODE:\n```\nThis plugin defines mappings for |[[| and |]]| to support hanging indents.\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Function Example\nDESCRIPTION: Example command showing how to run a specific test function (open_delay) from the test_channel.vim file.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/README.txt#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n../vim -u NONE -S runtest.vim test_channel.vim open_delay\n```\n\n----------------------------------------\n\nTITLE: Enabling Spell Checking in Verbatim Zones for LaTeX with VimL\nDESCRIPTION: Configuration to enable spell checking in verbatim zones of LaTeX documents. By default, verbatim zones (often used for source code) are not spell-checked.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_134\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_verbspell= 1\n```\n\n----------------------------------------\n\nTITLE: Setting LITE Syntax Highlighting Options in Vim\nDESCRIPTION: Configures options for LITE syntax highlighting, including SQL syntax highlighting in strings and setting the minimum number of lines for syncing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_77\n\nLANGUAGE: VimScript\nCODE:\n```\n:let lite_sql_query = 1\n\n:let lite_minlines = 200\n```\n\n----------------------------------------\n\nTITLE: Highlight Attribute Definition in Neovim JSON\nDESCRIPTION: This snippet allows the definition of highlight attributes in Neovim, providing a framework for customizing the visual presentation of text within the editor.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ui.txt#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\"hl_attr_define\", id, rgb_attr, cterm_attr, info] ~\n\tAdd a highlight with `id` to the highlight table, with the\nattributes specified by the `rgb_attr` and `cterm_attr` dicts, with the\nfollowing (all optional) keys.\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Sine in Vimscript\nDESCRIPTION: The asin() function returns the arc sine of a number in radians. It accepts inputs in the range [-1, 1] and returns a float in the range [-pi/2, pi/2].\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_8\n\nLANGUAGE: vimscript\nCODE:\n```\necho asin(0.8)\n```\n\nLANGUAGE: vimscript\nCODE:\n```\necho asin(-0.5)\n```\n\n----------------------------------------\n\nTITLE: Initializing Struct with `memset` and Struct Type\nDESCRIPTION: This code snippet shows the use of `memset` with a struct type to initialize all members of the struct to zero. Using the struct type in `sizeof` ensures that the correct size is set with null bytes, which is useful for preparing struct for new data input.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nmemset(&data, 0, sizeof(Struct));\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Syntax Highlighting in Vim\nDESCRIPTION: Sets options for XML syntax highlighting, including namespace transparency and syntax folding.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_153\n\nLANGUAGE: vim\nCODE:\n```\n:let g:xml_namespace_transparent=1\n\n:let g:xml_syntax_folding = 1\n:set foldmethod=syntax\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Linting in Neovim (Lua)\nDESCRIPTION: This snippet disables query linting completely by setting `vim.g.query_lint_on` to an empty table.  This prevents linting from occurring on any event. Requires treesitter and the query plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\n\tvim.g.query_lint_on = {}\n```\n\n----------------------------------------\n\nTITLE: Lua Printing with Null Character\nDESCRIPTION: Demonstrates how Lua printing handles null characters differently in Neovim compared to Vim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n:lua print(\"a\\0b\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uninstallation Target in CMake\nDESCRIPTION: Creates an uninstall target that uses a helper script to remove installed files, providing a clean way to remove Neovim from the system.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(uninstall\n  COMMAND ${CMAKE_COMMAND} -P ${PROJECT_SOURCE_DIR}/cmake/UninstallHelper.cmake)\n```\n\n----------------------------------------\n\nTITLE: Vim Version Conditional Examples\nDESCRIPTION: Demonstrates version-specific code execution using if statements\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_101\n\nLANGUAGE: vim\nCODE:\n```\n:if version >= 500\n:  version-5-specific-commands\n:endif\n\n:if version >= 600\n:  execute \"silent 1,$delete\"\n:endif\n```\n\n----------------------------------------\n\nTITLE: Vim Configuration (Vim)\nDESCRIPTION: This snippet sets various Vim settings specific for help files, including text width, tab settings, file type, and more.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_34\n\nLANGUAGE: vim\nCODE:\n```\nvim:tw=78:sw=4:noet:ts=8:ft=help:norl:\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Folding Types for Shell Scripts\nDESCRIPTION: Setting the shell folding option to 3 to enable both function and heredoc folding in shell scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_123\n\nLANGUAGE: vim\nCODE:\n```\nlet g:sh_fold_enabled= 3\n```\n\n----------------------------------------\n\nTITLE: Building with Makefile and Specific Bundled Dependencies\nDESCRIPTION: This shows how to build Neovim using Make and CMake flags for configuring specific bundled dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\n\"make BUNDLED_CMAKE_FLAG=\\\"-DUSE_BUNDLED=OFF -DUSE_BUNDLED_LUV=ON -DUSE_BUNDLED_TS=ON -DUSE_BUNDLED_LIBUV=ON\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies with Ninja\nDESCRIPTION: Commands for installing and using ninja build system for faster Neovim builds.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install ninja-build\nmake distclean\nmake  # Nvim build system uses ninja automatically, if available.\n```\n\n----------------------------------------\n\nTITLE: Setting Sign Column Color in Vim\nDESCRIPTION: Example showing how to set the background color of the sign column using the SignColumn highlight group\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:highlight SignColumn guibg=darkgrey\n```\n\n----------------------------------------\n\nTITLE: Navigating to Location List Error Above Current Line\nDESCRIPTION: Command for going to the error above the current line in the current buffer from the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:[count]lab[ove]\n```\n\n----------------------------------------\n\nTITLE: Defining Ruby Function in Vim Script\nDESCRIPTION: Shows how to define a Vim function that includes Ruby code using a heredoc syntax. The Ruby code defines a Garnet class that interacts with the Vim buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\nfunction! RedGem()\nruby << EOF\nclass Garnet\n\tdef initialize(s)\n\t\t@buffer = VIM::Buffer.current\n\t\tvimputs(s)\n\tend\n\tdef vimputs(s)\n\t\t@buffer.append(@buffer.count,s)\n\tend\nend\ngem = Garnet.new(\"pretty\")\nEOF\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Vim Exit Command\nDESCRIPTION: Shows how to quit Vim without saving changes using the force quit command\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:q!\n```\n\n----------------------------------------\n\nTITLE: Configuring makeprg with LaTeX\nDESCRIPTION: Sets the makeprg option to run LaTeX with nonstopmode and input parameters, using '$*' as a placeholder for arguments that will be passed to the :make command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_49\n\nLANGUAGE: viml\nCODE:\n```\nset makeprg=latex\\ \\\\nonstopmode\\ \\\\input\\{$*}\n```\n\n----------------------------------------\n\nTITLE: Including External Syntax Files in Vim\nDESCRIPTION: Example of including an existing syntax file and extending it with additional definitions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_44.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n:runtime! syntax/c.vim\n:syntax keyword cppStatement new delete this friend using\n```\n\n----------------------------------------\n\nTITLE: Defining and Building libintl Sources in CMake\nDESCRIPTION: Defines the source files for the libintl library, adds the required path prefix to each source file, creates the library target, and sets up compilation properties. This library provides the core internationalization functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(libintl_SOURCES\n  bindtextdom.c dcgettext.c dcigettext.c dcngettext.c dgettext.c dngettext.c\n  explodename.c finddomain.c gettext.c hash-string.c intl-compat.c l10nflist.c\n  langprefs.c loadmsgcat.c localcharset.c localealias.c localename-table.c\n  localename.c lock.c log.c ngettext.c osdep.c\n  plural-exp.c plural.c printf.c relocatable.c setlocale.c textdomain.c\n  threadlib.c version.c xsize.c)\n\nPREFIX_LIST_ITEMS(libintl_SOURCES \"gettext-runtime/intl/\")\n\nadd_library(libintl ${libintl_SOURCES})\ntarget_link_libraries(libintl ${LIBICONV_LIBRARIES})\nset_property(TARGET libintl APPEND PROPERTY INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime\n  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl\n  ${LIBICONV_INCLUDE_DIRS})\nset_property(TARGET libintl APPEND PROPERTY COMPILE_DEFINITIONS\n  BUILDING_LIBINTL\n  IN_LIBINTL\n  ENABLE_RELOCATABLE=1\n  IN_LIBRARY\n  NO_XMALLOC\n  set_relocation_prefix=libintl_set_relocation_prefix\n  relocate=libintl_relocate\n  HAVE_CONFIG_H)\n```\n\n----------------------------------------\n\nTITLE: Java Method Structure Example\nDESCRIPTION: Example Java code structure showing class and method definitions used to demonstrate method navigation commands [m, ]m, [M, and ]M.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// comment\nclass foo {\n    int method_one() {\n        body_one();\n    }\n    int method_two() {\n        body_two();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vietnamese Language for Neovim Messages\nDESCRIPTION: Commands to change the language of Neovim messages to Vietnamese. This enables localization of the Neovim interface.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vietnamese.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:language vi_VN\n```\n\nLANGUAGE: vim\nCODE:\n```\n:language vi_VN.utf-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Syntax-Based Folding for ZSH Files in Vim\nDESCRIPTION: Activates syntax-based folding for ZSH files in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_156\n\nLANGUAGE: vim\nCODE:\n```\n:let g:zsh_fold_enable = 1\n```\n\n----------------------------------------\n\nTITLE: Echoing Messages with Highlighting in Vim Script\nDESCRIPTION: Demonstrates how to echo a message with custom highlighting using echohl command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_108\n\nLANGUAGE: vim\nCODE:\n```\n:echohl WarningMsg | echo \"Don't panic!\" | echohl None\n```\n\n----------------------------------------\n\nTITLE: Comparing List Values in Vim\nDESCRIPTION: Demonstrates that list comparison in Vim is stricter than number/string comparison, with no automatic type conversion.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n:echo alist == blist\n```\n\n----------------------------------------\n\nTITLE: Defining a PREFIX_LIST_ITEMS Macro in CMake\nDESCRIPTION: A CMake macro that adds a prefix to each item in a list. It takes a list variable name and a prefix string as parameters, and modifies the list in-place by adding the prefix to each item.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Adds PREFIX to each item in LIST\nmacro(PREFIX_LIST_ITEMS LIST PREFIX)\n  string(REPLACE \";\" \";${PREFIX}\" ${LIST} \";${${LIST}}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Force String to Number Conversion in Vimscript\nDESCRIPTION: This shows how to force a string to be interpreted as a number by adding zero to it. This prevents a leading zero from being interpreted as an octal number.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n\t:echo \"0100\" + 0\n```\n\n----------------------------------------\n\nTITLE: Querying CPU Information with LibUV in Lua\nDESCRIPTION: Functions for obtaining information about system CPUs, including parallelism, detailed CPU info, and CPU mask size.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_79\n\nLANGUAGE: lua\nCODE:\n```\nuv.available_parallelism()                          *uv.available_parallelism()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.cpu_info()                                                    *uv.cpu_info()*\n```\n\nLANGUAGE: lua\nCODE:\n```\nuv.cpumask_size()                                           *uv.cpumask_size()*\n```\n\n----------------------------------------\n\nTITLE: NixOS/Nix Neovim Development Configuration\nDESCRIPTION: This Nix expression overrides the default Neovim package to enable tests, set debug build type, add valgrind, and set shell hooks for debugging.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_28\n\nLANGUAGE: Nix\nCODE:\n```\n\"  neovim-dev = (super.pkgs.neovim-unwrapped.override  {\\n    doCheck=true;\\n  }).overrideAttrs(oa:{ \\n    cmakeBuildType=\\\"debug\\\";\\n\\n    nativeBuildInputs = oa.nativeBuildInputs ++ [ self.pkgs.valgrind ];\\n    shellHook = ''\\n      export NVIM_PYTHON_LOG_LEVEL=DEBUG\\n      export NVIM_LOG_FILE=/tmp/log\\n      export VALGRIND_LOG=\\\"$PWD/valgrind.log\\\"\\n    '';\\n  });\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Profiling settings\nDESCRIPTION: These commands demonstrate how to stop profiling by deleting previously set profiling arguments. This will reset profiling for a given file or function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n\"profdel func MyFunc\"\n\"profdel file MyScript.vim\"\n\"profdel here\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sublists with Omitting Indices in Vimscript\nDESCRIPTION: This snippet shows how to create sublists by omitting the start or end index in the slicing notation. Omitting the start index defaults to 0, and omitting the end index defaults to -1.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n\t:let endlist = mylist[2:]\t\" from item 2 to the end: [3, \"four\"]\n\t:let shortlist = mylist[2:2]\t\" List with one item: [3]\n\t:let otherlist = mylist[:]\t\" make a copy of the List\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with CMake Default Configuration\nDESCRIPTION: Commands to build and install Neovim using CMake with RelWithDebInfo build type. These commands handle the basic build process and system-wide installation.\nSOURCE: https://github.com/neovim/neovim/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake CMAKE_BUILD_TYPE=RelWithDebInfo\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Setting Vim Fold Method in TeX Document\nDESCRIPTION: A modeline to set the fold method to syntax for a TeX/LaTeX document, to be placed at the end of the file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_131\n\nLANGUAGE: vim\nCODE:\n```\n% vim: fdm=syntax\n```\n\n----------------------------------------\n\nTITLE: Enabling Slackware Keywords in Dircolors Syntax Highlighting\nDESCRIPTION: Configures Vim to recognize and highlight Slackware-specific keywords in dircolors utility output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_24\n\nLANGUAGE: VimScript\nCODE:\n```\nlet dircolors_is_slackware = 1\n```\n\n----------------------------------------\n\nTITLE: Running IWYU Build Configuration\nDESCRIPTION: Commands for running include-what-you-use analysis on the codebase.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmake --preset iwyu\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Configuring Whichwrap Movement Keys\nDESCRIPTION: Sets up cursor movement wrapping between lines using arrow keys in Neovim. This configuration allows only left and right arrow keys to wrap around lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_79\n\nLANGUAGE: vim\nCODE:\n```\nset ww=<,>,[,]\n```\n\n----------------------------------------\n\nTITLE: XML Data File Example in Vim\nDESCRIPTION: This Vim script defines an example XML data file format. It demonstrates the structure of the g:xmldata_* variable, which is a Dictionary containing tag names as keys and Lists of possible children and attribute dictionaries as values. The example includes special elements like vimxmlentities, vimxmltaginfo, and vimxmlattrinfo for additional menu information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\n    let g:xmldata_crippled = {\n    \\ \"vimxmlentities\": [\"amp\", \"lt\", \"gt\", \"apos\", \"quot\"],\n    \\ 'vimxmlroot': ['tag1'],\n    \\ 'tag1':\n    \\ [ ['childoftag1a', 'childoftag1b'], {'attroftag1a': [],\n    \\ 'attroftag1b': ['valueofattr1', 'valueofattr2']}],\n    \\ 'childoftag1a':\n    \\ [ [], {'attrofchild': ['attrofchild']}],\n    \\ 'childoftag1b':\n    \\ [ ['childoftag1a'], {'attrofchild': []}],\n    \\ \"vimxmltaginfo\": {\n    \\ 'tag1': ['Menu info', 'Long information visible in preview window']},\n    \\ 'vimxmlattrinfo': {\n    \\ 'attrofchild': ['Menu info', 'Long information visible in preview window']}}\n```\n\n----------------------------------------\n\nTITLE: Checking System Locales in Unix\nDESCRIPTION: Command to display supported locale names on Unix systems\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n:!locale -a\n```\n\n----------------------------------------\n\nTITLE: Terminal UI Client Info Configuration\nDESCRIPTION: Default client information configuration that the UI client sets when connecting to the Neovim server.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nclient = {\n  attributes = {\n    license = 'Apache 2',\n    pid = …,\n    website = 'https://neovim.io',\n  },\n  name = 'nvim-tui',\n  type = 'ui',\n  version = { … },\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine and Hyperbolic Sine in Neovim\nDESCRIPTION: Shows examples of using the sin and sinh functions to calculate the sine and hyperbolic sine of numeric values in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_246\n\nLANGUAGE: vim\nCODE:\n```\necho sin(100)\necho sin(-4.01)\n\necho sinh(0.5)\necho sinh(-0.9)\n```\n\n----------------------------------------\n\nTITLE: Disable gzip plugin loading in Nvim\nDESCRIPTION: This snippet demonstrates how to prevent the 'gzip' plugin from loading in Nvim by setting the `loaded_gzip` variable. This is useful when you want to disable the plugin's functionality without removing the plugin files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_gzip.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\t:let loaded_gzip = 1\n\n```\n\n----------------------------------------\n\nTITLE: Prompt Buffer Setting Example in Vim\nDESCRIPTION: Demonstrates how to set the prompt text for a prompt buffer\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_197\n\nLANGUAGE: vim\nCODE:\n```\ncall prompt_setprompt(bufnr(''), 'command: ')\n```\n\n----------------------------------------\n\nTITLE: Inserting Tags Header with gnat#Insert_Tags_Header Function\nDESCRIPTION: Function to add tag file header information (the !_TAG_ lines) to the current file, which are missing from GNAT XREF output.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\ngnat#Insert_Tags_Header()\n```\n\n----------------------------------------\n\nTITLE: Updating localization files\nDESCRIPTION: Command to update the translation file for a specific language with the latest strings from the codebase.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build build --target update-po-$LANG\n```\n\n----------------------------------------\n\nTITLE: Example Function Code Block - VimL\nDESCRIPTION: Shows how to format a code block in Vim help documentation using > and < markers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_8\n\nLANGUAGE: viml\nCODE:\n```\nfunction Example_Func()\n    echo \"Example\"\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Concatenating Blobs - Vim Script\nDESCRIPTION: This snippet explains how to concatenate two Blobs using the '+' operator and also demonstrates in-place concatenation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_64\n\nLANGUAGE: vim\nCODE:\n```\n:let longblob = myblob + 0z4455\n:let myblob += 0z6677\n```\n\n----------------------------------------\n\nTITLE: Processing Package Documentation\nDESCRIPTION: Iterates through packages to generate help tags and install documentation files for each package.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB PACKAGES CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/runtime/pack/dist/opt/*)\n\nset(GENERATED_PACKAGE_TAGS)\nforeach(PACKAGE ${PACKAGES})\n  get_filename_component(PACKNAME ${PACKAGE} NAME)\n  file(GLOB \"${PACKNAME}_DOC_FILES\" CONFIGURE_DEPENDS ${PACKAGE}/doc/*.txt)\n  if(${PACKNAME}_DOC_FILES)\n    file(MAKE_DIRECTORY ${GENERATED_PACKAGE_DIR}/${PACKNAME})\n    add_custom_command(OUTPUT \"${GENERATED_PACKAGE_DIR}/${PACKNAME}/doc/tags\"\n      COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${PACKAGE} ${GENERATED_PACKAGE_DIR}/${PACKNAME}\n      COMMAND $<TARGET_FILE:nvim_bin>\n        -u NONE -i NONE -e --headless -c \"helptags doc\" -c quit\n      DEPENDS\n        nvim_bin\n        nvim_runtime_deps\n      WORKING_DIRECTORY \"${GENERATED_PACKAGE_DIR}/${PACKNAME}\"\n    )\n    list(APPEND GENERATED_PACKAGE_TAGS \"${GENERATED_PACKAGE_DIR}/${PACKNAME}/doc/tags\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Retrieving IPv6 Interface Identifier with uv.if_indextoiid()\nDESCRIPTION: Retrieves a network interface identifier suitable for use in an IPv6 scoped address based on the provided interface index.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_87\n\nLANGUAGE: lua\nCODE:\n```\nuv.if_indextoiid({ifindex})\n```\n\n----------------------------------------\n\nTITLE: Setting Vim Modelines for File Configuration\nDESCRIPTION: A modeline configuration for Vim/Neovim that sets text width to 78 characters, tab stops to 8 spaces, filetype to help, disables expandtab and right-to-left mode, and sets fold method to marker.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_58\n\nLANGUAGE: vim\nCODE:\n```\nvim:tw=78:ts=8:ft=help:noet:norl:fdm=marker\n```\n\n----------------------------------------\n\nTITLE: Font Setting Example\nDESCRIPTION: Example of setting a specific X11 font for highlighting\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_191\n\nLANGUAGE: vim\nCODE:\n```\nfont=-misc-fixed-bold-r-normal--14-130-75-75-c-70-iso8859-1\n```\n\n----------------------------------------\n\nTITLE: Building xgettext Executable in CMake\nDESCRIPTION: This snippet defines the xgettext executable, sets its sources, links it with libgettextsrc, and adds dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(xgettext_SOURCES\n  xgettext.c xg-pos.c xg-encoding.c xg-mixed-string.c xg-arglist-context.c\n  xg-arglist-callshape.c xg-arglist-parser.c xg-message.c x-c.c x-po.c x-sh.c\n  x-python.c x-lisp.c x-elisp.c x-librep.c x-scheme.c x-smalltalk.c x-java.c\n  x-csharp.c x-awk.c x-ycp.c x-tcl.c x-perl.c x-php.c x-rst.c x-lua.c\n  x-javascript.c x-vala.c x-desktop.c)\nPREFIX_LIST_ITEMS(xgettext_SOURCES \"gettext-tools/src/\")\n\nadd_executable(xgettext ${xgettext_SOURCES})\ntarget_link_libraries(xgettext libgettextsrc)\nadd_dependencies(xgettext libgettextsrc libintl)\n```\n\n----------------------------------------\n\nTITLE: Enabling Select Mode\nDESCRIPTION: Command to enable mouse-based select mode functionality\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:set selectmode+=mouse\n```\n\n----------------------------------------\n\nTITLE: Suppressing Obsolete Keyword Errors in Inform\nDESCRIPTION: This snippet prevents Vim from highlighting obsolete Inform keywords as errors. Setting the 'inform_suppress_obsolete' variable to 1 suppresses these errors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_62\n\nLANGUAGE: vim\nCODE:\n```\n\t:let inform_suppress_obsolete=1\n```\n\n----------------------------------------\n\nTITLE: Vim Help File Header\nDESCRIPTION: Help file header defining the documentation format and basic metadata for Neovim's testing documentation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/testing.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\n*testing.txt*\tNvim\n\n\n\t\t  VIM REFERENCE MANUAL\t  by Bram Moolenaar\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Tree-sitter Markdown Parsers in CMake\nDESCRIPTION: Defines the build configuration for Tree-sitter Markdown parsers used by Neovim. This CMake script builds two modules: the main markdown parser and an inline markdown parser. It suppresses warnings, configures include paths, removes library prefixes, and sets up installation targets.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/MarkdownParserCMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(${PARSERLANG} C)\n\nadd_compile_options(-w)\n\nadd_library(markdown MODULE\ntree-sitter-markdown/src/parser.c\ntree-sitter-markdown/src/scanner.c)\ntarget_include_directories(markdown\n  PRIVATE\n  tree-sitter-markdown/src)\n\nadd_library(markdown_inline MODULE\ntree-sitter-markdown-inline/src/parser.c\ntree-sitter-markdown-inline/src/scanner.c)\ntarget_include_directories(markdown_inline\n  PRIVATE\n  tree-sitter-markdown-inline/src)\n\nset_target_properties(\n  markdown markdown_inline\n  PROPERTIES\n    PREFIX \"\"\n)\n\ninstall(TARGETS markdown markdown_inline LIBRARY DESTINATION lib/nvim/parser)\n\n# vim: set ft=cmake:\n```\n\n----------------------------------------\n\nTITLE: Vim Formatting Configuration for Clang-Format\nDESCRIPTION: Vim configuration snippet to set up clang-format as the formatter.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nif !empty(findfile('.clang-format', ';'))\n  setlocal formatprg=clang-format\\ -style=file\nendif\n```\n\n----------------------------------------\n\nTITLE: Creating a New Thread in Lua with Libuv\nDESCRIPTION: Creates and initializes a new thread using Libuv. The function takes optional options, an entry function or string, and additional arguments to pass to the entry function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_57\n\nLANGUAGE: lua\nCODE:\n```\nuv.new_thread([{options}, ] {entry}, {...})\n```\n\n----------------------------------------\n\nTITLE: Navigating to Location List Error Before Cursor Position\nDESCRIPTION: Command for going to the error before the current cursor position in the current buffer from the location list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:[count]lbe[fore]\n```\n\n----------------------------------------\n\nTITLE: Line Break Matching Patterns\nDESCRIPTION: Demonstrates patterns for matching content across line breaks using \\n and \\_s markers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n/one\\ntwo\n/one\\_stwo\n/one\\_s\\+two\n```\n\n----------------------------------------\n\nTITLE: Root-Relative Path Examples for SCP Protocol\nDESCRIPTION: Examples demonstrating how to use root-relative paths with SCP protocol in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\nvim scp://user@host//somefile\nvim scp://user@host//subdir1/subdir2/somefile\n```\n\n----------------------------------------\n\nTITLE: Setting mSQL Syntax Highlighting Options in Vim\nDESCRIPTION: Configures options for mSQL syntax highlighting, including enabling SQL syntax highlighting in strings and setting the minimum number of lines for syncing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_87\n\nLANGUAGE: VimScript\nCODE:\n```\n:let msql_sql_query = 1\n\n:let msql_minlines = 200\n```\n\n----------------------------------------\n\nTITLE: Configuring Lint Tool Discovery in CMake\nDESCRIPTION: Configures CMake to find linting tools like shellcheck and stylua, with an option to abort if these tools are not found when CI_LINT is enabled.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\noption(CI_LINT \"Abort if lint programs not found\" OFF)\nif(CI_LINT)\n  set(LINT_REQUIRED \"REQUIRED\")\nendif()\nfind_program(SHELLCHECK_PRG shellcheck ${LINT_REQUIRED})\nmark_as_advanced(SHELLCHECK_PRG)\nfind_program(STYLUA_PRG stylua ${LINT_REQUIRED})\nmark_as_advanced(STYLUA_PRG)\n\nset(STYLUA_DIRS runtime scripts src test contrib)\n```\n\n----------------------------------------\n\nTITLE: Removing Netrw from Home Directory\nDESCRIPTION: Uses the :NetrwClean command to remove Netrw from the user's home directory (first directory in runtimepath).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n:NetrwClean\n```\n\n----------------------------------------\n\nTITLE: Building with Makefile and Bundled Dependencies\nDESCRIPTION: This shows how to build Neovim using Make, disabling bundled dependencies entirely.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\n\"make USE_BUNDLED=OFF\"\n```\n\n----------------------------------------\n\nTITLE: Register Expression Insert Example\nDESCRIPTION: Example showing how to insert text by evaluating an expression register to move the cursor up in Insert mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\nCTRL-R =\"\\<Up>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Hare Documentation Search Depth\nDESCRIPTION: Configuration to adjust the maximum directory depth for searching Hare files when detecting documentation files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_hare.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nlet g:haredoc_search_depth = 2\n```\n\n----------------------------------------\n\nTITLE: Data Type Format Conversion (C)\nDESCRIPTION: This snippet demonstrates how to convert data type formats from Vim source to portable Neovim formats.  It shows how to handle different integer types to ensure compatibility across platforms and architectures. PRId64 and PRIdLINENR are macros defined in inttypes.h.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n\"  Data type    Format (Vim source)     Portable format (Nvim source)\n  ------------ ----------------------- ----------------------------------\n  long long    \\\"%lld\\\"                  \\\"%\\\" PRId64\n  size_t       \\\"%ld\\\"                   \\\"%zu\\\"\n  linenr_T     \\\"%ld\\\"                   \\\"%\\\" PRIdLINENR\"\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Name in Lua with Libuv\nDESCRIPTION: Sets the name of the current thread. The maximum length of the name is platform-dependent and will be truncated if exceeded.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_67\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_setname({name})\n```\n\n----------------------------------------\n\nTITLE: Finding a Man Page in Vim\nDESCRIPTION: This snippet explains how to quickly find and display the man page for a command or function being edited in Vim, using the 'K' command and ':Man' command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_12.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nK\n```\n\nLANGUAGE: vim\nCODE:\n```\n:Man csh\n```\n\nLANGUAGE: vim\nCODE:\n```\n:Man 3 echo\n```\n\n----------------------------------------\n\nTITLE: File Permissions Check in Vim\nDESCRIPTION: Examples showing how to get file permissions for system files using getfperm() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_92\n\nLANGUAGE: vim\nCODE:\n```\necho getfperm(\"/etc/passwd\")\necho getfperm(expand(\"~/.config/nvim/init.vim\"))\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with mingw32-make on MSYS2/MinGW\nDESCRIPTION: Alternative build commands using mingw32-make instead of Ninja for building Neovim on Windows with MSYS2/MinGW.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nmingw32-make deps\nmingw32-make CMAKE_BUILD_TYPE=RelWithDebInfo\n:: Or you can do the previous command specifying a custom prefix\n:: (Default is C:\\Program Files (x86)\\nvim)\n:: mingw32-make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=C:\\nvim\nmingw32-make install\n```\n\n----------------------------------------\n\nTITLE: Disabling Mail Plugin Mappings\nDESCRIPTION: Variable setting to disable mappings for the mail filetype plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\nlet no_mail_maps = 1\n```\n\n----------------------------------------\n\nTITLE: Getting Poll Timeout in Lua\nDESCRIPTION: This function gets the poll timeout. The return value is in milliseconds or -1 for no timeout. Returns an integer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.backend_timeout()                                      *uv.backend_timeout()*\\n\\n                Get the poll timeout. The return value is in milliseconds, or\\n                -1 for no timeout.\\n\\n                Returns: `integer`\"\n```\n\n----------------------------------------\n\nTITLE: Fixing AppArmor Permission Denied Error for Fuse Mount in Bash\nDESCRIPTION: This configures AppArmor to allow fuse mounts for Neovim, resolving a \"Permission denied\" error when mounting fuse filesystems.  It adds a local override to the AppArmor configuration to allow mounting the `fuse.nvim` filesystem.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmount fstype=fuse.nvim options=(ro, nosuid, nodev) -> /tmp/**,\n    /usr/bin/fusermount Ux,\n```\n\n----------------------------------------\n\nTITLE: Using File Browser with Specified Directory in Vim\nDESCRIPTION: This example shows how to use the file browser with a specified starting directory. The '/etc' directory is used as the starting point for the file browser.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:browse split /etc\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Execution of Unzip Command\nDESCRIPTION: Shows how to disable automatic execution of the unzip command when opening zip files by setting the g:zip_exec variable to 0 for increased security.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_zip.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nlet g:zip_exec=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Eiffel Syntax Highlighting Options\nDESCRIPTION: Sets various options for Eiffel syntax highlighting, including case sensitivity and adherence to style guidelines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_29\n\nLANGUAGE: VimScript\nCODE:\n```\nlet eiffel_ignore_case=1\nlet eiffel_strict=1\nlet eiffel_pedantic=1\nlet eiffel_lower_case_predef=1\nlet eiffel_ise=1\nlet eiffel_hex_constants=1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Syntax Item Name in Vim\nDESCRIPTION: This snippet demonstrates how to echo the name of the syntax item under the cursor using the synID and synIDattr functions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_268\n\nLANGUAGE: vim\nCODE:\n```\necho synIDattr(synID(line(\".\"), col(\".\"), 1), \"name\")\n```\n\n----------------------------------------\n\nTITLE: Checking for Infinity Values in Vim\nDESCRIPTION: Demonstrates how to use the isinf() function to check if a floating-point value is positive infinity (returns 1), negative infinity (returns -1), or neither (returns 0).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_142\n\nLANGUAGE: vim\nCODE:\n```\necho isinf(1.0 / 0.0)\n\"1\necho isinf(-1.0 / 0.0)\n\"-1\n```\n\n----------------------------------------\n\nTITLE: TODO Comments Example in C\nDESCRIPTION: Example showing proper format for TODO comments with owner identification.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n// TODO(kl@gmail.com): Use a \"*\" here for concatenation operator.\n// TODO(Zeke): change this to use relations.\n```\n\n----------------------------------------\n\nTITLE: Using Autoload for Variables in Vim\nDESCRIPTION: This example demonstrates how to use the autoload mechanism for variables in Vim scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_59\n\nLANGUAGE: vim\nCODE:\n```\nlet weekdays = dutch#weekdays\n```\n\n----------------------------------------\n\nTITLE: Mouse Selection Copy Fix\nDESCRIPTION: Workaround for copying to X11 primary selection with mouse selection.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/faq.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\nvnoremap <LeftRelease> \"*ygv\nvnoremap <2-LeftRelease> \"*ygv\n```\n\n----------------------------------------\n\nTITLE: Checking for dirfd and flock functions in C\nDESCRIPTION: Tests if the system supports the dirfd function for getting a file descriptor from a DIR* pointer and the flock function for file locking by compiling a test program.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#include <sys/types.h>\n#include <dirent.h>\n#include <sys/file.h>\nint main(void)\n{\n  DIR *dir = opendir(\"dirname\");\n  dirfd(dir);\n  flock(10, LOCK_SH);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using min() function in Vim\nDESCRIPTION: This example demonstrates how to use the min() function to find the minimum value in a list of variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_177\n\nLANGUAGE: vim\nCODE:\n```\necho min([apples, pears, oranges])\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Language Variable\nDESCRIPTION: Command to set the LANG environment variable to Japanese\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\n:let $LANG = 'ja'\n```\n\n----------------------------------------\n\nTITLE: Using Colorscheme Command in Vim\nDESCRIPTION: These snippets show how to use the colorscheme command in Vim. They demonstrate how to output the current colorscheme name and how to load a specific colorscheme.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_183\n\nLANGUAGE: viml\nCODE:\n```\n:colo[rscheme]\n\n:colo[rscheme] {name}\n```\n\n----------------------------------------\n\nTITLE: Configuring LPEG Library Build with CMake\nDESCRIPTION: Sets up CMake build configuration for the LPEG library. Specifies minimum CMake version, creates a C project, compiles source files into a library, and sets up installation rules.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/LpegCMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject (lpeg C)\n\ninclude(GNUInstallDirs)\n\nfile(GLOB LPEG_SOURCES ${CMAKE_SOURCE_DIR}/*.c)\nadd_library(lpeg ${LPEG_SOURCES})\n\ntarget_compile_options(lpeg PRIVATE -w)\n\ninstall(TARGETS lpeg ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n# vim: set ft=cmake:\n```\n\n----------------------------------------\n\nTITLE: Vim Help File Footer\nDESCRIPTION: Standard Vim help file footer containing text formatting settings\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/testing.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\n vim:tw=78:ts=8:noet:ft=help:norl:\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone in autoexec.bat (Windows)\nDESCRIPTION: This code snippet shows how to set the time zone in the autoexec.bat file in Windows to avoid timestamp issues with file saving related to daylight saving time. Adjusting the '-1' value is necessary based on the specific time zone.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n\"SET TZ=-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring makeprg with a Filter\nDESCRIPTION: Sets the makeprg option to run 'gmake' and pipe its output through 'myfilter', demonstrating how to include a pipe character in the command string with proper escaping.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_48\n\nLANGUAGE: viml\nCODE:\n```\nset makeprg=gmake\\ \\\\|\\ myfilter\n```\n\n----------------------------------------\n\nTITLE: Keep-Case Word Definition\nDESCRIPTION: Demonstrates defining keep-case words that preserve specific case matching rules\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_17\n\nLANGUAGE: spelling-definition\nCODE:\n```\nKEEPCASE = ~\n```\n\n----------------------------------------\n\nTITLE: Converting to String with Msgpack in Vim\nDESCRIPTION: Converts a Msgpack value to a string, preserving Msgpack type information. The output string can be evaluated back to its original form using msgpack#eval().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#string({msgpack-value})\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim on Source Mage\nDESCRIPTION: Command to install Neovim using the Sorcery package manager on Source Mage Linux.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncast neovim\n```\n\n----------------------------------------\n\nTITLE: Getting System Hostname with uv.os_gethostname()\nDESCRIPTION: Returns the hostname of the system as a string.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_90\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_gethostname()\n```\n\n----------------------------------------\n\nTITLE: Opening an existing file descriptor as UDP handle in Lua\nDESCRIPTION: Opens an existing file descriptor or Windows SOCKET as a UDP handle. The file descriptor is set to non-blocking mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_39\n\nLANGUAGE: lua\nCODE:\n```\nuv.udp_open({udp}, {fd})\n```\n\n----------------------------------------\n\nTITLE: Deleting Bookmarks with :NetrwMB Command\nDESCRIPTION: Uses the :NetrwMB! command to remove specified files or directories from the Netrw bookmark list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_27\n\nLANGUAGE: vim\nCODE:\n```\n:NetrwMB! [files/directories]\n```\n\n----------------------------------------\n\nTITLE: Forcing TeX Markup Highlighting in Literate Haskell\nDESCRIPTION: This snippet demonstrates how to force TeX markup highlighting in literate Haskell code. The 'lhs_markup' variable is set to 'tex' in your vimrc to achieve this globally.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_50\n\nLANGUAGE: vim\nCODE:\n```\n\t:let lhs_markup = tex\n```\n\n----------------------------------------\n\nTITLE: Managing Registers with Let Command in Vim\nDESCRIPTION: Examples of writing to and appending to Vim registers using the :let command with the @ prefix, including clearing the search pattern register.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_93\n\nLANGUAGE: viml\nCODE:\n```\n:let @{reg-name} = {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let @/ = \"\"\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let @{reg-name} .= {expr1}\n```\n\n----------------------------------------\n\nTITLE: Git Blame Configuration\nDESCRIPTION: Git command to configure blame.ignoreRevsFile for excluding noisy commits.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: CSV Delimiter Highlighting Management in VimL\nDESCRIPTION: Handles synchronization of syntax highlighting when changing CSV delimiters by removing the existing delimiter configuration and refreshing the buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_18\n\nLANGUAGE: VimL\nCODE:\n```\n:unlet b:csv_delimiter\n:w\n:e\n```\n\n----------------------------------------\n\nTITLE: Removing Netrw from All Directories in Runtimepath\nDESCRIPTION: Uses the :NetrwClean! command to attempt removal of Netrw from all directories in the user's runtimepath.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\n:NetrwClean!\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Conceal Support for Rust\nDESCRIPTION: Enables basic concealment support for Rust syntax, which can make code more readable by hiding certain syntax elements with simpler symbols.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_conceal = 1\n```\n\n----------------------------------------\n\nTITLE: Using strtrans() in Vim Script\nDESCRIPTION: Demonstrates the usage of strtrans() function to translate unprintable characters into printable ones.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_263\n\nLANGUAGE: vim\nCODE:\n```\necho strtrans(@a)\n```\n\n----------------------------------------\n\nTITLE: CPack Inclusion\nDESCRIPTION: Includes the CPack module to enable packaging functionality. This must be done after setting CPack variables but before using CPack commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Overruling File Format in Vim\nDESCRIPTION: This command edits a file while explicitly specifying the 'fileformat' to use. The \"++ff=unix\" part tells Vim to treat the file as a Unix format file, overriding the automatic detection. This is useful when you want to edit a file as a specific format, regardless of how Vim would normally interpret it.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_23.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\t:edit ++ff=unix file.txt\n```\n\n----------------------------------------\n\nTITLE: Debian 10 Build Example\nDESCRIPTION: This script installs dependencies on Debian 10 and then builds Neovim using CMake, disabling most bundled dependencies except for libuv, libluv, utf8proc, and tree-sitter.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo apt install luajit libluajit-5.1-dev lua-lpeg libunibilium-dev\\ncmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_BUNDLED=OFF -DUSE_BUNDLED_LIBUV=ON -DUSE_BUNDLED_LUV=ON -DUSE_BUNDLED_TS=ON -DUSE_BUNDLED_UTF8PROC=ON\\ncmake --build .deps\\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\\ncmake --build build\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Table Cells with Styled Numbers in HTML\nDESCRIPTION: HTML markup for creating table cells with consistent styling. Each cell has bottom and left borders, right alignment, and contains the number 5 in red color with bold formatting using Arial font.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Opening a new file in a split\nDESCRIPTION: Opens a new, empty file in a split window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n\t:new\n```\n\n----------------------------------------\n\nTITLE: Printf Float Formatting Example in Vim\nDESCRIPTION: Demonstrates float formatting with printf using 2 decimal precision\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_193\n\nLANGUAGE: vim\nCODE:\n```\necho printf(\"%.2f\", 12.115)\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Unsigned Hex Output\nDESCRIPTION: Defines a helper function `printx` that converts numbers to unsigned 32-bit hexadecimal numbers using the bit.tohex function, aiding in clear display across all platforms.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfunction printx(x)\n  print(\"0x\"..bit.tohex(x))\nend\n```\n\n----------------------------------------\n\nTITLE: Running Job Control Example in Bash\nDESCRIPTION: Command to execute the job control example script in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/job_control.txt#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnvim -u ~/foo.vim\n```\n\n----------------------------------------\n\nTITLE: Building msgmerge Executable in CMake\nDESCRIPTION: This snippet defines the msgmerge executable, sets its sources, links it with libgettextsrc, and adds dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(msgmerge_SOURCES\n  msgmerge.c msgl-fsearch.c lang-table.c plural-count.c)\nPREFIX_LIST_ITEMS(msgmerge_SOURCES \"gettext-tools/src/\")\n\nadd_executable(msgmerge ${msgmerge_SOURCES})\ntarget_link_libraries(msgmerge libgettextsrc)\nadd_dependencies(msgmerge libgettextsrc libintl)\n```\n\n----------------------------------------\n\nTITLE: Setting SpotBugs Compiler Options\nDESCRIPTION: Sets parameters for the SpotBugs Java static analysis tool by configuring the spotbugs_makeprg_params variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_44\n\nLANGUAGE: vim\nCODE:\n```\nlet b:spotbugs_makeprg_params = \"-longBugCodes -effort:max -low\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Makeprg for Rust Compilation\nDESCRIPTION: Sets the 'makeprg' option to use 'rustc' instead of 'rustc %' for Rust file compilation. This affects how the :make command works with Rust files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustc_makeprg_no_percent = 1\n```\n\n----------------------------------------\n\nTITLE: Editing a Sourced Script in Vim\nDESCRIPTION: The :script command allows editing a sourced script by its script ID, which can be obtained from :scriptnames.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:scr[iptnames][!] {scriptId}\n```\n\n----------------------------------------\n\nTITLE: Enabling Combined Character Deletion in Arabic\nDESCRIPTION: Allows deletion of individual characters in combined Arabic characters like LAM_ALEF, useful for more granular text editing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_5\n\nLANGUAGE: VimScript\nCODE:\n```\n:set delcombine\n```\n\n----------------------------------------\n\nTITLE: CursorHold Status Line Update Example\nDESCRIPTION: A Vim command to force update of status lines by toggling the readonly option. This is useful when handling CursorHold events.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:let &ro = &ro\n```\n\n----------------------------------------\n\nTITLE: X Resource Configuration\nDESCRIPTION: X Window System resource configuration examples for Netscape color management.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_3\n\nLANGUAGE: xdefaults\nCODE:\n```\nNetscape*installColormap: Yes\nNetscape*maxImageColors:  64\n```\n\n----------------------------------------\n\nTITLE: NixOS/Nix Development Shell\nDESCRIPTION: Enters a nix-shell with the necessary dependencies for building Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\n\"nix-shell '<nixpkgs>' -A neovim-unwrapped\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Swap File Name Command\nDESCRIPTION: Command to show the name of the current swap file being used in Vim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/recover.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:sw[apname]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Password File Information with uv.os_get_passwd()\nDESCRIPTION: Returns a table containing user password file information including username, user ID, group ID, shell, and home directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_97\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_get_passwd()\n```\n\n----------------------------------------\n\nTITLE: Updating Terminfo Definitions for Neovim\nDESCRIPTION: This command updates the terminfo definitions used in Neovim's TUI. It runs a script that refreshes the content of the terminfo_defs.h file.\nSOURCE: https://github.com/neovim/neovim/blob/master/MAINTAIN.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/update_terminfo.sh\n```\n\n----------------------------------------\n\nTITLE: Formatting Date with Msgpack in Vim\nDESCRIPTION: The function formats a date according to a specified format string, similar to strftime(). It supports Msgpack special dictionaries and requires Python for full functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#strftime({format}, {msgpack-integer})\n```\n\n----------------------------------------\n\nTITLE: Simple Concatenation Pattern in Vim\nDESCRIPTION: Demonstrates basic pattern concatenation matching specific characters and digits\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pattern.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nf[0-9]b\n```\n\n----------------------------------------\n\nTITLE: HTML Table Cell Structure\nDESCRIPTION: A repeating HTML table cell pattern with specific styling for displaying the number 5 in red, bold font. Each cell has border and alignment properties defined.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Using Line Offsets in Vim Search Commands\nDESCRIPTION: Search pattern with a line offset that positions the cursor a specified number of lines away from the match. This allows you to land at a specific position relative to the search result.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n/default/2\n```\n\n----------------------------------------\n\nTITLE: Nvim Stdin Autocommand\nDESCRIPTION: Vimscript configuration to prevent marking buffers as modified when reading from stdin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n\" Don't set 'modified' when reading from stdin\nau StdinReadPost * set nomodified\n```\n\n----------------------------------------\n\nTITLE: Vim Formatting Configuration for Uncrustify\nDESCRIPTION: Vim configuration snippet to set up uncrustify as the formatter for C files.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nif !empty(findfile('src/uncrustify.cfg', ';'))\n  setlocal formatprg=uncrustify\\ -q\\ -l\\ C\\ -c\\ src/uncrustify.cfg\\ --no-backup\nendif\n```\n\n----------------------------------------\n\nTITLE: Windows FTP Configuration with Custom Command\nDESCRIPTION: Custom configuration for Windows FTP, specifying an alternate FTP command and allowing site-specific login files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_3\n\nLANGUAGE: vimscript\nCODE:\n```\nlet g:netrw_ftp_cmd= 'c:\\Windows\\System32\\ftp -s:C:\\Users\\MyUserName\\MACHINE'\n```\n\n----------------------------------------\n\nTITLE: Including Standard and Custom CMake Modules\nDESCRIPTION: Includes both standard CMake modules (like CheckCCompilerFlag) and custom Neovim modules (like Deps, Find) for the build system.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCCompilerFlag)\ninclude(CheckCSourceCompiles)\ninclude(CheckLibraryExists)\ninclude(ExternalProject)\ninclude(FindPackageHandleStandardArgs)\ninclude(GNUInstallDirs)\n\ninclude(Deps)\ninclude(Find)\ninclude(InstallHelpers)\ninclude(PreventInTreeBuilds)\ninclude(Util)\n```\n\n----------------------------------------\n\nTITLE: Example Vim Plugin Help Documentation\nDESCRIPTION: Template for creating help documentation for a Vim plugin, showing proper formatting with tags and sections.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_40\n\nLANGUAGE: vim\nCODE:\n```\n*typecorr.txt*\tPlugin for correcting typing mistakes\n\nIf you make typing mistakes, this plugin will have them corrected\nautomatically.\n\nThere are currently only a few corrections.  Add your own if you like.\n\nMappings:\n<Leader>a   or   <Plug>TypecorrAdd;\n\tAdd a correction for the word under the cursor.\n\nCommands:\n:Correct {word}\n\tAdd a correction for {word}.\n\n\t\t\t\t\t\t*typecorr-settings*\nThis plugin doesn't have any settings.\n```\n\n----------------------------------------\n\nTITLE: Painting Background Papers in Qt\nDESCRIPTION: This method paints the background papers in a grid layout using QPainter. It handles empty states, calculates positions, and calls a helper method to paint individual papers.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nauto p = QPainter(this);\n\nif (_papers.empty()) {\n\tp.setFont(st::noContactsFont);\n\tp.setPen(st::noContactsColor);\n\tp.drawText(QRect(0, 0, width(), st::noContactsHeight), tr::lng_contacts_loading(tr::now), style::al_center);\n\treturn;\n}\nauto row = 0;\nauto column = 0;\nfor (const auto &paper : _papers) {\n\tconst auto increment = gsl::finally([&] {\n\t\t++column;\n\t\tif (column == kBackgroundsInRow) {\n\t\t\tcolumn = 0;\n\t\t\t++row;\n\t\t}\n\t});\n\tif ((st::backgroundSize.height() + st::backgroundPadding) * (row + 1) <= r.top()) {\n\t\tcontinue;\n\t} else if ((st::backgroundSize.height() + st::backgroundPadding) * row >= r.top() + r.height()) {\n\t\tbreak;\n\t}\n\tpaintPaper(p, paper, column, row);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for overflow builtins in C\nDESCRIPTION: Tests if the compiler supports the __builtin_add_overflow and __builtin_sub_overflow intrinsics by attempting to compile a small program that uses them.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint main(void)\n{\n  int a = 42;\n  __builtin_add_overflow(a, a, &a);\n  __builtin_sub_overflow(a, a, &a);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Word to Spell File in Vim\nDESCRIPTION: Normal mode command to add the word under the cursor as a good word to the first entry in 'spellfile'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\nzg\n```\n\n----------------------------------------\n\nTITLE: Disabling SGML Tag Rendering in Vim\nDESCRIPTION: Setting a variable to disable special rendering of SGML tags in Vim syntax highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_113\n\nLANGUAGE: vim\nCODE:\n```\nlet sgml_no_rendering=1\n```\n\n----------------------------------------\n\nTITLE: Configuring R Markdown Syntax Highlighting in Vim\nDESCRIPTION: Controls R Markdown syntax highlighting options, including YAML header highlighting, citation keys, chunk headers, and automatic language detection for code chunks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_103\n\nLANGUAGE: vim\nCODE:\n```\nlet rmd_syn_hl_yaml = 0\nlet rmd_syn_hl_citations = 0\nlet rmd_syn_hl_chunk = 1\nlet rmd_dynamic_fenced_languages = 0 \" No autodetection of languages\nlet rmd_dynamic_fenced_languages = 1 \" Autodetection of languages\nlet rmd_include_latex = 0 \" Don't highlight LaTeX code\nlet rmd_include_latex = 1 \" Autodetect LaTeX code\nlet rmd_include_latex = 2 \" Always include LaTeX highlighting\nlet rmd_fenced_languages = ['r', 'python']\n```\n\n----------------------------------------\n\nTITLE: RHEL/Fedora Build Prerequisites\nDESCRIPTION: Installs the necessary packages on RHEL/Fedora systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo dnf -y install ninja-build cmake gcc make gettext curl glibc-gconv-extra\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Path in Neovim\nDESCRIPTION: Vim configuration to specify Python interpreter path for Neovim Python plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nlet g:python3_host_prog='C:/Users/foo/Envs/neovim3/Scripts/python.exe'\n```\n\n----------------------------------------\n\nTITLE: Custom Makefile Target\nDESCRIPTION: This snippet demonstrates how to add a custom target to the build process using a `local.mk` file. The `rebuild` target removes the build directory and then runs `make`. This allows for a clean rebuild of the project.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_13\n\nLANGUAGE: Makefile\nCODE:\n```\n\"all:\\n\\nrebuild:\\n\\trm -rf build\\n\\tmake\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Namespace in Buffer Range in Lua\nDESCRIPTION: Clears namespaced objects (highlights, extmarks, virtual text) from a region in the buffer. Lines are 0-indexed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_60\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_clear_namespace({buffer}, {ns_id}, {line_start}, {line_end})\n```\n\n----------------------------------------\n\nTITLE: Converting WTF-8 to UTF-16 in Lua\nDESCRIPTION: This function converts a WTF-8 string to a UTF-16 (or UCS-2) string. It assumes the endianness of the output string matches the platform's native endianness.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_109\n\nLANGUAGE: lua\nCODE:\n```\nuv.wtf8_to_utf16({wtf16})\n```\n\n----------------------------------------\n\nTITLE: Disabling Error Highlighting in Shell Scripts\nDESCRIPTION: Setting a variable to disable error highlighting in shell scripts, which is useful when the error detection causes problems.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_126\n\nLANGUAGE: vim\nCODE:\n```\nlet g:sh_no_error= 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Gettext Tools Config Headers in CMake\nDESCRIPTION: Reads a gettext-tools config.h.in template and modifies it with platform-specific definitions for the Gettext tools. It defines features, types, and compatibility macros needed for the more complex tools component.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfile(READ gettext-tools/config.h.in CONFIG_CONTENT)\nstring(REPLACE \"#undef FLEXIBLE_ARRAY_MEMBER\" \"#define FLEXIBLE_ARRAY_MEMBER 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"__declspec (dllimport)\" \"\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef ENDIANNESS\" \"#define ENDIANNESS 0\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef GNULIB_FWRITEERROR\" \"#define GNULIB_FWRITEERROR 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_DECL_STRERROR_R\" \"#define HAVE_DECL_STRERROR_R 0\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_DUP2\" \"#define HAVE_DUP2 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_ICONV_H\" \"#define HAVE_ICONV_H 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_ICONV\" \"#define HAVE_ICONV 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_LIBUNISTRING\" \"#define HAVE_LIBUNISTRING 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_STDINT_H_WITH_UINTMAX\" \"#define HAVE_STDINT_H_WITH_UINTMAX 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_STDINT_H\" \"#define HAVE_STDINT_H 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_LONG_LONG_INT\" \"#define HAVE_LONG_LONG_INT 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_STRING_H\" \"#define HAVE_STRING_H 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_SYS_TIMEB_H\" \"#define HAVE_SYS_TIMEB_H 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE__FTIME\" \"#define HAVE__FTIME 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_FLOAT_H\" \"#define HAVE_FLOAT_H 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef ICONV_CONST\" \"#define ICONV_CONST const\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef PACKAGE\" \"#define PACKAGE \\\"gettext\\\"\\n#define gettext_VERSION\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef VERSION\" \"#define VERSION \\\"\\\"\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef mode_t\" \"#define mode_t int\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef pid_t\" \"#define pid_t int\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef restrict\" \"#define restrict __restrict\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef ssize_t\" \"#include <BaseTsd.h>\\n#define ssize_t SSIZE_T\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef uid_t\" \"#define uid_t int\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_DECL___ARGV\" \"#define HAVE_DECL___ARGV 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nset(CONFIG_CONTENT \"${CONFIG_CONTENT}\\n#define isatty libtextstyle_isatty\")\nfile(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-tools/config.h ${CONFIG_CONTENT})\n```\n\n----------------------------------------\n\nTITLE: Parsing Date with Msgpack in Vim\nDESCRIPTION: This function parses a date string into a time value, reversing the operation of msgpack#strftime(). Without Python, it only supports non-negative times and a specific format.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#strptime({format}, {time})\n```\n\n----------------------------------------\n\nTITLE: Configuring LF (LFRC) Syntax Highlighting in Vim\nDESCRIPTION: Sets options for shell command syntax highlighting in LF configuration files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_73\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:lf_shell_syntax = \"syntax/dosbatch.vim\"\nlet b:lf_shell_syntax = \"syntax/zsh.vim\"\n```\n\n----------------------------------------\n\nTITLE: Setting Tar Plugin Variables in .vimrc\nDESCRIPTION: Configuration variables that can be added to the user's .vimrc file to prevent the tar plugin from loading.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_tar.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nlet g:loaded_tarPlugin= 1\nlet g:loaded_tar      = 1\n```\n\n----------------------------------------\n\nTITLE: Getting Current Thread Handle in Lua with Libuv\nDESCRIPTION: Returns the handle for the current thread in which this function is called.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_64\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_self()\n```\n\n----------------------------------------\n\nTITLE: Isolating Neovim Applications Using Systemd\nDESCRIPTION: Example command showing how to run Neovim in an isolated environment using systemd namespaces on Linux systems. This provides true isolation by using cgroups namespaces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nsystemd-run --user -qt -p PrivateUsers=yes -p BindPaths=/home/user/profile_xy:/home/user/.config/nvim nvim\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Location List Entries in Vim Script\nDESCRIPTION: This command executes specified commands sequentially across valid entries in the location list for the current window. This allows for targeted operations within the context of a location list, enabling efficient processing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_27\n\nLANGUAGE: vimscript\nCODE:\n```\n:ld[o][!] {cmd}   Execute {cmd} in each valid entry in the location list\nfor the current window.\nIt works like doing this: >\n  :lfirst\n  :{cmd}\n  :lnext\n  :{cmd}\netc.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Syntax Items in Vim\nDESCRIPTION: This Vim script demonstrates how to retrieve syntax items using the OmniSyntaxList function. It shows how to retrieve all syntax items, syntax items for a specific group (sqlOperator), syntax items for multiple groups (sqlOperator and sqlType), and syntax items using a regular expression.  It also shows how to assign the results to a List.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n\"   echo OmniSyntaxList( [] )\n\n\" To retrieve only the syntax items for the sqlOperator syntax group: >\n    echo OmniSyntaxList( ['sqlOperator'] )\n\n\" To retrieve all syntax items for both the sqlOperator and sqlType groups: >\n    echo OmniSyntaxList( ['sqlOperator', 'sqlType'] )\n\n\" A regular expression can also be used: >\n    echo OmniSyntaxList( ['sql\\w\\+'] )\n\n\" From within a plugin, you would typically assign the output to a List: >\n    let myKeywords = []\n    let myKeywords = OmniSyntaxList( ['sqlKeyword'] )\n```\n\n----------------------------------------\n\nTITLE: Checking Current Language Setting\nDESCRIPTION: Command to display the current language setting in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:language\n```\n\n----------------------------------------\n\nTITLE: Defining Alias for Vim Command in Bash\nDESCRIPTION: This snippet defines an alias `lvim` in a Bash-like shell, which executes Vim with a normal mode command to jump to the last cursor position. The single quotes are escaped using single quotes within the string, and double quotes are used to enclose the entire command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nalias lvim='vim -c \"normal '\\''0'\\''\"'\n```\n\n----------------------------------------\n\nTITLE: Converting Integer Dictionary to Hex String with Msgpack in Vim\nDESCRIPTION: Converts a Msgpack special integer dictionary to a hexadecimal string with precisely 16 digits. This is useful for specific serialization scenarios.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#int_dict_to_str({msgpack-special-int})\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Standard Desktop File Highlighting in Vim\nDESCRIPTION: Configures Vim to highlight non-standard extensions and KDE-reserved features in .desktop and .directory files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_22\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:desktop_enable_nonstd = 1\nlet g:desktop_enable_kde = 1\n```\n\n----------------------------------------\n\nTITLE: Ex Commands in Neovim\nDESCRIPTION: List of Ex commands available in Neovim, sorted alphabetically. Includes brief descriptions of each command's action.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n|:|        :           nothing\n|:range|    :{range}    go to last line in {range}\n|:!|        :!          filter lines or execute an external command\n|:!!|       :!!         repeat last \":!\" command\n|:#|        :#          same as \":number\"\n|:&|        :&          repeat last \":substitute\"\n|:star|     :*          use the last Visual area, like \":'<,'>\"\n|:<|        :<          shift lines one 'shiftwidth' left\n|:=|        :=          print the last line number\n|:>|        :>          shift lines one 'shiftwidth' right\n|:@|        :@          execute contents of a register\n|:@@|       :@@         repeat the previous \":@\"\n|:2match|   :2mat[ch]   define a second match to highlight\n```\n\n----------------------------------------\n\nTITLE: Configuring Kconfig Syntax Highlighting in Vim\nDESCRIPTION: Sets options for Kconfig syntax highlighting, including the number of lines for synchronization and enabling heavier highlighting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_71\n\nLANGUAGE: VimScript\nCODE:\n```\nlet kconfig_minlines = 50\nlet kconfig_syntax_heavy = 1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Functional Tests Target\nDESCRIPTION: Configures the functional test target with dependencies on various test programs. Includes test environment configuration and dependencies on Lua development tools.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(functionaltest\n  COMMAND ${CMAKE_COMMAND}\n    -D TEST_TYPE=functional\n    ${TEST_OPTIONS}\n    -P ${PROJECT_SOURCE_DIR}/cmake/RunTests.cmake\n  DEPENDS printenv-test printargs-test shell-test pwsh-test streams-test tty-test\n  USES_TERMINAL)\nadd_dependencies(functionaltest lua_dev_deps nvim)\n```\n\n----------------------------------------\n\nTITLE: Dependency Building Options Configuration\nDESCRIPTION: Defines CMake options for controlling whether to use bundled versions of dependencies or system-installed versions.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(DEPS_IGNORE_SHA FALSE)\n\noption(USE_BUNDLED \"Use bundled dependencies.\" ON)\n\noption(USE_BUNDLED_LIBUV \"Use the bundled libuv.\" ${USE_BUNDLED})\noption(USE_BUNDLED_LPEG \"Use the bundled lpeg.\" ${USE_BUNDLED})\noption(USE_BUNDLED_LUA \"Use the bundled version of lua.\" OFF)\noption(USE_BUNDLED_LUAJIT \"Use the bundled version of luajit.\" ${USE_BUNDLED})\noption(USE_BUNDLED_LUV \"Use the bundled version of luv.\" ${USE_BUNDLED})\noption(USE_BUNDLED_TS \"Use the bundled treesitter runtime.\" ${USE_BUNDLED})\noption(USE_BUNDLED_TS_PARSERS \"Use the bundled treesitter parsers.\" ${USE_BUNDLED})\noption(USE_BUNDLED_UNIBILIUM \"Use the bundled unibilium.\" ${USE_BUNDLED})\noption(USE_BUNDLED_UTF8PROC \"Use the bundled utf8proc library.\" ${USE_BUNDLED})\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Setup and Project Configuration\nDESCRIPTION: Initial CMake setup including minimum version requirement, project name, and module path configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(NVIM_DEPS C)\n\nif(POLICY CMP0135)\n  cmake_policy(SET CMP0135 NEW)\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\" \"${PROJECT_SOURCE_DIR}/../cmake\")\n```\n\n----------------------------------------\n\nTITLE: Cloning Neovim Repository\nDESCRIPTION: Command to clone the Neovim source code repository from GitHub\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_vimpatch.txt#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/neovim/neovim.git\n```\n\n----------------------------------------\n\nTITLE: Disabling Zimbu Plugin Mappings\nDESCRIPTION: Configuration to disable default mappings for Zimbu filetype\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\nlet g:no_zimbu_maps = 1\n```\n\n----------------------------------------\n\nTITLE: Multi-file Error Pattern Example\nDESCRIPTION: Error format pattern for parsing compiler output with multiple files, using push/pop stack for file tracking.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_62\n\nLANGUAGE: vim\nCODE:\n```\n:set efm=%+P[%f],(%l\\\\,%c)%*[\\ ]%t%*[^:]:\\ %m,%-Q\n```\n\n----------------------------------------\n\nTITLE: Disabling status messages in Vim for performance on slow terminals\nDESCRIPTION: Turns off showcmd, ruler, and showmode options to improve performance on slow terminals by reducing status message updates.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\n:set nosc noru nosm\n```\n\n----------------------------------------\n\nTITLE: Saving Vim Digraphs to File\nDESCRIPTION: Shell command to save the list of available Vim digraphs to a temporary file for reference.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_raku.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvim +'redir >/tmp/vim-digraphs-listing.txt' +digraphs +'redir END' +q\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories for Build Artifacts\nDESCRIPTION: Configures output directories for all build types, ensuring binaries, libraries and archives are placed in consistent locations.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Place targets in bin/ or lib/ for all build configurations\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nforeach(CFGNAME ${CMAKE_CONFIGURATION_TYPES})\n  string(TOUPPER ${CFGNAME} CFGNAME)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/bin)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Visual Group with Background/Foreground References\nDESCRIPTION: Example showing how to reference current background/foreground colors in highlight definition\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_190\n\nLANGUAGE: vim\nCODE:\n```\n:highlight Visual ctermfg=bg ctermbg=fg\n```\n\n----------------------------------------\n\nTITLE: Increasing folding level\nDESCRIPTION: Closes more folds by increasing the fold level. This command can be repeated to progressively close more folds.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_4\n\nLANGUAGE: vimdoc\nCODE:\n```\nzm\n```\n\n----------------------------------------\n\nTITLE: Executing Ruby Command in Neovim\nDESCRIPTION: Demonstrates how to execute a simple Ruby command in Neovim using the :ruby command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/if_ruby.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n:ruby print \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Basic CPack Package Configuration\nDESCRIPTION: Sets up basic package metadata including name, vendor, file naming, and description for the Neovim package.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CPACK_PACKAGE_NAME \"Neovim\")\nset(CPACK_PACKAGE_VENDOR \"neovim.io\")\nset(CPACK_PACKAGE_FILE_NAME \"nvim\")\nset(CPACK_PACKAGE_DIRECTORY ${PROJECT_BINARY_DIR})\n\n# From the GitHub About section\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Vim-fork focused on extensibility and usability.\")\n\nset(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})\n\n# Pull the versions defined with the top level CMakeLists.txt\nset(CPACK_PACKAGE_VERSION_MAJOR ${NVIM_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${NVIM_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${NVIM_VERSION_PATCH})\n\n# CPACK_VERBATIM_VARIABLES ensures that the variables prefixed with *CPACK_*\n# are correctly passed to the cpack program.\n# This should always be set to true.\nset(CPACK_VERBATIM_VARIABLES TRUE)\n\nset(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE.txt\")\nset(CPACK_RESOURCE_FILE_README ${PROJECT_SOURCE_DIR}/README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake function for appending target expressions\nDESCRIPTION: Defines a CMake function that creates and appends expressions for target properties to the version string. The function handles property extraction, duplicate removal, and proper formatting with prefixes.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(append_target_expression)\n  cmake_parse_arguments(ARG\n    \"\"\n    \"PREFIX;PROPERTY\"\n    \"\"\n    ${ARGN})\n\n  set(TARGET_EXPRESSION \"$<TARGET_PROPERTY:nvim_bin,${ARG_PROPERTY}>\")\n  set(TARGET_EXPRESSION \"$<REMOVE_DUPLICATES:${TARGET_EXPRESSION}>\")\n  set(TARGET_EXPRESSION \"${ARG_PREFIX}$<JOIN:${TARGET_EXPRESSION}, ${ARG_PREFIX}>\")\n\n  set(VERSION_STRING \"${VERSION_STRING} ${TARGET_EXPRESSION} \" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Rendering\nDESCRIPTION: This snippet disables the default HTML rendering, which alters the appearance of certain tags. To disable rendering, the 'html_no_rendering' variable should be set to 1 in your vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_53\n\nLANGUAGE: vim\nCODE:\n```\n\t:let html_no_rendering=1\n```\n\n----------------------------------------\n\nTITLE: File Send Operation in libuv\nDESCRIPTION: Transfers data between file descriptors. Limited equivalent to sendfile(2). Returns number of bytes written.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_55\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_sendfile({out_fd}, {in_fd}, {in_offset}, {size} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Sign Unplace Commands in Neovim\nDESCRIPTION: Commands for removing signs from buffers and files with various group and ID combinations\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/sign.txt#2025-04-20_snippet_4\n\nLANGUAGE: vimdoc\nCODE:\n```\n:sign unplace * group=* buffer={nr}\n:sign unplace {id}\n:sign unplace {id} group={group}\n:sign unplace {id} group=*\n:sign unplace *\n:sign unplace * group={group}\n:sign unplace * group=*\n:sign unplace\n:sign unplace group={group}\n:sign unplace group=*\n```\n\n----------------------------------------\n\nTITLE: Debug Greedy Example\nDESCRIPTION: This command starts Vim in Ex mode, reads debug commands from input, adds a breakpoint in script.vim, and executes script.vim. It is used in test scripts to automate debugging by providing pre-defined debug commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n\"echo 'q^Mq' | vim -e -s -c debuggreedy -c 'breakadd file script.vim' -S script.vim\"\n```\n\n----------------------------------------\n\nTITLE: Decreasing window size\nDESCRIPTION: Decreases the height of the current window by a specified number of lines.  A count can be prepended to decrease the height by multiple lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n\tCTRL-W -\n```\n\n----------------------------------------\n\nTITLE: Getting Event Loop Metrics Information with uv.metrics_info()\nDESCRIPTION: Returns a table containing current event loop metrics including loop count, events, and events waiting. Best retrieved in a prepare callback to ensure consistency.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_105\n\nLANGUAGE: lua\nCODE:\n```\nuv.metrics_info()\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Commands (Vimscript Example)\nDESCRIPTION: This demonstrates how to define two user-defined commands, `MyCommand1` and `MyCommand2`, in Vimscript. It shows the potential ambiguity that can arise when using command-line completion with commands that share a common prefix.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_6\n\nLANGUAGE: vimscript\nCODE:\n```\n\t:command MyCommand1 echo \"one\"\n\t:command MyCommand2 echo \"two\"\n\t:MyCommand\n```\n\n----------------------------------------\n\nTITLE: Arch Linux Build Prerequisites\nDESCRIPTION: Installs the necessary packages on Arch Linux systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo pacman -S base-devel cmake ninja curl\"\n```\n\n----------------------------------------\n\nTITLE: Jumping to the start of a #if block (Vim)\nDESCRIPTION: This snippet shows how to jump to the start of a `#if` or `#ifdef` block using the `[#` command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_29.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n\"[#\"\n```\n\n----------------------------------------\n\nTITLE: Using NetrwMB Command for Bookmarking in Vim\nDESCRIPTION: This snippet demonstrates the usage of the :NetrwMB command for bookmarking files or directories in Netrw. It shows the syntax for adding and removing bookmarks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_21\n\nLANGUAGE: vim\nCODE:\n```\n:NetrwMB[!] [files/directories]\n```\n\n----------------------------------------\n\nTITLE: Enabling Spell Checking in Vim\nDESCRIPTION: Command to enable spell checking for US English in the current buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_0\n\nLANGUAGE: vimdoc\nCODE:\n```\n:setlocal spell spelllang=en_us\n```\n\n----------------------------------------\n\nTITLE: Validating and Generating Background Paper Thumbnails\nDESCRIPTION: This method validates and generates thumbnails for background papers. It handles different types of backgrounds including local thumbnails, cloud documents, and solid colors.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid BackgroundBox::Inner::validatePaperThumbnail(\n\t\tconst Paper &paper) const {\n\tif (!paper.thumbnail.isNull()) {\n\t\treturn;\n\t}\n\tconst auto localThumbnail = paper.data.localThumbnail();\n\tif (!localThumbnail) {\n\t\tif (const auto document = paper.data.document()) {\n\t\t\tif (!paper.dataMedia) {\n\t\t\t\tpaper.dataMedia = document->createMediaView();\n\t\t\t\tpaper.dataMedia->thumbnailWanted(paper.data.fileOrigin());\n\t\t\t}\n\t\t\tif (!paper.dataMedia->thumbnail()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (!paper.data.backgroundColors().empty()) {\n\t\t\tpaper.thumbnail = Ui::PixmapFromImage(\n\t\t\t\tUi::GenerateBackgroundImage(\n\t\t\t\t\tst::backgroundSize * cIntRetinaFactor(),\n\t\t\t\t\tpaper.data.backgroundColors(),\n\t\t\t\t\tpaper.data.gradientRotation()));\n\t\t\tpaper.thumbnail.setDevicePixelRatio(cRetinaFactor());\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\tconst auto thumbnail = localThumbnail\n\t\t? localThumbnail\n\t\t: paper.dataMedia->thumbnail();\n\tauto original = thumbnail->original();\n\tif (paper.data.isPattern()) {\n\t\toriginal = Ui::PreparePatternImage(\n\t\t\tstd::move(original),\n\t\t\tpaper.data.backgroundColors(),\n\t\t\tpaper.data.gradientRotation(),\n\t\t\tpaper.data.patternOpacity());\n\t}\n\tpaper.thumbnail = Ui::PixmapFromImage(TakeMiddleSample(\n\t\toriginal,\n\t\tst::backgroundSize));\n\tpaper.thumbnail.setDevicePixelRatio(cRetinaFactor());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Make Program Parameters\nDESCRIPTION: Sets the parameters to pass to Cargo when using make commands. Defaults to '$*', which passes through any parameters given to the command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\nlet g:cargo_makeprg_params = 'build'\n```\n\n----------------------------------------\n\nTITLE: Unsetting Environment Variable with uv.os_unsetenv()\nDESCRIPTION: Removes an environment variable with the specified name. This function is not thread-safe.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_93\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_unsetenv({name})\n```\n\n----------------------------------------\n\nTITLE: Adding Lua Language Server Download External Project in CMake\nDESCRIPTION: Creates an external project for downloading and extracting the Lua Language Server without building it, as it's a pre-built binary.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(download_luals\n  URL ${LUALS_URL}\n  DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/luals\n  SOURCE_DIR ${DEPS_BIN_DIR}/luals\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND \"\"\n  INSTALL_COMMAND \"\"\n  EXCLUDE_FROM_ALL TRUE\n  DOWNLOAD_NO_PROGRESS TRUE\n  CMAKE_CACHE_ARGS ${DEPS_CMAKE_CACHE_ARGS})\n```\n\n----------------------------------------\n\nTITLE: Filtering Quickfix or Location Lists in Vim Script\nDESCRIPTION: This command utilizes the 'cfilter' plugin to filter entries within a quickfix or location list based on a specified pattern. It allows selective viewing of entries that match or don't match the given pattern, effectively managing large lists.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_28\n\nLANGUAGE: vimscript\nCODE:\n```\n:Cfilter[!] /{pat}/\n:Lfilter[!] /{pat}/\n```\n\n----------------------------------------\n\nTITLE: Implementing Header Guards in C\nDESCRIPTION: Example showing the required header guard pattern using #pragma once for preventing multiple inclusion\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Commit Message Linting in CMake\nDESCRIPTION: Creates a target for linting git commit messages using a custom Lua script. The target uses a minimal Neovim configuration to run the linting script.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(lintcommit\n  COMMAND $<TARGET_FILE:nvim_bin> -u NONE -l ${PROJECT_SOURCE_DIR}/scripts/lintcommit.lua main)\nadd_dependencies(lintcommit nvim_bin)\n```\n\n----------------------------------------\n\nTITLE: macOS MacPorts Wget Certificate Fix\nDESCRIPTION: Installs curl-ca-bundle and configures wget to use it to resolve certificate errors on older macOS versions.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_36\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo port install curl-ca-bundle\\necho CA_CERTIFICATE=/opt/local/share/curl/curl-ca-bundle.crt >> ~/.wgetrc\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Remote Server Command Example\nDESCRIPTION: Example showing an incorrect command structure where arguments after --remote are treated as filenames.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/remote.txt#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvim --remote --server ~/.cache/nvim/server.pipe file.txt\n```\n\n----------------------------------------\n\nTITLE: Closing a window\nDESCRIPTION: Closes the current window. Any command that quits editing a file will work, but `:close` prevents accidentally exiting Vim when closing the last window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n\t:close\n```\n\n----------------------------------------\n\nTITLE: Generating Vim Syntax File\nDESCRIPTION: Creates custom command to generate Vim syntax file using Lua generator with various dependencies.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${GENERATED_SYN_VIM}\n  COMMAND ${LUA_GEN} ${SYN_VIM_GENERATOR} ${GENERATED_SYN_VIM} ${FUNCS_DATA}\n  DEPENDS\n    ${LUA_GEN_DEPS}\n    ${SYN_VIM_GENERATOR}\n    ${PROJECT_SOURCE_DIR}/src/nvim/ex_cmds.lua\n    ${PROJECT_SOURCE_DIR}/src/nvim/auevents.lua\n    ${PROJECT_SOURCE_DIR}/src/nvim/options.lua\n    ${PROJECT_SOURCE_DIR}/src/nvim/eval.c\n    ${FUNCS_DATA}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Definition for Neovim\nDESCRIPTION: Defines the minimum required CMake version (3.16) and sets up the project name as 'nvim' with C as the language.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Version should match the tested CMAKE_URL in .github/workflows/build.yml.\ncmake_minimum_required(VERSION 3.16)\n\nproject(nvim C)\n```\n\n----------------------------------------\n\nTITLE: Setting Backupskip with Environment Variable\nDESCRIPTION: Example of setting backupskip option with an expanded HOME environment variable path.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nlet &backupskip = escape(expand('$HOME'), '\\') .. '/tmp/*'\n```\n\n----------------------------------------\n\nTITLE: Forcing TeX Markup Highlighting in Buffer\nDESCRIPTION: This snippet illustrates how to force TeX markup highlighting in a specific buffer of literate Haskell code. It requires setting the 'b:lhs_markup' variable to 'tex' before syntax highlighting is turned on.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_51\n\nLANGUAGE: vim\nCODE:\n```\n\t:let b:lhs_markup = tex\n```\n\n----------------------------------------\n\nTITLE: Switching from Terminal Vim to GUI Vim\nDESCRIPTION: This command switches from terminal Vim to GUI Vim while editing a file. It opens the GUI window and stops using the terminal.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\n:gui\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Gettext\nDESCRIPTION: Sets up basic CMake configuration for the Gettext project. Specifies minimum CMake version 3.16, defines project name and language (C), disables compiler warnings, and configures static linker to ignore specific warnings.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(gettext C)\n\nadd_compile_options(-w)\nset(CMAKE_STATIC_LINKER_FLAGS \"${CMAKE_STATIC_LINKER_FLAGS} /ignore:4006\")\n```\n\n----------------------------------------\n\nTITLE: Accepting Connections with uv.accept in Lua\nDESCRIPTION: Demonstrates how to accept incoming connections using uv.listen and uv.accept. This is called after receiving a connection callback to accept a new client connection.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nserver:listen(128, function (err)\n  local client = uv.new_tcp()\n  server:accept(client)\nend)\n```\n\n----------------------------------------\n\nTITLE: Setting foldtext with script ID in Vim\nDESCRIPTION: This snippet illustrates how to use script-local functions with the 'foldtext' option, utilizing s: or <SID> to reference the function. This ensures that the function is properly scoped within the script where it is defined.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/fold.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\nset foldtext=s:MyFoldText()\nset foldtext=<SID>SomeFoldText()\n```\n\n----------------------------------------\n\nTITLE: Configuring Errorformat for JADE in Vim\nDESCRIPTION: Sets the errorformat option to parse error messages from the JADE (James Clark's DSSSL Engine) processor, with a simple pattern that captures file, line, column, type, and message.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_66\n\nLANGUAGE: vim\nCODE:\n```\n:set efm=jade:%f:%l:%c:%t:%m\n```\n\n----------------------------------------\n\nTITLE: Setting Background Based on Color Scheme with Autocmd in VimL\nDESCRIPTION: This autocmd example shows how to set the 'background' option depending on the colorscheme selected, executing before the color scheme file is sourced.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\nautocmd SourcePre */colors/blue_sky.vim set background=dark\n```\n\n----------------------------------------\n\nTITLE: Disabling Ruby Support in Neovim\nDESCRIPTION: Disables the Ruby provider in Neovim by setting the g:loaded_ruby_provider variable to 0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/provider.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nlet g:loaded_ruby_provider = 0\n```\n\n----------------------------------------\n\nTITLE: Temporary Disabling Matchit Plugin: Vim Command\nDESCRIPTION: This command allows users to temporarily disable the Matchit plugin, reverting the '%' key behavior back to Vim's default. It's useful for debugging or when the plugin's functionality is not desired temporarily.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:MatchDisable\n```\n\n----------------------------------------\n\nTITLE: Getting Effective Tabstop in Neovim (Lua)\nDESCRIPTION: Returns the indentation size for a given buffer. Takes an optional buffer number parameter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lsp.txt#2025-04-20_snippet_52\n\nLANGUAGE: lua\nCODE:\n```\nget_effective_tabstop({bufnr})\n```\n\n----------------------------------------\n\nTITLE: Multiple Variable Declaration Patterns in C\nDESCRIPTION: Examples demonstrating proper patterns for declaring and initializing multiple variables\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint i;\nint j;              // ✅\nint i, j;           // ✅: multiple declarations, no initialization.\nint i = 0;\nint j = 0;          // ✅: one initialization per line.\n\nint i = 0, j;       // ❌: multiple declarations with initialization.\nint i = 0, j = 0;   // ❌: multiple declarations with initialization.\n```\n\n----------------------------------------\n\nTITLE: Using libcallnr for System Functions in Vim\nDESCRIPTION: Examples of using libcallnr() to call C library functions that return integers. This shows how to call getpid(), printf(), and sleep() from the standard C library.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_152\n\nLANGUAGE: vim\nCODE:\n```\necho libcallnr(\"/usr/lib/libc.so\", \"getpid\", \"\")\ncall libcallnr(\"libc.so\", \"printf\", \"Hello World!\\n\")\ncall libcallnr(\"libc.so\", \"sleep\", 10)\n```\n\n----------------------------------------\n\nTITLE: macOS MacPorts Build Prerequisites\nDESCRIPTION: Installs the necessary packages on macOS systems using MacPorts to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_35\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo port install ninja cmake gettext\"\n```\n\n----------------------------------------\n\nTITLE: Checking for forkpty function on SunOS in C\nDESCRIPTION: Tests if the SunOS system supports the forkpty function for creating a new process attached to a pseudo-terminal by attempting to compile a program that calls it.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#include <termios.h>\nint\nmain(void)\n{\n  return forkpty(0, NULL, NULL, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Using fmod() Function in Vim Script\nDESCRIPTION: Demonstrates the fmod() function which returns the remainder of dividing expr1 by expr2, even when the division is not representable. The result has the same sign as expr1 and magnitude less than expr2.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_74\n\nLANGUAGE: vim\nCODE:\n```\necho fmod(12.33, 1.22)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho fmod(-12.33, 1.22)\n```\n\n----------------------------------------\n\nTITLE: Listing Marks\nDESCRIPTION: Command to display a list of all current marks in the file, showing their positions and special marks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:marks\n```\n\n----------------------------------------\n\nTITLE: Disabling Literate Haskell Markup हाईलाइटिंग\nDESCRIPTION: This snippet shows how to disable all markup highlighting in literate Haskell code. This is achieved by setting the 'lhs_markup' variable to 'none' globally in your vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_49\n\nLANGUAGE: vim\nCODE:\n```\n\t:let lhs_markup = none\n```\n\n----------------------------------------\n\nTITLE: Deferred Directory Deletion in Vim\nDESCRIPTION: Shows how to schedule a directory for deletion using the defer delete command with recursive and force flags.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_180\n\nLANGUAGE: vim\nCODE:\n```\ndefer delete('subdir/tmp', 'rf')\n```\n\n----------------------------------------\n\nTITLE: Adding conditional GZ flag to statusline in Vim\nDESCRIPTION: Demonstrates how to add a conditional ',GZ' flag to the statusline when a compressed file is loaded. It includes the statusline setting and related autocommands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_70\n\nLANGUAGE: vim\nCODE:\n```\nset statusline=...%r%{VarExists('b:gzflag','\\ [GZ]')}%h...\nlet b:gzflag = 1\nunlet b:gzflag\n```\n\n----------------------------------------\n\nTITLE: LSP Utility Function Migration Example\nDESCRIPTION: Example demonstrating migration from deprecated vim.lsp.util.lookup_section() to vim.tbl_get()\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal keys = vim.split(section, '.', { plain = true })\nlocal result = vim.tbl_get(table, unpack(keys))\n```\n\n----------------------------------------\n\nTITLE: Pushing Context to Stack - Lua\nDESCRIPTION: The ctxpush function pushes the current editor state onto the context stack, allowing for later restoration. Users can specify which types of context to include, helping manage state complexity.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_40\n\nLANGUAGE: lua\nCODE:\n```\nctxpush([{types}])                                                   *ctxpush()*\n\t\tPushes the current editor state (|context|) on the\n\t\t|context-stack|.\n\t\tIf {types} is given and is a |List| of |String|s, it specifies\n\t\twhich |context-types| to include in the pushed context.\n\t\tOtherwise, all context types are included.\n\n\t\tParameters: ~\n\t\t  • {types} (`string[]?`)\n\n\t\tReturn: ~\n\t\t  (`any`)\n```\n\n----------------------------------------\n\nTITLE: Setting fold column width\nDESCRIPTION: Shows a column at the left side of the window that indicates fold status with symbols. The number specifies the width of the column.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_7\n\nLANGUAGE: vimdoc\nCODE:\n```\n:set foldcolumn=4\n```\n\n----------------------------------------\n\nTITLE: Demonstrating list2str() Function in Vim\nDESCRIPTION: Examples of using the list2str() function to convert lists of numbers to character strings. Shows basic usage and handling of UTF-8 composing characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_155\n\nLANGUAGE: vim\nCODE:\n```\necho list2str([32])\t\t\" returns \" \"\necho list2str([65, 66, 67])\t\" returns \"ABC\"\n\necho join(map(list, {nr, val -> nr2char(val)}), '')\n\necho list2str([97, 769])\t\" returns \"á\"\n```\n\n----------------------------------------\n\nTITLE: Checking Local Directory Setting in Vim\nDESCRIPTION: Demonstrates how to check if a window has a local directory path set via :lcd command. The examples show equivalent ways to call the haslocaldir() function with different parameter combinations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_123\n\nLANGUAGE: vim\nCODE:\n```\necho haslocaldir()\necho haslocaldir(0)\necho haslocaldir(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gettext Runtime Feature Flags in CMake\nDESCRIPTION: Sets feature flags for the Gettext runtime library configuration and generates the libgnuintl.h header file. These flags control feature availability like locale support, printf variants, and numeric types.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(HAVE_NEWLOCALE 0)\nset(HAVE_POSIX_PRINTF 0)\nset(HAVE_SNPRINTF 0)\nset(HAVE_ASPRINTF 0)\nset(HAVE_WPRINTF 0)\nset(HAVE_NAMELESS_LOCALES 0)\nset(HAVE_LONG_LONG_INT 1)\nconfigure_file(gettext-runtime/intl/libgnuintl.in.h\n  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl/libgnuintl.h)\n```\n\n----------------------------------------\n\nTITLE: Command-line Editing Keys in Neovim\nDESCRIPTION: Key mappings and their functions for editing the command-line in Neovim. Includes navigation, completion, and history manipulation commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n|c_CTRL-A|  CTRL-A      do completion on the pattern in front of the cursor and insert all matches\n|c_CTRL-B|  CTRL-B      cursor to begin of command-line\n|c_CTRL-C|  CTRL-C      same as <Esc>\n|c_CTRL-D|  CTRL-D      list completions that match the pattern in front of the cursor\n|c_CTRL-E|  CTRL-E      cursor to end of command-line\n|'cedit'|   CTRL-F      default value for 'cedit': opens the command-line window; otherwise not used\n|c_CTRL-G|  CTRL-G      next match when 'incsearch' is active\n|c_<BS>|    <BS>        delete the character in front of the cursor\n```\n\n----------------------------------------\n\nTITLE: Disabling Mouse in Neovim\nDESCRIPTION: Set the 'mouse' option to an empty string to completely disable mouse functionality in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\nset mouse=\n```\n\n----------------------------------------\n\nTITLE: Configuring MediaWiki Syntax Highlighting Options in Vim\nDESCRIPTION: Sets options for MediaWiki syntax highlighting, including disabling HTML rendering and enabling terminal-based text formatting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_84\n\nLANGUAGE: VimScript\nCODE:\n```\nlet g:html_no_rendering = 1\n\nlet g:html_style_rendering = 1\n```\n\n----------------------------------------\n\nTITLE: Function Reference in Dictionary Example in Vimscript\nDESCRIPTION: This snippet shows how to define a function directly as a member of a Dictionary and assign its Funcref to a Dictionary entry. The key of the Dictionary can start with a lowercase letter.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n\t:function dict.init() dict\n\t:   let self.val = 0\n\t:endfunction\n```\n\n----------------------------------------\n\nTITLE: Simple echo program using TTY handles in Lua\nDESCRIPTION: This snippet illustrates a basic echo program using TTY handles in Lua. It creates stdin and stdout TTY handles, reads data from stdin, and writes it to stdout. The program closes the handles when there is no more data to read.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\n    -- Simple echo program\n    local stdin = uv.new_tty(0, true)\n    local stdout = uv.new_tty(1, false)\n\n    stdin:read_start(function (err, data)\n      assert(not err, err)\n      if data then\n        stdout:write(data)\n      else\n        stdin:close()\n        stdout:close()\n      end\n    end)\n```\n\n----------------------------------------\n\nTITLE: Fast Setting of Active Highlight Namespace - Lua\nDESCRIPTION: Sets the active namespace for highlights during a redraw cycle, intended for more efficient rendering in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_hl_ns_fast({ns_id})\n```\n\n----------------------------------------\n\nTITLE: Vim Mark List Command\nDESCRIPTION: Command to list specific marks in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/motion.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:marks aB\n```\n\n----------------------------------------\n\nTITLE: VimLeave Autocommand with Exit Value in Neovim VimL\nDESCRIPTION: This snippet shows an autocommand that echoes the exit value of Vim using the v:exiting variable when Vim is about to exit.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\n:au VimLeave * echo \"Exit value is \" .. v:exiting\n```\n\n----------------------------------------\n\nTITLE: Formatting a Paragraph in Vim\nDESCRIPTION: Uses the 'gq' operator with 'ap' text object to format the current paragraph according to textwidth settings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\ngqap\n```\n\n----------------------------------------\n\nTITLE: Discovering Mode Bits\nDESCRIPTION: Example showing how to discover mode bits for Operator-pending mode at runtime.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_161\n\nLANGUAGE: vim\nCODE:\n```\nomap xyzzy <Nop>\nlet op_bit = maplist()->filter(\n    \\ {_, m -> m.lhs == 'xyzzy'})[0].mode_bits\nounmap xyzzy\necho printf(\"Operator-pending mode bit: 0x%x\", op_bit)\n```\n\n----------------------------------------\n\nTITLE: Vim While Loop Example\nDESCRIPTION: Shows how to implement a while loop to process lines in a file\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_102\n\nLANGUAGE: vim\nCODE:\n```\n:let lnum = 1\n:while lnum <= line(\"$\")\n   :call FixLine(lnum)\n   :let lnum = lnum + 1\n:endwhile\n```\n\n----------------------------------------\n\nTITLE: Disabling Matchparen Plugin in Neovim\nDESCRIPTION: Sets the loaded_matchparen variable to prevent the matchparen plugin from loading. This must be set before the plugin loads.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\n:let loaded_matchparen = 1\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Matchit Plugin: Vim Command\nDESCRIPTION: This command re-enables the Matchit plugin after it has been disabled, restoring the extended matching functionality to the '%' key in Vim. It is useful for reintegrating the plugin's capabilities after temporary deactivation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:MatchEnable\n```\n\n----------------------------------------\n\nTITLE: File System Data Sync Operation in libuv\nDESCRIPTION: Synchronizes a file's data to disk. Equivalent to fdatasync(2) system call. Similar to fsync but doesn't flush metadata.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_53\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_fdatasync({fd} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Loading All Vim Packages with :packloadall Command\nDESCRIPTION: The :packloadall command loads all packages in the \"start\" directory under each entry in 'packpath', adding them to 'runtimepath' and sourcing plugin files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:packl[oadall][!]\n```\n\n----------------------------------------\n\nTITLE: Defining Shortcuts for Lua BitOp functions\nDESCRIPTION: Shows a common practice of caching frequently used BitOp functions in local variables to save typing and improve performance. It does this by mapping bitwise operation functions to shorter local variable names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bnot = bit.bnot\nlocal band, bor, bxor = bit.band, bit.bor, bit.bxor\nlocal lshift, rshift, rol = bit.lshift, bit.rshift, bit.rol\n\n-- Example use of the shortcuts:\nlocal function tr_i(a, b, c, d, x, s)\n  return rol(bxor(c, bor(b, bnot(d))) + a + x, s) + b\nend\n```\n\n----------------------------------------\n\nTITLE: Closing a fold\nDESCRIPTION: Closes an open fold at the cursor position, hiding its content and showing just the folded line. This is the counterpart to the zo command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_28.txt#2025-04-20_snippet_2\n\nLANGUAGE: vimdoc\nCODE:\n```\nzc\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Mapping Definition\nDESCRIPTION: Example of defining custom mapping for a mail plugin feature.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\nmap ,p <Plug>MailQuote\n```\n\n----------------------------------------\n\nTITLE: Checking for Integer using Msgpack in Vim\nDESCRIPTION: This function is used to determine if a given Msgpack value is of integer type. It returns 1 if the value is an integer and 0 otherwise. The function does not independently verify the type but relies on the description.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#is_int({msgpack-value})\n```\n\n----------------------------------------\n\nTITLE: Mapping Key to No Operation in Vim\nDESCRIPTION: This snippet demonstrates how to map a key in Vim so that it performs no action. The <F7> key is mapped to <Nop>, effectively making it inactive.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:map <F7> <Nop>| map! <F7> <Nop>\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Vim Script\nDESCRIPTION: Examples of string interpolation using $-quote syntax with expressions in curly braces.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_81\n\nLANGUAGE: vim\nCODE:\n```\nlet your_name = input(\"What's your name? \")\\necho\\necho $\"Hello, {your_name}!\"\\necho $\"The square root of {{9}} is {sqrt(9)}\"\n```\n\n----------------------------------------\n\nTITLE: Sample Text - Long Line\nDESCRIPTION: A long string of 'a' characters used as sample text. It's likely designed to test the handling of long lines in quickfix features.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/quickfix.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n```\n\n----------------------------------------\n\nTITLE: Setting Arabic Font in Neovim GUI\nDESCRIPTION: Sets the GUI font to an Arabic-compatible font. The font name should be replaced with an appropriate Arabic font installed on the system.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_0\n\nLANGUAGE: VimScript\nCODE:\n```\n:set guifont=your_ARABIC_FONT\n```\n\n----------------------------------------\n\nTITLE: Line Comments for Error Handling in C\nDESCRIPTION: Example of using end-of-line comments to explain error handling logic.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n// If we have enough memory, mmap the data portion too.\nmmap_budget = max<int64>(0, mmap_budget - index_->length());\nif (mmap_budget >= data_size_ && !MmapData(mmap_chunk_bytes, mlock)) {\n  return;  // Error already logged.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Filetype for IDL Files\nDESCRIPTION: Commands to manually set the filetype for IDL files, either through command or modeline.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set filetype=idl\n```\n\nLANGUAGE: vim\nCODE:\n```\n/* vim: set filetype=idl : */\n```\n\n----------------------------------------\n\nTITLE: Setting Vim Syntax Sync Line Breaks\nDESCRIPTION: Example showing how to configure syntax synchronization with line breaks consideration\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_174\n\nLANGUAGE: vim\nCODE:\n```\n:syntax sync linebreaks=1\n```\n\n----------------------------------------\n\nTITLE: Navigating Quickfix List History in Vim\nDESCRIPTION: This Vim command shows how to use the `:colder` command to navigate back to the previous quickfix list, useful for browsing code in a tree-like structure.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_38\n\nLANGUAGE: vim\nCODE:\n```\n:colder\n```\n\n----------------------------------------\n\nTITLE: Customizing Completion Key\nDESCRIPTION: Allows the user to define a custom key for triggering the SQL completion. This is useful if the default keymap `<C-C>` conflicts with other configurations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_sql.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n    let g:ftplugin_sql_omni_key = '<C-C>'\n```\n\n----------------------------------------\n\nTITLE: Disabling Matchparen After Loading\nDESCRIPTION: Command to disable the matchparen plugin after it has already been loaded.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\n:NoMatchParen\n```\n\n----------------------------------------\n\nTITLE: Enabling Matchparen Plugin\nDESCRIPTION: Command to re-enable the matchparen plugin after it has been disabled with NoMatchParen.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_paren.txt#2025-04-20_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\n:DoMatchParen\n```\n\n----------------------------------------\n\nTITLE: Neovim Platform Support Matrix\nDESCRIPTION: Table showing supported platforms, their support tiers, required versions and tested versions. Platforms are categorized into three tiers based on level of support and testing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/support.txt#2025-04-20_snippet_0\n\nLANGUAGE: help\nCODE:\n```\n`System`          `Tier`      `Versions`                  `Tested versions`\nLinux (x86_64)   1      >= 2.6.32, glibc >= 2.12     Ubuntu 24.04\nmacOS (x86_64)   1      >= 11                        macOS 13\nmacOS (arm64)    1      >= 11                        macOS 15\nWindows 64-bit   1      >= Windows 10 Version 1809   Windows Server 2022\nFreeBSD          1      >= 10                        FreeBSD 14\nLinux (arm64)    2      >= 2.6.32, glibc >= 2.12\nOpenBSD          2      >= 7\nMinGW            2      MinGW-w64\nWindows 64-bit   3      < Windows 10 Version 1809\n```\n\n----------------------------------------\n\nTITLE: Mapping with Special Characters in Neovim\nDESCRIPTION: This mapping example shows how to include special characters like | (pipe) and space in a mapping command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_40.txt#2025-04-20_snippet_5\n\nLANGUAGE: viml\nCODE:\n```\n:map <F8> :write <Bar> !checkin %:S<CR>\n```\n\n----------------------------------------\n\nTITLE: Configuring String Syntax Region with Quote Highlighting\nDESCRIPTION: Defines a syntax region for strings with custom highlighting for quote characters using matchgroup\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_157\n\nLANGUAGE: viml\nCODE:\n```\n:syntax region String matchgroup=Quote start=+\"+  skip=+\\\"+  end=+\"+\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Options for Rustfmt\nDESCRIPTION: Specifies additional command-line options to pass to rustfmt when formatting code. The write-mode is already set to 'overwrite'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustfmt_options = ''\n```\n\n----------------------------------------\n\nTITLE: Simple Error Pattern Example\nDESCRIPTION: Basic error format pattern for parsing simple compiler errors with line number and column information.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_63\n\nLANGUAGE: vim\nCODE:\n```\n:set efm=%EError\\ %n,%Cline\\ %l,%Ccolumn\\ %c,%Z%m\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Function Command\nDESCRIPTION: Command for running a specific test function from a test script using Vim with minimal configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/README.txt#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n../vim -u NONE -S runtest.vim <test_file>.vim <function_name>\n```\n\n----------------------------------------\n\nTITLE: Line Continuation in Vim Scripts\nDESCRIPTION: Example of using line continuation in Vim scripts with the backslash character, allowing long commands to be split across multiple lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:set comments=sr:/*,mb:*,el:*/,\n\t\t     \\://,\n\t\t     \\b:#,\n\t\t     \\:%,\n\t\t     \\n:>,\n\t\t     \\fb:-\n```\n\n----------------------------------------\n\nTITLE: Configuring Lifelines Syntax Highlighting in Vim\nDESCRIPTION: Enables highlighting of deprecated functions as errors in Lifelines syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_75\n\nLANGUAGE: VimScript\nCODE:\n```\n:let g:lifelines_deprecated = 1\n```\n\n----------------------------------------\n\nTITLE: Alternative First Quickfix Error Command\nDESCRIPTION: An alternative command for displaying the first error in the quickfix list, equivalent to :crewind.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n:cfir[st][!] [nr]\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific Syntax Groups\nDESCRIPTION: Command to clear specific syntax groups for the current buffer, removing all patterns and keywords for the specified group names.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_199\n\nLANGUAGE: vim\nCODE:\n```\n:syntax clear {group-name} ..\n```\n\n----------------------------------------\n\nTITLE: Disable automatic execution for security\nDESCRIPTION: This snippet demonstrates how to disable automatic execution of commands by the gzip plugin for security reasons. Setting `g:gzip_exec` to 0 prevents the plugin from running external executables when opening a buffer.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_gzip.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n\t:let g:gzip_exec = 0\n\n```\n\n----------------------------------------\n\nTITLE: Handling Numbers in VimL\nDESCRIPTION: This code illustrates the representation and output of different number types in Vim script, including decimal, hexadecimal, octal, and binary. It showcases how these numbers are printed using the :echo command. Key inputs are number definitions in various formats, and outputs are their decimal representations.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_2\n\nLANGUAGE: VimL\nCODE:\n```\n:echo 0x7f 0o36\n:echo 0x7f -0o36\n```\n\n----------------------------------------\n\nTITLE: Disabling LaTeX Error Checking with VimL\nDESCRIPTION: Configuration to suppress all lexical error checking performed by the LaTeX syntax highlighting. Useful when error highlighting is incorrectly flagging valid LaTeX code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_139\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_no_error=1\n```\n\n----------------------------------------\n\nTITLE: Toggling Ada Syntax Options\nDESCRIPTION: Function to toggle Ada highlighting options on or off. This function is used by the Ada menu in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_6\n\nLANGUAGE: viml\nCODE:\n```\nada#Switch_Syntax_Option({option})\n```\n\n----------------------------------------\n\nTITLE: Set Show Mode Command\nDESCRIPTION: Command to display the current editing mode at the bottom of the Vim window.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set showmode\n```\n\n----------------------------------------\n\nTITLE: Switch Visual Block Selection Corner in Neovim\nDESCRIPTION: In Visual block mode, this command moves the cursor to the opposite corner in the same line. The highlighted text may change when the corner is at a character that occupies more than one position on the screen (e.g., a <Tab>).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/visual.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n\"O\"\n```\n\n----------------------------------------\n\nTITLE: Removing Window-Scoped Variable in Neovim Lua API\nDESCRIPTION: Removes a window-scoped (w:) variable. Available since Neovim 0.1.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_73\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_del_var({window}, {name})\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Global Plugin (Unix) - Vim\nDESCRIPTION: This snippet shows how to create a plugin directory for adding a global plugin in Unix systems. It ensures that the necessary directory structure exists for plugin installation.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_6\n\nLANGUAGE: Vim\nCODE:\n```\nmkdir -p ~/.local/share/nvim/site/plugin\n```\n\n----------------------------------------\n\nTITLE: Deprecated Vimscript Buffer Functions\nDESCRIPTION: Lists Vimscript buffer functions that are now obsolete and maps them to new equivalents like bufnr() for buffer_number().\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_5\n\nLANGUAGE: Vimscript\nCODE:\n```\nbuffer_number()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Error in Previous File\nDESCRIPTION: Commands for displaying the last error in the previous file in the quickfix list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\n:[count]cNf[ile][!]\n:[count]cpf[ile][!]\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to tag tests by adding a hashtag before the description string in the `it` function, allowing for selective running of tests that match specific tags.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nit('#foo bar baz', function()\n  ...\nend)\nit('#foo another test', function()\n  ...\nend)\n```\n\n----------------------------------------\n\nTITLE: Stopping the libuv Event Loop in Lua\nDESCRIPTION: This function stops the libuv event loop, causing |uv.run()| to end as soon as possible.  The effect is not immediate but takes place on the next loop iteration. This function does not return anything.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.stop()                                                            *uv.stop()*\\n\\n                Stop the event loop, causing |uv.run()| to end as soon as\\n                possible. This will happen not sooner than the next loop\\n                iteration. If this function was called before blocking for\\n                I/O, the loop won't block for I/O on this iteration.\\n\\n                Returns: Nothing.\"\n```\n\n----------------------------------------\n\nTITLE: Styling Table Cell with HTML in HTML\nDESCRIPTION: This snippet demonstrates the HTML markup for styling a single table cell with specific border, alignment, font, and color properties. It sets a bottom border, right-aligns the content, and displays a red '5' in Arial font.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Custom Subscript Character Set for LaTeX with VimL\nDESCRIPTION: Example of customizing which characters can be displayed as subscripts based on font support. This example removes characters not supported by Luxi Mono Bold.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_145\n\nLANGUAGE: viml\nCODE:\n```\nlet g:tex_subscripts= \"[0-9aeijoruvx,+-/().]\"\n```\n\n----------------------------------------\n\nTITLE: Sleep Command Examples in Vim\nDESCRIPTION: Examples demonstrating various ways to use the sleep command in Vim, showing different time unit specifications.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:sleep      \"sleep for one second\n:5sleep      \"sleep for five seconds\n:sleep 100m     \"sleep for 100 milliseconds\n10gs          \"sleep for ten seconds\n```\n\n----------------------------------------\n\nTITLE: Setting Up Uncrustify External Project in CMake\nDESCRIPTION: Configures the uncrustify code formatter as an external project dependency, setting up its build parameters and output directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nget_externalproject_options(uncrustify ${DEPS_IGNORE_SHA})\nExternalProject_Add(uncrustify\n  DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/uncrustify\n  CMAKE_ARGS ${DEPS_CMAKE_ARGS}\n    -D CMAKE_RUNTIME_OUTPUT_DIRECTORY=${DEPS_BIN_DIR}\n    -D CMAKE_SKIP_RPATH=true\n  EXCLUDE_FROM_ALL TRUE\n  ${EXTERNALPROJECT_OPTIONS})\n```\n\n----------------------------------------\n\nTITLE: Displaying Vim Window Size in Characters\nDESCRIPTION: This command displays the current size of the Vim window in terms of lines and columns (characters).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:set lines columns\n```\n\n----------------------------------------\n\nTITLE: Digraph Get Example in Vim\nDESCRIPTION: Demonstrates how to get built-in and user-defined digraphs using the digraph_get() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_52\n\nLANGUAGE: vim\nCODE:\n```\n\" Get a built-in digraph\necho digraph_get('00')\t\t\" Returns '∞'\n\n\" Get a user-defined digraph\ncall digraph_set('aa', 'あ')\necho digraph_get('aa')\t\t\" Returns 'あ'\n```\n\n----------------------------------------\n\nTITLE: Using or() Function for Bitwise Operations in Vim\nDESCRIPTION: Demonstrates how to perform bitwise OR operations by setting a specific bit in a variable. This function allows combining bit flags in Vim scripts.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_185\n\nLANGUAGE: vim\nCODE:\n```\nlet bits = or(bits, 0x80)\n```\n\n----------------------------------------\n\nTITLE: Special Character Search Pattern\nDESCRIPTION: Shows how to search for '#include' using forward slash and repeat search with the n command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_03.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n/#include\n```\n\n----------------------------------------\n\nTITLE: Clearing Syntax Group Lists\nDESCRIPTION: Command to clear specific syntax group lists for the current buffer, setting the contents of the specified group lists to empty.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_200\n\nLANGUAGE: vim\nCODE:\n```\n:syntax clear @{grouplist-name} ..\n```\n\n----------------------------------------\n\nTITLE: Getting Thread Name in Lua with Libuv\nDESCRIPTION: Retrieves the name of the specified thread. Can be used as a method on a thread object.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_68\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_getname({thread})\n```\n\n----------------------------------------\n\nTITLE: Disabling Matchit Plugin in Neovim Config\nDESCRIPTION: Add this line to your Neovim config to disable the default matchit plugin.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\n:let loaded_matchit = 1\n```\n\n----------------------------------------\n\nTITLE: Formatting Table Cell with Styled Number\nDESCRIPTION: HTML table cell with windowtext border styling, Arial font, and red-colored bold number 5. The cell includes border-bottom and border-left styles with specific windowtext color.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Defining Match Words for New Language: Vim Script\nDESCRIPTION: To configure the Matchit plugin for a new programming language, the 'b:match_words' variable must be set. This variable defines the matching patterns and groups the plugin will recognize, enabling custom behavior for different language structures.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nlet b:match_words = '\\<foo\\>:\\<bar\\>'\n```\n\n----------------------------------------\n\nTITLE: Defining NetReadFixup Function in Vim Script\nDESCRIPTION: Creates a function to handle custom fixups for different file transfer methods in Netrw.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_19\n\nLANGUAGE: Vim script\nCODE:\n```\nfunction! NetReadFixup(method,line1,line2)\n  \" a:line1: first new line in current file\n  \" a:line2: last  new line in current file\n  if     a:method == 1 \"rcp\n  elseif a:method == 2 \"ftp + <.netrc>\n  elseif a:method == 3 \"ftp + machine,uid,password,filename\n  elseif a:method == 4 \"scp\n  elseif a:method == 5 \"http/wget\n  elseif a:method == 6 \"dav/cadaver\n  elseif a:method == 7 \"rsync\n  elseif a:method == 8 \"fetch\n  elseif a:method == 9 \"sftp\n  else               \" complain\n  endif\nendfunction\n```\n\n----------------------------------------\n\nTITLE: Query Pattern with Predicate Match\nDESCRIPTION: Query pattern showing comment matching with the match? predicate.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_5\n\nLANGUAGE: query\nCODE:\n```\n(((comment)+ @comment)\\n (#match? @comment \"TODO\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Netrw List Hide Pattern Example in VimL\nDESCRIPTION: Examples of how to configure the g:netrw_list_hide variable to hide files matching specific patterns. Shows how to hide .swp files and also how to combine with gitignore patterns using the netrw_gitignore#Hide() helper function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_36\n\nLANGUAGE: viml\nCODE:\n```\nlet g:netrw_list_hide= '.*\\.swp$'\nlet g:netrw_list_hide= netrw_gitignore#Hide() .. '.*\\.swp$'\n```\n\n----------------------------------------\n\nTITLE: Using input() with default text\nDESCRIPTION: Shows how to use the input() function with a default value that will be pre-filled for the user. This example prompts for a color with \"white\" as the default value.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_133\n\nLANGUAGE: vim\nCODE:\n```\nlet color = input(\"Color? \", \"white\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Folding for Rust Files\nDESCRIPTION: Enables code folding for Rust files. When set to 1, braced blocks are folded but all folds are open by default. When set to 2, folds respect the global foldlevel setting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_fold = 1\n```\n\n----------------------------------------\n\nTITLE: Vim Command Documentation Format\nDESCRIPTION: Documentation entry format showing command name with its short/long forms and description. Commands follow the pattern of |:command| :abbreviated[full] description\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/index.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n|:ruby|\t\t:rub[y]\t\texecute Ruby command\n|:rubydo|\t:rubyd[o]\texecute Ruby command for each line\n|:rubyfile|\t:rubyf[ile]\texecute Ruby script file\n```\n\n----------------------------------------\n\nTITLE: Converting UTF-16 to WTF-8 in Lua\nDESCRIPTION: This function converts a UTF-16 (or UCS-2) string to a UTF-8 string. It assumes the endianness of the input string matches the platform's native endianness.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_107\n\nLANGUAGE: lua\nCODE:\n```\nuv.utf16_to_wtf8({utf16})\n```\n\n----------------------------------------\n\nTITLE: Setting GCC Compiler Parameters in Vim\nDESCRIPTION: Sets parameters for the javac compiler by configuring the javac_makeprg_params variable to include additional compiler flags.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\nlet g:javac_makeprg_params = \"-Xlint:all -encoding utf-8\"\n```\n\n----------------------------------------\n\nTITLE: Custom Completion Function Signature in Vim/Neovim\nDESCRIPTION: The function signature for a custom completion function used with user-defined commands. It takes three parameters: ArgLead, CmdLine, and CursorPos.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/map.txt#2025-04-20_snippet_31\n\nLANGUAGE: viml\nCODE:\n```\n:function {func}(ArgLead, CmdLine, CursorPos)\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Colors in Neovim\nDESCRIPTION: Example of setting white text on black background for GUI Neovim\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\n:highlight Normal guibg=Black guifg=White\n```\n\n----------------------------------------\n\nTITLE: Adding Rare Word to Vim Spell File\nDESCRIPTION: Command to add a word as a rare word to the first entry in 'spellfile'. Count can be used to specify a different entry.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_5\n\nLANGUAGE: vimdoc\nCODE:\n```\n:[count]spellra[re] {word}\n```\n\n----------------------------------------\n\nTITLE: PuTTY Configuration for Netrw\nDESCRIPTION: Configuration settings for using PuTTY's PSCP and PSFTP with Netrw.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_scp_cmd = '\"c:\\Program Files\\PuTTY\\pscp.exe\" -q -batch'\nlet g:netrw_sftp_cmd= '\"c:\\Program Files\\PuTTY\\psftp.exe\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Gettext Tools in CMake\nDESCRIPTION: This macro processes header template files, replacing placeholders and configuring them for the build. It handles system-specific adjustments and sets default values for undefined variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(CONFIGURE_HEADER_FILES HEADER_TEMPLATES_PATH)\n  set(HEADER_TEMPLATES_ABS_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/${HEADER_TEMPLATES_PATH}\")\n  file(GLOB_RECURSE HEADER_TEMPLATES \"${HEADER_TEMPLATES_ABS_PATH}/*.in.h\")\n  list(REMOVE_ITEM HEADER_TEMPLATES  \"${HEADER_TEMPLATES_ABS_PATH}/stdint.in.h\")\n  list(REMOVE_ITEM HEADER_TEMPLATES  \"${HEADER_TEMPLATES_ABS_PATH}/wchar.in.h\")\n  foreach(HEADER_TEMPLATE ${HEADER_TEMPLATES})\n    file(READ ${HEADER_TEMPLATE} HEADER_CONTENT)\n    string(REPLACE \"/* The definition of _GL_ARG_NONNULL is copied here.  */\" \"#include \\\"arg-nonnull.h\\\"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"/* The definition of _GL_WARN_ON_USE is copied here.  */\" \"#include \\\"warn-on-use.h\\\"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"/* The definitions of _GL_FUNCDECL_RPL etc. are copied here.  */\" \"#include \\\"c++defs.h\\\"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@GNULIB_LSTAT@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@GNULIB_MBSINIT@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@GNULIB_SIGACTION@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@GNULIB_SIGPROCMASK@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@GNULIB_STPCPY@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@GNULIB_STPNCPY@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@GNULIB_STRCHRNUL@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@HAVE_ISWCNTRL@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@HAVE_WCTYPE_T@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@HAVE_STRUCT_TIMEVAL@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@HAVE_WINSOCK2_H@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@DLL_VARIABLE@\" \"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@HAVE_NEWLOCALE@\" \"0\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@PRAGMA_COLUMNS@\" \"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"#if @GNULIB_UTIME@\" \"#if 1\\n#define utime gl_utime\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@HAVE_UTIME@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    string(REPLACE \"@HAVE_LONG_LONG_INT@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n\n    string(REGEX REPLACE \"^${HEADER_TEMPLATES_ABS_PATH}/\" \"\" HEADER_PATH \"${HEADER_TEMPLATE}\")\n    string(REPLACE \".in\" \"\" HEADER_PATH ${HEADER_PATH})\n    string(REPLACE \"_\" \"/\" HEADER_PATH ${HEADER_PATH})\n    # find_file will create a cache entry for the variable\n    # SYSTEM_HEADER, so reset it before each call\n    set(SYSTEM_HEADER \"SYSTEM_HEADER-NOTFOUND\")\n    find_file(SYSTEM_HEADER ${HEADER_PATH} PATHS \"${LIBICONV_INCLUDE_DIRS}\")\n    if(SYSTEM_HEADER)\n      # Gnulib uses #include_next to extend system header files,\n      # but MSVC doesn't support it, so a regular include directive\n      # with a relative path is used instead\n      string(REGEX REPLACE \".*/(.*/\\${HEADER_PATH})\" \"../\\\\1\"\n        INCLUDE_PATH \"${SYSTEM_HEADER}\")\n      string(REGEX REPLACE \"@INCLUDE_NEXT[^@]*@ @NEXT_[^@\\n]+@\"\n        \"include <${INCLUDE_PATH}>\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n    endif()\n\n    # Default any remaining template variables to 0\n    string(REGEX REPLACE \"@[^@\\n]+@\" \"0\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n\n    file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/${HEADER_TEMPLATES_PATH}/${HEADER_PATH}\" \"${HEADER_CONTENT}\")\n  endforeach()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Styling Table Cell with HTML in Neovim Project\nDESCRIPTION: HTML code for a table cell with specific styling including bottom border, left border, right alignment, Arial font, and red text color. The cell contains the number 5 in bold.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Setting the Current Window - Lua\nDESCRIPTION: Sets the current window and implicitly the associated tabpage. This action is restricted during text lock.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nnvim_set_current_win({window})\n```\n\n----------------------------------------\n\nTITLE: Executing Function in Window Context in Neovim Lua API\nDESCRIPTION: Calls a Lua function with a specific window as the temporary current window. Available since Neovim 0.5.0.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_71\n\nLANGUAGE: lua\nCODE:\n```\nnvim_win_call({window}, {fun})\n```\n\n----------------------------------------\n\nTITLE: Setting FreeBASIC Dialect Configuration\nDESCRIPTION: Code snippet showing how to set the default FreeBASIC dialect to 'fblite' while allowing #lang directive overrides.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\nlet g:freebasic_lang = \"fblite\"\n```\n\n----------------------------------------\n\nTITLE: Styling Table Cell with Borders and Formatted Text in HTML\nDESCRIPTION: HTML markup for a table cell with bottom and left borders, right alignment, and red '5' text in Arial font. This pattern is repeated multiple times to create a table row.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sections for Manpages in Neovim\nDESCRIPTION: This command sets the `b:man_default_sections` variable to '3,2', which specifies the preferred sections for manpages, such as sections 3 and 2 for C programming. This allows specifying the order of sections to check for a command's manpage.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\n\":let b:man_default_sections = '3,2'\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Next Quickfix Error\nDESCRIPTION: Command for displaying the next error in the quickfix list that includes a file name.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:[count]cn[ext][!]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Maven Pre-Compiler Actions in Vim\nDESCRIPTION: Custom functions to handle Maven pre-compilation actions, including class file cleanup and compilation. These functions are registered with SpotBugs using function references in the g:spotbugs_properties dictionary.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_51\n\nLANGUAGE: vim\nCODE:\n```\nfunction! MavenPreCompilerAction() abort\n\tcall spotbugs#DeleteClassFiles()\n\tcompiler maven\n\tmake compile\n\tcc\nendfunction\n\nfunction! MavenPreCompilerTestAction() abort\n\tcall spotbugs#DeleteClassFiles()\n\tcompiler maven\n\tmake test-compile\n\tcc\nendfunction\n\nlet g:spotbugs_properties = {\n\t\\ 'compiler':\t\t'maven',\n\t\\ 'PreCompilerAction':\n\t\t\\ function('MavenPreCompilerAction'),\n\t\\ 'PreCompilerTestAction':\n\t\t\\ function('MavenPreCompilerTestAction'),\n\\ }\n```\n\n----------------------------------------\n\nTITLE: Example Text Input\nDESCRIPTION: Example showing how to enter text in Insert mode and return to Normal mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_02.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\niA very intelligent turtle\nFound programming Unix a hurdle\n```\n\n----------------------------------------\n\nTITLE: Literal <lt> Mapping in Vim\nDESCRIPTION: Demonstrates how to create a mapping that inserts a literal '<lt>' character using key notation and mapping techniques.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_4\n\nLANGUAGE: vim\nCODE:\n```\n:map <C-L> <lt>lt>\n```\n\n----------------------------------------\n\nTITLE: Installing Gettext Tools Components in CMake\nDESCRIPTION: This snippet sets up the installation rules for the Gettext tools, including header files, libraries, and executables.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\n\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/intl/libgnuintl.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n  RENAME libintl.h)\n\ninstall(TARGETS libintl msgmerge msgfmt xgettext\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n```\n\n----------------------------------------\n\nTITLE: Window Scrolling Commands (Vim)\nDESCRIPTION: Commands for scrolling the window content vertically and horizontally, including line-by-line and page-by-page movements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nCTRL-E          window N lines downwards (default: 1)\nCTRL-D          window N lines Downwards (default: 1/2 window)\nCTRL-F          window N pages Forwards (downwards)\nCTRL-Y          window N lines upwards (default: 1)\nCTRL-U          window N lines Upwards (default: 1/2 window)\nCTRL-B          window N pages Backwards (upwards)\nz<CR> or zt     redraw, current line at top of window\nz. or zz        redraw, current line at center of window\nz- or zb        redraw, current line at bottom of window\n```\n\n----------------------------------------\n\nTITLE: Using Remote Vim Configuration via SSH\nDESCRIPTION: Command-line options to start Vim using a remote .vimrc file accessed via scp, allowing for portable configuration across systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nvim -u NORC -N\n --cmd \"runtime plugin/netrwPlugin.vim\"\n --cmd \"source scp://HOSTNAME/.vimrc\"\n```\n\n----------------------------------------\n\nTITLE: Loading the Lua BitOp module\nDESCRIPTION: Demonstrates how to load the BitOp module in Lua using the require function. This approach ensures the module is only loaded once and limits its scope to the current file, avoiding reliance on global variables.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/lua-bit.txt#2025-04-20_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal bit = require(\"bit\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Control Master for Faster Netrw Operations in SSH Config\nDESCRIPTION: This snippet shows how to configure SSH Control Master in the SSH config file to speed up Netrw operations when using SSH connections. It sets up shared connections to reduce connection overhead.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_53\n\nLANGUAGE: SSH Config\nCODE:\n```\n# you change \"*\" to the hostname you care about\nHost *\n  ControlMaster auto\n  ControlPath /tmp/%r@%h:%p\n```\n\n----------------------------------------\n\nTITLE: Customizing FTP List Commands for Windows Integration\nDESCRIPTION: Configuration for properly handling file listings with FTP on Windows systems by setting custom list commands to support sorting by name, time, and size.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_43\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_ftp_list_cmd    = \"ls -lF\"\nlet g:netrw_ftp_timelist_cmd= \"ls -tlF\"\nlet g:netrw_ftp_sizelist_cmd= \"ls -slF\"\n```\n\n----------------------------------------\n\nTITLE: Using perleval() Function to Evaluate Perl Expressions in Vim\nDESCRIPTION: Demonstrates how to use perleval() to execute Perl code and convert the result to Vim data structures. This example creates a Perl array and returns it as a Vim list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_187\n\nLANGUAGE: vim\nCODE:\n```\necho perleval('[1 .. 4]')\n```\n\n----------------------------------------\n\nTITLE: Return with Finally in Vim Script\nDESCRIPTION: Demonstrates that finally blocks are executed even when a return statement is used in the try block, and the return value is preserved.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_134\n\nLANGUAGE: vim\nCODE:\n```\n:function! Foo()\n:  try\n:    return 4711\n:  finally\n:    echo \"cleanup\\n\"\n:  endtry\n:  echo \"Foo still active\"\n:endfunction\n:\n:echo Foo() \"returned by Foo\"\n```\n\n----------------------------------------\n\nTITLE: Using keytrans to Display Special Key Representation in Vim\nDESCRIPTION: Example of using keytrans() to convert the internal byte representation of keys into a form that can be used for mapping. This converts a control key sequence to a readable format.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_150\n\nLANGUAGE: vim\nCODE:\n```\nlet xx = \"\\<C-Home>\"\necho keytrans(xx)\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Source Form for Fortran in Vim\nDESCRIPTION: Instructs Vim to always assume a fixed source form for new Fortran files by setting 'fortran_fixed_source' to 1. This ensures correct syntax highlighting by default for fixed form Fortran.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_34\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_fixed_source=1\n```\n\n----------------------------------------\n\nTITLE: Stderr Writing in Vim Script\nDESCRIPTION: Demonstrates writing to stderr using the v:stderr channel ID constant.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_11\n\nLANGUAGE: vim\nCODE:\n```\n:call chansend(v:stderr, \"error: toaster empty\\n\")\n```\n\n----------------------------------------\n\nTITLE: Copying and Modifying Array Elements in C using Vim\nDESCRIPTION: This snippet explains duplicating a previous line in C code using Vim's CTRL-Y command followed by minor modifications. The code duplicates an element assignment and modifies the property name from 's_next' to 's_prev'. Vim's shortcuts help in quickly replicating lines with minor edits.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_24.txt#2025-04-20_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nb_array[i]->s_next = a_array[i]->s_next; ~\n```\n\nLANGUAGE: C\nCODE:\n```\nb_array[i]->s_prev ~\n```\n\nLANGUAGE: C\nCODE:\n```\nb_array[i]->s_prev = a_array[i]->s_prev; ~\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Filetype Plugin (Unix) - Vim\nDESCRIPTION: This snippet illustrates the process of creating a directory specifically for filetype plugins in a Unix environment, ensuring that the correct hierarchy is maintained.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_8\n\nLANGUAGE: Vim\nCODE:\n```\nmkdir -p ~/.local/share/nvim/site/ftplugin\n```\n\n----------------------------------------\n\nTITLE: Using Unicode in a Unicode Terminal - Vimscript\nDESCRIPTION: This code snippet outlines how to start a Unicode-supported terminal to run Vim, ensuring it can display Unicode characters appropriately.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_3\n\nLANGUAGE: Vim\nCODE:\n```\nxterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1\n```\n\n----------------------------------------\n\nTITLE: Enabling Org Folding in Neovim\nDESCRIPTION: This command sets the `g:org_folding` variable to `1`, which enables folding in Org files. Requires the org plugin to be installed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\n\tlet g:org_folding = 1\n```\n\n----------------------------------------\n\nTITLE: Examining include chain with clang\nDESCRIPTION: Complex command to trace the include chain for a header file using clang's -H option, filtering out system headers.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\necho '#include \"./src/nvim/buffer.h\"' | \\\n> clang -I.deps/usr/include -Isrc -std=c99 -P -E -H - 2>&1 >/dev/null | \\\n> grep -v /usr/\n```\n\n----------------------------------------\n\nTITLE: Checking for password database functions in C\nDESCRIPTION: Tests if the system supports functions for accessing the user database (passwd) by attempting to compile a program that calls getpwent, getpwuid, and getpwnam.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.config/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#include <pwd.h>\nint main(void)\n{\n  getpwent();\n  getpwuid(0);\n  getpwnam(\"root\");\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting FTP and SCP Command Options in Vim Script\nDESCRIPTION: Defines global variables to specify the external programs used for FTP and SCP protocols in Netrw.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_17\n\nLANGUAGE: Vim script\nCODE:\n```\ng:netrw_scp_cmd      var   =\"scp -q\"\ng:netrw_sftp_cmd     var   =\"sftp\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Indent File in Vim\nDESCRIPTION: This snippet checks if an indent file has already been loaded to prevent duplicate loading. It sets a buffer-local variable to indicate that the indent file has been loaded.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/indent/README.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\" Only load this indent file when no other was loaded yet.\nif exists(\"b:did_indent\")\n  finish\nendif\nlet b:did_indent = 1\n```\n\n----------------------------------------\n\nTITLE: Setting Highlight Group Link in VimL\nDESCRIPTION: Commands for linking highlight groups together in Neovim. The command can create a new link between groups or remove an existing link by using NONE.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_195\n\nLANGUAGE: viml\nCODE:\n```\n:hi[ghlight][!] [default] link {from-group} {to-group}\n:hi[ghlight][!] [default] link {from-group} NONE\n```\n\n----------------------------------------\n\nTITLE: Configuration for BASIC Filetypes in VimL\nDESCRIPTION: Sets the filetype for Visual Basic or BASIC based on the presence of the \"VB_Name\" string in the initial lines of the file. Ensures correct filetype for FreeBASIC via startup vimrc setting.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_9\n\nLANGUAGE: VimL\nCODE:\n```\n:let filetype_bas = \"freebasic\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Line Numbering in Netrw Directory Listings in VimL\nDESCRIPTION: This snippet shows how to enable line numbering in Netrw directory listings by modifying the g:netrw_bufsettings variable. It provides options for both standard and relative line numbering.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_55\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:netrw_bufsettings=\"noma nomod nu nobl nowrap ro nornu\"\n```\n\nLANGUAGE: VimL\nCODE:\n```\nlet g:netrw_bufsettings=\"noma nomod nonu nobl nowrap ro rnu\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Building libgettextsrc Library in CMake\nDESCRIPTION: This snippet defines the libgettextsrc library, sets its sources, links it with libiconv, and sets compile definitions.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(libgettextsrc ${libgettextsrc_SOURCES})\ntarget_link_libraries(libgettextsrc ${LIBICONV_LIBRARIES})\nset_property(TARGET libgettextsrc APPEND PROPERTY COMPILE_DEFINITIONS\n  LIBTEXTSTYLE_DLL_VARIABLE=)\n```\n\n----------------------------------------\n\nTITLE: Disabling VHDL right-hand side assignment alignment\nDESCRIPTION: Turns off the default alignment of right-hand side assignment operators '<=' in VHDL files. By default, these assignments are aligned for better readability.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\nlet g:vhdl_indent_rhsassign = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Completion in Command Window - VimL\nDESCRIPTION: This snippet configures the completion method for the command-line in the current window by restoring it from a saved variable. It is useful for maintaining consistent completion settings when switching buffers.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_13\n\nLANGUAGE: VimL\nCODE:\n```\n:au CmdwinLeave :  let &cpt = b:cpt_save\n```\n\n----------------------------------------\n\nTITLE: Thread Pool Work Example in Lua\nDESCRIPTION: Demonstrates how to use Libuv's thread pool for executing work callbacks asynchronously. Shows a simple addition operation running in a separate thread with result handling in the main loop.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_56\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function work_callback(a, b)\n  return a + b\nend\n\nlocal function after_work_callback(c)\n  print(\"The result is: \" .. c)\nend\n\nlocal work = uv.new_work(work_callback, after_work_callback)\n\nwork:queue(1, 2)\n\n-- output: \"The result is: 3\"\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Tests\nDESCRIPTION: Shell commands demonstrating how to run tests with name-based filtering.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nTEST_FILTER='foo.*api' make functionaltest\nTEST_FILTER_OUT='foo.*api' make functionaltest\n```\n\n----------------------------------------\n\nTITLE: Setting hlsearch variable example\nDESCRIPTION: Example showing how to manipulate the v:hlsearch variable by restoring the current hlsearch state\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vvars.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nlet &hlsearch = &hlsearch\n```\n\n----------------------------------------\n\nTITLE: Comparing Thread Equality in Lua with Libuv\nDESCRIPTION: Checks if two threads are equal. This function can be used as a method on a thread object or called directly with two thread arguments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_58\n\nLANGUAGE: lua\nCODE:\n```\nuv.thread_equal({thread}, {other_thread})\n```\n\n----------------------------------------\n\nTITLE: En Bloc Shell Command Example with Marked Files (netrw-mX)\nDESCRIPTION: Example of using the 'mX' command to execute a single shell command on all marked files at once. The example shows creating a tar archive from selected files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_33\n\nLANGUAGE: viml\nCODE:\n```\n(mark files)\nmX\nEnter command: tar cf mynewtarball.tar\n```\n\n----------------------------------------\n\nTITLE: Setting langmap for Russian keyboard in Vim\nDESCRIPTION: Command to set the 'langmap' option that maps Russian characters to English ones for Normal mode commands, allowing users to enter commands without switching keyboards.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/russian.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,\n    фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz\n```\n\n----------------------------------------\n\nTITLE: Makefile Rules for Generating C Type Highlighting\nDESCRIPTION: Makefile rules to generate a types.vim file that highlights C typedefs, unions, and structs using Universal/Exuberant ctags and awk.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_205\n\nLANGUAGE: makefile\nCODE:\n```\n# Make a highlight file for types.  Requires Universal/Exuberant ctags and awk\ntypes: types.vim\ntypes.vim: *.[ch]\n\tctags --c-kinds=gstu -o- *.[ch] |\\\n\t\tawk 'BEGIN{printf(\"syntax keyword Type\\t\")}\\\n\t\t\t{printf(\"%s \", $$1)}END{print \"\"}' > $@\n```\n\n----------------------------------------\n\nTITLE: Setting multiple filetypes in a C file comment\nDESCRIPTION: Example of setting multiple filetypes (C and Doxygen) in a C file comment using a dot separator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/options.txt#2025-04-20_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n/* vim: set filetype=c.doxygen : */\n```\n\n----------------------------------------\n\nTITLE: Reading Date Command Output into Vim\nDESCRIPTION: Inserts the current UTC time and date at the top of the file using the external date command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_10.txt#2025-04-20_snippet_23\n\nLANGUAGE: vim\nCODE:\n```\n:0read !date -u\n```\n\n----------------------------------------\n\nTITLE: Using netrw_gitignore#Hide Function with g:netrw_list_hide in VimL\nDESCRIPTION: Examples of using the netrw_gitignore#Hide function to hide git-ignored files in Netrw explorer. This function can be used alone, with custom file paths, or combined with additional patterns.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_28\n\nLANGUAGE: viml\nCODE:\n```\nlet g:netrw_list_hide= netrw_gitignore#Hide()\n```\n\nLANGUAGE: viml\nCODE:\n```\nlet g:netrw_list_hide= netrw_gitignore#Hide('my_gitignore_file')\n```\n\nLANGUAGE: viml\nCODE:\n```\nlet g:netrw_list_hide= netrw_gitignore#Hide() .. '.*\\.swp$'\n```\n\n----------------------------------------\n\nTITLE: Setting Encoding for Netrw to Handle Accented Characters in VimL\nDESCRIPTION: This snippet shows how to set a specific encoding for Netrw to handle directories or files with accented characters. It uses an autocmd to set the encoding when the Netrw filetype is detected.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_57\n\nLANGUAGE: VimL\nCODE:\n```\nau FileType netrw set enc=latin1\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tree Listing Style in Vim Configuration\nDESCRIPTION: Sets the default Netrw listing style to tree view (style 3) by adding a line to the .vimrc file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_22\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_liststyle= 3\n```\n\n----------------------------------------\n\nTITLE: Generating LSP Protocol Definitions for Neovim\nDESCRIPTION: This command generates the LSP protocol definitions used in Neovim. It runs a Lua script that updates the protocol.lua file with the latest LSP specification.\nSOURCE: https://github.com/neovim/neovim/blob/master/MAINTAIN.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsrc/gen/gen_lsp.lua\n```\n\n----------------------------------------\n\nTITLE: Space-Aware Pattern Matching Configuration\nDESCRIPTION: Configuration for handling patterns with spaces, using notend variable to prevent matching 'end' within other words.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'\n:let b:match_words = s:notend . '\\<if\\>:\\<end\\s\\+if\\>'\n```\n\n----------------------------------------\n\nTITLE: Prompt Buffer Callback Example in Vim\nDESCRIPTION: Shows how to set up a callback function for a prompt buffer that handles user input\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_196\n\nLANGUAGE: vim\nCODE:\n```\nfunc s:TextEntered(text)\n  if a:text == 'exit' || a:text == 'quit'\n    stopinsert\n    set nomodified\n    close\n  else\n    call append(line('$') - 1, 'Entered: \"' .. a:text .. '\"')\n  endif\nendfunc\ncall prompt_setcallback(bufnr(), function('s:TextEntered'))\n```\n\n----------------------------------------\n\nTITLE: Creating Main Neovim Build Target in CMake\nDESCRIPTION: Creates the main 'nvim' build target that depends on the binary, runtime dependencies, and runtime data, serving as the primary build target for the project.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(nvim ALL)\nadd_dependencies(nvim nvim_bin nvim_runtime_deps nvim_runtime)\n```\n\n----------------------------------------\n\nTITLE: Vim Modeline Configuration\nDESCRIPTION: Vim modeline settings specifying text width, tab stops, file type and other editor behaviors for this help document.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_7\n\nLANGUAGE: vimdoc\nCODE:\n```\nvim:tw=78:ts=8:noet:ft=help:norl:\n```\n\n----------------------------------------\n\nTITLE: Line Continuation with Comments in Vim Scripts\nDESCRIPTION: Example of using line continuation with comments in Vim scripts, demonstrating how to add comments between continued lines.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nlet array = [\n\t\"\\  first entry comment\n\t\\ 'first',\n\t\"\\  second entry comment\n\t\\ 'second',\n\t\\ ]\n```\n\n----------------------------------------\n\nTITLE: Example Test Cases in Lua\nDESCRIPTION: Example of how to write test cases using the it() function with descriptive names that can be filtered.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nit('foo api',function()\n  ...\nend)\nit('bar api',function()\n  ...\nend)\n```\n\n----------------------------------------\n\nTITLE: Splitting a window with specified height\nDESCRIPTION: Opens a new window with a specified height (in lines) and starts editing the given file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n\t:3split alpha.c\n```\n\n----------------------------------------\n\nTITLE: Translation Build Macros\nDESCRIPTION: Collection of CMake macros for building and checking PO files, converting character encodings, and managing translation updates\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(BuildMo name)\n    set(poFile ${CMAKE_CURRENT_SOURCE_DIR}/${name}.po)\n    set(moFile ${CMAKE_CURRENT_BINARY_DIR}/${name}.mo)\n\n    add_custom_command(\n      OUTPUT ${moFile}\n      COMMAND ${GETTEXT_MSGFMT_EXECUTABLE} -o ${moFile} ${poFile}\n      DEPENDS ${poFile} ${NVIM_POT})\n\n    install_helper(\n      FILES ${moFile}\n      DESTINATION ${CMAKE_INSTALL_LOCALEDIR}/${name}/LC_MESSAGES\n      RENAME ${PROJECT_NAME}.mo)\n\n    list(APPEND LANGUAGE_MO_FILES ${moFile})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Improved Function Arguments Documentation in C\nDESCRIPTION: Example showing better documentation of function arguments using inline comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nbool success = calculate_something(interesting_value,\n                                   10,     // Default base value.\n                                   false,  // Not the first time we're calling this.\n                                   NULL);  // No callback.\n```\n\n----------------------------------------\n\nTITLE: Creating New Math Zones in LaTeX Syntax with VimL\nDESCRIPTION: Function call pattern for defining new LaTeX math zones for syntax highlighting. The example shows how to set up an 'eqnarray' math environment.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_140\n\nLANGUAGE: viml\nCODE:\n```\ncall TexNewMathZone(sfx,mathzone,starform)\n```\n\n----------------------------------------\n\nTITLE: Shortened Min Function in Vim\nDESCRIPTION: A more concise version of the Min function that directly returns the smaller value without using a local variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_41.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\n:function Min(num1, num2)\n:  if a:num1 < a:num2\n:    return a:num1\n:  endif\n:  return a:num2\n:endfunction\n```\n\n----------------------------------------\n\nTITLE: Using swapfilelist() in Vim Script\nDESCRIPTION: Demonstrates how to use swapfilelist() function to get a list of swap file names in the current directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_267\n\nLANGUAGE: vim\nCODE:\n```\nlet save_dir = &directory\nlet &directory = '.'\nlet swapfiles = swapfilelist()\nlet &directory = save_dir\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Indent Function in Vim\nDESCRIPTION: This snippet checks if the indent function has already been defined. If it exists, the script finishes to avoid redefining the function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/indent/README.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nif exists(\"*GetMyIndent\")\n  finish\nendif\n```\n\n----------------------------------------\n\nTITLE: Winnowing Marked Files with File Pattern and Content Pattern\nDESCRIPTION: Example showing how to combine 'mr' (mark by regex) and 'mg' (grep in marked files) to filter files first by filename pattern and then by content pattern.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_35\n\nLANGUAGE: viml\nCODE:\n```\nmr ...file-pattern...\nmg /pattern/j\n```\n\n----------------------------------------\n\nTITLE: Setting Default SSH Rename Command in Netrw\nDESCRIPTION: Shows the default value for g:netrw_rename_cmd variable which is used to implement remote file renaming operations via SSH.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\nssh HOSTNAME mv\n```\n\n----------------------------------------\n\nTITLE: Setting up MSYS2/MinGW environment path in Windows\nDESCRIPTION: Command for Windows Command Prompt to set up the PATH environment variable for building with MSYS2/MinGW toolchain.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nset PATH=c:\\msys64\\ucrt64\\bin;c:\\msys64\\usr\\bin;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Lua Diagnostic Code Migration Example\nDESCRIPTION: Example showing how to migrate from deprecated vim.diagnostic.goto_next() to the new vim.diagnostic.jump() with appropriate parameters\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/deprecated.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Old way\nvim.diagnostic.goto_next()\n\n-- New way\nvim.diagnostic.jump({count=1, float=true})\n```\n\n----------------------------------------\n\nTITLE: Popup Menu Item Selection in Command Line Completion\nDESCRIPTION: The function |nvim_select_popupmenu_item()| has been enhanced to support the |cmdline-completion| popup menu, which streamlines the completion process in the command line interface.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/news-0.9.txt#2025-04-20_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: FreeBSD Build Prerequisites\nDESCRIPTION: Installs the necessary packages on FreeBSD systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo pkg install cmake gmake sha wget gettext curl\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary Entry Removal\nDESCRIPTION: Example of removing an entry from a dictionary using a key\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_208\n\nLANGUAGE: vim\nCODE:\n```\necho \"removed \" .. remove(dict, \"one\")\n```\n\n----------------------------------------\n\nTITLE: Basic Command Line Editing in Neovim\nDESCRIPTION: Demonstrates how to edit a substitute command using cursor movement and backspace.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_20.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:s/col/pig/\n:s/cow/pig/\n```\n\n----------------------------------------\n\nTITLE: Helptags Generation Command\nDESCRIPTION: Example showing how to generate help tags file for runtime directory\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/helphelp.txt#2025-04-20_snippet_5\n\nLANGUAGE: vimscript\nCODE:\n```\n:helptags $VIMRUNTIME/doc\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Font in X-Windows\nDESCRIPTION: Example of configuring fonts for Unicode support, particularly for double-wide characters in graphical Vim environments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mbyte.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\n:set guifont=-misc-fixed-medium-r-normal--15-140-75-75-c-90-iso10646-1\n```\n\n----------------------------------------\n\nTITLE: Writing all and quitting\nDESCRIPTION: Writes all modified files and then quits Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_08.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n\t:wqall\n```\n\n----------------------------------------\n\nTITLE: Sample Text - Long Line\nDESCRIPTION: A long string of 'b' characters used as sample text. It's likely designed to test the handling of long lines in quickfix features.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/quickfix.txt#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000 000119999999999999999999999999999999999999982573504582048201015086023500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n```\n\n----------------------------------------\n\nTITLE: Running Color Test in Neovim\nDESCRIPTION: Command to run the included colortest.vim file, which helps test and visualize your terminal color setup.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_208\n\nLANGUAGE: vim\nCODE:\n```\n:runtime syntax/colortest.vim\n```\n\n----------------------------------------\n\nTITLE: Package Manager Uninstall Commands\nDESCRIPTION: Common commands for uninstalling Neovim using different package managers across operating systems.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napt-get remove neovim\nbrew uninstall neovim\nscoop uninstall neovim\n```\n\n----------------------------------------\n\nTITLE: Date Command with Line Join\nDESCRIPTION: Example showing how to read date output and join it with the previous line using newline separator.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/cmdline.txt#2025-04-20_snippet_9\n\nLANGUAGE: vim\nCODE:\n```\n:r !date<NL>-join\n```\n\n----------------------------------------\n\nTITLE: Updating Command Table after Source Code Changes (Lua)\nDESCRIPTION: This explains the steps to update the command lookup table after adding a command in `src/ex_cmds.lua`. It involves re-running the build process, typically by running `make`. This step is necessary for Neovim to recognize the new command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/message.txt#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nThis can only happen when changing the source code, after adding a command in\nsrc/ex_cmds.lua.  Update the lookup table by re-running the build. >\n```\n\n----------------------------------------\n\nTITLE: Verifying Neovim build type\nDESCRIPTION: Command to check the build type of the compiled Neovim executable by checking the version information.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./build/bin/nvim --version | grep ^Build\n```\n\n----------------------------------------\n\nTITLE: Matching Quoted Strings in Vim\nDESCRIPTION: Pattern to match text within double quotes, excluding the quotes themselves using complemented range.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_27.txt#2025-04-20_snippet_14\n\nLANGUAGE: vim\nCODE:\n```\n/\"[^\"]*\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Key for Netrw Window Shrinking\nDESCRIPTION: Example of mapping a custom key sequence to the NetrwShrink functionality instead of using the default <c-tab>.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_49\n\nLANGUAGE: vim\nCODE:\n```\nnmap <unique> (whatever)\t<Plug>NetrwShrink\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Error Categories Display in Vim\nDESCRIPTION: Vim configuration setting to enable showing exception type information in PowerShell compiler output\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n:let g:ps1_efm_show_error_categories = 1\n```\n\n----------------------------------------\n\nTITLE: Reading Error File\nDESCRIPTION: Command for reading an error file and jumping to the first error.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_25\n\nLANGUAGE: vim\nCODE:\n```\n:cf[ile][!] [errorfile]\n```\n\n----------------------------------------\n\nTITLE: Getting Byte Index with Composing Characters in Neovim using Vim Script\nDESCRIPTION: The 'byteidxcomp' function operates like 'byteidx' but counts composing characters separately, allowing accurate indexing of characters in strings.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_26\n\nLANGUAGE: vim\nCODE:\n```\nbyteidxcomp({expr}, {nr} [, {utf16}])\n```\n\n----------------------------------------\n\nTITLE: Using menu_info() in Vim\nDESCRIPTION: These examples demonstrate how to use the menu_info() function to retrieve detailed information about specific menu items, including an example of displaying the entire menu hierarchy.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_176\n\nLANGUAGE: vim\nCODE:\n```\necho menu_info('Edit.Cut')\necho menu_info('File.Save', 'n')\n```\n\nLANGUAGE: vim\nCODE:\n```\n\" Display the entire menu hierarchy in a buffer\nfunc ShowMenu(name, pfx)\n  let m = menu_info(a:name)\n  call append(line('$'), a:pfx .. m.display)\n  for child in m->get('submenus', [])\n    call ShowMenu(a:name .. '.' .. escape(child, '.'),\n\t\t\t\t\t\\ a:pfx .. '    ')\n  endfor\nendfunc\nnew\nfor topmenu in menu_info('').submenus\n  call ShowMenu(topmenu, '')\nendfor\n```\n\n----------------------------------------\n\nTITLE: Adding Hex-based Digraph in Vim\nDESCRIPTION: Example demonstrating how to add a digraph using hexadecimal notation with the execute command.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/digraph.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:exe 'digr += ' .. 0x2A72\n```\n\n----------------------------------------\n\nTITLE: Running Neovim without installation\nDESCRIPTION: Command to run the Neovim executable directly from the build directory without installing it by setting the VIMRUNTIME environment variable.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVIMRUNTIME=runtime ./build/bin/nvim\n```\n\n----------------------------------------\n\nTITLE: Modifying Netrw Internal Variables\nDESCRIPTION: Example of using netrw#Modify() to change internal netrw variables, specifically clearing the marked file list.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_51\n\nLANGUAGE: vim\nCODE:\n```\ncall netrw#Modify(\"netrwmarkfilelist\",[])\n```\n\n----------------------------------------\n\nTITLE: Enabling Cygwin Support for Netrw on Windows\nDESCRIPTION: Setting to enable Cygwin support for netrw when working on Windows systems to improve file listing capabilities.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_44\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_cygwin= 1\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Neovim dependencies with debug info\nDESCRIPTION: Commands to clean the build directory and rebuild dependencies with debug information for development purposes.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake distclean\nmake deps\n```\n\n----------------------------------------\n\nTITLE: Customizing PowerShell Compiler Command in Vim\nDESCRIPTION: Vim configuration setting to specify a custom PowerShell executable path for the compiler integration\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n:let g:ps1_makeprg_cmd = '/path/to/pwsh'\n```\n\n----------------------------------------\n\nTITLE: Deep Copy with Msgpack in Vim\nDESCRIPTION: Performs a deep copy of a Msgpack value, maintaining the integrity of special types. Unlike the standard deepcopy(), this function preserves Msgpack-specific types.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#deepcopy({msgpack-value})\n```\n\n----------------------------------------\n\nTITLE: Function-based Match Pattern Configuration\nDESCRIPTION: Example of using a function call to define match patterns dynamically.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/matchit/doc/matchit.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\n:let b:match_words = 'GetMatchWords()'\n```\n\n----------------------------------------\n\nTITLE: Disabling Syntax Highlighting for All Buffers\nDESCRIPTION: Command to disable syntax highlighting for all buffers by removing the autocommands that load syntax files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_201\n\nLANGUAGE: vim\nCODE:\n```\n:syntax off\n```\n\n----------------------------------------\n\nTITLE: Loading Error Files in Vim\nDESCRIPTION: The :cfile command loads and parses errors from an external file, useful when compilation output can't be directly captured.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_30.txt#2025-04-20_snippet_5\n\nLANGUAGE: vim\nCODE:\n```\n:cfile {filename}\n```\n\n----------------------------------------\n\nTITLE: Netrw User Function Configuration\nDESCRIPTION: Example of setting up a custom function to be called when Netrw edits a file.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_7\n\nLANGUAGE: vim\nCODE:\n```\nfun! MyFuncRef()\nendfun\nlet g:Netrw_funcref= function(\"MyFuncRef\")\n```\n\n----------------------------------------\n\nTITLE: Linking Test Executables to Library in CMake\nDESCRIPTION: This section links each test executable to the `test_lib` interface library using `target_link_libraries` with the `PRIVATE` keyword.  `PRIVATE` means `test_lib` is only required for building the executables, not for any targets that link to these executables (if any existed).\nSOURCE: https://github.com/neovim/neovim/blob/master/test/functional/fixtures/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(tty-test PRIVATE test_lib)\ntarget_link_libraries(shell-test PRIVATE test_lib)\ntarget_link_libraries(pwsh-test PRIVATE test_lib)\ntarget_link_libraries(printargs-test PRIVATE test_lib)\ntarget_link_libraries(printenv-test PRIVATE test_lib)\ntarget_link_libraries(streams-test PRIVATE test_lib)\n```\n\n----------------------------------------\n\nTITLE: Arabic Keyboard Mapping Layout in Vim\nDESCRIPTION: Detailed ASCII representation of the Arabic keyboard mapping based on Microsoft's Arabic keymap standard. Shows both Arabic and Latin character mappings for each key position, including special characters and numerals.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\n+---------------------------------------------------------------------+\n|!   |@   |#   |$   |%   |^   |&   |*   |(   |)   |_   |+   ||   |~  ّ |\n|1 ١ |2 ٢ |3 ٣ |4 ٤ |5 ٥ |6 ٦ |7 ٧ |8 ٨ |9 ٩ |0 ٠ |-   |=   |\\   |` ذ |\n+---------------------------------------------------------------------+\n     |Q  َ |W  ً |E  ُ |R  ٌ |T لإ |Y إ |U ` |I ÷ |O x |P ؛ |{ < |} > |\n     |q ض |w ص |e ث |r ق |t ف |y غ |u ع |i ه |o خ |p ح |[ ج |] د |\n     +-----------------------------------------------------------+\n       |A  ِ |S  ٍ |D [ |F ] |G لأ |H أ |J ـ |K ، |L / |:   |\"   |\n       |a ش |s س |d ي |f ب |g ل |h ا |j ت |k ن |l م |; ك |' ط |\n       +------------------------------------------------------+\n         |Z ~ |X  ْ |C { |V } |B لآ |N آ |M ' |< , |> . |? ؟ |\n         |z ئ |x ء |c ؤ |v ر |b لا |n ى |m ة |, و |. ز |/ ظ |\n         +-------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring NCF Syntax Highlighting in Vim\nDESCRIPTION: Sets option to highlight unrecognized NCF statements as errors.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_89\n\nLANGUAGE: vim\nCODE:\n```\n:let ncf_highlight_unknowns = 1\n```\n\n----------------------------------------\n\nTITLE: Neovim Installation Directory Structure\nDESCRIPTION: Example paths showing the typical installation location of Neovim binary and share directory when installed from source or pre-built archive.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/intro.txt#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/usr/local/bin/nvim\n/usr/local/share/nvim\n```\n\n----------------------------------------\n\nTITLE: Comparing Msgpack Values with Msgpack in Vim\nDESCRIPTION: Compares two Msgpack values for equality, treating equivalent special and non-special dictionaries as equal. It returns 1 for equal values and 0 otherwise.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/pi_msgpack.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nmsgpack#equal({msgpack-value}, {msgpack-value})\n```\n\n----------------------------------------\n\nTITLE: Enabling Arabic Shaping in Neovim\nDESCRIPTION: Activates visual character alterations required for proper Arabic text rendering, including shaping, composing, and combining characters.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/arabic.txt#2025-04-20_snippet_8\n\nLANGUAGE: VimScript\nCODE:\n```\n:set arabicshape\n```\n\n----------------------------------------\n\nTITLE: Completing Set Information in Neovim\nDESCRIPTION: An experimental feature 'nvim__complete_set' sets the details for a completion item and optionally returns the window and buffer IDs when displayed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\nnvim__complete_set\\(\\{index\\}, \\{opts\\}\\)\n```\n\n----------------------------------------\n\nTITLE: Detailed SpotBugs Configuration with Default Actions\nDESCRIPTION: Advanced configuration for SpotBugs with explicit function references for pre-compiler and post-compiler actions.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_47\n\nLANGUAGE: vim\nCODE:\n```\nlet g:spotbugs_properties = {\n\t\\ 'PreCompilerAction':\n\t\t\\ function('spotbugs#DefaultPreCompilerAction'),\n\t\\ 'PreCompilerTestAction':\n\t\t\\ function('spotbugs#DefaultPreCompilerTestAction'),\n\t\\ 'PostCompilerAction':\n\t\t\\ function('spotbugs#DefaultPostCompilerAction'),\n\t\\ 'sourceDirPath':\t['src/main/java'],\n\t\\ 'classDirPath':\t['target/classes'],\n\t\\ 'testSourceDirPath':\t['src/test/java'],\n\t\\ 'testClassDirPath':\t['target/test-classes'],\n\\ }\n```\n\n----------------------------------------\n\nTITLE: Alpine Linux Build Prerequisites\nDESCRIPTION: Installs the necessary packages on Alpine Linux systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\n\"apk add build-base cmake coreutils curl gettext-tiny-dev\"\n```\n\n----------------------------------------\n\nTITLE: openSUSE Build Prerequisites\nDESCRIPTION: Installs the necessary packages on openSUSE systems to build Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\n\"sudo zypper install ninja cmake gcc-c++ gettext-tools curl\"\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring Lua Interpreter for Neovim\nDESCRIPTION: Locates a suitable Lua interpreter for runtime and code generation needs, with preference for LuaJIT when available.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT PREFER_LUA)\n  find_program(LUA_PRG NAMES luajit)\nendif()\nfind_program(LUA_PRG NAMES lua5.1 lua5.2 lua)\nmark_as_advanced(LUA_PRG)\nif(NOT LUA_PRG)\n  message(FATAL_ERROR \"Failed to find a Lua 5.1-compatible interpreter\")\nendif()\nmessage(STATUS \"Using Lua interpreter: ${LUA_PRG}\")\n\n# Some of the code generation still relies on stable table ordering in order to\n# produce reproducible output - specifically the msgpack'ed data in\n# funcs_metadata.generated.h and ui_events_metadata.generated.h. This should\n# ideally be fixed in the generators, but until then as a workaround you may provide\n# a specific lua implementation that provides the needed stability by setting LUA_GEN_PRG:\nif(NOT LUA_GEN_PRG)\n  set(LUA_GEN_PRG \"${LUA_PRG}\" CACHE FILEPATH \"Path to the lua used for code generation.\")\nendif()\nmark_as_advanced(LUA_GEN_PRG)\nmessage(STATUS \"Using Lua interpreter for code generation: ${LUA_GEN_PRG}\")\n```\n\n----------------------------------------\n\nTITLE: Netrw HTTP Command Configuration\nDESCRIPTION: Configuration example for customizing HTTP protocol behavior in Netrw using elinks.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_6\n\nLANGUAGE: vim\nCODE:\n```\nlet g:netrw_http_xcmd= \"-dump >\"\n```\n\n----------------------------------------\n\nTITLE: NixOS/Nix Build Steps\nDESCRIPTION: Commands to configure and build Neovim within a Nix environment.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\n\"rm -rf build && cmakeConfigurePhase\\nbuildPhase\"\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Files\nDESCRIPTION: Configures installation of runtime files including documentation, syntax files, desktop entries, and icons.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall_helper(\n  FILES ${GENERATED_HELP_TAGS} ${BUILDDOCFILES}\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/nvim/runtime/doc)\n\ninstall_helper(\n  FILES ${GENERATED_SYN_VIM}\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/nvim/runtime/syntax/vim)\n\nif(NOT APPLE)\n  install_helper(\n    FILES ${CMAKE_CURRENT_SOURCE_DIR}/nvim.desktop\n    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications)\nendif()\n\ninstall_helper(\n  FILES ${CMAKE_CURRENT_SOURCE_DIR}/nvim.png\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/128x128/apps)\n```\n\n----------------------------------------\n\nTITLE: Starting GUI Vim with Specific Window Size and Position\nDESCRIPTION: This command starts the X-Windows version of gvim with a specified window size (80x25 characters) and position (100 pixels from left, 300 pixels from top).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_31.txt#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngvim -geometry 80x25+100+300\n```\n\n----------------------------------------\n\nTITLE: Jumping to Ada Tags with ada#Jump_Tag Function\nDESCRIPTION: Function to list all occurrences of an Ada entity in the tag jump list. The mode parameter can be either 'tjump' or 'stjump'.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ada.txt#2025-04-20_snippet_4\n\nLANGUAGE: viml\nCODE:\n```\nada#Jump_Tag({ident}, {mode})\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executables in CMake\nDESCRIPTION: This code defines several test executables written in C (tty-test, shell-test, pwsh-test, printargs-test, printenv-test, streams-test). The `EXCLUDE_FROM_ALL` keyword prevents them from being built by default.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/functional/fixtures/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tty-test EXCLUDE_FROM_ALL tty-test.c)\nadd_executable(shell-test EXCLUDE_FROM_ALL shell-test.c)\n# Fake pwsh (powershell) for testing make_filter_cmd(). #16271\nadd_executable(pwsh-test EXCLUDE_FROM_ALL shell-test.c)\nadd_executable(printargs-test EXCLUDE_FROM_ALL printargs-test.c)\nadd_executable(printenv-test EXCLUDE_FROM_ALL printenv-test.c)\nadd_executable(streams-test EXCLUDE_FROM_ALL streams-test.c)\n```\n\n----------------------------------------\n\nTITLE: Using Browse Edit with FileExplorer Group in Vim\nDESCRIPTION: Simple example of using the browse edit command, which leverages the FileExplorer autocommand group for directory browsing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_27\n\nLANGUAGE: viml\nCODE:\n```\nbrowse edit\n```\n\n----------------------------------------\n\nTITLE: Terminal Database Installation Commands\nDESCRIPTION: Commands to download and install custom terminfo database for terminal compatibility.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/tui.txt#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO https://invisible-island.net/datafiles/current/terminfo.src.gz\ngunzip terminfo.src.gz\ntic -x terminfo.src\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scheme with Custom Normal Color in VimL\nDESCRIPTION: This approach defines a new Normal color and sets the 'background' option accordingly. It starts with a clean slate by using 'highlight clear' before defining the Normal highlight group.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/colors/README.txt#2025-04-20_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\nset background={light or dark}\nhighlight clear\nhighlight Normal ...\n...\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Package Configuration\nDESCRIPTION: Configures platform-specific packaging options for Windows (WIX installer), macOS (TGZ), and Linux (TGZ/DEB) builds.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.packaging/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  set(CPACK_PACKAGE_FILE_NAME \"nvim-win64\")\n  set(CPACK_GENERATOR ZIP WIX)\n\n  # WIX\n  # CPACK_WIX_UPGRADE_GUID should be set, but should never change.\n  # CPACK_WIX_PRODUCT_GUID should not be set (leave as default to auto-generate).\n\n  # The following guid is just a randomly generated guid that's been pasted here.\n  # It has no special meaning other than to supply it to WIX.\n  set(CPACK_WIX_UPGRADE_GUID \"207A1A70-7B0C-418A-A153-CA6883E38F4D\")\n  set(CPACK_WIX_PRODUCT_ICON ${PROJECT_SOURCE_DIR}/runtime/neovim.ico)\n\n  # Create start menu and desktop shortcuts\n  set(CPACK_WIX_PROGRAM_MENU_FOLDER \"${CPACK_PACKAGE_NAME}\")\n  set(CPACK_PACKAGE_EXECUTABLES \"nvim\" \"Neovim\")\n  set(CPACK_WIX_INSTALL_SCOPE \"perMachine\")\n\n  set(CPACK_WIX_UI_REF \"WixUI_CustomInstallDir\")\n  list(APPEND CPACK_WIX_EXTRA_SOURCES ${CMAKE_CURRENT_LIST_DIR}/WixUI_CustomInstallDir.wxs)\n  list(APPEND CPACK_WIX_EXTRA_SOURCES ${CMAKE_CURRENT_LIST_DIR}/CustomInstallDirDlg.wxs)\n\n  # We use a wix patch to add further options to the installer.\n  # See: https://cmake.org/cmake/help/v3.7/module/CPackWIX.html#variable:CPACK_WIX_PATCH_FILE\n  list(APPEND CPACK_WIX_EXTENSIONS WixUtilExtension)\n  list(APPEND CPACK_WIX_PATCH_FILE ${CMAKE_CURRENT_LIST_DIR}/WixPatch.xml)\nelseif(APPLE)\n  set(CPACK_PACKAGE_FILE_NAME \"nvim-macos-${CMAKE_SYSTEM_PROCESSOR}\")\n  set(CPACK_GENERATOR TGZ)\n  set(CPACK_PACKAGE_ICON ${CMAKE_CURRENT_LIST_DIR}/neovim.icns)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  set(CPACK_PACKAGE_FILE_NAME \"nvim-linux-${CMAKE_SYSTEM_PROCESSOR}\")\n  set(CPACK_GENERATOR TGZ DEB)\n  set(CPACK_DEBIAN_PACKAGE_NAME \"Neovim\") # required\n  set(CPACK_DEBIAN_PACKAGE_MAINTAINER \"Neovim.io\") # required\n\n  # Automatically compute required shared lib dependencies.\n  # Unfortunately, you \"just need to know\" that this has a hidden\n  # dependency on dpkg-shlibdeps whilst using a debian based host.\n  set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS TRUE)\nelse()\n  set(CPACK_GENERATOR TGZ)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Working Directory in Lua with Libuv\nDESCRIPTION: Returns the current working directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_71\n\nLANGUAGE: lua\nCODE:\n```\nuv.cwd()\n```\n\n----------------------------------------\n\nTITLE: Disabling Spellfile Plugin\nDESCRIPTION: Command to disable the built-in spellfile plugin functionality.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nlet loaded_spellfile_plugin = 1\n```\n\n----------------------------------------\n\nTITLE: Treating More Common Types as Keywords in Haskell\nDESCRIPTION: This snippet shows how to treat a broader range of common type names as keywords in Haskell syntax highlighting.  This is accomplished by setting the 'hs_highlight_more_types' variable to 1 in your vimrc.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_46\n\nLANGUAGE: vim\nCODE:\n```\n\t:let hs_highlight_more_types = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Rustfmt Emit Files Parameter\nDESCRIPTION: Controls whether rustfmt is run with '--emit=files' (when set to 1) instead of '--write-mode=overwrite', which can affect how rustfmt interacts with files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_15\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rustfmt_emit_files = 0\n```\n\n----------------------------------------\n\nTITLE: Using strutf16len() in Vim Script\nDESCRIPTION: Shows how to use strutf16len() function to count UTF-16 code units in a string, with an option to count composing characters separately.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_264\n\nLANGUAGE: vim\nCODE:\n```\necho strutf16len('a')\necho strutf16len('©')\necho strutf16len('😊')\necho strutf16len('ą́')\necho strutf16len('ą́', v:true)\n```\n\n----------------------------------------\n\nTITLE: Handling Switch Statements in C\nDESCRIPTION: This snippet shows how to use `UNREACHABLE` after a switch statement to explicitly indicate that the switch statement always returns. This prevents spurious compiler errors related to missing return statements.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nenum { A, B, C } var;\n    ...\n    switch (var) {\n      case A:\n        return 1;\n      case B:\n        return 2;\n      case C:\n        return 3;\n    }\n    UNREACHABLE;\n```\n\n----------------------------------------\n\nTITLE: Configuring GDScript Recommended Style\nDESCRIPTION: Code snippet for disabling the default GDScript style settings in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_12\n\nLANGUAGE: vim\nCODE:\n```\nlet g:gdscript_recommended_style = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Hebrew Keymap in Vim\nDESCRIPTION: Command to load the Hebrew keymap for typing Hebrew characters in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_45.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n:set keymap=hebrew\n```\n\n----------------------------------------\n\nTITLE: Starting gVim with Command Line\nDESCRIPTION: Commands to launch the graphical version of Vim with a file\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_09.txt#2025-04-20_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\ngvim file.txt\nvim -g file.txt\n```\n\n----------------------------------------\n\nTITLE: Directory Creation Operation in Lua\nDESCRIPTION: Creates a directory with specified path and mode. Mode should be provided in octal format.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_49\n\nLANGUAGE: lua\nCODE:\n```\nuv.fs_mkdir({path}, {mode} [, {callback}])\n```\n\n----------------------------------------\n\nTITLE: Creating a New Pipe\nDESCRIPTION: Creates and initializes a new pipe handle, which can be used for IPC (Inter-Process Communication) or local domain socket communications. The IPC argument controls whether the pipe is intended for handle passing.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nuv.new_pipe([{ipc}])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shell Script Linting with Shellcheck in CMake\nDESCRIPTION: Creates a target for linting shell scripts using shellcheck. The target scans the scripts directory for .sh files and applies shellcheck with specified options.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nadd_glob_target(\n  TARGET lintsh\n  COMMAND ${SHELLCHECK_PRG}\n  FLAGS -x -a\n  GLOB_DIRS scripts\n  GLOB_PAT *.sh\n  TOUCH_STRATEGY PER_DIR)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Lines for TF Syntax Syncing with VimL\nDESCRIPTION: Configuration for the tf syntax highlighting to control how many lines are used for synchronization. Affects how the syntax highlighter resynchronizes after changes.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_148\n\nLANGUAGE: viml\nCODE:\n```\n:let tf_minlines = your choice\n```\n\n----------------------------------------\n\nTITLE: Setting Clipboard Command for Rust Play URLs\nDESCRIPTION: Specifies the system command used to copy Rust Playground URLs to the clipboard, which varies by operating system.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_rust.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\nlet g:rust_clip_command = 'xclip -selection clipboard'\n```\n\n----------------------------------------\n\nTITLE: File Selection and Background Preview Implementation\nDESCRIPTION: Handles file selection for backgrounds and themes, including file type validation and preview generation. Supports both local files and remote content.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvoid BackgroundBox::chooseFromFile() {\n\tconst auto filterStart = _forPeer\n\t\t? u\"Image files (*\"_q\n\t\t: u\"Theme files (*.tdesktop-theme *.tdesktop-palette *\"_q;\n\tauto filters = QStringList(\n\t\tfilterStart\n\t\t+ Ui::ImageExtensions().join(u\" *\"_q)\n\t\t+ u\")\"_q);\n\tfilters.push_back(FileDialog::AllFilesFilter());\n\tconst auto callback = [=](const FileDialog::OpenResult &result) {\n\t\tif (result.paths.isEmpty() && result.remoteContent.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!_forPeer && !result.paths.isEmpty()) {\n\t\t\tconst auto filePath = result.paths.front();\n\t\t\tconst auto hasExtension = [&](QLatin1String extension) {\n\t\t\t\treturn filePath.endsWith(extension, Qt::CaseInsensitive);\n\t\t\t};\n\t\t\tif (hasExtension(qstr(\".tdesktop-theme\"))\n\t\t\t\t|| hasExtension(qstr(\".tdesktop-palette\"))) {\n\t\t\t\tWindow::Theme::Apply(filePath);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tauto image = Images::Read({\n\t\t\t.path = result.paths.isEmpty() ? QString() : result.paths.front(),\n\t\t\t.content = result.remoteContent,\n\t\t\t.forceOpaque = true,\n\t\t}).image;\n\t\tif (image.isNull() || image.width() <= 0 || image.height() <= 0) {\n\t\t\treturn;\n\t\t}\n\t\tauto local = Data::CustomWallPaper();\n\t\tlocal.setLocalImageAsThumbnail(std::make_shared<Image>(\n\t\t\tstd::move(image)));\n\t\t_controller->show(Box<BackgroundPreviewBox>(\n\t\t\t_controller,\n\t\t\tlocal,\n\t\t\tBackgroundPreviewArgs{ _forPeer }));\n\t};\n\tFileDialog::GetOpenPath(\n\t\tthis,\n\t\ttr::lng_choose_image(tr::now),\n\t\tfilters.join(u\";;\"_q),\n\t\tcrl::guard(this, callback));\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Extmark in Lua\nDESCRIPTION: Removes an extmark from the buffer. Takes parameters for buffer id, namespace id, and extmark id.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/api.txt#2025-04-20_snippet_61\n\nLANGUAGE: lua\nCODE:\n```\nnvim_buf_del_extmark({buffer}, {ns_id}, {id})\n```\n\n----------------------------------------\n\nTITLE: Blob Manipulation with remove()\nDESCRIPTION: Examples of removing bytes from a blob, either single bytes or ranges\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_207\n\nLANGUAGE: vim\nCODE:\n```\necho \"last byte: \" .. remove(myblob, -1)\ncall remove(mylist, 0, 9)\n```\n\n----------------------------------------\n\nTITLE: Global Variable Documentation in C\nDESCRIPTION: Example of properly documenting global variables with descriptive comments.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n/// The total number of tests cases that we run\n/// through in this regression test.\nconst int kNumTestCases = 6;\n```\n\n----------------------------------------\n\nTITLE: POT File Generation\nDESCRIPTION: Custom command to generate the main POT template file from source files using xgettext and custom Vim scripts\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(NVIM_POT ${CMAKE_CURRENT_BINARY_DIR}/nvim.pot)\n\nlist(SORT NVIM_RELATIVE_SOURCES)\nadd_custom_command(\n    OUTPUT ${NVIM_POT}\n    COMMAND $<TARGET_FILE:nvim_bin> -u NONE -i NONE -n --headless --cmd \"set cpo+=+\"\n      -c \"silent source ${CMAKE_CURRENT_SOURCE_DIR}/tojavascript.vim\"\n      ${NVIM_POT} ${PROJECT_SOURCE_DIR}/runtime/optwin.vim\n    COMMAND ${XGETTEXT_PRG} -o ${NVIM_POT} --default-domain=nvim\n      --add-comments --keyword=_ --keyword=N_ --keyword=NGETTEXT:1,2\n      -D ${CMAKE_CURRENT_SOURCE_DIR} -D ${CMAKE_CURRENT_BINARY_DIR}\n      ${NVIM_RELATIVE_SOURCES} optwin.js\n    COMMAND $<TARGET_FILE:nvim_bin> -u NONE -i NONE -n --headless --cmd \"set cpo+=+\"\n      -c \"silent source ${CMAKE_CURRENT_SOURCE_DIR}/fixfilenames.vim\"\n      ${NVIM_POT} ${PROJECT_SOURCE_DIR}/runtime/optwin.vim\n    VERBATIM\n    DEPENDS ${NVIM_SOURCES} nvim_bin nvim_runtime_deps)\n```\n\n----------------------------------------\n\nTITLE: Getting the Last Open Tag in Vim\nDESCRIPTION: This Vim example shows how to use the xmlcomplete#GetLastOpenTag() function to retrieve the name of the last open tag in XML files. It requires the b:unaryTagsStack variable to be defined.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/insert.txt#2025-04-20_snippet_24\n\nLANGUAGE: vim\nCODE:\n```\n\t:echo xmlcomplete#GetLastOpenTag(\"b:unaryTagsStack\")\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment Whitespace in C\nDESCRIPTION: This snippet illustrates the preferred horizontal whitespace usage in variable assignments. It demonstrates not aligning assignments except for struct arrays, for better readability.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nint long_variable = 0;  // Don't align assignments.\n        int i             = 1;\n\n        struct my_struct {  // Exception: struct arrays.\n          const char *boy;\n          const char *girl;\n          int pos;\n        } my_variable[] = {\n          { \"Mia\",       \"Michael\", 8  },\n          { \"Elizabeth\", \"Aiden\",   10 },\n          { \"Emma\",      \"Mason\",   2  },\n        };\n```\n\n----------------------------------------\n\nTITLE: Configuring Gettext Runtime Config Headers in CMake\nDESCRIPTION: Reads a gettext-runtime config.h.in template file and modifies it with platform-specific definitions before writing it to the build directory. This configures capabilities like HAVE_GETCWD, HAVE_LONG_LONG_INT, and ICONV support.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(READ gettext-runtime/config.h.in CONFIG_CONTENT)\nstring(REPLACE \"#undef HAVE_GETCWD\" \"#define HAVE_GETCWD 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_LONG_LONG_INT\" \"#define HAVE_LONG_LONG_INT 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_ICONV_H\" \"#define HAVE_ICONV_H 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef HAVE_ICONV\" \"#define HAVE_ICONV 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nstring(REPLACE \"#undef ICONV_CONST\" \"#define ICONV_CONST const\" CONFIG_CONTENT ${CONFIG_CONTENT})\nif(MSVC)\n  string(REPLACE \"#undef HAVE_STDINT_H_WITH_UINTMAX\" \"#define HAVE_STDINT_H_WITH_UINTMAX 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\n  string(REPLACE \"#undef HAVE_STDINT_H\" \"#define HAVE_STDINT_H 1\" CONFIG_CONTENT ${CONFIG_CONTENT})\nelse()\n  string(REPLACE \"#undef uintmax_t\" \"\n    #if _WIN64\n    # define intmax_t long long\n    # define uintmax_t unsigned long long\n    #elif _WIN32\n    # define intmax_t long\n    # define uintmax_t unsigned long\n    #endif\"\n    CONFIG_CONTENT ${CONFIG_CONTENT})\n  endif()\nfile(WRITE ${CMAKE_CURRENT_BINARY_DIR}/gettext-runtime/config.h ${CONFIG_CONTENT})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Compiler Options for Mypy Type Checker\nDESCRIPTION: Example of setting custom parameters for the Mypy Python type checker through the b:mypy_makeprg_params variable. This allows passing additional options to the compiler when using :make.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_54\n\nLANGUAGE: vim\nCODE:\n```\nlet b:mypy_makeprg_params = \"--warn-unused-ignores\"\n```\n\n----------------------------------------\n\nTITLE: Installing Neovim on Solus\nDESCRIPTION: Command to install Neovim using the eopkg package manager on Solus Linux.\nSOURCE: https://github.com/neovim/neovim/blob/master/INSTALL.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo eopkg install neovim\n```\n\n----------------------------------------\n\nTITLE: Converting UTF-16 Length to WTF-8 in Lua\nDESCRIPTION: This function calculates the length in bytes of a UTF-16 (or UCS-2) string after converting it to WTF-8. It assumes the endianness of the input string matches the platform's native endianness.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_106\n\nLANGUAGE: lua\nCODE:\n```\nuv.utf16_length_as_wtf8({utf16})\n```\n\n----------------------------------------\n\nTITLE: Converting Network Interface Index to Name with uv.if_indextoname()\nDESCRIPTION: IPv6-capable implementation of if_indextoname(3) that converts a network interface index to its corresponding interface name.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_86\n\nLANGUAGE: lua\nCODE:\n```\nuv.if_indextoname({ifindex})\n```\n\n----------------------------------------\n\nTITLE: Basic Nvim File Opening\nDESCRIPTION: Basic command to start Nvim with a single file, which is the most common usage pattern.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/starting.txt#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnvim filename\n```\n\n----------------------------------------\n\nTITLE: Filetype Detection for Cynlib in VimL\nDESCRIPTION: Configures syntax highlighting for Cynlib by associating '.cc' and '.cpp' file extensions with Cynlib-specific syntax, distinguishing them from standard C++ files.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_19\n\nLANGUAGE: VimL\nCODE:\n```\n:let cynlib_cyntax_for_cc=1\n```\n\nLANGUAGE: VimL\nCODE:\n```\n:let cynlib_cyntax_for_cpp=1\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Digital Signature Folding in Vim\nDESCRIPTION: Vim configuration setting to disable folding of digital signatures in PowerShell scripts\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/ft_ps1.txt#2025-04-20_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:let g:ps1_nofold_sig = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Pandoc Syntax Detection\nDESCRIPTION: Sets filetype detection for markdown files to use Pandoc syntax.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_94\n\nLANGUAGE: vim\nCODE:\n```\n:let g:filetype_md = 'pandoc'\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim Parser Build with CMake\nDESCRIPTION: This CMake script configures the build process for a Neovim parser module. It sets the minimum CMake version, defines the project, adds compilation options, specifies source files, and sets up the library target with custom properties. The script also configures the installation process for the parser library.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/TreesitterParserCMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(parser C)\n\nadd_compile_options(-w)\n\nfile(GLOB source_files src/*.c)\n\nadd_library(parser\n  MODULE\n  ${source_files}\n)\nset_target_properties(\n  parser\n  PROPERTIES\n    OUTPUT_NAME ${PARSERLANG}\n    PREFIX \"\"\n)\n\ninclude_directories(src)\n\ninstall(TARGETS parser LIBRARY DESTINATION lib/nvim/parser)\n\n# vim: set ft=cmake:\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building libiconv Project with CMake\nDESCRIPTION: This comprehensive CMake script handles the complete build process for the libiconv library. It manages project configuration, header file generation, library compilation, and installation setup with cross-platform compatibility adjustments particularly for Windows/MSVC environments.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/LibiconvCMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(libiconv C)\n\nadd_compile_options(-w)\n\ninclude_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/srclib\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}/srclib\n  ${CMAKE_CURRENT_SOURCE_DIR}/build-aux/snippet)\n\nconfigure_file(config.h.in config.h)\nfile(READ \"${CMAKE_CURRENT_BINARY_DIR}/config.h\" CONFIG_CONTENT)\nstring(REPLACE \"#undef EILSEQ\" \"\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef HAVE_MBRTOWC\" \"#define HAVE_MBRTOWC 1\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef HAVE_MBSINIT\" \"#define HAVE_MBSINIT 1\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef HAVE_WCRTOMB\" \"#define HAVE_WCRTOMB 1\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef HAVE_DECL___ARGV\" \"#define HAVE_DECL___ARGV 1\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef HAVE_WORKING_O_NOFOLLOW\" \"#define HAVE_WORKING_O_NOFOLLOW 0\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef ICONV_CONST\" \"#define ICONV_CONST const\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef WORDS_LITTLEENDIAN\" \"#define WORDS_LITTLEENDIAN 1\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef HAVE_DECL_STRERROR_R\" \"#define HAVE_DECL_STRERROR_R 0\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef mode_t\" \"#define mode_t int\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nstring(REPLACE \"#undef ssize_t\" \"#include <BaseTsd.h>\\n#define ssize_t SSIZE_T\" CONFIG_CONTENT \"${CONFIG_CONTENT}\")\nfile(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/config.h\" \"${CONFIG_CONTENT}\")\n\nset(BROKEN_WCHAR_H 0)\nset(HAVE_VISIBILITY 0)\nset(HAVE_WCHAR_T 1)\nset(ICONV_CONST \"const\")\nset(USE_MBSTATE_T 0)\nconfigure_file(libcharset/include/localcharset.h.build.in localcharset.h)\nconfigure_file(include/iconv.h.build.in iconv.h)\n\nadd_definitions(-DLIBDIR)\n\nadd_library(libcharset libcharset/lib/localcharset.c)\n\nadd_library(libiconv lib/iconv.c)\ntarget_link_libraries(libiconv libcharset)\n\nadd_executable(iconv src/iconv.c srclib/progname.c srclib/getprogname.c\n  srclib/safe-read.c srclib/uniwidth/width.c srclib/error.c srclib/xmalloc.c\n  srclib/basename-lgpl.c)\ntarget_link_libraries(iconv libiconv)\n\nset(HEADER_TEMPLATES_PATH \"srclib\")\nset(HEADER_TEMPLATES_ABS_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/${HEADER_TEMPLATES_PATH}\")\nfile(GLOB_RECURSE HEADER_TEMPLATES \"${HEADER_TEMPLATES_ABS_PATH}/*.in.h\")\nlist(REMOVE_ITEM HEADER_TEMPLATES  \"${HEADER_TEMPLATES_ABS_PATH}/stdint.in.h\")\nlist(REMOVE_ITEM HEADER_TEMPLATES  \"${HEADER_TEMPLATES_ABS_PATH}/wchar.in.h\")\nforeach(HEADER_TEMPLATE ${HEADER_TEMPLATES})\n  file(READ ${HEADER_TEMPLATE} HEADER_CONTENT)\n  string(REPLACE \"/* The definition of _GL_ARG_NONNULL is copied here.  */\" \"#include \\\"arg-nonnull.h\\\"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"/* The definition of _GL_WARN_ON_USE is copied here.  */\" \"#include \\\"warn-on-use.h\\\"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"/* The definitions of _GL_FUNCDECL_RPL etc. are copied here.  */\" \"#include \\\"c++defs.h\\\"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"@GNULIB_LSTAT@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"@GNULIB_SIGACTION@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"@GNULIB_SIGPROCMASK@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"@HAVE_ISWCNTRL@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"@HAVE_WCTYPE_T@\" \"1\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  string(REPLACE \"@PRAGMA_COLUMNS@\" \"\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n\n  string(REGEX REPLACE \"^${HEADER_TEMPLATES_ABS_PATH}/\" \"\" HEADER_PATH \"${HEADER_TEMPLATE}\")\n  string(REPLACE \".in\" \"\" HEADER_PATH ${HEADER_PATH})\n  string(REPLACE \"_\" \"/\" HEADER_PATH ${HEADER_PATH})\n  # find_file will create a cache entry for the variable\n  # SYSTEM_HEADER, so reset it before each call\n  set(SYSTEM_HEADER \"SYSTEM_HEADER-NOTFOUND\")\n  find_file(SYSTEM_HEADER ${HEADER_PATH} PATHS \"${LIBICONV_INCLUDE_DIRS}\")\n  if(SYSTEM_HEADER)\n    # Gnulib uses #include_next to extend system header files,\n    # but MSVC doesn't support it, so a regular include directive\n    # with a relative path is used instead\n    string(REGEX REPLACE \".*/(.*/${HEADER_PATH})\" \"../\\\\1\"\n      INCLUDE_PATH \"${SYSTEM_HEADER}\")\n    string(REGEX REPLACE \"@INCLUDE_NEXT[^@]*@ @NEXT_[^@\\n]+@\"\n      \"include <${INCLUDE_PATH}>\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n  endif()\n\n  # Default any remaining template variables to 0\n  string(REGEX REPLACE \"@[^@\\n]+@\" \"0\" HEADER_CONTENT \"${HEADER_CONTENT}\")\n\n  file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/${HEADER_TEMPLATES_PATH}/${HEADER_PATH}\" \"${HEADER_CONTENT}\")\nendforeach()\n\ninclude(GNUInstallDirs)\n\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/iconv.h\n  ${CMAKE_CURRENT_BINARY_DIR}/localcharset.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\ninstall(TARGETS libcharset libiconv iconv\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n# vim: set ft=cmake:\n```\n\n----------------------------------------\n\nTITLE: Setting SpotBugs Compiler Selection\nDESCRIPTION: Configures SpotBugs to use a specific compiler plugin (Maven, Ant, or Javac) by setting the 'compiler' property.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_46\n\nLANGUAGE: vim\nCODE:\n```\nlet g:spotbugs_properties = {\n\t\\ 'compiler':\t\t'maven',\n\\ }\n```\n\n----------------------------------------\n\nTITLE: Checking localization translations\nDESCRIPTION: Commands to check translations for a specific language, generating a detailed report in the build directory.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build build --target check-po-de\ncmake --build build --target check-po-pt_BR\n```\n\n----------------------------------------\n\nTITLE: File Renaming Pattern Example\nDESCRIPTION: Example showing how to use pattern-based renaming of multiple files in netrw using the mark and rename commands.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_41\n\nLANGUAGE: viml\nCODE:\n```\nmr  [query: reply with *.c]\nR   [query: reply with s/^\\(.*\\)\\.c$/\\1.cpp/]\n```\n\n----------------------------------------\n\nTITLE: Disabling Syntax Highlighting in Neovim Init File\nDESCRIPTION: Add this line to init.vim to disable the default syntax highlighting in Neovim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/vim_diff.txt#2025-04-20_snippet_1\n\nLANGUAGE: viml\nCODE:\n```\n:syntax off\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Index in Vim\nDESCRIPTION: Demonstrates how to use stridx() function to find the index of a substring within a string, with an option to specify a starting position.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_259\n\nLANGUAGE: vim\nCODE:\n```\nlet colon1 = stridx(line, \":\")\nlet colon2 = stridx(line, \":\", colon1 + 1)\n```\n\nLANGUAGE: vim\nCODE:\n```\necho stridx(\"An Example\", \"Example\")     \" 3\necho stridx(\"Starting point\", \"Start\")   \" 0\necho stridx(\"Starting point\", \"start\")   \" -1\n```\n\n----------------------------------------\n\nTITLE: Digraph Setlist Example in Vim\nDESCRIPTION: Demonstrates setting multiple digraphs at once using digraph_setlist() function.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/builtin.txt#2025-04-20_snippet_55\n\nLANGUAGE: vim\nCODE:\n```\ncall digraph_setlist([['aa', 'あ'], ['ii', 'い']])\n```\n\n----------------------------------------\n\nTITLE: Allowing Tabs in Fortran Files in Vim\nDESCRIPTION: Permits the use of tabs in Fortran files despite standards advisement against them by setting 'fortran_have_tabs'. This option is useful for developers preferring tabs in fixed format source code.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_39\n\nLANGUAGE: VimScript\nCODE:\n```\n:let fortran_have_tabs=1\n```\n\n----------------------------------------\n\nTITLE: Return Statement Style in C\nDESCRIPTION: This snippet demonstrates the preferred style for return statements, advising against unnecessary parentheses around the expression. Parentheses should only be used for complex expressions where they enhance readability.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_style.txt#2025-04-20_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nreturn result;\n    return (some_long_condition && another_condition);\n\n    return (value);  // You wouldn't write var = (value);\n    return(result);  // return is not a function!\n```\n\n----------------------------------------\n\nTITLE: Defining LibGLib and LibTextStyle Sources in CMake\nDESCRIPTION: Defines source files for GLib utility functions and the beginning of LibTextStyle sources. These are additional utility libraries used by Gettext for text styling and data structure implementations.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBGLIB_SOURCES\n  ghash.c glist.c gmessages.c gprimes.c gstrfuncs.c gstring.c)\nPREFIX_LIST_ITEMS(LIBGLIB_SOURCES \"libtextstyle/lib/glib/\")\n\nset(LIBTEXTSTYLE_SOURCE\n  gl_array_list.h gl_array_list.c binary-io.h\n  binary-io.c c-ctype.h c-ctype.c c-strcase.h c-strcasecmp.c\n  c-strncasecmp.c concat-filename.c dirname-lgpl.c\n  basename-lgpl.c stripslash.c exitfail.c fatal-signal.h\n  fatal-signal.c fd-hook.c fd-ostream.c file-ostream.c)\n```\n\n----------------------------------------\n\nTITLE: Formatting Table Cells with Consistent Styling in HTML\nDESCRIPTION: HTML markup for table cells with consistent border and text styling. Each cell has bottom and left borders, right alignment, Arial font, and displays the number 5 in red bold text.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Font\nDESCRIPTION: Example of setting the font for menu items using highlight command\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/mlang.txt#2025-04-20_snippet_3\n\nLANGUAGE: viml\nCODE:\n```\n:highlight Menu font=k12,r12\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with MSVC in Windows PowerShell\nDESCRIPTION: CMake commands to build Neovim on Windows using Visual Studio toolchain from PowerShell, first building dependencies and then the main project.\nSOURCE: https://github.com/neovim/neovim/blob/master/BUILD.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release\ncmake --build .deps --config Release\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=Release\ncmake --build build --config Release\n```\n\n----------------------------------------\n\nTITLE: Preventing Netrw Plugin Loading\nDESCRIPTION: Configuration to disable Netrw plugin and autoload functionality if not desired.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/pack/dist/opt/netrw/doc/netrw.txt#2025-04-20_snippet_4\n\nLANGUAGE: vimscript\nCODE:\n```\n:let g:loaded_netrw       = 1\n:let g:loaded_netrwPlugin = 1\n```\n\n----------------------------------------\n\nTITLE: BackgroundBox Preparation Implementation in C++\nDESCRIPTION: Sets up the UI layout and handlers for background selection box including buttons, scrolling area, and event listeners. Handles initialization of background selection widget.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/box.txt#2025-04-20_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid BackgroundBox::prepare() {\n\tsetTitle(tr::lng_backgrounds_header());\n\n\taddButton(tr::lng_close(), [=] { closeBox(); });\n\n\tsetDimensions(st::boxWideWidth, st::boxMaxListHeight);\n\n\tauto wrap = object_ptr<Ui::VerticalLayout>(this);\n\tconst auto container = wrap.data();\n\n\tSettings::AddSkip(container);\n\n\tconst auto button = container->add(Settings::CreateButton(\n\t\tcontainer,\n\t\ttr::lng_settings_bg_from_file(),\n\t\tst::infoProfileButton));\n\tobject_ptr<Info::Profile::FloatingIcon>(\n\t\tbutton,\n\t\tst::infoIconMediaPhoto,\n\t\tst::infoSharedMediaButtonIconPosition);\n\n\tbutton->setClickedCallback([=] {\n\t\tchooseFromFile();\n\t});\n\n\tSettings::AddSkip(container);\n\tSettings::AddDivider(container);\n\n\t_inner = container->add(\n\t\tobject_ptr<Inner>(this, &_controller->session(), _forPeer));\n\n\tcontainer->resizeToWidth(st::boxWideWidth);\n\n\tsetInnerWidget(std::move(wrap), st::backgroundScroll);\n\tsetInnerTopSkip(st::lineWidth);\n\n\t_inner->chooseEvents(\n\t) | rpl::start_with_next([=](const Data::WallPaper &paper) {\n\t\tchosen(paper);\n\t}, _inner->lifetime());\n\n\t_inner->removeRequests(\n\t) | rpl::start_with_next([=](const Data::WallPaper &paper) {\n\t\tremovePaper(paper);\n\t}, _inner->lifetime());\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Under GDBServer\nDESCRIPTION: Shell command for running functional tests under gdbserver for debugging purposes.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nGDB=1 TEST_FILE=test/functional/api/buffer_spec.lua TEST_FILTER='nvim_buf_set_text works$' make functionaltest\n```\n\n----------------------------------------\n\nTITLE: Setting Process Priority with uv.os_setpriority()\nDESCRIPTION: Sets the scheduling priority of the specified process ID. Priority ranges from -20 (high) to 19 (low).\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_101\n\nLANGUAGE: lua\nCODE:\n```\nuv.os_setpriority({pid}, {priority})\n```\n\n----------------------------------------\n\nTITLE: Disabling All Plugin Mappings\nDESCRIPTION: Global variable setting to disable mappings for all filetype plugins.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/filetype.txt#2025-04-20_snippet_10\n\nLANGUAGE: vim\nCODE:\n```\nlet no_plugin_maps = 1\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Vim\nDESCRIPTION: Examples of setting and appending to environment variables using the :let command with the $ prefix in Vim.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/eval.txt#2025-04-20_snippet_92\n\nLANGUAGE: viml\nCODE:\n```\n:let ${env-name} = {expr1}\n```\n\nLANGUAGE: viml\nCODE:\n```\n:let ${env-name} .= {expr1}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Table Cells with Styled Content\nDESCRIPTION: This HTML snippet defines table cells with consistent styling and content. Each cell has a bottom and left border, right alignment, and contains the number 5 in red, bold Arial font.\nSOURCE: https://github.com/neovim/neovim/blob/master/test/old/testdir/samples/re.freeze.txt#2025-04-20_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"border-bottom windowtext 0.5pt solid; border-left windowtext;\" class=abc align=right><font face=arial><font color=#ff0000><b>5</b></font></font></td>\n```\n\n----------------------------------------\n\nTITLE: Setting Vim script continuation line indentation\nDESCRIPTION: Configures the amount of indentation for continuation lines in Vim scripts. Continuation lines are those starting with a backslash. The default is three times shiftwidth.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/indent.txt#2025-04-20_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\n:let g:vim_indent_cont = shiftwidth() * 3\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity to Monitor Buffer-local Autocommands in Vim\nDESCRIPTION: Command to increase verbosity level to see when buffer-local autocommands are removed.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/autocmd.txt#2025-04-20_snippet_25\n\nLANGUAGE: viml\nCODE:\n```\n:set verbose=6\n```\n\n----------------------------------------\n\nTITLE: Setting Fvwm Version and Filetype in Vim\nDESCRIPTION: This snippet shows how to configure Vim to recognize files in the /etc/X11/fvwm2/ directory as Fvwm2 configuration files.  It sets the 'b:fvwm_version' variable to 2 and the 'filetype' option to fvwm.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/syntax.txt#2025-04-20_snippet_42\n\nLANGUAGE: vim\nCODE:\n```\n\t:au! BufNewFile,BufRead /etc/X11/fvwm2/*  let b:fvwm_version = 2 |\n\t\t\t\t\t \\ set filetype=fvwm\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Paths and Compile Definitions for Gettext in CMake\nDESCRIPTION: Configures paths for locale data, libraries, and package files, then adds them as preprocessor definitions. These paths are important for the Gettext library to locate its resources at runtime.\nSOURCE: https://github.com/neovim/neovim/blob/master/cmake.deps/cmake/GettextCMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LOCALDIR \"gettext\")\nset(LIBDIR \"gettext\")\nset(PKGDATADIR \"gettext\")\nset(PACKAGE_SUFFIX \"gettext\")\nadd_definitions(-DLOCALEDIR=\\\"${LOCALDIR}\\\"\n  -DLOCALE_ALIAS_PATH=\\\"${LOCALDIR}\\\"\n  -DLIBDIR=\\\"${LOCALDIR}\\\"\n  -DINSTALLDIR=\\\"${LOCALDIR}\\\"\n  -DEXEEXT=\\\".exe\\\"\n  -DLOCALEDIR=\\\"${LOCALDIR}\\\"\n  -DLIBDIR=\\\"${LIBDIR}\\\"\n  -DPACKAGE_SUFFIX=\\\"${PACKAGE_SUFFIX}\\\"\n  -DGETTEXTDATADIR=\\\"${PKGDATADIR}\\\"\n  -DBISON_LOCALEDIR=\\\"${LOCALDIR}\\\"\n  -DHAVE_CONFIG_H)\n```\n\n----------------------------------------\n\nTITLE: Configuring SpotBugs Properties for Java Projects\nDESCRIPTION: Configures source and class path directories for SpotBugs to analyze Java projects with separate source and compiled class directories.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickfix.txt#2025-04-20_snippet_45\n\nLANGUAGE: vim\nCODE:\n```\nlet g:spotbugs_properties = {\n\t\\ 'sourceDirPath':\t['src/main/java'],\n\t\\ 'classDirPath':\t['target/classes'],\n\t\\ 'testSourceDirPath':\t['src/test/java'],\n\t\\ 'testClassDirPath':\t['target/test-classes'],\n\\ }\n```\n\n----------------------------------------\n\nTITLE: Language List Definition\nDESCRIPTION: Definition of supported language codes including UTF-8 specific encodings for certain languages\nSOURCE: https://github.com/neovim/neovim/blob/master/src/nvim/po/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LANGUAGES\n    af\n    ca\n    cs\n    da\n    de\n    en_GB\n    eo\n    es\n    fi\n    fr\n    ga\n    it\n    ja\n    ko.UTF-8\n    nl\n    no\n    pl.UTF-8\n    pt_BR\n    ru\n    sk\n    sv\n    tr\n    uk\n    vi\n    zh_CN.UTF-8\n    zh_TW.UTF-8)\n```\n\n----------------------------------------\n\nTITLE: Disabling EditorConfig in Lua\nDESCRIPTION: Shows how to disable EditorConfig integration globally using Lua configuration.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/editorconfig.txt#2025-04-20_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvim.g.editorconfig = false\n```\n\n----------------------------------------\n\nTITLE: Suffix Definition Example\nDESCRIPTION: Demonstrates basic suffix definition format with flag, combination permission, and count of suffix rules\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/spell.txt#2025-04-20_snippet_15\n\nLANGUAGE: spelling-definition\nCODE:\n```\nSFX L Y 2 ~\nSFX L 0 re [^x] ~\nSFX L 0 ro x ~\n```\n\n----------------------------------------\n\nTITLE: Getting libuv Loop Mode in Lua\nDESCRIPTION: This function returns a string indicating the current loop mode if the loop is running, or `nil` if it is not. It allows querying the currently active event loop execution mode.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt#2025-04-20_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n\"uv.loop_mode()                                                  *uv.loop_mode()*\\n\\n                If the loop is running, returns a string indicating the mode\\n                in use. If the loop is not running, `nil` is returned instead.\\n\\n                Returns: `string` or `nil`\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Sanitizers for Neovim Build\nDESCRIPTION: Configures options for various sanitizers (ASAN, UBSAN, MSAN, TSAN) used to detect memory and threading bugs during development.\nSOURCE: https://github.com/neovim/neovim/blob/master/CMakeLists.txt#2025-04-20_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\noption(ENABLE_ASAN_UBSAN \"Enable Clang address & undefined behavior sanitizer for nvim binary.\" OFF)\noption(ENABLE_MSAN \"Enable Clang memory sanitizer for nvim binary.\" OFF)\n# TSAN exists to test Luv threads.\noption(ENABLE_TSAN \"Enable Clang thread sanitizer for nvim binary.\" OFF)\n\nif((ENABLE_ASAN_UBSAN AND ENABLE_MSAN)\n    OR (ENABLE_ASAN_UBSAN AND ENABLE_TSAN)\n    OR (ENABLE_MSAN AND ENABLE_TSAN))\n  message(FATAL_ERROR \"Sanitizers cannot be enabled simultaneously\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Vim Help File Footer\nDESCRIPTION: Standard Vim help file footer with formatting modeline settings\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/dev_theme.txt#2025-04-20_snippet_1\n\nLANGUAGE: vimdoc\nCODE:\n```\n vim:tw=78:ts=8:et:ft=help:norl:\n```\n\n----------------------------------------\n\nTITLE: Moving Filetype Plugin to Appropriate Directory - Vim\nDESCRIPTION: This snippet shows how to move a file for a specific filetype plugin into its respective ftplugin directory. It ensures plugins are organized based on the filetypes they support.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/usr_05.txt#2025-04-20_snippet_9\n\nLANGUAGE: Vim\nCODE:\n```\nmv thefile ~/.local/share/nvim/site/ftplugin/stuff.vim\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Cache Configuration\nDESCRIPTION: Command to disable caching when building Neovim using CMAKE.\nSOURCE: https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build -D CACHE_PRG=OFF\n```\n\n----------------------------------------\n\nTITLE: Command-line Editing in Vim\nDESCRIPTION: Commands used for editing the Vim command line, including text manipulation, cursor movement, command history, and completion options.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/quickref.txt#2025-04-20_snippet_8\n\nLANGUAGE: vim\nCODE:\n```\n<Esc>                 abandon command-line (if 'wildchar' is <Esc>, type it twice)\n\nCTRL-V {char}         insert {char} literally\nCTRL-V {number}       enter decimal value of character (up to three digits)\nCTRL-K {char1} {char2} enter digraph\nCTRL-R {register}     insert the contents of a register\n\n<Left>/<Right>        cursor left/right\n<S-Left>/<S-Right>    cursor one word left/right\nCTRL-B/CTRL-E         cursor to beginning/end of command-line\n\n<BS>                  delete the character in front of the cursor\n<Del>                 delete the character under the cursor\nCTRL-W                delete the word in front of the cursor\nCTRL-U                remove all characters\n\n<Up>/<Down>           recall older/newer command-line that starts with current command\n<S-Up>/<S-Down>       recall older/newer command-line from history\nCTRL-G                next match when 'incsearch' is active\nCTRL-T                previous match when 'incsearch' is active\n:his[tory]            show older command-lines\n\n'wildchar' (default: <Tab>) do completion on the pattern in front of the cursor\nCTRL-D                list all names that match the pattern in front of the cursor\nCTRL-A                insert all names that match pattern in front of cursor\nCTRL-L                insert longest common part of names that match pattern\nCTRL-N                after 'wildchar' with multiple matches: go to next match\nCTRL-P                after 'wildchar' with multiple matches: go to previous match\n```\n\n----------------------------------------\n\nTITLE: Concealing code block delimiters in Markdown with Treesitter\nDESCRIPTION: This snippet shows how to use the `@conceal` capture and the `conceal` metadata to hide code block delimiters in Markdown. The `(#set! conceal \"\")` sets the conceal property to an empty string which effectively hides the node.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/treesitter.txt#2025-04-20_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\n    ((fenced_code_block_delimiter) @conceal (#set! conceal \"\"))\n\n```\n\n----------------------------------------\n\nTITLE: Starting Vim Debugger with Breakpoint\nDESCRIPTION: This command starts Vim with a breakpoint set in the 'explorer.vim' script.  It instructs Vim to run and stop execution at the first line of the specified script, enabling debugging.\nSOURCE: https://github.com/neovim/neovim/blob/master/runtime/doc/repeat.txt#2025-04-20_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n\"vim -c \\\"breakadd file */explorer.vim\\\" .\"\n```"
  }
]