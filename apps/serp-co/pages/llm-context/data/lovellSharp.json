[
  {
    "owner": "lovell",
    "repo": "sharp",
    "content": "TITLE: Resizing Image Width with Sharp\nDESCRIPTION: Resizes an image to a specific width while automatically maintaining the aspect ratio. The height is auto-scaled based on the proportions of the original image.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .resize({ width: 100 })\n  .toBuffer()\n  .then(data => {\n    // 100 pixels wide, auto-scaled height\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Sharp with Input Image and Resizing (JavaScript)\nDESCRIPTION: Creates a Sharp instance with an input image, resizes it to 300x200 pixels, and saves the output to a file. Demonstrates basic usage of Sharp for image resizing and processing.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsharp('input.jpg')\n  .resize(300, 200)\n  .toFile('output.jpg', function(err) {\n    // output.jpg is a 300 pixels wide and 200 pixels high image\n    // containing a scaled and cropped version of input.jpg\n  });\n```\n\n----------------------------------------\n\nTITLE: Image Processing with Promises in Sharp\nDESCRIPTION: Demonstrates using Sharp with Promises to rotate, resize, and convert an image to JPEG format with mozjpeg optimization.\nSOURCE: https://github.com/lovell/sharp/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsharp('input.jpg')\n  .rotate()\n  .resize(200)\n  .jpeg({ mozjpeg: true })\n  .toBuffer()\n  .then( data => { ... })\n  .catch( err => { ... });\n```\n\n----------------------------------------\n\nTITLE: Resizing Image Height with Sharp\nDESCRIPTION: Resizes an image to a specific height while automatically maintaining the aspect ratio. The width is auto-scaled based on the proportions of the original image.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .resize({ height: 100 })\n  .toBuffer()\n  .then(data => {\n    // 100 pixels high, auto-scaled width\n  });\n```\n\n----------------------------------------\n\nTITLE: Resizing with Inside Fit and No Enlargement in Sharp\nDESCRIPTION: Resizes an image to fit within specified dimensions without enlarging if the input is smaller than the target dimensions. This preserves the aspect ratio and ensures the output isn't larger than the input.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .resize(200, 200, {\n    fit: sharp.fit.inside,\n    withoutEnlargement: true\n  })\n  .toFormat('jpeg')\n  .toBuffer()\n  .then(function(outputBuffer) {\n    // outputBuffer contains JPEG image data\n    // no wider and no higher than 200 pixels\n    // and no larger than the input image\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Format Image Processing Pipeline\nDESCRIPTION: Demonstrates creating a pipeline that downloads an image and processes it into multiple formats and sizes using Sharp cloning.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst got = require(\"got\");\nconst sharpStream = sharp({ failOn: 'none' });\n\nconst promises = [];\n\npromises.push(\n  sharpStream\n    .clone()\n    .jpeg({ quality: 100 })\n    .toFile(\"originalFile.jpg\")\n);\n\npromises.push(\n  sharpStream\n    .clone()\n    .resize({ width: 500 })\n    .jpeg({ quality: 80 })\n    .toFile(\"optimized-500.jpg\")\n);\n\npromises.push(\n  sharpStream\n    .clone()\n    .resize({ width: 500 })\n    .webp({ quality: 80 })\n    .toFile(\"optimized-500.webp\")\n);\n\ngot.stream(\"https://www.example.com/some-file.jpg\").pipe(sharpStream);\n\nPromise.all(promises)\n  .then(res => { console.log(\"Done!\", res); })\n  .catch(err => {\n    console.error(\"Error processing files, let's clean it up\", err);\n    try {\n      fs.unlinkSync(\"originalFile.jpg\");\n      fs.unlinkSync(\"optimized-500.jpg\");\n      fs.unlinkSync(\"optimized-500.webp\");\n    } catch (e) {}\n  });\n```\n\n----------------------------------------\n\nTITLE: Dynamic Scaling Based on Image Metadata in Sharp\nDESCRIPTION: Retrieves image metadata to determine the original dimensions and then scales the image by a percentage of its original size. This approach allows for proportional resizing without hardcoded dimensions.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst scaleByHalf = await sharp(input)\n  .metadata()\n  .then(({ width }) => sharp(input)\n    .resize(Math.round(width * 0.5))\n    .toBuffer()\n  );\n```\n\n----------------------------------------\n\nTITLE: Converting to Full Color PNG with Sharp\nDESCRIPTION: Demonstrates how to convert any input image to a standard full color PNG with 8 bits per pixel. This is the default PNG output mode in Sharp.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert any input to full colour PNG output\nconst data = await sharp(input)\n  .png()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Processing Image from Remote URL with Sharp (JavaScript)\nDESCRIPTION: Fetches an image from a remote URL, creates a Sharp instance to process it, resizes the image to 300 pixels wide, and pipes the result to a writable stream. Also demonstrates event handling for image info.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { body } = fetch('https://...');\nconst readableStream = Readable.fromWeb(body);\nconst transformer = sharp()\n  .resize(300)\n  .on('info', ({ height }) => {\n    console.log(`Image height is ${height}`);\n  });\nreadableStream.pipe(transformer).pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Writing Sharp Output to File\nDESCRIPTION: Writes processed image data to a file. The output format is inferred from the file extension if not explicitly specified. Returns a Promise when no callback is provided.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .toFile('output.png', (err, info) => { ... });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .toFile('output.png')\n  .then(info => { ... })\n  .catch(err => { ... });\n```\n\n----------------------------------------\n\nTITLE: Auto-Orienting an Image Based on EXIF Data\nDESCRIPTION: Shows how to automatically orient an image based on its EXIF Orientation tag and remove the tag afterward. Two examples are provided: one with a simple promise-based approach and another with a pipeline stream.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input).autoOrient().toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = sharp()\n  .autoOrient()\n  .resize(null, 200)\n  .toBuffer(function (err, outputBuffer, info) {\n    // outputBuffer contains 200px high JPEG image data,\n    // auto-oriented using EXIF Orientation tag\n    // info.width and info.height contain the dimensions of the resized image\n  });\nreadableStream.pipe(pipeline);\n```\n\n----------------------------------------\n\nTITLE: Stream Processing with Rounded Corners in Sharp\nDESCRIPTION: Demonstrates using Sharp in a stream to resize an image and apply rounded corners using SVG compositing.\nSOURCE: https://github.com/lovell/sharp/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst roundedCorners = Buffer.from(\n  '<svg><rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" rx=\"50\" ry=\"50\"/></svg>'\n);\n\nconst roundedCornerResizer =\n  sharp()\n    .resize(200, 200)\n    .composite([{\n      input: roundedCorners,\n      blend: 'dest-in'\n    }])\n    .png();\n\nreadableStream\n  .pipe(roundedCornerResizer)\n  .pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Importing Sharp in JavaScript\nDESCRIPTION: Code to require the Sharp module in a JavaScript file.\nSOURCE: https://github.com/lovell/sharp/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sharp = require('sharp');\n```\n\n----------------------------------------\n\nTITLE: Blurring an Image with Sharp\nDESCRIPTION: Shows how to blur an image using either a fast box blur (default) or a more accurate Gaussian blur with a specified sigma value.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst boxBlurred = await sharp(input)\n  .blur()\n  .toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst gaussianBlurred = await sharp(input)\n  .blur(5)\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Complex Image Processing Pipeline with Composition\nDESCRIPTION: Demonstrates a complex image processing pipeline including rotation, resizing, flattening, composition, sharpening, and format conversion with metadata preservation.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-composite.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsharp('input.png')\n  .rotate(180)\n  .resize(300)\n  .flatten( { background: '#ff6600' } )\n  .composite([{ input: 'overlay.png', gravity: 'southeast' }])\n  .sharpen()\n  .withMetadata()\n  .webp( { quality: 90 } )\n  .toBuffer()\n  .then(function(outputBuffer) {\n    // outputBuffer contains upside down, 300px wide, alpha channel flattened\n    // onto orange background, composited with overlay.png with SE gravity,\n    // sharpened, with metadata, 90% quality WebP image data. Phew!\n  });\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Resizing with Custom Options in Sharp\nDESCRIPTION: Resizes an image with advanced configuration including custom kernel, fit, position, and background settings. This example creates a contained image with nearest-neighbor scaling on a semi-transparent background.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .resize(200, 300, {\n    kernel: sharp.kernel.nearest,\n    fit: 'contain',\n    position: 'right top',\n    background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n  })\n  .toFile('output.png')\n  .then(() => {\n    // output.png is a 200 pixels wide and 300 pixels high image\n    // containing a nearest-neighbour scaled version\n    // contained within the north-east corner of a semi-transparent white canvas\n  });\n```\n\n----------------------------------------\n\nTITLE: Converting an Image to Greyscale with Sharp\nDESCRIPTION: This example shows how to convert an input image to greyscale using the Sharp library.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-colour.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input).greyscale().toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Writing Sharp Output to Buffer\nDESCRIPTION: Writes processed image data to a Buffer. Supports JPEG, PNG, WebP, AVIF, TIFF, GIF and raw pixel data output. Format is set using toFormat() or format-specific functions like jpeg(), png(), etc.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .toBuffer((err, data, info) => { ... });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .toBuffer()\n  .then(data => { ... })\n  .catch(err => { ... });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .png()\n  .toBuffer({ resolveWithObject: true })\n  .then(({ data, info }) => { ... })\n  .catch(err => { ... });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, info } = await sharp('my-image.jpg')\n  // output the raw pixels\n  .raw()\n  .toBuffer({ resolveWithObject: true });\n\n// create a more type safe way to work with the raw pixel data\n// this will not copy the data, instead it will change `data`s underlying ArrayBuffer\n// so `data` and `pixelArray` point to the same memory location\nconst pixelArray = new Uint8ClampedArray(data.buffer);\n\n// When you are done changing the pixelArray, sharp takes the `pixelArray` as an input\nconst { width, height, channels } = info;\nawait sharp(pixelArray, { raw: { width, height, channels } })\n  .toFile('my-changed-image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Converting to Lossless WebP with Sharp\nDESCRIPTION: Shows how to convert an input image to a lossless WebP format. WebP offers good compression while maintaining image quality, and the lossless mode ensures no quality loss during compression.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert any input to lossless WebP output\nconst data = await sharp(input)\n  .webp({ lossless: true })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Converting images to lossless AVIF format\nDESCRIPTION: Example of converting an input image to lossless AVIF format, which preserves all image data but results in larger file sizes.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await sharp(input)\n  .avif({ lossless: true })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Normalizing Image Contrast in Sharp\nDESCRIPTION: Enhances output image contrast by stretching its luminance to cover a full dynamic range. Uses a histogram-based approach with customizable percentile ranges to reduce sensitivity to noise at the extremes.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .normalise()\n  .toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .normalise({ lower: 0, upper: 100 })\n  .toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .normalize()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Rotating an Image with Sharp\nDESCRIPTION: Demonstrates how to rotate an image by a specified angle. Shows the difference between rotating then resizing versus resizing then rotating an image.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rotateThenResize = await sharp(input)\n  .rotate(90)\n  .resize({ width: 16, height: 8, fit: 'fill' })\n  .toBuffer();\nconst resizeThenRotate = await sharp(input)\n  .resize({ width: 16, height: 8, fit: 'fill' })\n  .rotate(90)\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Preserving ICC Profile in Sharp\nDESCRIPTION: Keeps the ICC color profile from the input image in the output image. Will attempt to convert the output color space to match the profile where necessary.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputWithIccProfile = await sharp(inputWithIccProfile)\n  .keepIccProfile()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Resizing Image Based on Metadata\nDESCRIPTION: Shows how to use image metadata to perform dynamic resizing operations, specifically halving the image width and converting to WebP format.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-input.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = sharp(inputJpg);\nimage\n  .metadata()\n  .then(function(metadata) {\n    return image\n      .resize(Math.round(metadata.width / 2))\n      .webp()\n      .toBuffer();\n  })\n  .then(function(data) {\n    // data contains a WebP image half the width and height of the original JPEG\n  });\n```\n\n----------------------------------------\n\nTITLE: Converting Animated GIF to Animated WebP with Sharp (JavaScript)\nDESCRIPTION: Example placeholder for converting an animated GIF to an animated WebP format using Sharp. The actual code implementation is not provided in the given documentation.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert an animated GIF to an animated WebP\n```\n\n----------------------------------------\n\nTITLE: Using MozJPEG Optimization with Sharp\nDESCRIPTION: Shows how to enable MozJPEG optimization in Sharp to reduce JPEG file size. MozJPEG applies trellis quantization, overshoot deringing, optimized scans, and uses quantization table 3 for better compression at the cost of slower processing.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Use mozjpeg to reduce output JPEG file size (slower)\nconst data = await sharp(input)\n  .jpeg({ mozjpeg: true })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Applying Convolution with Custom Kernel in Sharp\nDESCRIPTION: Convolves the image with a specified kernel. Requires kernel dimensions, values, and optional scale and offset. Useful for various image processing operations like edge detection or blurring.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .convolve({\n    width: 3,\n    height: 3,\n    kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n  })\n  .raw()\n  .toBuffer(function(err, data, info) {\n    // data contains the raw pixel data representing the convolution\n    // of the input image with the horizontal Sobel operator\n  });\n```\n\n----------------------------------------\n\nTITLE: Preserving All Metadata in Sharp\nDESCRIPTION: Keeps all metadata (EXIF, ICC, XMP, IPTC) from the input image in the output image. Overrides the default behavior of converting to sRGB color space and stripping all metadata.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputWithMetadata = await sharp(inputWithMetadata)\n  .keepMetadata()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Removing Alpha Channel in Sharp\nDESCRIPTION: Removes the alpha channel from an image using Sharp. This operation is a no-op if the image doesn't have an alpha channel.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-channel.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsharp('rgba.png')\n  .removeAlpha()\n  .toFile('rgb.png', function(err, info) {\n    // rgb.png is a 3 channel image without an alpha channel\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Affine Transformation to an Image with Sharp\nDESCRIPTION: Demonstrates how to perform an affine transform on an image with customizable options including background color and interpolator. This transform applies a 2x2 matrix to manipulate the image coordinates.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = sharp()\n  .affine([[1, 0.3], [0.1, 0.7]], {\n     background: 'white',\n     interpolator: sharp.interpolators.nohalo\n  })\n  .toBuffer((err, outputBuffer, info) => {\n     // outputBuffer contains the transformed image\n     // info.width and info.height contain the new dimensions\n  });\n\ninputStream\n  .pipe(pipeline);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Statistics\nDESCRIPTION: Shows how to access channel-wise statistics and opacity information using Sharp's stats() method.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-input.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = sharp(inputJpg);\nimage\n  .stats()\n  .then(function(stats) {\n     // stats contains the channel-wise statistics array and the isOpaque value\n  });\n```\n\n----------------------------------------\n\nTITLE: Unflattening Image to Add Alpha Channel in Sharp\nDESCRIPTION: Ensures the image has an alpha channel with all white pixel values made fully transparent. Existing alpha channel values for non-white pixels remain unchanged. This feature is experimental.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(rgbInput)\n  .unflatten()\n  .toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(rgbInput)\n  .threshold(128, { grayscale: false }) // converter bright pixels to white\n  .unflatten()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Flattening Alpha Channel with Background Color in Sharp\nDESCRIPTION: Merges the alpha transparency channel with a specified background color, then removes the alpha channel. The background color defaults to black but can be customized using the 'color' module.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(rgbaInput)\n  .flatten({ background: '#F0A703' })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Basic Image Composition with Multiple Layers\nDESCRIPTION: Demonstrates compositing multiple image layers with different gravity positions onto a background image.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-composite.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(background)\n  .composite([\n    { input: layer1, gravity: 'northwest' },\n    { input: layer2, gravity: 'southeast' },\n  ])\n  .toFile('combined.png');\n```\n\n----------------------------------------\n\nTITLE: Creating Deep Zoom Tiles with Sharp\nDESCRIPTION: Creates a deep zoom image pyramid with 512x512 tiles and outputs to a DZI format. The output includes both the DZI XML definition and the tile files organized by zoom level.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nsharp('input.tiff')\n  .png()\n  .tile({\n    size: 512\n  })\n  .toFile('output.dz', function(err, info) {\n    // output.dzi is the Deep Zoom XML definition\n    // output_files contains 512x512 tiles grouped by zoom level\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Gamma Correction in Sharp\nDESCRIPTION: Applies gamma correction to improve perceived brightness of resized images in non-linear color spaces. It reduces encoding pre-resize and increases it post-resize. JPEG and WebP inputs won't use shrink-on-load optimization with gamma correction.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Sharpening an Image with Sharp\nDESCRIPTION: Shows different ways to sharpen an image, from a simple default sharpening to more advanced options with sigma and controls for flat and jagged areas.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await sharp(input).sharpen().toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await sharp(input).sharpen({ sigma: 2 }).toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await sharp(input)\n  .sharpen({\n    sigma: 2,\n    m1: 0,\n    m2: 3,\n    x1: 3,\n    y2: 15,\n    y3: 15,\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Creating IIIF Tiles with Sharp Stream\nDESCRIPTION: Demonstrates streaming tile generation with IIIF layout using Sharp's pipe functionality.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst iiififier = sharp().tile({ layout: \"iiif\" });\nreadableStream\n  .pipe(iiififier)\n  .pipe(writeableStream);\n```\n\n----------------------------------------\n\nTITLE: Creating PNG from Raw Pixel Array using Sharp\nDESCRIPTION: Demonstrates how to create a PNG image from a raw array of pixel values, specifying dimensions and channels.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = Uint8Array.from([255, 255, 255, 0, 0, 0]);\nconst image = sharp(input, {\n  raw: {\n    width: 2,\n    height: 1,\n    channels: 3\n  }\n});\nawait image.toFile('my-two-pixels.png');\n```\n\n----------------------------------------\n\nTITLE: Reducing Animated GIF File Size with Sharp\nDESCRIPTION: Demonstrates how to apply lossy compression to an animated GIF to reduce file size. This example uses interFrameMaxError to allow some quality loss between frames for better compression.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Lossy file size reduction of animated GIF\nawait sharp('in.gif', { animated: true })\n  .gif({ interFrameMaxError: 8 })\n  .toFile('optim.gif');\n```\n\n----------------------------------------\n\nTITLE: Converting SVG to LZW-compressed TIFF with reduced bitdepth\nDESCRIPTION: Example of converting an SVG input to a TIFF output using LZW compression and reducing to 1 bit per pixel, suitable for simple black and white images.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert SVG input to LZW-compressed, 1 bit per pixel TIFF output\nsharp('input.svg')\n  .tiff({\n    compression: 'lzw',\n    bitdepth: 1\n  })\n  .toFile('1-bpp-output.tiff')\n  .then(info => { ... });\n```\n\n----------------------------------------\n\nTITLE: Converting images to HEIF format with HEVC compression\nDESCRIPTION: Example of converting an input image to HEIF format using HEVC compression. Requires libvips with support for libheif, libde265, and x265.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await sharp(input)\n  .heif({ compression: 'hevc' })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Cloning Sharp Instance for Multiple Outputs\nDESCRIPTION: Shows how to clone a Sharp instance to create multiple processing pipelines from a single input stream.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = sharp().rotate();\npipeline.clone().resize(800, 600).pipe(firstWritableStream);\npipeline.clone().extract({ left: 20, top: 20, width: 100, height: 100 }).pipe(secondWritableStream);\nreadableStream.pipe(pipeline);\n```\n\n----------------------------------------\n\nTITLE: Creating Semi-Transparent PNG with Async/Await in Sharp\nDESCRIPTION: Uses Sharp with async/await to create a semi-transparent red PNG image buffer.\nSOURCE: https://github.com/lovell/sharp/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst semiTransparentRedPng = await sharp({\n  create: {\n    width: 48,\n    height: 48,\n    channels: 4,\n    background: { r: 255, g: 0, b: 0, alpha: 0.5 }\n  }\n})\n  .png()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Applying Threshold Operation in Sharp\nDESCRIPTION: Sets pixel values to 255 if they're greater than or equal to the threshold value, otherwise to 0. Optional parameters control the threshold level and whether to convert to grayscale.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Optimizing Animated WebP File Size with Sharp\nDESCRIPTION: Demonstrates how to optimize an animated WebP by setting a higher effort level. This produces smaller file sizes at the cost of increased processing time.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Optimise the file size of an animated WebP\nconst outputWebp = await sharp(inputWebp, { animated: true })\n  .webp({ effort: 6 })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Checking Available Image Formats\nDESCRIPTION: Demonstrates how to check available input and output formats supported by Sharp.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(sharp.format);\n```\n\n----------------------------------------\n\nTITLE: Increasing Lightness with Sharp's Modulate Function\nDESCRIPTION: This example illustrates how to use the modulate function to increase the lightness of an image by +50. The function is applied to a Sharp instance and the result is returned as a buffer.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .modulate({\n    lightness: 50\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Creating Indexed PNG Output with Sharp\nDESCRIPTION: Shows how to generate an indexed PNG image with a color palette and alpha transparency support. This produces smaller files but is slower to process than full color PNG.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert any input to indexed PNG output (slower)\nconst data = await sharp(input)\n  .png({ palette: true })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Flexible Color Trimming with Custom Threshold\nDESCRIPTION: Shows how to trim 'yellow-ish' pixels with a higher threshold for more lenient color matching.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .trim({\n    background: \"yellow\",\n    threshold: 42,\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Tinting an Image with Sharp\nDESCRIPTION: This snippet demonstrates how to tint an image using the Sharp library. It applies a yellow tint to the input image.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-colour.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .tint({ r: 255, g: 240, b: 16 })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Transformation to Image Levels in Sharp\nDESCRIPTION: Applies the linear formula a * input + b to adjust image levels. Can use single values for all channels or arrays for channel-specific adjustments. Useful for brightness and contrast manipulations.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(input)\n  .linear(0.5, 2)\n  .toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(rgbInput)\n  .linear(\n    [0.25, 0.5, 0.75],\n    [150, 100, 50]\n  )\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated GIF Thumbnail with Sharp\nDESCRIPTION: Shows how to resize and customize an animated GIF to create a thumbnail. This example creates a 128x128 cropped animated thumbnail without dithering from an input GIF.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a 128x128, cropped, non-dithered, animated thumbnail of an animated GIF\nconst out = await sharp('in.gif', { animated: true })\n  .resize({ width: 128, height: 128 })\n  .gif({ dither: 0 })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise Boolean Operations on Images in Sharp\nDESCRIPTION: Performs a bitwise boolean operation between the input image and an operand image. Supports 'and', 'or', and 'eor' operations. Can work with file paths or raw pixel data as operands.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Applying Hue Rotation with Sharp's Modulate Function\nDESCRIPTION: This example shows how to use the modulate function to rotate the hue of an image by 180 degrees. The function is applied to a Sharp instance and the result is returned as a buffer.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .modulate({\n    hue: 180\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Applying CLAHE (Contrast Limited Adaptive Histogram Equalization) in Sharp\nDESCRIPTION: Performs contrast limiting adaptive histogram equalization to enhance image clarity by bringing out darker details. Requires specifying the search window dimensions and optional maximum slope for contrast limiting.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .clahe({\n    width: 3,\n    height: 3,\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Handling EXIF Orientation in Metadata\nDESCRIPTION: Example of accessing image dimensions while taking EXIF orientation into account using the autoOrient property from metadata.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-input.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Get dimensions taking EXIF Orientation into account.\nconst { autoOrient } = await sharp(input).metadata();\nconst { width, height } = autoOrient;\n```\n\n----------------------------------------\n\nTITLE: Converting PNG to GIF with Sharp\nDESCRIPTION: Shows how to convert a PNG image to GIF format. The GIF output will use a palette with up to 256 colors, with the first palette entry reserved for transparency.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert PNG to GIF\nawait sharp(pngBuffer)\n  .gif()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Converting images to lossless JP2 format with Sharp\nDESCRIPTION: Example of converting an input image to lossless JP2 format. JP2 support requires libvips compiled with OpenJPEG support.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert any input to lossless JP2 output\nconst data = await sharp(input)\n  .jp2({ lossless: true })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Merging EXIF Metadata in Sharp\nDESCRIPTION: Updates EXIF metadata from the input image in the output image. Allows selective modification of EXIF data while preserving other metadata from the input.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataWithMergedExif = await sharp(inputWithExif)\n  .withExifMerge({\n    IFD0: {\n      Copyright: 'The National Gallery'\n    }\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Ensuring Alpha Channel in Sharp\nDESCRIPTION: Ensures the output image has an alpha transparency channel. If missing, it adds an alpha channel with the specified transparency level (default is fully-opaque).\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-channel.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rgba.png will be a 4 channel image with a fully-opaque alpha channel\nawait sharp('rgb.jpg')\n  .ensureAlpha()\n  .toFile('rgba.png')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rgba is a 4 channel image with a fully-transparent alpha channel\nconst rgba = await sharp(rgb)\n  .ensureAlpha(0)\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Setting EXIF Metadata in Sharp\nDESCRIPTION: Sets EXIF metadata in the output image, ignoring any EXIF in the input image. Requires an object with EXIF data organized by IFD (Image File Directory).\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataWithExif = await sharp(input)\n  .withExif({\n    IFD0: {\n      Copyright: 'The National Gallery'\n    },\n    IFD3: {\n      GPSLatitudeRef: 'N',\n      GPSLatitude: '51/1 30/1 3230/100',\n      GPSLongitudeRef: 'W',\n      GPSLongitude: '0/1 7/1 4366/100'\n    }\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise Boolean Operation on Channels in Sharp\nDESCRIPTION: Performs a bitwise boolean operation on all input image channels to produce a single channel output image. Supports 'and', 'or', and 'eor' operations.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-channel.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsharp('3-channel-rgb-input.png')\n  .bandbool(sharp.bool.and)\n  .toFile('1-channel-output.png', function (err, info) {\n    // The output will be a single channel image where each pixel `P = R & G & B`.\n    // If `I(1,1) = [247, 170, 14] = [0b11110111, 0b10101010, 0b00001111]`\n    // then `O(1,1) = 0b11110111 & 0b10101010 & 0b00001111 = 0b00000010 = 2`.\n  });\n```\n\n----------------------------------------\n\nTITLE: Generating 16-bit PNG Output with Sharp\nDESCRIPTION: Demonstrates how to create a 16-bit per pixel PNG by first converting the colorspace to rgb16. This preserves more color information than the standard 8-bit output.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Output 16 bits per pixel RGB(A)\nconst data = await sharp(input)\n .toColourspace('rgb16')\n .png()\n .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Creating a Blank Image with Sharp (JavaScript)\nDESCRIPTION: Uses Sharp to create a new 300x200 PNG image with semi-translucent red pixels. Demonstrates the use of the 'create' option to generate images from scratch.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsharp({\n  create: {\n    width: 300,\n    height: 200,\n    channels: 4,\n    background: { r: 255, g: 0, b: 0, alpha: 0.5 }\n  }\n})\n.png()\n.toBuffer()\n.then( ... );\n```\n\n----------------------------------------\n\nTITLE: Creating Text Image using Sharp\nDESCRIPTION: Generates a black and white image from text with specified dimensions.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp({\n  text: {\n    text: 'Hello, world!',\n    width: 400,\n    height: 300\n  }\n}).toFile('text_bw.png');\n```\n\n----------------------------------------\n\nTITLE: Applying Median Filter to an Image with Sharp\nDESCRIPTION: Demonstrates how to apply a median filter to an image using Sharp. By default, a 3x3 window is used, but a custom size can be specified.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input).median().toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input).median(5).toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Preserving EXIF Metadata in Sharp\nDESCRIPTION: Keeps all EXIF metadata from the input image in the output image. Note that EXIF metadata is not supported for TIFF output.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputWithExif = await sharp(inputWithExif)\n  .keepExif()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Emoji GIF using Sharp\nDESCRIPTION: Generates a two-frame animated GIF from emoji characters using text rendering.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst images = ['😀', '😛'].map(text => ({\n  text: { text, width: 64, height: 64, channels: 4, rgba: true }\n}));\nawait sharp(images, { join: { animated: true } }).toFile('out.gif');\n```\n\n----------------------------------------\n\nTITLE: Complex Image Region Extraction with Resize\nDESCRIPTION: Shows how to perform multiple extractions with an intermediate resize operation. Demonstrates pre-resize and post-resize extraction capabilities.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })\n  .resize(width, height)\n  .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })\n  .toFile(output, function(err) {\n    // Extract a region, resize, then extract from the resized image\n  });\n```\n\n----------------------------------------\n\nTITLE: Image Streaming with Entropy-Based Cropping in Sharp\nDESCRIPTION: Creates a transform stream that resizes images to a square with automatic entropy-based cropping. This is useful for processing images in a pipeline without storing the entire image in memory.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst transformer = sharp()\n  .resize({\n    width: 200,\n    height: 200,\n    fit: sharp.fit.cover,\n    position: sharp.strategy.entropy\n  });\n// Read image data from readableStream\n// Write 200px square auto-cropped image data to writableStream\nreadableStream\n  .pipe(transformer)\n  .pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Flipping an Image Vertically with Sharp\nDESCRIPTION: Demonstrates how to mirror an image vertically (up-down) about the x-axis. This operation is applied before any rotation.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input).flip().toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Creating Image Grid using Sharp\nDESCRIPTION: Joins four images into a 2x2 grid with specified gutter spacing.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await sharp(\n [image1, image2, image3, image4],\n { join: { across: 2, shim: 4 } }\n).toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Flopping an Image Horizontally with Sharp\nDESCRIPTION: Shows how to mirror an image horizontally (left-right) about the y-axis. This operation is applied before any rotation.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input).flop().toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Applying Dilate Morphological Operator with Sharp\nDESCRIPTION: Demonstrates how to expand foreground objects in an image using the dilate morphological operator with a default width of 1 pixel.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .dilate()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Converting images to AVIF format with reduced processing effort\nDESCRIPTION: Example of converting an input image to AVIF format with reduced CPU effort for faster processing at the expense of compression efficiency.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await sharp(input)\n  .avif({ effort: 2 })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Metadata with Sharp\nDESCRIPTION: Demonstrates how to fetch basic metadata from an image file using Sharp's metadata() method. Returns a promise with format, dimensions, color space, and other image properties.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-input.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst metadata = await sharp(input).metadata();\n```\n\n----------------------------------------\n\nTITLE: Applying Erode Morphological Operator with Sharp\nDESCRIPTION: Shows how to shrink foreground objects in an image using the erode morphological operator with a default erosion width of 1 pixel.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .erode()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Converting images to high quality JP2 format with Sharp\nDESCRIPTION: Example of converting an input image to high quality JP2 format with maximum quality and no chroma subsampling for better color fidelity.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert any input to very high quality JP2 output\nconst data = await sharp(input)\n  .jp2({\n    quality: 100,\n    chromaSubsampling: '4:4:4'\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Extracting Image Region with Sharp\nDESCRIPTION: Demonstrates basic image region extraction using Sharp library. Extracts a region based on left, top, width, and height parameters.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .extract({ left: left, top: top, width: width, height: height })\n  .toFile(output, function(err) {\n    // Extract a region of the input image, saving in the same format.\n  });\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Image Statistics\nDESCRIPTION: Demonstrates destructuring to access specific statistical properties like entropy, sharpness, and dominant colors.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-input.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { entropy, sharpness, dominant } = await sharp(input).stats();\nconst { r, g, b } = dominant;\n```\n\n----------------------------------------\n\nTITLE: Extracting Channel in Sharp\nDESCRIPTION: Extracts a single channel from a multi-channel image. The channel can be specified by index or name ('red', 'green', 'blue', 'alpha').\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-channel.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// green.jpg is a greyscale image containing the green channel of the input\nawait sharp(input)\n  .extractChannel('green')\n  .toFile('green.jpg');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// red1 is the red value of the first pixel, red2 the second pixel etc.\nconst [red1, red2, ...] = await sharp(input)\n  .extractChannel(0)\n  .raw()\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Increasing Brightness with Sharp's Modulate Function\nDESCRIPTION: This example demonstrates how to use the modulate function to increase the brightness of an image by a factor of 2. The function is applied to a Sharp instance and the result is returned as a buffer.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .modulate({\n    brightness: 2\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Setting Output Colourspace to 16-bit RGB in Sharp\nDESCRIPTION: This example shows how to set the output colourspace to 16-bit RGB using the Sharp library.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-colour.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(input)\n .toColourspace('rgb16')\n .toFile('16-bpp.png')\n```\n\n----------------------------------------\n\nTITLE: Negating Image Colors in Sharp\nDESCRIPTION: Produces the \"negative\" of the image. An optional parameter allows control over whether the alpha channel is negated.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .negate()\n  .toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .negate({ alpha: false })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Converting to High-Quality JPEG with Sharp\nDESCRIPTION: Demonstrates how to convert an input image to a high-quality JPEG output with maximum quality and 4:4:4 chroma subsampling. This preserves more color detail by disabling typical chroma subsampling.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert any input to very high quality JPEG output\nconst data = await sharp(input)\n  .jpeg({\n    quality: 100,\n    chromaSubsampling: '4:4:4'\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Monitoring Sharp Task Queue\nDESCRIPTION: Shows how to monitor Sharp's task queue using event listeners.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsharp.queue.on('change', function(queueLength) {\n  console.log('Queue contains ' + queueLength + ' task(s)');\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting raw RGB pixel data from JPEG input\nDESCRIPTION: Example of extracting raw, unsigned 8-bit RGB pixel data from a JPEG input image. The data is returned as a buffer along with the image information.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Extract raw, unsigned 8-bit RGB pixel data from JPEG input\nconst { data, info } = await sharp('input.jpg')\n  .raw()\n  .toBuffer({ resolveWithObject: true });\n```\n\n----------------------------------------\n\nTITLE: Extracting alpha channel as 16-bit raw pixel data\nDESCRIPTION: Example of extracting only the alpha channel from a PNG input as raw, unsigned 16-bit pixel data. This demonstrates extracting a specific channel with increased bit depth.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Extract alpha channel as raw, unsigned 16-bit pixel data from PNG input\nconst data = await sharp('input.png')\n  .ensureAlpha()\n  .extractChannel(3)\n  .toColourspace('b-w')\n  .raw({ depth: 'ushort' })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Managing SIMD Settings\nDESCRIPTION: Examples of checking and controlling SIMD vector unit instruction usage.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst simd = sharp.simd();\n\nconst simd = sharp.simd(false);\n```\n\n----------------------------------------\n\nTITLE: Extending Image with Mirrored Edge in Sharp\nDESCRIPTION: Extends an image using the mirroring effect to create a reflection of the existing edge. This example adds 8 pixels to the right side by mirroring the existing right edge.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Extrude image by 8 pixels to the right, mirroring existing right hand edge\nsharp(input)\n  .extend({\n    right: 8,\n    background: 'mirror'\n  })\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Text Image with Pango Markup\nDESCRIPTION: Generates an RGBA image from text using Pango markup for styling and custom font settings.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp({\n  text: {\n    text: '<span foreground=\"red\">Red!</span><span background=\"cyan\">blue</span>',\n    font: 'sans',\n    rgba: true,\n    dpi: 300\n  }\n}).toFile('text_rgba.png');\n```\n\n----------------------------------------\n\nTITLE: Blocking Image Operations\nDESCRIPTION: Examples of blocking specific libvips operations for security purposes.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsharp.block({\n  operation: ['VipsForeignLoadTiff']\n});\n```\n\n----------------------------------------\n\nTITLE: Recombining Image with Matrix in Sharp\nDESCRIPTION: Recombines the image using a specified 3x3 or 4x4 matrix. This operation allows for complex color transformations and effects like sepia filtering.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .recomb([\n   [0.3588, 0.7044, 0.1368],\n   [0.2990, 0.5870, 0.1140],\n   [0.2392, 0.4696, 0.0912],\n  ])\n  .raw()\n  .toBuffer(function(err, data, info) {\n    // data contains the raw pixel data after applying the matrix\n    // With this example input, a sepia filter has been applied\n  });\n```\n\n----------------------------------------\n\nTITLE: Converting Animated WebP to Animated GIF with Sharp\nDESCRIPTION: Demonstrates how to convert an animated WebP to an animated GIF format. This preserves the animation frames while changing the format.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert animated WebP to animated GIF\nawait sharp('animated.webp', { animated: true })\n  .toFile('animated.gif');\n```\n\n----------------------------------------\n\nTITLE: Unblocking Image Operations\nDESCRIPTION: Shows how to selectively unblock specific image operations.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsharp.block({\n  operation: ['VipsForeignLoad']\n});\nsharp.unblock({\n  operation: ['VipsForeignLoadWebpFile']\n});\n\nsharp.block({\n  operation: ['VipsForeignLoad']\n});\nsharp.unblock({\n  operation: ['VipsForeignLoadJpegBuffer', 'VipsForeignLoadPngBuffer']\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing with Outside Fit and No Reduction in Sharp\nDESCRIPTION: Resizes an image to be at least as large as the specified dimensions without reducing if the input is larger. This maintains aspect ratio and ensures the output isn't smaller than the input image.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(input)\n  .resize(200, 200, {\n    fit: sharp.fit.outside,\n    withoutReduction: true\n  })\n  .toFormat('jpeg')\n  .toBuffer()\n  .then(function(outputBuffer) {\n    // outputBuffer contains JPEG image data\n    // of at least 200 pixels wide and 200 pixels high while maintaining aspect ratio\n    // and no smaller than the input image\n  });\n```\n\n----------------------------------------\n\nTITLE: Converting Animated GIF to WebP using Sharp\nDESCRIPTION: Simple example of converting an animated GIF file to WebP format using Sharp.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp('in.gif', { animated: true }).toFile('out.webp');\n```\n\n----------------------------------------\n\nTITLE: Accessing Sharp Version Information\nDESCRIPTION: Shows how to access version information about Sharp and its dependencies.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(sharp.versions);\n```\n\n----------------------------------------\n\nTITLE: Animated GIF Composition with Tiled Overlay\nDESCRIPTION: Shows how to composite a tiled overlay onto an animated GIF using the saturate blend mode.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-composite.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp('input.gif', { animated: true })\n  .composite([\n    { input: 'overlay.png', tile: true, blend: 'saturate' }\n  ])\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Extending Image with Transparent Border in Sharp\nDESCRIPTION: Adds transparent pixels around an image with different amounts on each side. This example resizes an image and then creates padding with a transparent background around it.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Resize to 140 pixels wide, then add 10 transparent pixels\n// to the top, left and right edges and 20 to the bottom edge\nsharp(input)\n  .resize(140)\n  .extend({\n    top: 10,\n    bottom: 20,\n    left: 10,\n    right: 10,\n    background: { r: 0, g: 0, b: 0, alpha: 0 }\n  })\n  ...\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp via npm\nDESCRIPTION: Command to install the Sharp image processing library via npm. This installation command is the entry point to using Sharp's high-performance image processing capabilities in Node.js projects.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install sharp\n```\n\n----------------------------------------\n\nTITLE: Managing Image Metadata in Sharp\nDESCRIPTION: Keeps most metadata (EXIF, XMP, IPTC) from the input image and adds a web-friendly sRGB ICC profile if appropriate. Allows orientation and density to be set or updated.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputSrgbWithMetadata = await sharp(inputRgbWithMetadata)\n  .withMetadata()\n  .toBuffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Set output metadata to 96 DPI\nconst data = await sharp(input)\n  .withMetadata({ density: 96 })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Modulations with Sharp's Modulate Function\nDESCRIPTION: This example demonstrates how to use the modulate function to apply multiple transformations simultaneously. It decreases brightness and saturation while also rotating the hue by 90 degrees. The function is applied to a Sharp instance and the result is returned as a buffer.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-operation.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .modulate({\n    brightness: 0.5,\n    saturation: 0.5,\n    hue: 90,\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Configuring electron-builder to unpack Sharp from ASAR\nDESCRIPTION: JSON configuration for electron-builder to unpack Sharp from the ASAR archive file, which is necessary for native modules to function properly.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"asar\": true,\n    \"asarUnpack\": [\n      \"**/node_modules/sharp/**/*\",\n      \"**/node_modules/@img/**/*\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Zipped Tiles with Sharp\nDESCRIPTION: Generates image tiles and returns them in a buffer as a zip file. Uses the basename 'tiles' for the directory structure within the zip.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst zipFileWithTiles = await sharp(input)\n  .tile({ basename: \"tiles\" })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Running Sharp Benchmarks with Docker\nDESCRIPTION: Shell commands to clone the Sharp repository and run the benchmark tests using Docker. The benchmarks compare performance across different image processing libraries.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/performance.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lovell/sharp.git\ncd sharp/test/bench\n./run-with-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Cross-platform npm installation for macOS architectures\nDESCRIPTION: Commands to install Sharp for both Intel x64 and ARM64 macOS architectures using npm flags to support multiple platforms in the same installation.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --cpu=x64 --os=darwin sharp\nnpm install --cpu=arm64 --os=darwin sharp\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline Colourspace and Output Colourspace in Sharp\nDESCRIPTION: This snippet demonstrates how to set the pipeline colourspace to 16-bit RGB and the output colourspace to 8-bit sRGB using Sharp.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-colour.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp(input)\n .pipelineColourspace('rgb16')\n .toColourspace('srgb')\n .toFile('16bpc-pipeline-to-8bpc-output.png')\n```\n\n----------------------------------------\n\nTITLE: Setting ICC Profile in Sharp\nDESCRIPTION: Transforms the image using an ICC profile and attaches it to the output image. Can use either an absolute filesystem path or built-in profile name (srgb, p3, cmyk).\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputWithP3 = await sharp(input)\n  .withIccProfile('p3')\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Running Sharp with Deno\nDESCRIPTION: Command to run Sharp in a Deno environment with FFI permissions enabled.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndeno run --allow-ffi ...\n```\n\n----------------------------------------\n\nTITLE: Basic Image Trimming with Sharp\nDESCRIPTION: Demonstrates basic image trimming functionality that removes edges with colors similar to the top-left pixel.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Trim pixels with a colour similar to that of the top-left pixel.\nawait sharp(input)\n  .trim()\n  .toFile(output);\n```\n\n----------------------------------------\n\nTITLE: Generating Gaussian Noise Image using Sharp\nDESCRIPTION: Creates an RGB image filled with Gaussian noise, specifying dimensions and noise parameters.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-constructor.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait sharp({\n  create: {\n    width: 300,\n    height: 200,\n    channels: 3,\n    noise: {\n      type: 'gaussian',\n      mean: 128,\n      sigma: 30\n    }\n }\n}).toFile('noise.png');\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp with yarn\nDESCRIPTION: Command to install the Sharp image processing module using yarn package manager.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add sharp\n```\n\n----------------------------------------\n\nTITLE: Line Art Image Trimming with Custom Background\nDESCRIPTION: Demonstrates trimming for line art images with a specified background color (red) and line art optimization enabled.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = await sharp(input)\n  .trim({\n    background: \"#FF0000\",\n    lineArt: true\n  })\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Forcing Output Format in Sharp\nDESCRIPTION: Forces the output to a specific image format regardless of input format. Accepts format as a string or an object with an 'id' attribute, plus additional format-specific options.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert any input to PNG output\nconst data = await sharp(input)\n  .toFormat('png')\n  .toBuffer();\n```\n\n----------------------------------------\n\nTITLE: Installing vips package on FreeBSD\nDESCRIPTION: Commands to install the vips package on FreeBSD, which is a prerequisite before installing Sharp.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npkg install -y pkgconf vips\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd /usr/ports/graphics/vips/ && make install clean\n```\n\n----------------------------------------\n\nTITLE: Computing Statistics on Image Region\nDESCRIPTION: Shows how to calculate statistics on a specific region of an image by first extracting the region and creating a new Sharp instance.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-input.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = sharp(input);\n// store intermediate result\nconst part = await image.extract(region).toBuffer();\n// create new instance to obtain statistics of extracted region\nconst stats = await sharp(part).stats();\n```\n\n----------------------------------------\n\nTITLE: Precise Image Trimming with Zero Threshold\nDESCRIPTION: Shows how to trim pixels that exactly match the color of the top-left pixel by setting threshold to 0.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Trim pixels with the exact same colour as that of the top-left pixel.\nawait sharp(input)\n  .trim({\n    threshold: 0\n  })\n  .toFile(output);\n```\n\n----------------------------------------\n\nTITLE: Adding Colored Border to Image Bottom in Sharp\nDESCRIPTION: Extends an image by adding a colored border to one side. This example adds a row of red pixels to the bottom edge of the image.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-resize.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a row of 10 red pixels to the bottom\nsharp(input)\n  .extend({\n    bottom: 10,\n    background: 'red'\n  })\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting Processing Timeout in Sharp\nDESCRIPTION: Example of setting a 3-second timeout for image processing operations. Includes error handling for timeout scenarios.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-output.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Ensure processing takes no longer than 3 seconds\ntry {\n  const data = await sharp(input)\n    .blur(1000)\n    .timeout({ seconds: 3 })\n    .toBuffer();\n} catch (err) {\n  if (err.message.includes('timeout')) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp with npm\nDESCRIPTION: Command to install the Sharp image processing module using npm. Requires package manager to be configured to install optional dependencies.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install sharp\n```\n\n----------------------------------------\n\nTITLE: Controlling Sharp Concurrency\nDESCRIPTION: Demonstrates how to get and set the concurrency level for image processing.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst threads = sharp.concurrency(); // 4\nsharp.concurrency(2); // 2\nsharp.concurrency(0); // 4\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp via npm\nDESCRIPTION: Command to install Sharp using npm package manager.\nSOURCE: https://github.com/lovell/sharp/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install sharp\n```\n\n----------------------------------------\n\nTITLE: Managing Sharp Cache Settings\nDESCRIPTION: Examples of getting cache statistics and modifying cache settings.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst stats = sharp.cache();\n\nsharp.cache( { items: 200 } );\nsharp.cache( { files: 0 } );\nsharp.cache(false);\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp with bun\nDESCRIPTION: Command to install the Sharp image processing module using bun package manager.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add sharp\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Counters\nDESCRIPTION: Shows how to access internal task counters for queue and process monitoring.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/api-utility.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst counters = sharp.counters(); // { queue: 2, process: 4 }\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp with pnpm\nDESCRIPTION: Command to install the Sharp image processing module using pnpm. May require additional configuration to ignore built dependencies.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add sharp\n```\n\n----------------------------------------\n\nTITLE: Installing Sharp for WebAssembly\nDESCRIPTION: Command to install Sharp with WebAssembly support for environments that provide multi-threaded Wasm via Workers. Web browser use is unsupported.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --cpu=wasm32 sharp\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack to exclude Sharp from bundling\nDESCRIPTION: Configuration to exclude Sharp from webpack bundling using the externals option. Necessary to avoid issues with native modules.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexternals: {\n  'sharp': 'commonjs sharp'\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-platform npm installation for Linux with different C libraries\nDESCRIPTION: Commands to install Sharp for Linux with Intel x64 CPUs targeting both glibc (Debian) and musl (Alpine) C standard libraries.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --cpu=x64 --os=linux --libc=glibc sharp\nnpm install --cpu=x64 --os=linux --libc=musl sharp\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite to exclude Sharp from bundling\nDESCRIPTION: JavaScript configuration for Vite to exclude Sharp from bundling using the build.rollupOptions.external configuration.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      external: [\n        \"sharp\"\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring esbuild to exclude Sharp via CLI\nDESCRIPTION: Command line configuration for esbuild to exclude Sharp from bundling using the --external flag.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nesbuild app.js --bundle --platform=node --external:sharp\n```\n\n----------------------------------------\n\nTITLE: Configuring electron-forge to unpack Sharp from ASAR\nDESCRIPTION: JSON configuration for electron-forge to unpack Sharp from the ASAR archive file, necessary for native modules to function properly.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packagerConfig\": {\n    \"asar\": {\n      \"unpack\": \"**/node_modules/{sharp,@img}/**/*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring esbuild to exclude Sharp via API\nDESCRIPTION: JavaScript configuration for esbuild to exclude Sharp from bundling using the buildSync API with the external option.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nbuildSync({\n  entryPoints: ['app.js'],\n  bundle: true,\n  platform: 'node',\n  external: ['sharp'],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing node-addon-api and node-gyp for building from source\nDESCRIPTION: Command to install dependencies required for building Sharp from source when prebuilt binaries are not available.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save node-addon-api node-gyp\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: A series of markdown-formatted changelog entries documenting changes to the Sharp image processing library across multiple versions. Includes contributor attributions, issue/PR references, and version numbers with dates.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### v0.14.1 - 16<sup>th</sup> April 2016\n\n* Allow removal of limitation on input pixel count via limitInputPixels. Use with care.\n  [#250](https://github.com/lovell/sharp/issues/250)\n  [#316](https://github.com/lovell/sharp/pull/316)\n  [@anandthakker](https://github.com/anandthakker)\n  [@kentongray](https://github.com/kentongray)\n\n* Use final output image for metadata passed to callback.\n  [#399](https://github.com/lovell/sharp/pull/399)\n  [@salzhrani](https://github.com/salzhrani)\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the entire site and specifies the XML sitemap location at sharp.pixelplumbing.com.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n\nSitemap: https://sharp.pixelplumbing.com/sitemap-index.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring serverless-esbuild for platform-specific binaries\nDESCRIPTION: YAML configuration for serverless-esbuild to exclude Sharp from bundling and install platform-specific binaries via the packagerOptions.\nSOURCE: https://github.com/lovell/sharp/blob/main/docs/src/content/docs/install.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  esbuild:\n    external:\n      - sharp\n    packagerOptions:\n      scripts:\n        - npm install --os=linux --cpu=x64 sharp\n```\n\n----------------------------------------\n\nTITLE: Resizing Image with Callback in Sharp\nDESCRIPTION: Example of using Sharp to resize an image and save it as a WebP file using a callback function.\nSOURCE: https://github.com/lovell/sharp/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsharp(inputBuffer)\n  .resize(320, 240)\n  .toFile('output.webp', (err, info) => { ... });\n```"
  }
]