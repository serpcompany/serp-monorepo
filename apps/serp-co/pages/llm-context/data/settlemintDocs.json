[
  {
    "owner": "settlemint",
    "repo": "docs",
    "content": "TITLE: Implementing Basic Chaincode Structure in Go\nDESCRIPTION: Shows the fundamental structure of a Hyperledger Fabric chaincode implementation in Go, including the smart contract struct definition and an InitLedger function that serves as an initialization point.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/hyperledger/fabric-contract-api-go/contractapi\"\n)\n\ntype SmartContract struct {\n    contractapi.Contract\n}\n\nfunc (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error {\n    // Initialization logic\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Developing Hello World Smart Contract in Hyperledger Fabric Go Chaincode\nDESCRIPTION: Implementation of a simple Hello World smart contract in Go for Hyperledger Fabric. The contract defines a Message structure and two functions: InitLedger to initialize the ledger state and UpdateMessage to modify the message value.\n\nLANGUAGE: go\nCODE:\n```\ntype HelloWorldContract struct {\n    contractapi.Contract\n}\n\ntype Message struct {\n    Text string `json:\"text\"`\n}\n\nfunc (c *HelloWorldContract) InitLedger(ctx contractapi.TransactionContextInterface) error {\n    return ctx.GetStub().PutState(\"message\", []byte(`{\"text\":\"Hello Fabric!\"}`))  \n}\n\nfunc (c *HelloWorldContract) UpdateMessage(ctx contractapi.TransactionContextInterface, newMsg string) error {\n    msg := Message{Text: newMsg}\n    data, _ := json.Marshal(msg)\n    return ctx.GetStub().PutState(\"message\", data)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserData Smart Contract in Solidity for Profile Management\nDESCRIPTION: A complete Solidity smart contract for managing user profiles with CRUD operations and event emissions for off-chain indexing. The contract defines a UserProfile struct, maintains a mapping of user IDs to profiles, and implements functions for creating, updating, retrieving, and soft-deleting user profiles.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/**\n * @title UserData\n * @notice This contract manages user profiles through create, update, and delete operations.\n * It emits events for each operation to enable off-chain indexing and notifications.\n */\ncontract UserData {\n\n    // ===================================================\n    // Section 1: Structs\n    // ===================================================\n\n    /**\n     * @notice Struct 1.1: Represents a user's profile.\n     * @param name Full name of the user.\n     * @param email Email address of the user.\n     * @param age Age of the user.\n     * @param country Country of residence.\n     * @param isKYCApproved Boolean flag indicating if KYC has been approved.\n     * @param isDeleted Boolean flag indicating if the profile is soft-deleted.\n     */\n    struct UserProfile {\n        string name;\n        string email;\n        uint8 age;\n        string country;\n        bool isKYCApproved;\n        bool isDeleted;\n    }\n\n    // ===================================================\n    // Section 2: Storage\n    // ===================================================\n\n    /**\n     * @notice Storage 2.1: Mapping from a unique user ID to a user profile.\n     */\n    mapping(uint256 => UserProfile) public profiles;\n\n    // ===================================================\n    // Section 3: Events\n    // ===================================================\n\n    /**\n     * @notice Event 3.1: Emitted when a new profile is created.\n     * @dev Emits full profile details for indexing by off-chain systems.\n     * @param userId The unique identifier for the user.\n     * @param name The user's full name.\n     * @param email The user's email address.\n     * @param age The user's age.\n     * @param country The user's country of residence.\n     * @param isKYCApproved Whether the user is KYC approved.\n     */\n    event ProfileCreated(\n        uint256 indexed userId,\n        string name,\n        string email,\n        uint8 age,\n        string country,\n        bool isKYCApproved\n    );\n\n    /**\n     * @notice Event 3.2: Emitted when an existing profile is updated.\n     * @dev Emits updated profile details for indexing by off-chain systems.\n     * @param userId The unique identifier for the user.\n     * @param name The updated full name.\n     * @param email The updated email address.\n     * @param age The updated age.\n     * @param country The updated country.\n     * @param isKYCApproved The updated KYC approval status.\n     */\n    event ProfileUpdated(\n        uint256 indexed userId,\n        string name,\n        string email,\n        uint8 age,\n        string country,\n        bool isKYCApproved\n    );\n\n    /**\n     * @notice Event 3.3: Emitted when a profile is soft-deleted.\n     * @param userId The unique identifier for the user.\n     */\n    event ProfileDeleted(uint256 indexed userId);\n\n    // ===================================================\n    // Section 4: Functions\n    // ===================================================\n\n    /**\n     * @notice Function 4.1: Creates a new user profile.\n     * @dev The function reverts if a profile already exists for the given userId (unless it's soft-deleted).\n     * @param userId Unique identifier for the user.\n     * @param name The user's full name.\n     * @param email The user's email address.\n     * @param age The user's age.\n     * @param country The user's country of residence.\n     * @param isKYCApproved Boolean flag indicating if KYC is approved.\n     */\n    function createProfile(\n        uint256 userId,\n        string memory name,\n        string memory email,\n        uint8 age,\n        string memory country,\n        bool isKYCApproved\n    ) public {\n        // 4.1.1 Allow creation if profile is soft-deleted or does not exist (empty name indicates non-existence)\n        require(\n            profiles[userId].isDeleted || bytes(profiles[userId].name).length == 0,\n            \"Profile already exists\"\n        );\n\n        // 4.1.2 Create and store the new profile\n        profiles[userId] = UserProfile({\n            name: name,\n            email: email,\n            age: age,\n            country: country,\n            isKYCApproved: isKYCApproved,\n            isDeleted: false\n        });\n\n        // 4.1.3 Emit full profile data so off-chain indexers like The Graph can index it\n        emit ProfileCreated(userId, name, email, age, country, isKYCApproved);\n    }\n\n    /**\n     * @notice Function 4.2: Updates an existing user profile.\n     * @dev Reverts if the profile does not exist or has been soft-deleted.\n     * @param userId Unique identifier for the user.\n     * @param name New full name for the user.\n     * @param email New email address for the user.\n     * @param age New age for the user.\n     * @param country New country of residence for the user.\n     * @param isKYCApproved New KYC approval status.\n     */\n    function updateProfile(\n        uint256 userId,\n        string memory name,\n        string memory email,\n        uint8 age,\n        string memory country,\n        bool isKYCApproved\n    ) public {\n        // 4.2.1 Ensure the profile exists and is not deleted\n        require(\n            bytes(profiles[userId].name).length > 0 && !profiles[userId].isDeleted,\n            \"Profile does not exist or has been deleted\"\n        );\n\n        // 4.2.2 Update the profile with new details\n        profiles[userId] = UserProfile({\n            name: name,\n            email: email,\n            age: age,\n            country: country,\n            isKYCApproved: isKYCApproved,\n            isDeleted: false\n        });\n\n        // 4.2.3 Emit updated full profile data so subgraph can index changes\n        emit ProfileUpdated(userId, name, email, age, country, isKYCApproved);\n    }\n\n    /**\n     * @notice Function 4.3: Retrieves the profile of a given user.\n     * @dev Reverts if the profile has been soft-deleted or does not exist.\n     * @param userId Unique identifier for the user.\n     * @return The UserProfile struct containing the user's information.\n     */\n    function getProfile(uint256 userId) public view returns (UserData.UserProfile memory) {\n        // 4.3.1 Ensure the profile exists (not soft-deleted)\n        require(!profiles[userId].isDeleted, \"Profile not found or has been deleted\");\n        return profiles[userId];\n    }\n\n    /**\n     * @notice Function 4.4: Soft-deletes a user profile.\n     * @dev Marks a profile as deleted without removing its data, reverting if the profile doesn't exist or is already deleted.\n     * @param userId Unique identifier for the user.\n     */\n    function deleteProfile(uint256 userId) public {\n        // 4.4.1 Ensure that the profile exists and is not already deleted\n        require(\n            bytes(profiles[userId].name).length > 0 && !profiles[userId].isDeleted,\n            \"Profile already deleted or doesn't exist\"\n        );\n\n        // 4.4.2 Soft-delete the profile by setting its isDeleted flag to true\n        profiles[userId].isDeleted = true;\n\n        // 4.4.3 Emit event to notify that the profile has been deleted\n        emit ProfileDeleted(userId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dispute Resolution with Attestation Revocation in Solidity\nDESCRIPTION: A function that allows authorized dispute resolvers to resolve disputes for IP assets. The function can optionally revoke the asset's attestation through the Ethereum Attestation Service (EAS) if the dispute resolution requires it.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction resolveDispute(\n    uint256 assetId,\n    string memory resolution,\n    bool revokeAttestation\n) external whenNotPaused nonReentrant onlyRole(DISPUTE_RESOLVER_ROLE) {\n    IPAsset storage asset = ipAssets[assetId];\n    require(asset.id != 0, \"Asset does not exist\");\n    require(asset.disputeFiled, \"No dispute filed\");\n    require(!asset.disputeResolved, \"Dispute already resolved\");\n\n    asset.disputeResolved = true;\n    asset.disputeResolution = resolution;\n\n    // If required, revoke the attestation through EAS.\n    if (revokeAttestation && asset.attestationId != 0) {\n        // Prepare revocation data with resolution details.\n        bytes memory revocationData = abi.encode(assetId, resolution, block.timestamp);\n        bool success = eas.revoke(asset.attestationId, revocationData);\n        require(success, \"Attestation revocation failed\");\n        asset.attestationId = 0;\n    }\n\n    emit DisputeResolved(assetId, resolution);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CBDC Smart Contract in Hyperledger Fabric with Go\nDESCRIPTION: A complete chaincode implementation for a Central Bank Digital Currency (CBDC) system on Hyperledger Fabric. It defines account structures, role-based access control, transaction validation, and core CBDC operations including token issuance, burning, transfers, and account management. This code is for educational purposes only and requires significant enhancement for production use.\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/hyperledger/fabric-contract-api-go/contractapi\"\n)\n\n// Regex pattern for account ID validation\nvar idPattern = regexp.MustCompile(`^[a-zA-Z0-9_.-]{4,64}$`)\n\nconst (\n\tRoleCentralBank     = \"centralbank\"\n\tRoleRetailBank      = \"retailbank\"\n\tRoleAuditor         = \"auditor\"\n\tRetailTransferCap   = 100000\n\tMultisigThreshold   = 500000\n)\n\n// CBDCContract defines the chaincode structure\ntype CBDCContract struct {\n\tcontractapi.Contract\n}\n\n// Account represents a CBDC wallet\ntype Account struct {\n\tOwner      string            `json:\"owner\"`\n\tBalance    uint64            `json:\"balance\"`\n\tCreatedAt  string            `json:\"createdAt\"`\n\tLastActive string            `json:\"lastActive\"`\n\tFrozen     bool              `json:\"frozen\"`\n\tTags       map[string]string `json:\"tags\"`\n\tHistory    []TransactionLog  `json:\"history\"`\n}\n\n// TransactionLog stores audit trails for an account\ntype TransactionLog struct {\n\tAction       string `json:\"action\"`\n\tAmount       uint64 `json:\"amount,omitempty\"`\n\tCounterparty string `json:\"counterparty,omitempty\"`\n\tTimestamp    string `json:\"timestamp\"`\n\tInitiator    string `json:\"initiator\"`\n}\n\n// Role mapping from MSP ID\nfunc getRoleFromMSP(msp string) string {\n\tswitch strings.ToLower(msp) {\n\tcase \"centralbankmsp\":\n\t\treturn RoleCentralBank\n\tcase \"retailbankmsp\":\n\t\treturn RoleRetailBank\n\tcase \"auditormsp\":\n\t\treturn RoleAuditor\n\tdefault:\n\t\treturn \"\"\n\t}\n}\n\n// Role-based access control\nfunc (c *CBDCContract) hasRole(ctx contractapi.TransactionContextInterface, allowedRoles ...string) bool {\n\tmspID, err := ctx.GetClientIdentity().GetMSPID()\n\tif err != nil {\n\t\treturn false\n\t}\n\trole := getRoleFromMSP(mspID)\n\tfor _, r := range allowedRoles {\n\t\tif r == role {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Enforce transfer caps for retail banks\nfunc (c *CBDCContract) enforceTransactionCap(ctx contractapi.TransactionContextInterface, amount uint64) error {\n\tmspID, err := ctx.GetClientIdentity().GetMSPID()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to determine MSPID\")\n\t}\n\trole := getRoleFromMSP(mspID)\n\tif role == RoleRetailBank && amount > RetailTransferCap {\n\t\treturn fmt.Errorf(\"transfer amount exceeds retail bank cap of %d\", RetailTransferCap)\n\t}\n\treturn nil\n}\n\n// If multisig approval is needed\nfunc (c *CBDCContract) multisigApprovalRequired(amount uint64) bool {\n\treturn amount > MultisigThreshold\n}\n\n// Stub for future multisig enforcement\nfunc (c *CBDCContract) verifyMultisigApproval(ctx contractapi.TransactionContextInterface, txID string) error {\n\treturn nil // To be implemented\n}\n\n// Account ID validation\nfunc validateID(id string) error {\n\tif !idPattern.MatchString(id) {\n\t\treturn fmt.Errorf(\"invalid account ID format\")\n\t}\n\treturn nil\n}\n\n// Create or load account, and persist if new\nfunc (c *CBDCContract) getOrCreateAccount(ctx contractapi.TransactionContextInterface, id string) (*Account, error) {\n\ta, err := c.getAccount(ctx, id)\n\tif err == nil {\n\t\treturn a, nil\n\t}\n\tts, _ := ctx.GetStub().GetTxTimestamp()\n\ttimestamp := time.Unix(ts.Seconds, int64(ts.Nanos)).Format(time.RFC3339)\n\tnewAccount := &Account{\n\t\tOwner:      id,\n\t\tBalance:    0,\n\t\tCreatedAt:  timestamp,\n\t\tLastActive: timestamp,\n\t\tFrozen:     false,\n\t\tTags:       make(map[string]string),\n\t\tHistory:    []TransactionLog{},\n\t}\n\tif err := c.saveAccount(ctx, id, newAccount); err != nil {\n\t\treturn nil, err\n\t}\n\treturn newAccount, nil\n}\n\n// Load existing account from state\nfunc (c *CBDCContract) getAccount(ctx contractapi.TransactionContextInterface, id string) (*Account, error) {\n\tdata, err := ctx.GetStub().GetState(id)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif data == nil {\n\t\treturn nil, fmt.Errorf(\"account not found\")\n\t}\n\tvar acc Account\n\tif err := json.Unmarshal(data, &acc); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &acc, nil\n}\n\n// Persist account to world state\nfunc (c *CBDCContract) saveAccount(ctx contractapi.TransactionContextInterface, id string, acc *Account) error {\n\tdata, err := json.Marshal(acc)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn ctx.GetStub().PutState(id, data)\n}\n\n// Get client identity\nfunc (c *CBDCContract) GetInvoker(ctx contractapi.TransactionContextInterface) (string, error) {\n\tid, err := ctx.GetClientIdentity().GetID()\n\tif err != nil || id == \"\" {\n\t\treturn \"\", fmt.Errorf(\"unable to retrieve or validate invoker ID\")\n\t}\n\treturn id, nil\n}\n\n// Central bank can issue tokens\nfunc (c *CBDCContract) IssueTokens(ctx contractapi.TransactionContextInterface, recipient string, amount uint64) error {\n\tif !c.hasRole(ctx, RoleCentralBank) {\n\t\treturn fmt.Errorf(\"only central bank can issue tokens\")\n\t}\n\tif err := validateID(recipient); err != nil {\n\t\treturn err\n\t}\n\tif amount == 0 {\n\t\treturn fmt.Errorf(\"amount must be greater than zero\")\n\t}\n\tinvoker, err := c.GetInvoker(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\taccount, err := c.getOrCreateAccount(ctx, recipient)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif account.Frozen {\n\t\treturn fmt.Errorf(\"account is frozen\")\n\t}\n\tts, _ := ctx.GetStub().GetTxTimestamp()\n\ttimestamp := time.Unix(ts.Seconds, int64(ts.Nanos)).Format(time.RFC3339)\n\taccount.Balance += amount\n\taccount.LastActive = timestamp\n\taccount.History = append(account.History, TransactionLog{\"ISSUE\", amount, recipient, timestamp, invoker})\n\tif err := c.saveAccount(ctx, recipient, account); err != nil {\n\t\treturn err\n\t}\n\treturn ctx.GetStub().SetEvent(\"TokensIssued\", []byte(fmt.Sprintf(\"%s:%d\", recipient, amount)))\n}\n\n// Central bank can burn tokens\nfunc (c *CBDCContract) BurnTokens(ctx contractapi.TransactionContextInterface, account string, amount uint64) error {\n\tif !c.hasRole(ctx, RoleCentralBank) {\n\t\treturn fmt.Errorf(\"only central bank can burn tokens\")\n\t}\n\tif err := validateID(account); err != nil {\n\t\treturn err\n\t}\n\tif amount == 0 {\n\t\treturn fmt.Errorf(\"amount must be greater than zero\")\n\t}\n\tinvoker, err := c.GetInvoker(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\ta, err := c.getAccount(ctx, account)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif a.Frozen {\n\t\treturn fmt.Errorf(\"account is frozen\")\n\t}\n\tif a.Balance < amount {\n\t\treturn fmt.Errorf(\"insufficient balance\")\n\t}\n\tts, _ := ctx.GetStub().GetTxTimestamp()\n\ttimestamp := time.Unix(ts.Seconds, int64(ts.Nanos)).Format(time.RFC3339)\n\ta.Balance -= amount\n\ta.LastActive = timestamp\n\ta.History = append(a.History, TransactionLog{\"BURN\", amount, \"\", timestamp, invoker})\n\tif err := c.saveAccount(ctx, account, a); err != nil {\n\t\treturn err\n\t}\n\treturn ctx.GetStub().SetEvent(\"TokensBurned\", []byte(fmt.Sprintf(\"%s:%d\", account, amount)))\n}\n\n// Freeze an account\nfunc (c *CBDCContract) FreezeAccount(ctx contractapi.TransactionContextInterface, account string) error {\n\tif !c.hasRole(ctx, RoleCentralBank) {\n\t\treturn fmt.Errorf(\"only central bank can freeze accounts\")\n\t}\n\ta, err := c.getAccount(ctx, account)\n\tif err != nil {\n\t\treturn err\n\t}\n\ta.Frozen = true\n\treturn c.saveAccount(ctx, account, a)\n}\n\n// Unfreeze an account\nfunc (c *CBDCContract) UnfreezeAccount(ctx contractapi.TransactionContextInterface, account string) error {\n\tif !c.hasRole(ctx, RoleCentralBank) {\n\t\treturn fmt.Errorf(\"only central bank can unfreeze accounts\")\n\t}\n\ta, err := c.getAccount(ctx, account)\n\tif err != nil {\n\t\treturn err\n\t}\n\ta.Frozen = false\n\treturn c.saveAccount(ctx, account, a)\n}\n\n// Get account balance with no access control (can be restricted further)\nfunc (c *CBDCContract) GetBalance(ctx contractapi.TransactionContextInterface, account string) (uint64, error) {\n\ta, err := c.getAccount(ctx, account)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn a.Balance, nil\n}\n\n// Get transaction history\nfunc (c *CBDCContract) GetHistory(ctx contractapi.TransactionContextInterface, account string) ([]TransactionLog, error) {\n\ta, err := c.getAccount(ctx, account)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn a.History, nil\n}\n\n// Get account tags\nfunc (c *CBDCContract) GetTags(ctx contractapi.TransactionContextInterface, account string) (map[string]string, error) {\n\ta, err := c.getAccount(ctx, account)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn a.Tags, nil\n}\n\n// Admin can tag accounts\nfunc (c *CBDCContract) AdminAddTag(ctx contractapi.TransactionContextInterface, account, key, value string) error {\n\tif !c.hasRole(ctx, RoleCentralBank) {\n\t\treturn fmt.Errorf(\"only central bank can tag accounts\")\n\t}\n\tif len(key) > 32 || len(value) > 64 {\n\t\treturn fmt.Errorf(\"tag key/value too long\")\n\t}\n\ta, err := c.getAccount(ctx, account)\n\tif err != nil {\n\t\treturn err\n\t}\n\ta.Tags[key] = value\n\treturn c.saveAccount(ctx, account, a)\n}\n\n// Chaincode entry point\nfunc main() {\n\tchaincode, err := contractapi.NewChaincode(new(CBDCContract))\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Error creating CBDC chaincode: %v\", err))\n\t}\n\tif err := chaincode.Start(); err != nil {\n\t\tpanic(fmt.Sprintf(\"Error starting CBDC chaincode: %v\", err))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserData Smart Contract in Solidity\nDESCRIPTION: This snippet provides a complete implementation of a UserData smart contract that manages user profiles through create, update, retrieve, and delete operations. It defines a UserProfile struct with user information, stores profiles in a mapping, emits events for off-chain indexing, and implements functions for profile management. The contract uses soft-deletion to maintain data history.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/**\n * @title UserData\n * @notice This contract manages user profiles through create, update, and delete operations.\n * It emits events for each operation to enable off-chain indexing and notifications.\n */\ncontract UserData {\n\n    // ===================================================\n    // Section 1: Structs\n    // ===================================================\n\n    /**\n     * @notice Struct 1.1: Represents a user's profile.\n     * @param name Full name of the user.\n     * @param email Email address of the user.\n     * @param age Age of the user.\n     * @param country Country of residence.\n     * @param isKYCApproved Boolean flag indicating if KYC has been approved.\n     * @param isDeleted Boolean flag indicating if the profile is soft-deleted.\n     */\n    struct UserProfile {\n        string name;\n        string email;\n        uint8 age;\n        string country;\n        bool isKYCApproved;\n        bool isDeleted;\n    }\n\n    // ===================================================\n    // Section 2: Storage\n    // ===================================================\n\n    /**\n     * @notice Storage 2.1: Mapping from a unique user ID to a user profile.\n     */\n    mapping(uint256 => UserProfile) public profiles;\n\n    // ===================================================\n    // Section 3: Events\n    // ===================================================\n\n    /**\n     * @notice Event 3.1: Emitted when a new profile is created.\n     * @dev Emits full profile details for indexing by off-chain systems.\n     * @param userId The unique identifier for the user.\n     * @param name The user's full name.\n     * @param email The user's email address.\n     * @param age The user's age.\n     * @param country The user's country of residence.\n     * @param isKYCApproved Whether the user is KYC approved.\n     */\n    event ProfileCreated(\n        uint256 indexed userId,\n        string name,\n        string email,\n        uint8 age,\n        string country,\n        bool isKYCApproved\n    );\n\n    /**\n     * @notice Event 3.2: Emitted when an existing profile is updated.\n     * @dev Emits updated profile details for indexing by off-chain systems.\n     * @param userId The unique identifier for the user.\n     * @param name The updated full name.\n     * @param email The updated email address.\n     * @param age The updated age.\n     * @param country The updated country.\n     * @param isKYCApproved The updated KYC approval status.\n     */\n    event ProfileUpdated(\n        uint256 indexed userId,\n        string name,\n        string email,\n        uint8 age,\n        string country,\n        bool isKYCApproved\n    );\n\n    /**\n     * @notice Event 3.3: Emitted when a profile is soft-deleted.\n     * @param userId The unique identifier for the user.\n     */\n    event ProfileDeleted(uint256 indexed userId);\n\n    // ===================================================\n    // Section 4: Functions\n    // ===================================================\n\n    /**\n     * @notice Function 4.1: Creates a new user profile.\n     * @dev The function reverts if a profile already exists for the given userId (unless it's soft-deleted).\n     * @param userId Unique identifier for the user.\n     * @param name The user's full name.\n     * @param email The user's email address.\n     * @param age The user's age.\n     * @param country The user's country of residence.\n     * @param isKYCApproved Boolean flag indicating if KYC is approved.\n     */\n    function createProfile(\n        uint256 userId,\n        string memory name,\n        string memory email,\n        uint8 age,\n        string memory country,\n        bool isKYCApproved\n    ) public {\n        // 4.1.1 Allow creation if profile is soft-deleted or does not exist (empty name indicates non-existence)\n        require(\n            profiles[userId].isDeleted || bytes(profiles[userId].name).length == 0,\n            \"Profile already exists\"\n        );\n\n        // 4.1.2 Create and store the new profile\n        profiles[userId] = UserProfile({\n            name: name,\n            email: email,\n            age: age,\n            country: country,\n            isKYCApproved: isKYCApproved,\n            isDeleted: false\n        });\n\n        // 4.1.3 Emit full profile data so off-chain indexers like The Graph can index it\n        emit ProfileCreated(userId, name, email, age, country, isKYCApproved);\n    }\n\n    /**\n     * @notice Function 4.2: Updates an existing user profile.\n     * @dev Reverts if the profile does not exist or has been soft-deleted.\n     * @param userId Unique identifier for the user.\n     * @param name New full name for the user.\n     * @param email New email address for the user.\n     * @param age New age for the user.\n     * @param country New country of residence for the user.\n     * @param isKYCApproved New KYC approval status.\n     */\n    function updateProfile(\n        uint256 userId,\n        string memory name,\n        string memory email,\n        uint8 age,\n        string memory country,\n        bool isKYCApproved\n    ) public {\n        // 4.2.1 Ensure the profile exists and is not deleted\n        require(\n            bytes(profiles[userId].name).length > 0 && !profiles[userId].isDeleted,\n            \"Profile does not exist or has been deleted\"\n        );\n\n        // 4.2.2 Update the profile with new details\n        profiles[userId] = UserProfile({\n            name: name,\n            email: email,\n            age: age,\n            country: country,\n            isKYCApproved: isKYCApproved,\n            isDeleted: false\n        });\n\n        // 4.2.3 Emit updated full profile data so subgraph can index changes\n        emit ProfileUpdated(userId, name, email, age, country, isKYCApproved);\n    }\n\n    /**\n     * @notice Function 4.3: Retrieves the profile of a given user.\n     * @dev Reverts if the profile has been soft-deleted or does not exist.\n     * @param userId Unique identifier for the user.\n     * @return The UserProfile struct containing the user's information.\n     */\n    function getProfile(uint256 userId) public view returns (UserData.UserProfile memory) {\n        // 4.3.1 Ensure the profile exists (not soft-deleted)\n        require(!profiles[userId].isDeleted, \"Profile not found or has been deleted\");\n        return profiles[userId];\n    }\n\n    /**\n     * @notice Function 4.4: Soft-deletes a user profile.\n     * @dev Marks a profile as deleted without removing its data, reverting if the profile doesn't exist or is already deleted.\n     * @param userId Unique identifier for the user.\n     */\n    function deleteProfile(uint256 userId) public {\n        // 4.4.1 Ensure that the profile exists and is not already deleted\n        require(\n            bytes(profiles[userId].name).length > 0 && !profiles[userId].isDeleted,\n            \"Profile already deleted or doesn't exist\"\n        );\n\n        // 4.4.2 Soft-delete the profile by setting its isDeleted flag to true\n        profiles[userId].isDeleted = true;\n\n        // 4.4.3 Emit event to notify that the profile has been deleted\n        emit ProfileDeleted(userId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Intellectual Property Management Contract with EAS Integration in Solidity\nDESCRIPTION: This contract provides a framework for intellectual property management on the blockchain. It uses OpenZeppelin libraries for access control and security, and integrates with the Ethereum Attestation Service (EAS) for creating immutable attestations of IP assets. The contract includes role-based functionality for registering, verifying, and managing disputes related to IP assets.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// Import OpenZeppelin contracts for security and role management.\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n/// @notice Interface for the Ethereum Attestation Service (EAS)\ninterface IEAS {\n    /**\n     * @notice Creates an attestation.\n     * @param schema The attestation schema identifier.\n     * @param recipient The address receiving the attestation.\n     * @param expirationTime Unix timestamp for expiration (0 for non-expiring).\n     * @param revocable Whether the attestation is revocable.\n     * @param data Encoded attestation data.\n     * @return attestationId The unique identifier for the created attestation.\n     */\n    function attest(\n        bytes32 schema,\n        address recipient,\n        uint256 expirationTime,\n        bool revocable,\n        bytes calldata data\n    ) external payable returns (uint256 attestationId);\n\n    /**\n     * @notice Revokes an attestation.\n     * @param attestationId The identifier of the attestation to revoke.\n     * @param data Encoded revocation data.\n     * @return success A boolean indicating whether revocation was successful.\n     */\n    function revoke(\n        uint256 attestationId,\n        bytes calldata data\n    ) external payable returns (bool success);\n}\n\n/// @title Intellectual Property Management Contract\n/// @notice This contract manages the registration, verification, dispute resolution,\n///         and attestation of intellectual property (IP) assets.\n///         It integrates with the Ethereum Attestation Service (EAS) for immutable proofs.\ncontract IntellectualPropertyManagement is AccessControl, Pausable, ReentrancyGuard {\n    using Counters for Counters.Counter;\n\n    // ====================================================\n    // Role Definitions\n    // ====================================================\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    // Role for addresses authorized to register new IP assets.\n    bytes32 public constant REGISTRAR_ROLE = keccak256(\"REGISTRAR_ROLE\");\n    // Role for verifying IP assets.\n    bytes32 public constant VERIFIER_ROLE = keccak256(\"VERIFIER_ROLE\");\n    // Role for resolving disputes related to IP assets.\n    bytes32 public constant DISPUTE_RESOLVER_ROLE = keccak256(\"DISPUTE_RESOLVER_ROLE\");\n\n    // ====================================================\n    // EAS Integration and Attestation Schema\n    // ====================================================\n    IEAS public eas;\n    // Attestation schema for IP assets; should be set according to the deployed schema.\n    bytes32 public constant IP_ASSET_SCHEMA = keccak256(\n        \"ipAssetSchema(uint256 assetId,string title,string description,string ipfsHash,uint256 registrationTime,address owner)\"\n    );\n\n    // ====================================================\n    // Asset Management Data Structures\n    // ====================================================\n    // Counter to generate unique asset IDs.\n    Counters.Counter private _assetIdCounter;\n\n    /// @notice Structure representing an Intellectual Property asset.\n    struct IPAsset {\n        uint256 id;                // Unique asset identifier.\n        address owner;             // Current owner of the asset.\n        string title;              // Title of the IP asset.\n        string description;        // Detailed description of the asset.\n        string ipfsHash;           // IPFS hash linking to off-chain metadata.\n        uint256 registrationTime;  // Timestamp when the asset was registered.\n        bool verified;             // Verification status by a verifier.\n        uint256 attestationId;     // Attestation ID returned by the EAS.\n        bool disputeFiled;         // Indicates if a dispute has been filed.\n        string disputeDetails;     // Details about the dispute.\n        bool disputeResolved;      // Indicates if the dispute has been resolved.\n        string disputeResolution;  // Outcome or remarks regarding dispute resolution.\n    }\n\n    // Mapping from asset ID to its corresponding IPAsset details.\n    mapping(uint256 => IPAsset) public ipAssets;\n\n    // ====================================================\n    // Events for Off-Chain Tracking and Auditing\n    // ====================================================\n    event AssetRegistered(\n        uint256 indexed assetId,\n        address indexed owner,\n        string title,\n        uint256 registrationTime,\n        uint256 attestationId\n    );\n    event AssetVerified(uint256 indexed assetId, bool verified, string verificationComments);\n    event DisputeFiled(uint256 indexed assetId, address indexed filer, string disputeDetails);\n    event DisputeResolved(uint256 indexed assetId, string resolution);\n    event AssetTransferred(uint256 indexed assetId, address indexed from, address indexed to);\n    event AssetReattested(uint256 indexed assetId, uint256 oldAttestationId, uint256 newAttestationId);\n    event EASAddressUpdated(address indexed newEASAddress);\n\n    // ====================================================\n    // Constructor and Role Setup\n    // ====================================================\n    constructor(address easAddress) {\n        require(easAddress != address(0), \"Invalid EAS address\");\n        // Set up default admin role.\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        // Grant deployer additional roles.\n        _setupRole(REGISTRAR_ROLE, msg.sender);\n        _setupRole(VERIFIER_ROLE, msg.sender);\n        _setupRole(DISPUTE_RESOLVER_ROLE, msg.sender);\n        // Set the EAS contract address.\n        eas = IEAS(easAddress);\n    }\n\n    // ====================================================\n    // IP Asset Registration with EAS Attestation\n    // ====================================================\n\n    /**\n     * @notice Registers a new IP asset and creates an attestation using EAS.\n     * @dev Only accounts with the REGISTRAR_ROLE can register an asset.\n     * @param title The title of the asset (must be non-empty).\n     * @param description A detailed description of the asset.\n     * @param ipfsHash The IPFS hash pointing to off-chain asset metadata.\n     * @return assetId The unique identifier assigned to the registered asset.\n     */\n    function registerAsset(\n        string memory title,\n        string memory description,\n        string memory ipfsHash\n    ) external whenNotPaused nonReentrant onlyRole(REGISTRAR_ROLE) returns (uint256 assetId) {\n        require(bytes(title).length > 0, \"Title is required\");\n        require(bytes(ipfsHash).length > 0, \"IPFS hash is required\");\n\n        // Increment asset counter and assign new asset ID.\n        _assetIdCounter.increment();\n        assetId = _assetIdCounter.current();\n\n        uint256 registrationTime = block.timestamp;\n\n        // Create a new asset record.\n        IPAsset storage asset = ipAssets[assetId];\n        asset.id = assetId;\n        asset.owner = msg.sender;\n        asset.title = title;\n        asset.description = description;\n        asset.ipfsHash = ipfsHash;\n        asset.registrationTime = registrationTime;\n        asset.verified = false;\n        asset.disputeFiled = false;\n        asset.disputeResolved = false;\n\n        // Encode the attestation data per the defined schema.\n        bytes memory attestationData = abi.encode(\n            assetId, \n            title, \n            description, \n            ipfsHash, \n            registrationTime, \n            msg.sender\n        );\n\n        // Create an attestation via the EAS. \n        // Parameters: schema, recipient, expiration (0 means non-expiring), revocable flag, and data.\n        uint256 attestationId = eas.attest(IP_ASSET_SCHEMA, msg.sender, 0, true, attestationData);\n        asset.attestationId = attestationId;\n\n        emit AssetRegistered(assetId, msg.sender, title, registrationTime, attestationId);\n    }\n\n    // ====================================================\n    // Asset Verification and Attestation Update\n    // ====================================================\n\n    /**\n     * @notice Verifies an IP asset.\n     * @dev Only accounts with the VERIFIER_ROLE can call this function.\n     * @param assetId The ID of the asset to verify.\n     * @param isVerified The verification result (true if verified).\n     * @param verificationComments Additional comments regarding the verification.\n     */\n    function verifyAsset(\n        uint256 assetId,\n        bool isVerified,\n        string memory verificationComments\n    ) external whenNotPaused nonReentrant onlyRole(VERIFIER_ROLE) {\n        IPAsset storage asset = ipAssets[assetId];\n        require(asset.id != 0, \"Asset does not exist\");\n\n        asset.verified = isVerified;\n\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin Contracts for Smart Contract Development\nDESCRIPTION: Command to install OpenZeppelin contracts-upgradeable dependency using npm. This package provides base contracts like UUPSUpgradeable, OwnableUpgradeable, and ERC1155SupplyUpgradeable that will be used in the asset tokenization contract.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @openzeppelin/contracts-upgradeable\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Ownership Transfer in Solidity\nDESCRIPTION: A function that allows IP asset owners to transfer ownership to a new address. The function performs security checks to ensure the asset exists, only the current owner can transfer it, and the new owner address is valid.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferAsset(\n    uint256 assetId,\n    address newOwner\n) external whenNotPaused nonReentrant {\n    require(newOwner != address(0), \"New owner address cannot be zero\");\n    IPAsset storage asset = ipAssets[assetId];\n    require(asset.id != 0, \"Asset does not exist\");\n    require(msg.sender == asset.owner, \"Only owner can transfer asset\");\n\n    address previousOwner = asset.owner;\n    asset.owner = newOwner;\n    emit AssetTransferred(assetId, previousOwner, newOwner);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Node-RED Flow for EAS Attestation Implementation\nDESCRIPTION: A full Node-RED flow JSON definition that establishes a workflow for Ethereum Attestation Service integration. The flow includes nodes for configuration setup, schema registration, attestation creation, and verification.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"eas_flow\",\n    \"type\": \"tab\",\n    \"label\": \"EAS attestation flow\",\n    \"disabled\": false,\n    \"info\": \"\"\n  },\n  {\n    \"id\": \"setup_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Inputs: RpcUrl, registry address, EAS address, private key\",\n    \"props\": [\n      {\n        \"p\": \"rpcUrl\",\n        \"v\": \"RPC-URL/API-KEY\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"registryAddress\",\n        \"v\": \"REGISTERY-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"easAddress\",\n        \"v\": \"EAS-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"privateKey\",\n        \"v\": \"PRIVATE-KEY\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 250,\n    \"y\": 120,\n    \"wires\": [[\"setup_function\"]]\n  },\n  {\n    \"id\": \"setup_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup global variables\",\n    \"func\": \"// Initialize provider with specific network parameters\\nconst provider = new ethers.JsonRpcProvider(msg.rpcUrl)\\n\\nconst signer = new ethers.Wallet(msg.privateKey, provider);\\n\\n// Initialize EAS with specific gas settings\\nconst EAS = new eassdk.EAS(msg.easAddress);\\neas.connect(signer);\\n\\n// Store in global context\\nglobal.set('provider', provider);\\nglobal.set('signer', signer);\\nglobal.set('eas', eas);\\nglobal.set('registryAddress', msg.registryAddress);\\n\\nmsg.payload = 'EAS configuration initialized';\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      },\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      }\n    ],\n    \"x\": 580,\n    \"y\": 120,\n    \"wires\": [[\"setup_debug\"]]\n  },\n  {\n    \"id\": \"register_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register schema\",\n    \"props\": [],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 120,\n    \"y\": 260,\n    \"wires\": [[\"register_function\"]]\n  },\n  {\n    \"id\": \"register_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register schema\",\n    \"func\": \"// Get global variables set in init\\nconst signer = global.get('signer');\\nconst registryAddress = global.get('registryAddress');\\n\\n// Initialize SchemaRegistry contract\\nconst schemaRegistry = new ethers.Contract(\\n    registryAddress,\\n    [\\n        \\\"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\\\",\\n        \\\"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\\\"\\n    ],\\n    signer\\n);\\n\\n// Define what data fields our attestations will contain\\nconst schema = \\\"string username, string platform, string handle\\\";\\nconst resolverAddress = \\\"0x0000000000000000000000000000000000000000\\\";  // No special validation needed\\nconst revocable = true;  // Attestations can be revoked if needed\\n\\ntry {\\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\\n    const receipt = await tx.wait();\\n\\n    const schemaUID = receipt.logs[0].topics[1];\\n    // Store schemaUID in global context for later use\\n    global.set('schemaUID', schemaUID);\\n\\n    msg.payload = {\\n        success: true,\\n        schemaUID: schemaUID,\\n        message: \\\"Schema registered successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 310,\n    \"y\": 260,\n    \"wires\": [[\"register_debug\"]]\n  },\n  {\n    \"id\": \"create_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: schema uid\",\n    \"props\": [\n      {\n        \"p\": \"schemaUID\",\n        \"v\": \"SCHEMA-UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 130,\n    \"y\": 400,\n    \"wires\": [[\"create_function\"]]\n  },\n  {\n    \"id\": \"create_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create attestation\",\n    \"func\": \"// Get global variables\\nconst EAS = global.get('eas');\\nconst schemaUID = msg.schemaUID;\\n\\n// Create an encoder that matches our schema structure\\nconst schemaEncoder = new eassdk.SchemaEncoder(\\\"string username, string platform, string handle\\\");\\n\\n// The actual data we want to attest to\\nconst attestationData = [\\n    { name: \\\"username\\\", value: \\\"awesome_developer\\\", type: \\\"string\\\" },\\n    { name: \\\"platform\\\", value: \\\"GitHub\\\", type: \\\"string\\\" },\\n    { name: \\\"handle\\\", value: \\\"@devmaster\\\", type: \\\"string\\\" }\\n];\\n\\ntry {\\n    // Convert our data into the format EAS expects\\n    const encodedData = schemaEncoder.encodeData(attestationData);\\n\\n    // Create the attestation\\n    const tx = await eas.attest({\\n        schema: schemaUID,\\n        data: {\\n            recipient: \\\"0x0000000000000000000000000000000000000000\\\",  // Public attestation\\n            expirationTime: 0,              // Never expires\\n            revocable: true,                // Can be revoked later if needed\\n            data: encodedData              // Our encoded attestation data\\n        }\\n    });\\n\\n    // Wait for confirmation and get the result\\n    const receipt = await tx.wait();\\n\\n    // Store attestation UID for later verification\\n    global.set('attestationUID', receipt.attestationUID);\\n\\n    msg.payload = {\\n        success: true,\\n        attestationUID: receipt,\\n        message: \\\"Attestation created successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 330,\n    \"y\": 400,\n    \"wires\": [[\"create_debug\"]]\n  },\n  {\n    \"id\": \"verify_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: attestation UID\",\n    \"props\": [\n      {\n        \"p\": \"attestationUID\",\n        \"v\": \"Attestation UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 140,\n    \"y\": 540,\n    \"wires\": [[\"verify_function\"]]\n  },\n  {\n    \"id\": \"verify_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify attestation\",\n    \"func\": \"const EAS = global.get('eas');\\nconst attestationUID = msg.attestationUID;\\n\\ntry {\\n    const attestation = await eas.getAttestation(attestationUID);\\n    const schemaEncoder = new eassdk.SchemaEncoder(\\\"string pshandle, string socialMedia, string socialMediaHandle\\\");\\n    const decodedData = schemaEncoder.decodeData(attestation.data);\\n\\n    msg.payload = {\\n        isValid: !attestation.revoked,\\n        attestation: {\\n            attester: attestation.attester,\\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\\n            expirationTime: attestation.expirationTime > 0 \\n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\\n                : 'Never',\\n            revoked: attestation.revoked\\n        },\\n        data: {\\n            psHandle: decodedData[0].value.toString(),\\n            socialMedia: decodedData[1].value.toString(),\\n            socialMediaHandle: decodedData[2].value.toString()\\n        }\\n    };\\n} catch (error) {\\n    msg.payload = { \\n        success: false, \\n        error: error.message,\\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 350,\n    \"y\": 540,\n    \"wires\": [[\"verify_debug\"]]\n  },\n  {\n    \"id\": \"setup_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 770,\n    \"y\": 120,\n    \"wires\": []\n  },\n  {\n    \"id\": \"register_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 500,\n    \"y\": 260,\n    \"wires\": []\n  },\n  {\n    \"id\": \"create_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 520,\n    \"y\": 400,\n    \"wires\": []\n  },\n  {\n    \"id\": \"verify_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 530,\n    \"y\": 540,\n    \"wires\": []\n  },\n  {\n    \"id\": \"1322bb7438d96baf\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Initialize EAS config\",\n    \"info\": \"\",\n    \"x\": 110,\n    \"y\": 60,\n    \"wires\": []\n  },\n  {\n    \"id\": \"e5e3294119a80c1b\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n\n\n\n```\n\n----------------------------------------\n\nTITLE: EHR Management in Healthcare Blockchain in Solidity\nDESCRIPTION: Function allowing healthcare providers to add electronic health records (EHRs) to a patient's profile. Requires active provider status and patient consent, stores IPFS hash references and document metadata.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addEHR(\n        address patientAddress,\n        string memory ipfsHash,\n        string memory documentType,\n        bytes32 dataHash\n    ) external onlyActiveProvider onlyWithConsent(patientAddress) whenNotPaused nonReentrant {\n        _patientEHRs[patientAddress].push(EHR({\n            ipfsHash: ipfsHash,\n            providerAddress: msg.sender,\n            documentType: documentType,\n            timestamp: block.timestamp,\n            dataHash: dataHash\n        }));\n\n        emit EHRAdded(patientAddress, msg.sender, documentType, ipfsHash);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing National Healthcare System Smart Contract in Solidity\nDESCRIPTION: A comprehensive smart contract for a blockchain-based healthcare system that implements patient registration, provider management, consent handling, electronic health records (EHR), and insurance claims processing. The contract uses OpenZeppelin libraries for security features including access control, pausability, and reentrancy protection.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ncontract NationalHealthcareSystem is\n    Initializable,\n    UUPSUpgradeable,\n    AccessControlUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    // ========== CONSTANTS ==========\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant PROVIDER_ROLE = keccak256(\"PROVIDER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n\n    // ICD-10 code length validation\n    uint256 public constant MIN_DIAGNOSIS_CODE_LENGTH = 3;\n    uint256 public constant MAX_DIAGNOSIS_CODE_LENGTH = 7;\n\n    // ========== STRUCTS ==========\n    struct Patient {\n        address walletAddress;\n        bytes32 nationalIdHash; // SHA-3 hashed national ID\n        bool isActive;\n        uint256 registrationDate;\n        uint256 lastUpdated;\n    }\n\n    struct Provider {\n        string name;\n        string licenseNumber;\n        string providerType; // \"HOSPITAL\"|\"CLINIC\"|\"LAB\"\n        bool isActive;\n        bool isSuspended;\n        uint256 registrationDate;\n        uint256 lastUpdated;\n    }\n\n    struct Consent {\n        address providerAddress;\n        bool isGranted;\n        uint256 grantDate;\n        uint256 revokeDate;\n        string purpose; // \"TREATMENT\"|\"CLAIMS\"|\"RESEARCH\"\n    }\n\n    struct EHR {\n        string ipfsHash;\n        address providerAddress;\n        string documentType; // \"PRESCRIPTION\"|\"LAB_RESULT\"|\"IMAGE\"\n        uint256 timestamp;\n        bytes32 dataHash; // Hash of original data for integrity\n    }\n\n    struct InsuranceClaim {\n        address patientAddress;\n        address providerAddress;\n        string diagnosisCode; // ICD-10\n        uint256 amountRequested;\n        uint256 amountApproved;\n        ClaimStatus status;\n        uint256 submissionDate;\n        uint256 approvalDate;\n        uint256 settlementDate;\n        uint256 denialDate;\n        string denialReason;\n        string[] supportingEHRs; // Supporting EHR documents (e.g., IPFS hashes)\n    }\n\n    enum ClaimStatus {\n        PENDING,\n        APPROVED,\n        DENIED,\n        SETTLED\n    }\n\n    // ========== STATE VARIABLES ==========\n    CountersUpgradeable.Counter private _patientIds;\n    CountersUpgradeable.Counter private _claimIds;\n\n    mapping(uint256 => Patient) private _patients;\n    mapping(address => Provider) private _providers;\n    mapping(address => mapping(address => Consent)) private _consents;\n    mapping(address => EHR[]) private _patientEHRs;\n    mapping(uint256 => InsuranceClaim) private _claims;\n    mapping(bytes32 => bool) private _registeredNationalIds;\n    mapping(address => uint256) private _addressToPatientId;\n    mapping(string => uint256) private _licenseToProviderCount;\n\n    // New: Array to track provider addresses\n    address[] private _providerAddresses;\n\n    // ========== EVENTS ==========\n    event PatientRegistered(uint256 indexed patientId, address indexed walletAddress);\n    event PatientUpdated(uint256 indexed patientId, bool isActive);\n    event ProviderRegistered(address indexed providerAddress, string providerType);\n    event ProviderUpdated(address indexed providerAddress, bool isActive, bool isSuspended);\n    event ConsentGranted(address indexed patientAddress, address indexed providerAddress, string purpose);\n    event ConsentRevoked(address indexed patientAddress, address indexed providerAddress);\n    event EHRAdded(address indexed patientAddress, address indexed providerAddress, string documentType, string ipfsHash);\n    event ClaimSubmitted(uint256 indexed claimId, address indexed patientAddress, string diagnosisCode);\n    event ClaimApproved(uint256 indexed claimId, uint256 amountApproved);\n    event ClaimDenied(uint256 indexed claimId, string reason);\n    event ClaimSettled(uint256 indexed claimId);\n    event EmergencyPaused(address indexed admin);\n    event EmergencyUnpaused(address indexed admin);\n\n    // ========== MODIFIERS ==========\n    modifier onlyActiveProvider() {\n        require(\n            _providers[msg.sender].isActive && !_providers[msg.sender].isSuspended,\n            \"Provider not active\"\n        );\n        _;\n    }\n\n    modifier onlyValidPatient(address patientAddress) {\n        require(_addressToPatientId[patientAddress] != 0, \"Patient not registered\");\n        _;\n    }\n\n    modifier onlyWithConsent(address patientAddress) {\n        require(\n            _consents[patientAddress][msg.sender].isGranted,\n            \"Consent not granted\"\n        );\n        _;\n    }\n\n    modifier validDiagnosisCode(string memory code) {\n        bytes memory codeBytes = bytes(code);\n        require(\n            codeBytes.length >= MIN_DIAGNOSIS_CODE_LENGTH &&\n            codeBytes.length <= MAX_DIAGNOSIS_CODE_LENGTH,\n            \"Invalid diagnosis code\"\n        );\n        _;\n    }\n\n    // ========== INITIALIZATION ==========\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address superAdmin) public initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, superAdmin);\n        _setupRole(ADMIN_ROLE, superAdmin);\n        _setupRole(AUDITOR_ROLE, superAdmin);\n\n        // Increment patient counter so that the first valid patientId is 1\n        _patientIds.increment();\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(newImplementation != address(0), \"Invalid new implementation\");\n    }\n\n    // ========== PATIENT REGISTRY (ENHANCED) ==========\n    function registerPatient(\n        address walletAddress,\n        bytes32 nationalIdHash,\n        bytes calldata governmentSignature\n    ) external onlyRole(ADMIN_ROLE) whenNotPaused nonReentrant {\n        require(!_registeredNationalIds[nationalIdHash], \"Patient already registered\");\n        require(_addressToPatientId[walletAddress] == 0, \"Wallet already registered\");\n        require(_verifyGovernmentSignature(walletAddress, nationalIdHash, governmentSignature), \"Invalid signature\");\n\n        _patientIds.increment();\n        uint256 patientId = _patientIds.current();\n\n        _patients[patientId] = Patient({\n            walletAddress: walletAddress,\n            nationalIdHash: nationalIdHash,\n            isActive: true,\n            registrationDate: block.timestamp,\n            lastUpdated: block.timestamp\n        });\n\n        _registeredNationalIds[nationalIdHash] = true;\n        _addressToPatientId[walletAddress] = patientId;\n\n        emit PatientRegistered(patientId, walletAddress);\n    }\n\n    function updatePatientStatus(uint256 patientId, bool isActive) external onlyRole(ADMIN_ROLE) {\n        require(_patients[patientId].walletAddress != address(0), \"Patient not found\");\n        _patients[patientId].isActive = isActive;\n        _patients[patientId].lastUpdated = block.timestamp;\n\n        emit PatientUpdated(patientId, isActive);\n    }\n\n    // ========== PROVIDER REGISTRY (ENHANCED) ==========\n    function registerProvider(\n        address providerAddress,\n        string memory name,\n        string memory licenseNumber,\n        string memory providerType,\n        bytes calldata accreditationProof\n    ) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        require(!_providerExists(providerAddress), \"Provider already registered\");\n        require(_verifyAccreditation(providerAddress, licenseNumber, providerType, accreditationProof), \"Invalid accreditation\");\n\n        _providers[providerAddress] = Provider({\n            name: name,\n            licenseNumber: licenseNumber,\n            providerType: providerType,\n            isActive: true,\n            isSuspended: false,\n            registrationDate: block.timestamp,\n            lastUpdated: block.timestamp\n        });\n\n        _licenseToProviderCount[licenseNumber]++;\n        _grantRole(PROVIDER_ROLE, providerAddress);\n\n        // Track the provider address for consent lookups\n        _providerAddresses.push(providerAddress);\n\n        emit ProviderRegistered(providerAddress, providerType);\n    }\n\n    function suspendProvider(address providerAddress, bool suspend) external onlyRole(ADMIN_ROLE) {\n        require(_providerExists(providerAddress), \"Provider not found\");\n        _providers[providerAddress].isSuspended = suspend;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute-Based Access Control in Fabric Chaincode\nDESCRIPTION: Go code snippet demonstrating how to implement Attribute-Based Access Control (ABAC) in Hyperledger Fabric chaincode. The code checks if the client has the 'auditor' role attribute and returns an error if the user is unauthorized.\n\nLANGUAGE: go\nCODE:\n```\nval, ok, _ := ctx.GetClientIdentity().GetAttributeValue(\"role\")\nif val != \"auditor\" { return fmt.Errorf(\"unauthorized\") }\n```\n\n----------------------------------------\n\nTITLE: Verifying Attestations using EAS SDK in JavaScript\nDESCRIPTION: JavaScript implementation for verifying attestations using the Ethereum Attestation Service SDK. This code connects to the blockchain, fetches an attestation by its UID, and displays the attestation details including attester, data, and revocation status.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\nconst { EAS } = require(\"@ethereum-attestation-service/eas-sdk\");\n\n// Basic configuration for connecting to the network\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // Network endpoint\n  easAddress: \"YOUR_EAS_CONTRACT_ADDRESS_HERE\", // Main EAS contract\n};\n\nasync function verifyAttestation(attestationUID) {\n  // Setup our blockchain connection\n  const provider = new ethers.JsonRpcProvider(config.rpcUrl);\n  const EAS = new EAS(config.easAddress);\n  eas.connect(provider);\n\n  console.log(\"🔍 Verifying attestation:\", attestationUID);\n\n  // Try to find the attestation on the blockchain\n  const attestation = await eas.getAttestation(attestationUID);\n\n  // Check if we found anything\n  if (!attestation) {\n    console.error(\"❌ Attestation not found\");\n    return;\n  }\n\n  // Show the attestation details\n  console.log(\"✅ Attestation Details:\");\n  console.log(\"Attester:\", attestation.attester); // Who created this attestation\n  console.log(\"Data:\", attestation.data); // The actual attested data\n  console.log(\"Revoked:\", attestation.revoked ? \"Yes\" : \"No\"); // Is it still valid?\n}\n\n// Replace with your attestation UID\nverifyAttestation(\"YOUR_ATTESTATION_UID_HERE\");\n```\n\n----------------------------------------\n\nTITLE: Verifying EAS Attestations in Node-RED\nDESCRIPTION: A JavaScript function that verifies an Ethereum Attestation Service (EAS) attestation by retrieving it from the blockchain and decoding its data. It returns attestation details including validity status, timestamps, and the decoded user profile information.\n\nLANGUAGE: javascript\nCODE:\n```\nconst EAS = global.get('eas');\nconst attestationUID = msg.attestationUID;\n\ntry {\n    const attestation = await eas.getAttestation(attestationUID);\n    const schemaEncoder = new eassdk.SchemaEncoder(\"string pshandle, string socialMedia, string socialMediaHandle\");\n    const decodedData = schemaEncoder.decodeData(attestation.data);\n\n    msg.payload = {\n        isValid: !attestation.revoked,\n        attestation: {\n            attester: attestation.attester,\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\n            expirationTime: attestation.expirationTime > 0 \n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\n                : 'Never',\n            revoked: attestation.revoked\n        },\n        data: {\n            psHandle: decodedData[0].value.toString(),\n            socialMedia: decodedData[1].value.toString(),\n            socialMediaHandle: decodedData[2].value.toString()\n        }\n    };\n} catch (error) {\n    msg.payload = { \n        success: false, \n        error: error.message,\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Generating Ethereum Key Pair and Account with ethers.js\nDESCRIPTION: This code generates a random Ethereum wallet using the ethers.js library. It creates a private-public key pair using the secp256k1 elliptic curve and derives the Ethereum address from the public key.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\nconst wallet = ethers.Wallet.createRandom();\n\nconsole.log(\"Private Key:\", wallet.privateKey);\nconsole.log(\"Public Key:\", wallet.publicKey);\nconsole.log(\"Address:\", wallet.address);\n```\n\n----------------------------------------\n\nTITLE: Implementing Land Registry Smart Contract with ERC721 in Solidity\nDESCRIPTION: A comprehensive land registry smart contract that extends ERC721 for tokenizing land parcels. It includes functionality for registering parcels, transferring ownership, managing buildings, handling disputes, and tracking tax payments. The contract implements role-based access control for security and includes protection against reentrancy attacks.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\n\ncontract LandRegistry is\n    ERC721,\n    ERC721Enumerable,\n    ERC721URIStorage,\n    AccessControl,\n    ReentrancyGuard,\n    Pausable,\n    EIP712\n{\n    using Counters for Counters.Counter;\n    using SafeMath for uint256;\n    using ECDSA for bytes32;\n\n    // ========== CONSTANTS ==========\n    bytes32 public constant REGISTRAR_ROLE = keccak256(\"REGISTRAR_ROLE\");\n    bytes32 public constant DISPUTE_RESOLVER_ROLE = keccak256(\"DISPUTE_RESOLVER_ROLE\");\n    bytes32 public constant TAX_AUTHORITY_ROLE = keccak256(\"TAX_AUTHORITY_ROLE\");\n    bytes32 public constant COURT_ROLE = keccak256(\"COURT_ROLE\");\n\n    // ========== STRUCTS ==========\n    struct PaymentDetail {\n        string paymentReference;\n        string currency; // ISO 4217\n        uint256 amount;\n        bool isForeign;\n        string sourceBank;\n        string proofOfPayment;\n        uint256 timestamp;\n    }\n\n    struct LandParcel {\n        uint256 id;\n        string parcelNumber;\n        address owner;\n        uint256 area; // sqm with 4 decimals\n        string gpsPolygon; // GeoJSON\n        string jurisdiction;\n        string landUseType; // RESIDENTIAL/COMMERCIAL/AGRICULTURAL\n        uint256 landRate; // Local currency per sqm\n        bool hasDispute;\n        uint256[] buildingIds;\n        uint256[] parentParcels; // For merged/split parcels\n        PaymentDetail[] paymentHistory;\n        uint256 lastTaxPaid;\n        string ipfsHash;\n    }\n\n    struct Building {\n        uint256 id;\n        string name;\n        uint256 stories;\n        uint256 builtArea;\n        string constructionType;\n    }\n\n    struct SplitMergeRequest {\n        uint256[] parcelIds;\n        uint256[] newAreas;\n        string[] newParcelNumbers;\n        string[] newGpsPolygons;\n        bool isMerge;\n        bool approved;\n        bytes[] approvalSignatures;\n    }\n\n    // ========== STATE VARIABLES ==========\n    Counters.Counter private _parcelIdCounter;\n    Counters.Counter private _buildingIdCounter;\n\n    mapping(uint256 => LandParcel) private _parcels;\n    mapping(uint256 => Building) private _buildings;\n    mapping(string => bool) private _usedNationalIds;\n    mapping(bytes32 => bool) private _usedSignatures;\n    mapping(uint256 => SplitMergeRequest) private _splitMergeRequests;\n    mapping(uint256 => uint256) private _parcelToRequest;\n\n    uint256 public baseTaxRate = 100; // 1%\n    uint256 public foreignTransferSurcharge = 200; // +2%\n    uint256 public lateTaxPenalty = 50; // 0.5% per month\n    uint256 public governanceApprovalThreshold = 2;\n\n    // ========== EVENTS ==========\n    event ParcelRegistered(uint256 indexed id, address owner);\n    event ParcelTransferred(uint256 indexed id, address from, address to, uint256 taxPaid);\n    event BuildingAdded(uint256 indexed parcelId, uint256 buildingId);\n    event TaxPaid(uint256 indexed parcelId, uint256 amount, string currency);\n    event DisputeFiled(uint256 indexed parcelId, string details);\n    event DisputeResolved(uint256 indexed parcelId);\n    event SplitRequested(uint256 indexed requestId, uint256 indexed originalParcelId);\n    event MergeRequested(uint256 indexed requestId, uint256[] sourceParcelIds);\n    event SplitCompleted(uint256 indexed requestId, uint256[] newParcelIds);\n    event MergeCompleted(uint256 indexed requestId, uint256 newParcelId);\n\n    // ========== MODIFIERS ==========\n    modifier onlyRegistrar() {\n        require(hasRole(REGISTRAR_ROLE, msg.sender), \"Unauthorized: Registrar only\");\n        _;\n    }\n\n    modifier onlyTaxAuthority() {\n        require(hasRole(TAX_AUTHORITY_ROLE, msg.sender), \"Unauthorized: Tax authority only\");\n        _;\n    }\n\n    modifier noActiveRequest(uint256 parcelId) {\n        require(_parcelToRequest[parcelId] == 0, \"Parcel has active request\");\n        _;\n    }\n\n    // ========== CONSTRUCTOR ==========\n    constructor()\n        ERC721(\"NationalLandToken\", \"NLT\")\n        EIP712(\"LandRegistry\", \"1\")\n    {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(REGISTRAR_ROLE, msg.sender);\n    }\n\n    // ========== PAUSE/UNPAUSE FUNCTIONS ==========\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    // ========== CORE FUNCTIONS ==========\n\n    function registerParcel(\n        address owner,\n        string memory parcelNumber,\n        uint256 area,\n        string memory gpsPolygon,\n        string memory jurisdiction,\n        string memory landUseType,\n        uint256 landRate,\n        string memory nationalId,\n        string memory ipfsHash,\n        bytes memory kycSignature\n    ) external onlyRegistrar nonReentrant returns (uint256) {\n        require(!_usedNationalIds[nationalId], \"National ID already registered\");\n        require(_verifyKYC(owner, nationalId, kycSignature), \"KYC verification failed\");\n\n        uint256 parcelId = _parcelIdCounter.current();\n        _parcelIdCounter.increment();\n\n        _parcels[parcelId] = LandParcel({\n            id: parcelId,\n            parcelNumber: parcelNumber,\n            owner: owner,\n            area: area,\n            gpsPolygon: gpsPolygon,\n            jurisdiction: jurisdiction,\n            landUseType: landUseType,\n            landRate: landRate,\n            hasDispute: false,\n            buildingIds: new uint256[](0),\n            parentParcels: new uint256[](0),\n            paymentHistory: new PaymentDetail[](0),\n            lastTaxPaid: 0,\n            ipfsHash: ipfsHash\n        });\n\n        _mint(owner, parcelId);\n        _setTokenURI(parcelId, ipfsHash);\n        _usedNationalIds[nationalId] = true;\n\n        emit ParcelRegistered(parcelId, owner);\n        return parcelId;\n    }\n\n    // ========== PARCEL TRANSFER & TAXATION ==========\n    function transferParcel(\n        uint256 parcelId,\n        address buyer,\n        string memory buyerNationalId,\n        PaymentDetail memory payment\n    ) external onlyRegistrar nonReentrant noActiveRequest(parcelId) {\n        require(!_parcels[parcelId].hasDispute, \"Parcel has active dispute\");\n        require(!_usedNationalIds[buyerNationalId], \"Buyer ID already registered\");\n\n        address seller = _parcels[parcelId].owner;\n\n        // Calculate tax\n        uint256 taxRate = payment.isForeign ?\n            baseTaxRate.add(foreignTransferSurcharge) : baseTaxRate;\n        uint256 taxAmount = payment.amount.mul(taxRate).div(10000);\n\n        // Record payment and tax\n        _parcels[parcelId].paymentHistory.push(payment);\n        _parcels[parcelId].paymentHistory.push(PaymentDetail({\n            paymentReference: string(abi.encodePacked(\"TAX-\", payment.paymentReference)),\n            currency: payment.currency,\n            amount: taxAmount,\n            isForeign: payment.isForeign,\n            sourceBank: \"National Treasury\",\n            proofOfPayment: string(abi.encodePacked(\"TAX-RECEIPT-\", payment.paymentReference)),\n            timestamp: block.timestamp\n        }));\n        _parcels[parcelId].lastTaxPaid = block.timestamp;\n\n        // Execute transfer\n        _transfer(seller, buyer, parcelId);\n        _parcels[parcelId].owner = buyer;\n        _usedNationalIds[buyerNationalId] = true;\n\n        emit ParcelTransferred(parcelId, seller, buyer, taxAmount);\n        emit TaxPaid(parcelId, taxAmount, payment.currency);\n    }\n\n    // ========== BUILDING MANAGEMENT ==========\n    function addBuilding(\n        uint256 parcelId,\n        string memory name,\n        uint256 stories,\n        uint256 builtArea,\n        string memory constructionType\n    ) external onlyRegistrar returns (uint256) {\n        uint256 buildingId = _buildingIdCounter.current();\n        _buildingIdCounter.increment();\n\n        _buildings[buildingId] = Building({\n            id: buildingId,\n            name: name,\n            stories: stories,\n            builtArea: builtArea,\n            constructionType: constructionType\n        });\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Server Architecture with Blockchain, API, and File System Connectors\nDESCRIPTION: Mermaid flowchart showing the architecture of MCP Server with various connectors interacting with blockchain networks, external APIs, and local file systems. It illustrates the request-response flow between AI agents and data sources through the MCP Server.\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A[AI Agent / LLM] --(1) request--> B{{MCP Server}}\n    subgraph MCP Server\n        B --> C1[Blockchain Connector]\n        B --> C2[API Connector]\n        B --> C3[File System Connector]\n    end\n    C1 -- fetch/query --> D[(Blockchain Network)]\n    C2 -- API call --> E[(External API/Data Source)]\n    C3 -- read/write --> F[(Local File System)]\n    D -- data --> C1\n    E -- data --> C2\n    F -- file data --> C3\n    B{{MCP Server}} --(2) formatted data--> A[AI Agent / LLM]\n```\n\n----------------------------------------\n\nTITLE: Defining StateTransition Struct in Solidity for State Machine History\nDESCRIPTION: Definition of the StateTransition struct used to record the history of state transitions. It stores the source and destination states, the actor who initiated the transition, and a timestamp.\n\nLANGUAGE: solidity\nCODE:\n```\nstruct StateTransition {\n  bytes32 fromState;\n  bytes32 toState;\n  address actor;\n  uint256 timestamp;\n}\n```\n\n----------------------------------------\n\nTITLE: Private Helper Functions for Contract in Solidity\nDESCRIPTION: A set of private helper functions used internally throughout the contract for provider verification, provider listing, and signature validation.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _providerExists(address providerAddress) private view returns (bool) {\n        return bytes(_providers[providerAddress].licenseNumber).length > 0;\n    }\n\n    function _getAllProviders() private view returns (address[] memory) {\n        return _providerAddresses;\n    }\n\n    function _verifyGovernmentSignature(\n        address walletAddress,\n        bytes32 nationalIdHash,\n        bytes calldata signature\n    ) private pure returns (bool) {\n        // Robust verification logic to be implemented.\n        return true;\n    }\n\n    function _verifyAccreditation(\n        address providerAddress,\n        string memory licenseNumber,\n        string memory providerType,\n        bytes calldata proof\n    ) private pure returns (bool) {\n        // Robust accreditation verification to be implemented.\n        return true;\n    }\n```\n\n----------------------------------------\n\nTITLE: UserData.sol Smart Contract ABI in JSON Format\nDESCRIPTION: The ABI (Application Binary Interface) for the UserData smart contract in JSON format. It defines the interface for interacting with the contract, including events like ProfileCreated, ProfileDeleted, and ProfileUpdated, as well as functions for creating, updating, retrieving, and deleting user profiles.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"UserData\",\n  \"sourceName\": \"contracts/UserData.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ProfileCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProfileDeleted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ProfileUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"createProfile\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"deleteProfile\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getProfile\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"name\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"string\",\n              \"name\": \"email\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"age\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"string\",\n              \"name\": \"country\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"bool\",\n              \"name\": \"isKYCApproved\",\n              \"type\": \"bool\"\n            },\n            {\n              \"internalType\": \"bool\",\n              \"name\": \"isDeleted\",\n              \"type\": \"bool\"\n            }\n          ],\n          \"internalType\": \"struct UserData.UserProfile\",\n          \"name\": \"\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"profiles\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isDeleted\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"updateProfile\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Approving Land Registry Split/Merge Requests with Digital Signatures\nDESCRIPTION: Function that allows registrars to approve split/merge requests using cryptographic signatures. It verifies signature validity, checks if the signer has the appropriate role, and executes the request when enough approvals are collected.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction approveRequest(\n    uint256 requestId,\n    bytes memory signature\n) external onlyRegistrar {\n    SplitMergeRequest storage request = _splitMergeRequests[requestId];\n    require(!request.approved, \"Already approved\");\n\n    bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n        keccak256(\"SplitMergeApproval(uint256 requestId,bool isMerge)\"),\n        requestId,\n        request.isMerge\n    )));\n    require(!_usedSignatures[digest], \"Signature already used\");\n    address signer = digest.recover(signature);\n    require(hasRole(REGISTRAR_ROLE, signer), \"Invalid signer\");\n    _usedSignatures[digest] = true;\n    request.approvalSignatures.push(signature);\n\n    if (request.approvalSignatures.length >= governanceApprovalThreshold) {\n        _executeRequest(requestId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Token Contract in Solidity\nDESCRIPTION: Basic structure of an ERC-20 token contract that inherits from multiple OpenZeppelin contracts and includes minting capabilities. The constructor sets up the admin role and mints initial tokens to the deployer.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract GenericToken is ERC20, ERC20Burnable, Pausable, AccessControl {\n constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n   _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n   _mint(msg.sender, 1000000 * 10**decimals());\n }\n\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Smart Contract for Attestation Validation in Solidity\nDESCRIPTION: A Solidity smart contract that serves as a custom resolver for attestations. It maintains a list of trusted attesters and validates attestations based on whether they come from trusted sources.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// This contract checks if attestations come from trusted sources\ncontract CustomResolver {\n    // Keep track of which addresses we trust to make attestations\n    mapping(address => bool) public trustedAttesters;\n\n    // When deploying, we set up our initial list of trusted attesters\n    constructor(address[] memory initialAttesters) {\n        for (uint256 i = 0; i < initialAttesters.length; i++) {\n            trustedAttesters[initialAttesters[i]] = true;\n        }\n    }\n\n    // EAS calls this function before accepting an attestation\n    function validate(\n        bytes32 attestationUID,    // Unique ID of the attestation\n        address attester,          // Who's trying to create the attestation\n        bytes memory data          // The attestation data (unused in this example)\n    ) external view returns (bool) {\n        // Only allow attestations from addresses we trust\n        if (!trustedAttesters[attester]) {\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Transfer Smart Contract in TypeScript\nDESCRIPTION: Complete implementation of the AssetTransferContract class that extends the Fabric Contract base class. Includes transaction functions for initializing the ledger, creating, reading, updating, deleting, and transferring assets, with event emissions for key operations.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { instanceToPlain } from \"class-transformer\";\nimport {\n  Context,\n  Contract,\n  Info,\n  Returns,\n  Transaction,\n} from \"fabric-contract-api\";\nimport stringify from \"json-stringify-deterministic\";\nimport sortKeysRecursive from \"sort-keys-recursive\";\nimport { Asset } from \"./asset\";\n\n@Info({\n  title: \"AssetTransfer\",\n  description: \"Smart contract for trading assets\",\n})\nexport class AssetTransferContract extends Contract {\n  @Transaction()\n  public async InitLedger(ctx: Context): Promise<void> {\n    const assets: Asset[] = [\n      new Asset(\"asset1\", \"blue\", 5, \"Tomoko\", 300),\n      new Asset(\"asset2\", \"red\", 5, \"Brad\", 400),\n      new Asset(\"asset3\", \"green\", 10, \"Jin Soo\", 500),\n      new Asset(\"asset4\", \"yellow\", 10, \"Max\", 600),\n      new Asset(\"asset5\", \"black\", 15, \"Adriana\", 700),\n      new Asset(\"asset6\", \"white\", 15, \"Michel\", 800),\n    ];\n\n    for (const asset of assets) {\n      asset.docType = \"asset\";\n      await ctx.stub.putState(\n        asset.ID,\n        Buffer.from(stringify(sortKeysRecursive(instanceToPlain(asset))))\n      );\n      console.info(`Asset ${asset.ID} initialized`);\n    }\n  }\n\n  // CreateAsset issues a new asset to the world state with given details.\n  @Transaction()\n  public async CreateAsset(\n    ctx: Context,\n    id: string,\n    color: string,\n    size: number,\n    owner: string,\n    appraisedValue: number\n  ): Promise<void> {\n    const exists = await this.AssetExists(ctx, id);\n    if (exists) {\n      throw new Error(`The asset ${id} already exists`);\n    }\n\n    const asset = new Asset(id, color, size, owner, appraisedValue);\n    asset.docType = \"asset\";\n    const assetBuffer = Buffer.from(\n      stringify(sortKeysRecursive(instanceToPlain(asset)))\n    );\n\n    // Publish event\n    ctx.stub.setEvent(\"CreateAsset\", assetBuffer);\n    // we insert data in alphabetic order using 'json-stringify-deterministic' and 'sort-keys-recursive'\n    await ctx.stub.putState(id, assetBuffer);\n  }\n\n  // ReadAsset returns the asset stored in the world state with given id.\n  @Transaction(false)\n  public async ReadAsset(ctx: Context, id: string): Promise<string> {\n    const assetJSON = await ctx.stub.getState(id); // get the asset from chaincode state\n    if (!assetJSON || assetJSON.length === 0) {\n      throw new Error(`The asset ${id} does not exist`);\n    }\n    return assetJSON.toString();\n  }\n\n  // UpdateAsset updates an existing asset in the world state with provided parameters.\n  @Transaction()\n  public async UpdateAsset(\n    ctx: Context,\n    id: string,\n    color: string,\n    size: number,\n    owner: string,\n    appraisedValue: number\n  ): Promise<void> {\n    const exists = await this.AssetExists(ctx, id);\n    if (!exists) {\n      throw new Error(`The asset ${id} does not exist`);\n    }\n\n    // overwriting original asset with new asset\n    const updatedAsset = new Asset(id, color, size, owner, appraisedValue);\n    updatedAsset.docType = \"asset\";\n\n    const assetBuffer = Buffer.from(\n      stringify(sortKeysRecursive(instanceToPlain(updatedAsset)))\n    );\n\n    // Publish event\n    ctx.stub.setEvent(\"UpdateAsset\", assetBuffer);\n\n    // we insert data in alphabetic order using 'json-stringify-deterministic' and 'sort-keys-recursive'\n    await ctx.stub.putState(id, assetBuffer);\n  }\n\n  // DeleteAsset deletes an given asset from the world state.\n  @Transaction()\n  public async DeleteAsset(ctx: Context, id: string): Promise<void> {\n    const assetString = await this.ReadAsset(ctx, id);\n\n    const assetBuffer = Buffer.from(\n      stringify(sortKeysRecursive(instanceToPlain(assetString)))\n    );\n\n    // Publish event\n    ctx.stub.setEvent(\"DeleteAsset\", assetBuffer);\n\n    await ctx.stub.deleteState(id);\n  }\n\n  // AssetExists returns true when asset with given ID exists in world state.\n  @Transaction(false)\n  @Returns(\"boolean\")\n  public async AssetExists(ctx: Context, id: string): Promise<boolean> {\n    const assetJSON = await ctx.stub.getState(id);\n    return assetJSON && assetJSON.length > 0;\n  }\n\n  // TransferAsset updates the owner field of asset with given id in the world state, and returns the old owner.\n  @Transaction()\n  public async TransferAsset(\n    ctx: Context,\n    id: string,\n    newOwner: string\n  ): Promise<string> {\n    const assetString = await this.ReadAsset(ctx, id);\n    const asset: Asset = JSON.parse(assetString);\n    const oldOwner = asset.Owner;\n    asset.Owner = newOwner;\n\n    const assetBuffer = Buffer.from(stringify(sortKeysRecursive(asset)));\n\n    // Publish event\n    ctx.stub.setEvent(\"TransferAsset\", assetBuffer);\n\n    // we insert data in alphabetic order using 'json-stringify-deterministic' and 'sort-keys-recursive'\n    await ctx.stub.putState(id, assetBuffer);\n    return oldOwner;\n  }\n\n  // GetAllAssets returns all assets found in the world state.\n  @Transaction(false)\n  @Returns(\"string\")\n  public async GetAllAssets(ctx: Context): Promise<string> {\n    const allResults = [];\n    // range query with empty string for startKey and endKey does an open-ended query of all assets in the chaincode namespace.\n    const iterator = await ctx.stub.getStateByRange(\"\", \"\");\n    let result = await iterator.next();\n\n    while (!result.done) {\n      const strValue = Buffer.from(result.value.value.toString()).toString(\n        \"utf8\"\n      );\n      let record;\n      try {\n        record = JSON.parse(strValue);\n      } catch (err) {\n        console.log(err);\n        record = strValue;\n      }\n      allResults.push(record);\n      result = await iterator.next();\n    }\n    return JSON.stringify(allResults);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Signature Wallet Contract in Solidity\nDESCRIPTION: This Solidity contract snippet shows the beginning structure of a multi-signature wallet implementation, including owner mapping, required confirmation threshold, and a transaction structure definition.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MultiSigWallet {\n    mapping(address => bool) public isOwner;\n    uint public required;\n\n    struct Transaction {\n        address to;\n        uint value;\n        bytes data;\n        bool executed;\n        uint confirmations;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph Manifest with mycontract.yaml\nDESCRIPTION: YAML manifest file that connects the smart contract to its deployed address, ABI definition, indexed events, GraphQL schema, and event handler functions. This is the central configuration file for a subgraph datasource.\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.2\nschema:\n  file: mycontract.gql.json\n\ndataSources:\n  - kind: ethereum/contract\n    name: MyContract\n    network: localhost\n    source:\n      address: \"0x0000000000000000000000000000000000000000\"\n      abi: MyContract\n      startBlock: 0\n    mapping:\n      kind: ethereum/events\n      language: wasm/assemblyscript\n      apiVersion: 0.0.5\n      entities:\n        - MyEntity\n      abis:\n        - name: MyContract\n          file: \"../../abis/MyContract.json\"\n      eventHandlers:\n        - event: MyEvent(indexed uint256,string)\n          handler: handleMyEvent\n      file: mycontract.ts\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Asset Tokenization Smart Contract Implementation in Solidity\nDESCRIPTION: Complete Solidity implementation of an asset tokenization contract using the ERC1155 standard. The contract includes functionality for creating, minting, burning, and transferring tokenized assets with proper access control and upgrade capabilities.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n// SettleMint.com\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\";\n\n/**\n * @title AssetTokenization\n * @dev A contract for tokenizing assets using ERC1155 standard with upgradeable functionality.\n */\ncontract AssetTokenization is Initializable, UUPSUpgradeable, ERC1155SupplyUpgradeable, OwnableUpgradeable {\n    /**\n     * @dev Struct representing an asset.\n     * @param assetId Unique identifier number.\n     * @param name Name of the asset.\n     * @param symbol Symbol of the asset.\n     * @param maxSupply Maximum number of tokens for the asset.\n     * @param faceValue Initial value of the asset.\n     * @param maturityTimestamp Maturity date in the value of a unix timestamp.\n     * @param assetUri URI for the asset metadata.\n     */\n    struct Asset {\n        uint256 assetId;\n        string name;\n        string symbol;\n        uint256 maxSupply;\n        uint256 faceValue;\n        uint256 maturityTimestamp;\n        string assetUri;\n    }\n\n    /// @notice Mapping from asset ID to asset details.\n    mapping(uint256 => Asset) public assetToDetails;\n\n    /**\n     * @dev Event emitted on asset transfer.\n     * @param from Address from which the asset is transferred.\n     * @param to Address to which the asset is transferred.\n     * @param assetIds Array of asset IDs being transferred.\n     * @param amounts Array of amounts of each asset being transferred.\n     */\n    event AssetTransferEvent(address indexed from, address indexed to, uint256[] assetIds, uint256[] amounts);\n\n    /**\n     * @dev Initializes the contract.\n     */\n    function initialize() external initializer {\n        __ERC1155_init(\"\");\n        __Ownable_init(msg.sender);\n        __UUPSUpgradeable_init();\n    }\n\n    /**\n     * @dev Creates a new asset.\n     * @param assetId Unique identifier for the asset.\n     * @param name Name of the asset.\n     * @param symbol Symbol of the asset.\n     * @param maxSupply Maximum supply of the asset.\n     * @param faceValue Initial value of the asset.\n     * @param maturityTimestamp Maturity date of the asset in unix timestamp.\n     * @param assetUri URI for the asset metadata.\n     */\n    function createAsset(\n        uint256 assetId,\n        string memory name,\n        string memory symbol,\n        uint256 maxSupply,\n        uint256 faceValue,\n        uint256 maturityTimestamp,\n        string memory assetUri\n    ) external onlyOwner {\n        require(assetToDetails[assetId].assetId != assetId, \"Asset already exists\");\n        Asset memory asset = Asset(assetId, name, symbol, maxSupply, faceValue, maturityTimestamp, assetUri);\n        assetToDetails[assetId] = asset;\n    }\n\n    /**\n     * @dev Mints a specified amount of an asset to a recipient.\n     * @param assetId ID of the asset to mint.\n     * @param amounts Amount of the asset to mint.\n     * @param recipient Address to receive the minted assets.\n     */\n    function mint(uint256 assetId, uint256 amounts, address recipient) external onlyOwner {\n        require(assetToDetails[assetId].assetId == assetId, \"Asset does not exist\");\n        require(totalSupply(assetId) + amounts <= assetToDetails[assetId].maxSupply, \"Max supply exceeded\");\n        require(assetToDetails[assetId].maturityTimestamp > block.timestamp, \"Asset is already matured\");\n        _mint(recipient, assetId, amounts, \"\");\n    }\n\n    /**\n     * @dev Mints multiple assets in a batch to a recipient.\n     * @param assetIds Array of asset IDs to mint.\n     * @param amounts Array of amounts for each asset to mint.\n     * @param recipient Address to receive the minted assets.\n     */\n    function mintBatch(uint256[] memory assetIds, uint256[] memory amounts, address recipient) public onlyOwner {\n        uint256 length = assetIds.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(assetToDetails[assetIds[i]].assetId == assetIds[i], \"Asset does not exist\");\n            require(\n                totalSupply(assetIds[i]) + amounts[i] <= assetToDetails[assetIds[i]].maxSupply, \"Max supply exceeded\"\n            );\n            require(assetToDetails[assetIds[i]].maturityTimestamp > block.timestamp, \"Asset is already matured\");\n        }\n        _mintBatch(recipient, assetIds, amounts, \"\");\n    }\n\n    /**\n     * @dev Burns a specified amount of an asset from the sender.\n     * @param assetId ID of the asset to burn.\n     * @param amounts Amount of the asset to burn.\n     */\n    function burn(uint256 assetId, uint256 amounts) external {\n        require(assetToDetails[assetId].assetId == assetId, \"Asset does not exist\");\n        _burn(msg.sender, assetId, amounts);\n    }\n\n    /**\n     * @dev Burns multiple assets in a batch from the sender.\n     * @param assetIds Array of asset IDs to burn.\n     * @param amounts Array of amounts for each asset to burn.\n     */\n    function burnBatch(uint256[] memory assetIds, uint256[] memory amounts) external {\n        uint256 length = assetIds.length;\n        for (uint256 i = 0; i < length; i++) {\n            require(assetToDetails[assetIds[i]].assetId == assetIds[i], \"Asset does not exist\");\n        }\n        _burnBatch(msg.sender, assetIds, amounts);\n    }\n\n    /**\n     * @dev Returns the URI for a specific asset ID.\n     * @param id Asset ID to query the URI for.\n     * @return URI of the specified asset ID.\n     */\n    function uri(uint256 id) public view override returns (string memory) {\n        return assetToDetails[id].assetUri;\n    }\n\n    /**\n     * @dev Updates the state on asset transfer and emits the transfer event.\n     * @param from Address from which the asset is transferred.\n     * @param to Address to which the asset is transferred.\n     * @param assetIds Array of asset IDs being transferred.\n     * @param amounts Array of amounts of each asset being transferred.\n     */\n    function _update(address from, address to, uint256[] memory assetIds, uint256[] memory amounts)\n        internal\n        override(ERC1155SupplyUpgradeable)\n    {\n        super._update(from, to, assetIds, amounts);\n        emit AssetTransferEvent(from, to, assetIds, amounts);\n    }\n\n    /**\n     * @dev Authorizes the upgrade of the contract to a new implementation.\n     * @param newImplementation Address of the new implementation.\n     */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of AI-Blockchain Interaction through SettleMint's MCP\nDESCRIPTION: Mermaid sequence diagram illustrating the interaction flow between an AI model, MCP Server, blockchain node/services, and external APIs. It demonstrates the complete process of querying blockchain data and executing transactions through SettleMint's implementation.\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant AI as AI Model (Agent)\n    participant MCP as MCP Server\n    participant Chain as The Graph / Portal / Node\n    participant API as External API\n\n    AI->>MCP: (1) Query request (e.g., get contract state)\n    Note over AI,MCP: AI asks MCP for on-chain data\n    MCP-->>AI: (2) Acknowledgement & processing\n\n    MCP->>Chain: (3) Fetch data from blockchain\n    Chain-->>MCP: (4) Return contract state\n\n    MCP->>API: (5) [Optional] Fetch related off-chain data\n    API-->>MCP: (6) Return external data\n\n    MCP-->>AI: (7) Send combined response\n    Note over AI,MCP: AI receives on-chain data (and any other context)\n\n    AI->>MCP: (8) Action request (e.g., execute transaction)\n    MCP->>Chain: (9) Submit transaction to blockchain\n    Chain-->>MCP: (10) Return tx result/receipt\n    MCP-->>AI: (11) Confirm action result\n```\n\n----------------------------------------\n\nTITLE: Asset Lifecycle Management Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for managing the complete lifecycle of industrial assets. It tracks installation details, maintenance history, performance metrics, and end-of-life planning.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AssetLifecycle {\n  installation: {\n    date: Date;\n    contractor: string;\n    warranty: WarrantyInfo;\n  };\n  maintenance: MaintenanceRecord[];\n  performance: PerformanceMetrics[];\n  endOfLife: {\n    expectedDate: Date;\n    disposalPlan: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Re-attestation in Solidity with EAS Integration\nDESCRIPTION: A function that allows IP asset owners to update the attestation for their asset, typically after a transfer of ownership. The function revokes any existing attestation and creates a new one through the Ethereum Attestation Service (EAS).\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reattestAsset(\n    uint256 assetId\n) external whenNotPaused nonReentrant {\n    IPAsset storage asset = ipAssets[assetId];\n    require(asset.id != 0, \"Asset does not exist\");\n    require(msg.sender == asset.owner, \"Only owner can re-attest asset\");\n    require(!asset.disputeFiled, \"Cannot re-attest during active dispute\");\n\n    uint256 oldAttestationId = asset.attestationId;\n\n    // If an attestation exists, revoke it.\n    if (oldAttestationId != 0) {\n        bytes memory revocationData = abi.encode(assetId, \"Re-attestation\", block.timestamp);\n        bool success = eas.revoke(oldAttestationId, revocationData);\n        require(success, \"Old attestation revocation failed\");\n    }\n\n    // Update registration time for new attestation.\n    asset.registrationTime = block.timestamp;\n    // Re-encode attestation data.\n    bytes memory attestationData = abi.encode(\n        assetId, \n        asset.title, \n        asset.description, \n        asset.ipfsHash, \n        asset.registrationTime, \n        asset.owner\n    );\n    // Create a new attestation.\n    uint256 newAttestationId = eas.attest(IP_ASSET_SCHEMA, asset.owner, 0, true, attestationData);\n    asset.attestationId = newAttestationId;\n\n    emit AssetReattested(assetId, oldAttestationId, newAttestationId);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers with mycontract.ts\nDESCRIPTION: AssemblyScript handler functions that transform blockchain events into GraphQL entities. These functions are executed by the subgraph runtime when matching events are detected on-chain, mapping event data to entity properties.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BigInt } from \"@graphprotocol/graph-ts\";\nimport { MyEvent as MyEventType } from \"../generated/MyContract/MyContract\";\nimport { MyEntity } from \"../generated/schema\";\nimport { fetchMyEntity } from \"../fetch/mycontractdata\";\n\nexport function handleMyEvent(event: MyEventType): void {\n  let entity = fetchMyEntity(event.params.id);\n  entity.creator = event.transaction.from;\n  entity.status = event.params.status;\n  entity.timestamp = event.block.timestamp;\n  entity.save();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Smart Contract User Data Operations with Hardhat and Viem\nDESCRIPTION: A comprehensive test suite that validates the functionality of a UserData smart contract. The script tests creating, reading, updating, and deleting user profiles while ensuring proper error handling for invalid operations like duplicate profile creation or accessing non-existent profiles.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadFixture } from \"@nomicfoundation/hardhat-toolbox-viem/network-helpers\";\nimport { expect } from \"chai\";\nimport hre from \"hardhat\";\n\n// Describe our test suite for the UserData contract\ndescribe(\"UserData\", function () {\n  // deployUserFixture deploys the UserData contract using viem and returns the deployed contract instance\n  // along with the address of the first wallet client.\n  async function deployUserFixture() {\n    // Deploy the UserData contract using viem.\n    // The contract name (\"UserData\") must match your contract's name.\n    const userContract = await hre.viem.deployContract(\"UserData\");\n    // Get the first wallet client's account address to use as a signer for simulate calls.\n    const account = (await hre.viem.getWalletClients())[0].account.address;\n    return { userContract, account };\n  }\n\n  // Define a sample user profile object for tests.\n  const sampleProfile = {\n    userId: 1n, // BigInt literal is used for user IDs\n    name: \"Alice\",\n    email: \"alice@example.com\",\n    age: 30,\n    country: \"Wonderland\",\n    isKYCApproved: true,\n  };\n\n  // -------------------------------\n  // Tests for createProfile functionality\n  // -------------------------------\n  describe(\"createProfile\", function () {\n    it(\"should create a new profile\", async function () {\n      // Use loadFixture to deploy a fresh instance of the contract.\n      const { userContract } = await loadFixture(deployUserFixture);\n\n      // Call the write method for createProfile with sampleProfile data.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Read the stored profile from the contract using the read method.\n      const profile = (await userContract.read.getProfile([\n        sampleProfile.userId,\n      ])) as {\n        name: string;\n        email: string;\n        age: number;\n        country: string;\n        isKYCApproved: boolean;\n      };\n\n      // Assert that the returned profile data matches our input values.\n      expect(profile.name).to.equal(sampleProfile.name);\n      expect(profile.email).to.equal(sampleProfile.email);\n    });\n\n    it(\"should not allow duplicate profile creation\", async function () {\n      // Deploy a fresh instance using the fixture.\n      const { userContract, account } = await loadFixture(deployUserFixture);\n\n      // Create a profile with the sample data.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Attempt to simulate (dry-run) creating a duplicate profile.\n      // We use simulate.createProfile so that no state change occurs if it fails.\n      try {\n        await userContract.simulate.createProfile(\n          [sampleProfile.userId, \"Bob\", \"bob@example.com\", 25, \"Utopia\", false],\n          { account }\n        );\n        // If no error is thrown, the test should fail.\n        expect.fail(\"Expected simulate.createProfile to revert\");\n      } catch (err: any) {\n        // Check that an error is thrown.\n        expect(err).to.exist;\n      }\n    });\n  });\n\n  // -------------------------------\n  // Tests for updateProfile functionality\n  // -------------------------------\n  describe(\"updateProfile\", function () {\n    it(\"should update an existing profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract } = await loadFixture(deployUserFixture);\n\n      // First, create the profile using the sample data.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Update the profile's email using updateProfile.\n      await userContract.write.updateProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        \"alice@updated.com\", // new email value\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Read the updated profile.\n      const updated = (await userContract.read.getProfile([\n        sampleProfile.userId,\n      ])) as {\n        name: string;\n        email: string;\n        age: number;\n        country: string;\n        isKYCApproved: boolean;\n      };\n\n      // Verify that the email was updated.\n      expect(updated.email).to.equal(\"alice@updated.com\");\n    });\n\n    it(\"should fail to update non-existent profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract, account } = await loadFixture(deployUserFixture);\n\n      // Attempt to simulate updating a profile that does not exist.\n      try {\n        await userContract.simulate.updateProfile(\n          [999n, \"Ghost\", \"ghost@void.com\", 99, \"Nowhere\", false],\n          { account }\n        );\n        expect.fail(\"Expected simulate.updateProfile to revert\");\n      } catch (err: any) {\n        // Just ensure that an error was thrown.\n        expect(err).to.exist;\n      }\n    });\n  });\n\n  // -------------------------------\n  // Tests for deleteProfile functionality\n  // -------------------------------\n  describe(\"deleteProfile\", function () {\n    it(\"should soft delete a profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract } = await loadFixture(deployUserFixture);\n\n      // Create the profile.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Delete the profile.\n      await userContract.write.deleteProfile([sampleProfile.userId]);\n\n      // Try reading the profile, expecting it to revert.\n      try {\n        await userContract.read.getProfile([sampleProfile.userId]);\n        expect.fail(\"Expected getProfile to revert\");\n      } catch (err: any) {\n        expect(err).to.exist;\n      }\n    });\n\n    it(\"should fail to delete a non-existent profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract, account } = await loadFixture(deployUserFixture);\n\n      // Attempt to simulate deleting a profile that does not exist.\n      try {\n        await userContract.simulate.deleteProfile([123n], { account });\n        expect.fail(\"Expected simulate.deleteProfile to revert\");\n      } catch (err: any) {\n        expect(err).to.exist;\n      }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Interacting with Hasura via GraphQL API in JavaScript\nDESCRIPTION: Complete example of how to interact with a Hasura database using the GraphQL API. Includes setting up authentication, making queries, and inserting records.\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'node-fetch';\n\n// Configure your authentication details\nconst HASURA_ENDPOINT = \"YOUR_HASURA_ENDPOINT\";\nconst HASURA_ADMIN_SECRET = \"YOUR_HASURA_ADMIN_SECRET\"; // Found in the \"Connect\" tab of Hasura console\nconst APP_ACCESS_TOKEN = \"YOUR_APP_ACCESS_TOKEN\"; // Generated following the Application Access Tokens guide\n\n// Reusable function to make GraphQL requests\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  try {\n    const result = await fetch(\n      HASURA_ENDPOINT,\n      {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'x-hasura-admin-secret': HASURA_ADMIN_SECRET,\n          'x-auth-token': APP_ACCESS_TOKEN\n        },\n        body: JSON.stringify({\n          query: operationsDoc,\n          variables: variables,\n          operationName: operationName\n        })\n      }\n    );\n\n    if (!result.ok) {\n      const text = await result.text();\n      throw new Error(`HTTP error! status: ${result.status}, body: ${text}`);\n    }\n\n    return await result.json();\n  } catch (error) {\n    console.error('Request failed:', error);\n    throw error;\n  }\n}\n\n// Query to fetch verification records\nconst operationsDoc = `\n  query MyQuery {\n    verification {\n      id\n    }\n  }\n`;\n\n// Mutation to insert a new verification record\nconst insertOperationDoc = `\n  mutation InsertVerification($name: String!, $status: String!) {\n    insert_verification_one(object: {name: $name, status: $status}) {\n      id\n      name\n      status\n    }\n  }\n`;\n\n// Function to fetch verification records\nasync function main() {\n  try {\n    const { errors, data } = await fetchGraphQL(operationsDoc, \"MyQuery\", {});\n\n    if (errors) {\n      console.error('GraphQL Errors:', errors);\n      return;\n    }\n\n    console.log('Data:', data);\n  } catch (error) {\n    console.error('Failed:', error);\n  }\n}\n\n// Function to insert a new verification record\nasync function insertWithGraphQL() {\n  try {\n    const { errors, data } = await fetchGraphQL(\n      insertOperationDoc,\n      \"InsertVerification\",\n      {\n        name: \"Test User\",\n        status: \"pending\"\n      }\n    );\n\n    if (errors) {\n      console.error('GraphQL Errors:', errors);\n      return;\n    }\n\n    console.log('Inserted Data:', data);\n  } catch (error) {\n    console.error('Failed:', error);\n  }\n}\n\n// Execute both query and mutation\nmain();\ninsertWithGraphQL();\n```\n\n----------------------------------------\n\nTITLE: Creating Attestations with the EAS SDK in JavaScript\nDESCRIPTION: Example showing how to connect to EAS, encode attestation data according to a schema, and create an attestation on the blockchain. This code demonstrates the complete workflow from connecting to the chain to submitting the attestation transaction.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EAS, SchemaEncoder } = require(\"@ethereum-attestation-service/eas-sdk\");\nconst { ethers } = require(\"ethers\");\n\n// Setup our connection details\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // Network endpoint\n  easAddress: \"YOUR_EAS_CONTRACT_ADDRESS_HERE\", // Main EAS contract address\n  privateKey: \"YOUR_PRIVATE_KEY_HERE\", // Your wallet's private key\n  schemaUID: \"YOUR_SCHEMA_UID_HERE\", // The UID from when we registered our schema\n};\n\n// Connect to the blockchain\nconst provider = new ethers.JsonRpcProvider(config.rpcUrl);\nconst signer = new ethers.Wallet(config.privateKey, provider);\nconst EAS = new EAS(config.easAddress);\neas.connect(signer);\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new SchemaEncoder(\n  \"string username, string platform, string handle\"\n);\n\n// The actual data we want to attest to\nconst attestationData = [\n  { name: \"username\", value: \"awesome_developer\", type: \"string\" },\n  { name: \"platform\", value: \"GitHub\", type: \"string\" },\n  { name: \"handle\", value: \"@devmaster\", type: \"string\" },\n];\n\nasync function createAttestation() {\n  try {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation\n    const tx = await eas.attest({\n      schema: config.schemaUID,\n      data: {\n        recipient: ethers.ZeroAddress, // Public attestation (no specific recipient)\n        expirationTime: 0, // Never expires\n        revocable: true, // Can be revoked later if needed\n        data: encodedData, // Our encoded attestation data\n      },\n    });\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n    console.log(\n      \"✅ Attestation created successfully! UID:\",\n      receipt.attestationUID\n    );\n  } catch (error) {\n    console.error(\"❌ Error creating attestation:\", error.message);\n  }\n}\n\ncreateAttestation();\n```\n\n----------------------------------------\n\nTITLE: Overriding Token Burn Functionality in ERC721 Land Registry\nDESCRIPTION: Overrides the standard ERC721 token burn function to ensure proper inheritance from both ERC721 and ERC721URIStorage base contracts. This maintains compatibility with multiple inheritance.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n    }\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Deployments with SDK JavaScript\nDESCRIPTION: This TypeScript code demonstrates how to manage custom deployments using the SettleMint JavaScript SDK, with functions for listing deployments, reading deployment details, restarting deployments, and editing deployment configurations.\n\nLANGUAGE: typescript\nCODE:\n```\n// List deployments\nconst listDeployments = async () => {\n  const deployments = await client.customDeployment.list(\"my-app\");\n};\n\n// Get deployment details\nconst getDeployment = async () => {\n  const deployment = await client.customDeployment.read(\"deployment-unique-name\");\n};\n\n// Restart deployment\nconst restartDeployment = async () => {\n  await client.customDeployment.restart(\"deployment-unique-name\");\n};\n\n// Edit deployment\nconst editDeployment = async () => {\n  await client.customDeployment.edit(\"deployment-unique-name\", {\n    imageTag: \"v2\"\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Testing UserData Smart Contract with Foundry\nDESCRIPTION: A comprehensive Solidity test file for the UserData smart contract using Foundry's Test library. The test covers all contract functions including createProfile, updateProfile, and deleteProfile, plus various edge cases like duplicate profiles, nonexistent profiles, and soft deletion behavior.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport \"forge-std/Test.sol\";\nimport \"../contracts/UserData.sol\"; // Adjust the import path if needed\n\ncontract UserTest is Test {\n    UserData public user;\n\n    function setUp() public {\n        // Deploy the contract before each test\n        user = new UserData();\n    }\n\n    function testCreateProfile() public {\n        // Call createProfile\n        user.createProfile(1, \"Alice\", \"alice@email.com\", 30, \"USA\", true);\n\n        // Fetch the profile struct\n        UserData.UserProfile memory profile = user.getProfile(1);\n\n        // Assert values match what we set\n        assertEq(profile.name, \"Alice\");\n        assertEq(profile.email, \"alice@email.com\");\n        assertEq(profile.age, 30);\n        assertEq(profile.country, \"USA\");\n        assertEq(profile.isKYCApproved, true);\n        assertEq(profile.isDeleted, false);\n    }\n\n    function testUpdateProfile() public {\n        // First create a profile\n        user.createProfile(2, \"Bob\", \"bob@email.com\", 28, \"UK\", false);\n\n        // Update profile with new values\n        user.updateProfile(2, \"Bob Updated\", \"bob@new.com\", 29, \"Canada\", true);\n\n        // Fetch the updated profile\n        UserData.UserProfile memory profile = user.getProfile(2);\n\n        // Assert updated values\n        assertEq(profile.name, \"Bob Updated\");\n        assertEq(profile.email, \"bob@new.com\");\n        assertEq(profile.age, 29);\n        assertEq(profile.country, \"Canada\");\n        assertEq(profile.isKYCApproved, true);\n        assertEq(profile.isDeleted, false);\n    }\n\n    function testDeleteProfile() public {\n        // Create and delete a profile\n        user.createProfile(3, \"Charlie\", \"charlie@email.com\", 25, \"Germany\", true);\n        user.deleteProfile(3);\n\n        // Expect revert on reading a deleted profile\n        vm.expectRevert(\"Profile not found or has been deleted\");\n        user.getProfile(3);\n    }\n\n    function testCannotCreateDuplicateProfile() public {\n        // Create the profile\n        user.createProfile(4, \"Dan\", \"dan@email.com\", 35, \"India\", false);\n\n        // Attempt to create with the same ID again should revert\n        vm.expectRevert(\"Profile already exists\");\n        user.createProfile(4, \"DanAgain\", \"dan@retry.com\", 36, \"India\", true);\n    }\n\n    function testCannotUpdateNonexistentProfile() public {\n        // Try to update a profile that was never created\n        vm.expectRevert(\"Profile does not exist or has been deleted\");\n        user.updateProfile(5, \"Eve\", \"eve@email.com\", 31, \"Brazil\", true);\n    }\n\n    function testCannotDeleteNonexistentProfile() public {\n        // Try to delete a profile that doesn't exist\n        vm.expectRevert(\"Profile already deleted or doesn't exist\");\n        user.deleteProfile(6);\n    }\n\n    function testSoftDeletedCannotBeRead() public {\n        // Create and delete a profile\n        user.createProfile(7, \"Zed\", \"zed@email.com\", 44, \"Japan\", true);\n        user.deleteProfile(7);\n\n        // Trying to read it should revert\n        vm.expectRevert(\"Profile not found or has been deleted\");\n        user.getProfile(7);\n    }\n\n    function testRecreateAfterSoftDelete() public {\n        // Create and delete a profile\n        user.createProfile(8, \"Tom\", \"tom@email.com\", 20, \"Italy\", true);\n        user.deleteProfile(8);\n\n        // Re-create it with new data (allowed due to soft-deletion)\n        user.createProfile(8, \"TomNew\", \"tom@new.com\", 21, \"Spain\", false);\n\n        UserData.UserProfile memory profile = user.getProfile(8);\n\n        assertEq(profile.name, \"TomNew\");\n        assertEq(profile.email, \"tom@new.com\");\n        assertEq(profile.age, 21);\n        assertEq(profile.country, \"Spain\");\n        assertEq(profile.isKYCApproved, false);\n        assertEq(profile.isDeleted, false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Parcel Split in Land Registry Smart Contract\nDESCRIPTION: Function that allows a registrar to initiate a parcel split request. It creates a new split request with validation checks and records the request details with the parcel's new areas, parcel numbers, and GPS polygons.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction requestSplit(\n    uint256 parcelId,\n    uint256[] memory newAreas,\n    string[] memory newParcelNumbers,\n    string[] memory newGpsPolygons\n) external onlyRegistrar noActiveRequest(parcelId) {\n    require(newAreas.length > 1, \"Must split into at least 2 parcels\");\n    require(newAreas.length == newParcelNumbers.length, \"Mismatched arrays\");\n    require(newAreas.length == newGpsPolygons.length, \"Mismatched polygons\");\n    require(!_parcels[parcelId].hasDispute, \"Parcel has dispute\");\n\n    uint256 requestId = uint256(keccak256(abi.encodePacked(parcelId, block.timestamp)));\n\n    _splitMergeRequests[requestId] = SplitMergeRequest({\n        parcelIds: _asSingletonArray(parcelId),\n        newAreas: newAreas,\n        newParcelNumbers: newParcelNumbers,\n        newGpsPolygons: newGpsPolygons,\n        isMerge: false,\n        approved: false,\n        approvalSignatures: new bytes[](0)\n    });\n\n    _parcelToRequest[parcelId] = requestId;\n    emit SplitRequested(requestId, parcelId);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing CRUD Operations for UserData Smart Contract with Hardhat and Viem\nDESCRIPTION: A comprehensive test suite for a UserData smart contract using Hardhat with Viem integration. The tests cover creating, reading, updating, and deleting user profiles with proper assertions and fixtures for test isolation.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadFixture } from \"@nomicfoundation/hardhat-toolbox-viem/network-helpers\";\nimport { expect } from \"chai\";\nimport hre from \"hardhat\";\n\n// Describe our test suite for the UserData contract\ndescribe(\"UserData\", function () {\n  // deployUserFixture deploys the UserData contract using viem and returns the deployed contract instance\n  // along with the address of the first wallet client.\n  async function deployUserFixture() {\n    // Deploy the UserData contract using viem.\n    // The contract name (\"UserData\") must match your contract's name.\n    const userContract = await hre.viem.deployContract(\"UserData\");\n    // Get the first wallet client's account address to use as a signer for simulate calls.\n    const account = (await hre.viem.getWalletClients())[0].account.address;\n    return { userContract, account };\n  }\n\n  // Define a sample user profile object for tests.\n  const sampleProfile = {\n    userId: 1n, // BigInt literal is used for user IDs\n    name: \"Alice\",\n    email: \"alice@example.com\",\n    age: 30,\n    country: \"Wonderland\",\n    isKYCApproved: true,\n  };\n\n  // -------------------------------\n  // Tests for createProfile functionality\n  // -------------------------------\n  describe(\"createProfile\", function () {\n    it(\"should create a new profile\", async function () {\n      // Use loadFixture to deploy a fresh instance of the contract.\n      const { userContract } = await loadFixture(deployUserFixture);\n\n      // Call the write method for createProfile with sampleProfile data.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Read the stored profile from the contract using the read method.\n      const profile = (await userContract.read.getProfile([\n        sampleProfile.userId,\n      ])) as {\n        name: string;\n        email: string;\n        age: number;\n        country: string;\n        isKYCApproved: boolean;\n      };\n\n      // Assert that the returned profile data matches our input values.\n      expect(profile.name).to.equal(sampleProfile.name);\n      expect(profile.email).to.equal(sampleProfile.email);\n    });\n\n    it(\"should not allow duplicate profile creation\", async function () {\n      // Deploy a fresh instance using the fixture.\n      const { userContract, account } = await loadFixture(deployUserFixture);\n\n      // Create a profile with the sample data.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Attempt to simulate (dry-run) creating a duplicate profile.\n      // We use simulate.createProfile so that no state change occurs if it fails.\n      try {\n        await userContract.simulate.createProfile(\n          [sampleProfile.userId, \"Bob\", \"bob@example.com\", 25, \"Utopia\", false],\n          { account }\n        );\n        // If no error is thrown, the test should fail.\n        expect.fail(\"Expected simulate.createProfile to revert\");\n      } catch (err: any) {\n        // Check that an error is thrown.\n        expect(err).to.exist;\n      }\n    });\n  });\n\n  // -------------------------------\n  // Tests for updateProfile functionality\n  // -------------------------------\n  describe(\"updateProfile\", function () {\n    it(\"should update an existing profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract } = await loadFixture(deployUserFixture);\n\n      // First, create the profile using the sample data.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Update the profile's email using updateProfile.\n      await userContract.write.updateProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        \"alice@updated.com\", // new email value\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Read the updated profile.\n      const updated = (await userContract.read.getProfile([\n        sampleProfile.userId,\n      ])) as {\n        name: string;\n        email: string;\n        age: number;\n        country: string;\n        isKYCApproved: boolean;\n      };\n\n      // Verify that the email was updated.\n      expect(updated.email).to.equal(\"alice@updated.com\");\n    });\n\n    it(\"should fail to update non-existent profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract, account } = await loadFixture(deployUserFixture);\n\n      // Attempt to simulate updating a profile that does not exist.\n      try {\n        await userContract.simulate.updateProfile(\n          [999n, \"Ghost\", \"ghost@void.com\", 99, \"Nowhere\", false],\n          { account }\n        );\n        expect.fail(\"Expected simulate.updateProfile to revert\");\n      } catch (err: any) {\n        // Just ensure that an error was thrown.\n        expect(err).to.exist;\n      }\n    });\n  });\n\n  // -------------------------------\n  // Tests for deleteProfile functionality\n  // -------------------------------\n  describe(\"deleteProfile\", function () {\n    it(\"should soft delete a profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract } = await loadFixture(deployUserFixture);\n\n      // Create the profile.\n      await userContract.write.createProfile([\n        sampleProfile.userId,\n        sampleProfile.name,\n        sampleProfile.email,\n        sampleProfile.age,\n        sampleProfile.country,\n        sampleProfile.isKYCApproved,\n      ]);\n\n      // Delete the profile.\n      await userContract.write.deleteProfile([sampleProfile.userId]);\n\n      // Try reading the profile, expecting it to revert.\n      try {\n        await userContract.read.getProfile([sampleProfile.userId]);\n        expect.fail(\"Expected getProfile to revert\");\n      } catch (err: any) {\n        expect(err).to.exist;\n      }\n    });\n\n    it(\"should fail to delete a non-existent profile\", async function () {\n      // Deploy a fresh instance.\n      const { userContract, account } = await loadFixture(deployUserFixture);\n\n      // Attempt to simulate deleting a profile that does not exist.\n      try {\n        await userContract.simulate.deleteProfile([123n], { account });\n        expect.fail(\"Expected simulate.deleteProfile to revert\");\n      } catch (err: any) {\n        expect(err).to.exist;\n      }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Schema with the Ethereum Attestation Service\nDESCRIPTION: This JavaScript code connects to the Ethereum blockchain, instantiates the SchemaRegistry contract, and registers a new schema for social media ownership verification. The schema includes fields for username, platform, and handle, making it suitable for attesting to social media account ownership.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\n\n// Configuration object for network and contract details\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // The network endpoint (e.g., Ethereum mainnet/testnet)\n  registryAddress: \"YOUR_SCHEMA_REGISTRY_ADDRESS_HERE\", // Where the SchemaRegistry contract lives\n  privateKey: \"YOUR_PRIVATE_KEY_HERE\", // Your wallet's private key (keep this secret!)\n};\n\n// Create connection to blockchain and setup contract interaction\nconst provider = new ethers.JsonRpcProvider(config.rpcUrl);\nconst signer = new ethers.Wallet(config.privateKey, provider);\nconst schemaRegistry = new ethers.Contract(\n  config.registryAddress,\n  [\n    // This event helps us track when new schemas are registered\n    \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n    // This function lets us register new schemas\n    \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\",\n  ],\n  signer\n);\n\nasync function registerSchema() {\n  try {\n    // Define what data fields our attestations will contain\n    const schema = \"string username, string platform, string handle\";\n    const resolverAddress = ethers.ZeroAddress; // No special validation needed\n    const revocable = true; // Attestations can be revoked if needed\n\n    console.log(\"🚀 Registering schema for social media ownership...\");\n    // Send the transaction to create our schema\n    const tx = await schemaRegistry.register(\n      schema,\n      resolverAddress,\n      revocable\n    );\n    const receipt = await tx.wait(); // Wait for blockchain confirmation\n\n    // Get our schema's unique ID from the transaction\n    const schemaUID = receipt.logs[0].topics[1];\n    console.log(\"✅ Schema registered successfully! UID:\", schemaUID);\n  } catch (error) {\n    console.error(\"❌ Error registering schema:\", error.message);\n  }\n}\n\nregisterSchema();\n```\n\n----------------------------------------\n\nTITLE: Creating an EAS Attestation with User Data\nDESCRIPTION: Creates a new attestation on the Ethereum Attestation Service using a previously registered schema. The function encodes the attestation data according to the schema structure, submits the transaction to create the attestation, and stores the attestation UID for later verification.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables\nconst EAS = global.get('eas');\nconst schemaUID = msg.schemaUID;\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new eassdk.SchemaEncoder(\"string username, string platform, string handle\");\n\n// The actual data we want to attest to\nconst attestationData = [\n    { name: \"username\", value: \"awesome_developer\", type: \"string\" },\n    { name: \"platform\", value: \"GitHub\", type: \"string\" },\n    { name: \"handle\", value: \"@devmaster\", type: \"string\" }\n];\n\ntry {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation\n    const tx = await eas.attest({\n        schema: schemaUID,\n        data: {\n            recipient: \"0x0000000000000000000000000000000000000000\",  // Public attestation\n            expirationTime: 0,              // Never expires\n            revocable: true,                // Can be revoked later if needed\n            data: encodedData              // Our encoded attestation data\n        }\n    });\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n\n    // Store attestation UID for later verification\n    global.set('attestationUID', receipt.attestationUID);\n\n    msg.payload = {\n        success: true,\n        attestationUID: receipt,\n        message: \"Attestation created successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Calculating Contract Address in Ethereum with JavaScript\nDESCRIPTION: JavaScript code using ethers.js to calculate the deterministic address of a smart contract based on deployer address and nonce before deployment completes.\n\nLANGUAGE: javascript\nCODE:\n```\nconst contractAddress = ethers.utils.getContractAddress({\n  from: \"0xd8cD4DAfD4e581dE9e69fB9588b6E547C206Efd1\",\n  nonce: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying an EAS Attestation\nDESCRIPTION: Retrieves and verifies an existing attestation from the Ethereum Attestation Service. This function fetches the attestation data using its UID, decodes the data using the schema encoder, and returns the attestation details including its validity status and the decoded data.\n\nLANGUAGE: javascript\nCODE:\n```\nconst EAS = global.get('eas');\nconst attestationUID = msg.attestationUID;\n\ntry {\n    const attestation = await eas.getAttestation(attestationUID);\n    const schemaEncoder = new eassdk.SchemaEncoder(\"string pshandle, string socialMedia, string socialMediaHandle\");\n    const decodedData = schemaEncoder.decodeData(attestation.data);\n\n    msg.payload = {\n        isValid: !attestation.revoked,\n        attestation: {\n            attester: attestation.attester,\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\n            expirationTime: attestation.expirationTime > 0 \n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\n                : 'Never',\n            revoked: attestation.revoked\n        },\n        data: {\n            psHandle: decodedData[0].value.toString(),\n            socialMedia: decodedData[1].value.toString(),\n            socialMediaHandle: decodedData[2].value.toString()\n        }\n    };\n} catch (error) {\n    msg.payload = { \n        success: false, \n        error: error.message,\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Executing Split and Merge Requests in Land Registry Smart Contract\nDESCRIPTION: Private functions that handle the execution of approved split and merge requests, creating new parcels and updating blockchain state. These implement the core logic for modifying land boundaries in the registry.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _executeRequest(uint256 requestId) private {\n    SplitMergeRequest storage request = _splitMergeRequests[requestId];\n\n    if (request.isMerge) {\n        _executeMerge(requestId);\n    } else {\n        _executeSplit(requestId);\n    }\n\n    request.approved = true;\n}\n\nfunction _executeSplit(uint256 requestId) private {\n    SplitMergeRequest storage request = _splitMergeRequests[requestId];\n    uint256 originalParcelId = request.parcelIds[0];\n    LandParcel storage original = _parcels[originalParcelId];\n\n    uint256[] memory newParcelIds = new uint256[](request.newAreas.length);\n    uint256 totalArea = 0;\n\n    for (uint i = 0; i < request.newAreas.length; i++) {\n        totalArea = totalArea.add(request.newAreas[i]);\n\n        uint256 newParcelId = _parcelIdCounter.current();\n        _parcelIdCounter.increment();\n\n        _parcels[newParcelId] = LandParcel({\n            id: newParcelId,\n            parcelNumber: request.newParcelNumbers[i],\n            owner: original.owner,\n            area: request.newAreas[i],\n            gpsPolygon: request.newGpsPolygons[i],\n            jurisdiction: original.jurisdiction,\n            landUseType: original.landUseType,\n            landRate: original.landRate,\n            hasDispute: false,\n            buildingIds: new uint256[](0),\n            parentParcels: _asSingletonArray(originalParcelId),\n            paymentHistory: original.paymentHistory,\n            lastTaxPaid: original.lastTaxPaid,\n            ipfsHash: original.ipfsHash // Default to original IPFS hash; update off-chain if necessary\n        });\n\n        _mint(original.owner, newParcelId);\n        _setTokenURI(newParcelId, original.ipfsHash);\n        newParcelIds[i] = newParcelId;\n    }\n\n    require(totalArea == original.area, \"Area mismatch in split\");\n    _burn(originalParcelId);\n    emit SplitCompleted(requestId, newParcelIds);\n}\n\nfunction _executeMerge(uint256 requestId) private {\n    SplitMergeRequest storage request = _splitMergeRequests[requestId];\n\n    // Verify parcels can be merged\n    uint256 totalArea = 0;\n    address commonOwner = _parcels[request.parcelIds[0]].owner;\n    string memory commonJurisdiction = _parcels[request.parcelIds[0]].jurisdiction;\n\n    for (uint i = 0; i < request.parcelIds.length; i++) {\n        LandParcel storage parcel = _parcels[request.parcelIds[i]];\n        require(parcel.owner == commonOwner, \"Different owners\");\n        require(keccak256(bytes(parcel.jurisdiction)) == keccak256(bytes(commonJurisdiction)), \"Different jurisdictions\");\n        require(!parcel.hasDispute, \"Parcel has dispute\");\n\n        totalArea = totalArea.add(parcel.area);\n    }\n\n    // Create merged parcel\n    uint256 newParcelId = _parcelIdCounter.current();\n    _parcelIdCounter.increment();\n\n    _parcels[newParcelId] = LandParcel({\n        id: newParcelId,\n        parcelNumber: request.newParcelNumbers[0],\n        owner: commonOwner,\n        area: totalArea,\n        gpsPolygon: \"\", // To be set by off-chain service\n        jurisdiction: commonJurisdiction,\n        landUseType: _parcels[request.parcelIds[0]].landUseType,\n        landRate: _calculateAverageRate(request.parcelIds),\n        hasDispute: false,\n        buildingIds: _combineBuildingIds(request.parcelIds),\n        parentParcels: request.parcelIds,\n        paymentHistory: _combinePaymentHistories(request.parcelIds),\n        lastTaxPaid: block.timestamp,\n        ipfsHash: \"\" // To be updated off-chain\n    });\n\n    _mint(commonOwner, newParcelId);\n    // Optionally, set token URI when IPFS hash is available\n    _setTokenURI(newParcelId, \"\");\n\n    // Burn original parcels\n    for (uint i = 0; i < request.parcelIds.length; i++) {\n        _burn(request.parcelIds[i]);\n        _parcelToRequest[request.parcelIds[i]] = 0;\n    }\n\n    emit MergeCompleted(requestId, newParcelId);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Data Model with TypeScript Decorators\nDESCRIPTION: Implementation of the Asset class that defines the data structure for assets in the chaincode. Uses fabric-contract-api decorators to mark properties for serialization, and implements a constructor for asset initialization.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Object, Property } from \"fabric-contract-api\";\n\n@Object()\nexport class Asset {\n  @Property()\n  public docType?: string;\n\n  @Property()\n  public ID: string;\n\n  @Property()\n  public Color: string;\n\n  @Property()\n  public Size: number;\n\n  @Property()\n  public Owner: string;\n\n  @Property()\n  public AppraisedValue: number;\n\n  constructor(\n    ID: string,\n    Color: string,\n    Size: number,\n    Owner: string,\n    AppraisedValue: number\n  ) {\n    this.ID = ID;\n    this.Color = Color;\n    this.Size = Size;\n    this.Owner = Owner;\n    this.AppraisedValue = AppraisedValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 with Meta Transactions in Solidity\nDESCRIPTION: Code snippet showing the key differences when implementing an ERC-20 token with meta transaction support. The contract inherits from ERC2771Context and overrides messaging functions to properly handle meta transactions.\n\nLANGUAGE: solidity\nCODE:\n```\n...\nconstructor(\n  ...\n  address trustedForwarder\n) ERC20(name_, symbol_) ERC2771Context(trustedForwarder_)\n...\n\nfunction _msgSender() internal view override(Context, ERC2771Context) returns (address sender) {\n  sender = ERC2771Context._msgSender();\n}\n\nfunction _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata) {\n  return ERC2771Context._msgData();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing AssemblyScript Event Handlers for User Profile Events\nDESCRIPTION: This TypeScript file contains the event handler functions that process blockchain events emitted by the UserData contract. Each handler extracts data from the event, updates the relevant UserProfile entity, and creates event-specific entities to maintain a historical audit trail of profile changes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BigInt } from \"@graphprotocol/graph-ts\";\nimport {\n  ProfileCreated as ProfileCreatedEvent,\n  ProfileUpdated as ProfileUpdatedEvent,\n  ProfileDeleted as ProfileDeletedEvent,\n} from \"../../generated/userdata/UserData\";\nimport {\n  UserProfile,\n  ProfileCreated,\n  ProfileUpdated,\n  ProfileDeleted,\n} from \"../../generated/schema\";\nimport { fetchUserProfile } from \"../fetch/userdata\";\n\nexport function handleProfileCreated(event: ProfileCreatedEvent): void {\n  // Generate a unique event ID using transaction hash and log index\n  let id = event.transaction.hash.toHex() + \"-\" + event.logIndex.toString();\n  let entity = new ProfileCreated(id);\n  entity.userId = event.params.userId;\n\n  // Fetch or create the UserProfile entity\n  let profile = fetchUserProfile(event.params.userId);\n  profile.name = event.params.name;\n  profile.email = event.params.email;\n  profile.age = event.params.age;\n  profile.country = event.params.country;\n  profile.isKYCApproved = event.params.isKYCApproved;\n  profile.isDeleted = false;\n  profile.save();\n\n  // Link the event entity to the user profile and save\n  entity.userProfile = profile.id;\n  entity.save();\n}\n\nexport function handleProfileUpdated(event: ProfileUpdatedEvent): void {\n  let id = event.transaction.hash.toHex() + \"-\" + event.logIndex.toString();\n  let entity = new ProfileUpdated(id);\n  entity.userId = event.params.userId;\n\n  // Retrieve and update the existing UserProfile entity\n  let profile = fetchUserProfile(event.params.userId);\n  profile.name = event.params.name;\n  profile.email = event.params.email;\n  profile.age = event.params.age;\n  profile.country = event.params.country;\n  profile.isKYCApproved = event.params.isKYCApproved;\n  profile.isDeleted = false;\n  profile.save();\n\n  entity.userProfile = profile.id;\n  entity.save();\n}\n\nexport function handleProfileDeleted(event: ProfileDeletedEvent): void {\n  let id = event.transaction.hash.toHex() + \"-\" + event.logIndex.toString();\n  let entity = new ProfileDeleted(id);\n  entity.userId = event.params.userId;\n\n  // Retrieve the UserProfile entity and mark it as deleted\n  let profile = fetchUserProfile(event.params.userId);\n  profile.isDeleted = true;\n  profile.save();\n\n  entity.userProfile = profile.id;\n  entity.save();\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Attestations with EAS SDK in JavaScript\nDESCRIPTION: Code for off-chain verification of attestations using the EAS SDK. This example demonstrates how to connect to the blockchain, fetch an attestation by its UID, and verify its details including the attester and whether it's been revoked.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\nconst { EAS } = require(\"@ethereum-attestation-service/eas-sdk\");\n\n// Basic configuration for connecting to the network\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // Network endpoint\n  easAddress: \"YOUR_EAS_CONTRACT_ADDRESS_HERE\", // Main EAS contract\n};\n\nasync function verifyAttestation(attestationUID) {\n  // Setup our blockchain connection\n  const provider = new ethers.JsonRpcProvider(config.rpcUrl);\n  const EAS = new EAS(config.easAddress);\n  eas.connect(provider);\n\n  console.log(\"🔍 Verifying attestation:\", attestationUID);\n\n  // Try to find the attestation on the blockchain\n  const attestation = await eas.getAttestation(attestationUID);\n\n  // Check if we found anything\n  if (!attestation) {\n    console.error(\"❌ Attestation not found\");\n    return;\n  }\n\n  // Show the attestation details\n  console.log(\"✅ Attestation details:\");\n  console.log(\"Attester:\", attestation.attester); // Who created this attestation\n  console.log(\"Data:\", attestation.data); // The actual attested data\n  console.log(\"Revoked:\", attestation.revoked ? \"Yes\" : \"No\"); // Is it still valid?\n}\n\n// Replace with your attestation UID\nverifyAttestation(\"YOUR_ATTESTATION_UID_HERE\");\n```\n\n----------------------------------------\n\nTITLE: Filing and Resolving Land Disputes in Blockchain Registry\nDESCRIPTION: Functions for dispute management that allow authorized dispute resolvers to file and resolve disputes on land parcels. The dispute status affects whether parcels can be involved in split/merge operations.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fileDispute(uint256 parcelId, string memory details)\n    external\n    onlyRole(DISPUTE_RESOLVER_ROLE)\n    noActiveRequest(parcelId)\n{\n    _parcels[parcelId].hasDispute = true;\n    emit DisputeFiled(parcelId, details);\n}\n\nfunction resolveDispute(uint256 parcelId)\n    external\n    onlyRole(DISPUTE_RESOLVER_ROLE)\n{\n    _parcels[parcelId].hasDispute = false;\n    emit DisputeResolved(parcelId);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Asset Transfer Contract in Fabric Chaincode\nDESCRIPTION: Entry point file that exports the AssetTransferContract class and defines the contracts array required by Fabric chaincode. It imports and re-exports the main contract implementation.\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Contract } from \"fabric-contract-api\";\nimport { AssetTransferContract } from \"./assetTransfer\";\n\nexport { AssetTransferContract } from \"./assetTransfer\";\n\nexport const contracts: Array<typeof Contract> = [AssetTransferContract];\n```\n\n----------------------------------------\n\nTITLE: Cloning the SettleMint SDK Repository for Contribution\nDESCRIPTION: Commands to clone the forked SettleMint SDK repository to your local machine and navigate to the project directory as part of the contribution workflow.\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/your-username/sdk.git\ncd sdk\n```\n\n----------------------------------------\n\nTITLE: Deploying an ERC-20 Token in TypeScript\nDESCRIPTION: Deployment script for an ERC-20 token using Hardhat. The script specifies the token name and symbol as arguments for the deployment function, which can be customized as needed.\n\nLANGUAGE: typescript\nCODE:\n```\nawait deploy(\"GenericToken\", {\n  from: deployer,\n  args: [\"GenericToken\", \"GT\"],\n  log: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Helper Utility for UserProfile Entity Management in TypeScript\nDESCRIPTION: This utility function abstracts the logic of either loading an existing UserProfile entity or creating a new one if it doesn't exist. It initializes all required fields with default values to prevent errors during Graph Node processing and enhances reusability by reducing boilerplate code in handler functions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BigInt } from \"@graphprotocol/graph-ts\";\nimport { UserProfile } from \"../../generated/schema\";\n\n/**\n * Fetches a UserProfile entity using the given userId.\n * If it does not exist, a new UserProfile entity is created with default values.\n *\n * @param userId - The user ID as a BigInt.\n * @returns The UserProfile entity.\n */\nexport function fetchUserProfile(userId: BigInt): UserProfile {\n  let id = userId.toString();\n  let user = UserProfile.load(id);\n\n  if (!user) {\n    user = new UserProfile(id);\n    user.name = \"\";\n    user.email = \"\";\n    user.age = 0;\n    user.country = \"\";\n    user.isKYCApproved = false;\n    user.isDeleted = false;\n  }\n\n  return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dispute Filing for IP Assets in Solidity\nDESCRIPTION: A function that allows IP asset owners to file disputes about their registered assets. The function verifies that the asset exists, only the owner can file a dispute, and no dispute has been previously filed for the asset.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fileDispute(\n    uint256 assetId,\n    string memory disputeDetails\n) external whenNotPaused nonReentrant {\n    IPAsset storage asset = ipAssets[assetId];\n    require(asset.id != 0, \"Asset does not exist\");\n    require(msg.sender == asset.owner, \"Only asset owner can file a dispute\");\n    require(!asset.disputeFiled, \"Dispute already filed\");\n\n    asset.disputeFiled = true;\n    asset.disputeDetails = disputeDetails;\n    asset.disputeResolved = false;\n    asset.disputeResolution = \"\";\n\n    emit DisputeFiled(assetId, msg.sender, disputeDetails);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Libraries in SettleMint Integration Studio\nDESCRIPTION: This example demonstrates how to use the default libraries available in SettleMint's Integration Studio, including ethers.js and IPFS client. It shows how to create providers and interact with both blockchain and IPFS services using the platform's global libraries.\n\nLANGUAGE: javascript\nCODE:\n```\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\n\nconst ipfsHttpClient = global.get(\"ipfsHttpClient\");\nconst client = ipfsHttpClient.create(`${ipfsEndpoint}/${accessToken}/api/v0`);\n\nconst uint8arrays = global.get(\"uint8arrays\");\nconst itAll = global.get(\"itAll\");\nconst data = uint8arrays.toString(\n  uint8arrays.concat(await itAll(client.cat(cid)))\n);\n```\n\n----------------------------------------\n\nTITLE: Importing External Libraries in Node-RED Functions\nDESCRIPTION: This code demonstrates how to use pre-loaded libraries in the Integration Studio. It shows examples of accessing the ethers.js library for blockchain interactions and IPFS libraries for decentralized storage operations.\n\nLANGUAGE: javascript\nCODE:\n```\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\n\nconst ipfsHttpClient = global.get(\"ipfsHttpClient\");\nconst client = ipfsHttpClient.create(`${ipfsEndpoint}/${accessToken}/api/v0`);\n\nconst uint8arrays = global.get(\"uint8arrays\");\nconst itAll = global.get(\"itAll\");\nconst data = uint8arrays.toString(\n  uint8arrays.concat(await itAll(client.cat(cid)))\n);\n```\n\n----------------------------------------\n\nTITLE: Structuring JSON-RPC Request for Besu Node Communication\nDESCRIPTION: Example of a properly formatted JSON-RPC request for communicating with a Hyperledger Besu node. This shows the required format including the JSON-RPC version, node ID, method name, and parameters object which is used to make API calls to Besu nodes deployed on the SettleMint platform.\n\nLANGUAGE: json\nCODE:\n```\n{\n\"jsonrpc\":\"2.0\"\n\"Id\": nodeId\n\"method\":\"methodName\"\n\"params\":{\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Consent in Healthcare Blockchain System in Solidity\nDESCRIPTION: Functions for patients to grant and revoke consent to healthcare providers. The consent includes purpose documentation and timestamps for audit trails.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction grantConsent(\n        address providerAddress,\n        string memory purpose\n    ) external onlyValidPatient(msg.sender) whenNotPaused {\n        require(_providerExists(providerAddress), \"Provider not found\");\n        require(!_consents[msg.sender][providerAddress].isGranted, \"Consent already granted\");\n\n        _consents[msg.sender][providerAddress] = Consent({\n            providerAddress: providerAddress,\n            isGranted: true,\n            grantDate: block.timestamp,\n            revokeDate: 0,\n            purpose: purpose\n        });\n\n        emit ConsentGranted(msg.sender, providerAddress, purpose);\n    }\n\n    function revokeConsent(address providerAddress) external onlyValidPatient(msg.sender) {\n        require(_consents[msg.sender][providerAddress].isGranted, \"No active consent\");\n\n        _consents[msg.sender][providerAddress].isGranted = false;\n        _consents[msg.sender][providerAddress].revokeDate = block.timestamp;\n\n        emit ConsentRevoked(msg.sender, providerAddress);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph YAML Manifest for Ethereum UserData Contract\nDESCRIPTION: This YAML configuration defines the contract source, mapping specifications, and event handlers for the UserData subgraph. It specifies the contract address, ABI location, entities to track, and maps smart contract events to handler functions.\n\nLANGUAGE: yaml\nCODE:\n```\n- kind: ethereum/contract\n  name: { id }\n  network: { chain }\n  source:\n    address: \"{address}\"\n    abi: UserData\n    startBlock: { startBlock }\n  mapping:\n    kind: ethereum/events\n    apiVersion: 0.0.5\n    language: wasm/assemblyscript\n    entities:\n      - UserProfile\n      - ProfileCreated\n      - ProfileUpdated\n      - ProfileDeleted\n    abis:\n      - name: UserData\n        file: \"{root}/out/UserData.sol/UserData.json\"\n    eventHandlers:\n      - event: ProfileCreated(indexed uint256,string,string,uint8,string,bool)\n        handler: handleProfileCreated\n      - event: ProfileUpdated(indexed uint256,string,string,uint8,string,bool)\n        handler: handleProfileUpdated\n      - event: ProfileDeleted(indexed uint256)\n        handler: handleProfileDeleted\n    file: { file }\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subgraph Architecture with Mermaid Flowchart\nDESCRIPTION: This flowchart illustrates the complete architecture of a subgraph deployment, showing the relationships between input files, configuration, smart contracts, event handlers, helper functions, and the GraphQL API. It visualizes how data flows from contract events through mapping functions to the Graph Node database.\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n\n%% --- Inputs ---\nF1[\"out/UserData.json (ABI from compiler)                               \"]:::tooling\nF2[\"deployed_addresses.json (Deployed contract address)              \"]:::tooling\nF3[\"deployments/[chain-id] (Defines network chain ID)                 \"]:::tooling\n\n%% --- Configuration Files ---\nA1[\"1 - subgraph.config.json - Declares network, output, and datasources   \"]:::config\nA2[\"2 - userdata.yaml - Sets ABI, contract address, event handlers         \"]:::config\n\n%% --- Contract & Events ---\nB1[\"UserData.sol - Smart contract with profile lifecycle logic            \"]:::contract\nB2[\"Events: ProfileCreated, ProfileUpdated, ProfileDeleted                \"]:::event\n\n%% --- Mappings & Helpers ---\nC1[\"3 - userdata.ts - Mapping logic to handle events and update entities   \"]:::mapping\nC2[\"4 - fetch/userdata.ts - Loads or creates UserProfile entity            \"]:::helper\n\n%% --- Schema & Storage ---\nD1[\"5 - userdata.gql.json - GraphQL schema defining types and relationships\"]:::schema\nD2[\"Graph Node DB - Stores UserProfile and events, queryable via GraphQL \"]:::db\n\n%% --- API Layer ---\nE1[\"GraphQL API - Exposes indexed data to dApps and dashboards            \"]:::api\n\n%% --- Connections ---\nF1 --> A2\nF2 --> A1\nF3 --> A1\nA1 --> A2\nA2 --> B1\nB1 --> B2\nB2 --> C1\nA2 --> C1\nC1 --> C2\nC1 --> D2\nD1 --> D2\nD2 --> E1\n\n%% --- Styling ---\nclassDef config fill:#D0EBFF,stroke:#1E40AF,stroke-width:1px\nclassDef mapping fill:#FEF3C7,stroke:#B45309,stroke-width:1px\nclassDef schema fill:#E0F2FE,stroke:#0369A1,stroke-width:1px\nclassDef contract fill:#FECACA,stroke:#B91C1C,stroke-width:1px\nclassDef event fill:#FCD34D,stroke:#92400E,stroke-width:1px\nclassDef db fill:#DCFCE7,stroke:#15803D,stroke-width:1px\nclassDef api fill:#E9D5FF,stroke:#7C3AED,stroke-width:1px\nclassDef abi fill:#F3E8FF,stroke:#9333EA,stroke-width:1px\nclassDef helper fill:#F5F5F4,stroke:#3F3F46,stroke-width:1px\nclassDef tooling fill:#F0F9FF,stroke:#0284C7,stroke-width:1px\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint Platform Installation with Helm Values\nDESCRIPTION: A comprehensive values.yaml configuration file for installing the SettleMint platform on Kubernetes. This configuration includes settings for ingress, database connections, authentication providers, deployment targets, and various blockchain network components.\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: true\n  className: \"nginx\"\n  host: '<your-domain>'\n  annotations:\n    nginx.ingress.kubernetes.io/use-regex: \"true\"\n    nginx.ingress.kubernetes.io/proxy-ssl-server-name: \"on\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"500m\"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: \"3600\"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: \"3600\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\n    cert-manager.io/cluster-issuer: \"letsencrypt\"  # If using cert-manager\n  tls:\n    - secretName: 'platform-tls'\n      hosts:\n        - '<your-domain>'\n        - '*.<your-domain>'\n\nredis:\n  host: '<redis-host>'\n  port: '<redis-port>'\n  password: '<redis-password>'\n  tls: true\n\npostgresql:\n  host: '<postgresql-host>'\n  port: '<postgresql-port>'\n  user: '<postgresql-user>'\n  password: '<postgresql-password>'\n  database: '<database-name>'\n  sslMode: require\n\nauth:\n  jwtSigningKey: '<your-jwt-signing-key>'\n  providers:\n    google:\n      enabled: true\n      clientID: '<google-client-id>'\n      clientSecret: '<google-client-secret>'\n    microsoftEntraId:\n      enabled: true\n      clientID: '<microsoft-client-id>'\n      clientSecret: '<microsoft-client-secret>'\n      tenantId: '<microsoft-tenant-id>'\n\nvault:\n  address: '<vault-address>'\n  roleId: '<vault-role-id>'\n  secretId: '<vault-secret-id>'\n  namespace: 'vault'\n\nfeatures:\n  observability:\n    metrics:\n      enabled: true\n      apiUrl: '<victoria-metrics-url>'\n    logs:\n      enabled: true\n      apiUrl: '<loki-url>'\n  deploymentEngine:\n    platform:\n      domain:\n        hostname: '<your-domain>'\n    clusterManager:\n      domain:\n        hostname: '<your-domain>'\n    state:\n      connectionUrl: 's3://<bucket-name>?region=<region>'\n      secretsProvider: 'passphrase'\n      credentials:\n        encryptionKey: '<your-encryption-key>'\n        aws:\n          accessKeyId: '<aws-access-key>'\n          secretAccessKey: '<aws-secret-key>'\n          region: '<aws-region>'\n        # azure:\n        #   # -- Azure storage account name\n        #   storageAccount: '<azure-storage-account>'\n        #   # -- Azure storage account key\n        #   storageKey: '<azure-storage-key>'\n    targets:\n      - id: '<cluster-id>'\n        name: '<cluster-name>'\n        icon: '<cluster-icon>'\n        clusters:\n          - id: '<cluster-instance-id>'\n            name: '<cluster-instance-name>'\n            icon: '<cluster-instance-icon>'\n            location:\n              lat: '<latitude>'\n              lon: '<longitude>'\n            connection:\n              sameCluster:\n                enabled: true\n            namespace:\n              single:\n                name: '<namespace>'\n            domains:\n              service:\n                tls: true\n                hostname: '<your-domain>'\n            storage:\n              storageClass: '<storage-class>'\n            ingress:\n              ingressClass: '<ingress-class>'\n            capabilities:\n              mixedLoadBalancers: false\n\napp:\n  replicaCount: '<replicas>'\napi:\n  replicaCount: '<replicas>'\n  existingSecret: '<platform-secret>'\njob:\n  resources:\n    requests:\n      cpu: '<cpu-request>'\n      memory: '<memory-request>'\n  autoscaling:\n    enabled: true\ndeployWorker:\n  resources:\n    requests:\n      cpu: '<cpu-request>'\n      memory: '<memory-request>'\n  autoscaling:\n    enabled: true\nclusterManager:\n  replicaCount: '<replicas>'\ndocs:\n  replicaCount: '<replicas>'\n\nimagePullCredentials:\n  registries:\n    harbor:\n      enabled: true\n      registry: \"harbor.settlemint.com\"\n      username: '<registry-username>'\n      password: '<registry-password>'\n      email: '<registry-email>'\n\nsupport:\n  kubernetes-replicator:\n    enabled: true\n\nfeatures:\n  billing:\n    enabled: false\n    alerting:\n      slack:\n        enabled: false\n        webhookUrl: ''\n    stripe:\n      apiSecret: ''\n      webhookSecret: ''\n      webhookUrl: ''\n      apiLiveMode: false\n      taxRateId: ''\n      publishableKey: ''\n    autoDelete:\n      enabled: false\n    emailUsageExcel:\n      enabled: true\n\n  privateKeys:\n    hsm:\n      awsKms:\n        enabled: false\n    txsigner:\n      image:\n        registry: ghcr.io\n        repository: settlemint/btp-signer\n        tag: '7.6.10'\n\n  networks:\n    besu:\n      image:\n        registry: docker.io\n        repository: hyperledger/besu\n        tag: '24.12.2'\n    quorum:\n      image:\n        registry: docker.io\n        repository: quorumengineering/quorum\n        tag: '24.4.1'\n    geth:\n      image:\n        registry: docker.io\n        repository: ethereum/client-go\n        tag: 'alltools-v1.13.4'\n    fabric:\n      ca:\n        image:\n          registry: docker.io\n          repository: hyperledger/fabric-ca\n          tag: '1.5.13'\n      orderer:\n        image:\n          registry: docker.io\n          repository: hyperledger/fabric-orderer\n          tag: '2.5.10'\n      tools:\n        image:\n          registry: docker.io\n          repository: hyperledger/fabric-tools\n          tag: '2.5.10'\n      peer:\n        image:\n          registry: docker.io\n          repository: hyperledger/fabric-peer\n          tag: '2.5.10'\n      couchdb:\n        image:\n          registry: docker.io\n          repository: apache/couchdb\n          tag: '3.4.2'\n      dind:\n        image:\n          registry: docker.io\n          repository: library/docker\n          tag: '24.0.7-alpine3.18'\n    mainnets:\n      enabled: true\n      ethereumMetricsExporter:\n        image:\n          registry: docker.io\n          repository: ethpandaops/ethereum-metrics-exporter\n          tag: '0.26.0'\n\n  smartContractSets:\n    etherscan:\n      apiKeys:\n        etherscan: \"\"\n        polyscan: \"\"\n        zkevmpolyscan: \"\"\n        bscscan: \"\"\n        arbiscan: \"\"\n        optimistic: \"\"\n    IDE:\n      image:\n        registry: ghcr.io\n        repository: settlemint/btp-ide\n        tag: 'v7.6.5'\n    sets:\n      - id: starterkit-asset-tokenization\n        name: Asset Tokenization\n        image:\n          registry: ghcr.io\n          repository: settlemint/starterkit-asset-tokenization\n          tag: '0.0.11'\n      # ... (other sets can be added as needed)\n\n  customDomains:\n    enabled: false\n    outerIngressClass: \"nginx\"\n    email: \"\"\n\n  crons:\n    cleanup: \"0 */10 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Blockchain Query Function in Node-RED\nDESCRIPTION: This JavaScript function queries the latest block number from a Polygon Mumbai Testnet node. It uses the ethers.js library to connect to the RPC endpoint and retrieve the block number, which is then returned in the message payload.\n\nLANGUAGE: javascript\nCODE:\n```\n///////////////////////////////////////////////////////////\n// Configuration                                         //\n///////////////////////////////////////////////////////////\n\nconst rpcEndpoint = \"https://YOUR_NODE_RPC_ENDPOINT.settlemint.com\";\nconst accessToken = \"YOUR_APPLICATION_ACCESS_TOKEN_HERE\";\n\n///////////////////////////////////////////////////////////\n// Logic                                                 //\n///////////////////////////////////////////////////////////\n\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\nmsg.payload = await provider.getBlockNumber();\n\nreturn msg;\n\n///////////////////////////////////////////////////////////\n// End                                                   //\n///////////////////////////////////////////////////////////\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Creation in Fabric Chaincode with Go\nDESCRIPTION: Demonstrates state management in Hyperledger Fabric chaincode by implementing a CreateAsset function that checks if an asset exists, creates a new asset object, serializes it to JSON, and stores it in the ledger using PutState.\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface, id string, value string) error {\n    exists, err := s.AssetExists(ctx, id)\n    if err != nil {\n        return err\n    }\n    if exists {\n        return fmt.Errorf(\"asset already exists\")\n    }\n\n    asset := Asset{\n        ID:    id,\n        Value: value,\n    }\n    assetJSON, err := json.Marshal(asset)\n    if err != nil {\n        return err\n    }\n\n    return ctx.GetStub().PutState(id, assetJSON)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SettleMint Node with Web3.js\nDESCRIPTION: JavaScript code for establishing a connection to a SettleMint node using the Web3.js library. Requires the node URL with authentication token which can be obtained from node connection details.\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3 = require('web3');\nconst web3 = new Web3('https://your-node-url/token');\n```\n\n----------------------------------------\n\nTITLE: Quality Assurance Smart Contract in Solidity\nDESCRIPTION: This Solidity contract defines a quality assurance system for product certification. It includes a Certificate structure with product ID, timestamp, compliance standards, inspector information, and validation status.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract QualityAssurance {\n    struct Certificate {\n        bytes32 productId;\n        uint256 timestamp;\n        string[] standards;\n        address inspector;\n        bool valid;\n    }\n\n    mapping(bytes32 => Certificate) public certificates;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Address Data with Blockscout REST API\nDESCRIPTION: A collection of HTTP GET endpoints for retrieving address-related blockchain data, including balance information, transactions, token transfers, and NFT ownership details. These endpoints provide comprehensive access to address activities on the blockchain.\n\nLANGUAGE: http\nCODE:\n```\nGET /addresses                                              # Get native coin holders list\nGET /addresses/{address_hash}                               # Get address details\nGET /addresses/{address_hash}/transactions                  # Get transactions related to an address\nGET /addresses/{address_hash}/token-transfers               # Get token transfers\nGET /addresses/{address_hash}/internal-transactions         # Get internal transactions\nGET /addresses/{address_hash}/logs                          # Get logs related to an address\nGET /addresses/{address_hash}/blocks-validated              # Get blocks validated by the address\nGET /addresses/{address_hash}/token-balances                # Get all token balances\nGET /addresses/{address_hash}/tokens                        # Get token balances with filtering and pagination\nGET /addresses/{address_hash}/coin-balance-history          # Get coin balance history\nGET /addresses/{address_hash}/coin-balance-history-by-day   # Get balance history by day\nGET /addresses/{address_hash}/withdrawals                   # Get withdrawals related to an address\nGET /addresses/{address_hash}/nft                           # Get list of NFTs owned by an address\nGET /addresses/{address_hash}/nft/collections               # Get NFTs grouped by collection\n```\n\n----------------------------------------\n\nTITLE: Registering a Schema for EAS with JavaScript\nDESCRIPTION: JavaScript implementation for registering a schema in the Ethereum Attestation Service. The code connects to the SchemaRegistry contract, defines a schema for social media ownership verification with username, platform, and handle fields, and registers it on-chain.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\n\n// Configuration object for network and contract details\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // The network endpoint (e.g., Ethereum mainnet/testnet)\n  registryAddress: \"YOUR_SCHEMA_REGISTRY_ADDRESS_HERE\", // Where the SchemaRegistry contract lives\n  privateKey: \"YOUR_PRIVATE_KEY_HERE\", // Your wallet's private key (keep this secret!)\n};\n\n// Create connection to blockchain and setup contract interaction\nconst provider = new ethers.JsonRpcProvider(config.rpcUrl);\nconst signer = new ethers.Wallet(config.privateKey, provider);\nconst schemaRegistry = new ethers.Contract(\n  config.registryAddress,\n  [\n    // This event helps us track when new schemas are registered\n    \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n    // This function lets us register new schemas\n    \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\",\n  ],\n  signer\n);\n\nasync function registerSchema() {\n  try {\n    // Define what data fields our attestations will contain\n    const schema = \"string username, string platform, string handle\";\n    const resolverAddress = ethers.ZeroAddress; // No special validation needed\n    const revocable = true; // Attestations can be revoked if needed\n\n    console.log(\"🚀 Registering schema for social media ownership...\");\n    // Send the transaction to create our schema\n    const tx = await schemaRegistry.register(\n      schema,\n      resolverAddress,\n      revocable\n    );\n    const receipt = await tx.wait(); // Wait for blockchain confirmation\n\n    // Get our schema's unique ID from the transaction\n    const schemaUID = receipt.logs[0].topics[1];\n    console.log(\"✅ Schema registered successfully! UID:\", schemaUID);\n  } catch (error) {\n    console.error(\"❌ Error registering schema:\", error.message);\n  }\n}\n\nregisterSchema();\n```\n\n----------------------------------------\n\nTITLE: Registering EAS Schema with Ethereum Contract\nDESCRIPTION: A JavaScript function for Node-RED that registers a schema with the Ethereum Attestation Service. It creates a schema with user profile fields, initializes the SchemaRegistry contract, registers the schema, and returns the generated schema UID.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables set in init\nconst signer = global.get('signer');\nconst registryAddress = global.get('registryAddress');\n\n// Initialize SchemaRegistry contract\nconst schemaRegistry = new ethers.Contract(\n    registryAddress,\n    [\n        \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n        \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\"\n    ],\n    signer\n);\n\n// Define what data fields our attestations will contain\nconst schema = \"string username, string platform, string handle\";\nconst resolverAddress = \"0x0000000000000000000000000000000000000000\";  // No special validation needed\nconst revocable = true;  // Attestations can be revoked if needed\n\ntry {\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\n    const receipt = await tx.wait();\n\n    const schemaUID = receipt.logs[0].topics[1];\n    // Store schemaUID in global context for later use\n    global.set('schemaUID', schemaUID);\n\n    msg.payload = {\n        success: true,\n        schemaUID: schemaUID,\n        message: \"Schema registered successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Making RPC Calls to SettleMint Node with Curl\nDESCRIPTION: Bash command that demonstrates how to make a direct JSON-RPC call to a SettleMint node using curl. This example retrieves the current block number and shows how to format the request with proper headers and authentication.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://your-node-url \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-auth-token: <token>\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for Hyperledger Besu External Node\nDESCRIPTION: A Docker Compose configuration file that sets up a Hyperledger Besu node with the necessary ports, volumes, and configuration parameters to connect to an existing blockchain network. The configuration mounts the genesis file and data directory, exposes API ports, and configures various Besu parameters.\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  my-besu-node:\n    # Not required but recommended to use the same version as your nodes on the platform\n    image: hyperledger/besu:23.7.2\n    volumes:\n      # Mounts the genesis.json file into the container\n      - ./genesis.json:/config/genesis.json\n      # Mounts the data folder into the container, this will hold your actual blockchain data\n      - ./data:/data\n    ports:\n      # Exposes the port for the JSON-RPC HTTP API on http://localhost:8454\n      - 8545:8545\n      # Exposes the port for the JSON-RPC WebSocket API on ws://localhost:8546\n      - 8546:8546\n      # Exposes the port for the GraphQL HTTP API on http://localhost:8547\n      - 8547:8547\n      # Exposes the port for the P2P connection between nodes\n      - 30303:30303\n      # Exposes the port for the P2P discovery mechanism between nodes\n      - 30303:30303/udp\n    entrypoint:\n      - /opt/besu/bin/besu\n      # More info on these options on https://besu.hyperledger.org/stable/public-networks/reference/cli/options\n      - --Xdns-enabled=true\n      - --Xdns-update-enabled=true\n      - --genesis-file=/config/genesis.json\n      - --data-path=/data\n      - --tx-pool-retention-hours=999\n      - --tx-pool-max-size=1024\n      - --min-gas-price=0\n      - --random-peer-priority-enabled=true\n      - --host-allowlist=\"*\"\n      - --rpc-http-enabled=true\n      - --rpc-http-host=0.0.0.0\n      - --rpc-http-port=8545\n      - --rpc-http-api=DEBUG,ETH,ADMIN,WEB3,IBFT,NET,TRACE,EEA,PRIV,QBFT,PERM,TXPOOL,PLUGINS\n      - --rpc-http-cors-origins=all\n      - --rpc-http-authentication-enabled=false\n      - --revert-reason-enabled=true\n      - --rpc-http-max-active-connections=1000\n      - --graphql-http-enabled=true\n      - --graphql-http-host=0.0.0.0\n      - --graphql-http-port=8547\n      - --graphql-http-cors-origins=all\n      - --rpc-ws-enabled=true\n      - --rpc-ws-host=0.0.0.0\n      - --rpc-ws-port=8546\n      - --rpc-ws-api=DEBUG,ETH,ADMIN,WEB3,IBFT,NET,TRACE,EEA,PRIV,QBFT,PERM,TXPOOL,PLUGINS\n      - --rpc-ws-authentication-enabled=false\n      - --rpc-ws-max-active-connections=1000\n      - --logging=INFO\n      - --nat-method=DOCKER\n```\n\n----------------------------------------\n\nTITLE: Registering an EAS Schema for Attestations\nDESCRIPTION: Registers a new schema with the Ethereum Attestation Service schema registry. The schema defines the data structure that will be used in attestations. This function initializes the schema registry contract, defines the schema fields, and stores the resulting schema UID for later use.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables set in init\nconst signer = global.get('signer');\nconst registryAddress = global.get('registryAddress');\n\n// Initialize SchemaRegistry contract\nconst schemaRegistry = new ethers.Contract(\n    registryAddress,\n    [\n        \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n        \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\"\n    ],\n    signer\n);\n\n// Define what data fields our attestations will contain\nconst schema = \"string username, string platform, string handle\";\nconst resolverAddress = \"0x0000000000000000000000000000000000000000\";  // No special validation needed\nconst revocable = true;  // Attestations can be revoked if needed\n\ntry {\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\n    const receipt = await tx.wait();\n\n    const schemaUID = receipt.logs[0].topics[1];\n    // Store schemaUID in global context for later use\n    global.set('schemaUID', schemaUID);\n\n    msg.payload = {\n        success: true,\n        schemaUID: schemaUID,\n        message: \"Schema registered successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Managing Storage with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript functions for listing, reading details, and deleting storage instances using the SettleMint JavaScript SDK. These functions allow programmatic access to manage storage resources within applications.\n\nLANGUAGE: typescript\nCODE:\n```\n// List storage instances\nconst listStorage = async () => {\n  const storages = await client.storage.list(\"your-app-id\");\n  console.log('Storage instances:', storages);\n};\n\n// Get storage details\nconst getStorage = async () => {\n  const storage = await client.storage.read(\"storage-unique-name\");\n  console.log('Storage details:', storage);\n};\n\n// Delete storage\nconst deleteStorage = async () => {\n  await client.storage.delete(\"storage-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Attestations Using EAS SDK in JavaScript\nDESCRIPTION: This code demonstrates how to verify an attestation using the EAS SDK. It retrieves an attestation by its UID and checks its validity, displaying details about the attestation including the attester, data, and revocation status.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\nconst { EAS } = require(\"@ethereum-attestation-service/eas-sdk\");\n\n// Basic configuration for connecting to the network\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // Network endpoint\n  easAddress: \"YOUR_EAS_CONTRACT_ADDRESS_HERE\", // Main EAS contract\n};\n\nasync function verifyAttestation(attestationUID) {\n  // Setup our blockchain connection\n  const provider = new ethers.JsonRpcProvider(config.rpcUrl);\n  const EAS = new EAS(config.easAddress);\n  eas.connect(provider);\n\n  console.log(\"🔍 Verifying attestation:\", attestationUID);\n\n  // Try to find the attestation on the blockchain\n  const attestation = await eas.getAttestation(attestationUID);\n\n  // Check if we found anything\n  if (!attestation) {\n    console.error(\"❌ Attestation not found\");\n    return;\n  }\n\n  // Show the attestation details\n  console.log(\"✅ Attestation details:\");\n  console.log(\"Attester:\", attestation.attester); // Who created this attestation\n  console.log(\"Data:\", attestation.data); // The actual attested data\n  console.log(\"Revoked:\", attestation.revoked ? \"Yes\" : \"No\"); // Is it still valid?\n}\n\n// Replace with your attestation UID\nverifyAttestation(\"YOUR_ATTESTATION_UID_HERE\");\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Resolver with Hardhat Ignition in TypeScript\nDESCRIPTION: This TypeScript module demonstrates how to deploy a custom resolver contract using Hardhat Ignition. It sets up the initial trusted attesters and prepares the contract for deployment.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst CustomResolverDeployment = buildModule(\"CustomResolver\", (m) => {\n  const initialAttesters = [\"0xTrustedAddress1\", \"0xTrustedAddress2\"];\n  const resolver = m.contract(\"CustomResolver\", [initialAttesters], {});\n\n  return { resolver };\n});\n\nexport default CustomResolverDeployment;\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Resolver with Hardhat Ignition in TypeScript\nDESCRIPTION: This TypeScript code uses Hardhat Ignition to deploy the custom resolver contract. It defines a deployment module that initializes the resolver with trusted addresses, making it ready for use in the EAS ecosystem.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst CustomResolverDeployment = buildModule(\"CustomResolver\", (m) => {\n  const initialAttesters = [\"0xTrustedAddress1\", \"0xTrustedAddress2\"];\n  const resolver = m.contract(\"CustomResolver\", [initialAttesters], {});\n\n  return { resolver };\n});\n\nexport default CustomResolverDeployment;\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Explorers with SettleMint SDK (TypeScript)\nDESCRIPTION: TypeScript functions for listing explorers, getting explorer details, and restarting an explorer using the SettleMint JavaScript SDK.\n\nLANGUAGE: typescript\nCODE:\n```\n// List explorers\nconst listExplorers = async () => {\n  const explorers = await client.insights.list(\"your-app\");\n  console.log('Explorers:', explorers);\n};\n\n// Get explorer details\nconst getExplorer = async () => {\n  const explorer = await client.insights.read(\"explorer-unique-name\");\n  console.log('Explorer details:', explorer);\n};\n\n// Restart explorer\nconst restartExplorer = async () => {\n  await client.insights.restart(\"explorer-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Example JSON Metadata Structure for Trading Card NFT\nDESCRIPTION: Shows the metadata structure for a trading card NFT named \"Aiko\". The JSON includes name, description, IPFS image URI, and various attributes with different display types including numerical values, text values, boost numbers, and dates.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Aiko (#1/1)\",\n  \"description\": \"Aiko can express more with his tail in seconds than his owner can express with his tongue in hours.\",\n  \"image\": \"ipfs://bafybeia5truvedhrtdfne3qmoh3tvsvpku6h4airpku6eqvcmrfoja7h4m\",\n  \"attributes\": [\n    {\n      \"trait_type\": \"Serial Number\",\n      \"value\": 1,\n      \"max_value\": 1,\n      \"display_type\": \"number\"\n    },\n    {\n      \"trait_type\": \"Breed\",\n      \"value\": \"English Cocker Spaniel\"\n    },\n    {\n      \"trait_type\": \"Shedding\",\n      \"value\": 3,\n      \"max_value\": 5,\n      \"display_type\": \"number\"\n    },\n    {\n      \"trait_type\": \"Affectionate\",\n      \"value\": 5,\n      \"max_value\": 5,\n      \"display_type\": \"number\"\n    },\n    {\n      \"trait_type\": \"Playfulness\",\n      \"value\": 3,\n      \"max_value\": 5,\n      \"display_type\": \"number\"\n    },\n    {\n      \"trait_type\": \"Floof\",\n      \"display_type\": \"boost_number\",\n      \"value\": 100\n    },\n    {\n      \"trait_type\": \"Birthday\",\n      \"value\": 1605465513,\n      \"display_type\": \"date\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Consumer with Elysia and Standard Webhooks in TypeScript\nDESCRIPTION: This snippet shows how to create a webhook consumer using Elysia and the standard webhooks library. It sets up an endpoint to receive webhook events from the Smart Contract Portal, verifies the signature, and processes the payload.\n\nLANGUAGE: ts\nCODE:\n```\nimport { Elysia, t } from \"elysia\";\nimport { Webhook } from \"standardwebhooks\";\n\nasync function webhookConsumerBootstrap(secret: string) {\n  const webhookConsumer = new Elysia().post(\n    \"/scp-listener\",\n    ({ headers, body }) => {\n      try {\n        const wh = new Webhook(btoa(secret));\n        const verifiedPayload = wh.verify(JSON.stringify(body.payload), {\n          \"webhook-id\": headers[\"btp-portal-event-id\"]!,\n          \"webhook-signature\": headers[\"btp-portal-event-signature\"]!,\n          \"webhook-timestamp\": headers[\"btp-portal-event-timestamp\"]!,\n        });\n        console.log(\n          `Received a webhook event: ${JSON.stringify(verifiedPayload)}`\n        );\n      } catch (err) {\n        console.error(\"Webhook payload invalid\", err);\n        throw err;\n      }\n    },\n    {\n      body: t.Object({\n        payload: t.Object({\n          apiVersion: t.String(),\n          eventId: t.String(),\n          eventName: t.String(),\n          timestamp: t.Number(),\n          data: t.Any(),\n        }),\n      }),\n    }\n  );\n  const app = new Elysia().use(webhookConsumer).onStart(({ server }) => {\n    console.log(\n      `Started the test webhook consumer on ${server?.url.toString()}`\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Managing SettleMint Applications with SDK JS\nDESCRIPTION: TypeScript code demonstrating how to create, list, read, and delete applications using the SettleMint SDK JS. The code shows how to initialize the client with an access token and perform CRUD operations on applications.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create application\nconst createApp = async () => {\n  const result = await client.application.create({\n    workspaceUniqueName: \"your-workspace\",\n    name: \"myApp\"\n  });\n  console.log('Application created:', result);\n};\n\n// List applications\nconst listApps = async () => {\n  const apps = await client.application.list(\"your-workspace\");\n  console.log('Applications:', apps);\n};\n\n// Read application details\nconst readApp = async () => {\n  const app = await client.application.read(\"app-unique-name\");\n  console.log('Application details:', app);\n};\n\n// Delete application\nconst deleteApp = async () => {\n  await client.application.delete(\"application-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Smart Contract for Trusted Attesters in Solidity\nDESCRIPTION: Solidity smart contract that implements a custom resolver for validating attestations. This contract ensures attestations are only valid if they come from trusted addresses stored in the contract's mapping.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// This contract checks if attestations come from trusted sources\ncontract CustomResolver {\n    // Keep track of which addresses we trust to make attestations\n    mapping(address => bool) public trustedAttesters;\n\n    // When deploying, we set up our initial list of trusted attesters\n    constructor(address[] memory initialAttesters) {\n        for (uint256 i = 0; i < initialAttesters.length; i++) {\n            trustedAttesters[initialAttesters[i]] = true;\n        }\n    }\n\n    // EAS calls this function before accepting an attestation\n    function validate(\n        bytes32 attestationUID,    // Unique ID of the attestation\n        address attester,          // Who's trying to create the attestation\n        bytes memory data          // The attestation data (unused in this example)\n    ) external view returns (bool) {\n        // Only allow attestations from addresses we trust\n        if (!trustedAttesters[attester]) {\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SettleMint Node with Ethers.js\nDESCRIPTION: JavaScript code for establishing a connection to a SettleMint node using the Ethers.js library. Creates a JsonRpcProvider with the node URL and authentication token.\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ethers} = require('ethers'); const provider = new\nethers.JsonRpcProvider('https://your-node-url/token');\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Resolver with Hardhat Ignition in TypeScript\nDESCRIPTION: TypeScript code for deploying the custom resolver smart contract using Hardhat Ignition framework. This module defines the deployment with initial trusted attester addresses.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst CustomResolverDeployment = buildModule(\"CustomResolver\", (m) => {\n  const initialAttesters = [\"0xTrustedAddress1\", \"0xTrustedAddress2\"];\n  const resolver = m.contract(\"CustomResolver\", [initialAttesters], {});\n\n  return { resolver };\n});\n\nexport default CustomResolverDeployment;\n```\n\n----------------------------------------\n\nTITLE: Managing Private Keys with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript functions for listing private keys, retrieving key details, and restarting keys using the SettleMint JavaScript SDK. These operations provide programmatic control over key management in blockchain applications.\n\nLANGUAGE: typescript\nCODE:\n```\n// List private keys\nconst listKeys = async () => {\n  const keys = await client.privateKey.list(\"your-app-name\");\n};\n\n// Get key details\nconst getKey = async () => {\n  const key = await client.privateKey.read(\"key-unique-name\");\n};\n\n// Restart key\nconst restartKey = async () => {\n  await client.privateKey.restart(\"key-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Block Number with Ethers.js in Node-RED\nDESCRIPTION: JavaScript code for a Node-RED function node that connects to a Polygon Mumbai node and retrieves the latest block number. It uses the ethers.js library with authentication via an application access token.\n\nLANGUAGE: javascript\nCODE:\n```\n///////////////////////////////////////////////////////////\n// Configuration                                         //\n///////////////////////////////////////////////////////////\n\nconst rpcEndpoint = \"https://YOUR_NODE_RPC_ENDPOINT.settlemint.com\";\nconst accessToken = \"YOUR_APPLICATION_ACCESS_TOKEN_HERE\";\n\n///////////////////////////////////////////////////////////\n// Logic                                                 //\n///////////////////////////////////////////////////////////\n\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\nmsg.payload = await provider.getBlockNumber();\n\nreturn msg;\n\n///////////////////////////////////////////////////////////\n// End                                                   //\n///////////////////////////////////////////////////////////\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Similarity Search with GraphQL\nDESCRIPTION: A GraphQL query for performing a similarity search in Hasura using pgvector. It orders results by vector distance and returns the top 5 most similar records with their IDs and vectors.\n\nLANGUAGE: graphql\nCODE:\n```\nquery searchVectors($vector: [Float!]!) {\n  vectors(order_by: { vector: { _vector_distance: $vector } }, limit: 5) {\n    id\n    vector\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Core SettleMint SDK using npm\nDESCRIPTION: Command to install the core SettleMint SDK JavaScript package using npm. This is the primary package required for blockchain interaction in JavaScript applications.\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @settlemint/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Combining Payment Histories from Multiple Land Parcels in Solidity\nDESCRIPTION: This function aggregates payment histories from multiple land parcels into a single array. It follows a similar pattern to the building ID aggregation function, calculating total size first, then combining all payment details into one array.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _combinePaymentHistories(uint256[] memory parcelIds) private view returns (PaymentDetail[] memory) {\n        uint256 totalPayments = 0;\n        for (uint i = 0; i < parcelIds.length; i++) {\n            totalPayments = totalPayments.add(_parcels[parcelIds[i]].paymentHistory.length);\n        }\n\n        PaymentDetail[] memory combined = new PaymentDetail[](totalPayments);\n        uint256 counter = 0;\n\n        for (uint i = 0; i < parcelIds.length; i++) {\n            for (uint j = 0; j < _parcels[parcelIds[i]].paymentHistory.length; j++) {\n                combined[counter] = _parcels[parcelIds[i]].paymentHistory[j];\n                counter++;\n            }\n        }\n\n        return combined;\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Smart Contract in Solidity\nDESCRIPTION: A Solidity smart contract implementing a custom resolver for EAS that verifies attestations come from trusted attesters. This contract maintains a list of trusted addresses and validates attestations based on the attester's identity.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// This contract checks if attestations come from trusted sources\ncontract CustomResolver {\n    // Keep track of which addresses we trust to make attestations\n    mapping(address => bool) public trustedAttesters;\n\n    // When deploying, we set up our initial list of trusted attesters\n    constructor(address[] memory initialAttesters) {\n        for (uint256 i = 0; i < initialAttesters.length; i++) {\n            trustedAttesters[initialAttesters[i]] = true;\n        }\n    }\n\n    // EAS calls this function before accepting an attestation\n    function validate(\n        bytes32 attestationUID,    // Unique ID of the attestation\n        address attester,          // Who's trying to create the attestation\n        bytes memory data          // The attestation data (unused in this example)\n    ) external view returns (bool) {\n        // Only allow attestations from addresses we trust\n        if (!trustedAttesters[attester]) {\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Hasura via GraphQL API\nDESCRIPTION: JavaScript code demonstrating how to interact with a Hasura database through GraphQL API, including authentication setup, making queries, and inserting data using fetch.\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'node-fetch';\n\n// Configure your authentication details\nconst HASURA_ENDPOINT = \"YOUR_HASURA_ENDPOINT\";\nconst HASURA_ADMIN_SECRET = \"YOUR_HASURA_ADMIN_SECRET\"; // Found in the \"Connect\" tab of Hasura console\nconst APP_ACCESS_TOKEN = \"YOUR_APP_ACCESS_TOKEN\"; // Generated following the Application Access Tokens guide\n\n// Reusable function to make GraphQL requests\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  try {\n    const result = await fetch(\n      HASURA_ENDPOINT,\n      {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'x-hasura-admin-secret': HASURA_ADMIN_SECRET,\n          'x-auth-token': APP_ACCESS_TOKEN\n        },\n        body: JSON.stringify({\n          query: operationsDoc,\n          variables: variables,\n          operationName: operationName\n        })\n      }\n    );\n\n    if (!result.ok) {\n      const text = await result.text();\n      throw new Error(`HTTP error! status: ${result.status}, body: ${text}`);\n    }\n\n    return await result.json();\n  } catch (error) {\n    console.error('Request failed:', error);\n    throw error;\n  }\n}\n\n// Query to fetch verification records\nconst operationsDoc = `\n  query MyQuery {\n    verification {\n      id\n    }\n  }\n`;\n\n// Mutation to insert a new verification record\nconst insertOperationDoc = `\n  mutation InsertVerification($name: String!, $status: String!) {\n    insert_verification_one(object: {name: $name, status: $status}) {\n      id\n      name\n      status\n    }\n  }\n`;\n\n// Function to fetch verification records\nasync function main() {\n  try {\n    const { errors, data } = await fetchGraphQL(operationsDoc, \"MyQuery\", {});\n\n    if (errors) {\n      console.error('GraphQL Errors:', errors);\n      return;\n    }\n\n    console.log('Data:', data);\n  } catch (error) {\n    console.error('Failed:', error);\n  }\n}\n\n// Function to insert a new verification record\nasync function insertWithGraphQL() {\n  try {\n    const { errors, data } = await fetchGraphQL(\n      insertOperationDoc,\n      \"InsertVerification\",\n      {\n        name: \"Test User\",\n        status: \"pending\"\n      }\n    );\n\n    if (errors) {\n      console.error('GraphQL Errors:', errors);\n      return;\n    }\n\n    console.log('Inserted Data:', data);\n  } catch (error) {\n    console.error('Failed:', error);\n  }\n}\n\n// Execute both query and mutation\nmain();\ninsertWithGraphQL();\n```\n\n----------------------------------------\n\nTITLE: Deploying UserData Contract with Hardhat Ignition\nDESCRIPTION: This TypeScript script defines a deployment module for the UserData smart contract using Hardhat Ignition. It builds a module that will deploy the UserData contract and return the deployed instance.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst UserDataModule = buildModule(\"UserDataModule\", (m) => {\n  const userdata = m.contract(\"UserData\");\n  return { userdata };\n});\n\nexport default UserDataModule;\n```\n\n----------------------------------------\n\nTITLE: Using Pre-imported Libraries in Node-RED\nDESCRIPTION: Example showing how to access pre-imported libraries like ethers.js and IPFS in Node-RED functions. Demonstrates retrieving blockchain data and interacting with IPFS within the SettleMint platform.\n\nLANGUAGE: javascript\nCODE:\n```\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\n\nconst ipfsHttpClient = global.get(\"ipfsHttpClient\");\nconst client = ipfsHttpClient.create(`${ipfsEndpoint}/${accessToken}/api/v0`);\n\nconst uint8arrays = global.get(\"uint8arrays\");\nconst itAll = global.get(\"itAll\");\nconst data = uint8arrays.toString(\n  uint8arrays.concat(await itAll(client.cat(cid)))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with SettleMint JavaScript SDK\nDESCRIPTION: JavaScript/TypeScript code to create middleware using the SettleMint SDK. Demonstrates client initialization and middleware creation with configuration options.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create middleware\nconst createMiddleware = async () => {\n  const result = await client.middleware.create({\n    applicationUniqueName: \"your-app-unique-name\",\n    name: \"my-middleware\",\n    type: \"SHARED\",\n    interface: \"GRAPH\",\n    blockchainNodeUniqueName: \"your-node-unique-name\",\n    region: \"EUROPE\",  // Required\n    provider: \"GKE\",   // Required\n    size: \"SMALL\"      // Valid options: \"SMALL\" | \"MEDIUM\" | \"LARGE\"\n  });\n  console.log('Middleware created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Schema with Custom Resolver in JavaScript\nDESCRIPTION: JavaScript code showing how to register an EAS schema with a custom resolver. This links a data schema to the deployed resolver contract for on-chain validation of attestations.\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolverAddress = \"YOUR_DEPLOYED_RESOLVER_ADDRESS\";\nconst schema = \"string username, string platform, string handle\";\nconst schemaUID = await schemaRegistry.register(schema, resolverAddress, true);\n\nconsole.log(\"✅ Schema with resolver registered! UID:\", schemaUID);\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Resolver with Hardhat Ignition in TypeScript\nDESCRIPTION: TypeScript code for deploying the custom resolver smart contract using Hardhat Ignition framework. This builds a deployment module that initializes the resolver with a list of trusted attester addresses.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst CustomResolverDeployment = buildModule(\"CustomResolver\", (m) => {\n  const initialAttesters = [\"0xTrustedAddress1\", \"0xTrustedAddress2\"];\n  const resolver = m.contract(\"CustomResolver\", [initialAttesters], {});\n\n  return { resolver };\n});\n\nexport default CustomResolverDeployment;\n```\n\n----------------------------------------\n\nTITLE: ABI-Encoded Calldata for updateMessage Function\nDESCRIPTION: The complete ABI-encoded calldata in hexadecimal format for calling the updateMessage function with the string 'Goodbye Ethereum!'.\n\nLANGUAGE: text\nCODE:\n```\n0xc47f00270000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000011\n476f6f6462796520457468657265756d2100000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Interacting with Hasura using GraphQL API\nDESCRIPTION: Complete example of how to interact with a Hasura database through its GraphQL API, including authentication, query and mutation operations. The code demonstrates fetching verification records and inserting new ones.\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'node-fetch';\n\n// Configure your authentication details\nconst HASURA_ENDPOINT = \"YOUR_HASURA_ENDPOINT\";\nconst HASURA_ADMIN_SECRET = \"YOUR_HASURA_ADMIN_SECRET\"; // Found in the \"Connect\" tab of Hasura console\nconst APP_ACCESS_TOKEN = \"YOUR_APP_ACCESS_TOKEN\"; // Generated following the Application Access Tokens guide\n\n// Reusable function to make GraphQL requests\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  try {\n    const result = await fetch(\n      HASURA_ENDPOINT,\n      {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'x-hasura-admin-secret': HASURA_ADMIN_SECRET,\n          'x-auth-token': APP_ACCESS_TOKEN\n        },\n        body: JSON.stringify({\n          query: operationsDoc,\n          variables: variables,\n          operationName: operationName\n        })\n      }\n    );\n\n    if (!result.ok) {\n      const text = await result.text();\n      throw new Error(`HTTP error! status: ${result.status}, body: ${text}`);\n    }\n\n    return await result.json();\n  } catch (error) {\n    console.error('Request failed:', error);\n    throw error;\n  }\n}\n\n// Query to fetch verification records\nconst operationsDoc = `\n  query MyQuery {\n    verification {\n      id\n    }\n  }\n`;\n\n// Mutation to insert a new verification record\nconst insertOperationDoc = `\n  mutation InsertVerification($name: String!, $status: String!) {\n    insert_verification_one(object: {name: $name, status: $status}) {\n      id\n      name\n      status\n    }\n  }\n`;\n\n// Function to fetch verification records\nasync function main() {\n  try {\n    const { errors, data } = await fetchGraphQL(operationsDoc, \"MyQuery\", {});\n\n    if (errors) {\n      console.error('GraphQL Errors:', errors);\n      return;\n    }\n\n    console.log('Data:', data);\n  } catch (error) {\n    console.error('Failed:', error);\n  }\n}\n\n// Function to insert a new verification record\nasync function insertWithGraphQL() {\n  try {\n    const { errors, data } = await fetchGraphQL(\n      insertOperationDoc,\n      \"InsertVerification\",\n      {\n        name: \"Test User\",\n        status: \"pending\"\n      }\n    );\n\n    if (errors) {\n      console.error('GraphQL Errors:', errors);\n      return;\n    }\n\n    console.log('Inserted Data:', data);\n  } catch (error) {\n    console.error('Failed:', error);\n  }\n}\n\n// Execute both query and mutation\nmain();\ninsertWithGraphQL();\n```\n\n----------------------------------------\n\nTITLE: Registering Schema with Custom Resolver in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to register a schema with a custom resolver address, enabling on-chain validation of attestations. It links the schema structure with the resolver contract.\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolverAddress = \"YOUR_DEPLOYED_RESOLVER_ADDRESS\";\nconst schema = \"string username, string platform, string handle\";\nconst schemaUID = await schemaRegistry.register(schema, resolverAddress, true);\n\nconsole.log(\"✅ Schema with resolver registered! UID:\", schemaUID);\n```\n\n----------------------------------------\n\nTITLE: Creating Attestations with EAS SDK in JavaScript\nDESCRIPTION: Creates an attestation using a previously registered schema. The function uses the EAS SDK to encode attestation data according to the schema structure, creates a public and non-expiring attestation, and stores the attestation UID for later verification.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables\nconst EAS = global.get('eas');\nconst schemaUID = msg.schemaUID;\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new eassdk.SchemaEncoder(\"string username, string platform, string handle\");\n\n// The actual data we want to attest to\nconst attestationData = [\n    { name: \"username\", value: \"awesome_developer\", type: \"string\" },\n    { name: \"platform\", value: \"GitHub\", type: \"string\" },\n    { name: \"handle\", value: \"@devmaster\", type: \"string\" }\n];\n\ntry {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation\n    const tx = await eas.attest({\n        schema: schemaUID,\n        data: {\n            recipient: \"0x0000000000000000000000000000000000000000\",  // Public attestation\n            expirationTime: 0,              // Never expires\n            revocable: true,                // Can be revoked later if needed\n            data: encodedData              // Our encoded attestation data\n        }\n    });\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n\n    // Store attestation UID for later verification\n    global.set('attestationUID', receipt.attestationUID);\n\n    msg.payload = {\n        success: true,\n        attestationUID: receipt,\n        message: \"Attestation created successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Configuring ERC-721 Contract Parameters in Solidity\nDESCRIPTION: Solidity code snippet showing the configuration section of an ERC-721 contract. It defines constants for token reserves, pricing for whitelist and public sales, maximum tokens per transaction, and total supply.\n\nLANGUAGE: solidity\nCODE:\n```\n  //////////////////////////////////////////////////////////////////\n  // CONFIGURATION                                                //\n  //////////////////////////////////////////////////////////////////\n\n  uint256 public constant RESERVES = 5; // amount of tokens for the team, or to sell afterwards\n  uint256 public constant PRICE_IN_WEI_WHITELIST = 0.0069 ether; // price per token in the whitelist sale\n  uint256 public constant PRICE_IN_WEI_PUBLIC = 0.0420 ether; // price per token in the public sale\n  uint256 public constant MAX_PER_TX = 6; // maximum amount of tokens one can mint in one transaction\n  uint256 public constant MAX_SUPPLY = 100; // the total amount of tokens for this NFT\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Claude Desktop\nDESCRIPTION: JSON configuration for Claude Desktop's Developer settings. This setup connects Claude to the SettleMint MCP server, enabling the AI to interact with blockchain environments and project files.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Claude Desktop\nDESCRIPTION: JSON configuration for integrating the SettleMint MCP server in Claude Desktop. This configuration needs to be added to the Developer settings tab and allows Claude to connect to the blockchain environment through MCP.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Hasura using PostgreSQL\nDESCRIPTION: Example showing how to interact directly with the Hasura PostgreSQL database. The code demonstrates connecting to the database and performing basic CRUD operations - reading all records, inserting new data, and updating existing records.\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from 'pg';\nconst { Pool } = pkg;\n\n// Initialize PostgreSQL connection (get connection string from Hasura console -> \"Connect\" tab)\nconst pool = new Pool({\n  connectionString: 'YOUR_POSTGRES_CONNECTION_STRING'\n});\n\n// Simple query to read all records from verification table\nconst readData = async () => {\n  const query = 'SELECT * FROM verification';\n  const result = await pool.query(query);\n  console.log('Current Data:', result.rows);\n};\n\n// Insert a new verification record with sample data\nconst insertData = async () => {\n  const query = `\n    INSERT INTO verification (id, identifier, value, created_at, expires_at)\n    VALUES ($1, $2, $3, $4, $5)\n    RETURNING *`;\n\n  // Sample values - modify according to your needs\n  const values = [\n    'test-id-123',\n    'test-identifier',\n    'test-value',\n    new Date(),\n    new Date(Date.now() + 24 * 60 * 60 * 1000) // Sets expiry to 24h from now\n  ];\n\n  const result = await pool.query(query, values);\n  console.log('Inserted:', result.rows[0]);\n};\n\n// Update an existing record by ID\nconst updateData = async () => {\n  const query = `\n    UPDATE verification\n    SET value = $1, updated_at = $2\n    WHERE id = $3\n    RETURNING *`;\n\n  const values = ['updated-value', new Date(), 'test-id-123'];\n  const result = await pool.query(query, values);\n  console.log('Updated:', result.rows[0]);\n};\n\n// Execute all operations in sequence\nasync function main() {\n  try {\n    await readData();\n    await insertData();\n    await updateData();\n    await readData();\n  } finally {\n    await pool.end(); // Close database connection\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Cline for VS Code\nDESCRIPTION: JSON configuration for integrating the SettleMint MCP server in the Cline extension for VS Code. This setup allows the AI to access project files and interact with the blockchain through the MCP server.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Attestations via GraphQL API in JavaScript\nDESCRIPTION: This JavaScript function demonstrates how to query attestations from the attestation indexer using GraphQL. It filters attestations by schema ID and returns details including attester, recipient, and attestation data.\n\nLANGUAGE: javascript\nCODE:\n```\n// Example fetch request to query attestations\nasync function queryAttestations(schemaId) {\n  const response = await fetch(\"YOUR_INDEXER_URL\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer YOUR_APP_TOKEN\",\n    },\n    body: JSON.stringify({\n      query: `{\n        attestations(\n          where: {\n            schemaId: {\n              equals: \"${schemaId}\"\n            }\n          }\n        ) {\n          id\n          attester\n          recipient\n          revoked\n          data\n        }\n      }`,\n    }),\n  });\n\n  const data = await response.json();\n  return data.data.attestations;\n}\n\n// Usage example:\nconst schemaId = \"YOUR_SCHEMA_ID\"; // From the registration step\nconst attestations = await queryAttestations(schemaId);\nconsole.log(\"Attestations:\", attestations);\n```\n\n----------------------------------------\n\nTITLE: Registering a Schema with EAS in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to register a schema with the Ethereum Attestation Service. This example creates a schema for social media profile ownership verification that includes username, platform, and handle fields.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\n\n// Configuration object for network and contract details\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // The network endpoint (e.g., Ethereum mainnet/testnet)\n  registryAddress: \"YOUR_SCHEMA_REGISTRY_ADDRESS_HERE\", // Where the SchemaRegistry contract lives\n  privateKey: \"YOUR_PRIVATE_KEY_HERE\", // Your wallet's private key (keep this secret!)\n};\n\n// Create connection to blockchain and setup contract interaction\nconst provider = new ethers.JsonRpcProvider(config.rpcUrl);\nconst signer = new ethers.Wallet(config.privateKey, provider);\nconst schemaRegistry = new ethers.Contract(\n  config.registryAddress,\n  [\n    // This event helps us track when new schemas are registered\n    \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n    // This function lets us register new schemas\n    \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\",\n  ],\n  signer\n);\n\nasync function registerSchema() {\n  try {\n    // Define what data fields our attestations will contain\n    const schema = \"string username, string platform, string handle\";\n    const resolverAddress = ethers.ZeroAddress; // No special validation needed\n    const revocable = true; // Attestations can be revoked if needed\n\n    console.log(\"🚀 Registering schema for social media ownership...\");\n    // Send the transaction to create our schema\n    const tx = await schemaRegistry.register(\n      schema,\n      resolverAddress,\n      revocable\n    );\n    const receipt = await tx.wait(); // Wait for blockchain confirmation\n\n    // Get our schema's unique ID from the transaction\n    const schemaUID = receipt.logs[0].topics[1];\n    console.log(\"✅ Schema registered successfully! UID:\", schemaUID);\n  } catch (error) {\n    console.error(\"❌ Error registering schema:\", error.message);\n  }\n}\n\nregisterSchema();\n```\n\n----------------------------------------\n\nTITLE: Prompting RooCode to Generate a Solidity Function\nDESCRIPTION: An example of how to prompt RooCode to write a Solidity function for adding two numbers. This demonstrates how to interact with the AI assistant to generate code snippets.\n\nLANGUAGE: solidity\nCODE:\n```\n// Prompt: write a Solidity function to add two numbers\n```\n\n----------------------------------------\n\nTITLE: Validating Attestations with Custom Resolver in JavaScript\nDESCRIPTION: JavaScript implementation for validating an attestation using the deployed custom resolver contract. Creates a contract instance and calls the validate function with the attestation details.\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolver = new ethers.Contract(\n  \"YOUR_RESOLVER_ADDRESS\",\n  [\"function validate(bytes32, address, bytes) external view returns (bool)\"],\n  provider\n);\n\nconst isValid = await resolver.validate(\n  \"YOUR_ATTESTATION_UID\",\n  \"ATTESTER_ADDRESS\",\n  \"ATTESTATION_DATA\"\n);\n\nconsole.log(\"✅ Is the attestation valid?\", isValid);\n```\n\n----------------------------------------\n\nTITLE: RLP Encoded Storage Value\nDESCRIPTION: The RLP (Recursive Length Prefix) encoded string representation of a value stored in a contract's storage. The prefix 0x83 indicates the string length is 3 bytes more than 32 due to the prefix.\n\nLANGUAGE: plaintext\nCODE:\n```\n0x83476f6f6462796520457468657265756d21\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Backup Using pg_dump Command\nDESCRIPTION: Command to create a backup of a Hasura PostgreSQL database using the pg_dump utility with password authentication. It specifies the host, port, user, database name, and output format for the backup file.\n\nLANGUAGE: sql\nCODE:\n```\nPGPASSWORD=0c510604a378d348e7ed pg_dump \\\n  -h p2p.gke-europe.settlemint.com \\\n  -p 30787 \\\n  -U hasura-f1cd9 \\\n  -d hasura-f1cd9 \\\n  -F p \\\n  -f ~/Desktop/hasura_backup.sql\n```\n\n----------------------------------------\n\nTITLE: Storing Vector Embeddings in Hasura with GraphQL\nDESCRIPTION: A GraphQL mutation query for inserting vectorized data into a Hasura table with pgvector support. The mutation takes an ID and a vector array as parameters and returns the number of affected rows.\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertVector($id: uuid!, $vector: [Float!]!) {\n  insert_vectors(objects: { id: $id, vector: $vector }) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering EAS Schema with Ethers.js in JavaScript\nDESCRIPTION: Registers a new schema for attestations in the Ethereum Attestation Service. This function initializes a SchemaRegistry contract, defines a schema for user profile data (username, platform, handle), and stores the resulting schema UID for later use.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables set in init\nconst signer = global.get('signer');\nconst registryAddress = global.get('registryAddress');\n\n// Initialize SchemaRegistry contract\nconst schemaRegistry = new ethers.Contract(\n    registryAddress,\n    [\n        \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n        \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\"\n    ],\n    signer\n);\n\n// Define what data fields our attestations will contain\nconst schema = \"string username, string platform, string handle\";\nconst resolverAddress = \"0x0000000000000000000000000000000000000000\";  // No special validation needed\nconst revocable = true;  // Attestations can be revoked if needed\n\ntry {\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\n    const receipt = await tx.wait();\n\n    const schemaUID = receipt.logs[0].topics[1];\n    // Store schemaUID in global context for later use\n    global.set('schemaUID', schemaUID);\n\n    msg.payload = {\n        success: true,\n        schemaUID: schemaUID,\n        message: \"Schema registered successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Creating Attestations with EAS SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to create attestations using the Ethereum Attestation Service SDK. It sets up a connection to the blockchain, encodes data according to a predefined schema, and submits an attestation transaction.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EAS, SchemaEncoder } = require(\"@ethereum-attestation-service/eas-sdk\");\nconst { ethers } = require(\"ethers\");\n\n// Setup our connection details\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // Network endpoint\n  easAddress: \"YOUR_EAS_CONTRACT_ADDRESS_HERE\", // Main EAS contract address\n  privateKey: \"YOUR_PRIVATE_KEY_HERE\", // Your wallet's private key\n  schemaUID: \"YOUR_SCHEMA_UID_HERE\", // The UID from when we registered our schema\n};\n\n// Connect to the blockchain\nconst provider = new ethers.JsonRpcProvider(config.rpcUrl);\nconst signer = new ethers.Wallet(config.privateKey, provider);\nconst EAS = new EAS(config.easAddress);\neas.connect(signer);\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new SchemaEncoder(\n  \"string username, string platform, string handle\"\n);\n\n// The actual data we want to attest to\nconst attestationData = [\n  { name: \"username\", value: \"awesome_developer\", type: \"string\" },\n  { name: \"platform\", value: \"GitHub\", type: \"string\" },\n  { name: \"handle\", value: \"@devmaster\", type: \"string\" },\n];\n\nasync function createAttestation() {\n  try {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation\n    const tx = await eas.attest({\n      schema: config.schemaUID,\n      data: {\n        recipient: ethers.ZeroAddress, // Public attestation (no specific recipient)\n        expirationTime: 0, // Never expires\n        revocable: true, // Can be revoked later if needed\n        data: encodedData, // Our encoded attestation data\n      },\n    });\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n    console.log(\n      \"✅ Attestation created successfully! UID:\",\n      receipt.attestationUID\n    );\n  } catch (error) {\n    console.error(\"❌ Error creating attestation:\", error.message);\n  }\n}\n\ncreateAttestation();\n```\n\n----------------------------------------\n\nTITLE: Defining State Struct in Solidity for State Machine Implementation\nDESCRIPTION: Definition of the State struct that represents individual states in the state machine. Each state contains flags for allowed functions, roles, preconditions, callbacks, and transition information.\n\nLANGUAGE: solidity\nCODE:\n```\nstruct State {\n  // a boolean to check if the state is actually created\n  bool hasBeenCreated;\n  // a mapping of functions that can be executed when in this state\n  mapping(bytes4 => bool) allowedFunctions;\n  // a mapping of all roles that have been configured for this state\n  mapping(bytes32 => bool) allAllowedRoles;\n  // a list of all the roles that have been configured for this state\n  bytes32[] allowedRoles;\n  // a list of all the preconditions that have been configured for this state\n  function(bytes32, bytes32) internal view[] preConditions;\n  // a list of callbacks to execute before the state transition completes\n  function(bytes32, bytes32) internal[] callbacks;\n  // a list of states that can be transitioned to\n  bytes32[] nextStates;\n  // function that executes logic and then does a StateTransition\n  bytes4 preFunction;\n}\n```\n\n----------------------------------------\n\nTITLE: Final World State Snapshot\nDESCRIPTION: A comprehensive JSON snapshot of the contract's world state after transactions. Includes contract address, storage slots with keys and values, account object details, last transaction information, and execution context.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ContractAddress\": \"0x5cbd38cc74f924b1ef5eb86d9b54f9931f75d7e3\",\n  \"Storage\": {\n    \"SlotKey\": \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\",\n    \"SlotValue\": \"0x476f6f6462796520457468657265756d2100000000000000000000000000000000\"\n  },\n  \"AccountObject\": {\n    \"nonce\": 1,\n    \"codeHash\": \"0x1b449b7a3f5b631d5fa963dfba2dfc19a7d62a9a79e0f6828aee5f785dcfd94a\",\n    \"storageRoot\": \"0xa1c9f3d17704e632bb58bb85e332e0bcbcc181c1cce6dd13a6adca048f2e94f3\"\n  },\n  \"LastTransaction\": {\n    \"Function\": \"updateMessage(string)\",\n    \"Calldata\": \"0xc47f00270000000000000000000000000000000000000000000000000000000000000020\" +\n                \"0000000000000000000000000000000000000000000000000000000000000011\" +\n                \"476f6f6462796520457468657265756d2100000000000000000000000000000000\",\n    \"v\": \"0x25\",\n    \"r\": \"0x3aeec3c3a7eb1a13c6d408419816f6bb5563a9cf4263a6b9d170e9bb5b88e5bb\",\n    \"s\": \"0x275d3d113e2f06d90d3dc9e16ff3387ff145f1fe9d62c1e421693d6d24eaa598\"\n  },\n  \"ExecutionContext\": {\n    \"L1\": \"Ethereum Mainnet\",\n    \"Rollups\": {\n      \"zkEVM\": \"Validity proof enforces correctness\",\n      \"Optimistic\": \"Post and challenge model with 7d delay\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EAS Module for Contract Deployment with Hardhat Ignition\nDESCRIPTION: TypeScript code for defining a Hardhat Ignition module that configures the deployment of the SchemaRegistry and EAS contracts, establishing their relationship.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst CustomEASModule = buildModule(\"EASDeployment\", (m) => {\n  const schemaRegistry = m.contract(\"SchemaRegistry\", [], {});\n  const EAS = m.contract(\"EAS\", [schemaRegistry], {});\n\n  return { schemaRegistry, EAS };\n});\n\nexport default CustomEASModule;\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Export Using Curl Command\nDESCRIPTION: Curl command template for exporting a PostgreSQL database from Hasura. It uses the Hasura pg_dump API with options for schema selection and insert statements generation.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"opts\": [ \"-O\", \"-x\", \"--schema=public\", \"--inserts\"], \"clean_output\": true, \"source\": \"default\"}' -H \"x-hasura-admin-secret: <SecretKey>\" <Endpoint URL/APIKey>/v1alpha1/pg_dump > db.sql\n```\n\n----------------------------------------\n\nTITLE: Executing SettleMint MCP SDK with Project Context\nDESCRIPTION: Command to start an MCP server connected to a local project directory and the SettleMint platform using a Personal Access Token. This enables AI assistants to access project files and interact with the blockchain environment.\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @settlemint/sdk-mcp@latest --path=/Users/llm/asset-tokenization-kit/ --pat=sm_pat_xxx\n```\n\n----------------------------------------\n\nTITLE: Verifying Attestations with EAS SDK in JavaScript\nDESCRIPTION: Retrieves and verifies an attestation using its UID. This function fetches the attestation data from the EAS contract, decodes it according to the schema structure, and returns formatted attestation details including validity status, timestamps, and the attested data.\n\nLANGUAGE: javascript\nCODE:\n```\nconst EAS = global.get('eas');\nconst attestationUID = msg.attestationUID;\n\ntry {\n    const attestation = await eas.getAttestation(attestationUID);\n    const schemaEncoder = new eassdk.SchemaEncoder(\"string pshandle, string socialMedia, string socialMediaHandle\");\n    const decodedData = schemaEncoder.decodeData(attestation.data);\n\n    msg.payload = {\n        isValid: !attestation.revoked,\n        attestation: {\n            attester: attestation.attester,\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\n            expirationTime: attestation.expirationTime > 0 \n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\n                : 'Never',\n            revoked: attestation.revoked\n        },\n        data: {\n            psHandle: decodedData[0].value.toString(),\n            socialMedia: decodedData[1].value.toString(),\n            socialMediaHandle: decodedData[2].value.toString()\n        }\n    };\n} catch (error) {\n    msg.payload = { \n        success: false, \n        error: error.message,\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring States in State Machine Setup\nDESCRIPTION: Example of creating states and configuring their relationships within the setupStateMachine function. It demonstrates how to create states, define the transition flow, and assign roles to states.\n\nLANGUAGE: solidity\nCODE:\n```\n// Create the variable\nbytes32 public constant STATE_START = \"STATE_START\";\n\n// use the createState helper inside the setupStateMachine function\nfunction setupStateMachine(address adminAddress) internal override {\n    ...\n    createState(STATE_START);\n    ...\n    // set the correct state as the starting state\n    setInitialState(STATE_START);\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\n// Add next states to existing states to define flow\n// Add Roles to state\nfunction setupStateMachine(address adminAddress) internal override {\n    ...\n    addNextStateForState(STATE_START, STATE_END);\n    addRoleForState(STATE_START, ROLE_ADMIN, adminAddress);\n    ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Cap Enforcement Function\nDESCRIPTION: Function signature for enforcing transaction caps based on the role of the transaction initiator. This restricts retail banks from performing high-value operations beyond a specified threshold.\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *CBDCContract) enforceTransactionCap(ctx contractapi.TransactionContextInterface, amount uint64) error\n```\n\n----------------------------------------\n\nTITLE: Custom Smart Contract Resolver in Solidity for Trusted Attester Verification\nDESCRIPTION: A Solidity smart contract that implements a custom resolver for on-chain validation of attestations. This resolver specifically checks if the attester is in a trusted list, allowing only attestations from approved addresses to be considered valid.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// This contract checks if attestations come from trusted sources\ncontract CustomResolver {\n    // Keep track of which addresses we trust to make attestations\n    mapping(address => bool) public trustedAttesters;\n\n    // When deploying, we set up our initial list of trusted attesters\n    constructor(address[] memory initialAttesters) {\n        for (uint256 i = 0; i < initialAttesters.length; i++) {\n            trustedAttesters[initialAttesters[i]] = true;\n        }\n    }\n\n    // EAS calls this function before accepting an attestation\n    function validate(\n        bytes32 attestationUID,    // Unique ID of the attestation\n        address attester,          // Who's trying to create the attestation\n        bytes memory data          // The attestation data (unused in this example)\n    ) external view returns (bool) {\n        // Only allow attestations from addresses we trust\n        if (!trustedAttesters[attester]) {\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Metadata Using CLI\nDESCRIPTION: Command to export all Hasura metadata (including tracked tables, permissions, relationships, and event triggers) to YAML files in the metadata directory using the Hasura CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata export\n```\n\n----------------------------------------\n\nTITLE: Defining EAS Schema in JavaScript\nDESCRIPTION: Defines a schema for EAS attestations with fields for a Product/Service handle, social media platform, and social media handle. The schema string follows EAS type specifications for field definition.\n\nLANGUAGE: javascript\nCODE:\n```\n/* SCHEMA GUIDE\nEdit the schema variable to define your attestation fields.\nFormat: \"type name, type name, type name\"\n\nAvailable Types:\n- string (text)\n- bool (true/false)\n- address (wallet address)\n- uint256 (number)\n- bytes32 (hash)\n\nExamples:\n\"string name, string email, bool isVerified\"\n\"string twitter, address wallet, uint256 age\"\n\"string discord, string github, string telegram\"\n*/\n\nconst schema = \"string pshandle, string socialMedia, string socialMediaHandle\";\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Cline for VS Code\nDESCRIPTION: JSON configuration for the Cline extension in VS Code. This setup enables Cline to connect to the SettleMint MCP server, allowing AI-assisted blockchain development within the VS Code environment.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Blockchain Networks with SettleMint SDK JS\nDESCRIPTION: JavaScript code for interacting with the SettleMint API to create and manage blockchain networks. The example demonstrates client initialization, network creation, listing networks, getting network details, deletion, and restart operations.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create network\nconst createNetwork = async () => {\n  const result = await client.blockchainNetwork.create({\n    applicationUniqueName: \"your-app\",\n    name: \"my-network\",\n    nodeName: \"validator-1\",\n    consensusAlgorithm: \"BESU_QBFT\",\n    provider: \"GKE\", // GKE, EKS, AKS\n    region: \"EUROPE\"\n  });\n  console.log('Network created:', result);\n};\n\n// List networks\nconst listNetworks = async () => {\n  const networks = await client.blockchainNetwork.list(\"your-app\");\n  console.log('Networks:', networks);\n};\n\n// Get network details\nconst getNetwork = async () => {\n  const network = await client.blockchainNetwork.read(\"network-unique-name\");\n  console.log('Network details:', network);\n};\n\n// Delete network\nconst deleteNetwork = async () => {\n  await client.blockchainNetwork.delete(\"network-unique-name\");\n};\n\n// Restart network\nconst restartNetwork = async () => {\n  await client.blockchainNetwork.restart(\"network-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Ignition Module for Smart Contract Deployment\nDESCRIPTION: JavaScript module configuration for deploying the AssetTokenization contract using Hardhat Ignition. This code defines the deployment module that will be used when deploying the smart contract to the blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\n// SPDX-License-Identifier: MIT\n// SettleMint.com\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst AssetTokenizationModule = buildModule(\"AssetTokenizationModule\", (m) => {\n  const assetTokenization = m.contract(\"AssetTokenization\");\n\n  return { assetTokenization };\n});\n\nexport default AssetTokenizationModule;\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for Generic State Machine with Metadata Support\nDESCRIPTION: Constructor for the Generic state machine contract that sets up the admin role, initializes the state machine, and binds metadata through IPFS. It demonstrates how to associate external data with the state machine.\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(\n  uint256 entityId,\n  string memory ipfsHash,\n  string memory baseURI\n) {\n  address adminAddress = msg.sender;\n  _roles = [ROLE_ADMIN, ROLE_MANUFACTURER, ROLE_ONE, ROLE_TWO, ROLE_THREE, ROLE_FOUR];\n  _setRoleAdmin(ROLE_ADMIN, DEFAULT_ADMIN_ROLE);\n  _grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\n  setupStateMachine(adminAddress);\n  _entityId = entityId;\n  _baseURI = baseURI;\n  _setEntityURI(_entityId, ipfsHash);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Chaincode on Fabric Peers\nDESCRIPTION: Command to install the packaged chaincode onto Hyperledger Fabric peer nodes. This is the first step in the chaincode deployment lifecycle that puts the code on the peer but doesn't yet make it available for execution.\n\nLANGUAGE: bash\nCODE:\n```\npeer lifecycle chaincode install hello.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Instance with SettleMint CLI\nDESCRIPTION: Commands to create a new Hasura integration tool instance using the SettleMint CLI. Includes the basic creation command and how to access help documentation.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create integration-tool hasura <name>\n\n# Get information about the command and all available options\nSettleMint platform create integration-tool hasura --help\n```\n\n----------------------------------------\n\nTITLE: Registering a Schema with Ethereum Attestation Service\nDESCRIPTION: JavaScript code for registering a schema in the SchemaRegistry contract. This example creates a schema for social media profile ownership verification with username, platform, and handle fields.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\n\n// Configuration object for network and contract details\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // The network endpoint (e.g., Ethereum mainnet/testnet)\n  registryAddress: \"YOUR_SCHEMA_REGISTRY_ADDRESS_HERE\", // Where the SchemaRegistry contract lives\n  privateKey: \"YOUR_PRIVATE_KEY_HERE\", // Your wallet's private key (keep this secret!)\n};\n\n// Create connection to blockchain and setup contract interaction\nconst provider = new ethers.JsonRpcProvider(config.rpcUrl);\nconst signer = new ethers.Wallet(config.privateKey, provider);\nconst schemaRegistry = new ethers.Contract(\n  config.registryAddress,\n  [\n    // This event helps us track when new schemas are registered\n    \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n    // This function lets us register new schemas\n    \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\",\n  ],\n  signer\n);\n\nasync function registerSchema() {\n  try {\n    // Define what data fields our attestations will contain\n    const schema = \"string username, string platform, string handle\";\n    const resolverAddress = ethers.ZeroAddress; // No special validation needed\n    const revocable = true; // Attestations can be revoked if needed\n\n    console.log(\"🚀 Registering schema for social media ownership...\");\n    // Send the transaction to create our schema\n    const tx = await schemaRegistry.register(\n      schema,\n      resolverAddress,\n      revocable\n    );\n    const receipt = await tx.wait(); // Wait for blockchain confirmation\n\n    // Get our schema's unique ID from the transaction\n    const schemaUID = receipt.logs[0].topics[1];\n    console.log(\"✅ Schema registered successfully! UID:\", schemaUID);\n  } catch (error) {\n    console.error(\"❌ Error registering schema:\", error.message);\n  }\n}\n\nregisterSchema();\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Nodes with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code using the SettleMint JavaScript SDK to list nodes, get node details, and restart a node. These functions provide programmatic access to node management capabilities.\n\nLANGUAGE: typescript\nCODE:\n```\n// List nodes\nawait client.blockchainNode.list(\"your-application\");\n\n// Get node details\nawait client.blockchainNode.read(\"node-unique-name\");\n\n// Restart node\nawait client.blockchainNode.restart(\"node-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: MSP ID to Role Mapping Function\nDESCRIPTION: Function that resolves a Membership Service Provider (MSP) ID to a specific role in the CBDC system. Maps predefined MSP IDs to central bank, retail bank, or auditor roles.\n\nLANGUAGE: go\nCODE:\n```\nfunc getRoleFromMSP(msp string) string {\n    switch strings.ToLower(msp) {\n    case \"centralbankmsp\":\n        return RoleCentralBank\n    case \"retailbankmsp\":\n        return RoleRetailBank\n    case \"auditormsp\":\n        return RoleAuditor\n    default:\n        return \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Endorsement Policies in Hyperledger Fabric\nDESCRIPTION: Examples of endorsement policy definitions in Hyperledger Fabric. The first policy requires endorsement from either Org1 or Org2 peers, while the second policy requires endorsement from both organizations' peers.\n\nLANGUAGE: sh\nCODE:\n```\nOR('Org1MSP.peer','Org2MSP.peer')  # Allow either org\nAND('Org1MSP.peer','Org2MSP.peer') # Require both orgs\n```\n\n----------------------------------------\n\nTITLE: Invoking InitLedger Function in Hyperledger Fabric Chaincode\nDESCRIPTION: Command to invoke the InitLedger function of the 'hello' chaincode on 'mychannel'. This initializes the ledger with default values as defined in the chaincode.\n\nLANGUAGE: bash\nCODE:\n```\npeer chaincode invoke -C mychannel -n hello -c '{\"function\":\"InitLedger\",\"Args\":[]}' ...\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Backup via pg_dump Command\nDESCRIPTION: Command to create a backup of a Hasura PostgreSQL database using the pg_dump utility, specifying host, port, username, database name, and output file location.\n\nLANGUAGE: sql\nCODE:\n```\nPGPASSWORD=0c510604a378d348e7ed pg_dump \\\n  -h p2p.gke-europe.settlemint.com \\\n  -p 30787 \\\n  -U hasura-f1cd9 \\\n  -d hasura-f1cd9 \\\n  -F p \\\n  -f ~/Desktop/hasura_backup.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Attestations with Ethereum Attestation Service SDK\nDESCRIPTION: JavaScript code demonstrating how to create an attestation using the EAS SDK. The example creates an attestation for GitHub profile ownership with specified username, platform, and handle fields.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EAS, SchemaEncoder } = require(\"@ethereum-attestation-service/eas-sdk\");\nconst { ethers } = require(\"ethers\");\n\n// Setup our connection details\nconst config = {\n  rpcUrl: \"YOUR_RPC_URL_HERE\", // Network endpoint\n  easAddress: \"YOUR_EAS_CONTRACT_ADDRESS_HERE\", // Main EAS contract address\n  privateKey: \"YOUR_PRIVATE_KEY_HERE\", // Your wallet's private key\n  schemaUID: \"YOUR_SCHEMA_UID_HERE\", // The UID from when we registered our schema\n};\n\n// Connect to the blockchain\nconst provider = new ethers.JsonRpcProvider(config.rpcUrl);\nconst signer = new ethers.Wallet(config.privateKey, provider);\nconst EAS = new EAS(config.easAddress);\neas.connect(signer);\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new SchemaEncoder(\n  \"string username, string platform, string handle\"\n);\n\n// The actual data we want to attest to\nconst attestationData = [\n  { name: \"username\", value: \"awesome_developer\", type: \"string\" },\n  { name: \"platform\", value: \"GitHub\", type: \"string\" },\n  { name: \"handle\", value: \"@devmaster\", type: \"string\" },\n];\n\nasync function createAttestation() {\n  try {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation\n    const tx = await eas.attest({\n      schema: config.schemaUID,\n      data: {\n        recipient: ethers.ZeroAddress, // Public attestation (no specific recipient)\n        expirationTime: 0, // Never expires\n        revocable: true, // Can be revoked later if needed\n        data: encodedData, // Our encoded attestation data\n      },\n    });\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n    console.log(\n      \"✅ Attestation created successfully! UID:\",\n      receipt.attestationUID\n    );\n  } catch (error) {\n    console.error(\"❌ Error creating attestation:\", error.message);\n  }\n}\n\ncreateAttestation();\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Deployments with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript functions for listing, reading details, restarting, and editing custom deployments using the SettleMint client SDK. These functions enable programmatic control of deployments from JavaScript applications.\n\nLANGUAGE: typescript\nCODE:\n```\n// List deployments\nconst listDeployments = async () => {\n  const deployments = await client.customDeployment.list(\"my-app\");\n};\n\n// Get deployment details\nconst getDeployment = async () => {\n  const deployment = await client.customDeployment.read(\"deployment-unique-name\");\n};\n\n// Restart deployment\nconst restartDeployment = async () => {\n  await client.customDeployment.restart(\"deployment-unique-name\");\n};\n\n// Edit deployment\nconst editDeployment = async () => {\n  await client.customDeployment.edit(\"deployment-unique-name\", {\n    imageTag: \"v2\"\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL API Endpoint for Smart Contract Data\nDESCRIPTION: Example of a GraphQL endpoint URL structure used to query smart contract data through the API portal.\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api-portal-affe9.gke-europe.settlemint.com/graphql\n```\n\n----------------------------------------\n\nTITLE: CBDC Account Structure Definition\nDESCRIPTION: Defines the data structure for a CBDC account, containing owner information, balance, timestamps, frozen status, metadata tags, and transaction history. This structure is used to store and manage account state in the ledger.\n\nLANGUAGE: go\nCODE:\n```\ntype Account struct {\n    Owner      string\n    Balance    uint64\n    CreatedAt  string\n    LastActive string\n    Frozen     bool\n    Tags       map[string]string\n    History    []TransactionLog\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Contract Addresses in Hardhat Ignition\nDESCRIPTION: When using Hardhat Ignition for deploying smart contracts, the deployed contract addresses are stored in a JSON file that maps contract names to their blockchain addresses. This file provides a reference for all contracts deployed on a specific network.\n\nLANGUAGE: markdown\nCODE:\n```\nignition/deployments/chain-CHAIN_ID/deployed_addresses.json\n```\n\n----------------------------------------\n\nTITLE: World State Before Transaction in Hyperledger Fabric\nDESCRIPTION: JSON representation of the world state before executing the UpdateMessage transaction. This shows the current value of the 'message' key in the ledger state.\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": {\"text\": \"Hello Fabric!\"}}\n```\n\n----------------------------------------\n\nTITLE: Example Hasura CLI Configuration\nDESCRIPTION: A concrete example of a config.yaml file for Hasura CLI with actual endpoint, admin secret, and other settings for connecting to a specific Hasura instance.\n\nLANGUAGE: yaml\nCODE:\n```\nendpoint: https://hasuradb-15ce.gke-japan.settlemint.com/sm_aat_86530f5bf93d82a9\nadmin_secret: dc5eb1b93f43fd28c53e\nmetadata_directory: metadata\nactions:\n kind: synchronous\n handler_webhook_baseurl: http://localhost:3000\n\n```\n\n----------------------------------------\n\nTITLE: Private Data Collection Configuration in Hyperledger Fabric\nDESCRIPTION: JSON configuration for a Private Data Collection (PDC) in Hyperledger Fabric. This defines a collection named 'msgCollection' accessible only to Org1 members, with policies for peer distribution, data lifespan, and read permissions.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"msgCollection\",\n    \"policy\": \"OR('Org1MSP.member')\",\n    \"requiredPeerCount\": 1,\n    \"maxPeerCount\": 2,\n    \"blockToLive\": 100,\n    \"memberOnlyRead\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Attestations with EAS SDK in Node-RED\nDESCRIPTION: A JavaScript function that creates attestations using the Ethereum Attestation Service SDK. It encodes user profile data according to a schema, submits it to the blockchain as an attestation, and returns the attestation receipt.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables\nconst EAS = global.get('eas');\nconst schemaUID = msg.schemaUID;\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new eassdk.SchemaEncoder(\"string username, string platform, string handle\");\n\n// The actual data we want to attest to\nconst attestationData = [\n    { name: \"username\", value: \"awesome_developer\", type: \"string\" },\n    { name: \"platform\", value: \"GitHub\", type: \"string\" },\n    { name: \"handle\", value: \"@devmaster\", type: \"string\" }\n];\n\ntry {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation\n    const tx = await eas.attest({\n        schema: schemaUID,\n        data: {\n            recipient: \"0x0000000000000000000000000000000000000000\",  // Public attestation\n            expirationTime: 0,              // Never expires\n            revocable: true,                // Can be revoked later if needed\n            data: encodedData              // Our encoded attestation data\n        }\n    });\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n\n    // Store attestation UID for later verification\n    global.set('attestationUID', receipt.attestationUID);\n\n    msg.payload = {\n        success: true,\n        attestationUID: receipt,\n        message: \"Attestation created successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Deployments with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript functions for listing, reading, restarting, and editing custom deployments using the SettleMint JavaScript SDK. These functions interact with the SettleMint API to manage deployment configurations.\n\nLANGUAGE: typescript\nCODE:\n```\n// List deployments\nconst listDeployments = async () => {\n  const deployments = await client.customDeployment.list(\"my-app\");\n};\n\n// Get deployment details\nconst getDeployment = async () => {\n  const deployment = await client.customDeployment.read(\"deployment-unique-name\");\n};\n\n// Restart deployment\nconst restartDeployment = async () => {\n  await client.customDeployment.restart(\"deployment-unique-name\");\n};\n\n// Edit deployment\nconst editDeployment = async () => {\n  await client.customDeployment.edit(\"deployment-unique-name\", {\n    imageTag: \"v2\"\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code for creating private keys using the SettleMint JavaScript SDK. The example initializes a client with authentication credentials and demonstrates creating a private key with configurable parameters including key type and blockchain node associations.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create private key\nconst createKey = async () => {\n  const result = await client.privateKey.create({\n    name: \"my-key\",\n    applicationUniqueName: \"my-app\",\n    privateKeyType: \"ACCESSIBLE_ECDSA_P256\", // or \"HD_ECDSA_P256\" or \"HSM_ECDSA_P256\"\n    blockchainNodeUniqueNames: [\"node-123\"] // optional\n  });\n  console.log('Private key created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining State Variables in Solidity Contracts\nDESCRIPTION: Demonstrates how to declare state variables in a Solidity contract. The example shows declaring a public uint, a public address, and a mapping that associates addresses with uint values.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n    uint public value;\n    address public owner;\n    mapping(address => uint) balances;\n}\n```\n\n----------------------------------------\n\nTITLE: Curl Command Format for Hasura Database Export\nDESCRIPTION: Template curl command to export a Hasura PostgreSQL database by sending a request to the Hasura API endpoint with specific export options.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"opts\": [ \"-O\", \"-x\", \"--schema=public\", \"--inserts\"], \"clean_output\": true, \"source\": \"default\"}' -H \"x-hasura-admin-secret: <SecretKey>\" <Endpoint URL/APIKey>/v1alpha1/pg_dump > db.sql\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL with Helm Chart\nDESCRIPTION: Command to install PostgreSQL using the Bitnami Helm chart with custom configurations for username, password, and database name. This sets up PostgreSQL in its own namespace with proper authentication parameters.\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install postgresql oci://registry-1.docker.io/bitnamicharts/postgresql \\\n  --namespace postgresql \\\n  --version 14.3.3 \\\n  --create-namespace \\\n  --set global.postgresql.auth.username=platform \\\n  --set global.postgresql.auth.password=your-secure-password \\\n  --set global.postgresql.auth.database=platform\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Nodes with TypeScript SDK\nDESCRIPTION: Code to list, retrieve details, and restart blockchain nodes using the SettleMint JavaScript SDK. These functions provide programmatic access to node management operations.\n\nLANGUAGE: typescript\nCODE:\n```\n// List nodes\nawait client.blockchainNode.list(\"your-application\");\n\n// Get node details\nawait client.blockchainNode.read(\"node-unique-name\");\n\n// Restart node\nawait client.blockchainNode.restart(\"node-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Defining an EAS Schema in JavaScript\nDESCRIPTION: Configuration code for defining a schema for Ethereum Attestation Service. The schema defines the structure of attestation data with fields for a PlayStation handle, social media platform, and social media handle.\n\nLANGUAGE: javascript\nCODE:\n```\n/* SCHEMA GUIDE\nEdit the schema variable to define your attestation fields.\nFormat: \"type name, type name, type name\"\n\nAvailable Types:\n- string (text)\n- bool (true/false)\n- address (wallet address)\n- uint256 (number)\n- bytes32 (hash)\n\nExamples:\n\"string name, string email, bool isVerified\"\n\"string twitter, address wallet, uint256 age\"\n\"string discord, string github, string telegram\"\n*/\n\nconst schema = \"string pshandle, string socialMedia, string socialMediaHandle\";\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Deployments with SDK CLI in Bash\nDESCRIPTION: These commands show how to manage existing custom deployments using the SettleMint CLI, including listing deployments, retrieving details, restarting deployments, and editing configurations.\n\nLANGUAGE: bash\nCODE:\n```\n# List custom deployments\nSettleMint platform list custom-deployments --application my-app\n\n# Get deployment details\nSettleMint platform read custom-deployment my-deployment\n\n# Restart deployment\nSettleMint platform restart custom-deployment my-deployment\n\n# Edit deployment\nSettleMint platform edit custom-deployment my-deployment \\\n  --container-image registry.example.com/my-app:v2\n```\n\n----------------------------------------\n\nTITLE: Implementing a Transfer Function in Solidity\nDESCRIPTION: Shows how to implement a transfer function that moves value between accounts. The function checks the sender's balance, deducts the amount, and adds it to the recipient's balance.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transfer(address to, uint amount) public {\n    require(balances[msg.sender] >= amount);\n    balances[msg.sender] -= amount;\n    balances[to] += amount;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Events in Solidity\nDESCRIPTION: Shows how to declare an event in Solidity for logging transfers. The event includes indexed parameters for the sender and recipient addresses, making them searchable in the blockchain.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint amount);\n```\n\n----------------------------------------\n\nTITLE: Hasura Metadata Apply Command\nDESCRIPTION: CLI command to apply previously exported Hasura metadata to a Hasura instance, replacing the existing metadata configuration.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Testing PostgreSQL Connection with psql\nDESCRIPTION: Commands to test the PostgreSQL connection using the psql client with both postgres:// and postgresql:// URL formats, including SSL mode configuration. This helps validate that the database is accessible before proceeding with platform installation.\n\nLANGUAGE: bash\nCODE:\n```\n# Using psql client\npsql \"postgres://username:password@hostname:5432/dbname?sslmode=require\"\n\n# Or using connection string\n\npsql \"postgresql://username:password@hostname:5432/dbname?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Managing Smart Contract Sets with JavaScript SDK\nDESCRIPTION: TypeScript code demonstrating how to programmatically manage smart contract sets using the SettleMint JavaScript SDK. Includes client initialization and methods for creating, listing, reading, and deleting smart contract sets.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: process.env.SETTLEMENT_ACCESS_TOKEN!,\n  instance: 'https://console.settlemint.com'\n});\n\n// Create a Smart Contract Set\nconst createSmartContractSet = async () => {\n  const result = await client.smartContractSet.create({\n    applicationUniqueName: \"your-app\",        // Your application unique name\n    name: \"my-smart-contract-set\",            // The smart contract set name\n    template: \"default\"                       // Template to use (choose from available templates)\n  });\n  console.log('Smart Contract Set created:', result);\n};\n\n// List Smart Contract Sets\nconst listSmartContractSets = async () => {\n  const sets = await client.smartContractSet.list(\"your-app\");\n  console.log('Smart Contract Sets:', sets);\n};\n\n// Read Smart Contract Set details\nconst readSmartContractSet = async () => {\n  const details = await client.smartContractSet.read(\"smart-contract-set-unique-name\");\n  console.log('Smart Contract Set details:', details);\n};\n\n// Delete a Smart Contract Set\nconst deleteSmartContractSet = async () => {\n  await client.smartContractSet.delete(\"smart-contract-set-unique-name\");\n  console.log('Smart Contract Set deleted');\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Deployments with SettleMint CLI\nDESCRIPTION: Command line instructions for creating a custom deployment on the SettleMint platform. The example shows how to specify the container image details, port, provider, region, and environment variables for deployment.\n\nLANGUAGE: bash\nCODE:\n```\n# Create a custom deployment\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --port 3000 \\\n  --provider gcp \\\n  --region europe-west1\n\n# With environment variables\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --env-vars NODE_ENV=production,DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Proposing Validator Addition in QBFT Consensus\nDESCRIPTION: API reference for adding a new validator to the network using qbft_proposeValidatorVote with a true parameter. This must be executed on all existing validator nodes to take effect.\n\nLANGUAGE: markdown\nCODE:\n```\n[qbft_proposeValidatorVote](https://besu.hyperledger.org/stable/private-networks/reference/api#qbft_proposevalidatorvote)\n```\n\n----------------------------------------\n\nTITLE: Displaying Subgraph Project Folder Structure\nDESCRIPTION: Shows the hierarchical organization of a subgraph project with the main folder structure, including configuration files, datasource definitions, and utility functions used for indexing blockchain events.\n\nLANGUAGE: plaintext\nCODE:\n```\nsubgraph/\n│\n├── subgraph.config.json                 # Global generator settings\n│\n├── datasources/\n│   ├── mycontract.gql.json              # GraphQL schema definition (JSON-based)\n│   ├── mycontract.ts                    # AssemblyScript event handlers for MyContract\n│   └── mycontract.yaml                  # Subgraph manifest (datasource-level config)\n│\n└── fetch/\n    └── mycontractdata.ts               # Utility functions for entity fetch/create\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura CLI with config.yaml\nDESCRIPTION: The config.yaml file configures the Hasura CLI to connect to a remote Hasura instance. It specifies the version, endpoint, admin secret, metadata directory, and action configurations for the CLI to interact with the Hasura GraphQL engine.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nendpoint: <hasura-db-endpoint-here/API-key>\nadmin_secret: <admin-secret-here>\nmetadata_directory: metadata\nactions:\n kind: synchronous\n handler_webhook_baseurl: http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Settings with subgraph.config.json\nDESCRIPTION: Defines global configuration for the subgraph including output path, target blockchain, and datasource definitions. This file is used by The Graph CLI and SettleMint's tools for bootstrapping subgraph code generation.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": \"generated/scs.\",\n  \"chain\": \"localhost\",\n  \"datasources\": [\n    {\n      \"name\": \"MyContract\",\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"startBlock\": 0,\n      \"module\": [\"mycontract\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Google Cloud Storage Access\nDESCRIPTION: This command tests access to a Google Cloud Storage bucket using the gsutil command line tool. It verifies that the configured authentication and bucket access are working correctly.\n\nLANGUAGE: bash\nCODE:\n```\ngsutil ls gs://your-bucket\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for UserProfile Subgraph\nDESCRIPTION: This JSON schema defines the data structure for the subgraph, including the UserProfile entity and related event entities. It specifies all fields with their types and describes the relationships between entities for maintaining a historical record of profile changes.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"UserProfile\",\n    \"description\": \"Represents the current state of a user's profile.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"name\", \"type\": \"String!\" },\n      { \"name\": \"email\", \"type\": \"String!\" },\n      { \"name\": \"age\", \"type\": \"Int!\" },\n      { \"name\": \"country\", \"type\": \"String!\" },\n      { \"name\": \"isKYCApproved\", \"type\": \"Boolean!\" },\n      { \"name\": \"isDeleted\", \"type\": \"Boolean!\" }\n    ]\n  },\n  {\n    \"name\": \"ProfileCreated\",\n    \"description\": \"Captures the event when a new user profile is created.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"userId\", \"type\": \"BigInt!\" },\n      { \"name\": \"userProfile\", \"type\": \"UserProfile!\" }\n    ]\n  },\n  {\n    \"name\": \"ProfileUpdated\",\n    \"description\": \"Captures the event when an existing user profile is updated.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"userId\", \"type\": \"BigInt!\" },\n      { \"name\": \"userProfile\", \"type\": \"UserProfile!\" }\n    ]\n  },\n  {\n    \"name\": \"ProfileDeleted\",\n    \"description\": \"Captures the event when a user profile is soft-deleted.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"userId\", \"type\": \"BigInt!\" },\n      { \"name\": \"userProfile\", \"type\": \"UserProfile!\" }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for User Profile Subgraph\nDESCRIPTION: This JSON file defines the GraphQL schema for the subgraph, specifying entities like UserProfile and related event entities (ProfileCreated, ProfileUpdated, ProfileDeleted). Each entity includes field definitions with their types, creating a structured data model for querying user profile information.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"UserProfile\",\n    \"description\": \"Represents the current state of a user's profile.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"name\", \"type\": \"String!\" },\n      { \"name\": \"email\", \"type\": \"String!\" },\n      { \"name\": \"age\", \"type\": \"Int!\" },\n      { \"name\": \"country\", \"type\": \"String!\" },\n      { \"name\": \"isKYCApproved\", \"type\": \"Boolean!\" },\n      { \"name\": \"isDeleted\", \"type\": \"Boolean!\" }\n    ]\n  },\n  {\n    \"name\": \"ProfileCreated\",\n    \"description\": \"Captures the event when a new user profile is created.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"userId\", \"type\": \"BigInt!\" },\n      { \"name\": \"userProfile\", \"type\": \"UserProfile!\" }\n    ]\n  },\n  {\n    \"name\": \"ProfileUpdated\",\n    \"description\": \"Captures the event when an existing user profile is updated.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"userId\", \"type\": \"BigInt!\" },\n      { \"name\": \"userProfile\", \"type\": \"UserProfile!\" }\n    ]\n  },\n  {\n    \"name\": \"ProfileDeleted\",\n    \"description\": \"Captures the event when a user profile is soft-deleted.\",\n    \"fields\": [\n      { \"name\": \"id\", \"type\": \"ID!\" },\n      { \"name\": \"userId\", \"type\": \"BigInt!\" },\n      { \"name\": \"userProfile\", \"type\": \"UserProfile!\" }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Contract Set Locally with CLI\nDESCRIPTION: Command to create a smart contract set in the local development environment. This initiates an interactive prompt for naming the project and selecting a template.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint scs create\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Pod Status\nDESCRIPTION: Command to watch and monitor the status of PostgreSQL pods in the Kubernetes namespace after deployment, allowing verification of successful installation.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n postgresql get pods -w\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Metadata with Hasura CLI\nDESCRIPTION: Command to export all Hasura metadata using the Hasura CLI. This exports the metadata as YAML files into the designated metadata directory, capturing table tracking, permissions, relationships, and event triggers.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata export\n```\n\n----------------------------------------\n\nTITLE: Creating Platform Role in Vault\nDESCRIPTION: This command creates an AppRole in HashiCorp Vault with specific token TTL settings and attaches the 'btp' policy. The role will be used by the platform to authenticate with Vault.\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/approle/role/platform-role \\\n    token_ttl=1h \\\n    token_max_ttl=4h \\\n    secret_id_ttl=0 \\\n    policies=\"btp\"\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint JavaScript SDK\nDESCRIPTION: JavaScript/TypeScript code for middleware management operations including listing, reading details, and deleting middleware using the SDK.\n\nLANGUAGE: typescript\nCODE:\n```\n// List middlewares\nawait client.middleware.list(\"your-app\");\n\n// Get middleware details\nawait client.middleware.read(\"middleware-unique-name\");\n\n// Delete middleware\nawait client.middleware.delete(\"middleware-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Nodes with SettleMint CLI\nDESCRIPTION: CLI commands to create a new blockchain node with specified configuration parameters including network type, node type, provider, and region. This allows for programmatic deployment of network infrastructure.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create blockchain-node besu <node-name> \\\n  --blockchain-network <network-name> \\\n  --node-type <VALIDATOR|NON_VALIDATOR> \\\n  --provider <provider> \\\n  --region <region>\n\n# Get help\nSettleMint platform create blockchain-node --help\n```\n\n----------------------------------------\n\nTITLE: Adding Bitnami Repository for Redis Helm Chart\nDESCRIPTION: Commands to add the Bitnami Helm repository and update repositories to prepare for Redis installation.\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Secret Engines\nDESCRIPTION: These commands enable key-value secret engines in HashiCorp Vault for different platform components (Ethereum, IPFS, and Fabric). The KV-V2 engine provides versioned secrets storage.\n\nLANGUAGE: bash\nCODE:\n```\nvault secrets enable -path=ethereum kv-v2\nvault secrets enable -path=ipfs kv-v2\nvault secrets enable -path=fabric kv-v2\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Storage Types with SettleMint CLI\nDESCRIPTION: Command to list all available storage types that can be created using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create storage --help\n```\n\n----------------------------------------\n\nTITLE: Generating Vault Credentials\nDESCRIPTION: These commands retrieve the Role ID and generate a Secret ID for the platform role in HashiCorp Vault. These credentials are required for the platform to authenticate with Vault.\n\nLANGUAGE: bash\nCODE:\n```\n# Get Role ID\nvault read auth/approle/role/platform-role/role-id\n\n# Generate Secret ID\nvault write -force auth/approle/role/platform-role/secret-id\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware using SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code to initialize the SettleMint client and create a new middleware with specified configuration parameters.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create middleware\nconst createMiddleware = async () => {\n  const result = await client.middleware.create({\n    applicationUniqueName: \"your-app-unique-name\",\n    name: \"my-middleware\",\n    type: \"SHARED\",\n    interface: \"GRAPH\",\n    blockchainNodeUniqueName: \"your-node-unique-name\",\n    region: \"EUROPE\",  // Required\n    provider: \"GKE\",   // Required\n    size: \"SMALL\"      // Valid options: \"SMALL\" | \"MEDIUM\" | \"LARGE\"\n  });\n  console.log('Middleware created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating EAS Attestations with User Identity Data in Node-RED\nDESCRIPTION: Creates an attestation in the Ethereum Attestation Service using a previously registered schema. This function encodes attestation data including username, platform, and handle, then submits it to the blockchain as a permanent, revocable attestation.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables\nconst EAS = global.get('eas');\nconst schemaUID = msg.schemaUID;\n\n// Create an encoder that matches our schema structure\nconst schemaEncoder = new eassdk.SchemaEncoder(\"string username, string platform, string handle\");\n\n// The actual data we want to attest to\nconst attestationData = [\n    { name: \"username\", value: \"awesome_developer\", type: \"string\" },\n    { name: \"platform\", value: \"GitHub\", type: \"string\" },\n    { name: \"handle\", value: \"@devmaster\", type: \"string\" }\n];\n\ntry {\n    // Convert our data into the format EAS expects\n    const encodedData = schemaEncoder.encodeData(attestationData);\n\n    // Create the attestation\n    const tx = await eas.attest({\n        schema: schemaUID,\n        data: {\n            recipient: \"0x0000000000000000000000000000000000000000\",  // Public attestation\n            expirationTime: 0,              // Never expires\n            revocable: true,                // Can be revoked later if needed\n            data: encodedData              // Our encoded attestation data\n        }\n    });\n\n    // Wait for confirmation and get the result\n    const receipt = await tx.wait();\n\n    // Store attestation UID for later verification\n    global.set('attestationUID', receipt.attestationUID);\n\n    msg.payload = {\n        success: true,\n        attestationUID: receipt,\n        message: \"Attestation created successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint CLI\nDESCRIPTION: Commands to list middleware, get details about a specific middleware, and delete middleware using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# List middlewares\nSettleMint platform list middlewares --application <app-name>\n\n# Get middleware details\nSettleMint platform read middleware <middleware-name>\n\n# Delete middleware\nSettleMint platform delete middleware <middleware-name>\n```\n\n----------------------------------------\n\nTITLE: Managing Applications with SettleMint SDK CLI\nDESCRIPTION: Command line interface commands for listing applications and deleting a specific application using the SettleMint platform SDK CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# List applications\nSettleMint platform list applications\n\n# Delete application\nSettleMint platform delete application <name>\n```\n\n----------------------------------------\n\nTITLE: Validating AWS Secret Manager Access\nDESCRIPTION: This bash script validates access to AWS Secret Manager by setting the required environment variables and listing available secrets. It requires AWS CLI to be installed and configured with proper credentials.\n\nLANGUAGE: bash\nCODE:\n```\n# Set environment variables\nexport AWS_ACCESS_KEY_ID=\"your-access-key-id\"\nexport AWS_SECRET_ACCESS_KEY=\"your-secret-access-key\"\nexport AWS_REGION=\"your-aws-region\"\n\n# Verify access (requires AWS CLI)\naws secretsmanager list-secrets\n```\n\n----------------------------------------\n\nTITLE: Creating Storage with SettleMint CLI\nDESCRIPTION: Command to create a new storage instance of a specified type with a given name using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create storage <type> <name>\n```\n\n----------------------------------------\n\nTITLE: Installing MinIO with Helm for Platform Storage\nDESCRIPTION: This command uses Helm to install MinIO, configuring a default bucket, root credentials, and regional settings. MinIO provides S3-compatible object storage for platform data persistence.\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install minio oci://registry-1.docker.io/bitnamicharts/minio \\\n  --namespace minio \\\n  --version 13.8.4 \\\n  --create-namespace \\\n  --set defaultBuckets=platform-bucket \\\n  --set auth.rootUser=admin \\\n  --set auth.rootPassword=your-secure-password \\\n  --set provisioning.enabled=true \\\n  --set \"provisioning.config[0].name=region\" \\\n  --set \"provisioning.config[0].options.name=us-east-1\"\n```\n\n----------------------------------------\n\nTITLE: HashiCorp Vault Helm Configuration\nDESCRIPTION: This YAML snippet configures the platform to use HashiCorp Vault while disabling other secret management options. It requires the Vault address, namespace, role ID, and secret ID.\n\nLANGUAGE: yaml\nCODE:\n```\n# Values.yaml\ngoogleSecretManager:\n  enabled: false\nawsSecretManager:\n  enabled: false\nvault:\n  enabled: true\n  address: \"https://vault-cluster.hashicorp.cloud:8200\"\n  namespace: \"admin\" # Required for HCP Vault\n  roleId: \"your-role-id\"\n  secretId: \"your-secret-id\"\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Manifest for Ethereum Subgraph Configuration\nDESCRIPTION: This YAML manifest defines how the subgraph interacts with the UserData smart contract. It specifies the contract address, ABI location, starting block, and maps blockchain events to handler functions. The configuration includes entity definitions and references to mapping files.\n\nLANGUAGE: yaml\nCODE:\n```\n- kind: ethereum/contract\n  name: { id }\n  network: { chain }\n  source:\n    address: \"{address}\"\n    abi: UserData\n    startBlock: { startBlock }\n  mapping:\n    kind: ethereum/events\n    apiVersion: 0.0.5\n    language: wasm/assemblyscript\n    entities:\n      - UserProfile\n      - ProfileCreated\n      - ProfileUpdated\n      - ProfileDeleted\n    abis:\n      - name: UserData\n        file: \"{root}/out/UserData.sol/UserData.json\"\n    eventHandlers:\n      - event: ProfileCreated(indexed uint256,string,string,uint8,string,bool)\n        handler: handleProfileCreated\n      - event: ProfileUpdated(indexed uint256,string,string,uint8,string,bool)\n        handler: handleProfileUpdated\n      - event: ProfileDeleted(indexed uint256)\n        handler: handleProfileDeleted\n    file: { file }\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Instance with SettleMint CLI\nDESCRIPTION: Commands to create a new Hasura integration tool instance using the SettleMint CLI. Includes the basic command and how to view help documentation for additional options.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create integration-tool hasura <name>\n\n# Get information about the command and all available options\nSettleMint platform create integration-tool hasura --help\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Delegation\nDESCRIPTION: Command to verify that DNS delegation has been properly configured using the dig utility to query the NS records for the specified domain.\n\nLANGUAGE: bash\nCODE:\n```\ndig NS btp.settlemint.com\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Creation Help with SettleMint CLI\nDESCRIPTION: Command to get detailed help and available options for creating a specific type of storage using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create storage <type> --help\n```\n\n----------------------------------------\n\nTITLE: AWS Secret Manager Helm Configuration\nDESCRIPTION: This YAML snippet configures the platform to use AWS Secret Manager while disabling other secret management options. It requires the AWS region, access key ID, and secret access key.\n\nLANGUAGE: yaml\nCODE:\n```\n# Values.yaml\nvault:\n  enabled: false\ngcpSecretManager:\n  enabled: false\nawsSecretManager:\n  enabled: true\n  region: \"your-aws-region\"\n  accessKeyId: \"your-access-key-id\"\n  secretAccessKey: \"your-secret-access-key\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Blockscout API Endpoints\nDESCRIPTION: HTTP endpoints for accessing Blockscout's REST API, showing the basic URL patterns for API access.\n\nLANGUAGE: http\nCODE:\n```\nREST API URL: /api\nJSON RPC URL: /api/eth-rpc\nGraphQL URL: /graphiql\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Support for Multiple ERC721 Extensions\nDESCRIPTION: Overrides the supportsInterface function to properly handle multiple inheritance from ERC721, ERC721Enumerable, and AccessControl contracts. Ensures the contract correctly reports which interfaces it implements.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable, AccessControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to log in to the SettleMint platform via CLI before creating storage instances.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Deployments with SettleMint CLI\nDESCRIPTION: Commands for listing, reading details, restarting, and editing custom deployments using the SettleMint platform CLI. This allows administrators to manage deployments through command-line interface.\n\nLANGUAGE: bash\nCODE:\n```\n# List custom deployments\nSettleMint platform list custom-deployments --application my-app\n\n# Get deployment details\nSettleMint platform read custom-deployment my-deployment\n\n# Restart deployment\nSettleMint platform restart custom-deployment my-deployment\n\n# Edit deployment\nSettleMint platform edit custom-deployment my-deployment \\\n  --container-image registry.example.com/my-app:v2\n```\n\n----------------------------------------\n\nTITLE: Deploying Infrastructure with Terraform\nDESCRIPTION: Commands to initialize and apply the Terraform configuration for deploying the BTP infrastructure components on Google Cloud Platform.\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Removing Resources with Terraform Destroy\nDESCRIPTION: Command to tear down and remove all resources created by Terraform when the BTP deployment is no longer needed.\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Managing Storage with SettleMint CLI Commands\nDESCRIPTION: CLI commands for listing storage instances, viewing storage details, and deleting storage using the SettleMint platform SDK CLI. These commands require specifying the application name or storage instance name.\n\nLANGUAGE: bash\nCODE:\n```\n# List storage instances\nSettleMint platform list storage --application <app-name>\n\n# Get storage details\nSettleMint platform read storage <name>\n\n# Delete storage\nSettleMint platform delete storage <name>\n```\n\n----------------------------------------\n\nTITLE: Validating HashiCorp Vault Access\nDESCRIPTION: This bash script validates access to HashiCorp Vault by setting the required environment variables and attempting to authenticate using the AppRole credentials. It verifies the role ID and secret ID are working correctly.\n\nLANGUAGE: bash\nCODE:\n```\n# Set environment variables\nexport VAULT_ADDR=\"your-vault-address\"\nexport VAULT_NAMESPACE=\"admin\"  # For HCP Vault\nexport VAULT_ROLE_ID=\"your-role-id\"\nexport VAULT_SECRET_ID=\"your-secret-id\"\n\n# Verify access\nvault write auth/approle/login \\\n  role_id=$VAULT_ROLE_ID \\\n  secret_id=$VAULT_SECRET_ID\n```\n\n----------------------------------------\n\nTITLE: Transaction Endpoints in Blockscout REST API\nDESCRIPTION: HTTP GET requests for accessing transaction information in Blockscout, including transaction details, token transfers, internal transactions, logs, and state changes.\n\nLANGUAGE: http\nCODE:\n```\nGET /transactions                                           # Retrieve transactions\nGET /transactions/{transaction_hash}                        # Get transaction details\nGET /transactions/{transaction_hash}/token-transfers        # Get token transfers for a transaction\nGET /transactions/{transaction_hash}/internal-transactions  # Get internal transactions\nGET /transactions/{transaction_hash}/logs                   # Get transaction logs\nGET /transactions/{transaction_hash}/raw-trace              # Get transaction raw trace\nGET /transactions/{transaction_hash}/state-changes          # Get transaction state changes\nGET /transactions/{transaction_hash}/summary                # Get a human-readable transaction summary\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint platform using the CLI before creating a Hasura instance.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Cloning the SettleMint Documentation Repository\nDESCRIPTION: Commands to clone the SettleMint documentation repository from GitHub and navigate to the project directory.\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/settlemint/docs\ncd yourproject\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint CLI before creating storage instances.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Building the Documentation for Production\nDESCRIPTION: Command to build the SettleMint documentation application for production deployment.\n\nLANGUAGE: bash\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Signing into SettleMint Helm Registry\nDESCRIPTION: Command to authenticate with the SettleMint Helm registry using provided credentials. Replace the placeholder username and password with your actual credentials.\n\nLANGUAGE: bash\nCODE:\n```\nhelm registry login harbor.settlemint.com --username <username> --password <password>\n```\n\n----------------------------------------\n\nTITLE: Interacting with Smart Contracts via Blockscout REST API\nDESCRIPTION: HTTP endpoints for retrieving verified smart contract details and interacting with contract methods. These endpoints provide access to contract code, read and write methods, and facilitate contract queries.\n\nLANGUAGE: http\nCODE:\n```\nGET /smart-contracts                                     # Get verified smart contracts\nGET /smart-contracts/{address_hash}                      # Get smart contract details\nGET /smart-contracts/{address_hash}/methods-read         # Get read methods of a smart contract\nGET /smart-contracts/{address_hash}/methods-write        # Get write methods of a smart contract\nPOST /smart-contracts/{address_hash}/query-read-method   # Query a smart contract's read method\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Utility Functions with mycontractdata.ts\nDESCRIPTION: Helper functions for fetching entities from the store or creating them if they don't exist. These utilities enforce schema defaults and ensure consistent object initialization, reducing duplication in event handlers.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyEntity } from \"../../generated/schema\";\nimport { BigInt } from \"@graphprotocol/graph-ts\";\n\nexport function fetchMyEntity(id: BigInt): MyEntity {\n  let key = id.toString();\n  let entity = MyEntity.load(key);\n\n  if (!entity) {\n    entity = new MyEntity(key);\n    entity.creator = Bytes.empty();\n    entity.status = \"PENDING\";\n    entity.timestamp = BigInt.zero();\n  }\n\n  return entity;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Instance with SettleMint CLI\nDESCRIPTION: Commands to create a Hasura integration tool instance using the SettleMint CLI, including how to get help with all available options.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create integration-tool hasura <name>\n\n# Get information about the command and all available options\nSettleMint platform create integration-tool hasura --help\n```\n\n----------------------------------------\n\nTITLE: Creating Storage with SettleMint CLI\nDESCRIPTION: Commands to view available storage types, create storage instances, and get help with options in the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the list of available storage types\nSettleMint platform create storage --help\n\n# Create storage\nSettleMint platform create storage <type> <name>\n\n# Get information about the command and all available options\nSettleMint platform create storage <type> --help\n```\n\n----------------------------------------\n\nTITLE: OpenAI Embedding Configuration\nDESCRIPTION: Example configuration for the OpenAI node that generates vector embeddings from input text. It specifies the embedding model to use and references the input from the request payload.\n\nLANGUAGE: text\nCODE:\n```\nModel: text-embedding-ada-002\nInput: {{msg.payload.query}}\n```\n\n----------------------------------------\n\nTITLE: Adding a File to IPFS Using CLI\nDESCRIPTION: Demonstrates the command to add a file to IPFS using the command line interface. This is the fundamental operation for storing content on IPFS where the file gets chunked, hashed, and made available on the network.\n\nLANGUAGE: bash\nCODE:\n```\nipfs add <filename>\n```\n\n----------------------------------------\n\nTITLE: Viewing SettleMint Platform Configuration Options\nDESCRIPTION: Command to display all available configuration options for the SettleMint Platform using Helm. This shows the values for version 7.0.0 of the platform.\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values oci://registry.settlemint.com/settlemint-platform/SettleMint --version 7.0.0\n```\n\n----------------------------------------\n\nTITLE: Search Endpoints in Blockscout REST API\nDESCRIPTION: HTTP GET requests for performing searches in the Blockscout explorer, including general search and search redirect checking.\n\nLANGUAGE: http\nCODE:\n```\nGET /search                         # Perform a general search\nGET /search/check-redirect          # Search redirect\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database Backup Using pg_dump Command\nDESCRIPTION: This command uses the pg_dump utility to create a full backup of a PostgreSQL database. It specifies connection parameters including host, port, user credentials, and formats the output as a plain SQL file saved to the desktop.\n\nLANGUAGE: sql\nCODE:\n```\nPGPASSWORD=0c510604a378d348e7ed pg_dump \\\n  -h p2p.gke-europe.settlemint.com \\\n  -p 30787 \\\n  -U hasura-f1cd9 \\\n  -d hasura-f1cd9 \\\n  -F p \\\n  -f ~/Desktop/hasura_backup.sql\n```\n\n----------------------------------------\n\nTITLE: Creating a Blockchain Network with SettleMint CLI\nDESCRIPTION: Commands to create a new Besu blockchain network using the SettleMint CLI, specifying network name and node name. Includes a help command to get additional information about available options.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create blockchain-network besu <network-name> \\\n  --node-name <node-name>\n\n# Get information about the command and all available options\nSettleMint platform create blockchain-network besu --help\n```\n\n----------------------------------------\n\nTITLE: Creating a Blockchain Node using TypeScript SDK\nDESCRIPTION: Code to create a blockchain node using the SettleMint JavaScript SDK. This snippet initializes the client with authentication and creates a new node with specific configuration parameters.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\nconst createNode = async () => {\n  const result = await client.blockchainNode.create({\n    applicationUniqueName: \"your-application\",\n    blockchainNetworkUniqueName: \"your-network\",\n    name: \"my-node\",\n    nodeType: \"VALIDATOR\",\n    provider: \"provider\",\n    region: \"region\"\n  });\n  console.log('Node created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a MinIO Service Account\nDESCRIPTION: This command creates a service account in MinIO for platform access. Service accounts provide controlled access to MinIO storage resources.\n\nLANGUAGE: bash\nCODE:\n```\nmc admin user svcacct add minio platform-user\n```\n\n----------------------------------------\n\nTITLE: Rendering Recommended Setup Cards in JSX\nDESCRIPTION: This code presents two deployment recommendations (Development/PoC and Production) using a responsive grid layout with Card components. Each card contains a heading and bullet points describing the recommended configuration for that environment type.\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n  <Card>\n    ### Development/PoC\n    - Shared infrastructure\n    - Small resource pack\n    - Basic monitoring\n    - Cost optimized\n  </Card>\n\n  <Card>\n    ### Production\n    - Dedicated infrastructure\n    - Medium/Large resource pack\n    - Full monitoring\n    - High availability\n  </Card>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Explorers with SettleMint CLI\nDESCRIPTION: Commands to list available explorers and restart a specific explorer using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# List explorers\nSettleMint platform list services --type insights\n\n# Restart explorer\nSettleMint platform restart insights blockscout <name>\n```\n\n----------------------------------------\n\nTITLE: Managing Land Tax Rates and Collection in Blockchain Land Registry\nDESCRIPTION: Functions for tax administration that allow tax authorities to set base tax rates and collect delayed tax payments with penalties. The system records payment history for each parcel.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setTaxRate(uint256 newRate) external onlyTaxAuthority {\n    require(newRate <= 1000, \"Exceeds maximum 10% tax rate\");\n    baseTaxRate = newRate;\n}\n\nfunction collectDelayedTax(uint256 parcelId, uint256 monthsDelayed)\n    external\n    onlyTaxAuthority\n{\n    uint256 penalty = _parcels[parcelId].landRate\n        .mul(_parcels[parcelId].area)\n        .mul(lateTaxPenalty)\n        .mul(monthsDelayed)\n        .div(10000);\n\n    _parcels[parcelId].paymentHistory.push(PaymentDetail({\n        paymentReference: string(abi.encodePacked(\"PENALTY-\", parcelId)),\n        currency: \"LOCAL\",\n        amount: penalty,\n        isForeign: false,\n        sourceBank: \"Tax Authority\",\n        proofOfPayment: string(abi.encodePacked(\"PENALTY-INVOICE-\", parcelId)),\n        timestamp: block.timestamp\n    }));\n\n    emit TaxPaid(parcelId, penalty, \"LOCAL\");\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PostgreSQL Database Export with curl Command Template\nDESCRIPTION: A curl command template to generate a PostgreSQL database export from Hasura. It uses the Hasura API with authentication to create a full database dump with specific options for schema and formatting.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"opts\": [ \"-O\", \"-x\", \"--schema=public\", \"--inserts\"], \"clean_output\": true, \"source\": \"default\"}' -H \"x-hasura-admin-secret: <SecretKey>\" <Endpoint URL/APIKey>/v1alpha1/pg_dump > db.sql\n```\n\n----------------------------------------\n\nTITLE: API Portal Base URL Format\nDESCRIPTION: Example of an API portal base URL structure used to interact with the middleware.\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api-portal-affe9.gke-europe.settlemint.com/\n```\n\n----------------------------------------\n\nTITLE: Platform Storage Configuration for Multiple Cloud Providers\nDESCRIPTION: This YAML configuration example shows how to set up storage connections for different cloud providers (AWS S3, Azure Blob Storage, Google Cloud Storage). It includes connection URLs, encryption keys, and provider-specific credentials.\n\nLANGUAGE: yaml\nCODE:\n```\ndeploymentEngine:\n  state:\n    # AWS S3\n    connectionUrl: 's3://bucket-name?region=us-east-1&endpoint=s3.amazonaws.com'\n\n    # Azure Blob Storage\n    connectionUrl: 'azblob://<container-path>'\n\n    # Google Cloud Storage\n    connectionUrl: 'gs://bucket-name'\n\n    credentials:\n      encryptionKey: 'your-generated-key' # From openssl command\n\n      # AWS Credentials\n      aws:\n        accessKeyId: 'your-access-key'\n        secretAccessKey: 'your-secret-key'\n        region: 'us-east-1'\n\n      # Azure Credentials\n      azure:\n        storageAccount: 'storage-account-name'\n        storageKey: 'storage-account-key'\n\n      # GCP Credentials\n      google:\n        project: 'project-id'\n        credentials: |\n          {\n            \"type\": \"service_account\",\n            \"project_id\": \"your-project\",\n            \"private_key_id\": \"key-id\",\n            \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\",\n            \"client_email\": \"service-account@project.iam.gserviceaccount.com\",\n            \"client_id\": \"client-id\",\n            \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n            \"token_uri\": \"https://oauth2.googleapis.com/token\",\n            \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n            \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/service-account@project.iam.gserviceaccount.com\"\n          }\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware using SettleMint CLI\nDESCRIPTION: Commands to list, read details of, and delete middleware using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# List middlewares\nSettleMint platform list middlewares --application <app-name>\n\n# Get middleware details\nSettleMint platform read middleware <middleware-name>\n\n# Delete middleware\nSettleMint platform delete middleware <middleware-name>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to log in to the SettleMint platform using the CLI before creating middleware.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Complete Node-RED EAS Flow Configuration\nDESCRIPTION: JSON configuration for the complete Node-RED flow implementing Ethereum Attestation Service integration. Includes all nodes, their configurations, and connections that form the workflow for EAS schema registration, attestation creation, and verification.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"eas_flow\",\n    \"type\": \"tab\",\n    \"label\": \"EAS Attestation Flow\",\n    \"disabled\": false,\n    \"info\": \"\"\n  },\n  {\n    \"id\": \"setup_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Inputs: RpcUrl, Registry address,Eas address, Private key\",\n    \"props\": [\n      {\n        \"p\": \"rpcUrl\",\n        \"v\": \"RPC-URL/API-KEY\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"registryAddress\",\n        \"v\": \"REGISTERY-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"easAddress\",\n        \"v\": \"EAS-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"privateKey\",\n        \"v\": \"PRIVATE-KEY\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 250,\n    \"y\": 120,\n    \"wires\": [[\"setup_function\"]]\n  },\n  {\n    \"id\": \"setup_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup Global Variables\",\n    \"func\": \"// Initialize provider with specific network parameters\\nconst provider = new ethers.JsonRpcProvider(msg.rpcUrl)\\n\\nconst signer = new ethers.Wallet(msg.privateKey, provider);\\n\\n// Initialize EAS with specific gas settings\\nconst EAS = new eassdk.EAS(msg.easAddress);\\neas.connect(signer);\\n\\n// Store in global context\\nglobal.set('provider', provider);\\nglobal.set('signer', signer);\\nglobal.set('eas', eas);\\nglobal.set('registryAddress', msg.registryAddress);\\n\\nmsg.payload = 'EAS Configuration Initialized';\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      },\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      }\n    ],\n    \"x\": 580,\n    \"y\": 120,\n    \"wires\": [[\"setup_debug\"]]\n  },\n  {\n    \"id\": \"register_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register Schema\",\n    \"props\": [],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 120,\n    \"y\": 260,\n    \"wires\": [[\"register_function\"]]\n  },\n  {\n    \"id\": \"register_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register Schema\",\n    \"func\": \"// Get global variables set in init\\nconst signer = global.get('signer');\\nconst registryAddress = global.get('registryAddress');\\n\\n// Initialize SchemaRegistry contract\\nconst schemaRegistry = new ethers.Contract(\\n    registryAddress,\\n    [\\n        \\\"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\\\",\\n        \\\"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\\\"\\n    ],\\n    signer\\n);\\n\\n// Define what data fields our attestations will contain\\nconst schema = \\\"string username, string platform, string handle\\\";\\nconst resolverAddress = \\\"0x0000000000000000000000000000000000000000\\\";  // No special validation needed\\nconst revocable = true;  // Attestations can be revoked if needed\\n\\ntry {\\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\\n    const receipt = await tx.wait();\\n\\n    const schemaUID = receipt.logs[0].topics[1];\\n    // Store schemaUID in global context for later use\\n    global.set('schemaUID', schemaUID);\\n\\n    msg.payload = {\\n        success: true,\\n        schemaUID: schemaUID,\\n        message: \\\"Schema registered successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 310,\n    \"y\": 260,\n    \"wires\": [[\"register_debug\"]]\n  },\n  {\n    \"id\": \"create_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: Schema uid\",\n    \"props\": [\n      {\n        \"p\": \"schemaUID\",\n        \"v\": \"SCHEMA-UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 130,\n    \"y\": 400,\n    \"wires\": [[\"create_function\"]]\n  },\n  {\n    \"id\": \"create_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create Attestation\",\n    \"func\": \"// Get global variables\\nconst EAS = global.get('eas');\\nconst schemaUID = msg.schemaUID;\\n\\n// Create an encoder that matches our schema structure\\nconst schemaEncoder = new eassdk.SchemaEncoder(\\\"string username, string platform, string handle\\\");\\n\\n// The actual data we want to attest to\\nconst attestationData = [\\n    { name: \\\"username\\\", value: \\\"awesome_developer\\\", type: \\\"string\\\" },\\n    { name: \\\"platform\\\", value: \\\"GitHub\\\", type: \\\"string\\\" },\\n    { name: \\\"handle\\\", value: \\\"@devmaster\\\", type: \\\"string\\\" }\\n];\\n\\ntry {\\n    // Convert our data into the format EAS expects\\n    const encodedData = schemaEncoder.encodeData(attestationData);\\n\\n    // Create the attestation\\n    const tx = await eas.attest({\\n        schema: schemaUID,\\n        data: {\\n            recipient: \\\"0x0000000000000000000000000000000000000000\\\",  // Public attestation\\n            expirationTime: 0,              // Never expires\\n            revocable: true,                // Can be revoked later if needed\\n            data: encodedData              // Our encoded attestation data\\n        }\\n    });\\n\\n    // Wait for confirmation and get the result\\n    const receipt = await tx.wait();\\n\\n    // Store attestation UID for later verification\\n    global.set('attestationUID', receipt.attestationUID);\\n\\n    msg.payload = {\\n        success: true,\\n        attestationUID: receipt,\\n        message: \\\"Attestation created successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 330,\n    \"y\": 400,\n    \"wires\": [[\"create_debug\"]]\n  },\n  {\n    \"id\": \"verify_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: Attestation UID\",\n    \"props\": [\n      {\n        \"p\": \"attestationUID\",\n        \"v\": \"Attestation UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 140,\n    \"y\": 540,\n    \"wires\": [[\"verify_function\"]]\n  },\n  {\n    \"id\": \"verify_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify Attestation\",\n    \"func\": \"const EAS = global.get('eas');\\nconst attestationUID = msg.attestationUID;\\n\\ntry {\\n    const attestation = await eas.getAttestation(attestationUID);\\n    const schemaEncoder = new eassdk.SchemaEncoder(\\\"string pshandle, string socialMedia, string socialMediaHandle\\\");\\n    const decodedData = schemaEncoder.decodeData(attestation.data);\\n\\n    msg.payload = {\\n        isValid: !attestation.revoked,\\n        attestation: {\\n            attester: attestation.attester,\\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\\n            expirationTime: attestation.expirationTime > 0 \\n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\\n                : 'Never',\\n            revoked: attestation.revoked\\n        },\\n        data: {\\n            psHandle: decodedData[0].value.toString(),\\n            socialMedia: decodedData[1].value.toString(),\\n            socialMediaHandle: decodedData[2].value.toString()\\n        }\\n    };\\n} catch (error) {\\n    msg.payload = { \\n        success: false, \\n        error: error.message,\\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 350,\n    \"y\": 540,\n    \"wires\": [[\"verify_debug\"]]\n  },\n  {\n    \"id\": \"setup_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 770,\n    \"y\": 120,\n    \"wires\": []\n  },\n  {\n    \"id\": \"register_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 500,\n    \"y\": 260,\n    \"wires\": []\n  },\n  {\n    \"id\": \"create_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 520,\n    \"y\": 400,\n    \"wires\": []\n  },\n  {\n    \"id\": \"verify_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 530,\n    \"y\": 540,\n    \"wires\": []\n  },\n  {\n    \"id\": \"1322bb7438d96baf\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Initialize EAS Config\",\n    \"info\": \"\",\n    \"x\": 110,\n    \"y\": 60,\n    \"wires\": []\n  },\n  {\n    \"id\": \"e5e3294119a80c1b\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Example curl Command for PostgreSQL Database Export\nDESCRIPTION: A specific example of the curl command to export a PostgreSQL database from a Hasura instance in SettleMint's environment, showing actual values for the admin secret and endpoint URL.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"opts\": [ \"-O\", \"-x\", \"--schema=public\", \"--inserts\"], \"clean_output\": true, \"source\": \"default\"}' -H \"x-hasura-admin-secret:78b0e4618125322de0eb\" https://fuchsiacapybara-7f70.gke-europe.settlemint.com/bpaas-1d79Acd6A2f112EA450F1C07a372a7D582E6121F/v1alpha1/pg_dump > db.sql\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware using SettleMint SDK JS\nDESCRIPTION: JavaScript code using the SettleMint SDK to list middlewares, read middleware details, and delete middleware.\n\nLANGUAGE: typescript\nCODE:\n```\n// List middlewares\nawait client.middleware.list(\"your-app\");\n\n// Get middleware details\nawait client.middleware.read(\"middleware-unique-name\");\n\n// Delete middleware\nawait client.middleware.delete(\"middleware-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Validating Google Memorystore Connection\nDESCRIPTION: Bash commands to retrieve Google Memorystore connection details and test connectivity using redis-cli.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the Memorystore instance connection details\nREDIS_HOST=$(gcloud redis instances describe [INSTANCE_ID] \\\n    --region=[REGION] --format='get(host)')\nREDIS_PORT=$(gcloud redis instances describe [INSTANCE_ID] \\\n    --region=[REGION] --format='get(port)')\n\n# Test connection using redis-cli\nredis-cli -h $REDIS_HOST -p $REDIS_PORT ping\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint CLI\nDESCRIPTION: CLI commands for managing middleware including listing, viewing details, and deleting middleware instances.\n\nLANGUAGE: bash\nCODE:\n```\n# List middlewares\nSettleMint platform list middlewares --application <app-name>\n\n# Get middleware details\nSettleMint platform read middleware <middleware-name>\n\n# Delete middleware\nSettleMint platform delete middleware <middleware-name>\n```\n\n----------------------------------------\n\nTITLE: Querying Attestations from Indexer with GraphQL in JavaScript\nDESCRIPTION: JavaScript function that queries attestations from the EAS indexer using GraphQL. The function filters attestations by schema ID and returns details like attester, recipient, and data.\n\nLANGUAGE: javascript\nCODE:\n```\n// Example fetch request to query attestations\nasync function queryAttestations(schemaId) {\n  const response = await fetch(\"YOUR_INDEXER_URL\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer YOUR_APP_TOKEN\",\n    },\n    body: JSON.stringify({\n      query: `{\n        attestations(\n          where: {\n            schemaId: {\n              equals: \"${schemaId}\"\n            }\n          }\n        ) {\n          id\n          attester\n          recipient\n          revoked\n          data\n        }\n      }`,\n    }),\n  });\n\n  const data = await response.json();\n  return data.data.attestations;\n}\n\n// Usage example:\nconst schemaId = \"YOUR_SCHEMA_ID\"; // From the registration step\nconst attestations = await queryAttestations(schemaId);\nconsole.log(\"Attestations:\", attestations);\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph with subgraph.config.json\nDESCRIPTION: JSON configuration file that defines the subgraph settings, including blockchain network chain ID, contract address, and datasources to be indexed.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": \"generated/scs.\",\n  \"chain\": \"44819\",\n  \"datasources\": [\n    {\n      \"name\": \"UserData\",\n      \"address\": \"0x8b1544B8e0d21aef575Ce51e0c243c2D73C3C7B9\",\n      \"startBlock\": 0,\n      \"module\": [\"userdata\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura CLI Configuration YAML Structure\nDESCRIPTION: Template for the config.yaml file required by Hasura CLI, showing the syntax for specifying endpoint, admin secret, metadata directory, and action settings.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nendpoint: <hasura-db-endpoint-here/API-key>\nadmin_secret: <admin-secret-here>\nmetadata_directory: metadata\nactions:\n kind: synchronous\n handler_webhook_baseurl: http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Implementing AssemblyScript Event Handlers for UserData Contract\nDESCRIPTION: This TypeScript file contains the event handler functions that process blockchain events and update the subgraph store. It includes handlers for profile creation, updates, and deletion events that maintain the state of UserProfile entities and their historical records.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BigInt } from \"@graphprotocol/graph-ts\";\nimport {\n  ProfileCreated as ProfileCreatedEvent,\n  ProfileUpdated as ProfileUpdatedEvent,\n  ProfileDeleted as ProfileDeletedEvent,\n} from \"../../generated/userdata/UserData\";\nimport {\n  UserProfile,\n  ProfileCreated,\n  ProfileUpdated,\n  ProfileDeleted,\n} from \"../../generated/schema\";\nimport { fetchUserProfile } from \"../fetch/userdata\";\n\nexport function handleProfileCreated(event: ProfileCreatedEvent): void {\n  // Generate a unique event ID using transaction hash and log index\n  let id = event.transaction.hash.toHex() + \"-\" + event.logIndex.toString();\n  let entity = new ProfileCreated(id);\n  entity.userId = event.params.userId;\n\n  // Fetch or create the UserProfile entity\n  let profile = fetchUserProfile(event.params.userId);\n  profile.name = event.params.name;\n  profile.email = event.params.email;\n  profile.age = event.params.age;\n  profile.country = event.params.country;\n  profile.isKYCApproved = event.params.isKYCApproved;\n  profile.isDeleted = false;\n  profile.save();\n\n  // Link the event entity to the user profile and save\n  entity.userProfile = profile.id;\n  entity.save();\n}\n\nexport function handleProfileUpdated(event: ProfileUpdatedEvent): void {\n  let id = event.transaction.hash.toHex() + \"-\" + event.logIndex.toString();\n  let entity = new ProfileUpdated(id);\n  entity.userId = event.params.userId;\n\n  // Retrieve and update the existing UserProfile entity\n  let profile = fetchUserProfile(event.params.userId);\n  profile.name = event.params.name;\n  profile.email = event.params.email;\n  profile.age = event.params.age;\n  profile.country = event.params.country;\n  profile.isKYCApproved = event.params.isKYCApproved;\n  profile.isDeleted = false;\n  profile.save();\n\n  entity.userProfile = profile.id;\n  entity.save();\n}\n\nexport function handleProfileDeleted(event: ProfileDeletedEvent): void {\n  let id = event.transaction.hash.toHex() + \"-\" + event.logIndex.toString();\n  let entity = new ProfileDeleted(id);\n  entity.userId = event.params.userId;\n\n  // Retrieve the UserProfile entity and mark it as deleted\n  let profile = fetchUserProfile(event.params.userId);\n  profile.isDeleted = true;\n  profile.save();\n\n  entity.userProfile = profile.id;\n  entity.save();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Grid for Blockchain Development Options in React\nDESCRIPTION: This code renders a responsive grid layout of cards showcasing three main blockchain development options: EVM chains, Hyperledger Fabric, and Application kits. Each card contains a description, feature list, and call-to-action button.\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-6 mb-8\">\n  {/* EVM Chain Development */}\n  <Card className=\"border border-slate-200 dark:border-slate-800 shadow-sm hover:shadow-md hover:-translate-y-2 transition-transform duration-300 px-4 pt-0 pb-5\">\n    <div className=\"flex flex-col justify-between\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-slate-800 dark:text-slate-200 mt-1 mb-2\">\n          EVM chains\n        </h3>\n        <div className=\"text-sm text-slate-700 dark:text-slate-300 leading-snug mt-1 mb-3\">\n          For Besu, Ethereum, Polygon, Optimism, and other EVM-compatible blockchains\n        </div>\n        <ul className=\"space-y-2 text-sm text-slate-700 dark:text-slate-300 pl-0 mb-0\">\n          <li className=\"flex items-start\"><span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Step-by-step development workflow</li>\n          <li className=\"flex items-start\"><span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Solidity smart contract development and deployment</li>\n          <li className=\"flex items-start\"><span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Graph middleware, API portal and other EVM tools</li>\n          \n        </ul>\n      </div>\n    </div>\n    <div className=\"mt-1 pt-2 border-t border-slate-200 dark:border-slate-700 flex justify-center\">\n      <a href=\"/documentation/building-with-settlemint/getting-started#evm-development-overview\" className=\"inline-block bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 text-sm rounded-md transition-colors no-underline\">\n        Explore EVM guide\n      </a>\n    </div>\n  </Card>\n\n{/* Hyperledger Fabric Development */}\n\n<Card className=\"border border-slate-200 dark:border-slate-800 shadow-sm hover:shadow-md hover:-translate-y-2 transition-transform duration-300 px-4 pt-0 pb-5\">\n  <div className=\"flex flex-col justify-between\">\n    <div>\n      <h3 className=\"text-lg font-semibold text-slate-800 dark:text-slate-200 mt-1 mb-2\">\n        Hyperledger Fabric\n      </h3>\n      <div className=\"text-sm text-slate-700 dark:text-slate-300 leading-snug mt-1 mb-3\">\n        For permissioned enterprise blockchain networks with privacy\n        requirements\n      </div>\n      <ul className=\"space-y-2 text-sm text-slate-700 dark:text-slate-300 pl-0 mb-0\">\n        <li className=\"flex items-start\">\n          <span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Fabric network and\n          node setup\n        </li>\n        <li className=\"flex items-start\">\n          <span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Chaincode\n          development and deployment\n        </li>\n        <li className=\"flex items-start\">\n          <span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Fabconnect\n          middleware and fabric toolkits\n        </li>\n      </ul>\n    </div>\n  </div>\n  <div className=\"mt-1 pt-2 border-t border-slate-200 dark:border-slate-700 flex justify-center\">\n    <a\n      href=\"/documentation/building-with-settlemint/getting-started#fabric-development-overview\"\n      className=\"inline-block bg-emerald-600 hover:bg-emerald-700 text-white px-3 py-1.5 text-sm rounded-md transition-colors no-underline\"\n    >\n      Explore fabric guide\n    </a>\n  </div>\n</Card>\n\n{/* Application Kits */}\n\n  <Card className=\"border border-slate-200 dark:border-slate-800 shadow-sm hover:shadow-md hover:-translate-y-2 transition-transform duration-300 px-4 pt-0 pb-5\">\n    <div className=\"flex flex-col justify-between\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-slate-800 dark:text-slate-200 mt-1 mb-2\">\n          Application kits\n        </h3>\n        <div className=\"text-sm text-slate-700 dark:text-slate-300 leading-snug mt-1 mb-3\">\n          Accelerate development using ready-made app kits tailored for common blockchain use cases\n        </div>\n        <ul className=\"space-y-2 text-sm text-slate-700 dark:text-slate-300 pl-0 mb-0\">\n          <li className=\"flex items-start\"><span className=\"text-indigo-500 mr-2 mt-0.5\">✓</span>Ready-to-deploy smart contract logic</li>\n          <li className=\"flex items-start\"><span className=\"text-indigo-500 mr-2 mt-0.5\">✓</span>UI components integrated with SettleMint APIs</li>\n          <li className=\"flex items-start\"><span className=\"text-indigo-500 mr-2 mt-0.5\">✓</span>Customizable templates for faster prototyping</li>\n          \n        </ul>\n      </div>\n    </div>\n    <div className=\"mt-1 pt-2 border-t border-slate-200 dark:border-slate-700 flex justify-center\">\n      <a href=\"/documentation/application-kits/introduction\" className=\"inline-block bg-indigo-600 hover:bg-indigo-700 text-white px-3 py-1.5 text-sm rounded-md transition-colors no-underline\">\n        Explore app kits\n      </a>\n    </div>\n  </Card>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Signing Key with OpenSSL\nDESCRIPTION: Command to generate a secure random string to use as a JWT signing key. This key is essential for securely signing user sessions.\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Initializing The Graph SDK Client\nDESCRIPTION: TypeScript code for initializing The Graph client using the SettleMint SDK for TheGraph, configuring endpoints and authentication for subgraph access.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheGraphClient } from \"@settlemint/sdk-thegraph\";\n\nconst { client: graphClient, graphql } = createTheGraphClient({\n  instances: JSON.parse(\n    process.env.SETTLEMINT_THEGRAPH_SUBGRAPHS_ENDPOINTS || \"[]\"\n  ),\n  accessToken: process.env.SETTLEMINT_ACCESS_TOKEN!,\n  subgraphName: \"your-subgraph\",\n});\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Request Body for Smart Contract Function\nDESCRIPTION: Example JSON request body for calling a smart contract function through the REST API, including transaction parameters and function inputs.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": \"\",\n  \"gasLimit\": \"\",\n  \"gasPrice\": \"\",\n  \"simulate\": true,\n  \"metadata\": {},\n  \"input\": {\n    \"userId\": \"\",\n    \"name\": \"\",\n    \"email\": \"\",\n    \"age\": 0,\n    \"country\": \"\",\n    \"isKYCApproved\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Metadata Export Command\nDESCRIPTION: CLI command to export Hasura metadata as YAML files to the metadata directory, capturing tables, permissions, relationships, and event triggers.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata export\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Creating Blockchain Network with SettleMint SDK CLI\nDESCRIPTION: Commands for authenticating with SettleMint and creating a Besu blockchain network using the CLI tool. The example shows basic authentication and network creation with parameters for network name and node name.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create blockchain-network besu <network-name> \\\n  --node-name <node-name>\n\n# Get information about the command and all available options\nSettleMint platform create blockchain-network besu --help\n```\n\n----------------------------------------\n\nTITLE: Packaging Chaincode using chaincode.sh\nDESCRIPTION: Command to compile TypeScript into JavaScript and create a chaincode package. Transpiles code, bundles it under dist/, and creates a tarball package.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh package\n```\n\n----------------------------------------\n\nTITLE: Managing Private Keys with SettleMint SDK JavaScript\nDESCRIPTION: JavaScript functions for listing private keys, retrieving key details, and restarting keys using the SettleMint SDK. These functions enable programmatic management of private keys within an application.\n\nLANGUAGE: typescript\nCODE:\n```\n// List private keys\nconst listKeys = async () => {\n  const keys = await client.privateKey.list(\"your-app-name\");\n};\n\n// Get key details\nconst getKey = async () => {\n  const key = await client.privateKey.read(\"key-unique-name\");\n};\n\n// Restart key\nconst restartKey = async () => {\n  await client.privateKey.restart(\"key-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Asset Tokenization Kit with Predeployed Contracts\nDESCRIPTION: Steps to quickly set up the Asset Tokenization Kit using pre-deployed contracts, subgraphs, and ABIs. This is the fastest way to get started with the kit.\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nbun install\n\n# Login and connect to SettleMint\nbunx settlemint login\nbunx settlemint connect\n\n# Generate types and start development server\ncd kit/dapp\nbun codegen:settlemint\nbun addresses\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with SettleMint CLI\nDESCRIPTION: Commands to create middleware using the SettleMint CLI, including how to view available middleware types and get detailed help.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the list of available middleware types\nSettleMint platform create middleware --help\n\n# Create a middleware\nSettleMint platform create middleware <type> <n>\n\n# Get information about the command and all available options\nSettleMint platform create middleware <type> --help\n```\n\n----------------------------------------\n\nTITLE: Account Query Functions\nDESCRIPTION: Function signatures for querying account information including balance, transaction history, and metadata tags. These functions allow participants to view account details.\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *CBDCContract) GetBalance(ctx, account string) (uint64, error)\nfunc (c *CBDCContract) GetHistory(ctx, account string) ([]TransactionLog, error)\nfunc (c *CBDCContract) GetTags(ctx, account string) (map[string]string, error)\n```\n\n----------------------------------------\n\nTITLE: Hasura Metadata Reload Command\nDESCRIPTION: CLI command to reload Hasura metadata when it becomes out of sync with the database schema, such as when changes are made via external tools.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata reload\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Deployments with SettleMint CLI\nDESCRIPTION: This snippet demonstrates how to create a custom deployment using the SettleMint platform CLI. It shows the basic command structure and how to include environment variables when deploying containerized applications.\n\nLANGUAGE: bash\nCODE:\n```\n# Create a custom deployment\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --port 3000 \\\n  --provider gcp \\\n  --region europe-west1\n\n# With environment variables\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --env-vars NODE_ENV=production,DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Approving Chaincode for Organization\nDESCRIPTION: Command to approve the chaincode definition using a specified peer and orderer. Sends chaincode metadata and version to the orderer.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh approve <peer> <orderer>\n```\n\n----------------------------------------\n\nTITLE: Applying Database Schema Changes\nDESCRIPTION: Command to apply schema changes to the database after modifying the schema definitions. Run this in the kit/dapp directory.\n\nLANGUAGE: bash\nCODE:\n```\n# Run in the kit/dapp directory\ncd kit/dapp\nbun db:push\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with SettleMint CLI\nDESCRIPTION: CLI commands to view available middleware types and create a new middleware instance in the SettleMint platform.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the list of available middleware types\nSettleMint platform create middleware --help\n\n# Create a middleware\nSettleMint platform create middleware <type> <n>\n\n# Get information about the command and all available options\nSettleMint platform create middleware <type> --help\n```\n\n----------------------------------------\n\nTITLE: Installing kube-state-metrics for Kubernetes State Monitoring\nDESCRIPTION: Installs kube-state-metrics using Helm in the observability namespace. This component exposes the state of Kubernetes objects to enable monitoring of the cluster state.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kube-state-metrics kube-state-metrics \\\n  --repo https://prometheus-community.github.io/helm-charts \\\n  --namespace observability \\\n  --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Querying Blockchain Block Number with Ethers in Node-RED\nDESCRIPTION: This function node connects to a Polygon Mumbai blockchain node and retrieves the latest block number using the ethers.js library. It requires an RPC endpoint and an application access token for authentication.\n\nLANGUAGE: javascript\nCODE:\n```\n///////////////////////////////////////////////////////////\n// Configuration                                         //\n///////////////////////////////////////////////////////////\n\nconst rpcEndpoint = \"https://YOUR_NODE_RPC_ENDPOINT.settlemint.com\";\nconst accessToken = \"YOUR_APPLICATION_ACCESS_TOKEN_HERE\";\n\n///////////////////////////////////////////////////////////\n// Logic                                                 //\n///////////////////////////////////////////////////////////\n\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\nmsg.payload = await provider.getBlockNumber();\n\nreturn msg;\n\n///////////////////////////////////////////////////////////\n// End                                                   //\n///////////////////////////////////////////////////////////\n```\n\n----------------------------------------\n\nTITLE: Testing Integration Studio API with cURL\nDESCRIPTION: Example cURL command for testing the Integration Studio API endpoint that retrieves the latest block number. Demonstrates how to pass the required x-auth-token header for authorization.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"x-auth-token: bpaas-YOUR_INTEGRATION_KEY_HERE\" https://YOUR_INTEGRATION_STUDIO_API_URL.settlemint.com/getLatestBlock\n```\n\n----------------------------------------\n\nTITLE: Initializing Chaincode\nDESCRIPTION: Optional command to call the initialization function (e.g., InitLedger) if defined. Only needed when initRequired was set to true during approval.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh init <peer> <orderer>\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code using the SettleMint JavaScript SDK to create middleware with customizable parameters like type, interface, and size.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create middleware\nconst createMiddleware = async () => {\n  const result = await client.middleware.create({\n    applicationUniqueName: \"your-app-unique-name\",\n    name: \"my-middleware\",\n    type: \"SHARED\",\n    interface: \"GRAPH\",\n    blockchainNodeUniqueName: \"your-node-unique-name\",\n    region: \"EUROPE\",  // Required\n    provider: \"GKE\",   // Required\n    size: \"SMALL\"      // Valid options: \"SMALL\" | \"MEDIUM\" | \"LARGE\"\n  });\n  console.log('Middleware created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Hasura CLI Configuration File Structure\nDESCRIPTION: YAML configuration file for Hasura CLI that defines the endpoint, admin secret, metadata directory, and action settings. This configuration is used to connect the CLI to a remote Hasura instance.\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nendpoint: <hasura-db-endpoint-here/API-key>\nadmin_secret: <admin-secret-here>\nmetadata_directory: metadata\nactions:\n kind: synchronous\n handler_webhook_baseurl: http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Address Transactions with GraphQL Query\nDESCRIPTION: A sample GraphQL query to fetch the first 10 transactions for a specific address, demonstrating how to request specific transaction details like block number, contract creation, sender address, gas amount, and transaction hash.\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  address(hash: \"0xaddressHash\") {\n    transactions(first: 10) {\n      edges {\n        node {\n          blockNumber\n          createdContractAddressHash\n          fromAddressHash\n          gas\n          hash\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Loki Stack without Grafana for Log Aggregation\nDESCRIPTION: Installs the Loki stack using Helm in the observability namespace with Grafana disabled. This complements the Prometheus stack installation by adding log aggregation capabilities.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install loki grafana/loki-stack \\\n  --namespace observability \\\n  --set grafana.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Deployed Bytecode for UserData.sol Smart Contract\nDESCRIPTION: The deployed bytecode for a Solidity smart contract that manages user profiles. The contract includes function selectors for operations like creating, updating, reading, and deleting profiles, with error handling for non-existent or deleted profiles.\n\nLANGUAGE: solidity\nCODE:\n```\n\"deployedBytecode\": \"0x6080604052600436101561001257600080fd5b60003560e01c806328279308146109da578063985736ce1461087f578063c36fe3d6146107b5578063eb5339291461023d5763f08f4f641461005357600080fd5b346102385760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261023857600435600060a060405161009581610f12565b6060815260606020820152826040820152606080820152826080820152015280600052600060205260ff60046040600020015460081c166101b45760005260006020526101726040600020604051906100ed82610f12565b6100f6816110a6565b8252610104600182016110a6565b906020830191825261019f60ff60028301541660408501908152600461012c600385016110a6565b936060870194855201549260ff6101856080880196828716151588528260a08a019760081c1615158752604051998a9960208b525160c060208c015260e08b0190611168565b9051601f198a83030160408b0152611168565b925116606087015251601f19868303016080870152611168565b9151151560a084015251151560c08301520390f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f50726f66696c65206e6f7420666f756e64206f7220686173206265656e20646560448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152fd5b600080fd5b346102385761024b36610fa8565b908560009695939652600060205260ff60046040600020015460081c168015610797575b15610739576040519561028187610f12565b83875260208701858152604088019060ff831682526060890198848a526080810192861515845260a0820192600084528a60005260006020526040600020925180519067ffffffffffffffff82116105885781906102df8654611053565b601f81116106e6575b50602090601f831160011461068357600092610678575b50506000198260011b9260031b1c19161783555b518051600184019167ffffffffffffffff82116105885781906103368454611053565b601f8111610625575b50602090601f83116001146105c2576000926105b7575b50506000198260011b9260031b1c19161790555b60ff600283019151167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055600381019951998a5167ffffffffffffffff8111610588576103bc8254611053565b601f8111610540575b5060209b601f82116001146104a8579261048c9492826004937fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a999760009261049d575b50506000198260011b9260031b1c19161790555b019151151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084541691161782555115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff00835492151560081b169116179055565b9b601f1982169c83600052816000209d60005b818110610c8d5750837fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a99979461048c9997946004976001951061050f575b505050811b019055610425565b929e8f83015181556001019e60200192602001610c3a565b826000526020600020601f830160051c81019160208410610ce3575b601f0160051c01905b818110610cd75750610b62565b60008155600101610cca565b9091508190610cc1565b015190508e80610af3565b600085815282812093601f1916905b818110610d435750908460019594939210610d2a575b505050811b019055610b07565b015160001960f88460031b161c191690558e8080610d1d565b92936020600181928786015181550195019301610d07565b909150836000526020600020601f840160051c81019160208510610da4575b90601f859493920160051c01905b818110610d955750610adc565b60008155849350600101610d88565b9091508190610d7a565b015190508e80610a9c565b600087815282812093601f1916905b818110610e045750908460019594939210610deb575b505050811b018355610ab0565b015160001960f88460031b161c191690558e8080610dde565b92936020600181928786015181550195019301610dc8565b909150856000526020600020601f840160051c81019160208510610e65575b90601f859493920160051c01905b818110610e565750610a85565b60008155849350600101610e49565b9091508190610e3b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f50726f66696c6520646f6573206e6f74206578697374206f722068617320626560448201527f656e2064656c65746564000000000000000000000000000000000000000000006064820152fd5b5084600052600060205260ff60046040600020015460081c1615610a0c565b60c0810190811067ffffffffffffffff82111761058857604052565b90601f601f19910116810190811067ffffffffffffffff82111761058857604052565b81601f820112156102385780359067ffffffffffffffff82116105885760405192610f866020601f19601f8601160185610f2e565b8284526020838301011161023857816000926020809301838601378301015290565b60c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112610238576004359160243567ffffffffffffffff81116102385782610ff591600401610f51565b9160443567ffffffffffffffff8111610238578161101591600401610f51565b9160643560ff8116810361023857916084359067ffffffffffffffff82116102385761104391600401610f51565b9060a43580151581036102385790565b90600182811c9216801561109c575b602083101461106d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611062565b90604051918260008254926110ba84611053565b808452936001811690811561112857506001146110e1575b506110df92500383610f2e565b565b90506000929192526020600020906000915b81831061110c5750509060206110df92820101386110d2565b60209193508060019154838589010152019101909184926110f3565b602093506110df9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101386110d2565b919082519283825260005b848110611194575050601f19601f8460006020809697860101520116010190565b80602080928401015182828601015201611173565b9360ff6111cb6111df94610844608097959a999a60a08a5260a08a0190611168565b921660408601528482036060860152611168565b93151591015256fea2646970667358221220e734baef00a48587a6925ab9e9c2ba63acf5e71a194aeb1359347e94b1f78f8a64736f6c634300081b0033\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Chaincode to Update Ledger\nDESCRIPTION: Command to write or update ledger state via chaincode functions. Supports transient data for sensitive inputs and channel override options.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh invoke <peer> <orderer> <function_name> --arguments '[\"arg1\"]'\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint JavaScript SDK\nDESCRIPTION: JavaScript implementation to list all middlewares for an application, read details of a specific middleware, and delete a middleware using the SettleMint SDK.\n\nLANGUAGE: typescript\nCODE:\n```\n// List middlewares\nawait client.middleware.list(\"your-app\");\n\n// Get middleware details\nawait client.middleware.read(\"middleware-unique-name\");\n\n// Delete middleware\nawait client.middleware.delete(\"middleware-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware using SettleMint SDK JS\nDESCRIPTION: JavaScript code using the SettleMint SDK to create a new middleware, specifying application details, node information, and configuration parameters.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create middleware\nconst createMiddleware = async () => {\n  const result = await client.middleware.create({\n    applicationUniqueName: \"your-app-unique-name\",\n    name: \"my-middleware\",\n    type: \"SHARED\",\n    interface: \"GRAPH\",\n    blockchainNodeUniqueName: \"your-node-unique-name\",\n    region: \"EUROPE\",  // Required\n    provider: \"GKE\",   // Required\n    size: \"SMALL\"      // Valid options: \"SMALL\" | \"MEDIUM\" | \"LARGE\"\n  });\n  console.log('Middleware created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Export Curl Command\nDESCRIPTION: A specific example of the curl command used to export a PostgreSQL database from a Hasura instance, including the actual admin secret and endpoint URL.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"opts\": [ \"-O\", \"-x\", \"--schema=public\", \"--inserts\"], \"clean_output\": true, \"source\": \"default\"}' -H \"x-hasura-admin-secret:78b0e4618125322de0eb\" https://fuchsiacapybara-7f70.gke-europe.settlemint.com/bpaas-1d79Acd6A2f112EA450F1C07a372a7D582E6121F/v1alpha1/pg_dump > db.sql\n```\n\n----------------------------------------\n\nTITLE: Checking VictoriaMetrics Health Status\nDESCRIPTION: Command to validate the health of the VictoriaMetrics instance by making an HTTP request to its health endpoint. Used to verify that the metrics collection service is running properly.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f \"http://victoria-metrics:8428/health\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Request Body for Smart Contract Function\nDESCRIPTION: Example JSON request body for calling a smart contract function through the REST API. Includes transaction parameters and function-specific input data.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": \"\",\n  \"gasLimit\": \"\",\n  \"gasPrice\": \"\",\n  \"simulate\": true,\n  \"metadata\": {},\n  \"input\": {\n    \"userId\": \"\",\n    \"name\": \"\",\n    \"email\": \"\",\n    \"age\": 0,\n    \"country\": \"\",\n    \"isKYCApproved\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Installed Chaincodes\nDESCRIPTION: Command to check chaincodes installed on a specific peer.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh installed <peer>\n```\n\n----------------------------------------\n\nTITLE: Subgraph Folder Structure in Code Studio IDE\nDESCRIPTION: Displays the folder structure for a subgraph project in the Code Studio IDE, showing the main configuration file, datasources, and fetch directories.\n\nLANGUAGE: bash\nCODE:\n```\nsubgraph/\n│\n├── subgraph.config.json\n│\n├── datasources/\n│   ├── mycontract.gql.json\n│   ├── mycontract.ts\n│   └── mycontract.yaml\n│\n└── fetch/\n└── mycontract.ts\n```\n\n----------------------------------------\n\nTITLE: Reloading Hasura Metadata with Hasura CLI\nDESCRIPTION: Command to reload Hasura metadata using the Hasura CLI. This is useful when the metadata becomes out of sync with the database schema, such as when changes are made directly to the database outside of Hasura.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata reload\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Cursor\nDESCRIPTION: JSON configuration for integrating the SettleMint MCP server in Cursor (v0.47.0+). The configuration is added to the global ~/.cursor/mcp.json file to avoid committing the personal access token to version control.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Redis Deployment Status\nDESCRIPTION: Kubectl command to watch the status of Redis pods during deployment.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n redis get pods -w\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code to list middleware for an application, read details about a specific middleware, and delete middleware using the SettleMint JavaScript SDK.\n\nLANGUAGE: typescript\nCODE:\n```\n// List middlewares\nawait client.middleware.list(\"your-app\");\n\n// Get middleware details\nawait client.middleware.read(\"middleware-unique-name\");\n\n// Delete middleware\nawait client.middleware.delete(\"middleware-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Example Curl Command for Hasura Database Export\nDESCRIPTION: A concrete example of a curl command to export a specific Hasura PostgreSQL database, including actual admin secret and endpoint URL.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"opts\": [ \"-O\", \"-x\", \"--schema=public\", \"--inserts\"], \"clean_output\": true, \"source\": \"default\"}' -H \"x-hasura-admin-secret:78b0e4618125322de0eb\" https://fuchsiacapybara-7f70.gke-europe.settlemint.com/bpaas-1d79Acd6A2f112EA450F1C07a372a7D582E6121F/v1alpha1/pg_dump > db.sql\n```\n\n----------------------------------------\n\nTITLE: Checking Committed Chaincodes\nDESCRIPTION: Command to check committed chaincodes on a specific peer.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh committed <peer>\n```\n\n----------------------------------------\n\nTITLE: Managing Storage with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript/JavaScript functions for managing storage using the SettleMint SDK. Includes methods for listing storage instances, retrieving storage details, and deleting storage instances.\n\nLANGUAGE: typescript\nCODE:\n```\n// List storage instances\nconst listStorage = async () => {\n  const storages = await client.storage.list(\"your-app-id\");\n  console.log('Storage instances:', storages);\n};\n\n// Get storage details\nconst getStorage = async () => {\n  const storage = await client.storage.read(\"storage-unique-name\");\n  console.log('Storage details:', storage);\n};\n\n// Delete storage\nconst deleteStorage = async () => {\n  await client.storage.delete(\"storage-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Private Keys with SDK CLI\nDESCRIPTION: CLI commands to list, view details, and restart private keys in the SettleMint platform. These commands help with key management operations.\n\nLANGUAGE: bash\nCODE:\n```\n# List all private keys\nSettleMint platform list private-keys --application <app-name>\n\n# View specific key details\nSettleMint platform read private-key <private-key-unique-name>\n\n# Restart a private key\nSettleMint platform restart private-key <private-key-unique-name>\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Values for Platform Installation\nDESCRIPTION: YAML configuration template for Redis connection settings in the platform installation. Includes host, port, password, prefix, and TLS settings.\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  host: \"\" # Redis host collected in prerequisites\n  port: 6379 # Redis port collected in prerequisites\n  password: \"\" # Redis password collected in prerequisites\n  prefix: \"sm\" # In shared redis servers, this separates queues\n  tls: false # Set to true to use TLS mode\n```\n\n----------------------------------------\n\nTITLE: Checking Chaincode Commit Readiness\nDESCRIPTION: Optional command to validate whether enough organizations have approved the chaincode before committing. Useful for multi-org setups.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh commit-readiness <peer>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Channel\nDESCRIPTION: Command to create a new channel using a specified orderer.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh create-channel <orderer> <channel>\n```\n\n----------------------------------------\n\nTITLE: Listing All Network Nodes\nDESCRIPTION: Utility command to list all nodes (peers and orderers) in the application.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh nodes\n```\n\n----------------------------------------\n\nTITLE: Creating an Application with SettleMint SDK CLI\nDESCRIPTION: Shows the command to create a new application using the SettleMint SDK CLI. This requires authentication first and allows you to specify the application name as a parameter.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create application <name>\n```\n\n----------------------------------------\n\nTITLE: Managing Private Keys with SettleMint SDK CLI\nDESCRIPTION: Commands for listing, viewing details, and restarting private keys using the SettleMint CLI. These commands help users manage their private keys after creation.\n\nLANGUAGE: bash\nCODE:\n```\n# List all private keys\nSettleMint platform list private-keys --application <app-name>\n\n# View specific key details\nSettleMint platform read private-key <private-key-unique-name>\n\n# Restart a private key\nSettleMint platform restart private-key <private-key-unique-name>\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Networks with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code using the SettleMint JavaScript SDK to create, list, read details of, delete, and restart blockchain networks. Demonstrates initialization of the SDK client and various network management operations.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create network\nconst createNetwork = async () => {\n  const result = await client.blockchainNetwork.create({\n    applicationUniqueName: \"your-app\",\n    name: \"my-network\",\n    nodeName: \"validator-1\",\n    consensusAlgorithm: \"BESU_QBFT\",\n    provider: \"GKE\", // GKE, EKS, AKS\n    region: \"EUROPE\"\n  });\n  console.log('Network created:', result);\n};\n\n// List networks\nconst listNetworks = async () => {\n  const networks = await client.blockchainNetwork.list(\"your-app\");\n  console.log('Networks:', networks);\n};\n\n// Get network details\nconst getNetwork = async () => {\n  const network = await client.blockchainNetwork.read(\"network-unique-name\");\n  console.log('Network details:', network);\n};\n\n// Delete network\nconst deleteNetwork = async () => {\n  await client.blockchainNetwork.delete(\"network-unique-name\");\n};\n\n// Restart network\nconst restartNetwork = async () => {\n  await client.blockchainNetwork.restart(\"network-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vault Authentication and Policies\nDESCRIPTION: This script configures AppRole authentication in HashiCorp Vault and creates a policy for the platform to access specific secret paths. It gives complete access to secrets in the ethereum, fabric, and ipfs paths.\n\nLANGUAGE: bash\nCODE:\n```\n# Enable AppRole auth method\nvault auth enable approle\n\n# Create platform policy\nvault policy write btp - <<EOF\npath \"ethereum/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\npath \"fabric/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\npath \"ipfs/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata with Hasura CLI\nDESCRIPTION: Command to apply previously exported Hasura metadata using the Hasura CLI. This completely replaces the existing metadata on the target instance with the metadata stored in the project directory.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Adding Peer to Channel\nDESCRIPTION: Command to add a peer to an existing channel.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh peer-join-channel <p> <channel>\n```\n\n----------------------------------------\n\nTITLE: Managing Applications with SettleMint SDK JS\nDESCRIPTION: TypeScript code examples for working with applications using the SettleMint JavaScript SDK. These functions allow listing applications within a workspace, reading application details, and deleting applications by their unique name.\n\nLANGUAGE: typescript\nCODE:\n```\n// List applications\nawait client.application.list(\"your-workspace\");\n\n// Read application\nawait client.application.read(\"app-unique-name\");\n\n// Delete application\nawait client.application.delete(\"app-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Using SettleMint CLI\nDESCRIPTION: Commands for listing available storage types, creating storage instances, and getting help information using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the list of available storage types\nSettleMint platform create storage --help\n\n# Create storage\nSettleMint platform create storage <type> <name>\n\n# Get information about the command and all available options\nSettleMint platform create storage <type> --help\n```\n\n----------------------------------------\n\nTITLE: GCP Secret Manager Helm Configuration\nDESCRIPTION: This YAML snippet configures the platform to use GCP Secret Manager while explicitly disabling other secret management options. It requires the GCP project ID and service account credentials.\n\nLANGUAGE: yaml\nCODE:\n```\n# Values.yaml\nvault:\n  enabled: false\nawsSecretManager:\n  enabled: false\ngcpSecretManager:\n  enabled: true\n  projectId: \"your-project-id\"\n  credentials: |\n    {\n      // Your service account JSON key\n    }\n```\n\n----------------------------------------\n\nTITLE: Structuring Application Kits Section with Flex Layout in JSX\nDESCRIPTION: This JSX code creates a responsive two-column layout for the Application Kits section, featuring an image on the left and descriptive text on the right, with styling for proper alignment and spacing.\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ display: 'flex', alignItems: 'center', gap: '2rem' }}>\n    <div style={{ flex: '0 0 50%' }}>\n  ![Settlemint Stack Diagram](../img/application-kits/cover-kits.webp)\n  </div>\n  <div style={{ flex: '1' }}>\n\nSettleMint Application Kits are designed to dramatically accelerate the\ndevelopment of enterprise blockchain applications by providing pre-packaged,\nfull-stack solutions inlculding both - smart contrcats and the dAPP UI for\ncommon use cases.\n\nRead more - [Aplication kits](/application-kits/introduction)\n\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Infrastructure and Resource Cards in JSX\nDESCRIPTION: This code renders two cards using the Card component from fumadocs-ui to display information about infrastructure types and resource packs. Each card contains headings and bullet points highlighting key aspects of different options.\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n  <Card>\n    ### Infrastructure Types\n    - **Shared** - Cost-effective, shared resources\n    - **Dedicated** - Exclusive infrastructure\n    - **On-premise** - Custom deployment\n    - **BYOC** - Bring Your Own Cloud\n  </Card>\n\n  <Card>\n    ### Resource Packs\n    - **Small** - Basic resources\n    - **Medium** - Standard resources\n    - **Large** - Enhanced resources\n  </Card>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing SettleMint API Endpoint with cURL\nDESCRIPTION: This curl command demonstrates how to test the Integration Studio API endpoint by making a request with an authorization header. It requires an integration key to be passed as the x-auth-token header for authentication.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"x-auth-token: bpaas-YOUR_INTEGRATION_KEY_HERE\" https://YOUR_INTEGRATION_STUDIO_API_URL.settlemint.com/getLatestBlock\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint CLI before performing any operations. This establishes the user session for subsequent commands.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Managing Storage with SettleMint Platform CLI\nDESCRIPTION: Commands for listing, reading details, and deleting storage instances using the SettleMint platform CLI. These commands allow administrators to manage storage resources across their applications.\n\nLANGUAGE: bash\nCODE:\n```\n# List storage instances\nSettleMint platform list storage --application <app-name>\n\n# Get storage details\nSettleMint platform read storage <name>\n\n# Delete storage\nSettleMint platform delete storage <name>\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Deployments with SettleMint SDK JavaScript\nDESCRIPTION: TypeScript functions for listing, reading, restarting, and editing custom deployments using the SettleMint JavaScript client. These functions demonstrate how to interact with custom deployments programmatically.\n\nLANGUAGE: typescript\nCODE:\n```\n// List deployments\nconst listDeployments = async () => {\n  const deployments = await client.customDeployment.list(\"my-app\");\n};\n\n// Get deployment details\nconst getDeployment = async () => {\n  const deployment = await client.customDeployment.read(\"deployment-unique-name\");\n};\n\n// Restart deployment\nconst restartDeployment = async () => {\n  await client.customDeployment.restart(\"deployment-unique-name\");\n};\n\n// Edit deployment\nconst editDeployment = async () => {\n  await client.customDeployment.edit(\"deployment-unique-name\", {\n    imageTag: \"v2\"\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Troubleshooting Cards in JSX/Markdown\nDESCRIPTION: This code snippet displays troubleshooting information for cloud secret management services using a responsive grid layout with Card components. It includes sections for GCP Secret Manager, Vault, and AWS Secret Manager issues along with a support callout.\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n  <Card>\n    ### GCP Secret Manager Issues\n    - Verify service account permissions\n    - Check credentials file format\n    - Confirm API is enabled\n    - Validate project ID\n  </Card>\n\n<Card>\n  ### Vault Issues - Verify Vault address - Check network access - Confirm TLS\n  settings - Validate namespace (HCP)\n</Card>\n\n  <Card>\n    ### AWS Secret Manager Issues\n    - Verify IAM permissions\n    - Check access key validity\n    - Confirm region setting\n    - Validate network access\n  </Card>\n</div>\n\n<Callout type=\"info\">\n  Need help? Contact [support@settlemint.com](mailto:support@settlemint.com) if\n  you encounter any issues.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Connection Details with SDK JS\nDESCRIPTION: TypeScript function that uses the SettleMint client library to read node information and log connection details. It accesses the same connection information as the CLI command but through the JavaScript SDK.\n\nLANGUAGE: typescript\nCODE:\n```\nconst getConnectionDetails = async () => {\n  const node = await client.node.read(\"node-name\");\n  console.log('Connection details:', node.connection);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Rows with React for EVM Chains Guide\nDESCRIPTION: This code snippet maps an array of data to create table rows in React, displaying step numbers, action descriptions, and links related to setting up Graph Middleware and subgraphs in the SettleMint platform.\n\nLANGUAGE: JavaScript\nCODE:\n```\n[[\n  \"Add Graph Middleware and write subgraph files in IDE\",\n  \"Setup subgraph\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/setup-graph-middleware#subgraph-deployment-process\",\n],\n[\n  \"18\",\n  \"Build and deploy sub-graphs to setup indexing\",\n  \"Deploy subgraph\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/setup-graph-middleware#codegen-build-and-deploy-subgraph\",\n],\n[\n  \"19\",\n  \"Do a transaction from API Portal\",\n  \"Write data on chain\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/setup-api-portal#4-how-to-configure-rest-api-requests-in-the-portal\",\n],\n[\n  \"20\",\n  \"Read indexed data from Graph middleware\",\n  \"Read data from chain\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/setup-graph-middleware#graph-middleware---querying-data\",\n],\n].map(([step, action, link, url]) => (\n  <tr\n    key={step}\n    className=\"border-b border-gray-100 dark:border-gray-800\"\n  >\n    <td className=\"py-2 pl-6 font-medium text-gray-700 dark:text-gray-300\">\n      {step}\n    </td>\n    <td className=\"py-2\">{action}</td>\n    <td className=\"py-2\">\n      <a\n        href={url}\n        className=\"text-blue-600 dark:text-blue-400 underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {link}\n      </a>\n    </td>\n  </tr>\n))}\n```\n\n----------------------------------------\n\nTITLE: Accessing Token Data with Blockscout REST API\nDESCRIPTION: HTTP endpoints for retrieving token-related information, including token details, transfers, holder statistics, and NFT instances. These endpoints support comprehensive token tracking and management on the blockchain.\n\nLANGUAGE: http\nCODE:\n```\nGET /tokens                                                  # Get a list of tokens\nGET /tokens/{address_hash}                                   # Get token details\nGET /tokens/{address_hash}/transfers                         # Get token transfers\nGET /tokens/{address_hash}/holders                           # Get token holders\nGET /tokens/{address_hash}/counters                          # Get token statistics\nGET /tokens/{address_hash}/instances                         # Get NFT instances\nGET /tokens/{address_hash}/instances/{id}                    # Get NFT instance by ID\nGET /tokens/{address_hash}/instances/{id}/transfers          # Get NFT instance transfers\nGET /tokens/{address_hash}/instances/{id}/holders            # Get NFT instance holders\nGET /tokens/{address_hash}/instances/{id}/transfers-count    # Get NFT transfer count\nPATCH /tokens/{address_hash}/instances/{id}/refetch-metadata # Re-fetch NFT metadata\n```\n\n----------------------------------------\n\nTITLE: Managing Networks with SettleMint JavaScript SDK (Abbreviated)\nDESCRIPTION: Simplified TypeScript code snippets for common network management operations with the SettleMint JavaScript SDK, including listing networks, getting network details, deleting networks, and restarting networks.\n\nLANGUAGE: typescript\nCODE:\n```\n// List networks\nawait client.blockchainNetwork.list(\"your-app\");\n\n// Get network details\nawait client.blockchainNetwork.read(\"network-unique-name\");\n\n// Delete network\nawait client.blockchainNetwork.delete(\"network-unique-name\");\n\n// Restart network\nawait client.blockchainNetwork.restart(\"network-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Networks with SettleMint CLI\nDESCRIPTION: CLI commands for listing networks, reading network details, deleting networks, and restarting networks. These commands help manage the lifecycle of blockchain networks within an application.\n\nLANGUAGE: bash\nCODE:\n```\n# List networks\nSettleMint platform list blockchain-networks --application <app-name>\n\n# Get network details\nSettleMint platform read blockchain-network <network-name>\n\n# Delete network\nSettleMint platform delete blockchain-network <network-name>\n\n# Restart network\nSettleMint platform restart blockchain-network <network-name>\n```\n\n----------------------------------------\n\nTITLE: Testing Azure Blob Storage Access\nDESCRIPTION: This command tests access to an Azure Blob Storage container using the Azure CLI. It verifies that the provided storage account credentials and container access work correctly.\n\nLANGUAGE: bash\nCODE:\n```\naz storage blob list \\\n  --container-name your-container \\\n  --account-name your-storage-account \\\n  --account-key your-storage-key\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple SettleMint SDK Modules\nDESCRIPTION: Command to install multiple SDK modules simultaneously, including the core JavaScript package, IPFS integration for decentralized storage, and the CLI tool for project management.\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @settlemint/sdk-js @settlemint/sdk-ipfs @settlemint/sdk-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Section Components with HTML and JSX\nDESCRIPTION: This code creates collapsible detail sections using HTML and JSX with React. Each section contains a custom styled summary header and a table with platform navigation options. The sections implement a dropdown toggle effect.\n\nLANGUAGE: HTML\nCODE:\n```\n<details\n  data-card=\"true\"\n  className=\"group relative border border-gray-200 dark:border-gray-700 rounded-xl shadow bg-white dark:bg-gray-700 overflow-hidden mb-3\"\n>\n  <summary className=\"font-semibold px-6 py-4 text-base flex justify-between items-center cursor-pointer border-b border-gray-100 dark:border-gray-700 text-gray-900 dark:text-gray-100\">\n    <span>Deploy frontend and other services</span>\n    <svg\n      className=\"w-4 h-4 text-gray-600 dark:text-gray-300 transform transition-transform group-open:rotate-90\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      viewBox=\"0 0 24 24\"\n    >\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 5l7 7-7 7\" />\n    </svg>\n  </summary>\n  <div className=\"overflow-x-auto w-full px-6 pb-4\">\n    <table className=\"table-auto w-full text-left text-sm text-gray-800 dark:text-gray-200\">\n      <tbody>\n        {/* Table rows would be inserted here */}\n      </tbody>\n    </table>\n  </div>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Nodes with SettleMint CLI\nDESCRIPTION: Commands for listing and restarting blockchain nodes using the SettleMint CLI. These commands allow administrators to view deployed nodes and perform maintenance operations.\n\nLANGUAGE: bash\nCODE:\n```\n# List nodes\nSettleMint platform list services --application <application-name>\n\n# Restart node\nSettleMint platform restart blockchain-node <node-name>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration for Platform Installation\nDESCRIPTION: YAML configuration block for setting up PostgreSQL connection details including host, port, credentials, database name, and SSL mode. These values are required for connecting the platform to the PostgreSQL database.\n\nLANGUAGE: yaml\nCODE:\n```\npostgresql:\n  host: \"your-db-host\"\n  port: 5432\n  user: \"platform\"\n  password: \"your-secure-password\"\n  database: \"platform\"\n  sslMode: \"require\" # or \"disable\" for local development\n```\n\n----------------------------------------\n\nTITLE: Sample WebSocket JSON-RPC Request for Block Number Query\nDESCRIPTION: Example of a JSON-RPC request sent over WebSockets to query the current block number from a Besu node. This request structure can be used after establishing a WebSocket connection to the node using the wscat command-line tool.\n\nLANGUAGE: json\nCODE:\n```\n{\n\"jsonrpc\":\"2.0\"\n\"Id\": 1\n\"method\":\"eth_blockNumber\"\n\"params\":{\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the SettleMint BTP on GCP Tutorial Repository\nDESCRIPTION: Command to clone the GitHub repository containing the Terraform configuration files for setting up SettleMint BTP on GCP.\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:settlemint/tutorial-btp-on-gcp.git\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for SDK Development\nDESCRIPTION: Command to create a new git branch for developing a feature or fixing a bug in the SettleMint SDK, following contribution best practices.\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to the SettleMint SDK\nDESCRIPTION: Git commands to stage and commit your changes to the SettleMint SDK with a descriptive commit message that explains the purpose of the changes.\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ngit commit -m \"Add feature: description of the change\"\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Networks with SettleMint SDK CLI Commands\nDESCRIPTION: Terminal commands for managing blockchain networks using the SettleMint SDK CLI. The code shows how to list networks, read network details, delete networks, and restart operations using command-line interface.\n\nLANGUAGE: bash\nCODE:\n```\n# List networks\nSettleMint platform list blockchain-networks --application <app-name>\n\n# Get network details\nSettleMint platform read blockchain-network <network-name>\n\n# Delete network\nSettleMint platform delete blockchain-network <network-name>\n\n# Restart network\nSettleMint platform restart blockchain-network <network-name>\n```\n\n----------------------------------------\n\nTITLE: Displaying Task Manager Functionality in Markdown Table\nDESCRIPTION: A detailed markdown table listing all available tasks in the code studio IDE task manager, categorized by tool (SettleMint CLI, Foundry, Hardhat, The Graph) with descriptions of each task's functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n| Task                                         | Tool           | Description                                                              |\n| -------------------------------------------- | -------------- | ------------------------------------------------------------------------ |\n| SettleMint - Login                           | SettleMint CLI | Logs into the SettleMint platform via CLI for authenticated deployments. |\n| Foundry - Build                              | Foundry        | Compiles the smart contracts using Foundry.                              |\n| Hardhat - Build                              | Hardhat        | Compiles the smart contracts using Hardhat.                              |\n| Foundry - Test                               | Foundry        | Runs tests using Foundry's native testing framework.                     |\n| Hardhat - Test                               | Hardhat        | Executes tests using Hardhat's JavaScript-based test suite.              |\n| Foundry - Format                             | Foundry        | Formats smart contract code for readability (optional).                  |\n| Foundry - Start network                      | Foundry        | Starts a local Foundry testnet environment.                              |\n| Hardhat - Start network                      | Hardhat        | Starts a local Hardhat network for JS-based testing.                     |\n| Hardhat - Deploy to local network            | Hardhat        | Deploys compiled contracts to the local Hardhat network.                 |\n| Hardhat - Reset & Deploy to local network    | Hardhat        | Resets the local chain state and redeploys contracts.                    |\n| Hardhat - Deploy to platform network         | Hardhat        | Deploys contracts to a blockchain network hosted on SettleMint.          |\n| Hardhat - Reset & Deploy to platform network | Hardhat        | Resets the platform network state and redeploys contracts.               |\n| The Graph - Codegen the subgraph types       | The Graph CLI  | Generates TypeScript types based on subgraph GraphQL schema.             |\n| The Graph - Build the subgraph               | The Graph CLI  | Compiles the subgraph for deployment to The Graph.                       |\n| The Graph - Deploy or update the subgraph    | The Graph CLI  | Deploys or updates the subgraph on The Graph's hosted service.           |\n```\n\n----------------------------------------\n\nTITLE: Installing VictoriaMetrics with Helm for Kubernetes Metrics Collection\nDESCRIPTION: Installs VictoriaMetrics single-node deployment using Helm in the observability namespace with scraping enabled. This command sets up the lightweight metrics collection system as part of the recommended monitoring setup.\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install victoria-metrics victoria-metrics-single \\\n  --repo https://victoriametrics.github.io/helm-charts/ \\\n  --namespace observability \\\n  --create-namespace \\\n  --set server.scrape.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint Platform Resources in YAML\nDESCRIPTION: Basic configuration for the SettleMint platform defining storage, ingress, component replica counts, resource allocations, and Docker registry credentials. This YAML configuration is used with Helm to install the SettleMint platform in a Kubernetes cluster.\n\nLANGUAGE: yaml\nCODE:\n```\n            storage:\n              storageClass: \"standard\"\n            ingress:\n              ingressClass: \"nginx\"\n\napp:\n  replicaCount: \"2\"\napi:\n  replicaCount: \"2\"\n  existingSecret: \"example-secret\"\njob:\n  resources:\n    requests:\n      cpu: \"100m\"\n      memory: \"512Mi\"\ndeployWorker:\n  resources:\n    requests:\n      cpu: \"100m\"\n      memory: \"512Mi\"\nclusterManager:\n  replicaCount: \"2\"\n\nimagePullCredentials:\n  registries:\n    harbor:\n      enabled: true\n      registry: \"harbor.settlemint.com\"\n      username: \"example_user\"\n      password: \"abc123registry456password\"\n      email: \"example@company.com\"\n\nsupport:\n  kubernetes-replicator:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Pushing SDK Changes to GitHub\nDESCRIPTION: Git command to push your committed changes to your forked repository on GitHub, preparing them for a pull request to the main SettleMint SDK repository.\n\nLANGUAGE: sh\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys with SettleMint SDK CLI\nDESCRIPTION: Examples of creating different types of private keys (Accessible ECDSA P256, HD ECDSA P256, and HSM ECDSA P256) using the SettleMint CLI. These commands allow you to create keys and optionally attach them to blockchain nodes.\n\nLANGUAGE: bash\nCODE:\n```\n# Create Accessible ECDSA P256 key\nSettleMint platform create private-key accessible-ecdsa-p256 my-key \\\n  --application my-app \\\n  --blockchain-node node-123\n\n# Create HD ECDSA P256 key\nSettleMint platform create private-key hd-ecdsa-p256 my-key \\\n  --application my-app\n\n# Create HSM ECDSA P256 key\nSettleMint platform create private-key hsm-ecdsa-p256 my-key \\\n  --application my-app\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with SettleMint CLI\nDESCRIPTION: Commands to create middleware using the SettleMint CLI, including checking available types and getting help information.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the list of available middleware types\nSettleMint platform create middleware --help\n\n# Create a middleware\nSettleMint platform create middleware <type> <name>\n\n# Get information about the command and all available options\nSettleMint platform create middleware <type> --help\n```\n\n----------------------------------------\n\nTITLE: Checking Loki Readiness Status\nDESCRIPTION: Command to verify that the Loki log aggregation service is ready by making an HTTP request to its ready endpoint. Used to validate that log collection is functioning properly.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -f \"http://loki:3100/ready\"\n```\n\n----------------------------------------\n\nTITLE: Using Application Access Token as a Query Parameter in API Requests\nDESCRIPTION: Example of how to include an application access token as a query parameter in the URL when accessing SettleMint services.\n\nLANGUAGE: http\nCODE:\n```\nhttps://myservice.settlemint.com/?token=TOKEN\n```\n\n----------------------------------------\n\nTITLE: Testing Integration Studio Endpoint via cURL\nDESCRIPTION: This bash command demonstrates how to make an HTTP request to the Integration Studio endpoint. It includes the necessary authorization header with the API key to authenticate the request to the getLatestBlock endpoint.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"x-auth-token: bpaas-YOUR_INTEGRATION_KEY_HERE\" https://YOUR_INTEGRATION_STUDIO_API_URL.settlemint.com/getLatestBlock\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys with SettleMint SDK JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a private key using the SettleMint JavaScript SDK. It initializes a client connection and creates a private key with specified parameters such as name, application, key type, and associated blockchain nodes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create private key\nconst createKey = async () => {\n  const result = await client.privateKey.create({\n    name: \"my-key\",\n    applicationUniqueName: \"my-app\",\n    privateKeyType: \"ACCESSIBLE_ECDSA_P256\", // or \"HD_ECDSA_P256\" or \"HSM_ECDSA_P256\"\n    blockchainNodeUniqueNames: [\"node-123\"] // optional\n  });\n  console.log('Private key created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint CLI before performing middleware operations.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Ingress Controller with Helm\nDESCRIPTION: Commands to install the NGINX ingress controller using Helm. This snippet creates the controller in a dedicated namespace and sets up the required components.\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install ingress-nginx ingress-nginx \\\n  --repo https://kubernetes.github.io/ingress-nginx \\\n  --namespace ingress-nginx \\\n  --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Ethereum Node with Ethers.js\nDESCRIPTION: Example of using the Ethers.js library to connect to an Ethereum node and create a signer for transactions. This code initializes a JSON-RPC provider with default settings and creates a signer object for signing blockchain transactions.\n\nLANGUAGE: typescript\nCODE:\n```\n// If you don't specify a //url//, Ethers connects to the default\n// (i.e. ``http:/\\/localhost:8545``)\nconst provider = new ethers.providers.JsonRpcProvider();\n\n// The provider also allows signing transactions to\n// send ether and pay to change state within the blockchain.\n// For this, we need the account signer...\nconst signer = provider.getSigner();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Information for Validator Configuration\nDESCRIPTION: API reference for obtaining the enode address of a node, which is required when proposing it as a validator. This information can be found in container logs or via this API call.\n\nLANGUAGE: markdown\nCODE:\n```\n[admin_nodeInfo](https://besu.hyperledger.org/stable/public-networks/reference/api#admin_nodeinfo)\n```\n\n----------------------------------------\n\nTITLE: Using Application Access Token as Path Parameter in API URLs\nDESCRIPTION: Examples showing how to include application access tokens directly in the URL path for different SettleMint services, including special formats for IPFS and Avalanche/Fuji services.\n\nLANGUAGE: http\nCODE:\n```\nhttps://myservice.settlemint.com/TOKEN\n```\n\nLANGUAGE: http\nCODE:\n```\nhttps://myservice.settlemint.com/TOKEN/api/v0/...\n```\n\nLANGUAGE: http\nCODE:\n```\nhttps://myservice.settlemint.com/ext/bc/C/rpc/TOKEN\n```\n\n----------------------------------------\n\nTITLE: Initializing EAS Configuration with Ethers and EAS SDK in JavaScript\nDESCRIPTION: Sets up the Ethereum provider, signer, and EAS instance using ethers.js and EAS SDK. This function requires RPC URL, registry address, EAS address, and private key inputs. It stores these configurations in the global context for later use.\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize provider with specific network parameters\nconst provider = new ethers.JsonRpcProvider(msg.rpcUrl)\n\nconst signer = new ethers.Wallet(msg.privateKey, provider);\n\n// Initialize EAS with specific gas settings\nconst EAS = new eassdk.EAS(msg.easAddress);\neas.connect(signer);\n\n// Store in global context\nglobal.set('provider', provider);\nglobal.set('signer', signer);\nglobal.set('eas', eas);\nglobal.set('registryAddress', msg.registryAddress);\n\nmsg.payload = 'EAS configuration initialized';\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with SettleMint JavaScript SDK\nDESCRIPTION: JavaScript implementation using the SettleMint SDK to create a new middleware. The code initializes a client with access token and instance URL, then creates middleware with specified parameters.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create middleware\nconst createMiddleware = async () => {\n  const result = await client.middleware.create({\n    applicationUniqueName: \"your-app-unique-name\",\n    name: \"my-middleware\",\n    type: \"SHARED\",\n    interface: \"GRAPH\",\n    blockchainNodeUniqueName: \"your-node-unique-name\",\n    region: \"EUROPE\",  // Required\n    provider: \"GKE\",   // Required\n    size: \"SMALL\"      // Valid options: \"SMALL\" | \"MEDIUM\" | \"LARGE\"\n  });\n  console.log('Middleware created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Ingress Controller Service Status\nDESCRIPTION: Command to check the service status of the ingress controller and confirm IP allocation. This confirms that the load balancer is properly configured.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n ingress-nginx\n```\n\n----------------------------------------\n\nTITLE: Rendering Deployment Options Grid in React\nDESCRIPTION: This code renders a responsive grid layout of two cards presenting deployment options: SaaS (managed by SettleMint) and Self-Managed. Each card contains a description, feature list, and call-to-action button for exploring each option.\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6 mb-8\">\n  {/* SaaS Deployment */}\n  <Card className=\"border border-slate-200 dark:border-slate-800 shadow-sm hover:shadow-md hover:-translate-y-2 transition-transform duration-300 px-4 pt-0 pb-5\">\n    <div className=\"flex flex-col justify-between\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-slate-800 dark:text-slate-200 mt-1 mb-2\">\n          SaaS - managed by SettleMint\n        </h3>\n        <div className=\"text-sm text-slate-700 dark:text-slate-300 leading-snug mt-1 mb-3\">\n          Run your blockchain use case instantly with SettleMint hosting, scaling, and maintenance handled for you.\n        </div>\n        <ul className=\"space-y-2 text-sm text-slate-700 dark:text-slate-300 pl-0 mb-0\">\n          <li className=\"flex items-start\"><span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Instant setup and onboarding</li>\n          <li className=\"flex items-start\"><span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>Managed infrastructure and monitoring</li>\n          <li className=\"flex items-start\"><span className=\"text-blue-500 mr-2 mt-0.5\">✓</span>No DevOps or system admin required</li>\n        </ul>\n      </div>\n    </div>\n    <div className=\"mt-1 pt-2 border-t border-slate-200 dark:border-slate-700 flex justify-center\">\n      <a href=\"/documentation/launching-the-platform/managed-cloud-saas/introduction\" className=\"inline-block bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 text-sm rounded-md transition-colors no-underline\">\n        Explore SaaS option\n      </a>\n    </div>\n  </Card>\n\n{/* Self-Managed Deployment */}\n\n  <Card className=\"border border-slate-200 dark:border-slate-800 shadow-sm hover:shadow-md hover:-translate-y-2 transition-transform duration-300 px-4 pt-0 pb-5\">\n    <div className=\"flex flex-col justify-between\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-slate-800 dark:text-slate-200 mt-1 mb-2\">\n          Self-Managed\n        </h3>\n        <div className=\"text-sm text-slate-700 dark:text-slate-300 leading-snug mt-1 mb-3\">\n          Deploy and operate SettleMint on your own infrastructure with full control and flexibility.\n        </div>\n        <ul className=\"space-y-2 text-sm text-slate-700 dark:text-slate-300 pl-0 mb-0\">\n          <li className=\"flex items-start\"><span className=\"text-emerald-500 mr-2 mt-0.5\">✓</span>Deploy on Kubernetes or virtual machines</li>\n          <li className=\"flex items-start\"><span className=\"text-emerald-500 mr-2 mt-0.5\">✓</span>Bring your own cloud or on-premises setup</li>\n          <li className=\"flex items-start\"><span className=\"text-emerald-500 mr-2 mt-0.5\">✓</span>Full DevOps control and custom integrations</li>\n        </ul>\n      </div>\n    </div>\n    <div className=\"mt-1 pt-2 border-t border-slate-200 dark:border-slate-700 flex justify-center\">\n      <a href=\"/documentation/launching-the-platform/self-hosted-onprem/introduction\" className=\"inline-block bg-emerald-600 hover:bg-emerald-700 text-white px-3 py-1.5 text-sm rounded-md transition-colors no-underline\">\n        Explore self-managed option\n      </a>\n    </div>\n  </Card>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction Object for Contract Deployment in Ethereum\nDESCRIPTION: JSON representation of a transaction object before signature, containing parameters like nonce, gasPrice, gasLimit, recipient address (null for contract creation), value, bytecode data, and chainId.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nonce\": \"0x00\",\n  \"gasPrice\": \"0x04a817c800\", // 20 gwei\n  \"gasLimit\": \"0x2dc6c0\", // 3000000\n  \"to\": null, // contract creation\n  \"value\": \"0x00\",\n  \"data\": \"<FULL_BYTECODE_WITH_ARGS>\",\n  \"chainId\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private Keys with SettleMint CLI\nDESCRIPTION: Commands for creating different types of private keys (accessible ECDSA P256, HD ECDSA P256, and HSM ECDSA P256) using the SettleMint CLI. Each command specifies the key type, name, and associated application and blockchain node.\n\nLANGUAGE: bash\nCODE:\n```\n# Create Accessible ECDSA P256 key\nSettleMint platform create private-key accessible-ecdsa-p256 my-key \\\n  --application my-app \\\n  --blockchain-node node-123\n\n# Create HD ECDSA P256 key\nSettleMint platform create private-key hd-ecdsa-p256 my-key \\\n  --application my-app\n\n# Create HSM ECDSA P256 key\nSettleMint platform create private-key hsm-ecdsa-p256 my-key \\\n  --application my-app\n```\n\n----------------------------------------\n\nTITLE: Creating Applications with SettleMint CLI\nDESCRIPTION: Command to create a new application in the SettleMint platform using the SDK CLI. This allows for programmatic application creation from the command line.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create application <name>\n```\n\n----------------------------------------\n\nTITLE: Executing a Meta Transaction through a Forwarder in TypeScript\nDESCRIPTION: Code that submits the signed meta transaction to the forwarder contract for execution. The forwarder will verify the signature and forward the transaction to the intended recipient contract.\n\nLANGUAGE: typescript\nCODE:\n```\nawait forwarder.execute(req, signedData, { gasLimit: \"100000\" });\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint CLI\nDESCRIPTION: CLI commands to list existing middlewares, read details of a specific middleware, and delete a middleware by name.\n\nLANGUAGE: bash\nCODE:\n```\n# List middlewares\nSettleMint platform list middlewares --application <app-name>\n\n# Get middleware details\nSettleMint platform read middleware <middleware-name>\n\n# Delete middleware\nSettleMint platform delete middleware <middleware-name>\n```\n\n----------------------------------------\n\nTITLE: Installing cert-manager with Helm\nDESCRIPTION: Commands to add the jetstack Helm repository, update it, and install cert-manager in a dedicated namespace with CRDs. This is required to enable automatic TLS certificate management.\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add jetstack https://charts.jetstack.io --force-update\nhelm repo update\nhelm upgrade --install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --set installCRDs=true\n```\n\n----------------------------------------\n\nTITLE: RLP Encoding Structure for Ethereum Transaction\nDESCRIPTION: The structure of RLP encoding for an Ethereum transaction before signing, showing the order of transaction fields that need to be encoded.\n\nLANGUAGE: text\nCODE:\n```\n[\n  nonce,\n  gasPrice,\n  gasLimit,\n  to (null → 0x),\n  value,\n  data,\n  chainId,\n  0,\n  0\n]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Metadata Structure for Generative Art NFT\nDESCRIPTION: Demonstrates the metadata structure for a generative art NFT named \"thumbzup #419\". The JSON includes the name, IPFS image URI, and attributes like background, body, face, hair, and accessories.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"thumbzup #419\",\n  \"image\": \"ipfs://bafybeihroeexeljv5yoyum2x4jz6riuqp6xwg6y7cg7jaumcdpyrjxg5zi\",\n  \"attributes\": [\n    {\n      \"trait_type\": \"background\",\n      \"value\": \"yellow\"\n    },\n    {\n      \"trait_type\": \"body\",\n      \"value\": \"thumb\"\n    },\n    {\n      \"trait_type\": \"face\",\n      \"value\": \"happy\"\n    },\n    {\n      \"trait_type\": \"hair\",\n      \"value\": \"long brown hair\"\n    },\n    {\n      \"trait_type\": \"accessories\",\n      \"value\": \"sunglasses\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Applications with SettleMint SDK JS\nDESCRIPTION: JavaScript/TypeScript code examples for interacting with applications through the SettleMint SDK, including listing applications, reading application details, and deleting applications.\n\nLANGUAGE: typescript\nCODE:\n```\n// List applications\nawait client.application.list(\"your-workspace\");\n\n// Read application\nawait client.application.read(\"app-unique-name\");\n\n// Delete application\nawait client.application.delete(\"app-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: API Portal Base URL Format\nDESCRIPTION: Example of the base URL format for the API portal middleware, which serves as the foundation for all API endpoints when interacting with smart contracts.\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api-portal-affe9.gke-europe.settlemint.com/\n```\n\n----------------------------------------\n\nTITLE: Creating a DNS Provider Secret for cert-manager\nDESCRIPTION: Command to create a Kubernetes secret containing the API token for the DNS provider (Cloudflare) that cert-manager will use for DNS01 challenge verification when requesting certificates.\n\nLANGUAGE: bash\nCODE:\n```\n# Create API token secret\nkubectl apply -n cert-manager -f - <<EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cloudflare-api-token-secret\n  namespace: cert-manager\ntype: Opaque\nstringData:\n  api-token: <API Token>\nEOF\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Contract Address Calculation in Ethereum\nDESCRIPTION: Pseudocode showing how a contract address is calculated internally by taking the Keccak256 hash of the RLP-encoded sender address and nonce, then extracting the last 20 bytes.\n\nLANGUAGE: text\nCODE:\n```\ncontractAddress = keccak256(rlp([sender, nonce]))[12:]\n```\n\n----------------------------------------\n\nTITLE: Sending a Signed Transaction to Ethereum Network with JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to send a signed transaction to the Ethereum network using a provider object.\n\nLANGUAGE: javascript\nCODE:\n```\nawait provider.sendTransaction(signedTx);\n```\n\n----------------------------------------\n\nTITLE: Emergency Functions for Contract Pause/Unpause in Solidity\nDESCRIPTION: Emergency functions that allow the admin to pause and unpause the contract in case of detected vulnerabilities or issues, leveraging OpenZeppelin's Pausable contract.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emergencyPause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n        emit EmergencyPaused(msg.sender);\n    }\n\n    function emergencyUnpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n        emit EmergencyUnpaused(msg.sender);\n    }\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Land Rate for Merged Parcels\nDESCRIPTION: Private function that calculates the average land rate when merging multiple parcels. This ensures the new merged parcel has an appropriate land rate based on the original parcels' rates.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _calculateAverageRate(uint256[] memory parcelIds) private view returns (uint256) {\n    uint256 total = 0;\n    for (uint i = 0; i < parcelIds.length; i++) {\n        total = total.add(_parcels[parcelIds[i]].landRate);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint platform using the CLI before performing operations.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: API Portal Endpoint Format for Smart Contract Interaction\nDESCRIPTION: Example endpoint format for interacting with a specific function of a deployed smart contract through the API portal, where {address} is replaced with the actual contract address.\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api-portal-affe9.gke-europe.settlemint.com/api/user-smart-contract-abi/{address}/create-profile\n```\n\n----------------------------------------\n\nTITLE: Creating a ClusterIssuer for Let's Encrypt\nDESCRIPTION: Command to create a cert-manager ClusterIssuer that uses Let's Encrypt to issue TLS certificates. It's configured to use the DNS01 challenge with Cloudflare as the DNS provider.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\n  namespace: cert-manager\nspec:\n  acme:\n    email: your-email@example.com\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: issuer-account-key\n    solvers:\n      - dns01:\n          cloudflare:\n            apiTokenSecretRef:\n              name: cloudflare-api-token-secret\n              key: api-token\nEOF\n```\n\n----------------------------------------\n\nTITLE: Calculating Storage Slot Key in Ethereum with JavaScript\nDESCRIPTION: JavaScript code using ethers.js that calculates the storage slot key in a Merkle Patricia Trie by hashing a padded slot index with Keccak256.\n\nLANGUAGE: javascript\nCODE:\n```\nslotKey = keccak256(padded_slot_index);\n```\n\n----------------------------------------\n\nTITLE: Deploying State Machine Contract with IPFS Metadata in TypeScript\nDESCRIPTION: TypeScript code for deploying a state machine contract with metadata stored on IPFS. It demonstrates generating an entity ID, creating metadata, uploading it to IPFS, and deploying the contract with the resulting CID.\n\nLANGUAGE: typescript\nCODE:\n```\n// This  identifier is used as a key to attach metadata to the smart contract\n// See StateMachineMetadata.sol for more info\n// This value is hardcoded here to make graph indexing of the metadata possible\nexport const entityId = 3073193977; // crypto.randomBytes(32).readUInt32LE()\n\n// Let's define the metadata for our entity that we want to upload to IPFS\nconst metadata = {\n  param1: \"param1\",\n  param2: \"param2\",\n};\n\n// using our hardhat task to upload the data to IPFS\nconst jsonCid: string = await run(\"ipfs-upload-string\", {\n  data: JSON.stringify(metadata),\n  ipfspath: `/generic-statemachine/metadata/metadata-${entityId}.json`,\n  ipfsnode,\n});\n\n// Then we deploy\nconst statemachine = await factory.deploy(\n  BigNumber.from(entityId),\n  jsonCid,\n  \"ipfs://\"\n);\n```\n\n----------------------------------------\n\nTITLE: Example Smart Contract Set Creation with CLI\nDESCRIPTION: Example command showing how to create a smart contract set named 'my-scset' in application 'my-app' using the 'default' template and 'starter' deployment plan.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create smart-contract-set my-scset \\\n  --application my-app \\\n  --template default \\\n  --deployment-plan starter\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handler in YAML Subgraph Manifest\nDESCRIPTION: Configuration for the subgraph manifest template that specifies the Transition event to listen for and the corresponding handler function to call when the event is detected.\n\nLANGUAGE: yaml\nCODE:\n```\n- event: Transition(address,bytes32,bytes32)\n  handler: handleTransitions\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Nodes with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code using the SettleMint JavaScript SDK to create a blockchain node. This example demonstrates how to initialize the client with authentication and create a validator node with specific configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\nconst createNode = async () => {\n  const result = await client.blockchainNode.create({\n    applicationUniqueName: \"your-application\",\n    blockchainNetworkUniqueName: \"your-network\",\n    name: \"my-node\",\n    nodeType: \"VALIDATOR\",\n    provider: \"provider\",\n    region: \"region\"\n  });\n  console.log('Node created:', result);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth Redirect URIs\nDESCRIPTION: Configuration for authorized redirect URIs in Google OAuth setup. This defines the callback URL that Google will redirect to after authentication.\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://your-domain.com/api/auth/callback/google\n```\n\n----------------------------------------\n\nTITLE: Installing Full Prometheus Stack for Comprehensive Kubernetes Monitoring\nDESCRIPTION: Installs the complete kube-prometheus-stack using Helm in the observability namespace. This comprehensive solution includes Prometheus, Alertmanager, Grafana, and various exporters for full-featured monitoring.\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install monitoring prometheus-community/kube-prometheus-stack \\\n  --namespace observability \\\n  --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Calculating Storage Slot for First Variable in Ethereum with JavaScript\nDESCRIPTION: JavaScript code using ethers.js that calculates the specific storage slot key for the first variable (at index 0x00) in a smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\nslot = ethers.utils.keccak256(ethers.utils.hexZeroPad(\"0x00\", 32));\n// Output:\n(\"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\");\n```\n\n----------------------------------------\n\nTITLE: Defining Role Constants in CBDC Chaincode\nDESCRIPTION: Defines constant string values representing different roles in the CBDC system, including central bank, retail bank, and auditor roles.\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    RoleCentralBank = \"centralbank\"\n    RoleRetailBank  = \"retailbank\"\n    RoleAuditor     = \"auditor\"\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to log in to the SettleMint platform using the SDK CLI. This is required before creating any resources programmatically.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Nodes with SettleMint CLI\nDESCRIPTION: CLI commands to list all nodes in an application and restart a specific node. These operations are useful for monitoring and maintenance of the blockchain infrastructure.\n\nLANGUAGE: bash\nCODE:\n```\n# List nodes\nSettleMint platform list services --application <application-name>\n\n# Restart node\nSettleMint platform restart blockchain-node <node-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Google OAuth JavaScript Origins\nDESCRIPTION: Configuration for authorized JavaScript origins in Google OAuth setup. This defines the domain where authentication requests can originate from.\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://your-domain.com\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Call Data with ethers.js for Smart Contract Interaction\nDESCRIPTION: JavaScript code using ethers.js that encodes a function call to updateMessage() with a string argument based on the contract's ABI interface.\n\nLANGUAGE: javascript\nCODE:\n```\nconst iface = new ethers.utils.Interface(abi);\nconst data = iface.encodeFunctionData(\"updateMessage\", [\"Goodbye Ethereum!\"]);\n```\n\n----------------------------------------\n\nTITLE: Managing Applications with SettleMint SDK JS\nDESCRIPTION: TypeScript code that demonstrates how to use the SettleMint SDK JS to create, list, read details of, and delete applications programmatically. Requires an access token for authentication.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\n// Create application\nconst createApp = async () => {\n  const result = await client.application.create({\n    workspaceUniqueName: \"your-workspace\",\n    name: \"myApp\"\n  });\n  console.log('Application created:', result);\n};\n\n// List applications\nconst listApps = async () => {\n  const apps = await client.application.list(\"your-workspace\");\n  console.log('Applications:', apps);\n};\n\n// Read application details\nconst readApp = async () => {\n  const app = await client.application.read(\"app-unique-name\");\n  console.log('Application details:', app);\n};\n\n// Delete application\nconst deleteApp = async () => {\n  await client.application.delete(\"application-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: Custom EAS Deployment Module in TypeScript\nDESCRIPTION: TypeScript code for defining a custom Ethereum Attestation Service deployment module using Hardhat Ignition. This module sets up the SchemaRegistry and EAS contracts for deployment.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst CustomEASModule = buildModule(\"EASDeployment\", (m) => {\n  const schemaRegistry = m.contract(\"SchemaRegistry\", [], {});\n  const EAS = m.contract(\"EAS\", [schemaRegistry], {});\n\n  return { schemaRegistry, EAS };\n});\n\nexport default CustomEASModule;\n```\n\n----------------------------------------\n\nTITLE: OAuth Provider Configuration in YAML\nDESCRIPTION: YAML configuration for setting up authentication providers. Includes JWT signing key and OAuth provider details like client ID and secret.\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  jwtSigningKey: \"your-generated-key\" # From openssl command\n  providers:\n    google:\n      enabled: true\n      clientID: \"your-client-id\" # From OAuth provider\n      clientSecret: \"your-secret\" # From OAuth provider\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Rows for Off-Chain Database and Storage Options in React\nDESCRIPTION: This code maps an array of data to generate table rows for the off-chain database, storage, and integration options available in the SettleMint platform, including Hasura, MinIO/IPFS, and Integration Studio.\n\nLANGUAGE: JavaScript\nCODE:\n```\n[[\n  \"21\",\n  \"Add Hasura to provision a PostgreSQL database with GraphQL APIs.\",\n  \"Setup hasura\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/setup-offchain-database\",\n],\n[\n  \"22\",\n  \"Add MinIO or IPFS for centralized/decentralized file storage.\",\n  \"Add storage\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/setup-storage\",\n],\n[\n  \"23\",\n  \"Enable Integration Studio for creating custom APIs and flows\",\n  \"Add integration studio\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/integration-studio\",\n],\n].map(([step, action, link, url]) => (\n  <tr\n    key={step}\n    className=\"border-b border-gray-100 dark:border-gray-800\"\n  >\n    <td className=\"py-2 pl-6 font-medium text-gray-700 dark:text-gray-300\">\n      {step}\n    </td>\n    <td className=\"py-2\">{action}</td>\n    <td className=\"py-2\">\n      <a\n        href={url}\n        className=\"text-blue-600 dark:text-blue-400 underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {link}\n      </a>\n    </td>\n  </tr>\n))}\n```\n\n----------------------------------------\n\nTITLE: Visualizing EAS Workflow with Mermaid Diagram\nDESCRIPTION: A mermaid diagram illustrating the workflow of the Ethereum Attestation Service, showing relationships between SchemaRegistry, EAS Contract, Users/Systems, Attestations, and Verifiers.\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    SchemaRegistry[\"SchemaRegistry\"]\n    UsersSystems[\"Users/Systems\"]\n    EASContract[\"EAS Contract\"]\n    Verifiers[\"Verifiers\"]\n    Attestations[\"Attestations\"]\n\n    SchemaRegistry -- \"Defines Data Structure\" --> EASContract\n    UsersSystems -- \"Interact\" --> EASContract\n    EASContract -- \"Creates\" --> Attestations\n    Verifiers -- \"Verify\" --> Attestations\n```\n\n----------------------------------------\n\nTITLE: Managing Applications with SettleMint SDK CLI\nDESCRIPTION: Command line instructions for listing and deleting applications using the SettleMint platform CLI. These commands allow you to list all applications and delete a specific application by name.\n\nLANGUAGE: bash\nCODE:\n```\n# List applications\nSettleMint platform list applications\n\n# Delete application\nSettleMint platform delete application <name>\n```\n\n----------------------------------------\n\nTITLE: Listing Network Peers\nDESCRIPTION: Utility command to list all available peers in the network.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh peers\n```\n\n----------------------------------------\n\nTITLE: Testing AWS S3 Storage Access\nDESCRIPTION: This command tests access to an AWS S3 bucket using the AWS CLI. It verifies that the provided credentials and endpoint configuration are correct.\n\nLANGUAGE: bash\nCODE:\n```\naws s3 ls s3://your-bucket \\\n  --endpoint-url your-endpoint \\\n  --access-key your-access-key \\\n  --secret-key your-secret-key\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Resolver Using Hardhat Command\nDESCRIPTION: Bash command to deploy the custom resolver using Hardhat. This command references the deployment module defined in the TypeScript file and executes the deployment process.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat deploy --module ignition/modules/main.ts\n```\n\n----------------------------------------\n\nTITLE: Checking Approved Chaincode Definitions\nDESCRIPTION: Command to check approved definition of chaincode on a specific peer.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh approved <peer>\n```\n\n----------------------------------------\n\nTITLE: Installing and Authenticating Google Cloud SDK\nDESCRIPTION: Commands to install the Google Cloud SDK on macOS and authenticate with application default credentials for Terraform to use when interacting with GCP.\n\nLANGUAGE: bash\nCODE:\n```\nbrew cask install google-cloud-sdk\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Deployments with SDK CLI in Bash\nDESCRIPTION: These commands demonstrate how to create custom deployments using the SettleMint platform CLI, including specifying container image details, ports, cloud provider, region, and environment variables.\n\nLANGUAGE: bash\nCODE:\n```\n# Create a custom deployment\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --port 3000 \\\n  --provider gcp \\\n  --region europe-west1\n\n# With environment variables\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --env-vars NODE_ENV=production,DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Initializing EAS Configuration in Node-RED with Ethers.js\nDESCRIPTION: A JavaScript function for Node-RED that initializes EAS (Ethereum Attestation Service) configuration by setting up an Ethereum provider, signer, and EAS instance with the provided RPC URL, private key, and contract addresses.\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize provider with specific network parameters\nconst provider = new ethers.JsonRpcProvider(msg.rpcUrl)\n\nconst signer = new ethers.Wallet(msg.privateKey, provider);\n\n// Initialize EAS with specific gas settings\nconst EAS = new eassdk.EAS(msg.easAddress);\neas.connect(signer);\n\n// Store in global context\nglobal.set('provider', provider);\nglobal.set('signer', signer);\nglobal.set('eas', eas);\nglobal.set('registryAddress', msg.registryAddress);\n\nmsg.payload = 'EAS Configuration Initialized';\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Deployments with SettleMint SDK CLI\nDESCRIPTION: Commands for listing, reading, restarting, and editing custom deployments using the SettleMint platform CLI. These commands allow developers to manage deployment lifecycle and configuration from the command line.\n\nLANGUAGE: bash\nCODE:\n```\n# List custom deployments\nSettleMint platform list custom-deployments --application my-app\n\n# Get deployment details\nSettleMint platform read custom-deployment my-deployment\n\n# Restart deployment\nSettleMint platform restart custom-deployment my-deployment\n\n# Edit deployment\nSettleMint platform edit custom-deployment my-deployment \\\n  --container-image registry.example.com/my-app:v2\n```\n\n----------------------------------------\n\nTITLE: Adding Orderer to Channel\nDESCRIPTION: Command to add an orderer to an existing channel.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh orderer-join-channel <o> <channel>\n```\n\n----------------------------------------\n\nTITLE: Navigating to DNS Zone Directory\nDESCRIPTION: Command to change to the DNS zone configuration directory within the cloned repository to prepare for DNS setup.\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial-btp-on-gcp/00_dns_zone\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Structure for EAS Attestations in JavaScript\nDESCRIPTION: This code defines the schema structure for Ethereum Attestation Service. It includes detailed comments explaining available data types (string, bool, address, uint256, bytes32) and provides examples of valid schema definitions. The current schema is configured to store social media information.\n\nLANGUAGE: javascript\nCODE:\n```\n/* SCHEMA GUIDE\nEdit the schema variable to define your attestation fields.\nFormat: \"type name, type name, type name\"\n\nAvailable Types:\n- string (text)\n- bool (true/false)\n- address (wallet address)\n- uint256 (number)\n- bytes32 (hash)\n\nExamples:\n\"string name, string email, bool isVerified\"\n\"string twitter, address wallet, uint256 age\"\n\"string discord, string github, string telegram\"\n*/\n\nconst schema = \"string pshandle, string socialMedia, string socialMediaHandle\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint platform using the CLI tool before creating middleware.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Removing Orderer from Channel\nDESCRIPTION: Command to remove an orderer from a channel.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh orderer-leave-channel <o> <channel>\n```\n\n----------------------------------------\n\nTITLE: Creating DNS Zone with Terraform\nDESCRIPTION: Commands to initialize and apply the Terraform configuration for creating a DNS zone in GCP to host the BTP deployment.\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Windsurf\nDESCRIPTION: JSON configuration for integrating the SettleMint MCP server in Windsurf's Cascade assistant. This setup enables the AI to interact with blockchain data and execute transactions through the MCP connection.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Contract Integration JSON for Asset Tokenization\nDESCRIPTION: This JSON code snippet contains configuration for an Integration Studio deployment, including a function to set global variables with a smart contract ABI. The ABI defines an ERC-1155 token contract with asset tokenization functionality, including methods for transfers, balance checks, and asset details.\n\nLANGUAGE: json\nCODE:\n```\n[ { \"id\": \"8154b1dd0912e484\", \"type\": \"function\", \"z\": \"a781da6f697711d2\",\n\"name\": \"Set Global Variables\", \"func\": \"const glbVar = {\\n privateKey: \\\"PRIVATE_KEY\\\",\\n privateKeyAddress: \\\"ADDRESS\\\",\\n smartContract: \\\"ADDRESS\\\",\\n accessToken: \\\"ACCESS_TOKEN\\\",\\n rpcEndpoint: \\\"RCP_ENDPOINT\\\",\\n abi: [\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"target\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"AddressEmptyCode\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"sender\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"balance\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"needed\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"tokenId\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1155InsufficientBalance\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"approver\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1155InvalidApprover\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"idsLength\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"valuesLength\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1155InvalidArrayLength\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"operator\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1155InvalidOperator\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"receiver\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1155InvalidReceiver\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"sender\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1155InvalidSender\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"operator\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"owner\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1155MissingApprovalForAll\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"implementation\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ERC1967InvalidImplementation\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [],\\n \\\"name\\\": \\\"ERC1967NonPayable\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [],\\n \\\"name\\\": \\\"FailedInnerCall\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [],\\n \\\"name\\\": \\\"InvalidInitialization\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [],\\n \\\"name\\\": \\\"NotInitializing\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"owner\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"OwnableInvalidOwner\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"account\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"OwnableUnauthorizedAccount\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [],\\n \\\"name\\\": \\\"UUPSUnauthorizedCallContext\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"bytes32\\\",\\n \\\"name\\\": \\\"slot\\\",\\n \\\"type\\\": \\\"bytes32\\\"\\n }\\n ],\\n \\\"name\\\": \\\"UUPSUnsupportedProxiableUUID\\\",\\n \\\"type\\\": \\\"error\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"account\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"operator\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"bool\\\",\\n \\\"name\\\": \\\"approved\\\",\\n \\\"type\\\": \\\"bool\\\"\\n }\\n ],\\n \\\"name\\\": \\\"ApprovalForAll\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"from\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"to\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"uint256[]\\\",\\n \\\"name\\\": \\\"assetIds\\\",\\n \\\"type\\\": \\\"uint256[]\\\"\\n },\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"uint256[]\\\",\\n \\\"name\\\": \\\"amounts\\\",\\n \\\"type\\\": \\\"uint256[]\\\"\\n }\\n ],\\n \\\"name\\\": \\\"AssetTransferEvent\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"uint64\\\",\\n \\\"name\\\": \\\"version\\\",\\n \\\"type\\\": \\\"uint64\\\"\\n }\\n ],\\n \\\"name\\\": \\\"Initialized\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"previousOwner\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"newOwner\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"OwnershipTransferred\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"operator\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"from\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"to\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"uint256[]\\\",\\n \\\"name\\\": \\\"ids\\\",\\n \\\"type\\\": \\\"uint256[]\\\"\\n },\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"uint256[]\\\",\\n \\\"name\\\": \\\"values\\\",\\n \\\"type\\\": \\\"uint256[]\\\"\\n }\\n ],\\n \\\"name\\\": \\\"TransferBatch\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"operator\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"from\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"to\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"id\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"value\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"name\\\": \\\"TransferSingle\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": false,\\n \\\"internalType\\\": \\\"string\\\",\\n \\\"name\\\": \\\"value\\\",\\n \\\"type\\\": \\\"string\\\"\\n },\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"id\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"name\\\": \\\"URI\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"anonymous\\\": false,\\n \\\"inputs\\\": [\\n {\\n \\\"indexed\\\": true,\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"implementation\\\",\\n \\\"type\\\": \\\"address\\\"\\n }\\n ],\\n \\\"name\\\": \\\"Upgraded\\\",\\n \\\"type\\\": \\\"event\\\"\\n },\\n {\\n \\\"inputs\\\": [],\\n \\\"name\\\": \\\"UPGRADE_INTERFACE_VERSION\\\",\\n \\\"outputs\\\": [\\n {\\n \\\"internalType\\\": \\\"string\\\",\\n \\\"name\\\": \\\"\\\",\\n \\\"type\\\": \\\"string\\\"\\n }\\n ],\\n \\\"stateMutability\\\": \\\"view\\\",\\n \\\"type\\\": \\\"function\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"name\\\": \\\"assetToDetails\\\",\\n \\\"outputs\\\": [\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"assetId\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"string\\\",\\n \\\"name\\\": \\\"name\\\",\\n \\\"type\\\": \\\"string\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"string\\\",\\n \\\"name\\\": \\\"symbol\\\",\\n \\\"type\\\": \\\"string\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"maxSupply\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"faceValue\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"maturityTimestamp\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"string\\\",\\n \\\"name\\\": \\\"assetUri\\\",\\n \\\"type\\\": \\\"string\\\"\\n }\\n ],\\n \\\"stateMutability\\\": \\\"view\\\",\\n \\\"type\\\": \\\"function\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address\\\",\\n \\\"name\\\": \\\"account\\\",\\n \\\"type\\\": \\\"address\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"id\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"name\\\": \\\"balanceOf\\\",\\n \\\"outputs\\\": [\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"stateMutability\\\": \\\"view\\\",\\n \\\"type\\\": \\\"function\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"address[]\\\",\\n \\\"name\\\": \\\"accounts\\\",\\n \\\"type\\\": \\\"address[]\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256[]\\\",\\n \\\"name\\\": \\\"ids\\\",\\n \\\"type\\\": \\\"uint256[]\\\"\\n }\\n ],\\n \\\"name\\\": \\\"balanceOfBatch\\\",\\n \\\"outputs\\\": [\\n {\\n \\\"internalType\\\": \\\"uint256[]\\\",\\n \\\"name\\\": \\\"\\\",\\n \\\"type\\\": \\\"uint256[]\\\"\\n }\\n ],\\n \\\"stateMutability\\\": \\\"view\\\",\\n \\\"type\\\": \\\"function\\\"\\n },\\n {\\n \\\"inputs\\\": [\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"assetId\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n },\\n {\\n \\\"internalType\\\": \\\"uint256\\\",\\n \\\"name\\\": \\\"amounts\\\",\\n \\\"type\\\": \\\"uint256\\\"\\n }\\n ],\\n \\\"name\\\": \\\"burn\\\",\\n\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint CLI\nDESCRIPTION: Commands to list, read details, and delete middleware using the SettleMint CLI tool.\n\nLANGUAGE: bash\nCODE:\n```\n# List middlewares\nSettleMint platform list middlewares --application <app-name>\n\n# Get middleware details\nSettleMint platform read middleware <middleware-name>\n\n# Delete middleware\nSettleMint platform delete middleware <middleware-name>\n```\n\n----------------------------------------\n\nTITLE: Managing Applications with SettleMint SDK JS\nDESCRIPTION: JavaScript/TypeScript code for managing applications using the SettleMint SDK. These functions allow you to list all applications in a workspace, read details of a specific application, and delete an application by its unique name.\n\nLANGUAGE: typescript\nCODE:\n```\n// List applications\nawait client.application.list(\"your-workspace\");\n\n// Read application\nawait client.application.read(\"app-unique-name\");\n\n// Delete application\nawait client.application.delete(\"app-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager in Helm Values\nDESCRIPTION: This YAML configuration enables Google Cloud Platform Secret Manager integration for the platform. It requires specifying the GCP project ID and service account credentials in JSON format.\n\nLANGUAGE: yaml\nCODE:\n```\n# values.yaml for Helm installation\ngcpSecretManager:\n  # -- Enable Google Secret Manager integration\n  enabled: true\n  # -- The Google Cloud project ID\n  projectId: \"your-project-id\"\n  # -- The Google Cloud service account credentials JSON\n  credentials: |\n    {\n      // Your service account JSON key\n    }\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-721 Contract and Claiming Reserves with Bash\nDESCRIPTION: Bash command to deploy the ERC-721 contract and claim the reserve tokens. This is the first step in the deployment process, setting up the contract with the initial configuration.\n\nLANGUAGE: bash\nCODE:\n```\nyarn smartcontract:deploy:setup\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware with SettleMint JavaScript SDK\nDESCRIPTION: TypeScript code snippets to list, read details, and delete middleware using the SettleMint JavaScript SDK.\n\nLANGUAGE: typescript\nCODE:\n```\n// List middlewares\nawait client.middleware.list(\"your-app\");\n\n// Get middleware details\nawait client.middleware.read(\"middleware-unique-name\");\n\n// Delete middleware\nawait client.middleware.delete(\"middleware-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Table Layout with JSX\nDESCRIPTION: Creates a table component using JSX to display steps for setting up an organization on the SettleMint platform. The code maps through an array of data and generates table rows with step numbers, actions, and documentation links.\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n  [\n    \"1\",\n    \"Sign up at console.settlemint.com using a corporate email.\",\n    \"Sign Up\",\n    \"https://console.settlemint.com/\",\n  ],\n  [\n    \"2\",\n    \"Once logged in, create a new organization\",\n    \"Create organization\",\n    \"/documentation/building-with-settlemint/setup-account-and-billing\",\n  ],\n  [\n    \"3\",\n    \"Invite collaborators and assign them roles such as Admin or User.\",\n    \"Add team members\",\n    \"/documentation/platform-components/blockchain-infrastructure/consortium-manager\",\n  ],\n  [\n    \"4\",\n    \"Within the organization, create an application\",\n    \"Create Application\",\n    \"/documentation/building-with-settlemint/evm-chains-guide/create-an-application\",\n  ],\n].map(([step, action, link, url]) => (\n  <tr\n    key={step}\n    className=\"border-b border-gray-100 dark:border-gray-800\"\n  >\n    <td className=\"py-2 pl-6 font-medium text-gray-700 dark:text-gray-300\">\n      {step}\n    </td>\n    <td className=\"py-2\">{action}</td>\n    <td className=\"py-2\">\n      <a\n        href={url}\n        className=\"text-blue-600 dark:text-blue-400 underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {link}\n      </a>\n    </td>\n  </tr>\n))}\n```\n\n----------------------------------------\n\nTITLE: Example Complete SettleMint Platform Configuration\nDESCRIPTION: A fully populated example of a values.yaml file for the SettleMint platform, showing realistic values for all configuration parameters including ingress settings, database connections, authentication, and deployment targets.\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: true\n  className: \"nginx\"\n  host: \"example.company.com\"\n  annotations:\n    nginx.ingress.kubernetes.io/use-regex: \"true\"\n    nginx.ingress.kubernetes.io/proxy-ssl-server-name: \"on\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"500m\"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: \"3600\"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: \"3600\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\n    cert-manager.io/cluster-issuer: \"letsencrypt\"\n  tls:\n    - secretName: \"example-tls\"\n      hosts:\n        - \"example.company.com\"\n        - \"*.example.company.com\"\n\nredis:\n  host: \"redis.example.local\"\n  port: \"6379\"\n  password: \"abc123password\"\n  tls: true\n\npostgresql:\n  host: \"postgresql.example.local\"\n  port: \"5432\"\n  user: \"db_user\"\n  password: \"xyz789password\"\n  database: \"platform_db\"\n  sslMode: require\n\nauth:\n  jwtSigningKey: \"abc123jwt456xyz789signing000key111example\"\n  providers:\n    google:\n      enabled: true\n      clientID: \"example-123456789.apps.googleusercontent.com\"\n      clientSecret: \"abcdef-example-google-secret\"\n\nvault:\n  address: \"http://vault.example.local:8200\"\n  roleId: \"abc123-role-id\"\n  secretId: \"xyz789-secret-id\"\n  namespace: \"vault\"\n\nfeatures:\n  observability:\n    metrics:\n      enabled: true\n      apiUrl: \"http://metrics.example.local/api/v1\"\n    logs:\n      enabled: true\n      apiUrl: \"http://logs.example.local/api/v1\"\n  deploymentEngine:\n    platform:\n      domain:\n        hostname: \"example.company.com\"\n    state:\n      connectionUrl: \"s3-compatible-endpoint-url\"\n      secretsProvider: \"passphrase\"\n      credentials:\n        encryptionKey: \"abc123encryption456key789example000key\"\n        aws:\n          accessKeyId: \"EXAMPLEKEYID123456\"\n          secretAccessKey: \"abc123example456secret789key000aws\"\n          region: \"us-east-1\"\n        azure:\n          storageAccount: \"example-storage-account\"\n          storageKey: \"abc123example456key789key000azure\"\n        google:\n          project: \"example-project-id\"\n          credentials: |\n            {\n              \"type\": \"service_account\",\n              \"project_id\": \"your-project\",\n              \"private_key_id\": \"key-id\",\n              \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\",\n              \"client_email\": \"service-account@project.iam.gserviceaccount.com\",\n              \"client_id\": \"client-id\",\n              \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n              \"token_uri\": \"https://oauth2.googleapis.com/token\",\n              \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n              \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/service-account@project.iam.gserviceaccount.com\"\n            }\n    targets:\n      - id: \"example\"\n        name: \"Example Cluster\"\n        icon: \"kubernetes\"\n        clusters:\n          - id: \"main\"\n            name: \"Main\"\n            icon: \"global\"\n            location:\n              lat: 0.0000\n              lon: 0.0000\n            connection:\n              sameCluster:\n                enabled: true\n            namespace:\n              single:\n                name: \"example\"\n            domains:\n              service:\n                tls: true\n                hostname: \"example.company.com\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Deployments with SDK JavaScript\nDESCRIPTION: This TypeScript code shows how to create a custom deployment using the SettleMint JavaScript SDK, initializing a client with credentials and configuring deployment properties programmatically.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: 'your_access_token',\n  instance: 'https://console.settlemint.com'\n});\n\nconst createDeployment = async () => {\n  const result = await client.customDeployment.create({\n    applicationId: \"app-123\",\n    name: \"my-deployment\",\n    imageRepository: \"registry.example.com\",\n    imageName: \"my-app\",\n    imageTag: \"latest\",\n    port: 3000,\n    provider: \"gcp\",\n    region: \"europe-west1\",\n    environmentVariables: {\n      NODE_ENV: \"production\"\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Building the Whitelist for ERC-721 Sale with Bash\nDESCRIPTION: Bash command to build the Merkle Tree for the whitelist, generate proofs, and store the Merkle Root in the contract. This process enables gas-efficient whitelisting for the pre-sale phase.\n\nLANGUAGE: bash\nCODE:\n```\nyarn smartcontract:deploy:whitelist\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Contract Set Example with CLI\nDESCRIPTION: A concrete example of creating a smart contract set named 'my-scset' for application 'my-app' using the default template and starter deployment plan.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create smart-contract-set my-scset \\\n  --application my-app \\\n  --template default \\\n  --deployment-plan starter\n```\n\n----------------------------------------\n\nTITLE: Rendering API Setup Table with JSX\nDESCRIPTION: Creates a table row for displaying the API portal setup step. The code maps through an array containing step information and generates a table row with step number, action description, and documentation link.\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n  [\n    \"16\",\n    \"Add API portal and get write APIs for your contract\",\n    \"API portal\",\n    \"/documentation/building-with-settlemint/evm-chains-guide/setup-api-portal\",\n  ],\n  [\n    \"17\",\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI-Blockchain Interaction Flow with Mermaid Sequence Diagram\nDESCRIPTION: This sequence diagram shows the interaction flow between an AI model, MCP Server, blockchain nodes, and external APIs. It details the step-by-step process of how an AI agent queries blockchain data and executes transactions through SettleMint's MCP implementation.\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant AI as AI Model (Agent)\n    participant MCP as MCP Server\n    participant Chain as The Graph / Portal / Node\n    participant API as External API\n\n    AI->>MCP: (1) Query request (e.g., get contract state)\n    Note over AI,MCP: AI asks MCP for on-chain data\n    MCP-->>AI: (2) Acknowledgement & processing\n\n    MCP->>Chain: (3) Fetch data from blockchain\n    Chain-->>MCP: (4) Return contract state\n\n    MCP->>API: (5) [Optional] Fetch related off-chain data\n    API-->>MCP: (6) Return external data\n\n    MCP-->>AI: (7) Send combined response\n    Note over AI,MCP: AI receives on-chain data (and any other context)\n\n    AI->>MCP: (8) Action request (e.g., execute transaction)\n    MCP->>Chain: (9) Submit transaction to blockchain\n    Chain-->>MCP: (10) Return tx result/receipt\n    MCP-->>AI: (11) Confirm action result\n```\n\n----------------------------------------\n\nTITLE: Insurance Claim Processing in Healthcare Blockchain in Solidity\nDESCRIPTION: Set of functions for submitting, approving, denying, and settling insurance claims. Implements a workflow with multiple status states and required validations for each step.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submitClaim(\n        address patientAddress,\n        string memory diagnosisCode,\n        uint256 amountRequested,\n        string[] calldata supportingEHRs\n    ) external onlyActiveProvider onlyWithConsent(patientAddress) validDiagnosisCode(diagnosisCode)\n      whenNotPaused nonReentrant returns (uint256) {\n\n        _claimIds.increment();\n        uint256 claimId = _claimIds.current();\n\n        _claims[claimId] = InsuranceClaim({\n            patientAddress: patientAddress,\n            providerAddress: msg.sender,\n            diagnosisCode: diagnosisCode,\n            amountRequested: amountRequested,\n            amountApproved: 0,\n            status: ClaimStatus.PENDING,\n            submissionDate: block.timestamp,\n            approvalDate: 0,\n            settlementDate: 0,\n            denialDate: 0,\n            denialReason: \"\",\n            supportingEHRs: supportingEHRs\n        });\n\n        emit ClaimSubmitted(claimId, patientAddress, diagnosisCode);\n        return claimId;\n    }\n\n    function approveClaim(\n        uint256 claimId,\n        uint256 approvedAmount,\n        string memory approvalNotes\n    ) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        require(_claims[claimId].status == ClaimStatus.PENDING, \"Claim not pending\");\n        require(approvedAmount <= _claims[claimId].amountRequested, \"Amount exceeds request\");\n\n        _claims[claimId].status = ClaimStatus.APPROVED;\n        _claims[claimId].amountApproved = approvedAmount;\n        _claims[claimId].approvalDate = block.timestamp;\n\n        emit ClaimApproved(claimId, approvedAmount);\n    }\n\n    function denyClaim(\n        uint256 claimId,\n        string memory reason\n    ) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        require(_claims[claimId].status == ClaimStatus.PENDING, \"Claim not pending\");\n\n        _claims[claimId].status = ClaimStatus.DENIED;\n        _claims[claimId].denialReason = reason;\n        _claims[claimId].denialDate = block.timestamp;\n\n        emit ClaimDenied(claimId, reason);\n    }\n\n    // New: Settle an approved claim\n    function settleClaim(uint256 claimId) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        require(_claims[claimId].status == ClaimStatus.APPROVED, \"Claim must be approved to settle\");\n        _claims[claimId].status = ClaimStatus.SETTLED;\n        _claims[claimId].settlementDate = block.timestamp;\n\n        emit ClaimSettled(claimId);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware using SettleMint CLI\nDESCRIPTION: Commands to create middleware using the SettleMint CLI, including getting available middleware types and creating a specific middleware.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the list of available middleware types\nSettleMint platform create middleware --help\n\n# Create a middleware\nSettleMint platform create middleware <type> <name>\n\n# Get information about the command and all available options\nSettleMint platform create middleware <type> --help\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Meta Transaction in TypeScript\nDESCRIPTION: TypeScript code that prepares and signs a meta transaction request. The request includes transaction details like the sender, recipient, and function data, which is then signed using ethSigUtil.\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletOneNonce = Number(\n  await read(\"Forwarder\", \"getNonce\", walletOneAddress)\n);\nconst req = {\n  from: walletOneAddress,\n  to: token.address,\n  value: \"0\",\n  gas: \"100000\",\n  nonce: walletOneNonce,\n  data: functionData,\n};\n\nconst signedData = ethSigUtil.signTypedData({\n  privateKey: walletOne.getPrivateKey(),\n  data: {\n    types: types,\n    domain: domain,\n    primaryType: \"ForwardRequest\",\n    message: req,\n  },\n  version: ethSigUtil.SignTypedDataVersion.V4,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Cursor\nDESCRIPTION: JSON configuration for the global Cursor MCP setup file located at ~/.cursor/mcp.json. This configuration establishes a connection to the SettleMint MCP server with project path and authentication token.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Settings in YAML\nDESCRIPTION: YAML configuration example for enabling the ingress controller in the platform installation. This specifies the ingress class name and acts as a template for further configuration.\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: true\n  className: nginx\n  # Other ingress settings will be configured in Domain & TLS section\n```\n\n----------------------------------------\n\nTITLE: View Function for Patient Consents in Solidity\nDESCRIPTION: Function that retrieves a list of all active consents granted by a patient. It performs a two-pass algorithm to first count valid consents and then populate the result array.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getPatientConsents(address patientAddress) external view returns (Consent[] memory) {\n        uint256 count;\n        address[] memory providers = _getAllProviders();\n\n        // First pass: count valid consents\n        for (uint i = 0; i < providers.length; i++) {\n            if (_consents[patientAddress][providers[i]].isGranted) {\n                count++;\n            }\n        }\n\n        // Second pass: populate result array\n        Consent[] memory result = new Consent[](count);\n        uint256 index;\n        for (uint i = 0; i < providers.length; i++) {\n            if (_consents[patientAddress][providers[i]].isGranted) {\n                result[index] = _consents[patientAddress][providers[i]];\n                index++;\n            }\n        }\n\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Fetching Utility for The Graph in TypeScript\nDESCRIPTION: A helper utility that abstracts the logic of either loading an existing UserProfile entity or creating a new one if it doesn't exist. It uses the userId as a string key and ensures all required fields have default values to prevent Graph Node processing errors.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BigInt } from \"@graphprotocol/graph-ts\";\nimport { UserProfile } from \"../../generated/schema\";\n\n/**\n * Fetches a UserProfile entity using the given userId.\n * If it does not exist, a new UserProfile entity is created with default values.\n *\n * @param userId - The user ID as a BigInt.\n * @returns The UserProfile entity.\n */\nexport function fetchUserProfile(userId: BigInt): UserProfile {\n  let id = userId.toString();\n  let user = UserProfile.load(id);\n\n  if (!user) {\n    user = new UserProfile(id);\n    user.name = \"\";\n    user.email = \"\";\n    user.age = 0;\n    user.country = \"\";\n    user.isKYCApproved = false;\n    user.isDeleted = false;\n  }\n\n  return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Public Sale for ERC-721 Tokens with Bash\nDESCRIPTION: Bash command to terminate the pre-sale and activate the public sale phase for the ERC-721 token. This allows anyone to purchase tokens at the public sale price.\n\nLANGUAGE: bash\nCODE:\n```\nyarn smartcontract:deploy:publicsale\n```\n\n----------------------------------------\n\nTITLE: Smart Contract ABI (Application Binary Interface)\nDESCRIPTION: This JSON represents the ABI for the HelloWorld smart contract. The ABI defines the interface for interacting with the contract, specifying the constructor, functions, their inputs and outputs, and visibility.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"inputs\": [{ \"internalType\": \"string\", \"name\": \"_msg\", \"type\": \"string\" }],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"message\",\n    \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{ \"internalType\": \"string\", \"name\": \"_msg\", \"type\": \"string\" }],\n    \"name\": \"updateMessage\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Requesting Parcel Merge in Land Registry Smart Contract\nDESCRIPTION: Function that allows a registrar to request merging multiple land parcels into a single parcel with a new parcel number. It validates that there are multiple parcels to merge and creates a merge request that requires approval.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction requestMerge(\n    uint256[] memory parcelIds,\n    string memory newParcelNumber\n) external onlyRegistrar {\n    require(parcelIds.length > 1, \"Need multiple parcels to merge\");\n\n    uint256 requestId = uint256(keccak256(abi.encodePacked(parcelIds[0], block.timestamp)));\n\n    _splitMergeRequests[requestId] = SplitMergeRequest({\n        parcelIds: parcelIds,\n        newAreas: new uint256[](0),\n        newParcelNumbers: _asSingletonArray(newParcelNumber),\n        newGpsPolygons: new string[](0),\n        isMerge: true,\n        approved: false,\n        approvalSignatures: new bytes[](0)\n    });\n\n    for (uint i = 0; i < parcelIds.length; i++) {\n        require(_parcelToRequest[parcelIds[i]] == 0, \"Parcel has active request\");\n        _parcelToRequest[parcelIds[i]] = requestId;\n    }\n\n    emit MergeRequested(requestId, parcelIds);\n}\n```\n\n----------------------------------------\n\nTITLE: Signing an Ethereum Transaction with JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to create a signature for an Ethereum transaction by computing the Keccak256 hash of the RLP-encoded transaction and signing it with a private key.\n\nLANGUAGE: javascript\nCODE:\n```\nconst txHash = keccak256(rlpEncodedUnsignedTx);\nconst signature = ecsign(txHash, privateKey);\n```\n\n----------------------------------------\n\nTITLE: Executing NFT Metadata Reveal with Yarn Command\nDESCRIPTION: This command executes the metadata reveal process after setting the baseURI to the final IPFS folder. This action freezes the metadata to prevent further changes once executed.\n\nLANGUAGE: bash\nCODE:\n```\nyarn smartcontract:deploy:reveal\n```\n\n----------------------------------------\n\nTITLE: ECDSA Signature Components for Ethereum Transaction\nDESCRIPTION: JSON representation of an ECDSA signature for an Ethereum transaction, showing the v, r, and s components where v includes the chain ID according to EIP-155.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"v\": 0x25,\n  \"r\": \"0x3aeec3c3a7eb1a13c6d408419816f6bb5563a9cf4263a6b9d170e9bb5b88e5bb\",\n  \"s\": \"0x275d3d113e2f06d90d3dc9e16ff3387ff145f1fe9d62c1e421693d6d24eaa598\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secret Manager in Helm Values\nDESCRIPTION: This YAML configuration enables AWS Secret Manager integration for the platform. It requires specifying the AWS region, access key ID, and secret access key.\n\nLANGUAGE: yaml\nCODE:\n```\n# values.yaml for Helm installation\nawsSecretManager:\n  # -- Enable AWS Secret Manager integration\n  enabled: true\n  # -- The AWS region\n  region: 'us-east-1'\n  # -- The AWS access key ID\n  accessKeyId: 'your-access-key-id'\n  # -- The AWS secret access key\n  secretAccessKey: 'your-secret-access-key'\n```\n\n----------------------------------------\n\nTITLE: Querying Land Parcel and Request Details in Blockchain Registry\nDESCRIPTION: View functions that allow users to retrieve comprehensive details about land parcels, their buildings, payment history, and split/merge requests. These functions combine data from multiple related structures.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getParcelDetails(uint256 parcelId) public view returns (\n    LandParcel memory parcel,\n    Building[] memory buildings,\n    PaymentDetail[] memory payments\n) {\n    parcel = _parcels[parcelId];\n    buildings = new Building[](parcel.buildingIds.length);\n\n    for (uint256 i = 0; i < parcel.buildingIds.length; i++) {\n        buildings[i] = _buildings[parcel.buildingIds[i]];\n    }\n\n    return (parcel, buildings, parcel.paymentHistory);\n}\n\nfunction getRequestDetails(uint256 requestId) public view returns (\n    SplitMergeRequest memory request,\n    LandParcel[] memory parcels\n) {\n    request = _splitMergeRequests[requestId];\n    parcels = new LandParcel[](request.parcelIds.length);\n\n    for (uint i = 0; i < request.parcelIds.length; i++) {\n        parcels[i] = _parcels[request.parcelIds[i]];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ethereum Transaction Receipt\nDESCRIPTION: A JSON representation of an Ethereum transaction receipt containing the transaction hash, block number, sender, recipient, gas used, status, logs, and logs bloom filter. This receipt serves as proof that the transaction was executed.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transactionHash\": \"0x9e81fbb3b8fd95f81c0b4161d8ef25824e64920bca134a9b469ec72f4db3cf61\",\n  \"blockNumber\": 18465123,\n  \"from\": \"0xd8cD4DAfD4e581dE9e69fB9588b6E547C206Efd1\",\n  \"to\": \"0x5cbd38cc74f924b1ef5eb86d9b54f9931f75d7e3\",\n  \"gasUsed\": \"0x4a38\", // 19000+ gas\n  \"status\": \"0x1\", // success\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Singleton Array in Solidity\nDESCRIPTION: A utility function that creates a single-element array containing the provided value. This is useful for operations that require array inputs but only have a single element to process.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n        return array;\n    }\n```\n\n----------------------------------------\n\nTITLE: RLP-Encoded Signed Ethereum Transaction\nDESCRIPTION: The complete RLP-encoded transaction in hexadecimal format after signing, which includes the original transaction data plus the v, r, and s signature components.\n\nLANGUAGE: text\nCODE:\n```\n0xf9015a808504a817c800832dc6c080b90124608060405234801561001057600080fd5b5060405161011b38038061011b83398101604081905261002f9161003b565b806000819055506100db565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000813590506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b6100b281610044565b82525050565b60006020820190506100cd60008301846100a9565b92915050565b6000819050919050565b6100e7816100d4565b81146100f257600080fd5b50565b600081359050610104816100de565b92915050565b6000602082840312156101205761011f61003f565b5b600061012e848285016100f5565b9150509291505056fea2646970667358221220bd485cd0e3e06eeb6eac6e324b8e121b6fba8332faafbe3e60ad7fdfaf0b649264736f6c634300080c00330000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000010\n48656c6c6f20457468657265756d210000000000000000000000000000000000\n25\n3aeec3c3a7eb1a13c6d408419816f6bb5563a9cf4263a6b9d170e9bb5b88e5bb\n275d3d113e2f06d90d3dc9e16ff3387ff145f1fe9d62c1e421693d6d24eaa598\n```\n\n----------------------------------------\n\nTITLE: Overriding Token Transfer Behavior in ERC721 Land Registry\nDESCRIPTION: Extends the standard ERC721 token transfer function to add custom restrictions specific to land parcels. Prevents transfers of parcels that are paused, have ongoing disputes, or are part of a split/merge process.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n        require(!paused(), \"Transfers paused\");\n        require(!_parcels[tokenId].hasDispute, \"Parcel has dispute\");\n        require(_parcelToRequest[tokenId] == 0, \"Parcel in split/merge process\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Storage Slot Key for MPT Path\nDESCRIPTION: The storage slot key used to create a path through the Merkle Patricia Trie (MPT). This key is used to locate and prove the existence of specific data in Ethereum's state.\n\nLANGUAGE: plaintext\nCODE:\n```\nkey = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n```\n\n----------------------------------------\n\nTITLE: KYC Verification Placeholder in Solidity Land Registry Contract\nDESCRIPTION: A stub function for KYC (Know Your Customer) verification that currently returns true but is intended to be replaced with an actual integration with a KYC provider. Takes address and identity-related parameters.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _verifyKYC(address, string memory, bytes memory) private pure returns (bool) {\n        return true; // Integration with KYC provider should be implemented\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Transaction for Contract Interaction in Ethereum\nDESCRIPTION: JavaScript code using ethers.js that constructs and signs a transaction for calling the updateMessage function on a deployed smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = {\n  nonce: 1,\n  to: \"0x5cbd38cc74f924b1ef5eb86d9b54f9931f75d7e3\", // deployed contract address\n  gasPrice: ethers.utils.parseUnits(\"20\", \"gwei\"),\n  gasLimit: 100000,\n  value: 0,\n  data:\n    \"0xc47f00270000000000000000000000000000000000000000000000000000000000000020\" +\n    \"0000000000000000000000000000000000000000000000000000000000000011\" +\n    \"476f6f6462796520457468657265756d2100000000000000000000000000000000\",\n  chainId: 1,\n};\n\nconst signedTx = await wallet.signTransaction(tx);\n```\n\n----------------------------------------\n\nTITLE: Importing Hasura Metadata Using CLI\nDESCRIPTION: Command to import or apply Hasura metadata from files to a Hasura instance. This completely replaces existing metadata with the version being imported.\n\nLANGUAGE: bash\nCODE:\n```\n# In hasura CLI\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: EntityURI Retrieval from StateMachine Contract\nDESCRIPTION: Code snippet showing how the entity URI is retrieved from the smart contract using a specific entity ID. This ID must match the one defined in the deployment script.\n\nLANGUAGE: typescript\nCODE:\n```\nconst try_entityURI = sm.try_entityURI(BigInt.fromString(`3073193977`));\n```\n\n----------------------------------------\n\nTITLE: Hex Nibble Path for MPT Traversal\nDESCRIPTION: A hex nibble path representation used for traversing the Merkle Patricia Trie. Each nibble (half-byte) guides the traversal through branch, extension, and leaf nodes to reach the target value.\n\nLANGUAGE: plaintext\nCODE:\n```\n[2, 9, 0, d, e, c, d, 9, 5, 4, 8, b, 6, 2, a, 8, d, 6, 0, 3, 4, 5, a, 9, 8, 8, 3, 8, 6, f, c, 8, 4, b, a, 6, b, c, 9, 5, 4, 8, 4, 0, 0, 8, f, 6, 3, 6, 2, f, 9, 3, 1, 6, 0, e, f, 3, e, 5, 6, 3]\n```\n\n----------------------------------------\n\nTITLE: Overriding Token URI Functionality in ERC721 Land Registry\nDESCRIPTION: Overrides the standard ERC721 tokenURI function to properly implement the URI storage functionality from ERC721URIStorage. This allows each land parcel token to have associated metadata.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n```\n\n----------------------------------------\n\nTITLE: Computing Storage Slot Key for Contract Variable with JavaScript\nDESCRIPTION: JavaScript code using ethers.js that computes the exact storage slot key where a contract's variable will be stored by hashing the slot index.\n\nLANGUAGE: javascript\nCODE:\n```\nslotKey = ethers.utils.keccak256(ethers.utils.hexZeroPad(\"0x00\", 32));\n\n// Result:\n(\"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\");\n```\n\n----------------------------------------\n\nTITLE: Metadata Tagging Function\nDESCRIPTION: Function signature for adding key-value metadata tags to CBDC accounts. This allows the central bank to annotate accounts with additional information such as KYC status or branch identifiers.\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *CBDCContract) AdminAddTag(ctx contractapi.TransactionContextInterface, account, key, value string) error\n```\n\n----------------------------------------\n\nTITLE: MPT Leaf Node Example\nDESCRIPTION: JSON representation of a leaf node in the Merkle Patricia Trie. Contains a compact-encoded key and the RLP-encoded value stored at that location in the trie.\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0x35ab3c...\", // Compact-encoded key\n  \"0x83476f6f6462796520457468657265756d21\"\n]\n```\n\n----------------------------------------\n\nTITLE: Issuing Tokens Function Signature\nDESCRIPTION: Function signature for issuing CBDC tokens to a recipient account. This function is restricted to central bank role and includes validation for recipient status and amount.\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *CBDCContract) IssueTokens(ctx contractapi.TransactionContextInterface, recipient string, amount uint64) error\n```\n\n----------------------------------------\n\nTITLE: Ethereum Account Object After State Update\nDESCRIPTION: JSON representation of an Ethereum account object in the state trie after an update. Shows the nonce, balance, storageRoot (Merkle root of contract's key-value store), and codeHash values.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nonce\": 2,\n  \"balance\": 0,\n  \"storageRoot\": \"0xa1c9f3d17704e632bb58bb85e332e0bcbcc181c1cce6dd13a6adca048f2e94f3\",\n  \"codeHash\": \"0x1b449b7a3f5b631d5fa963dfba2dfc19a7d62a9a79e0f6828aee5f785dcfd94a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating GCP Secret Manager Access\nDESCRIPTION: This bash script validates access to GCP Secret Manager by setting the required environment variables and listing available secrets. It requires the service account JSON file and project ID.\n\nLANGUAGE: bash\nCODE:\n```\n# Set environment variables\nexport GOOGLE_APPLICATION_CREDENTIALS=\"path/to/service-account.json\"\nexport PROJECT_ID=\"your-project-id\"\n\n# Verify access\ngcloud secrets list --project=$PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Retail Bank Transfer Cap Constant\nDESCRIPTION: Defines the maximum transaction amount allowed for retail banks in the CBDC system. This cap limits the size of operations that retail banks can perform without central bank approval.\n\nLANGUAGE: go\nCODE:\n```\nconst RetailTransferCap = 100000\n```\n\n----------------------------------------\n\nTITLE: Final Contract Account Object After Execution\nDESCRIPTION: The complete Ethereum contract account object after transaction execution. Shows the contract address, nonce, balance, codeHash (keccak256 of bytecode), and storageRoot (root hash of the contract's storage trie).\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5cbd38cc74f924b1ef5eb86d9b54f9931f75d7e3\",\n  \"nonce\": 1,\n  \"balance\": \"0x00\",\n  \"codeHash\": \"0x1b449b7a3f5b631d5fa963dfba2dfc19a7d62a9a79e0f6828aee5f785dcfd94a\",\n  \"storageRoot\": \"0xa1c9f3d17704e632bb58bb85e332e0bcbcc181c1cce6dd13a6adca048f2e94f3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Constructor Arguments for Smart Contract Deployment\nDESCRIPTION: This JavaScript code uses ethers.js to encode constructor arguments for smart contract deployment. It prepares the string \"Hello Ethereum!\" to be appended to the contract bytecode during deployment.\n\nLANGUAGE: javascript\nCODE:\n```\nconst ethers = require(\"ethers\");\n\nconst encodedArgs = ethers.utils.defaultAbiCoder.encode(\n  [\"string\"],\n  [\"Hello Ethereum!\"]\n);\n```\n\n----------------------------------------\n\nTITLE: Transaction Proposal Payload in Hyperledger Fabric\nDESCRIPTION: JSON representation of a transaction proposal in Hyperledger Fabric. This includes the transaction ID, function arguments, creator identity, and the list of endorsing peers required for the transaction.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"txID\": \"f9d7...\",\n  \"args\": [\"UpdateMessage\", \"Goodbye Fabric!\"],\n  \"creator\": \"user1@Org1MSP\",\n  \"endorsers\": [\"peer0.org1\", \"peer0.org2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Infrastructure Types with Cards in JSX\nDESCRIPTION: This snippet creates a responsive grid layout using the Card component to present detailed information about shared and dedicated infrastructure options. The grid adjusts from one column on mobile to two columns on larger screens.\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n  <Card>\n    ### Shared Infrastructure\n    - Most cost-effective\n    - Shared cluster resources\n    - Variable performance\n    - Suitable for testing\n  </Card>\n\n  <Card>\n    ### Dedicated Infrastructure\n    - Exclusive resources\n    - Highest specifications\n    - Predictable performance\n    - Production ready\n  </Card>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing MSP Folder Structure in Hyperledger Fabric\nDESCRIPTION: Defines the standard Membership Service Provider (MSP) folder structure used by organizations in a Hyperledger Fabric network for identity management. The structure includes directories for CA certificates, private keys, signing certificates, and admin certificates.\n\nLANGUAGE: plaintext\nCODE:\n```\nmsp/\n├── cacerts/            # CA root cert\n├── keystore/           # Private ECDSA key\n├── signcerts/          # X.509 signing cert\n├── admincerts/         # Org admins\n```\n\n----------------------------------------\n\nTITLE: EVM Execution Trace for Smart Contract Function Call\nDESCRIPTION: A simplified representation of EVM opcodes that execute when calling the updateMessage function, showing how the dynamic string argument is decoded and stored.\n\nLANGUAGE: text\nCODE:\n```\nCALLDATALOAD           → push offset (0x20) → stack: [0x20]\nADD                    → string pointer = 0x04 + 0x20 = 0x24\nCALLDATALOAD           → string length (0x11)\n[... memory allocation and copy string ...]\nSHA3                   → keccak256(0x00) = storage slot\nSSTORE                 → write to slot\n```\n\n----------------------------------------\n\nTITLE: Defining IoT Device Interface for Smart Manufacturing in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for IoT devices used in smart manufacturing. It captures device identification, type, data measurements, alerts, maintenance records, and blockchain integration details.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IoTDevice {\n  deviceId: string;\n  type: \"sensor\" | \"actuator\" | \"controller\";\n  data: {\n    measurements: Measurement[];\n    alerts: Alert[];\n    maintenance: MaintenanceRecord[];\n  };\n  blockchain: {\n    contract: string;\n    events: string[];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: RLP-Encoded Unsigned Ethereum Transaction in Hexadecimal\nDESCRIPTION: The complete RLP-encoded transaction in hexadecimal format before signing, which includes the contract bytecode and initialization arguments.\n\nLANGUAGE: text\nCODE:\n```\n0xf9012a808504a817c800832dc6c080b90124608060405234801561001057600080fd5b5060405161011b38038061011b83398101604081905261002f9161003b565b806000819055506100db565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000813590506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b6100b281610044565b82525050565b60006020820190506100cd60008301846100a9565b92915050565b6000819050919050565b6100e7816100d4565b81146100f257600080fd5b50565b600081359050610104816100de565b92915050565b6000602082840312156101205761011f61003f565b5b600061012e848285016100f5565b9150509291505056fea2646970667358221220bd485cd0e3e06eeb6eac6e324b8e121b6fba8332faafbe3e60ad7fdfaf0b649264736f6c634300080c00330000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000010\n48656c6c6f20457468657265756d210000000000000000000000000000000000\n018080\n```\n\n----------------------------------------\n\nTITLE: Implementing Info Callout Component in JSX\nDESCRIPTION: This code implements a Callout component with an 'info' type to display important information about contacting SettleMint for On-premise and BYOC options. It includes a mailto link for direct email contact.\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\n  For On-premise and BYOC options, please [contact\n  us](mailto:support@settlemint.com).\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Approving Chaincode by Organization in Fabric\nDESCRIPTION: Command snippet showing the pattern for approving chaincode for an organization in Hyperledger Fabric. This is part of the chaincode lifecycle where each organization must approve the chaincode before it can be committed to the channel.\n\nLANGUAGE: bash\nCODE:\n```\npeer lifecycle chaincode approveformyorg ...\n```\n\n----------------------------------------\n\nTITLE: Storage Trie Key Slot\nDESCRIPTION: The key (slot) used in the Ethereum storage trie for a contract's state data. This is a keccak256 hash that serves as the lookup path for stored values.\n\nLANGUAGE: plaintext\nCODE:\n```\n0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n```\n\n----------------------------------------\n\nTITLE: Retrieving Content from IPFS Using CLI\nDESCRIPTION: Shows the command to retrieve and display file content from IPFS using its Content Identifier (CID). This operation fetches the file blocks from the network, verifies their integrity, and outputs the content.\n\nLANGUAGE: bash\nCODE:\n```\nipfs cat <CID>\n```\n\n----------------------------------------\n\nTITLE: Committing Chaincode Definition in Fabric\nDESCRIPTION: Command snippet showing the pattern for committing a chaincode definition to a Hyperledger Fabric channel. This is the final step in the chaincode lifecycle that makes the chaincode available for execution by all channel members.\n\nLANGUAGE: bash\nCODE:\n```\npeer lifecycle chaincode commit ...\n```\n\n----------------------------------------\n\nTITLE: Defining MaterialTracking Interface for Raw Materials in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for tracking raw materials in a supply chain. It includes material identification, origin details, certifications, and quality metrics for comprehensive material traceability.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MaterialTracking {\n  materialId: string;\n  origin: {\n    location: string;\n    timestamp: number;\n    supplier: string;\n  };\n  certifications: string[];\n  qualityMetrics: QualityData;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from Validator Status in QBFT\nDESCRIPTION: API reference for demoting a validator to a regular node using qbft_proposeValidatorVote with a false parameter. This must be executed on all validator nodes to take effect.\n\nLANGUAGE: markdown\nCODE:\n```\n[qbft_proposeValidatorVote](https://besu.hyperledger.org/stable/private-networks/reference/api#qbft_proposevalidatorvote)\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Explorer with SettleMint CLI\nDESCRIPTION: Commands to create a blockchain explorer using the SettleMint CLI, including an option to get help with the command.\n\nLANGUAGE: bash\nCODE:\n```\n# Create blockchain explorer\nSettleMint platform create insights blockscout <name>\n\n# Get information about the command and all available options\nSettleMint platform create insights blockscout --help\n```\n\n----------------------------------------\n\nTITLE: Visualizing Hedera Transaction Flow with Sequence Diagram\nDESCRIPTION: This sequence diagram shows the detailed transaction flow when deploying or interacting with a smart contract on Hedera through SettleMint. It illustrates the communication between the developer, SettleMint platform, JSON-RPC relay, Hedera EVM, and Hedera Consensus nodes.\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Developer\n    participant SettleMint\n    participant JSON-RPC Relay\n    participant Hedera EVM\n    participant Hedera Consensus\n\n    Developer->>SettleMint: Deploy Solidity contract\n    SettleMint->>JSON-RPC Relay: Submit EVM transaction\n    JSON-RPC Relay->>Hedera EVM: Translate to Hedera format\n    Hedera EVM->>Hedera Consensus: Process transaction\n    Hedera Consensus-->>Hedera EVM: Confirm transaction\n    Hedera EVM-->>JSON-RPC Relay: Return EVM format result\n    JSON-RPC Relay-->>SettleMint: Return transaction status\n    SettleMint-->>Developer: Display success/contract address\n\n    note over JSON-RPC Relay: Handles all format conversion\n    note over Hedera Consensus: 3-5 second finality\n```\n\n----------------------------------------\n\nTITLE: World State After Transaction in Hyperledger Fabric\nDESCRIPTION: JSON representation of the world state after executing the UpdateMessage transaction. This shows the updated value of the 'message' key in the ledger state after the transaction is committed.\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": {\"text\": \"Goodbye Fabric!\"}}\n```\n\n----------------------------------------\n\nTITLE: Sustainability Metrics Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for tracking sustainability metrics in industrial operations. It includes energy consumption, carbon emissions, waste management statistics, and water usage metrics.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SustainabilityMetrics {\n  energyConsumption: number;\n  carbonEmissions: number;\n  wasteMetrics: {\n    recycled: number;\n    disposed: number;\n  };\n  waterUsage: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Meta Transaction Domain and Types in TypeScript\nDESCRIPTION: TypeScript code that configures the EIP-712 domain and types required for signing meta transactions. These configurations are essential for creating properly structured and signed meta transactions for an ERC-20 token.\n\nLANGUAGE: typescript\nCODE:\n```\nconst EIP712Domain = [\n  { name: \"name\", type: \"string\" },\n  { name: \"version\", type: \"string\" },\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" },\n];\n\nconst domain = {\n  name: \"MinimalForwarder\",\n  version: \"0.0.1\",\n  chainId: parseInt(await getChainId()),\n  verifyingContract: forwarderAddress,\n};\nconst types = {\n  EIP712Domain,\n  ForwardRequest: [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Applications with SettleMint SDK CLI\nDESCRIPTION: Command line instructions for listing and deleting applications using the SettleMint platform SDK CLI. These commands allow you to view all applications and remove specific ones by name.\n\nLANGUAGE: bash\nCODE:\n```\n# List applications\nSettleMint platform list applications\n\n# Delete application\nSettleMint platform delete application <name>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Chaincode Version in Hyperledger Fabric\nDESCRIPTION: Commands to upgrade chaincode from version 1 to version 2 in Hyperledger Fabric. This includes packaging the new code, installing it on peers, and having organizations approve and commit the new version with an incremented sequence number.\n\nLANGUAGE: bash\nCODE:\n```\npeer lifecycle chaincode package hello_v2.tar.gz ...\npeer lifecycle chaincode install hello_v2.tar.gz\npeer lifecycle chaincode approveformyorg --version 2 --sequence 2\npeer lifecycle chaincode commit --version 2 --sequence 2 ...\n```\n\n----------------------------------------\n\nTITLE: Defining HSM Configuration Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the configuration structure for Hardware Security Modules (HSM), specifying the type of HSM, access control settings, and backup strategy.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HSMConfig {\n  type: \"physical\" | \"cloud\";\n  accessControl: {\n    roles: string[];\n    policies: Policy[];\n  };\n  backupStrategy: BackupConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Function Data for Meta Transactions in TypeScript\nDESCRIPTION: Code that creates the encoded function data for an ERC-20 token transfer using the ethers.js library. This encoded data will be included in the meta transaction to be executed by the forwarder contract.\n\nLANGUAGE: typescript\nCODE:\n```\nconst functionData = token.interface.encodeFunctionData(\"transfer\", [\n  walletTwoAddress,\n  ethers.utils.parseUnits(\"10\"),\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Chaincode on Peer using chaincode.sh\nDESCRIPTION: Command to install the packaged chaincode on a specified peer. Uses the BTP_SERVICE_TOKEN for authentication and polls until installation completes.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh install <peer>\n```\n\n----------------------------------------\n\nTITLE: Listing Network Orderers\nDESCRIPTION: Utility command to list all available orderers in the network.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh orderers\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Policy Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines access control policies for blockchain key management systems, specifying user types, their permissions for key operations, and optional IP restrictions.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AccessPolicy {\n  userType: \"admin\" | \"operator\" | \"auditor\";\n  permissions: {\n    keyGeneration: boolean;\n    signing: boolean;\n    viewing: boolean;\n  };\n  ipRestrictions?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: DNS Configuration Examples for Custom Domains\nDESCRIPTION: These code snippets demonstrate the DNS record configurations needed for both top-level domains and subdomains when setting up custom domains with SettleMint custom deployments.\n\nLANGUAGE: text\nCODE:\n```\nALIAS example.com gke-europe.settlemint.com\nALIAS www.example.com gke-europe.settlemint.com\n```\n\nLANGUAGE: text\nCODE:\n```\nCNAME app.example.com gke-europe.settlemint.com\n```\n\n----------------------------------------\n\nTITLE: Transaction Log Structure for CBDC Audit Trail\nDESCRIPTION: Defines the structure for logging transaction details in the CBDC system. Captures action type, amount, counterparty information, timestamp, and initiator details for audit purposes.\n\nLANGUAGE: go\nCODE:\n```\ntype TransactionLog struct {\n    Action       string\n    Amount       uint64\n    Counterparty string\n    Timestamp    string\n    Initiator    string\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Blockchain Block Number with Ethers.js in JavaScript\nDESCRIPTION: This code snippet uses ethers.js to connect to a Polygon Mumbai node and retrieve the latest block number. It requires an RPC endpoint URL and an application access token to authenticate the connection to the blockchain node.\n\nLANGUAGE: javascript\nCODE:\n```\n///////////////////////////////////////////////////////////\n// Configuration                                         //\n///////////////////////////////////////////////////////////\n\nconst rpcEndpoint = \"https://YOUR_NODE_RPC_ENDPOINT.settlemint.com\";\nconst accessToken = \"YOUR_APPLICATION_ACCESS_TOKEN_HERE\";\n\n///////////////////////////////////////////////////////////\n// Logic                                                 //\n///////////////////////////////////////////////////////////\n\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\nmsg.payload = await provider.getBlockNumber();\n\nreturn msg;\n\n///////////////////////////////////////////////////////////\n// End                                                   //\n///////////////////////////////////////////////////////////\n```\n\n----------------------------------------\n\nTITLE: Creating Key Rotation Procedure Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for key rotation procedures in blockchain systems, including rotation trigger type, execution steps, rollback procedures, and notification configurations.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface KeyRotationProcedure {\n  trigger: \"scheduled\" | \"emergency\";\n  steps: RotationStep[];\n  rollback: RollbackProcedure;\n  notification: NotificationConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blockchain Statistics and Charts via Blockscout REST API\nDESCRIPTION: HTTP endpoints for accessing blockchain statistics, transaction charts, and market data. These endpoints provide aggregated metrics and visual data representations for blockchain analytics.\n\nLANGUAGE: http\nCODE:\n```\nGET /stats                                               # Get statistics counters\nGET /stats/charts/transactions                           # Get transactions chart\nGET /stats/charts/market                                 # Get market chart\n```\n\n----------------------------------------\n\nTITLE: Burning Tokens Function Signature\nDESCRIPTION: Function signature for burning (removing) CBDC tokens from an account. Restricted to central bank role and includes validation for account status and sufficient funds.\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *CBDCContract) BurnTokens(ctx contractapi.TransactionContextInterface, account string, amount uint64) error\n```\n\n----------------------------------------\n\nTITLE: Installing Loki and Promtail for Log Aggregation in Kubernetes\nDESCRIPTION: Installs Loki log aggregation system in the observability namespace using Helm. Configures Loki with authentication disabled, replication factor of 1, and filesystem storage type for simplified deployment.\n\nLANGUAGE: bash\nCODE:\n```\nhelm install loki loki \\\n  --repo https://grafana.github.io/helm-charts \\\n  --namespace observability \\\n  --create-namespace \\\n  --set loki.auth_enabled=false \\\n  --set loki.commonConfig.replication_factor=1 \\\n  --set loki.storage.type=filesystem\n```\n\n----------------------------------------\n\nTITLE: Accessing Ethers and IPFS Libraries in Node-RED\nDESCRIPTION: Example showing how to access pre-installed libraries like ethers.js and IPFS HTTP client in Node-RED. Demonstrates creating providers and retrieving data from IPFS using the available global libraries.\n\nLANGUAGE: javascript\nCODE:\n```\nconst ethers = global.get(\"ethers\");\nconst provider = new ethers.providers.JsonRpcProvider(\n  `${rpcEndpoint}/${accessToken}`\n);\n\nconst ipfsHttpClient = global.get(\"ipfsHttpClient\");\nconst client = ipfsHttpClient.create(`${ipfsEndpoint}/${accessToken}/api/v0`);\n\nconst uint8arrays = global.get(\"uint8arrays\");\nconst itAll = global.get(\"itAll\");\nconst data = uint8arrays.toString(\n  uint8arrays.concat(await itAll(client.cat(cid)))\n);\n```\n\n----------------------------------------\n\nTITLE: Making GraphQL Queries with cURL to SettleMint Nodes\nDESCRIPTION: Example of using cURL to execute GraphQL queries against a blockchain node deployed on the SettleMint platform. This command demonstrates how to authenticate with an auth token and request synchronization status information.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -H \"x-auth-token: <AUTH_TOKEN>\" --data '{ \"query\": \"{syncing{startingBlock currentBlock highestBlock}}\"}'  http://<DOMAIN>.settlemint.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Using Ethereum-Compatible JSON-RPC Methods in Blockscout\nDESCRIPTION: A list of supported Ethereum JSON-RPC methods in Blockscout, compatible with the Ethereum JSON-RPC specification. These methods serve as fallback options for interacting with the blockchain using standard Ethereum node interfaces.\n\nLANGUAGE: json\nCODE:\n```\neth_blockNumber                  # Returns the latest block number in the chain in hexadecimal format\neth_getBalance                   # Returns the balance of a given address in wei\neth_getLogs                      # Returns an array of logs matching a specified filter object\neth_gasPrice                     # Returns the current gas price\neth_getTransactionByHash         # Retrieves a transaction by its hash\neth_getTransactionReceipt        # Retrieves the receipt of a transaction\neth_chainId                      # Returns the chain ID\neth_maxPriorityFeePerGas         # Returns the maximum priority fee per gas\neth_getTransactionCount          # Returns the number of transactions sent from an address\neth_getCode                      # Returns the code at a given address\neth_getStorageAt                 # Returns the value from a storage position at a given address\neth_estimateGas                  # Estimates the gas needed for a transaction\neth_getBlockByNumber             # Retrieves a block by number\neth_getBlockByHash               # Retrieves a block by hash\neth_sendRawTransaction           # Sends a raw transaction\neth_call                         # Executes a new message call immediately without creating a transaction\n```\n\n----------------------------------------\n\nTITLE: Account Freeze Control Functions\nDESCRIPTION: Function signatures for freezing and unfreezing accounts in the CBDC system. These operations are restricted to the central bank role and control whether an account can participate in transactions.\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *CBDCContract) FreezeAccount(ctx contractapi.TransactionContextInterface, account string) error\nfunc (c *CBDCContract) UnfreezeAccount(ctx contractapi.TransactionContextInterface, account string) error\n```\n\n----------------------------------------\n\nTITLE: Block Endpoints in Blockscout REST API\nDESCRIPTION: HTTP GET requests for accessing block information in Blockscout, including block details, transactions within a block, and block withdrawals.\n\nLANGUAGE: http\nCODE:\n```\nGET /blocks                                                 # Retrieve blocks\nGET /blocks/{block_number_or_hash}                          # Get block details\nGET /blocks/{block_number_or_hash}/transactions             # Get transactions in a block\nGET /blocks/{block_number_or_hash}/withdrawals              # Get block withdrawals\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Connection Details with SDK CLI\nDESCRIPTION: Command for retrieving connection details of a specific node using the SettleMint platform CLI. This command outputs endpoint URLs, authentication tokens, and other connection information.\n\nLANGUAGE: bash\nCODE:\n```\n# Get node connection details\nSettleMint platform read node <node-name> --show-connection\n```\n\n----------------------------------------\n\nTITLE: Querying Blockchain Data with GraphQL in Blockscout\nDESCRIPTION: Example GraphQL queries for retrieving blockchain data in Blockscout, including address information, block details, and transaction data. GraphQL provides a flexible and efficient way to request exactly the data needed for specific use cases.\n\nLANGUAGE: graphql\nCODE:\n```\naddress(hash: AddressHash!): Address           # Gets an address by hash\naddresses(hashes: [AddressHash!]): [Address]   # Gets addresses by hashes\nblock(number: Int!): Block                     # Gets a block by number\ntransaction(hash: FullHash!): Transaction      # Gets a transaction by hash\n```\n\n----------------------------------------\n\nTITLE: Combining Building IDs from Multiple Land Parcels in Solidity\nDESCRIPTION: This function aggregates building IDs from multiple land parcels into a single array. It first calculates the total number of buildings across all parcels, creates an array of appropriate size, then populates it with building IDs from each parcel.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _combineBuildingIds(uint256[] memory parcelIds) private view returns (uint256[] memory) {\n        uint256 totalBuildings = 0;\n        for (uint i = 0; i < parcelIds.length; i++) {\n            totalBuildings = totalBuildings.add(_parcels[parcelIds[i]].buildingIds.length);\n        }\n\n        uint256[] memory combined = new uint256[](totalBuildings);\n        uint256 counter = 0;\n\n        for (uint i = 0; i < parcelIds.length; i++) {\n            for (uint j = 0; j < _parcels[parcelIds[i]].buildingIds.length; j++) {\n                combined[counter] = _parcels[parcelIds[i]].buildingIds[j];\n                counter++;\n            }\n        }\n\n        return combined;\n    }\n```\n\n----------------------------------------\n\nTITLE: IPFS Garbage Collection Command\nDESCRIPTION: Command for removing cached content that isn't pinned from an IPFS node's repository. This operation helps manage storage space by clearing temporary data while preserving pinned content.\n\nLANGUAGE: bash\nCODE:\n```\nipfs repo gc\n```\n\n----------------------------------------\n\nTITLE: Starting the Hyperledger Besu Node with Docker Compose\nDESCRIPTION: Command to start the Hyperledger Besu node in detached mode using Docker Compose. Once started, the node will connect to peers, sync the blockchain, and stay updated with new blocks.\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting the Hyperledger Besu Node with Docker Compose\nDESCRIPTION: Command to start the Hyperledger Besu node in detached mode using Docker Compose. Once started, the node will connect to peers, sync the blockchain, and stay updated with new blocks.\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Accessing Miscellaneous Blockchain Data via Blockscout REST API\nDESCRIPTION: Additional HTTP endpoints for retrieving various blockchain data, including JSON-RPC configuration, withdrawals, and account abstraction status. These endpoints provide supplementary information for blockchain applications.\n\nLANGUAGE: http\nCODE:\n```\nGET /config/json-rpc-url                                 # Get JSON-RPC URL\nGET /withdrawals                                         # Get withdrawals\nGET /proxy/account-abstraction/status                    # Get account abstraction indexing status\n```\n\n----------------------------------------\n\nTITLE: Configuring Observability Features in SettleMint Platform\nDESCRIPTION: YAML configuration for enabling metrics and logs in the SettleMint platform. Specifies the endpoints for VictoriaMetrics and Loki services within the Kubernetes cluster.\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n  observability:\n    metrics:\n      enabled: true\n      apiUrl: \"http://victoria-metrics-victoria-metrics-single-server.observability.svc.cluster.local:8428/prometheus/api/v1\"\n    logs:\n      enabled: true\n      apiUrl: \"http://loki-gateway.observability.svc.cluster.local/loki/api/v1\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Blockchain Network Deployment Steps with JSX\nDESCRIPTION: Maps through a data array to render table rows showing blockchain network deployment steps. Each row contains a step number, action description, and a hyperlink to detailed documentation.\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n  [\n    \"5\",\n    \"Add an EVM blockchain network using the 'Add Network' option.\",\n    \"Add network\",\n    \"/documentation/building-with-settlemint/evm-chains-guide/add-network-and-nodes\",\n  ],\n  [\n    \"6\",\n    \"Deploy remaining nodes for byzantine fault tolerance and distaster recovery\",\n    \"Add nodes\",\n    \"/documentation/building-with-settlemint/evm-chains-guide/add-network-and-nodes#2-add-blockchain-nodes\",\n  ],\n  [\n    \"7\",\n    \"Add the Blockchain Explorer (Insights) to view transactions and logs.\",\n    \"Add insights\",\n    \"/documentation/building-with-settlemint/evm-chains-guide/add-network-and-nodes#4-add-blockchain-explorer\",\n  ],\n  [\n    \"8\",\n    \"Optionally add a load balancer to distribute traffic across nodes.\",\n    \"Add load balancer\",\n    \"/documentation/building-with-settlemint/evm-chains-guide/add-network-and-nodes#3-add-load-balancer\",\n  ],\n].map(([step, action, link, url]) => (\n  <tr\n    key={step}\n    className=\"border-b border-gray-100 dark:border-gray-800\"\n  >\n    <td className=\"py-2 pl-6 font-medium text-gray-700 dark:text-gray-300\">\n      {step}\n    </td>\n    <td className=\"py-2\">{action}</td>\n    <td className=\"py-2\">\n      <a\n        href={url}\n        className=\"text-blue-600 dark:text-blue-400 underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {link}\n      </a>\n    </td>\n  </tr>\n))}\n```\n\n----------------------------------------\n\nTITLE: Defining an EAS Deployment Module with Hardhat Ignition\nDESCRIPTION: This TypeScript code defines a Hardhat Ignition module for deploying the Ethereum Attestation Service (EAS) contracts. It sets up the deployment of the SchemaRegistry contract first, followed by the EAS contract which depends on the SchemaRegistry.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst CustomEASModule = buildModule(\"EASDeployment\", (m) => {\n  const schemaRegistry = m.contract(\"SchemaRegistry\", [], {});\n  const EAS = m.contract(\"EAS\", [schemaRegistry], {});\n\n  return { schemaRegistry, EAS };\n});\n\nexport default CustomEASModule;\n```\n\n----------------------------------------\n\nTITLE: Installing SettleMint CLI Globally with npm\nDESCRIPTION: Command to install the SettleMint CLI globally using npm package manager, making it available system-wide for blockchain development tasks.\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @settlemint/sdk-cli\n```\n\n----------------------------------------\n\nTITLE: Verifying kube-state-metrics Functionality\nDESCRIPTION: Command to check if kube-state-metrics is properly exposing metrics by retrieving raw metrics from the Kubernetes API server. This validates that cluster state monitoring is working.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get --raw /metrics\n```\n\n----------------------------------------\n\nTITLE: Rendering Deployment and Support Options Table Rows in React\nDESCRIPTION: This code generates table rows displaying steps for deploying frontend services, monitoring system resources, and accessing support in the SettleMint platform. It maps array data to React table row components with styled links.\n\nLANGUAGE: JavaScript\nCODE:\n```\n[[\n  \"24\",\n  \"Use custom deployment module to deploy frontend or other services\",\n  \"Deploy frontend\",\n  \"/documentation/building-with-settlemint/evm-chains-guide/deploy-custom-services\",\n],\n[\n  \"25\",\n  \"Monitor RAM, CPU, and disk usage or apply upgrades.\",\n  \"Monitoring dashboards\",\n  \"/documentation/platform-components/usage-and-logs/monitoring-tools\",\n],\n[\n  \"26\",\n  \"Reach out to us for further assistance or technical support\",\n  \"Get support\",\n  \"/documentation/support/support\",\n],\n].map(([step, action, link, url]) => (\n  <tr\n    key={step}\n    className=\"border-b border-gray-100 dark:border-gray-800\"\n  >\n    <td className=\"py-2 pl-6 font-medium text-gray-700 dark:text-gray-300\">\n      {step}\n    </td>\n    <td className=\"py-2\">{action}</td>\n    <td className=\"py-2\">\n      <a\n        href={url}\n        className=\"text-blue-600 dark:text-blue-400 underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {link}\n      </a>\n    </td>\n  </tr>\n))}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Using Helm Chart\nDESCRIPTION: Helm command to install Redis in standalone architecture with password protection in a dedicated namespace.\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install redis oci://registry-1.docker.io/bitnamicharts/redis \\\n  --namespace redis \\\n  --version 18.19.2 \\\n  --create-namespace \\\n  --set architecture=standalone \\\n  --set global.redis.password=your-secure-password\n```\n\n----------------------------------------\n\nTITLE: Hardhat Deployment Command for Custom Resolver\nDESCRIPTION: Bash command for deploying the custom resolver using Hardhat's CLI with the Ignition module defined in TypeScript.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat deploy --module ignition/modules/main.ts\n```\n\n----------------------------------------\n\nTITLE: Managing Private Keys with SettleMint CLI\nDESCRIPTION: CLI commands for listing, viewing details, and restarting private keys in the SettleMint platform. These commands allow administrators to manage keys across their blockchain applications.\n\nLANGUAGE: bash\nCODE:\n```\n# List all private keys\nSettleMint platform list private-keys --application <app-name>\n\n# View specific key details\nSettleMint platform read private-key <private-key-unique-name>\n\n# Restart a private key\nSettleMint platform restart private-key <private-key-unique-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Hashicorp Terraform with Homebrew\nDESCRIPTION: Commands to install Hashicorp Terraform on macOS using Homebrew. This adds the Hashicorp tap and then installs the Terraform package.\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/terraform\n```\n\n----------------------------------------\n\nTITLE: Deployment Script Path for SettleMint Platform\nDESCRIPTION: The path to the deployment script file used for deploying smart contracts to the SettleMint platform network.\n\nLANGUAGE: plaintext\nCODE:\n```\nignition/modules/deployUserData.ts\n```\n\n----------------------------------------\n\nTITLE: Registering Schema with Resolver in JavaScript\nDESCRIPTION: JavaScript code snippet for registering a schema with the deployed custom resolver. The schema includes username, platform, and handle fields, and is linked to the resolver's address for on-chain validation.\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolverAddress = \"YOUR_DEPLOYED_RESOLVER_ADDRESS\";\nconst schema = \"string username, string platform, string handle\";\nconst schemaUID = await schemaRegistry.register(schema, resolverAddress, true);\n\nconsole.log(\"✅ Schema with resolver registered! UID:\", schemaUID);\n```\n\n----------------------------------------\n\nTITLE: HTML Layout for Support Page with Flexbox\nDESCRIPTION: This code creates a responsive layout using flexbox to display the support information alongside an image. The left column (30%) contains an image, while the right column (70%) contains the support text and contact information.\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ display: 'flex', alignItems: 'flex-start', gap: '1.5rem' }}>\n  <div style={{ flex: '0 0 30%' }}>\n    ![Settlemint support](../../img/using-the-platform/support.png)\n  </div>\n  <div style={{ flex: '1', paddingLeft: '1rem' }}>\nFor any technical issues or troubleshooting support, feel free to reach out to us.\n\n<br></br>\nOur team is available to assist you with any queries you may have.\n\n\nContact us at support@settlemint.com — we're here to help.\n\n<br></br>\nIf you have an existing contract, you can also get in touch with your Account Manager or Customer Success Manager for any assistance.\n\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting the Production Server\nDESCRIPTION: Command to run the built SettleMint documentation application in production mode.\n\nLANGUAGE: bash\nCODE:\n```\nbun run start\n```\n\n----------------------------------------\n\nTITLE: Committing Chaincode to Channel\nDESCRIPTION: Command to commit the approved chaincode definition to the channel. Requires a majority of organizations to have approved the chaincode.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh commit <peer> <orderer>\n```\n\n----------------------------------------\n\nTITLE: Installing Self-Hosted Vault with Helm\nDESCRIPTION: This command installs HashiCorp Vault in a Kubernetes cluster using Helm. It deploys Vault in its own namespace and uses the official Vault Helm chart repository.\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install vault vault \\\n  --repo https://helm.releases.hashicorp.com \\\n  --namespace vault \\\n  --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Setting up EAS Configuration in Node-RED\nDESCRIPTION: Initializes the Ethereum Attestation Service configuration by setting up the provider, signer, and EAS client. This function stores these objects in the global context for reuse by other nodes in the flow.\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize provider with specific network parameters\nconst provider = new ethers.JsonRpcProvider(msg.rpcUrl)\n\nconst signer = new ethers.Wallet(msg.privateKey, provider);\n\n// Initialize EAS with specific gas settings\nconst EAS = new eassdk.EAS(msg.easAddress);\neas.connect(signer);\n\n// Store in global context\nglobal.set('provider', provider);\nglobal.set('signer', signer);\nglobal.set('eas', eas);\nglobal.set('registryAddress', msg.registryAddress);\n\nmsg.payload = 'EAS Configuration Initialized';\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Submitting GDPR Complaints to Belgian Data Protection Authority\nDESCRIPTION: Contact information for the Belgian Data Protection Authority (GBA) where individuals can submit complaints regarding potential GDPR violations.\n\nLANGUAGE: markdown\nCODE:\n```\ncommission@privacycommission.be `<https://www.privacycommissie.be>`\n```\n\n----------------------------------------\n\nTITLE: Querying Chaincode for Data\nDESCRIPTION: Command to read data from the ledger via a chaincode function. Performs read-only operations that don't change state and supports channel override.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh query <peer> <function_name> --arguments '[\"arg1\"]'\n```\n\n----------------------------------------\n\nTITLE: Deploying Resolver with Hardhat CLI\nDESCRIPTION: Bash command to deploy the custom resolver smart contract using Hardhat's command-line interface. This runs the deployment module to create the resolver on the blockchain.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat deploy --module ignition/modules/main.ts\n```\n\n----------------------------------------\n\nTITLE: Validating Attestations with Custom Resolver in JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to validate an attestation using the deployed custom resolver. It creates a contract instance and calls the validate function to check if an attestation meets the defined criteria.\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolver = new ethers.Contract(\n  \"YOUR_RESOLVER_ADDRESS\",\n  [\"function validate(bytes32, address, bytes) external view returns (bool)\"],\n  provider\n);\n\nconst isValid = await resolver.validate(\n  \"YOUR_ATTESTATION_UID\",\n  \"ATTESTER_ADDRESS\",\n  \"ATTESTATION_DATA\"\n);\n\nconsole.log(\"✅ Is the attestation valid?\", isValid);\n```\n\n----------------------------------------\n\nTITLE: Removing Peer from Channel\nDESCRIPTION: Command to remove a peer from a channel.\n\nLANGUAGE: bash\nCODE:\n```\n./chaincode.sh peer-leave-channel <p> <channel>\n```\n\n----------------------------------------\n\nTITLE: Setting Required Environment Variables for Terraform\nDESCRIPTION: Commands to set environment variables needed by Terraform to deploy the BTP on GCP, including DNS zone, project ID, region, OAuth credentials, and registry access provided by SettleMint.\n\nLANGUAGE: bash\nCODE:\n```\n# Dns zone (subdomain) for platform access\nexport TF_VAR_gcp_dns_zone='YOUR_DNS_ZONE'\n\n# Your gcp project id\nexport TF_VAR_gcp_project_id='YOUR_GCP_PROJECT_ID'\n\n# Target gcp region\nexport TF_VAR_gcp_region='YOUR_GCP_REGION'\n\n# Oauth credentials\nexport TF_VAR_gcp_client_id='YOUR_GCP_CLIENT_ID'\nexport TF_VAR_gcp_client_secret='YOUR_GCP_CLIENT_SECRET'\n\n# Registry credentials (provided by settlemint)\nexport TF_VAR_oci_registry_username='YOUR_REGISTRY_USERNAME'\nexport TF_VAR_oci_registry_password='YOUR_REGISTRY_PASSWORD'\nexport TF_VAR_btp_version='BTP_VERSION'\n```\n\n----------------------------------------\n\nTITLE: Complete Node-RED Flow JSON for EAS Attestation Service\nDESCRIPTION: A JSON representation of the complete Node-RED flow for Ethereum Attestation Service integration. The flow includes nodes for configuration setup, schema registration, attestation creation, and verification.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"eas_flow\",\n    \"type\": \"tab\",\n    \"label\": \"EAS attestation flow\",\n    \"disabled\": false,\n    \"info\": \"\"\n  },\n  {\n    \"id\": \"setup_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Inputs: RpcUrl, registry address, EAS address, private key\",\n    \"props\": [\n      {\n        \"p\": \"rpcUrl\",\n        \"v\": \"RPC-URL/API-KEY\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"registryAddress\",\n        \"v\": \"REGISTERY-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"easAddress\",\n        \"v\": \"EAS-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"privateKey\",\n        \"v\": \"PRIVATE-KEY\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 250,\n    \"y\": 120,\n    \"wires\": [[\"setup_function\"]]\n  },\n  {\n    \"id\": \"setup_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup global variables\",\n    \"func\": \"// Initialize provider with specific network parameters\\nconst provider = new ethers.JsonRpcProvider(msg.rpcUrl)\\n\\nconst signer = new ethers.Wallet(msg.privateKey, provider);\\n\\n// Initialize EAS with specific gas settings\\nconst EAS = new eassdk.EAS(msg.easAddress);\\neas.connect(signer);\\n\\n// Store in global context\\nglobal.set('provider', provider);\\nglobal.set('signer', signer);\\nglobal.set('eas', eas);\\nglobal.set('registryAddress', msg.registryAddress);\\n\\nmsg.payload = 'EAS configuration initialized';\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      },\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      }\n    ],\n    \"x\": 580,\n    \"y\": 120,\n    \"wires\": [[\"setup_debug\"]]\n  },\n  {\n    \"id\": \"register_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register schema\",\n    \"props\": [],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 120,\n    \"y\": 260,\n    \"wires\": [[\"register_function\"]]\n  },\n  {\n    \"id\": \"register_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register schema\",\n    \"func\": \"// Get global variables set in init\\nconst signer = global.get('signer');\\nconst registryAddress = global.get('registryAddress');\\n\\n// Initialize SchemaRegistry contract\\nconst schemaRegistry = new ethers.Contract(\\n    registryAddress,\\n    [\\n        \\\"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\\\",\\n        \\\"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\\\"\\n    ],\\n    signer\\n);\\n\\n// Define what data fields our attestations will contain\\nconst schema = \\\"string username, string platform, string handle\\\";\\nconst resolverAddress = \\\"0x0000000000000000000000000000000000000000\\\";  // No special validation needed\\nconst revocable = true;  // Attestations can be revoked if needed\\n\\ntry {\\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\\n    const receipt = await tx.wait();\\n\\n    const schemaUID = receipt.logs[0].topics[1];\\n    // Store schemaUID in global context for later use\\n    global.set('schemaUID', schemaUID);\\n\\n    msg.payload = {\\n        success: true,\\n        schemaUID: schemaUID,\\n        message: \\\"Schema registered successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 310,\n    \"y\": 260,\n    \"wires\": [[\"register_debug\"]]\n  },\n  {\n    \"id\": \"create_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: schema uid\",\n    \"props\": [\n      {\n        \"p\": \"schemaUID\",\n        \"v\": \"SCHEMA-UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 130,\n    \"y\": 400,\n    \"wires\": [[\"create_function\"]]\n  },\n  {\n    \"id\": \"create_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create attestation\",\n    \"func\": \"// Get global variables\\nconst EAS = global.get('eas');\\nconst schemaUID = msg.schemaUID;\\n\\n// Create an encoder that matches our schema structure\\nconst schemaEncoder = new eassdk.SchemaEncoder(\\\"string username, string platform, string handle\\\");\\n\\n// The actual data we want to attest to\\nconst attestationData = [\\n    { name: \\\"username\\\", value: \\\"awesome_developer\\\", type: \\\"string\\\" },\\n    { name: \\\"platform\\\", value: \\\"GitHub\\\", type: \\\"string\\\" },\\n    { name: \\\"handle\\\", value: \\\"@devmaster\\\", type: \\\"string\\\" }\\n];\\n\\ntry {\\n    // Convert our data into the format EAS expects\\n    const encodedData = schemaEncoder.encodeData(attestationData);\\n\\n    // Create the attestation\\n    const tx = await eas.attest({\\n        schema: schemaUID,\\n        data: {\\n            recipient: \\\"0x0000000000000000000000000000000000000000\\\",  // Public attestation\\n            expirationTime: 0,              // Never expires\\n            revocable: true,                // Can be revoked later if needed\\n            data: encodedData              // Our encoded attestation data\\n        }\\n    });\\n\\n    // Wait for confirmation and get the result\\n    const receipt = await tx.wait();\\n\\n    // Store attestation UID for later verification\\n    global.set('attestationUID', receipt.attestationUID);\\n\\n    msg.payload = {\\n        success: true,\\n        attestationUID: receipt,\\n        message: \\\"Attestation created successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 330,\n    \"y\": 400,\n    \"wires\": [[\"create_debug\"]]\n  },\n  {\n    \"id\": \"verify_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: attestation UID\",\n    \"props\": [\n      {\n        \"p\": \"attestationUID\",\n        \"v\": \"Attestation UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 140,\n    \"y\": 540,\n    \"wires\": [[\"verify_function\"]]\n  },\n  {\n    \"id\": \"verify_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify attestation\",\n    \"func\": \"const EAS = global.get('eas');\\nconst attestationUID = msg.attestationUID;\\n\\ntry {\\n    const attestation = await eas.getAttestation(attestationUID);\\n    const schemaEncoder = new eassdk.SchemaEncoder(\\\"string pshandle, string socialMedia, string socialMediaHandle\\\");\\n    const decodedData = schemaEncoder.decodeData(attestation.data);\\n\\n    msg.payload = {\\n        isValid: !attestation.revoked,\\n        attestation: {\\n            attester: attestation.attester,\\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\\n            expirationTime: attestation.expirationTime > 0 \\n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\\n                : 'Never',\\n            revoked: attestation.revoked\\n        },\\n        data: {\\n            psHandle: decodedData[0].value.toString(),\\n            socialMedia: decodedData[1].value.toString(),\\n            socialMediaHandle: decodedData[2].value.toString()\\n        }\\n    };\\n} catch (error) {\\n    msg.payload = { \\n        success: false, \\n        error: error.message,\\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 350,\n    \"y\": 540,\n    \"wires\": [[\"verify_debug\"]]\n  },\n  {\n    \"id\": \"setup_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 770,\n    \"y\": 120,\n    \"wires\": []\n  },\n  {\n    \"id\": \"register_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 500,\n    \"y\": 260,\n    \"wires\": []\n  },\n  {\n    \"id\": \"create_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 520,\n    \"y\": 400,\n    \"wires\": []\n  },\n  {\n    \"id\": \"verify_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 530,\n    \"y\": 540,\n    \"wires\": []\n  },\n  {\n    \"id\": \"1322bb7438d96baf\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Initialize EAS config\",\n    \"info\": \"\",\n    \"x\": 110,\n    \"y\": 60,\n    \"wires\": []\n  },\n  {\n    \"id\": \"e5e3294119a80c1b\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Querying Attestations from Indexer with GraphQL in JavaScript\nDESCRIPTION: A JavaScript function that queries attestations from the attestation indexer using GraphQL. This demonstrates how to fetch attestations filtered by schema ID, with authentication and proper request formatting.\n\nLANGUAGE: javascript\nCODE:\n```\n// Example fetch request to query attestations\nasync function queryAttestations(schemaId) {\n  const response = await fetch(\"YOUR_INDEXER_URL\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer YOUR_APP_TOKEN\",\n    },\n    body: JSON.stringify({\n      query: `{\n        attestations(\n          where: {\n            schemaId: {\n              equals: \"${schemaId}\"\n            }\n          }\n        ) {\n          id\n          attester\n          recipient\n          revoked\n          data\n        }\n      }`,\n    }),\n  });\n\n  const data = await response.json();\n  return data.data.attestations;\n}\n\n// Usage example:\nconst schemaId = \"YOUR_SCHEMA_ID\"; // From the registration step\nconst attestations = await queryAttestations(schemaId);\nconsole.log(\"Attestations:\", attestations);\n```\n\n----------------------------------------\n\nTITLE: Displaying IDE Project Structure in Markdown Table\nDESCRIPTION: A structured markdown table displaying the folder organization of the EVM IDE project in code studio, explaining the purpose of each directory for smart contract development, testing, and deployment.\n\nLANGUAGE: markdown\nCODE:\n```\n| Folder          | Description                                                                                       |\n| --------------- | ------------------------------------------------------------------------------------------------- |\n| `contracts/`    | Contains Solidity smart contracts that define the core logic and business rules of the dApp.      |\n| `test/`         | Holds test files. These can be written in **TypeScript** for Hardhat or **Solidity** for Foundry. |\n| `script/`       | Stores deployment and interaction scripts, often used to automate tasks like contract deployment. |\n| `lib/`          | Optional directory for external Solidity libraries or reusable modules to avoid code repetition.  |\n| `ignitions/`    | Contains **Hardhat Ignition** configuration for defining declarative deployment plans.            |\n| `out/`          | Output folder used by **Foundry**, containing compiled contract artifacts like ABIs and bytecode. |\n| `artifacts/`    | Output folder used by **Hardhat**, similar to `out/`, containing build artifacts and metadata.    |\n| `subgraphs/`    | Contains files for **The Graph** integration—schema, mappings, and manifest for data indexing.    |\n| `cache/`        | Caching directory for Hardhat to improve build performance by avoiding redundant compilation.     |\n| `cache_forge/`  | Caching directory for Foundry to speed up compilation and reuse outputs.                          |\n| `node_modules/` | Contains installed npm packages and dependencies used in Hardhat or other JS-based tools.         |\n```\n\n----------------------------------------\n\nTITLE: Hardhat Deployment Command for Custom Resolver\nDESCRIPTION: Command line instruction for deploying the custom resolver module using Hardhat. This command executes the deployment script that sets up the resolver contract.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat deploy --module ignition/modules/main.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage, Database and Security Navigation Table in JSX\nDESCRIPTION: HTML table with JSX styling providing navigation links to storage, database, and security components of the SettleMint platform, including IPFS storage, S3 storage, and authentication methods.\n\nLANGUAGE: HTML/JSX\nCODE:\n```\n<table className=\"table-auto text-sm leading-none w-full\">\n  <tbody>\n    <tr>\n      <td\n        colSpan=\"3\"\n        className=\"bg-fd-secondary text-center py-2 pl-3 text-[15px] font-semibold text-slate-800 dark:text-white border-b\"\n      >\n        Storage, Database, Security and Auth\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/database-and-storage/hasura-backend-as-a-service\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Hasura Backend As A Service\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/database-and-storage/ipfs-storage\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          IPFS Storage\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/database-and-storage/s3-storage\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          S3 Storage\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/security-and-authentication/private-keys\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Private Keys\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/security-and-authentication/user-wallets\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          User Wallets\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/security-and-authentication/personal-access-tokens\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Personal Access Tokens\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td colSpan=\"3\" className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/security-and-authentication/application-access-tokens\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Application Access Tokens\n        </Link>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Set CLI Commands\nDESCRIPTION: Various CLI commands for working with smart contract sets locally, including viewing help, creating sets, and accessing Foundry, Hardhat, and subgraph functionalities.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint scs -h  # Show all available commands\n\n# Main commands:\nSettleMint scs create        # Create a new smart contract set\nSettleMint scs foundry      # Foundry commands for building and testing\nSettleMint scs hardhat      # Hardhat commands for building, testing and deploying\nSettleMint scs subgraph    # Commands for managing TheGraph subgraphs\n```\n\n----------------------------------------\n\nTITLE: Managing Platform Smart Contract Sets with CLI\nDESCRIPTION: Commands for managing existing smart contract sets on the platform, including listing all sets for an application, reading details about a specific set, and deleting a set.\n\nLANGUAGE: bash\nCODE:\n```\n# List smart contract sets\nSettleMint platform list smart-contract-sets --application <application-name>\n\n# Read smart contract set details\nSettleMint platform read smart-contract-set <smart-contract-set-name>\n\n# Delete a smart contract set\nSettleMint platform delete smart-contract-set <smart-contract-set-name>\n```\n\n----------------------------------------\n\nTITLE: Registering Schema for EAS Attestations in Node-RED\nDESCRIPTION: Creates a schema in the Ethereum Attestation Service registry defining the data structure for attestations. This function initializes a SchemaRegistry contract, defines a schema for storing user identity information, and registers it on-chain.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get global variables set in init\nconst signer = global.get('signer');\nconst registryAddress = global.get('registryAddress');\n\n// Initialize SchemaRegistry contract\nconst schemaRegistry = new ethers.Contract(\n    registryAddress,\n    [\n        \"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\",\n        \"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\"\n    ],\n    signer\n);\n\n// Define what data fields our attestations will contain\nconst schema = \"string username, string platform, string handle\";\nconst resolverAddress = \"0x0000000000000000000000000000000000000000\";  // No special validation needed\nconst revocable = true;  // Attestations can be revoked if needed\n\ntry {\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\n    const receipt = await tx.wait();\n\n    const schemaUID = receipt.logs[0].topics[1];\n    // Store schemaUID in global context for later use\n    global.set('schemaUID', schemaUID);\n\n    msg.payload = {\n        success: true,\n        schemaUID: schemaUID,\n        message: \"Schema registered successfully!\"\n    };\n} catch (error) {\n    msg.payload = {\n        success: false,\n        error: error.message\n    };\n}\n\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Rendering Knowledge Bank Table Structure in JSX\nDESCRIPTION: This JSX code snippet creates a responsive table layout for the Knowledge Bank section, organizing educational resources into categories with styled links to various blockchain-related topics.\n\nLANGUAGE: JSX\nCODE:\n```\n<table className=\"table-auto text-sm leading-none w-full\">\n  <tbody>\n    <tr>\n      <td\n        colSpan=\"3\"\n        className=\"bg-fd-secondary text-center py-2 pl-3 text-[15px] font-semibold text-slate-800 dark:text-white border-b\"\n      >\n        Knowledge Bank\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/blockchain-introduction\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Blockchain Introduction\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/public-blockchains\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Public Blockchains\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/private-blockchains\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Private Blockchains\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/blockchain-app-design\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Blockchain App Design\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/smart-contracts\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Smart Contracts\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/solidity\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Solidity\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/subgraphs\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Subgraphs\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/chaincode\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Chaincode\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/keys-and-security\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Keys And Security\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/bfsi-usecases\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          BFSI Usecases\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/public-sector-usecases\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Public Sector Usecases\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/knowledge-bank/industrial-usecases\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Industrial Usecases\n        </Link>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Managing Smart Contract Sets with JavaScript SDK\nDESCRIPTION: Complete example demonstrating how to create, list, read, and delete smart contract sets programmatically using the SettleMint JavaScript SDK.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSettleMintClient } from '@settlemint/sdk-js';\n\nconst client = createSettleMintClient({\n  accessToken: process.env.SETTLEMENT_ACCESS_TOKEN!,\n  instance: 'https://console.settlemint.com'\n});\n\n// Create a Smart Contract Set\nconst createSmartContractSet = async () => {\n  const result = await client.smartContractSet.create({\n    applicationUniqueName: \"your-app\",        // Your application unique name\n    name: \"my-smart-contract-set\",            // The smart contract set name\n    template: \"default\"                       // Template to use (choose from available templates)\n  });\n  console.log('Smart Contract Set created:', result);\n};\n\n// List Smart Contract Sets\nconst listSmartContractSets = async () => {\n  const sets = await client.smartContractSet.list(\"your-app\");\n  console.log('Smart Contract Sets:', sets);\n};\n\n// Read Smart Contract Set details\nconst readSmartContractSet = async () => {\n  const details = await client.smartContractSet.read(\"smart-contract-set-unique-name\");\n  console.log('Smart Contract Set details:', details);\n};\n\n// Delete a Smart Contract Set\nconst deleteSmartContractSet = async () => {\n  await client.smartContractSet.delete(\"smart-contract-set-unique-name\");\n  console.log('Smart Contract Set deleted');\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Variables for EAS in JavaScript\nDESCRIPTION: This code defines the schema variable for Ethereum Attestation Service. The schema specifies fields for attestations using a specific format with supported types including string, bool, address, uint256, and bytes32.\n\nLANGUAGE: javascript\nCODE:\n```\n/* SCHEMA GUIDE\nEdit the schema variable to define your attestation fields.\nFormat: \"type name, type name, type name\"\n\nAvailable Types:\n- string (text)\n- bool (true/false)\n- address (wallet address)\n- uint256 (number)\n- bytes32 (hash)\n\nExamples:\n\"string name, string email, bool isVerified\"\n\"string twitter, address wallet, uint256 age\"\n\"string discord, string github, string telegram\"\n*/\n\nconst schema = \"string pshandle, string socialMedia, string socialMediaHandle\";\n```\n\n----------------------------------------\n\nTITLE: Installing Bun JavaScript Runtime\nDESCRIPTION: Command to install the Bun JavaScript runtime, which is a prerequisite for running the SettleMint documentation project.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://bun.sh/install | bash\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint CLI before creating middleware.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Managing Storage Resources Using SettleMint JavaScript SDK\nDESCRIPTION: This snippet shows how to interact with storage resources using the SettleMint JavaScript SDK client. It includes async functions for listing all storage instances for an application, reading details of a specific storage instance, and deleting a storage instance.\n\nLANGUAGE: typescript\nCODE:\n```\n// List storage instances\nconst listStorage = async () => {\n  const storages = await client.storage.list(\"your-app-id\");\n  console.log('Storage instances:', storages);\n};\n\n// Get storage details\nconst getStorage = async () => {\n  const storage = await client.storage.read(\"storage-unique-name\");\n  console.log('Storage details:', storage);\n};\n\n// Delete storage\nconst deleteStorage = async () => {\n  await client.storage.delete(\"storage-unique-name\");\n};\n```\n\n----------------------------------------\n\nTITLE: UserData Smart Contract ABI JSON Structure\nDESCRIPTION: The complete ABI (Application Binary Interface) for the UserData smart contract that defines events and functions for managing user profiles. The ABI includes event definitions for ProfileCreated, ProfileDeleted, and ProfileUpdated, as well as function definitions for creating, retrieving, updating, and deleting user profiles.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"UserData\",\n  \"sourceName\": \"contracts/UserData.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ProfileCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProfileDeleted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ProfileUpdated\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"createProfile\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"deleteProfile\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getProfile\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"name\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"string\",\n              \"name\": \"email\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"age\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"string\",\n              \"name\": \"country\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"bool\",\n              \"name\": \"isKYCApproved\",\n              \"type\": \"bool\"\n            },\n            {\n              \"internalType\": \"bool\",\n              \"name\": \"isDeleted\",\n              \"type\": \"bool\"\n            }\n          ],\n          \"internalType\": \"struct UserData.UserProfile\",\n          \"name\": \"\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"profiles\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isDeleted\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"userId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"age\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"country\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"isKYCApproved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"updateProfile\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Command to start the development server with hot-reload enabled for the SettleMint documentation project.\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Managing Blockchain Networks with SettleMint SDK JS Client\nDESCRIPTION: JavaScript code snippets showing how to manage blockchain networks using the SettleMint SDK JS client. The code demonstrates listing networks, reading network details, deleting a network, and restarting a network.\n\nLANGUAGE: typescript\nCODE:\n```\n// List networks\nawait client.blockchainNetwork.list(\"your-app\");\n\n// Get network details\nawait client.blockchainNetwork.read(\"network-unique-name\");\n\n// Delete network\nawait client.blockchainNetwork.delete(\"network-unique-name\");\n\n// Restart network\nawait client.blockchainNetwork.restart(\"network-unique-name\");\n```\n\n----------------------------------------\n\nTITLE: Compiled Ethereum Contract Bytecode for Profile Management\nDESCRIPTION: This is the compiled EVM bytecode of a Solidity smart contract that manages user profiles. The contract appears to include functionality for storing and retrieving profile data with validation for whether profiles exist or have been deleted. It includes error messages for when profiles are not found or have been deleted.\n\nLANGUAGE: bytecode\nCODE:\n```\n0x6080806040523460155761121d908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806328279308146109da578063985736ce1461087f578063c36fe3d6146107b5578063eb5339291461023d5763f08f4f641461005357600080fd5b346102385760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261023857600435600060a060405161009581610f12565b6060815260606020820152826040820152606080820152826080820152015280600052600060205260ff60046040600020015460081c166101b45760005260006020526101726040600020604051906100ed82610f12565b6100f6816110a6565b8252610104600182016110a6565b906020830191825261019f60ff60028301541660408501908152600461012c600385016110a6565b936060870194855201549260ff6101856080880196828716151588528260a08a019760081c1615158752604051998a9960208b525160c060208c015260e08b0190611168565b9051601f198a83030160408b0152611168565b925116606087015251601f19868303016080870152611168565b9151151560a084015251151560c08301520390f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f50726f66696c65206e6f7420666f756e64206f7220686173206265656e20646560448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152fd5b600080fd5b346102385761024b36610fa8565b908560009695939652600060205260ff60046040600020015460081c168015610797575b15610739576040519561028187610f12565b83875260208701858152604088019060ff831682526060890198848a526080810192861515845260a0820192600084528a60005260006020526040600020925180519067ffffffffffffffff82116105885781906102df8654611053565b601f81116106e6575b50602090601f831160011461068357600092610678575b50506000198260011b9260031b1c19161783555b518051600184019167ffffffffffffffff82116105885781906103368454611053565b601f8111610625575b50602090601f83116001146105c2576000926105b7575b50506000198260011b9260031b1c19161790555b60ff600283019151167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055600381019951998a5167ffffffffffffffff8111610588576103bc8254611053565b601f8111610540575b5060209b601f82116001146104a8579261048c9492826004937fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a999760009261049d575b50506000198260011b9260031b1c19161790555b019151151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084541691161782555115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff00835492151560081b169116179055565b9b601f1982169c83600052816000209d60005b818110610c8d5750837fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a99979461048c9997946004976001951061050f575b505050811b019055610425565b929e8f83015181556001019e60200192602001610c3a565b826000526020600020601f830160051c81019160208410610ce3575b601f0160051c01905b818110610cd75750610b62565b60008155600101610cca565b9091508190610cc1565b015190508e80610af3565b600085815282812093601f1916905b818110610d435750908460019594939210610d2a575b505050811b019055610b07565b015160001960f88460031b161c191690558e8080610d1d565b92936020600181928786015181550195019301610d07565b909150836000526020600020601f840160051c81019160208510610da4575b90601f859493920160051c01905b818110610d955750610adc565b60008155849350600101610d88565b9091508190610d7a565b015190508e80610a9c565b600087815282812093601f1916905b818110610e045750908460019594939210610deb575b505050811b018355610ab0565b015160001960f88460031b161c191690558e8080610dde565b92936020600181928786015181550195019301610dc8565b909150856000526020600020601f840160051c81019160208510610e65575b90601f859493920160051c01905b818110610e565750610a85565b60008155849350600101610e49565b9091508190610e3b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f50726f66696c6520646f6573206e6f74206578697374206f722068617320626560448201527f656e2064656c65746564000000000000000000000000000000000000000000006064820152fd5b5084600052600060205260ff60046040600020015460081c1615610a0c565b60c0810190811067ffffffffffffffff82111761058857604052565b90601f601f19910116810190811067ffffffffffffffff82111761058857604052565b81601f820112156102385780359067ffffffffffffffff82116105885760405192610f866020601f19601f8601160185610f2e565b8284526020838301011161023857816000926020809301838601378301015290565b60c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112610238576004359160243567ffffffffffffffff81116102385782610ff591600401610f51565b9160443567ffffffffffffffff8111610238578161101591600401610f51565b9160643560ff8116810361023857916084359067ffffffffffffffff82116102385761104391600401610f51565b9060a43580151581036102385790565b90600182811c9216801561109c575b602083101461106d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611062565b90604051918260008254926110ba84611053565b808452936001811690811561112857506001146110e1575b506110df92500383610f2e565b565b90506000929192526020600020906000915b81831061110c5750509060206110df92820101386110d2565b60209193508060019154838589010152019101909184926110f3565b602093506110df9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101386110d2565b919082519283825260005b848110611194575050601f19601f8460006020809697860101520116010190565b80602080928401015182828601015201611173565b9360ff6111cb6111df94610844608097959a999a60a08a5260a08a0190611168565b921660408601528482036060860152611168565b93151591015256fea2646970667358221220e734baef00a48587a6925ab9e9c2ba63acf5e71a194aeb1359347e94b1f78f8a64736f6c634300081b0033\n```\n\n----------------------------------------\n\nTITLE: Updating Bun Runtime\nDESCRIPTION: Command to upgrade the Bun JavaScript runtime to the latest version for troubleshooting purposes.\n\nLANGUAGE: bash\nCODE:\n```\nbun upgrade\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint CLI before creating blockchain nodes or performing other operations. This step is necessary to establish your identity and access permissions.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Managing Storage Resources Using SettleMint CLI\nDESCRIPTION: This snippet demonstrates how to manage storage instances with the SettleMint command-line interface. It shows commands for listing all storage instances for an application, reading details about a specific storage instance, and deleting storage instances.\n\nLANGUAGE: bash\nCODE:\n```\n# List storage instances\nSettleMint platform list storage --application <app-name>\n\n# Get storage details\nSettleMint platform read storage <name>\n\n# Delete storage\nSettleMint platform delete storage <name>\n```\n\n----------------------------------------\n\nTITLE: Compiled EVM Bytecode for Profile Management Smart Contract\nDESCRIPTION: The compiled EVM bytecode for an Ethereum smart contract that handles profile management. The contract includes functions for retrieving profile information and checking profile status with error messages for non-existent or deleted profiles.\n\nLANGUAGE: bytecode\nCODE:\n```\n0x6080806040523460155761121d908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806328279308146109da578063985736ce1461087f578063c36fe3d6146107b5578063eb5339291461023d5763f08f4f641461005357600080fd5b346102385760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261023857600435600060a060405161009581610f12565b6060815260606020820152826040820152606080820152826080820152015280600052600060205260ff60046040600020015460081c166101b45760005260006020526101726040600020604051906100ed82610f12565b6100f6816110a6565b8252610104600182016110a6565b906020830191825261019f60ff60028301541660408501908152600461012c600385016110a6565b936060870194855201549260ff6101856080880196828716151588528260a08a019760081c1615158752604051998a9960208b525160c060208c015260e08b0190611168565b9051601f198a83030160408b0152611168565b925116606087015251601f19868303016080870152611168565b9151151560a084015251151560c08301520390f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f50726f66696c65206e6f7420666f756e64206f7220686173206265656e20646560448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152fd5b600080fd5b346102385761024b36610fa8565b908560009695939652600060205260ff60046040600020015460081c168015610797575b15610739576040519561028187610f12565b83875260208701858152604088019060ff831682526060890198848a526080810192861515845260a0820192600084528a60005260006020526040600020925180519067ffffffffffffffff82116105885781906102df8654611053565b601f81116106e6575b50602090601f831160011461068357600092610678575b50506000198260011b9260031b1c19161783555b518051600184019167ffffffffffffffff82116105885781906103368454611053565b601f8111610625575b50602090601f83116001146105c2576000926105b7575b50506000198260011b9260031b1c19161790555b60ff600283019151167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055600381019951998a5167ffffffffffffffff8111610588576103bc8254611053565b601f8111610540575b5060209b601f82116001146104a8579261048c9492826004937fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a999760009261049d575b50506000198260011b9260031b1c19161790555b019151151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084541691161782555115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff00835492151560081b169116179055565b9b601f1982169c83600052816000209d60005b818110610c8d5750837fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a99979461048c9997946004976001951061050f575b505050811b019055610425565b929e8f83015181556001019e60200192602001610c3a565b826000526020600020601f830160051c81019160208410610ce3575b601f0160051c01905b818110610cd75750610b62565b60008155600101610cca565b9091508190610cc1565b015190508e80610af3565b600085815282812093601f1916905b818110610d435750908460019594939210610d2a575b505050811b019055610b07565b015160001960f88460031b161c191690558e8080610d1d565b92936020600181928786015181550195019301610d07565b909150836000526020600020601f840160051c81019160208510610da4575b90601f859493920160051c01905b818110610d955750610adc565b60008155849350600101610d88565b9091508190610d7a565b015190508e80610a9c565b600087815282812093601f1916905b818110610e045750908460019594939210610deb575b505050811b018355610ab0565b015160001960f88460031b161c191690558e8080610dde565b92936020600181928786015181550195019301610dc8565b909150856000526020600020601f840160051c81019160208510610e65575b90601f859493920160051c01905b818110610e565750610a85565b60008155849350600101610e49565b9091508190610e3b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f50726f66696c6520646f6573206e6f74206578697374206f722068617320626560448201527f656e2064656c65746564000000000000000000000000000000000000000000006064820152fd5b5084600052600060205260ff60046040600020015460081c1615610a0c565b60c0810190811067ffffffffffffffff82111761058857604052565b90601f601f19910116810190811067ffffffffffffffff82111761058857604052565b81601f820112156102385780359067ffffffffffffffff82116105885760405192610f866020601f19601f8601160185610f2e565b8284526020838301011161023857816000926020809301838601378301015290565b60c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112610238576004359160243567ffffffffffffffff81116102385782610ff591600401610f51565b9160443567ffffffffffffffff8111610238578161101591600401610f51565b9160643560ff8116810361023857916084359067ffffffffffffffff82116102385761104391600401610f51565b9060a43580151581036102385790565b90600182811c9216801561109c575b602083101461106d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611062565b90604051918260008254926110ba84611053565b808452936001811690811561112857506001146110e1575b506110df92500383610f2e565b565b90506000929192526020600020906000915b81831061110c5750509060206110df92820101386110d2565b60209193508060019154838589010152019101909184926110f3565b602093506110df9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101386110d2565b919082519283825260005b848110611194575050601f19601f8460006020809697860101520116010190565b80602080928401015182828601015201611173565b9360ff6111cb6111df94610844608097959a999a60a08a5260a08a0190611168565b921660408601528482036060860152611168565b93151591015256fea2646970667358221220e734baef00a48587a6925ab9e9c2ba63acf5e71a194aeb1359347e94b1f78f8a64736f6c634300081b0033\n```\n\n----------------------------------------\n\nTITLE: Navigating to Database Schema Directory\nDESCRIPTION: Command to navigate to the database schema directory where you can modify the database schema definitions for the Asset Tokenization Kit.\n\nLANGUAGE: bash\nCODE:\n```\n# Navigate to schema directory\ncd kit/dapp/src/lib/db\n```\n\n----------------------------------------\n\nTITLE: Complete Node-RED Flow Configuration for EAS Attestation\nDESCRIPTION: A complete Node-RED flow JSON configuration for interacting with Ethereum Attestation Service. It defines a flow with nodes for setup, schema registration, attestation creation, and verification.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"eas_flow\",\n    \"type\": \"tab\",\n    \"label\": \"EAS Attestation Flow\",\n    \"disabled\": false,\n    \"info\": \"\"\n  },\n  {\n    \"id\": \"setup_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Inputs: RpcUrl, Registry address,Eas address, Private key\",\n    \"props\": [\n      {\n        \"p\": \"rpcUrl\",\n        \"v\": \"RPC-URL/API-KEY\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"registryAddress\",\n        \"v\": \"REGISTERY-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"easAddress\",\n        \"v\": \"EAS-ADDRESS\",\n        \"vt\": \"str\"\n      },\n      {\n        \"p\": \"privateKey\",\n        \"v\": \"PRIVATE-KEY\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 250,\n    \"y\": 120,\n    \"wires\": [[\"setup_function\"]]\n  },\n  {\n    \"id\": \"setup_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup Global Variables\",\n    \"func\": \"// Initialize provider with specific network parameters\\nconst provider = new ethers.JsonRpcProvider(msg.rpcUrl)\\n\\nconst signer = new ethers.Wallet(msg.privateKey, provider);\\n\\n// Initialize EAS with specific gas settings\\nconst EAS = new eassdk.EAS(msg.easAddress);\\neas.connect(signer);\\n\\n// Store in global context\\nglobal.set('provider', provider);\\nglobal.set('signer', signer);\\nglobal.set('eas', eas);\\nglobal.set('registryAddress', msg.registryAddress);\\n\\nmsg.payload = 'EAS Configuration Initialized';\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      },\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      }\n    ],\n    \"x\": 580,\n    \"y\": 120,\n    \"wires\": [[\"setup_debug\"]]\n  },\n  {\n    \"id\": \"register_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register Schema\",\n    \"props\": [],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 120,\n    \"y\": 260,\n    \"wires\": [[\"register_function\"]]\n  },\n  {\n    \"id\": \"register_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register Schema\",\n    \"func\": \"// Get global variables set in init\\nconst signer = global.get('signer');\\nconst registryAddress = global.get('registryAddress');\\n\\n// Initialize SchemaRegistry contract\\nconst schemaRegistry = new ethers.Contract(\\n    registryAddress,\\n    [\\n        \\\"event Registered(bytes32 indexed uid, address indexed owner, string schema, address resolver, bool revocable)\\\",\\n        \\\"function register(string calldata schema, address resolver, bool revocable) external returns (bytes32)\\\"\\n    ],\\n    signer\\n);\\n\\n// Define what data fields our attestations will contain\\nconst schema = \\\"string username, string platform, string handle\\\";\\nconst resolverAddress = \\\"0x0000000000000000000000000000000000000000\\\";  // No special validation needed\\nconst revocable = true;  // Attestations can be revoked if needed\\n\\ntry {\\n    const tx = await schemaRegistry.register(schema, resolverAddress, revocable);\\n    const receipt = await tx.wait();\\n\\n    const schemaUID = receipt.logs[0].topics[1];\\n    // Store schemaUID in global context for later use\\n    global.set('schemaUID', schemaUID);\\n\\n    msg.payload = {\\n        success: true,\\n        schemaUID: schemaUID,\\n        message: \\\"Schema registered successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 310,\n    \"y\": 260,\n    \"wires\": [[\"register_debug\"]]\n  },\n  {\n    \"id\": \"create_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: Schema uid\",\n    \"props\": [\n      {\n        \"p\": \"schemaUID\",\n        \"v\": \"SCHEMA-UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 130,\n    \"y\": 400,\n    \"wires\": [[\"create_function\"]]\n  },\n  {\n    \"id\": \"create_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create Attestation\",\n    \"func\": \"// Get global variables\\nconst EAS = global.get('eas');\\nconst schemaUID = msg.schemaUID;\\n\\n// Create an encoder that matches our schema structure\\nconst schemaEncoder = new eassdk.SchemaEncoder(\\\"string username, string platform, string handle\\\");\\n\\n// The actual data we want to attest to\\nconst attestationData = [\\n    { name: \\\"username\\\", value: \\\"awesome_developer\\\", type: \\\"string\\\" },\\n    { name: \\\"platform\\\", value: \\\"GitHub\\\", type: \\\"string\\\" },\\n    { name: \\\"handle\\\", value: \\\"@devmaster\\\", type: \\\"string\\\" }\\n];\\n\\ntry {\\n    // Convert our data into the format EAS expects\\n    const encodedData = schemaEncoder.encodeData(attestationData);\\n\\n    // Create the attestation\\n    const tx = await eas.attest({\\n        schema: schemaUID,\\n        data: {\\n            recipient: \\\"0x0000000000000000000000000000000000000000\\\",  // Public attestation\\n            expirationTime: 0,              // Never expires\\n            revocable: true,                // Can be revoked later if needed\\n            data: encodedData              // Our encoded attestation data\\n        }\\n    });\\n\\n    // Wait for confirmation and get the result\\n    const receipt = await tx.wait();\\n\\n    // Store attestation UID for later verification\\n    global.set('attestationUID', receipt.attestationUID);\\n\\n    msg.payload = {\\n        success: true,\\n        attestationUID: receipt,\\n        message: \\\"Attestation created successfully!\\\"\\n    };\\n} catch (error) {\\n    msg.payload = {\\n        success: false,\\n        error: error.message\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 330,\n    \"y\": 400,\n    \"wires\": [[\"create_debug\"]]\n  },\n  {\n    \"id\": \"verify_inject\",\n    \"type\": \"inject\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Input: Attestation UID\",\n    \"props\": [\n      {\n        \"p\": \"attestationUID\",\n        \"v\": \"Attestation UID\",\n        \"vt\": \"str\"\n      }\n    ],\n    \"repeat\": \"\",\n    \"crontab\": \"\",\n    \"once\": false,\n    \"onceDelay\": \"\",\n    \"topic\": \"\",\n    \"x\": 140,\n    \"y\": 540,\n    \"wires\": [[\"verify_function\"]]\n  },\n  {\n    \"id\": \"verify_function\",\n    \"type\": \"function\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify Attestation\",\n    \"func\": \"const EAS = global.get('eas');\\nconst attestationUID = msg.attestationUID;\\n\\ntry {\\n    const attestation = await eas.getAttestation(attestationUID);\\n    const schemaEncoder = new eassdk.SchemaEncoder(\\\"string pshandle, string socialMedia, string socialMediaHandle\\\");\\n    const decodedData = schemaEncoder.decodeData(attestation.data);\\n\\n    msg.payload = {\\n        isValid: !attestation.revoked,\\n        attestation: {\\n            attester: attestation.attester,\\n            time: new Date(Number(attestation.time) * 1000).toLocaleString(),\\n            expirationTime: attestation.expirationTime > 0 \\n                ? new Date(Number(attestation.expirationTime) * 1000).toLocaleString()\\n                : 'Never',\\n            revoked: attestation.revoked\\n        },\\n        data: {\\n            psHandle: decodedData[0].value.toString(),\\n            socialMedia: decodedData[1].value.toString(),\\n            socialMediaHandle: decodedData[2].value.toString()\\n        }\\n    };\\n} catch (error) {\\n    msg.payload = { \\n        success: false, \\n        error: error.message,\\n        details: JSON.stringify(error, Object.getOwnPropertyNames(error))\\n    };\\n}\\n\\nreturn msg;\",\n    \"outputs\": 1,\n    \"timeout\": \"\",\n    \"noerr\": 0,\n    \"initialize\": \"\",\n    \"finalize\": \"\",\n    \"libs\": [\n      {\n        \"var\": \"eassdk\",\n        \"module\": \"@ethereum-attestation-service/eas-sdk\"\n      },\n      {\n        \"var\": \"ethers\",\n        \"module\": \"ethers\"\n      }\n    ],\n    \"x\": 350,\n    \"y\": 540,\n    \"wires\": [[\"verify_debug\"]]\n  },\n  {\n    \"id\": \"setup_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Setup Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 770,\n    \"y\": 120,\n    \"wires\": []\n  },\n  {\n    \"id\": \"register_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Register Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 500,\n    \"y\": 260,\n    \"wires\": []\n  },\n  {\n    \"id\": \"create_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Create Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 520,\n    \"y\": 400,\n    \"wires\": []\n  },\n  {\n    \"id\": \"verify_debug\",\n    \"type\": \"debug\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Verify Result\",\n    \"active\": true,\n    \"tosidebar\": true,\n    \"console\": false,\n    \"tostatus\": false,\n    \"complete\": \"payload\",\n    \"targetType\": \"msg\",\n    \"x\": 530,\n    \"y\": 540,\n    \"wires\": []\n  },\n  {\n    \"id\": \"1322bb7438d96baf\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n    \"name\": \"Initialize EAS Config\",\n    \"info\": \"\",\n    \"x\": 110,\n    \"y\": 60,\n    \"wires\": []\n  },\n  {\n    \"id\": \"e5e3294119a80c1b\",\n    \"type\": \"comment\",\n    \"z\": \"eas_flow\",\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Deployed Bytecode for UserData Smart Contract in Solidity\nDESCRIPTION: This is the EVM bytecode of a deployed Solidity smart contract that manages user profiles. The contract implements functions for profile management (createProfile, updateProfile, deleteProfile, getProfile) and uses error messages for validation. The bytecode reveals function selectors and implementation details.\n\nLANGUAGE: solidity\nCODE:\n```\n\"deployedBytecode\": \"0x6080604052600436101561001257600080fd5b60003560e01c806328279308146109da578063985736ce1461087f578063c36fe3d6146107b5578063eb5339291461023d5763f08f4f641461005357600080fd5b346102385760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261023857600435600060a060405161009581610f12565b6060815260606020820152826040820152606080820152826080820152015280600052600060205260ff60046040600020015460081c166101b45760005260006020526101726040600020604051906100ed82610f12565b6100f6816110a6565b8252610104600182016110a6565b906020830191825261019f60ff60028301541660408501908152600461012c600385016110a6565b936060870194855201549260ff6101856080880196828716151588528260a08a019760081c1615158752604051998a9960208b525160c060208c015260e08b0190611168565b9051601f198a83030160408b0152611168565b925116606087015251601f19868303016080870152611168565b9151151560a084015251151560c08301520390f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f50726f66696c65206e6f7420666f756e64206f7220686173206265656e20646560448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152fd5b600080fd5b346102385761024b36610fa8565b908560009695939652600060205260ff60046040600020015460081c168015610797575b15610739576040519561028187610f12565b83875260208701858152604088019060ff831682526060890198848a526080810192861515845260a0820192600084528a60005260006020526040600020925180519067ffffffffffffffff82116105885781906102df8654611053565b601f81116106e6575b50602090601f831160011461068357600092610678575b50506000198260011b9260031b1c19161783555b518051600184019167ffffffffffffffff82116105885781906103368454611053565b601f8111610625575b50602090601f83116001146105c2576000926105b7575b50506000198260011b9260031b1c19161790555b60ff600283019151167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055600381019951998a5167ffffffffffffffff8111610588576103bc8254611053565b601f8111610540575b5060209b601f82116001146104a8579261048c9492826004937fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a999760009261049d575b50506000198260011b9260031b1c19161790555b019151151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084541691161782555115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff00835492151560081b169116179055565b9b601f1982169c83600052816000209d60005b818110610c8d5750837fca34bc1ece01e1f6e787e2fcbd4c56766978c283996ee9eb1055109936cf34259e9f6104989c9b9a99979461048c9997946004976001951061050f575b505050811b019055610425565b929e8f83015181556001019e60200192602001610c3a565b826000526020600020601f830160051c81019160208410610ce3575b601f0160051c01905b818110610cd75750610b62565b60008155600101610cca565b9091508190610cc1565b015190508e80610af3565b600085815282812093601f1916905b818110610d435750908460019594939210610d2a575b505050811b019055610b07565b015160001960f88460031b161c191690558e8080610d1d565b92936020600181928786015181550195019301610d07565b909150836000526020600020601f840160051c81019160208510610da4575b90601f859493920160051c01905b818110610d955750610adc565b60008155849350600101610d88565b9091508190610d7a565b015190508e80610a9c565b600087815282812093601f1916905b818110610e045750908460019594939210610deb575b505050811b018355610ab0565b015160001960f88460031b161c191690558e8080610dde565b92936020600181928786015181550195019301610dc8565b909150856000526020600020601f840160051c81019160208510610e65575b90601f859493920160051c01905b818110610e565750610a85565b60008155849350600101610e49565b9091508190610e3b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f50726f66696c6520646f6573206e6f74206578697374206f722068617320626560448201527f656e2064656c65746564000000000000000000000000000000000000000000006064820152fd5b5084600052600060205260ff60046040600020015460081c1615610a0c565b60c0810190811067ffffffffffffffff82111761058857604052565b90601f601f19910116810190811067ffffffffffffffff82111761058857604052565b81601f820112156102385780359067ffffffffffffffff82116105885760405192610f866020601f19601f8601160185610f2e565b8284526020838301011161023857816000926020809301838601378301015290565b60c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112610238576004359160243567ffffffffffffffff81116102385782610ff591600401610f51565b9160443567ffffffffffffffff8111610238578161101591600401610f51565b9160643560ff8116810361023857916084359067ffffffffffffffff82116102385761104391600401610f51565b9060a43580151581036102385790565b90600182811c9216801561109c575b602083101461106d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611062565b90604051918260008254926110ba84611053565b808452936001811690811561112857506001146110e1575b506110df92500383610f2e565b565b90506000929192526020600020906000915b81831061110c5750509060206110df92820101386110d2565b60209193508060019154838589010152019101909184926110f3565b602093506110df9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101386110d2565b919082519283825260005b848110611194575050601f19601f8460006020809697860101520116010190565b80602080928401015182828601015201611173565b9360ff6111cb6111df94610844608097959a999a60a08a5260a08a0190611168565b921660408601528482036060860152611168565b93151591015256fea2646970667358221220e734baef00a48587a6925ab9e9c2ba63acf5e71a194aeb1359347e94b1f78f8a64736f6c634300081b0033\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL API Endpoint Format\nDESCRIPTION: Example endpoint for the GraphQL interface of the API portal, used for querying and interacting with smart contract data in a structured manner.\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api-portal-affe9.gke-europe.settlemint.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Creating React Layout for SettleMint Documentation Homepage\nDESCRIPTION: This code creates the homepage layout for the SettleMint developer documentation using React components and Tailwind CSS. It includes a header section with the SettleMint logo and platform features, followed by a grid of navigation cards that link to different documentation sections.\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ display: 'flex', alignItems: 'flex-start', gap: '1.5rem' }}>\n  <div style={{ flex: '0 0 10%' }}>\n    ![Settlemint](../img/settlemint-logo/SM_logo_icon_ORGNL.png)\n  </div>\n  <div style={{ flex: '1', paddingLeft: '1rem' }}>\n    <ul>\n      <li>Available as a SaaS platfrom or deploy anywhere - on cloud or on-prem. .</li>\n      <li>Full-stack, comprehensive suite of tools, services and guides.</li>\n      <li>Learning academy, detailed documentation, customer success team</li>\n\n    </ul>\n\n  </div>\n</div>\n\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n  <a\n    href=\"/documentation/building-with-settlemint/getting-started\"\n    className=\"block no-underline rounded-xl py-0 shadow-sm bg-blue-200 dark:bg-blue-950 text-slate-800 dark:text-white hover:shadow-md transition\"\n  >\n    <Card>\n      <h3 className=\"text-lg font-semibold m-0 leading-normal mt-3\">\n        Development guides\n      </h3>\n      <div className=\"text-sm text-slate-700 dark:text-slate-200 leading-normal -mt-0.5 mb-1\">\n        Explore EVM and Hyperledger Fabric specific developer guides. Get started here.\n      </div>\n    </Card>\n  </a>\n\n<a\n  href=\"/documentation/platform-components/blockchain-infrastructure/network-manager\"\n  className=\"block no-underline rounded-xl py-0 shadow-sm bg-blue-200 dark:bg-blue-950 text-slate-800 dark:text-white hover:shadow-md transition\"\n>\n  <Card>\n    <h3 className=\"text-lg font-semibold m-0 leading-normal mt-3\">\n      Platform components\n    </h3>\n    <div className=\"text-sm text-slate-700 dark:text-slate-200 leading-normal -mt-0.5 mb-1\">\n      Learn about SettleMint Platform components and their role in application\n      development journey.\n    </div>\n  </Card>\n</a>\n\n  <a\n    href=\"/documentation/launching-the-platform/self-hosted-onprem/introduction\"\n    className=\"block no-underline rounded-xl py-0 shadow-sm text-slate-800 dark:text-white hover:shadow-md transition\"\n  >\n    <Card>\n      <h3 className=\"text-lg font-semibold m-0 leading-normal mt-3\">\n        Deployment options\n      </h3>\n\n      <div className=\"text-sm text-slate-700 dark:text-slate-200 leading-normal -mt-0.5 mb-1\">\n        Learn how you can deploy SettleMint platform in cloud environment or\n        on-prem data center of your choice.\n      </div>\n    </Card>\n\n  </a>\n\n  <a\n     href=\"/documentation/knowledge-bank/blockchain-introduction\"\n    className=\"block no-underline rounded-xl py-0 shadow-sm bg-blue-200 dark:bg-blue-950 text-slate-800 dark:text-white hover:shadow-md transition\"\n  >\n    <Card className=\"h-full\">\n      <h3 className=\"text-lg font-semibold m-0 leading-normal mt-3\">\n        Knowledge bank\n      </h3>\n      <div className=\"text-sm text-slate-700 dark:text-slate-200 leading-normal\">\n        Understand fundamentals of blockchain, use-cases, latest news and stay\n        current with the technology.\n      </div>\n    </Card>\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Self-Hosted Vault\nDESCRIPTION: These commands initialize a newly deployed Vault instance and unseal it. For simplicity, it uses a single key share, but production deployments should use multiple key shares for better security.\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize and save keys\nkubectl exec vault-0 -n vault -- vault operator init \\\n  -key-shares=1 \\\n  -key-threshold=1\n\n# Unseal Vault (replace with your key)\nkubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for Working with Local Smart Contract Sets\nDESCRIPTION: Common CLI commands for working with local smart contract sets, including creation, Foundry commands, Hardhat commands, and subgraph management.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint scs -h  # Show all available commands\n\n# Main commands:\nSettleMint scs create        # Create a new smart contract set\nSettleMint scs foundry      # Foundry commands for building and testing\nSettleMint scs hardhat      # Hardhat commands for building, testing and deploying\nSettleMint scs subgraph    # Commands for managing TheGraph subgraphs\n```\n\n----------------------------------------\n\nTITLE: Deploying Customized Asset Tokenization Kit\nDESCRIPTION: Complete deployment steps for a customized setup where you deploy your own contracts, subgraph, and ABIs. Includes all the necessary commands for deployment and configuration.\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nbun install\n\n# Login and connect to SettleMint\nbun settlemint login\nbun settlemint connect\n\n# Deploy contracts\ncd kit/contracts\nbun deploy:remote\n\n# Deploy subgraph\ncd ../subgraph\nbun deploy:remote\ncd ../../\n\n# Codegen\nbun codegen\n\n# Setup dapp\ncd kit/dapp\nbun addresses\nbun db:push\n\n# Start development server\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Module Deployment with Hardhat Ignition\nDESCRIPTION: This TypeScript code creates a deployment module for the UserData smart contract using Hardhat Ignition. The module defines and exports the contract deployment configuration, making it accessible for deployment through Hardhat's CLI.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildModule } from \"@nomicfoundation/hardhat-ignition/modules\";\n\nconst UserDataModule = buildModule(\"UserDataModule\", (m) => {\n  const userdata = m.contract(\"UserData\");\n  return { userdata };\n});\n\nexport default UserDataModule;\n```\n\n----------------------------------------\n\nTITLE: Tracking Database Changes with Hasura\nDESCRIPTION: Command to ensure database updates are registered with Hasura by tracking all tables and relationships.\n\nLANGUAGE: bash\nCODE:\n```\nsettlemint hasura track -a\n```\n\n----------------------------------------\n\nTITLE: Checking Ingress Controller Pod Status\nDESCRIPTION: Command to verify that the ingress controller pods are running in the designated namespace. This helps validate proper deployment.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n ingress-nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: This robots.txt file defines access permissions for web crawlers. It allows general access to most of the website while blocking specific technical paths like API endpoints and static assets. The file also specifies the location of the sitemap for improved search engine indexing.\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nAllow: /\n\n# Sitemap location\nSitemap: /sitemap.xml\n\n# Disallow specific paths\nDisallow: /api/\nDisallow: /_next/\nDisallow: /static/\n```\n\n----------------------------------------\n\nTITLE: Clearing Bun's Cache for Troubleshooting\nDESCRIPTION: Commands to clear Bun's cache by removing node_modules directory and lock file, then reinstalling dependencies for troubleshooting.\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm bun.lockb\nbun install\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: This robots.txt file defines which sections of the SettleMint documentation website can be crawled by search engines. It includes path permissions for documentation resources and release notes while setting a crawl delay to manage server load.\n\nLANGUAGE: robots.txt\nCODE:\n```\nAllow: /documentation/docs/support/support\nAllow: /documentation/docs/supported-blockchains/L1-public-networks/avalanche\nAllow: /documentation/docs/supported-blockchains/L1-public-networks/ethereum\nAllow: /documentation/docs/supported-blockchains/L1-public-networks/hedera\nAllow: /documentation/docs/supported-blockchains/L2-public-networks/Optimism\nAllow: /documentation/docs/supported-blockchains/L2-public-networks/Polygon\nAllow: /documentation/docs/supported-blockchains/L2-public-networks/Polygon-zkEVM\nAllow: /documentation/docs/supported-blockchains/L2-public-networks/arbitrum\nAllow: /documentation/docs/supported-blockchains/permissioned-networks/Hyperledger-Besu\nAllow: /documentation/docs/supported-blockchains/permissioned-networks/Hyperledger-Fabric\nAllow: /documentation/docs/supported-blockchains/permissioned-networks/Quorum\nAllow: /documentation/docs/terms-and-policies/cookie-policy\nAllow: /documentation/docs/terms-and-policies/gdpr-guide\nAllow: /documentation/docs/terms-and-policies/privacy-policy\nAllow: /documentation/docs/terms-and-policies/terms-of-service\nAllow: /documentation/docs/use-case-guides/asset-tokenization\nAllow: /documentation/docs/use-case-guides/attestation-service\nAllow: /documentation/release-notes/agentic-code-assistant\nAllow: /documentation/release-notes/attestation-service\nAllow: /documentation/release-notes/audit-logs\nAllow: /documentation/release-notes/customize-genesis-bootnode\nAllow: /documentation/release-notes/customize-kubernetes-deployment\nAllow: /documentation/release-notes/dev-tools\nAllow: /documentation/release-notes/embedded-o11y-infrastructure\nAllow: /documentation/release-notes/gcp-installation-guide\nAllow: /documentation/release-notes/hashgraph-hedera\nAllow: /documentation/release-notes/integration-external-consortia\nAllow: /documentation/release-notes/managed-platform-v7\nAllow: /documentation/release-notes/polygon-amoy\nAllow: /documentation/release-notes/qbft-besu-support\nAllow: /documentation/release-notes/run-anything-custom-deployment\nAllow: /documentation/release-notes/self-managed-platform-v7\nAllow: /documentation/release-notes/settlemint-mcp\nAllow: /documentation/release-notes/settlemint-sdk\nAllow: /documentation/release-notes/simplified-subgraph-deployments\nAllow: /documentation/release-notes/smart-contract-portal\nAllow: /documentation/release-notes/soneium-network-support\nAllow: /documentation/release-notes/user-wallet-manager\nAllow: /documentation/release-notes/zeto-smart-contract-set\n\n# Crawl delay\nCrawl-delay: 10\n```\n\n----------------------------------------\n\nTITLE: Platform Installation Configuration with TLS\nDESCRIPTION: YAML configuration example for platform installation with TLS settings. Includes ingress configuration with annotations for cert-manager, TLS secret configuration, and domain settings for different platform components.\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: true\n  className: nginx\n  host: \"platform.company.com\"\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\n  tls:\n    - secretName: \"tls-secret\"\n      hosts:\n        - \"platform.company.com\"\n        - \"*.platform.company.com\"\n\ndeploymentEngine:\n  platform:\n    domain:\n      hostname: \"platform.company.com\"\n  clusterManager:\n    domain:\n      hostname: \"platform.company.com\"\n  targets:\n    - clusters:\n        - domains:\n            service:\n              tls: true\n              hostname: \"platform.company.com\"\n          ingress:\n            ingressClass: \"nginx\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing EAS Workflow with Mermaid Diagram\nDESCRIPTION: A mermaid diagram illustrating the workflow of the Ethereum Attestation Service, showing the relationships between components like SchemaRegistry, EAS contract, Users/Systems, Verifiers, and Attestations.\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    SchemaRegistry[\"SchemaRegistry\"]\n    UsersSystems[\"Users/Systems\"]\n    EASContract[\"EAS contract\"]\n    Verifiers[\"Verifiers\"]\n    Attestations[\"Attestations\"]\n\n    SchemaRegistry -- \"Defines data structure\" --> EASContract\n    UsersSystems -- \"Interact\" --> EASContract\n    EASContract -- \"Creates\" --> Attestations\n    Verifiers -- \"Verify\" --> Attestations\n```\n\n----------------------------------------\n\nTITLE: Initializing SettleMint MCP Server via CLI\nDESCRIPTION: Command to start an MCP server that connects to a local project directory and authenticates with the SettleMint platform using a Personal Access Token. This enables AI assistants to access the project context and blockchain environment.\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @settlemint/sdk-mcp@latest --path=/Users/llm/asset-tokenization-kit/ --pat=sm_pat_xxx\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server After Schema Changes\nDESCRIPTION: Command to launch the application to verify database schema changes have been applied correctly.\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Blockchain Node using SettleMint CLI\nDESCRIPTION: Commands to create a blockchain node using the SettleMint CLI. The command specifies node type, network, provider, and region parameters. Help option is included to view all available options.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create blockchain-node besu <node-name> \\\n  --blockchain-network <network-name> \\\n  --node-type <VALIDATOR|NON_VALIDATOR> \\\n  --provider <provider> \\\n  --region <region>\n\n# Get help\nSettleMint platform create blockchain-node --help\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint platform using the CLI tool. This is a prerequisite for creating and managing smart contract sets via command line.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Rendering Table of Deployment Steps in JSX/React\nDESCRIPTION: A JSX fragment that creates a collapsible details/summary component containing a table of deployment and monitoring steps. The component maps through an array of step definitions to generate table rows with step numbers, action descriptions, and links to documentation pages.\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Section 6: Deploy frontend and other services */}\n\n<details\n  data-card=\"true\"\n  className=\"group relative border border-gray-200 dark:border-gray-700 rounded-xl shadow bg-white dark:bg-gray-700 overflow-hidden mb-3\"\n>\n  <summary className=\"font-semibold px-6 py-4 text-base flex justify-between items-center cursor-pointer border-b border-gray-100 dark:border-gray-700 text-gray-900 dark:text-gray-100\">\n    <span>Deploy frontend and other services</span>\n    <svg\n      className=\"w-4 h-4 text-gray-600 dark:text-gray-300 transform transition-transform group-open:rotate-90\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      viewBox=\"0 0 24 24\"\n    >\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 5l7 7-7 7\" />\n    </svg>\n  </summary>\n  <div className=\"overflow-x-auto w-full px-6 pb-4\">\n    <table className=\"table-auto w-full text-left text-sm text-gray-800 dark:text-gray-200\">\n      <tbody>\n        {[\n          [\n            \"15\",\n            \"Use Custom Deployment module to deploy frontend or other services\",\n            \"Deploy frontend\",\n            \"/documentation/building-with-settlemint/hyperledger-fabric-guide/deploy-custom-services\",\n          ],\n          [\n            \"16\",\n            \"Monitor RAM, CPU, and disk usage or apply upgrades.\",\n            \"Monitoring dashboards\",\n            \"/documentation/platform-components/usage-and-logs/monitoring-tools\",\n          ],\n          [\n            \"17\",\n            \"Reach out to us for further assistance or technical support\",\n            \"Get support\",\n            \"/documentation/support/support\",\n          ],\n        ].map(([step, action, link, url]) => (\n          <tr\n            key={step}\n            className=\"border-b border-gray-100 dark:border-gray-800\"\n          >\n            <td className=\"py-2 pl-6 font-medium text-gray-700 dark:text-gray-300\">\n              {step}\n            </td>\n            <td className=\"py-2\">{action}</td>\n            <td className=\"py-2\">\n              <a\n                href={url}\n                className=\"text-blue-600 dark:text-blue-400 underline\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {link}\n              </a>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Validating DNS Configuration with Bash Commands\nDESCRIPTION: Commands to validate DNS resolution and verify that the configured domain points to the correct ingress controller IP address. Includes checking A records, CNAME records, and retrieving the ingress controller IP from Kubernetes.\n\nLANGUAGE: bash\nCODE:\n```\n# Check A record\ndig +short platform.company.com\n\n# Check CNAME record\ndig +short test.platform.company.com\n\n# Verify IP matches ingress\nkubectl -n ingress-nginx get svc ingress-nginx-controller \\\n  -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key for Platform State\nDESCRIPTION: This command generates a random 32-byte base64-encoded key for encrypting platform state data. The encryption key protects sensitive platform state information stored in the object storage.\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Querying Attestations from Indexer with JavaScript\nDESCRIPTION: JavaScript function to query attestations from the EAS indexer using GraphQL. This code demonstrates how to fetch attestations filtered by schema ID and includes authentication with an app token.\n\nLANGUAGE: javascript\nCODE:\n```\n// Example fetch request to query attestations\nasync function queryAttestations(schemaId) {\n  const response = await fetch(\"YOUR_INDEXER_URL\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer YOUR_APP_TOKEN\",\n    },\n    body: JSON.stringify({\n      query: `{\n        attestations(\n          where: {\n            schemaId: {\n              equals: \"${schemaId}\"\n            }\n          }\n        ) {\n          id\n          attester\n          recipient\n          revoked\n          data\n        }\n      }`,\n    }),\n  });\n\n  const data = await response.json();\n  return data.data.attestations;\n}\n\n// Usage example:\nconst schemaId = \"YOUR_SCHEMA_ID\"; // From the registration step\nconst attestations = await queryAttestations(schemaId);\nconsole.log(\"Attestations:\", attestations);\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Packs in a Three-Column Grid with JSX\nDESCRIPTION: This code creates a responsive grid layout that shows three resource pack options (Small, Medium, Large) using Card components. The grid displays as a single column on mobile devices and three columns on larger screens.\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n  <Card>\n    ### Small\n    - Basic memory allocation\n    - Standard vCPU\n    - Minimal storage\n    - Development use\n  </Card>\n\n<Card>\n  ### Medium - Enhanced memory - Multiple vCPUs - Extended storage - Production\n  ready\n</Card>\n\n  <Card>\n    ### Large\n    - Maximum memory\n    - Dedicated vCPUs\n    - Extensive storage\n    - High performance\n  </Card>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Solidity Smart Contract Definition\nDESCRIPTION: This is a simple Solidity smart contract called 'HelloWorld' that stores a message string. It includes a constructor that sets an initial message and a public function to update the message.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    string public message;\n\n    constructor(string memory _msg) {\n        message = _msg;\n    }\n\n    function updateMessage(string memory _msg) public {\n        message = _msg;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Contract Set on Platform with CLI\nDESCRIPTION: Command structure for creating a smart contract set on the SettleMint platform using the CLI. This includes parameters for specifying the tool name, application, template, and deployment plan.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create smart-contract-set <tool-name> \\\n  --application <application-name> \\\n  --template <template-name> \\\n  --deployment-plan <deployment-plan>\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Contract Set on Platform with CLI\nDESCRIPTION: Command structure for creating a smart contract set on the SettleMint platform using the CLI. This includes parameters for specifying the tool name, application, template, and deployment plan.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint platform create smart-contract-set <tool-name> \\\n  --application <application-name> \\\n  --template <template-name> \\\n  --deployment-plan <deployment-plan>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint CLI before performing operations.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Validating Standard Redis Connection\nDESCRIPTION: Command to test Redis connectivity using redis-cli, including authentication with a password, and the expected response.\n\nLANGUAGE: bash\nCODE:\n```\n# Using redis-cli\nredis-cli -h your-redis-host -p 6379 -a your-password ping\n\n# Expected response\nPONG\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in Windsurf\nDESCRIPTION: JSON configuration for Windsurf's Cascade assistant. This setup connects the Cascade assistant to the SettleMint MCP server, enabling AI-assisted blockchain development in the Windsurf environment.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint platform using the command-line interface before performing operations.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint platform before performing operations. This is a prerequisite step for using the SDK CLI commands.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: API Portal Endpoint Format for Smart Contract Interaction\nDESCRIPTION: Example of a complete endpoint URL format for interacting with a specific smart contract function via the API portal.\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api-portal-affe9.gke-europe.settlemint.com/api/user-smart-contract-abi/{address}/create-profile\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to log in to the SettleMint platform using the CLI before creating storage instances.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Navigating to Infrastructure Directory\nDESCRIPTION: Command to change to the infrastructure configuration directory to prepare for deploying the BTP infrastructure on GCP.\n\nLANGUAGE: bash\nCODE:\n```\ncd ../01_infrastructure\n```\n\n----------------------------------------\n\nTITLE: Retrieving Load Balancer IP for NGINX Ingress Controller\nDESCRIPTION: Command to get the assigned load balancer IP address for the NGINX ingress controller. This IP is essential for configuring external access to services.\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get service -n ingress-nginx ingress-nginx-controller \\\n  --output jsonpath='{.status.loadBalancer.ingress[0].ip}'\n```\n\n----------------------------------------\n\nTITLE: React Component Import Declarations for Documentation UI\nDESCRIPTION: Import statements for React UI components from the fumadocs-ui library that are used to create interactive documentation elements like callouts, cards, and tabs.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"fumadocs-ui/components/callout\";\nimport { Card } from \"fumadocs-ui/components/card\";\nimport { Tab, Tabs } from \"fumadocs-ui/components/tabs\";\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Bun\nDESCRIPTION: Command to install all required dependencies for the SettleMint documentation project using Bun package manager.\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Implementing Dev Tools and Middleware Navigation Table in JSX\nDESCRIPTION: HTML table with JSX styling that provides navigation links to development tools, middleware components, and APIs in the SettleMint platform, including Code Studio, CLI, Graph Middleware and API Portal.\n\nLANGUAGE: HTML/JSX\nCODE:\n```\n<table className=\"table-auto text-sm leading-none w-full\">\n  <tbody>\n    <tr>\n      <td\n        colSpan=\"3\"\n        className=\"bg-fd-secondary text-center py-2 pl-3 text-[15px] font-semibold text-slate-800 dark:text-white border-b\"\n      >\n        Dev Tools, Middlewares and APIs\n      </td>\n    </tr>\n\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/dev-tools/code-studio\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Code Studio\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/dev-tools/ai-code-assistant\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          AI code Assistant\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/dev-tools/sdk\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          SDK\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/dev-tools/cli\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          CLI\n        </Link>\n      </td>\n      <td colSpan=\"2\" className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/dev-tools/mcp\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          MCP\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/middleware-and-api-layer/graph-middleware\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Graph Middleware\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/middleware-and-api-layer/smart-contract-api-portal\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Smart Contract API Portal\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/middleware-and-api-layer/attestation-indexer\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Attestation Indexer\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/middleware-and-api-layer/fabconnect\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Fabconnect\n        </Link>\n      </td>\n      <td colSpan=\"2\" className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/middleware-and-api-layer/fabconnect\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Setup API Portal\n        </Link>\n      </td>\n    </tr>\n\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Example for Similarity Search\nDESCRIPTION: An example JSON payload format for the similarity search endpoint. The payload contains a query string that will be vectorized and compared against stored vectors.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"input string for similarity search\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subgraph System Architecture Diagram in Mermaid\nDESCRIPTION: A flowchart diagram in Mermaid format illustrating the relationships between different components of the subgraph system, including configuration files, smart contracts, events, mappings, helpers, schema, and the API layer.\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n\n%% --- Inputs ---\nF1[\"out/UserData.json (ABI from compiler)                               \"]:::tooling\nF2[\"deployed_addresses.json (Deployed contract address)              \"]:::tooling\nF3[\"deployments/[chain-id] (Defines network chain ID)                 \"]:::tooling\n\n%% --- Configuration Files ---\nA1[\"1 - subgraph.config.json - Declares network, output, and datasources   \"]:::config\nA2[\"2 - userdata.yaml - Sets ABI, contract address, event handlers         \"]:::config\n\n%% --- Contract & Events ---\nB1[\"UserData.sol - Smart contract with profile lifecycle logic            \"]:::contract\nB2[\"Events: ProfileCreated, ProfileUpdated, ProfileDeleted                \"]:::event\n\n%% --- Mappings & Helpers ---\nC1[\"3 - userdata.ts - Mapping logic to handle events and update entities   \"]:::mapping\nC2[\"4 - fetch/userdata.ts - Loads or creates UserProfile entity            \"]:::helper\n\n%% --- Schema & Storage ---\nD1[\"5 - userdata.gql.json - GraphQL schema defining types and relationships\"]:::schema\nD2[\"Graph Node DB - Stores UserProfile and events, queryable via GraphQL \"]:::db\n\n%% --- API Layer ---\nE1[\"GraphQL API - Exposes indexed data to dApps and dashboards            \"]:::api\n\n%% --- Connections ---\nF1 --> A2\nF2 --> A1\nF3 --> A1\nA1 --> A2\nA2 --> B1\nB1 --> B2\nB2 --> C1\nA2 --> C1\nC1 --> C2\nC1 --> D2\nD1 --> D2\nD2 --> E1\n\n%% --- Styling ---\nclassDef config fill:#D0EBFF,stroke:#1E40AF,stroke-width:1px\nclassDef mapping fill:#FEF3C7,stroke:#B45309,stroke-width:1px\nclassDef schema fill:#E0F2FE,stroke:#0369A1,stroke-width:1px\nclassDef contract fill:#FECACA,stroke:#B91C1C,stroke-width:1px\nclassDef event fill:#FCD34D,stroke:#92400E,stroke-width:1px\nclassDef db fill:#DCFCE7,stroke:#15803D,stroke-width:1px\nclassDef api fill:#E9D5FF,stroke:#7C3AED,stroke-width:1px\nclassDef abi fill:#F3E8FF,stroke:#9333EA,stroke-width:1px\nclassDef helper fill:#F5F5F4,stroke:#3F3F46,stroke-width:1px\nclassDef tooling fill:#F0F9FF,stroke:#0284C7,stroke-width:1px\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to log in to the SettleMint platform using the SDK CLI. This is a prerequisite step before creating applications via the command line.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware using SettleMint CLI\nDESCRIPTION: Commands to view available middleware types, create a new middleware, and get information about available options using the SettleMint CLI.\n\nLANGUAGE: bash\nCODE:\n```\n# Get the list of available middleware types\nSettleMint platform create middleware --help\n\n# Create a middleware\nSettleMint platform create middleware <type> <name>\n\n# Get information about the command and all available options\nSettleMint platform create middleware <type> --help\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SettleMint CLI\nDESCRIPTION: Command to authenticate with the SettleMint CLI before creating middleware or performing other operations.\n\nLANGUAGE: bash\nCODE:\n```\nSettleMint login\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Deployments with SettleMint CLI\nDESCRIPTION: Command-line instructions for creating a custom deployment in the SettleMint platform. This snippet demonstrates how to specify the container image, port, provider, region, and environment variables needed for deployment.\n\nLANGUAGE: bash\nCODE:\n```\n# Create a custom deployment\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --port 3000 \\\n  --provider gcp \\\n  --region europe-west1\n\n# With environment variables\nSettleMint platform create custom-deployment my-deployment \\\n  --application my-app \\\n  --image-repository registry.example.com \\\n  --image-name my-app \\\n  --image-tag latest \\\n  --env-vars NODE_ENV=production,DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Using Application Access Token as an HTTP Header in API Requests\nDESCRIPTION: Example of how to include an application access token in the request header for authentication when accessing SettleMint services.\n\nLANGUAGE: http\nCODE:\n```\nx-auth-token: TOKEN\n```\n\n----------------------------------------\n\nTITLE: Implementing Blockchain Infrastructure Navigation Table in JSX\nDESCRIPTION: HTML table structure with JSX className attributes that provides navigation links to blockchain infrastructure components, including transaction signers, load balancers, and monitoring tools.\n\nLANGUAGE: HTML/JSX\nCODE:\n```\n<table className=\"table-auto text-sm leading-none w-full\">\n  <tbody>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/blockchain-infrastructure/transaction-signer\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Transaction Signer\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/blockchain-infrastructure/load-balancer\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Load Balancer\n        </Link>\n      </td>\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/blockchain-infrastructure/insights\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Insights\n        </Link>\n      </td>\n    </tr>\n    <tr className=\"align-top\">\n      <td className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/usage-and-logs/monitoring-tools\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Health Monitoring Tools\n        </Link>\n      </td>\n      <td colSpan=\"2\" className=\"py-2 pl-3 text-slate-800 dark:text-slate-200\">\n        <Link\n          href=\"/platform-components/usage-and-logs/resource-usage\"\n          className=\"no-underline text-sm-accent hover:underline\"\n        >\n          Resource Usage\n        </Link>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Regenerating GraphQL Types After Schema Changes\nDESCRIPTION: Command to regenerate GraphQL types after making database schema changes. Uses the --force flag to ensure types are fully regenerated.\n\nLANGUAGE: bash\nCODE:\n```\nbun codegen --force\n```\n\n----------------------------------------\n\nTITLE: Configuring SettleMint MCP in AI Development Environments\nDESCRIPTION: JSON configuration for integrating the SettleMint Model Context Provider with AI development tools like Cursor, Claude Desktop, and VS Code. Specifies the command, arguments including the project path and personal access token.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"settlemint\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@settlemint/sdk-mcp@latest\",\n        \"--path=/Users/llm/asset-tokenization-kit/\",\n        \"--pat=sm_pat_xxx\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subgraph Configuration Schema\nDESCRIPTION: JSON structure showing the subgraph.config.json file which defines the output path, blockchain network chain ID, and datasources to be indexed by the subgraph.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": \"generated/scs.\",\n  \"chain\": \"44819\",\n  \"datasources\": [\n    {\n      \"name\": \"UserData\",\n      \"address\": \"0x8b1544B8e0d21aef575Ce51e0c243c2D73C3C7B9\",\n      \"startBlock\": 0,\n      \"module\": [\"userdata\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Web Crawler Access Control\nDESCRIPTION: This robots.txt file sets up standard crawler permissions, allowing general access while restricting specific technical paths. It points crawlers to the sitemap location for improved indexing efficiency.\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nAllow: /\n\n# Sitemap location\nSitemap: /sitemap.xml\n\n# Disallow specific paths\nDisallow: /api/\nDisallow: /_next/\nDisallow: /static/\n```"
  }
]