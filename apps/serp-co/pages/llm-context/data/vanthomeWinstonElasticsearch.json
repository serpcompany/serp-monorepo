[
  {
    "owner": "vanthome",
    "repo": "winston-elasticsearch",
    "content": "TITLE: Basic Usage of Winston-Elasticsearch Transport in JavaScript\nDESCRIPTION: Example showing how to create a Winston logger with the Elasticsearch transport. Includes basic setup and error handling.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst { ElasticsearchTransport } = require('winston-elasticsearch');\n\nconst esTransportOpts = {\n  level: 'info'\n};\nconst esTransport = new ElasticsearchTransport(esTransportOpts);\nconst logger = winston.createLogger({\n  transports: [\n    esTransport\n  ]\n});\n// Compulsory error handling\nlogger.on('error', (error) => {\n  console.error('Error in logger caught', error);\n});\nesTransport.on('error', (error) => {\n  console.error('Error in logger caught', error);\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Winston-Elasticsearch with Elastic APM\nDESCRIPTION: Example showing how to set up Winston with Elasticsearch transport integrated with Elastic APM for logs correlation and tracing.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apm = require(\"elastic-apm-node\").start({\n  serverUrl: \"<apm server http url>\"\n})\n\n// Set up the logger\nvar winston = require('winston');\nvar Elasticsearch = require('winston-elasticsearch');\n\nvar esTransportOpts = {\n  apm,\n  level: 'info',\n  clientOpts: { node: \"<elastic server>\" }\n};\nvar logger = winston.createLogger({\n  transports: [\n    new Elasticsearch(esTransportOpts)\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing APM Traces in Server Middleware and After Handlers\nDESCRIPTION: Example of capturing APM trace IDs in server middleware and using them in 'after' handlers. This ensures trace information is available even after the response has been sent to the client.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nserver.use((req, res, next) => {\n  req.apm = apm.currentTracesIds\n  next()\n})\nserver.on(\"after\", (req, res, route, error) => log.debug(\"after\", { route, error, ...req.apm }))\n```\n\n----------------------------------------\n\nTITLE: Adding APM Trace IDs to Winston Log Messages\nDESCRIPTION: Shows how to include APM trace information in Winston log messages using the currentTracesIds method. This ensures that log entries can be linked to APM traces in Kibana.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.info(\"Some log message\", { ...apm.currentTracesIds })\n```\n\n----------------------------------------\n\nTITLE: Extending the Default Transformer in Winston-Elasticsearch\nDESCRIPTION: Example demonstrating how to extend the default ElasticsearchTransformer to add custom fields to the log message structure.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  const { ElasticsearchTransformer } = require('winston-elasticsearch');\n  const esTransportOpts = {\n  transformer: (logData) => {\n   const transformed = ElasticsearchTransformer(logData);\n   transformed.fields.customField = 'customValue'\n   return transformed;\n }};  \nconst esTransport = new ElasticsearchTransport(esTransportOpts);\n```\n\n----------------------------------------\n\nTITLE: Adding APM Trace IDs in Custom Transformer Functions\nDESCRIPTION: Code to be added in custom transformer functions to ensure APM trace IDs are properly placed in the root object. This preserves the link between logs and APM traces in Kibana.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  if (logData.meta['transaction.id']) transformed.transaction = { id: logData.meta['transaction.id'] };\n  if (logData.meta['trace.id']) transformed.trace = { id: logData.meta['trace.id'] };\n  if (logData.meta['span.id']) transformed.span = { id: logData.meta['span.id'] };\n```\n\n----------------------------------------\n\nTITLE: Example of APM-Enhanced Log in Winston-Elasticsearch\nDESCRIPTION: Example showing the structure of a log message with APM trace information injected, allowing correlation between logs and APM traces.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@timestamp\": \"2021-03-13T20:35:28.129Z\",\n  \"message\": \"Some log message\",\n  \"severity\": \"info\",\n  \"fields\": {},\n  \"transaction\": {\n    \"id\": \"1f6c801ffc3ae6c6\"\n  },\n  \"trace\": {\n    \"id\": \"1f6c801ffc3ae6c6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Log Message Structure in Winston-Elasticsearch\nDESCRIPTION: The structure of a log message after being transformed by the default transformer in Winston-Elasticsearch. Shows the JSON format that gets stored in Elasticsearch.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@timestamp\": \"2019-09-30T05:09:08.282Z\",\n  \"message\": \"Some log message\",\n  \"severity\": \"info\",\n  \"fields\": {\n    \"method\": \"GET\",\n    \"url\": \"/sitemap.xml\",\n    \"headers\": {\n      \"host\": \"www.example.com\",\n      \"user-agent\": \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\",\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip,deflate\",\n      \"from\": \"googlebot(at)googlebot.com\",\n      \"if-modified-since\": \"Tue, 30 Sep 2019 11:34:56 GMT\",\n      \"x-forwarded-for\": \"66.249.78.19\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Flush in ElasticsearchTransport\nDESCRIPTION: Shows how to manually trigger flushing of logs to Elasticsearch. This can be useful when you need to ensure logs are sent immediately.\nSOURCE: https://github.com/vanthome/winston-elasticsearch/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst esTransport = new ElasticsearchTransport(esTransportOpts);\nesTransport.flush();\n```"
  }
]