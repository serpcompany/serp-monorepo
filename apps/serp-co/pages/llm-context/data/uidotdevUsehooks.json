[
  {
    "owner": "uidotdev",
    "repo": "usehooks",
    "content": "TITLE: Implementing Search with useDebounce in React\nDESCRIPTION: This example shows how to use the useDebounce hook from @uidotdev/usehooks to build a search feature that queries Hacker News. The hook prevents excessive API calls by delaying search execution until the user stops typing for 300 milliseconds. The component handles search term updates, form submission, and displays search results with loading states.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useDebounce.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useDebounce } from \"@uidotdev/usehooks\";\nimport searchHackerNews from \"./searchHackerNews\";\nimport SearchResults from \"./SearchResults\";\n\nexport default function App() {\n  const [searchTerm, setSearchTerm] = React.useState(\"js\");\n  const [results, setResults] = React.useState([]);\n  const [isSearching, setIsSearching] = React.useState(false);\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n  const handleChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    setSearchTerm(formData.get(\"search\"));\n    e.target.reset();\n    e.target.focus();\n  };\n\n  React.useEffect(() => {\n    const searchHN = async () => {\n      let results = [];\n      setIsSearching(true);\n      if (debouncedSearchTerm) {\n        const data = await searchHackerNews(debouncedSearchTerm);\n        results = data?.hits || [];\n      }\n\n      setIsSearching(false);\n      setResults(results);\n    };\n\n    searchHN();\n  }, [debouncedSearchTerm]);\n\n  return (\n    <section>\n      <header>\n        <h1>useDebounce</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            name=\"search\"\n            placeholder=\"Search HN\"\n            style={{ background: \"var(--charcoal)\" }}\n            onChange={handleChange}\n          />\n          <button className=\"primary\" disabled={isSearching} type=\"submit\">\n            {isSearching ? \"...\" : \"Search\"}\n          </button>\n        </form>\n      </header>\n      <SearchResults results={results} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with useFetch Hook in React\nDESCRIPTION: Demonstrates the implementation of the useFetch hook to fetch Pokemon data from an API. The component includes navigation controls and displays the fetched data in a Card component. It handles state management for the Pokemon ID counter and utilizes the hook's error and data states.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useFetch.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useFetch } from \"@uidotdev/usehooks\";\nimport Card from \"./Card\";\n\nexport default function App() {\n  const [count, setCount] = React.useState(1);\n\n  const { error, data } = useFetch(\n    `https://pokeapi.co/api/v2/pokemon/${count}`\n  );\n\n  return (\n    <section>\n      <h1>useFetch</h1>\n      <button\n        disabled={count < 2}\n        className=\"link\"\n        onClick={() => setCount((c) => c - 1)}\n      >\n        Prev\n      </button>\n      <button className=\"link\" onClick={() => setCount((c) => c + 1)}>\n        Next\n      </button>\n      <Card loading={!data} error={error} data={data} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Dialog with useClickAway Hook in React\nDESCRIPTION: This example demonstrates how to use the useClickAway hook to detect clicks outside a modal dialog. The hook returns a ref that's attached to the modal, and when a user clicks outside this referenced element, the modal closes. The example includes state management for the modal's open/closed status.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useClickAway.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useClickAway } from \"@uidotdev/usehooks\";\nimport { closeIcon } from \"./icons\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const ref = useClickAway(() => {\n    setIsOpen(false);\n  });\n\n  const handleOpenModal = () => {\n    if (isOpen === false) {\n      setIsOpen(true);\n    }\n  };\n\n  return (\n    <>\n      <section>\n        <h1>useClickAway</h1>\n        <button className=\"link\" onClick={handleOpenModal}>\n          Open Modal\n        </button>\n      </section>\n      {isOpen && (\n        <dialog ref={ref}>\n          <button onClick={() => setIsOpen(false)}>{closeIcon}</button>\n          <h2>Modal</h2>\n          <p>\n            Click outside the modal to close (or use the button) whatever you\n            prefer.\n          </p>\n        </dialog>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Drawing App with useLocalStorage in React\nDESCRIPTION: This code demonstrates how to use the useLocalStorage hook to persist a canvas drawing state. The component uses the hook to retrieve and save drawing data, which allows the drawing to be maintained even when the user reloads the page. It also includes buttons to reload the window and clear the local storage.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useLocalStorage.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useLocalStorage } from \"@uidotdev/usehooks\";\nimport createDrawing from \"./createDrawing\";\n\nexport default function App() {\n  const [drawing, saveDrawing] = useLocalStorage(\"drawing\", null);\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    createDrawing(ref.current, drawing, saveDrawing);\n  }, [drawing, saveDrawing]);\n\n  return (\n    <section>\n      <header>\n        <h1>useLocalStorage</h1>\n\n        <button className=\"link\" onClick={() => window.location.reload()}>\n          Reload Window\n        </button>\n        <button\n          className=\"link\"\n          onClick={() => {\n            window.localStorage.clear();\n            window.location.reload();\n          }}\n        >\n          Clear Local Storage\n        </button>\n      </header>\n      <figure>\n        <canvas ref={ref} width={800} height={800} />\n        <figcaption>(draw something)</figcaption>\n      </figure>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Cycling Animation with useInterval in React\nDESCRIPTION: Example React component demonstrating the useInterval hook to create a color cycling animation. The hook executes a callback every second to cycle through an array of colors, with controls to stop the animation. The interval is automatically cleared on component unmount.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useInterval.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useInterval } from \"@uidotdev/usehooks\";\n\nconst colors = [\"green\", \"blue\", \"purple\", \"red\", \"pink\", \"beige\", \"yellow\"];\n\nexport default function App() {\n  const [running, setIsRunning] = React.useState(true);\n  const [index, setIndex] = React.useState(0);\n\n  const clear = useInterval(() => {\n    setIndex(index + 1);\n  }, 1000);\n\n  const handleStop = () => {\n    clear();\n    setIsRunning(false);\n  };\n\n  const color = colors[index % colors.length];\n  return (\n    <section>\n      <h1>useInterval</h1>\n      <button disabled={!running} className=\"link\" onClick={handleStop}>\n        {running ? \"Stop\" : \"Stopped\"}\n      </button>\n      <div style={{ backgroundColor: `var(--${color})` }} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Design with useMediaQuery Hook in React\nDESCRIPTION: Example React component demonstrating the usage of useMediaQuery hook to implement responsive design based on different viewport sizes. The component displays different icons based on screen size breakpoints and updates in real-time as the viewport changes.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useMediaQuery.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useMediaQuery } from \"@uidotdev/usehooks\";\nimport { phone, tablet, laptop, desktop } from \"./icons\";\n\nexport default function App() {\n  const isSmallDevice = useMediaQuery(\"only screen and (max-width : 768px)\");\n  const isMediumDevice = useMediaQuery(\n    \"only screen and (min-width : 769px) and (max-width : 992px)\"\n  );\n  const isLargeDevice = useMediaQuery(\n    \"only screen and (min-width : 993px) and (max-width : 1200px)\"\n  );\n  const isExtraLargeDevice = useMediaQuery(\n    \"only screen and (min-width : 1201px)\"\n  );\n\n  return (\n    <section>\n      <h1>useMediaQuery</h1>\n      Resize your browser windows to see changes.\n      <article>\n        <figure className={isSmallDevice ? \"active\" : \"\"}>\n          {phone}\n          <figcaption>Small</figcaption>\n        </figure>\n        <figure className={isMediumDevice ? \"active\" : \"\"}>\n          {tablet}\n          <figcaption>Medium</figcaption>\n        </figure>\n        <figure className={isLargeDevice ? \"active\" : \"\"}>\n          {laptop}\n          <figcaption>Large</figcaption>\n        </figure>\n        <figure className={isExtraLargeDevice ? \"active\" : \"\"}>\n          {desktop}\n          <figcaption>Extra Large</figcaption>\n        </figure>\n      </article>\n    </section>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing useGeolocation Hook in a React Application\nDESCRIPTION: This snippet demonstrates how to implement the useGeolocation hook from @uidotdev/usehooks to access a user's location data. It shows a complete example with loading states, error handling, and conditional rendering based on the geolocation state.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useGeolocation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useGeolocation } from \"@uidotdev/usehooks\";\nimport Demo from \"./Demo\";\n\nexport default function App() {\n  return (\n    <section>\n      <h1>useGeolocation</h1>\n      <Location />\n    </section>\n  );\n}\n\nfunction Location() {\n  const state = useGeolocation();\n\n  if (state.loading) {\n    return <p>loading... (you may need to enable permissions)</p>;\n  }\n\n  if (state.error) {\n    return <p>Enable permissions to access your location data</p>;\n  }\n\n  return <Demo state={state} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useWindowSize Hook in a React Application\nDESCRIPTION: This code demonstrates how to use the useWindowSize hook to track and display the browser window dimensions. It includes a Browser component that scales based on window size and a display table showing the current dimensions.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useWindowSize.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useWindowSize } from \"@uidotdev/usehooks\";\n\nfunction Browser({ size }) {\n  return (\n    <div\n      data-testid=\"browser\"\n      className=\"browser\"\n      style={{ width: size.width / 4, height: size.height / 4 }}\n    />\n  );\n}\n\nexport default function App() {\n  const size = useWindowSize();\n\n  return (\n    <section>\n      <h1>useWindowSize</h1>\n      <p>Resize the window</p>\n      <table>\n        <tbody>\n          <tr>\n            <th>width</th>\n            <td>{size.width}</td>\n          </tr>\n          <tr>\n            <th>height</th>\n            <td>{size.height}</td>\n          </tr>\n        </tbody>\n      </table>\n      <Browser size={size} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with useCounter Hook in React\nDESCRIPTION: Example implementation of a React component using the useCounter hook. The component demonstrates counter functionality with minimum (5) and maximum (10) limits, including increment, decrement, set, and reset operations. The UI includes buttons for each operation and displays the current count value.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useCounter.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useCounter } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [count, { increment, decrement, set, reset }] = useCounter(5, {\n    min: 5,\n    max: 10,\n  });\n\n  return (\n    <section>\n      <h1>UseCounter</h1>\n      <h6>with optional min / max</h6>\n      <button disabled={count >= 10} className=\"link\" onClick={increment}>\n        Increment\n      </button>\n      <button disabled={count <= 5} className=\"link\" onClick={decrement}>\n        Decrement\n      </button>\n      <button className=\"link\" onClick={() => set(6)}>\n        Set to 6\n      </button>\n      <button className=\"link\" onClick={reset}>\n        Reset\n      </button>\n      <p>{count}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useToggle Hook with React Components\nDESCRIPTION: Example implementation showing how to use the useToggle hook in a React application. Demonstrates usage with a toggle switch component and multiple control buttons for different toggle operations. The hook accepts an initial boolean value and returns current state and toggle function.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useToggle.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useToggle } from \"@uidotdev/usehooks\";\n\nfunction ToggleDemo({ on, toggle }) {\n  return (\n    <div>\n      <label className=\"toggle\">\n        <input\n          onChange={toggle}\n          className=\"toggle-checkbox\"\n          type=\"checkbox\"\n          checked={on}\n        />\n        <div className=\"toggle-switch\"></div>\n        <span className=\"toggle-label\">{on ? \"On\" : \"Off\"}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default function App() {\n  const [on, toggle] = useToggle(true);\n\n  return (\n    <section>\n      <h1>UseToggle</h1>\n      <button disabled={on} className=\"link\" onClick={() => toggle(true)}>\n        Turn On\n      </button>\n      <button disabled={!on} className=\"link\" onClick={() => toggle(false)}>\n        Turn Off\n      </button>\n      <button className=\"link\" onClick={toggle}>\n        Toggle\n      </button>\n      <button className=\"link\" onClick={() => toggle(\"nope\")}>\n        (Also toggles)\n      </button>\n      <ToggleDemo toggle={toggle} on={on} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useIntersectionObserver Hook in React\nDESCRIPTION: A React component implementation showcasing the useIntersectionObserver hook for lazy loading images. The hook accepts threshold, root, and rootMargin parameters to control intersection observation behavior. It returns a ref to attach to the target element and an entry object containing intersection information.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useIntersectionObserver.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useIntersectionObserver } from \"@uidotdev/usehooks\";\nimport demoData from \"./demoData\";\n\nconst Section = ({ imgUrl, caption, href }) => {\n  const [ref, entry] = useIntersectionObserver({\n    threshold: 0,\n    root: null,\n    rootMargin: \"0px\",\n  });\n\n  return (\n    <section>\n      <figure ref={ref}>\n        {entry?.isIntersecting && (\n          <>\n            <img src={imgUrl} alt={caption} />\n            <figcaption>\n              <a href={href} alt={caption} target=\"_blank\" rel=\"noreferrer\">\n                {caption}\n              </a>\n            </figcaption>\n          </>\n        )}\n      </figure>\n    </section>\n  );\n};\n\nexport default function App() {\n  return (\n    <main>\n      <header>\n        <h1>useIntersectionObserver</h1>\n        <h6>\n          (Memes from <a href=\"https://bytes.dev\">bytes.dev</a>)\n        </h6>\n      </header>\n\n      {demoData.map(({ imgUrl, href, caption }, index) => {\n        return (\n          <Section key={index} imgUrl={imgUrl} href={href} caption={caption} />\n        );\n      })}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useList Hook in React\nDESCRIPTION: This code demonstrates how to use the useList hook to manage a list in a React component. It showcases various methods like set, push, removeAt, insertAt, updateAt, and clear to manipulate the list. The component renders buttons for different list operations and a ListDemo component to display and interact with the list.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useList.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useList } from \"@uidotdev/usehooks\";\nimport ListDemo from \"./ListDemo\";\n\nexport default function App() {\n  const [list, { set, push, removeAt, insertAt, updateAt, clear }] = useList([\n    \"First\",\n    \"Second\",\n    \"Third\",\n  ]);\n\n  return (\n    <section>\n      <header>\n        <h1>UseList</h1>\n        <button\n          disabled={list.length < 1}\n          className=\"link\"\n          onClick={() => insertAt(1, \"woo\")}\n        >\n          Insert After First\n        </button>\n        <button\n          disabled={list.length < 2}\n          className=\"link\"\n          onClick={() => removeAt(1)}\n        >\n          Remove Second Item\n        </button>\n        <button className=\"link\" onClick={() => set([1, 2, 3])}>\n          Reset\n        </button>\n        <button className=\"link\" onClick={() => clear()}>\n          Clear\n        </button>\n      </header>\n      <ListDemo\n        list={list}\n        updateAt={updateAt}\n        push={push}\n        removeAt={removeAt}\n      />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basketball Score Tracker using useMap Hook in React\nDESCRIPTION: Example implementation of a basketball score tracking component using the useMap hook. The component displays scores for two teams (Jazz and Suns) and provides buttons to increment scores by 2 or 3 points. The hook manages the state updates and ensures component re-renders when the map is modified.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useMap.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useMap } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const map = useMap([\n    [\"Jazz\", 32],\n    [\"Suns\", 50],\n  ]);\n\n  return (\n    <section>\n      <h1>useMap</h1>\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={4}>Jazz vs Suns</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from(map.keys()).map((team) => {\n            const score = map.get(team);\n            return (\n              <tr key={team}>\n                <th style={{ width: \"25%\" }}>{team}</th>\n                <td style={{ width: \"50%\" }}>{score}</td>\n                <td style={{ width: \"12.5%\" }}>\n                  <button\n                    className=\"link\"\n                    onClick={() => {\n                      map.set(team, score + 2);\n                    }}\n                  >\n                    + 2\n                  </button>\n                </td>\n                <td style={{ width: \"12.5%\" }}>\n                  <button\n                    className=\"link\"\n                    onClick={() => {\n                      map.set(team, score + 3);\n                    }}\n                  >\n                    + 3\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </section>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing useObjectState Hook for Managing Complex State Objects in React\nDESCRIPTION: This code demonstrates how to use the useObjectState hook to manage a complex state object for basketball team statistics. It initializes the state with team information and provides functions to add wins, losses, reset the stats, and display the current state in a table. The hook's update function accepts both object literals and callback functions to merge new values into the existing state.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useObjectState.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useObjectState } from \"@uidotdev/usehooks\";\n\nconst initialState = {\n  team: \"Utah Jazz\",\n  wins: 2138,\n  losses: 1789,\n  championships: 0,\n};\n\nexport default function App() {\n  const [stats, setStats] = useObjectState(initialState);\n\n  const addWin = () => {\n    setStats((s) => ({\n      wins: s.wins + 1,\n    }));\n  };\n\n  const addLoss = () => {\n    setStats((s) => ({\n      losses: s.losses + 1,\n    }));\n  };\n\n  const reset = () => {\n    setStats(initialState);\n  };\n\n  return (\n    <section>\n      <h1>useObjectState</h1>\n\n      <button className=\"link\" onClick={addWin}>\n        Add Win\n      </button>\n      <button className=\"link\" onClick={addLoss}>\n        Add Loss\n      </button>\n\n      <button className=\"link\" onClick={() => alert(\"lol\")}>\n        Add Championship\n      </button>\n      <button className=\"link\" onClick={reset}>\n        Reset\n      </button>\n\n      <table>\n        <thead>\n          <tr>\n            {Object.keys(stats).map((key) => {\n              return <th>{key}</th>;\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            {Object.keys(stats).map((key) => {\n              return <td>{`${stats[key]}`}</td>;\n            })}\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useTimeout Hook with a Bomb Defusal Game in React\nDESCRIPTION: This code demonstrates the useTimeout hook which sets a callback to execute after a specified delay. The example creates a simple game where users must click a bomb before it explodes after a 1-second timeout. The hook returns a function that allows manually canceling the timeout.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useTimeout.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useTimeout } from \"@uidotdev/usehooks\";\n\nfunction Bomb({ hasExploded, hasDefused, handleClick }) {\n  if (hasExploded) {\n    return (\n      <figure>\n        <span role=\"img\" aria-label=\"Explosion Emoji\">\n          💥\n        </span>\n        <figcaption>You lose</figcaption>\n      </figure>\n    );\n  }\n\n  if (hasDefused) {\n    return (\n      <figure>\n        <span role=\"img\" aria-label=\"Explosion Emoji\">\n          🎉\n        </span>\n        <figcaption>You Win</figcaption>\n      </figure>\n    );\n  }\n\n  return (\n    <button className=\"bomb\" onClick={handleClick}>\n      <span role=\"img\" aria-label=\"Dynamite Emoji\">\n        🧨\n      </span>\n    </button>\n  );\n}\n\nexport default function App() {\n  const [hasDefused, setHasDefused] = React.useState(false);\n  const [hasExploded, setHasExploded] = React.useState(false);\n\n  const clear = useTimeout(() => {\n    setHasExploded(!hasExploded);\n  }, 1000);\n\n  const handleClick = () => {\n    clear();\n    setHasDefused(true);\n  };\n\n  return (\n    <section>\n      <h1>useTimeout</h1>\n      <p>You have 1s to defuse (click) the bomb or it will explode </p>\n      <button\n        className=\"link\"\n        onClick={() => {\n          window.location.reload();\n        }}\n      >\n        Reload\n      </button>\n      <Bomb\n        hasDefused={hasDefused}\n        hasExploded={hasExploded}\n        handleClick={handleClick}\n      />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List with useHistoryState Hook in React\nDESCRIPTION: Example implementation of a todo list application using the useHistoryState hook. The component demonstrates state management with undo/redo capabilities, including adding and removing items, and state history manipulation. Uses the @uidotdev/usehooks library.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useHistoryState.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport Form from \"./Form\";\nimport { useHistoryState } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const { state, set, undo, redo, clear, canUndo, canRedo } = useHistoryState({\n    items: [],\n  });\n\n  const addTodo = (val) => {\n    set({\n      ...state,\n      items: state.items.concat({ id: crypto.randomUUID(), name: val }),\n    });\n  };\n\n  const removeTodo = (id) => {\n    set({\n      ...state,\n      items: state.items.filter((item) => item.id !== id),\n    });\n  };\n\n  return (\n    <section>\n      <header>\n        <h1>useHistoryState</h1>\n        <div>\n          <button disabled={!canUndo} className=\"link\" onClick={undo}>\n            Undo\n          </button>\n          <button disabled={!canRedo} className=\"link\" onClick={redo}>\n            Redo\n          </button>\n\n          <button\n            disabled={!state.items.length}\n            className=\"link\"\n            onClick={clear}\n          >\n            Clear\n          </button>\n        </div>\n        <Form addItem={addTodo} />\n      </header>\n\n      <ul>\n        {state.items.map((item, index) => {\n          return (\n            <li key={index}>\n              <span>{item.name}</span>\n              <button className=\"link\" onClick={() => removeTodo(item.id)}>\n                Delete\n              </button>\n            </li>\n          );\n        })};\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toggleable Counter with useIntervalWhen in React\nDESCRIPTION: This example demonstrates how to use the useIntervalWhen hook to create a counter that can be started and stopped with a button click. The counter increments by 0.1 every 100ms when active, and displays the current count formatted with two decimal places. The when state controls whether the timer is running or paused.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useIntervalWhen.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useIntervalWhen } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [count, setCount] = React.useState(0);\n  const [when, setWhen] = React.useState(false);\n\n  useIntervalWhen(\n    () => {\n      setCount((c) => c + 0.1);\n    },\n    { ms: 100, when, startImmediately: true }\n  );\n\n  return (\n    <section>\n      <h1>useIntervalWhen</h1>\n      <button title=\"Click to toggle the timer\" onClick={() => setWhen(!when)}>\n        {count.toLocaleString(\"en-US\", {\n          maximumFractionDigits: 2,\n          minimumFractionDigits: 2,\n        })}\n        <span className=\"btn link\">{when ? \"stop\" : \"start\"}</span>\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Arrow Key Detection with useKeyPress in React\nDESCRIPTION: This example demonstrates how to use the useKeyPress hook to detect arrow key presses and provide visual feedback. The component sets up listeners for all four arrow keys, temporarily highlights the corresponding button when a key is pressed, and displays a message indicating which key was pressed.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useKeyPress.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useKeyPress } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [activeKey, setActiveKey] = React.useState(\"\");\n\n  useKeyPress(\"ArrowRight\", onKeyPress);\n  useKeyPress(\"ArrowLeft\", onKeyPress);\n  useKeyPress(\"ArrowUp\", onKeyPress);\n  useKeyPress(\"ArrowDown\", onKeyPress);\n\n  function onKeyPress(e) {\n    e.preventDefault();\n    setActiveKey(e.key);\n    setTimeout(() => {\n      setActiveKey(\"\");\n    }, 600);\n  }\n\n  return (\n    <section>\n      <h1>useKeyPress</h1>\n      <p>Press one of the arrow keys on your keyboard</p>\n      <article>\n        <button className={activeKey === \"ArrowUp\" ? \"pressed\" : \"\"}>\n          <span>&uarr;</span>\n        </button>\n        <button className={activeKey === \"ArrowLeft\" ? \"pressed\" : \"\"}>\n          <span>&larr;</span>\n        </button>\n        <button className={activeKey === \"ArrowDown\" ? \"pressed\" : \"\"}>\n          <span>&darr;</span>\n        </button>\n        <button className={activeKey === \"ArrowRight\" ? \"pressed\" : \"\"}>\n          <span>&rarr;</span>\n        </button>\n      </article>\n      {Boolean(activeKey) && <label>{activeKey} was pressed</label>}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipboard Copy Functionality with React\nDESCRIPTION: A React component demonstrating the usage of useCopyToClipboard hook. The component displays a random UUID that can be copied to clipboard, with visual feedback indicating successful copy operations. It includes a dialog that appears after copying and allows testing the copied content.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useCopyToClipboard.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useCopyToClipboard } from \"@uidotdev/usehooks\";\nimport { copyIcon, checkIcon } from \"./icons\";\n\nconst randomHash = crypto.randomUUID();\n\nexport default function App() {\n  const [copiedText, copyToClipboard] = useCopyToClipboard();\n  const hasCopiedText = Boolean(copiedText);\n  return (\n    <section>\n      <h1>useCopyToClipboard</h1>\n      <article>\n        <label>Fake API Key</label>\n        <pre>\n          <code>{randomHash}</code>\n          <button\n            disabled={hasCopiedText}\n            className=\"link\"\n            onClick={() => copyToClipboard(randomHash)}\n          >\n            {hasCopiedText ? checkIcon : copyIcon}\n          </button>\n        </pre>\n      </article>\n      {hasCopiedText && (\n        <dialog open={hasCopiedText}>\n          <h4>\n            Copied{\" \"}\n            <span role=\"img\" aria-label=\"Celebrate Emoji\">\n              🎉\n            </span>\n          </h4>\n          <textarea placeholder=\"Paste your copied text\" />\n        </dialog>\n      )}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Tracking with useMouse Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMouse hook to track mouse position relative to both the page and a specific element. It also shows how to determine if the mouse is intersecting with the tracked element.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useMouse.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useMouse } from \"@uidotdev/usehooks\";\nimport Demo from \"./Demo\";\n\nexport default function App() {\n  const [mouse, ref] = useMouse();\n\n  const xIntersecting = mouse.elementX > 0 && mouse.elementX < 300;\n  const yIntersecting = mouse.elementY > 0 && mouse.elementY < 300;\n  const isIntersecting = xIntersecting && yIntersecting;\n\n  return (\n    <section>\n      <h1>useMouse</h1>\n      <article\n        ref={ref}\n        style={{ width: \"300px\", height: \"300px\" }}\n        className={isIntersecting ? \"active\" : \"\"}\n      >\n        Use a ref to add coords relative to the element\n      </article>\n      <Demo {...mouse} />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cart Counter with useSessionStorage in React\nDESCRIPTION: This example demonstrates using the useSessionStorage hook to maintain a cart counter that persists across page reloads. The component includes buttons to increment the counter, clear the cart, reload the window, and clear the session storage. The count value is stored under the key 'woot' with an initial value of 0.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useSessionStorage.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useSessionStorage } from \"@uidotdev/usehooks\";\nimport { cart } from \"./icons\";\n\nexport default function App() {\n  const [count, setCount] = useSessionStorage(\"woot\", 0);\n\n  return (\n    <section>\n      <h1>useSessionStorage</h1>\n      <div>\n        <button className=\"link\" onClick={() => setCount(0)}>\n          Clear Cart\n        </button>\n        <button\n          className=\"link\"\n          onClick={() => {\n            window.location.reload();\n          }}\n        >\n          Reload Window\n        </button>\n        <button\n          className=\"link\"\n          onClick={() => {\n            window.sessionStorage.clear();\n            window.location.reload();\n          }}\n        >\n          Clear Session\n        </button>\n      </div>\n      <button className=\"primary\" onClick={() => setCount(count + 1)}>\n        <span>{cart}</span> Add To Cart\n      </button>\n      <button className=\"cart\">\n        <span>{cart}</span>{\" \"}\n        <span\n          key={count}\n          className={`cart-count ${count > 0 ? \"animate\" : \"\"}`}\n        >\n          {count}\n        </span>\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click-Outside Detection with useEventListener in React\nDESCRIPTION: This example shows how to use the useEventListener hook to detect clicks outside a modal dialog. The hook attaches a mousedown event listener to the document, and the handler function checks if the click occurred outside the referenced element, closing the modal if true.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useEventListener.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useEventListener } from \"@uidotdev/usehooks\";\nimport { closeIcon } from \"./icons\";\n\nexport default function App() {\n  const ref = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleClick = (e) => {\n    const element = ref.current;\n    if (element && !element.contains(e.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  useEventListener(document, \"mousedown\", handleClick);\n\n  return (\n    <section>\n      <h1>useEventListener</h1>\n      <div style={{ minHeight: \"200vh\" }}>\n        <button className=\"link\" onClick={() => setIsOpen(true)}>\n          Click me\n        </button>\n      </div>\n      {isOpen && (\n        <dialog ref={ref}>\n          <button onClick={() => setIsOpen(false)}>{closeIcon}</button>\n          <h2>Modal</h2>\n          <p>\n            Click outside the modal to close (or use the button) whatever you\n            prefer.\n          </p>\n        </dialog>\n      )}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useWindowScroll Hook in React\nDESCRIPTION: This code snippet demonstrates how to use the useWindowScroll hook from @uidotdev/usehooks. It creates a component that displays the current scroll position and provides buttons to scroll to specific positions. The hook returns an object with x and y coordinates and a scrollTo function for programmatic scrolling.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useWindowScroll.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useWindowScroll } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [{ x, y }, scrollTo] = useWindowScroll();\n  return (\n    <section>\n      <header>\n        <h1>useWindowScroll</h1>\n        <button className=\"link\" onClick={() => scrollTo(0, 1000)}>\n          Scroll To (0, 1000)\n        </button>\n        <button\n          className=\"link\"\n          onClick={() => scrollTo({ left: 0, top: 2000, behavior: \"smooth\" })}\n        >\n          Scroll To (0, 2000) (Smoothly)\n        </button>\n        <button\n          className=\"link\"\n          onClick={() => scrollTo({ left: 0, top: 0, behavior: \"smooth\" })}\n        >\n          Back To The Top\n        </button>\n      </header>\n\n      {new Array(50).fill().map((_, index) => {\n        return <p key={index}>{index}</p>;\n      })}\n      <aside style={{ position: \"fixed\", bottom: 0, right: 0 }}>\n        Coordinates <span className=\"x\">x: {x}</span>{\" \"}\n        <span className=\"y\">y: {y}</span>{\" \"}\n      </aside>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Username Availability Checker with useSet in React\nDESCRIPTION: This code snippet demonstrates how to use the useSet hook to manage a set of usernames and check for username availability. It includes form handling, state management, and rendering of the username list.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useSet.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useSet } from \"@uidotdev/usehooks\";\n\nfunction format(val) {\n  return val.toLocaleLowerCase().replace(/\\s/g, \"\");\n}\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"\");\n  const set = useSet([\n    \"benadam11\",\n    \"tylermcginnis\",\n    \"lynnandtonic\",\n    \"alexbrown40\",\n    \"uidotdev\",\n    \"bytesdotdev\",\n    \"reactnewsletter\",\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const username = formData.get(\"username\");\n    set.add(format(username));\n    setValue(\"\");\n    e.target.reset();\n    e.target.focus();\n  };\n\n  const hasError = set.has(value);\n\n  return (\n    <section>\n      <h1>useSet</h1>\n      <p>Check if your username is available</p>\n      <article>\n        <form className={hasError ? \"error\" : \"\"} onSubmit={handleSubmit}>\n          <span>@</span>\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"Enter a username\"\n            onChange={(e) => {\n              setValue(format(e.target.value));\n            }}\n          />\n        </form>\n        {hasError && <label>Woops that user is taken</label>}\n      </article>\n\n      <table>\n        <tbody>\n          {Array.from(set.values()).map((username) => {\n            const match = username === value;\n            return (\n              <tr key={username}>\n                <th>username</th>\n                <td\n                  style={{\n                    borderColor: match ? \"var(--red)\" : \"var(--charcoal)\",\n                  }}\n                >\n                  {username}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useLockBodyScroll Hook with React Modal Component\nDESCRIPTION: This code demonstrates how to use the useLockBodyScroll hook to disable body scrolling when a modal is open. The example includes a Modal component that uses the hook, and an App component that manages the modal's visibility state and renders colorful sections in the background.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useLockBodyScroll.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useLockBodyScroll } from \"@uidotdev/usehooks\";\nimport { closeIcon } from \"./icons\";\nimport DemoContent from \"./DemoContent\";\n\nfunction Modal({ handleClose }) {\n  useLockBodyScroll();\n\n  return (\n    <div>\n      <dialog>\n        <header>\n          <button onClick={handleClose}>{closeIcon}</button>\n          <h2>Modal</h2>\n        </header>\n        <section>\n          <DemoContent />\n        </section>\n      </dialog>\n    </div>\n  );\n}\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n  return (\n    <>\n      {isOpen && <Modal handleClose={() => setIsOpen(false)} />}\n      <main>\n        <header>\n          <h1>useLockBodyScroll</h1>\n        </header>\n        {[\"red\", \"blue\", \"green\", \"pink\", \"purple\", \"yellow\"].map((color) => {\n          return (\n            <section\n              style={{\n                backgroundColor: `var(--${color})`,\n                width: \"100%\",\n                height: \"50vh\",\n              }}\n            />\n          );\n        })}\n        <button className=\"primary\" onClick={() => setIsOpen(true)}>\n          openModal\n        </button>\n      </main>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useThrottle Hook in React Application\nDESCRIPTION: Example implementation of useThrottle hook in a React component. The hook throttles text input updates with a default interval of 500ms. It demonstrates handling input changes and displaying both immediate and throttled values.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useThrottle.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useThrottle } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [val, setVal] = React.useState(\"\");\n  const throttledValue = useThrottle(val);\n\n  return (\n    <section>\n      <h1>useThrottle</h1>\n      <input\n        placeholder=\"Type some text\"\n        style={{ background: \"var(--charcoal)\" }}\n        type=\"text\"\n        value={val}\n        onChange={(e) => {\n          setVal(e.target.value);\n        }}\n      />\n      <p>Val: {val}</p>\n      <p>Throttled: {throttledValue}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Battery Status Monitoring with useBattery Hook in React\nDESCRIPTION: Example implementation of the useBattery hook to display battery status information. The hook provides battery level, charging status, and timing information through a simple interface. It includes loading state handling and renders a Battery component with the retrieved information.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useBattery.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBattery } from \"@uidotdev/usehooks\";\nimport Battery from \"./Battery\";\n\nexport default function App() {\n  const { loading, level, charging, chargingTime, dischargingTime } =\n    useBattery();\n  return (\n    <>\n      <div className=\"wrapper\">\n        <h1>useBattery</h1>\n        {!loading ? (\n          <Battery\n            level={level * 100}\n            charging={charging}\n            chargingTime={chargingTime}\n            dischargingTime={dischargingTime}\n          />\n        ) : (\n          <h2>Loading...</h2>\n        )}\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Network Status Monitoring with useNetworkState in React\nDESCRIPTION: This example demonstrates how to use the useNetworkState hook to display all network-related information in a React component. The hook provides properties like online status, connection type, speed metrics, and data-saving preferences, which are rendered in a tabular format.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useNetworkState.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useNetworkState } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const network = useNetworkState();\n\n  return (\n    <section>\n      <h1>useNetworkState</h1>\n      <table>\n        <tbody>\n          {Object.keys(network).map((key) => {\n            return (\n              <tr key={key} className={key}>\n                <th>{key}</th>\n                <td>{`${network[key]}`}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useHover Hook in a React Component\nDESCRIPTION: This snippet demonstrates how to use the useHover hook in a React component. The hook returns a ref to attach to an element and a boolean indicating hover state. The example changes the background color of an article element when it's being hovered over.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useHover.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useHover } from \"@uidotdev/usehooks\";\n\nfunction getRandomColor() {\n  const colors = [\"green\", \"blue\", \"purple\", \"red\", \"pink\"];\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\nexport default function App() {\n  const [ref, hovering] = useHover();\n\n  const backgroundColor = hovering\n    ? `var(--${getRandomColor()})`\n    : \"var(--charcoal)\";\n\n  return (\n    <section>\n      <h1>useHover</h1>\n      <article ref={ref} style={{ backgroundColor }}>\n        Hovering? {hovering ? \"Yes\" : \"No\"}\n      </article>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Press Detection in React with useLongPress Hook\nDESCRIPTION: This code demonstrates how to use the useLongPress hook to create a long-press interaction that opens a modal dialog. The example configures custom callbacks for different press states and sets a 500ms threshold for the long press detection.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useLongPress.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useLongPress } from \"@uidotdev/usehooks\";\nimport { closeIcon } from \"./icons\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const attrs = useLongPress(\n    () => {\n      setIsOpen(true);\n    },\n    {\n      onStart: (event) => console.log(\"Press started\"),\n      onFinish: (event) => console.log(\"Press Finished\"),\n      onCancel: (event) => console.log(\"Press cancelled\"),\n      threshold: 500,\n    }\n  );\n\n  return (\n    <section>\n      <h1>useLongPress</h1>\n      <button {...attrs} className=\"primary\">\n        Press Me\n      </button>\n      {isOpen && (\n        <dialog>\n          <button onClick={() => setIsOpen(false)}>{closeIcon}</button>\n          <h2>Modal</h2>\n          <p>This is a modal triggered by a long press.</p>\n        </dialog>\n      )}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Functionality with useQueue React Hook\nDESCRIPTION: This code snippet demonstrates how to use the useQueue hook from @uidotdev/usehooks to manage a queue data structure in a React application. It shows how to initialize a queue with values, add new elements, remove elements from the front, and clear the queue while displaying the current state visually.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useQueue.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useQueue } from \"@uidotdev/usehooks\";\n\nfunction QueueDemo({ first, last, size, queue }) {\n  return (\n    <figure>\n      <article>\n        <p>Front</p>\n        <ul>\n          {queue.map((item, i) => {\n            const isFirst = first === item;\n            const isLast = last === item;\n            if (isFirst) {\n              return <li key={i}>First: {item}</li>;\n            }\n            if (isLast) {\n              return <li key={i}>Last: {item}</li>;\n            }\n            return <li key={i}>Item: {item}</li>;\n          })}\n        </ul>\n        <p>Back</p>\n      </article>\n      <figcaption>{size} items in the queue</figcaption>\n    </figure>\n  );\n}\n\nexport default function App() {\n  const { add, remove, clear, first, last, size, queue } = useQueue([1, 2, 3]);\n\n  return (\n    <div>\n      <header>\n        <h1>UseQueue</h1>\n        <button className=\"link\" onClick={() => add((last || 0) + 1)}>\n          Add\n        </button>\n        <button disabled={size === 0} className=\"link\" onClick={() => remove()}>\n          Remove\n        </button>\n        <button disabled={size === 0} className=\"link\" onClick={() => clear()}>\n          Clear\n        </button>\n      </header>\n      <QueueDemo queue={queue} size={size} first={first} last={last} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Size Measurement with useMeasure in React\nDESCRIPTION: This code demonstrates how to use the useMeasure hook to track component dimensions. It creates a Measure component that displays either width or height based on the type prop, and renders a resizable element with its current dimensions. The hook returns a ref to attach to the element being measured and an object containing width and height values.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useMeasure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useMeasure } from \"@uidotdev/usehooks\";\n\nfunction Measure({ type = \"horizontal\" }) {\n  const [ref, { width, height }] = useMeasure();\n\n  return (\n    <figure>\n      <figcaption>\n        <span>{type}</span>\n      </figcaption>\n      <article\n        ref={ref}\n        className={type}\n        style={{\n          resize: type\n        }}\n      >\n        {type === \"horizontal\" ? (\n          <label>width: {Math.floor(width)}</label>\n        ) : (\n          <label>height: {Math.floor(height)}</label>\n        )}\n      </article>\n    </figure>\n  );\n}\n\nexport default function App() {\n  return (\n    <section>\n      <h1>useMeasure</h1>\n      <p>(Resize the rulers)</p>\n      <Measure />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useOrientation React Hook for Device Orientation Tracking\nDESCRIPTION: This code demonstrates how to implement the useOrientation hook from @uidotdev/usehooks to track device orientation. It renders the current orientation angle and type in a table, and applies the angle as a CSS variable to an article element.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useOrientation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useOrientation } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const orientation = useOrientation();\n\n  return (\n    <section>\n      <h1>useOrientation</h1>\n\n      <article\n        style={{ \"--angle\": `${orientation.angle}deg` }}\n        className={orientation.type.toLocaleLowerCase()}\n      />\n      <table>\n        <tbody>\n          {Object.keys(orientation).map((key) => {\n            return (\n              <tr key={key}>\n                <th>{key}</th>\n                <td>{orientation[key]}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Countdown Timer with useCountdown Hook in React\nDESCRIPTION: This code snippet showcases the implementation of a countdown timer using the useCountdown hook. It demonstrates how to set up the countdown, handle its completion, and allow users to add time to the countdown. The component renders the current count and provides buttons to extend the countdown duration.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useCountdown.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useCountdown } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [endTime, setEndTime] = React.useState(new Date(Date.now() + 10000));\n  const [complete, setComplete] = React.useState(false);\n\n  const count = useCountdown(endTime, {\n    interval: 1000,\n    onTick: () => console.log(\"tick\"),\n    onComplete: (time) => setComplete(true),\n  });\n\n  const handleClick = (time) => {\n    if (complete === true) return;\n    const nextTime = endTime.getTime() + time;\n    setEndTime(new Date(nextTime));\n  };\n\n  return (\n    <section>\n      <header>\n        <h1>useCountdown</h1>\n      </header>\n      <span className=\"countdown\">{count}</span>\n      {complete === false && (\n        <div className=\"button-row\">\n          <button onClick={() => handleClick(5000)}>+5s</button>\n          <button onClick={() => handleClick(10000)}>+10s</button>\n          <button onClick={() => handleClick(15000)}>+15s</button>\n        </div>\n      )}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Idle Detection with useIdle React Hook\nDESCRIPTION: This example demonstrates how to use the useIdle hook to detect when a user becomes idle after 5 seconds of inactivity. The component displays different UI elements based on the idle state, showing either 'Active' or 'Idle' status with corresponding visual indicators.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useIdle.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useIdle } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const idle = useIdle(5000);\n  return (\n    <section>\n      <h1>useIdle</h1>\n      <div>\n        <span className={idle ? \"idle\" : \"\"} />\n        <label>Status: {idle ? \"Idle\" : \"Active\"}</label>\n      </div>\n      {idle ? <p>Time to move your mouse</p> : <p>Hold still and wait</p>}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useScript Hook to Load External JavaScript in React\nDESCRIPTION: This example demonstrates how to use the useScript hook to dynamically load the MooTools library and apply it to modify an element once loaded. The hook tracks the script's loading status and allows conditional rendering based on that status.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useScript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useScript } from \"@uidotdev/usehooks\";\nimport ScriptMeta from './ScriptMeta'\n\nexport default function App() {\n  const status = useScript(\n    `https://cdnjs.cloudflare.com/ajax/libs/mootools/1.6.0/mootools-core.js`,\n    {\n      removeOnUnmount: false,\n    }\n  );\n\n  React.useEffect(() => {\n    if (typeof window.$$ !== \"undefined\") {\n      const id = document.id(\"moo\");\n      id.setStyle(\"background-color\", \"var(--green)\");\n    }\n  }, [status]);\n\n  const isReady = status === \"ready\";\n\n  return (\n    <section>\n      <h1>useScript</h1>\n      <p>\n        <span id=\"moo\" className={isReady ? \"ready\" : \"\"} />\n        <label>Status: {status}</label>\n      </p>\n      {status === \"ready\" && (\n        <ScriptMeta title=\"MooTools\" status={status} meta={window.MooTools} />\n      )}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useDefault Hook in React\nDESCRIPTION: Example React component demonstrating the usage of useDefault hook. The hook manages state with initial and default values, allowing fallback to default value when state becomes null. Component includes buttons to set different values and display current state.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useDefault.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useDefault } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const initialState = { name: \"Tyler\" };\n  const defaultState = { name: \"Ben\" };\n\n  const [user, setUser] = useDefault(initialState, defaultState);\n\n  return (\n    <section>\n      <h1>useDefault</h1>\n\n      <button\n        title=\"Sets the value to Lynn\"\n        className=\"link\"\n        onClick={() => setUser({ name: \"Lynn\" })}\n      >\n        Lynn\n      </button>\n      <button\n        title=\"Sets the value to Tyler\"\n        className=\"link\"\n        onClick={() => setUser({ name: \"Tyler\" })}\n      >\n        Tyler\n      </button>\n      <button\n        title=\"Sets the value to null causing it to use the default value\"\n        className=\"link\"\n        onClick={() => setUser(null)}\n      >\n        Null\n      </button>\n      <pre>\n        <code>{JSON.stringify(user)}</code>\n      </pre>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Document Title Updates with useDocumentTitle in React\nDESCRIPTION: This snippet demonstrates how to use the useDocumentTitle hook to dynamically update the document title based on a counter state. The hook is imported from @uidotdev/usehooks and used within a React component that manages a count state.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useDocumentTitle.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useDocumentTitle } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [count, setCount] = React.useState(0);\n\n  useDocumentTitle(`Clicked ${count} times.`);\n  return (\n    <section>\n      <h1>useDocumentTitle</h1>\n      <h6>\n        <a\n          className=\"link\"\n          href=\"https://6vmc1n.csb.app/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Try in a new tab\n        </a>\n      </h6>\n      <button className=\"primary\" onClick={() => setCount(count + 1)>\n        Increment Count: {count}\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Tracking with usePrevious Hook in React\nDESCRIPTION: This example demonstrates how to use the usePrevious hook to track color changes in a React component. It showcases a UI that displays both the current and previous colors, with a button to randomly change the color, ensuring that the new color is different from the current one.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/usePrevious.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { usePrevious } from \"@uidotdev/usehooks\";\n\nfunction getRandomColor() {\n  const colors = [\"green\", \"blue\", \"purple\", \"red\", \"pink\"];\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\nexport default function App() {\n  const [color, setColor] = React.useState(getRandomColor());\n  const previousColor = usePrevious(color);\n\n  const handleClick = () => {\n    function getNewColor() {\n      const newColor = getRandomColor();\n      if (color === newColor) {\n        getNewColor();\n      } else {\n        setColor(newColor);\n      }\n    }\n    getNewColor();\n  };\n\n  return (\n    <section>\n      <h1>usePrevious</h1>\n      <button className=\"link\" onClick={handleClick}>\n        Next\n      </button>\n      <article>\n        <figure>\n          <p style={{ background: `var(--${previousColor})` }} />\n          <figcaption>Previous: {previousColor}</figcaption>\n        </figure>\n        <figure>\n          <p style={{ background: `var(--${color})` }} />\n          <figcaption>Current: {color}</figcaption>\n        </figure>\n      </article>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useVisibilityChange for Tab Away Tracking in React\nDESCRIPTION: This example demonstrates how to use the useVisibilityChange hook to track when a user tabs away from the page. The hook returns a boolean value indicating whether the document is currently visible, and the component uses this value to increment a counter each time the document becomes hidden.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useVisibilityChange.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useVisibilityChange } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const documentVisible = useVisibilityChange();\n  const [tabAwayCount, setTabAwayCount] = React.useState(0);\n\n  React.useEffect(() => {\n    if (documentVisible === false) {\n      setTabAwayCount((c) => c + 1);\n    }\n  }, [documentVisible]);\n\n  return (\n    <section>\n      <h1>useVisibilityChange</h1>\n      <div>Tab Away Count: {tabAwayCount}</div>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Distraction Tracking with usePageLeave React Hook\nDESCRIPTION: This example shows how to implement a distraction counter using the usePageLeave hook from @uidotdev/usehooks. The hook triggers a callback function whenever the user's cursor leaves the webpage, incrementing a counter to track how many times the user has been distracted.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/usePageLeave.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { usePageLeave } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [distractions, setDistractions] = React.useState(0);\n\n  usePageLeave(() => {\n    setDistractions((d) => d + 1);\n  });\n\n  return (\n    <section>\n      <h1>usePageLeave</h1>\n      <p>(Mouse out of the page)</p>\n      <h3>\n        You've been distracted {distractions}{\" \"}\n        {distractions === 1 ? \"time\" : \"times\"}.\n      </h3>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useRenderCount Hook in a React Component\nDESCRIPTION: This example demonstrates how to use the useRenderCount hook from the @uidotdev/usehooks library to track component render counts. The component displays both a counter state and the total number of renders, with a button to increment the counter and trigger re-renders.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useRenderCount.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useRenderCount } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const renderCount = useRenderCount();\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <section>\n      <header>\n        <h1>useRenderCount</h1>\n        <h6>(strict mode on)</h6>\n      </header>\n      <button className=\"primary\" onClick={() => setCount((c) => c + 1)}>\n        Increment\n      </button>\n      <p>Count: {count}</p>\n      <p>Render Count: {renderCount}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useLogger Hook with React Components\nDESCRIPTION: This example demonstrates how to implement the useLogger hook from @uidotdev/usehooks to track component lifecycle events. The code creates a parent App component with child components that use the useLogger hook to log their mounted, updated, and unmounted events with custom identifiers and props.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useLogger.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useLogger } from \"@uidotdev/usehooks\";\n\nfunction FirstChild(props) {\n  useLogger(props.name, props);\n  return (\n    <li className={props.isActive ? \"active\" : \"\"}>\n      <h5>{props.name}</h5>\n      <p>{props.count}</p>\n    </li>\n  );\n}\n\nexport default function App() {\n  const [count, setCount] = React.useState(0);\n\n  const handleClick = () => setCount(count + 1);\n\n  return (\n    <section>\n      <h1>useLogger</h1>\n      <h6>(Check the console)</h6>\n      <button className=\"primary\" onClick={handleClick}>\n        Increment Count\n      </button>\n      <ul>\n        {[\"First\", \"Second\", \"Third\"].map((item, index) => {\n          const isActive = count % 3 === index;\n          return (\n            <FirstChild\n              key={index}\n              name={item}\n              isActive={isActive}\n              count={count}\n            />\n          );\n        })}\n      </ul>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useRenderInfo Hook in a React Component\nDESCRIPTION: This code snippet demonstrates how to use the useRenderInfo hook in a React component. It creates a simple UI that displays rendering information and includes a button to trigger re-renders. The hook tracks the number of renders, time since last render, and current timestamp.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useRenderInfo.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useRenderInfo } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const info = useRenderInfo(\"App\");\n\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <section>\n      <h1>useRenderInfo</h1>\n      <button className=\"primary\" onClick={() => setCount(count + 1)>\n        Re-Render\n      </button>\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={2}>Render Info</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(info).map((key) => {\n            return (\n              <tr key={key}>\n                <th>{key}</th>\n                <td>{info[key]}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsFirstRender Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useIsFirstRender hook in a React component. It returns a boolean value indicating whether the current render is the first render. The example also includes a re-render button to show how the hook behaves on subsequent renders.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useIsFirstRender.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useIsFirstRender } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const isFirstRender = useIsFirstRender();\n  const [count, rerender] = React.useReducer((x) => x + 1, 1);\n\n  return (\n    <section>\n      <h1>useIsFirstRender</h1>\n      <h2>First Render? {isFirstRender ? \"Yes\" : \"No\"}</h2>\n      <button className=\"primary\" onClick={rerender}>\n        re-render\n      </button>\n      <p>Render Count: {count}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Favicon Updates with React useFavicon Hook\nDESCRIPTION: Example React component demonstrating the usage of useFavicon hook to dynamically change the webpage favicon. The component includes three buttons that switch between different favicon URLs for ui.dev, Bytes, and React Newsletter websites.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useFavicon.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useFavicon } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [favicon, setFavicon] = React.useState(\n    \"https://ui.dev/favicon/favicon-32x32.png\"\n  );\n\n  useFavicon(favicon);\n\n  return (\n    <section>\n      <h1>useFavicon</h1>\n\n      <button\n        title=\"Set the favicon to Bytes' logo\"\n        className=\"link\"\n        onClick={() =>\n          setFavicon(\"https://bytes.dev/favicon/favicon-32x32.png\")\n        }\n      >\n        Bytes\n      </button>\n      <button\n        title=\"Set the favicon to React Newsletter's logo\"\n        className=\"link\"\n        onClick={() =>\n          setFavicon(\"https://reactnewsletter.com/favicon/favicon-32x32.png\")\n        }\n      >\n        React Newsletter\n      </button>\n\n      <button\n        title=\"Set the favicon to uidotdev's logo\"\n        className=\"link\"\n        onClick={() => setFavicon(\"https://ui.dev/favicon/favicon-32x32.png\")}\n      >\n        ui.dev\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useRandomInterval Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useRandomInterval hook in a React component. It initializes a demo object, uses the hook to add hearts at random intervals, and provides a button to stop the interval.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useRandomInterval.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useRandomInterval } from \"@uidotdev/usehooks\";\nimport HeartsDemo from \"./Heart\";\n\nexport default function App() {\n  const demo = React.useRef(new HeartsDemo());\n  const clear = useRandomInterval(\n    () => {\n      demo.current.addHeart();\n    },\n    { minDelay: 50, maxDelay: 3000 }\n  );\n\n  React.useEffect(() => {\n    demo.current.loop();\n  }, []);\n\n  return (\n    <section>\n      <h1>useRandomInterval</h1>\n      <button className=\"link\" onClick={clear}>\n        Stop\n      </button>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePreferredLanguage Hook in React to Format Content Based on User's Language Preference\nDESCRIPTION: This snippet demonstrates how to implement the usePreferredLanguage hook from @uidotdev/usehooks. The hook returns the user's preferred language setting from the browser, which is then used to format a date according to the user's locale preferences.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/usePreferredLanguage.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { usePreferredLanguage } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const language = usePreferredLanguage();\n\n  return (\n    <section>\n      <h1>usePreferredLanguage</h1>\n      <p>Change language here - chrome://settings/languages</p>\n      <h2>\n        The correct date format for <pre>{language}</pre> is{\" \"}\n        <time>{new Date(Date.now()).toLocaleDateString(language)}</time>\n      </h2>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsClient Hook in a React Component\nDESCRIPTION: This code snippet demonstrates how to use the useIsClient hook in a React component. It imports the hook from '@uidotdev/usehooks' and uses it to conditionally render text based on whether the code is running on the client-side or not.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useIsClient.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useIsClient } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const isClient = useIsClient();\n\n  return (\n    <section>\n      <h1>useIsClient</h1>\n      <h6>Is Client? </h6>\n      <p>{isClient ? \"If you can see this ... you already know\" : \"No\"}</p>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useContinuousRetry Hook in React\nDESCRIPTION: This example demonstrates how to use the useContinuousRetry hook to repeatedly call a function until a condition is met. The hook checks if the count state is greater than 10, retrying every 1000ms, and returns a boolean indicating whether the condition has been resolved.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/src/content/hooks/useContinuousRetry.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\nimport { useContinuousRetry } from \"@uidotdev/usehooks\";\n\nexport default function App() {\n  const [count, setCount] = React.useState(0);\n  const hasResolved = useContinuousRetry(() => {\n    console.log(\"retrying\");\n    return count > 10;\n  }, 1000);\n\n  return (\n    <section>\n      <h1>useContinuousRetry</h1>\n      <button className=\"primary\" onClick={() => setCount(count + 1)}>\n        {count}\n      </button>\n      <pre>{JSON.stringify({ hasResolved, count }, null, 2)}</pre>\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Standard useHooks Package\nDESCRIPTION: Command to install the standard version of the useHooks package using npm.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @uidotdev/usehooks\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental useHooks Package\nDESCRIPTION: Command to install the experimental version of the useHooks package along with required experimental React dependencies.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @uidotdev/usehooks@experimental react@experimental react-dom@experimental\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Shows the folder and file organization of an Astro project, including public assets, source components, layouts, pages, and sections directories.\nSOURCE: https://github.com/uidotdev/usehooks/blob/main/usehooks.com/README.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n├── public/\n│   └── favicon.png\n│   └── img\n├── src/\n│   ├── components/\n│   │   └── Button.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   ├── pages/\n│   │   └── index.astro\n│   ├── sections/\n│   │   └── HomeHero.astro\n└── package.json\n```"
  }
]