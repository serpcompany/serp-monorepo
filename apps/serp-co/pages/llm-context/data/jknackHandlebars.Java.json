[
  {
    "owner": "jknack",
    "repo": "handlebars.java",
    "content": "TITLE: Compiling Handlebars Template Inline - Java\nDESCRIPTION: This snippet demonstrates how to compile a Handlebars template inline and apply data to it. It requires the Handlebars library. The output will print \"Hello Handlebars.java!\" to the console.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHandlebars handlebars = new Handlebars();\n\nTemplate template = handlebars.compileInline(\"Hello {{this}}!\");\n\nSystem.out.println(template.apply(\"Handlebars.java\"));\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency - XML\nDESCRIPTION: This snippet shows the Maven dependency configuration required to include Handlebars.java in a project. Replace `${handlebars-version}` with the desired version number.  The snippet ensures the Handlebars library is available for use in your Java project.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.jknack</groupId>\n    <artifactId>handlebars</artifactId>\n    <version>${handlebars-version}</version>\n  </dependency>\n```\n\n----------------------------------------\n\nTITLE: Registering Helper with Helper Interface - Java\nDESCRIPTION: This code shows how to register a helper function using the `Helper` interface in Handlebars.java. The `apply` method within the `Helper` implementation defines the logic of the helper, which receives the context object and options as arguments.  The helper returns a `CharSequence` which will be rendered in the template.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelper(\"blog\", new Helper<Blog>() {\n  public CharSequence apply(Blog blog, Options options) {\n    return options.fn(blog);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Helpers with Javascript - JavaScript\nDESCRIPTION: This code shows how to register a helper function using JavaScript with Handlebars.  The example registers a simple `hello` helper that prepends \"Hello \" to the context. This demonstrates integrating JavaScript helpers with Handlebars.java.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nHandlebars.registerHelper('hello', function (context) {\n return 'Hello ' + context;\n})\n```\n\n----------------------------------------\n\nTITLE: Helper Source Class Example - Java\nDESCRIPTION: This code illustrates how to use a `HelperSource` class to register helper functions in Handlebars.java.  Public methods within the class, returning a `CharSequence`, are automatically registered as helpers.  The method name becomes the helper name. Parameters such as context and options are optional but must be positioned correctly.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class HelperSource {\n  public String blog(Blog blog, Options options) {\n    return options.fn(blog);\n  }\n\n  public static String now() {\n    return new Date().toString();\n  }\n\n  public String render(Blog context, String param0, int param1, boolean param2, Options options) {\n    return ...\n  }\n}\n\n...\n\nhandlebars.registerHelpers(new HelperSource());\n```\n\n----------------------------------------\n\nTITLE: Accessing Helper Parameters - Java\nDESCRIPTION: This code shows how to access parameters passed to a helper function in Handlebars.java using the `options.param()` method. Parameters are accessed by their index.  The example also demonstrates how to define and pass parameters in the template.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\n  public CharSequence apply(List<Blog> list, Options options) {\n    String p0 = options.param(0);\n    assertEquals(\"param0\", p0);\n    Integer p1 = options.param(1);\n    assertEquals(123, p1);\n    ...\n  }\n});\n\nBean bean = new Bean();\nbean.setParam1(123);\n\nTemplate template = handlebars.compileInline(\"{{#blog-list blogs \\\"param0\\\" param1}}{{/blog-list}}\");\ntemplate.apply(bean);\n```\n\n----------------------------------------\n\nTITLE: Accessing Helper Hash Parameters - Java\nDESCRIPTION: This code shows how to access hash parameters (named parameters) passed to a helper function using the `options.hash(key)` method in Handlebars.java. The example also shows how to define and pass hash parameters in the template using `key=\"value\"` syntax.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\n  public CharSequence apply(List<Blog> list, Options options) {\n    String class = options.hash(\"class\");\n    assertEquals(\"blog-css\", class);\n    ...\n  }\n});\n\nhandlebars.compileInline(\"{{#blog-list blogs class=\\\"blog-css\\\"}}{{/blog-list}}\");\n```\n\n----------------------------------------\n\nTITLE: JSON Helper usage - Template\nDESCRIPTION: This snippet shows how to use the 'json' helper within a Handlebars template. The helper takes a context object and optional parameters for specifying a Jackson View, escaping HTML characters, and pretty-printing the JSON output. It renders a java object to JSON.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n {{json context [view=\"foo.MyFullyQualifiedClassName\"] [escapeHTML=false] [pretty=false]}}\n```\n\nLANGUAGE: html\nCODE:\n```\n {{json context [view=\"myView\"] [escapeHTML=false] [pretty=false]}}\n```\n\n----------------------------------------\n\nTITLE: String Parameters Configuration and Helper - Java\nDESCRIPTION: This snippet demonstrates how to configure Handlebars.java to use string parameters and register a helper. Setting stringParams to true instructs Handlebars.java to resolve a parameter to its name if the value isn't present in the context. The example registers a 'sayHi' helper that uses the first parameter to construct a greeting.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_34\n\nLANGUAGE: java\nCODE:\n```\n  Handlebars handlebars = new Handlebars()\n    .stringParams(true);\n  \n  handlebars.registerHelper(\"sayHi\", new Helper<Object>() {\n    public Object apply(Object context, Options options) {\n      return \"Hello \" + options.param(0) + \"!\";\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Registering List Helper with Interface - Java\nDESCRIPTION: This example demonstrates registering a helper function that iterates over a list of `Blog` objects and renders them within an unordered list. It uses the `Helper` interface and `options.fn` to apply the template to each element in the list.  The final result is a `Handlebars.SafeString` to avoid escaping the HTML.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelper(\"blog-list\", new Helper<List<Blog>>() {\n  public CharSequence apply(List<Blog> list, Options options) {\n    String ret = \"<ul>\";\n    for (Blog blog: list) {\n      ret += \"<li>\" + options.fn(blog) + \"</li>\";\n    }\n    return new Handlebars.SafeString(ret + \"</ul>\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Assign Helper Example in Handlebars\nDESCRIPTION: Demonstrates the usage of the assign helper in Handlebars.java. The assign helper creates auxiliary/temporary variables within the template. In the example, it assigns the value 'benefits.{{type}}.title' to the variable 'benefitsTitle', which is then used in an i18n function.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/handlebars-helpers/README.md#_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign \"benefitsTitle\"}} benefits.{{type}}.title {{/assign}}\n<span class=\"benefit-title\"> {{i18n benefitsTitle}} </span>\n```\n\n----------------------------------------\n\nTITLE: Precompiling Handlebars Template to JavaScript - HTML\nDESCRIPTION: This snippet shows how to precompile a Handlebars template to JavaScript using the `precompile` helper. It embeds the compiled template within a `<script>` tag.  The output is JavaScript code that can be used client-side.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\">\n{{precompile \"user\"}}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache - Java\nDESCRIPTION: This example shows how to configure Handlebars.java to use a custom cache implementation. It creates a new Handlebars instance and sets the cache using the with() method, passing in an instance of a custom TemplateCache implementation (MyCache).  This allows developers to use caching strategies that meet their specific needs.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nHandlebars hbs = new Handlebars()\n  .with(new MyCache());\n```\n\n----------------------------------------\n\nTITLE: Extending Context Stack - Java\nDESCRIPTION: This code demonstrates how to extend the context stack in Handlebars.java to make data available to all templates.  It creates a new `Context` by combining the original model with additional data (e.g., the current logged-in user) using `Context.newBuilder()`.  The `Context` must be destroyed after usage via `context.destroy()`.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nhookContextStack(Object model, Template template) {\n    User user = ....;// Get the logged-in user from somewhere\n    Map moreData = ...;\n    Context context = Context\n      .newBuilder(model)\n        .combine(\"user\", user)\n        .combine(moreData)\n        .build();\n    template.apply(context);\n    context.destroy();\n  }\n```\n\n----------------------------------------\n\nTITLE: Spring Message Helper Usage - Template\nDESCRIPTION: This snippet shows how to use the 'message' helper within a Handlebars template when using the handlebars-springmvc module.  The helper retrieves messages from the Spring MessageSource, using a code and optional arguments and a default message if the code is not found.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n{{message \"code\" [arg]* [default=\"default message\"]}}\n```\n\n----------------------------------------\n\nTITLE: Loading Template from Classpath - Java\nDESCRIPTION: This snippet demonstrates how to load a template named 'mytemplate.hbs' from the classpath and apply data to it.  It utilizes the Handlebars library and assumes 'mytemplate.hbs' is present in the classpath root.  The output will print \"Hello Handlebars.java!\" to the console.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvar handlebars = new Handlebars();\n\nvar template = handlebars.compile(\"mytemplate\");\n\nSystem.out.println(template.apply(\"Handlebars.java\"));\n```\n\n----------------------------------------\n\nTITLE: Using Custom TemplateLoader - Java\nDESCRIPTION: This snippet illustrates how to use a custom TemplateLoader.  It assumes you have a custom TemplateLoader implementation.  It sets up a Handlebars instance with the custom loader, allowing you to load templates from a specific location.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nTemplateLoader loader = ...;\nHandlebars handlebars = new Handlebars(loader);\n```\n\n----------------------------------------\n\nTITLE: Registering HelperSource Class - Java\nDESCRIPTION: This snippet demonstrates a simplified approach to registering helpers using a `HelperSource` class. By passing the `HelperSource.class` directly to `registerHelpers`, all static methods within the class are registered as helpers in Handlebars.java.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelpers(HelperSource.class);\n```\n\n----------------------------------------\n\nTITLE: JacksonHelper usage - Java\nDESCRIPTION: This Java code demonstrates how to register the JacksonHelper with a Handlebars instance. The JacksonHelper allows rendering Java objects as JSON within Handlebars templates. It showcases registering the singleton instance and using view alias.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_36\n\nLANGUAGE: java\nCODE:\n```\n handlebars.registerHelper(\"json\", JacksonHelper.INSTANCE);\n```\n\nLANGUAGE: java\nCODE:\n```\n handlebars.registerHelper(\"json\", new JacksonHelper().viewAlias(\"myView\",\n   foo.MyFullyQualifiedClassName.class);\n```\n\n----------------------------------------\n\nTITLE: Precompiling Handlebars templates with Maven\nDESCRIPTION: This XML snippet demonstrates how to configure the handlebars-maven-plugin to precompile Handlebars templates into JavaScript. It specifies the output file, template prefix and suffix, the Handlebars JavaScript file to use, whether to minimize the output, runtime location, AMD module settings, encoding, and the list of templates to process.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/handlebars-maven-plugin/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.github.jknack</groupId>\n  <artifactId>handlebars-maven-plugin</artifactId>\n  <version>${handlebars-version}</version>\n  <executions>\n    <execution>\n      <id>precompile</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>precompile</goal>\n      </goals>\n      <configuration>\n        <output>${project.build.directory}/${project.build.finalName}/js/helpers.js</output>\n        <prefix>${basedir}/src/main/webapp</prefix>\n        <suffix>.hbs</suffix>\n        <handlebarsJsFile>/handlebars-v1.3.0.js</handlebarsJsFile>\n        <minimize>false</minimize>\n        <runtime></runtime>\n        <amd>false</amd>\n        <encoding>UTF-8</encoding>\n        <templates>\n          <template>mytemplateA</template>\n          <template>mytemplateB</template>\n        </templates>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSafe Template Interface - Java\nDESCRIPTION: This code demonstrates how to create a type-safe template interface in Handlebars.java by extending the `TypeSafeTemplate` interface.  It defines setter methods for template variables, allowing for type-safe data binding. The `as()` method is used to create an instance of the type-safe template.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// 1\npublic static interface UserTemplate extends TypeSafeTemplate<User> {\n\n  // 2\n  public UserTemplate setAge(int age);\n\n  public UserTemplate setRole(String role);\n\n}\n\n// 3\nUserTemplate userTmpl = handlebars.compileInline(\"{{name}} is {{age}} years old!\")\n  .as(UserTemplate.class);\n\nuserTmpl.setAge(32);\n\nassertEquals(\"Edgar is 32 years old!\", userTmpl.apply(new User(\"Edgar\")));\n```\n\n----------------------------------------\n\nTITLE: Number Helpers (isEven) Example in Handlebars\nDESCRIPTION: Illustrates the usage of the isEven helper in Handlebars.java. The isEven helper determines if a number is even and outputs 'even' or a custom string if provided. The first example outputs 'even' if 'number' is even. The second outputs 'row-even' if number is even.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/handlebars-helpers/README.md#_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{isEven number}} // output: even\n\n{{isEven number \"row-even\"}} // output: row-even\n```\n\n----------------------------------------\n\nTITLE: Setting Prefix and Suffix for TemplateLoader - Java\nDESCRIPTION: This snippet shows how to set the prefix and suffix for a ClassPathTemplateLoader.  It configures the loader to look for templates in the '/templates' directory with the '.html' extension. When compiling 'mytemplate', Handlebars.java will look for '/templates/mytemplate.html'.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nTemplateLoader loader = new ClassPathTemplateLoader();\nloader.setPrefix(\"/templates\");\nloader.setSuffix(\".html\");\nHandlebars handlebars = new Handlebars(loader);\n\nTemplate template = handlebars.compile(\"mytemplate\");\n\nSystem.out.println(template.apply(\"Handlebars.java\"));\n```\n\n----------------------------------------\n\nTITLE: Embedding Handlebars Template - HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed a Handlebars template inside a `<script>` tag using the `embedded` helper. The template is embedded with a specific ID and type, making it accessible from JavaScript.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{{embedded \"user\"}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Helper Hash Parameters - Java\nDESCRIPTION: This code demonstrates how to define default values for hash parameters using the `options.hash(key, defaultValue)` method in Handlebars.java. If a hash parameter is not provided in the template, the default value will be used.  The example shows the helper definition and a usage example without the hash parameter in the template.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\n  public CharSequence apply(List<Blog> list, Options options) {\n    String class = options.hash(\"class\", \"blog-css\");\n    assertEquals(\"blog-css\", class);\n    ...\n  }\n});\n\nhandlebars.compileInline(\"{{#blog-list blogs}}{{/blog-list}}\");\n```\n\n----------------------------------------\n\nTITLE: Helper Missing Registration - Java\nDESCRIPTION: This code demonstrates how to register a 'helperMissing' helper in Handlebars.java.  This helper is invoked when a requested helper cannot be resolved. The example defines a helper that returns the text content of the options, allowing for custom handling of missing helpers.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_33\n\nLANGUAGE: java\nCODE:\n```\n  handlebars.registerHelperMissing(new Helper<Object>() {\n    @Override\n    public CharSequence apply(final Object context, final Options options) throws IOException {\n      return options.fn.text();\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Executing Handlebars precompile goal via Maven command\nDESCRIPTION: This shell command demonstrates how to directly execute the precompile goal of the handlebars-maven-plugin from the command line. It bypasses the need for explicit configuration within the pom.xml if defaults are acceptable.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/handlebars-maven-plugin/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn handlebars:precompile\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Value Resolvers - Java\nDESCRIPTION: This code shows how to configure Handlebars.java to use multiple value resolvers. The resolvers are applied in the order they are specified.  This allows combining different strategies for resolving values within templates.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nContext context = Context\n  .newBuilder(model)\n  .resolver(\n      MapValueResolver.INSTANCE,\n      JavaBeanValueResolver.INSTANCE,\n      FieldValueResolver.INSTANCE\n  ).build();\n```\n\n----------------------------------------\n\nTITLE: Using JavaBeanValueResolver - Java\nDESCRIPTION: This code shows how to configure Handlebars.java to use the `JavaBeanValueResolver`. This resolver resolves values from public methods prefixed with \"get/is\".\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nContext context = Context\n  .newBuilder(model)\n  .resolver(JavaBeanValueResolver.INSTANCE)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Using JsonNodeValueResolver - Java\nDESCRIPTION: This code shows how to configure Handlebars.java to use the `JsonNodeValueResolver`. This resolver resolves values from `JsonNode` objects.  Requires either handlebars-json or handlebars-jackson2 modules.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nContext context = Context\n  .newBuilder(model)\n  .resolver(JsonNodeValueResolver.INSTANCE)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Using MapValueResolver - Java\nDESCRIPTION: This code shows how to configure Handlebars.java to use the `MapValueResolver`. This resolver resolves values from a `java.util.Map` objects.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nContext context = Context\n  .newBuilder(model)\n  .resolver(MapValueResolver.INSTANCE)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Using MethodValueResolver - Java\nDESCRIPTION: This code shows how to configure Handlebars.java to use the `MethodValueResolver`. This resolver resolves values from public methods.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nContext context = Context\n  .newBuilder(model)\n  .resolver(MethodValueResolver.INSTANCE)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Converting Java Resource Bundles to JavaScript with Maven\nDESCRIPTION: This XML snippet shows the configuration for converting Java Resource Bundles to JavaScript using the i18n.js API. It defines the output directory, bundle name, whether to merge bundles into a single file, AMD module settings, and encoding.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/handlebars-maven-plugin/README.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.github.jknack</groupId>\n  <artifactId>handlebars-maven-plugin</artifactId>\n  <version>${handlebars-version}</version>\n  <executions>\n    <execution>\n      <id>i18njs</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>i18njs</goal>\n      </goals>\n      <configuration>\n        <output>${project.build.directory}/${project.build.finalName}/js</output>\n        <bundle>messages</bundle>\n        <merge>false</merge>\n        <amd>false</amd>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency - XML\nDESCRIPTION: This XML snippet shows the Maven dependency configuration for the handlebars-json module. It includes the groupId, artifactId, and version required to include the dependency in a Maven project. This module provides integration with Jackson 1.x.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n <dependency>\n   <groupId>com.github.jknack</groupId>\n   <artifactId>handlebars-json</artifactId>\n   <version>${handlebars-version}</version>\n </dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Executing i18njs goal via Maven command\nDESCRIPTION: This shell command shows how to execute the i18njs goal of the handlebars-maven-plugin directly from the command line. This provides a quick way to convert Resource Bundles to JavaScript without needing full XML configuration.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/handlebars-maven-plugin/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn handlebars:i18njs\n```\n\n----------------------------------------\n\nTITLE: I18nJs Helper - JavaScript\nDESCRIPTION: This snippet shows the JavaScript code generated by the `i18nJs` helper, which translates a ResourceBundle into JavaScript. It configures the I18n library with locale and translations. The generated JavaScript code is designed to work with the I18n.js library.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n  I18n.defaultLocale = 'es_AR';\n  I18n.locale = 'es_AR';\n  I18n.translations = I18n.translations || {};\n  // Spanish (Argentina)\n  I18n.translations['es_AR'] = {\n    \"hello\": \"Hi {{arg0}}!\"\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Block Helper Exception Handling - Java\nDESCRIPTION: This code shows how exceptions thrown from a block helper in Handlebars.java are handled and reported. When an exception is thrown, Handlebars.java adds the filename, line number, column number, and surrounding code to the error message.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_21\n\nLANGUAGE: java\nCODE:\n```\npublic CharSequence apply(final Object context, final Options options) throws IOException {\n  if (context == null) {\n    throw new IllegalArgumentException(\n        \"found 'null', expected 'string'\");\n  }\n  if (!(context instanceof String)) {\n    throw new IllegalArgumentException(\n        \"found '\" + context + \"', expected 'string'\");\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Default Template Retrieval - Java\nDESCRIPTION: This code demonstrates the default template retrieval logic in Handlebars.java when no cache is configured. It bypasses caching and directly parses the TemplateSource using the provided Parser, returning the resulting Template.  The Parser dependency is crucial for template compilation.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nTemplate get(TemplateSource source, Parser parser) throws IOException {\n  return parser.parse(source);\n}\n```\n\n----------------------------------------\n\nTITLE: MissingValueResolver usage - Java\nDESCRIPTION: This snippet illustrates how to use a MissingValueResolver in Handlebars.java (deprecated after version 1.3.0). It defines a MissingValueResolver that provides default values for unresolved variables. The resolver's resolve() method should return a default value or throw an exception, then registers it with the Handlebars instance using the with() method.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_32\n\nLANGUAGE: java\nCODE:\n```\n  MissingValueResolver missingValueResolver = new MissingValueResolver() {\n    public String resolve(Object context, String name) {\n      //return a default value or throw an exception\n      ...;\n    }\n  };\n  Handlebars handlebars = new Handlebars().with(missingValueResolver);\n```\n\n----------------------------------------\n\nTITLE: Value Resolvers configuration - Java\nDESCRIPTION: This Java code demonstrates how to configure value resolvers in a HandlebarsViewResolver, which is used in a Spring MVC environment. Value resolvers enhance the data retrieval process, providing flexibility to resolve values from various sources.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_40\n\nLANGUAGE: java\nCODE:\n```\n HandlebarsViewResolver viewResolver = ...;\n\n viewResolver.setValueResolvers(...);\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Handlebars Proto - XML\nDESCRIPTION: This XML snippet defines the Maven dependency needed to include handlebars-proto in your project.  Replace `${current-version}` with the appropriate version. This enables the use of the Handlebars.java server.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.github.jknack</groupId>\n  <artifactId>handlebars-proto</artifactId>\n  <version>${current-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency - XML\nDESCRIPTION: This XML snippet shows the Maven dependency configuration for the handlebars-jackson module. It includes the groupId, artifactId, and version required to include the dependency in a Maven project. This module provides integration with Jackson 2.x.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n <dependency>\n   <groupId>com.github.jknack</groupId>\n   <artifactId>handlebars-jackson</artifactId>\n   <version>${handlebars-version}</version>\n </dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency - XML\nDESCRIPTION: This XML snippet shows the Maven dependency configuration for the handlebars-springmvc module. It includes the groupId, artifactId, and version required to include the dependency in a Maven project. This module provides integration with Spring MVC.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n <dependency>\n   <groupId>com.github.jknack</groupId>\n   <artifactId>handlebars-springmvc</artifactId>\n   <version>${handlebars-version}</version>\n </dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Example Json Structure - Json\nDESCRIPTION: This is an example of json structure used to showcase a difference between Handlebars.java and Handlebars.js with regards to scope resolution.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"parent\",\n  \"child\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Handlebars template - Html\nDESCRIPTION: This is an example of handlebars template used to showcase a difference between Handlebars.java and Handlebars.js with regards to scope resolution.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_43\n\nLANGUAGE: html\nCODE:\n```\nHello {{#child}}{{value}}{{/child}}\n```\n\nLANGUAGE: html\nCODE:\n```\nHello {{#child}}{{this.value}}{{/child}}\n```\n\n----------------------------------------\n\nTITLE: Dependency Declaration\nDESCRIPTION: This snippet shows a dependency on slf4j-api, a logging facade, using a text-based dependency management style. It specifies the artifact ID, group ID, type, and version.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_44\n\nLANGUAGE: text\nCODE:\n```\n+- org.slf4j:slf4j-api:jar:1.6.4\n```\n\n----------------------------------------\n\nTITLE: Setting Handlebars.js File - Java\nDESCRIPTION: This Java snippet sets the Handlebars.js file to use for precompilation. It allows you to specify a different version of Handlebars.js (e.g., 2.x) for compiling templates. This example configures the Handlebars instance to use '/handlebars-v2.0.0.js'.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nHandlebars handlebars = new Handlebars();\nhandlebars.handlebarsJsFile(\"/handlebars-v2.0.0.js\");\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Helper File - Java\nDESCRIPTION: This code shows how to register JavaScript helpers from a file with Handlebars.java.  The `registerHelpers` method is used with a `File` object pointing to the JavaScript file.  This allows you to write helpers in JavaScript and use them in your Java Handlebars templates.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelpers(new File(\"helpers.js\"));\n```\n\n----------------------------------------\n\nTITLE: TemplateCache Interface Definition - Java\nDESCRIPTION: This code snippet defines the TemplateCache interface in Handlebars.java.  It outlines methods for clearing the cache, evicting specific entries based on the TemplateSource, and retrieving a Template based on the TemplateSource and Parser. The interface provides an abstraction for different caching strategies.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n public interface TemplateCache {\n\n  /**\n   * Remove all mappings from the cache.\n   */\n  void clear();\n\n  /**\n   * Evict the mapping for this source from this cache if it is present.\n   *\n   * @param source the source whose mapping is to be removed from the cache\n   */\n  void evict(TemplateSource source);\n\n  /**\n   * Return the value to which this cache maps the specified key.\n   *\n   * @param source source whose associated template is to be returned.\n   * @param parser The Handlebars parser.\n   * @return A template.\n   * @throws IOException If input can't be parsed.\n   */\n  Template get(TemplateSource source, Parser parser) throws IOException;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Helper Parameters - Java\nDESCRIPTION: This code demonstrates how to define default values for helper parameters using the `options.param(index, defaultValue)` method in Handlebars.java. If a parameter is not provided in the template, the default value will be used.  The example shows the definition of the helper and a usage example with no parameters in the template.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\n  public CharSequence apply(List<Blog> list, Options options) {\n    String p0 = options.param(0, \"param0\");\n    assertEquals(\"param0\", p0);\n    Integer p1 = options.param(1, 123);\n    assertEquals(123, p1);\n    ...\n  }\n});\n\nTemplate template = handlebars.compileInline(\"{{#blog-list blogs}}{{/blog-list}}\");\n```\n\n----------------------------------------\n\nTITLE: Using FieldValueResolver - Java\nDESCRIPTION: This code shows how to configure Handlebars.java to use the `FieldValueResolver`. This resolver resolves values from no-static fields.\nSOURCE: https://github.com/jknack/handlebars.java/blob/master/README.md#_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nContext context = Context\n  .newBuilder(model)\n  .resolver(FieldValueResolver.INSTANCE)\n  .build();\n```"
  }
]