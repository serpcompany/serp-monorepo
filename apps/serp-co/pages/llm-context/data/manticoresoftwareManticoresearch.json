[
  {
    "owner": "manticoresoftware",
    "repo": "manticoresearch",
    "content": "TITLE: Configuring a Table for KNN Search in SQL\nDESCRIPTION: Creates a table with a float_vector attribute configured for HNSW-based KNN search with L2 distance metric and 4-dimensional vectors.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table test ( title text, image_vector float_vector knn_type='hnsw' knn_dims='4' hnsw_similarity='l2' );\n```\n\n----------------------------------------\n\nTITLE: Using Implicit AND Operator in Manticore Search\nDESCRIPTION: Demonstrates the implicit AND operator where both terms must be found in matching documents. There is no explicit AND operator in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nhello  world\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on Debian\nDESCRIPTION: Commands to download the Manticore repository, install the Manticore Search engine with columnar library, and start the service on Debian.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.manticoresearch.com/manticore-repo.noarch.deb\nsudo dpkg -i manticore-repo.noarch.deb\nsudo apt update\nsudo apt install manticore manticore-columnar-lib\nsudo systemctl start manticore\n```\n\n----------------------------------------\n\nTITLE: Finding Similar Documents by ID with JSON API\nDESCRIPTION: Uses the JSON API to find documents similar to a specific document ID in the vector space, demonstrating how to implement a \"similar items\" feature.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"test\",\n  \"knn\":\n  {\n    \"field\": \"image_vector\",\n    \"doc_id\": 1,\n    \"k\": 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: General Syntax for Options in SQL and HTTP JSON\nDESCRIPTION: Examples showing the general syntax for specifying search options in both SQL and HTTP JSON formats. The SQL format uses OPTION keyword followed by option-value pairs, while the HTTP JSON format includes an 'options' object within the search request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... [OPTION <optionname>=<value> [ , ... ]] [/*+ [NO_][ColumnarScan|DocidIndex|SecondaryIndex(<attribute>[,...])]] /*]\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n    \"table\" : \"table_name\",\n    \"options\":   \n    {\n        \"optionname\": \"value\",\n        \"optionname2\": <value2>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting and Ranking with WEIGHT and MATCH in Manticore Search (SQL)\nDESCRIPTION: Uses the WEIGHT() function to rank and return matched results with their computed scores, illustrating both the syntax and typical output layout from an SQL client. Demonstrates ordering primarily by relevance score, followed by a tie-breaker attribute, and later examines detailed meta stats using SHOW META for query diagnostics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SELECT *,WEIGHT() FROM testrt WHERE MATCH('\"list of business laptops\"/3');\n+------+------+-------------------------------------+---------------------------+----------+\n| id   | gid  | title                               | content                   | weight() |\n+------+------+-------------------------------------+---------------------------+----------+\n|    1 |   10 | List of HP business laptops         | Elitebook Probook         |     2397 |\n|    2 |   10 | List of Dell business laptops       | Latitude Precision Vostro |     2397 |\n|    3 |   20 | List of Dell gaming laptops         | Inspirion Alienware       |     2375 |\n|    5 |   30 | List of ASUS ultrabooks and laptops | Zenbook Vivobook          |     2375 |\n+------+------+-------------------------------------+---------------------------+----------+\n4 rows in set (0.00 sec)\n\n\nmysql> SHOW META;\n+----------------+----------+\n| Variable_name  | Value    |\n+----------------+----------+\n| total          | 4        |\n| total_found    | 4        |\n| total_relation | eq       |\n| time           | 0.000    |\n| keyword[0]     | list     |\n| docs[0]        | 5        |\n| hits[0]        | 5        |\n| keyword[1]     | of       |\n| docs[1]        | 4        |\n| hits[1]        | 4        |\n| keyword[2]     | business |\n| docs[2]        | 2        |\n| hits[2]        | 2        |\n| keyword[3]     | laptops  |\n| docs[3]        | 5        |\n| hits[3]        | 5        |\n+----------------+----------+\n16 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Document Update Operations\nDESCRIPTION: Examples of updating document fields using different client libraries. Shows how to update a specific document by ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nupdate products set price=18.5 where id = 1513686608316989452;\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /update\n{\n  \"table\": \"products\",\n  \"id\": 1513686608316989452,\n  \"doc\":\n  {\n    \"price\": 18.5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Manticore using SQL\nDESCRIPTION: SQL command to create a table named 'products' with text and float fields and English stemming morphology enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncreate table products(title text, price float) morphology='stem_en';\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with PHP Client\nDESCRIPTION: PHP code to initialize and configure the Manticore Search PHP client library for connecting to a Manticore server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// https://github.com/manticoresoftware/manticoresearch-php\nrequire_once __DIR__ . '/vendor/autoload.php';\n$config = ['host'=>'127.0.0.1','port'=>9308];\n$client = new \\Manticoresearch\\Client($config);\n```\n\n----------------------------------------\n\nTITLE: Creating Forum Table with Mixed Data Types\nDESCRIPTION: Creates a forum table with text fields (title, content) and attributes (author_id, forum_id, post_date) using different client implementations. The table structure demonstrates both full-text fields and non-indexed attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE forum(title text, content text, author_id int, forum_id int, post_date timestamp);\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"CREATE TABLE forum(title text, content text, author_id int, forum_id int, post_date timestamp)\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('forum');\n$index->create([\n    'title'=>['type'=>'text'],\n\t'content'=>['type'=>'text'],\n\t'author_id'=>['type'=>'int'],\n\t'forum_id'=>['type'=>'int'],\n\t'post_date'=>['type'=>'timestamp']\n]);\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable forum\n{\n\ttype = rt\n\tpath = forum\n\n\t# when configuring fields via config, they are indexed (and not stored) by default\n\trt_field = title\n\trt_field = content\n\n\t# this option needs to be specified for the field to be stored\n\tstored_fields = title, content\n\n\trt_attr_uint = author_id\n\trt_attr_uint = forum_id\n\trt_attr_timestamp = post_date\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Query String Search in Rust for Manticore Search\nDESCRIPTION: Demonstrates how to execute a query_string search using Rust with Manticore Search. It searches for 'find joe fast' within 2 words in the 'comment_text' field of the 'hn_small' table and returns the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\nlet query = SearchQuery {\n     query_string: Some(serde_json::json!(\"@comment_text \\\"find joe fast \\\"/2\").into()),\n    ..Default::default()\n};\nlet search_req = SearchRequest {\n    table: \"hn_small\".to_string(),\n    query: Some(Box::new(query)),\n    source: serde_json::json!([\"story_author\", \"comment_author\"]),\n    limit: serde_json::json!(1),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using Java in Manticore Search\nDESCRIPTION: This snippet shows how to insert documents into a real-time table named 'products' using the Java client for Manticore Search. It demonstrates inserting documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nInsertDocumentRequest newdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){{\n    put(\"title\",\"Crossbody Bag with Tassel\");\n    put(\"price\",19.85);\n}};\nnewdoc.index(\"products\").id(1L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\n\nnewdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){{\n    put(\"title\",\"Crossbody Bag with Tassel\");\n}};\nnewdoc.index(\"products\").id(2L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\n\nnewdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){{\n    put(\"title\",\"Yellow bag\");\n }};\nnewdoc.index(\"products\").id(0L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore Java Client\nDESCRIPTION: Shows how to programmatically construct a deletion request in Java for records in 'products' index where price is less than or equal to 10, using nested HashMaps for the structured query, which is then set on a DeleteDocumentRequest object and sent to the API. The code assumes prior setup and import of Manticore client Java classes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nDeleteDocumentRequest deleteRequest = new DeleteDocumentRequest();\\nquery = new HashMap<String,Object>();\\nquery.put(\\\"range\\\",new HashMap<String,Object>(){{\\n    put(\\\"price\\\",new HashMap<String,Object>(){{\\n        put(\\\"lte\\\",10);\\n    }});\\n}});\\ndeleteRequest.index(\\\"products\\\").setQuery(query);\\nindexApi.delete(deleteRequest);\\n\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with JSON in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the /bulk endpoint with JSON. The request uses NDJSON format where each line contains a single JSON operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /bulk\n\n{ \"delete\" : { \"table\" : \"test\", \"id\" : 1 } }\n{ \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\" : 20 } } } }\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in SQL\nDESCRIPTION: Creates a table with a 'title' text field for full-text search and a 'keys' string attribute. String attributes can be used for filtering, sorting and aggregation but not for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, keys string);\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using Python in Manticore Search\nDESCRIPTION: This Python code demonstrates how to insert a document with a JSON field into a Manticore Search index using the Python API. The JSON is represented as a string in the document dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nindexApi = api = manticoresearch.IndexApi(client)\nindexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\",\"meta\":'{\"size\": 41, \"color\": \"red\"}'}})\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with Rust in Manticore Search\nDESCRIPTION: This Rust snippet demonstrates how to construct and send a percolate query using the Manticore Search Rust client. It uses HashMaps to build the query structure and the PercolateRequest and PercolateRequestQuery types to create the request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_90\n\nLANGUAGE: rust\nCODE:\n```\nlet mut percolate_doc_fields1 = HashMap::new();\npercolate_doc_fields1.insert(\"title\".to_string(), \"angry test\");\npercolate_doc_fields1.insert(\"gid\".to_string(), 3);\nlet mut percolate_doc_fields2 = HashMap::new();\npercolate_doc_fields2.insert(\"title\".to_string(), \"filter test doc2\");\npercolate_doc_fields2.insert(\"gid\".to_string(), 13);\nlet mut percolate_doc_fields_list: [HashMap; 2] = [percolate_doc_fields1, percolate_doc_fields2];\nlet mut percolate_doc = HashMap::new();\npercolate_doc.insert(\"documents\".to_string(), percolate_doc_fields_list); \nlet percolate_query = PercolateRequestQuery::new(serde_json::json!(percolate_doc));\nlet percolate_req = PercolateRequest::new(percolate_query); \nsearch_api.percolate(\"pq\", percolate_req).await;\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with Rust in Manticore Search\nDESCRIPTION: Shows how to perform a search with highlighting using the Rust client. The code creates a search request with match filtering and configures highlighting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_123\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet highlight_fields [String; 1] = [\"title\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    limit_per_field: Some(serde_json::json!(false)),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Bulk Adding Documents with PHP Client (PHP)\nDESCRIPTION: This PHP example demonstrates using the addDocuments() method of the PHP Manticore client to insert multiple documents in a single call. The method accepts an array where each item is an associative array for one document, specifying fields such as 'id', 'title', and 'price'. Requires an initialized $index PHP client object. Inputs: array of documents; outputs: bulk insert operation status. Library version must be compatible with addDocuments().\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$index->addDocuments([\n        ['id' => 1, 'title' => 'Crossbody Bag with Tassel', 'price' => 19.85],\n        ['id' => 2, 'title' => 'microfiber sheet set', 'price' => 19.99],\n        ['id' => 3, 'title' => 'Pet Hair Remover Glove', 'price' => 7.99]\n]);\n```\n\n----------------------------------------\n\nTITLE: Executing Highlighted Match Query (Synchronous) - ManticoreSearch Python\nDESCRIPTION: This snippet sends a search query to the 'books' table using a Python client, matching terms 'one' or 'robots' across all fields and enabling highlighting. It requires a configured searchApi client instance. The resulting dictionary contains all matching documents with their highlighted snippets embedded in the response, using HTML <b> tags for emphasis.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nres = searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{}})\n```\n\n----------------------------------------\n\nTITLE: Profiling SQL Query Execution in Manticore Search\nDESCRIPTION: This SQL snippet demonstrates how to enable profiling for a search query and retrieve the transformed query tree. It sets the profiling variable, executes a search query, and then displays the query plan.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET profiling=1;\nSELECT * FROM test WHERE MATCH('@title abc* @body hey');\nSHOW PLAN \\G\n```\n\nLANGUAGE: sql\nCODE:\n```\n*************************** 1\\. row ***************************\nVariable: transformed_tree\n   Value: AND(\n  OR(fields=(title), KEYWORD(abcx, querypos=1, expanded), KEYWORD(abcm, querypos=1, expanded)),\n  AND(fields=(body), KEYWORD(hey, querypos=2)))\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: View Ranking Factors\nDESCRIPTION: Shows how to use PACKEDFACTORS() function to reveal detailed ranking factor values for documents matched by a search query, including BM25, field masks, and per-keyword statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, PACKEDFACTORS() FROM test1 WHERE MATCH('test one') OPTION ranker=expr('1')\\G\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Manticore using Python Asyncio Client\nDESCRIPTION: Python asyncio code to create a table named 'products' with text and float fields and English stemming morphology enabled using the Manticore async Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('create table products(title text, price float) morphology=\\'stem_en\\'')\n```\n\n----------------------------------------\n\nTITLE: Float Vector Creation\nDESCRIPTION: Demonstrates how to create a table with float vector attributes for machine learning applications and similarity searches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, image_vector float_vector);\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, image_vector float_vector)\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n\t'image_vector'=>['type'=>'float_vector']\n]);\n```\n\n----------------------------------------\n\nTITLE: Manticore Search Table Support Matrix\nDESCRIPTION: A markdown table showing the compatibility between different table types and operational modes (RT and Plain) in Manticore Search. Lists support status for Real-time, Plain, Percolate, Distributed, and Template table types.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Table type  | RT mode        | Plain mode  |\n|-------------|----------------|-------------|\n| Real-time   | supported      | supported   |\n| Plain       | not supported  | supported   |\n| Percolate   | supported      | supported   |\n| Distributed | supported      | supported   |\n| Template    | not supported  | supported   |\n```\n\n----------------------------------------\n\nTITLE: Performing SQL Joins in Manticore Search\nDESCRIPTION: General SQL syntax for performing joins in Manticore Search. Supports both INNER and LEFT JOIN types with conditional expressions for matching related columns across tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tselect_expr [, select_expr] ...\n\tFROM tbl_name\n\t{INNER | LEFT} JOIN tbl2_name\n\tON join_condition\n\t[...other select options]\n\njoin_condition: {\n\tleft_table.attr = right_table.attr\n\t| left_table.json_attr.string_id = string(right_table.json_attr.string_id)\n\t| left_table.json_attr.int_id = int(right_table.json_attr.int_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Issuing JSON Commands for Auto Schema\nDESCRIPTION: The JSON snippet demonstrates how to issue an insert command to Manticore using the auto schema functionality. It details the structure required to perform an insert operation, and the expected response indicating successful table insertion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert  -d\n{\n \"table\":\"t\",\n \"id\": 2,\n \"doc\":\n {\n   \"i\" : 123,\n   \"f\" : 1.23,\n   \"t\": \"text here\",\n   \"s\": \"test@mail.com\",\n   \"j\": {\"a\": 123},\n   \"b\": 1099511627776,\n   \"m\": [1,2],\n   \"mb\": [1099511627776,1099511627777]\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Manticore using HTTP\nDESCRIPTION: HTTP POST request to create a table named 'products' with text and float fields and English stemming morphology enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nPOST /cli -d \"create table products(title text, price float) morphology='stem_en'\"\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on Ubuntu\nDESCRIPTION: Commands to download the Manticore repository, install the Manticore Search engine with columnar library, and start the service on Ubuntu.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.manticoresearch.com/manticore-repo.noarch.deb\nsudo dpkg -i manticore-repo.noarch.deb\nsudo apt update\nsudo apt install manticore manticore-columnar-lib\nsudo systemctl start manticore\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with Java Client\nDESCRIPTION: Java code to initialize and configure the Manticore Search Java client library for connecting to a Manticore server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// https://github.com/manticoresoftware/manticoresearch-java\nimport com.manticoresearch.client.*;\nimport com.manticoresearch.client.model.*;\nimport com.manticoresearch.client.api.*;\n...\nApiClient client = Configuration.getDefaultApiClient();\nclient.setBasePath(\"http://127.0.0.1:9308\");\n...\nIndexApi indexApi = new IndexApi(client);\nSearchApi searchApi = new UtilsApi(client);\nUtilsApi utilsApi = new UtilsApi(client);\n```\n\n----------------------------------------\n\nTITLE: JSON Query Syntax for Manticore Search\nDESCRIPTION: General JSON syntax for performing searches in Manticore Search. Includes the POST request to the /search endpoint with table name and options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Intro.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n    \"table\" : \"table_name\",\n    \"options\":   \n    {\n      ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with PHP in Manticore Search\nDESCRIPTION: This PHP snippet demonstrates how to use the Manticore Search PHP client to perform a percolate query. It constructs the query parameters and uses the pq()->search() method to execute the query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n    'table' => 'pq',\n    'body' => [\n        'query' => [\n            'percolate' => [\n                'documents' => [\n                    [\n                        'title'=>'angry test',\n                        'gid' => 3\n                    ],\n                    [\n                        'title'=>'filter test doc2',\n                        'gid' => 13\n                    ],\n                ]\n            ]\n        ]\n    ]\n];\n$response = $client->pq()->search($params);\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search for Faceted Aggregation - C#\nDESCRIPTION: This C# snippet assembles and executes a faceted aggregation search using the Manticore Search C# SDK. It defines an INTERVAL expression for price, builds a terms aggregation on 'price_range', then structures and submits a SearchRequest to fetch grouped buckets and example documents. Prerequisites include the Manticore Search C# client, and relevant types such as SearchRequest and Aggregation. The search groups documents by price and returns facet bucket counts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nvar expr = new Dictionary<string, string> { {\"price_range\", \"INTERVAL(price,200,400,600,800\"} } ;\nvar agg = new Aggregation(\"group_property\", \"price_range\");\nobject query = new { match_all=null };\nvar searchRequest = new SearchRequest(\"facetdemo\", query);\nsearchRequest.Limit = 5;\nsearchRequest.Expressions = new List<Object> {expr};\nsearchRequest.Aggs = new List<Aggregation> {agg};\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\nLANGUAGE: C#\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    aggregations: {group_property={buckets=[{key=4, doc_count=2100}, {key=3, doc_count=1973}, {key=2, doc_count=1999}, {key=1, doc_count=2043}, {key=0, doc_count=1885}]}}\n    hits: class SearchResponseHits {\n        maxScore: null\n        total: 10000\n        hits: [{_id=1, _score=1, _source={price=197, brand_id=10, brand_name=Brand Ten, categories=[10], title=Product Eight One, property=Six, price_range=0}}, {_id=2, _score=1, _source={price=671, brand_id=6, brand_name=Brand Six, categories=[12, 13, 14], title=Product Nine Seven, property=Four, price_range=3}}, {_id=3, _score=1, _source={price=92, brand_id=3, brand_name=Brand Three, categories=[13, 14, 15], title=Product Five Four, property=Six, price_range=0}}, {_id=4, _score=1, _source={price=713, brand_id=10, brand_name=Brand Ten, categories=[11], title=Product Eight Nine, property=Five, price_range=3}}, {_id=5, _score=1, _source={price=805, brand_id=7, brand_name=Brand Seven, categories=[11, 12, 13], title=Product Ten Three, property=Two, price_range=4}}]\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing and Executing Highlighted Search Query - ManticoreSearch Java\nDESCRIPTION: This snippet describes how to set up and execute a full-text highlighted search in Java for the 'books' index, matching the terms 'one' or 'robots' in all fields, and adding a highlight clause. Main dependencies are the ManticoreSearch Java client classes SearchRequest and SearchApi. The output is a SearchResponse object populated by the API call, containing the results and highlights.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{\n    put(\"*\",\"one|robots\");\n}});        \nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{\n}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Performing Faceted Search with SQL in Manticore Search\nDESCRIPTION: This query demonstrates how to use SQL to fetch results with multiple facets. It selects all fields plus a price alias, limits the main results to 10, and adds two facets: one for price with a limit of 10 and another for brand_id with a limit of 5.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, price AS aprice FROM facetdemo LIMIT 10 FACET price LIMIT 10 FACET brand_id LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Calculating Geospatial Distance in SQL\nDESCRIPTION: The `GEODIST` function calculates the distance between two geographical points specified by their latitudes and longitudes. The input coordinates default to radians, and the function returns the distance in meters unless specified otherwise. Optional parameters allow unit conversion and method selection, with default adaptive method optimization.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Geo_spatial_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGEODIST(lat1, lon1, lat2, lon2, { option=value, ... })\n```\n\nLANGUAGE: sql\nCODE:\n```\nGEODIST(40.7643929, -73.9997683, 40.7642578, -73.9994565, {in=degrees, out=feet})\n```\n\nLANGUAGE: sql\nCODE:\n```\nGEODIST(51.50, -0.12, 29.98, 31.13, {in=deg, out=mi})\n```\n\n----------------------------------------\n\nTITLE: Performing Query String Search in Go for Manticore Search\nDESCRIPTION: Illustrates how to execute a query_string search using Go with Manticore Search. It searches for 'test document 1' in the 'test' index and returns the 'content' and 'title' fields for the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nsearchRequest := manticoresearch.NewSearchRequest(\"test\")\nquery := map[string]interface{} {\"query_string\": \"test document 1\"}\nsearchReq.SetSource([]string{\"content\", \"title\"})\nsearchReq.SetLimit(1)\nresp, httpRes, err := search.SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Bulk Inserting Documents in Rust using Manticore Search API\nDESCRIPTION: This code snippet shows how to perform bulk insertion of documents into a Manticore Search index using Rust. It uses a raw string to define the JSON-formatted bulk insert operations and calls the bulk method of the index_api to execute the insertion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\nlet bulk_body = r#\"{\"insert\": \"index\" : \"products\", \"id\" : 1, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\", \"price\" : 19.85}}}\n    {\"insert\": {\"index\" : \"products\", \"id\" : 4, \"doc\" : {\"title\" : \"microfiber sheet set\", \"price\" : 19.99}}}\n    {\"insert\": {\"index\" : \"products\", \"id\" : 5, \"doc\" : {\"title\" : \"CPet Hair Remover Glove\", \"price\" : 7.99}}}         \n\"#;\nindex_api.bulk(bulk_body).await;\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using Java in Manticore Search\nDESCRIPTION: Uses the Java client to find percolate query rules that match a document. The example constructs a nested map structure to represent the query and document data before calling the percolate method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nPercolateRequest percolateRequest = new PercolateRequest();\nquery = new HashMap<String,Object>(){{\n    put(\"percolate\",new HashMap<String,Object >(){{\n        put(\"document\", new HashMap<String,Object >(){{\n            put(\"title\",\"what a nice bag\");\n        }});\n    }});\n}};\npercolateRequest.query(query);\nsearchApi.percolate(\"test_pq\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with JSON API in Manticore Search\nDESCRIPTION: Demonstrates how to perform a search with highlighting using the JSON API. The request searches for 'and first' in the 'content' field with a highlighting limit of 50 and no limits per field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_112\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"content\": \"and first\" } },\n      \"highlight\":\n      {\n        \"limits_per_field\": false,\n\t\t\"fields\":\n\t\t{\n\t\t\t\"content\" : { \"limit\": 50 }\n\t\t}\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Query String Search in JavaScript for Manticore Search\nDESCRIPTION: Demonstrates how to perform a query_string search using JavaScript with Manticore Search. It searches for 'find joe fast' within 2 words in the 'comment_text' field of the 'hn_small' table and returns the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await searchApi.search({\"table\":\"hn_small\",\"query\":{\"query_string\":\"@comment_text \\\"find joe fast \\\"/2\"}, \"_source\": [\"story_author\",\"comment_author\"], \"limit\":1});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chinese Product Table in Manticore Search INI File\nDESCRIPTION: This snippet shows the configuration for a 'products' table with Chinese language support in Manticore Search's INI format. It defines the table structure, language settings, and attributes for real-time indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Languages_with_continuous_scripts.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  charset_table = chinese\n  morphology = icu_chinese\n  stopwords = zh\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Insert with Manticore Auto ID\nDESCRIPTION: This JavaScript code snippet demonstrates how to insert a document using the auto ID feature into the Manticore database, capturing the asynchronous nature of the insertion operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nres = await indexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\"}});\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using C# in Manticore Search\nDESCRIPTION: This C# code demonstrates how to insert a document with a JSON field into a Manticore Search index using the C# API. The JSON is represented as a nested Dictionary<string, Object> in the document dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_50\n\nLANGUAGE: clike\nCODE:\n```\nDictionary<string, Object> meta = new Dictionary<string, Object>();\nmeta.Add(\"size\", 41);\nmeta.Add(\"color\", \"red\");\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"Yellow bag\");\ndoc.Add(\"meta\", meta);\nInsertDocumentRequest newdoc = new InsertDocumentRequest(index: \"products\", id: 0, doc: doc);\nvar sqlresult = indexApi.Insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search for Faceted Aggregation - Rust\nDESCRIPTION: This Rust code configures and executes a faceted search on a Manticore Search index by defining an expression with INTERVAL on the price field and aggregating using terms on 'price_range'. It builds up search request parameters as strongly typed Rust structs and triggers the request asynchronously. This snippet requires the Rust SDK for Manticore Search and familiarity with serde and async code patterns.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_28\n\nLANGUAGE: Rust\nCODE:\n```\nlet query = SearchQuery::new();\nlet aggTerms1 = AggTerms::new(\"price_range\");\nlet agg1 = Aggregation {\n    terms: Some(Box::new(aggTerms1)),\n    ..Default::default(),\n};\nlet mut aggs = HashMap::new();\naggs.insert(\"group_property\".to_string(), agg1);\nlet mut expr = HashMap::new(); \nexpr.insert(\"price_range\".to_string(), \"INTERVAL(price,200,400,600,800\");\nlet expressions: [HashMap; 1] = [expr];\n\nlet search_req = SearchRequest {\n    table: \"facetdemo\".to_string(),\n    query: Some(Box::new(query)),\n    expressions: serde_json::json!(expressions),\n    aggs: serde_json::json!(aggs),\n    limit: serde_json::json!(5),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\nLANGUAGE: Rust\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    aggregations: {group_property={buckets=[{key=4, doc_count=2100}, {key=3, doc_count=1973}, {key=2, doc_count=1999}, {key=1, doc_count=2043}, {key=0, doc_count=1885}]}}\n    hits: class SearchResponseHits {\n        maxScore: null\n        total: 10000\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using JSON in Manticore Search\nDESCRIPTION: This snippet shows how to insert documents into a real-time table named 'products' using the JSON format. It demonstrates inserting documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /insert\n{\n  \"table\":\"products\",\n  \"id\":1,\n  \"doc\":\n  {\n    \"title\" : \"Crossbody Bag with Tassel\",\n    \"price\" : 19.85\n  }\n}\n\nPOST /insert\n{\n  \"table\":\"products\",\n  \"id\":2,\n  \"doc\":\n  {\n    \"title\" : \"Crossbody Bag with Tassel\"\n  }\n}\n\nPOST /insert\n{\n  \"table\":\"products\",\n  \"id\":0,\n  \"doc\":\n  {\n    \"title\" : \"Yellow bag\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Highlighting in Python for Manticore Search\nDESCRIPTION: This Python snippet shows how to configure a search request with highlighting for Manticore Search. It includes setting up the query and highlight options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nres = searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\",\"title\"],\"fragment_size\":100}})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 2788,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u' the room. <b>One</b> of the <b>robots</b> followed as well',\n                                                u'Bander gestured the other <b>robots</b> away and entered '],\n                                   u'title': [u'Books <b>one</b>']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries in Python with asyncio\nDESCRIPTION: Shows how to use the Python asyncio client to perform percolate query document matching. This implementation uses async/await syntax with the percolate method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\nawait searchApi.percolate('products',{\"query\":{\"percolate\":{\"documents\":[{\"title\":\"nice pair of shoes\",\"color\":\"blue\"},{\"title\":\"beautiful bag\"}]}}})\n```\n\n----------------------------------------\n\nTITLE: Complex Fuzzy Search Query with Filters in SQL\nDESCRIPTION: Shows an example of a more complex fuzzy search query that includes additional filters such as category and price constraints.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mytable WHERE MATCH('someting') OPTION fuzzy=1 AND (category='books' AND price < 20);\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using PHP in Manticore Search\nDESCRIPTION: Uses the PHP client to find percolate query rules that match a document. The example searches the 'products' index for rules matching a document with 'bag' in the title.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$percolate = [\n    'table' => 'products',\n    'body' => [\n        'query' => [\n            'percolate' => [\n                'document' => [\n                    'title' => 'What a nice bag'\n                ]\n            ]\n        ]\n    ]\n];\n$client->pq()->search($percolate);\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert Documents Using SQL Insert Statement (SQL)\nDESCRIPTION: This code demonstrates how to insert multiple rows into a ManticoreSearch real-time table using a single SQL INSERT statement. Multiple value tuples appended after VALUES() allow batch ingestion, with optional explicit column specification. Scalar columns default to 0, strings to an empty string if not provided. Dependencies: ManticoreSearch SQL interface. Inputs include column names and document values; outputs include affected row count. Expressions within VALUES are not supported; values must be explicit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO <table name>[(column1, column2, ...)] VALUES(value1[, value2 , ...]), (...)\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO products(title,price) VALUES ('Crossbody Bag with Tassel', 19.85), ('microfiber sheet set', 19.99), ('Pet Hair Remover Glove', 7.99);\n```\n\nLANGUAGE: sql\nCODE:\n```\nQuery OK, 3 rows affected (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Faceted Search and Optimization Check in SQL\nDESCRIPTION: This SQL output snippet shows the results of a faceted search query, including the main result set, facet counts for brand_id, price, and categories, and the 'multiplier' meta value indicating that query optimization was applied (multiplier of 4 for 4 queries).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+\n| id   | price | brand_id | title               | brand_name  | property    | j                                     | categories |\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+\n|    1 |   306 |        1 | Product Ten Three   | Brand One   | Six_Ten     | {\"prop1\":66,\"prop2\":91,\"prop3\":\"One\"} | 10,11      |\n...\n\n+----------+----------+\n| brand_id | count(*) |\n+----------+----------+\n|        1 |     1013 |\n...\n\n+-------+----------+\n| price | count(*) |\n+-------+----------+\n|   306 |        7 |\n...\n\n+------------+----------+\n| categories | count(*) |\n+------------+----------+\n|         10 |     2436 |\n...\n\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| multiplier    | 4     |\n+---------------+-------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Search with Highlighting\nDESCRIPTION: Implementation of search with highlighting in TypeScript, showing both request and response format. Demonstrates basic match query with field-specific highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: {\n    fields: ['content'],\n    highlight_query: {\n      match: {*: 'Text'}\n    }\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text</b> 1\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Highlighting in PHP\nDESCRIPTION: Performs a search operation with title highlighting using PHP Manticore client. Returns document ID, score, fields and highlighted matches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$result = $index->search('@title remove hair')->highlight(['title'])->get();\nforeach($result as $doc)\n{\n    echo \"Doc ID: \".$doc->getId().\"\\n\";\n    echo \"Doc Score: \".$doc->getScore().\"\\n\";\n    echo \"Document fields:\\n\";\n    print_r($doc->getData());\n    echo \"Highlights: \\n\";\n    print_r($doc->getHighlight());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in Python\nDESCRIPTION: Uses the Python API to create a table with a 'title' field that is both a string attribute and indexed for full-text search. This allows both searching and filtering on the same field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products ( title string attribute indexed )')\n```\n\n----------------------------------------\n\nTITLE: Basic MATCH Usage in SQL for Full-Text Search\nDESCRIPTION: Demonstrates the basic syntax of the MATCH clause in a SQL SELECT statement for performing a full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM myindex WHERE MATCH('\"find me fast\"/2');\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and Integer Fields in PHP\nDESCRIPTION: Uses the PHP client to create a table with a 'title' text field and a 'price' integer field. Integer fields can be used for filtering, sorting, and aggregation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n\t'price'=>['type'=>'int']\n]);\n```\n\n----------------------------------------\n\nTITLE: Match Phrase Query in HTTP JSON\nDESCRIPTION: Illustrates a match_phrase query for matching an entire phrase in HTTP JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"query\":\n{\n  \"match_phrase\": { \"_all\" : \"had grown quite\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in TypeScript\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using TypeScript. The method requires specifying the cluster name, index name, and document ID to be deleted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nres = await indexApi.delete({ cluster: 'cluster_1', index: 'test', id: 1 });\n```\n\n----------------------------------------\n\nTITLE: Aggregating by Color with HTTP POST Request (JSON)\nDESCRIPTION: This JSON POST request demonstrates using a Manticore Search API to perform an aggregation query that groups products by color, similar to a SQL GROUP BY operation. Requires an active Manticore Search API endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n    {\n     \"table\" : \"products\",\n     \"limit\": 0,\n     \"aggs\" :\n     {\n        \"color\" :\n         {\n            \"terms\" :\n             {\n              \"field\":\"meta.color\",\n              \"size\":100\n             }\n         }\n     }\n    }\n'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 3,\n    \"hits\": [\n\n    ]\n  },\n  \"aggregations\": {\n    \"color\": {\n      \"buckets\": [\n        {\n          \"key\": \"green\",\n          \"doc_count\": 1\n        },\n        {\n          \"key\": \"red\",\n          \"doc_count\": 2\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on CentOS\nDESCRIPTION: Commands to install the Manticore repository, install the Manticore Search engine with columnar library, and start the service on CentOS.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install https://repo.manticoresearch.com/manticore-repo.noarch.rpm\nsudo yum install manticore manticore-columnar-lib\nsudo systemctl start manticore\n```\n\n----------------------------------------\n\nTITLE: Searching within Polygons using GEOPOLY2D() and CONTAINS() in Manticore Search\nDESCRIPTION: This SQL query illustrates how to use the GEOPOLY2D() function to create a polygon and the CONTAINS() function to check if a point is within that polygon in Manticore Search. It's useful for area-based geo-searches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Geo_search.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *,CONTAINS(GEOPOLY2D(40.76439, -73.9997, 42.21211, -73.999,  42.21211, -76.123, 40.76439, -76.123), 41.5445, -74.973) AS inside FROM myindex WHERE MATCH('...') AND inside=1;\n```\n\n----------------------------------------\n\nTITLE: Using 'Match Any Term' Modifier in Phrase Search\nDESCRIPTION: Shows how to use wildcards within phrases to match terms with positional significance, where asterisks represent positions that can be filled with any term.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n\"exact * phrase * * for terms\"\n```\n\n----------------------------------------\n\nTITLE: Python Insert Operation for Auto ID Generation\nDESCRIPTION: A Python script example showing how to insert entries into a Manticore table where IDs are automatically generated. Prerequisites include proper client setup for the index API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nindexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\"}})\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using C# in Manticore Search\nDESCRIPTION: Uses the C# client to find percolate query rules that match a document with a specific title. The example constructs nested dictionaries to represent the query structure before making the API call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_28\n\nLANGUAGE: clike\nCODE:\n```\nDictionary<string, Object> percolateDoc = new Dictionary<string, Object>(); \npercolateDoc.Add(\"document\", new Dictionary<string, Object> {{ \"title\", \"what a nice bag\" }});\nDictionary<string, Object> query = new Dictionary<string, Object> {{ \"percolate\", percolateDoc }}; \nPercolateRequest percolateRequest = new PercolateRequest(query=query);\nsearchApi.Percolate(\"test_pq\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Highlighting with JavaScript in Manticore Search\nDESCRIPTION: This example demonstrates how to use the search API in JavaScript to perform a search query with highlighting enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"try\"}},\"highlight\":{}});\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation of Search with Highlighting\nDESCRIPTION: PHP example showing how to perform a search with highlighting using the Manticore Search PHP client. Includes both the request and response handling with highlighted snippets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_87\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$bool = new \\Manticoresearch\\Query\\BoolQuery();\n$bool->must(new \\Manticoresearch\\Query\\Match(['query' => 'one|robots'], '*'));\n\n$results = $index->search($bool)->highlight(['content','title'],['number_of_fragments'=>10])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Search Query with Highlighting in Python\nDESCRIPTION: This Python snippet demonstrates how to perform a search query with highlighting using the Manticore Search Python client. It searches for the term 'try' in all fields and limits the highlight snippets to 50 characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nres = searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"try\"}},\"highlight\":{\"limit\":50}})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'4',\n                    u'_score': 1695,\n                    u'_source': {u'content': u'Don`t try to compete in childishness, said Bliss.',\n                                 u'title': u'Book four'},\n                    u'highlight': {u'content': [u'Don`t <b>try</b> to compete in childishness, said Bliss.'],\n                                   u'title': [u'Book four']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Executing Search with Highlighting in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to perform a search operation with highlighting using the Manticore Search API. It includes a simple match query and sets the no_match_size option for highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: {no_match_size: 0}\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 1</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field Position Limits in Manticore Search\nDESCRIPTION: Shows how to constrain searches to the first N positions within a given field. This matches only documents where the keyword appears before the specified position limit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n@body[50] hello\n```\n\n----------------------------------------\n\nTITLE: Filtering with JSON bool query in Manticore Search\nDESCRIPTION: Demonstrates a complex boolean query using 'must' and 'must_not' clauses to filter search results based on full-text matching and numeric range conditions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"test1\",\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\" : { \"_all\" : \"product\" } },\n        { \"range\": { \"price\": { \"gte\": 500, \"lte\": 1000 } } }\n      ],\n      \"must_not\": {\n        \"range\": { \"revision\": { \"lt\": 15 } }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with Rust\nDESCRIPTION: Rust implementation to search for 'one|robots' in the 'books' table and highlight matches in 'title' field with a limit of 50 using serde_json for serialization.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_107\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet highlight_fields [String; 1] = [\"title\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    limit: Some(serde_json::json!(50)),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Search in Docker\nDESCRIPTION: Commands to pull and run the Manticore Search Docker container with exposed ports for MySQL, HTTP, and binary API connections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull manticoresearch/manticore\ndocker run --name manticore -p9306:9306 -p9308:9308 -p9312:9312 -d manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: Configuring Geo-coordinates in Manticore Search Table\nDESCRIPTION: This snippet shows how to configure a Manticore Search table to include latitude and longitude attributes for geo-searching. It demonstrates the use of float attributes to store coordinate pairs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Geo_search.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntable myrt\n{\n    ...\n    rt_attr_float = lat\n    rt_attr_float = lon\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using JSON API in Manticore Search\nDESCRIPTION: These JSON API examples show two ways to insert a document with a JSON field: as a JSON object and as an escaped string. Both methods use the /insert endpoint of the Manticore Search JSON API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_43\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert\n{\n  \"table\":\"products\",\n  \"id\":1,\n  \"doc\":\n  {\n    \"title\" : \"shoes\",\n    \"meta\" : {\n      \"size\": 41,\n      \"color\": \"red\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert\n{\n  \"table\":\"products\",\n  \"id\":1,\n  \"doc\":\n  {\n    \"title\" : \"shoes\",\n    \"meta\" : \"{\\\"size\\\": 41, \\\"color\\\": \\\"red\\\"}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Real-time Table Schema in Manticore Search Configuration\nDESCRIPTION: Example of defining a real-time table schema in a Manticore Search configuration file. It includes settings for various field types, attributes, and storage options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ntable <table name> {\n  type = rt\n  path = /path/to/table\n\n  rt_field = <full-text field name>\n  rt_field = <another full-text field name>\n  [rt_attr_uint = <integer field name>]\n  [rt_attr_uint = <another integer field name, limit by N bits>:N]\n  [rt_attr_bigint = <bigint field name>]\n  [rt_attr_bigint = <another bigint field name>]\n  [rt_attr_multi = <multi-integer (MVA) field name>]\n  [rt_attr_multi = <another multi-integer (MVA) field name>]\n  [rt_attr_multi_64 = <multi-bigint (MVA) field name>]\n  [rt_attr_multi_64 = <another multi-bigint (MVA) field name>]\n  [rt_attr_float = <float field name>]\n  [rt_attr_float = <another float field name>]\n  [rt_attr_float_vector = <float vector field name>]\n  [rt_attr_float_vector = <another float vector field name>]\n  [rt_attr_bool = <boolean field name>]\n  [rt_attr_bool = <another boolean field name>]\n  [rt_attr_string = <string field name>]\n  [rt_attr_string = <another string field name>]\n  [rt_attr_json = <json field name>]\n  [rt_attr_json = <another json field name>]\n  [rt_attr_timestamp = <timestamp field name>]\n  [rt_attr_timestamp = <another timestamp field name>]\n\n  [stored_fields = <comma separated list of full-text fields that should be stored, all are stored by default, can be empty>]\n\n  [rt_mem_limit = <RAM chunk max size, default 128M>]\n  [optimize_cutoff = <max number of RT table disk chunks>]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Highlighting in Java\nDESCRIPTION: Performs a search operation with title highlighting using Java Manticore client with HashMap configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nquery = new HashMap<String,Object>();\nquery.put(\"query_string\",\"@title remove hair\");\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"forum\");\nsearchRequest.setQuery(query);\nHashMap<String,Object> highlight = new HashMap<String,Object>(){{put(\"fields\",new String[] {\"title\"});}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Percolate Query Implementation in TypeScript\nDESCRIPTION: Shows how to perform a percolate query in TypeScript by passing an array of documents. Demonstrates a simpler syntax compared to other languages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\ndocs = [ {title : 'What a nice bag'}, {title : 'Really nice shoes'} ]; \nres = await searchApi.percolate('test_pq', { query: { percolate: { documents : docs } } } );\n```\n\n----------------------------------------\n\nTITLE: Async Bulk Adding Documents via Python-asyncio Client (Python-asyncio)\nDESCRIPTION: This code is functionally identical to the synchronous Python example but employs 'await' for asynchronous execution with an asyncio-based client. Documents are serialized to NDJSON, and indexApi.bulk() is awaited to accommodate async I/O. Dependencies: asyncio-compatible Manticore Python client, json module. All other schema constraints and input/output expectations match the synchronous approach.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_27\n\nLANGUAGE: python-asyncio\nCODE:\n```\ndocs = [ \\\n    {\"insert\": {\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\", \"price\" : 19.85}}}, \\\n    {\"insert\": {\"table\" : \"products\", \"id\" : 2, \"doc\" : {\"title\" : \"microfiber sheet set\", \"price\" : 19.99}}}, \\\n    {\"insert\": {\"table\" : \"products\", \"id\" : 3, \"doc\" : {\"title\" : \"CPet Hair Remover Glove\", \"price\" : 7.99}}}\n]\nres = await indexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\n----------------------------------------\n\nTITLE: Creating Distributed Table via SQL in Manticore Search\nDESCRIPTION: This SQL snippet shows how to create a distributed table named 'distributed_index' using the CREATE TABLE statement in Manticore Search. It specifies a local index and a remote agent.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_distributed_table.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE distributed_index type='distributed' local='local_index' agent='127.0.0.1:9312:remote_table'\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with Auto Schema\nDESCRIPTION: This SQL code snippet demonstrates the use of auto schema in Manticore to automatically create tables based on the insert queries. It shows how different value types are handled and the results of executed queries. Dependencies include Manticore Buddy for enabling the auto schema feature.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [(none)]> drop table if exists t; insert into t(i,f,t,s,j,b,m,mb) values(123,1.2,'text here','test@mail.com','{\"a\": 123}',1099511627776,(1,2),(1099511627776,1099511627777)); desc t; select * from t;\n```\n\n----------------------------------------\n\nTITLE: Performing Synchronous Search with Highlighting in Python\nDESCRIPTION: Utilizes the search API to query the 'books' table synchronously, matching 'one' or 'robots', and highlights the content field. Inputs a dictionary with table, query, and highlight fields, returning JSON-like Python dictionary as search result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nres = searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\"]}}))\n```\n\nLANGUAGE: Python\nCODE:\n```\n{'aggregations': None, 'hits': {'hits': [{u'_id': u'1', u'_score': 2788, u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ', u'title': u'Books one'}, u'highlight': {u'content': [u'They followed Bander. The <b>robots</b> remained at a polite distance, ', u' three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander', u' gestured the other <b>robots</b> away and entered itself. The']}}], 'max_score': None, 'total': 1}, 'profile': None, 'timed_out': False, 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Constructing and Executing Highlighted Search Query - ManticoreSearch Rust\nDESCRIPTION: This snippet demonstrates assembling a search request in Rust for the 'books' table that matches the terms 'one' or 'robots' in any field, with highlighting enabled for the 'content' field. Dependencies include 'serde_json' for JSON manipulation and required types like SearchQuery, Highlight, and SearchRequest from the client SDK. Important parameters are the match filter, the highlight specification, and table name. The output is a configured SearchRequest ready to be executed, but does not itself execute the request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet highlight_fields [String; 1] = [\"content\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\n```\n\n----------------------------------------\n\nTITLE: SQL HIGHLIGHT() with Custom Query\nDESCRIPTION: Shows how to use a different query for highlighting than for searching. This example searches for 'one' but highlights occurrences of 'five' in the title field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT({},'title', 'five') FROM books WHERE MATCH('one');\n```\n\n----------------------------------------\n\nTITLE: Executing POST Search Query with Highlighting in JSON\nDESCRIPTION: Executes a POST request to the /search endpoint, querying the 'books' table for matches to 'one' or 'robots'. It highlights matches in the 'content' field. Inputs a JSON object with table name, query, and highlight settings, and outputs a JSON response with the hits and highlights.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\"table\": \"books\",\"query\": { \"match\": { \"*\": \"one|robots\" } },\"highlight\":{\"fields\": [\"content\"]}}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\"took\": 0,\"timed_out\": false,\"hits\": {\"total\": 1,\"hits\": [{\"_id\": 1,\"_score\": 2788,\"_source\": {\"title\": \"Books one\",\"content\": \"They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. \"},\"highlight\": {\"content\": [\"They followed Bander. The <b>robots</b> remained at a polite distance, \",\" three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander\",\" gestured the other <b>robots</b> away and entered itself. The\"]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Write Operations in Manticore Replication Cluster\nDESCRIPTION: Examples of write operations (INSERT, TRUNCATE, UPDATE, DELETE) in a replication cluster using various programming languages. Shows the required syntax using cluster_name:table_name format for SQL and cluster property for other interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO posts:weekly_index VALUES ( 'iphone case' )\nTRUNCATE RTINDEX click_query:weekly_index\nUPDATE INTO posts:rt_tags SET tags=(101, 302, 304) WHERE MATCH ('use') AND id IN (1,101,201)\nDELETE FROM clicks:rt WHERE MATCH ('dumy') AND gid>206\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /insert -d '\n{\n  \"cluster\":\"posts\",\n  \"table\":\"weekly_index\",\n  \"doc\":\n  {\n    \"title\" : \"iphone case\",\n    \"price\" : 19.85\n  }\n}'\nPOST /delete -d '\n{\n  \"cluster\":\"posts\",\n  \"table\": \"weekly_index\",\n  \"id\":1\n}'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index->addDocuments([\n        1, ['title' => 'iphone case', 'price' => 19.85]\n]);\n$index->deleteDocument(1);\n```\n\nLANGUAGE: Python\nCODE:\n```\nindexApi.insert({\"cluster\":\"posts\",\"table\":\"weekly_index\",\"doc\":{\"title\":\"iphone case\",\"price\":19.85}})\nindexApi.delete({\"cluster\":\"posts\",\"table\":\"weekly_index\",\"id\":1})\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await indexApi.insert({\"cluster\":\"posts\",\"table\":\"weekly_index\",\"doc\":{\"title\":\"iphone case\",\"price\":19.85}});\n res = await indexApi.delete({\"cluster\":\"posts\",\"table\":\"weekly_index\",\"id\":1});\n```\n\nLANGUAGE: Java\nCODE:\n```\nInsertDocumentRequest newdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){{    put(\"title\",\"Crossbody Bag with Tassel\");\n    put(\"price\",19.85);\n}};\nnewdoc.index(\"weekly_index\").cluster(\"posts\").id(1L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\n\nDeleteDocumentRequest deleteRequest = new DeleteDocumentRequest();\ndeleteRequest.index(\"weekly_index\").cluster(\"posts\").setId(1L);\nindexApi.delete(deleteRequest);\n```\n\nLANGUAGE: C#\nCODE:\n```\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"Crossbody Bag with Tassel\");\ndoc.Add(\"price\", 19.85);\nInsertDocumentRequest newdoc = new InsertDocumentRequest(table: \"weekly_index\", cluster:posts, id: 1, doc: doc);\nvar sqlresult = indexApi.Insert(newdoc);\n\nDeleteDocumentRequest deleteDocumentRequest = new DeleteDocumentRequest(table: \"weekly_index\", cluster: \"posts\", id: 1);\nindexApi.Delete(deleteDocumentRequest);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet mut doc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"Crossbody Bag with Tassel\"));\ndoc.insert(\"price\".to_string(), serde_json::json!(19.85));\nlet insert_req = InsertDocumentRequest {\n    table: serde_json::json!(\"weekly_index\"),\n    doc: serde_json::json!(doc),\n    cluster: serde_json::json!(\"posts\"),\n    id: serde_json::json!(1),\n};\nlet insert_res = index_api.insert(insert_req).await;\n\nlet delete_req = DeleteDocumentRequest {\n    table: serde_json::json!(\"weekly_index\"),\n    cluster: serde_json::json!(\"posts\"),\n    id: serde_json::json!(1),\n};\nindex_api.delete(delete_req).await;\n```\n\n----------------------------------------\n\nTITLE: Executing Full-text Search in PHP with Manticore Search\nDESCRIPTION: Demonstrates how to perform a full-text search using PHP with Manticore Search. It searches for 'find me fast' in the title field and iterates through the results, displaying the document ID and all fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$search = new Search(new Client());\n$result = $search->('@title find me fast');\nforeach($result as $doc)\n{\n    echo 'Document: '.$doc->getId();\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.': '.$value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Query Plan with SQL in Manticore Search\nDESCRIPTION: Shows how to enable profiling and display a query execution plan using SQL. The example demonstrates retrieving the transformed tree and enabled indexes information for a simple OR query with dog|cat terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nset profiling=1;\n\nselect * from hn_small where match('dog|cat') limit 0;\n\nshow plan;\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Highlighting in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the Manticore Search API to perform a search with highlighting. It sets up a match query and configures the highlight options, including setting no_match_size to 0.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_71\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nhighlight.SetNoMatchSize(0)\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 1</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by Query Match\nDESCRIPTION: Example showing how to delete documents that match a full-text query 'test document' from a table. Demonstrates the operation and its result across different programming interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SELECT * FROM TEST;\n+------+------+-------------+------+\n| id   | gid  | mva1        | mva2 |\n+------+------+-------------+------+\n|  100 | 1000 | 100,201     | 100  |\n|  101 | 1001 | 101,202     | 101  |\n|  102 | 1002 | 102,203     | 102  |\n|  103 | 1003 | 103,204     | 103  |\n|  104 | 1004 | 104,204,205 | 104  |\n|  105 | 1005 | 105,206     | 105  |\n|  106 | 1006 | 106,207     | 106  |\n|  107 | 1007 | 107,208     | 107  |\n+------+------+-------------+------+\n8 rows in set (0.00 sec)\n\nmysql> DELETE FROM TEST WHERE MATCH ('test document');\nQuery OK, 2 rows affected (0.00 sec)\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /delete -d '\n    {\n        \"table\":\"test\",\n        \"query\":\n        {\n            \"match\": { \"*\": \"test document\" }\n        }\n    }'\n```\n\n----------------------------------------\n\nTITLE: SQL Query Syntax for Manticore Search\nDESCRIPTION: General SQL syntax for performing searches in Manticore Search. Includes SELECT statement with various clauses such as FROM, JOIN, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT, OPTION, and FACET.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Intro.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    select_expr [, select_expr] ...\n    [FROM tbl_name\n        [{INNER | LEFT} JOIN tbl2_name]\n        [WHERE where_condition]\n        [GROUP BY {col_name | expr}, ... ]\n        [HAVING where_condition]\n        [ORDER BY {col_name | expr}\n            [ASC | DESC], ... ]\n    ]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [OPTION option1[, option2] ...]\n    [FACET {expr_list} [BY {expr_list}] [DISTINCT {field_name}] [ORDER BY {expr | FACET()} {ASC | DESC}] [LIMIT [offset,] count]]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with Rust Client\nDESCRIPTION: Rust code to initialize and configure the Manticore Search Rust client library with async for connecting to a Manticore server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n// https://github.com/manticoresoftware/manticoresearch-rust\nuse std::sync::Arc;\nuse manticoresearch::\n    apis::{\n        {configuration::Configuration,IndexApi,IndexApiClient,SearchApi,SearchApiClient,UtilsApi,UtilsApiClient}\n    },\n};\n\nasync fn maticore_connect {\n\tlet configuration = Configuration {\n\t    base_path: \"http://127.0.0.1:9308\".to_owned(),\n\t    ..Default::default(),\n\t};\n    let api_config = Arc::new(configuration);\n    let utils_api = UtilsApiClient::new(api_config.clone());\n    let index_api = IndexApiClient::new(api_config.clone());\n    let search_api = SearchApiClient::new(api_config.clone());\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Search Highlighting\nDESCRIPTION: Example of implementing search with highlighting in Go using the Manticore client. Sets up match clause and highlight configuration for search request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_59\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1|Doc 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Profiling Java Search Query in Manticore Search\nDESCRIPTION: This Java snippet demonstrates how to enable profiling for a search query using the Java API. It sets the profile parameter to true in the search request and retrieves the profile information from the search response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nquery = new HashMap<String,Object>();\nquery.put(\"query_string\",\"i me\");\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"forum\");\nsearchRequest.setQuery(query);\nsearchRequest.setProfile(true);\nsearchRequest.setLimit(1);\nsearchRequest.setSort(new ArrayList<String>(){{\\n    add(\"*\");\n}});\nsearchResponse = searchApi.search(searchRequest);\n```\n\nLANGUAGE: java\nCODE:\n```\nclass SearchResponse {\n    took: 18\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=100, _score=2500, _source={}}]\n        aggregations: null\n    }\n    profile: {query={type=AND, description=AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2))), children=[{type=AND, description=AND(KEYWORD(i, querypos=1)), children=[{type=KEYWORD, word=i, querypos=1}]}, {type=AND, description=AND(KEYWORD(me, querypos=2)), children=[{type=KEYWORD, word=me, querypos=2}]}]}}\n}\n```\n\n----------------------------------------\n\nTITLE: KNN Vector Search Response\nDESCRIPTION: Response showing matching document with its vector distance score (_knn_dist), relevance score (_score), and source data including the document's vector representation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"total_relation\":\"eq\",\n\t\t\"hits\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"_id\": 2,\n\t\t\t\t\"_score\":1643,\n\t\t\t\t\"_knn_dist\":0.81527930,\n\t\t\t\t\"_source\":\n\t\t\t\t{\n\t\t\t\t\t\"title\":\"white bag\",\n\t\t\t\t\t\"image_vector\":[-0.148894,0.748278,0.091892,-0.095406]\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Fuzzy Search in JSON\nDESCRIPTION: Illustrates how to perform a fuzzy search using JSON syntax in Manticore Search. It includes options for enabling fuzzy matching, specifying keyboard layouts, and setting Levenshtein distance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"test\",\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"*\": \"ghbdtn\"\n          }\n        }\n      ]\n    }\n  },\n  \"options\": {\n    \"fuzzy\": true,\n    \"layouts\": [\"us\", \"ru\"],\n    \"distance\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Selection in HTTP JSON Queries for Manticore Search\nDESCRIPTION: Shows how to use the '_source' property in the request payload to select specific fields for inclusion in the result set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test\",\n  \"_source\":\"attr*\",\n  \"query\": { \"match_all\": {} }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Updates in TypeScript\nDESCRIPTION: Shows how to perform bulk updates on a 'test' index in TypeScript. It updates multiple documents with new content, category, and name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nupdateDocs = [\n  {\n    update: {\n      index: 'test',\n      id: 1,\n      doc: { content: 'Text 11', cat: 1, name: 'Doc 11' },\n    },\n  },\n  {\n    update: {\n      index: 'test',\n      id: 2,\n      doc: { content: 'Text 22', cat: 9, name: 'Doc 22' },\n    },\n  },\n];\n\nres = await indexApi.bulk(\n  updateDocs.map((e) => JSON.stringify(e)).join(\"\\n\")\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"items\":\n  [\n    {\n      \"update\":\n      {\n        \"table\":\"test\",\n        \"updated\":1\n      }\n    },\n    {\n      \"update\":\n      {\n        \"table\":\"test\",\n        \"updated\":1\n      }\n    }\n  ],\n  \"errors\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Highlighted Multi-Field Search - ManticoreSearch PHP\nDESCRIPTION: This PHP snippet performs a search on the 'books' index for the terms 'one' or 'robots', requests highlighted results, and iterates through each result to print both field values and their highlighted snippets. It depends on an instantiated PHP SDK index object. The result includes both normal and highlighted data, ready for further processing or display. The primary inputs are the search string and the invocation of the highlight method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$results = $index->search('one|robots')->highlight()->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Search with Aggregations in Python\nDESCRIPTION: This snippet demonstrates how to perform a search query with aggregations using the Manticore Search Python API. It searches the 'facetdemo' table, retrieves all documents, limits the result to 5 items, and performs aggregations on 'price' and 'brand_id' fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nres =searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"limit\":5,\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price\",}},\"group_brand_id\":{\"terms\":{\"field\":\"brand_id\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlighting in PHP for Manticore Search\nDESCRIPTION: This PHP code demonstrates how to perform a search with highlighting using the Manticore Search PHP client. It includes setting up the query, configuring highlight options, and processing the results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$bool = new \\Manticoresearch\\Query\\BoolQuery();\n$bool->must(new \\Manticoresearch\\Query\\Match(['query' => 'one|robots'], '*'));\n\n$results = $index->search($bool)->highlight(['content','title'],['fragment_size'=>100])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nDocument: 1\ntitle : Books one\ncontent : They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it.\nHighlight for content:\n-  the room. <b>One</b> of the <b>robots</b> followed as well\n- Bander gestured the other <b>robots</b> away and entered\nHighlight for title:\n- Books <b>one</b>\n```\n\n----------------------------------------\n\nTITLE: Highlighting with Java in Manticore Search\nDESCRIPTION: This code snippet shows how to use the Java client to perform a search query with highlighting enabled, including setting up the search request and handling the response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{\n    put(\"*\",\"try|gets|down|said\");\n}});        \nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{\n\n}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregations with Go and Manticore\nDESCRIPTION: This Go snippet demonstrates how to perform an aggregation on 'json_field.year' using the Manticore Go client library to communicate with the Manticore Search API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nquery := map[string]interface{} {};\nsearchRequest.SetQuery(query);\naggTerms := manticoreclient.NewAggregationTerms()\naggTerms.SetField(\"json_field.year\")\naggTerms.SetSize(2)\naggregation := manticoreclient.NewAggregation()\naggregation.setTerms(aggTerms)\nsearchRequest.SetAggregation(aggregation)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute();\n```\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"aggregations\":\n\t{\n\t\t\"json_agg\":\n\t\t{\n\t\t\t\"buckets\":\n\t\t\t[{\n\t\t\t\t\"key\":2000,\n\t\t\t\t\"doc_count\":2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\":2001,\n\t\t\t\t\"doc_count\":2\n\t\t\t}]\n\t\t}\n\t},\n\t\"hits\":\n\t{\n\t\t\"total\":4,\n\t\t\"hits\":[]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced nested bool query in Manticore Search\nDESCRIPTION: Shows how to create a complex nested boolean query to represent conditions like '(a = 1 and b = 1) or (a = 10 and b = 2) or (b = 0)' in JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"t\",\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"bool\": {\n            \"must\": [\n              {\n                \"equals\": {\n                  \"a\": 1\n                }\n              },\n              {\n                \"equals\": {\n                  \"b\": 1\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"bool\": {\n            \"must\": [\n              {\n                \"equals\": {\n                  \"a\": 10\n                }\n              },\n              {\n                \"equals\": {\n                  \"b\": 2\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"bool\": {\n            \"must\": [\n              {\n                \"equals\": {\n                  \"b\": 0\n                }\n              }\n            ]\n          }\n\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON API Faceted Search Request\nDESCRIPTION: Shows how to perform faceted search using the JSON API with aggregations on price and brand_id fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_48\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n    {\n     \"table\" : \"facetdemo\",\n     \"query\" : {\"match_all\" : {} },\n     \"limit\": 5,\n     \"aggs\" :\n     {\n        \"group_property\" :\n         {\n            \"terms\" :\n             {\n              \"field\":\"price\",\n              \"size\":1,\n             }\n         },\n        \"group_brand_id\" :\n         {\n            \"terms\" :\n             {\n              \"field\":\"brand_id\",\n              \"size\":3\n             }\n         }\n     }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with TypeScript\nDESCRIPTION: TypeScript implementation using async/await to search for 'Text 1' in the 'test' index and highlight matches in the 'content' field with a limit of 1 for highlighted snippets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: {\n    fields: {\n      content: { limit:1 }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with Python Client\nDESCRIPTION: Python code to initialize and configure the Manticore Search Python client library for connecting to a Manticore server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n// https://github.com/manticoresoftware/manticoresearch-python\nimport manticoresearch\nconfig = manticoresearch.Configuration(\n    host = \"http://127.0.0.1:9308\"\n)\nclient = manticoresearch.ApiClient(config)\nindexApi = manticoresearch.IndexApi(client)\nsearchApi = manticoresearch.SearchApi(client)\nutilsApi = manticoresearch.UtilsApi(client)\n```\n\n----------------------------------------\n\nTITLE: Creating Price Range Facets Using INTERVAL in SQL\nDESCRIPTION: This SQL query creates facets based on price ranges using the INTERVAL expression function. It segments prices into ranges (0-200, 200-400, 400-600, 600-800, 800+) and returns count of documents in each range.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM facetdemo FACET INTERVAL(price,200,400,600,800) AS price_range ;\n```\n\n----------------------------------------\n\nTITLE: Match Query with Multiple Fields in HTTP JSON\nDESCRIPTION: Shows how to specify multiple fields in a match query using HTTP JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"match\":\n{\n  \"field1,field2\": \"keyword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with Go in Manticore Search\nDESCRIPTION: This Go code constructs a percolate request for the 'test_pq' table using the Manticore Search API, performing a search to retrieve all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_81\n\nLANGUAGE: go\nCODE:\n```\nquery := map[string]interface{} {}\npercolateRequestQuery := manticoreclient.NewPercolateRequestQuery(query)\npercolateRequest := manticoreclient.NewPercolateRequest(percolateRequestQuery) \nres, _, _ := apiClient.SearchAPI.Percolate(context.Background(), \"test_pq\").PercolateRequest(*percolateRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Adding Document with Array Field and Searching in JavaScript\nDESCRIPTION: Example of inserting a document with a multi-value field and performing a match_all search using JavaScript with async/await. The response includes the search results with sorted array values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nawait indexApi.insert({\"table\":\"products\",\"id\":1,\"doc\":{\"title\":\"first\",\"product_codes\":[4,2,1,3]}});\nres = await searchApi.search({\"table\":\"products\",\"query\":{\"match_all\":{}}});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":1,\"hits\":[{\"_id\": 1,\"_score\":1,\"_source\":{\"product_codes\":[1,2,3,4],\"title\":\"first\"}}]}}\n```\n\n----------------------------------------\n\nTITLE: Complex MATCH Query with Filters in SQL\nDESCRIPTION: Shows how to combine MATCH with WHERE filters for more complex querying in SQL.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM myindex WHERE MATCH('cats|birds') AND (`title`='some title' AND `id`=123);\n```\n\n----------------------------------------\n\nTITLE: Query Profiling in Go\nDESCRIPTION: Example of setting up a search request with profiling enabled using the Go client\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nsearchRequest := manticoresearch.NewSearchRequest(\"test\")\nquery := map[string]interface{} {\"query_string\": \"Text\"}\nsource := map[string]interface{} { \"excludes\": []string {\"*\"} }\nsearchRequest.SetQuery(query)\nsearchRequest.SetSource(source)\nsearchReq.SetLimit(1)\nsearchReq.SetProfile(true)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregation with Manticore Search in Python\nDESCRIPTION: This Python snippet uses the Manticore Search API for aggregating data by the 'color' field in 'meta' JSON. This requires a Manticore Search Python client or relevant API library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nres =searchApi.search({\"table\":\"products\",\"limit\":0,\"aggs\":{\"color\":{\"terms\":{\"field\":\"meta.color\",\"size\":100}}}})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': {u'color': {u'buckets': [{u'doc_count': 1,\n                                           u'key': u'green'},\n                                          {u'doc_count': 2, u'key': u'red'}]}},\n 'hits': {'hits': [], 'max_score': None, 'total': 3},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using Rust in Manticore Search\nDESCRIPTION: This Rust code shows how to insert a document with a JSON field into a Manticore Search index using the Rust API. The JSON is represented as a nested HashMap serialized to JSON in the document HashMap.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_51\n\nLANGUAGE: rust\nCODE:\n```\nlet mut meta = HashMap::new();\nmetadoc.insert(\"size\".to_string(), serde_json::json!(41));\nmeta.insert(\"color\".to_string(), serde_json::json!(\"red\"));\n\nlet mut doc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"Yellow bag\"));\ndoc.insert(\"meta\".to_string(), serde_json::json!(meta));\n\nlet insert_req = InsertDocumentRequest::new(\"products\".to_string(), serde_json::json!(doc));\nlet insert_res = index_api.insert(insert_req).await;\n```\n\n----------------------------------------\n\nTITLE: Enabling Comment Parsing in MySQL Client for Manticore Search\nDESCRIPTION: This bash command shows how to connect to Manticore Search using the MySQL client with the --comments flag enabled. This is necessary to ensure that optimizer hints, which are provided as comments, are properly parsed and applied to the queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmysql -P9306 -h0 --comments\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Searching with Profiling in Manticore (Python)\nDESCRIPTION: Executes an asynchronous search query against the 'forum' index using the Python asyncio client. The query parameters (table, query_string, _source exclusion, limit, profile) and the expected response structure are identical to the synchronous Python example, but the call is awaited.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.search({\"table\":\"forum\",\"query\":{\"query_string\":\"@title way* @content hey\"},\"_source\":{\"excludes\":[\"*\"]},\"limit\":1,\"profile\":true})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'2811025403043381551',\n                    u'_score': 2643,\n                    u'_source': {}}],\n          'total': 1},\n 'profile': {u'query': {u'children': [{u'children': [{u'expanded': True,\n                                                      u'querypos': 1,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'way*'}],\n                                       u'description': u'AND(fields=(title), KEYWORD(way*, querypos=1, expanded))',\n                                       u'fields': [u'title'],\n                                       u'type': u'AND'},\n                                      {u'children': [{u'querypos': 2,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'hey'}],\n                                       u'description': u'AND(fields=(content), KEYWORD(hey, querypos=2))',\n                                       u'fields': [u'content'],\n                                       u'type': u'AND'}],\n                        u'description': u'AND( AND(fields=(title), KEYWORD(way*, querypos=1, expanded)),  AND(fields=(content), KEYWORD(hey, querypos=2)))',\n                        u'type': u'AND'}},\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Filtering Server Variables by Pattern with LIKE in SQL\nDESCRIPTION: Illustrates use of the show variables like '%log%'; query to filter server variables whose names contain the string 'log'. Using the LIKE operator enables users to restrict results to matching variable names, useful for quickly pinpointing configuration or log-related settings. Requires connection via an SQL-compatible client and returns only the relevant variable rows matching the specified pattern.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_VARIABLES.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> show variables like '%log%';\n+------------------+----------+\n| Variable_name    | Value    |\n+------------------+----------+\n| query_log_format | sphinxql |\n| log_level        | info     |\n+------------------+----------+\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in PHP\nDESCRIPTION: Uses the PHP client to create a table with a 'title' field that is both a string attribute and indexed for full-text search. This allows both searching and filtering on the same field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'string','options'=>['indexed','attribute']]\n]);\n```\n\n----------------------------------------\n\nTITLE: Finding Similar Documents by ID with SQL\nDESCRIPTION: Searches for documents similar to document with ID 1 based on vector similarity, returning the k-nearest neighbors along with their distance scores.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect id, knn_dist() from test where knn ( image_vector, 5, 1 );\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with .NET Client\nDESCRIPTION: C# code to initialize and configure the Manticore Search .NET client library for connecting to a Manticore server using HttpClient.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_13\n\nLANGUAGE: clike\nCODE:\n```\n// https://github.com/manticoresoftware/manticoresearch-net\nusing System.Net.Http;\n...\nusing ManticoreSearch.Client;\nusing ManticoreSearch.Api;\nusing ManticoreSearch.Model;\n...\nconfig = new Configuration();\nconfig.BasePath = \"http://localhost:9308\";\nhttpClient = new HttpClient();\nhttpClientHandler = new HttpClientHandler();\n...\nvar indexApi = new IndexApi(httpClient, config, httpClientHandler);\nvar searchApi = new SearchApi(httpClient, config, httpClientHandler);\nvar utilsApi = new UtilsApi(httpClient, config, httpClientHandler);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via MySQL Protocol\nDESCRIPTION: Command to connect to Manticore Search using the MySQL client on the default port 9306.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h0 -P9306\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in Java\nDESCRIPTION: Uses the Java API to create a table with a 'title' field that is both a string attribute and indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products ( title string attribute indexed )\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Profiling in SQL\nDESCRIPTION: Demonstrates how to enable profiling for a full-text query in Manticore Search using SQL. The profiling must be activated before executing the query within the same session.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET profiling =1;\nSELECT * FROM test WHERE MATCH('@title abc* @body hey');\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via Java\nDESCRIPTION: Creates a forum table using Java client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE forum(title text, price float)\");\n```\n\n----------------------------------------\n\nTITLE: Performing LEFT JOIN with JSON API\nDESCRIPTION: Example of a LEFT JOIN using the JSON API that retrieves all customers along with their corresponding orders. The query selects customer names and order quantities, and sorts results by customer email.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n\t\"table\": \"customers\",\n\t\"_source\": [\"name\", \"orders.quantity\"],\n\t\"join\": [\n    {\n      \"type\": \"left\",\n      \"table\": \"orders\",\n      \"on\": [\n        {\n          \"left\": {\n            \"table\": \"orders\",\n            \"field\": \"customer_id\"\n          },\n          \"operator\": \"eq\",\n          \"right\": {\n            \"table\": \"customers\",\n            \"field\": \"id\"\n          }\n        }\n      ]\n    }\n  ],\n  \"sort\": [{\"email\": \"asc\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with Python in Manticore Search\nDESCRIPTION: This Python code uses the Manticore Search API to perform a match_all query on the 'pq' table, retrieving all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.search({\"table\":\"pq\",\"query\":{\"match_all\":{}}})\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore PHP Client\nDESCRIPTION: Demonstrates deleting documents with a price less than or equal to 10 from the 'products' index using the PHP client library. Utilizes a Range query object for the filter, sending the request through the index object's deleteDocuments method. PHP Manticoresearch client dependency is required; the response is returned as an associative array.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$result = $index->deleteDocuments(new \\\\Manticoresearch\\\\Query\\\\Range('price',['lte'=>10]));\\n\n```\n\nLANGUAGE: php\nCODE:\n```\nArray\\n(\\n    [_index] => products\\n    [deleted] => 1\\n)\\n\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries via JSON API\nDESCRIPTION: Shows how to use the JSON API to perform percolate query document matching. The request includes multiple documents that will be matched against stored queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_52\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /pq/products/_search\n{\n  \"query\": {\n    \"percolate\": {\n      \"documents\": [\n        {\"title\": \"nice pair of shoes\", \"color\": \"blue\"},\n        {\"title\": \"beautiful bag\"}\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with MVA Field\nDESCRIPTION: Examples of creating a table named 'products' with a text field 'title' and a multi-value field 'product_codes' across different languages and formats.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_77\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, product_codes multi);\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, product_codes multi)\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n\t'product_codes'=>['type'=>'multi']\n]);\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_multi = product_codes\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Documents using Go with Manticoreclient\nDESCRIPTION: This Go snippet shows how to use the Manticoreclient library to insert and update documents in a database. It involves creating document maps and request objects, then executing the requests using an API client. Necessary prerequisites include a Go setup with Manticoreclient and an API client instance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmetaField := map[string]interface{} {\"tags\": []int{1, 2, 3}}\ninsertDoc := map[string]interface{} {\"name\": \"Doc 1\", \"meta\": metaField}}\ninsertRequest := manticoreclient.NewInsertDocumentRequest(\"test\", insertDoc)\ninsertRequest.SetId(1)\nres, _, _ := apiClient.IndexAPI.Insert(context.Background()).InsertDocumentRequest(*insertRequest).Execute();\n\nmetaField = map[string]interface{} {\"tags\": []string{\"one\", \"two\", \"three\"}}\nupdateDoc := map[string]interface{} {\"meta\": metaField}\nupdateRequest := manticoreclient.NewUpdateDocumentRequest(\"test\", updateDoc)\nres, _, _ = apiClient.IndexAPI.Update(context.Background()).UpdateDocumentRequest(*updateRequest).Execute()\n```\n\nLANGUAGE: Go\nCODE:\n```\n{\n\t\"table\":\"test\",\n\t\"_id\":1,\n\t\"created\":true,\n\t\"result\":\"created\"\n}\n\n{\n\t\"table\":\"test\",\n\t\"_id\":1,\n\t\"result\":\"updated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in Rust\nDESCRIPTION: This snippet demonstrates how to replace multiple documents using the bulk API in Rust. It uses a raw string literal to construct the JSON payload containing multiple document replacement operations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nstring body = r#\"{\"replace\": {\"index\" : \"products\", \"id\" : 1, \"doc\" : {\"title\" : \"document one\"}}}\n    {\"replace\": {\"index\" : \"products\", \"id\" : 2, \"doc\" : {\"title\" : \"document two\"}}}\n\"#;\nindex_api.bulk(body).await;\n```\n\nLANGUAGE: rust\nCODE:\n```\nclass BulkResponse {\n    items: [{replace={_index=products, _id=1, created=false, result=updated, status=200}}, {replace={_index=products, _id=2, created=false, result=updated, status=200}}]\n    error: null\n    additionalProperties: {errors=false}\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Match Query in JSON for Manticore Search\nDESCRIPTION: Demonstrates a match query on all fields using JSON. It searches for 'find joe' in the 'hn_small' table and returns the 'story_author' and 'comment_author' fields for the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"table\" : \"hn_small\",\n    \"query\":\n    {\n        \"match\":\n        {\n            \"*\" : \"find joe\"\n        }\n    },\n    \"_source\": [\"story_author\",\"comment_author\"],\n    \"limit\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlighting in Java for Manticore Search\nDESCRIPTION: This Java code demonstrates how to set up a search request with highlighting for Manticore Search. It includes configuring the query and highlight options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_84\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{put(\"*\",\"one|robots\");}}); \nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{put(\"fields\",new String[] {\"content\",\"title\"});put(\"fragment_size\",100);}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Executing Search Query with Highlighting in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to perform a search query with highlighting using the Manticore Search JavaScript client. It searches for specific terms in the 'books' table and limits the highlight snippets to 50 characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"query_string\":\"try|gets|down|said\"},\"highlight\":{\"limit\":50}});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":3,\"hits\":[{\"_id\": 3,\"_score\":1597,\"_source\":{\"title\":\"Book three\",\"content\":\"Trevize whispered, \\\"It gets infantile pleasure out of display. I`d love to knock it down.\\\"\"},\"highlight\":{\"title\":[\"Book three\"],\"content\":[\", \\\"It <b>gets</b> infantile pleasure \",\" to knock it <b>down</b>.\\\"\"]}},{\"_id\": 4,\"_score\":1563,\"_source\":{\"title\":\"Book four\",\"content\":\"Don`t try to compete in childishness, said Bliss.\"},\"highlight\":{\"title\":[\"Book four\"],\"content\":[\"Don`t <b>try</b> to compete in childishness, <b>said</b> Bliss.\"]}},{\"_id\": 5,\"_score\":1514,\"_source\":{\"title\":\"Books two\",\"content\":\"A door opened before them, revealing a small room. Bander said, \\\"Come, half-humans, I want to show you how we live.\\\"\"},\"highlight\":{\"title\":[\"Books two\"],\"content\":[\" a small room. Bander <b>said</b>, \\\"Come, half-humans, I\"]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (Python-asyncio)\nDESCRIPTION: This Python asyncio code creates a table named 'products' with text and float columns, enabling keyword expansion using the Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) expand_keywords = \\'1\\'')\n```\n\n----------------------------------------\n\nTITLE: JSON Faceted Search Response\nDESCRIPTION: Example response from a JSON faceted search query showing aggregated results grouped by property 'a' with document counts and matching documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 6,\n    \"total_relation\": \"eq\",\n    \"hits\": [\n      {\n        \"_id\": 1515697460415037554,\n        \"_score\": 1,\n        \"_source\": {\n          \"a\": 1\n        }\n      },\n      {\n        \"_id\": 1515697460415037555,\n        \"_score\": 1,\n        \"_source\": {\n          \"a\": 2\n        }\n      },\n      {\n        \"_id\": 1515697460415037556,\n        \"_score\": 1,\n        \"_source\": {\n          \"a\": 2\n        }\n      },\n      {\n        \"_id\": 1515697460415037557,\n        \"_score\": 1,\n        \"_source\": {\n          \"a\": 3\n        }\n      },\n      {\n        \"_id\": 1515697460415037558,\n        \"_score\": 1,\n        \"_source\": {\n          \"a\": 3\n        }\n      },\n      {\n        \"_id\": 1515697460415037559,\n        \"_score\": 1,\n        \"_source\": {\n          \"a\": 3\n        }\n      }\n    ]\n  },\n  \"aggregations\": {\n    \"group_property\": {\n      \"buckets\": [\n        {\n          \"key\": 3,\n          \"doc_count\": 3\n        },\n        {\n          \"key\": 2,\n          \"doc_count\": 2\n        },\n        {\n          \"key\": 1,\n          \"doc_count\": 1\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with SQL in Manticore Search\nDESCRIPTION: Removes a table completely from Manticore Search using SQL syntax. The deletion clears the table data and removes all table files from the folder.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE products;\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlighting in JSON for Manticore Search\nDESCRIPTION: This JSON snippet shows how to structure a search request with highlighting for Manticore Search. It includes specifying the query, highlight fields, and fragment size.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"*\": \"one|robots\" } },\n  \"highlight\":\n  {\n    \"fields\": [ \"content\", \"title\" ],\n    \"fragment_size\": 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Go Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using Go. The response includes the table name, document ID, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\"table\":\"test\",\"_id\":1,\"result\":\"deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Manticore using PHP Client\nDESCRIPTION: PHP code to create a table named 'products' with text and float fields and English stemming morphology enabled using the Manticore PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n    'price'=>['type'=>'float'],\n],['morphology' => 'stem_en']);\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Queries in SQL with Manticore Search\nDESCRIPTION: SQL example showing how to run multiple search queries in a single request by separating them with a semicolon. This allows Manticore to apply inter-statement optimizations for better performance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Multi-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, price FROM products WHERE MATCH('remove hair') ORDER BY price DESC; SELECT id, price FROM products WHERE MATCH('remove hair') ORDER BY price ASC\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Search in Docker for Testing\nDESCRIPTION: Docker command for quickly starting a Manticore Search container in sandbox mode for testing purposes. This one-liner starts Manticore, waits for it to be ready, launches a MySQL client session, and removes the container when done.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore --rm -d manticoresearch/manticore && echo \"Waiting for Manticore docker to start. Consider mapping the data_dir to make it start faster next time\" && until docker logs manticore 2>&1 | grep -q \"accepting connections\"; do sleep 1; echo -n .; done && echo && docker exec -it manticore mysql && docker stop manticore\n```\n\n----------------------------------------\n\nTITLE: Understanding Complex Query Interpretation in Manticore Search\nDESCRIPTION: Example of a complex search query in Manticore Search with an explanation of how each part of the query is interpreted and combined to create search logic.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"hello world\" @title \"example program\"~5 @body python -(php|perl) @* code\n```\n\n----------------------------------------\n\nTITLE: Deleting Document by ID\nDESCRIPTION: Example demonstrating how to delete a single document by its ID across different programming interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DELETE FROM TEST WHERE id=1;\nQuery OK, 1 rows affected (0.00 sec)\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /delete -d '\n    {\n        \"table\": \"test\",\n        \"id\": 1\n    }'\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with Go in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in Go. The method requires joining multiple JSON operations with newlines.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_45\n\nLANGUAGE: Go\nCODE:\n```\ndocs = []string {\n  `{ \"delete\" : { \"table\" : \"test\", \"id\": 1 } }`,\n  `{ \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } }`\n}\nbody = strings.Join(docs, \"\\n\")\nresp, httpRes, err := manticoreclient.IndexAPI.Bulk(context.Background()).Body(body).Execute()\n```\n\n----------------------------------------\n\nTITLE: Complex nested bool query in Manticore Search\nDESCRIPTION: Illustrates a complex nested boolean query combining 'must', 'should', and 'must_not' clauses to create advanced filtering logic.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"t\",\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"equals\": {\n            \"b\": 1\n          }\n        },\n        {\n          \"equals\": {\n            \"b\": 3\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"equals\": {\n            \"a\": 1\n          }\n        }\n      ],\n      \"must_not\": {\n        \"equals\": {\n          \"b\": 2\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plain Table with MySQL Source in Manticore Search\nDESCRIPTION: Example configuration for creating a plain table that indexes data from a MySQL database source. Demonstrates setting up both the source configuration with MySQL connection details and table settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_table.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsource source {\n  type             = mysql\n  sql_host         = localhost\n  sql_user         = myuser\n  sql_pass         = mypass\n  sql_db           = mydb\n  sql_query        = SELECT id, title, description, category_id  from mytable\n  sql_attr_uint    = category_id\n  sql_field_string = title\n }\n\ntable tbl {\n  type   = plain\n  source = source\n  path   = /path/to/table\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Highlighting in C#\nDESCRIPTION: This C# code snippet demonstrates how to configure a search request with highlighting using the Manticore Search API. It sets up a match filter and highlight options for specific fields, ordering the highlights by score.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_77\n\nLANGUAGE: clike\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"one|robots\");\nvar highlight = new Highlight();\nhighlight.Fieldnames = new List<string> {\"content\", \"title\"};\nhighlight.Order =  \"score\";\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Explain Query Execution Tree\nDESCRIPTION: Shows how to use EXPLAIN QUERY to display the execution tree for a full-text query without performing the actual search. Demonstrates morphology handling and field-specific search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN QUERY index_base '@title running @body dog'\\G\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using Elasticsearch Format in Manticore Search\nDESCRIPTION: This snippet demonstrates how to insert documents into a real-time table named 'products' using the Elasticsearch-compatible format. It shows inserting documents with and without specifying an ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /products/_create/3\n{\n  \"title\": \"Yellow Bag with Tassel\",\n  \"price\": 19.85\n}\n\nPOST /products/_create/\n{\n  \"title\": \"Red Bag with Tassel\",\n  \"price\": 19.85\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Search Query with Sorting\nDESCRIPTION: Demonstrates a search query that combines filtering by author_id and forum_id attributes with sorting by post_date in descending order. Shows implementation across different programming languages and APIs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from forum where author_id=123 and forum_id in (1,3,7) order by post_date desc\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"forum\",\n  \"query\":\n  {\n    \"match_all\": {},\n    \"bool\":\n    {\n      \"must\":\n      [\n        { \"equals\": { \"author_id\": 123 } },\n\t\t{ \"in\": { \"forum_id\": [1,3,7] } }\n      ]\n    }\n  },\n  \"sort\": [ { \"post_date\": \"desc\" } ]\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$client->search([\n        'table' => 'forum',\n        'query' =>\n        [\n            'match_all' => [],\n            'bool' => [\n                'must' => [\n                    'equals' => ['author_id' => 123],\n                    'in' => [\n                        'forum_id' => [\n                            1,3,7\n                        ]\n                    ]\n                ]\n            ]\n        ],\n        'sort' => [\n        ['post_date' => 'desc']\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster Table in SQL\nDESCRIPTION: Demonstrates how to delete documents from a table within a replication cluster using SQL. The example shows how to specify both the cluster and table names when deleting by document ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\ndelete from cluster:test where id=100;\n```\n\n----------------------------------------\n\nTITLE: Java Aggregation Query\nDESCRIPTION: Implements a search request with aggregations using Java HashMap objects. Configures terms aggregations on price and brand_id fields with specified sizes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_53\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\naggs = new HashMap<String,Object>(){{\n    put(\"group_property\", new HashMap<String,Object>(){{\n        put(\"terms\", new HashMap<String,Object>(){{\n                put(\"field\",\"price\");\n                put(\"size\",1);\n\n\n        }});\n    }});\n    put(\"group_brand_id\", new HashMap<String,Object>(){{\n        put(\"terms\", new HashMap<String,Object>(){{\n                put(\"field\",\"brand_id\");\n                put(\"size\",3);\n\n\n        }});\n    }});            \n}};\nsearchRequest.setIndex(\"facetdemo\");        \nsearchRequest.setLimit(5);\nquery = new HashMap<String,Object>();\nquery.put(\"match_all\",null);\nsearchRequest.setQuery(query);\nsearchRequest.setAggs(aggs);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Aggregating Search in Manticore using PHP\nDESCRIPTION: This PHP snippet utilizes the Manticore Search API to perform a grouped aggregation by the 'color' field in the 'meta' JSON of the 'products' index. It requires the Manticore PHP client library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('products');\n$search = $index->search('');\n$search->limit(0);\n$search->facet('meta.color','color',100);\n$results = $search->get();\nprint_r($results->getFacets());\n```\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [color] => Array\n        (\n            [buckets] => Array\n                (\n                    [0] => Array\n                        (\n                            [key] => green\n                            [doc_count] => 1\n                        )\n                    [1] => Array\n                        (\n                            [key] => red\n                            [doc_count] => 2\n                        )\n                )\n        )\n)\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Ranker in SQL Query\nDESCRIPTION: This SQL example demonstrates how to use a custom ranker plugin named 'myranker' in a Manticore Search query, passing an option string to the ranker.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Ranker_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, attr1 FROM test WHERE match('hello') OPTION ranker=myranker('option1=1');\n```\n\n----------------------------------------\n\nTITLE: Histogram Date Values Faceting\nDESCRIPTION: Shows how to perform faceted search using date histogram with calendar intervals. Demonstrates grouping by months using both SQL and JSON approaches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*), DATE_HISTOGRAM(tm, {calendar_interval='month'}) AS months FROM idx_dates GROUP BY months ORDER BY months ASC\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n{\n  \"table\": \"idx_dates\",\n  \"size\": 0,\n  \"aggs\": {\n    \"months\": {\n      \"date_histogram\": {\n        \"field\": \"tm\",\n        \"keyed\": true,\n        \"calendar_interval\": \"month\"\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Querying Distributed Table Status in SQL\nDESCRIPTION: Demonstrates checking the status of agents in a distributed table using direct SQL. Shows HA status, mirror information and probability weights.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nSHOW AGENT dist_index STATUS;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in Python-asyncio\nDESCRIPTION: This Python-asyncio snippet demonstrates how to create a table with a text field using the asynchronous Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text)')\n```\n\n----------------------------------------\n\nTITLE: Searching with Profiling in Manticore (Java)\nDESCRIPTION: Builds and executes a search request using the Java client. It sets the index to 'forum', defines a `query_string` query for 'way*' in 'title' and 'hey' in 'content', enables profiling, sets a limit of 1, and specifies sorting (though '*' likely means default relevance sorting). The response is represented as a `SearchResponse` class structure containing hits and profile details.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n\nquery = new HashMap<String,Object>();\nquery.put(\"query_string\",\"@title way* @content hey\");\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"forum\");\nsearchRequest.setQuery(query);\nsearchRequest.setProfile(true);\nsearchRequest.setLimit(1);\nsearchRequest.setSort(new ArrayList<String>(){{\n    add(\"*\");\n}});\nsearchResponse = searchApi.search(searchRequest);\n```\n\nLANGUAGE: java\nCODE:\n```\nclass SearchResponse {\n    took: 18\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=2811025403043381551, _score=2643, _source={}}]\n        aggregations: null\n    }\n    profile: {query={type=AND, description=AND( AND(fields=(title), KEYWORD(way*, querypos=1, expanded)),  AND(fields=(content), KEYWORD(hey, querypos=2))), children=[{type=AND, description=AND(fields=(title), KEYWORD(way*, querypos=1, expanded)), fields=[title], children=[{type=KEYWORD, word=way*, querypos=1, expanded=true}]}, {type=AND, description=AND(fields=(content), KEYWORD(hey, querypos=2)), fields=[content], children=[{type=KEYWORD, word=hey, querypos=2}]}]}}\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with Python-asyncio in Manticore Search\nDESCRIPTION: This Python code uses the asyncio version of the Manticore Search API to perform an asynchronous match_all query on the 'pq' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.search({\"table\":\"pq\",\"query\":{\"match_all\":{}}})\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Search Highlighting\nDESCRIPTION: Demonstrates search highlighting configuration in Go using the Manticore client. Sets up match query and highlight parameters with custom tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_66\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"}\nquery := map[string]interface{} {\"match\": matchClause}\nsearchRequest.SetQuery(query)\nhighlight := manticoreclient.NewHighlight()\nhighlight.SetPreTags(\"before_\")\nhighlight.SetPostTags(\"_after\")\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Executing Highlighted Match Query (Async/Await) - ManticoreSearch Python\nDESCRIPTION: This async/await Python example submits the same highlighted search to ManticoreSearch using an asynchronous client. It matches terms 'one' or 'robots' in all fields and asks for highlights to be returned. Requires an async-enabled searchApi instance and event loop. Response structure is identical to the synchronous version, providing a dictionary with document results and highlighted snippets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{}})\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using TypeScript in Manticore Search\nDESCRIPTION: Uses the TypeScript client to find percolate query rules that match a document with a specific title. The example shows a concise way to construct the query structure and make the API call using async/await.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.percolate('test_pq', { query: { percolate: { document : { title : 'What a nice bag' } } } } );\n```\n\n----------------------------------------\n\nTITLE: Sample Highlighted Search Response (Synchronous) - ManticoreSearch Python\nDESCRIPTION: This code represents a sample synchronous search response in Python, displaying total hits, scores, document data, and highlight fields as returned from ManticoreSearch. Fields are represented as Unicode strings and highlighted spans are shown as HTML fragments within the fields. No dependencies are required to interpret this output, which is typically returned as a Python dict.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 2788,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u'They followed Bander. The <b>robots</b> remained at a polite distance, ',\n                                                u' three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander',\n                                                u' gestured the other <b>robots</b> away and entered itself. The'],\n                                   u'title': [u'Books <b>one</b>']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Basic Manticore Search SQL Operations\nDESCRIPTION: Example SQL commands showing table creation, data insertion, and various search queries including highlighting and faceting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table movies(title text, year int) morphology='stem_en' html_strip='1' stopwords='en';\n\ninsert into movies(title, year) values ('The Seven Samurai', 1954), ('Bonnie and Clyde', 1954), ('Reservoir Dogs', 1992), ('Airplane!', 1980), ('Raging Bull', 1980), ('Groundhog Day', 1993), ('<a href=\"http://google.com/\">Jurassic Park</a>', 1993), ('Ferris Bueller\\'s Day Off', 1986);\n\nselect highlight(), year from movies where match('the dog');\n\nselect highlight(), year from movies where match('days') facet year;\n\nselect * from movies where match('google');\n```\n\n----------------------------------------\n\nTITLE: Bulk Indexing Documents via Elasticsearch _bulk Endpoint (JSON)\nDESCRIPTION: This snippet illustrates how to use the Elasticsearch-compatible _bulk HTTP endpoint to index documents in ManticoreSearch, allowing the use of table names with or without an explicit id field. Each action line is paired with its corresponding document, following NDJSON formatting. Prerequisites: The table must already exist, or Manticore Buddy must be installed. Parameters include 'table', optional 'id', and document fields; outputs indicate creation status and errors. Document batch size and metadata must align per the endpoint's design.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{ \"index\": { \"table\" : \"products\", \"_id\" : \"1\" } }\n{ \"title\" : \"Crossbody Bag with Tassel\", \"price\": 19.85 }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"index\": { \"table\" : \"products\" } }\n{ \"title\" : \"Crossbody Bag with Tassel\", \"price\": 19.85, \"id\": \"1\" }\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /_bulk\n-H \"Content-Type: application/x-ndjson\" -d '\n{ \"index\" : { \"table\" : \"products\" } }\n{ \"title\" : \"Yellow Bag\", \"price\": 12 }\n{ \"create\" : { \"table\" : \"products\" } }\n{ \"title\" : \"Red Bag\", \"price\": 12.5, \"id\": 3 }\n'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"table\": {\n        \"table\": \"products\",\n        \"_type\": \"doc\",\n        \"_id\": 1657860156022587406,\n        \"_version\": 1,\n        \"result\": \"created\",\n        \"_shards\": {\n          \"total\": 1,\n          \"successful\": 1,\n          \"failed\": 0\n        },\n        \"_seq_no\": 0,\n        \"_primary_term\": 1,\n        \"status\": 201\n      }\n    },\n    {\n      \"create\": {\n        \"table\": \"products\",\n        \"_type\": \"doc\",\n        \"_id\": 3,\n        \"_version\": 1,\n        \"result\": \"created\",\n        \"_shards\": {\n          \"total\": 1,\n          \"successful\": 1,\n          \"failed\": 0\n        },\n        \"_seq_no\": 0,\n        \"_primary_term\": 1,\n        \"status\": 201\n      }\n    }\n  ],\n  \"errors\": false,\n  \"took\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Updates in Rust\nDESCRIPTION: Demonstrates how to perform bulk updates on products index in Rust. It updates the 'coeff' field based on price ranges.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nstring  body = r#\"{ \"update\" : { \"index\" : \"products\", \"doc\": { \"coeff\" : 1000 }, \"query\": { \"range\": { \"price\": { \"gte\": 1000 } } } }}\n    { \"update\" : { \"index\" : \"products\", \"doc\": { \"coeff\" : 0 }, \"query\": { \"range\": { \"price\": { \"lt\": 1000 } } } } }\n\"#;\nindex_api.bulk(body).await;\n```\n\nLANGUAGE: rust\nCODE:\n```\nclass BulkResponse {\n    items: [{update={_index=products, _id=1, created=false, result=updated, status=200}}, {update={_index=products, _id=2, created=false, result=updated, status=200}}]\n    error: null\n    additionalProperties: {errors=false}\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results in Go\nDESCRIPTION: This snippet demonstrates how to create a search request with highlighting in Go for Manticore Search. It sets up a match clause, creates a search query, and configures highlighting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Manticore using Python Client\nDESCRIPTION: Python code to create a table named 'products' with text and float fields and English stemming morphology enabled using the Manticore Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('create table products(title text, price float) morphology=\\'stem_en\\'')\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query in Go\nDESCRIPTION: This example demonstrates how to perform a percolate query using the Manticore Search Go client. It creates two documents as maps and sends them to the 'test_pq' index for matching against stored queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_92\n\nLANGUAGE: go\nCODE:\n```\ndoc1 := map[string]interface{} {\"title\": \"What a nice bag\"}\ndoc2 := map[string]interface{} {\"title\": \"Really nice shoes\"}\nquery := []interface{} {doc1, doc2}\npercolateRequestQuery := manticoreclient.NewPercolateQuery(query)\npercolateRequest := manticoreclient.NewPercolateRequest(percolateRequestQuery)\nres, _, _ := apiClient.SearchAPI.Percolate(context.Background(), \"test_pq\").PercolateRequest(*percolateRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Constructing Search Query in Go\nDESCRIPTION: Example of creating a search request in Go using method chaining and map structures for query and sort configurations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nsearchRequest.SetIndex(\"test\")\nsearchRequest.SetTrackScores(true)\nquery := map[string]interface{} {\"query_string\": \"Test document\"}\nsearchRequest.SetQuery(query)\nsort := map[string]interface{} { \"attr_mva\": { \"order\":\"desc\", \"mode\":\"max\" } }\nsearchRequest.SetSort(sort)\n```\n\n----------------------------------------\n\nTITLE: Basic Sorting via JSON in Manticore Search\nDESCRIPTION: Shows how to specify sorting in JSON format for Manticore Search. Allows sorting by attribute names and _score (match weights). Default order is ascending for attributes and descending for _score.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test\",\n  \"query\":\n  {\n    \"match\": { \"title\": \"Test document\" }\n  },\n  \"sort\": [ \"_score\", \"id\" ],\n  \"_source\": \"title\",\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GROUPBY Function Usage in SQL\nDESCRIPTION: Example showing how to use GROUPBY() function with HAVING clause to filter specific years in a films table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT release_year, count(*) FROM films GROUP BY release_year HAVING GROUPBY() IN (2000, 2002);\n```\n\n----------------------------------------\n\nTITLE: Creating Chinese Product Table via Rust API in Manticore Search\nDESCRIPTION: This snippet uses the Rust API to create a 'products' table with Chinese language support in Manticore Search. It sets the charset table, morphology, and stopwords for Chinese language processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Languages_with_continuous_scripts.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) charset_table = 'chinese' morphology = 'icu_chinese' stopwords = 'zh'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in HTTP JSON for Manticore Search\nDESCRIPTION: Shows how to control pagination in HTTP JSON requests using the 'offset' and 'limit' nodes or the alternative 'size' and 'from' pair to navigate through search results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"<table_name>\",\n  \"query\": ...\n  ...  \n  \"limit\": 20,\n  \"offset\": 0\n}\n{\n  \"table\": \"<table_name>\",\n  \"query\": ...\n  ...  \n  \"size\": 20,\n  \"from\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with JSON Request\nDESCRIPTION: POST request to search for 'one|robots' in the 'books' table and highlight matches in 'title' and 'content' fields, with a limit of 50 for content highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_96\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"*\": \"one|robots\"  } },\n      \"highlight\":\n      {\n\t\t\"fields\":\n\t\t{\n\t\t\t\"title\": {},\n\t\t\t\"content\" : { \"limit\": 50 }\n\t\t}\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating DOT Format Query Execution Tree with SHOW PLAN in Manticore Search\nDESCRIPTION: This SQL snippet demonstrates how to use the SHOW PLAN command with the 'format=dot' option to generate a hierarchical representation of the full-text query execution tree. The output is suitable for visualization using tools like GraphvizOnline.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [(none)]> show plan option format=dot\\G\n*************************** 1. row ***************************\nVariable: transformed_tree\n   Value: digraph \"transformed_tree\"\n{\n\n0 [shape=record,style=filled,bgcolor=\"lightgrey\" label=\"AND\"]\n0 -> 1\n1 [shape=record,style=filled,bgcolor=\"lightgrey\" label=\"AND\"]\n1 -> 2\n2 [shape=record label=\"i | { querypos=1 }\"]\n0 -> 3\n3 [shape=record,style=filled,bgcolor=\"lightgrey\" label=\"AND\"]\n3 -> 4\n4 [shape=record label=\"me | { querypos=2 }\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using JSON API\nDESCRIPTION: This snippet shows how to insert a document with multi-value attributes (MVA) using the Manticore Search JSON API. The MVA values are represented as an array of numbers in the JSON payload.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert\n{\n  \"table\":\"products\",\n  \"id\":1,\n  \"doc\":\n  {\n    \"title\" : \"shoes\",\n    \"sizes\" : [40, 41, 42, 43]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Data Using Manticore Search Docker Image\nDESCRIPTION: This snippet demonstrates how to use the Manticore Search Docker image to upload files from the current directory to the write-only S3 storage. It mounts the current directory and runs the upload process interactively.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v $(pwd):/upload manticoresearch/upload\n```\n\n----------------------------------------\n\nTITLE: Searching in a Specific Field using Python-asyncio\nDESCRIPTION: Uses the Python asyncio API to search in the 'products' table, looking only in the 'title' field for the word 'first'. This is an asynchronous version of the Python call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.search({\"table\":\"products\",\"query\":{\"match\":{\"title\":\"first\"}}})\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore Python Client (Asyncio)\nDESCRIPTION: Demonstrates asynchronous deletion of filtered documents from the 'products' table using an asyncio-based Python client. The await expression allows non-blocking execution. Dependencies include the 'manticoresearch' client supporting async operations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nawait indexApi.delete({\\\"table\\\" : \\\"products\\\", \\\"query\\\": {\\\"range\\\":{\\\"price\\\":{\\\"lte\\\":10}}}})\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Using PHP for Manticore Auto ID\nDESCRIPTION: This PHP snippet demonstrates inserting a document into a Manticore table with an auto-generated ID. The code shows the PHP object structure necessary for making this operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$index->addDocuments([\n        ['id' => 0, 'title' => 'Yellow bag']\n]);\n```\n\n----------------------------------------\n\nTITLE: Calculating String Distance with LEVENSHTEIN() in Manticore Search SQL\nDESCRIPTION: Shows usage of the LEVENSHTEIN() function to calculate edit distance between strings, with options for normalization and length delta optimization.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/String_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT LEVENSHTEIN('gily', attr1) AS dist, WEIGHT() AS w FROM test WHERE MATCH('test') ORDER BY w DESC, dist ASC;\nSELECT LEVENSHTEIN('gily', j.name, {length_delta=6}) AS dist, WEIGHT() AS w FROM test WHERE MATCH('test') ORDER BY w DESC;\nSELECT LEVENSHTEIN(title, j.name, {normalize=1}) AS dist, WEIGHT() AS w FROM test WHERE MATCH ('test') ORDER BY w DESC, dist ASC;\n```\n\n----------------------------------------\n\nTITLE: Set filter with all() function in Manticore Search\nDESCRIPTION: Shows how to use the all() function with a set filter on a multi-value attribute to match documents where all attribute values are in the specified set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test1\",\n  \"query\": {\n    \"in\": {\n      \"all(price)\": [1,10]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Percolation Query with Java\nDESCRIPTION: Uses a Java approach to perform a percolation query, specifying document data in a map structure and executing the search over the 'products' dataset.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_44\n\nLANGUAGE: java\nCODE:\n```\npercolateRequest = new PercolateRequest();\nquery = new HashMap<String,Object>(){{\n        put(\"percolate\",new HashMap<String,Object >(){{\n            put(\"documents\", new ArrayList<Object>(){{\n                    add(new HashMap<String,Object >(){{\n                        put(\"title\",\"nice pair of shoes\");\n                        put(\"color\",\"blue\");\n                    }});\n                    add(new HashMap<String,Object >(){{\n                        put(\"title\",\"beautiful bag\");\n\n                    }});\n\n                     }});\n        }});\n    }};\npercolateRequest.query(query);\nsearchApi.percolate(\"products\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Executing Percolation Query with JSON\nDESCRIPTION: Uses a JSON-based POST request to perform a percolation search on the 'products' dataset. The documents are specified in JSON format, and the result includes document matches and metadata.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\nPOST /pq/products/_search\n{\n  \"query\": {\n    \"percolate\": {\n      \"documents\": [\n        {\"title\": \"nice pair of shoes\", \"color\": \"blue\"},\n        {\"title\": \"beautiful bag\"}\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore APT Repository on Debian/Ubuntu\nDESCRIPTION: Commands to download and install the Manticore APT repository, update package lists, and install Manticore Search with extra components.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Debian_and_Ubuntu.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.manticoresearch.com/manticore-repo.noarch.deb\nsudo dpkg -i manticore-repo.noarch.deb\nsudo apt update\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install manticore manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Bulk Inserting Documents in C# using Manticore Search API\nDESCRIPTION: This snippet demonstrates how to bulk insert multiple documents into a Manticore Search index using C#. It constructs a JSON-formatted string with multiple insert operations and uses the Bulk method of the indexApi to perform the insertion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_30\n\nLANGUAGE: clike\nCODE:\n```\nstring body = \"{\\\"insert\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 1, \\\"doc\\\" : {\\\"title\\\" : \\\"Crossbody Bag with Tassel\\\", \\\"price\\\" : 19.85}}}\"+\"\\n\"+\n    \"{\\\"insert\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 4, \\\"doc\\\" : {\\\"title\\\" : \\\"microfiber sheet set\\\", \\\"price\\\" : 19.99}}}\"+\"\\n\"+\n    \"{\\\"insert\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 5, \\\"doc\\\" : {\\\"title\\\" : \\\"CPet Hair Remover Glove\\\", \\\"price\\\" : 7.99}}}\"+\"\\n\";\nBulkResponse bulkresult = indexApi.Bulk(string.Join(\"\\n\", docs));\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with Rust Client\nDESCRIPTION: Creates a search query in Rust with highlighting capabilities. The code sets up a match filter to search for specific terms and configures the highlight parameter with a limit of 50 results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"try|gets|down|said\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet highlight = Highlight {\n    limit: Some(50),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in JavaScript\nDESCRIPTION: This snippet shows how to replace multiple documents using the bulk API in JavaScript. It uses async/await syntax and joins the JSON-stringified documents with newlines.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndocs = [\n    {\"replace\": {\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"title\" : \"document one\"}}},\n    {\"replace\": {\"table\" : \"products\", \"id\" : 2, \"doc\" : {\"title\" : \"document two\"}}} ];\nres =  await indexApi.bulk(docs.map(e=>JSON.stringify(e)).join('\\n'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"items\":[{\"replace\":{\"table\":\"products\",\"_id\":1,\"created\":false,\"result\":\"updated\",\"status\":200}},{\"replace\":{\"table\":\"products\",\"_id\":2,\"created\":false,\"result\":\"updated\",\"status\":200}}],\"errors\":false}\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregation in TypeScript with Manticore Search\nDESCRIPTION: This TypeScript example shows how to perform an aggregation query using the Manticore Search API. It aggregates on the 'cat' field with a size of 1.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  limit: 0,\n  aggs: {\n    cat_id: {\n      terms: { field: \"cat\", size: 1 }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Highlighted Search Response (Async/Await) - ManticoreSearch Python\nDESCRIPTION: This code block is a sample asynchronous response received in Python after a highlighted search. The structure mirrors that of synchronous responses: it contains hits, scores, and highlighted fields with HTML <b> tags. This format supports async/await idioms, using the returned dict directly in coroutine workflows.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 2788,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u'They followed Bander. The <b>robots</b> remained at a polite distance, ',\n                                                u' three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander',\n                                                u' gestured the other <b>robots</b> away and entered itself. The'],\n                                   u'title': [u'Books <b>one</b>']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search for Faceted Aggregation - Java\nDESCRIPTION: This code constructs and executes a faceted search using the Java client for Manticore Search. It builds a SearchRequest object, adds an INTERVAL expression to classify price into buckets, configures a terms aggregation on 'price_range', and submits the query to the searchApi client. The snippet expects dependencies on Manticore Search Java SDK and related classes such as SearchRequest. The response's aggregation buckets and hits are parsed from the resulting SearchResponse.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nsearchRequest = new SearchRequest();\nexpressions = new HashMap<String,Object>(){{\n    put(\"price_range\",\"INTERVAL(price,200,400,600,800)\");\n}};\nsearchRequest.setExpressions(expressions);\naggs = new HashMap<String,Object>(){{\n    put(\"group_property\", new HashMap<String,Object>(){{\n        put(\"terms\", new HashMap<String,Object>(){{\n                put(\"field\",\"price_range\");\n        }});\n    }});\n}};\nsearchRequest.setIndex(\"facetdemo\");        \nsearchRequest.setLimit(5);\nquery = new HashMap<String,Object>();\nquery.put(\"match_all\",null);\nsearchRequest.setQuery(query);\nsearchRequest.setAggs(aggs);\nsearchResponse = searchApi.search(searchRequest);\n```\n\nLANGUAGE: Java\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    aggregations: {group_property={buckets=[{key=4, doc_count=2100}, {key=3, doc_count=1973}, {key=2, doc_count=1999}, {key=1, doc_count=2043}, {key=0, doc_count=1885}]}}\n    hits: class SearchResponseHits {\n        maxScore: null\n        total: 10000\n        hits: [{_id=1, _score=1, _source={price=197, brand_id=10, brand_name=Brand Ten, categories=[10], title=Product Eight One, property=Six, price_range=0}}, {_id=2, _score=1, _source={price=671, brand_id=6, brand_name=Brand Six, categories=[12, 13, 14], title=Product Nine Seven, property=Four, price_range=3}}, {_id=3, _score=1, _source={price=92, brand_id=3, brand_name=Brand Three, categories=[13, 14, 15], title=Product Five Four, property=Six, price_range=0}}, {_id=4, _score=1, _source={price=713, brand_id=10, brand_name=Brand Ten, categories=[11], title=Product Eight Nine, property=Five, price_range=3}}, {_id=5, _score=1, _source={price=805, brand_id=7, brand_name=Brand Seven, categories=[11, 12, 13], title=Product Ten Three, property=Two, price_range=4}}]\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Groups with HAVING in SQL for Manticore Search\nDESCRIPTION: This SQL query demonstrates how to filter groups using the HAVING clause. It returns only the years where the average rental rate was higher than 3.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT release_year, avg(rental_rate) avg FROM films GROUP BY release_year HAVING avg > 3;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in SQL\nDESCRIPTION: Shows how to create a table with a multi64 field using SQL. The multi64 data type allows storing variable-length lists of 64-bit signed integers, similar to the multi-value integer type.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_87\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, values multi64);\n```\n\n----------------------------------------\n\nTITLE: Submitting Highlighted Search Request (Promise) - ManticoreSearch Javascript\nDESCRIPTION: This JavaScript promise-based example performs a highlighted search on the 'books' table searching for 'one' or 'robots' in all fields, requesting that the response includes highlighted snippets. It expects an instance of the searchApi client already configured. The resulting promise resolves to an object where highlights are embedded and ready for further usage in the interface or processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{}});\n```\n\n----------------------------------------\n\nTITLE: Paginated Request Using Scroll in HTTP JSON for Manticore Search\nDESCRIPTION: Demonstrates how to use the scroll token in subsequent HTTP JSON requests to retrieve the next page of results. The scroll token is included in the options object, and specifying the sort criteria is optional.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{ \n  \"table\": \"<table_names>\",\n  \"options\": {\n    \"scroll\": \"<base64 encoded scroll token>\"\n  },\n\n  ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates by Query in Manticore Search using PHP\nDESCRIPTION: This PHP code demonstrates how to perform bulk updates by query using the Manticore Search PHP client. It updates the 'coeff' field based on price ranges in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$client->bulk([\n    ['update'=>[\n            'table' => 'products',\n             'doc' => [\n                'coeff' => 100\n            ],\n            'query' => [\n                'range' => ['price'=>['gte'=>1000]]\n            ]   \n        ]\n    ],\n    ['update'=>[\n            'table' => 'products',\n             'doc' => [\n                'coeff' => 0\n            ],\n            'query' => [\n                'range' => ['price'=>['lt'=>1000]]\n            ]   \n        ]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using C# in Manticore Search\nDESCRIPTION: This snippet demonstrates how to insert documents into a real-time table named 'products' using the C# client for Manticore Search. It shows inserting documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"Crossbody Bag with Tassel\");\ndoc.Add(\"price\", 19.85);\nInsertDocumentRequest newdoc = new InsertDocumentRequest(index: \"products\", id: 1, doc: doc);\nvar sqlresult = indexApi.Insert(newdoc);\n\ndoc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"Crossbody Bag with Tassel\");\nnewdoc = new InsertDocumentRequest(index: \"products\", id: 2, doc: doc);\nsqlresult = indexApi.Insert(newdoc);\n\ndoc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"Yellow bag\");\nnewdoc = new InsertDocumentRequest(index: \"products\", id: 0, doc: doc);\nsqlresult = indexApi.Insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Highlighting with Python-asyncio in Manticore Search\nDESCRIPTION: This snippet shows how to use the asynchronous search API in Python to perform a search query with highlighting enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nres = await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"try\"}},\"highlight\":{}})\n```\n\n----------------------------------------\n\nTITLE: Configuring Search with Highlight Ordering in JSON\nDESCRIPTION: This JSON snippet shows how to configure a search request with highlighting in Manticore Search. It includes a match query and highlight settings with field specification and ordering by score.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_72\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"*\": \"one|robots\" } },\n  \"highlight\":\n  {\n    \"fields\": [ \"content\", \"title\" ],\n    \"order\": \"score\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Table Creation Statement\nDESCRIPTION: Displays the CREATE TABLE statement that was used to create a specific table, including all table settings and options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Listing_tables.md#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE tbl\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (Python)\nDESCRIPTION: Python code to create a table with a JSON field that has a secondary index in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, j json secondary_index='1')')\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore Rust Client\nDESCRIPTION: Provides a Rust example utilizing HashMaps and serde_json to send a delete request for documents with price <= 10 on the 'products' table. The code builds the filter structure and asynchronously executes the deletion through index_api.delete. Requires Manticore Rust client and serde dependencies.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\nlet mut price_range= HashMap::new();\\nprice_range.insert(\\\"lte\\\".to_string(), serde_json::json!(10));\\nlet mut range= HashMap::new();\\nrange.insert(\\\"price\\\".to_string(), serde_json::json!(price_range));\\nlet delete_req = DeleteDocumentRequest {\\n    table: \\\"products\\\".to_string(),\\n    query: serde_json::json!(range),\\n    ..Default::default(),\\n};\\nindex_api.delete(delete_req).await;\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on MacOS\nDESCRIPTION: Commands to install and start Manticore Search on MacOS using Homebrew package manager.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install manticoresearch\nbrew services start manticoresearch\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Attributes in SQL\nDESCRIPTION: Example of updating multiple attributes (price, coeff, tags1, tags2) for documents matching certain conditions in the 'products' table using SQL syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE products\nSET price=100000000000,\n    coeff=3465.23,\n    tags1=(3,6,4),\n    tags2=()\nWHERE MATCH('phone') AND enabled=1;\n```\n\n----------------------------------------\n\nTITLE: Executing Match Phrase Query in JSON for Manticore Search\nDESCRIPTION: Shows a match_phrase query on all fields using JSON. It searches for the exact phrase 'find joe' in the 'hn_small' table and returns the 'story_author' and 'comment_author' fields for the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"table\" : \"hn_small\",\n    \"query\":\n    {\n        \"match_phrase\":\n        {\n            \"*\" : \"find joe\"\n        }\n    },\n    \"_source\": [\"story_author\",\"comment_author\"],\n    \"limit\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Status Command Response in Manticore\nDESCRIPTION: Sample output of the 'status' command showing detailed information about the Manticore node, including server version, connection details, uptime, thread metrics, and query statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n--------------\nmysql  Ver 14.14 Distrib 5.7.30, for Linux (x86_64) using  EditLine wrapper\n\nConnection id:\t\t378\nCurrent database:\tManticore\nCurrent user:\t\tUsual\nSSL:\t\t\tNot in use\nCurrent pager:\t\tstdout\nUsing outfile:\t\t''\nUsing delimiter:\t;\nServer version:\t\t3.4.3 a48c61d6@200702 coroutines git branch coroutines_work_junk...origin/coroutines_work_junk\nProtocol version:\t10\nConnection:\t\t0 via TCP/IP\nServer characterset:\nDb     characterset:\nClient characterset:\tutf8\nConn.  characterset:\tutf8\nTCP port:\t\t8306\nUptime:\t\t\t23 hours 6 sec\n\nThreads: 12  Queue: 3  Clients: 1  Vip clients: 0  Tasks: 5  Queries: 318967  Wall: 7h  CPU: 0us\nQueue/Th: 0.2  Tasks/Th: 0.4\n--------------\n```\n\n----------------------------------------\n\nTITLE: JSON Faceted Search Query\nDESCRIPTION: Shows how to perform a faceted search using the JSON API. The query groups results by a property 'a' and sorts them by count in descending order.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_45\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n{\n   \"table\":\"table_name\",\n   \"aggs\":{\n      \"group_property\":{\n         \"terms\":{\n            \"field\":\"a\"\n         },\n         \"sort\":[\n            {\n               \"count(*)\":{\n                  \"order\":\"desc\"\n               }\n            }\n         ]\n      }\n   }\n}'\n```\n\n----------------------------------------\n\nTITLE: Forcing Secondary Index Usage in SQL Query for Manticore Search\nDESCRIPTION: This SQL query demonstrates how to use the SecondaryIndex hint to force the use of a secondary index on the 'age' attribute when querying the 'students' table in Manticore Search. The hint is provided as a comment within the SQL statement.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM students where age > 21 /*+ SecondaryIndex(age) */\n```\n\n----------------------------------------\n\nTITLE: Searching with Profiling in Manticore (Python)\nDESCRIPTION: Executes a synchronous search query against the 'forum' index using the Python client. The query uses `query_string` to search for 'way*' in the 'title' field and 'hey' in the 'content' field. It excludes all source fields (`_source`), limits the result set to 1, and enables profiling (`profile:true`). The response includes hit details and a `profile` object detailing the query execution plan.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.search({\"table\":\"forum\",\"query\":{\"query_string\":\"@title way* @content hey\"},\"_source\":{\"excludes\":[\"*\"]},\"limit\":1,\"profile\":true})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'2811025403043381551',\n                    u'_score': 2643,\n                    u'_source': {}}],\n          'total': 1},\n 'profile': {u'query': {u'children': [{u'children': [{u'expanded': True,\n                                                      u'querypos': 1,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'way*'}],\n                                       u'description': u'AND(fields=(title), KEYWORD(way*, querypos=1, expanded))',\n                                       u'fields': [u'title'],\n                                       u'type': u'AND'},\n                                      {u'children': [{u'querypos': 2,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'hey'}],\n                                       u'description': u'AND(fields=(content), KEYWORD(hey, querypos=2))',\n                                       u'fields': [u'content'],\n                                       u'type': u'AND'}],\n                        u'description': u'AND( AND(fields=(title), KEYWORD(way*, querypos=1, expanded)),  AND(fields=(content), KEYWORD(hey, querypos=2)))',\n                        u'type': u'AND'}},\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Bulk Adding Documents via Java Client (Java)\nDESCRIPTION: This Java example shows how to format and send multiple document inserts to ManticoreSearch using the Java client. The request body is composed as a string in Manticore /bulk NDJSON format and submitted via indexApi.bulk(). Prerequisites: a configured Java indexApi client. Inputs include JSON-formatted lines representing individual document inserts; output is the bulk response. Document structure must match the /bulk API schema.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nString body = \"{\\\"insert\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 1, \\\"doc\\\" : {\\\"title\\\" : \\\"Crossbody Bag with Tassel\\\", \\\"price\\\" : 19.85}}}\"+\"\\n\"+\n    \"{\\\"insert\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 4, \\\"doc\\\" : {\\\"title\\\" : \\\"microfiber sheet set\\\", \\\"price\\\" : 19.99}}}\"+\"\\n\"+\n    \"{\\\"insert\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 5, \\\"doc\\\" : {\\\"title\\\" : \\\"Pet Hair Remover Glove\\\", \\\"price\\\" : 7.99}}}\"+\"\\n\";\nBulkResponse bulkresult = indexApi.bulk(body);\n```\n\n----------------------------------------\n\nTITLE: Grouping Syntax in JSON for Manticore Search\nDESCRIPTION: This snippet demonstrates the JSON query format for basic grouping in Manticore Search, which can retrieve aggregate values and their count(*).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"<table_name>\",\n  \"limit\": 0,\n  \"aggs\": {\n    \"<aggr_name>\": {\n      \"terms\": {\n        \"field\": \"<attribute>\",\n        \"size\": <int value>\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a table with a text field, which is by default stored and indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text);\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with SNIPPET() in Manticore Search SQL\nDESCRIPTION: Demonstrates various ways to use the SNIPPET() function to highlight search terms in text, including indexing from table fields, non-indexed text, and external sources via UDFs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/String_functions.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SNIPPET(body, QUERY()) FROM myIndex WHERE MATCH('my.query')\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql  SELECT id, SNIPPET('text to highlight', 'my.query', 'limit=100') FROM myIndex WHERE MATCH('my.query')\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, SNIPPET(myUdf(id), 'my.query', 'limit=100') FROM myIndex WHERE MATCH('my.query')\n```\n\n----------------------------------------\n\nTITLE: Score Tracking Search Configuration\nDESCRIPTION: Demonstrates how to enable score tracking when sorting by attributes. Shows implementation across different programming languages with track_scores property.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$search->setIndex(\"test\")->match('Test document')->sort('id','desc','max')->trackScores(true);\n```\n\nLANGUAGE: python\nCODE:\n```\nsearch_request.index = 'test'\nsearch_request.track_scores = true\nsearch_request.fulltext_filter = manticoresearch.model.QueryFilter('Test document')\nsort = manticoresearch.model.SortMVA('attr_mva', 'desc', 'max')\nsearch_request.sort = [sort]\n```\n\n----------------------------------------\n\nTITLE: Configuring High Availability Karma Period\nDESCRIPTION: Specifies the agent mirror statistics window size for tracking mirror performance in distributed setups.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nha_period_karma = 2m\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore Python Client (Blocking)\nDESCRIPTION: Illustrates deletion of documents from the 'products' table where price is less than or equal to 10 using the synchronous Python client. The method 'delete' is invoked on the 'indexApi' object with structured query as argument. Requires 'manticoresearch' Python package and correctly configured API client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nindexApi.delete({\\\"table\\\" : \\\"products\\\", \\\"query\\\": {\\\"range\\\":{\\\"price\\\":{\\\"lte\\\":10}}}})\n```\n\n----------------------------------------\n\nTITLE: Equality filter with any() function in Manticore Search\nDESCRIPTION: Demonstrates how to use the any() function with an equality filter on a multi-value attribute to match documents with at least one matching value.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test1\",\n  \"query\": {\n    \"equals\": { \"any(price)\": 100 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Search Query Configuration\nDESCRIPTION: Demonstrates basic search request setup with descending ID sorting across multiple programming languages. Shows how to set index, fulltext filter, and sort order.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsearch_request.index = 'test'\nsearch_request.fulltext_filter = manticoresearch.model.QueryFilter('Test document')\nsort_by_id = manticoresearch.model.SortOrder('id', 'desc')\nsearch_request.sort = [sort_by_id]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsearchRequest.index = \"test\";\nsearchRequest.fulltext_filter = new Manticoresearch.QueryFilter('Test document');\nsortById = new Manticoresearch.SortOrder('id', 'desc');\nsearchRequest.sort = [sortById];\n```\n\n----------------------------------------\n\nTITLE: Parsing Search Response with Highlights - ManticoreSearch Rust\nDESCRIPTION: This code shows the structure of a search response in Rust when executing a highlighted search on the 'books' table for the terms 'one' and 'robots'. The response includes meta fields like took, timedOut, and hits, and provides highlighted snippets for both 'title' and 'content'. There are no concrete dependencies, but this assumes the response is being deserialized into a custom response class structure. The output format is detailed for easy integration with application logic.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        maxScore: null\n        hits: [{_id=1, _score=2788, _source={title=Books one, content=They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. }, highlight={title=[Books <b>one</b>], content=[They followed Bander. The <b>robots</b> remained at a polite distance, ,  three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander,  gestured the other <b>robots</b> away and entered itself. The]}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting with JSON in Manticore Search\nDESCRIPTION: This example demonstrates how to use the 'highlight' property in JSON queries via HTTP to obtain highlighted text fragments from matching documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\":  {  \"match\": { \"*\" : \"try\" }  },\n  \"highlight\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Match Query in HTTP JSON\nDESCRIPTION: Illustrates a simple match query in HTTP JSON format, matching keywords in specified fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"query\":\n{\n  \"match\": { \"field\": \"keyword\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing KNN Vector Search with JSON API\nDESCRIPTION: Performs a vector search using the JSON API, specifying the vector field, query vector, k value for number of results, and ef parameter for search accuracy.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n\t\"table\": \"test\",\n\t\"knn\":\n\t{\n\t\t\"field\": \"image_vector\",\n\t\t\"query_vector\": [0.286569,-0.031816,0.066684,0.032926],\n\t\t\"k\": 5,\n\t\t\"ef\": 2000\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with Java in Manticore Search\nDESCRIPTION: This Java code constructs a search request for a match_all query on the 'pq' index using the Manticore Search API, retrieving all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_77\n\nLANGUAGE: java\nCODE:\n```\nMap<String,Object> query = new HashMap<String,Object>();\nquery.put(\"match_all\",null);\nSearchRequest searchRequest = new SearchRequest();\nsearchRequest.setIndex(\"pq\");\nsearchRequest.setQuery(query);\nSearchResponse searchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search for Faceted Aggregation - JavaScript\nDESCRIPTION: This snippet performs an asynchronous faceted search on the 'facetdemo' table using the Manticore Search JavaScript API. The query matches all records, defines a price interval expression, and computes aggregations (facets) based on the 'price_range' using term buckets. Outputs include facet buckets and document samples. Requires the Search API client for JavaScript, and assumes 'searchApi' is instantiated and authorized.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"expressions\":{\"price_range\":\"INTERVAL(price,200,400,600,800)\"},\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price_range\"}}}});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":10000,\"hits\":[{\"_id\": 1,\"_score\":1,\"_source\":{\"price\":197,\"brand_id\":10,\"brand_name\":\"Brand Ten\",\"categories\":[10],\"title\":\"Product Eight One\",\"property\":\"Six\",\"price_range\":0}},{\"_id\": 2,\"_score\":1,\"_source\":{\"price\":671,\"brand_id\":6,\"brand_name\":\"Brand Six\",\"categories\":[12,13,14],\"title\":\"Product Nine Seven\",\"property\":\"Four\",\"price_range\":3}},{\"_id\": 3,\"_score\":1,\"_source\":{\"price\":92,\"brand_id\":3,\"brand_name\":\"Brand Three\",\"categories\":[13,14,15],\"title\":\"Product Five Four\",\"property\":\"Six\",\"price_range\":0}},{\"_id\": 4,\"_score\":1,\"_source\":{\"price\":713,\"brand_id\":10,\"brand_name\":\"Brand Ten\",\"categories\":[11],\"title\":\"Product Eight Nine\",\"property\":\"Five\",\"price_range\":3}},{\"_id\": 5,\"_score\":1,\"brand_id\":7,\"brand_name\":\"Brand Seven\",\"categories\":[11,12,13],\"title\":\"Product Ten Three\",\"property\":\"Two\",\"price_range\":4}}, ...]}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Percolate Queries with SQL in Manticore Search\nDESCRIPTION: This SQL query retrieves all stored percolate queries from the 'pq' table, including their IDs, query strings, tags, and filters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_71\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pq;\n```\n\n----------------------------------------\n\nTITLE: REGEX Function Usage\nDESCRIPTION: Shows how to use REGEX function in search queries to perform pattern matching on text properties.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_75\n\nLANGUAGE: SQL\nCODE:\n```\nselect regex(data.name, 'est') as c from products where c>0\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"products\",\n  \"query\":\n  {\n    \"match_all\": {},\n\t\"range\": { \"c\": { \"gt\": 0 } } }\n  },\n  \"expressions\": { \"c\": \"regex(data.name, 'est')\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using Java in Manticore Search\nDESCRIPTION: This Java code shows how to insert a document with a JSON field into a Manticore Search index using the Java API. The JSON is represented as a nested HashMap in the document HashMap.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nnewdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){{    put(\"title\",\"Yellow bag\");\n    put(\"meta\",\n        new HashMap<String,Object>(){{\n            put(\"size\",41);\n            put(\"color\",\"red\");\n        }});\n }};\nnewdoc.index(\"products\").id(0L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Executing Percolation Query with Python\nDESCRIPTION: Utilizes the Python client for percolation to query the 'products' dataset. It inputs documents as a JSON-like dictionary and retrieves matching documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.percolate('products',{ \"query\":{ \"percolate\":{ \"documents\":[{\"title\":\"nice pair of shoes\",\"color\":\"blue\"},{\"title\":\"beautiful bag\"}]}}})\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates by Query in Manticore Search using Python-asyncio\nDESCRIPTION: This Python-asyncio code demonstrates how to perform bulk updates by query using the Manticore Search Python-asyncio client. It updates the 'coeff' field based on price ranges in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndocs = [ \\\n            { \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 1000 }, \"query\": { \"range\": { \"price\": { \"gte\": 1000 } } } } }, \\\n            { \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 0 }, \"query\": { \"range\": { \"price\": { \"lt\": 1000 } } } } } ]\nawait indexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using Python with asyncio in Manticore Search\nDESCRIPTION: This asynchronous Python code shows how to insert a document with a JSON field into a Manticore Search index using the Python API with asyncio. The JSON is represented as a string in the document dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nindexApi = api = manticoresearch.IndexApi(client)\nawait indexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\",\"meta\":'{\"size\": 41, \"color\": \"red\"}'}})\n```\n\n----------------------------------------\n\nTITLE: Query Profiling in TypeScript\nDESCRIPTION: Example of a search query response with profiling enabled showing query structure and execution details\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"hits\": \n\t{\n\t\t\"hits\": \n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\": 1480,\n\t\t\t\"_source\": {}\n\t\t}],\n        \"total\": 1\n\t},\n\t\"profile\":\n\t{\n\t\t\"query\": {\n\t\t\t\"children\": \n\t\t\t[{\n\t\t\t\t\"children\": \n\t\t\t\t[{\n\t\t\t\t\t\"querypos\": 1,\n                    \"type\": \"KEYWORD\",\n                    \"word\": \"i\"\n                }],\n\t\t\t\t\"description\": \"AND(KEYWORD(i, querypos=1))\",\n\t\t\t\t\"type\": \"AND\"\n\t\t\t},\n            {\n            \t\"children\": \n            \t[{\n            \t\t\"querypos\": 2,\n                    \"type\": \"KEYWORD\",\n                    \"word\": \"me\"\n                }],\n                \"description\": \"AND(KEYWORD(me, querypos=2))\",\n\t\t\t\t\"type\": \"AND\"\n\t\t\t}],\n            \"description\": \"AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2)))\",\n            \"type\": \"AND\"\n\t\t}\n\t},\n\t\"timed_out\": False,\n\t\"took\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Search with Highlighting in Python\nDESCRIPTION: This Python snippet shows how to use the Manticore Search API to perform a search with highlighting. It includes a match query and highlight settings for specific fields, ordering the highlights by score.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nres = searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\",\"title\"],\"order\":\"score\"}})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 2788,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u' three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander',\n                                                u' gestured the other <b>robots</b> away and entered itself. The',\n                                                u'They followed Bander. The <b>robots</b> remained at a polite distance, '],\n                                   u'title': [u'Books <b>one</b>']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with JSON API in Manticore Search\nDESCRIPTION: Removes a table using the JSON API interface. This sends a POST request to the CLI endpoint with the DROP TABLE command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"DROP TABLE products\"\n```\n\n----------------------------------------\n\nTITLE: Using Field Search Operator in Manticore Search\nDESCRIPTION: Shows how to restrict searches to specific fields using the @ operator. This allows targeting specific parts of documents rather than searching across all fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n@title hello @body world\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Updates in Go\nDESCRIPTION: Demonstrates bulk updates on a 'test' index in Go. It updates two documents with new content, name, and category.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nbody := \"{\\\"update\\\": {\\\"index\\\": \\\"test\\\", \\\"id\\\": 1, \\\"doc\\\": {\\\"content\\\": \\\"Text 11\\\", \\\"name\\\": \\\"Doc 11\\\", \\\"cat\\\": 1 }}}\" + \"\\n\" +\n\t\"{\\\"update\\\": {\\\"index\\\": \\\"test\\\", \\\"id\\\": 2, \\\"doc\\\": {\\\"content\\\": \\\"Text 22\\\", \\\"name\\\": \\\"Doc 22\\\", \\\"cat\\\": 9 }}}\" +\"\\n\";\nres, _, _ := apiClient.IndexAPI.Bulk(context.Background()).Body(body).Execute()\n```\n\nLANGUAGE: go\nCODE:\n```\n{\n  \"items\":\n  [\n    {\n      \"update\":\n      {\n        \"table\":\"test\",\n        \"updated\":1\n      }\n    },\n    {\n      \"update\":\n      {\n        \"table\":\"test\",\n        \"updated\":1\n      }\n    }\n  ],\n  \"errors\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using Python in Manticore Search\nDESCRIPTION: This snippet demonstrates how to insert documents into a real-time table named 'test' using the Python client for Manticore Search. It shows inserting documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nindexApi.insert({\"table\" : \"test\", \"id\" : 1, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\", \"price\" : 19.85}})\nindexApi.insert({\"table\" : \"test\", \"id\" : 2, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\"}})\nindexApi.insert({\"table\" : \"test\", \"id\" : 0, \"doc\" : {{\"title\" : \"Yellow bag\"}})\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using SQL in Manticore Search\nDESCRIPTION: This snippet demonstrates how to insert documents into a real-time table named 'products' using SQL commands. It shows three different ways of inserting data, including specifying columns, omitting columns, and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO products(title,price) VALUES ('Crossbody Bag with Tassel', 19.85);\nINSERT INTO products(title) VALUES ('Crossbody Bag with Tassel');\nINSERT INTO products VALUES (0,'Yellow bag', 4.95);\n```\n\n----------------------------------------\n\nTITLE: Complex Query with script_fields in Manticore Search\nDESCRIPTION: A more complex example using script_fields with conditional expressions and incorporating the computed fields in filtering and sorting. Shows how to combine expressions with query matching and other search features.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Expressions.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"table\":\"movies_rt\",\n\t\"script_fields\":{\n\t\t\"cond1\":{\n\t\t\t\"script\":{\n\t\t\t\t\"inline\":\"actor_2_facebook_likes =296 OR movie_facebook_likes =37000\"\n\t\t\t}\n\t\t},\n\t\t\"cond2\":{\n\t\t\t\"script\":{\n\t\t\t\t\"inline\":\"IF (IN (content_rating,'TV-PG','PG'),2, IF(IN(content_rating,'TV-14','PG-13'),1,0))\"\n\t\t\t}\n\t\t}\n\t},\n\t\"limit\":10,\n\t\"sort\":[\n\t\t{\n\t\t\t\"cond2\":\"desc\"\n\t\t},\n\t\t{\n\t\t\t\"actor_1_name\":\"asc\"\n\t\t},\n\t\t{\n\t\t\t\"actor_2_name\":\"desc\"\n\t\t}\n\t],\n\t\"profile\":true,\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"must\":[\n\t\t\t\t{\n\t\t\t\t\t\"match\":{\n\t\t\t\t\t\t\"*\":\"star\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"equals\":{\n\t\t\t\t\t\t\"cond1\":1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"must_not\":[\n\t\t\t\t{\n\t\t\t\t\t\"equals\":{\n\t\t\t\t\t\t\"content_rating\":\"R\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Counting and Grouping by Major with Distinct Ages\nDESCRIPTION: This SQL snippet calculates the number of students grouped by major and counts distinct ages within each group using 'COUNT(distinct age)'. It requires a 'students' table and demonstrates insights on unique age distributions for each major.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT major, count(*), count(distinct age) FROM students GROUP BY major;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n+----------+----------+---------------------+\n| major    | count(*) | count(distinct age) |\n+----------+----------+---------------------+\n| arts     |        2 |                   1 |\n| business |        1 |                   1 |\n| cs       |        2 |                   2 |\n+----------+----------+---------------------+\n```\n\n----------------------------------------\n\nTITLE: Python Response for Price Range Faceting\nDESCRIPTION: Python response showing the results of a price range faceting query, including both the aggregation buckets and search hits. The response includes both the group_property and group_brand_id aggregations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': {u'group_brand_id': {u'buckets': [{u'doc_count': 1019,\n                                                    u'key': 10},\n                                                   {u'doc_count': 954,\n                                                    u'key': 9},\n                                                   {u'doc_count': 1021,\n                                                    u'key': 8},\n                                                   {u'doc_count': 1011,\n                                                    u'key': 7},\n                                                   {u'doc_count': 997,\n                                                    u'key': 6}]},\n                  u'group_property': {u'buckets': [{u'doc_count': 11,\n                                                    u'key': 1000},\n                                                   {u'doc_count': 12,\n                                                    u'key': 999},\n                                                   {u'doc_count': 7,\n                                                    u'key': 998},\n                                                   {u'doc_count': 14,\n                                                    u'key': 997},\n                                                   {u'doc_count': 8,\n                                                    u'key': 996}]}},\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 1,\n                    u'_source': {u'brand_id': 10,\n                                 u'brand_name': u'Brand Ten',\n                                 u'categories': [10],\n                                 u'price': 197,\n                                 u'property': u'Six',\n                                 u'title': u'Product Eight One'}},\n                   {u'_id': u'2',\n                    u'_score': 1,\n                    u'_source': {u'brand_id': 6,\n                                 u'brand_name': u'Brand Six',\n                                 u'categories': [12, 13, 14],\n                                 u'price': 671,\n                                 u'property': u'Four',\n                                 u'title': u'Product Nine Seven'}},\n                   {u'_id': u'3',\n                    u'_score': 1,\n                    u'_source': {u'brand_id': 3,\n                                 u'brand_name': u'Brand Three',\n                                 u'categories': [13, 14, 15],\n                                 u'price': 92,\n                                 u'property': u'Six',\n                                 u'title': u'Product Five Four'}},\n                   {u'_id': u'4',\n                    u'_score': 1,\n                    u'_source': {u'brand_id': 10,\n                                 u'brand_name': u'Brand Ten',\n                                 u'categories': [11],\n                                 u'price': 713,\n                                 u'property': u'Five',\n                                 u'title': u'Product Eight Nine'}},\n                   {u'_id': u'5',\n                    u'_score': 1,\n                    u'_source': {u'brand_id': 7,\n                                 u'brand_name': u'Brand Seven',\n                                 u'categories': [11, 12, 13],\n                                 u'price': 805,\n                                 u'property': u'Two',\n                                 u'title': u'Product Ten Three'}}],\n          'max_score': None,\n          'total': 10000},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in SQL for Manticore Search\nDESCRIPTION: Demonstrates how to use the LIMIT clause in SQL to navigate through search results. LIMIT can accept either one number as the size of the returned set with a zero offset, or a pair of offset and size values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT  ... FROM ...  [LIMIT [offset,] row_count]\nSELECT  ... FROM ...  [LIMIT row_count][ OFFSET offset]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via HTTP\nDESCRIPTION: Send requests to Manticore Search using cURL over HTTP on the default port 9308.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"http://localhost:9308/search\"\n```\n\n----------------------------------------\n\nTITLE: Querying Keywords with Wildcards in Manticore Search (SQL)\nDESCRIPTION: This snippet demonstrates using CALL KEYWORDS with wildcards to analyze text and generate autocomplete suggestions. It shows examples with different wildcard patterns and sorting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Autocomplete.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [(none)]> CALL KEYWORDS('m*', 't', 1 as stats);\nMySQL [(none)]> CALL KEYWORDS('my*', 't', 1 as stats);\nMySQL [(none)]> CALL KEYWORDS('c*', 't', 1 as stats, 'hits' as sort_mode);\nMySQL [(none)]> CALL KEYWORDS('ca*', 't', 1 as stats, 'hits' as sort_mode);\nMySQL [(none)]> CALL KEYWORDS('cat*', 't', 1 as stats, 'hits' as sort_mode);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status with PHP in Manticore Search\nDESCRIPTION: Demonstrates how to use the PHP client to retrieve status information for a Manticore index. The status() method returns an array containing metrics such as index type, document counts, memory usage, and query performance statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$index->status();\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using Elasticsearch-compatible API\nDESCRIPTION: This example demonstrates how to insert a document with multi-value attributes (MVA) using the Elasticsearch-compatible API of Manticore Search. It shows two alternative methods for insertion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\nPOST /products/_create/1\n{\n  \"title\": \"shoes\",\n  \"sizes\" : [40, 41, 42, 43]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /products/_doc/\n{\n  \"title\": \"shoes\",\n  \"sizes\" : [40, 41, 42, 43]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via PHP Client\nDESCRIPTION: Creates a real-time table using the Manticore PHP client with text and float fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n    'price'=>['type'=>'float'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Performing Asynchronous Search with Highlighting in Javascript\nDESCRIPTION: Utilizes async syntax to await results from Manticore Search API when searching 'books' for 'one' or 'robots'. Highlights 'content' field, requiring an async environment to handle the Promise returned by searchApi.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_35\n\nLANGUAGE: Javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\"]}});\n```\n\nLANGUAGE: Javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":1,\"hits\":[{\"_id\": 1,\"_score\":2788,\"_source\":{\"title\":\"Books one\",\"content\":\"They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. \"},\"highlight\":{\"content\":[\"They followed Bander. The <b>robots</b> remained at a polite distance, \",\" three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander\",\" gestured the other <b>robots</b> away and entered itself. The\"]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in Python-asyncio\nDESCRIPTION: Uses the Python asyncio API to create a table with a 'title' field that is both a string attribute and indexed for full-text search. This is an asynchronous version of the Python call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products ( title string attribute indexed )')\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Documents using TypeScript with IndexAPI\nDESCRIPTION: This TypeScript snippet demonstrates how to insert and update documents in a test index using an asynchronous API request. It requires a TypeScript environment and access to an index API client. Inputs include index names, document IDs, and document content, while outputs confirm the creation or update status.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nres = await indexApi.insert({\n  index: 'test',\n  id: 1,\n  doc: { content: 'Text 1', name: 'Doc 1', meta: { tags:[1,2,3] } }\n})\nres = await indexApi.update({ index: 'test', id: 1, doc: { meta: { tags:['one','two','three'] } } });\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n\t\"table\":\"test\",\n\t\"_id\":1,\n\t\"created\":true,\n\t\"result\":\"created\"\n}\n\n{\n\t\"table\":\"test\",\n\t\"_id\":1,\n\t\"result\":\"updated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Compression Unpack for Multiple Columns\nDESCRIPTION: This snippet demonstrates how to specify multiple columns for unpacking using MySQL's UNCOMPRESS() algorithm. This feature offloads decompression from the database to the indexer.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Database_connection.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nunpack_mysqlcompress = body_compressed\nunpack_mysqlcompress = description_compressed\n```\n\n----------------------------------------\n\nTITLE: Bulk Adding Documents via Python Client (Python)\nDESCRIPTION: This Python snippet uses a list of bulk operation dictionaries, each of which represents an insert action formatted for Manticore's /bulk endpoint. It serializes the list into NDJSON by joining JSON string representations with newlines and then submits via indexApi.bulk(). Dependencies: Python Manticore client, json module, initialized indexApi. Inputs: list of dicts; outputs: bulk insert response. All action dicts must match Manticore's bulk schema.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndocs = [ \\\n    {\"insert\": {\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\", \"price\" : 19.85}}}, \\\n    {\"insert\": {\"table\" : \"products\", \"id\" : 2, \"doc\" : {\"title\" : \"microfiber sheet set\", \"price\" : 19.99}}}, \\\n    {\"insert\": {\"table\" : \"products\", \"id\" : 3, \"doc\" : {\"title\" : \"CPet Hair Remover Glove\", \"price\" : 7.99}}}\n]\nres = indexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with SQL in Manticore Search\nDESCRIPTION: This SQL query demonstrates how to use the HIGHLIGHT function with a custom limit option in Manticore Search. It searches for specific keywords in the 'books' table and returns highlighted snippets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT({limit=50}) FROM books WHERE MATCH('try|gets|down|said');\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with Python in Manticore Search\nDESCRIPTION: This Python snippet shows how to use the Manticore Search Python client to perform a percolate query. It uses the searchApi.percolate() method to send the query with two documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.percolate('pq',{\"percolate\":{\"documents\":[{\"title\":\"angry test\",\"gid\":3},{\"title\":\"filter test doc2\",\"gid\":13}]}})\n```\n\n----------------------------------------\n\nTITLE: Quick Manticore Docker Setup and MySQL Client Access\nDESCRIPTION: Single command to start Manticore in a Docker container, wait for it to initialize, and connect via MySQL client. The container is removed upon exit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore --rm -d manticoresearch/manticore && echo \"Waiting for Manticore docker to start. Consider mapping the data_dir to make it start faster next time\" && until docker logs manticore 2>&1 | grep -q \"accepting connections\"; do sleep 1; echo -n .; done && echo && docker exec -it manticore mysql && docker stop manticore\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Updates in Java\nDESCRIPTION: In Java, snippets display how to form and execute document update requests using Java objects and methods. Proper Java setup with libraries for API connections is essential. The sequence of setting document details and executing the update is highlighted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nupdatedoc = new UpdateDocumentRequest();\ndoc = new HashMap<String,Object >(){{\n    put(\"enabled\",0);\n}};\nupdatedoc.index(\"products\").cluster(\"weekly\").id(1L).setDoc(doc);\nindexApi.update(updatedoc);\n```\n\nLANGUAGE: Java\nCODE:\n```\nupdatedoc = new UpdateDocumentRequest();\ndoc = new HashMap<String,Object >(){{\n    put(\"tags1\",new int[]{});\n}};\nupdatedoc.index(\"products\").id(1L).setDoc(doc);\nindexApi.update(updatedoc);\n```\n\nLANGUAGE: Java\nCODE:\n```\nclass UpdateResponse {\n    index: products\n    updated: null\n    id: 1\n    result: updated\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and Integer Fields in SQL\nDESCRIPTION: Creates a table with a 'title' text field for full-text search and a 'price' integer field. Integer type allows storing 32-bit unsigned integer values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_55\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price int);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via MySQL CLI\nDESCRIPTION: Connect to Manticore Search using the MySQL command line client on the default port 9306.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h0 -P9306\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in Python\nDESCRIPTION: Uses the Python API to create a table with a 'title' text field and a 'keys' string attribute. String attributes are useful for metadata like names, titles, tags, and keys.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, keys string)')\n```\n\n----------------------------------------\n\nTITLE: Using query_string in bool query for Manticore Search\nDESCRIPTION: Demonstrates how to use SQL-style query_string within a bool query to combine multiple full-text search conditions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"test1\",\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"query_string\" : \"product\" },\n        { \"query_string\" : \"good\" }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators in Manticore Search\nDESCRIPTION: Standard arithmetic operators available in Manticore expressions. These can operate in three modes: single-precision floating point, 32-bit integers, or 64-bit integers, with the mode selected automatically based on the operands.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Expressions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n+, -, *, /, %, DIV, MOD\n```\n\n----------------------------------------\n\nTITLE: Basic Faceting by Field in Manticore Search (SQL)\nDESCRIPTION: This example demonstrates a basic FACET query in Manticore Search that returns all records from 'facetdemo' table and groups them by brand_name using brand_id as the faceting field. The output includes both the search results and the facet counts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM facetdemo FACET brand_name by brand_id;\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in Java\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using Java. The method requires creating a DeleteDocumentRequest object with the cluster name, index name, and document ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nDeleteDocumentRequest deleteRequest = new DeleteDocumentRequest();\ndeleteRequest.cluster(\"cluster\").index(\"test\").setId(1L);\nindexApi.delete(deleteRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with TypeScript in Manticore Search\nDESCRIPTION: This TypeScript code uses the Manticore Search API to perform an asynchronous match_all query on the 'test_pq' table, retrieving all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\"table\":\"test_pq\",\"query\":{\"match_all\":{}}});\n```\n\n----------------------------------------\n\nTITLE: Document Updates in C#\nDESCRIPTION: C# snippets define how to use C# object structures and methods to update document attributes. Requires .NET environment and a specific client library for database interactions. Inputs are supplied through C# collections and classes for setting document properties.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"enabled\", 0);\nUpdateDocumentRequest updatedoc = new UpdateDocumentRequest(index: \"products\", cluster: \"weekly\", id: 1, doc: doc);\nindexApi.Update(updatedoc);\n```\n\nLANGUAGE: C#\nCODE:\n```\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"tags1\", new List<int> {});\nUpdateDocumentRequest updatedoc = new UpdateDocumentRequest(index: \"products\", id: 1, doc: doc);\nindexApi.Update(updatedoc);\n```\n\nLANGUAGE: C#\nCODE:\n```\nclass UpdateResponse {\n    index: products\n    updated: null\n    id: 1\n    result: updated\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Infix Fields in Manticore Search (INI)\nDESCRIPTION: This snippet demonstrates how to configure infix fields, minimum infix length, and dictionary type in a Manticore Search table configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  infix_fields = title, name\n  min_infix_len = 3\n  dict = crc\n```\n\n----------------------------------------\n\nTITLE: Using INDEXOF Function with JSON Array in SQL\nDESCRIPTION: Shows how to use the INDEXOF function to traverse a JSON array property.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_73\n\nLANGUAGE: SQL\nCODE:\n```\nselect indexof(x>2 for x in data.intarray) from products\n```\n\n----------------------------------------\n\nTITLE: Querying Table Status with Python in Manticore Search\nDESCRIPTION: Shows how to use the Python API to execute an SQL query for retrieving table status information. The method returns a dictionary with status data including index type, memory usage, and query performance metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('SHOW TABLE statistic STATUS')\n```\n\n----------------------------------------\n\nTITLE: MVA Attribute Sorting Configuration\nDESCRIPTION: Shows how to implement sorting by MVA (Multi-Value Attribute) with support for min/max modes. Includes response handling and score tracking options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test\",\n  \"query\":\n  {\n    \"match\": { \"title\": \"Test document\" }\n  },\n  \"sort\":\n  [\n    { \"attr_mva\": { \"order\":\"desc\", \"mode\":\"max\" } }\n  ],\n  \"_source\": \"title\",\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Rust and Manticore Auto ID\nDESCRIPTION: This Rust code example demonstrates how to construct and send a document insertion request to a Manticore table using Rust's HashMap for document structuring.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nlet doc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"Yellow bag\"));\nlet insert_req = InsertDocumentRequest {\n    table: serde_json::json!(\"products\"),\n    doc: serde_json::json!(doc),\n    id: serde_json::json!(0),\n    ..Default::default(),\n};\nlet insert_res = index_api.insert(insert_req).await;\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query in TypeScript\nDESCRIPTION: This snippet shows how to perform a percolate query using the Manticore Search TypeScript client. It creates an array of documents and sends them to the 'test_pq' index for matching against stored queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\ndocs = [ {title : 'What a nice bag'}, {title : 'Really nice shoes'} ]; \nres = await searchApi.percolate('test_pq', { query: { percolate: { documents : docs } } } );\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with PHP in Manticore Search\nDESCRIPTION: This PHP code snippet uses the Manticore Search client to perform a search on the 'pq' table, retrieving all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n    'table' => 'pq',\n    'body' => [\n    ]\n];\n$response = $client->pq()->search($params);\n```\n\n----------------------------------------\n\nTITLE: Interpreting Percolation JavaScript Results\nDESCRIPTION: Presents the output for a JavaScript percolation query, showcasing the matched documents and associated scores and document slots.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\": 6, \"timed_out\": false, \"hits\": {\"total\": 2, \"hits\": [{\"table\": \"products\", \"_type\": \"doc\", \"_id\": 2811045522851233808, \"_score\": \"1\", \"_source\": {\"query\": {\"ql\": \"@title bag\"}}, \"fields\": {\"_percolator_document_slot\": [2]}}, {\"table\": \"products\", \"_type\": \"doc\", \"_id\": 2811045522851233810, \"_score\": \"1\", \"_source\": {\"query\": {\"ql\": \"@title shoes\"}}, \"fields\": {\"_percolator_document_slot\": [1]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Creating Price Range Facets Using Python AsyncIO Client\nDESCRIPTION: Asynchronous Python implementation for creating price range facets with the Manticore Search Python client. Uses asyncio to perform the search request asynchronously.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"expressions\":{\"price_range\":\"INTERVAL(price,200,400,600,800)\"},\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price_range\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with C# in Manticore Search\nDESCRIPTION: This C# code creates a search request for a match_all query on the 'pq' index using the Manticore Search API, retrieving all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_78\n\nLANGUAGE: clike\nCODE:\n```\nobject query =  new { match_all=null };\nSearchRequest searchRequest = new SearchRequest(\"pq\", query);\nSearchResponse searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Document Deletion in Manticore SQL\nDESCRIPTION: Demonstrates deleting documents that match specific full-text queries and attribute conditions in Manticore SQL. This example deletes documents matching a full-text query and specific attribute conditions from a table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM TEST WHERE MATCH ('test document') AND ( mva1>206 or mva1 in (100, 103) );\n\nSELECT * FROM TEST;\n```\n\n----------------------------------------\n\nTITLE: Charset Table Configuration Examples\nDESCRIPTION: Various examples of charset_table configurations including default settings, language-specific mappings, and custom character folding rules.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# default\ncharset_table = non_cont\n\n# only English and Russian letters\ncharset_table = 0..9, A..Z->a..z, _, a..z, \\\nU+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451\n\n# english charset defined with alias\ncharset_table = 0..9, english, _\n\n# you can override character mappings by redefining them, e.g. for case insensitive search with German umlauts you can use:\ncharset_table = non_cont, U+00E4, U+00C4->U+00E4, U+00F6, U+00D6->U+00F6, U+00FC, U+00DC->U+00FC, U+00DF, U+1E9E->U+00DF\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in C#\nDESCRIPTION: Uses the C# API to create a table with a 'title' text field and a 'keys' string attribute. String attributes can be used for filtering, sorting and returned in results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_41\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, keys string)\");\n```\n\n----------------------------------------\n\nTITLE: Executing Query String Search in TypeScript for Manticore Search\nDESCRIPTION: Shows how to perform a query_string search using TypeScript with Manticore Search. It searches for 'test document 1' in the 'test' index and returns the 'content' and 'title' fields for the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: { query_string: \"test document 1\" },\n  \"_source\": [\"content\", \"title\"],\n  limit: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Complex JOIN with Faceting in SQL and JSON\nDESCRIPTION: Demonstrates a LEFT JOIN between customers and orders tables with faceting on warranty details. The query filters products above $500, matches specific terms, and includes price aggregation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT orders.product, name, orders.details.price, orders.tags\nFROM customers\nLEFT JOIN orders\nON customers.id = orders.customer_id\nWHERE orders.details.price > 500\nAND MATCH('laptop|phone|monitor', orders)\nORDER BY orders.id ASC\nFACET orders.details.warranty;\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"customers\",\n\t\"_source\": [\"orders.product\", \"name\", \"orders.details\", \"orders.tags\"],\n  \"sort\": [{\"orders.id\": \"asc\"}],\n  \"join\": [\n    {\n      \"type\": \"left\",\n      \"table\": \"orders\",\n      \"on\": [\n        {\n          \"left\": {\n            \"table\": \"customers\",\n            \"field\": \"id\"\n          },\n          \"operator\": \"eq\",\n          \"right\": {\n            \"table\": \"orders\",\n            \"field\": \"customer_id\"\n          }\n        }\n      ],\n      \"query\": {\n        \"range\": {\n          \"orders.details.price\": {\n            \"gt\": 500\n          }\n        },\n        \"match\": {\n          \"*\": \"laptop|phone|monitor\"\n        }\n      }\n    }\n  ],\n\t\"aggs\":\t{\n\t\t\"group_property\": {\n\t\t\t\"terms\": {\n\t\t\t\t\"field\": \"orders.details.warranty\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Subselect-based Reranking of Query Results using PACKEDFACTORS and Custom UDF (SQL)\nDESCRIPTION: Presents a SQL pattern for staged ranking, where an inner select uses a fast expression-based ranking to select top-N candidates for a costly custom ranking function applied in the outer select. This query structure is suitable for performance-critical applications with complex ranking logic, ensuring the expensive computation is only done on a small subset of results. Requires functional CUSTOM_RANK UDF and suitable query limits.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (\n    SELECT *, CUSTOM_RANK(PACKEDFACTORS()) AS r\n    FROM my_index WHERE match('hello')\n    OPTION ranker=expr('sum(lcs)*1000+bm25')\n    ORDER BY WEIGHT() DESC\n    LIMIT 100\n) ORDER BY r DESC LIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with JSON API\nDESCRIPTION: Example of a search request with highlighting configuration using the JSON API. The request searches for 'one|robots' in all fields and highlights matches in 'content' and 'title' fields with 10 fragments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_86\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"*\": \"one|robots\"  } },\n  \"highlight\":\n  {\n    \"fields\": [ \"content\", \"title\" ],\n    \"number_of_fragments\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Unique IDs Using UUID_SHORT\nDESCRIPTION: This SQL feature allows the generation of multiple unique 64-bit IDs using the CALL UUID_SHORT() command. Useful for acquiring IDs for use in systems outside Manticore without performing document insertions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCALL UUID_SHORT(3)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed using JSON API\nDESCRIPTION: Uses the CLI endpoint with JSON to create a table with a 'title' field that is both a string attribute and indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_45\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products ( title string attribute indexed )\"\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Rows using REMOVE_REPEATS in Manticore Search (SQL)\nDESCRIPTION: Applies REMOVE_REPEATS to a subquery result set, returning only unique rows based on the specified column and limiting the final result according to the provided offset and limit. Useful in de-duplicating search results by attribute, with configurable windowing; does not alter meta 'total_found'. Dependent on a valid result set with the target column.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT REMOVE_REPEATS((SELECT * FROM dist1), gid, 0, 10)\n```\n\n----------------------------------------\n\nTITLE: Sample Search Response with Highlights - ManticoreSearch Java\nDESCRIPTION: This code block shows a typical response in Java from a highlighted search for the 'books' table, including the custom SearchResponse class structure containing document information, highlights, and other metadata. The sample shows how highlights are provided for both 'title' and 'content'. The schema matches what is deserialized by standard Java ManticoreSearch SDKs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        maxScore: null\n        hits: [{_id=1, _score=2788, _source={title=Books one, content=They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. }, highlight={title=[Books <b>one</b>], content=[They followed Bander. The <b>robots</b> remained at a polite distance, ,  three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander,  gestured the other <b>robots</b> away and entered itself. The]}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) in SQL\nDESCRIPTION: This example demonstrates how to insert multi-value attributes (MVA) into a Manticore Search index using SQL. MVA values are inserted as arrays of numbers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO products(title, sizes) VALUES('shoes', (40,41,42,43));\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (PHP)\nDESCRIPTION: This PHP code creates a table named 'products' with text and float columns, enabling keyword expansion using the Manticore Search PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'expand_keywords' => '1'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in JavaScript\nDESCRIPTION: Uses the JavaScript API to create a table with a 'title' text field and a 'keys' string attribute. String attributes store values as-is and are useful for filtering.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, keys string)');\n```\n\n----------------------------------------\n\nTITLE: Using SHOW TABLE STATUS in Manticore Search SQL\nDESCRIPTION: SQL command to display statistics for a specific table in Manticore Search. This returns various metrics depending on the table type, including index information, memory usage, and query performance statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE table_name STATUS\n```\n\n----------------------------------------\n\nTITLE: Bulk Deletion by ID List\nDESCRIPTION: Example showing how to delete multiple documents by providing a list of IDs. This is noted as the fastest deletion method as it doesn't require performing a search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM TEST WHERE id IN (1,2);\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /delete -d '\n    {\n        \"table\":\"test\",\n        \"id\": [1,2]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Performing KNN Vector Search with SQL\nDESCRIPTION: Executes a k-nearest neighbor search on the image_vector field, returning up to 5 documents closest to the query vector. The knn_dist() function returns the distance between each result and the query vector.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect id, knn_dist() from test where knn ( image_vector, 5, (0.286569,-0.031816,0.066684,0.032926), 2000 );\n```\n\n----------------------------------------\n\nTITLE: Example of Using Search Options in SQL\nDESCRIPTION: An SQL query example that demonstrates using multiple options including ranker, max_matches, field_weights, and agent_query_timeout. Shows how to specify weights for different fields and set query timeout.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM test WHERE MATCH('@title hello @body world')\nOPTION ranker=bm25, max_matches=3000,\nfield_weights=(title=10, body=3), agent_query_timeout=10000\n```\n\n----------------------------------------\n\nTITLE: Basic SHOW META Syntax in Manticore Search\nDESCRIPTION: The basic syntax for the SHOW META command, which can be optionally filtered with a LIKE pattern to match specific metadata variables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_META.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW META [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: PHP Search Implementation with Highlighting\nDESCRIPTION: Demonstrates how to implement search with highlighting in PHP using the Manticore Search client. Includes boolean query construction and result iteration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$bool = new \\Manticoresearch\\Query\\BoolQuery();\n$bool->must(new \\Manticoresearch\\Query\\Match(['query' => 'one|robots'], '*'));\n\n$results = $index->search($bool)->highlight(['content','title'],['no_match_size'=>0])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using Rust\nDESCRIPTION: This Rust code demonstrates how to insert a document with multi-value attributes (MVA) into a Manticore Search index using the Rust API. The MVA is represented as a JSON array in the document HashMap.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\nlet mut doc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"Yellow bag\"));\ndoc.insert(\"sizes\".to_string(), serde_json::json!([40,41,42,43]));\nlet insert_req = InsertDocumentRequest::new(\"products\".to_string(), serde_json::json!(doc));\nlet insert_res = index_api.insert(insert_req).await;\n```\n\n----------------------------------------\n\nTITLE: Executing Search Query with Highlighting in JSON\nDESCRIPTION: This snippet demonstrates how to perform a search query with highlighting using JSON format. It searches for specific terms in the 'books' table and limits the highlight snippets to 50 characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\": {\"query_string\": \"try|gets|down|said\"},\n  \"highlight\": { \"limit\":50 }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\":2,\n  \"timed_out\":false,\n  \"hits\":\n  {\n    \"total\":3,\n    \"hits\":\n    [\n      {\n        \"_id\": 3,\n        \"_score\":1602,\n        \"_source\":\n        {\n          \"title\":\"Book three\",\n          \"content\":\"Trevize whispered, \\\"It gets infantile pleasure out of display. I`d love to knock it down.\\\"\"\n        },\n        \"highlight\":\n        {\n          \"title\":\n          [\n            \"Book three\"\n          ],\n          \"content\":\n          [\n            \", \\\"It <b>gets</b> infantile pleasure \",\n            \" to knock it <b>down</b>.\\\"\"\n          ]\n        }\n      },\n      {\n        \"_id\": 4,\n        \"_score\":1573,\n        \"_source\":\n        {\n          \"title\":\"Book four\",\n          \"content\":\"Don`t try to compete in childishness, said Bliss.\"\n        },\n        \"highlight\":\n        {\n          \"title\":\n          [\n            \"Book four\"\n          ],\n          \"content\":\n          [\n            \"Don`t <b>try</b> to compete in childishness, <b>said</b> Bliss.\"\n          ]\n        }\n      },\n      {\n        \"_id\": 2,\n        \"_score\":1521,\n        \"_source\":\n        {\n          \"title\":\"Book two\",\n          \"content\":\"A door opened before them, revealing a small room. Bander said, \\\"Come, half-humans, I want to show you how we live.\\\"\"\n        },\n        \"highlight\":\n        {\n          \"title\":\n          [\n            \"Book two\"\n          ],\n          \"content\":\n          [\n            \" a small room. Bander <b>said</b>, \\\"Come, half-humans, I\"\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Percolate Table in SQL\nDESCRIPTION: This SQL snippet demonstrates creating a percolate table named 'products' with text and string fields, then inserting different query rules including full-text searches and filters. It also shows how to view the stored rules.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, color string) type='pq';\nINSERT INTO products(query) values('@title bag');\nINSERT INTO products(query,filters) values('@title shoes', 'color=\\'red\\'');\nINSERT INTO products(query,filters) values('@title shoes', 'color in (\\'blue\\', \\'green\\')');\nselect * from products;\n```\n\n----------------------------------------\n\nTITLE: Aggregating with Expressions in TypeScript\nDESCRIPTION: Demonstrates how to perform a search with aggregation using expressions in TypeScript. The query creates a calculated field 'cat_range' using the INTERVAL function and then groups results by this expression.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nres =  await searchApi.search({\n  index: 'test',\n  query: { match_all:{} },\n  expressions: { cat_range: \"INTERVAL(cat,1,3)\" }\n  aggs: {\n    expr_group: {\n      terms: { field : 'cat_range' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in Python\nDESCRIPTION: This snippet creates a 'products' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('create table products(title text, color string) type=\\'pq\\'')\nindexApi.insert({\"table\" : \"products\", \"doc\" : {\"query\" : \"@title bag\" }})\nindexApi.insert({\"table\" : \"products\",  \"doc\" : {\"query\" : \"@title shoes\", \"filters\": \"color='red'\" }})\nindexApi.insert({\"table\" : \"products\",  \"doc\" : {\"query\" : \"@title shoes\",\"filters\": \"color IN ('blue', 'green')\" }})\n```\n\n----------------------------------------\n\nTITLE: Profiling JSON Search Query in Manticore Search\nDESCRIPTION: This JSON snippet shows how to enable profiling for a search query using the JSON API. It includes the profile parameter in the request and returns detailed information about the query execution in the response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"forum\",\n  \"query\": {\"query_string\": \"i me\"},\n  \"_source\": { \"excludes\":[\"*\"] },\n  \"limit\": 1,\n  \"profile\":true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\":1503,\n  \"timed_out\":false,\n  \"hits\":\n  {\n    \"total\":406301,\n    \"hits\":\n    [\n       {\n          \"_id\": 406443,\n          \"_score\":3493,\n          \"_source\":{}\n       }\n    ]\n  },\n  \"profile\":\n  {\n    \"query\":\n    {\n      \"type\":\"AND\",\n      \"description\":\"AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2)))\",\n      \"children\":\n      [\n        {\n          \"type\":\"AND\",\n          \"description\":\"AND(KEYWORD(i, querypos=1))\",\n          \"children\":\n          [\n            {\n              \"type\":\"KEYWORD\",\n              \"word\":\"i\",\n              \"querypos\":1\n            }\n          ]\n        },\n        {\n          \"type\":\"AND\",\n          \"description\":\"AND(KEYWORD(me, querypos=2))\",\n          \"children\":\n          [\n            {\n              \"type\":\"KEYWORD\",\n              \"word\":\"me\",\n              \"querypos\":2\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with PHP\nDESCRIPTION: Shows how to use the PHP client to perform a percolate query against a document.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$percolate = [\n    'table' => 'products',\n    'body' => [\n        'query' => [\n            'percolate' => [\n                'document' => [\n                    'title' => 'What a nice bag'\n                ]\n            ]\n        ]\n    ]\n];\n$client->pq()->search($percolate);\n```\n\n----------------------------------------\n\nTITLE: Profiling C# Search Query in Manticore Search\nDESCRIPTION: This C# snippet shows how to enable profiling for a search query using the C# API. It sets the Profile property to true in the search request and retrieves the profile information from the search response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_11\n\nLANGUAGE: clike\nCODE:\n```\nobject query =  new { query_string=\"i me\" };\nvar searchRequest = new SearchRequest(\"forum\", query);\nsearchRequest.Profile = true;\nsearchRequest.Limit = 1;\nsearchRequest.Sort = new List<Object> { \"*\" };\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\nLANGUAGE: clike\nCODE:\n```\nclass SearchResponse {\n    took: 18\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=100, _score=2500, _source={}}]\n        aggregations: null\n    }\n    profile: {query={type=AND, description=AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2))), children=[{type=AND, description=AND(KEYWORD(i, querypos=1)), children=[{type=KEYWORD, word=i, querypos=1}]}, {type=AND, description=AND(KEYWORD(me, querypos=2)), children=[{type=KEYWORD, word=me, querypos=2}]}]}}\n}\n```\n\n----------------------------------------\n\nTITLE: Python AsyncIO Response for Price Range Faceting\nDESCRIPTION: Asynchronous Python response showing the results of a price range faceting query. The response format is identical to the synchronous version, including both the aggregation buckets and search hits.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': {u'group_brand_id': {u'buckets': [{u'doc_count': 1019,\n                                                    u'key': 10},\n                                                   {u'doc_count': 954,\n                                                    u'key': 9},\n                                                   {u'doc_count': 1021,\n                                                    u'key': 8},\n                                                   {u'doc_count': 1011,\n                                                    u'key': 7},\n                                                   {u'doc_count': 997,\n                                                    u'key': 6}]},\n                  u'group_property': {u'buckets': [{u'doc_count': 11,\n                                                    u'key': 1000},\n                                                   {u'doc_count': 12,\n                                                    u'key': 999},\n                                                   {u'doc_count': 7,\n                                                    u'key': 998},\n                                                   {u'doc_count': 14,\n                                                    u'key': 997},\n                                                   {u'doc_count': 8,\n                                                    u'key': 996}]}},\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 1,\n                    u'_source': {u'brand_id': 10,\n                                 u'brand_name': u'Brand Ten',\n                                 u'categories': [10],\n                                 u'price': 197,\n                                 u'property': u'Six',\n                                 u'title': u'Product Eight One'}},\n                   {u'_id': u'2',\n                    u'_score': 1,\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in Rust\nDESCRIPTION: Uses the Rust API to create a table with a 'title' field that is both a string attribute and indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_52\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products ( title string attribute indexed )\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with Javascript in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in Javascript. The method requires joining multiple JSON operations with newlines.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_35\n\nLANGUAGE: Javascript\nCODE:\n```\ndocs = [\n            { \"delete\" : { \"table\" : \"test\", \"id\": 1 } },\n            { \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } } ];\nres =  await indexApi.bulk(docs.map(e=>JSON.stringify(e)).join('\\n'));\n```\n\n----------------------------------------\n\nTITLE: Explicit Sort Order via JSON in Manticore Search\nDESCRIPTION: Demonstrates how to explicitly specify sort order (asc/desc) in JSON format for Manticore Search. Allows fine-grained control over sorting direction for each field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test\",\n  \"query\":\n  {\n    \"match\": { \"title\": \"Test document\" }\n  },\n  \"sort\":\n  [\n    { \"id\": \"desc\" },\n    \"_score\"\n  ],\n  \"_source\": \"title\",\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Table Status with C# in Manticore Search\nDESCRIPTION: This C# code snippet utilizes the utilsApi to run the SQL command 'SHOW TABLE statistic STATUS'. It obtains detailed information about the 'statistic' table, such as index type, document count, memory usage, and various performance metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_7\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"SHOW TABLE statistic STATUS\");\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using Python-asyncio in Manticore Search\nDESCRIPTION: Uses the Python asyncio client to find percolate query rules that match a document. This example demonstrates the asynchronous version of the Python percolate API call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.percolate('products',{\"query\":{\"percolate\":{\"document\":{\"title\":\"What a nice bag\"}}}})\n```\n\n----------------------------------------\n\nTITLE: JSON Request for Auto ID\nDESCRIPTION: Contains a JSON request to insert documents into a Manticore table with an auto-generated ID, and another request to search the table. The response demonstrates fetching the document using its auto-generated ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert\n{\n  \"table\":\"products\",\n  \"id\":0,\n  \"doc\":\n  {\n    \"title\" : \"Yellow bag\"\n  }\n}\n\nGET /search\n{\n  \"table\":\"products\",\n  \"query\":{\n    \"query_string\":\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Profiling Python-asyncio Search Query in Manticore Search\nDESCRIPTION: This Python-asyncio snippet demonstrates how to enable profiling for an asynchronous search query using the Python API. It sets the profile parameter to True and awaits the search result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.search({\"table\":\"forum\",\"query\":{\"query_string\":\"i me\"},\"_source\":{\"excludes\":[\"*\"]},\"limit\":1,\"profile\":True})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'100', u'_score': 2500, u'_source': {}}],\n          'total': 1},\n 'profile': {u'query': {u'children': [{u'children': [{u'querypos': 1,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'i'}],\n                                       u'description': u'AND(KEYWORD(i, querypos=1))',\n                                       u'type': u'AND'},\n                                      {u'children': [{u'querypos': 2,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'me'}],\n                                       u'description': u'AND(KEYWORD(me, querypos=2))',\n                                       u'type': u'AND'}],\n                        u'description': u'AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2)))',\n                        u'type': u'AND'}},\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: SHOW QUERIES Output Table Example - SQL\nDESCRIPTION: This output snippet presents the tabular result structure of the SHOW QUERIES command as returned by Manticore Search. The displayed table includes columns such as id, query, time, protocol, and host, with sample data for two running queries. This result is typically used by administrators to examine currently executing SQL statements, their properties, and client connections. No parameters are required, but the actual content will vary depending on the running queries at query time.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_QUERIES.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n+------+--------------+---------+----------+-----------------+\n| id   | query        | time    | protocol | host            |\n+------+--------------+---------+----------+-----------------+\n|  111 | select       | 5ms ago | http     | 127.0.0.1:58986 |\n|   96 | SHOW QUERIES | 255us   | mysql    | 127.0.0.1:33616 |\n+------+--------------+---------+----------+-----------------+\n2 rows in set (0.61 sec)\n\n```\n\n----------------------------------------\n\nTITLE: Using script_fields in HTTP JSON Requests\nDESCRIPTION: Example of using script_fields in HTTP JSON interface to create expressions. This allows computing values based on existing attributes and storing results in new attributes that can be used for filtering or sorting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Expressions.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"table\": \"test\",\n\t\"query\": {\n\t\t\"match_all\": {}\n\t}, \"script_fields\": {\n\t\t\"add_all\": {\n\t\t\t\"script\": {\n\t\t\t\t\"inline\": \"( gid * 10 ) | crc32(title)\"\n\t\t\t}\n\t\t},\n\t\t\"title_len\": {\n\t\t\t\"script\": {\n\t   \t\t\t\"inline\": \"crc32(title)\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in PHP\nDESCRIPTION: Demonstrates deleting a document from a table within a replication cluster using PHP. The method requires setting the cluster before performing the deletion operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$index->setCluster('cluster');\n$index->deleteDocument(100);\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregation in Go with Manticore Search\nDESCRIPTION: This Go example demonstrates how to perform an aggregation query using the Manticore Search API. It sets up a search request with an aggregation on the 'cat' field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nquery := map[string]interface{} {};\nsearchRequest.SetQuery(query);\naggTerms := manticoreclient.NewAggregationTerms()\naggTerms.SetField(\"cat\")\naggTerms.SetSize(1)\naggregation := manticoreclient.NewAggregation()\naggregation.setTerms(aggTerms)\nsearchRequest.SetAggregation(aggregation)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Performing Query String Search in Python for Manticore Search\nDESCRIPTION: Shows how to execute a query_string search using Python with Manticore Search. It searches for 'find joe fast' within 2 words in the 'comment_text' field of the 'hn_small' table and returns the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nsearchApi.search({\"table\":\"hn_small\",\"query\":{\"query_string\":\"@comment_text \\\"find joe fast \\\"/2\"}, \"_source\": [\"story_author\",\"comment_author\"], \"limit\":1})\n```\n\n----------------------------------------\n\nTITLE: Simple bool query with must clause in Manticore Search\nDESCRIPTION: Shows a basic boolean query using the 'must' clause to combine full-text matching with a numeric range filter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test1\",\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": {\"_all\":\"keyword\"} },\n        { \"range\": { \"revision\": { \"gte\": 14 } } }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Proximity Search Operator in Manticore Search\nDESCRIPTION: Demonstrates proximity search which matches documents where the specified words appear within a certain distance (measured in words) of each other.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n\"hello world\"~10\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregation in Rust with Manticore Search\nDESCRIPTION: This snippet demonstrates how to perform an aggregation query in Rust using the Manticore Search API. It creates a search request with aggregations on the 'release_year' field and executes the search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet mut aggs = HashMap::new();\naggs.insert(\"release_year\".to_string(), agg1); \n\nlet search_req = SearchRequest {\n    table: \"films\".to_string(),\n    query: Some(Box::new(query)),\n    aggs: serde_json::json!(aggs),\n    ..Default::default()\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Source in Manticore Search\nDESCRIPTION: SQL command to create a Kafka source with schema definition and connection parameters. Configures broker list, topic, consumer group and batch settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SOURCE kafka\n(id bigint, term text, abbrev '$abbrev' text, GlossDef json)\ntype='kafka'\nbroker_list='kafka:9092'\ntopic_list='my-data'\nconsumer_group='manticore'\nnum_consumers='2'\nbatch=50\n```\n\n----------------------------------------\n\nTITLE: KNN Vector Search Request with Filters\nDESCRIPTION: POST request to perform KNN vector search on 'image_vector' field with k=5. Includes filtering for documents containing 'white' and having id less than 10.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"table\": \"test\",\n\t\"knn\":\n\t{\n\t\t\"field\": \"image_vector\",\n\t\t\"query_vector\": [0.286569,-0.031816,0.066684,0.032926],\n\t\t\"k\": 5,\n\t\t\"filter\":\n\t\t{\n\t\t\t\"bool\":\n\t\t\t{\n\t\t\t\t\"must\":\n\t\t\t\t[\n\t\t\t\t\t{ \"match\": {\"_all\":\"white\"} },\n\t\t\t        { \"range\": { \"id\": { \"lt\": 10 } } }\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (SQL)\nDESCRIPTION: SQL command to create a table with stored fields in Manticore Search. Demonstrates how to specify stored and indexed fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, content text stored indexed, name text indexed, price float)\n```\n\n----------------------------------------\n\nTITLE: Executing Document Updates in Python\nDESCRIPTION: For Python, this snippet illustrates how to update document details using Python methods in a synchronous manner. Required dependencies align with Python's setup and any relevant database access libraries. Inputs are structured as a dictionary specifying the document changes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nindexApi.update({\"cluster\":\"weekly\", \"table\" : \"products\", \"id\" : 1, \"doc\" : {\"enabled\" : 0}})\n```\n\nLANGUAGE: Python\nCODE:\n```\n\nindexApi.update({\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"tags1\": []}})\n```\n\nLANGUAGE: Python\nCODE:\n```\n{'id': 1, 'table': 'products', 'result': 'updated', 'updated': None}\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Document via HTTP JSON in Manticore Search\nDESCRIPTION: This snippet demonstrates how to update a single document using the /update endpoint in Manticore Search. It updates the 'gid' and 'price' fields of a document with ID 1 in the 'test' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nPOST /update\n{\n  \"table\":\"test\",\n  \"id\":1,\n  \"doc\":\n   {\n     \"gid\" : 100,\n     \"price\" : 1000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Faceting Without Duplicates in Manticore Search (JSON)\nDESCRIPTION: This example demonstrates how to perform the same faceting with distinct operation using the JSON API. It posts an SQL query to the /sql endpoint to get faceted results with deduplication.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nPOST /sql -d 'SELECT brand_name, property FROM facetdemo FACET brand_name distinct property'\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in Rust\nDESCRIPTION: This Rust code creates a table 'products' with support for both non-continuous and continuous script languages using the Manticore Search Rust client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) charset_table = 'non_cont' ngram_len = '1' ngram_chars = 'cont'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Querying Server Status in Manticore Search using SQL\nDESCRIPTION: This SQL command retrieves the current server status information from Manticore Search, showing various performance metrics, command counts, and server statistics. The response includes details about uptime, connections, query performance, and worker information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATUS;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| Counter                       | Value                                                                                                                                          |\n+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| uptime                        | 182                                                                                                                                            |\n| connections                   | 368                                                                                                                                            |\n| maxed_out                     | 0                                                                                                                                              |\n| version                       | 6.3.7 b10359434@24100213 dev (columnar 2.3.1 bd59d08@24093015) (secondary 2.3.1 bd59d08@24093015) (knn 2.3.1 bd59d08@24093015) (buddy v2.3.13) |\n| mysql_version                 | 6.3.7 b10359434@24100213 dev (columnar 2.3.1 bd59d08@24093015) (secondary 2.3.1 bd59d08@24093015) (knn 2.3.1 bd59d08@24093015)                 |\n| command_search                | 4                                                                                                                                              |\n| command_excerpt               | 0                                                                                                                                              |\n| command_update                | 2                                                                                                                                              |\n| command_keywords              | 0                                                                                                                                              |\n| command_persist               | 0                                                                                                                                              |\n| command_status                | 8                                                                                                                                              |\n| command_flushattrs            | 0                                                                                                                                              |\n| command_sphinxql              | 0                                                                                                                                              |\n| command_ping                  | 0                                                                                                                                              |\n| command_delete                | 3                                                                                                                                              |\n| command_set                   | 0                                                                                                                                              |\n| command_insert                | 3                                                                                                                                              |\n| command_replace               | 3                                                                                                                                              |\n| command_commit                | 0                                                                                                                                              |\n| command_suggest               | 0                                                                                                                                              |\n| command_json                  | 0                                                                                                                                              |\n| command_callpq                | 0                                                                                                                                              |\n| command_cluster               | 0                                                                                                                                              |\n| command_getfield              | 0                                                                                                                                              |\n| insert_replace_stats_ms_avg   | 42.625 35.895 35.895                                                                                                                           |\n| insert_replace_stats_ms_min   | 0.096 0.096 0.096                                                                                                                              |\n| insert_replace_stats_ms_max   | 85.154 85.154 85.154                                                                                                                           |\n| insert_replace_stats_ms_pct95 | 42.625 42.625 42.625                                                                                                                           |\n| insert_replace_stats_ms_pct99 | 42.625 42.625 42.625                                                                                                                           |\n| search_stats_ms_avg           | 0.209 0.188 0.188                                                                                                                              |\n| search_stats_ms_min           | 0.205 0.058 0.058                                                                                                                              |\n| search_stats_ms_max           | 0.214 0.278 0.278                                                                                                                              |\n| search_stats_ms_pct95         | 0.214 0.278 0.278                                                                                                                              |\n| search_stats_ms_pct99         | 0.214 0.278 0.278                                                                                                                              |\n| update_stats_ms_avg           | 0.024 0.024 0.024                                                                                                                              |\n| update_stats_ms_min           | 0.007 0.007 0.007                                                                                                                              |\n| update_stats_ms_max           | 0.042 0.042 0.042                                                                                                                              |\n| update_stats_ms_pct95         | 0.042 0.042 0.042                                                                                                                              |\n| update_stats_ms_pct99         | 0.042 0.042 0.042                                                                                                                              |\n| agent_connect                 | 0                                                                                                                                              |\n| agent_tfo                     | 0                                                                                                                                              |\n| agent_retry                   | 0                                                                                                                                              |\n| queries                       | 6                                                                                                                                              |\n| dist_queries                  | 0                                                                                                                                              |\n| workers_total                 | 32                                                                                                                                             |\n| workers_active                | 3                                                                                                                                              |\n| workers_clients               | 1                                                                                                                                              |\n| workers_clients_vip           | 0                                                                                                                                              |\n| workers_clients_buddy         | 1                                                                                                                                              |\n| work_queue_length             | 6                                                                                                                                              |\n| load                          | 0.03 0.03 0.03                                                                                                                                 |\n| load_primary                  | 0.00 0.00 0.00                                                                                                                                 |\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Core Dump in Manticore Search\nDESCRIPTION: This command shows how to start Manticore Search with core dump enabled. It allows saving a core file or minidump of the server on crash for debugging purposes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --config /etc/manticoresearch/manticore.conf --coredump\n```\n\n----------------------------------------\n\nTITLE: Basic SQL HIGHLIGHT() Function Usage\nDESCRIPTION: Demonstrates the basic usage of the HIGHLIGHT() SQL function with no arguments. It highlights the search term 'before' in text from the books table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT() FROM books WHERE MATCH('before');\n```\n\n----------------------------------------\n\nTITLE: Specifying JOIN Conditions in Manticore Search\nDESCRIPTION: Always explicitly specify the table names in your JOIN conditions to avoid ambiguity.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nJOIN ON table_name.some_field = another_table_name.some_field\n```\n\n----------------------------------------\n\nTITLE: Stopping Manticore Search Asynchronously\nDESCRIPTION: This command demonstrates how to stop Manticore Search asynchronously using the --stop option. It requires specifying the configuration file path.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --config /etc/manticoresearch/manticore.conf --stop\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table with Text and Integer Fields\nDESCRIPTION: Shows how to create a basic table with text and integer fields using different programming interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price int)\");\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price int)\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price int)\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_uint = type\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Aggregation Query with Manticore Search\nDESCRIPTION: A Rust code snippet demonstrating aggregation of 'meta.color'. The snippet requires a Rust environment with Manticore API bindings setup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\nlet query = SearchQuery::new();\nlet aggTerms1 = AggTerms::new {\n    fields: \"meta.color\".to_string(),\n    size: Some(100),\n};\nlet agg1 = Aggregation {\n    terms: Some(Box::new(aggTerms1)),\n    ..Default::default(),\n};\nlet mut aggs = HashMap::new();\naggs.insert(\"color\".to_string(), agg1); \n\nlet search_req = SearchRequest {\n    table: \"products\".to_string(),\n    query: Some(Box::new(query)),\n    aggs: serde_json::json!(aggs),\n    limit: serde_json::json!(0),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\nLANGUAGE: rust\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    aggregations: {color={buckets=[{key=green, doc_count=1}, {key=red, doc_count=2}]}}\n    hits: class SearchResponseHits {\n        maxScore: null\n        total: 3\n        hits: []\n    }\n    profile: null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search with Full JSON Plan Format\nDESCRIPTION: This snippet shows how to perform a search query on the 'forum' table with a full JSON plan format. It includes a detailed query plan with nested structure and descriptions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"forum\",\n  \"query\": {\"query_string\": \"@title way* @content hey\"},\n  \"_source\": { \"excludes\":[\"*\"] },\n  \"limit\": 1,\n  \"plan\": 3\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"took\":33,\n  \"timed_out\":false,\n  \"hits\":\n  {\n    \"total\":105,\n    \"hits\":\n    [\n       {\n          \"_id\": 711651,\n          \"_score\":2539,\n          \"_source\":{}\n       }\n    ]\n  },\n  \"plan\":\n  {\n    \"query\":\n    {\n      \"type\":\"AND\",\n      \"description\":\"AND( OR( OR( AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),  OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))),  AND(fields=(title), KEYWORD(way, querypos=1, expanded)),  OR(fields=(title), KEYWORD(way*, querypos=1, expanded))),  AND(fields=(content), KEYWORD(hey, querypos=2)))\",\n      \"children\":\n      [\n        {\n          \"type\":\"OR\",\n          \"description\":\"OR( OR( AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),  OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))),  AND(fields=(title), KEYWORD(way, querypos=1, expanded)),  OR(fields=(title), KEYWORD(way*, querypos=1, expanded)))\",\n          \"children\":\n          [\n            {\n               \"type\":\"OR\",\n               \"description\":\"OR( AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),  OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded))))\",\n               \"children\":\n               [\n                 {\n                   \"type\":\"AND\",\n                   \"description\":\"AND(fields=(title), KEYWORD(wayne, querypos=1, expanded))\",\n                   \"fields\":[\"title\"],\n                   \"max_field_pos\":0,\n                   \"children\":\n                   [\n                     {\n                       \"type\":\"KEYWORD\",\n                       \"word\":\"wayne\",\n                       \"querypos\":1,\n                       \"expanded\":true\n                     }\n                   ]\n                 },\n                 {\n                   \"type\":\"OR\",\n                   \"description\":\"OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))\",\n                   \"children\":\n                   [\n                     {\n                       \"type\":\"AND\",\n                       \"description\":\"AND(fields=(title), KEYWORD(ways, querypos=1, expanded))\",\n                       \"fields\":[\"title\"],\n                       \"max_field_pos\":0,\n                       \"children\":\n                       [\n                         {\n                           \"type\":\"KEYWORD\",\n                           \"word\":\"ways\",\n                           \"querypos\":1,\n                           \"expanded\":true\n                         }\n                       ]\n                     },\n                     {\n                       \"type\":\"AND\",\n                       \"description\":\"AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded))\",\n                       \"fields\":[\"title\"],\n                       \"max_field_pos\":0,\n                       \"children\":\n                       [\n                         {\n                           \"type\":\"KEYWORD\",\n                           \"word\":\"wayyy\",\n                           \"querypos\":1,\n                           \"expanded\":true\n                         }\n                       ]\n                     }\n                   ]\n                 }\n               ]\n            },\n            {\n              \"type\":\"AND\",\n              \"description\":\"AND(fields=(title), KEYWORD(way, querypos=1, expanded))\",\n              \"fields\":[\"title\"],\n              \"max_field_pos\":0,\n              \"children\":\n              [\n                 {\n                    \"type\":\"KEYWORD\",\n                    \"word\":\"way\",\n                    \"querypos\":1,\n                    \"expanded\":true\n                 }\n              ]\n            },\n            {\n              \"type\":\"OR\",\n              \"description\":\"OR(fields=(title), KEYWORD(way*, querypos=1, expanded))\",\n              \"fields\":[\"title\"],\n              \"max_field_pos\":0,\n              \"children\":\n              [\n                {\n                  \"type\":\"KEYWORD\",\n                  \"word\":\"way*\",\n                  \"querypos\":1,\n                  \"expanded\":true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"type\":\"AND\",\n          \"description\":\"AND(fields=(content), KEYWORD(hey, querypos=2))\",\n          \"fields\":[\"content\"],\n          \"max_field_pos\":0,\n          \"children\":\n          [\n            {\n              \"type\":\"KEYWORD\",\n              \"word\":\"hey\",\n              \"querypos\":2\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using JavaScript in Manticore Search\nDESCRIPTION: This snippet demonstrates how to insert documents into a real-time table named 'test' using the JavaScript client for Manticore Search. It shows inserting documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await indexApi.insert({\"table\" : \"test\", \"id\" : 1, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\", \"price\" : 19.85}});\nres = await indexApi.insert({\"table\" : \"test\", \"id\" : 2, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\"}});\nres = await indexApi.insert({\"table\" : \"test\", \"id\" : 0, \"doc\" : {{\"title\" : \"Yellow bag\"}});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and Integer Fields using JSON API\nDESCRIPTION: Uses the CLI endpoint with JSON to create a table with a 'title' text field and a 'price' integer field. Integer fields store 32-bit unsigned integer values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, price int)\"\n```\n\n----------------------------------------\n\nTITLE: Executing Search Query with Highlighting in Java\nDESCRIPTION: This Java snippet demonstrates how to perform a search query with highlighting using the Manticore Search Java client. It searches for specific terms in the 'books' index and limits the highlight snippets to 50 characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{\n    put(\"*\",\"try|gets|down|said\");\n}});        \nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{\n    put(\"limit\",50);\n}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents via HTTP API in JSON\nDESCRIPTION: Shows how to delete documents from the 'products' table using the range filter (price less than or equal to 10) by making a POST request to the /delete endpoint. The request structure and a sample response are given, illustrating the expected RESTful communication format. Requires a deployed Manticore Search instance accessible via HTTP and documents with applicable schema.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\nPOST /delete\\n{\\n  \\\"table\\\": \\\"products\\\",\\n  \\\"query\\\":\\n  {\\n    \\\"range\\\":\\n    {\\n      \\\"price\\\":\\n      {\\n        \\\"lte\\\": 10\\n      }\\n    }\\n  }\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"table\\\": \\\"products\\\",\\n  \\\"deleted\\\": 1\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in SQL\nDESCRIPTION: Creates a table with a 'title' field that is both a string attribute and indexed for full-text search. This allows both searching the field and using it for filtering/sorting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products ( title string attribute indexed );\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and Integer Fields in Python\nDESCRIPTION: Uses the Python API to create a table with a 'title' text field and a 'price' integer field. Integer type allows storing 32-bit unsigned integer values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price int)')\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with Text Field in INI\nDESCRIPTION: Defines a real-time table configuration in INI format with a 'title' field that is both indexed and stored. The 'stored_fields' option explicitly specifies that the field content should be stored.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\t# when configuring fields via config, they are indexed (and not stored) by default\n\trt_field = title\n\n\t# this option needs to be specified for the field to be stored\n\tstored_fields = title\n}\n```\n\n----------------------------------------\n\nTITLE: Performing INNER JOIN with JSON API\nDESCRIPTION: Example of an INNER JOIN using the JSON API that combines orders and customers tables. The query includes a query_string parameter to search for 'maple' in the customers table and sorts results by customer email.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"orders\",\n  \"join\": [\n    {\n      \"type\": \"inner\",\n      \"table\": \"customers\",\n      \"query\": {\n        \"query_string\": \"maple\"\n      },\n      \"on\": [\n        {\n          \"left\": {\n            \"table\": \"orders\",\n            \"field\": \"customer_id\"\n          },\n          \"operator\": \"eq\",\n          \"right\": {\n            \"table\": \"customers\",\n            \"field\": \"id\"\n          }\n        }\n      ]\n    }\n  ],\n  \"_source\": [\"product\", \"customers.email\", \"customers.name\", \"customers.address\"],\n  \"sort\": [{\"customers.email\": \"asc\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Query String Search in JSON for Manticore Search\nDESCRIPTION: Illustrates a query_string search using JSON. It searches for 'find joe fast' within 2 words in the 'comment_text' field of the 'hn_small' table and returns the 'story_author' and 'comment_author' fields for the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{   \"table\" : \"hn_small\",\n    \"query\":\n    {\n        \"query_string\": \"@comment_text \\\"find joe fast \\\"/2\"\n    },\n    \"_source\": [\"story_author\",\"comment_author\"],\n    \"limit\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in C#\nDESCRIPTION: Uses the C# API to create a table with a text field that is only indexed. The field can be searched but its original content won't be stored.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_25\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text indexed)\");\n```\n\n----------------------------------------\n\nTITLE: Adding Document with Array Field and Searching in Python\nDESCRIPTION: Demonstrates inserting a document with a multi-value field (product_codes) and performing a match_all search using Python. Note how the array values are automatically sorted in the response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nindexApi.insert({\"table\":\"products\",\"id\":1,\"doc\":{\"title\":\"first\",\"product_codes\":[4,2,1,3]}})\nsearchApi.search({\"table\":\"products\",\"query\":{\"match_all\":{}}})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'created': True,\n 'found': None,\n 'id': 1,\n 'table': 'products',\n 'result': 'created'}\n{'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 1,\n                    u'_source': {u'product_codes': [1, 2, 3, 4],\n                                 u'title': u'first'}}],\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 29}\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in Python\nDESCRIPTION: This snippet shows how to replace multiple documents using the bulk API in Python. It constructs a list of replacement operations and sends them as a single request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nindexApi = manticoresearch.IndexApi(client)\ndocs = [ \\\n    {\"replace\": {\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"title\" : \"document one\"}}}, \\\n    {\"replace\": {\"table\" : \"products\", \"id\" : 2, \"doc\" : {\"title\" : \"document two\"}}} ]\napi_resp = indexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\nLANGUAGE: python\nCODE:\n```\n{'error': None,\n 'items': [{u'replace': {u'_id': 1,\n                         u'table': u'products',\n                         u'created': False,\n                         u'result': u'updated',\n                         u'status': 200}},\n           {u'replace': {u'_id': 2,\n                         u'table': u'products',\n                         u'created': False,\n                         u'result': u'updated',\n                         u'status': 200}}]}\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with TypeScript\nDESCRIPTION: Shows how to execute percolate queries using TypeScript with proper typing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nres = await searchApi.percolate('test_pq', { query: { percolate: { document : { title : 'What a nice bag' } } } } );\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Highlighting in Rust\nDESCRIPTION: Example of performing a search query with highlighting in Rust using Manticore Search. Sets up match filters and highlight configuration for multiple fields with custom highlight queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_60\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet mut highlight_match_filter = HashMap::new(); \nhighlight_match_filter.insert(\"*\".to_string(), \"polite distance\".to_string());\nlet highlight_query = QueryFilter {\n    r#match: Some(serde_json::json!(highlight_match_filter)),\n    ..Default::default(),\n};\nlet highlight_fields [String; 2] = [\"content\".to_string(), \"title\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    highlight_query: Some(Box::new(highlight_query)),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with JSON Column in SQL\nDESCRIPTION: Demonstrates how to create a table with a JSON column for storing schema-less data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_72\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, data json);\n```\n\n----------------------------------------\n\nTITLE: Adding Percolate Rules via PHP\nDESCRIPTION: PHP implementation for adding percolate queries using the Manticore Search PHP client. Demonstrates structuring query data with match conditions and range filters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_rules_to_a_percolate_table.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$newstoredquery = [\n    'table' => 'test_pq',\n    'body' => [\n        'query' => [\n                       'match' => [\n                               'title' => 'shoes'\n                       ]\n               ],\n               'range' => [\n                       'price' => [\n                               'gt' => 5\n                       ]\n               ]\n       ],\n    'tags' => ['Loius Vuitton']\n];\n$client->pq()->doc($newstoredquery);\n```\n\n----------------------------------------\n\nTITLE: Querying Table Status with TypeScript in Manticore Search\nDESCRIPTION: This TypeScript snippet uses the utilsApi to asynchronously execute the SQL command 'SHOW TABLE statistic STATUS'. It fetches detailed information about the 'statistic' table, including index type, document count, memory usage, and various performance metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql('SHOW TABLE statistic STATUS');\n```\n\n----------------------------------------\n\nTITLE: Obtaining Table Status with Rust in Manticore Search\nDESCRIPTION: This Rust code snippet uses the utils_api to asynchronously execute the SQL command 'SHOW TABLE statistic STATUS'. It retrieves comprehensive statistics about the 'statistic' table, including index properties, resource utilization, and query performance data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"SHOW TABLE statistic STATUS\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in Rust\nDESCRIPTION: This snippet creates a 'products' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search Rust client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"create table products(title text, color string) type='pq'\", Some(true)).await;\n\nlet mut doc1 = HashMap::new();\ndoc1.insert(\"query\".to_string(), serde_json::json!(\"@title bag\"));\nlet insert_req1 = InsertDocumentRequest::new(\"products\".to_string(), serde_json::json!(doc1));\nindex_api.insert(insert_req1).await;\n\nlet mut doc2 = HashMap::new();\ndoc2.insert(\"query\".to_string(), serde_json::json!(\"@title shoes\"));\ndoc2.insert(\"filters\".to_string(), serde_json::json!(\"color='red'\"));\nlet insert_req2 = InsertDocumentRequest::new(\"products\".to_string(), serde_json::json!(doc2));\nindex_api.insert(insert_req2).await;\n\nlet mut doc3 = HashMap::new();\ndoc3.insert(\"query\".to_string(), serde_json::json!(\"@title bag\"));\ndoc3.insert(\"filters\".to_string(), serde_json::json!(\"color IN ('blue', 'green')\"));\nlet insert_req3 = InsertDocumentRequest::new(\"products\".to_string(), serde_json::json!(doc3));\nindex_api.insert(insert_req3).await;\n```\n\n----------------------------------------\n\nTITLE: Sorting Groups in SQL with Manticore Search\nDESCRIPTION: This SQL query demonstrates how to sort groups by the field being grouped (release_year) in ascending order. It shows the count of films for each year.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT release_year, count(*) from films GROUP BY release_year ORDER BY release_year asc limit 5;\n```\n\n----------------------------------------\n\nTITLE: Executing Profiled Search Query in PHP with Manticore\nDESCRIPTION: Performs a search query with wildcard matching on title and content fields, excludes all source fields, limits results and enables profiling. The response shows the detailed query execution plan with keyword expansions and field matching logic.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$result = $index->search('@title way* @content hey')->setSource(['excludes'=>['*']])->setLimit(1)->profile()->get();\nprint_r($result->getProfile());\n```\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [query] => Array\n        (\n            [type] => AND\n            [description] => AND( OR( OR( AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),  OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))),  AND(fields=(title), KEYWORD(way, querypos=1, expanded)),  OR(fields=(title), KEYWORD(way*, querypos=1, expanded))),  AND(fields=(content), KEYWORD(hey, querypos=2)))\n            [children] => Array\n                (\n                    [0] => Array\n                        (\n                            [type] => OR\n                            [description] => OR( OR( AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),  OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))),  AND(fields=(title), KEYWORD(way, querypos=1, expanded)),  OR(fields=(title), KEYWORD(way*, querypos=1, expanded)))\n                            [children] => Array\n                                (\n                                    [0] => Array\n                                        (\n                                            [type] => OR\n                                            [description] => OR( AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),  OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded))))\n                                            [children] => Array\n                                                (\n                                                    [0] => Array\n                                                        (\n                                                            [type] => AND\n                                                            [description] => AND(fields=(title), KEYWORD(wayne, querypos=1, expanded))\n                                                            [fields] => Array\n                                                                (\n                                                                    [0] => title\n                                                                )\n                                                            [max_field_pos] => 0\n                                                            [children] => Array\n                                                                (\n                                                                    [0] => Array\n                                                                        (\n                                                                            [type] => KEYWORD\n                                                                            [word] => wayne\n                                                                            [querypos] => 1\n                                                                            [expanded] => 1\n                                                                        )\n                                                                )\n                                                        )\n                                                    [1] => Array\n                                                        (\n                                                            [type] => OR\n                                                            [description] => OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))\n                                                            [children] => Array\n                                                                (\n                                                                    [0] => Array\n                                                                        (\n                                                                            [type] => AND\n                                                                            [description] => AND(fields=(title), KEYWORD(ways, querypos=1, expanded))\n                                                                            [fields] => Array\n                                                                                (\n                                                                                    [0] => title\n                                                                                )\n\n                                                                            [max_field_pos] => 0\n                                                                            [children] => Array\n                                                                                (\n                                                                                    [0] => Array\n                                                                                        (\n                                                                                            [type] => KEYWORD\n                                                                                            [word] => ways\n                                                                                            [querypos] => 1\n                                                                                            [expanded] => 1\n                                                                                        )\n                                                                                )\n                                                                        )\n                                                                    [1] => Array\n                                                                        (\n                                                                            [type] => AND\n                                                                            [description] => AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded))\n                                                                            [fields] => Array\n                                                                                (\n                                                                                    [0] => title\n                                                                                )\n                                                                            [max_field_pos] => 0\n                                                                            [children] => Array\n                                                                                (\n                                                                                    [0] => Array\n                                                                                        (\n                                                                                            [type] => KEYWORD\n                                                                                            [word] => wayyy\n                                                                                            [querypos] => 1\n                                                                                            [expanded] => 1\n                                                                                        )\n                                                                                )\n                                                                        )\n                                                                )\n                                                        )\n                                                )\n                                        )\n                                    [1] => Array\n                                        (\n                                            [type] => AND\n                                            [description] => AND(fields=(title), KEYWORD(way, querypos=1, expanded))\n                                            [fields] => Array\n                                                (\n                                                    [0] => title\n                                                )\n                                            [max_field_pos] => 0\n                                            [children] => Array\n                                                (\n                                                    [0] => Array\n                                                        (\n                                                            [type] => KEYWORD\n                                                            [word] => way\n                                                            [querypos] => 1\n                                                            [expanded] => 1\n                                                        )\n                                                )\n                                        )\n                                    [2] => Array\n                                        (\n                                            [type] => OR\n                                            [description] => OR(fields=(title), KEYWORD(way*, querypos=1, expanded))\n                                            [fields] => Array\n                                                (\n                                                    [0] => title\n                                                )\n                                            [max_field_pos] => 0\n                                            [children] => Array\n                                                (\n                                                    [0] => Array\n                                                        (\n```\n\n----------------------------------------\n\nTITLE: Implementing Faceted Search with HTTP JSON in Manticore Search\nDESCRIPTION: This JSON request demonstrates how to perform a faceted search using the HTTP JSON interface. It queries all documents from the facetdemo table with a limit of 5 and adds two aggregations: one for price and another for brand_id.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n    {\n     \"table\" : \"facetdemo\",\n     \"query\" : {\"match_all\" : {} },\n     \"limit\": 5,\n     \"aggs\" :\n     {\n        \"group_property\" :\n         {\n            \"terms\" :\n             {\n              \"field\":\"price\"\n             }\n         },\n        \"group_brand_id\" :\n         {\n            \"terms\" :\n             {\n              \"field\":\"brand_id\"\n             }\n         }\n     }\n    }\n'\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using Python in Manticore Search\nDESCRIPTION: Uses the Python client to find percolate query rules that match a document with a specific title. The percolate function takes the index name and the query document as parameters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.percolate('products',{\"query\":{\"percolate\":{\"document\":{\"title\":\"What a nice bag\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Querying Table Status with JavaScript in Manticore Search\nDESCRIPTION: This snippet uses the utilsApi to execute a SQL command 'SHOW TABLE statistic STATUS' asynchronously in JavaScript. It retrieves detailed statistics about the 'statistic' table, including index type, document count, memory usage, and query performance metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('SHOW TABLE statistic STATUS');\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with TypeScript Client\nDESCRIPTION: Demonstrates how to create a search query with highlighting in TypeScript. The code searches for 'Text' across all fields and limits highlights to 2 results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: { match: { *: 'Text } },\n  highlight: { limit: 2}\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Documents by Query via HTTP JSON in Manticore Search\nDESCRIPTION: This example shows how to update multiple documents that match a query using the /update endpoint. It updates the 'price' field for all documents containing the word 'apple' in the 'test' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nPOST /update\n\n{\n  \"table\":\"test\",\n  \"doc\":\n  {\n    \"price\" : 1000\n  },\n  \"query\":\n  {\n    \"match\": { \"*\": \"apple\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Custom Charset in Multiple Languages\nDESCRIPTION: Examples of creating a products table with custom charset_table settings across different programming languages and APIs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) charset_table = '0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) charset_table = '0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'charset_table' => '0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Filtering KNN Vector Search Results with SQL\nDESCRIPTION: Demonstrates combining KNN vector search with additional filtering criteria, including full-text search (match 'white') and attribute filtering (id < 10).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect id, knn_dist() from test where knn ( image_vector, 5, (0.286569,-0.031816,0.066684,0.032926) ) and match('white') and id < 10;\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with Python in Manticore Search\nDESCRIPTION: Shows how to perform a search with highlighting using the Python client. The code searches for 'and first' in the 'content' field with a highlighting limit of 50 and no limits per field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nres =searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"content\":\"and first\"}},\"highlight\":{\"fields\":{\"content\":{\"limit\":50}},\"limits_per_field\":False}})\n```\n\n----------------------------------------\n\nTITLE: Searching with Profiling in Manticore (C#)\nDESCRIPTION: Creates and executes a search request using the C# client. It specifies the 'forum' index, uses an anonymous object for the `query_string` query ('way*' in 'title', 'hey' in 'content'), enables profiling, limits results to 1, and sets sorting. The response format shows a `SearchResponse` structure with hits and profile information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_23\n\nLANGUAGE: clike\nCODE:\n```\nobject query =  new { query_string=\"@title way* @content hey\" };\nvar searchRequest = new SearchRequest(\"forum\", query);\nsearchRequest.Profile = true;\nsearchRequest.Limit = 1;\nsearchRequest.Sort = new List<Object> { \"*\" };\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\nLANGUAGE: clike\nCODE:\n```\nclass SearchResponse {\n    took: 18\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=2811025403043381551, _score=2643, _source={}}]\n        aggregations: null\n    }\n    profile: {query={type=AND, description=AND( AND(fields=(title), KEYWORD(way*, querypos=1, expanded)),  AND(fields=(content), KEYWORD(hey, querypos=2))), children=[{type=AND, description=AND(fields=(title), KEYWORD(way*, querypos=1, expanded)), fields=[title], children=[{type=KEYWORD, word=way*, querypos=1, expanded=true}]}, {type=AND, description=AND(fields=(content), KEYWORD(hey, querypos=2)), fields=[content], children=[{type=KEYWORD, word=hey, querypos=2}]}]}}\n}\n```\n\n----------------------------------------\n\nTITLE: Ranking with Custom UDF and PACKEDFACTORS (SQL)\nDESCRIPTION: Shows how to use the output of PACKEDFACTORS() as input to a custom user defined ranking function (UDF) within a SELECT query, enabling implementation of sophisticated domain-specific scoring. Requires the definition of CUSTOM_RANK() as a UDF and integrated with Manticore Search's expression ranker. Results are ordered by the custom score, facilitating custom ranking strategies.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, CUSTOM_RANK(PACKEDFACTORS()) AS r\nFROM my_index\nWHERE match('hello')\nORDER BY r DESC\nOPTION ranker=expr('1');\n```\n\n----------------------------------------\n\nTITLE: Optimized Query with Two Ranking UDFs Using Sub-select\nDESCRIPTION: Demonstrates how to optimize a query with two ranking UDFs using sub-select. This approach computes slow_rank() only for a limited set, improving performance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sub-selects.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM\n    (SELECT id,slow_rank() as slow,fast_rank() as fast FROM index WHERE\n        MATCH('some common query terms')\n        ORDER BY fast DESC LIMIT 100 OPTION max_matches=1000)\nORDER BY slow DESC LIMIT 20;\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with TypeScript in Manticore Search\nDESCRIPTION: Demonstrates how to perform a search with highlighting using the TypeScript client. The code creates a search request with a match query and disables limits per field in the highlighting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: { limits_per_field: 0 }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlighting in TypeScript for Manticore Search\nDESCRIPTION: This code shows how to perform a search with highlighting in TypeScript using the Manticore Search API. It sets up a match query and configures highlighting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: { fragment_size: 4}\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in TypeScript\nDESCRIPTION: Executes a SQL query to show agent status using the TypeScript client. Makes an asynchronous request and returns a JSON response containing status information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\"\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"columns\":\n\t[{\n\t\t\"Key\": {\"type\": \"string\"}},\n        {\"Value\": {\"type\": \"string\"}\n\t}],\n\t\"data\":\n\t[\n\t\t{\"Key\": \"dstindex_1_is_ha\", \"Value\": \"1\"},\n\t\t{\"Key\": \"dstindex_1mirror1_id\", \"Value\": \"192.168.0.202:6713:loc\"},\n\t\t{\"Key\": \"dstindex_1mirror1_probability_weight\", \"Value\": \"0.372864\"},\n\t    {\"Key\": \"dstindex_1mirror1_is_blackhole\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror1_is_persistent\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror2_id\", \"Value\": \"192.168.0.202:6714:loc\"},\n\t    {\"Key\": \"dstindex_1mirror2_probability_weight\", \"Value\": \"0.374635\"},\n\t    {\"Key\": \"dstindex_1mirror2_is_blackhole\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror2_is_persistent\", \"Value\": \"439\"},\n\t    {\"Key\": \"dstindex_1mirror3_id\", \"Value\": \"dev1.manticoresearch.com:6714:loc\"},\n\t    {\"Key\": \"dstindex_1mirror3_probability_weight\", \"Value\": \" 0.252501\"},\n\t    {\"Key\": \"dstindex_1mirror3_is_blackhole\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror3_is_persistent\", \"Value\": \"439\"}    \n    ],\n\t\"error\": \"\",\n\t\"total\": 0,\n\t\"warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Search Query with Highlighting in PHP\nDESCRIPTION: This PHP snippet shows how to perform a search query with highlighting using the Manticore Search PHP client. It searches for specific terms and processes the highlighted results, including document IDs, fields, and highlight snippets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$results = $index->search('try|gets|down|said')->highlight([],['limit'=>50])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId();\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.': '.$value;\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo  $snippet.\"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Documents using SQL Statements\nDESCRIPTION: Snippets show SQL syntax for updating documents within a table to enable or disable certain attributes. These SQL statements require an SQL database with appropriate table and column structures. Expected inputs and outputs involve table names, column names, and update conditions with affected rows feedback.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nupdate weekly:posts set enabled=0 where id=1;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE products SET tags1=(3,6,4) WHERE id=1;\n\nUPDATE products SET tags1=() WHERE id=1;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nQuery OK, 1 row affected (0.00 sec)\n\nQuery OK, 1 row affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in Javascript\nDESCRIPTION: This Javascript code creates a table 'products' with support for both non-continuous and continuous script languages using the Manticore Search Javascript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_10\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) charset_table = \\'non_cont\\' ngram_len = \\'1\\' ngram_chars = \\'cont\\'');\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with Python in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in Python. The method requires joining multiple JSON operations with newlines.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\ndocs = [ \\\n            { \"delete\" : { \"table\" : \"test\", \"id\": 1 } }, \\\n            { \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } } ]\nindexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Window Limit Fix\nDESCRIPTION: Example of a SELECT query with window limits that was fixed to properly handle offsets above 1000 matches in PQ indexes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pq ORDER BY id desc LIMIT 1000 , 100 OPTION max_matches=1100\n```\n\n----------------------------------------\n\nTITLE: Advanced Source Selection in HTTP JSON Queries for Manticore Search\nDESCRIPTION: Demonstrates how to use 'includes' and 'excludes' properties for more granular control over which attributes are included or excluded from the result set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"_source\":\n{\n  \"includes\": [ \"attr1\", \"attri*\" ],\n  \"excludes\": [ \"*desc*\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with Text and String Fields in INI\nDESCRIPTION: Defines a real-time table configuration in INI format with a 'title' text field that is both indexed and stored, and a 'keys' string attribute. String attributes are useful for metadata.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_string = keys\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (JSON)\nDESCRIPTION: JSON request to create a table with stored fields in Manticore Search using the CLI interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, content text stored indexed, name text indexed, price float)\"\n```\n\n----------------------------------------\n\nTITLE: Applying RANGE() Function for Custom Price Ranges in Manticore SQL\nDESCRIPTION: Demonstrates the use of the RANGE() function to create custom price range buckets for grouping and aggregation in a Manticore SQL query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Arrays_and_conditions_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*),\nRANGE(price, {range_to=150},{range_from=150,range_to=300},{range_from=300}) price_range\nFROM facets\nGROUP BY price_range ORDER BY price_range ASC;\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using SQL in Manticore Search\nDESCRIPTION: Uses the CALL PQ SQL function to find percolate query rules that match a document with a specific title. The function takes the index name, document data in JSON format, and optional parameters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ('products', '{\"title\": \"What a nice bag\"}', 1 as query);\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in PHP\nDESCRIPTION: This snippet demonstrates how to replace multiple documents using the bulk API in PHP. It uses the replaceDocuments method to update two documents with new content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$index->replaceDocuments([\n    [\n        'id' => 1,\n        'title' => 'document one',\n        'tag' => 10\n    ],\n    [\n        'id' => 2,\n        'title' => 'document one',\n        'tag' => 20\n    ]\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nArray(\n    [items] =>\n    Array(\n        Array(\n            [_index] => products\n            [_id] => 2\n            [created] => false\n            [result] => updated\n            [status] => 200\n        )\n        Array(\n            [_index] => products\n            [_id] => 2\n            [created] => false\n            [result] => updated\n            [status] => 200\n        )\n    )\n    [errors => false\n)\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with Python\nDESCRIPTION: Python implementation to search for 'one|robots' in the 'books' table and highlight matches in 'title' and 'content' fields, with a limit of 50 for content highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nres =searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":{\"title\":{},\"content\":{\"limit\":50}}}})\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL with Certificate Authority\nDESCRIPTION: Configuration example showing how to set up SSL with a Certificate Authority (CA) in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/SSL.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nssl_ca = ca-cert.pem\nssl_cert = server-cert.pem\nssl_key = server-key.pem\n```\n\n----------------------------------------\n\nTITLE: Joining on JSON Attributes in Manticore Search\nDESCRIPTION: When joining on JSON attributes, you must explicitly cast the values to the appropriate type to ensure proper comparison.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- Correct:\nSELECT * FROM t1 LEFT JOIN t2 ON int(t1.json_attr.id) = t2.json_attr.id\n\n-- Incorrect:\nSELECT * FROM t1 LEFT JOIN t2 ON t1.json_attr.id = t2.json_attr.id\n```\n\n----------------------------------------\n\nTITLE: Joining SQL Tables with Integer JSON Attributes\nDESCRIPTION: Example of how to join tables using integer values from JSON attributes in SQL syntax. When joining by a value from a JSON attribute, you must explicitly specify the value's type using the int() function.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... ON left_table.json_attr.int_id = int(right_table.json_attr.int_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stored Fields in Manticore Search\nDESCRIPTION: Specifies which full-text fields should have their original values stored in Manticore Search. By default, all fields are stored.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nstored_fields = title, content\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with Java\nDESCRIPTION: Shows how to create and execute a percolate query using the Java client with nested HashMaps.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nPercolateRequest percolateRequest = new PercolateRequest();\nquery = new HashMap<String,Object>(){{\n    put(\"percolate\",new HashMap<String,Object >(){{\n        put(\"document\", new HashMap<String,Object >(){{\n            put(\"title\",\"what a nice bag\");\n        }});\n    }});\n}};\npercolateRequest.query(query);\nsearchApi.percolate(\"test_pq\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with PHP in Manticore Search\nDESCRIPTION: Removes a table using the PHP client. This uses the indices().drop() method with the table name specified in the parameters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$params = [ 'table' => 'products' ];\n\n$response = $client->indices()->drop($params);\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in Python-asyncio\nDESCRIPTION: This asynchronous Python code uses the utilsApi to execute an SQL query that retrieves the status of the replication cluster, providing detailed information about the cluster configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('SHOW STATUS')\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode using PHP (PHP)\nDESCRIPTION: This PHP example uses the Manticoresearch client library to create a table with specified blend_mode settings for customized token indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'blend_mode' => 'trim_tail, skip_pure',\n            'blend_chars' => '+, &'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query in Rust\nDESCRIPTION: Implements a percolate query using Rust HashMap to structure documents with title and color fields before executing against the 'products' index\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_47\n\nLANGUAGE: rust\nCODE:\n```\nlet mut percolate_doc_fields1 = HashMap::new();\npercolate_doc_fields1.insert(\"title\".to_string(), \"nice pair of shoes\");\npercolate_doc_fields1.insert(\"color\".to_string(), \"blue\");\nlet mut percolate_doc_fields2 = HashMap::new();\npercolate_doc_fields2.insert(\"title\".to_string(), \"beautiful bag\");\nlet mut percolate_doc_fields_list: [HashMap; 2] = [percolate_doc_fields1, percolate_doc_fields2];\nlet mut percolate_doc = HashMap::new();\npercolate_doc.insert(\"documents\".to_string(), percolate_doc_fields_list); \nlet percolate_query = PercolateRequestQuery::new(serde_json::json!(percolate_doc));\nlet percolate_req = PercolateRequest::new(percolate_query); \nsearch_api.percolate(\"products\", percolate_req).await;\n```\n\n----------------------------------------\n\nTITLE: Aggregating with Expressions in Go\nDESCRIPTION: Shows how to perform a search with aggregation using expressions in Go. The code configures a search request with an empty query, adds a calculated expression field, and sets up aggregation on this field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nquery := map[string]interface{} {}\nsearchRequest.SetQuery(query)\n\nexprs := map[string]string{} { \"cat_range\": \"INTERVAL(cat,1,3)\" }\nsearchRequest.SetExpressions(exprs)\n\naggByExpr := manticoreclient.NewAggregation()\naggTerms := manticoreclient.NewAggregationTerms()\naggTerms.SetField(\"cat_range\")\naggByExpr.SetTerms(aggTerms)\naggs := map[string]Aggregation{} { \"expr_group\": aggByExpr }\nsearchRequest.SetAggs(aggs)\n\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Using Complex Strict Order Expressions in Manticore Search\nDESCRIPTION: Shows how the strict order operator can be applied to complex expressions, combining various operators in a sequential order requirement.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n(bag of words) << \"exact phrase\" << red|green|blue\n```\n\n----------------------------------------\n\nTITLE: Querying Table Status with Python-asyncio in Manticore Search\nDESCRIPTION: Demonstrates how to use the Python-asyncio API to asynchronously execute an SQL query for retrieving table status information. The method works with Python's async/await syntax and returns the same structure as the synchronous version.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_4\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait utilsApi.sql('SHOW TABLE statistic STATUS')\n```\n\n----------------------------------------\n\nTITLE: Interpreting Percolation JSON Results\nDESCRIPTION: Shows the results of a percolation query executed in JSON format. Contains information about the total hits, score, and document metadata including query match and document slot.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\"took\": 0, \"timed_out\": false, \"hits\": {\"total\": 2, \"max_score\": 1, \"hits\": [{\"table\": \"products\", \"_type\": \"doc\", \"_id\": 1657852401006149644, \"_score\": \"1\", \"_source\": {\"query\": {\"ql\": \"@title bag\"}}, \"fields\": {\"_percolator_document_slot\": [2]}}, {\"table\": \"products\", \"_type\": \"doc\", \"_id\": 1657852401006149646, \"_score\": \"1\", \"_source\": {\"query\": {\"ql\": \"@title shoes\"}}, \"fields\": {\"_percolator_document_slot\": [1]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Range filter in Manticore Search\nDESCRIPTION: Demonstrates how to use a range filter to match documents with attribute values within a specified range, using 'gte' and 'lte' operators.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test1\",\n  \"query\": {\n    \"range\": {\n      \"price\": {\n        \"gte\": 500,\n        \"lte\": 1000\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Searching with Profiling in Manticore (Rust)\nDESCRIPTION: Constructs `SearchQuery` and `SearchRequest` structs using the Rust client for an asynchronous search. It targets the 'forum' table, queries for 'way*' in 'title' and 'hey' in 'content' via `query_string`, enables profiling, limits to 1 result, and sets sorting. The search is executed asynchronously using `await`. The response structure includes hits and profile details.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nlet query = SearchQuery {\n     query_string: Some(serde_json::json!(\"@title way* @content hey\").into()),\n    ..Default::default()\n};\nlet search_req = SearchRequest {\n    table: \"forum\".to_string(),\n    query: Some(Box::new(query)),\n    sort: serde_json::json!([\"*\"]),\n    limit: serde_json::json!(1),\n    profile: serde_json::json!(true),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\nLANGUAGE: rust\nCODE:\n```\nclass SearchResponse {\n    took: 18\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=2811025403043381551, _score=2643, _source={}}]\n        aggregations: null\n    }\n    profile: {query={type=AND, description=AND( AND(fields=(title), KEYWORD(way*, querypos=1, expanded)),  AND(fields=(content), KEYWORD(hey, querypos=2))), children=[{type=AND, description=AND(fields=(title), KEYWORD(way*, querypos=1, expanded)), fields=[title], children=[{type=KEYWORD, word=way*, querypos=1, expanded=true}]}, {type=AND, description=AND(fields=(content), KEYWORD(hey, querypos=2)), fields=[content], children=[{type=KEYWORD, word=hey, querypos=2}]}]}}\n}\n```\n\n----------------------------------------\n\nTITLE: Using PHP to Perform Faceted Search in Manticore Search\nDESCRIPTION: This PHP code example shows how to create a faceted search query using the PHP client for Manticore Search. It searches the facetdemo index with no query string, sets a limit of 5 results, and adds facets for price and brand_id.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('facetdemo');\n$search = $index->search('');\n$search->limit(5);\n$search->facet('price','price');\n$search->facet('brand_id','group_brand_id');\n$results = $search->get();\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS JSON Response\nDESCRIPTION: Sample response from the SHOW THREADS command via HTTP API, showing thread information in a tabular format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n+--------+---------+-------+-------+-----------------+--------+-----------------------+-----------+---------------+--------------+\n| TID    | Name    | Proto | State | Connection from | ConnID | This/prev job time, s | Jobs done | Thread status | Info         |\n+--------+---------+-------+-------+-----------------+--------+-----------------------+-----------+---------------+--------------+\n| 501494 | work_23 | http  | query | 127.0.0.1:41300 | 1473   | 249us                 | 1681      | working       | show_threads |\n+--------+---------+-------+-------+-----------------+--------+-----------------------+-----------+---------------+--------------+\n```\n\n----------------------------------------\n\nTITLE: Initializing Scroll Search in HTTP JSON for Manticore Search\nDESCRIPTION: Shows how to start a scroll search in HTTP JSON by specifying 'scroll: true' in the options and including sorting criteria. The 'id' must be present in the sort array.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{ \n  \"table\": \"<table_names>\",\n  \"options\": {\n\t  \"scroll\": true\n  }, \n  \n  ...\n  \n  \"sort\": [\n    ...\n    { \"id\":{ \"order\":\"{asc|desc}\"} }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document in Manticore via HTTP\nDESCRIPTION: HTTP POST request to insert a document into a Manticore Search table using the insert endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert\n-d'{\"table\":\"testrt\",\"id\":1,\"doc\":{\"title\":\"Hello\",\"content\":\"world\",\"gid\":1}}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with JSON Secondary Index in Go\nDESCRIPTION: Demonstrates how to create a table with JSON secondary indexing using the Go API. This snippet creates a 'products' table with a text field and a JSON field with secondary indexing enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nutilsAPI.Sql(context.Background()).Body(\"CREATE TABLE products(title text, j json secondary_index='1')\").Execute()\n```\n\n----------------------------------------\n\nTITLE: SQL Histogram Response Format\nDESCRIPTION: Displays the response format from a SQL histogram query. The results show the count of documents in each price range bucket, with buckets created at intervals of 100.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\n+----------+-------------+\n| count(*) | price_range |\n+----------+-------------+\n|        5 |           0 |\n|        5 |         100 |\n|        1 |         300 |\n|        4 |         400 |\n|        1 |         500 |\n|        3 |         700 |\n|        1 |         900 |\n+----------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Rust Aggregation Query\nDESCRIPTION: Implements search aggregations in Rust using SearchQuery and Aggregation structs. Creates terms aggregations for price and brand_id fields with custom sizes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_55\n\nLANGUAGE: rust\nCODE:\n```\nlet query = SearchQuery::new();\nlet aggTerms1 = AggTerms {\n    field: \"price\".to_string(),\n    size: Some(1),\n};\nlet agg1 = Aggregation {\n    terms: Some(Box::new(aggTerms1)),\n    ..Default::default(),\n};\nlet aggTerms1 = AggTerms {\n    field: \"brand_id\".to_string(),\n    size: Some(3),\n};\nlet agg2 = Aggregation {\n    terms: Some(Box::new(aggTerms2)),\n    ..Default::default(),\n};\nlet mut aggs = HashMap::new();\naggs.insert(\"group_property\".to_string(), agg1); \naggs.insert(\"group_brand_id\".to_string(), agg2);\n\nlet search_req = SearchRequest {\n    table: \"facetdemo\".to_string(),\n    query: Some(Box::new(query)),\n    aggs: serde_json::json!(aggs),\n    limit: serde_json::json!(5),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in Manticore Search\nDESCRIPTION: Shows the logical OR operator (|) which has higher precedence than AND. This allows matching documents that contain either of the specified terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nhello | world\n```\n\n----------------------------------------\n\nTITLE: Migrating Plain Table to RT Table Using indexer --print-rt in Bash\nDESCRIPTION: This bash script demonstrates how to use the indexer --print-rt command to dump data from a plain table, then import it into an RT table. It includes steps for dumping the data, truncating the target table, and importing the dump.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Importing_table.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/indexer --rotate --config /etc/manticoresearch/manticore.conf --print-rt my_rt_index my_plain_index > /tmp/dump_regular.sql\n\nmysql -P $9306 -h0 -e \"truncate table my_rt_index\"\n\nmysql -P 9306 -h0 < /tmp/dump_regular.sql\n\nrm /tmp/dump_regular.sql\n```\n\n----------------------------------------\n\nTITLE: TypeScript Search with Highlighting\nDESCRIPTION: Shows how to perform a search operation with highlighting in TypeScript using the search API. Includes match query configuration and highlight options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1|Doc 1'\n    }\n  },\n  highlight: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping and Aggregation with Memory Constraints\nDESCRIPTION: This series of SQL queries illustrates the effects of varying 'max_matches' on grouping results, showcasing potential inaccuracies when grouping large data sets under memory constraints. The 'films' table is used, and multiple memory limit settings are compared.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT release_year year, count(*) FROM films GROUP BY year limit 5;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n+------+----------+\n| year | count(*) |\n+------+----------+\n| 2004 |      108 |\n| 2002 |      108 |\n| 2001 |       91 |\n| 2005 |       93 |\n| 2000 |       97 |\n+------+----------+\n\nSELECT release_year year, count(*) FROM films GROUP BY year limit 5 option max_matches=1;\n+------+----------+\n| year | count(*) |\n+------+----------+\n| 2004 |       76 |\n+------+----------+\n\nSELECT release_year year, count(*) FROM films GROUP BY year limit 5 option max_matches=2;\n+------+----------+\n| year | count(*) |\n+------+----------+\n| 2004 |       76 |\n| 2002 |       74 |\n+------+----------+\n\nSELECT release_year year, count(*) FROM films GROUP BY year limit 5 option max_matches=3;\n+------+----------+\n| year | count(*) |\n+------+----------+\n| 2004 |      108 |\n| 2002 |      108 |\n| 2001 |       91 |\n+------+----------+\n```\n\n----------------------------------------\n\nTITLE: SET Statement Syntax in Manticore Search SQL\nDESCRIPTION: Defines the syntax for the SET statement in Manticore Search, including options for setting server variables, user variables, and compatibility statements.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Setting_variables_online.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSET [GLOBAL] server_variable_name = value\nSET [INDEX table_name] GLOBAL @user_variable_name = (int_val1 [, int_val2, ...])\nSET NAMES value [COLLATE value]\nSET @@dummy_variable = ignored_value\n```\n\n----------------------------------------\n\nTITLE: Search Highlighting Implementation in Rust\nDESCRIPTION: Demonstrates setting up a search request with highlighting in Rust. Creates a match filter and configures highlighting options using serde_json for JSON serialization.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_57\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\n\nlet highlight = Highlight::new();\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Current UTC Timestamp with UTC_TIMESTAMP() in SQL\nDESCRIPTION: Executes the UTC_TIMESTAMP() function in SQL to retrieve the current date and time in the Coordinated Universal Time (UTC) timezone. The result is returned as a string in 'YYYY-MM-DD hh:ii:ss' format. No parameters are required.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect UTC_TIMESTAMP();\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Word Forms in SQL\nDESCRIPTION: SQL command for creating a table with word forms configuration specifying multiple dictionary files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) wordforms = '/var/lib/manticore/wordforms.txt' wordforms = '/var/lib/manticore/alternateforms.txt /var/lib/manticore/dict*.txt'\n```\n\n----------------------------------------\n\nTITLE: Java Search Implementation\nDESCRIPTION: Java implementation of search with highlighting using HashMaps for query and highlight configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_91\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{\n    put(\"*\",\"one|robots\");\n}});        \nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{\n    put(\"fields\",new String[] {\"content\",\"title\"});\n    put(\"number_of_fragments\",10);\n}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Installing and Using a User-Defined Function with Manticore Search in SQL\nDESCRIPTION: This example shows the end-to-end process of installing a user-defined function (UDF) named avgmva from the shared library 'udfexample.dll' and subsequently using it in a SELECT query. The CREATE FUNCTION statement makes the avgmva function available for queries, and the SELECT statement demonstrates application of the UDF to table data. Requires the UDF library to be correctly compiled for the platform, placed within the plugin_dir, and the function name to correspond to an exported UDF symbol.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF/Creating_a_function.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> CREATE FUNCTION avgmva RETURNS INTEGER SONAME 'udfexample.dll';\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> SELECT *, AVGMVA(tag) AS q from test1;\n+------+--------+---------+-----------+\n| id   | weight | tag     | q         |\n+------+--------+---------+-----------+\n|    1 |      1 | 1,3,5,7 | 4.000000  |\n|    2 |      1 | 2,4,6   | 4.000000  |\n|    3 |      1 | 15      | 15.000000 |\n|    4 |      1 | 7,40    | 23.500000 |\n+------+--------+---------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via JavaScript Client\nDESCRIPTION: Initialize a connection to Manticore Search using the JavaScript client library and set up API interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar Manticoresearch = require('manticoresearch');\nvar client= new Manticoresearch.ApiClient()\nclient.basePath=\"http://127.0.0.1:9308\";\nindexApi = new Manticoresearch.IndexApi(client);\nsearchApi = new Manticoresearch.SearchApi(client);\nutilsApi = new Manticoresearch.UtilsApi(client);\n```\n\n----------------------------------------\n\nTITLE: Ranged Query Throttling Configuration\nDESCRIPTION: Example showing how to configure query throttling to reduce database server load by adding sleep intervals between ranged query steps.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Ranged_queries.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsql_ranged_throttle = 1000 # sleep for 1 sec before each query step\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in Go\nDESCRIPTION: This snippet demonstrates how to replace multiple documents using the bulk API in Go. It constructs a string containing multiple JSON objects, each representing a document replacement operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nbody := \"{\\\"replace\\\": {\\\"index\\\": \\\"test\\\", \\\"id\\\": 1, \\\"doc\\\": {\\\"content\\\": \\\"Text 11\\\", \\\"name\\\": \\\"Doc 11\\\", \\\"cat\\\": 1 }}}\" + \"\\n\" +\n\t\"{\\\"replace\\\": {\\\"index\\\": \\\"test\\\", \\\"id\\\": 2, \\\"doc\\\": {\\\"content\\\": \\\"Text 22\\\", \\\"name\\\": \\\"Doc 22\\\", \\\"cat\\\": 9 }}}\" +\"\\n\";\nres, _, _ := apiClient.IndexAPI.Bulk(context.Background()).Body(body).Execute()\n```\n\nLANGUAGE: go\nCODE:\n```\n{\n  \"items\":\n  [\n    {\n      \"replace\":\n      {\n        \"table\":\"test\",\n        \"_id\":1,\n        \"created\":false,\n        \"result\":\"updated\",\n        \"status\":200\n      }\n    },\n    {\n      \"replace\":\n      {\n        \"table\":\"test\",\n        \"_id\":2,\n        \"created\":false,\n        \"result\":\"updated\",\n        \"status\":200\n      }\n    }\n  ],\n  \"errors\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Document with Array Field and Searching in PHP\nDESCRIPTION: Shows how to add a document with a multi-value field (product_codes) to an index and search for it using PHP. The response includes both the document creation confirmation and search results showing how the array values are stored.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n$index->addDocument([\n    \"title\"=>\"first\",\n    \"product_codes\"=>[4,2,1,3]\n]);\n$index->search('')-get();\n```\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [_index] => products\n    [_id] => 1\n    [created] => 1\n    [result] => created\n    [status] => 201\n)\nArray\n(\n    [took] => 0\n    [timed_out] =>\n    [hits] => Array\n        (\n            [total] => 1\n            [hits] => Array\n                (\n                    [0] => Array\n                        (\n                            [_id] => 1\n                            [_score] => 1\n                            [_source] => Array\n                                (\n                                    [product_codes] => Array\n                                        (\n                                            [0] => 1\n                                            [1] => 2\n                                            [2] => 3\n                                            [3] => 4\n                                        )\n\n                                    [title] => first\n                                )\n                        )\n                )\n        )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Expression Filters in Manticore\nDESCRIPTION: Example showing how to set up regexp_filter rules for text pattern replacement during indexing and searching. The rules transform measurements and color terms into standardized formats.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nregexp_filter = \\**(\\d+)\\\" => \\1 inch\nregexp_filter = (BLUE|RED) => COLOR\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and Integer Fields in Python-asyncio\nDESCRIPTION: Uses the Python asyncio API to create a table with a 'title' text field and a 'price' integer field. This is an asynchronous version of the Python call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price int)')\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous Search with Aggregations in Python\nDESCRIPTION: This snippet shows how to perform an asynchronous search query with aggregations using the Manticore Search Python-asyncio API. It searches the 'facetdemo' table, retrieves all documents, limits the result to 5 items, and performs aggregations on 'price' and 'brand_id' fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"limit\":5,\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price\",}},\"group_brand_id\":{\"terms\":{\"field\":\"brand_id\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Basic Geo Distance Query in Manticore Search\nDESCRIPTION: Demonstrates a simple geo_distance query to find locations within 100km of a specified point. Shows usage of location_anchor and location_source with coordinate specifications.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test\",\n  \"query\": {\n    \"geo_distance\": {\n      \"location_anchor\": {\"lat\":49, \"lon\":15},\n      \"location_source\": {\"attr_lat, attr_lon\"},\n      \"distance_type\": \"adaptive\",\n      \"distance\":\"100 km\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with C#\nDESCRIPTION: C# implementation to search for 'one|robots' in the 'books' index using MatchFilter and configuring highlight fields with a limit of 50 for 'title' field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_106\n\nLANGUAGE: clike\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"one|robots\");\nvar highlight = new Highlight();\nvar highlightField = new HighlightField(\"title\");\nhighlightField.Limit = 50;\nhighlight.Fields = new List<Object> {highlightField};\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Multi-level Facet Grouping in SQL\nDESCRIPTION: Demonstrates using facets for multi-level grouping in SQL. The query creates a calculated price_range field using INTERVAL and then facets results by both price_range and brand_name, ordering by brand name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *,INTERVAL(price,200,400,600,800) AS price_range FROM facetdemo\nFACET price_range AS price_range,brand_name ORDER BY brand_name asc;\n```\n\n----------------------------------------\n\nTITLE: Matching Text with Regular Expressions using REGEX() in Manticore Search SQL\nDESCRIPTION: Demonstrates how to use the REGEX() function to perform regular expression matching on string and JSON attributes using RE2 syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/String_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT REGEX(content, 'box?') FROM test;\nSELECT REGEX(j.color, 'red | pink') FROM test;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in PHP\nDESCRIPTION: Uses the PHP client to create a table with a text field that is only indexed. The indexed option specifies that the field will be available for searching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text','options'=>['indexed']]\n]);\n```\n\n----------------------------------------\n\nTITLE: Grouping by Multiple Fields in SQL with Manticore Search\nDESCRIPTION: This SQL query demonstrates how to group by multiple fields (category_id and release_year) and sort the results by both fields in ascending order.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category_id, release_year, count(*) FROM films GROUP BY category_id, release_year ORDER BY category_id ASC, release_year ASC;\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query in TypeScript\nDESCRIPTION: Demonstrates a simplified percolate query implementation in TypeScript using async/await syntax against the 'test_pq' index\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\ndocs = [ {title : 'What a nice bag'}, {title : 'Really nice shoes'} ]; \nres = await searchApi.percolate('test_pq', { query: { percolate: { documents : docs } } } );\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via C#\nDESCRIPTION: Creates a percolate table using C# client's SQL interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_7\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, meta json) type='pq'\");\n```\n\n----------------------------------------\n\nTITLE: Rust-Based Document Update Operations\nDESCRIPTION: This Rust snippet details constructing and sending document update requests using Rust collections and types. Necessary for interfacing with APIs is a Rust environment and relevant client libraries. Document and index details are input, with responses indicating update success.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\nlet mut doc = HashMap::new();\ndoc.insert(\"enabled\".to_string(), serde_json::json!(0));\nlet update_req = UpdateDocumentRequest {\n    table: serde_json::json!(\"products\"),\n    cluster: serde_json::json!(\"weekly\"),\n    doc: serde_json::json!(doc),\n    id: serde_json::json!(1),\n};\nlet update_res = index_api.update(update_req).await;\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet mut doc = HashMap::new();\ndoc.insert(\"tags1\".to_string(), serde_json::json!([]));\nlet update_req = UpdateDocumentRequest {\n    table: serde_json::json!(\"products\"),\n    doc: serde_json::json!(doc),\n    id: serde_json::json!(1),\n    ..Default::default(),\n};\nlet update_res = index_api.update(update_req).await;\n```\n\nLANGUAGE: Rust\nCODE:\n```\nclass UpdateResponse {\n    index: products\n    updated: null\n    id: 1\n    result: updated\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (SQL)\nDESCRIPTION: Adds an existing local table to a replication cluster using SQL syntax. Once added, write statements to the table must prefix the table name with the cluster name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER CLUSTER click_query ADD clicks_daily_index\n```\n\n----------------------------------------\n\nTITLE: Adding Document with Array Field and Searching in Rust\nDESCRIPTION: Demonstrates adding a document with a multi-value array field and searching for it using Rust. The example shows how to use HashMap and serde_json for document creation and search query construction.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_86\n\nLANGUAGE: rust\nCODE:\n```\nlet mut doc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"first\"));\ndoc.insert(\"product_codes\".to_string(), serde_json::json!([4,2,1,3]));\nlet insert_req = InsertDocumentRequest::new(\"products\".to_string(), serde_json::json!(doc));\nlet insert_res = index_api.insert(insert_req).await;\n\nlet query = SearchQuery::new();\nlet search_req = SearchRequest {\n    table: \"forum\".to_string(),\n    query: Some(Box::new(query)),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\nprintln!(\"{:?}\", search_res);\n```\n\nLANGUAGE: rust\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=1, _score=1, _source={product_codes=[1, 2, 3, 4], title=first}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Element Removal in Manticore Search\nDESCRIPTION: This snippet demonstrates how to remove specific HTML elements and their contents when indexing. The html_remove_elements option is used to specify a list of elements (in this case, style and script) whose contents should be stripped along with the tags themselves.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Advanced_HTML_tokenization.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) html_remove_elements = 'style, script' html_strip = '1'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) html_remove_elements = 'style, script' html_strip = '1'\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'html_remove_elements' => 'style, script',\n            'html_strip' => '1'\n        ]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) html_remove_elements = \\'style, script\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) html_remove_elements = \\'style, script\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) html_remove_elements = \\'style, script\\' html_strip = \\'1\\'');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) html_remove_elements = 'style, script' html_strip = '1'\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) html_remove_elements = 'style, script' html_strip = '1'\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) html_remove_elements = 'style, script' html_strip = '1'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  html_remove_elements = style, script\n  html_strip = 1\n  \n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via HTTP JSON\nDESCRIPTION: Creates a percolate table using HTTP JSON POST request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, meta json) type='pq'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in C#\nDESCRIPTION: This C# code snippet uses the utilsApi to execute an SQL query that retrieves the status of the replication cluster, providing detailed information about the cluster configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.sql(\"SHOW STATUS\");\n```\n\n----------------------------------------\n\nTITLE: Using Quorum Matching Operator in Manticore Search\nDESCRIPTION: Shows the quorum matching operator which introduces fuzzy matching by requiring documents to contain at least a certain number or percentage of the specified words.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n\"the world is a wonderful place\"/3\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in Python-asyncio\nDESCRIPTION: This Python-asyncio code creates a table 'products' with support for both non-continuous and continuous script languages using the Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) charset_table = \\'non_cont\\' ngram_len = \\'1\\' ngram_chars = \\'cont\\'')\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with Python-asyncio in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in Python with asyncio. The method requires joining multiple JSON operations with newlines.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\ndocs = [ \\\n            { \"delete\" : { \"table\" : \"test\", \"id\": 1 } }, \\\n            { \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } } ]\nindexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Highlighting Configuration\nDESCRIPTION: Examples of configuring custom pre_tags and post_tags for search result highlighting across multiple languages including JSON, PHP, Python, JavaScript, Java, and C#.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_63\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"*\": \"one|robots\" } },\n  \"highlight\":\n  {\n    \"fields\": [ \"content\", \"title\" ],\n    \"pre_tags\": \"before_\",\n    \"post_tags\": \"_after\"\n   }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$bool = new \\Manticoresearch\\Query\\BoolQuery();\n$bool->must(new \\Manticoresearch\\Query\\Match(['query' => 'one|robots'], '*'));\n\n$results = $index->search($bool)->highlight(['content','title'],['pre_tags'=>'before_','post_tags'=>'_after'])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Response for Percolate Query Document Matching\nDESCRIPTION: Shows the JavaScript object response format when matching documents to percolate queries. The _percolator_document_slot field indicates which document matched each query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"took\": 6,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 2,\n    \"hits\": [\n      {\n        \"table\": \"products\",\n        \"_type\": \"doc\",\n        \"_id\": 2811045522851233808,\n        \"_score\": \"1\",\n        \"_source\": {\n          \"query\": {\n            \"ql\": \"@title bag\"\n          }\n        },\n        \"fields\": {\n          \"_percolator_document_slot\": [\n            2\n          ]\n        }\n      },\n      {\n        \"table\": \"products\",\n        \"_type\": \"doc\",\n        \"_id\": 2811045522851233810,\n        \"_score\": \"1\",\n        \"_source\": {\n          \"query\": {\n            \"ql\": \"@title shoes\"\n          }\n        },\n        \"fields\": {\n          \"_percolator_document_slot\": [\n            1\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Manticore YUM Repository (Bash)\nDESCRIPTION: This command downloads and installs the Manticore Search YUM repository configuration package. This step is necessary to allow the `yum` package manager to find and install Manticore Search packages. Requires `sudo` privileges and `yum` package manager.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/RHEL_and_Centos.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install https://repo.manticoresearch.com/manticore-repo.noarch.rpm\n```\n\n----------------------------------------\n\nTITLE: Conducting Aggregations with C# and Manticore Search\nDESCRIPTION: This C# snippet uses the Manticore Search API to perform an aggregation based on the 'meta.color' field. It assumes use of the Manticore Search C# client library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_29\n\nLANGUAGE: clike\nCODE:\n```\nvar agg = new Aggregation(\"color\", \"meta.color\");\nagg.Size = 100;\nobject query = new { match_all=null };\nvar searchRequest = new SearchRequest(\"products\", query);\nsearchRequest.Limit = 0;\nsearchRequest.Aggs = new List<Aggregation> {agg};\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\nLANGUAGE: clike\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    aggregations: {color={buckets=[{key=green, doc_count=1}, {key=red, doc_count=2}]}}\n    hits: class SearchResponseHits {\n        maxScore: null\n        total: 3\n        hits: []\n    }\n    profile: null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Table in INI File for Manticore Search\nDESCRIPTION: This snippet demonstrates how to define a distributed table named 'foo' in a Manticore Search configuration file. It includes local and remote agent specifications.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_distributed_table.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntable foo {\n    type = distributed\n    local = bar\n    local = bar1, bar2\n    agent = 127.0.0.1:9312:baz\n    agent = host1|host2:tbl\n    agent = host1:9301:tbl1|host2:tbl2 [ha_strategy=random retry_count=10]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with JSON Secondary Indexes\nDESCRIPTION: Configuration example for creating a real-time table with JSON secondary indexing. This snippet shows how to define a 'products' table with a text field and a JSON field with secondary indexing enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  json_secondary_indexes = j\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_json = j\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing RT table RAM chunk to disk using FLUSH TABLE in SQL\nDESCRIPTION: This SQL command forcefully flushes the RAM chunk contents of a real-time table to disk in Manticore Search. It also triggers the cleanup of binary log files. The command is useful for ensuring data persistence and managing log files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_RAM_chunk_to_disk.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nFLUSH TABLE rt_table\n```\n\n----------------------------------------\n\nTITLE: Aggregation Response in Go for Manticore Search\nDESCRIPTION: This snippet shows the structure of a search response in Go after performing an aggregation query. It includes aggregation results for 'cat_id' and hit information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"aggregations\":\n\t{\n\t\t\"cat_id\":\n\t\t{\n\t\t\t\"buckets\":\n\t\t\t[{\n\t\t\t\t\"key\":1,\n\t\t\t\t\"doc_count\":1\n\t\t\t}]\n\t\t}\n\t},\n\t\"hits\":\n\t{\n\t\t\"total\":5,\n\t\t\"hits\":[]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting and Filtering with EXIST in Manticore Search (SQL)\nDESCRIPTION: Demonstrates how to use the EXIST() function in an SQL SELECT statement to provide default values when querying multiple tables with differing schemas. Requires specifying the attribute name and a default value; not compatible with STRING or MVA attributes. Outputs rows only where the evaluated condition is satisfied, helping manage heterogenous data queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, EXIST('gid', 6) as cnd FROM i1, i2 WHERE cnd>5\n```\n\n----------------------------------------\n\nTITLE: MVA Grouping Implementation in Multiple Languages\nDESCRIPTION: Examples of implementing MVA grouping across different programming languages and their respective APIs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n$index->setName('shoes');\n$search = $index->search('');\n$search->limit(0);\n$search->facet('sizes','sizes',100);\n$results = $search->get();\nprint_r($results->getFacets());\n```\n\nLANGUAGE: Python\nCODE:\n```\nres =searchApi.search({\"table\":\"shoes\",\"limit\":0,\"aggs\":{\"sizes\":{\"terms\":{\"field\":\"sizes\",\"size\":100}}}})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await searchApi.search({\"table\":\"shoes\",\"limit\":0,\"aggs\":{\"sizes\":{\"terms\":{\"field\":\"sizes\",\"size\":100}}}});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  aggs: {\n    mva_agg: {\n      terms: { field: \"mva_field\", size: 2 }\n    }\n  }\n});\n```\n\nLANGUAGE: Go\nCODE:\n```\nquery := map[string]interface{} {};\nsearchRequest.SetQuery(query);\naggTerms := manticoreclient.NewAggregationTerms()\naggTerms.SetField(\"mva_field\")\naggTerms.SetSize(2)\naggregation := manticoreclient.NewAggregation()\naggregation.setTerms(aggTerms)\nsearchRequest.SetAggregation(aggregation)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (PHP)\nDESCRIPTION: Adds an existing local table to a replication cluster using the PHP client. The operation is performed through the cluster()->alter() method with appropriate parameters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n  'cluster' => 'click_query',\n  'body' => [\n     'operation' => 'add',\n     'table' => 'clicks_daily_index'\n      \n  ]\n];\n$response = $client->cluster()->alter($params);        \n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with PHP\nDESCRIPTION: PHP implementation to search for 'one|robots' in the 'books' index and highlight matches in 'title' and 'content' fields, with a limit of 50 for content highlighting. Includes code for displaying the highlighted results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_97\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$bool = new \\Manticoresearch\\Query\\BoolQuery();\n$bool->must(new \\Manticoresearch\\Query\\Match(['query' => 'one|robots'], '*'));\n\n$results = $index->search($bool)->highlight(['content'=>['limit'=>50],'title'=>new \\stdClass])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with JavaScript Client\nDESCRIPTION: JavaScript code to initialize and configure the Manticore Search JavaScript client library for connecting to a Manticore server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// https://github.com/manticoresoftware/manticoresearch-javascript\nvar Manticoresearch = require('manticoresearch');\nvar client= new Manticoresearch.ApiClient()\nclient.basePath=\"http://127.0.0.1:9308\";\nindexApi = new Manticoresearch.IndexApi(client);\nsearchApi = new Manticoresearch.SearchApi(client);\nutilsApi = new Manticoresearch.UtilsApi(client);\n```\n\n----------------------------------------\n\nTITLE: Explicit Transaction Example in Manticore Search\nDESCRIPTION: Shows how to use BEGIN and COMMIT to explicitly define transaction boundaries, avoiding the need to manage autocommit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Transactions.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\nQuery OK, 0 rows affected (0.00 sec)\n\ninsert into indexrt (id, content, title, channel_id, published) values (2, 'aa', 'bb', 1, 1);\nQuery OK, 1 row affected (0.00 sec)\n\nselect * from indexrt where id=2;\nEmpty set (0.01 sec)\n\ncommit;\nQuery OK, 0 rows affected (0.01 sec)\n\nselect * from indexrt where id=2;\n+------+------------+-----------+-------+\n| id   | channel_id | published | title |\n+------+------------+-----------+-------+\n|    2 |          1 |         1 | bb    |\n+------+------------+-----------+-------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Profiling Python Search Query in Manticore Search\nDESCRIPTION: This Python snippet shows how to enable profiling for a search query using the Python API. It sets the profile parameter to True in the search request and returns the profile information in the response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.search({\"table\":\"forum\",\"query\":{\"query_string\":\"i me\"},\"_source\":{\"excludes\":[\"*\"]},\"limit\":1,\"profile\":True})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'100', u'_score': 2500, u'_source': {}}],\n          'total': 1},\n 'profile': {u'query': {u'children': [{u'children': [{u'querypos': 1,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'i'}],\n                                       u'description': u'AND(KEYWORD(i, querypos=1))',\n                                       u'type': u'AND'},\n                                      {u'children': [{u'querypos': 2,\n                                                      u'type': u'KEYWORD',\n                                                      u'word': u'me'}],\n                                       u'description': u'AND(KEYWORD(me, querypos=2))',\n                                       u'type': u'AND'}],\n                        u'description': u'AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2)))',\n                        u'type': u'AND'}},\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with Python Asyncio in Manticore Search\nDESCRIPTION: Shows how to perform an asynchronous search with highlighting using Python's asyncio. The code searches for 'and first' in the 'content' field with highlighting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_117\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"content\":\"and first\"}},\"highlight\":{\"fields\":{\"content\":{\"limit\":50}},\"limits_per_field\":False}})\n```\n\n----------------------------------------\n\nTITLE: Executing Search with Aggregations in JavaScript\nDESCRIPTION: This snippet illustrates how to perform a search query with aggregations using the Manticore Search JavaScript API. It searches the 'facetdemo' table, retrieves all documents, limits the result to 5 items, and performs aggregations on 'price' and 'brand_id' fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"limit\":5,\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price\",}},\"group_brand_id\":{\"terms\":{\"field\":\"brand_id\"}}}});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Timestamp with NOW() in SQL\nDESCRIPTION: Executes the NOW() function in SQL to retrieve the current timestamp as an integer representing the number of seconds since the Unix epoch. No parameters are required. Returns a single integer value.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect NOW();\n```\n\n----------------------------------------\n\nTITLE: Search Highlighting Implementation in TypeScript\nDESCRIPTION: Shows how to execute a search query with highlighting in TypeScript. Configures match query and highlight settings with custom tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: {\n    pre_tags: 'before_',\n    post_tags: '_after'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Python-asyncio Response for Highlight Request\nDESCRIPTION: Example response from an asynchronous Python highlight request showing the full response structure including document ID, score, source content, and highlighted snippets with HTML formatting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_102\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 2788,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u' into the room. <b>One</b> of the <b>robots</b> followed as well'],\n                                   u'title': [u'Books <b>one</b>']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW QUERIES Command via MySQL Shell - SQL\nDESCRIPTION: This snippet shows an example of running the SHOW QUERIES command inside a MySQL-like SQL shell interface connected to a Manticore Search server. The command must be issued with Buddy installed, and the sample illustrates direct shell interaction. Required dependencies include an interactive SQL client configured for Manticore Search with Buddy enabled. This approach allows users to input commands interactively and see immediate results for query introspection.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_QUERIES.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SHOW QUERIES;\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Expanded Keywords in Manticore Search (SQL)\nDESCRIPTION: These SQL queries demonstrate the effect of expanded keywords on search results, comparing enabled and disabled scenarios.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nmysql> create table t(f text) min_infix_len='2' expand_keywords='1' morphology='stem_en';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> insert into t values(1,'running'),(2,'runs'),(3,'runsy');\nQuery OK, 3 rows affected (0.00 sec)\n\nmysql> select *, weight() from t where match('runs');\n+------+---------+----------+\n| id   | f       | weight() |\n+------+---------+----------+\n|    2 | runs    |     1560 |\n|    1 | running |     1500 |\n|    3 | runsy   |     1500 |\n+------+---------+----------+\n3 rows in set (0.01 sec)\n\nmysql> drop table t;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> create table t(f text) min_infix_len='2' expand_keywords='exact' morphology='stem_en';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> insert into t values(1,'running'),(2,'runs'),(3,'runsy');\nQuery OK, 3 rows affected (0.00 sec)\n\nmysql> select *, weight() from t where match('running');\n+------+---------+----------+\n| id   | f       | weight() |\n+------+---------+----------+\n|    1 | running |     1590 |\n|    2 | runs    |     1500 |\n+------+---------+----------+\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Searching with Highlighting in Python-asyncio\nDESCRIPTION: Performs an asynchronous search with title highlighting using Python asyncio Manticore client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.search({\"table\":\"products\",\"query\":{\"query_string\":\"@title remove hair\"},\"highlight\":{\"fields\":[\"title\"]}})\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with Python\nDESCRIPTION: Demonstrates using the Python client to execute a percolate query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nsearchApi.percolate('products',{\"query\":{\"percolate\":{\"document\":{\"title\":\"What a nice bag\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Executing Autocomplete via JSON API\nDESCRIPTION: Example of using the /autocomplete endpoint to get word completion suggestions in JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Autocomplete.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /autocomplete\n{\n\t\"table\":\"comment\",\n\t\"query\":\"hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings Using CONCAT() in Manticore Search SQL\nDESCRIPTION: Demonstrates how to use the CONCAT() function to join multiple strings together, including conversion of non-string values to strings using TO_STRING().\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/String_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCONCAT(TO_STRING(float_attr), ',', TO_STRING(int_attr), ',', title)\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search Configuration File\nDESCRIPTION: This snippet shows how to define a distributed table named 'index_dist' in the Manticore Search configuration file. It specifies the table type as distributed and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntable index_dist {\n  type  = distributed\n  local = index1\n  local = index2\n  ...\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Document with Array Field and Searching in Python-asyncio\nDESCRIPTION: Shows how to insert a document with a multi-value array field and search for it using Python with asyncio for asynchronous operations. The result shows the values are sorted numerically.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nawait indexApi.insert({\"table\":\"products\",\"id\":1,\"doc\":{\"title\":\"first\",\"product_codes\":[4,2,1,3]}})\nawait searchApi.search({\"table\":\"products\",\"query\":{\"match_all\":{}}})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'created': True,\n 'found': None,\n 'id': 1,\n 'table': 'products',\n 'result': 'created'}\n{'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 1,\n                    u'_source': {u'product_codes': [1, 2, 3, 4],\n                                 u'title': u'first'}}],\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 29}\n```\n\n----------------------------------------\n\nTITLE: Executing Fuzzy Search in SQL\nDESCRIPTION: Demonstrates how to perform a fuzzy search using SQL syntax in Manticore Search. It includes options for specifying fuzzy matching, keyboard layouts, and Levenshtein distance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mytable WHERE MATCH('someting') OPTION fuzzy=1, layouts='us,ua', distance=2;\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in TypeScript\nDESCRIPTION: This snippet shows how to replace multiple documents using the bulk API in TypeScript. It creates an array of replacement operations, stringifies each operation, and joins them with newlines.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nreplaceDocs = [\n  {\n    replace: {\n      index: 'test',\n      id: 1,\n      doc: { content: 'Text 11', cat: 1, name: 'Doc 11' },\n    },\n  },\n  {\n    replace: {\n      index: 'test',\n      id: 2,\n      doc: { content: 'Text 22', cat: 9, name: 'Doc 22' },\n    },\n  },\n];\n\nres = await indexApi.bulk(\n  replaceDocs.map((e) => JSON.stringify(e)).join(\"\\n\")\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"items\":\n  [\n    {\n      \"replace\":\n      {\n        \"table\":\"test\",\n        \"_id\":1,\n        \"created\":false,\n        \"result\":\"updated\",\n        \"status\":200\n      }\n    },\n    {\n      \"replace\":\n      {\n        \"table\":\"test\",\n        \"_id\":2,\n        \"created\":false,\n        \"result\":\"updated\",\n        \"status\":200\n      }\n    }\n  ],\n  \"errors\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing CALL AUTOCOMPLETE in SQL\nDESCRIPTION: Example of using CALL AUTOCOMPLETE to get word completion suggestions based on indexed data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Autocomplete.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL AUTOCOMPLETE('hello', 'comment');\n+------------+\n| query      |\n+------------+\n| hello      |\n| helio      |\n| hell       |\n| shell      |\n| nushell    |\n| powershell |\n| well       |\n| help       |\n+------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Price Range Facets Using JSON API\nDESCRIPTION: This JSON request demonstrates how to create price range facets using the Manticore Search JSON API. It defines a price_range expression using INTERVAL and aggregates results using terms aggregation on that expression.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n    {\n     \"table\": \"facetdemo\",\n     \"query\":\n     {\n        \"match_all\": {}\n     },\n     \"expressions\":\n     {\n        \"price_range\": \"INTERVAL(price,200,400,600,800)\"\n     },\n    \"aggs\":\n    {\n      \"group_property\":\n      {\n        \"terms\":\n        {\n            \"field\": \"price_range\"\n        }\n      }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Using Complex REGEX Patterns in Manticore Search\nDESCRIPTION: Shows more complex REGEX patterns including partial matching with .* at beginning/end of the pattern. Terms undergo charset_table transformation before matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nREGEX(/.{3}t/)\nREGEX(/t.*\\d*/)\n```\n\n----------------------------------------\n\nTITLE: Percolate Query Implementation in Go\nDESCRIPTION: Demonstrates how to execute a percolate query in Go using maps and the Manticore client library. Shows setup of query context and request execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_68\n\nLANGUAGE: go\nCODE:\n```\ndoc1 := map[string]interface{} {\"title\": \"What a nice bag\"}\ndoc2 := map[string]interface{} {\"title\": \"Really nice shoes\"}\nquery := []interface{} {doc1, doc2}\npercolateRequestQuery := manticoreclient.NewPercolateQuery(query)\npercolateRequest := manticoreclient.NewPercolateRequest(percolateRequestQuery)\nres, _, _ := apiClient.SearchAPI.Percolate(context.Background(), \"test_pq\").PercolateRequest(*percolateRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: SHOW STATUS Query Syntax in Manticore\nDESCRIPTION: SQL statement for viewing performance counters in Manticore. This command can be filtered using LIKE pattern and requires '--iostats' and '--cpustats' switches for I/O and CPU metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATUS [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with Go in Manticore Search\nDESCRIPTION: Shows how to perform a search with highlighting using the Go client. The code sets up a search request with a match query and configures highlighting with no limits per field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_125\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nhighlight.SetLimitsPerField(0)\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using Elasticsearch-compatible API in Manticore Search\nDESCRIPTION: These examples demonstrate how to insert a document with a JSON field using the Elasticsearch-compatible API of Manticore Search. Two alternative methods are shown, both treating the JSON as a nested object.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_44\n\nLANGUAGE: json\nCODE:\n```\nPOST /products/_create/1\n{\n  \"title\": \"shoes\",\n  \"meta\" : {\n    \"size\": 41,\n    \"color\": \"red\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /products/_doc/\n{\n  \"title\": \"shoes\",\n  \"meta\" : {\n    \"size\": 41,\n    \"color\": \"red\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using Python in Manticore Search\nDESCRIPTION: This Python code snippet deletes the replication cluster named 'click_query' using the Manticore Search Python client. It uses the utilsApi.sql() method to execute the SQL command that removes the cluster from all nodes while keeping the tables intact as local non-replicated tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('DELETE CLUSTER click_query')\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via SQL\nDESCRIPTION: Creates a percolate table named 'products' with text and JSON fields using SQL syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, meta json) type='pq';\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via Config\nDESCRIPTION: Creates a percolate table using configuration file with detailed settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  type = percolate\n  path = tbl_pq\n  rt_field = title\n  rt_attr_json = meta\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using Rust Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Rust client library's `sql` method to create a 'products' table specifying a custom `index_token_filter` plugin. The `await` keyword indicates an asynchronous operation. The `Some(true)` parameter might influence result reporting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_119\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) index_token_filter = 'my_lib.so:custom_blend:chars=@#&'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Using Field-Start and Field-End Modifiers in Manticore Search\nDESCRIPTION: Demonstrates modifiers that ensure keywords only match at the beginning (^) or end ($) of a field, enabling more precise positional matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\n^hello world$\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in Python-asyncio\nDESCRIPTION: This Python-asyncio code creates a table 'products' with blended characters configuration using the Manticore Search Python client, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) blend_chars = \\'+, &, U+23, @->_\\'')\n```\n\n----------------------------------------\n\nTITLE: Python-asyncio Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using Python with asyncio. The response includes the document ID, table name, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n{'deleted': None, 'id': 1, 'table': 'test', 'result': 'deleted'}\n```\n\n----------------------------------------\n\nTITLE: PHP Faceted Search Implementation\nDESCRIPTION: Demonstrates how to perform faceted search using the PHP API with aggregations on price and brand_id fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('facetdemo');\n$search = $index->search('');\n$search->limit(5);\n$search->facet('price','price',1);\n$search->facet('brand_id','group_brand_id',3);\n$results = $search->get();\nprint_r($results->getFacets());\n```\n\n----------------------------------------\n\nTITLE: Adding Document with Array Field and Searching in Java\nDESCRIPTION: Demonstrates creating and inserting a document with a multi-value integer array field and performing a search using Java. The example shows HashMap creation for the document and array handling.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_84\n\nLANGUAGE: java\nCODE:\n```\nInsertDocumentRequest newdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){\n    put(\"title\",\"first\");\n    put(\"product_codes\",new int[] {4,2,1,3});\n};\nnewdoc.index(\"products\").id(1L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\nMap<String,Object> query = new HashMap<String,Object>();\nquery.put(\"match_all\",null);\nSearchRequest searchRequest = new SearchRequest();\nsearchRequest.setIndex(\"products\");\nsearchRequest.setQuery(query);\nSearchResponse searchResponse = searchApi.search(searchRequest);\nSystem.out.println(searchResponse.toString() );\n```\n\nLANGUAGE: java\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=1, _score=1, _source={product_codes=[1, 2, 3, 4], title=first}}]\n        aggregations: null\n    }\n    profile: null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Match Query with Boost in HTTP JSON\nDESCRIPTION: Shows how to apply a boost modifier to a match query in HTTP JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"query\":\n{\n  \"match\":\n  {\n    \"field1\":\n    {\n      \"query\": \"keyword\",\n      \"boost\": 2.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Operators in Manticore Search\nDESCRIPTION: Boolean operators for expressions. These are left-associative with lower priority than other operators. NOT has higher priority than AND and OR, but less than any other operator.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Expressions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nAND, OR, NOT\n```\n\n----------------------------------------\n\nTITLE: Searching with Profile in Go\nDESCRIPTION: Demonstrates how to execute a search query with profiling enabled using the Manticore Search Go client. The request includes query string matching, source filtering and profile generation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nsearchRequest := manticoresearch.NewSearchRequest(\"test\")\nquery := map[string]interface{} {\"query_string\": \"1*\"}\nsource := map[string]interface{} { \"excludes\": []string {\"*\"} }\nsearchRequest.SetQuery(query)\nsearchRequest.SetSource(source)\nsearchReq.SetLimit(1)\nsearchReq.SetProfile(true)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Table Truncation in Rust\nDESCRIPTION: Example of truncating a table using Rust client in Manticore Search. Uses the sql() method with the TRUNCATE TABLE statement and async/await pattern.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"TRUNCATE TABLE products\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using JavaScript in Manticore Search\nDESCRIPTION: Uses the JavaScript client to find percolate query rules that match a document with a specific title. The example shows an async/await pattern for making the API request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.percolate('products',{\"query\":{\"percolate\":{\"document\":{\"title\":\"What a nice bag\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Highlighting in Go for Manticore Search\nDESCRIPTION: This Go code demonstrates how to configure a search request with highlighting for Manticore Search. It includes setting up a match query and configuring the highlight options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_80\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nhighlight.SetFragmentSize(4)\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to insert a document with multi-value attributes (MVA) into a Manticore Search index using the JavaScript API. The MVA is represented as an array in the document object.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nres = await indexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\",\"sizes\":[40,41,42,43]}});\n```\n\n----------------------------------------\n\nTITLE: Example of Cutoff Option in Aggregation Queries\nDESCRIPTION: Demonstrates how using the cutoff option in aggregation queries can lead to incorrect results by limiting the processed documents, with a comparison between queries with and without cutoff.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ndrop table if exists t\n--------------\n\nQuery OK, 0 rows affected (0.02 sec)\n\n--------------\ncreate table t(a int)\n--------------\n\nQuery OK, 0 rows affected (0.04 sec)\n\n--------------\ninsert into t(a) values(1),(2),(3),(1),(2),(3)\n--------------\n\nQuery OK, 6 rows affected (0.00 sec)\n\n--------------\nselect avg(a) from t option cutoff=1 facet a\n--------------\n\n+----------+\n| avg(a)   |\n+----------+\n| 1.000000 |\n+----------+\n1 row in set (0.00 sec)\n--- 1 out of 1 results in 0ms ---\n\n+------+----------+\n| a    | count(*) |\n+------+----------+\n|    1 |        1 |\n+------+----------+\n1 row in set (0.00 sec)\n--- 1 out of 1 results in 0ms ---\n```\n\n----------------------------------------\n\nTITLE: SQL HIGHLIGHT() with Field Syntax\nDESCRIPTION: Shows how to use HIGHLIGHT() with field syntax in queries. This example searches specifically within the 'title' field for the term 'one'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT() FROM books WHERE MATCH('@title one');\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (JavaScript)\nDESCRIPTION: Adds an existing local table to a replication cluster using JavaScript client. The SQL command is executed asynchronously through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('ALTER CLUSTER click_query ADD clicks_daily_index');\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Polygons with POLY2D in SQL\nDESCRIPTION: The `POLY2D` function creates a flat polygon for use with the `CONTAINS` function. It assumes a flat Earth, thus it's appropriate for smaller areas. Uses coordinate pairs in degrees and is not suitable for large areas; `GEOPOLY2D` is recommended for larger areas.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Geo_spatial_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPOLY2D(x1,y1,x2,y2,x3,y3...)\n```\n\n----------------------------------------\n\nTITLE: Using CALL KEYWORDS with Bigram Index in Manticore Search (SQL)\nDESCRIPTION: This snippet shows how to use CALL KEYWORDS with bigram_index enabled, which allows for predicting not just the current word's ending but also the next word. This is particularly useful for improving autocomplete functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Autocomplete.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [(none)]> CALL KEYWORDS('m*', 't', 1 as stats, 'hits' as sort_mode);\nMySQL [(none)]> CALL KEYWORDS('my*', 't', 1 as stats, 'hits' as sort_mode);\nMySQL [(none)]> CALL KEYWORDS('c*', 't', 1 as stats, 'hits' as sort_mode);\nMySQL [(none)]> CALL KEYWORDS('ca*', 't', 1 as stats, 'hits' as sort_mode);\nMySQL [(none)]> CALL KEYWORDS('cat*', 't', 1 as stats, 'hits' as sort_mode);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Aggregation Query\nDESCRIPTION: Demonstrates search aggregations in TypeScript by grouping results by name and category fields. Uses terms aggregation with custom size parameters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nres =  await searchApi.search({\n  index: 'test',\n  query: { match_all:{} },\n  aggs: {\n    name_group: {\n      terms: { field : 'name', size: 1 }\n    },\n    cat_group: {\n      terms: { field: 'cat' }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Year, Month, and Day Code with YEARMONTHDAY() in SQL\nDESCRIPTION: Executes the YEARMONTHDAY() function in SQL to retrieve the year, month, and day code (format YYYYMMDD, range 19691231-20380119) from a given timestamp, interpreted according to the current timezone. This example uses NOW() as the timestamp input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect yearmonthday(now());\n```\n\n----------------------------------------\n\nTITLE: Inserting and Querying Large IDs in SQL\nDESCRIPTION: This SQL snippet shows how to insert and query documents with IDs around 2^63, demonstrating the signed integer representation of large unsigned IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t(id_text string);\ninsert into t values(9223372036854775807, '2 ^ 63 - 1'),(9223372036854775808, '2 ^ 63');\nselect *, uint64(id) from t;\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Manticore Search - SQL\nDESCRIPTION: Demonstrates how to view remote agent statistics including response times, error counts, and query performance metrics using SHOW AGENT STATUS command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW AGENT STATUS;\n```\n\n----------------------------------------\n\nTITLE: SHOW META with Predicted Time in Manticore Search\nDESCRIPTION: Example demonstrating predicted_time and related metrics in SHOW META when searchd is configured with predicted time costs and the query includes predicted_time in the OPTION clause.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_META.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id,story_author FROM hn_small WHERE MATCH('one|two|three') limit 5 option max_predicted_time=100;\n\nSHOW META;\n```\n\n----------------------------------------\n\nTITLE: Simple Grouping Example in SQL for Manticore Search\nDESCRIPTION: This example shows a simple grouping query in SQL, grouping films by release year and limiting the result to 5 rows.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT release_year FROM films GROUP BY release_year LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Table Truncation in Python\nDESCRIPTION: Example of truncating a table using Python client in Manticore Search. Uses the sql() method to execute the TRUNCATE TABLE statement.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('TRUNCATE TABLE products')\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in TypeScript\nDESCRIPTION: This snippet creates a 'test_pq' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search TypeScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql(\"create table test_pq(title text, color string) type='pq'\");\nres = indexApi.insert({\n  index: 'test_pq',\n  doc: { query : '@title bag' }\n});\nres = indexApi.insert(\n  index: 'test_pq',\n  doc: { query: '@title shoes', filters: \"color='red'\" }\n});\nres = indexApi.insert({\n  index: 'test_pq',\n  doc: { query : '@title shoes', filters: \"color IN ('blue', 'green')\" }\n});\n```\n\n----------------------------------------\n\nTITLE: SQL HIGHLIGHT() with Custom Tags\nDESCRIPTION: Demonstrates how to customize the highlight tags using options in the HIGHLIGHT() function. This example uses [match] and [/match] as highlight markers instead of the default <b> and </b>.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT({before_match='[match]',after_match='[/match]'}) FROM books WHERE MATCH('@title one');\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using Rust in Manticore Search\nDESCRIPTION: Uses the Rust client to find percolate query rules that match a document. The example demonstrates how to construct HashMaps to represent the query structure before making the asynchronous API call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\nlet mut percolate_doc_fields = HashMap::new();\npercolate_doc_fileds.insert(\"title\".to_string(), \"what a nice bag\");\nlet mut percolate_doc = HashMap::new();\npercolate_doc.insert(\"document\".to_string(), percolate_doc_fields); \nlet percolate_query = PercolateRequestQuery::new(serde_json::json!(percolate_doc));\nlet percolate_req = PercolateRequest::new(percolate_query); \nsearch_api.percolate(\"test_pq\", percolate_req).await;\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in Python\nDESCRIPTION: This Python code uses the utilsApi to execute an SQL query that retrieves the status of the replication cluster, providing detailed information about the cluster configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('SHOW STATUS')\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings Using SUBSTRING_INDEX() in Manticore Search SQL\nDESCRIPTION: Shows how to extract portions of strings based on delimiter positions using the SUBSTRING_INDEX() function, with examples of positive and negative number parameters and type conversion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/String_functions.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUBSTRING_INDEX('www.w3schools.com', '.', 2) FROM test;\nSELECT SUBSTRING_INDEX(j.coord, ' ', 1) FROM test;\nSELECT          SUBSTRING_INDEX('1.2 3.4', ' ',  1);  /* '1.2' */\nSELECT          SUBSTRING_INDEX('1.2 3.4', ' ', -1);  /* '3.4' */\nSELECT sint (   SUBSTRING_INDEX('1.2 3.4', ' ',  1)); /* 1 */\nSELECT sint (   SUBSTRING_INDEX('1.2 3.4', ' ', -1)); /* 3 */\nSELECT double ( SUBSTRING_INDEX('1.2 3.4', ' ',  1)); /* 1.200000 */\nSELECT double ( SUBSTRING_INDEX('1.2 3.4', ' ', -1)); /* 3.400000 */\n```\n\n----------------------------------------\n\nTITLE: Logstash Configuration for Manticore\nDESCRIPTION: Configuration file for Logstash to read dpkg.log and output to Manticore Search. Includes input configuration for file reading and output configuration for Elasticsearch-compatible endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Logstash.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninput {\n  file {\n    path => [\"/var/log/dpkg.log\"]\n    start_position => \"beginning\"\n    sincedb_path => \"/dev/null\"\n    mode => \"read\"\n    exit_after_read => \"true\"\n   file_completed_action => \"log\"\n   file_completed_log_path => \"/dev/null\"\n  }\n}\n\noutput {\n  elasticsearch {\n   index => \" dpkg_log\"\n   hosts => [\"http://localhost:9308\"]\n   ilm_enabled => false\n   manage_template => false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with Java\nDESCRIPTION: Java implementation to search for 'one|robots' in the 'books' index and highlight matches in 'title' and 'content' fields, with a limit of 50 for content highlighting using HashMaps for configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_105\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{\n    put(\"*\",\"one|robots\");\n}});        \nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{\n    put(\"fields\",new HashMap<String,Object>(){{\n            put(\"title\",new HashMap<String,Object>(){{}});\n            put(\"content\",new HashMap<String,Object>(){{\n                put(\"limit\",50);\n            }});\n        }}\n    );\n}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Searching in a Specific Field using JSON API\nDESCRIPTION: Uses the JSON search API to perform a search in the 'products' table, looking only in the 'title' field for the word 'first'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n\t\"table\": \"products\",\n\t\"query\":\n\t{\n\t\t\"match\": { \"title\": \"first\" }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (Python)\nDESCRIPTION: This Python code creates a table named 'products' with text and float columns, enabling keyword expansion using the Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) expand_keywords = \\'1\\'')\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using C#\nDESCRIPTION: This C# code snippet shows how to insert a document with multi-value attributes (MVA) into a Manticore Search index using the C# API. The MVA is represented as a List<Object> in the document dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_40\n\nLANGUAGE: clike\nCODE:\n```\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"Yellow bag\");\ndoc.Add(\"sizes\", new List<Object> {40,41,42,43});\nInsertDocumentRequest newdoc = new InsertDocumentRequest(index: \"products\", id: 0, doc: doc);\nvar sqlresult = indexApi.Insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with Rust in Manticore Search\nDESCRIPTION: This Rust code constructs a search request for the 'pq' table using the Manticore Search API, performing an asynchronous search to retrieve all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_79\n\nLANGUAGE: rust\nCODE:\n```\nlet query = SearchQuery::new();\nlet search_req = SearchRequest {\n    table: \"pq\".to_string(),\n    query: Some(Box::new(query)),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with C#\nDESCRIPTION: Demonstrates percolate query execution using C# with Dictionary objects.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nDictionary<string, Object> percolateDoc = new Dictionary<string, Object>(); \npercolateDoc.Add(\"document\", new Dictionary<string, Object> {{ \"title\", \"what a nice bag\" }});\nDictionary<string, Object> query = new Dictionary<string, Object> {{ \"percolate\", percolateDoc }}; \nPercolateRequest percolateRequest = new PercolateRequest(query=query);\nsearchApi.Percolate(\"test_pq\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (JavaScript)\nDESCRIPTION: This JavaScript code creates a table named 'products' with text and float columns, enabling keyword expansion using the Manticore Search JavaScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) expand_keywords = \\'1\\'');\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in C#\nDESCRIPTION: Creates a table named 'products' with a 'title' text field using the C# API. The text field will be indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_15\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text)\");\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length using Java (Java)\nDESCRIPTION: Java snippet performing a table creation with ngram_len in Manticoresearch, supporting languages with uninterrupted scripts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_54\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\", true);\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (PHP)\nDESCRIPTION: Removes a table from a replication cluster using the PHP client. The operation is performed through the cluster->alter() method with appropriate parameters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n  'cluster' => 'posts',\n  'body' => [\n     'operation' => 'drop',\n     'table' => 'weekly_index'\n      \n  ]\n];\n$response = $client->cluster->alter($params);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Plan with JSON API in Manticore Search\nDESCRIPTION: Demonstrates how to request a detailed query execution plan (level 3) using the JSON API. The query searches for 'dog|cat' with source exclusion and a plan verbosity of 3.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"hn_small\",\n  \"query\": {\"query_string\": \"dog|cat\"},\n  \"_source\": { \"excludes\":[\"*\"] },\n  \"limit\": 0,\n  \"plan\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via Python\nDESCRIPTION: Creates a percolate table using Python client's SQL interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, meta json) type=\\'pq\\'')\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with JavaScript in Manticore Search\nDESCRIPTION: This JavaScript code uses the Manticore Search API to perform an asynchronous match_all query on the 'pq' table, retrieving all stored percolate queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.search({\"table\":\"pq\",\"query\":{\"match_all\":{}}});\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Unicode N-gram Range\nDESCRIPTION: Creates a products table using a specific Unicode range for N-gram characters (U+3000..U+2FA1F) with N-gram length of 1.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_58\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) ngram_chars = 'U+3000..U+2FA1F' ngram_len = '1'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'ngram_chars' => 'U+3000..U+2FA1F',\n             'ngram_len' => '1'\n        ]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) ngram_chars = \\'U+3000..U+2FA1F\\' ngram_len = \\'1\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in Rust\nDESCRIPTION: This Rust code creates a table 'products' with blended characters configuration using the Manticore Search Rust client, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_23\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) blend_chars = '+, &, U+23, @->_'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with TypeScript in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in TypeScript. The method requires formatting multiple JSON operations as a newline-delimited string.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\ndocs = [\n  { \"delete\" : { \"table\" : \"test\", \"id\": 1 } },\n  { \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } }\n];\nbody = await indexApi.bulk(\n  docs.map((e) => JSON.stringify(e)).join(\"\\n\")\n);            \nres = await indexApi.bulk(body);\n```\n\n----------------------------------------\n\nTITLE: Constructing Search Query in TypeScript\nDESCRIPTION: Example of creating a search request in TypeScript with query string, MVA sorting, and score tracking using a simple object structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsearchRequest = {\n  index: 'test',\n  track_scores: true,\n  query: {\n    query_string: {'Test document'},\n  },\n  sort: { \"attr_mva\": { \"order\":\"desc\", \"mode\":\"max\" } },\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using Java\nDESCRIPTION: This Java code demonstrates how to insert a document with multi-value attributes (MVA) into a Manticore Search index using the Java API. The MVA is represented as an integer array in the document HashMap.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nnewdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){{    put(\"title\",\"Yellow bag\");\n    put(\"sizes\",new int[]{40,41,42,43});\n }};\nnewdoc.index(\"products\").id(0L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Performing Distance Calculation with GEODIST() in Manticore Search\nDESCRIPTION: This SQL query demonstrates how to use the GEODIST() function in Manticore Search to calculate distances between points. It shows sorting results by distance and limiting results to a specific radius.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Geo_search.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, GEODIST(40.7643929, -73.9997683, lat, lon, {in=degrees, out=miles}) AS distance FROM myindex WHERE MATCH('...') ORDER BY distance ASC, WEIGHT() DESC;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *,GEODIST(40.7643929, -73.9997683, lat,lon, {in=degrees, out=miles}) AS distance FROM myindex WHERE MATCH('...') AND distance <1000 ORDER BY WEIGHT(), DISTANCE ASC;\n```\n\n----------------------------------------\n\nTITLE: Date Range Faceting\nDESCRIPTION: Shows how to perform faceted search using date ranges with date math expressions. Demonstrates both SQL and JSON methods for creating date-based buckets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), DATE_RANGE(tm, {range_to='2017||+2M/M'},{range_from='2017||+2M/M',range_to='2017||+5M/M'},{range_from='2017||+5M/M'}) AS points FROM idx_dates GROUP BY points ORDER BY points ASC;\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n{\n  \"table\": \"idx_dates\",\n  \"size\": 0,\n  \"aggs\": {\n    \"points\": {\n      \"date_range\": {\n        \"field\": \"tm\",\n        \"keyed\": true,\n        \"ranges\": [\n          {\n            \"to\": \"2017||+2M/M\"\n          },\n          {\n            \"from\": \"2017||+2M/M\",\n            \"to\": \"2017||+4M/M\"\n          },\n          {\n            \"from\": \"2017||+4M/M\",\n            \"to\": \"2017||+5M/M\"\n          },\n          {\n            \"from\": \"2017||+5M/M\"\n          }\n        ]\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via Python\nDESCRIPTION: Creates a forum table with title and price fields using Python.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE forum(title text, price float)')\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (Java)\nDESCRIPTION: Removes a table from a replication cluster using Java client. The SQL command is executed through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"ALTER CLUSTER posts DROP weekly_index\");\n```\n\n----------------------------------------\n\nTITLE: Issuing Highlighted Match Search Request - ManticoreSearch TypeScript\nDESCRIPTION: This snippet performs an asynchronous highlighted search in TypeScript using a client SDK for the index 'test'. It matches terms 'Text 1' or 'Text 9' in all fields and enables highlighting with empty highlight settings (meaning all fields will be highlighted). Dependencies include an instance of an SDK client (searchApi). The request returns documents where the relevant term is highlighted using HTML <b> tags in the matching field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1|Text 9'\n    }\n  },\n  highlight: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in C#\nDESCRIPTION: This C# code creates a table 'products' with support for both non-continuous and continuous script languages using the Manticore Search C# client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) charset_table = 'non_cont' ngram_len = '1' ngram_chars = 'cont'\", true);\n```\n\n----------------------------------------\n\nTITLE: Using expressions in HTTP JSON Requests\nDESCRIPTION: A simplified alternative to script_fields for adding computed expressions to search results. This syntax allows direct mapping of expression names to their formulas without the nested structure of script_fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Expressions.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"test\",\n  \"query\": { \"match_all\": {} },\n  \"expressions\":\n  {\n\t  \"add_all\": \"( gid * 10 ) | crc32(title)\",\n      \"title_len\": \"crc32(title)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via SQL\nDESCRIPTION: Creates a real-time table named 'products' with text and float columns using SQL syntax with English stemming morphology.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) morphology='stem_en';\n```\n\n----------------------------------------\n\nTITLE: Using Java for Inserting Documents with Auto-ID\nDESCRIPTION: Java code example for inserting a document into a Manticore table with an auto-generated ID using Java's HashMap to structure the document data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nnewdoc = new InsertDocumentRequest();\nHashMap<String,Object> doc = new HashMap<String,Object>(){{\n    put(\"title\",\"Yellow bag\");\n }};\nnewdoc.index(\"products\").id(0L).setDoc(doc);\nsqlresult = indexApi.insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with TypeScript Client\nDESCRIPTION: TypeScript code to initialize and configure the Manticore Search TypeScript client library for connecting to a Manticore server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Configuration,\n  IndexApi,\n  SearchApi,\n  UtilsApi\n} from \"manticoresearch-ts\";\n...\nconst config = new Configuration({\n  basePath: 'http://localhost:9308',\n})\nconst indexApi = new IndexApi(config);\nconst searchApi = new SearchApi(config);\nconst utilsApi = new UtilsApi(config);\n```\n\n----------------------------------------\n\nTITLE: Executing CALL AUTOCOMPLETE in SQL with No Fuzzy Search\nDESCRIPTION: Example of using CALL AUTOCOMPLETE with fuzziness disabled to get exact word completion suggestions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Autocomplete.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL AUTOCOMPLETE('hello', 'comment', 0 as fuzziness);\n+-------+\n| query |\n+-------+\n| hello |\n+-------+\n```\n\n----------------------------------------\n\nTITLE: Joining SQL Tables with String JSON Attributes\nDESCRIPTION: Example of how to join tables using string values from JSON attributes in SQL syntax. When joining by a value from a JSON attribute, you must explicitly specify the value's type using the string() function.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... ON left_table.json_attr.string_id = string(right_table.json_attr.string_id)\n```\n\n----------------------------------------\n\nTITLE: Bulk Adding Documents via Javascript (Javascript)\nDESCRIPTION: This JavaScript snippet prepares a set of insert operations for ManticoreSearch as an array, then NDJSON-serializes and submits them through indexApi.bulk(). The method is asynchronous and awaited. Inputs: array of objects representing document insert actions; outputs: bulk insert API response. Requires a properly configured indexApi client and document field conformity.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nlet docs = [\n    {\"insert\": {\"table\" : \"products\", \"id\" : 3, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\", \"price\" : 19.85}}},\n    {\"insert\": {\"table\" : \"products\", \"id\" : 4, \"doc\" : {\"title\" : \"microfiber sheet set\", \"price\" : 19.99}}},\n    {\"insert\": {\"table\" : \"products\", \"id\" : 5, \"doc\" : {\"title\" : \"CPet Hair Remover Glove\", \"price\" : 7.99}}}\n];\nres =  await indexApi.bulk(docs.map(e=>JSON.stringify(e)).join('\\n'));\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Cluster Tables\nDESCRIPTION: Examples of inserting data into cluster tables using various programming languages and formats.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO posts:pq_title VALUES ( 3, 'test me' )\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert -d '\n{\n  \"cluster\":\"posts\",\n  \"table\":\"pq_title\",\n  \"id\": 3\n  \"doc\":\n  {\n    \"title\" : \"test me\"\n  }\n}'\n```\n\nLANGUAGE: php\nCODE:\n```\n$index->addDocuments([\n        3, ['title' => 'test me']\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via Javascript\nDESCRIPTION: Creates a forum table using Javascript with async/await syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE forum(title text, price float)');\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Difference with TIMEDIFF() in SQL\nDESCRIPTION: Executes the TIMEDIFF() function in SQL to calculate the difference between two timestamps. The result is returned as a string in the format 'hh:ii:ss'. Requires two timestamp arguments (start_time, end_time).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nselect timediff(1615787586, 1613787583);\n```\n\n----------------------------------------\n\nTITLE: Go Aggregation Query\nDESCRIPTION: Shows how to perform search aggregations in Go using the Manticore client. Sets up aggregations to group results by name and category fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_57\n\nLANGUAGE: go\nCODE:\n```\nquery := map[string]interface{} {}\nsearchRequest.SetQuery(query)\n\naggByName := manticoreclient.NewAggregation()\naggTerms := manticoreclient.NewAggregationTerms()\naggTerms.SetField(\"name\")\naggByName.SetTerms(aggTerms)\naggByName.SetSize(1)\naggByCat := manticoreclient.NewAggregation()\naggTerms.SetField(\"cat\")\naggByCat.SetTerms(aggTerms)\naggs := map[string]Aggregation{} { \"name_group\": aggByName, \"cat_group\": aggByCat }\nsearchRequest.SetAggs(aggs)\n\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Using KNN_DIST() to retrieve vector search distances in Manticore SQL\nDESCRIPTION: KNN_DIST() returns the distance from a KNN vector search operation. This function is used after performing a KNN search to retrieve the distance values between the query vector and matched documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Other_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select id, knn_dist() from test where knn ( image_vector, 5, (0.286569,-0.031816,0.066684,0.032926) ) and match('white') and id < 10;\n+------+------------+\n| id   | knn_dist() |\n+------+------------+\n|    2 | 0.81527930 |\n+------+------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Sorting via SQL in Manticore Search\nDESCRIPTION: Demonstrates the SQL syntax for sorting query results in Manticore Search. Supports sorting by attribute names, expression aliases, weight(), and random() functions. Limited to 5 columns in the sort clause.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... ORDER BY\n{attribute_name | expr_alias | weight() | random() } [ASC | DESC],\n...\n{attribute_name | expr_alias | weight() | random() } [ASC | DESC]\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect *, a + b alias from test order by alias desc;\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (JSON)\nDESCRIPTION: Adds an existing local table to a replication cluster using the JSON API. The command is sent as a POST request to the CLI endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nALTER CLUSTER click_query ADD clicks_daily_index\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (Python-asyncio)\nDESCRIPTION: Adds an existing local table to a replication cluster using Python asyncio client. The SQL command is executed asynchronously through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('ALTER CLUSTER click_query ADD clicks_daily_index')\n```\n\n----------------------------------------\n\nTITLE: Go Response for Highlight Request\nDESCRIPTION: Example response from a Go highlight request showing search results with document ID, score, source fields, and highlighted content snippet with HTML bold tags around the matched term.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_111\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Storage Engine\nDESCRIPTION: Settings to specify the storage engine type for tables, choosing between columnar and row-wise storage for attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\ncreate table ... engine='columnar';\ncreate table ... engine='rowwise';\n```\n\n----------------------------------------\n\nTITLE: Executing Faceted Search and Checking Optimization in SQL\nDESCRIPTION: This SQL snippet demonstrates how to perform a faceted search on multiple fields and verify if query optimization was applied using SHOW META. The query searches the 'facetdemo' table with facets on brand_id, price, and categories, followed by a check of the 'multiplier' meta value.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_58\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM facetdemo FACET brand_id FACET price FACET categories;\nSHOW META LIKE 'multiplier';\n```\n\n----------------------------------------\n\nTITLE: Configuring Real-Time Table in Manticore Search\nDESCRIPTION: Defines a real-time table 'products' with a text field 'title' and a float attribute 'coeff'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_67\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_float = coeff\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using C#\nDESCRIPTION: This C# code uses the Manticore Search API to execute an SQL statement that creates a distributed table named 'local_dist'. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE local_dist type='distributed' local='index1' local='index2'\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via Python Client\nDESCRIPTION: Initialize a connection to Manticore Search using the Python client library and set up API interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport manticoresearch\nconfig = manticoresearch.Configuration(\n    host = \"http://127.0.0.1:9308\"\n)\nclient =  manticoresearch.ApiClient(config)\nindexApi = manticoresearch.IndexApi(client)\nsearchApi = manticoresearch.searchApi(client)\nutilsApi = manticoresearch.UtilsApi(client)\n```\n\n----------------------------------------\n\nTITLE: Using CEIL Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns the smallest integer value greater than or equal to the provided numeric argument. It is typically used for rounding up floating point numbers. The function expects a numeric input, and its output data type is an integer.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCEIL(value)\n```\n\n----------------------------------------\n\nTITLE: ASCII Text Transformation Rules\nDESCRIPTION: A list of text conversion rules showing how input text should be standardized. Includes handling of company names (AT&T), military/historical terms, operating systems (OS/2, MS-DOS), common abbreviations (U.S.A. to USA), and special characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/gtests/libsphinxtest2.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAT&T      => AT&T\n   AT & T => AT & T  \nstandarten fuehrer => Standartenfuehrer\nstandarten   fuhrer  => Standartenfuehrer\nOS/2 => OS/2\nMs-Dos => MS-DOS\nMS DOS => MS-DOS\nfeat. => featuring\nU.S. => US\nU.S.A. => USA\nU.S.B. => USB\nU.S.D. => USD\nU.S.P. => USP\nU.S.A.F. => USAF\nlife:) => life:)\n; => ;\nтесттт => test\n```\n\n----------------------------------------\n\nTITLE: Searching in a Specific Field using SQL\nDESCRIPTION: Performs a search in the 'products' table, looking only in the 'title' field for the word 'first'. The @title syntax limits the search to that specific field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nselect * from products where match('@title first');\n```\n\n----------------------------------------\n\nTITLE: Composite Aggregation in JSON with Manticore Search\nDESCRIPTION: This JSON query shows how to perform a composite aggregation on multiple fields (category_id and release_year) using the Manticore Search JSON API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n    {\n    \"size\": 0,\n    \"table\": \"films\",\n    \"aggs\": {\n        \"cat_release\": {\n            \"composite\": {\n                \"size\":5,\n                \"sources\": [\n                    { \"category\": { \"terms\": { \"field\": \"category_id\" } } },\n                    { \"release year\": { \"terms\": { \"field\": \"release_year\" } } }\n                ]\n            }\n        }\n    }\n    }\n'\n```\n\n----------------------------------------\n\nTITLE: Creating Destination Table for Kafka Data\nDESCRIPTION: Creates a real-time table to store processed data from Kafka messages with defined schema structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE destination_kafka\n(id bigint, name text, short_name text, received_at text, size multi);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using Python with asyncio\nDESCRIPTION: This asynchronous Python code demonstrates how to insert a document with multi-value attributes (MVA) into a Manticore Search index using the Python API with asyncio. The MVA is represented as a list in the document dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nawait indexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\",\"sizes\":[40,41,42,43]}})\n```\n\n----------------------------------------\n\nTITLE: Executing Percolation Query with PHP\nDESCRIPTION: Performs a percolation query using PHP, specifying documents in an associative array. Utilizes a percolation client to search over the 'products' database.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$percolate = [\n    'table' => 'products',\n    'body' => [\n        'query' => [\n            'percolate' => [\n                'documents' => [\n                    ['title' => 'nice pair of shoes','color'=>'blue'],\n                    ['title' => 'beautiful bag']\n                ]\n            ]\n        ]\n    ]\n];\n$client->pq()->search($percolate);\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with Python-asyncio\nDESCRIPTION: Shows how to perform asynchronous percolate queries using Python's asyncio.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nawait searchApi.percolate('products',{\"query\":{\"percolate\":{\"document\":{\"title\":\"What a nice bag\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using Python Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Python client library's `sql` method (`utilsApi`). This creates the 'products' table with the `index_field_lengths` option set to '1'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) index_field_lengths = \\'1\\'')\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with JavaScript\nDESCRIPTION: JavaScript implementation using async/await to search for 'one|robots' in the 'books' table and highlight matches in 'title' and 'content' fields, with a limit of 50 for content highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":{\"title\":{},\"content\":{\"limit\":50}}}});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type using JSON API\nDESCRIPTION: Demonstrates creating a table with a multi64 field using the JSON API through a POST request. This allows storing variable-length lists of 64-bit signed integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_88\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, values multi64)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (C#)\nDESCRIPTION: C# code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_12\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)\");\n```\n\n----------------------------------------\n\nTITLE: Using PARAGRAPH Operator in Manticore Search SQL\nDESCRIPTION: Demonstrates the PARAGRAPH operator, which matches documents where all specified terms are within the same paragraph. Requires index_sp to be enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\n\"Bill Gates\" PARAGRAPH \"Steve Jobs\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (JSON)\nDESCRIPTION: This JSON request creates a table named 'products' with text and float columns, enabling keyword expansion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) expand_keywords = '1'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in PHP\nDESCRIPTION: This PHP code creates a table 'products' with support for both non-continuous and continuous script languages using the Manticore Search PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'charset_table' => 'non_cont',\n             'ngram_len' => '1',\n             'ngram_chars' => 'cont'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using PHP Client\nDESCRIPTION: Uses the Manticore PHP client library to create an index named 'products'. It defines the schema and sets the `index_field_lengths` option to '1' during index creation, enabling the storage of field lengths.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'index_field_lengths' => '1'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using Python\nDESCRIPTION: This Python code shows how to insert a document with multi-value attributes (MVA) into a Manticore Search index using the Python API. The MVA is represented as a list in the document dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nindexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\",\"sizes\":[40,41,42,43]}})\n```\n\n----------------------------------------\n\nTITLE: Profiling Queries in HTTP JSON Protocol\nDESCRIPTION: Example of how to enable query profiling in the HTTP JSON protocol by setting \"profile\":true in the request. This will include the query tree structure in the response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test\",\n  \"profile\":true,\n  \"query\":\n  {\n    \"match_phrase\": { \"_all\" : \"had grown quite\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (Python-asyncio)\nDESCRIPTION: Asynchronous Python code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)')\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using PHP in Manticore Search\nDESCRIPTION: This PHP example shows how to insert a document with a JSON field into a Manticore Search index. The JSON is treated as a string and needs to be properly escaped.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$index->addDocument(\n  ['title' => 'shoes', 'meta' => '{\"size\": 41, \"color\": \"red\"}'],\n  1\n);\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results in TypeScript\nDESCRIPTION: This snippet shows how to perform a search with highlighting in TypeScript using the Manticore Search API. It sets up a search query with a match clause and enables highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Running Searchd Server Command\nDESCRIPTION: Base command for starting the Manticore searchd server with optional parameters\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/References.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsearchd [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using Go in Manticore Search\nDESCRIPTION: Uses the Go client to find percolate query rules that match a document. The example shows how to create a query map, construct a percolate request, and execute it against the specified index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nquery := map[string]interface{} {\"title\": \"what a nice bag\"}\npercolateRequestQuery := manticoreclient.NewPercolateQuery(query)\npercolateRequest := manticoreclient.NewPercolateRequest(percolateRequestQuery)\nres, _, _ := apiClient.SearchAPI.Percolate(context.Background(), \"test_pq\").PercolateRequest(*percolateRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Calculating Exponent with EXP Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns Euler's number e (2.718...) raised to the power of the argument, useful for exponential computations. The function requires a numeric argument and outputs a floating point value. Passing a non-numeric argument results in an error.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nEXP(value)\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via C#\nDESCRIPTION: Creates a forum table using C# client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_7\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE forum(title text, price float)\");\n```\n\n----------------------------------------\n\nTITLE: Merging Tables with Range Filter in Manticore\nDESCRIPTION: Shows how to merge tables while applying a range filter to the destination table. This can be used to exclude certain documents during the merge process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --merge main delta --merge-dst-range deleted 0 0\n```\n\n----------------------------------------\n\nTITLE: Inserting Multi-Value Attributes (MVA) using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to insert a document with multi-value attributes (MVA) into a Manticore Search index using the PHP API. The MVA is represented as an array in the document data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$index->addDocument(\n  ['title' => 'shoes', 'sizes' => [40,41,42,43]],\n  1\n);\n```\n\n----------------------------------------\n\nTITLE: CALL SNIPPETS Example in Manticore Search SQL\nDESCRIPTION: Shows an example of using CALL SNIPPETS to generate highlighted snippets from text strings. The example provides two text strings, searches for 'is text', and configures the surrounding context and length limit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_127\n\nLANGUAGE: sql\nCODE:\n```\nCALL SNIPPETS(('this is my document text','this is my another text'), 'forum', 'is text', 5 AS around, 200 AS limit);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with String Field that is Both Attribute and Indexed in INI\nDESCRIPTION: Defines a real-time table configuration in INI format with a 'title' field that is both a string attribute and indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_53\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\trt_attr_string = title\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via Python-asyncio Client\nDESCRIPTION: Initialize an asynchronous connection to Manticore Search using the Python client with asyncio support.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport manticoresearch\nconfig = manticoresearch.Configuration(\n    host = \"http://127.0.0.1:9308\"\n)\nasync with manticoresearch.ApiClient(config) as client:\n    indexApi = manticoresearch.IndexApi(client)\n    searchApi = manticoresearch.searchApi(client)\n    utilsApi = manticoresearch.UtilsApi(client)\n```\n\n----------------------------------------\n\nTITLE: Formatting Timestamp with DATE_FORMAT() in SQL\nDESCRIPTION: Executes the DATE_FORMAT() function in SQL to format a given timestamp according to a specified format string. The format string uses specifiers similar to the strftime function (e.g., %Y for year, %T for time HH:MM:SS). Requires a timestamp argument and a format string argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DATE_FORMAT(NOW(), 'year %Y and time %T');\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in Python-asyncio\nDESCRIPTION: Uses the Python asyncio API to create a table with a 'title' text field and a 'keys' string attribute. This is an asynchronous version of the Python call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, keys string)')\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via Go\nDESCRIPTION: Creates a forum table using Go client with context.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nutilsAPI.Sql(context.Background()).Body(\"CREATE TABLE forum(title text, price float)\").Execute()\n```\n\n----------------------------------------\n\nTITLE: Sine Calculation with SIN Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Computes the sine of a numeric argument (in radians), returning a floating point value. Used for trigonometric expressions, it requires the input to be in radians. Non-numeric or degree-based input can cause incorrect results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nSIN(angle)\n```\n\n----------------------------------------\n\nTITLE: JSON Search Request with Highlighting\nDESCRIPTION: Shows how to structure a JSON search request with highlighting configuration. Includes field specification and no_match_size parameter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_67\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"*\": \"one|robots\" } },\n  \"highlight\":\n  {\n    \"fields\": [ \"content\", \"title\" ],\n    \"no_match_size\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in JavaScript\nDESCRIPTION: Shows how to create a table with bigram indexing using the JavaScript client. It executes an SQL command asynchronously to set up the table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) bigram_freq_words = \\'the, a, you, i\\' bigram_index = \\'both_freq\\'');\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown Timeout in Manticore Search\nDESCRIPTION: Sets the maximum waiting time for searchd --stopwait command. Controls how long the server waits to finish tasks before stopping.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_60\n\nLANGUAGE: ini\nCODE:\n```\nshutdown_timeout = 3m # wait for up to 3 minutes\n```\n\n----------------------------------------\n\nTITLE: Escaping Single Quote in MySQL Command Line for Manticore Search\nDESCRIPTION: Demonstrates how to escape a single quote in a Manticore Search query using MySQL command line. A single backslash is used to escape the quote.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Escaping.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM your_index WHERE MATCH('l\\'italiano');\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in Python-asyncio\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using Python with asyncio. The method requires specifying the cluster name, table name, and document ID to be deleted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nindexApi.delete({\"cluster\":\"cluster\",\"table\" : \"test\", \"id\" : 1})\n```\n\n----------------------------------------\n\nTITLE: Committing Manual Transaction in Manticore Search\nDESCRIPTION: Demonstrates how to make changes visible by committing a transaction when autocommit is disabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncommit;\nQuery OK, 0 rows affected (0.00 sec)\n\nselect * from indexrt where id=4;\n+------+------------+-----------+-------+\n| id   | channel_id | published | title |\n+------+------------+-----------+-------+\n|    4 |          1 |         1 | bb    |\n+------+------------+-----------+-------+\n1 row in set (0.00 sec)\n\nselect * from indexrt where id=3;\n+------+------------+-----------+-------+\n| id   | channel_id | published | title |\n+------+------------+-----------+-------+\n|    3 |          1 |         1 | bb    |\n+------+------------+-----------+-------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Listing Tables with SHOW TABLES Command\nDESCRIPTION: Shows how to list all tables in Manticore Search with their types using the SHOW TABLES command. Tables can be of type local, distributed, rt, percolate, or template.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Listing_tables.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLES;\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries in PHP\nDESCRIPTION: Shows how to use the PHP client to perform percolate query document matching. The PHP implementation uses the search method with percolate configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\n$percolate = [\n    'table' => 'products',\n    'body' => [\n        'query' => [\n            'percolate' => [\n                'documents' => [\n                    ['title' => 'nice pair of shoes','color'=>'blue'],\n                    ['title' => 'beautiful bag']\n                ]\n            ]\n        ]\n    ]\n];\n$client->pq()->search($percolate);\n```\n\n----------------------------------------\n\nTITLE: Creating a table with morphology settings in Manticore Search\nDESCRIPTION: This snippet demonstrates how to create a table with specific morphology settings, including skipping morphology for certain fields and applying English stemming.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Morphology.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) morphology_skip_fields = 'name' morphology = 'stem_en'\", true);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) morphology_skip_fields = 'name' morphology = 'stem_en'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  morphology_skip_fields = name\n  morphology = stem_en\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_field = name\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithm Base 10 with LOG10 in ManticoreSearch SQL - SQL\nDESCRIPTION: Computes the common logarithm (base 10) of the argument. The input must be a positive numeric value, and the result is a floating point number. Non-positive inputs yield errors or undefined results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nLOG10(value)\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with Rust in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in Rust. The method requires formatting multiple JSON operations as a newline-delimited string.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_41\n\nLANGUAGE: Rust\nCODE:\n```\nlet bulk_body = r#\"{ \"delete\" : { \"table\" : \"test\", \"id\": 1 } }\n    { \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } }\"         \n\"#;\nindex_api.bulk(bulk_body).await;\n```\n\n----------------------------------------\n\nTITLE: Querying Replicated Data in Manticore Cluster\nDESCRIPTION: SQL query to verify replicated data across Manticore cluster nodes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [(none)]> select * from testrt;\n+---------------------+------+-------+---------+\n| id                  | gid  | title | content |\n+---------------------+------+-------+---------+\n| 3891565839006040065 |    1 | hello | world   |\n+---------------------+------+-------+---------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in Rust\nDESCRIPTION: Uses the Rust API to create a table with a 'title' text field and a 'keys' string attribute. String attributes are useful for metadata that doesn't need full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_42\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, keys string)\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Profiling TypeScript Search Query in Manticore Search\nDESCRIPTION: This TypeScript snippet shows how to enable profiling for a search query using the TypeScript API. It sets the profile parameter in the search request object.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: { query_string: 'Text' }, \n  _source: { excludes: ['*'] },\n  limit: 1,\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Timestamp Fields\nDESCRIPTION: Demonstrates creating a table with timestamp fields for storing Unix timestamps with date/time function support.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_65\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, date timestamp);\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_timestamp = date\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search with Highlighting in Java\nDESCRIPTION: This Java code snippet shows how to set up a search request with highlighting using the Manticore Search API. It includes a match query and highlight settings for specific fields, ordering the highlights by score.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_76\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{    put(\"*\",\"one|robots\");        \n}});\nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{    put(\"fields\",new String[] {\"content\",\"title\"});    put(\"order\",\"score\");\n}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Float Fields\nDESCRIPTION: Shows how to create a table with floating-point fields using 32-bit IEEE 754 single precision format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_66\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, coeff float);\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_float = coeff\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Document with Array Field and Searching in C#\nDESCRIPTION: Shows how to add a document with a multi-value field to an index and perform a search in C#. The example demonstrates using Dictionary and List objects to structure the document data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_85\n\nLANGUAGE: clike\nCODE:\n```\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"first\");\ndoc.Add(\"product_codes\", new List<Object> {4,2,1,3});\nInsertDocumentRequest newdoc = new InsertDocumentRequest(index: \"products\", id: 1, doc: doc);\nvar sqlresult = indexApi.Insert(newdoc);\nobject query =  new { match_all=null };\nvar searchRequest = new SearchRequest(\"products\", query);\nvar searchResponse = searchApi.Search(searchRequest);\nConsole.WriteLine(searchResponse.ToString())\n```\n\nLANGUAGE: clike\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=1, _score=1, _source={product_codes=[1, 2, 3, 4], title=first}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query in C#\nDESCRIPTION: Creates a dictionary of documents and performs a percolate query against the 'products' index using Manticore Search C# client\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nvar doc2 = new Dictionary<string, Object>();\ndoc2.Add(\"title\",\"beautiful bag\");\nvar docs = new List<Object> {doc1, doc2};\nDictionary<string, Object> percolateDoc = new Dictionary<string, Object> {{ \"documents\", docs }}; \nDictionary<string, Object> query = new Dictionary<string, Object> {{ \"percolate\", percolateDoc }}; \nPercolateRequest percolateRequest = new PercolateRequest(query=query);\nsearchApi.Percolate(\"products\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table for Spell Correction Examples\nDESCRIPTION: Creates a sample table 'products' with text data and enables infix indexing for demonstration of spell correction functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table products(title text) min_infix_len='2';\ninsert into products values (0,'Crossbody Bag with Tassel'), (0,'microfiber sheet set'), (0,'Pet Hair Remover Glove');\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (Rust)\nDESCRIPTION: Removes a table from a replication cluster using Rust client. The SQL command is executed asynchronously through the utils_api.sql() method with a verbose flag.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"ALTER CLUSTER posts DROP weekly_index\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Table Truncation in Python-asyncio\nDESCRIPTION: Example of truncating a table using Python with asyncio in Manticore Search. Uses the await keyword with the sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('TRUNCATE TABLE products')\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in JSON\nDESCRIPTION: This JSON request creates a table 'products' with support for both non-continuous and continuous script languages using Manticore Search's CLI.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) charset_table = 'non_cont' ngram_len = '1' ngram_chars = 'cont'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with RegExp Filter in Python\nDESCRIPTION: Creates a table named 'products' with text and float columns using regexp_filter to map color terms to a normalized form. Uses synchronous Python API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_125\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) regexp_filter = \\'(blue|red) => color\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in Python\nDESCRIPTION: This Python code creates a table 'products' with support for both non-continuous and continuous script languages using the Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) charset_table = \\'non_cont\\' ngram_len = \\'1\\' ngram_chars = \\'cont\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (Rust)\nDESCRIPTION: This Rust code creates a table named 'products' with text and float columns, enabling keyword expansion using the Manticore Search Rust client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) expand_keywords = '1'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Attributes via JSON API\nDESCRIPTION: Example of updating multiple attributes (price, coeff, tags1, tags2) for documents matching certain conditions in the 'products' table using the JSON API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"products\",\n  \"doc\":\n  {\n    \"price\":100000000000,\n    \"coeff\":3465.23,\n    \"tags1\":[3,6,4],\n    \"tags2\":[]\n  },\n  \"query\":\n  {\n\t\"match\": { \"*\": \"phone\" },\n\t\"equals\": { \"enabled\": 1 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manticore Search Table Configuration with RegExp Filters\nDESCRIPTION: Configuration example showing table definition with multiple regexp_filter rules for transforming inch measurements and color terms during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_131\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  # index '13\"' as '13inch'\n  regexp_filter = \\b(\\d+)\" => \\1inch\n\n  # index 'blue' or 'red' as 'color'\n  regexp_filter = (blue|red) => color\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents Using C# and Auto ID Feature\nDESCRIPTION: This C# code illustrates how to insert a document into a Manticore table with auto-generated IDs using C#'s Dictionary for organizing data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_19\n\nLANGUAGE: clike\nCODE:\n```\nDictionary<string, Object> doc = new Dictionary<string, Object>();\ndoc.Add(\"title\", \"Yellow bag\");\nInsertDocumentRequest newdoc = new InsertDocumentRequest(index: \"products\", id: 0, doc: doc);\nvar sqlresult = indexApi.Insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: JSON Query Plan Output Format in Manticore Search\nDESCRIPTION: Shows the JSON response format of a query plan with verbosity level 3, including the hierarchical structure of the query tree with OR/AND operations and keyword details.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 4453,\n    \"total_relation\": \"eq\",\n    \"hits\": []\n  },\n  \"plan\": {\n    \"query\": {\n      \"type\": \"OR\",\n      \"description\": \"OR( AND(KEYWORD(dog, querypos=1)),  AND(KEYWORD(cat, querypos=2)))\",\n      \"children\": [\n        {\n          \"type\": \"AND\",\n          \"description\": \"AND(KEYWORD(dog, querypos=1))\",\n          \"children\": [\n            {\n              \"type\": \"KEYWORD\",\n              \"word\": \"dog\",\n              \"querypos\": 1\n            }\n          ]\n        },\n        {\n          \"type\": \"AND\",\n          \"description\": \"AND(KEYWORD(cat, querypos=2))\",\n          \"children\": [\n            {\n              \"type\": \"KEYWORD\",\n              \"word\": \"cat\",\n              \"querypos\": 2\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (Python)\nDESCRIPTION: Python code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)')\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in Python-asyncio\nDESCRIPTION: Uses the Python asyncio API to create a table with a text field that is only indexed. This is an asynchronous version of the Python call.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text indexed)')\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with Go Client\nDESCRIPTION: Shows how to implement highlighting in a search query using Go. The code sets up a match clause to search for 'Text 1' across all fields and configures highlighting for the results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with SQL in Manticore Search\nDESCRIPTION: This SQL snippet demonstrates how to use the CALL PQ function to perform a percolate query on the 'pq_d2' index with two documents. It returns the matching query IDs and the number of documents matched for each query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_82\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ ('pq_d2', ('{{\"title\":\"angry test\", \"gid\":3 }}', '{{\"title\":\"filter test doc2\", \"gid\":13}}'), 1 AS docs);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via C# Client\nDESCRIPTION: Initialize a connection to Manticore Search using the C# client library and set up API interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_7\n\nLANGUAGE: clike\nCODE:\n```\nusing ManticoreSearch.Client;\nusing ManticoreSearch.Api;\nusing ManticoreSearch.Model;\n\nstring basePath = \"http://127.0.0.1:9308\";\nIndexApi indexApi = new IndexApi(basePath);\nSearchApi searchApi = new UtilsApi(basePath);\nUtilsApi utilsApi = new UtilsApi(basePath);\n```\n\n----------------------------------------\n\nTITLE: SphinxQL Log Format Examples\nDESCRIPTION: Examples of log entries in sphinxql format showing SQL queries, JSON requests, and performance metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Query_logging.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n/* Sun Apr 28 12:38:02.808 2024 conn 2 (127.0.0.1:53228) real 0.000 wall 0.000 found 0 */ SELECT * FROM test WHERE MATCH('test') OPTION ranker=proximity;\n/* Sun Apr 28 12:38:05.585 2024 conn 2 (127.0.0.1:53228) real 0.001 wall 0.001 found 0 */ SELECT * FROM test WHERE MATCH('test') GROUP BY channel_id OPTION ranker=proximity;\n/* Sun Apr 28 12:40:57.366 2024 conn 4 (127.0.0.1:53256) real 0.000 wall 0.000 found 0 */  /*{\n    \"table\" : \"test\",\n    \"query\":\n    {\n        \"match\":\n        {\n            \"*\" : \"test\"\n        }\n    },\n    \"_source\": [\"f\"],\n    \"limit\": 30\n} */\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with JavaScript in Manticore Search\nDESCRIPTION: Demonstrates how to perform a search with highlighting using the JavaScript client. The code searches for 'and first' in the 'content' field with highlighting options set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"content\":\"and first\"}},\"highlight\":{\"fields\":{\"content\":{\"limit\":50}},\"limits_per_field\":false}});\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Word Forms via HTTP JSON\nDESCRIPTION: HTTP POST request for creating a table with word forms configuration using JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) wordforms = '/var/lib/manticore/wordforms.txt' wordforms = '/var/lib/manticore/alternateforms.txt' wordforms = '/var/lib/manticore/dict*.txt'\"\n```\n\n----------------------------------------\n\nTITLE: SQL BACKUP with Options Example\nDESCRIPTION: Example showing how to run an asynchronous backup with compression enabled\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nBACKUP OPTION async = yes, compress = yes TO /tmp\n```\n\n----------------------------------------\n\nTITLE: Python Async Faceted Search\nDESCRIPTION: Demonstrates asynchronous faceted search implementation using Python's asyncio.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"limit\":5,\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price\",\"size\":1,}},\"group_brand_id\":{\"terms\":{\"field\":\"brand_id\",\"size\":3}}}})\n```\n\n----------------------------------------\n\nTITLE: Escaping JSON Node Names in SQL for Manticore Search\nDESCRIPTION: Illustrates how to escape special characters in JSON node names when querying Manticore Search using SQL. Backticks are used to enclose node names containing special characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Escaping.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from t where json.`a=b`=234;\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from t where json.`a:b`=123;\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Load Balancing Strategy\nDESCRIPTION: Sets up simple random distribution among mirrors with equal selection probabilities.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Load_balancing.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nha_strategy = random\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum in Arrays with LEAST Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Identifies the smallest value in a JSON array or MVA argument. Used with array-based or multi-valued attributes and returns the minimum numeric or comparable element. Only applicable to array or MVA inputs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nLEAST(attr_json.some_array)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with Go Client\nDESCRIPTION: Go code to initialize and configure the Manticore Search Go client library for connecting to a Manticore server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\tmanticoreclient \"github.com/manticoresoftware/manticoresearch-go\"\n)\n...\nconfiguration := manticoreclient.NewConfiguration()\nconfiguration.Servers[0].URL = \"http://localhost:9308\"\napiClient := manticoreclient.NewAPIClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Viewing Node Status in MySQL Client for Manticore\nDESCRIPTION: The 'status' command in MySQL client displays high-level information about your Manticore node, including version, SSL status, connection details, uptime, thread count, job queue metrics, and performance statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql> status\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Updates via HTTP JSON in Manticore Search\nDESCRIPTION: This example demonstrates how to perform multiple update operations in a single call using the /bulk endpoint. It updates the 'price' field for two documents in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nPOST /bulk\n\n{ \"update\" : { \"table\" : \"products\", \"id\" : 1, \"doc\": { \"price\" : 10 } } }\n{ \"update\" : { \"table\" : \"products\", \"id\" : 2, \"doc\": { \"price\" : 20 } } }\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with SQL\nDESCRIPTION: Shows how to match PQ rules against a document using SQL syntax. Demonstrates both JSON and plain text document formats using the CALL PQ function.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCALL PQ('products', 'Beautiful shoes', 0 as docs_json);\n\nCALL PQ('products', 'What a nice bag', 0 as docs_json);\nCALL PQ('products', '{\"title\": \"What a nice bag\"}');\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length in Manticoresearch (SQL)\nDESCRIPTION: Via SQL, this example creates a Manticoresearch table, setting the ngram_len for indexing, which aids the retrieval in continuous-script languages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_48\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\n```\n\n----------------------------------------\n\nTITLE: Querying Session Variable Value via SHOW SESSION - SQL\nDESCRIPTION: Shows how to retrieve the value of a specific session variable, e.g., 'autocommit', using the show session variables like 'autocommit'; statement. This command restricts the scope to session-level (as opposed to global) variables, allowing users to check or troubleshoot configuration values relevant only to the current session. The output is a table with the variable name and its session-specific value.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_VARIABLES.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> show session variables like 'autocommit';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| autocommit    | 0     |\n+---------------+-------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with Java in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in Java. The method requires formatting multiple JSON operations as a newline-delimited string.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_37\n\nLANGUAGE: Java\nCODE:\n```\nString   body = \"{ \"delete\" : { \"table\" : \"test\", \"id\": 1 } } \"+\"\\n\"+\n    \"{ \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } }\"+\"\\n\";         \nindexApi.bulk(body);\n```\n\n----------------------------------------\n\nTITLE: Formula Expressions for Built-in Rankers in Manticore Search\nDESCRIPTION: Lists the formula expressions that can be used to emulate Manticore's built-in rankers using the expression-based ranker. These formulas provide transparency into how each ranker calculates relevance scores.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n* proximity_bm25 (default ranker) = `sum(lcs*user_weight)*1000+bm25`\n* bm25 = `sum(user_weight)*1000+bm25`\n* none = `1`\n* wordcount = `sum(hit_count*user_weight)`\n* proximity = `sum(lcs*user_weight)`\n* matchany = `sum((word_count+(lcs-1)*max_lcs)*user_weight)`\n* fieldmask = `field_mask`\n* sph04 = `sum((4*lcs+2*(min_hit_pos==1)+exact_hit)*user_weight)*1000+bm25`\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (Rust)\nDESCRIPTION: Rust code to create a table with a JSON field that has a secondary index in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, j json secondary_index='1')\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in Python\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using Python client in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('TRUNCATE TABLE products WITH RECONFIGURE')\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (C#)\nDESCRIPTION: Removes a table from a replication cluster using C# client. The SQL command is executed through the utilsApi.Sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_16\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"ALTER CLUSTER posts DROP weekly_index\");\n```\n\n----------------------------------------\n\nTITLE: Querying FEDERATED Table to Search Manticore Index\nDESCRIPTION: SQL query to search the Manticore index through the FEDERATED table. The Manticore query is passed as a string in the 'query' column of the WHERE clause.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/FEDERATED.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM t1 WHERE query='SELECT * FROM movies WHERE MATCH (\\'pie\\')';\n```\n\n----------------------------------------\n\nTITLE: Java Aggregation Example with Manticore Search\nDESCRIPTION: This Java code snippet sets up and executes an aggregation on the 'meta.color' field using Manticore Search's Java API. Requires the Manticore Search Java client library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nHashMap<String,Object> aggs = new HashMap<String,Object>(){{\n    put(\"color\", new HashMap<String,Object>(){{\n        put(\"terms\", new HashMap<String,Object>(){{\n            put(\"field\",\"meta.color\");\n            put(\"size\",100);\n        }});\n    }});\n}};\n\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"products\");        \nsearchRequest.setLimit(0);\nquery = new HashMap<String,Object>();\nquery.put(\"match_all\",null);\nsearchRequest.setQuery(query);\nsearchRequest.setAggs(aggs);\nsearchResponse = searchApi.search(searchRequest);\n```\n\nLANGUAGE: java\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    aggregations: {color={buckets=[{key=green, doc_count=1}, {key=red, doc_count=2}]}}\n    hits: class SearchResponseHits {\n        maxScore: null\n        total: 3\n        hits: []\n    }\n    profile: null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Search Options and Match Weights in Joins\nDESCRIPTION: Shows how to specify field weights for full-text queries on joined tables using both SQL and JSON formats. Includes weight retrieval syntax and custom field weight configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT product, customers.email, customers.name, customers.address, customers.weight()\nFROM orders\nINNER JOIN customers\nON customers.id = orders.customer_id\nWHERE MATCH('maple', customers)\nOPTION(customers) field_weights=(address=1500);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"orders\",\n  \"options\": {\n    \"customers\": {\n      \"field_weights\": {\n        \"address\": 1500\n      }\n    }\n  },\n  \"join\": [\n    {\n      \"type\": \"inner\", \n      \"table\": \"customers\",\n      \"query\": {\n        \"query_string\": \"maple\"\n      },\n      \"on\": [\n        {\n          \"left\": {\n            \"table\": \"orders\",\n            \"field\": \"customer_id\"\n          },\n          \"operator\": \"eq\",\n          \"right\": {\n            \"table\": \"customers\",\n            \"field\": \"id\"\n          }\n        }\n      ]\n    }\n  ],\n  \"_source\": [\"product\", \"customers.email\", \"customers.name\", \"customers.address\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in Java\nDESCRIPTION: Uses the Java API to create a table with a text field that is only indexed. The field will be available for full-text searching but not stored for retrieval.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text indexed)\");\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Binary Log Path in Searchd Configuration\nDESCRIPTION: Configuration example demonstrating how to set a custom path for binary logs using the binlog_path directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...    \n    binlog_path = /var/data\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in PHP\nDESCRIPTION: This snippet creates a 'products' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$index = [\n    'table' => 'products',\n    'body' => [\n        'columns' => [\n            'title' => ['type' => 'text'],\n            'color' => ['type' => 'string']\n        ],\n        'settings' => [\n            'type' => 'pq'\n        ]\n    ]\n];\n$client->indices()->create($index);\n\n$query = [\n    'table' => 'products',\n    'body' => [ 'query'=>['match'=>['title'=>'bag']]]\n];\n$client->pq()->doc($query);\n$query = [\n    'table' => 'products',\n    'body' => [ 'query'=>['match'=>['title'=>'shoes']],'filters'=>\"color='red'\"]\n];\n$client->pq()->doc($query);\n\n\n$query = [\n    'table' => 'products',\n    'body' => [ 'query'=>['match'=>['title'=>'shoes']],'filters'=>\"color IN ('blue', 'green')\"]\n];\n$client->pq()->doc($query);\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using PHP Client\nDESCRIPTION: Uses the Manticore PHP client library to create an index named 'products'. It defines the schema with 'title' (text) and 'price' (float) fields and sets the `hitless_words` option to 'all' during index creation, disabling positional information storage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_91\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'hitless_words' => 'all'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW TABLE SETTINGS Command in SQL\nDESCRIPTION: The `SHOW TABLE SETTINGS` SQL command is used to display settings for a specific table or table chunk with syntax `SHOW TABLE table_name[.N | CHUNK N] SETTINGS`. The output is structured similarly to the `--dumpconfig` option of the indextool and provides comprehensive details about table settings like tokenizer and dictionary options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_SETTINGS.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE forum SETTINGS;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+---------------+-----------------------------------------------------------------------------------------------------------+\n| Variable_name | Value                                                                                                     |\n+---------------+-----------------------------------------------------------------------------------------------------------+\n| settings      | min_prefix_len = 3\ncharset_table = 0..9, A..Z->a..z, _, -, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F |\n+---------------+-----------------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE forum CHUNK 0 SETTINGS;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+---------------+-----------------------------------------------------------------------------------------------------------+\n| Variable_name | Value                                                                                                     |\n+---------------+-----------------------------------------------------------------------------------------------------------+\n| settings      | min_prefix_len = 3\ncharset_table = 0..9, A..Z->a..z, _, -, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F |\n+---------------+-----------------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search using SQL raw mode\nDESCRIPTION: Demonstrates how to use the /sql endpoint in raw mode to send SQL queries and receive JSON responses. This mode allows for sending any valid SQL queries, including multi-queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPOST /sql?mode=raw\ndesc test\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"columns\": [\n      {\n        \"Field\": {\n          \"type\": \"string\"\n        }\n      },\n      {\n        \"Type\": {\n          \"type\": \"string\"\n        }\n      },\n      {\n        \"Properties\": {\n          \"type\": \"string\"\n        }\n      }\n    ],\n    \"data\": [\n      {\n        \"Field\": \"id\",\n        \"Type\": \"bigint\",\n        \"Properties\": \"\"\n      },\n      {\n        \"Field\": \"title\",\n        \"Type\": \"text\",\n        \"Properties\": \"indexed\"\n      },\n      {\n        \"Field\": \"gid\",\n        \"Type\": \"uint\",\n        \"Properties\": \"\"\n      },\n      {\n        \"Field\": \"title\",\n        \"Type\": \"string\",\n        \"Properties\": \"\"\n      },\n      {\n        \"Field\": \"j\",\n        \"Type\": \"json\",\n        \"Properties\": \"\"\n      },\n      {\n        \"Field\": \"new1\",\n        \"Type\": \"uint\",\n        \"Properties\": \"\"\n      }\n    ],\n    \"total\": 6,\n    \"error\": \"\",\n    \"warning\": \"\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in Go\nDESCRIPTION: This snippet creates a 'test_pq' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search Go client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"create table test_pq(title text, color string) type='pq'\").Execute()\n\nindexDoc := map[string]interface{} {\"query\": \"@title bag\"}\nindexReq := manticoreclient.NewInsertDocumentRequest(\"test_pq\", indexDoc)\napiClient.IndexAPI.Insert(context.Background()).InsertDocumentRequest(*indexReq).Execute();\n\nindexDoc = map[string]interface{} {\"query\": \"@title shoes\", \"filters\": \"color='red'\"}\nindexReq = manticoreclient.NewInsertDocumentRequest(\"test_pq\", indexDoc)\napiClient.IndexAPI.Insert(context.Background()).InsertDocumentRequest(*indexReq).Execute();\n\nindexDoc = map[string]interface{} {\"query\": \"@title shoes\", \"filters\": \"color IN ('blue', 'green')\"}\nindexReq = manticoreclient.NewInsertDocumentRequest(\"test_pq\", indexDoc)\napiClient.IndexAPI.Insert(context.Background()).InsertDocumentRequest(*indexReq).Execute();\n```\n\n----------------------------------------\n\nTITLE: Interpreting Percolation Java Results\nDESCRIPTION: Outputs the search responses from Java-based percolation queries, detailing matched documents and their respective query results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 2\n        maxScore: 1\n        hits: [{_index=products, _type=doc, _id=2811045522851234133, _score=1, _source={query={ql=@title bag}}, fields={_percolator_document_slot=[2]}}, {_index=products, _type=doc, _id=2811045522851234135, _score=1, _source={query={ql=@title shoes}}, fields={_percolator_document_slot=[1]}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Aggregations with TypeScript and Manticore\nDESCRIPTION: This TypeScript snippet showcases querying the Manticore Search API for aggregation by 'json_field.year'. Requires Node.js environment and Manticore TypeScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  aggs: {\n    json_agg: {\n      terms: { field: \"json_field.year\", size: 1 }\n    }\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"aggregations\":\n\t{\n\t\t\"json_agg\":\n\t\t{\n\t\t\t\"buckets\":\n\t\t\t[{\n\t\t\t\t\"key\":2000,\n\t\t\t\t\"doc_count\":2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\":2001,\n\t\t\t\t\"doc_count\":2\n\t\t\t}]\n\t\t}\n\t},\n\t\"hits\":\n\t{\n\t\t\"total\":4,\n\t\t\"hits\":[]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting with SQL in Manticore Search\nDESCRIPTION: This snippet shows how to use the HIGHLIGHT() function in SQL to retrieve highlighted text fragments from documents containing matching keywords.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT HIGHLIGHT() FROM books WHERE MATCH('try');\n```\n\n----------------------------------------\n\nTITLE: Terminating Queries Using KILL in SQL\nDESCRIPTION: This snippet demonstrates the core syntax required to terminate a running query by supplying its query ID. The KILL command works with supported SQL environments (such as ManticoreSearch or compatible MySQL tools). The user must supply the correct <query id>, which can be obtained through relevant 'SHOW QUERIES' management commands.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/KILL.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nKILL <query id>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Table with RegExp Filter in Rust\nDESCRIPTION: Creates a table named 'products' with text and float columns using regexp_filter to map color terms. Uses asynchronous Rust API with Option<bool> parameter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_130\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) regexp_filter = '(blue|red) => color'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in Manticoresearch (SQL)\nDESCRIPTION: This SQL query demonstrates how to create a table with a minimum word length setting, specifying the shortest words to be indexed in Manticoresearch.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) min_word_len = '4'\n```\n\n----------------------------------------\n\nTITLE: Viewing Query Tree Structure in SQL\nDESCRIPTION: Shows how to view the structure of an executed query using the SHOW PLAN command after enabling profiling and running a query in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW PLAN;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (Javascript)\nDESCRIPTION: Javascript code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)');\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length using Javascript (JavaScript)\nDESCRIPTION: Asynchronous JavaScript code for creating a table in Manticoresearch, setting ngram_len, supporting script language indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) ngram_chars = \\'cont\\' ngram_len = \\'1\\'');\n```\n\n----------------------------------------\n\nTITLE: Configuring Bigram Index in Manticore Config File\nDESCRIPTION: Shows how to configure bigram indexing in the Manticore Search configuration file. It sets the bigram_index mode to 'both_freq' and defines frequent words for a table named 'products'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_70\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  bigram_index = both_freq\n  bigram_freq_words = the, a, you, i\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Python Asyncio with Auto ID for Manticore\nDESCRIPTION: Illustrates using Python asyncio for inserting documents into a Manticore database with auto-generated IDs. Suitable for asynchronous operations in Python environments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nawait indexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\"}})\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Facet Results in Manticore Search\nDESCRIPTION: This JSON example shows the structure of facet results in the HTTP JSON response. The aggregations node contains buckets with key (the facet value) and doc_count (the count of documents matching that value).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"aggregations\": {\n        \"group name\": {\n        \"buckets\": [\n            {\n                \"key\": 10,\n                \"doc_count\": 1019\n            },\n            {\n                \"key\": 9,\n                \"doc_count\": 954\n            },\n            {\n                \"key\": 8,\n                \"doc_count\": 1021\n            },\n            {\n                \"key\": 7,\n                \"doc_count\": 1011\n            },\n            {\n                \"key\": 6,\n                \"doc_count\": 997\n            }\n            ]\n        }\n    }   \n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode using Python (Python)\nDESCRIPTION: This Python example demonstrates using the Manticoresearch utility API to create a table with blend_mode options for tailored indexing behavior.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) blend_mode = \\'trim_tail, skip_pure\\' blend_chars = \\' +, &\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using Javascript Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement asynchronously using the Javascript client library's `sql` method (`utilsApi`). This creates the 'products' table with the `hitless_words` option set to 'all'. The result of the operation is assigned to the 'res' variable.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) hitless_words = \\'all\\'');\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting in C#\nDESCRIPTION: Implements a search operation for matching 'one' or 'robots' terms in the 'books' index, highlighting 'content' field using C#. Requires searchApi for executing the search request. Outputs a structured response showing matching hits and highlighted fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");searchRequest.FulltextFilter = new MatchFilter(\"*\", \"one|robots\");var highlight = new Highlight();highlight.Fieldnames = new List<string> {\"content\"};searchRequest.Highlight = highlight;var searchResponse = searchApi.Search(searchRequest);\n```\n\nLANGUAGE: C#\nCODE:\n```\nclass SearchResponse {    took: 0    timedOut: false    hits: class SearchResponseHits {        total: 1        maxScore: null        hits: [{_id=1, _score=2788, _source={title=Books one, content=They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. }, highlight={title=[Books <b>one</b>], content=[They followed Bander. The <b>robots</b> remained at a polite distance, ,  three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander,  gestured the other <b>robots</b> away and entered itself. The]}}]        aggregations: null    }    profile: null}\n```\n\n----------------------------------------\n\nTITLE: Histogram Aggregation in JSON\nDESCRIPTION: Demonstrates how to perform histogram aggregation using JSON API. The query aggregates documents into fixed-size buckets based on the price field with an interval of 300.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_37\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n{\n  \"size\": 0,\n  \"table\": \"facets\",\n  \"aggs\": {\n    \"price_range\": {\n      \"histogram\": {\n        \"field\": \"price\",\n        \"interval\": 300\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Set filter in Manticore Search\nDESCRIPTION: Illustrates how to use a set filter to match documents where an attribute value is equal to any of the specified values in a set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test1\",\n  \"query\": {\n    \"in\": {\n      \"price\": [1,10,100]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in Rust (Rust)\nDESCRIPTION: The Rust snippet illustrates asynchronous creation of a Manticoresearch table with specific min_word_len to ensure minimum word length indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_45\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) min_word_len = '4'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with Python-asyncio\nDESCRIPTION: Asynchronous Python implementation to search for 'one|robots' in the 'books' table and highlight matches in 'title' and 'content' fields, with a limit of 50 for content highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":{\"title\":{},\"content\":{\"limit\":50}}}})\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore TypeScript Client\nDESCRIPTION: Shows an async code sample for deleting documents in the 'test' index matching a full-text condition ('*': 'Text 1') with the TypeScript Manticoresearch client. Highlights how to build a match query object and use await with the delete operation. Requires configuring an indexApi object from the Manticoresearch TypeScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nres = await indexApi.delete({\\n  index: 'test',\\n  query: { match: { '*': 'Text 1' } },\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Columnar Attributes and fast_fetch Property in SQL\nDESCRIPTION: Demonstrates creating a table with columnar attributes and disabling fast_fetch for specific columns using SQL. The example shows how to control the docstore storage to optimize disk space for columnar tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_97\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t(a int, b int fast_fetch='0') engine='columnar'; desc t;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+-------+--------+---------------------+\n| Field | Type   | Properties          |\n+-------+--------+---------------------+\n| id    | bigint | columnar fast_fetch |\n| a     | uint   | columnar fast_fetch |\n| b     | uint   | columnar            |\n+-------+--------+---------------------+\n3 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Equality filter in Manticore Search\nDESCRIPTION: Shows how to use a simple equality filter to match documents based on an exact attribute value.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test1\",\n  \"query\": {\n    \"equals\": { \"price\": 500 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in JavaScript\nDESCRIPTION: Shows how to create a table with bigram indexing and frequent words using the JavaScript client. It executes an SQL command asynchronously to set up the table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) bigram_freq_words = \\'the, a, you, i\\' bigram_index = \\'first_freq\\'');\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodeads Load Balancing Strategy\nDESCRIPTION: Implements latency-weighted probabilities while excluding dead mirrors from selection.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Load_balancing.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nha_strategy = nodeads\n```\n\n----------------------------------------\n\nTITLE: Using ZONESPAN Operator in Manticore Search SQL\nDESCRIPTION: Demonstrates the ZONESPAN operator, which limits matching to a single continuous span within the specified zone. Requires index_zones to be enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nZONESPAN:(h2)\n\nonly in a (single) title\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Docker with Custom Listening Interfaces\nDESCRIPTION: Docker command to run Manticore with additional custom listening interfaces defined using environment variables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 1188:9307  -e searchd_mysql_version_string='5.5.0' -e searchd_listen='9316:http|9307:mysql|$ip:5443:mysql_vip'  manticore\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries in C#\nDESCRIPTION: Shows how to use the C# client to perform percolate query document matching. The C# implementation builds dictionaries and lists to create the query structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nvar doc1 = new Dictionary<string, Object>();\ndoc1.Add(\"title\",\"nice pair of shoes\");\ndoc1.Add(\"color\",\"blue\");\nvar doc2 = new Dictionary<string, Object>();\ndoc2.Add(\"title\",\"beautiful bag\");\nvar docs = new List<Object> {doc1, doc2};\nDictionary<string, Object> percolateDoc = new Dictionary<string, Object> {{ \"documents\", docs }}; \nDictionary<string, Object> query = new Dictionary<string, Object> {{ \"percolate\", percolateDoc }}; \nPercolateRequest percolateRequest = new PercolateRequest(query=query);\nsearchApi.Percolate(\"products\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with RegExp Filter in Python-asyncio\nDESCRIPTION: Creates a table named 'products' with text and float columns using regexp_filter to map color terms. Uses asynchronous Python API with await keyword.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_126\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) regexp_filter = \\'(blue|red) => color\\'')\n```\n\n----------------------------------------\n\nTITLE: Promote to 64-bit Unsigned Integer in SQL\nDESCRIPTION: The UINT64() function promotes its argument to a 64-bit unsigned integer type.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Type_casting_functions.md#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nUINT64()\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (Java)\nDESCRIPTION: Java code to create a table with a JSON field that has a secondary index in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, j json secondary_index='1')\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in Python (asyncio)\nDESCRIPTION: This snippet demonstrates how to replace multiple documents using the bulk API in Python with asyncio. It's similar to the synchronous version but uses await for asynchronous execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nindexApi = manticoresearch.IndexApi(client)\ndocs = [ \\\n    {\"replace\": {\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"title\" : \"document one\"}}}, \\\n    {\"replace\": {\"table\" : \"products\", \"id\" : 2, \"doc\" : {\"title\" : \"document two\"}}} ]\napi_resp = await indexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\nLANGUAGE: python\nCODE:\n```\n{'error': None,\n 'items': [{u'replace': {u'_id': 1,\n                         u'table': u'products',\n                         u'created': False,\n                         u'result': u'updated',\n                         u'status': 200}},\n           {u'replace': {u'_id': 2,\n                         u'table': u'products',\n                         u'created': False,\n                         u'result': u'updated',\n                         u'status': 200}}]}\n```\n\n----------------------------------------\n\nTITLE: Search Expression Implementation\nDESCRIPTION: Demonstrates how to perform a search request with expressions using indexof function across different languages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_74\n\nLANGUAGE: Java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"forum\");\nquery = new HashMap<String,Object>();\nquery.put(\"match_all\",null);\nsearchRequest.setQuery(query);\nObject expressions = new HashMap<String,Object>(){{ put(\"idx\",\"indexof(x>2 for x in data.intarray)\"); }};\nsearchRequest.setExpressions(expressions);\nsearchResponse = searchApi.search(searchRequest);\n```\n\nLANGUAGE: C#\nCODE:\n```\nobject query =  new { match_all=null };\nvar searchRequest = new SearchRequest(\"forum\", query);\nsearchRequest.Expressions = new List<Object> {\n    new Dictionary<string, string> { {\"idx\", \"indexof(x>2 for x in data.intarray)\"} }\n};\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet query = SearchQuery::new();\nlet mut expr = HashMap::new(); \nexpr.insert(\"idx\".to_string(), serde_json::json!(\"indexof(x>2 for x in data.intarray)\"));\nlet expressions: [HashMap; 1] = [expr];\n\nlet search_request = SearchRequest {\n    table: \"forum\".to_string(),\n    query: Some(Box::new(query)),\n    expressions: serde_json::json!(expressions),\n    ..Default::default()\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Filtering Agent Status in Python\nDESCRIPTION: Shows how to filter agent status using Python client library with SQL-like pattern matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('SHOW AGENT STATUS LIKE \\'%5period%msec%\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode in Manticoresearch (SQL)\nDESCRIPTION: This SQL snippet demonstrates creating a table with a blend_mode option in Manticoresearch, which alters token indexing by ignoring or trimming tokens based on specified blend characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) blend_mode = 'trim_tail, skip_pure' blend_chars = '+, &'\n```\n\n----------------------------------------\n\nTITLE: HTML Example for ZONE Operator in Manticore Search\nDESCRIPTION: Provides an HTML example to illustrate how the ZONE operator matches across multiple spans of the specified zone.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<th>Table 1. Local awareness of Hello Kitty brand.</th>\n.. some table data goes here ..\n<th>Table 2. World-wide brand awareness.</th>\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using Python-asyncio in Manticore Search\nDESCRIPTION: This snippet shows how to insert documents into a real-time table named 'test' using the Python-asyncio client for Manticore Search. It demonstrates inserting documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nawait indexApi.insert({\"table\" : \"test\", \"id\" : 1, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\", \"price\" : 19.85}})\nawait indexApi.insert({\"table\" : \"test\", \"id\" : 2, \"doc\" : {\"title\" : \"Crossbody Bag with Tassel\"}})\nawait indexApi.insert({\"table\" : \"test\", \"id\" : 0, \"doc\" : {{\"title\" : \"Yellow bag\"}})\n```\n\n----------------------------------------\n\nTITLE: Searching with Profiling in Manticore (TypeScript)\nDESCRIPTION: Executes an asynchronous search query against the 'test' index using the TypeScript client. The query uses `query_string` to search for '1' in the 'content' field. It excludes all source fields (`_source`), limits the result set to 1, and enables profiling (`profile:true`). The provided response snippet shows the beginning of the hits structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: { query_string: '@content 1'},\n  _source: { excludes: [\"*\"] },\n  limit:1,\n  profile\":true\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"hits\": \n\t{\n\t\t\"hits\": \n\t\t[{\n\t\t\t\"_id\": 1,\n            \"_score\": 1480,\n```\n\n----------------------------------------\n\nTITLE: Profiling PHP Search Query in Manticore Search\nDESCRIPTION: This PHP snippet demonstrates how to enable profiling for a search query using the PHP API. It sets the profile parameter to true and prints the profile information from the search result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = $index->search('i me')->setSource(['excludes'=>['*']])->setLimit(1)->profile()->get();\nprint_r($result->getProfile());\n```\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [query] => Array\n        (\n            [type] => AND\n            [description] => AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2)))\n            [children] => Array\n                (\n                    [0] => Array\n                        (\n                            [type] => AND\n                            [description] => AND(KEYWORD(i, querypos=1))\n                            [children] => Array\n                                (\n                                    [0] => Array\n                                        (\n                                            [type] => KEYWORD\n                                            [word] => i\n                                            [querypos] => 1\n                                        )\n                                )\n                        )\n                    [1] => Array\n                        (\n                            [type] => AND\n                            [description] => AND(KEYWORD(me, querypos=2))\n                            [children] => Array\n                                (\n                                    [0] => Array\n                                        (\n                                            [type] => KEYWORD\n                                            [word] => me\n                                            [querypos] => 2\n                                        )\n                                )\n                        )\n                )\n        )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using PHP Client\nDESCRIPTION: Uses the Manticore PHP client library to create an index named 'products'. It defines the schema and sets the `index_token_filter` option to specify a custom token filter plugin (`my_lib.so:custom_blend:chars=@#&`) to be used during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_113\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'index_token_filter' => 'my_lib.so:custom_blend:chars=@#&'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Using indextool in Manticore Search (SQL)\nDESCRIPTION: General syntax for using the indextool utility to extract information about physical tables in Manticore Search. It includes various commands and options for different operations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Miscellaneous_tools.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nindextool <command> [options]\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (JSON)\nDESCRIPTION: JSON request to create a table with a JSON field that has a secondary index in Manticore Search using the CLI interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, j json secondary_index='1')\"\n```\n\n----------------------------------------\n\nTITLE: Setting Max Open Files in INI Configuration\nDESCRIPTION: This snippet shows how to set the `max_open_files` configuration in an INI file. The value can be set directly as a number or by using the word 'max' to leverage the system's hard limit. This is crucial for managing the number of files the server can open concurrently.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nmax_open_files = 10000\n```\n\nLANGUAGE: ini\nCODE:\n```\nmax_open_files = max\n```\n\n----------------------------------------\n\nTITLE: Executing Faceted Search SQL Query in Manticore Search\nDESCRIPTION: Demonstrates a faceted search query using SQL, showing how multiple result sets are returned for the main search and the facet.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM tbl WHERE MATCH('joe') FACET age;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+------+------+\n| id   | age  |\n+------+------+\n|    1 |   25 |\n+------+------+\n1 row in set (0.00 sec)\n\n+------+----------+\n| age  | count(*) |\n+------+----------+\n|   25 |        1 |\n+------+----------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Using DATE_HISTOGRAM for Monthly Aggregation\nDESCRIPTION: Example of using DATE_HISTOGRAM with calendar_interval='month' to group data by months. It counts records in each month bucket and orders the results chronologically.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*),\nDATE_HISTOGRAM(tm, {calendar_interval='month'}) AS months\nFROM facets\nGROUP BY months ORDER BY months ASC;\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using SQL in Manticore Search\nDESCRIPTION: This SQL example demonstrates how to insert a document with a JSON field into a Manticore Search index. The JSON value is inserted as an escaped string.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO products VALUES (1, 'shoes', '{\"size\": 41, \"color\": \"red\"}');\n```\n\n----------------------------------------\n\nTITLE: Searching in a Specific Field using PHP\nDESCRIPTION: Uses the PHP client to search in the 'products' table, looking only in the 'title' field. The @title syntax limits the search to that specific field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('products')->search('@title')->get();\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore C# Client\nDESCRIPTION: Demonstrates constructing and executing a delete query in C# for entries in the 'products' index with price at most 10. Utilizes Dictionary objects to define the query and sends it via a DeleteDocumentRequest instance using the Manticoresearch .NET client. Requires appropriate using/import directives and client setup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_36\n\nLANGUAGE: clike\nCODE:\n```\nDictionary<string, Object> price = new Dictionary<string, Object>();\\nprice.Add(\\\"lte\\\", 10);\\nDictionary<string, Object> range = new Dictionary<string, Object>();\\nrange.Add(\\\"price\\\", price);\\nDeleteDocumentRequest deleteDocumentRequest = new DeleteDocumentRequest(index: \\\"products\\\", query: range);\\nindexApi.Delete(deleteDocumentRequest);\n```\n\n----------------------------------------\n\nTITLE: Rust Search Implementation\nDESCRIPTION: Rust implementation using HashMap and serde_json for query construction and highlighting configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_93\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet highlight_fields [String; 2] = [\"content\".to_string(), \"title\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    number_of_fragments: Some(serde_json::json!(10)),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in Rust\nDESCRIPTION: Demonstrates creating a table with a multi64 field in Rust using SQL through the utils API. This example includes the async/await pattern for asynchronous execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_95\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, values multi64))\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Verbose Percolate Query for Performance Analysis in SQL\nDESCRIPTION: This SQL query shows how to use the verbose option in a percolate query to gather more detailed performance metrics. The results can be viewed using the SHOW META command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_95\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ('products', ('{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}', '{\"title\": \"beautiful bag\"}'), 1 as verbose); show meta;\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in Java\nDESCRIPTION: This Java code snippet uses the utilsApi to execute an SQL query that retrieves the status of the replication cluster, providing detailed information about the cluster configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"SHOW STATUS\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Query Expansion with SQL in Manticore Search\nDESCRIPTION: Shows how wildcard terms are expanded in the query execution plan. The example searches for 'way*' in the title field and 'hey' in the content field, displaying the complex transformed tree.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET profiling=1;\n\nSELECT id FROM forum WHERE MATCH('@title way* @content hey') LIMIT 1;\n\nSHOW PLAN;\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in Java\nDESCRIPTION: This snippet demonstrates how to replace multiple documents using the bulk API in Java. It constructs a string containing multiple JSON objects, each representing a document replacement operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nbody = \"{\\\"replace\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 1, \\\"doc\\\" : {\\\"title\\\" : \\\"document one\\\"}}}\" +\"\\n\"+\n    \"{\\\"replace\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 2, \\\"doc\\\" : {\\\"title\\\" : \\\"document two\\\"}}}\"+ \"\\n\" ;\nindexApi.bulk(body);\n```\n\nLANGUAGE: java\nCODE:\n```\nclass BulkResponse {\n    items: [{replace={_index=products, _id=1, created=false, result=updated, status=200}}, {replace={_index=products, _id=2, created=false, result=updated, status=200}}]\n    error: null\n    additionalProperties: {errors=false}\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Regular Expression Matching in Manticore Search SQL\nDESCRIPTION: Shows how to perform case-insensitive regular expression matching using the (?i) flag with the REGEX() function.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/String_functions.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT REGEX(content, '(?i)box') FROM test;\n```\n\n----------------------------------------\n\nTITLE: Python-asyncio Response for Percolate Query Document Matching\nDESCRIPTION: Shows the Python dictionary response format when using asyncio for percolate query document matching. The response structure matches the synchronous Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'2811025403043381494',\n                    u'table': u'products',\n                    u'_score': u'1',\n                    u'_source': {u'query': {u'ql': u'@title bag'}},\n                    u'_type': u'doc',\n                    u'fields': {u'_percolator_document_slot': [2]}},\n                   {u'_id': u'2811025403043381496',\n                    u'table': u'products',\n                    u'_score': u'1',\n                    u'_source': {u'query': {u'ql': u'@title shoes'}},\n                    u'_type': u'doc',\n                    u'fields': {u'_percolator_document_slot': [1]}}],\n          'total': 2},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in Python\nDESCRIPTION: Uses the Python client to create a table with bigram indexing and frequent words. It executes an SQL command to set up the table with specified bigram configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) bigram_freq_words = \\'the, a, you, i\\' bigram_index = \\'first_freq\\'')\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Document Updates with Python-asyncio\nDESCRIPTION: Asynchronous updating using Python-asyncio is shown here, requiring an asyncio-capable environment and associated database libraries. The updates are sent asynchronously and involve structured dictionaries for specification.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_10\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait indexApi.update({\"cluster\":\"weekly\", \"table\" : \"products\", \"id\" : 1, \"doc\" : {\"enabled\" : 0}})\n```\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait indexApi.update({\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"tags1\": []}})\n```\n\nLANGUAGE: Python-asyncio\nCODE:\n```\n{'id': 1, 'table': 'products', 'result': 'updated', 'updated': None}\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data using SQL\nDESCRIPTION: Inserts two documents into the table with 4-dimensional image vectors representing embedded features of yellow and white bags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into test values ( 1, 'yellow bag', (0.653448,0.192478,0.017971,0.339821) ), ( 2, 'white bag', (-0.148894,0.748278,0.091892,-0.095406) );\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in Javascript (JavaScript)\nDESCRIPTION: This JavaScript snippet features an async call to create a table in Manticoresearch with specified minimum word length for indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) min_word_len = \\'4\\'');\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using Python Asyncio Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement asynchronously using the Python asyncio client library's `sql` method (`utilsApi`). This creates the 'products' table with the `hitless_words` option set to 'all'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) hitless_words = \\'all\\'')\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert Documents via /bulk HTTP Endpoint (NDJSON JSON Payloads)\nDESCRIPTION: These examples show how to perform bulk document insertions via the /bulk Manticore HTTP endpoint, formatting each operation as a JSON object on its own NDJSON line. Both single-table and cross-table transactional behaviors are demonstrated. Dependencies: ManticoreSearch server with HTTP API enabled. Key parameters: 'table' for target, 'id' for document id, 'doc' for the data. The response includes per-table result objects and general error information. Inputs require 'Content-Type: application/x-ndjson' and NDJSON lines for each document.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\nPOST /bulk\n-H \"Content-Type: application/x-ndjson\" -d '\n{\"insert\": {\"table\":\"products\", \"id\":1, \"doc\":  {\"title\":\"Crossbody Bag with Tassel\",\"price\" : 19.85}}}\n{\"insert\":{\"table\":\"products\", \"id\":2, \"doc\":  {\"title\":\"microfiber sheet set\",\"price\" : 19.99}}}\n'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /bulk\n-H \"Content-Type: application/x-ndjson\" -d '\n{\"insert\":{\"table\":\"test1\",\"id\":21,\"doc\":{\"int_col\":1,\"price\":1.1,\"title\":\"bulk doc one\"}}}\n{\"insert\":{\"table\":\"test1\",\"id\":22,\"doc\":{\"int_col\":2,\"price\":2.2,\"title\":\"bulk doc two\"}}}\n\n{\"insert\":{\"table\":\"test1\",\"id\":23,\"doc\":{\"int_col\":3,\"price\":3.3,\"title\":\"bulk doc three\"}}}\n{\"insert\":{\"table\":\"test2\",\"id\":24,\"doc\":{\"int_col\":4,\"price\":4.4,\"title\":\"bulk doc four\"}}}\n{\"insert\":{\"table\":\"test2\",\"id\":25,\"doc\":{\"int_col\":5,\"price\":5.5,\"title\":\"bulk doc five\"}}}\n'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"bulk\": {\n        \"table\": \"products\",\n        \"_id\": 2,\n        \"created\": 2,\n        \"deleted\": 0,\n        \"updated\": 0,\n        \"result\": \"created\",\n        \"status\": 201\n      }\n    }\n  ],\n  \"current_line\": 4,\n  \"skipped_lines\": 0,\n  \"errors\": false,\n  \"error\": \"\"\n}\n\n{\n  \"items\": [\n    {\n      \"bulk\": {\n        \"table\": \"test1\",\n        \"_id\": 22,\n        \"created\": 2,\n        \"deleted\": 0,\n        \"updated\": 0,\n        \"result\": \"created\",\n        \"status\": 201\n      }\n    },\n    {\n      \"bulk\": {\n        \"table\": \"test1\",\n        \"_id\": 23,\n        \"created\": 1,\n        \"deleted\": 0,\n        \"updated\": 0,\n        \"result\": \"created\",\n        \"status\": 201\n      }\n    },\n    {\n      \"bulk\": {\n        \"table\": \"test2\",\n        \"_id\": 25,\n        \"created\": 2,\n        \"deleted\": 0,\n        \"updated\": 0,\n        \"result\": \"created\",\n        \"status\": 201\n      }\n    }\n  ],\n  \"current_line\": 8,\n  \"skipped_lines\": 0,\n  \"errors\": false,\n  \"error\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQL HIGHLIGHT() with TO_STRING for Arbitrary Text\nDESCRIPTION: Demonstrates how to highlight arbitrary text using TO_STRING with HIGHLIGHT(). This approach can highlight text that isn't stored in the index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT({},TO_STRING('some text to highlight'), 'highlight') FROM books WHERE MATCH('@title one');\n```\n\n----------------------------------------\n\nTITLE: Performing a Search in Manticore via HTTP\nDESCRIPTION: HTTP POST request to perform a simple search in Manticore Search using the search endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '{\"table\":\"testrt\",\"query\":{\"match\":{\"*\":\"hello world\"}}}'\n```\n\n----------------------------------------\n\nTITLE: SQL Table Schema for Filebeat Data in Manticore\nDESCRIPTION: MySQL query showing the schema structure created by Manticore for storing Filebeat log data, displaying field names, types, and properties.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Filebeat.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DESCRIBE dpkg_log;\n+------------------+--------+--------------------+\n| Field            | Type   | Properties         |\n+------------------+--------+--------------------+\n| id               | bigint |                    |\n| @timestamp       | text   | indexed stored     |\n| message          | text   | indexed stored     |\n| log              | json   |                    |\n| input            | json   |                    |\n| ecs              | json   |                    |\n| host             | json   |                    |\n| agent            | json   |                    |\n+------------------+--------+--------------------+\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status with Java in Manticore Search\nDESCRIPTION: This Java code snippet uses the utilsApi to execute the SQL command 'SHOW TABLE statistic STATUS'. It fetches comprehensive statistics about the 'statistic' table, including index properties, resource usage, and query performance data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"SHOW TABLE statistic STATUS\");\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode using Rust (Rust)\nDESCRIPTION: This Rust snippet demonstrates creating a table with specific blend_mode settings using the async feature in Manticoresearch.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_34\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) blend_mode = 'trim_tail, skip_pure' blend_chars = '+, &'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: IDF Configuration Options in Manticore Search\nDESCRIPTION: Explains configuration options for the Inverse Document Frequency (IDF) formula in Manticore Search. Covers the differences between normalized and plain IDF, as well as tfidf_normalized and tfidf_unnormalized options and their effects on search relevance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nThe historically default IDF (Inverse Document Frequency) in Manticore is equivalent to `OPTION idf='normalized,tfidf_normalized'`, and those normalizations may cause several undesired effects.\n\nFirst, `idf=normalized` causes keyword penalization. For instance, if you search for `the | something` and `the` occurs in more than 50% of the documents, then documents with both keywords `the` and`[something` will get less weight than documents with just one keyword  `something`. Using `OPTION idf=plain` avoids this.\n\nPlain IDF varies in `[0, log(N)]` range, and keywords are never penalized; while the normalized IDF varies in `[-log(N), log(N)]` range, and too frequent keywords are penalized.\n\nSecond, `idf=tfidf_normalized` causes IDF drift over queries. Historically, we additionally divided IDF by query keyword count, so that the entire `sum(tf*idf)` over all keywords would still fit into `[0,1]` range. However, that means that queries `word1` and `word1 | nonmatchingword2` would assign different weights to the exactly same result set, because the IDFs for both `word1` and `nonmatchingword2` would be divided by 2. `OPTION idf='tfidf_unnormalized'` fixes that. Note that BM25, BM25A, BM25F() ranking factors will be scale accordingly  once you disable this normalization.\n\nIDF flags can be mixed; `plain` and `normalized` are mutually exclusive;`tfidf_unnormalized` and `tfidf_normalized` are mutually exclusive; and unspecified flags in such a mutually exclusive group take their defaults. That means that `OPTION idf=plain` is equivalent to a complete `OPTION idf='plain,tfidf_normalized'` specification.\n```\n\n----------------------------------------\n\nTITLE: Searching with Highlighting in Python\nDESCRIPTION: Executes a search query with title highlighting using Python Manticore client. Returns structured response with hits and highlights.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.search({\"table\":\"products\",\"query\":{\"query_string\":\"@title remove hair\"},\"highlight\":{\"fields\":[\"title\"]}})\n```\n\n----------------------------------------\n\nTITLE: Facet with Histogram in SQL\nDESCRIPTION: Shows how to use histograms for bucketing values in SQL. The query groups documents into fixed-size buckets based on the price field, using the HISTOGRAM function with an interval of 100.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), HISTOGRAM(price, {hist_interval=100}) as price_range FROM facets GROUP BY price_range ORDER BY price_range ASC;\n```\n\n----------------------------------------\n\nTITLE: Executing ATTACH TABLE Command in SQL\nDESCRIPTION: SQL command to attach a plain table to a real-time table in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Attaching_one_table_to_another.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> ATTACH TABLE plain TO TABLE rt;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Using NEAR Operator in Manticore Search SQL\nDESCRIPTION: Demonstrates the usage of the NEAR operator, which matches documents where specified terms are within a certain word distance, regardless of their order.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nhello NEAR/3 world NEAR/4 \"my test\"\n```\n\n----------------------------------------\n\nTITLE: Match Query with Operator in HTTP JSON\nDESCRIPTION: Demonstrates how to use the 'operator' clause in a match query to change the default OR behavior.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"query\":\n{\n  \"match\":\n  {\n    \"content,title\":\n    {\n      \"query\":\"keyword\",\n      \"operator\":\"or\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results in Rust\nDESCRIPTION: This snippet demonstrates how to create a search query with highlighting in Rust for Manticore Search. It sets up a match filter, creates a search query, and configures highlighting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"try|gets|down|said\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default()\n};\nlet highlight = Highlight::new();\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default()\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chinese Language Support with ICU in Manticore Search\nDESCRIPTION: This snippet demonstrates how to configure Manticore Search for Chinese language support using ICU (International Components for Unicode). It includes settings for charset_table and morphology.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncharset_table=chinese\nmorphology=icu_chinese\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with JavaScript in Manticore Search\nDESCRIPTION: This JavaScript snippet shows how to use the Manticore Search JavaScript client to perform a percolate query. It uses an async/await pattern with the searchApi.percolate() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.percolate('pq',{\"percolate\":{\"documents\":[{\"title\":\"angry test\",\"gid\":3},{\"title\":\"filter test doc2\",\"gid\":13}]}});\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using Python Asyncio Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement asynchronously using the Python asyncio client library's `sql` method (`utilsApi`). This creates the 'products' table with the `index_field_lengths` option set to '1'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) index_field_lengths = \\'1\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in Javascript\nDESCRIPTION: This Javascript code creates a table 'products' with blended characters configuration using the Manticore Search Javascript client, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_20\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) blend_chars = \\'+, &, U+23, @->_\\'');\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Google Test Build\nDESCRIPTION: Sets up CMake build configuration for Manticore Search test suite using Google Test. Defines test source files, includes necessary dependencies, and configures build targets with appropriate compiler options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/gtests/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.11.0 )\n\n# Read docs at https://github.com/google/googletest.git\ninclude ( GetGoogletest )\nif (NOT TARGET GTest::gmock_main)\n\treturn ()\nendif ()\n\nset ( GTESTS_SRC\n\t\tgtests_rtstuff.cpp\n\t\tgtests_tokenizer.cpp\n\t\tgtests_text.cpp\n\t\tgtests_functions.cpp\n\t\tgtests_globalstate.cpp\n\t\tgtests_searchd.cpp\n\t\tgtests_filter.cpp\n\t\tgtests_searchdaemon.cpp\n\t\tgtests_stringbuilder.cpp\n\t\tgtests_strfmt.cpp\n\t\tgtests_pqstuff.cpp\n\t\tgtests_json.cpp\n\t\tgtests_threadstuff.cpp\n\t\tgtests_wsrep.cpp )\n\nadd_executable ( gmanticoretest ${GTESTS_SRC} )\ntarget_include_directories ( gmanticoretest PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( gmanticoretest\n\t\tGTest::gmock_main\n\t\tlmanticore\n\t\tlsearchd\n\t\tsearchd_ssl\n\t\tsource_svpipe )\n\nif (WITH_EXPAT)\n\ttarget_link_libraries ( gmanticoretest source_xmlpipe2 )\nendif ()\n\ntarget_compile_options ( gmanticoretest PRIVATE $<$<OR:$<COMPILE_LANG_AND_ID:CXX,GNU>,$<COMPILE_LANG_AND_ID:C,GNU>>:-Wno-array-bounds -Wno-stringop-truncation -Wno-restrict -Wno-stringop-overflow> )\n\nset ( CMAKE_GTEST_DISCOVER_TESTS_DISCOVERY_MODE PRE_TEST )\n\ninclude ( GoogleTest )\nGTEST_DISCOVER_TESTS ( gmanticoretest PROPERTIES LABELS GOOGLE ENVIRONMENT \"GTEST_DICT=${CMAKE_CURRENT_SOURCE_DIR}\")\nmessage ( STATUS \"Discovered and added individual google-tests\" )\n\nif (WIN32)\n#\tgetruntime ( libs common )\n#\tgetruntime ( libs indexer )\n#\tgetruntime ( libs daemon )\n\tadd_custom_command ( TARGET gmanticoretest POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${libs} \"$<TARGET_FILE_DIR:gmanticoretest>\" VERBATIM )\n\tmessage ( STATUS \"Collected libs is ${libs}\" )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Plain Table Schema in Manticore Search Configuration\nDESCRIPTION: Example of defining a plain table schema in a Manticore Search configuration file. It includes settings for table type, path, source, and stored fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntable <table name> {\n  type = plain\n  path = /path/to/table\n  source = <source_name>\n  source = <another source_name>\n  [stored_fields = <comma separated list of full-text fields that should be stored, all are stored by default, can be empty>]\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Year from Timestamp with YEAR() in SQL\nDESCRIPTION: Executes the YEAR() function in SQL to extract the year part (range 1969-2038) from a given timestamp, interpreted according to the current timezone. This example uses NOW() to provide the current timestamp as input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect year(now());\n```\n\n----------------------------------------\n\nTITLE: Configuring N-gram Length for Indexing (INI)\nDESCRIPTION: This INI configuration sets the ngram_len in Manticoresearch, determining the length of n-grams used during indexing, helping search in continuous-script languages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\nngram_len = 1\n```\n\n----------------------------------------\n\nTITLE: Log File Permission Configuration\nDESCRIPTION: Configuration for setting custom file permissions for query log files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Query_logging.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n    query_log = /var/log/query.log\n    query_log_mode = 666\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with Custom Character Set in INI\nDESCRIPTION: This snippet shows how to configure a table named 'products' with a custom character set table using the INI configuration format for Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_4\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  charset_table = 0..9, english, _\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Place Relocation Factor in Manticore Search Table\nDESCRIPTION: Example configuration for setting the in-place relocation factor in a table definition. Used to optimize memory usage during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_63\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  inplace_reloc_factor = 0.1\n  inplace_enable = 1\n\n  path = products\n  source = src_base\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using SQL\nDESCRIPTION: SQL statement to create a Manticore Search table named 'products' with 'title' (text) and 'price' (float) fields. The `hitless_words = 'all'` option specifies that no positional information (hitlists) should be stored for any words in this index, optimizing for space and boolean matching speed at the cost of phrase/proximity search capabilities.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_89\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) hitless_words = 'all'\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting in Java\nDESCRIPTION: Performs a search request on the 'books' index in Java, targeting matches for 'one' or 'robots', and highlighting content. Requires Manticore Search Java client classes. Processes the search request with set indices and fields, returning a structured response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nsearchRequest = new SearchRequest();searchRequest.setIndex(\"books\");query = new HashMap<String,Object>();query.put(\"match\",new HashMap<String,Object>(){{put(\"*\",\"one|robots\");}});        searchRequest.setQuery(query);highlight = new HashMap<String,Object>(){{put(\"fields\",new String[] {\"content\"});}};searchRequest.setHighlight(highlight);searchResponse = searchApi.search(searchRequest);\n```\n\nLANGUAGE: Java\nCODE:\n```\nclass SearchResponse {    took: 0    timedOut: false    hits: class SearchResponseHits {        total: 1        maxScore: null        hits: [{_id=1, _score=2788, _source={title=Books one, content=They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. }, highlight={title=[Books <b>one</b>], content=[They followed Bander. The <b>robots</b> remained at a polite distance, ,  three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander,  gestured the other <b>robots</b> away and entered itself. The]}}]        aggregations: null    }    profile: null}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Sentence and Paragraph Indexing in Manticore Search\nDESCRIPTION: This snippet demonstrates how to create a table with sentence and paragraph indexing enabled using SQL. It sets both index_sp and html_strip to 1 to enable full functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Advanced_HTML_tokenization.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) index_sp = '1' html_strip = '1'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) index_sp = '1' html_strip = '1'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'index_sp' => '1',\n            'html_strip' => '1'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) index_sp = \\'1\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) index_sp = \\'1\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) index_sp = \\'1\\' html_strip = \\'1\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) index_sp = \\'1\\' html_strip = '1'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) index_sp = \\'1\\' html_strip = '1'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) index_sp = \\'1\\' html_strip = '1'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  index_sp = 1\n  html_strip = 1\n  \n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ubuntu Bionic in Manticore Search Project\nDESCRIPTION: This snippet installs essential development libraries and tools for the Manticore Search project on Ubuntu Bionic (18.04 LTS). It includes MySQL client, Expat, PostgreSQL, UnixODBC, JeMalloc, OpenSSL, Zstd, and cURL development packages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_bionic.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install -y \\\n    libmysqlclient-dev \\\n    libexpat-dev \\\n    libpq-dev \\\n    unixodbc-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libzstd-dev \\\n    libcurl4-openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster\nDESCRIPTION: Examples of creating a new cluster using different programming languages and APIs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE CLUSTER posts\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE CLUSTER posts\n\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n    'cluster' => 'posts'\n    ]\n];\n$response = $client->cluster()->create($params);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE CLUSTER posts')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE CLUSTER posts');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE CLUSTER posts\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nutilsApi.Sql(\"CREATE CLUSTER posts\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE CLUSTER posts\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in SQL\nDESCRIPTION: Creates a table named 'products' with bigram indexing configured. It sets frequent words and uses the 'first_freq' bigram indexing mode, which indexes word pairs where the first word is frequent.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_72\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'first_freq'\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using Rust Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Rust client library's `sql` method to create a 'products' table with the `index_field_lengths` option set to '1'. The `await` keyword indicates an asynchronous operation. The `Some(true)` parameter might influence result reporting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_108\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) index_field_lengths = '1'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Formatting Time Part of Timestamp with TIME() in SQL\nDESCRIPTION: Executes the TIME() function in SQL to extract and format the time part of a timestamp as a string in 'HH:MM:SS' format, according to the current timezone. This example uses NOW() to provide the current timestamp. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nselect time(now());\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Packet Size in INI Configuration\nDESCRIPTION: This setting specifies the largest size allowed for network packets in a Manticore Search configuration. Optional with a default of 128M, it is used for sanity checks and does not influence memory usage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nmax_packet_size = 32M\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Requests for Document Updates\nDESCRIPTION: The JSON block demonstrates how to structure JSON requests to update documents in a database. These requests require knowledge of the specific API endpoint and expected structure. Inputs include cluster names, table names, document IDs, and document content to be updated.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /update\n{\n\t\"cluster\":\"weekly\",\n\t\"table\":\"products\",\n\t\"id\":1,\n\t\"doc\":\n\t{\n\t\t\"enabled\":0\n\t}\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /update\n\n{\n\t\"table\":\"products\",\n\t\"_id\":1,\n\t\"doc\":\n\t{\n\t\t\"tags1\": []\n\t}\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"table\":\"products\",\n  \"updated\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data using JavaScript in Manticore Search\nDESCRIPTION: This JavaScript code demonstrates how to insert a document with a JSON field into a Manticore Search index using the JavaScript API. The JSON is represented as a string in the document object.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nres = await indexApi.insert({\"table\" : \"products\", \"id\" : 0, \"doc\" : {\"title\" : \"Yellow bag\",\"meta\":'{\"size\": 41, \"color\": \"red\"}'}});\n```\n\n----------------------------------------\n\nTITLE: Go Search Implementation\nDESCRIPTION: Go implementation using map interfaces for query construction and highlighting configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_95\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nhighlight.SetNumberOfFragments(1)\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Transaction Control Statements in Manticore Search\nDESCRIPTION: Basic SQL statements for managing transactions manually. BEGIN starts a new transaction, COMMIT makes changes permanent, and ROLLBACK cancels all changes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSTART TRANSACTION | BEGIN\nCOMMIT\nROLLBACK\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Facet Syntax in Manticore Search\nDESCRIPTION: This code defines the SQL syntax for creating facets in Manticore Search. It shows the structure for facet declarations, including options for expressions, grouping, distinct fields, ordering, and limiting results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nFACET {expr_list} [BY {expr_list} ] [DISTINCT {field_name}] [ORDER BY {expr | FACET()} {ASC | DESC}] [LIMIT [offset,] count]\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with JSON API in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause through the JSON API interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /cli -d \"DROP TABLE IF EXISTS products\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global and Session Variables in Manticore Search\nDESCRIPTION: Examples of setting various configuration parameters in Manticore Search, including autocommit mode, query log format, and global/index-specific variables. These settings can be modified at runtime using SQL-like SET statements.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Setting_variables_online.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SET autocommit=0;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET GLOBAL query_log_format=sphinxql;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET GLOBAL @banned=(1,2,3);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET INDEX users GLOBAL @banned=(1,2,3);\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Force Starting Cluster Node\nDESCRIPTION: Command line option to forcibly start a cluster from any node, bypassing the safe_to_bootstrap check.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Restarting_a_cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--new-cluster-force\n```\n\n----------------------------------------\n\nTITLE: Calculating Date Difference with DATEDIFF() in SQL\nDESCRIPTION: Executes the DATEDIFF() function in SQL to calculate the difference in days between two timestamps. The result is returned as an integer. Requires two timestamp arguments (start_timestamp, end_timestamp).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nselect datediff(1615787586, 1613787583);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Manticore via HTTP\nDESCRIPTION: HTTP POST request to create a table in Manticore Search using the CLI endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d 'CREATE TABLE testrt ( title text, content text, gid integer)'\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Jieba Chinese Segmentation\nDESCRIPTION: Creates a table with Jieba-based Chinese language support using the 'cont' charset table and 'jieba_chinese' morphology.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Languages_with_continuous_scripts.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) charset_table = 'cont' morphology = 'jieba_chinese'\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  charset_table = cont\n  morphology = jieba_chinese\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Geo Distance Query with Bool Conditions\nDESCRIPTION: Shows how to combine geo_distance with bool query including match and equals conditions. Searches for stations in England within 10000m of specified coordinates.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"geodemo\",\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"*\": \"station\"\n          }\n        },\n        {\n          \"equals\": {\n            \"state_code\": \"ENG\"\n          }\n        },\n        {\n          \"geo_distance\": {\n            \"distance_type\": \"adaptive\",\n            \"location_anchor\": {\n              \"lat\": 52.396,\n              \"lon\": -1.774\n            },\n            \"location_source\": \"latitude_deg,longitude_deg\",\n            \"distance\": \"10000 m\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search using CLI JSON endpoint\nDESCRIPTION: Demonstrates the use of the /cli_json endpoint, which provides the same functionality as /cli but returns responses in JSON format. This includes a columns section, data section, and summary information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPOST /cli_json\ndesc test\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n      \"columns\":[\n         {\n            \"Field\":{\n               \"type\":\"string\"\n            }\n         },\n         {\n            \"Type\":{\n               \"type\":\"string\"\n            }\n         },\n         {\n            \"Properties\":{\n               \"type\":\"string\"\n            }\n         }\n      ],\n      \"data\":[\n         {\n            \"Field\":\"id\",\n            \"Type\":\"bigint\",\n            \"Properties\":\"\"\n         },\n         {\n            \"Field\":\"body\",\n            \"Type\":\"text\",\n            \"Properties\":\"indexed stored\"\n         },\n         {\n            \"Field\":\"title\",\n            \"Type\":\"string\",\n            \"Properties\":\"\"\n         }\n      ],\n      \"total\":3,\n      \"error\":\"\",\n      \"warning\":\"\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a table with a text field using the Manticore Search PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text']\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with RegExp Filter in Java\nDESCRIPTION: Creates a table named 'products' with text and float columns using regexp_filter to map color terms. Uses Java API with boolean flag parameter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_128\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) regexp_filter = '(blue|red) => color'\", true);\n```\n\n----------------------------------------\n\nTITLE: Initializing Scroll Search in SQL for Manticore Search\nDESCRIPTION: Demonstrates how to start a scroll search in SQL by executing an initial query with sorting criteria. The 'id' must be included in the ORDER BY clause to ensure consistent pagination.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... ORDER BY [... ,] id {ASC|DESC};\n```\n\n----------------------------------------\n\nTITLE: Executing Search with Highlighting in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Manticore Search API to perform a search with highlighting. It includes a match query and highlight settings for specific fields, ordering the highlights by score.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\",\"title\"],\"order\":\"score\"}});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":1,\"hits\":[{\"_id\": 1,\"_score\":2788,\"_source\":{\"title\":\"Books one\",\"content\":\"They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. \"},\"highlight\":{\"content\":[\" three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander\",\" gestured the other <b>robots</b> away and entered itself. The\",\"They followed Bander. The <b>robots</b> remained at a polite distance, \"],\"title\":[\"Books <b>one</b>\"]}}]}}\n\n\n```\n\n----------------------------------------\n\nTITLE: Querying System Settings in Manticore Search - SQL\nDESCRIPTION: Shows how to display current Manticore Search system settings including configuration paths, network ports, and directory locations using the SHOW SETTINGS command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW SETTINGS;\n```\n\n----------------------------------------\n\nTITLE: Grouping with Multiple Results per Group in SQL with Manticore Search\nDESCRIPTION: This SQL query demonstrates how to get multiple results per group using 'GROUP 2 BY'. It returns two movies for each year, ordered by release year descending.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT release_year, title FROM films GROUP 2 BY release_year ORDER BY release_year DESC LIMIT 6;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode using C# (C#)\nDESCRIPTION: This C# snippet illustrates using a utility API method to create a table with blend_mode settings in Manticoresearch.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) blend_mode = 'trim_tail, skip_pure' blend_chars = '+, &'\", true);\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Profile via Manticore Search JSON API\nDESCRIPTION: Illustrates how to request query profiling using the Manticore Search JSON API. A POST request is sent to the `/search` endpoint with the desired query details and the `profile` parameter set to `true` to activate profiling for this specific query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_profile.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"test\",\n  \"profile\": true,\n  \"query\":\n  {\n    \"match_phrase\": { \"_all\" : \"had grown quite\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Highlighting in JavaScript\nDESCRIPTION: Executes an asynchronous search with title highlighting using JavaScript Manticore client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.search({\"table\":\"products\",\"query\":{\"query_string\":\"@title remove hair\"}\"highlight\":{\"fields\":[\"title\"]}});\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (Java)\nDESCRIPTION: Adds an existing local table to a replication cluster using Java client. The SQL command is executed through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"ALTER CLUSTER click_query ADD clicks_daily_index\");\n```\n\n----------------------------------------\n\nTITLE: Configuring VIP Connection in Manticore Search\nDESCRIPTION: Example of configuring a separate MySQL port for VIP connections that bypass the thread pool. This is useful during severe server overload when the regular port might stall or prevent connections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n   listen = 127.0.0.1:9306:mysql\n   listen = 127.0.0.1:9307:mysql_vip\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Operators in Manticore Search\nDESCRIPTION: Shows wildcard operators for prefix, infix, and suffix searching. Requires min_infix_len or min_prefix_len settings and can impact search performance significantly.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nnation* *nation* *national\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in C#\nDESCRIPTION: Uses the C# API to create a table with a 'title' field that is both a string attribute and indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_51\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products ( title string attribute indexed )\");\n```\n\n----------------------------------------\n\nTITLE: Adding Percolate Rules via JSON\nDESCRIPTION: Shows two methods of adding percolate queries using JSON: using search-compatible format and SQL format. Includes examples of match queries and range filters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_rules_to_a_percolate_table.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nPUT /pq/pq_table/doc/1\n{\n  \"query\": {\n    \"match\": {\n      \"title\": \"shoes\"\n    },\n    \"range\": {\n      \"price\": {\n        \"gt\": 5\n      }\n    }\n  },\n  \"tags\": [\"Loius Vuitton\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Min Word Length via CONFIG File (INI)\nDESCRIPTION: This INI snippet sets the min_word_len in the table definition within a CONFIG file, controlling the mínimum length of words indexed by Manticore.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  min_word_len = 4\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (Rust)\nDESCRIPTION: Adds an existing local table to a replication cluster using Rust client. The SQL command is executed asynchronously through the utils_api.sql() method with a verbose flag.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"ALTER CLUSTER click_query ADD clicks_daily_index\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Altering Killlist Target for Plain Tables in Manticore Search (SQL)\nDESCRIPTION: This SQL command demonstrates how to change the killlist_target setting for a table without rebuilding it, using the ALTER statement.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Killlist_in_plain_tables.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE delta KILLLIST_TARGET='new_main_table:kl'\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via Java\nDESCRIPTION: Creates a percolate table using Java client's SQL interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, meta json) type='pq'\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Source and Table in Manticore Search\nDESCRIPTION: This snippet demonstrates how to configure a MySQL source and a corresponding table in Manticore Search. It includes settings for database connection, query definitions, and attribute specifications.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Execution_of_fetch_queries.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsource mysource {\n  type             = mysql\n  path             = /path/to/realtime\n  sql_host         = localhost\n  sql_user         = myuser\n  sql_pass         = mypass\n  sql_db           = mydb\n  sql_query_pre    = SET CHARACTER_SET_RESULTS=utf8\n  sql_query_pre    = SET NAMES utf8\n  sql_query        =  SELECT id, title, description, category_id  FROM mytable\n  sql_query_post   = DROP TABLE view_table\n  sql_query_post_index = REPLACE INTO counters ( id, val ) \\\n    VALUES ( 'max_indexed_id', $maxid )\n  sql_attr_uint    = category_id\n  sql_field_string = title\n }\n\ntable mytable {\n  type   = plain\n  source = mysource\n  path   = /path/to/mytable\n  ...\n }\n```\n\n----------------------------------------\n\nTITLE: Filtering Agent Status in C#\nDESCRIPTION: Demonstrates filtering agent status using C# client with SQL pattern matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_23\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"SHOW AGENT STATUS LIKE \\\"%5period%msec%\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in JSON\nDESCRIPTION: This JSON snippet shows how to create a table with a text field using the Manticore Search CLI API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Performance Metrics in Manticore Search\nDESCRIPTION: SQL command to view detailed performance metrics including insert/replace, search and update query statistics. Shows statistics over 1, 5 and 15 minute intervals.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATUS LIKE '%stats_ms%';\n```\n\n----------------------------------------\n\nTITLE: Installing Client Libraries for Manticore Indexer on Debian/Ubuntu\nDESCRIPTION: Command to install client libraries required by the Manticore indexer for connecting to various external storages like MySQL, PostgreSQL, XML, and ODBC.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Debian_and_Ubuntu.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libmysqlclient20 libodbc1 libpq5 libexpat1\n```\n\n----------------------------------------\n\nTITLE: JavaScript Aggregation Query\nDESCRIPTION: Performs a search with aggregations on price and brand_id fields, limiting results to 5 documents. Uses the searchApi to execute a match_all query with terms aggregations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"limit\":5,\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price\",\"size\":1,}},\"group_brand_id\":{\"terms\":{\"field\":\"brand_id\",\"size\":3}}}});\n```\n\n----------------------------------------\n\nTITLE: Constructing Search Query in Rust\nDESCRIPTION: Example of creating a search request in Rust with query string, MVA sorting options, and score tracking. Uses HashMaps for configuration and SearchRequest/SearchQuery structs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet query = SearchQuery {\n    query_string: Some(serde_json::json!(\"Test document\").into()),\n    ..Default::default(),\n};\nlet mut sort_mva_opts = HashMap::new();\nsort_mva_opts.insert(\"order\".to_string(), \"desc\".to_string());\nsort_mva_opts.insert(\"mode\".to_string(), \"max\".to_string());\nlet mut sort_mva = HashMap::new();\nsort_mva.insert(\"attr_mva\".to_string(), sort_mva_opts); \n\nlet search_req = SearchRequest {\n    table: \"test\".to_string(),\n    query: Some(Box::new(query)),\n    sort: Some(serde_json::json!(sort_mva)),\n    track_scores: Some(serde_json::json!(true)),\n    ..Default::default(),\n};\n```\n\n----------------------------------------\n\nTITLE: Joining a Manticore Cluster and Inserting Data\nDESCRIPTION: SQL commands to join a Manticore cluster and insert data into a replicated table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nmysql> JOIN CLUSTER posts AT 'manticore-1:9312';\nmysql> INSERT INTO posts:testrt(title,content,gid)  VALUES('hello','world',1);\nQuery OK, 1 row affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining 64-bit Multi-Value Attribute\nDESCRIPTION: Configuration for declaring a multi-valued attribute with signed 64-bit BIGINT values. This is useful for storing multiple large integer values in a single attribute.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_multi_64 = wide_tags\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter via JSON API\nDESCRIPTION: Sends a POST request to the Manticore `/cli` endpoint to execute a SQL `CREATE TABLE` statement. This command creates a 'products' table applying a specific `index_token_filter` plugin during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_112\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) index_token_filter = 'my_lib.so:custom_blend:chars=@#&'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Boolean Fields\nDESCRIPTION: Examples of creating a table with boolean fields, which are stored as 1-bit integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_64\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, sold bool );\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_bool = sold\n}\n```\n\n----------------------------------------\n\nTITLE: Searching in a Specific Field using JavaScript\nDESCRIPTION: Uses the JavaScript API to search in the 'products' table, looking only in the 'title' field for the word 'first'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.search({\"table\":\"products\",\"query\":{\"match\":{\"title\":\"first\"}}});\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in JSON\nDESCRIPTION: This JSON request retrieves the status of the replication cluster using the CLI interface, providing detailed information about the cluster configuration and state.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nSHOW STATUS\n\"\n```\n\n----------------------------------------\n\nTITLE: Javascript Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using Javascript. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_36\n\nLANGUAGE: Javascript\nCODE:\n```\n{\"items\":[{\"delete\":{\"table\":\"test\",\"deleted\":2}}],\"errors\":false}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Percolate Table in JSON\nDESCRIPTION: This JSON snippet shows how to create the same percolate rules via HTTP interface, using PUT requests to add different query rules to a percolate table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPUT /pq/products/doc/\n{\n  \"query\": {\n    \"match\": {\n      \"title\": \"bag\"\n    }\n  },\n  \"filters\": \"\"\n}\n\nPUT /pq/products/doc/\n{\n  \"query\": {\n    \"match\": {\n      \"title\": \"shoes\"\n    }\n  },\n  \"filters\": \"color='red'\"\n}\n\nPUT /pq/products/doc/\n{\n  \"query\": {\n    \"match\": {\n      \"title\": \"shoes\"\n    }\n  },\n  \"filters\": \"color IN ('blue', 'green')\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing INNER JOIN in SQL with WHERE Condition\nDESCRIPTION: Example of an INNER JOIN in SQL syntax that combines orders and customers tables. The query includes only orders that have matching customers and filters with a MATCH condition against the customers table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT product, customers.email, customers.name, customers.address\nFROM orders\nINNER JOIN customers\nON customers.id = orders.customer_id\nWHERE MATCH('maple', customers)\nORDER BY customers.email ASC;\n```\n\n----------------------------------------\n\nTITLE: SQL Faceted Search with Different Ordering\nDESCRIPTION: Demonstrates various ways to order faceted search results using SQL syntax. Shows ordering by facet value ascending, brand name ascending, and count descending.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM facetdemo\nFACET brand_name BY brand_id ORDER BY FACET() ASC\nFACET brand_name BY brand_id ORDER BY brand_name ASC\nFACET brand_name BY brand_id order BY COUNT(*) DESC;\nFACET brand_name BY brand_id order BY COUNT(*);\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Development (Nightly) Packages (Bash)\nDESCRIPTION: Installs the Manticore repository configuration (if not already present) and then installs the latest development ('Nightly') versions of Manticore packages, including core components, tools, debug symbols, and libraries, by enabling the `manticore-dev` repository. Requires `sudo` privileges.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/RHEL_and_Centos.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum -y install https://repo.manticoresearch.com/manticore-repo.noarch.rpm && \\\nsudo yum -y --enablerepo manticore-dev install manticore manticore-extra manticore-common manticore-server manticore-server-core manticore-tools manticore-executor manticore-buddy manticore-backup manticore-columnar-lib manticore-server-core-debuginfo manticore-tools-debuginfo manticore-columnar-lib-debuginfo  manticore-icudata manticore-galera manticore-galera-debuginfo manticore-language-packs manticore-load\n```\n\n----------------------------------------\n\nTITLE: Querying the Current Search Query using QUERY() in SQL\nDESCRIPTION: This SQL snippet demonstrates the use of the QUERY() function to retrieve the current search query string from within a result set. QUERY() is particularly intended for post-processing with functions like SNIPPET(), as it acts as a postlimit expression. The snippet assumes an operational Manticore Search environment and is dependent on the internal implementation of built-in functions. The key parameter is the current query context; no user-supplied arguments are required. Inputs are taken from the implicit query context, and the output is the query string itself. This function should be embedded in SELECT statements where post-query expression evaluation is required.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n`QUERY()`\n```\n\n----------------------------------------\n\nTITLE: SQL BACKUP Command Syntax\nDESCRIPTION: General syntax for the BACKUP SQL command with options for table selection, async processing, and compression\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nBACKUP\n  [{TABLE | TABLES} a[, b]]\n  [{OPTION | OPTIONS}\n    async = {on | off | 1 | 0 | true | false | yes | no}\n    [, compress = {on | off | 1 | 0 | true | false | yes | no}]\n  ]\n  TO path_to_backup\n```\n\n----------------------------------------\n\nTITLE: Building and Running All Tests\nDESCRIPTION: Commands for building Manticore Search from source and running the complete test suite using CMake and CTest.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/TESTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir build && cd build\n$ cmake ..\n$ make -j8 \n$ ctest -C Debug\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths via JSON API\nDESCRIPTION: Sends a POST request to the Manticore `/cli` endpoint to execute a SQL `CREATE TABLE` statement. This command creates a 'products' table with the `index_field_lengths` option set to '1', enabling field length storage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_101\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) index_field_lengths = '1'\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field using JSON API\nDESCRIPTION: Uses the CLI endpoint with JSON to create a table with a text field that is only indexed. The field will be available for searching but not stored for retrieval.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text indexed)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in Python Asyncio (Python-asyncio)\nDESCRIPTION: In this Python-asyncio snippet, creating a Manticoresearch table with minimum word length parameters is shown, ensuring efficient async execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_41\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) min_word_len = \\'4\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via Rust\nDESCRIPTION: Creates a percolate table using Rust client with async/await syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, meta json) type='pq'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by IDs in Manticore Search with PHP\nDESCRIPTION: Demonstrates how to delete multiple documents by their IDs using the PHP client. The method accepts an array of document IDs to be deleted from the index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$index->deleteDocumentsByIds([1,2]);\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using C# Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the C# client library's `Sql` method (`utilsApi`). This creates the 'products' table with the `index_field_lengths` option set to '1'. The boolean `true` parameter likely influences execution or result handling.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_107\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) index_field_lengths = '1'\", true);\n```\n\n----------------------------------------\n\nTITLE: Paginated Query Using Scroll in SQL for Manticore Search\nDESCRIPTION: Demonstrates how to use the scroll token in subsequent SQL queries to retrieve the next page of results. The scroll option is provided, and specifying the sort criteria is optional.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... [ORDER BY [... ,] id {ASC|DESC}] OPTION scroll='<base64 encoded scroll token>'[, ...];\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Optimize for RT Table Checking (SQL)\nDESCRIPTION: SQL commands to disable and re-enable auto-optimization when checking RT tables with indextool. This prevents unintended modifications to the RT table during the check process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Miscellaneous_tools.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL AUTO_OPTIMIZE=0;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL AUTO_OPTIMIZE=1;\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status using Python Asyncio\nDESCRIPTION: Shows how to asynchronously query Manticore Search agent status using Python with asyncio. Uses await keyword with utilsApi to execute the SQL command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('SHOW AGENT STATUS')\n```\n\n----------------------------------------\n\nTITLE: JSON API Response for Percolate Query Document Matching\nDESCRIPTION: Shows the JSON response format when matching documents to percolate queries. The _percolator_document_slot field indicates which document matched each query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_53\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 2,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"table\": \"products\",\n        \"_type\": \"doc\",\n        \"_id\": 1657852401006149644,\n        \"_score\": \"1\",\n        \"_source\": {\n          \"query\": {\n            \"ql\": \"@title bag\"\n          }\n        },\n        \"fields\": {\n          \"_percolator_document_slot\": [\n            2\n          ]\n        }\n      },\n      {\n        \"table\": \"products\",\n        \"_type\": \"doc\",\n        \"_id\": 1657852401006149646,\n        \"_score\": \"1\",\n        \"_source\": {\n          \"query\": {\n            \"ql\": \"@title shoes\"\n          }\n        },\n        \"fields\": {\n          \"_percolator_document_slot\": [\n            1\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unfreezing a Table in Manticore Search (SQL)\nDESCRIPTION: The UNFREEZE command decreases the table's locked counter and reactivates previously blocked operations when the counter reaches zero. It allows waiting operations to resume and complete normally.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Freezing_a_table.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUNFREEZE tbl1[, tbl2, ...]\n```\n\nLANGUAGE: sql\nCODE:\n```\nUNFREEZE tbl;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in Python\nDESCRIPTION: Uses the Python API to create a table with a text field that is only indexed, not stored. The field can be searched but its original content won't be returned in results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text indexed)')\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries in JavaScript\nDESCRIPTION: Shows how to use the JavaScript client to perform percolate query document matching. The JavaScript implementation uses async/await with the percolate method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await searchApi.percolate('products',{\"query\":{\"percolate\":{\"documents\":[{\"title\":\"nice pair of shoes\",\"color\":\"blue\"},{\"title\":\"beautiful bag\"}]}}});\n```\n\n----------------------------------------\n\nTITLE: Executing Search Query with Highlighting in C#\nDESCRIPTION: This C# snippet shows how to perform a search query with highlighting using the Manticore Search C# client. It searches for specific terms in the 'books' index and limits the highlight snippets to 50 characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"try|gets|down|said\");\nvar highlight = new Highlight();\nhighlight.Limit = 50;\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Search Response with Highlighted Results\nDESCRIPTION: Shows the JSON structure of a search response with highlighted results in TypeScript. The response includes document metadata and highlighted content with HTML tags marking the matched terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":2,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 1</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"_id\": 2,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 2\",\n\t\t\t\t\"name\":\"Doc 2\",\n\t\t\t\t\"cat\":2\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 2</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Client Connections\nDESCRIPTION: Sets the maximum number of simultaneous client connections allowed. VIP connections are excluded from this limit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nmax_connections = 10\n```\n\n----------------------------------------\n\nTITLE: TypeScript Response for Highlight Request\nDESCRIPTION: Example response from a TypeScript highlight request showing search results with document ID, score, source fields, and highlighted content snippet with HTML formatting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a table with a text field using the Manticore Search JavaScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text)');\n```\n\n----------------------------------------\n\nTITLE: Querying Server Variables with SHOW in SQL\nDESCRIPTION: Shows the syntax for retrieving current values of server-side variables using the SHOW [{GLOBAL | SESSION}] VARIABLES LIKE 'pattern' command. This statement allows users to inspect either global or session-level variables and filter them by specific patterns using the LIKE clause. No external dependencies are required beyond an SQL-compatible client (e.g., MySQL or SphinxQL client), and the command returns a tabular listing of variable names and their corresponding values, or a filtered subset if LIKE is specified.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_VARIABLES.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [{GLOBAL | SESSION}] VARIABLES LIKE 'pattern'\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using Python Asyncio Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement asynchronously using the Python asyncio client library's `sql` method (`utilsApi`). This creates the 'products' table specifying a custom `index_token_filter` plugin.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) index_token_filter = \\'my_lib.so:custom_blend:chars=@#&\\'')\n```\n\n----------------------------------------\n\nTITLE: Basic Cluster Join Operation\nDESCRIPTION: Demonstrates how to join an existing cluster by specifying the cluster name and host:port of another node. This is the simplest form of joining a replication cluster.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Joining_a_replication_cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nJOIN CLUSTER posts AT '10.12.1.35:9312'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"JOIN CLUSTER posts AT '10.12.1.35:9312'\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$params = [\n  'cluster' => 'posts',\n  'body' => [\n      '10.12.1.35:9312'\n  ]\n];\n$response = $client->cluster->join($params);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('JOIN CLUSTER posts AT \\'10.12.1.35:9312\\'')\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql('JOIN CLUSTER posts AT \\'10.12.1.35:9312\\'');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"JOIN CLUSTER posts AT '10.12.1.35:9312'\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"JOIN CLUSTER posts AT '10.12.1.35:9312'\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"JOIN CLUSTER posts AT '10.12.1.35:9312'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in SQL\nDESCRIPTION: Creates a table with a text field that is only indexed, not stored. This means the field can be searched but the original text won't be returned in query results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text indexed);\n```\n\n----------------------------------------\n\nTITLE: Configuring Query-Time Token Filter in Manticore Search\nDESCRIPTION: Example of using a query-time token filter during a search operation. This shows how to specify a custom token filter to process query terms before they're matched against the index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Token_filter_plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM index WHERE MATCH ('test') OPTION token_filter='my_lib.so:query_email_process:io'\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with HTML/XML Zone Indexing in Manticore Search\nDESCRIPTION: This snippet shows how to create a table with HTML/XML zone indexing enabled using SQL. It sets index_zones to index specific HTML tags and enables html_strip for proper functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Advanced_HTML_tokenization.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) index_zones = 'h, th, title' html_strip = '1'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) index_zones = 'h, th, title' html_strip = '1'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'index_zones' => 'h*,th,title',\n            'html_strip' => '1'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) index_zones = \\'h, th, title\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) index_zones = \\'h, th, title\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) index_zones = \\'h, th, title\\' html_strip = \\'1\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) index_zones = 'h, th, title' html_strip = '1'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) index_zones = 'h, th, title' html_strip = '1'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) index_zones = 'h, th, title' html_strip = '1'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  index_zones = h*, th, title\n  html_strip = 1\n  \n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Describing .spt File Structure for Document ID to Row ID Lookup in Manticore Search\nDESCRIPTION: This snippet outlines the structure of the .spt file used for mapping document IDs to row IDs. It includes the header format, checkpoint structure, and block composition. The file uses delta encoding and zint compression for efficient storage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ndword num_of_docs\ndword docs_per_checkpoint\ndocid-type max_doc_id\ncheckpoints[]\ncheckpoint is:\n\tdocid-type base_doc_id\n\toffset block_offset\nblocks[]\nblock is:\n\tuint32 base_row_id\n\tlookup_pair[]\n\tlookup_pair is:\n\t\tzint : docid-type, delta-encoded\n\t\tuint32 rowid\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status using JavaScript\nDESCRIPTION: Demonstrates how to query Manticore Search agent status using asynchronous JavaScript. Uses async/await syntax with utilsApi to execute the SQL command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT STATUS\");\n```\n\n----------------------------------------\n\nTITLE: SQL Status Commands\nDESCRIPTION: Examples of retrieving search status information using SHOW ENGINE and SHOW STATUS commands.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSHOW ENGINE SPHINX STATUS;\nSHOW STATUS LIKE 'sphinx_%';\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Java\nDESCRIPTION: Example of checking agent status using the Java client library. Executes SQL query to show agent metrics filtered for 15-period statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\");\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with Compression\nDESCRIPTION: Example of connecting to Manticore Search using the MySQL client with compression enabled. The -C flag enables compression, which can be used with both secured and non-secured connections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmysql -P9306 -h0 -C\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates by Query in Manticore Search using HTTP JSON\nDESCRIPTION: This snippet shows how to perform bulk updates by query using the /bulk endpoint. It updates the 'coeff' field based on price ranges in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nPOST /bulk\n\n{ \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 1000 }, \"query\": { \"range\": { \"price\": { \"gte\": 1000 } } } } }\n{ \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 0 }, \"query\": { \"range\": { \"price\": { \"lt\": 1000 } } } } }\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in Manticoresearch (JSON)\nDESCRIPTION: This JSON snippet initiates a creation request to Manticoresearch with a minimum word length configuration to control what words meet the indexing criteria.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) min_word_len = '4'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (SQL)\nDESCRIPTION: SQL command to create a table with a JSON field that has a secondary index in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, j json secondary_index='1')\n```\n\n----------------------------------------\n\nTITLE: Extracting Second from Timestamp with SECOND() in SQL\nDESCRIPTION: Executes the SECOND() function in SQL to extract the second part (0-59) from a given timestamp, interpreted according to the current timezone. This example uses NOW() to provide the current timestamp as input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect second(now());\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using PHP\nDESCRIPTION: This PHP code snippet uses the Manticore Search PHP client to create a distributed table named 'products'. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n    'body' => [\n        'settings' => [\n            'type' => 'distributed',\n            'local' => [\n                'index1',\n                'index2'\n            ]\n        ]\n    ],\n    'table' => 'products'\n];\n$index = new \\Manticoresearch\\Index($client);\n$index->create($params);\n```\n\n----------------------------------------\n\nTITLE: Filtering Agent Status in Rust\nDESCRIPTION: Shows how to filter agent status using Rust client with SQL pattern matching and async/await.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"SHOW AGENT STATUS LIKE \\\"%5period%msec%\\\"\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Defining Float Vector Attribute\nDESCRIPTION: Configuration for declaring a vector of floating-point values. This is useful for storing vector embeddings for semantic search or machine learning applications.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_float_vector = image_vector\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting with Go\nDESCRIPTION: Go implementation to search for 'Text 1' and highlight matches in the 'content' field with a limit of 1 using the Manticore client library with custom highlight configurations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_110\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nhighlightField := manticoreclient.NetHighlightField(\"content\")\nhighlightField.SetLimit(1);\nhighlightFields := []interface{} { highlightField } \nhighlight.SetFields(highlightFields)\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in PHP\nDESCRIPTION: Demonstrates how to create a table with bigram indexing using the PHP client. It sets the table name, defines fields, and configures bigram indexing options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'bigram_freq_words' => 'the, a, you, i',\n            'bigram_index' => 'both_freq'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Sorting Within Groups in SQL with Manticore Search\nDESCRIPTION: This SQL query shows how to sort elements within a group using 'WITHIN GROUP ORDER BY'. It returns the highest-rated film for each year, sorted by release year descending.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT release_year, title, rental_rate FROM films GROUP BY release_year WITHIN GROUP ORDER BY rental_rate DESC ORDER BY release_year DESC LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in JavaScript\nDESCRIPTION: This JavaScript code uses the utilsApi to execute an SQL query asynchronously, retrieving the status of the replication cluster with detailed information about the configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await utilsApi.sql('SHOW STATUS');\n```\n\n----------------------------------------\n\nTITLE: Handling Warnings in SQL Queries for Manticore Search\nDESCRIPTION: Shows how to execute a SQL query that generates a warning and how to display the warning using SHOW WARNINGS.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from tbl where match('\"joe\"/3'); show warnings;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+------+------+------+\n| id   | age  | name |\n+------+------+------+\n|    1 |   25 | joe  |\n+------+------+------+\n1 row in set, 1 warning (0.00 sec)\n\n+---------+------+--------------------------------------------------------------------------------------------+\n| Level   | Code | Message                                                                                    |\n+---------+------+--------------------------------------------------------------------------------------------+\n| warning | 1000 | quorum threshold too high (words=1, thresh=3); replacing quorum operator with AND operator |\n+---------+------+--------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Setting custom startup flags for Manticore using systemd in Linux\nDESCRIPTION: Commands to set custom startup flags for Manticore Search using systemd environment variables. This example sets the debug logging level.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl set-environment _ADDITIONAL_SEARCHD_PARAMS='--logdebug'\nsystemctl restart manticore\n```\n\n----------------------------------------\n\nTITLE: Using ANY with MVA in Manticore Search JOINs\nDESCRIPTION: When using the ANY() function with multi-valued attributes in JOINs, alias the multi-valued attribute from the joined table for proper reference.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, t2.m AS alias\nFROM t\nLEFT JOIN t2 ON t.id = t2.t_id\nWHERE ANY(alias) IN (3, 5)\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in PHP\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using PHP client in Manticore Search. Includes the 'with' parameter set to 'reconfigure'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$params = [ 'table' => 'products', 'with' => 'reconfigure' ];\n$response = $client->indices()->truncate($params);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with Rust in Manticore Search\nDESCRIPTION: Removes a table using the Rust client. This executes an SQL query through the utils_api.sql() method with async/await pattern.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\nlet sqlresult = utils_api.sql(\"DROP TABLE products\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Selecting with PACKEDFACTORS in JSON Format (SQL)\nDESCRIPTION: Retrieves calculated ranking factors in a structured JSON format using PACKEDFACTORS({json=1}), facilitating advanced debugging or integration with custom scripts or automation. Requires 'expr' ranker and is only applicable for matching queries. Output JSON contains detailed nested information on fields and words for each matched result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SELECT id, PACKEDFACTORS({json=1}) FROM test1\n    -> WHERE MATCH('test one') OPTION ranker=expr('1') \\G\n*************************** 1. row ***************************\n                     id: 1\npackedfactors({json=1}):\n{\n\n    \"bm25\": 569,\n    \"bm25a\": 0.617197,\n    \"field_mask\": 2,\n    \"doc_word_count\": 2,\n    \"fields\": [\n        {\n            \"lcs\": 1,\n            \"hit_count\": 2,\n            \"word_count\": 2,\n            \"tf_idf\": 0.152356,\n            \"min_idf\": -0.062982,\n            \"max_idf\": 0.215338,\n            \"sum_idf\": 0.152356,\n            \"min_hit_pos\": 4,\n            \"min_best_span_pos\": 4,\n            \"exact_hit\": 0,\n            \"max_window_hits\": 1,\n            \"min_gaps\": 2,\n            \"exact_order\": 1,\n            \"lccs\": 1,\n            \"wlccs\": 0.215338,\n            \"atc\": -0.003974\n        }\n    ],\n    \"words\": [\n        {\n            \"tf\": 1,\n            \"idf\": -0.062982\n        },\n        {\n            \"tf\": 1,\n            \"idf\": 0.215338\n        }\n    ]\n\n}\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields using JSON API\nDESCRIPTION: Uses the CLI endpoint with JSON to create a table with a 'title' text field and a 'keys' string attribute. String attributes store values as-is and are useful for metadata.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, keys string)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode using Javascript (JavaScript)\nDESCRIPTION: This JavaScript code snippet showcases an asynchronous request for creating a Manticoresearch table with blend_mode customizations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) blend_mode = \\'trim_tail, skip_pure\\' blend_chars = \\' +, &\\'');\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via JavaScript\nDESCRIPTION: Creates a percolate table using JavaScript client's SQL interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, meta json) type=\\'pq\\'');\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status with SQL in JavaScript\nDESCRIPTION: JavaScript code example demonstrating the use of `utilsApi.sql` for querying agent status, filtered by ‘15periods’ parameters, asynchronously handling the promise returned by the SQL execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_31\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\"\");\n```\n\nLANGUAGE: Javascript\nCODE:\n```\n{\"columns\": [{\"Key\": {\"type\": \"string\"}},\n              {\"Value\": {\"type\": \"string\"}}],\n \"data\": [\n\t{\"Key\": \"agent_15periods_query_timeouts\", \"Value\": \"0\"},\n\t{\"Key\": \"agent_15periods_connect_timeouts\", \"Value\": \"0\"},\n\t{\"Key\": \"agent_15periods_connect_failures\", \"Value\": \"0\"},\n    {\"Key\": \"agent_15periods_network_errors\", \"Value\": \"0\"},\n    {\"Key\": \"agent_15periods_connect_failures\", \"Value\": \"0\"},\n    {\"Key\": \"agent_15periods_wrong_replies\", \"Value\": \"0\"},\n    {\"Key\": \"agent_15periods_unexpected_closings\", \"Value\": \"0\"},\n    {\"Key\": \"agent_15periods_warnings\", \"Value\": \"0\"},\n    {\"Key\": \"agent_15periods_succeeded_queries\", \"Value\": \"439\"},\n    {\"Key\": \"agent_15periods_msecsperquery\", \"Value\": \"233.73\"},\n    ],\n \"error\": \"\",\n \"total\": 0,\n \"warning\": \"\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in Python\nDESCRIPTION: This Python code creates a table 'products' with blended characters configuration using the Manticore Search Python client, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) blend_chars = \\'+, &, U+23, @->_\\'')\n```\n\n----------------------------------------\n\nTITLE: Executing Percolation Query with SQL\nDESCRIPTION: Executes a percolation query on a 'products' dataset using SQL. The query accepts multiple documents in either plain text or JSON format. It outputs results including document id, query, and filters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ('products', ('nice pair of shoes', 'beautiful bag'), 1 as query, 0 as docs_json);\n\nCALL PQ('products', ('{\"title\": \"nice pair of shoes\", \"color\": \"red\"}', '{\"title\": \"beautiful bag\"}'), 1 as query);\n\nCALL PQ('products', '[{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}, {\"title\": \"beautiful bag\"}]', 1 as query);\n```\n\n----------------------------------------\n\nTITLE: MVA Grouping with JSON API\nDESCRIPTION: Example of grouping MVA data using JSON API with aggregation terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"table\" : \"shoes\",\n \"limit\": 0,\n \"aggs\" : {\n    \"sizes\" : {\n        \"terms\" : {\n          \"field\":\"sizes\",\n          \"size\":100\n        }\n    }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Go\nDESCRIPTION: Executes a SQL query to show agent status using the Go client. Uses the UtilsAPI to execute the query in a given context and returns structured status information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_45\n\nLANGUAGE: go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\"\").Execute()\n```\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"columns\":\n\t[{\n\t\t\"Key\": {\"type\": \"string\"}},\n        {\"Value\": {\"type\": \"string\"}\n\t}],\n\t\"data\":\n\t[\n\t\t{\"Key\": \"dstindex_1_is_ha\", \"Value\": \"1\"},\n\t\t{\"Key\": \"dstindex_1mirror1_id\", \"Value\": \"192.168.0.202:6713:loc\"},\n\t\t{\"Key\": \"dstindex_1mirror1_probability_weight\", \"Value\": \"0.372864\"},\n\t    {\"Key\": \"dstindex_1mirror1_is_blackhole\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror1_is_persistent\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror2_id\", \"Value\": \"192.168.0.202:6714:loc\"},\n\t    {\"Key\": \"dstindex_1mirror2_probability_weight\", \"Value\": \"0.374635\"},\n\t    {\"Key\": \"dstindex_1mirror2_is_blackhole\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror2_is_persistent\", \"Value\": \"439\"},\n\t    {\"Key\": \"dstindex_1mirror3_id\", \"Value\": \"dev1.manticoresearch.com:6714:loc\"},\n\t    {\"Key\": \"dstindex_1mirror3_probability_weight\", \"Value\": \" 0.252501\"},\n\t    {\"Key\": \"dstindex_1mirror3_is_blackhole\", \"Value\": \"0\"},\n\t    {\"Key\": \"dstindex_1mirror3_is_persistent\", \"Value\": \"439\"}    \n    ],\n\t\"error\": \"\",\n\t\"total\": 0,\n\t\"warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Morphology Preprocessors in Manticore Search\nDESCRIPTION: This snippet demonstrates how to set up morphology preprocessors using the 'morphology' directive. It shows how to apply English stemming and Swedish libstemmer to a 'products' table with 'title' and 'price' fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Morphology.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nmorphology = morphology1[, morphology2, ...]\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) morphology = 'stem_en, libstemmer_sv'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, price float)  morphology = 'stem_en, libstemmer_sv'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'morphology' => 'stem_en, libstemmer_sv'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) morphology = \\'stem_en, libstemmer_sv\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) morphology = \\'stem_en, libstemmer_sv\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) morphology = \\'stem_en, libstemmer_sv\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) morphology = 'stem_en, libstemmer_sv'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) morphology = 'stem_en, libstemmer_sv'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) morphology = 'stem_en, libstemmer_sv'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  morphology = stem_en, libstemmer_sv\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in C#\nDESCRIPTION: Shows how to create a table with a multi64 field in C# using SQL through the utils API. The multi64 type allows storing variable-length lists of 64-bit signed integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_94\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, values multi64))\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in Go\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using Go. The method requires creating a DeleteDocumentRequest object with the table name, setting the cluster name, and document ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\ndeleteRequest := manticoresearch.NewDeleteDocumentRequest(\"test\")\ndeleteRequest.SetCluster(\"cluster_1\")\ndeleteRequest.SetId(1)\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries in Java\nDESCRIPTION: Shows how to use the Java client to perform percolate query document matching. The Java implementation builds nested Maps and Lists to create the query structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_62\n\nLANGUAGE: Java\nCODE:\n```\npercolateRequest = new PercolateRequest();\nquery = new HashMap<String,Object>(){{\n        put(\"percolate\",new HashMap<String,Object >(){{\n            put(\"documents\", new ArrayList<Object>(){{\n                    add(new HashMap<String,Object >(){{\n                        put(\"title\",\"nice pair of shoes\");\n                        put(\"color\",\"blue\");\n                    }});\n                    add(new HashMap<String,Object >(){{\n                        put(\"title\",\"beautiful bag\");\n\n                    }});\n\n                     }});\n        }});\n    }};\npercolateRequest.query(query);\nsearchApi.percolate(\"products\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scroll Token in SQL for Manticore Search\nDESCRIPTION: Shows how to retrieve the scroll token after executing the initial query in SQL using the SHOW SCROLL command. This token is used for subsequent paginated queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCROLL;\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Mirrors with Different Table Names in Manticore Search (INI)\nDESCRIPTION: This example shows how to configure agent mirrors with different table names for each node. It uses two nodes (node1, node2) with tables named 'node1shard2' and 'node2shard2' respectively.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Mirroring.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nagent = node1:9312:node1shard2|node2:9312:node2shard2\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Key Path\nDESCRIPTION: Specifies path to SSL certificate private key file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_66\n\nLANGUAGE: ini\nCODE:\n```\nssl_key = keys/server-key.pem\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status using Python\nDESCRIPTION: Demonstrates how to query Manticore Search agent status using synchronous Python code. Uses the utilsApi to execute an SQL command and returns detailed agent statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('SHOW AGENT STATUS')\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using SQL\nDESCRIPTION: SQL statement to create a Manticore Search table named 'products'. The `index_token_filter` option specifies a custom token filter plugin (`my_lib.so:custom_blend`) with specific settings (`chars=@#&`) to be applied during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_111\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) index_token_filter = 'my_lib.so:custom_blend:chars=@#&'\n```\n\n----------------------------------------\n\nTITLE: Automatic Commit Example in Manticore Search\nDESCRIPTION: Demonstrates default behavior with autocommit enabled. Inserted values are immediately visible in subsequent queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into indexrt (id, content, title, channel_id, published) values (1, 'aa', 'blabla', 1, 10);\nQuery OK, 1 rows affected (0.00 sec)\n\nselect * from indexrt where id=1;\n+------+------------+-----------+--------+\n| id   | channel_id | published | title  |\n+------+------------+-----------+--------+\n|    1 |          1 |        10 | blabla |\n+------+------------+-----------+--------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in Python-asyncio\nDESCRIPTION: Demonstrates creating a table with a multi64 field in Python using asyncio for asynchronous execution. This data type allows storing variable-length lists of 64-bit signed integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, values multi64))')\n```\n\n----------------------------------------\n\nTITLE: SphinxSE Query with Float Range Filter\nDESCRIPTION: Example of a SphinxSE search query using a floating-point range filter to match documents with float attribute values within a specified range.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n# filter by a float size\n... WHERE query='test;floatrange=size,2,3;';\n```\n\n----------------------------------------\n\nTITLE: Extracting Minute from Timestamp with MINUTE() in SQL\nDESCRIPTION: Executes the MINUTE() function in SQL to extract the minute part (0-59) from a given timestamp, interpreted according to the current timezone. This example uses NOW() to provide the current timestamp as input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect minute(now());\n```\n\n----------------------------------------\n\nTITLE: SQL Join Example\nDESCRIPTION: Example of joining SphinxSE search results with regular MySQL tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT content, date_added FROM test.documents docs\n-> JOIN t1 ON (docs.id=t1.id)\n-> WHERE query=\"one document;mode=any\";\n```\n\n----------------------------------------\n\nTITLE: Searching in a Specific Field using Python\nDESCRIPTION: Uses the Python API to search in the 'products' table, looking only in the 'title' field for the word 'first'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nsearchApi.search({\"table\":\"products\",\"query\":{\"match\":{\"title\":\"first\"}}})\n```\n\n----------------------------------------\n\nTITLE: Altering Table Schema in SQL for Manticore Search\nDESCRIPTION: SQL commands for adding, dropping, and modifying columns in Manticore Search tables. Supports various data types and includes options for indexed and stored fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table ADD COLUMN column_name [{INTEGER|INT|BIGINT|FLOAT|BOOL|MULTI|MULTI64|JSON|STRING|TIMESTAMP|TEXT [INDEXED [ATTRIBUTE]]}] [engine='columnar']\n\nALTER TABLE table DROP COLUMN column_name\n\nALTER TABLE table MODIFY COLUMN column_name bigint\n```\n\n----------------------------------------\n\nTITLE: Utilizing REMAP() Function for Conditional Value Mapping in Manticore SQL\nDESCRIPTION: Shows how to use the REMAP() function to conditionally map values based on specified conditions and expressions in Manticore SQL queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Arrays_and_conditions_functions.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, size, REMAP(size, 15, (5,6,7,8), (1,1,2,2)) s\nFROM products\nORDER BY s ASC;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT REMAP(userid, karmapoints, (1, 67), (999, 0)) FROM users;\nSELECT REMAP(id%10, salary, (0), (0.0)) FROM employes;\n```\n\n----------------------------------------\n\nTITLE: SQL Command Reference - SNIPPETS()\nDESCRIPTION: Reference to the SNIPPETS() function that was fixed to resolve crashes when used with libstemmer_fr and index_exact_words.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSNIPPETS()\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid JSONs in SQL Percolate Queries\nDESCRIPTION: Demonstrates how to handle invalid JSONs in percolate queries using the skip_bad_json option. Shows different scenarios with valid and invalid JSON inputs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_70\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ('products', ('{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}', '{\"title\": \"beautiful bag\"}'));\n\nCALL PQ('products', ('{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}', '{\"title\": \"beautiful bag}'));\n\nCALL PQ('products', ('{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}', '{\"title\": \"beautiful bag}'), 1 as skip_bad_json);\n```\n\n----------------------------------------\n\nTITLE: Manticore Search API Response Format for Status Query\nDESCRIPTION: This code block shows the expected response format from the Manticore Search API after executing a 'SHOW STATUS' query. The response includes cluster information such as name, state, nodes, and indexes in a structured JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\n{\ncolumns=[{ Key : { type=String }},\n              { Value : { type=String }}],\n  data : [\n\t{ Key=cluster_name, Value=post},\n\t{ Key=cluster_post_state_uuid, Value=fba97c45-36df-11e9-a84e-eb09d14b8ea7},\n\t{ Key=cluster_post_conf_id, Value=1},\n\t{ Key=cluster_post_status, Value=primary},\n\t{ Key=cluster_post_size, Value=5},\n\t{ Key=cluster_post_local_index, Value=0},\n\t{ Key=cluster_post_node_state, Value=synced},\n\t{ Key=cluster_post_indexes_count, Value=2},\n\t{ Key=cluster_post_indexes, Value=pq1,pq_posts},\n\t{ Key=cluster_post_nodes_set, Value=10.10.0.1:9312},\n\t{ Key=cluster_post_nodes_view, Value=10.10.0.1:9312,10.10.0.1:9320:replication,10.10.1.1:9312,10.10.1.1:9320:replication}],\n  error=\"\" ,\n  total=0,\n  warning=\"\" }\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with Java in Manticore Search\nDESCRIPTION: Shows how to perform a search with highlighting using the Java client. The code creates a search request with a match query and configures highlighting options for the 'content' field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_121\n\nLANGUAGE: java\nCODE:\n```\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"books\");\nquery = new HashMap<String,Object>();\nquery.put(\"match\",new HashMap<String,Object>(){{\n    put(\"*\",\"one|robots\");\n}});        \nsearchRequest.setQuery(query);\nhighlight = new HashMap<String,Object>(){{\n    put(\"limits_per_field\",0);\n    put(\"fields\",new HashMap<String,Object>(){{\n            put(\"content\",new HashMap<String,Object>(){{\n                put(\"limit\",50);\n            }});\n        }}\n    );\n}};\nsearchRequest.setHighlight(highlight);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table without Explicit ID Field in SQL\nDESCRIPTION: This SQL snippet demonstrates creating a table without explicitly defining an ID field, which is automatically added by Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tbl(content text);\nDESC tbl;\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via Python-asyncio\nDESCRIPTION: Creates a forum table asynchronously using Python asyncio.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE forum(title text, price float)')\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying String Attribute Field in RT Mode\nDESCRIPTION: Example showing how to create a table with a string attribute field that is both indexed and searchable, then performing search queries using both full-text and exact matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t(f string attribute indexed);\ninsert into t values(0,'abc','abc');\nselect * from t where match('abc');\n+---------------------+------+\n| id                  | f    |\n+---------------------+------+\n| 2810845392541843463 | abc  |\n+---------------------+------+\n1 row in set (0.01 sec)\n\nmysql> select * from t where f='abc';\n+---------------------+------+\n| id                  | f    |\n+---------------------+------+\n| 2810845392541843463 | abc  |\n+---------------------+------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring index_field_lengths in Manticore INI\nDESCRIPTION: Defines a Manticore Search real-time table named 'products' in the configuration file format (`.ini`). It sets the `index_field_lengths` option to '1', enabling the computation and storage of field lengths during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_109\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  index_field_lengths = 1\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Standalone Negation in SQL\nDESCRIPTION: Demonstrates how to use the 'not_terms_only_allowed' option to enable standalone negation in a Manticore Search query. This allows for queries that only contain negated terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nMySQL [(none)]> select * from tbl where match('-donald');\nERROR 1064 (42000): index t: query error: query is non-computable (single NOT operator)\nMySQL [(none)]> select * from t where match('-donald') option not_terms_only_allowed=1;\n+---------------------+-----------+\n| id                  | field     |\n+---------------------+-----------+\n| 1658178727135150081 | smth else |\n+---------------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Using RAND() Function in Manticore Search SQL\nDESCRIPTION: The RAND() function returns a random float value in the range from 0 to 1. It can be used to return random rows from a result set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, RAND() as random FROM myindex ORDER BY random ASC LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Executing ALTER Commands on Manticore Search Tables\nDESCRIPTION: Demonstrates the use of ALTER commands to add, drop, and modify columns in a Manticore Search table. Shows the table structure before and after each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> desc rt;\n+------------+-----------+\n| Field      | Type      |\n+------------+-----------+\n| id         | bigint    |\n| text       | field     |\n| group_id   | uint      |\n| date_added | timestamp |\n+------------+-----------+\n\nmysql> alter table rt add column test integer;\n\nmysql> desc rt;\n+------------+-----------+\n| Field      | Type      |\n+------------+-----------+\n| id         | bigint    |\n| text       | field     |\n| group_id   | uint      |\n| date_added | timestamp |\n| test       | uint      |\n+------------+-----------+\n\nmysql> alter table rt drop column group_id;\n\nmysql> desc rt;\n+------------+-----------+\n| Field      | Type      |\n+------------+-----------+\n| id         | bigint    |\n| text       | field     |\n| date_added | timestamp |\n| test       | uint      |\n+------------+-----------+\n\nmysql> alter table rt add column title text indexed;\n\nmysql> desc rt;\n+------------+-----------+------------+\n| Field      | Type      | Properties |\n+------------+-----------+------------+\n| id         | bigint    |            |\n| text       | text      | indexed    |\n| title      | text      | indexed    |\n| date_added | timestamp |            |\n| test       | uint      |            |\n+------------+-----------+------------+\n\nmysql> alter table rt add column title text attribute;\n\nmysql> desc rt;\n+------------+-----------+------------+\n| Field      | Type      | Properties |\n+------------+-----------+------------+\n| id         | bigint    |            |\n| text       | text      | indexed    |\n| title      | text      | indexed    |\n| date_added | timestamp |            |\n| test       | uint      |            |\n| title      | string    |            |\n+------------+-----------+------------+\n\nmysql> alter table rt drop column title;\n\nmysql> desc rt;\n+------------+-----------+------------+\n| Field      | Type      | Properties |\n+------------+-----------+------------+\n| id         | bigint    |            |\n| text       | text      | indexed    |\n| title      | text      | indexed    |\n| date_added | timestamp |            |\n| test       | uint      |            |\n+------------+-----------+------------+\nmysql> alter table rt drop column title;\n\nmysql> desc rt;\n+------------+-----------+------------+\n| Field      | Type      | Properties |\n+------------+-----------+------------+\n| id         | bigint    |            |\n| text       | text      | indexed    |\n| date_added | timestamp |            |\n| test       | uint      |            |\n+------------+-----------+------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Manticore Build with CMake - Bash\nDESCRIPTION: This snippet outlines the steps to configure the Manticore Search build using CMake. It involves creating a build directory and running CMake to set up the build environment. Dependencies include CMake, and the script handles feature detection and configuration. The only input needed is the source directory path, and the output is a configured build ready for compilation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build \\&\\& cd build\ncmake ..\n```\n\n----------------------------------------\n\nTITLE: Performing LEFT JOIN in SQL with Sorting\nDESCRIPTION: Example of a LEFT JOIN in SQL syntax that retrieves all customers along with their corresponding orders. If no matching order exists for a customer, NULL values will appear in the order columns. Results are sorted by email.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\nname, orders.quantity\nFROM customers\nLEFT JOIN orders\nON orders.customer_id = customers.id\nORDER BY email ASC;\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status with SQL in Rust\nDESCRIPTION: The Rust example executes a SQL query using an async function to retrieve status data for a specified agent, helping demonstrate Rust's handling of async API calls with potential error handling integrations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_34\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\"\", Some(true)).await;\n```\n\nLANGUAGE: Rust\nCODE:\n```\n{columns=[{Key={type=string}},\n              {Value={type=string}}],\n data=[\n\t{Key=agent_15periods_query_timeouts, Value=0},\n\t{Key=agent_15periods_connect_timeouts, Value=0},\n\t{Key=agent_15periods_connect_failures, Value=0},\n    {Key=agent_15periods_network_errors, Value=0},\n    {Key=agent_15periods_connect_failures, Value=0},\n    {Key=agent_15periods_wrong_replies, Value=0},\n    {Key=agent_15periods_unexpected_closings, Value=0},\n    {Key=agent_15periods_warnings, Value=0},\n    {Key=agent_15periods_succeeded_queries, Value=439},\n    {Key=agent_15periods_msecsperquery, Value=233.73},\n    ],\n error=\"\",\n total=0,\n warning=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with Rust in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause through the Rust client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\nlet sqlresult = utils_api.sql(\"DROP TABLE IF EXISTS products\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Sample Output with Highlighted Results - ManticoreSearch PHP\nDESCRIPTION: This is a sample output of the PHP search and highlight operations. It displays the document ID, original field content, and all highlight snippets for matched fields. This output structure is typical of PHP usage in CLI or for debugging, and assumes the given PHP SDK and library methods. Actual output will depend on the indexed document data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nDocument: 1\ntitle : Books one\ncontent : They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it.\nHighlight for title:\n- Books <b>one</b>\nHighlight for content:\n- They followed Bander. The <b>robots</b> remained at a polite distance,\n-  three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander\n-  gestured the other <b>robots</b> away and entered itself. The\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in Python\nDESCRIPTION: This Python snippet shows how to create a table with a text field using the Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text)')\n```\n\n----------------------------------------\n\nTITLE: Using CALL QSUGGEST with Sentence Correction in SQL\nDESCRIPTION: Demonstrates how to use CALL QSUGGEST with the 'sentence' option to return the entire corrected sentence. It replaces the last word with its suggested correction.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCALL QSUGGEST('bag with tasel', 'products', 1 as sentence);\n```\n\nLANGUAGE: sql\nCODE:\n```\n+-------------------+----------+------+\n| suggest           | distance | docs |\n+-------------------+----------+------+\n| bag with tassel   | 1        | 1    |\n+-------------------+----------+------+\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using Rust\nDESCRIPTION: This Rust code uses the asynchronous Manticore Search API to execute an SQL statement that creates a distributed table named 'local_dist'. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE local_dist type='distributed' local='index1' local='index2'\", Some(true)).await\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status with SQL in C#\nDESCRIPTION: Using C# to execute a SQL query to obtain an agent's status, focusing on specific '15periods' metrics. The C# implementation is synchronous, making it suitable for environments where delayed processing is manageable.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\"\");\n```\n\nLANGUAGE: C#\nCODE:\n```\n{columns=[{Key={type=string}},\n              {Value={type=string}}],\n data=[\n\t{Key=agent_15periods_query_timeouts, Value=0},\n\t{Key=agent_15periods_connect_timeouts, Value=0},\n\t{Key=agent_15periods_connect_failures, Value=0},\n    {Key=agent_15periods_network_errors, Value=0},\n    {Key=agent_15periods_connect_failures, Value=0},\n    {Key=agent_15periods_wrong_replies, Value=0},\n    {Key=agent_15periods_unexpected_closings, Value=0},\n    {Key=agent_15periods_warnings, Value=0},\n    {Key=agent_15periods_succeeded_queries, Value=439},\n    {Key=agent_15periods_msecsperquery, Value=233.73},\n    ],\n error=\"\",\n total=0,\n warning=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Tag Stripping in Manticore Search\nDESCRIPTION: This snippet demonstrates how to enable HTML tag stripping when creating a table in Manticore Search. The html_strip option is set to '1' to enable stripping of HTML markup from the incoming full-text data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Advanced_HTML_tokenization.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) html_strip = '1'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) html_strip = '1'\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'html_strip' => '1'\n        ]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) html_strip = \\'1\\'')\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) html_strip = \\'1\\'')\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) html_strip = \\'1\\'');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) html_strip = '1'\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) html_strip = '1'\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) html_strip = '1'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  html_strip = 1\n  \n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore with Python Asyncio Client\nDESCRIPTION: Python code using asyncio to initialize and configure the Manticore Search Python async client library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n// https://github.com/manticoresoftware/manticoresearch-python-asyncio\nimport manticoresearch\nconfig = manticoresearch.Configuration(\n    host = \"http://127.0.0.1:9308\"\n)\nasync with manticoresearch.ApiClient(config) as client:\n    indexApi = manticoresearch.IndexApi(client)\n    searchApi = manticoresearch.searchApi(client)\n    utilsApi = manticoresearch.UtilsApi(client)\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with Python-asyncio in Manticore Search\nDESCRIPTION: This Python-asyncio snippet demonstrates how to perform an asynchronous percolate query using the Manticore Search Python client. It uses the await keyword with searchApi.percolate() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.percolate('pq',{\"percolate\":{\"documents\":[{\"title\":\"angry test\",\"gid\":3},{\"title\":\"filter test doc2\",\"gid\":13}]}})\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using Java Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Java client library's `sql` method (`utilsApi`). This creates the 'products' table specifying a custom `index_token_filter` plugin. The boolean `true` parameter likely influences execution or result handling.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_117\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) index_token_filter = 'my_lib.so:custom_blend:chars=@#&'\", true);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Ignored Characters\nDESCRIPTION: Creates a products table with specific characters to ignore during indexing, such as the soft hyphenation mark (U+AD).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_59\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) ignore_chars = 'U+AD'\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'ignore_chars' => 'U+AD'\n        ]);\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  ignore_chars = U+AD\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum, Min, Max, and Avg by Release Year\nDESCRIPTION: This SQL snippet computes aggregate values like sum, min, max, and average rental rates grouped by release year from a 'films' table. It serves to provide an overview of rental rates distributed over the years 2000 to 2004.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT release_year year, sum(rental_rate) sum, min(rental_rate) min, max(rental_rate) max, avg(rental_rate) avg FROM films GROUP BY release_year ORDER BY year asc LIMIT 5;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n+------+------------+----------+----------+------------+\n| year | sum        | min      | max      | avg        |\n+------+------------+----------+----------+------------+\n| 2000 | 308.030029 | 0.990000 | 4.990000 | 3.17556739 |\n| 2001 | 282.090118 | 0.990000 | 4.990000 | 3.09989142 |\n| 2002 | 332.919983 | 0.990000 | 4.990000 | 3.08259249 |\n| 2003 | 310.940063 | 0.990000 | 4.990000 | 2.93339682 |\n| 2004 | 300.920044 | 0.990000 | 4.990000 | 2.78629661 |\n+------+------------+----------+----------+------------+\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW THREADS via Java Client\nDESCRIPTION: Example of using the Manticore Search Java client to execute the SHOW THREADS command through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"SHOW THREADS\");\n```\n\n----------------------------------------\n\nTITLE: Searching Percolate Queries with JSON in Manticore Search\nDESCRIPTION: This JSON request performs a search on the 'pq' index to retrieve all stored percolate queries. It returns the query strings, tags, and filters for each stored query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_72\n\nLANGUAGE: json\nCODE:\n```\nPOST /pq/pq/_search\n```\n\n----------------------------------------\n\nTITLE: Using DATE_RANGE with Date Math for Custom Period Grouping\nDESCRIPTION: Example of using DATE_RANGE with date math expressions to create custom date range buckets. This query groups data into three periods: before April 2017, April-July 2017, and after July 2017.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*),\nDATE_RANGE(tm, {range_to='2017||+2M/M'},{range_from='2017||+2M/M',range_to='2017||+5M/M'},{range_from='2017||+5M/M'}) AS points\nFROM idx_dates\nGROUP BY points ORDER BY points ASC;\n```\n\n----------------------------------------\n\nTITLE: CSV Data Format Example\nDESCRIPTION: Sample CSV data format showing how to structure data with document ID, name, and multi-value genre tags. Fields are comma-separated and properly quoted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_CSV,TSV.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n1,\"Led Zeppelin\",\"35,23,16\"\n2,\"Deep Purple\",\"35,92\"\n3,\"Frank Zappa\",\"35,23,16,92,33,24\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pseudo Sharding\nDESCRIPTION: This configuration enables or disables the pseudo sharding feature, which can parallelize queries based on the available threads, enhancing query performance under certain conditions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\npseudo_sharding = 0\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Aggregation in Manticore with Python Asyncio\nDESCRIPTION: This Python asyncio snippet performs an aggregation on the 'color' field using Manticore Search's async API. Requires the async adaptation of Python client for Manticore.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"products\",\"limit\":0,\"aggs\":{\"color\":{\"terms\":{\"field\":\"meta.color\",\"size\":100}}}})\n```\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': {u'color': {u'buckets': [{u'doc_count': 1,\n                                           u'key': u'green'},\n                                          {u'doc_count': 2, u'key': u'red'}]}},\n 'hits': {'hits': [], 'max_score': None, 'total': 3},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Result Set Window with max_matches in SQL for Manticore Search\nDESCRIPTION: Demonstrates how to use the max_matches option in SQL to adjust the result set window. This can be used to increase or decrease the number of documents that can be returned in the result set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT  ... FROM ...   OPTION max_matches=<value>\n```\n\n----------------------------------------\n\nTITLE: Using CREATE PLUGIN for a Ranker Plugin Example (SQL)\nDESCRIPTION: Demonstrates a concrete example of loading a custom ranker plugin in Manticore Search, using the SQL CREATE PLUGIN statement. In this example, 'myranker' is created as a 'ranker' type plugin and linked with the shared object library 'myplugins.so'. After execution, the output confirms successful loading with no row modifications. Requires that the shared library file is accessible and that the plugin follows the correct interface and type conventions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Creating_a_plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> CREATE PLUGIN myranker TYPE 'ranker' SONAME 'myplugins.so';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Columnar Table with Mixed Attribute Engines in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a table with columnar storage as the default engine, while specifying a specific attribute to use row-wise storage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table tbl(title text, type int, price float engine='rowwise') engine='columnar'\n```\n\n----------------------------------------\n\nTITLE: Creating Table with RegExp Filter in JavaScript\nDESCRIPTION: Creates a table named 'products' with text and float columns using regexp_filter to map color terms. Uses asynchronous JavaScript API with await.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) regexp_filter = \\'(blue|red) => color\\'');\n```\n\n----------------------------------------\n\nTITLE: Converting Case with UPPER() and LOWER() in Manticore Search SQL\nDESCRIPTION: Demonstrates how to use the UPPER() and LOWER() functions to convert strings to uppercase or lowercase, with examples of numeric type promotion for convertible strings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/String_functions.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT upper('www.w3schools.com', '.', 2); /* WWW.W3SCHOOLS.COM  */\nSELECT double (upper ('1.2e3')); /* 1200.000000 */\nSELECT integer (lower ('12345')); /* 12345 */\n```\n\n----------------------------------------\n\nTITLE: Filtering MVA with ANY/ALL Conditions\nDESCRIPTION: Demonstrates how to filter MVA fields using ANY() or ALL() conditions to match specific values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from products where any(product_codes)=3\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"products\",\n  \"query\":\n  {\n    \"match_all\": {},\n    \"equals\" : { \"any(product_codes)\": 3 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Python\nDESCRIPTION: Shows how to query agent metrics using the Python client library. Makes a SQL query to show agent status filtered for 15-period metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('SHOW AGENT \\'192.168.0.202:6714\\' STATUS LIKE \\'%15periods%\\'')\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type and Package Information for Manticore Search\nDESCRIPTION: Sets the default build type to RelWithDebInfo if not specified, configures the build tag, and sets package information for Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Set a default build type for single-configuration CMake generators if no build type is set.\nget_property ( isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )\nif (NOT isMultiConfig AND NOT CMAKE_BUILD_TYPE)\n\tset ( CMAKE_BUILD_TYPE RelWithDebInfo )\n\tmessage ( STATUS \"Automatically set build type to RelWithDebInfo since no other provided\" )\nendif ()\n\nif (WIN32 AND WIN_BUNDLE)\n\tlist ( APPEND CMAKE_PREFIX_PATH \"${WIN_BUNDLE}\" )\n\tset ( CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE )\nendif ()\n\nif (NOT DEFINED BUILD_TAG AND DEFINED ENV{BUILD_TAG})\n\tset ( BUILD_TAG $ENV{BUILD_TAG} CACHE STRING \"The tag which will be added to build\" )\nelseif (NOT DEFINED BUILD_TAG)\n\tset ( BUILD_TAG \"\" CACHE STRING \"The tag which will be added to build\" )\nendif()\nset ( PACKAGE_NAME \"manticore\" )\nset ( COMPANY_NAME \"Manticore Software LTD\" )\nset ( CPACK_PACKAGE_NAME \"${PACKAGE_NAME}\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Table Type in Manticore Search Configuration\nDESCRIPTION: Specifies the table type as either 'plain' or 'rt' (real-time) in Manticore Search configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ntype = plain\n\ntype = rt\n```\n\n----------------------------------------\n\nTITLE: Checking Read-only Status in SQL\nDESCRIPTION: SQL query to check if the current connection is in read-only mode. Returns 1 for read-only and 0 for normal mode.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/Read_only.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nshow variables like 'session_read_only'\n```\n\n----------------------------------------\n\nTITLE: Configuring shutdown_token in Manticore Search\nDESCRIPTION: The shutdown_token setting requires a SHA1 hash of a password to invoke the shutdown command using DEBUG.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nSET shutdown_token = '<SHA1 hash of password>'\n```\n\n----------------------------------------\n\nTITLE: Rust Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using Rust. The response includes the index name, document ID, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\nclass DeleteResponse {\n    index: test\n    _id: 1\n    result: deleted\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using Python Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Python client library's `sql` method (`utilsApi`). This creates the 'products' table with the `hitless_words` option set to 'all'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) hitless_words = \\'all\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using Java Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Java client library's `sql` method (`utilsApi`). This creates the 'products' table with the `index_field_lengths` option set to '1'. The boolean `true` parameter likely influences execution or result handling.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_106\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) index_field_lengths = '1'\", true);\n```\n\n----------------------------------------\n\nTITLE: Building ManticoreSearch Executables with CMake\nDESCRIPTION: Defines and links the main ManticoreSearch executables including searchd, indexer, indextool, spelldump, wordbreaker, and index_converter. Sets up conditional compilation based on STATIC_BINARY flag.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable ( searchd searchd.cpp )\ntarget_link_libraries ( searchd searchd_ssl lmanticore lsearchd )\n\nif (NOT STATIC_BINARY)\n\tadd_executable ( indexer indexer.cpp )\n\tadd_executable ( indextool indextool.cpp )\n\tadd_executable ( spelldump spelldump.cpp )\n\tadd_executable ( wordbreaker wordbreaker.cpp )\n\tadd_executable ( index_converter index_converter.cpp )\n\ttarget_link_libraries ( indexer indexer_sources lmanticore )\n\ttarget_link_libraries ( indextool lmanticore )\n\ttarget_link_libraries ( spelldump lmanticore )\n\ttarget_link_libraries ( wordbreaker lmanticore )\n\ttarget_link_libraries ( index_converter lmanticore )\n\tadd_library ( udfexample MODULE udfexample.c )\n\ttarget_compile_options ( udfexample PRIVATE \"$<${CLANGWIN}:-Wno-deprecated-declarations>\" )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jieba segmentation for Chinese in Manticore Search\nDESCRIPTION: This snippet shows how to configure Jieba segmentation for Chinese text in Manticore Search. It creates a table with Jieba Chinese morphology and disables the Hidden Markov Model (HMM) feature.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Morphology.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) morphology = 'jieba_chinese' jieba_hmm = '0'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) morphology = 'jieba_chinese' jieba_hmm = '0'\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n\t\t\t 'morphology' => 'jieba_chinese',\n\t  \t\t 'jieba_hmm'='1'\n        ]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) morphology = \\'jieba_chinese\\' jieba_hmm = \\'0\\'')\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) morphology = \\'jieba_chinese\\' jieba_hmm = \\'0\\'')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) morphology = \\'jieba_chinese\\' jieba_hmm = \\'0\\'');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) morphology = 'jieba_chinese' jieba_hmm = '0'\", true);\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) morphology = 'jieba_chinese' jieba_hmm = '0'\", true);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) morphology = 'jieba_chinese' jieba_hmm = '0'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  morphology = jieba_chinese\n  jieba_hmm = 0\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Running Manticore with auto table creation on startup using Docker\nDESCRIPTION: This command runs a Manticore Search container with the CREATE_PLAIN_TABLES environment variable to automatically build plain tables during initialization. It mounts a custom configuration file and exposes the necessary ports.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e CREATE_PLAIN_TABLES=1 --name manticore -v $(pwd)/manticore.conf:/etc/manticoresearch/manticore.conf -p 9306:9306 -p 9308:9308 -d manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: Verifying Server Certificate\nDESCRIPTION: Command to verify that the server certificate was generated correctly using the CA certificate.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/SSL.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl verify -CAfile ca-cert.pem server-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in Rust\nDESCRIPTION: Demonstrates how to create a table with bigram indexing using the Rust client. It executes an SQL command asynchronously to set up the table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_69\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'both_freq'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Based CJK Support\nDESCRIPTION: Creates a table with basic N-gram support for CJK languages using custom charset and ngram settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Languages_with_continuous_scripts.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) charset_table = 'non_cont' ngram_len = '1' ngram_chars = 'cont'\n\n/* Or, alternatively */\nCREATE TABLE products(title text, price float) charset_table = 'non_cont' ngram_len = '1' ngram_chars = 'cjk,thai'\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  charset_table = non_cont\n  ngram_len = 1\n  ngram_chars = cont\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Field Aggregation Functions in Manticore Search\nDESCRIPTION: Describes the single-argument functions that accept expressions with field-level factors, iterate over matched fields, and compute final results. Includes sum, top, and max_window_hits functions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n* `sum`, which adds the argument expression over all matched fields. For example `sum(1)` should return the number of matched fields.\n* `top`, which returns the highest value of the argument across all matched fields.\n* `max_window_hits`, manages a sliding window of hit positions to track the maximum number of hits within a specified window size. It removes outdated hits that fall outside the window and adds the latest hit, updating the maximum number of hits found within that window.\n```\n\n----------------------------------------\n\nTITLE: Using Strict Order Operator in Manticore Search\nDESCRIPTION: Demonstrates the strict order (or 'before') operator which matches documents only if the keywords appear in exactly the specified order, even if they're not adjacent.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\naaa << bbb << ccc\n```\n\n----------------------------------------\n\nTITLE: Querying Running Queries with Manticore SQL Client - SQL\nDESCRIPTION: This SQL snippet demonstrates how to use the SHOW QUERIES command to retrieve information about all currently running queries in a Manticore Search environment. Executing this command requires the Manticore Buddy tool to be installed and loaded. The output includes columns for query ID, statement, execution time, connection protocol, and client host. It is used to monitor and manage queries; for example, the returned query ID can be supplied to the KILL command to terminate a specific query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_QUERIES.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW QUERIES\n\n```\n\n----------------------------------------\n\nTITLE: Comparing Values with MIN Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns the smaller of two arguments for numeric or comparable types. Accepts two arguments and outputs the minimum value between them. Only comparable argument types are supported.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nMIN(a, b)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a Products Table with SQL\nDESCRIPTION: This SQL snippet shows how to create a 'products' table storing JSON data and insert sample records into it. It then demonstrates querying the data to list all entries. There are no special dependencies apart from having a Manticore Search environment.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\ncreate table products(title text, meta json);\ninsert into products values(0,'nike','{\"color\":\"red\"}'),(0,'adidas','{\"color\":\"red\"}'),(0,'puma','{\"color\":\"green\"}');\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products;\n+---------------------+-------------------+--------+\n| id                  | meta              | title  |\n+---------------------+-------------------+--------+\n| 1657851069130080268 | {\"color\":\"red\"}   | nike   |\n| 1657851069130080269 | {\"color\":\"red\"}   | adidas |\n| 1657851069130080270 | {\"color\":\"green\"} | puma   |\n+---------------------+-------------------+--------+\n\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in PHP\nDESCRIPTION: Example of querying agent status using the PHP client library. Uses the nodes()->agentstatus() method to retrieve distributed table configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$client->nodes()->agentstatus(\n    ['body'=>\n        ['agent'=>'dist_index']\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with JavaScript in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause through the JavaScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await utilsApi.sql('DROP TABLE IF EXISTS products');\n```\n\n----------------------------------------\n\nTITLE: Building Stopwords List in Manticore Search\nDESCRIPTION: Demonstrates the use of --buildstops to generate a list of the most frequent terms in the index. This can be used for features like 'Did you mean...' functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer mytable --buildstops word_freq.txt 1000\n```\n\n----------------------------------------\n\nTITLE: Storing Binary Data in Manticore using Base64 Encoding\nDESCRIPTION: Demonstrates how to safely store binary data in Manticore by using base64 encoding and text stored field type. This example encodes the 'ls' command binary, stores it in Manticore, and verifies the MD5 checksum remains unchanged.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\n# md5sum /bin/ls\n43d1b8a7ccda411118e2caba685f4329  /bin/ls\n# encoded_data=`base64 -i /bin/ls `\n# mysql -P9306 -h0 -e \"drop table if exists test; create table test(data text stored); insert into test(data) values('$encoded_data')\"\n# mysql -P9306 -h0 -NB -e \"select data from test\" | base64 -d > /tmp/ls | md5sum\n43d1b8a7ccda411118e2caba685f4329  -\n```\n\n----------------------------------------\n\nTITLE: Using Ignore Multiple-Field Search Operator in Manticore Search\nDESCRIPTION: Demonstrates excluding matches from multiple specified fields, effectively searching only in the remaining fields of the document.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n@!(title,body) hello world\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (Rust)\nDESCRIPTION: Rust code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status with SQL in TypeScript\nDESCRIPTION: This TypeScript snippet uses the `utilsApi.sql` method to execute a SQL query for showing agent status. The query specifically filters for status parameters containing '5periodmsec'. It requires an asynchronous environment to handle the query's promise.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT STATUS LIKE \\\"%5period%msec%\\\"\");\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n\t\"columns\":\n\t[{\n\t\t\"Key\": {\"type\": \"string\"}\n\t},\n    {\n    \t\"Value\": {\"type\": \"string\"}\n    }],\n\t\"data\":\n\t[\n\t\t{\"Key\": \"ag_0_5periods_msecsperquery\", \"Value\": \"234.72\"},\n\t\t{\"Key\": \"ag_1_5periods_msecsperquery\", \"Value\": \"233.73\"},\n\t\t{\"Key\": \"ag_2_5periods_msecsperquery\", \"Value\": \"343.81\"}\n\t],\n \t\"error\": \"\",\n \t\"total\": 0,\n \t\"warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stored-only Fields in Manticore Search\nDESCRIPTION: Specifies fields that will be stored but not indexed in Manticore Search. These fields can be retrieved in search results but cannot be used for full-text searching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nstored_only_fields = title,content\n```\n\n----------------------------------------\n\nTITLE: Performing JSON API Joins in Manticore Search\nDESCRIPTION: General JSON API syntax for performing joins in Manticore Search. Supports both inner and left join types with conditional expressions for matching related columns across tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n  \"table\": \"table_name\",\n  \"query\": {\n    <optional full-text query against the left table>\n  },\n  \"join\": [\n    {\n      \"type\": \"inner\" | \"left\",\n      \"table\": \"joined_table_name\",\n      \"query\": {\n        <optional full-text query against the right table>\n      },\n      \"on\": [\n        {\n          \"left\": {\n            \"table\": \"left_table_name\",\n            \"field\": \"field_name\",\n            \"type\": \"<common field's type when joining using json attributes>\"\n          },\n          \"operator\": \"eq\",\n          \"right\": {\n            \"table\": \"right_table_name\",\n            \"field\": \"field_name\"\n          }\n        }\n      ]\n    }\n  ],\n  \"options\": {\n    ...\n  }\n}\n\non.type: {\n\tint\n\t| string\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Kafka Source Details\nDESCRIPTION: Shows detailed configuration of a specific Kafka source including schema and connection settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SOURCE kafka;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in Java\nDESCRIPTION: Demonstrates table creation with bigram indexing and frequent words using the Java client. It executes an SQL command to set up the table with specified bigram configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_78\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'first_freq'\", true);\n```\n\n----------------------------------------\n\nTITLE: Keyed Histogram Aggregation in JSON\nDESCRIPTION: Shows how to perform a keyed histogram aggregation using JSON API. The query is similar to the previous histogram example but uses the 'keyed' parameter to return results as a dictionary with bucket keys.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_39\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n{\n  \"size\": 0,\n  \"table\": \"facets\",\n  \"aggs\": {\n    \"price_range\": {\n      \"histogram\": {\n        \"field\": \"price\",\n        \"interval\": 300,\n        \"keyed\": true\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Async Python Search Implementation\nDESCRIPTION: Asynchronous Python implementation of search with highlighting using Python's asyncio.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nres = await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\",\"title\"],\"number_of_fragments\":10}})\n```\n\n----------------------------------------\n\nTITLE: Using Phrase Search Operator in Manticore Search\nDESCRIPTION: Demonstrates the phrase operator which mandates that words be adjacent to each other in the exact order specified within the quotes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n\"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with Go\nDESCRIPTION: Demonstrates percolate query execution using the Go client with map structures.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nquery := map[string]interface{} {\"title\": \"what a nice bag\"}\npercolateRequestQuery := manticoreclient.NewPercolateQuery(query)\npercolateRequest := manticoreclient.NewPercolateRequest(percolateRequestQuery)\nres, _, _ := apiClient.SearchAPI.Percolate(context.Background(), \"test_pq\").PercolateRequest(*percolateRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Executing URL-encoded SQL Query via HTTP POST in Manticore Search\nDESCRIPTION: Demonstrates how to send a URL-encoded SQL query to Manticore Search using an HTTP POST request to the /sql endpoint. The response includes search results in JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPOST /sql query=select%20id%2Csubject%2Cauthor_id%20%20from%20forum%20where%20match%28%27%40subject%20php%20manticore%27%29%20group%20by%20author_id%20order%20by%20id%20desc%20limit%200%2C5\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 2,\n    \"total_relation\": \"eq\",\n    \"hits\": [\n      {\n        \"_id\": 2,\n        \"_score\": 2356,\n        \"_source\": {\n          \"subject\": \"php manticore\",\n          \"author_id\": 12\n        }\n      },\n      {\n        \"_id\": 1,\n        \"_score\": 2356,\n        \"_source\": {\n          \"subject\": \"php manticore\",\n          \"author_id\": 11\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS PHP Response\nDESCRIPTION: Sample response from the SHOW THREADS command via PHP client, showing thread information as an associative array.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [0] => Array\n        (\n            [TID] => 506960\n            [Name] => work_8\n            [Proto] => http\n            [State] => query\n            [Connection from] => 127.0.0.1:38072\n            [ConnID] => 17\n            [This/prev job time, s] => 231us\n            [CPU activity] => 93.54%\n            [Jobs done] => 8\n            [Thread status] => working\n            [Info] => show_threads\n        )\n\n)\n```\n\n----------------------------------------\n\nTITLE: Non-Verbose Percolate Query in SQL\nDESCRIPTION: This SQL query demonstrates the default non-verbose mode of a percolate query, which provides less detailed performance metrics compared to the verbose mode.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_96\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ('products', ('{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}', '{\"title\": \"beautiful bag\"}'), 0 as verbose); show meta;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Local Time with CURTIME() in SQL\nDESCRIPTION: Executes the CURTIME() function in SQL to get the current time in the server's local timezone. The time is returned as a string in 'hh:ii:ss' format. No parameters are required.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect CURTIME();\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Manticore Search - PHP\nDESCRIPTION: Shows how to retrieve remote agent statistics using the PHP client, returning performance metrics and status information as an array.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$client->nodes()->agentstatus();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attribute Indexing in Manticore Search\nDESCRIPTION: This snippet shows how to specify which HTML markup attributes should be indexed even when HTML stripping is enabled. The html_index_attrs option is used to retain and index specific attributes from img and a tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Advanced_HTML_tokenization.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) html_index_attrs = 'img=alt,title; a=title;' html_strip = '1'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) html_index_attrs = 'img=alt,title; a=title;' html_strip = '1'\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'html_index_attrs' => 'img=alt,title; a=title;',\n            'html_strip' => '1'\n        ]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) html_index_attrs = \\'img=alt,title; a=title;\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) html_index_attrs = \\'img=alt,title; a=title;\\' html_strip = \\'1\\'')\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) html_index_attrs = \\'img=alt,title; a=title;\\' html_strip = \\'1\\'');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) html_index_attrs = 'img=alt,title; a=title;' html_strip = '1'\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) html_index_attrs = 'img=alt,title; a=title;' html_strip = '1'\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) html_index_attrs = 'img=alt,title; a=title;' html_strip = '1'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  html_index_attrs = img=alt,title; a=title;\n  html_strip = 1\n  \n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Buddy Plugins using CREATE PLUGIN Command (SQL)\nDESCRIPTION: Shows how to create a Buddy plugin in Manticore Search using the CREATE PLUGIN SQL command. This syntax lets you install a plugin from a package registry by specifying the username/package name and the desired version. Requires 'Manticore Buddy' to be installed on the server to support Buddy plugins. The plugin is fetched by name and version and made available for use without a server restart, provided dependencies and settings (like 'plugin_dir') are correctly configured.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Creating_a_plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLUGIN <username/package name on https://packagist.org/> TYPE 'buddy' VERSION <package version>\n```\n\n----------------------------------------\n\nTITLE: Grouping Products by Color in SQL\nDESCRIPTION: This SQL snippet demonstrates grouping products by the 'color' node within the 'meta' JSON field of the 'products' table using the GROUP BY clause. It requires a Manticore Search instance with the earlier defined table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT groupby() color, count(*) from products GROUP BY meta.color;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+-------+----------+\n| color | count(*) |\n+-------+----------+\n| red   |        2 |\n| green |        1 |\n+-------+----------+\n\n```\n\n----------------------------------------\n\nTITLE: Python Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example response from a successful Python truncate with RECONFIGURE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n{u'error': u'', u'total': 0, u'warning': u''}\n```\n\n----------------------------------------\n\nTITLE: Backing up all tables using manticore-backup\nDESCRIPTION: This example demonstrates how to use the manticore-backup tool to create a backup of all tables in a Manticore Search instance. It specifies the config file path and the backup directory.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmanticore-backup --config=path/to/manticore.conf --backup-dir=backupdir\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with JSON API in Manticore Search\nDESCRIPTION: This JSON snippet shows how to construct a percolate query using the JSON API. It sends a POST request to the '/pq/pq/_search' endpoint with two documents in the percolate clause. The response includes matching query details.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_83\n\nLANGUAGE: json\nCODE:\n```\nPOST /pq/pq/_search -d '\n\"query\":\n{\n        \"percolate\":\n        {\n                \"documents\" : [\n                    { \"title\": \"angry test\", \"gid\": 3 },\n                    { \"title\": \"filter test doc2\", \"gid\": 13 }\n                ]\n        }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Using Javascript with Manticore to Perform Aggregation\nDESCRIPTION: This JavaScript code performs an aggregation query on the 'meta.color' field using Manticore's JavaScript API interface. It assumes access to an initialized `searchApi` instance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.search({\"table\":\"products\",\"limit\":0,\"aggs\":{\"color\":{\"terms\":{\"field\":\"meta.color\",\"size\":100}}}});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"aggregations\":{\"color\":{\"buckets\":[{\"key\":\"green\",\"doc_count\":1},{\"key\":\"red\",\"doc_count\":2}]}},\"hits\":{\"total\":3,\"hits\":[]}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Locked Tables in Manticore Search (SQL)\nDESCRIPTION: The SHOW LOCKS command displays all locked tables, including their lock types and counters. This provides an overview of the current lock state across multiple tables in the system.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Freezing_a_table.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW LOCKS;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example response from a successful JavaScript truncate with RECONFIGURE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n{\"total\":0,\"error\":\"\",\"warning\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Example of Disabling Buddy Plugin in Manticore Search\nDESCRIPTION: This example shows how to disable the 'show' plugin using its fully qualified name. After disabling, attempts to use the plugin will result in an error.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Enabling_and_disabling_buddy_plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDISABLE BUDDY PLUGIN manticoresoftware/buddy-plugin-show\n```\n\n----------------------------------------\n\nTITLE: Indexer Output Showing Compiled Features\nDESCRIPTION: Sample output from running 'indexer -h' command that displays all the configured features and dependencies built into Manticore Search, including external libraries and their paths.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nBuilt on Linux x86_64 by GNU 8.3.1 compiler.\n\nConfigured with these definitions: -DDISTR_BUILD=rhel8 -DUSE_SYSLOG=1 -DWITH_GALERA=1 -DWITH_RE2=1 -DWITH_RE2_FORCE_STATIC=1\n-DWITH_STEMMER=1 -DWITH_STEMMER_FORCE_STATIC=1 -DWITH_ICU=1 -DWITH_ICU_FORCE_STATIC=1 -DWITH_SSL=1 -DWITH_ZLIB=1 -DWITH_ODBC=1 -DDL_ODBC=1\n-DODBC_LIB=libodbc.so.2 -DWITH_EXPAT=1 -DDL_EXPAT=1 -DEXPAT_LIB=libexpat.so.1 -DWITH_ICONV=1 -DWITH_MYSQL=1 -DDL_MYSQL=1\n-DMYSQL_LIB=libmariadb.so.3 -DWITH_POSTGRESQL=1 -DDL_POSTGRESQL=1 -DPOSTGRESQL_LIB=libpq.so.5 -DLOCALDATADIR=/var/lib/manticore/data\n-DFULL_SHARE_DIR=/usr/share/manticore\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW THREADS via SQL\nDESCRIPTION: Example of executing the SHOW THREADS command via SQL, which returns detailed information about worker threads including their IDs, states, connection information, and current activities.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW THREADS;\n```\n\n----------------------------------------\n\nTITLE: Performing Asynchronous Search with Highlighting in Python-asyncio\nDESCRIPTION: Asynchronously performs a search using Manticore Search API for matching entries with 'one' or 'robots' in 'books', highlighting 'content' field. Expects a similar search query structure as Python synchronous version, but uses asyncio for asynchronous execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_34\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nres = await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\"]}}))\n```\n\nLANGUAGE: Python-asyncio\nCODE:\n```\n{'aggregations': None, 'hits': {'hits': [{u'_id': u'1', u'_score': 2788, u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ', u'title': u'Books one'}, u'highlight': {u'content': [u'They followed Bander. The <b>robots</b> remained at a polite distance, ', u' three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander', u' gestured the other <b>robots</b> away and entered itself. The']}}], 'max_score': None, 'total': 1}, 'profile': None, 'timed_out': False, 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Defining a UDF Version Interface Function in C for Manticoresearch\nDESCRIPTION: This C code snippet illustrates the required interface function for UDF version checking, ensuring library compatibility with Manticoresearch's expectations. The udfexample_ver() function must be exported and named after the library (udfexample), returning the constant SPH_UDF_VERSION defined in sphinxudf.h. The function has no parameters and must be present for the UDF loader to recognize the plugin. Prerequisite: sphinxudf.h must be included and available, and SPH_UDF_VERSION must be defined therein.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <sphinxudf.h>\n\n// our library will be called udfexample.so, thus, so it must define\n// a version function named udfexample_ver()\nint udfexample_ver()\n{\n    return SPH_UDF_VERSION;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and Integer Fields in JavaScript\nDESCRIPTION: Uses the JavaScript API to create a table with a 'title' text field and a 'price' integer field. Integer fields can be used for filtering, sorting, and aggregation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price int)');\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in SQL\nDESCRIPTION: This SQL query retrieves the status of the replication cluster, including cluster name, state, configuration, and node information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW STATUS\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via PHP\nDESCRIPTION: Creates a percolate table using the PHP client with detailed configuration of columns and settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$index = [\n    'table' => 'products',\n    'body' => [\n        'columns' => [\n            'title' => ['type' => 'text'],\n            'meta' => ['type' => 'json']\n        ],\n        'settings' => [\n            'type' => 'pq'\n        ]\n    ]\n];\n$client->indices()->create($index);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (Go)\nDESCRIPTION: Go code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nutilsAPI.Sql(context.Background()).Body(\"CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)\").Execute()\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum in Arrays with GREATEST Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Determines the maximum element in a JSON array or multi-valued attribute (MVA). The argument must be a JSON array or MVA, and the function returns the greatest numeric or comparable value within that container. It only applies to array-like attributes or MVAs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nGREATEST(attr_json.some_array)\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on MacOS using Homebrew\nDESCRIPTION: Command to install Manticore Search on MacOS using Homebrew package manager. Installs both the main Manticore Search application and extra components from the official tap.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install manticoresoftware/tap/manticoresearch manticoresoftware/tap/manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Alternative Sort Order Syntax in Manticore Search JSON\nDESCRIPTION: Shows an alternative syntax for specifying sort order in JSON format for Manticore Search. Uses the 'order' property to define sorting direction.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"test\",\n  \"query\":\n  {\n    \"match\": { \"title\": \"Test document\" }\n  },\n  \"sort\":\n  [\n    { \"id\": { \"order\":\"desc\" } }\n  ],\n  \"_source\": \"title\",\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Tables with Rotation in Manticore Search\nDESCRIPTION: Demonstrates how to merge two tables (e.g., in a main+delta scheme) and rotate the tables. This is useful for combining frequently updated delta tables with rarely changed main tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --merge main delta --rotate\n```\n\n----------------------------------------\n\nTITLE: SphinxSE Query with Index Selection\nDESCRIPTION: Examples of SphinxSE search queries that specify which Manticore indexes to search, allowing both single and multiple index selection.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n... WHERE query='test;index=test1;';\n... WHERE query='test;index=test1,test2,test3;';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Float Precision in Manticore\nDESCRIPTION: Shows how Manticore handles float precision to prevent loss of accuracy, especially for geographical coordinates.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_71\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into t(id, f) values(1, 19.45)\n--------------\n\nQuery OK, 1 row affected (0.02 sec)\n\n--------------\nselect * from t\n--------------\n\n+------+-----------+\n| id   | f         |\n+------+-----------+\n|    1 | 19.450001 |\n+------+-----------+\n1 row in set (0.00 sec)\n--- 1 out of 1 results in 0ms ---\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with C# in Manticore Search\nDESCRIPTION: Removes a table using the C# client. This executes an SQL query through the utilsApi.Sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nsqlresult = utilsApi.Sql(\"DROP TABLE products\", true);\n```\n\n----------------------------------------\n\nTITLE: Generating Real-Time Table Inserts from Plain Table in Manticore\nDESCRIPTION: Demonstrates how to output fetched data from a plain table source as INSERT statements for a real-time table. This can be used to convert plain tables to real-time tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer -c manticore.conf --print-rt indexrt indexplain > dump.sql\n```\n\n----------------------------------------\n\nTITLE: Setting In-Place Write Factor in Manticore Search\nDESCRIPTION: Controls the size of the buffer used for in-place writing during indexing. Only impacts the indexer tool and not the searchd server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_64\n\nLANGUAGE: ini\nCODE:\n```\ninplace_write_factor = 0.1\n```\n\n----------------------------------------\n\nTITLE: SQL HIGHLIGHT() with String Attribute\nDESCRIPTION: Demonstrates using HIGHLIGHT() with a string attribute. This approach highlights a specific field without requiring quotes and ignores field syntax in the query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT({}, title) FROM books WHERE MATCH('one');\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length using PHP (PHP)\nDESCRIPTION: In PHP, this example demonstrates creating a Manticoresearch table, incorporating n-gram indexing for comprehensive continuous-script language support.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'ngram_chars' => 'cont',\n             'ngram_len' => '1'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Using CALL SUGGEST for Single Word Suggestions in SQL\nDESCRIPTION: Demonstrates how to use the CALL SUGGEST function to get suggestions for a misspelled word. It returns suggestions, their Levenshtein distance, and the number of documents containing the suggestion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncall suggest('bagg with tasel', 'products');\n```\n\nLANGUAGE: sql\nCODE:\n```\n+---------+----------+------+\n| suggest | distance | docs |\n+---------+----------+------+\n| bag     | 1        | 1    |\n+---------+----------+------+\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Value Attribute (MVA)\nDESCRIPTION: Configuration for declaring a multi-valued attribute with unsigned 32-bit integer values. MVAs are useful for storing multiple values in a single attribute, such as tags or categories.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_multi = tags\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates by Query in Manticore Search using Python\nDESCRIPTION: This Python code shows how to perform bulk updates by query using the Manticore Search Python client. It updates the 'coeff' field based on price ranges in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndocs = [ \\\n            { \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 1000 }, \"query\": { \"range\": { \"price\": { \"gte\": 1000 } } } } }, \\\n            { \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 0 }, \"query\": { \"range\": { \"price\": { \"lt\": 1000 } } } } } ]\nindexApi.bulk('\\n'.join(map(json.dumps,docs)))\n```\n\n----------------------------------------\n\nTITLE: Python Synchronous Faceted Search\nDESCRIPTION: Shows how to execute a faceted search query using the Python API synchronously.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nres =searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"limit\":5,\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price\",\"size\":1,}},\"group_brand_id\":{\"terms\":{\"field\":\"brand_id\",\"size\":3}}}})\n```\n\n----------------------------------------\n\nTITLE: Creating Table with BigInt Fields\nDESCRIPTION: Shows how to create a table with 64-bit signed integer (bigint) fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_63\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price bigint );\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_bigint = type\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Port for Manticore Search\nDESCRIPTION: This command demonstrates how to start Manticore Search on a custom port (9313) for accepting binary protocol requests, usually for debugging purposes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --port 9313\n```\n\n----------------------------------------\n\nTITLE: Configuring Columnar Attributes Storage\nDESCRIPTION: Configuration for storing attributes in columnar storage instead of row-wise storage. Can specify individual attributes or use * to store all supported data types in columnar format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\ncolumnar_attrs = *\ncolumnar_attrs = id, attr1, attr2, attr3\n```\n\n----------------------------------------\n\nTITLE: Defining String Attribute\nDESCRIPTION: Configuration for declaring a string attribute. String attributes are used for storing text that needs to be retrieved but not necessarily full-text searched.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_string = title\n```\n\n----------------------------------------\n\nTITLE: Using Relaxed Field Search in Manticore Search\nDESCRIPTION: Demonstrates using the @@relaxed option to suppress errors when searching in non-existent fields. This is useful when searching through heterogeneous tables with different schemas.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n@@relaxed @nosuchfield my query\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates by Query in Manticore Search using JavaScript\nDESCRIPTION: This JavaScript code shows how to perform bulk updates by query using the Manticore Search JavaScript client. It updates the 'coeff' field based on price ranges in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndocs = [\n            { \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 1000 }, \"query\": { \"range\": { \"price\": { \"gte\": 1000 } } } } },\n            { \"update\" : { \"table\" : \"products\", \"doc\": { \"coeff\" : 0 }, \"query\": { \"range\": { \"price\": { \"lt\": 1000 } } } } } ];\nres =  await indexApi.bulk(docs.map(e=>JSON.stringify(e)).join('\\n'));\n```\n\n----------------------------------------\n\nTITLE: Response for Basic Faceting Query in Manticore Search (SQL)\nDESCRIPTION: The response from the basic FACET query shows both the regular search results (20 rows) and the aggregated facet counts by brand_name, displaying how many products belong to each brand.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+\n| id   | price | brand_id | title               | brand_name  | property    | j                                     | categories |\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+\n|    1 |   306 |        1 | Product Ten Three   | Brand One   | Six_Ten     | {\"prop1\":66,\"prop2\":91,\"prop3\":\"One\"} | 10,11      |\n|    2 |   400 |       10 | Product Three One   | Brand Ten   | Four_Three  | {\"prop1\":69,\"prop2\":19,\"prop3\":\"One\"} | 13,14      |\n....\n|   19 |   855 |        1 | Product Seven Two   | Brand One   | Eight_Seven | {\"prop1\":63,\"prop2\":78,\"prop3\":\"One\"} | 10,11,12   |\n|   20 |    31 |        9 | Product Four One    | Brand Nine  | Ten_Four    | {\"prop1\":79,\"prop2\":42,\"prop3\":\"One\"} | 12,13,14   |\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+\n20 rows in set (0.00 sec)\n+-------------+----------+\n| brand_name  | count(*) |\n+-------------+----------+\n| Brand One   |     1013 |\n| Brand Ten   |      998 |\n| Brand Five  |     1007 |\n| Brand Nine  |      944 |\n| Brand Two   |      990 |\n| Brand Six   |     1039 |\n| Brand Three |     1016 |\n| Brand Four  |      994 |\n| Brand Eight |     1033 |\n| Brand Seven |      965 |\n+-------------+----------+\n10 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search with JSON Object Plan Format\nDESCRIPTION: This snippet demonstrates a search query on the 'forum' table with a JSON object plan format. It provides a structured representation of the query plan without textual descriptions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"forum\",\n  \"query\": {\"query_string\": \"@title way* @content hey\"},\n  \"_source\": { \"excludes\":[\"*\"] },\n  \"limit\": 1,\n  \"plan\": 2\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"took\": 33,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 105,\n    \"hits\": [\n      {\n        \"_id\": 711651,\n        \"_score\": 2539,\n        \"_source\": {}\n      }\n    ]\n  },\n  \"plan\": {\n    \"query\": {\n      \"type\": \"AND\",\n      \"children\": [\n        {\n          \"type\": \"OR\",\n          \"children\": [\n            {\n              \"type\": \"OR\",\n              \"children\": [\n                {\n                  \"type\": \"AND\",\n                  \"fields\": [\n                    \"title\"\n                  ],\n                  \"max_field_pos\": 0,\n                  \"children\": [\n                    {\n                      \"type\": \"KEYWORD\",\n                      \"word\": \"wayne\",\n                      \"querypos\": 1,\n                      \"expanded\": true\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"OR\",\n                  \"children\": [\n                    {\n                      \"type\": \"AND\",\n                      \"fields\": [\n                        \"title\"\n                      ],\n                      \"max_field_pos\": 0,\n                      \"children\": [\n                        {\n                          \"type\": \"KEYWORD\",\n                          \"word\": \"ways\",\n                          \"querypos\": 1,\n                          \"expanded\": true\n                        }\n                      ]\n                    },\n                    {\n                      \"type\": \"AND\",\n                      \"fields\": [\n                        \"title\"\n                      ],\n                      \"max_field_pos\": 0,\n                      \"children\": [\n                        {\n                          \"type\": \"KEYWORD\",\n                          \"word\": \"wayyy\",\n                          \"querypos\": 1,\n                          \"expanded\": true\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              \"type\": \"AND\",\n              \"fields\": [\n                \"title\"\n              ],\n              \"max_field_pos\": 0,\n              \"children\": [\n                {\n                  \"type\": \"KEYWORD\",\n                  \"word\": \"way\",\n                  \"querypos\": 1,\n                  \"expanded\": true\n                }\n              ]\n            },\n            {\n              \"type\": \"OR\",\n              \"fields\": [\n                \"title\"\n              ],\n              \"max_field_pos\": 0,\n              \"children\": [\n                {\n                  \"type\": \"KEYWORD\",\n                  \"word\": \"way*\",\n                  \"querypos\": 1,\n                  \"expanded\": true\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"type\": \"AND\",\n          \"fields\": [\n            \"content\"\n          ],\n          \"max_field_pos\": 0,\n          \"children\": [\n            {\n              \"type\": \"KEYWORD\",\n              \"word\": \"hey\",\n              \"querypos\": 2\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Table Status with Manticore Search Go API\nDESCRIPTION: This snippet demonstrates how to use the Manticore Search Go API client to execute an SQL query for showing the status of a table named 'statistic'. It uses the UtilsAPI.Sql method to send the query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"SHOW TABLE statistic STATUS\").Execute()\n```\n\n----------------------------------------\n\nTITLE: SQL HIGHLIGHT() with Field List\nDESCRIPTION: Shows how to highlight specific fields by providing a field list as the second argument to HIGHLIGHT(). This example highlights 'title' and 'content' fields for matches of 'one' or 'robots'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT HIGHLIGHT({},'title,content') FROM books WHERE MATCH('one|robots');\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW TABLE INDEXES - SQL\nDESCRIPTION: This SQL snippet demonstrates the SHOW TABLE INDEXES command, which lists all secondary indexes on a given table, along with their properties such as name, type, enabled status, and the percent of disk chunks that contain the index. Dependencies include the presence of an RT table with secondary indexes set up.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_INDEXES.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE table_name INDEXES\n```\n\n----------------------------------------\n\nTITLE: Joining FEDERATED Manticore Table with MySQL Table\nDESCRIPTION: SQL query demonstrating how to JOIN a FEDERATED table (connected to Manticore) with a regular MySQL table. This allows retrieving additional information not stored in the Manticore index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/FEDERATED.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT t1.id, t1.year, comments.comment FROM t1 JOIN comments ON t1.id=comments.post_id WHERE query='SELECT * FROM movies WHERE MATCH (\\'pie\\')';\n```\n\n----------------------------------------\n\nTITLE: Nested bool query for complex conditions in Manticore Search\nDESCRIPTION: Demonstrates how to construct a nested boolean query to represent complex conditions like 'a = 2 and (a = 10 or b = 0)' in JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Filters.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"t\",\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"equals\": {\n            \"a\": 2\n          }\n        },\n        {\n          \"bool\": {\n            \"should\": [\n              {\n                \"equals\": {\n                  \"a\": 10\n                }\n              },\n              {\n                \"equals\": {\n                  \"b\": 0\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Manticore Search with Rust\nDESCRIPTION: Executes an asynchronous SQL query to retrieve agent status information using the Rust API. The second parameter (Some(true)) likely indicates that the query should be executed asynchronously, returning a structured response with detailed agent metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_15\n\nLANGUAGE: clike\nCODE:\n```\nutils_api.sql(\"SHOW AGENT STATUS\", Some(true)).await;\n```\n\nLANGUAGE: rust\nCODE:\n```\n{columns=[{ Key : { type=string }},\n              { Value : { type=string }}],\n  data : [\n\t{ Key=status_period_seconds ,  Value=60 },\n\t{ Key=status_stored_periods ,  Value=15 },\n\t{ Key=ag_0_hostname ,  Value=192.168.0.202:6713 },\n\t{ Key=ag_0_references ,  Value=2 },\n\t{ Key=ag_0_lastquery ,  Value=0.41 },\n\t{ Key=ag_0_lastanswer ,  Value=0.19 },\n\t{ Key=ag_0_lastperiodmsec ,  Value=222 },\n\t{ Key=ag_0_errorsarow ,  Value=0 },\n\t{ Key=ag_0_1periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_0_1periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_0_1periods_connect_failures ,  Value=0 },\n\t{ Key=ag_0_1periods_network_errors ,  Value=0 },\n\t{ Key=ag_0_1periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_0_1periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_0_1periods_warnings ,  Value=0 },\n\t{ Key=ag_0_1periods_succeeded_queries ,  Value=27 },\n\t{ Key=ag_0_1periods_msecsperquery ,  Value=232.31 },\n\t{ Key=ag_0_5periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_0_5periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_0_5periods_connect_failures ,  Value=0 },\n\t{ Key=ag_0_5periods_network_errors ,  Value=0 },\n\t{ Key=ag_0_5periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_0_5periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_0_5periods_warnings ,  Value=0 },\n\t{ Key=ag_0_5periods_succeeded_queries ,  Value=146 },\n\t{ Key=ag_0_5periods_msecsperquery ,  Value=231.83 },\n\t{ Key=ag_1_hostname 192.168.0.202:6714 },\n\t{ Key=ag_1_references ,  Value=2 },\n\t{ Key=ag_1_lastquery ,  Value=0.41 },\n\t{ Key=ag_1_lastanswer ,  Value=0.19 },\n\t{ Key=ag_1_lastperiodmsec ,  Value=220 },\n\t{ Key=ag_1_errorsarow ,  Value=0 },\n\t{ Key=ag_1_1periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_1_1periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_1_1periods_connect_failures ,  Value=0 },\n\t{ Key=ag_1_1periods_network_errors ,  Value=0 },\n\t{ Key=ag_1_1periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_1_1periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_1_1periods_warnings ,  Value=0 },\n\t{ Key=ag_1_1periods_succeeded_queries ,  Value=27 },\n\t{ Key=ag_1_1periods_msecsperquery ,  Value=231.24 },\n\t{ Key=ag_1_5periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_1_5periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_1_5periods_connect_failures ,  Value=0 },\n\t{ Key=ag_1_5periods_network_errors ,  Value=0 },\n\t{ Key=ag_1_5periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_1_5periods_warnings ,  Value=0 },\n\t{ Key=ag_1_5periods_succeeded_queries ,  Value=146 },\n\t{ Key=ag_1_5periods_msecsperquery ,  Value=230.85 }],\n  error=\"\" ,\n  total=0,\n  warning=\"\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via TypeScript\nDESCRIPTION: Creates a percolate table using TypeScript client's SQL interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql(\"CREATE TABLE products(title text, meta json) type='pq'\");\n```\n\n----------------------------------------\n\nTITLE: Using ZONE Operator in Manticore Search SQL\nDESCRIPTION: Shows the usage of the ZONE operator, which limits matching to specified in-field zones. Requires index_zones to be enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nZONE:(h3,h4)\n\nonly in these titles\n```\n\n----------------------------------------\n\nTITLE: Setting Distribution Name in Shell Script for Manticore Search\nDESCRIPTION: This snippet sets the 'distr' variable to the name of the current directory using the 'basename' command. This is likely used to identify the distribution package being processed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/xenial/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Path in Manticore Search Daemon - INI\nDESCRIPTION: Demonstrates how to specify a custom log file path in the 'searchd' section of the Manticore Search configuration file. The 'log' parameter sets the destination for runtime event logs, allowing for customization beyond the default location. This snippet requires knowledge of the server file system, and only one 'log' parameter should be active per configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Server_logging.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n    log = /custom/path/to/searchd.log\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing IF() Function Behavior in Manticore SQL\nDESCRIPTION: Demonstrates the difference in behavior of the IF() function in Manticore SQL compared to MySQL, particularly in handling floating-point comparisons and thresholds.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Arrays_and_conditions_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nIF ( sqrt(3)*sqrt(3)-3<>0, a, b )\nIF ( sqrt(3)*sqrt(3)-3, a, b )\n```\n\n----------------------------------------\n\nTITLE: Converting Tables with Killlist Target\nDESCRIPTION: Command to convert a table with specified killlist target settings for delta table operations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Migration_from_Sphinx.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n$ index_converter --config /home/myuser/manticore.conf --index deltaindex --killlist-target mainindex:kl\n```\n\n----------------------------------------\n\nTITLE: Configuring Sharded Table with Failover Mirrors in Manticore Search (INI)\nDESCRIPTION: This snippet demonstrates a complex configuration for a sharded table spread across 4 servers with 2 shards and 2 failover mirrors for each shard. It shows the configuration for both sets of nodes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Mirroring.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# config on node1, node2\nagent = node3:9312|node4:9312:shard2\n\n# config on node3, node4\nagent = node1:9312|node2:9312:shard1\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via Java Client\nDESCRIPTION: Initialize a connection to Manticore Search using the Java client library and set up API interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport com.manticoresearch.client.ApiClient;\nimport com.manticoresearch.client.ApiException;\nimport com.manticoresearch.client.Configuration;\nimport com.manticoresearch.client.model.*;\nimport com.manticoresearch.client.api.IndexApi;\nimport com.manticoresearch.client.api.UtilsApi;\nimport com.manticoresearch.client.api.SearchApi;\n\nApiClient client = Configuration.getDefaultApiClient();\nclient.setBasePath(\"http://127.0.0.1:9308\");\n\nIndexApi indexApi = new IndexApi(client);\nSearchApi searchApi = new UtilsApi(client);\nUtilsApi utilsApi = new UtilsApi(client);\n```\n\n----------------------------------------\n\nTITLE: SQL Full Document Replace\nDESCRIPTION: Replace entire document in a table using SQL syntax. Allows specifying columns and their values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO table [(column1, column2, ...)]\n    VALUES (value1, value2, ...)\n    [, (...)]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Response for Highlight Request\nDESCRIPTION: Example response from a JavaScript highlight request showing the search results with document ID, score, source content, and highlighted snippets with HTML bold tags around matched terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":1,\"hits\":[{\"_id\": 1,\"_score\":2788,\"_source\":{\"title\":\"Books one\",\"content\":\"They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. \"},\"highlight\":{\"title\":[\"Books <b>one</b>\"],\"content\":[\" into the room. <b>One</b> of the <b>robots</b> followed as well\"]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with Rust\nDESCRIPTION: Shows how to perform percolate queries using the Rust client with HashMaps.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\nlet mut percolate_doc_fields = HashMap::new();\npercolate_doc_fileds.insert(\"title\".to_string(), \"what a nice bag\");\nlet mut percolate_doc = HashMap::new();\npercolate_doc.insert(\"document\".to_string(), percolate_doc_fields); \nlet percolate_query = PercolateRequestQuery::new(serde_json::json!(percolate_doc));\nlet percolate_req = PercolateRequest::new(percolate_query); \nsearch_api.percolate(\"test_pq\", percolate_req).await;\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Forms Paths\nDESCRIPTION: Basic configuration for specifying word forms dictionary files using absolute paths or patterns.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nwordforms = path/to/wordforms.txt\nwordforms = path/to/alternateforms.txt\nwordforms = path/to/dict*.txt\n```\n\n----------------------------------------\n\nTITLE: Comparing Values with MAX Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Determines the larger of two arguments, returning the maximum. Both arguments must be of comparable (typically numeric) types. Used for value selection in computed expressions; incompatible types result in errors.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nMAX(a, b)\n```\n\n----------------------------------------\n\nTITLE: Java Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example response from a successful Java truncate with RECONFIGURE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_32\n\nLANGUAGE: java\nCODE:\n```\n{total=0, error=, warning=}\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using Python Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Python client library's `sql` method (`utilsApi`). This creates the 'products' table specifying a custom `index_token_filter` plugin.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) index_token_filter = \\'my_lib.so:custom_blend:chars=@#&\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating Table with ICU Chinese Segmentation\nDESCRIPTION: Creates a table with ICU-based Chinese language support using the 'cont' charset table and 'icu_chinese' morphology.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Languages_with_continuous_scripts.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) charset_table = 'cont' morphology = 'icu_chinese'\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  charset_table = cont\n  morphology = icu_chinese\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying SphinxSE Table\nDESCRIPTION: Example of creating a SphinxSE table with required columns and executing a search query. The table connects to a Manticore server and includes the essential ID, weight, and query columns.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t1\n(\n    id          INTEGER UNSIGNED NOT NULL,\n    weight      INTEGER NOT NULL,\n    query       VARCHAR(3072) NOT NULL,\n    group_id    INTEGER,\n    INDEX(query)\n) ENGINE=SPHINX CONNECTION=\"sphinx://localhost:9312/test\";\n\nSELECT * FROM t1 WHERE query='test it;mode=any';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Post-Index SQL Query in Manticore Search\nDESCRIPTION: This snippet references the sql_query_post_index configuration option, which specifies a query to be executed after the indexing process is complete for final cleanup operations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_168/text1.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsql_query_post_index\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with PHP in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the silent parameter in PHP. This parameter works the same as the IF EXISTS clause in SQL.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$params =\n[\n  'table' => 'products',\n  'body' => ['silent' => true]\n];\n\n$client->indices()->drop($params);\n```\n\n----------------------------------------\n\nTITLE: Basic TRUNCATE TABLE Syntax in SQL\nDESCRIPTION: The SQL syntax for emptying a table in Manticore Search. This command completely clears RT tables, disposing in-memory data and unlinking table data files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE table_name [WITH RECONFIGURE]\n```\n\n----------------------------------------\n\nTITLE: MVA Table Creation and Data Insertion\nDESCRIPTION: Creating a table with multi-value attribute (sizes) and inserting sample shoe data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\ncreate table shoes(title text, sizes multi);\ninsert into shoes values(0,'nike',(40,41,42)),(0,'adidas',(41,43)),(0,'reebook',(42,43));\n```\n\n----------------------------------------\n\nTITLE: Basic Sub-select Query Structure in Manticore SQL\nDESCRIPTION: Demonstrates the basic structure of a sub-select query in Manticore SQL. The outer select allows only ORDER BY and LIMIT clauses.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sub-selects.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (SELECT ... ORDER BY cond1 LIMIT X) ORDER BY cond2 LIMIT Y\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in Python-asyncio\nDESCRIPTION: Demonstrates the asynchronous Python client for creating a table with bigram indexing. It uses the same SQL command as the synchronous version.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) bigram_freq_words = \\'the, a, you, i\\' bigram_index = \\'both_freq\\'')\n```\n\n----------------------------------------\n\nTITLE: Using CALL SUGGEST for Single Word Correction\nDESCRIPTION: Demonstrates the usage of CALL SUGGEST command to get spelling suggestions for a single misspelled word, showing the suggested word, Levenshtein distance, and document count.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncall suggest('crossbudy', 'products');\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribute Update Reserve in Manticore Search\nDESCRIPTION: This setting reserves extra space for updates to blob attributes such as multi-value attributes (MVA), strings, and JSON. It helps avoid frequent file resizing when updating attributes with varying lengths.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_51\n\nLANGUAGE: ini\nCODE:\n```\nattr_update_reserve = 256k\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates by Query in Manticore Search using Java\nDESCRIPTION: This Java code demonstrates how to perform bulk updates by query using the Manticore Search Java client. It updates the 'coeff' field based on price ranges in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nString   body = \"{ \\\"update\\\" : { \\\"index\\\" : \\\"products\\\", \\\"doc\\\": { \\\"coeff\\\" : 1000 }, \\\"query\\\": { \\\"range\\\": { \\\"price\\\": { \\\"gte\\\": 1000 } } } }} \"+\"\\n\"+\n    \"{ \\\"update\\\" : { \\\"index\\\" : \\\"products\\\", \\\"doc\\\": { \\\"coeff\\\" : 0 }, \\\"query\\\": { \\\"range\\\": { \\\"price\\\": { \\\"lt\\\": 1000 } } } } }\"+\"\\n\";         \nindexApi.bulk(body);\n```\n\n----------------------------------------\n\nTITLE: Creating Price Range Facets Using Python Client\nDESCRIPTION: Python implementation for creating price range facets with the Manticore Search Python client. The code uses the search API to create an expression for price ranges and aggregates results based on that expression.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nres =searchApi.search({\"table\":\"facetdemo\",\"query\":{\"match_all\":{}},\"expressions\":{\"price_range\":\"INTERVAL(price,200,400,600,800)\"},\"aggs\":{\"group_property\":{\"terms\":{\"field\":\"price_range\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Configuring Main+Delta Schema in Manticore Search\nDESCRIPTION: Complete configuration example showing how to set up main and delta sources and tables in Manticore Search. Includes MySQL table creation for delta tracking, source configurations with SQL queries, and table definitions with kill list implementation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Main_delta.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE deltabreaker (\n  index_name VARCHAR(50) NOT NULL,\n  created_at TIMESTAMP NOT NULL  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (index_name)\n);\n```\n\nLANGUAGE: ini\nCODE:\n```\nsource main {\n  ...\n  sql_query_pre = REPLACE INTO deltabreaker SET index_name = 'main', created_at = NOW()\n  sql_query =  SELECT id, title, UNIX_TIMESTAMP(updated_at) AS updated FROM documents WHERE deleted=0 AND  updated_at  >=FROM_UNIXTIME($start) AND updated_at  <=FROM_UNIXTIME($end)\n  sql_query_range  = SELECT ( SELECT UNIX_TIMESTAMP(MIN(updated_at)) FROM documents) min, ( SELECT UNIX_TIMESTAMP(created_at)-1 FROM deltabreaker WHERE index_name='main') max\n  sql_query_post_index = REPLACE INTO deltabreaker set index_name = 'delta', created_at = (SELECT created_at FROM deltabreaker t WHERE index_name='main')\n  ...\n  sql_attr_timestamp = updated\n}\n\nsource delta : main {\n  sql_query_pre =\n  sql_query_range = SELECT ( SELECT UNIX_TIMESTAMP(created_at) FROM deltabreaker WHERE index_name='delta') min, UNIX_TIMESTAMP() max\n  sql_query_killlist = SELECT id FROM documents WHERE updated_at >=  (SELECT created_at FROM deltabreaker WHERE index_name='delta')\n}\n\ntable main {\n  path = /var/lib/manticore/main\n  source = main\n}\n\ntable delta {\n  path = /var/lib/manticore/delta\n  source = delta\n  killlist_target = main:kl\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CPU Statistics in Manticore Search\nDESCRIPTION: This command shows how to start Manticore Search with CPU statistics enabled. It provides actual CPU time reports for queries and in the status report.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --config /etc/manticoresearch/manticore.conf --cpustats\n```\n\n----------------------------------------\n\nTITLE: Getting Weekday Name from Timestamp with DAYNAME() in SQL\nDESCRIPTION: Executes the DAYNAME() function in SQL to get the full name of the weekday (e.g., 'Monday', 'Tuesday') for a given timestamp, interpreted according to the current timezone. This example uses NOW() as the timestamp input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect dayname(now());\n```\n\n----------------------------------------\n\nTITLE: Example Agent Configurations in Manticore Search INI\nDESCRIPTION: Provides various examples of agent configurations, including sharding over multiple servers, per-agent options, and high availability setups.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# config on box1\n# sharding a table over 3 servers\nagent = box2:9312:shard1\nagent = box3:9312:shard2\n\n# config on box2\n# sharding a table over 3 servers\nagent = box1:9312:shard2\nagent = box3:9312:shard3\n\n# config on box3\n# sharding a table over 3 servers\nagent = box1:9312:shard1\nagent = box2:9312:shard3\n\n# per agent options\nagent = box1:9312:shard1[ha_strategy=nodeads]\nagent = box2:9312:shard2[conn=pconn]\nagent = box2:9312:shard2[conn=pconn,ha_strategy=nodeads]\nagent = test:9312:any[blackhole=1]\nagent = test:9312|box2:9312|box3:9312:any2[retry_count=2]\nagent = test:9312|box2:9312:any2[retry_count=2,conn=pconn,ha_strategy=noerrors]\n```\n\n----------------------------------------\n\nTITLE: Using All-Field Search Operator in Manticore Search\nDESCRIPTION: Shows how to explicitly search across all available fields in a document using the @* operator.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n@* hello\n```\n\n----------------------------------------\n\nTITLE: PHP Response for Highlight Request\nDESCRIPTION: Example response from a PHP highlight request showing document ID, contents, and highlighted snippets for both 'content' and 'title' fields with HTML bold tags around matched terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_98\n\nLANGUAGE: php\nCODE:\n```\nDocument: 1\ntitle : Books one\ncontent : They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it.\nHighlight for content:\n-  into the room. <b>One</b> of the <b>robots</b> followed as well\nHighlight for title:\n- Books <b>one</b>\n```\n\n----------------------------------------\n\nTITLE: Java Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using Java. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_38\n\nLANGUAGE: Java\nCODE:\n```\nclass BulkResponse {\n    items: [{delete={_index=test, _id=0, created=false, deleted=2, result=created, status=200}}]\n    error: null\n    additionalProperties: {errors=false}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in PHP\nDESCRIPTION: Uses the PHP client to create a table with a 'title' text field and a 'keys' string attribute. String attributes are stored as-is and can be used for filtering but not full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n\t'keys'=>['type'=>'string']\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index via JSON API\nDESCRIPTION: Uses the JSON API to create a table with bigram indexing. It sets the same configuration as the SQL example, using 'both_freq' mode and specifying frequent words.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_62\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'both_freq'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status with SQL in Python\nDESCRIPTION: A Python snippet using the `utilsApi.sql` function to query a specific agent's status based on its IP address, focusing on parameters with '15periods'. The example is suitable for applications using synchronous HTTP requests in Python.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('SHOW AGENT \\'192.168.0.202:6714\\' STATUS LIKE \\'%15periods%\\'')\n```\n\nLANGUAGE: Python\nCODE:\n```\n{u'columns': [{u'Key': {u'type': u'string'}},\n              {u'Value': {u'type': u'string'}}],\n u'data': [\n\t{u'Key': u'agent_15periods_query_timeouts', u'Value': u'0'},\n\t{u'Key': u'agent_15periods_connect_timeouts', u'Value': u'0'},\n\t{u'Key': u'agent_15periods_connect_failures', u'Value': u'0'},\n    {u'Key': u'agent_15periods_network_errors', u'Value': u'0'},\n    {u'Key': u'agent_15periods_connect_failures', u'Value': u'0'},\n    {u'Key': u'agent_15periods_wrong_replies', u'Value': u'0'},\n    {u'Key': u'agent_15periods_unexpected_closings', u'Value': u'0'},\n    {u'Key': u'agent_15periods_warnings', u'Value': u'0'},\n    {u'Key': u'agent_15periods_succeeded_queries', u'Value': u'439'},\n    {u'Key': u'agent_15periods_msecsperquery', u'Value': u'231.73'},\n    ],\n u'error': u'',\n u'total': 0,\n u'warning': u''}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status with SQL in Java\nDESCRIPTION: Java code implements the `utilsApi.sql` method to query a specific agent's status, aiming to extract status variables with '15periods'. The example highlights Java’s string and hashmap handling in the context of API data retrieval.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\");\n```\n\nLANGUAGE: Java\nCODE:\n```\n{columns=[{Key={type=string}},\n              {Value={type=string}}],\n data=[\n\t{Key=agent_15periods_query_timeouts, Value=0},\n\t{Key=agent_15periods_connect_timeouts, Value=0},\n\t{Key=agent_15periods_connect_failures, Value=0},\n    {Key=agent_15periods_network_errors, Value=0},\n    {Key=agent_15periods_connect_failures, Value=0},\n    {Key=agent_15periods_wrong_replies, Value=0},\n    {Key=agent_15periods_unexpected_closings, Value=0},\n    {Key=agent_15periods_warnings, Value=0},\n    {Key=agent_15periods_succeeded_queries, Value=439},\n    {Key=agent_15periods_msecsperquery, Value=233.73},\n    ],\n error=,\n total=0,\n warning=}\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (JSON)\nDESCRIPTION: Removes a table from a replication cluster using the JSON API. The command is sent as a POST request to the CLI endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nALTER CLUSTER posts DROP weekly_index\n\"\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Search in Docker for Production\nDESCRIPTION: Docker command for running Manticore Search in a production environment. Maps local directories for data persistence and exposes required ports for MySQL and HTTP connections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore -v $(pwd)/data:/var/lib/manticore -p 127.0.0.1:9306:9306 -p 127.0.0.1:9308:9308 -d manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: Building Manticore Search with CMake\nDESCRIPTION: Command to build Manticore Search using CMake. This command builds the project in RelWithDebInfo configuration, which is suitable for production use with debug information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --config RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum RT Merge I/O Size in Manticore Search (INI)\nDESCRIPTION: Specifies the maximum size of an I/O operation for RT chunks merge. Default is 0 (no limit). Larger I/Os are broken down, working with rt_merge_iops to limit total I/O.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_56\n\nLANGUAGE: ini\nCODE:\n```\nrt_merge_maxiosize = 1M\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentence and Paragraph Indexing in Manticore Search\nDESCRIPTION: The index_sp directive controls detection and indexing of sentence and paragraph boundaries. It enables SENTENCE and PARAGRAPH operators, with sentence detection based on text analysis and paragraph detection relying on HTML markup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Advanced_HTML_tokenization.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nindex_sp = {0|1}\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via Go\nDESCRIPTION: Creates a percolate table using Go client with context.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"CREATE TABLE products(title text, meta json) type='pq'\").Execute()\n```\n\n----------------------------------------\n\nTITLE: Executing Read Statements in Clusters\nDESCRIPTION: Examples of read operations using both SQL and JSON formats, demonstrating how to query data from cluster tables using SELECT and CALL PQ statements.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM weekly_index\nCALL PQ('posts:weekly_index', 'document is here')\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n{\n  \"cluster\":\"posts\",\n  \"table\":\"weekly_index\",\n  \"query\":{\"match\":{\"title\":\"keyword\"}}\n}'\nPOST /search -d '\n{\n  \"table\":\"weekly_index\",\n  \"query\":{\"match\":{\"title\":\"keyword\"}}\n}'\n```\n\n----------------------------------------\n\nTITLE: RE2 Library Target Configuration\nDESCRIPTION: Configures the RE2 library target with compile options, definitions, and properties for different platforms\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libre2/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library ( re2 ${SOURCES} ${HFILES} ${INSTALL_HFILES} )\ntarget_link_libraries ( re2 PRIVATE Threads::Threads )\ntarget_include_directories ( re2 PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>$<INSTALL_INTERFACE:include> )\n\nif (WIN32)\n\ttarget_compile_definitions ( re2 PRIVATE NOMINMAX )\nendif ()\ntarget_compile_options ( re2 PRIVATE $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/Oi -wd4267> )\ntarget_compile_options ( re2 PRIVATE $<$<NOT:$<COMPILE_LANG_AND_ID:CXX,MSVC>>:-Wsign-compare -c> )\ntarget_compile_options ( re2 PRIVATE $<$<COMPILE_LANG_AND_ID:CXX,GNU>:-Wno-class-memaccess -Wno-parentheses> )\n```\n\n----------------------------------------\n\nTITLE: Enabling IO Statistics in Manticore Search\nDESCRIPTION: This command demonstrates how to start Manticore Search with IO statistics enabled. It provides more detailed information on input/output operations for each query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --config /etc/manticoresearch/manticore.conf --iostats\n```\n\n----------------------------------------\n\nTITLE: Faceting Without Duplicates in Manticore Search (SQL)\nDESCRIPTION: This example shows how to use DISTINCT with FACET to deduplicate results. It selects brand_name and property fields from facetdemo and facets by brand_name while removing duplicates based on the property field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT brand_name, property FROM facetdemo FACET brand_name distinct property;\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Distributed Table with Sharded Data in Manticore Search\nDESCRIPTION: Basic configuration of a distributed table that splits data across four servers, with each server hosting one shard. If a server fails, the distributed table continues to function but results from the failed shard will be missing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntable mydist {\n          type  = distributed\n          agent = box1:9312:shard1\n          agent = box2:9312:shard2\n          agent = box3:9312:shard3\n          agent = box4:9312:shard4\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Month Name from Timestamp with MONTHNAME() in SQL\nDESCRIPTION: Executes the MONTHNAME() function in SQL to get the full name of the month (e.g., 'January', 'February') for a given timestamp, interpreted according to the current timezone. This example uses NOW() as the timestamp input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect monthname(now());\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Table via Python-asyncio\nDESCRIPTION: Creates a percolate table using Python's asyncio client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Percolate_table.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, meta json) type=\\'pq\\'')\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (Python)\nDESCRIPTION: Adds an existing local table to a replication cluster using Python client. The SQL command is executed through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('ALTER CLUSTER click_query ADD clicks_daily_index')\n```\n\n----------------------------------------\n\nTITLE: Interpreting Percolation Python Results\nDESCRIPTION: Shows Python percolation query results, detailing the matches and associated metadata such as score and document slot.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'2811025403043381494', u'table': u'products', u'_score': u'1', u'_source': {u'query': {u'ql': u'@title bag'}}, u'_type': u'doc', u'fields': {u'_percolator_document_slot': [2]}}, {u'_id': u'2811025403043381496', u'table': u'products', u'_score': u'1', u'_source': {u'query': {u'ql': u'@title shoes'}}, u'_type': u'doc', u'fields': {u'_percolator_document_slot': [1]}}], 'total': 2}, 'profile': None, 'timed_out': False, 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Secondary Index\nDESCRIPTION: SQL command to rebuild secondary indexes after upgrading from Manticore 5\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table_name REBUILD SECONDARY\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with Indexed-Only Text Field in INI\nDESCRIPTION: Defines a real-time table configuration in INI format with a 'title' field that is only indexed. Without the stored_fields directive, the field is only indexed by default.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\t# when configuring fields via config, they are indexed (and not stored) by default\n\trt_field = title\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Thai Language Support in Manticore Search\nDESCRIPTION: This snippet shows the configuration for Thai language support in Manticore Search using a specific charset table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ncharset_table=thai\n```\n\n----------------------------------------\n\nTITLE: Getting Year and Month Code with YEARMONTH() in SQL\nDESCRIPTION: Executes the YEARMONTH() function in SQL to retrieve the year and month code (format YYYYMM, range 196912-203801) from a given timestamp, interpreted according to the current timezone. This example uses NOW() as the timestamp input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect yearmonth(now());\n```\n\n----------------------------------------\n\nTITLE: Setting SSL Certificate Path\nDESCRIPTION: Defines path to server's SSL certificate used for HTTPS encryption.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_65\n\nLANGUAGE: ini\nCODE:\n```\nssl_cert = keys/server-cert.pem\n```\n\n----------------------------------------\n\nTITLE: C# Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using C#. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nclass BulkResponse {\n    items: [{replace={_index=test, _id=0, created=false, deleted=2, result=created, status=200}}]\n    error: null\n    additionalProperties: {errors=false}\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Stack Requirements in Manticore Search\nDESCRIPTION: This command shows how to use the --mockstack option to analyze and report necessary stack sizes for various operations in Manticore Search. It outputs calculated stack requirements and environment variables for configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --mockstack\n```\n\n----------------------------------------\n\nTITLE: Updating Documents using PHP\nDESCRIPTION: PHP provides a segment which demonstrates how to update document properties within a database using PHP methods. Dependency includes a PHP environment and a suitable library for database index operations. The code handles setting cluster names and document updates.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$index->setName('products')->setCluster('weekly');\n$index->updateDocument(['enabled'=>0],1);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index->updateDocument(['tags1'=>[]],1);\n```\n\nLANGUAGE: PHP\nCODE:\n```\nArray(\n    [_index] => products\n    [updated] => 1\n)\n```\n\n----------------------------------------\n\nTITLE: SHOW META in a Single Statement with Query in Manticore Search\nDESCRIPTION: Running SHOW META in the same statement as the query to ensure metadata is from the correct query, which is recommended especially when using connection pools.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_META.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id,story_author FROM hn_small WHERE MATCH('one|two|three') LIMIT 5; SHOW META;\n```\n\n----------------------------------------\n\nTITLE: Creating a Columnar Table with Row-wise Default Engine in SQL\nDESCRIPTION: This SQL snippet demonstrates creating a table with columnar storage for a specific attribute, while setting the table's default engine to row-wise.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table tbl(title text, type int, price float engine='columnar') engine='rowwise';\n```\n\n----------------------------------------\n\nTITLE: Python Response for Percolate Query Document Matching\nDESCRIPTION: Shows the Python dictionary response format when matching documents to percolate queries. The _percolator_document_slot field contains the document indices (1-based) that matched each query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'2811025403043381494',\n                    u'table': u'products',\n                    u'_score': u'1',\n                    u'_source': {u'query': {u'ql': u'@title bag'}},\n                    u'_type': u'doc',\n                    u'fields': {u'_percolator_document_slot': [2]}},\n                   {u'_id': u'2811025403043381496',\n                    u'table': u'products',\n                    u'_score': u'1',\n                    u'_source': {u'query': {u'ql': u'@title shoes'}},\n                    u'_type': u'doc',\n                    u'fields': {u'_percolator_document_slot': [1]}}],\n          'total': 2},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Adding Tables to Cluster\nDESCRIPTION: Examples of adding tables to an existing cluster using different programming languages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER CLUSTER posts ADD pq_title\nALTER CLUSTER posts ADD pq_clicks\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nALTER CLUSTER posts ADD pq_title\n\"\nPOST /cli -d \"\nALTER CLUSTER posts ADD pq_clicks\n\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n  'cluster' => 'posts',\n  'body' => [\n     'operation' => 'add',\n     'table' => 'pq_title'\n\n  ]\n];\n$response = $client->cluster()->alter($params);\n$params = [\n  'cluster' => 'posts',\n  'body' => [\n     'operation' => 'add',\n     'table' => 'pq_clicks'\n\n  ]\n];\n$response = $client->cluster()->alter($params);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore Go Client\nDESCRIPTION: Illustrates creating and executing a delete operation in Go targeting the 'test' index, filtered by a text match expression. The request is assembled using Manticore Go client helper functions and executed via the API. Requires 'manticoreclient' and proper error/context handling for production environments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\ndelRequest := manticoreclient.NewDeleteDocumentRequest(\\\"test\\\")\\nmatchExpr := map[string]interface{} {\\\"*\\\": \\\"Text 1t\\\"}\\ndelQuery := map[string]interface{} {\\\"match\\\": matchExpr }\\ndelRequest.SetQuery(delQuery)\\nres, _, _ := apiClient.IndexAPI.Delete(context.Background()).DeleteDocumentRequest(*delRequest).Execute();\n```\n\n----------------------------------------\n\nTITLE: Highlighting with C# in Manticore Search\nDESCRIPTION: This example demonstrates how to use the C# client to perform a search query with highlighting enabled, including setting up the search request and handling the response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"try|gets|down|said\");\nvar highlight = new Highlight();\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (Javascript)\nDESCRIPTION: Javascript code to create a table with a JSON field that has a secondary index in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, j json secondary_index=\\'1\\')');\n```\n\n----------------------------------------\n\nTITLE: Response for TRUNCATE with RECONFIGURE (Last Example)\nDESCRIPTION: Example response for a truncate with RECONFIGURE operation. This response is shown for the Rust example but uses C# syntax in the documentation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_36\n\nLANGUAGE: clike\nCODE:\n```\n{total=0, error=\"\", warning=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Using POW for Exponentiation in ManticoreSearch SQL - SQL\nDESCRIPTION: Raises the first argument to the power of the second argument, returning the result as a floating point number. Requires both arguments to be numeric (first: base, second: exponent). Non-numeric input or large exponents can yield overflows or undefined results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nPOW(a, b)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefix Fields\nDESCRIPTION: Setting to limit prefix indexing to specific full-text fields in dict=crc mode. By default, all fields are indexed in prefix mode.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nprefix_fields = field1[, field2, ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in SQL\nDESCRIPTION: This SQL query creates a table 'products' with blended characters configuration in Manticore Search, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) blend_chars = '+, &, U+23, @->_'\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Manticore using JavaScript Client\nDESCRIPTION: JavaScript code to create a table named 'products' with text and float fields and English stemming morphology enabled using the Manticore JavaScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('create table products(title text, price float) morphology=\\'stem_en\\'');\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in Rust\nDESCRIPTION: Demonstrates how to create a table with bigram indexing and frequent words using the Rust client. It executes an SQL command asynchronously to set up the table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_80\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'first_freq'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length using Python Asyncio (Python-asyncio)\nDESCRIPTION: This Python-asyncio snippet facilitates creating a table with ngram_len, targeting efficient async operations in Manticoresearch indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_52\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) ngram_chars = \\'cont\\' ngram_len = \\'1\\'')\n```\n\n----------------------------------------\n\nTITLE: Optimizing a Table in Manticore Search\nDESCRIPTION: Basic usage of the OPTIMIZE TABLE command to add an RT table to the optimization queue for background processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Compacting_a_table.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nOPTIMIZE TABLE rt;\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using Python\nDESCRIPTION: This Python code uses the Manticore Search API to execute an SQL statement that creates a distributed table named 'local_dist'. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE local_dist type=\\'distributed\\' local=\\'index1\\' local=\\'index2\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in Java\nDESCRIPTION: This Java code creates a table 'products' with support for both non-continuous and continuous script languages using the Manticore Search Java client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) charset_table = 'non_cont' ngram_len = '1' ngram_chars = 'cont'\", true);\n```\n\n----------------------------------------\n\nTITLE: Highlighting with PHP in Manticore Search\nDESCRIPTION: This code snippet shows how to use the highlight() function in the PHP client to retrieve and display highlighted text fragments from matching documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$results = $index->search('try')->highlight()->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId();\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.': '.$value;\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Materialized View for Kafka Data Transformation\nDESCRIPTION: Sets up a materialized view that transforms and maps data from Kafka source to destination table with field mappings and transformations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE MATERIALIZED VIEW view_table\nTO destination_kafka AS\nSELECT id, term as name, abbrev as short_name,\n       UTC_TIMESTAMP() as received_at, GlossDef.size as size FROM kafka\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status with SQL in TypeScript\nDESCRIPTION: This additional TypeScript example demonstrates querying agent status with a specified agent IP, focusing on parameters containing '15periods'. It requires the TypeScript runtime's promise handling for asynchronous request execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\"\");\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n\t\"columns\":\n\t[{\n\t\t{\"Key\": {\"type\": \"string\"}\n\t},\n    \t{\"Value\": {\"type\": \"string\"}\n    }],\n\t\"data\":\n\t[\n\t\t{\"Key\": \"agent_15periods_query_timeouts\", \"Value\": \"0\"},\n\t\t{\"Key\": \"agent_15periods_connect_timeouts\", \"Value\": \"0\"},\n\t\t{\"Key\": \"agent_15periods_connect_failures\", \"Value\": \"0\"},\n\t    {\"Key\": \"agent_15periods_network_errors\", \"Value\": \"0\"},\n\t    {\"Key\": \"agent_15periods_connect_failures\", \"Value\": \"0\"},\n\t    {\"Key\": \"agent_15periods_wrong_replies\", \"Value\": \"0\"},\n\t    {\"Key\": \"agent_15periods_unexpected_closings\", \"Value\": \"0\"},\n\t    {\"Key\": \"agent_15periods_warnings\", \"Value\": \"0\"},\n\t    {\"Key\": \"agent_15periods_succeeded_queries\", \"Value\": \"439\"},\n\t    {\"Key\": \"agent_15periods_msecsperquery\", \"Value\": \"233.73\"},\n    ],\n\t\"error\": \"\",\n\t\"total\": 0,\n\t\"warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Cluster Initialization Command\nDESCRIPTION: Alternative method to start the first node using systemd service manager.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Restarting_a_cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmanticore_new_cluster\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in SQL\nDESCRIPTION: Creates a table named 'products' with bigram indexing configured. It sets frequent words and uses the 'both_freq' bigram indexing mode, which indexes word pairs where both words are frequent.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'both_freq'\n```\n\n----------------------------------------\n\nTITLE: Configuring Minio Client for Manticore S3 Storage\nDESCRIPTION: This snippet demonstrates how to configure the Minio client to connect to Manticore's S3 storage. It adds a new host configuration for the Manticore S3 endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/minio-binaries\n./mc config host add manticore http://s3.manticoresearch.com:9000 manticore manticore\n```\n\n----------------------------------------\n\nTITLE: Sorting MVA by Least/Greatest Values\nDESCRIPTION: Shows how to sort results using the minimum or maximum values of MVA fields using different language implementations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_79\n\nLANGUAGE: SQL\nCODE:\n```\nselect least(product_codes) l from products order by l asc\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"products\",\n  \"query\":\n  {\n    \"match_all\": {},\n\t\"sort\": [ { \"product_codes\":{ \"order\":\"asc\", \"mode\":\"min\" } } ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Slow Query Logging Configuration\nDESCRIPTION: Configuration for logging only queries that exceed a specified execution time threshold.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Query_logging.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n    query_log = /var/log/query.log\n    query_log_min_msec  = 1000\n    # query_log_min_msec  = 1s\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying BITDOT for Weighted Bit Sum in ManticoreSearch SQL - SQL\nDESCRIPTION: Calculates the sum of products between the bits of a mask and their respective weights. Accepts one mask and a list of weights, returning the sum as an integer. The function is limited to bitwise operations and expects integer types for both mask and weights.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nBITDOT(mask, w0, w1, ...)\n```\n\n----------------------------------------\n\nTITLE: Adding a Table to a Replication Cluster (C#)\nDESCRIPTION: Adds an existing local table to a replication cluster using C# client. The SQL command is executed through the utilsApi.Sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_7\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"ALTER CLUSTER click_query ADD clicks_daily_index\");\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in C#\nDESCRIPTION: Shows how to query agent status using the C# client library. Makes SQL query to show agent metrics filtered for 15-period statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_42\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\");\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW WARNINGS in SQL\nDESCRIPTION: The snippet demonstrates how to execute the SHOW WARNINGS statement to retrieve warnings produced by the latest SQL query execution. This includes syntax and semantic errors found in queries executed against a Manticore Search index. It requires a previously executed query that has produced a warning. The key parameters are the SQL queries, and the output is any related warnings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_WARNINGS.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT * FROM test1 WHERE MATCH('@@title hello') \\G\nERROR 1064 (42000): index test1: syntax error, unexpected TOK_FIELDLIMIT near '@title hello'\n\nmysql> SELECT * FROM test1 WHERE MATCH('@title -hello') \\G\nERROR 1064 (42000): index test1: query is non-computable (single NOT operator)\n\nmysql> SELECT * FROM test1 WHERE MATCH('\"test doc\"/3') \\G\n*************************** 1\\. row ***************************\n        id: 4\n    weight: 2500\n  group_id: 2\ndate_added: 1231721236\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS \\G\n*************************** 1\\. row ***************************\n  Level: warning\n   Code: 1000\nMessage: quorum threshold too high (words=2, thresh=3); replacing quorum operator\n         with AND operator\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Square Root Computation with SQRT in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns the square root of a positive numeric argument as a floating point result. If the input is negative, the function will result in an error or undefined value. It is used for root and geometric calculations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nSQRT(value)\n```\n\n----------------------------------------\n\nTITLE: Implementing regexp_filter in Manticore Search\nDESCRIPTION: Applies regular expression patterns to normalize text during indexing and searching. This is especially useful for handling variant product names or properties in product search. Regular expressions are applied before tokenization and other processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_124\n\nLANGUAGE: ini\nCODE:\n```\n# index '13\"' as '13inch'\nregexp_filter = \\b(\\d+)\\\" => \\1inch\n\n# index 'blue' or 'red' as 'color'\nregexp_filter = (blue|red) => color\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) regexp_filter = '(blue|red) => color'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) regexp_filter = '(blue|red) => color'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'regexp_filter' => '(blue|red) => color'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Runtime Library Loading\nDESCRIPTION: Examples of environment variables that can be used to override default library paths for ODBC, EXPAT, iconv, MySQL and PostgreSQL connections at runtime.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nODBC_LIB=/path/to/odbc/library\nEXPAT_LIB=/path/to/expat/library\nICONV_LIB=/path/to/iconv/library\nMYSQL_LIB=/path/to/mysql/library\nPOSTGRESQL_LIB=/path/to/postgresql/library\nFULL_SHARE_DIR=/path/to/share/directory\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Source in Manticore Search\nDESCRIPTION: Example configuration for importing data from a CSV file source. Shows how to set up a CSV pipe command and declare field types for name and genre_tags attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_CSV,TSV.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nsource csv_test\n{\n    type = csvpipe\n    csvpipe_command = cat /tmp/rock_bands.csv\n    csvpipe_field = name\n    csvpipe_attr_multi = genre_tags\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with C# in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause through the C# client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nsqlresult = utilsApi.Sql(\"DROP TABLE IF EXISTS products\", true);\n```\n\n----------------------------------------\n\nTITLE: Type Conversion to String in SQL\nDESCRIPTION: The TO_STRING() function converts a given argument to a string type, requiring additional computation due to the change in data type.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Type_casting_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nTO_STRING()\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in Python\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using Python. The method requires specifying the cluster name, table name, and document ID to be deleted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nindexApi.delete({\"cluster\":\"cluster\",\"table\" : \"test\", \"id\" : 1})\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with C# in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in C#. The method requires formatting multiple JSON operations as a newline-delimited string.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstring   body = \"{ \"delete\" : { \"table\" : \"test\", \"id\": 1 } } \"+\"\\n\"+\n    \"{ \"delete\" : { \"table\" : \"test\", \"query\": { \"equals\": { \"int_data\": 20 } } } }\"+\"\\n\";         \nindexApi.Bulk(body);\n```\n\n----------------------------------------\n\nTITLE: SQL Query Plan Output with Expanded Terms in Manticore Search\nDESCRIPTION: Displays the complex transformed query tree showing how the wildcard term 'way*' has been expanded into multiple specific terms (wayne, ways, wayyy, way) while maintaining the AND relationship with the 'hey' term.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nQuery OK, 0 rows affected (0.00 sec)\n\n+--------+\n| id     |\n+--------+\n| 711651 |\n+--------+\n1 row in set (0.04 sec)\n\n+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Variable         | Value                                                                                                                                                                                                                                                                                                                                                                                                                   |\n+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| transformed_tree | AND(\n  OR(\n    OR(\n      AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),\n      OR(\n        AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),\n        AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))),\n    AND(fields=(title), KEYWORD(way, querypos=1, expanded)),\n    OR(fields=(title), KEYWORD(way*, querypos=1, expanded))),\n  AND(fields=(content), KEYWORD(hey, querypos=2))) |\n+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: JSON Histogram Response Format\nDESCRIPTION: Shows the response format from a JSON histogram query. The response includes aggregation results with document counts in each price range bucket, with buckets created at intervals of 300.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 20,\n    \"total_relation\": \"eq\",\n    \"hits\": []\n  },\n  \"aggregations\": {\n    \"price_range\": {\n      \"buckets\": [\n        {\n          \"key\": 0,\n          \"doc_count\": 10\n        },\n        {\n          \"key\": 300,\n          \"doc_count\": 6\n        },\n        {\n          \"key\": 600,\n          \"doc_count\": 3\n        },\n        {\n          \"key\": 900,\n          \"doc_count\": 1\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW THREADS via JavaScript Client\nDESCRIPTION: Example of using the Manticore Search JavaScript client to execute the SHOW THREADS command through the UtilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar Manticoresearch = require('manticoresearch');\n\nvar utilsApi = new Manticoresearch.UtilsApi();\nasync function showThreads() {\n    res = await utilsApi.sql('SHOW THREADS');\n    console.log(JSON.stringify(res, null, 4));\n}\n\nshowThreads();\n```\n\n----------------------------------------\n\nTITLE: Performing Document Updates with JavaScript\nDESCRIPTION: JavaScript is used here to update documents through API calls. It assumes a JavaScript runtime environment and appropriate database access methods. The code provides an example where document IDs and content are specified directly within the API call structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = wait indexApi.update({\"cluster\":\"weekly\", \"table\" : \"products\", \"id\" : 1, \"doc\" : {\"enabled\" : 0}});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nindexApi.update({\"table\" : \"products\", \"id\" : 1, \"doc\" : {\"tags1\": []}})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"table\":\"products\",\"_id\":1,\"result\":\"updated\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Agents in Manticore Search INI\nDESCRIPTION: Demonstrates different ways to specify remote agents in a Manticore Search configuration file, including multiple agents, table lists, and agent options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nagent = address1 [ | address2 [...] ][:table-list]\nagent = address1[:table-list [ | address2[:table-list [...] ] ] ]\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (JavaScript)\nDESCRIPTION: Removes a table from a replication cluster using JavaScript client. The SQL command is executed asynchronously through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('ALTER CLUSTER posts DROP weekly_index');\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Search Highlighting in C#\nDESCRIPTION: Example of performing a search with basic highlighting in C# using ManticoreSearch API. The code sets up a search request with fulltext filtering and highlighting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_56\n\nLANGUAGE: clike\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"one|robots\");\nvar highlight = new Highlight();\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Searching and Highlighting in PHP\nDESCRIPTION: Defines a search operation on the 'books' index to find entries matching 'one' or 'robots', and retrieves highlights for the 'content' field. Requires a Manticore PHP client with proper dependencies. Outputs highlighted and fielded details of search results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$index->setName('books');$results = $index->search('one|robots')->highlight(['content'])->get();foreach($results as $doc){echo 'Document: '.$doc->getId().\"\\n\";foreach($doc->getData() as $field=>$value){echo $field.' : '.$value.\"\\n\";}foreach($doc->getHighlight() as $field=>$snippets){echo \"Highlight for \".$field.\":\\n\";foreach($snippets as $snippet){echo \"- \".$snippet.\"\\n\";}}}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nDocument: 1title : Books onecontent : They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it.Highlight for content:- They followed Bander. The <b>robots</b> remained at a polite distance,-  three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander-  gestured the other <b>robots</b> away and entered itself. The\n```\n\n----------------------------------------\n\nTITLE: Configuring Bigram Frequent Words in Manticore Search\nDESCRIPTION: Defines a list of keywords considered 'frequent' for bigram indexing. This setting is used in conjunction with certain bigram_index modes to determine which word pairs to index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_71\n\nLANGUAGE: ini\nCODE:\n```\nbigram_freq_words = the, a, you, i\n```\n\n----------------------------------------\n\nTITLE: Promote to 64-bit Integer in SQL\nDESCRIPTION: The BIGINT() function promotes an integer argument to a 64-bit type, ensuring 64-bit evaluation for expressions despite 32-bit arguments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Type_casting_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nBIGINT()\n```\n\n----------------------------------------\n\nTITLE: Basic Word Forms Dictionary Format\nDESCRIPTION: Example of basic word forms dictionary format showing word mappings using the '>' symbol.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nwalks > walk\nwalked > walk\nwalking > walk\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE via HTTP API\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using the HTTP API in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /cli -d \"TRUNCATE TABLE products with reconfigure\"\n```\n\n----------------------------------------\n\nTITLE: Setting minimum stemming length in Manticore Search\nDESCRIPTION: This snippet shows how to set the minimum word length for stemming in Manticore Search. It creates a table with a minimum stemming length of 4 characters and English stemming enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Morphology.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) min_stemming_len = '4' morphology = 'stem_en'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) min_stemming_len = '4' morphology = 'stem_en'\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'min_stemming_len' => '4',\n             'morphology' => 'stem_en'\n        ]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) min_stemming_len = \\'4\\' morphology = \\'stem_en\\'')\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) min_stemming_len = \\'4\\' morphology = \\'stem_en\\'')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) min_stemming_len = \\'4\\' morphology = \\'stem_en\\'');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) min_stemming_len = '4' morphology = 'stem_en'\", true);\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) min_stemming_len = '4' morphology = 'stem_en'\", true);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) min_stemming_len = '4' morphology = 'stem_en'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  min_stemming_len = 4\n  morphology = stem_en\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Multiple Stop Word Files\nDESCRIPTION: Shows how to create a table with multiple stop word file paths across different programming languages and APIs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Ignoring_stop-words.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) stopwords = '/usr/local/manticore/data/stopwords.txt /usr/local/manticore/data/stopwords-ru.txt /usr/local/manticore/data/stopwords-en.txt'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) stopwords = '/usr/local/manticore/data/stopwords.txt stopwords-ru.txt stopwords-en.txt'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'stopwords' => '/usr/local/manticore/data/stopwords.txt stopwords-ru.txt stopwords-en.txt'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode using Java (Java)\nDESCRIPTION: This Java example uses a utility API call to create a Manticoresearch table incorporating blend_mode options to influence token indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) blend_mode = 'trim_tail, skip_pure' blend_chars = '+, &'\", true);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using Python-asyncio in Manticore Search\nDESCRIPTION: This Python-asyncio code snippet deletes the replication cluster named 'click_query' using the Manticore Search Python client with asyncio support. It uses the await keyword with utilsApi.sql() method to execute the SQL command asynchronously.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('DELETE CLUSTER click_query')\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents using Manticore JavaScript Client\nDESCRIPTION: Presents code for asynchronously deleting all documents priced at most 10 in 'products' using a JavaScript client. The code relies on the async/await feature and expects a promise-returning 'indexApi.delete' method. Manticoresearch JavaScript client library must be installed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nres = await indexApi.delete({\\\"table\\\" : \\\"products\\\", \\\"query\\\": {\\\"range\\\":{\\\"price\\\":{\\\"lte\\\":10}}}});\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Chinese Stopwords\nDESCRIPTION: Creates a table with Chinese language support including built-in stopwords using the 'zh' alias.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Languages_with_continuous_scripts.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) charset_table = 'chinese' morphology = 'icu_chinese' stopwords = 'zh'\n```\n\n----------------------------------------\n\nTITLE: Executing FLUSH HOSTNAMES Command in Manticore Search SQL\nDESCRIPTION: The FLUSH HOSTNAMES command is used to renew IP addresses associated with agent host names in Manticore Search. It refreshes the DNS lookup for all hostnames used in the configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_hostnames.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nFLUSH HOSTNAMES\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore as Windows Service with Batch Script\nDESCRIPTION: This snippet demonstrates how to install Manticore Search as a Windows service using a batch command. Requires specifying full paths for both the executable and configuration file. The service can be started via Microsoft's Services management console. No additional configuration is needed if running in RT mode.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Windows.md#2025-04-22_snippet_0\n\nLANGUAGE: bat\nCODE:\n```\n\\path\\to\\searchd.exe --install --config \\path\\to\\config --servicename Manticore\n```\n\n----------------------------------------\n\nTITLE: PHP Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using PHP. The response includes details about the number of documents deleted and the operation status.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nArray(\n    [items] => Array\n        (\n            [0] => Array\n                (\n                    [bulk] => Array\n                        (\n                            [_index] => test\n                            [_id] => 0\n                            [created] => 0\n                            [deleted] => 2\n                            [updated] => 0\n                            [result] => created\n                            [status] => 201\n                        )\n\n                )\n\n        )\n\n    [current_line] => 3\n    [skipped_lines] => 0\n    [errors] =>\n    [error] =>\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Index-Time Token Filter in Manticore Search\nDESCRIPTION: Example configuration for an index-time token filter that processes email fields. The token filter is declared with library name, plugin name, and specific settings for email processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Token_filter_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nindex_token_filter = my_lib.so:email_process:field=email;split=.io\n```\n\n----------------------------------------\n\nTITLE: Querying Custom UDFs in Manticoresearch via SQL\nDESCRIPTION: This SQL snippet demonstrates how to invoke a user-defined function (UDF) within a SELECT query on a Manticoresearch index. The UDF (e.g., MYCUSTOMFUNC) can process one or more columns from query results. No special dependencies are required beyond registering the function in the server. The query expects the UDF to be previously loaded and available to the searchd process, and outputs the computed value alongside other selected fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, MYCUSTOMFUNC (groupid, authorname), ... FROM myindex\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in Python-asyncio\nDESCRIPTION: Demonstrates the asynchronous Python client for creating a table with bigram indexing and frequent words. It uses the same SQL command as the synchronous version.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) bigram_freq_words = \\'the, a, you, i\\' bigram_index = \\'first_freq\\'')\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Development Packages on Debian/Ubuntu\nDESCRIPTION: Commands to download, install the Manticore development repository, update package lists, and install all development packages including debug symbols.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Debian_and_Ubuntu.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.manticoresearch.com/manticore-dev-repo.noarch.deb && \\\nsudo dpkg -i manticore-dev-repo.noarch.deb && \\\nsudo apt -y update && \\\nsudo apt -y install manticore manticore-extra manticore-common manticore-server manticore-server-core manticore-tools manticore-executor manticore-buddy manticore-backup manticore-columnar-lib manticore-server-core-dbgsym manticore-tools-dbgsym manticore-columnar-lib-dbgsym manticore-icudata-65l manticore-galera manticore-galera-dbgsym manticore-language-packs manticore-load\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: Configures default build type to RelWithDebInfo for single-configuration generators if no build type is specified.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libstemmer_c/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property ( isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )\nif (NOT isMultiConfig AND NOT CMAKE_BUILD_TYPE)\n\tset ( CMAKE_BUILD_TYPE RelWithDebInfo )\n\tmessage ( STATUS \"Automatically set build type to RelWithDebInfo since no other provided\" )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Plain Log Format Configuration\nDESCRIPTION: Configuration for enabling plain text format logging.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Query_logging.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nquery_log_format = plain\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data using JSON API\nDESCRIPTION: Demonstrates how to insert documents with vector data using the JSON API, showing two separate insert operations for yellow and white bag embeddings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/KNN.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /insert\n{\n\t\"table\":\"test_vec\",\n\t\"id\":1,\n\t\"doc\": \t{ \"title\" : \"yellow bag\", \"image_vector\" : [0.653448,0.192478,0.017971,0.339821] }\n}\n\nPOST /insert\n{\n\t\"table\":\"test_vec\",\n\t\"id\":2,\n\t\"doc\": \t{ \"title\" : \"white bag\", \"image_vector\" : [-0.148894,0.748278,0.091892,-0.095406] }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Go\nDESCRIPTION: Demonstrates querying agent status using Go client library. Uses context and executes SQL command to retrieve agent statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nres := apiClient.UtilsAPI.Sql(context.Background()).Body(\"SHOW AGENT STATUS\").Execute()\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in C# (C#)\nDESCRIPTION: This C# example depicts creating a table in Manticoresearch with a specified minimum word length configuration for its indexed content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) min_word_len = '4'\", true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using Python-asyncio\nDESCRIPTION: This Python code uses the asynchronous Manticore Search API to execute an SQL statement that creates a distributed table named 'local_dist'. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE local_dist type=\\'distributed\\' local=\\'index1\\' local=\\'index2\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length using Python (Python)\nDESCRIPTION: This Python script exemplifies creating a Manticoresearch table, leveraging ngram_len for effective indexing in script languages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) ngram_chars = \\'cont\\' ngram_len = \\'1\\'')\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Secondary Indexes in Manticore Search 5.0\nDESCRIPTION: SQL command to rebuild secondary indexes after upgrading to Manticore 5.0, as the secondary index file format has changed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE <table name> REBUILD SECONDARY\n```\n\n----------------------------------------\n\nTITLE: Using ABS Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns the absolute (non-negative) value of the numeric argument provided to it. This function requires a single numeric argument and outputs its absolute value, maintaining the input's data type. The core limitation is its application to numeric types only; non-numeric arguments will cause errors.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nABS(value)\n```\n\n----------------------------------------\n\nTITLE: Auto ID Provisioning in Percolate Tables\nDESCRIPTION: Demonstrates automatic ID assignment when adding percolate queries without specifying an ID. Available for all supported interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_rules_to_a_percolate_table.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO pq(query, filters) VALUES ('wristband', 'price > 5');\nSELECT * FROM pq;\n```\n\n----------------------------------------\n\nTITLE: Prediction Model for Query Time Limiting\nDESCRIPTION: This configuration snippet defines a model for predicting query execution time using cost parameters. It limits processing work and predicts when to terminate the query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\npredicted_time =\n    doc_cost * processed_documents +\n    hit_cost * processed_hits +\n    skip_cost * skiplist_jumps +\n    match_cost * found_matches\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Docker with Persistent Storage and Port Mapping\nDESCRIPTION: Docker command to run Manticore with volume mounting for data persistence and port mapping for SQL and HTTP interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore -v $(pwd)/data:/var/lib/manticore -p 127.0.0.1:9306:9306 -p 127.0.0.1:9308:9308 -d manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: MySQL Dump Replace Mode Backup\nDESCRIPTION: Mysqldump command with replace mode and custom buffer length settings\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -h0 -P9306 --replace --net-buffer-length=16m -etc manticore tbl > tbl.sql\n```\n\n----------------------------------------\n\nTITLE: Adding a Table Back to a Cluster in Manticore Search\nDESCRIPTION: Re-adding an optimized table to a Manticore Search cluster after manual optimization, which will replicate the new optimized files to other nodes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Compacting_a_table.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER CLUSTER mycluster ADD myindex;\n```\n\n----------------------------------------\n\nTITLE: Stopping Manticore Windows Service\nDESCRIPTION: Command to stop the Manticore Search service using the Windows sc.exe utility. This assumes Manticore has been installed as a Windows Service.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Windows.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsc.exe stop Manticore\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using C# in Manticore Search\nDESCRIPTION: This C# code snippet deletes the replication cluster named 'click_query' using the Manticore Search C# client. It uses the utilsApi.Sql() method to execute the SQL command that removes the cluster from all nodes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_7\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"DELETE CLUSTER click_query\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Agent Mirrors in Manticore Search (INI)\nDESCRIPTION: This snippet demonstrates how to configure multiple agent mirrors for a distributed table. It uses three nodes (node1, node2, node3) all hosting a table called 'shard2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Mirroring.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nagent = node1|node2|node3:9312:shard2\n```\n\n----------------------------------------\n\nTITLE: Query Plan Expansion in JSON\nDESCRIPTION: Example of requesting query profiling information through the JSON interface showing detailed query tree structure\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"forum\",\n  \"query\": {\"query_string\": \"@title way* @content hey\"},\n  \"_source\": { \"excludes\":[\"*\"] },\n  \"limit\": 1,\n  \"profile\":true\n}\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS Java Response\nDESCRIPTION: Sample response from the SHOW THREADS command via Java client, showing thread information as a Java object representation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n{\n  columns=[\n    {\n      TID={\n        type=string\n      }\n    },\n    {\n      Name={\n        type=string\n      }\n    },\n    {\n      Proto={\n        type=string\n      }\n    },\n    {\n      State={\n        type=string\n      }\n    },\n    {\n      Connection from={\n        type=string\n      }\n    },\n    {\n      ConnID={\n        type=string\n      }\n    },\n    {\n      This/prev job time={\n        type=string\n      }\n    },\n    {\n      CPU activity={\n        type=string\n      }\n    },\n    {\n      Jobs done={\n        type=string\n      }\n    },\n    {\n      Thread status={\n        type=string\n      }\n    },\n    {\n      Info={\n        type=string\n      }\n    }\n  ],\n  data=[\n    {\n      TID=82,\n      Name=work_0,\n      Proto=http,\n      State=query,\n      Connection from=172.17.0.1:60550,\n      ConnID=163,\n      This/prev job time=105us,\n      CPU activity=44.68%,\n      Jobs done=849,\n      Thread status=working,\n      Info=show_threads\n    }\n  ],\n  total=0,\n  error=,\n  warning=\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Secondary Indexes in Manticore Search\nDESCRIPTION: SQL command to rebuild secondary indexes for a table when they become disabled due to attribute updates or version incompatibility. This command reconstructs secondary indexes from attribute data and re-enables them.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table REBUILD SECONDARY\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE rt REBUILD SECONDARY;\n```\n\nLANGUAGE: sql\nCODE:\n```\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Inserting PQ Rules with No Schema in SQL\nDESCRIPTION: SQL commands demonstrating how to insert percolate query rules without a schema. The examples use auto-ID generation (0), specify query text, tags, and filters. The response shows the auto-generated IDs assigned to the rules.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_rules_to_a_percolate_table.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO pq VALUES (0, '@title shoes', '', '');\nINSERT INTO pq VALUES (0, '@title shoes', 'Louis Vuitton', '');\nSELECT * FROM pq;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+---------------------+--------------+---------------+---------+\n| id                  | query        | tags          | filters |\n+---------------------+--------------+---------------+---------+\n| 2810855531667783688 | @title shoes |               |         |\n| 2810855531667783689 | @title shoes | Louis Vuitton |         |\n+---------------------+--------------+---------------+---------+\n```\n\n----------------------------------------\n\nTITLE: Sample Document Query Result\nDESCRIPTION: Example of a single document retrieved from the Manticore index after processing through Logstash, showing the structure and content of stored data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Logstash.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SELECT * FROM dpkg_log LIMIT 1\\G\n\n*************************** 1. row ***************************\nid: 7280000849080746110\nhost: logstash-db848f65f-lnlf9\nmessage: 2023-04-12 02:03:21 status unpacked libc-bin:amd64 2.31-0ubuntu9\npath: /var/log/dpkg.log\n@timestamp: 2023-06-16T09:23:57.405Z\n@version: 1\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using JavaScript in Manticore Search\nDESCRIPTION: This JavaScript code snippet deletes the replication cluster named 'click_query' using the Manticore Search JavaScript client. It uses the await keyword with utilsApi.sql() method to execute the SQL command asynchronously.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('DELETE CLUSTER click_query');\n```\n\n----------------------------------------\n\nTITLE: Query with Two Ranking UDFs Without Sub-select\nDESCRIPTION: Shows a query using two ranking UDFs (slow_rank and fast_rank) without sub-select. This approach computes slow_rank() for the entire match result set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sub-selects.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id,slow_rank() as slow,fast_rank() as fast FROM index\n    WHERE MATCH('some common query terms') ORDER BY fast DESC, slow DESC LIMIT 20\n    OPTION max_matches=1000;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in C#\nDESCRIPTION: Uses the C# client to create a table with bigram indexing. It executes an SQL command to set up the table with the specified bigram configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_68\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'both_freq'\", true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Seamless Rotate in Manticore Search\nDESCRIPTION: This INI configuration enables seamless rotate in Manticore Search. Seamless rotate allows for table rotation with minimal query interruption at the cost of higher peak memory usage during rotation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Rotating_a_table.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nseamless_rotate = 1\n```\n\n----------------------------------------\n\nTITLE: Static IDs in SQL Percolate Queries\nDESCRIPTION: Shows how to use static document IDs in percolate queries via SQL using the 'docs_id' option. Allows specifying custom document identifiers instead of using default sequential numbering.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_69\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ('products', '[{\"id\": 123, \"title\": \"nice pair of shoes\", \"color\": \"blue\"}, {\"id\": 456, \"title\": \"beautiful bag\"}]', 1 as query, 'id' as docs_id, 1 as docs);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using TypeScript. The response includes the table name, document ID, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\"table\":\"test\",\"_id\":1,\"result\":\"deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Ages in Groups Using GROUP_CONCAT\nDESCRIPTION: This SQL snippet demonstrates the use of 'GROUP_CONCAT' to list all ages as a comma-separated string for each major. Dependencies include a pre-existing 'students' table with appropriate data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT major, count(*), count(distinct age), group_concat(age) FROM students GROUP BY major;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n+----------+----------+---------------------+-------------------+\n| major    | count(*) | count(distinct age) | group_concat(age) |\n+----------+----------+---------------------+-------------------+\n| arts     |        2 |                   1 | 21,21             |\n| business |        1 |                   1 | 22                |\n| cs       |        2 |                   2 | 21,22             |\n+----------+----------+---------------------+-------------------+\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion with PHP in Manticore Search\nDESCRIPTION: Demonstrates how to perform multiple delete operations in a single call using the bulk method in PHP. The method accepts an array of delete operations, including ID-based and query-based deletions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$client->bulk([\n    ['delete' => [\n            'table' => 'test',\n            'id' => 1\n        ]\n    ],\n    ['delete'=>[\n            'table' => 'test',\n            'query' => [\n                'equals' => ['int_data' => 20]\n            ]\n        ]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Search Implementation\nDESCRIPTION: TypeScript implementation with type-safe search request and highlighting configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nres = await searchApi.search({\n  index: 'test',\n  query: {\n    match: {\n      *: 'Text 1'\n    }\n  },\n  highlight: { number_of_fragments: 1}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring overshort_step in Manticore Search\nDESCRIPTION: Controls position increment on overshort keywords (those shorter than min_word_len). This setting accepts values 0 or 1, with 1 being the default. It determines how position increments are handled for very short terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_121\n\nLANGUAGE: ini\nCODE:\n```\novershort_step = {0|1}\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) overshort_step = '1'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) overshort_step = '1'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'overshort_step' => '1'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) overshort_step = \\'1\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) overshort_step = \\'1\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) overshort_step = \\'1\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) overshort_step = '1'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) overshort_step = '1'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) overshort_step = '1'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  overshort_step = 1\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Python Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using Python. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\n{\n    'error': None,\n    'items': [{u'delete': {u'table': test', u'deleted': 2}}]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching with Profiling in Manticore (JavaScript)\nDESCRIPTION: Executes an asynchronous search query against the 'forum' index using the JavaScript client. It searches for 'way*' in 'title' and 'hey' in 'content', excludes source fields, limits to 1 result, and enables profiling. The response is a JSON object containing hits and detailed profiling information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.search({\"table\":\"forum\",\"query\":{\"query_string\":\"@title way* @content hey\"},\"_source\":{\"excludes\":[\"*\"]},\"limit\":1,\"profile\":true});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"hits\": {\"hits\": [{\"_id\": 2811025403043381551,\n                    \"_score\": 2643,\n                    \"_source\": {}}],\n          \"total\": 1},\n \"profile\": {\"query\": {\"children\": [{\"children\": [{\"expanded\": True,\n                                                      \"querypos\": 1,\n                                                      \"type\": \"KEYWORD\",\n                                                      \"word\": \"way*\"}],\n                                       \"description\": \"AND(fields=(title), KEYWORD(way*, querypos=1, expanded))\",\n                                       \"fields\": [\"title\"],\n                                       \"type\": \"AND\"},\n                                      {\"children\": [{\"querypos\": 2,\n                                                      \"type\": \"KEYWORD\",\n                                                      \"word\": \"hey\"}],\n                                       \"description\": \"AND(fields=(content), KEYWORD(hey, querypos=2))\",\n                                       \"fields\": [\"content\"],\n                                       \"type\": \"AND\"}],\n                        \"description\": \"AND( AND(fields=(title), KEYWORD(way*, querypos=1, expanded)),  AND(fields=(content), KEYWORD(hey, querypos=2)))\",\n                        \"type\": \"AND\"}},\n \"timed_out\": False,\n \"took\": 0}\n```\n\n----------------------------------------\n\nTITLE: C# Aggregation Query\nDESCRIPTION: Creates a search request with two aggregations using C# Aggregation objects. Sets up terms aggregations for price and brand_id fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_54\n\nLANGUAGE: clike\nCODE:\n```\nvar agg1 = new Aggregation(\"group_property\", \"price\");\nagg1.Size = 1;\nvar agg2 = new Aggregation(\"group_brand_id\", \"brand_id\");\nagg2.Size = 3;\nagg2.Size = 100;\nobject query = new { match_all=null };\nvar searchRequest = new SearchRequest(\"facetdemo\", query);\nsearchRequest.Aggs = new List<Aggregation> {agg1, agg2};\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Python Response Example for Highlighting in Manticore Search\nDESCRIPTION: Demonstrates the response format when using highlighting with the Python client. The output includes the document details, score, source fields, and the highlighted snippet with matched terms enclosed in <b> tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_116\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 1597,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u' gestured the other robots away <b>and</b> entered itself. The door closed']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Price Range Faceting\nDESCRIPTION: The JSON response from Manticore Search showing both search hits with their price_range values and aggregation results. Each bucket in the group_property aggregation corresponds to a price range interval with its document count.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 3,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 10000,\n    \"hits\": [\n      {\n        \"_id\": 1,\n        \"_score\": 1,\n        \"_source\": {\n          \"price\": 197,\n          \"brand_id\": 10,\n          \"brand_name\": \"Brand Ten\",\n          \"categories\": [\n            10\n          ],\n          \"price_range\": 0\n        }\n      },\n ...\n      {\n        \"_id\": 20,\n        \"_score\": 1,\n        \"_source\": {\n          \"price\": 227,\n          \"brand_id\": 3,\n          \"brand_name\": \"Brand Three\",\n          \"categories\": [\n            12,\n            13\n          ],\n          \"price_range\": 1\n        }\n      }\n    ]\n  },\n  \"aggregations\": {\n    \"group_property\": {\n      \"buckets\": [\n        {\n          \"key\": 4,\n          \"doc_count\": 2100\n        },\n        {\n          \"key\": 3,\n          \"doc_count\": 1973\n        },\n        {\n          \"key\": 2,\n          \"doc_count\": 1999\n        },\n        {\n          \"key\": 1,\n          \"doc_count\": 2043\n        },\n        {\n          \"key\": 0,\n          \"doc_count\": 1885\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Prefix Length\nDESCRIPTION: Examples of creating a table with min_prefix_len setting across different programming interfaces\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) min_prefix_len = '3'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) min_prefix_len = '3'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'min_prefix_len' => '3'\n        ]);\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  min_prefix_len = 3\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Truncation Response\nDESCRIPTION: Example response from a successful JavaScript truncate operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\"total\":0,\"error\":\"\",\"warning\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using JSON in Manticore Search\nDESCRIPTION: This JSON request deletes the replication cluster named 'click_query' via a POST request to the /cli endpoint. It removes the cluster from all nodes while keeping the tables intact as local non-replicated tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"DELETE CLUSTER click_query\"\n```\n\n----------------------------------------\n\nTITLE: Querying Query Cache Status in Manticore Search\nDESCRIPTION: SQL command to display query cache related status variables using SHOW STATUS with LIKE filter. Shows cache size limits, threshold settings, and cache usage statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATUS LIKE 'qcache%';\n```\n\n----------------------------------------\n\nTITLE: Conditional Early Return for Excluded Build Environments\nDESCRIPTION: Returns early from CMake processing if testing is disabled, GTESTs are disabled, running on Windows, or using special external testing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT BUILD_TESTING OR DISABLE_GTESTS OR WIN32 OR TEST_SPECIAL_EXTERNAL )\n\treturn()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Various Test Suites\nDESCRIPTION: Commands for running different test suites including id64 build, id32 build, and RT tests.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/dockerfiles/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose-test.yml up test\ndocker-compose -f docker-compose-test.yml up test32\ndocker-compose -f docker-compose-test.yml up test_rt\ndocker-compose -f docker-compose-test.yml down\n```\n\n----------------------------------------\n\nTITLE: Optimizing a Table Outside of Cluster in Manticore Search\nDESCRIPTION: Optimizing a table that has been temporarily removed from a cluster during manual optimization of clustered tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Compacting_a_table.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nOPTIMIZE TABLE myindex;\n```\n\n----------------------------------------\n\nTITLE: Defining Floating Point Attributes\nDESCRIPTION: Configuration for declaring floating point attributes with single precision (32-bit IEEE 754 format). This is commonly used for storing coordinates, prices, or other decimal values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_float = lat\nrt_attr_float = lon\n```\n\n----------------------------------------\n\nTITLE: Configuring Infix Library Build with CMake\nDESCRIPTION: Sets up CMake configuration for building the infix library. Specifies minimum CMake version, creates the library target from source files, sets include directories, and links required dependencies.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/dict/infix/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\nadd_library ( infix infix_builder.cpp infix_builder.h )\ntarget_include_directories ( infix PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\n\ntarget_link_libraries ( infix PRIVATE lextra )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Source Library\nDESCRIPTION: Conditionally defines and configures the 'source_mysql' library for MySQL data sources.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (WITH_MYSQL)\n\tadd_library ( source_mysql source_mysql.cpp source_mysql.h )\n\ttarget_link_libraries ( source_mysql PRIVATE lextra source_sql )\n\tif (DL_MYSQL)\n\t\ttarget_link_libraries ( source_mysql PRIVATE Mysql::Mysql_ld )\n\telse ()\n\t\ttarget_link_libraries ( source_mysql PRIVATE Mysql::Mysql )\n\tendif ()\n\n\ttarget_link_libraries ( indexer_sources INTERFACE source_mysql )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Using wordbreaker in Manticore Search (Bash)\nDESCRIPTION: Examples of using the wordbreaker tool to deconstruct compound words into individual components. It enhances search functionality by eliminating the need for prefixes or infixes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Miscellaneous_tools.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho manofsteel | bin/wordbreaker -dict dict.txt split\n```\n\nLANGUAGE: bash\nCODE:\n```\nindexer --buildstops dict.txt 100000 --buildfreqs myindex -c /path/to/manticore.conf\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using SQL in Manticore Search\nDESCRIPTION: This SQL statement deletes the replication cluster named 'click_query'. It removes the cluster from all nodes while keeping the tables intact as local non-replicated tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE CLUSTER click_query\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Rust\nDESCRIPTION: Executes a SQL query to show agent status using the Rust client. The query filters status information using a LIKE clause and returns a structured response with column definitions and data rows.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\"\", Some(true)).await;\n```\n\nLANGUAGE: rust\nCODE:\n```\n{columns=[{Key={type=string}},\n              {Value={type=string}}],\n data=[\n\t{Key=dstindex_1_is_ha, Value=1},\n\t{Key=dstindex_1mirror1_id, Value=192.168.0.202:6713:loc},\n\t{Key=dstindex_1mirror1_probability_weight, Value=0.372864},\n    {Key=dstindex_1mirror1_is_blackhole, Value=0},\n    {Key=dstindex_1mirror1_is_persistent, Value=0},\n    {Key=dstindex_1mirror2_id, Value=192.168.0.202:6714:loc},\n    {Key=dstindex_1mirror2_probability_weight, Value=0.374635},\n    {Key=dstindex_1mirror2_is_blackhole, Value=0},\n    {Key=dstindex_1mirror2_is_persistent, Value=439},\n    {Key=dstindex_1mirror3_id, Value=dev1.manticoresearch.com:6714:loc},\n    {Key=dstindex_1mirror3_probability_weight, Value= 0.252501},\n    {Key=dstindex_1mirror3_is_blackhole, Value=0},\n    {Key=dstindex_1mirror3_is_persistent, Value=439}    \n    ],\n error=\"\",\n total=0,\n warning=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Executing KILL Command from MySQL Shell in SQL\nDESCRIPTION: This example illustrates how to execute the KILL command directly from the MySQL command-line interface to terminate a specific query by its ID ('4' in this demonstration). Upon success, the interface confirms the query termination and reports one affected row. The snippet expects access to a compatible MySQL or ManticoreSearch server, and the correct privileges to manage queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/KILL.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> KILL 4;\nQuery OK, 1 row affected (0.00 sec)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length using Rust (Rust)\nDESCRIPTION: Rust code snippet showcasing an asynchronous table creation with specific ngram_len setup for effective indexing of script languages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_56\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Extracting Quarter from Timestamp with QUARTER() in SQL\nDESCRIPTION: Executes the QUARTER() function in SQL to extract the quarter of the year (1-4) from a given timestamp, interpreted according to the current timezone. This example uses NOW() to provide the current timestamp as input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect quarter(now());\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using SQL\nDESCRIPTION: SQL statement to create a Manticore Search table named 'products'. The `index_field_lengths = '1'` option enables the computation and storage of field lengths (in keywords) for each document and the index average. This is necessary for certain ranking functions like BM25F.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_100\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) index_field_lengths = '1'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for Manticore Search\nDESCRIPTION: Shows how to set up HTTPS listeners in the Manticore Search configuration file. It includes both HTTP and HTTPS port configurations using the 'listen' directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n   listen = 127.0.0.1:9308\n   listen = 127.0.0.1:9443:https\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring attr_update_reserve in SQL\nDESCRIPTION: Shows how to set the attr_update_reserve option when creating a table in SQL. This reserves space for blob attribute updates.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\ncreate table products(title text, price float) attr_update_reserve = '1M'\n```\n\n----------------------------------------\n\nTITLE: Specifying Agent Addresses in Manticore Search INI\nDESCRIPTION: Shows the format for specifying agent addresses in Manticore Search configuration, including hostname with port and Unix socket path.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\naddress = hostname[:port] # eg. server2:9312\naddress = /absolute/unix/socket/path # eg. /var/run/manticore2.sock\n```\n\n----------------------------------------\n\nTITLE: SQL JSON Path Query\nDESCRIPTION: Example of a WHERE clause using JSON path filtering, which received performance optimization reducing latency by 3-4%.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nWHERE json.a = 1\n```\n\n----------------------------------------\n\nTITLE: SQL Ranking Configuration\nDESCRIPTION: Examples of ranking function configuration using different ranking modes and expressions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n... WHERE query='test;mode=extended;ranker=bm25;';\n... WHERE query='test;mode=extended;ranker=expr:sum(lcs);';\n```\n\n----------------------------------------\n\nTITLE: Plain Log Format Examples\nDESCRIPTION: Examples of log entries in plain format showing various query types and performance statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Query_logging.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[Fri Jun 29 21:17:58 2021] 0.004 sec [all/0/rel 35254 (0,20)] [lj] [ios=6 kb=111.1 ms=0.5] test\n[Fri Jun 29 21:17:58 2021] 0.004 sec [all/0/rel 35254 (0,20)] [lj] [ios=6 kb=111.1 ms=0.5 cpums=0.3] test\n[Sun Apr 28 15:09:38.712 2024] 0.000 sec 0.000 sec [ext2/0/ext 0 (0,20)] [test] test\n[Sun Apr 28 15:09:44.974 2024] 0.000 sec 0.000 sec [ext2/0/ext 0 (0,20) @channel_id] [test] test\n[Sun Apr 28 15:24:32.975 2024] 0.000 sec 0.000 sec [ext2/0/ext 0 (0,30)] [test] {     \"table\" : \"test\",     \"query\":     {         \"match\":         {             \"*\" : \"test\"         }     },     \"_source\": [\"f\"],     \"limit\": 30 }\n```\n\n----------------------------------------\n\nTITLE: Enabling and Displaying Query Profile in Manticore Search SQL\nDESCRIPTION: Demonstrates the SQL workflow for query profiling. First, profiling is enabled for the session using `SET profiling=1`. Then, a `SELECT` query is executed. Finally, `SHOW PROFILE` retrieves the detailed execution statistics for the preceding query. Profiling must be explicitly enabled beforehand.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_profile.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET profiling=1;\n\nSELECT id FROM forum WHERE MATCH('the best') LIMIT 1;\n\nSHOW PROFILE;\n```\n\n----------------------------------------\n\nTITLE: Starting ManticoreSearch as a Homebrew Service - Bash\nDESCRIPTION: This snippet shows how to start ManticoreSearch as a background service using the Homebrew services subcommand. It requires ManticoreSearch to be installed first. Running this command ensures that the search daemon runs at system startup or continues running in the background. No input is required, and success indicates the service is launched.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/MacOS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start manticoresearch\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in Java\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using Java client in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"TRUNCATE TABLE products WITH RECONFIGURE\", true);\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Docker with Custom Configuration Settings\nDESCRIPTION: Docker command to run Manticore with custom configuration settings using environment variables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore  -p 127.0.0.1:9306:9306  -e searchd_mysql_version_string='5.5.0' -d manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: Setting and Using Global User Variables in Manticore Search SQL\nDESCRIPTION: Demonstrates how to set a global user variable and use it in a subsequent query for filtering. Global user variables are shared between concurrent sessions and support lists of BIGINTs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Setting_variables_online.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n// in session 1\nmysql> SET GLOBAL @myfilter=(2,3,5,7,11,13);\nQuery OK, 0 rows affected (0.00 sec)\n\n// later in session 2\nmysql> SELECT * FROM test1 WHERE group_id IN @myfilter;\n+------+--------+----------+------------+-----------------+------+\n| id   | weight | group_id | date_added | title           | tag  |\n+------+--------+----------+------------+-----------------+------+\n|    3 |      1 |        2 | 1299338153 | another doc     | 15   |\n|    4 |      1 |        2 | 1299338153 | doc number four | 7,40 |\n+------+--------+----------+------------+-----------------+------+\n2 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with Python-asyncio in Manticore Search\nDESCRIPTION: Removes a table using the Python asyncio client. This executes an SQL query through the utilsApi.sql() method with async/await pattern.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('DROP TABLE products')\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Filter Values\nDESCRIPTION: Defines the maximum number of values allowed per filter for internal sanity checks. Default is 4096.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nmax_filter_values = 16384\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_field_lengths using Javascript Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement asynchronously using the Javascript client library's `sql` method (`utilsApi`). This creates the 'products' table with the `index_field_lengths` option set to '1'. The result is assigned to 'res'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) index_field_lengths = \\'1\\'');\n```\n\n----------------------------------------\n\nTITLE: Batch Replacing Entries in Percolate Table Using SQL and Bash - SQL\nDESCRIPTION: This snippet performs a bulk REPLACE operation in the percolate table in batches of 10,000 entries. It constructs a replace SQL statement for each batch, iterates through the existing record IDs, and updates the fields with new values, including a switch to German in the language field. The full SQL script is written to /tmp/replace.sql before being executed with the MySQL client; elapsed time is measured with 'date' and 'time'. Dependencies include a pre-populated 'pq' table, Bash shell, MySQL client, and Manticore Search server. Limitations: assumes table is already created and populated, and disk space/performance allows.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nroot@perf3 ~ # date; (echo \"begin;\"; for offset in `seq 0 10000 990000`; do n=0; echo \"replace into pq (id,query,filters,tags) values \"; for id in `mysql -P9306 -h0 -NB -e \"select id from pq limit $offset, 10000 option max_matches=1000000\"`; do echo \"($id,'@f (tiger | ( angry bear ) | (cute panda)) @f2 def', 'j.json.language=\\\"de\\\"', '{\\\"tag1\\\":\\\"tag1\\\",\\\"tag2\\\":\\\"tag2\\\"}')\"; n=$((n+1)); [ $n != 10000 ] && echo -n \",\"; done; echo \";\"; done; echo \"commit;\") > /tmp/replace.sql; date\nroot@perf3 ~ # time mysql -P9306 -h0 < /tmp/replace.sql\n```\n\n----------------------------------------\n\nTITLE: PHP Response for Price Range Faceting\nDESCRIPTION: The PHP response showing the facet results from the Manticore Search PHP client. It displays the price range buckets as an associative array with each bucket containing its key (range index) and document count.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [group_property] => Array\n        (\n            [buckets] => Array\n                (\n                    [0] => Array\n                        (\n                            [key] => 4\n                            [doc_count] => 2100\n                        )\n                    [1] => Array\n                        (\n                            [key] => 3\n                            [doc_count] => 1973\n                        )\n                    [2] => Array\n                        (\n                            [key] => 2\n                            [doc_count] => 1999\n                        )\n                    [3] => Array\n                        (\n                            [key] => 1\n                            [doc_count] => 2043\n                        )\n                    [4] => Array\n                        (\n                            [key] => 0\n                            [doc_count] => 1885\n                        )\n                )\n        )\n)\n```\n\n----------------------------------------\n\nTITLE: Go Search Response with Highlighted Results\nDESCRIPTION: Displays the JSON structure of a search response with highlighted results in Go. The response includes matched documents with highlighted text fragments where search terms were found.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":2,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 1</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"_id\": 2,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 2\",\n\t\t\t\t\"name\":\"Doc 2\",\n\t\t\t\t\"cat\":2\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 2</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SHOW META with I/O and CPU Statistics in Manticore Search\nDESCRIPTION: Example showing additional I/O and CPU counters in SHOW META output when searchd is started with --iostats and --cpustats switches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_META.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id,channel_id FROM records WHERE MATCH('one|two|three') limit 5;\n\nSHOW META;\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Manticore Search with C#\nDESCRIPTION: Executes a SQL query to retrieve the status of Manticore Search agents using the C# API. This provides detailed metrics about agent performance including response times, query counts, and error statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_14\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"SHOW AGENT STATUS\");\n```\n\nLANGUAGE: clike\nCODE:\n```\n{columns=[{ Key : { type=string }},\n              { Value : { type=string }}],\n  data : [\n\t{ Key=status_period_seconds ,  Value=60 },\n\t{ Key=status_stored_periods ,  Value=15 },\n\t{ Key=ag_0_hostname ,  Value=192.168.0.202:6713 },\n\t{ Key=ag_0_references ,  Value=2 },\n\t{ Key=ag_0_lastquery ,  Value=0.41 },\n\t{ Key=ag_0_lastanswer ,  Value=0.19 },\n\t{ Key=ag_0_lastperiodmsec ,  Value=222 },\n\t{ Key=ag_0_errorsarow ,  Value=0 },\n\t{ Key=ag_0_1periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_0_1periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_0_1periods_connect_failures ,  Value=0 },\n\t{ Key=ag_0_1periods_network_errors ,  Value=0 },\n\t{ Key=ag_0_1periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_0_1periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_0_1periods_warnings ,  Value=0 },\n\t{ Key=ag_0_1periods_succeeded_queries ,  Value=27 },\n\t{ Key=ag_0_1periods_msecsperquery ,  Value=232.31 },\n\t{ Key=ag_0_5periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_0_5periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_0_5periods_connect_failures ,  Value=0 },\n\t{ Key=ag_0_5periods_network_errors ,  Value=0 },\n\t{ Key=ag_0_5periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_0_5periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_0_5periods_warnings ,  Value=0 },\n\t{ Key=ag_0_5periods_succeeded_queries ,  Value=146 },\n\t{ Key=ag_0_5periods_msecsperquery ,  Value=231.83 },\n\t{ Key=ag_1_hostname 192.168.0.202:6714 },\n\t{ Key=ag_1_references ,  Value=2 },\n\t{ Key=ag_1_lastquery ,  Value=0.41 },\n\t{ Key=ag_1_lastanswer ,  Value=0.19 },\n\t{ Key=ag_1_lastperiodmsec ,  Value=220 },\n\t{ Key=ag_1_errorsarow ,  Value=0 },\n\t{ Key=ag_1_1periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_1_1periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_1_1periods_connect_failures ,  Value=0 },\n\t{ Key=ag_1_1periods_network_errors ,  Value=0 },\n\t{ Key=ag_1_1periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_1_1periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_1_1periods_warnings ,  Value=0 },\n\t{ Key=ag_1_1periods_succeeded_queries ,  Value=27 },\n\t{ Key=ag_1_1periods_msecsperquery ,  Value=231.24 },\n\t{ Key=ag_1_5periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_1_5periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_1_5periods_connect_failures ,  Value=0 },\n\t{ Key=ag_1_5periods_network_errors ,  Value=0 },\n\t{ Key=ag_1_5periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_1_5periods_warnings ,  Value=0 },\n\t{ Key=ag_1_5periods_succeeded_queries ,  Value=146 },\n\t{ Key=ag_1_5periods_msecsperquery ,  Value=230.85 }],\n  error=\"\" ,\n  total=0,\n  warning=\"\" }\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using Rust in Manticore Search\nDESCRIPTION: This Rust code snippet deletes the replication cluster named 'click_query' using the Manticore Search Rust client. It uses the utils_api.Sql() method with the await keyword to execute the SQL command asynchronously, with an additional boolean parameter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.Sql(\"DELETE CLUSTER click_query\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ukrainian Language Support in Manticore Search\nDESCRIPTION: This snippet illustrates the configuration for Ukrainian language support in Manticore Search, including character mappings and lemmatization. It requires installation of the Ukrainian lemmatizer.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ncharset_table=non_cont,U+0406->U+0456,U+0456,U+0407->U+0457,U+0457,U+0490->U+0491,U+0491\nmorphology=lemmatize_uk_all\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Search in Console Mode\nDESCRIPTION: This command shows how to start Manticore Search in console mode for debugging purposes. It forces output to the console and prevents forking of the process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --config /etc/manticoresearch/manticore.conf --console\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query in Go\nDESCRIPTION: Shows how to create and execute a percolate query in Go using maps and the Manticore client library against the 'test_pq' index\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_49\n\nLANGUAGE: go\nCODE:\n```\ndoc1 := map[string]interface{} {\"title\": \"What a nice bag\"}\ndoc2 := map[string]interface{} {\"title\": \"Really nice shoes\"}\nquery := []interface{} {doc1, doc2}\npercolateRequestQuery := manticoreclient.NewPercolateQuery(query)\npercolateRequest := manticoreclient.NewPercolateRequest(percolateRequestQuery)\nres, _, _ := apiClient.SearchAPI.Percolate(context.Background(), \"test_pq\").PercolateRequest(*percolateRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Substring Length in Manticore Search (INI)\nDESCRIPTION: This snippet shows how to set the maximum substring length for indexing in prefix or infix searches using the max_substring_len directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmax_substring_len = length\n```\n\n----------------------------------------\n\nTITLE: Javascript Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using Javascript. The response includes the table name, document ID, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_16\n\nLANGUAGE: Javascript\nCODE:\n```\n{\"table\":\"test\",\"_id\":1,\"result\":\"deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Building Lowercaser Library for Manticore Search\nDESCRIPTION: Defines the lowercaser library build configuration, including source files and dependencies. This library handles text case conversion with charset-aware functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/tokenizer/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library ( lowercaser lowercaser.cpp charset_definition_parser.cpp remap_range.h lowercaser_impl.h lowercaser.h\n\t\tcharset_definition_parser.h )\ntarget_link_libraries ( lowercaser PRIVATE lextra )\n```\n\n----------------------------------------\n\nTITLE: Optimizing Disk Chunks in INI Configuration\nDESCRIPTION: The `optimize_cutoff` setting establishes the default table compaction threshold, which can be overridden by the per-query `cutoff` option. It specifies when disk chunks should be compacted for performance optimizations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\noptimize_cutoff = 4\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Manticore Configuration using PHP\nDESCRIPTION: This PHP script generates multiple Manticore tables dynamically and includes additional configuration files from a specified folder. It demonstrates the use of loops for table creation and file system operations for including external configurations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Scripted_configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n#!/usr/bin/php\n...\n<?php for ($i=1; $i<=6; $i++) { ?>\ntable test_<?=$i?> {\n  type = rt\n  path = /var/lib/manticore/data/test_<?=$i?>\n  rt_field = subject\n  ...\n }\n <?php } ?>\n ...\n\n <?php\n $confd_folder='/etc/manticore.conf.d/';\n $files = scandir($confd_folder);\n foreach($files as $file)\n {\n         if(($file == '.') || ($file =='..'))\n         {} else {\n                 $fp = new SplFileInfo($confd_folder.$file);\n                 if('conf' == $fp->getExtension()){\n                         include ($confd_folder.$file);\n                 }\n         }\n }\n ?>\n```\n\n----------------------------------------\n\nTITLE: Using SHOW TABLE test INDEXES - SQL\nDESCRIPTION: The SQL snippet invokes the SHOW TABLE test INDEXES command to display a list of secondary indexes for the 'test' table. The output includes details such as the index name, type, enabled status, and percent of applicable disk chunks. It requires an existing 'test' table with secondary indexes to produce results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_INDEXES.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE test INDEXES;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+------------------------------+--------+---------+---------+\n| Name                         | Type   | Enabled | Percent |\n+------------------------------+--------+---------+---------+\n| j['addresses']               | uint32 | 1       | 100     |\n| j['addresses']['a1']         | uint32 | 1       | 100     |\n| j['addresses']['a2']         | uint32 | 1       | 100     |\n| j['addresses']['a3']         | uint32 | 1       | 100     |\n| j['addresses']['a4']         | uint32 | 1       | 100     |\n| j['addresses']['a5']         | uint32 | 1       | 100     |\n| j['addresses']['a6']         | uint32 | 1       | 100     |\n| j['factor']                  | uint32 | 1       | 100     |\n| j['int_arr']                 | uint32 | 1       | 100     |\n| j['tags']                    | uint32 | 1       | 100     |\n| id                           | int64  | 1       | 100     |\n| j['price']                   | float  | 1       | 100     |\n| j['addresses']['a1']['id']   | string | 1       | 100     |\n| j['addresses']['a1']['name'] | string | 1       | 100     |\n| j['addresses']['a2']['id']   | string | 1       | 100     |\n| j['addresses']['a2']['name'] | string | 1       | 100     |\n| j['addresses']['a3']['id']   | string | 1       | 100     |\n| j['addresses']['a3']['name'] | string | 1       | 100     |\n| j['addresses']['a4']['id']   | string | 1       | 100     |\n| j['addresses']['a4']['name'] | string | 1       | 100     |\n| j['addresses']['a5']['id']   | string | 1       | 100     |\n| j['addresses']['a5']['name'] | string | 1       | 100     |\n| j['addresses']['a6']['id']   | string | 1       | 100     |\n| j['addresses']['a6']['name'] | string | 1       | 100     |\n| j['arr']                     | string | 1       | 100     |\n| j['str']                     | string | 1       | 100     |\n| j['tags']['1']               | string | 1       | 100     |\n| j['tags']['2']               | string | 1       | 100     |\n| j['tags']['3']               | string | 1       | 100     |\n+------------------------------+--------+---------+---------+\n29 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with JSON API\nDESCRIPTION: Demonstrates how to match PQ rules using the JSON REST API endpoint with a document containing a title field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /pq/products/_search\n{\n  \"query\": {\n    \"percolate\": {\n      \"document\": {\n        \"title\": \"What a nice bag\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Multiple Uber Tests Function\nDESCRIPTION: Wrapper function to add both plain and RT (Real-Time) variants of a test unless specifically excluded by labels.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (add_ubertests testN tst_name LABELS)\n\tif (NOT \"FORCE-RT\" IN_LIST LABELS)\n\t\tadd_ubertest (\"${testN}\" \"${tst_name}\" \"${LABELS}\" \"test\" \"PLAIN\" \"\")\n\tendif ()\n\tif (NOT \"NON-RT\" IN_LIST LABELS)\n\t\tadd_ubertest (\"${testN}\" \"${tst_name}\" \"${LABELS}\" \"rt\" \"RT\" \"--rt --ignore-weights\")\n\tendif ()\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Using spelldump in Manticore Search (Bash)\nDESCRIPTION: Syntax and usage examples for the spelldump command, which retrieves contents from dictionary files in ispell or MySpell format. It's useful for compiling word lists for wordforms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Miscellaneous_tools.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspelldump [options] <dictionary> <affix> [result] [locale-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nspelldump en.dict en.aff\nspelldump ru.dict ru.aff ru.txt ru_RU.CP1251\nspelldump ru.dict ru.aff ru.txt .1251\n```\n\n----------------------------------------\n\nTITLE: Disabling Binary Logging for Specific Table\nDESCRIPTION: SQL command showing how to create a new table with binary logging disabled using the binlog parameter set to 0.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table a (id bigint, s string attribute) binlog='0';\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Specific Columnar Attributes in SQL\nDESCRIPTION: This SQL snippet shows how to create a table with specific attributes using columnar storage, while the table's default engine remains row-wise.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table tbl(title text, type int, price float engine='columnar');\n```\n\n----------------------------------------\n\nTITLE: Optimized Multi-query Log Output in Manticore Search\nDESCRIPTION: Example log output showing the 'multiplier' field (x3) that indicates queries were optimized and processed together in a batch, resulting in improved processing time.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Multi-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[Sun Jul 12 15:18:17.000 2009] 0.040 sec x3 [ext/0/rel 747541 (0,20)] [lj] the\n[Sun Jul 12 15:18:17.000 2009] 0.040 sec x3 [ext/0/ext 747541 (0,20)] [lj] the\n[Sun Jul 12 15:18:17.000 2009] 0.040 sec x3 [ext/0/ext 747541 (0,20)] [lj] the\n```\n\n----------------------------------------\n\nTITLE: JavaScript Response Example for Highlighting in Manticore Search\nDESCRIPTION: Shows the response format when using highlighting with the JavaScript client. The output includes the search results with highlighted content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":1,\"hits\":[{\"_id\": 1,\"_score\":1597,\"_source\":{\"title\":\"Books one\",\"content\":\"They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. \"},\"highlight\":{\"content\":[\" gestured the other robots away <b>and</b> entered itself. The door closed\"]}}]}}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Cluster Nodes - Multi-language Examples\nDESCRIPTION: Examples of how to update the node lists in a Manticore Search cluster using different programming languages and APIs. The ALTER CLUSTER command updates node lists on each cluster node to include all active nodes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Managing_replication_nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER CLUSTER posts UPDATE nodes\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nALTER CLUSTER posts UPDATE nodes\n\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$params = [\n  'cluster' => 'posts',\n  'body' => [\n     'operation' => 'update',\n     \n  ]\n];\n$response = $client->cluster()->alter($params);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('ALTER CLUSTER posts UPDATE nodes')\n```\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait utilsApi.sql('ALTER CLUSTER posts UPDATE nodes')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await utilsApi.sql('ALTER CLUSTER posts UPDATE nodes');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"ALTER CLUSTER posts UPDATE nodes\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"ALTER CLUSTER posts UPDATE nodes\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"ALTER CLUSTER posts UPDATE nodes\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with JavaScript\nDESCRIPTION: Demonstrates performing percolate queries using the JavaScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await searchApi.percolate('products',{\"query\":{\"percolate\":{\"document\":{\"title\":\"What a nice bag\"}}}})\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Agent Connections in Manticore Search INI\nDESCRIPTION: Shows how to set up persistent connections to remote agents using the agent_persistent directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nagent_persistent = remotebox:9312:index2\n```\n\n----------------------------------------\n\nTITLE: Filtering Agent Status in PHP\nDESCRIPTION: Demonstrates filtering agent status using PHP client with pattern matching. Uses nodes()->agentstatus() method with pattern parameter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$client->nodes()->agentstatus(\n    ['body'=>\n        ['pattern'=>'%5period%msec%']\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Query Plan Expansion in SQL\nDESCRIPTION: Example of using SHOW PLAN to view query transformations and keyword expansions in SQL\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSET profiling=1;\n\nSELECT id FROM forum WHERE MATCH('@title way* @content hey') LIMIT 1;\n\nSHOW PLAN;\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting Data into Students Table\nDESCRIPTION: This SQL snippet demonstrates how to create a table 'students' with columns for name, age, and major and insert sample data into it. It requires a SQL-compatible database, and the inputs are fixed student details. There are no outputs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE students(name text, age int, major string);\nINSERT INTO students values(0,'John',21,'arts'),(0,'William',22,'business'),(0,'Richard',21,'cs'),(0,'Rebecca',22,'cs'),(0,'Monica',21,'arts');\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * from students;\n+---------------------+------+----------+---------+\n| id                  | age  | major    | name    |\n+---------------------+------+----------+---------+\n| 1657851069130080271 |   21 | arts     | John    |\n| 1657851069130080272 |   22 | business | William |\n| 1657851069130080273 |   21 | cs       | Richard |\n| 1657851069130080274 |   22 | cs       | Rebecca |\n| 1657851069130080275 |   21 | arts     | Monica  |\n+---------------------+------+----------+---------+\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with Non-Continuous and Continuous Language Support in INI\nDESCRIPTION: This INI configuration sets up a table 'products' with support for both non-continuous and continuous script languages in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_14\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  charset_table       = non_cont\n  ngram_len           = 1\n  ngram_chars         = cont\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Morphology Skip Fields in Manticore Search\nDESCRIPTION: This snippet shows how to use the 'morphology_skip_fields' option to exclude specific fields from morphology preprocessing. It demonstrates creating a 'products' table with 'title', 'name', and 'price' fields, where 'name' is skipped for morphology processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Morphology.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmorphology_skip_fields = field1[, field2, ...]\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, name text, price float) morphology_skip_fields = 'name' morphology = 'stem_en'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, name text, price float) morphology_skip_fields = 'name' morphology = 'stem_en'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'morphology_skip_fields' => 'name',\n            'morphology' => 'stem_en'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) morphology_skip_fields = \\'name\\' morphology = \\'stem_en\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) morphology_skip_fields = \\'name\\' morphology = \\'stem_en\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) morphology_skip_fields = \\'name\\' morphology = \\'stem_en\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) morphology_skip_fields = 'name' morphology = 'stem_en'\", true);\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Docker with Memory Locking and Limits\nDESCRIPTION: Docker command to run Manticore with appropriate ulimits and memory locking capabilities for optimal performance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore --cap-add=IPC_LOCK --ulimit memlock=-1:-1 --ulimit nofile=65536:65536 -d manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: Table Truncation in Java\nDESCRIPTION: Example of truncating a table using Java client in Manticore Search. Uses the sql() method with the TRUNCATE TABLE statement.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"TRUNCATE TABLE products\", true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Kill-list Target in Manticore Search\nDESCRIPTION: Setting to determine which tables the kill-list will be applied to. Can use :kl mode for kill-list based suppression or :id mode for document ID based suppression.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\nkilllist_target = main:kl\n```\n\n----------------------------------------\n\nTITLE: Defining Full-Text Field in Real-time Table\nDESCRIPTION: Configuration for declaring a full-text field in a real-time table. This setting determines which fields will be indexed for full-text search capabilities.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nrt_field = subject\n```\n\n----------------------------------------\n\nTITLE: Importing Table from Backup Using Bash and MySQL Client\nDESCRIPTION: This bash script creates a table, backs it up, drops it, then imports it from the backup. It uses MySQL client to interact with Manticore Search and demonstrates the complete process of backing up and importing a table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Importing_table.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -P9306 -h0 -e 'create table t(f text)'\n\nmysql -P9306 -h0 -e \"backup table t to /tmp/\"\n\nmysql -P9306 -h0 -e \"drop table t\"\n\nBACKUP_NAME=$(ls /tmp | grep 'backup-' | tail -n 1)\n\nmysql -P9306 -h0 -e \"import table t from '/tmp/$BACKUP_NAME/data/t/t'\n\nmysql -P9306 -h0 -e \"show tables\"\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on Kubernetes with Helm\nDESCRIPTION: Commands to install Manticore Search on a Kubernetes cluster using Helm. Adds the Manticore Search Helm repository and installs the chart with a dedicated namespace.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add manticoresearch https://helm.manticoresearch.com\n# Update values.yaml if needed\nhelm install manticore -n manticore --create-namespace manticoresearch/manticoresearch\n```\n\n----------------------------------------\n\nTITLE: Querying Table Schema Using @table\nDESCRIPTION: Alternative method to view table schema using SELECT queries on the special @table view. Allows using WHERE clause for filtering schema information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Listing_tables.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from tbl.@table where type='text';\n```\n\n----------------------------------------\n\nTITLE: Configuring Zlib Unpack for Multiple Columns in Manticore Search\nDESCRIPTION: This configuration specifies columns to be unpacked using zlib (deflate/gunzip) algorithm. It applies to MySQL and PostgreSQL source types and can help offload decompression from the database.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Database_connection.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nunpack_zlib = col1\nunpack_zlib = col2\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status with SQL\nDESCRIPTION: This SQL example runs a query to obtain status data for a specified agent identified by its IP address. The query focuses on retrieving status variables related to periods using a specific address.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW AGENT '192.168.0.202:6714' STATUS LIKE '%15periods%';\n```\n\nLANGUAGE: SQL\nCODE:\n```\n+-------------------------------------+--------+\n| Variable_name                       | Value  |\n+-------------------------------------+--------+\n| agent_15periods_query_timeouts      | 0      |\n| agent_15periods_connect_timeouts    | 0      |\n| agent_15periods_connect_failures    | 0      |\n| agent_15periods_network_errors      | 0      |\n| agent_15periods_wrong_replies       | 0      |\n| agent_15periods_unexpected_closings | 0      |\n| agent_15periods_warnings            | 0      |\n| agent_15periods_succeeded_queries   | 439    |\n| agent_15periods_msecsperquery       | 231.73 |\n+-------------------------------------+--------+\n9 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Price Range Facets Using PHP Client\nDESCRIPTION: PHP example showing how to implement price range facets using the Manticore Search PHP client. It uses the expression method to define the INTERVAL function and facet method to create an aggregation on that expression.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('facetdemo');\n$search = $index->search('');\n$search->limit(5);\n$search->expression('price_range','INTERVAL(price,200,400,600,800)');\n$search->facet('price_range','group_property');\n$results = $search->get();\nprint_r($results->getFacets());\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week Index with DAYOFWEEK() in SQL\nDESCRIPTION: Executes the DAYOFWEEK() function in SQL to get the index of the weekday (1-7, where Sunday is 1) for a given timestamp, interpreted according to the current timezone. This example uses NOW() as the timestamp input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect dayofweek(now());\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Attribute via JSON API\nDESCRIPTION: Example of updating the 'enabled' attribute of a document with ID 10 in the 'products' table using the JSON API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\":\"products\",\n  \"id\":10,\n  \"doc\":\n  {\n    \"enabled\":0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Faceting Without Duplicates (SQL)\nDESCRIPTION: The response shows search results followed by facet counts with both the total count and the count of distinct properties for each brand_name. This demonstrates how DISTINCT provides both the total count and the deduplicated count in a single query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n+-------------+----------+\n| brand_name  | property |\n+-------------+----------+\n| Brand Nine  | Four     |\n| Brand Ten   | Four     |\n| Brand One   | Five     |\n| Brand Seven | Nine     |\n| Brand Seven | Seven    |\n| Brand Three | Seven    |\n| Brand Nine  | Five     |\n| Brand Three | Eight    |\n| Brand Two   | Eight    |\n| Brand Six   | Eight    |\n| Brand Ten   | Four     |\n| Brand Ten   | Two      |\n| Brand Four  | Ten      |\n| Brand One   | Nine     |\n| Brand Four  | Eight    |\n| Brand Nine  | Seven    |\n| Brand Four  | Five     |\n| Brand Three | Four     |\n| Brand Four  | Two      |\n| Brand Four  | Eight    |\n+-------------+----------+\n20 rows in set (0.00 sec)\n\n+-------------+--------------------------+----------+\n| brand_name  | count(distinct property) | count(*) |\n+-------------+--------------------------+----------+\n| Brand Nine  |                        3 |        3 |\n| Brand Ten   |                        2 |        3 |\n| Brand One   |                        2 |        2 |\n| Brand Seven |                        2 |        2 |\n| Brand Three |                        3 |        3 |\n| Brand Two   |                        1 |        1 |\n| Brand Six   |                        1 |        1 |\n| Brand Four  |                        4 |        5 |\n+-------------+--------------------------+----------+\n8 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining BIGINT Attribute\nDESCRIPTION: Configuration for declaring a BIGINT attribute in a table. This is used for storing large integer values that exceed the range of standard integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_bigint = gid\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in SQL Queries for Manticore Search\nDESCRIPTION: Demonstrates how an error is returned when executing an invalid SQL query in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from tbl where match('@surname joe');\n```\n\nLANGUAGE: sql\nCODE:\n```\nERROR 1064 (42000): index idx: query error: no field 'surname' found in schema\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using JavaScript\nDESCRIPTION: This JavaScript code uses the Manticore Search API to execute an SQL statement that creates a distributed table named 'local_dist'. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE local_dist type=\\'distributed\\' local=\\'index1\\' local=\\'index2\\'')\n```\n\n----------------------------------------\n\nTITLE: PHP Response Example for Highlighting in Manticore Search\nDESCRIPTION: Shows the response format when using highlighting with the PHP client. The output includes the document ID, title, content, and the highlighted snippet with the matched term enclosed in <b> tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_114\n\nLANGUAGE: php\nCODE:\n```\nDocument: 1\ntitle : Books one\ncontent : They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it.\nHighlight for content:\n-  gestured the other robots away <b>and</b> entered itself. The door closed\n```\n\n----------------------------------------\n\nTITLE: Multiple Language Stop Words Configuration\nDESCRIPTION: Demonstrates how to configure stop words for multiple languages simultaneously using language aliases.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Ignoring_stop-words.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) stopwords = 'en, it, ru'\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  stopwords = en it ru\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Using Indexer Tool for Creating Plain Tables in Manticore Search\nDESCRIPTION: Demonstrates the general syntax for using the indexer tool to create plain tables in Manticore Search. It shows how to specify table names and use wildcards.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nindexer [OPTIONS] [table_name1 [table_name2 [...]]]\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer ...\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer mysmallindex mybigindex\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer indexpart*main --rotate\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using PHP in Manticore Search\nDESCRIPTION: This snippet shows how to insert documents into a real-time table using the PHP client for Manticore Search. It demonstrates adding multiple documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$index->addDocuments([\n        ['id' => 1, 'title' => 'Crossbody Bag with Tassel', 'price' => 19.85]\n]);\n$index->addDocuments([\n        ['id' => 2, 'title' => 'Crossbody Bag with Tassel']\n]);\n$index->addDocuments([\n        ['id' => 0, 'title' => 'Yellow bag']\n]);\n```\n\n----------------------------------------\n\nTITLE: Rust Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using Rust. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_42\n\nLANGUAGE: Rust\nCODE:\n```\nclass BulkResponse {\n    items: [{replace={_index=test, _id=0, created=false, deleted=2, result=created, status=200}}]\n    error: null\n    additionalProperties: {errors=false}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Manticore Search with Java\nDESCRIPTION: Executes a SQL query to retrieve the status of Manticore Search agents using the Java API. This command returns detailed statistics about each agent including connection information, query performance metrics, and error counts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"SHOW AGENT STATUS\");\n```\n\nLANGUAGE: java\nCODE:\n```\n{columns=[{ Key : { type=string }},\n              { Value : { type=string }}],\n  data : [\n\t{ Key=status_period_seconds ,  Value=60 },\n\t{ Key=status_stored_periods ,  Value=15 },\n\t{ Key=ag_0_hostname ,  Value=192.168.0.202:6713 },\n\t{ Key=ag_0_references ,  Value=2 },\n\t{ Key=ag_0_lastquery ,  Value=0.41 },\n\t{ Key=ag_0_lastanswer ,  Value=0.19 },\n\t{ Key=ag_0_lastperiodmsec ,  Value=222 },\n\t{ Key=ag_0_errorsarow ,  Value=0 },\n\t{ Key=ag_0_1periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_0_1periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_0_1periods_connect_failures ,  Value=0 },\n\t{ Key=ag_0_1periods_network_errors ,  Value=0 },\n\t{ Key=ag_0_1periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_0_1periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_0_1periods_warnings ,  Value=0 },\n\t{ Key=ag_0_1periods_succeeded_queries ,  Value=27 },\n\t{ Key=ag_0_1periods_msecsperquery ,  Value=232.31 },\n\t{ Key=ag_0_5periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_0_5periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_0_5periods_connect_failures ,  Value=0 },\n\t{ Key=ag_0_5periods_network_errors ,  Value=0 },\n\t{ Key=ag_0_5periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_0_5periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_0_5periods_warnings ,  Value=0 },\n\t{ Key=ag_0_5periods_succeeded_queries ,  Value=146 },\n\t{ Key=ag_0_5periods_msecsperquery ,  Value=231.83 },\n\t{ Key=ag_1_hostname 192.168.0.202:6714 },\n\t{ Key=ag_1_references ,  Value=2 },\n\t{ Key=ag_1_lastquery ,  Value=0.41 },\n\t{ Key=ag_1_lastanswer ,  Value=0.19 },\n\t{ Key=ag_1_lastperiodmsec ,  Value=220 },\n\t{ Key=ag_1_errorsarow ,  Value=0 },\n\t{ Key=ag_1_1periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_1_1periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_1_1periods_connect_failures ,  Value=0 },\n\t{ Key=ag_1_1periods_network_errors ,  Value=0 },\n\t{ Key=ag_1_1periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_1_1periods_unexpected_closings ,  Value=0 },\n\t{ Key=ag_1_1periods_warnings ,  Value=0 },\n\t{ Key=ag_1_1periods_succeeded_queries ,  Value=27 },\n\t{ Key=ag_1_1periods_msecsperquery ,  Value=231.24 },\n\t{ Key=ag_1_5periods_query_timeouts ,  Value=0 },\n\t{ Key=ag_1_5periods_connect_timeouts ,  Value=0 },\n\t{ Key=ag_1_5periods_connect_failures ,  Value=0 },\n\t{ Key=ag_1_5periods_network_errors ,  Value=0 },\n\t{ Key=ag_1_5periods_wrong_replies ,  Value=0 },\n\t{ Key=ag_1_5periods_warnings ,  Value=0 },\n\t{ Key=ag_1_5periods_succeeded_queries ,  Value=146 },\n\t{ Key=ag_1_5periods_msecsperquery ,  Value=230.85 }],\n  error= ,\n  total=0,\n  warning= }\n```\n\n----------------------------------------\n\nTITLE: Response for Faceting Without Duplicates (JSON)\nDESCRIPTION: The JSON response shows the search results and facet buckets with both total counts and distinct property counts for each brand. The results are formatted in JSON with hits containing the matched documents and aggregations containing the facet data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 20,\n    \"total_relation\": \"eq\",\n    \"hits\": [\n      {\n        \"_score\": 1,\n        \"_source\": {\n          \"brand_name\": \"Brand Nine\",\n          \"property\": \"Four\"\n        }\n      },\n      {\n        \"_score\": 1,\n        \"_source\": {\n          \"brand_name\": \"Brand Ten\",\n          \"property\": \"Four\"\n        }\n      },\n ...\n      {\n        \"_score\": 1,\n        \"_source\": {\n          \"brand_name\": \"Brand Four\",\n          \"property\": \"Eight\"\n        }\n      }\n    ]\n  },\n  \"aggregations\": {\n    \"brand_name\": {\n      \"buckets\": [\n        {\n          \"key\": \"Brand Nine\",\n          \"doc_count\": 3,\n          \"count(distinct property)\": 3\n        },\n        {\n          \"key\": \"Brand Ten\",\n          \"doc_count\": 3,\n          \"count(distinct property)\": 2\n        },\n...\n        {\n          \"key\": \"Brand Two\",\n          \"doc_count\": 1,\n          \"count(distinct property)\": 1\n        },\n        {\n          \"key\": \"Brand Six\",\n          \"doc_count\": 1,\n          \"count(distinct property)\": 1\n        },\n        {\n          \"key\": \"Brand Four\",\n          \"doc_count\": 5,\n          \"count(distinct property)\": 4\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using C# Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the C# client library's `Sql` method (`utilsApi`). This creates the 'products' table with the `hitless_words` option set to 'all'. The boolean `true` likely indicates an option, possibly for returning results or synchronous execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_96\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) hitless_words = 'all'\", true);\n```\n\n----------------------------------------\n\nTITLE: Disabling Binary Logging for Existing Table\nDESCRIPTION: SQL command to alter an existing table to disable binary logging by setting binlog parameter to 0.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter table FOO binlog='0';\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries in SQL\nDESCRIPTION: Demonstrates using the PQ function in SQL to identify which documents match which percolate query rules. The docs option returns document match information in the response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\nCALL PQ('products', '[{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}, {\"title\": \"beautiful bag\"}]', 1 as query, 1 as docs);\n```\n\n----------------------------------------\n\nTITLE: Basic Stop Words Configuration\nDESCRIPTION: Demonstrates the basic stop words configuration format in INI format for specifying stop word file paths.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Ignoring_stop-words.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nstopwords=path/to/stopwords/file[ path/to/another/file ...]\n```\n\n----------------------------------------\n\nTITLE: Joining a Cluster\nDESCRIPTION: Examples of nodes joining an existing cluster using different programming interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nJOIN CLUSTER posts AT '192.168.1.101:9312'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nJOIN CLUSTER posts AT '192.168.1.101:9312'\n\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n  'cluster' => 'posts',\n  'body' => [\n      '192.168.1.101:9312'\n  ]\n];\n$response = $client->cluster->join($params);\n```\n\n----------------------------------------\n\nTITLE: Setting Client Timeout\nDESCRIPTION: Defines maximum wait time between requests for persistent connections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nclient_timeout = 1h\n```\n\n----------------------------------------\n\nTITLE: Example of RELOAD TABLES Command Usage in Manticore Search\nDESCRIPTION: This SQL example shows how to use the RELOAD TABLES command in Manticore Search, which rotates all tables and potentially re-reads the configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Rotating_a_table.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> RELOAD TABLES;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Setting Server ID in Manticore Search (INI)\nDESCRIPTION: Assigns a unique server identifier used to generate a short UUID for replication cluster nodes. Must be unique and between 0-127. If not set, a hash or random number is used.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_59\n\nLANGUAGE: ini\nCODE:\n```\nserver_id = 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in Rust\nDESCRIPTION: Creates a table named 'products' with a 'title' text field using the Rust API. The text field will be indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text)\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Basic Package Building with CMake in Docker\nDESCRIPTION: Standard commands for building a ManticoreSearch package similar to official releases using CMake.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build && cd build\ncmake -DPACK=1 /path/to/sources\ncmake --build . --target package -j4\n```\n\n----------------------------------------\n\nTITLE: Using ATAN2 Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Computes the arctangent of two arguments, yielding a result in radians as a floating-point value. The function expects two numeric arguments and is typically used for coordinate-based angle calculations. Both arguments must be numeric; non-numeric input may result in evaluation errors.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nATAN2(y, x)\n```\n\n----------------------------------------\n\nTITLE: NULL Handling in Manticore Search JOINs\nDESCRIPTION: You can use IS NULL and IS NOT NULL conditions on joined fields to filter results based on the existence of matching records.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id WHERE t2.name IS NULL\nSELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id WHERE t2.name IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in JavaScript\nDESCRIPTION: Demonstrates querying agent status using the JavaScript client library. Uses SQL query to check agent metrics filtered for 15-period statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\");\n```\n\n----------------------------------------\n\nTITLE: Interpreting Percolation SQL Results\nDESCRIPTION: Displays the result of executing a percolation query in SQL. The table shows the document id, matched query, tags, and filters applied.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\n+---------------------+--------------+------+---------------------------+\n| id                  | query        | tags | filters                   |\n+---------------------+--------------+------+---------------------------+\n| 1657852401006149635 | @title shoes |      | color IN ('blue, 'green') |\n| 1657852401006149637 | @title bag   |      |                           |\n+---------------------+--------------+------+---------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Multiple-Field Search Operator in Manticore Search\nDESCRIPTION: Demonstrates how to search across multiple fields simultaneously, allowing a more targeted query across specific document sections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n@(title,body) hello world\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Listeners in Manticore Search\nDESCRIPTION: Comprehensive examples of listen directive configurations showing various ways to set up network interfaces, ports, and protocols for Manticore Search server. Includes examples for MySQL protocol, HTTP, HTTPS, replication, and Unix sockets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nlisten = localhost\nlisten = localhost:5000 # listen for remote agents (binary API) and http/https requests on port 5000 at localhost\nlisten = 192.168.0.1:5000 # listen for remote agents (binary API) and http/https requests on port 5000 at 192.168.0.1\nlisten = /var/run/manticore/manticore.s # listen for binary API requests on unix socket\nlisten = /var/run/manticore/manticore.s:mysql # listen for mysql requests on unix socket\nlisten = 9312 # listen for remote agents (binary API) and http/https requests on port 9312 on any interface\nlisten = localhost:9306:mysql # listen for mysql requests on port 9306 at localhost\nlisten = localhost:9307:mysql_readonly # listen for mysql requests on port 9307 at localhost and accept only read queries\nlisten = 127.0.0.1:9308:http # listen for http requests as well as connections from remote agents (and binary API) on port 9308 at localhost\nlisten = 192.168.0.1:9320-9328:replication # listen for replication connections on ports 9320-9328 at 192.168.0.1\nlisten = 127.0.0.1:9443:https # listen for https requests (not http) on port 9443 at 127.0.0.1\nlisten = 127.0.0.1:9312:sphinx # listen for legacy Sphinx requests (e.g. from SphinxSE) on port 9312 at 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Starting Manticore Windows Service\nDESCRIPTION: Command to start the Manticore Search service using the Windows sc.exe utility. This assumes Manticore has been installed as a Windows Service.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Windows.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsc.exe start Manticore\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on Windows\nDESCRIPTION: Instructions for installing Manticore Search on Windows by downloading the archive, extracting files, and installing as a service.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nC:\\Manticore\\bin\\searchd --install --config C:\\Manticore\\sphinx.conf.in --servicename Manticore\n```\n\n----------------------------------------\n\nTITLE: Systemd Timer Configuration\nDESCRIPTION: Configuration for scheduling Manticore indexer using systemd timer.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncat << EOF > /etc/systemd/system/manticore-indexer@.timer\n[Unit]\nDescription=Run Manticore Search's indexer on schedule\n[Timer]\nOnCalendar=minutely\nRandomizedDelaySec=5m\nUnit=manticore-indexer@%i.service\n[Install]\nWantedBy=timers.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Attribute\nDESCRIPTION: Configuration for declaring a boolean attribute with 1-bit unsigned integer values. This is useful for storing flags or binary states like on/off, true/false.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_bool = available\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (Python)\nDESCRIPTION: Removes a table from a replication cluster using Python client. The SQL command is executed through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('ALTER CLUSTER posts DROP weekly_index')\n```\n\n----------------------------------------\n\nTITLE: Converting Single Table with Index Converter\nDESCRIPTION: Command to convert a single table using the configuration file path and table name specification.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Migration_from_Sphinx.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n$ index_converter --config /home/myuser/manticore.conf --index tablename\n```\n\n----------------------------------------\n\nTITLE: Creating Geospatial Polygons with GEOPOLY2D in SQL\nDESCRIPTION: The `GEOPOLY2D` function creates a polygon considering Earth's curvature for use with the `CONTAINS` function. It's suitable for large areas and tessellates the polygon into smaller ones. Coordinates must be latitude/longitude pairs in degrees.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Geo_spatial_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGEOPOLY2D(lat1,lon1,lat2,lon2,lat3,lon3...)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Table Optimization in Manticore Search\nDESCRIPTION: Running the OPTIMIZE TABLE command in foreground mode, waiting for the optimization process to complete before returning.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Compacting_a_table.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nOPTIMIZE TABLE rt OPTION sync=1;\n```\n\n----------------------------------------\n\nTITLE: Examples of RELOAD TABLE Command Usage in Manticore Search\nDESCRIPTION: These SQL examples demonstrate different ways to use the RELOAD TABLE command in Manticore Search, including basic reload, reloading from a specific path, and using the switchover option.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Rotating_a_table.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> RELOAD TABLE plain_table;\nmysql> RELOAD TABLE plain_table FROM '/home/mighty/new_table_files';\nmysql> RELOAD TABLE plain_table FROM '/home/mighty/new/place/for/table/table_files' OPTION switchover=1;\n```\n\n----------------------------------------\n\nTITLE: Range Faceting\nDESCRIPTION: Demonstrates faceting over a set of numeric ranges, showing how to create price range buckets with both SQL and JSON syntax. Includes examples of keyed and non-keyed responses.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), RANGE(price, {range_to=150},{range_from=150,range_to=300},{range_from=300}) price_range FROM facets GROUP BY price_range ORDER BY price_range ASC;\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /search -d '\n{\n  \"size\": 0,\n  \"table\": \"facets\",\n  \"aggs\": {\n    \"price_range\": {\n      \"range\": {\n        \"field\": \"price\",\n        \"ranges\": [\n          {\n            \"to\": 99\n          },\n          {\n            \"from\": 99,\n            \"to\": 550\n          },\n          {\n            \"from\": 550\n          }\n        ]\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via Docker\nDESCRIPTION: Run Manticore Search in a Docker container and connect to it using the built-in MySQL client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore -d manticoresearch/manticore && docker exec -it manticore mysql\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in PHP\nDESCRIPTION: Shows how to create a table with a multi64 field in PHP using Manticore API. This example demonstrates defining both a text field and a multi64 field for storing arrays of big integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_89\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n\t'values'=>['type'=>'multi64']\n]);\n```\n\n----------------------------------------\n\nTITLE: Generating CA Private Key\nDESCRIPTION: Command to generate a 2048-bit RSA private key for the Certificate Authority.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/SSL.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa 2048 > ca-key.pem\n```\n\n----------------------------------------\n\nTITLE: Using NOTNEAR Operator in Manticore Search SQL\nDESCRIPTION: Shows the usage of the NOTNEAR operator, which matches documents where the left argument is present and the right argument is either absent or at a specified distance away.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nChurch NOTNEAR/3 street\n```\n\n----------------------------------------\n\nTITLE: Comparing Floating-Point Numbers in SQL\nDESCRIPTION: Demonstrates a reliable approach to compare floating-point numbers using an absolute error margin.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_68\n\nLANGUAGE: SQL\nCODE:\n```\nselect abs(a-b)<=0.00001 from products\n```\n\n----------------------------------------\n\nTITLE: Defining Unsigned Integer Attribute\nDESCRIPTION: Configuration for declaring an unsigned integer attribute in a table. This can be used to store and filter by numeric values like IDs or categories.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_uint = gid\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS Python-asyncio Response\nDESCRIPTION: Sample response from the asynchronous SHOW THREADS command via Python client, showing thread information as a Python dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n[{'columns': [{'TID': {'type': 'long'}}, {'Name': {'type': 'string'}}, {'Proto': {'type': 'string'}}, {'State': {'type': 'string'}}, {'Connection from': {'type': 'string'}}, {'ConnID': {'type': 'long long'}}, {'This/prev job time, s': {'type': 'string'}}, {'CPU activity': {'type': 'float'}}, {'Jobs done': {'type': 'long'}}, {'Thread status': {'type': 'string'}}, {'Info': {'type': 'string'}}], 'data': [{'TID': 506958, 'Name': 'work_6', 'Proto': 'http', 'State': 'query', 'Connection from': '127.0.0.1:38600', 'ConnID': 834, 'This/prev job time, s': '206us', 'CPU activity': '91.85%', 'Jobs done': 943, 'Thread status': 'working', 'Info': 'show_threads'}], 'total': 1, 'error': '', 'warning': ''}]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Real-Time Table with Expanded Keywords (INI)\nDESCRIPTION: This INI configuration creates a real-time table named 'products' with expanded keywords, specifying fields and attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  expand_keywords = 1\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Attribute\nDESCRIPTION: Configuration for declaring a JSON attribute. JSON attributes allow storing structured data in JSON format that can be accessed using JSON functions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_json = properties\n```\n\n----------------------------------------\n\nTITLE: Reinterpret Binary Data in SQL\nDESCRIPTION: The SINT() function reinterprets a 32-bit unsigned integer argument as signed, extending it to 64-bit. This is useful for changing data representation without computation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Type_casting_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSINT()\n```\n\n----------------------------------------\n\nTITLE: Configuring hitless_words in Manticore INI\nDESCRIPTION: Defines a Manticore Search real-time table named 'products' in the configuration file format (`.ini`). It sets the `hitless_words` option to 'all', disabling positional information storage for all terms in this index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_98\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  hitless_words = all\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Global Variables via MySQL Client - SQL\nDESCRIPTION: Demonstrates usage of the mysql> SHOW GLOBAL VARIABLES; command via an SQL client (such as MySQL or SphinxQL interface) to display all available global server variables and their current values. Outputs a table of variable names and values, where administrators can review settings such as autocommit mode, character set, and logging options. No special dependencies are required besides access to the running server via a supported SQL protocol.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_VARIABLES.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SHOW GLOBAL VARIABLES;\n+--------------------------+-----------+\n| Variable_name            | Value     |\n+--------------------------+-----------+\n| autocommit               | 1         |\n| collation_connection     | libc_ci   |\n| query_log_format         | sphinxql  |\n| log_level                | info      |\n| max_allowed_packet       | 134217728 |\n| character_set_client     | utf8      |\n| character_set_connection | utf8      |\n| grouping_in_utc          | 0         |\n| last_insert_id           | 123, 200  |\n+--------------------------+-----------+\n9 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Address in INI Configuration\nDESCRIPTION: Here, the `node_address` parameter specifies the network address of a node. It is mainly used in complex network environments like firewalls, NAT, Docker or cloud deployments, and multi-region clusters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nnode_address = 10.101.0.10\n```\n\n----------------------------------------\n\nTITLE: Allowing Only Not Terms in INI Configuration\nDESCRIPTION: The setting `not_terms_only_allowed` determines if queries with only the negation operator are permissible. The default is 0 meaning these queries will fail unless this parameter is set to 1.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nnot_terms_only_allowed = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Blend Mode in Manticoresearch (INI)\nDESCRIPTION: This snippet shows how to configure blend_mode in Manticoresearch using the INI format. Various options like trim_none, trim_head, trim_tail, trim_both, trim_all, and skip_pure can be set to control token indexing behaviors.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nblend_mode = option [, option [, ...]]\noption = trim_none | trim_head | trim_tail | trim_both | trim_all | skip_pure\n```\n\n----------------------------------------\n\nTITLE: Example Output of SHOW PROFILE in Manticore Search SQL\nDESCRIPTION: Shows an example result set returned by the `SHOW PROFILE` command in Manticore Search SQL. The output tables the time spent (`Duration`, `Percent`) and frequency (`Switches`) for various internal states (`Status`) during the execution of the profiled query. This helps identify performance bottlenecks.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_profile.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nQuery OK, 0 rows affected (0.00 sec)\n\n+--------+\n| id     |\n+--------+\n| 241629 |\n+--------+\n1 row in set (0.35 sec)\n\n+--------------+----------+----------+---------+\n| Status       | Duration | Switches | Percent |\n+--------------+----------+----------+---------+\n| unknown      | 0.000557 | 5        | 0.16    |\n| net_read     | 0.000016 | 1        | 0.00    |\n| local_search | 0.000076 | 1        | 0.02    |\n| sql_parse    | 0.000121 | 1        | 0.03    |\n| dict_setup   | 0.000003 | 1        | 0.00    |\n| parse        | 0.000072 | 1        | 0.02    |\n| transforms   | 0.000331 | 2        | 0.10    |\n| init         | 0.001945 | 3        | 0.56    |\n| read_docs    | 0.001257 | 76       | 0.36    |\n| read_hits    | 0.002598 | 186      | 0.75    |\n| get_docs     | 0.089328 | 2691     | 25.80   |\n| get_hits     | 0.189626 | 2799     | 54.78   |\n| filter       | 0.009369 | 2613     | 2.71    |\n| rank         | 0.029669 | 7760     | 8.57    |\n| sort         | 0.019070 | 2531     | 5.51    |\n| finalize     | 0.000001 | 1        | 0.00    |\n| clone_attrs  | 0.002009 | 1        | 0.58    |\n| aggregate    | 0.000054 | 2        | 0.02    |\n| net_write    | 0.000076 | 2        | 0.02    |\n| eval_post    | 0.000001 | 1        | 0.00    |\n| total        | 0.346179 | 18678    | 0       |\n+--------------+----------+----------+---------+\n21 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Setting Network Timeout Behavior in Manticore Search (INI)\nDESCRIPTION: Controls how network timeouts are applied. 0 limits total request time, 1 (default) limits time between network activities. Crucial for large data transfers in replication.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_53\n\nLANGUAGE: ini\nCODE:\n```\nreset_network_timeout_on_packet = 0\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with Java in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause through the Java client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nsqlresult = utilsApi.sql(\"DROP TABLE IF EXISTS products\", true);\n```\n\n----------------------------------------\n\nTITLE: Defining PID File Path in INI Configuration\nDESCRIPTION: Mandatory in Manticore Search, the `pid_file` specifies the path for the process ID file of the `searchd` server. This file is crucial for internal server tasks and external automation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\npid_file = /var/run/manticore/searchd.pid\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Full-Text Setting Reconfiguration in Manticore Search\nDESCRIPTION: Example showing how to reconfigure full-text settings for a table in plain mode. Displays table settings before and after the reconfiguration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nmysql> show table rt settings;\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| settings      |       |\n+---------------+-------+\n1 row in set (0.00 sec)\n\nmysql> alter table rt reconfigure;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show table rt settings;\n+---------------+----------------------+\n| Variable_name | Value                |\n+---------------+----------------------+\n| settings      | morphology = stem_en |\n+---------------+----------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Calculating Bucket Keys in DATE_HISTOGRAM Function\nDESCRIPTION: Formula used to determine the key of the bucket in the DATE_HISTOGRAM function. It uses floor division of the value by the interval and then multiplies by the interval.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nkey_of_the_bucket = interval * floor ( value / interval )\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS Response in SQL\nDESCRIPTION: Sample response from the SHOW THREADS command showing details of active threads, including thread IDs, names, connection protocols, states, and current activities.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n*************************** 1. row ***************************\n                TID: 83\n               Name: work_1\n              Proto: mysql\n              State: query\n    Connection from: 172.17.0.1:43300\n             ConnID: 8\n This/prev job time: 630us\n       CPU activity: 94.15%\n          Jobs done: 2490\n      Thread status: working\n               Info: SHOW THREADS \n*************************** 2. row ***************************\n                TID: 84\n               Name: work_2\n              Proto: mysql\n              State: query\n    Connection from: 172.17.0.1:43301\n             ConnID: 9\n This/prev job time: 689us\n       CPU activity: 89.23%\n          Jobs done: 1830\n      Thread status: working\n               Info: show threads\n```\n\n----------------------------------------\n\nTITLE: SQL Examples of Auto ID Generation\nDESCRIPTION: This SQL snippet illustrates the process of inserting rows into a table in Manticore where unique IDs are auto-generated. It demonstrates how the ID generation schema ensures uniqueness without being monotonic.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO products(title,price) VALUES ('Crossbody Bag with Tassel', 19.85);\nINSERT INTO products VALUES (0,'Yello bag', 4.95);\nselect * from products;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with SQL in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause in SQL. This prevents errors when trying to delete non-existent tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS products;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Blackhole Agents in Manticore Search INI\nDESCRIPTION: Demonstrates how to configure blackhole agents for debugging or testing purposes without affecting production traffic.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nagent_blackhole = testbox:9312:testindex1,testindex2\n```\n\n----------------------------------------\n\nTITLE: Executing DEBUG Statement in SQL for Manticore Search\nDESCRIPTION: The DEBUG statement is used to execute various internal commands in Manticore Search. It can be called without parameters to list available subcommands. This example shows the output of the DEBUG command for a regular connection.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nmysql> debug;\n+-------------------------------------------------------------------------+----------------------------------------------------------------------------------------+\n| command                                                                 | meaning                                                                                |\n+-------------------------------------------------------------------------+----------------------------------------------------------------------------------------+\n| flush logs                                                              | emulate USR1 signal                                                                    |\n| reload indexes                                                          | emulate HUP signal                                                                     |\n| debug token <password>                                                  | calculate token for password                                                           |\n| debug malloc_stats                                                      | perform 'malloc_stats', result in searchd.log                                          |\n| debug malloc_trim                                                       | pefrorm 'malloc_trim' call                                                             |\n| debug sleep <N>                                                         | sleep for <N> seconds                                                                  |\n| debug tasks                                                             | display global tasks stat (use select from @@system.tasks instead)                     |\n| debug sched                                                             | display task manager schedule (use select from @@system.sched instead)                 |\n| debug merge <TBL> [chunk] <X> [into] [chunk] <Y> [option sync=1,byid=0] | For RT table <TBL> merge disk chunk X into disk chunk Y                                |\n| debug drop [chunk] <X> [from] <TBL> [option sync=1]                     | For RT table <TBL> drop disk chunk X                                                   |\n| debug files <TBL> [option format=all|external]                          | list files belonging to <TBL>. 'all' - including external (wordforms, stopwords, etc.) |\n| debug close                                                             | ask server to close connection from it's side                                          |\n| debug compress <TBL> [chunk] <X> [option sync=1]                        | Compress disk chunk X of RT table <TBL> (wipe out deleted documents)                   |\n| debug split <TBL> [chunk] <X> on @<uservar> [option sync=1]             | Split disk chunk X of RT table <TBL> using set of DocIDs from @uservar                 |\n| debug wait <cluster> [like 'xx'] [option timeout=3]                     | wait <cluster> ready, but no more than 3 secs.                                         |\n| debug wait <cluster> status <N> [like 'xx'] [option timeout=13]         | wait <cluster> commit achieve <N>, but no more than 13 secs                            |\n| debug meta                                                              | Show max_matches/pseudo_shards. Needs set profiling=1                                  |\n| debug trace OFF|'path/to/file' [<N>]                                    | trace flow to file until N bytes written, or 'trace OFF'                               |\n| debug curl <URL>                                                        | request given url via libcurl                                                          |\n+-------------------------------------------------------------------------+----------------------------------------------------------------------------------------+\n19 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Word Forms in PHP\nDESCRIPTION: PHP code example showing how to create a table with word forms using the Manticore Search PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'wordforms' => [\n                '/var/lib/manticore/wordforms.txt',\n                '/var/lib/manticore/alternateforms.txt',\n                '/var/lib/manticore/dict*.txt'\n            ]\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Multi-node Manticore Cluster Docker Compose Configuration\nDESCRIPTION: Docker Compose YAML configuration for setting up a two-node Manticore Search cluster.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\n\nservices:\n\n  manticore-1:\n    image: manticoresearch/manticore\n    restart: always\n    ulimits:\n      nproc: 65535\n      nofile:\n         soft: 65535\n         hard: 65535\n      memlock:\n        soft: -1\n        hard: -1\n    networks:\n      - manticore\n  manticore-2:\n    image: manticoresearch/manticore\n    restart: always\n    ulimits:\n      nproc: 65535\n      nofile:\n        soft: 65535\n        hard: 65535\n      memlock:\n        soft: -1\n        hard: -1\n    networks:\n      - manticore\nnetworks:\n  manticore:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Installing Stable Manticore Search Packages (Bash)\nDESCRIPTION: Installs the main Manticore Search package (`manticore`) and extra utilities (`manticore-extra`) from the previously configured YUM repository. Requires `sudo` privileges and the Manticore repository to be set up.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/RHEL_and_Centos.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install manticore manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in Go\nDESCRIPTION: Shows how to query agent status metrics using the Go client library. Makes a SQL query to show agent status filtered for 15-period metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"SHOW AGENT \\\"192.168.0.202:6714\\\" STATUS LIKE \\\"%15periods%\\\").Execute()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Port in Manticore Search\nDESCRIPTION: Configuration example for setting up the MySQL protocol port in the searchd section of Manticore Search configuration file. The default port is 9306 and is enabled by default.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n   listen = 127.0.0.1:9306:mysql\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tables with LIKE Pattern\nDESCRIPTION: Demonstrates how to filter table listings using the LIKE clause to match specific table names. The pattern follows SQL LIKE syntax for pattern matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Listing_tables.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLES LIKE 'pro%';\n```\n\n----------------------------------------\n\nTITLE: Reindexing with Attribute Preservation in Manticore\nDESCRIPTION: Demonstrates how to reindex a table while preserving existing attribute values. This is useful when attributes have been updated in the table but not in the source data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer mytable --keep-attrs=/path/to/index/files\n```\n\n----------------------------------------\n\nTITLE: Example of Aggregation Query Without Cutoff\nDESCRIPTION: Shows the correct results of an aggregation query when not using the cutoff option, processing all documents in the table and returning accurate counts and averages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n--------------\nselect avg(a) from t facet a\n--------------\n\n+----------+\n| avg(a)   |\n+----------+\n| 2.000000 |\n+----------+\n1 row in set (0.00 sec)\n--- 1 out of 1 results in 0ms ---\n\n+------+----------+\n| a    | count(*) |\n+------+----------+\n|    1 |        2 |\n|    2 |        2 |\n|    3 |        2 |\n+------+----------+\n3 rows in set (0.00 sec)\n--- 3 out of 3 results in 0ms ---\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via HTTP\nDESCRIPTION: Example of sending a curl request to Manticore's HTTP endpoint on port 9308 to perform a search operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"http://localhost:9308/search\"\n```\n\n----------------------------------------\n\nTITLE: Using Ninja Multi-Config Generator in CMake\nDESCRIPTION: Command to select Ninja Multi-Config generator, which allows building multiple configurations in the same build folder by changing the --config parameter at build time.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncmake -G\"Ninja Multi-Config\" ...\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Part of Timestamp with DATE() in SQL\nDESCRIPTION: Executes the DATE() function in SQL to extract and format the date part of a timestamp as a string in 'YYYY-MM-DD' format, according to the current timezone. This example uses NOW() to provide the current timestamp. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nselect date(now());\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON with Escaped Double Quotes in Manticore Search\nDESCRIPTION: Demonstrates how to insert JSON data containing double quotes into Manticore Search using an SQL query. Double backslashes are used to escape the quotes within the JSON string.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Escaping.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into tbl(j) values('{\"a\": \"\\\\\"abc\\\\\"\"}');\n```\n\n----------------------------------------\n\nTITLE: Configuring sql_joined_field in Manticore Search\nDESCRIPTION: Demonstrates how to set up a sql_joined_field for creating a joined/payload field in Manticore Search. This example creates a 'tag' field with payload data for Nike products.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Processing_fetched_data.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nsource min {\n    type = mysql\n    sql_host = localhost\n    sql_user = test\n    sql_pass =\n    sql_db = test\n    sql_query = select 1, 'Nike bag' f \\\n    UNION select 2, 'Adidas bag' f \\\n    UNION select 3, 'Reebok bag' f \\\n    UNION select 4, 'Nike belt' f\n\n    sql_joined_field = tag from payload-query; select 1 id, 'nike' tag, 10 weight \\\n    UNION select 4 id, 'nike' tag, 10 weight;\n}\n\nindex idx {\n    path = idx\n    source = min\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text and String Fields in Java\nDESCRIPTION: Uses the Java API to create a table with a 'title' text field and a 'keys' string attribute. String attributes store values as-is and can be used for comparison filtering.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, keys string)\");\n```\n\n----------------------------------------\n\nTITLE: Async Querying for Agent Status in Python with asyncio\nDESCRIPTION: An asyncio-based Python snippet that queries a specific agent's status. Particularly designed for asynchronous execution environments, it uses the `await` keyword to manage the asynchronous nature of network requests.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_30\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait utilsApi.sql('SHOW AGENT \\'192.168.0.202:6714\\' STATUS LIKE \\'%15periods%\\'')\n```\n\nLANGUAGE: Python-asyncio\nCODE:\n```\n{u'columns': [{u'Key': {u'type': u'string'}},\n              {u'Value': {u'type': u'string'}}],\n u'data': [\n\t{u'Key': u'agent_15periods_query_timeouts', u'Value': u'0'},\n\t{u'Key': u'agent_15periods_connect_timeouts', u'Value': u'0'},\n\t{u'Key': u'agent_15periods_connect_failures', u'Value': u'0'},\n    {u'Key': u'agent_15periods_network_errors', u'Value': u'0'},\n    {u'Key': u'agent_15periods_connect_failures', u'Value': u'0'},\n    {u'Key': u'agent_15periods_wrong_replies', u'Value': u'0'},\n    {u'Key': u'agent_15periods_unexpected_closings', u'Value': u'0'},\n    {u'Key': u'agent_15periods_warnings', u'Value': u'0'},\n    {u'Key': u'agent_15periods_succeeded_queries', u'Value': u'439'},\n    {u'Key': u'agent_15periods_msecsperquery', u'Value': u'233.73'},\n    ],\n u'error': u'',\n u'total': 0,\n u'warning': u''}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL CA Certificate Path\nDESCRIPTION: Specifies path to SSL Certificate Authority certificate file used for certificate verification.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_64\n\nLANGUAGE: ini\nCODE:\n```\nssl_ca = keys/ca-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table from a Cluster in Manticore Search\nDESCRIPTION: Removing a table from a Manticore Search cluster as part of the manual optimization process for clustered tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Compacting_a_table.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER CLUSTER mycluster DROP myindex;\n```\n\n----------------------------------------\n\nTITLE: Table Truncation in PHP\nDESCRIPTION: Example of truncating a table using PHP client in Manticore Search. Uses the indices()->truncate() method with table name parameter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$params = [ 'table' => 'products' ];\n$response = $client->indices()->truncate($params);\n```\n\n----------------------------------------\n\nTITLE: Configuring attr_flush_period\nDESCRIPTION: Shows how to set the attr_flush_period option to control the interval for persisting attribute updates to disk.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nattr_flush_period = 900 # persist updates to disk every 15 minutes\n```\n\n----------------------------------------\n\nTITLE: Configuring a Table with Blended Characters in INI\nDESCRIPTION: This INI configuration sets up a table 'products' with blended characters in Manticore Search, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_24\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  blend_chars = +, &, U+23, @->_\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bigram Index in Manticore Search\nDESCRIPTION: Sets the bigram indexing mode for accelerating phrase searches. Options include 'none', 'all', 'first_freq', and 'both_freq'. This setting controls which word pairs are indexed for faster phrase matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_60\n\nLANGUAGE: ini\nCODE:\n```\nbigram_index = {none|all|first_freq|both_freq}\n```\n\n----------------------------------------\n\nTITLE: C Integration: Working with UDF PACKEDFACTORS in Manticore Search (C)\nDESCRIPTION: Demonstrates the C-level logic for using PACKEDFACTORS() output with a user-defined function (UDF). The code shows initialization, unpacking, safe usage, and cleanup of the SPH_UDF_FACTORS struct, which is required for interpreting binary ranking factor data inside a UDF. Dependencies include sphinxudf.h and linking against Manticore internals.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nSPH_UDF_FACTORS factors;\nsphinx_factors_init(&factors);\nsphinx_factors_unpack((DWORD*)args->arg_values[0], &factors);\n// ... can use the contents of factors variable here ...\nsphinx_factors_deinit(&factors);\n```\n\n----------------------------------------\n\nTITLE: Multiple Token Mapping in Word Forms\nDESCRIPTION: Examples of mapping single tokens to multiple destination tokens.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ns02e02 > season 2 episode 2\ns3 e3 > season 3 episode 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Language Support in Manticore Search\nDESCRIPTION: This snippet shows how to enable basic support for most languages in Manticore Search using the charset_table configuration option. It also mentions the alias 'non_cjk' for 'non_cont'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncharset_table = non_cont\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncharset_table = non_cjk\n```\n\n----------------------------------------\n\nTITLE: Using SHOW META with Basic Search Query in Manticore Search\nDESCRIPTION: Example of using SHOW META after a basic search query to display metadata including total results, query time, and keyword statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_META.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, story_author FROM hn_small WHERE MATCH('one|two|three') and comment_ranking > 2 limit 5;\nshow meta;\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via TypeScript\nDESCRIPTION: Creates a forum table using TypeScript with async/await syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE forum(title text, price float)');\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Non-Continuous and Continuous Language Support in SQL\nDESCRIPTION: This SQL query creates a table 'products' with support for both non-continuous and continuous script languages using Manticore Search's predefined character sets.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) charset_table = 'non_cont' ngram_len = '1' ngram_chars = 'cont'\n```\n\n----------------------------------------\n\nTITLE: Query String in HTTP JSON\nDESCRIPTION: Shows how to use the query_string clause for full-text queries in MATCH() syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"query\":\n{\n  \"query_string\": \"Church NOTNEAR/3 street\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (Typescript)\nDESCRIPTION: Typescript code to create a table with a JSON field that has a secondary index in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, j json secondary_index=\\'1\\')');\n```\n\n----------------------------------------\n\nTITLE: Using CALL SNIPPETS for Text Highlighting in Manticore Search\nDESCRIPTION: Explains the CALL SNIPPETS SQL statement which builds a snippet from provided data and query using specified table settings. This function is an alternative to the HIGHLIGHT() function but can't access built-in document storage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_126\n\nLANGUAGE: sql\nCODE:\n```\nCALL SNIPPETS(data, table, query[, opt_value AS opt_name[, ...]])\n```\n\n----------------------------------------\n\nTITLE: Processing HTTP JSON Query Results in Manticore Search\nDESCRIPTION: Illustrates the structure of a JSON response from an HTTP query, including metadata and search hits.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\":10,\n  \"timed_out\": false,\n  \"hits\":\n  {\n    \"total\": 2,\n    \"hits\":\n    [\n      {\n        \"_id\": 1,\n        \"_score\": 1,\n        \"_source\": { \"gid\": 11 }\n      },\n      {\n        \"_id\": 2,\n        \"_score\": 1,\n        \"_source\": { \"gid\": 12 }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in C#\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using C#. The method requires creating a DeleteDocumentRequest object with the index name, cluster name, and document ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nDeleteDocumentRequest deleteRequest = new DeleteDocumentRequest(index: \"test\", cluster: \"cluster\", id: 1);\nindexApi.Delete(deleteRequest);\n\n```\n\n----------------------------------------\n\nTITLE: Patching MySQL 5.0.x for SphinxSE\nDESCRIPTION: Apply the SphinxSE patch to MySQL source code before compilation. This step is specific to MySQL 5.0.x versions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ patch -p1 < sphinx.5.0.yy.diff\n```\n\n----------------------------------------\n\nTITLE: Configuring TSV Source in Manticore Search\nDESCRIPTION: Example configuration for importing data from a TSV file source. Demonstrates setting up a TSV pipe command and declaring field types for name and genre_tags attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_CSV,TSV.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsource tsv_test\n{\n    type = tsvpipe\n    tsvpipe_command = cat /tmp/rock_bands.tsv\n    tsvpipe_field = name\n    tsvpipe_attr_multi = genre_tags\n}\n```\n\n----------------------------------------\n\nTITLE: Building Tokenizer Library for Manticore Search\nDESCRIPTION: Configures the tokenizer library build with all its component source files and dependencies. The tokenizer library handles text tokenization with various specialized implementations including UTF-8, bigram, and multiform tokenizers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/tokenizer/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library ( tokenizer tokenizer.cpp tokenizer_bigram.cpp tokenizer_multiform.cpp tokenizer_plugin.cpp\n\t\ttokenizer_utf8.cpp tokenizerbase.cpp tokenizerbase2.cpp exceptions_trie.cpp exceptions_trie.h\n\t\ttokenizerbase_impl.h tokenizerbase2_impl.h multiform_container.h token_filter.h tokenizer.h\n\t\ttok_internals.h )\ntarget_link_libraries ( tokenizer PRIVATE lextra lowercaser )\n```\n\n----------------------------------------\n\nTITLE: Configuring Korean Language Support in Manticore Search\nDESCRIPTION: This snippet demonstrates how to configure Korean language support in Manticore Search using ngram-based segmentation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nngram_chars=korean\nngram_chars=korean ngram_len=1\n```\n\n----------------------------------------\n\nTITLE: Providing UDF Initialization and Cleanup Functions in C for Manticoresearch\nDESCRIPTION: This C snippet supplements a UDF implementation by providing initialization (testfunc_init) and deinitialization (testfunc_deinit) functions, which Manticoresearch will invoke at appropriate times. The init function allocates and stores temporary state (an int set to 123) in the SPH_UDF_INIT structure's func_data, returning 0 to indicate success. The deinit function properly frees this state. Prerequisites: sphinxudf.h included, memory management facilities available. Expected in scenarios where per-query or per-function-instance state is required.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF.md#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint testfunc_init ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args,\n    char * error_message )\n{\n    // allocate and initialize a little bit of temporary storage\n    init->func_data = malloc ( sizeof(int) );\n    *(int*)init->func_data = 123;\n\n    // return a success code\n    return 0;\n}\n\nvoid testfunc_deinit ( SPH_UDF_INIT * init )\n{\n    // free up our temporary storage\n    free ( init->func_data );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW THREADS via HTTP API\nDESCRIPTION: Example of executing the SHOW THREADS command via HTTP API using a POST request to the /cli endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /cli -d \"SHOW THREADS\"\n```\n\n----------------------------------------\n\nTITLE: Using Token Filter Options with INSERT Statement in Manticore Search\nDESCRIPTION: Example of passing additional parameters to a token filter when inserting data into a real-time table. This demonstrates how to provide runtime options to the token filter during document insertion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Token_filter_plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO rt (id, title) VALUES (1, 'some text corp@space.io') OPTION token_filter_options='.io'\n```\n\n----------------------------------------\n\nTITLE: Computing Natural Logarithm with LN Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Calculates the natural logarithm (base e) of the numeric argument. Expects a positive numeric value; negative or zero arguments will cause errors. The result is a floating point value.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nLN(value)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (Java)\nDESCRIPTION: Java code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)\");\n```\n\n----------------------------------------\n\nTITLE: Python-asyncio Truncation Response\nDESCRIPTION: Example response from a successful Python-asyncio truncate operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n{u'error': u'', u'total': 0, u'warning': u''}\n```\n\n----------------------------------------\n\nTITLE: Stopping Manticore Search Synchronously\nDESCRIPTION: This command shows how to stop Manticore Search synchronously using the --stopwait option. It waits for the server to finish shutdown before returning.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --config /etc/manticoresearch/manticore.conf --stopwait\n```\n\n----------------------------------------\n\nTITLE: Setting Global Query Cache Size in Manticore Search (SQL)\nDESCRIPTION: This SQL command demonstrates how to dynamically change the query cache size limit using the SET GLOBAL statement. It sets the maximum bytes for query cache to 128 million bytes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Query_cache.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SET GLOBAL qcache_max_bytes=128000000;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (C#)\nDESCRIPTION: This C# code creates a table named 'products' with text and float columns, enabling keyword expansion using the Manticore Search C# client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) expand_keywords = '1'\", true);\n```\n\n----------------------------------------\n\nTITLE: Attaching Table - General Syntax in SQL\nDESCRIPTION: The ATTACH statement for converting a plain table to a real-time table or attaching one real-time table to another. It includes an optional WITH TRUNCATE clause for clearing the target table before attaching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Attaching_one_table_to_another.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nATTACH TABLE plain_or_rt_table TO TABLE rt_table [WITH TRUNCATE]\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Manticore S3 Storage Using Minio Client\nDESCRIPTION: This snippet shows how to use the Minio client to upload files to Manticore's write-only S3 storage. It copies a directory recursively to the S3 bucket with a unique issue-related folder name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/minio-binaries\n./mc cp -r issue-1234/ manticore/write-only/issue-1234\n```\n\n----------------------------------------\n\nTITLE: Selecting Ninja Generator in CMake\nDESCRIPTION: Command to explicitly select Ninja as the generator for CMake build system on Unix-like platforms as an alternative to the default Unix Makefiles.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncmake -GNinja ...\n```\n\n----------------------------------------\n\nTITLE: Using Negation Operators in Manticore Search\nDESCRIPTION: Demonstrates the negation operators (- and !) which enforce a rule for a word to not exist in matching documents. Queries with only negations require special server configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nhello -world\nhello !world\n```\n\n----------------------------------------\n\nTITLE: Executing RELOAD TABLE Command in SQL for Manticore Search\nDESCRIPTION: This SQL command allows for table rotation via SQL in Manticore Search. It can be used in three modes: checking for new table files, specifying a path for new files, or switching to a new path with the switchover option.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Rotating_a_table.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nRELOAD TABLE tbl [ FROM '/path/to/table_files' [ OPTION switchover=1 ] ];\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in C#\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using C# client in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_33\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"TRUNCATE TABLE products WITH RECONFIGURE\" ,true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in Java\nDESCRIPTION: Demonstrates creating a table with a multi64 field in Java using SQL through the utils API. This enables storing variable-length lists of 64-bit signed integers in the table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_93\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, values multi64))\");\n```\n\n----------------------------------------\n\nTITLE: Setting Table Path in Manticore Search Configuration\nDESCRIPTION: Specifies the path where the table will be stored or located in Manticore Search configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\npath = path/to/table\n```\n\n----------------------------------------\n\nTITLE: Executing URL-encoded SQL Query via HTTP GET in Manticore Search\nDESCRIPTION: Shows how to send a URL-encoded SQL query to Manticore Search using an HTTP GET request to the /sql endpoint. The response includes search results in JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGET /sql?query=select%20id%2Csubject%2Cauthor_id%20%20from%20forum%20where%20match%28%27%40subject%20php%20manticore%27%29%20group%20by%20author_id%20order%20by%20id%20desc%20limit%200%2C5\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 2,\n    \"total_relation\": \"eq\",\n    \"hits\": [\n      {\n        \"_id\": 2,\n        \"_score\": 2356,\n        \"_source\": {\n          \"subject\": \"php manticore\",\n          \"author_id\": 12\n        }\n      },\n      {\n        \"_id\": 1,\n        \"_score\": 2356,\n        \"_source\": {\n          \"subject\": \"php manticore\",\n          \"author_id\": 11\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Engine Type in Manticore\nDESCRIPTION: Sets the default attribute storage engine for creating RT mode tables. Can be either 'rowwise' or 'columnar'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nengine = columnar\n```\n\n----------------------------------------\n\nTITLE: Table Truncation Response in SQL\nDESCRIPTION: Example response from a successful SQL TRUNCATE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Field Selection in Manticore Search JOINs\nDESCRIPTION: When selecting fields from two tables in a JOIN, do not prefix fields from the left table, but do prefix fields from the right table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT field_name, right_table.field_name FROM ...\n```\n\n----------------------------------------\n\nTITLE: Escaping Backslash in MySQL Command Line for Manticore Search\nDESCRIPTION: Illustrates the process of using a backslash as a character in a Manticore Search query via MySQL command line. Four backslashes are required for proper escaping.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Escaping.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM your_index WHERE MATCH('\\\\\\\\ABC');\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via Configuration File\nDESCRIPTION: Creates a real-time table using configuration file with specified fields and attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n  stored_fields = title\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster Table with JSON API\nDESCRIPTION: Shows how to delete documents from a table within a replication cluster using the JSON API. The request requires specifying the cluster name, table name, and document ID to be deleted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /delete -d '\n    {\n      \"cluster\": \"cluster\",\n      \"table\": \"test\",\n      \"id\": 100\n    }'\n```\n\n----------------------------------------\n\nTITLE: Declaring Multi-Value Attributes in Manticore Search (INI)\nDESCRIPTION: This snippet demonstrates how to declare multi-value attributes (MVA) in Manticore Search. It shows different ways to fetch MVA data, including from a field, a query, or a ranged query. The syntax for each method is provided.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Processing_fetched_data.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsql_attr_multi = uint tag from field\nsql_attr_multi = uint tag from query; SELECT id, tag FROM tags\nsql_attr_multi = bigint tag from ranged-query; \\\n    SELECT id, tag FROM tags WHERE id>=$start AND id<=$end; \\\n    SELECT MIN(id), MAX(id) FROM tags\n```\n\n----------------------------------------\n\nTITLE: Global IDF Configuration in Manticore Search\nDESCRIPTION: Specifies the path to a global IDF (Inverse Document Frequency) file used for consistent ranking across multiple tables in a cluster. Enables cluster-wide keyword frequency statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_85\n\nLANGUAGE: ini\nCODE:\n```\nglobal_idf = /path/to/global.idf\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) global_idf = '/usr/local/manticore/var/global.idf'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) global_idf = '/usr/local/manticore/var/global.idf'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'global_idf' => '/usr/local/manticore/var/global.idf'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) global_idf = \\'/usr/local/manticore/var/global.idf\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) global_idf = \\'/usr/local/manticore/var/global.idf\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) global_idf = \\'/usr/local/manticore/var/global.idf\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) global_idf = '/usr/local/manticore/var/global.idf'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) global_idf = '/usr/local/manticore/var/global.idf'\", true);\n```\n\n----------------------------------------\n\nTITLE: Creating FEDERATED-compatible MySQL Table for Manticore Search\nDESCRIPTION: SQL command to create a FEDERATED engine table that connects to a Manticore Search instance. The table includes columns for id, year, rating, and a query column for passing Manticore queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/FEDERATED.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE t1\n(\n    id          INTEGER UNSIGNED NOT NULL,\n    year        INTEGER NOT NULL,\n    rating    \tFLOAT,\n    query       VARCHAR(1024) NOT NULL,\n    INDEX(query)\n) ENGINE=FEDERATED\nDEFAULT CHARSET=utf8\nCONNECTION='mysql://FEDERATED@127.0.0.1:9306/DB/movies';\n```\n\n----------------------------------------\n\nTITLE: Setting Disk Chunk Flush Search Timeout\nDESCRIPTION: Configuration for setting the timeout that prevents auto-flushing a RAM chunk if there are no searches in the table. This parameter helps control when data is persisted to disk.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\ndiskchunk_flush_search_timeout = 10s\n```\n\n----------------------------------------\n\nTITLE: Post-Index Query for Updating Counters in Manticore Search\nDESCRIPTION: This post-index query updates a counters table with the maximum indexed ID after successful indexing. It uses the $maxid macro to get the highest document ID fetched during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Execution_of_fetch_queries.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nsql_query_post_index = REPLACE INTO counters ( id, val ) \\\n    VALUES ( 'max_indexed_id', $maxid )\n```\n\n----------------------------------------\n\nTITLE: Listing Kafka Sources\nDESCRIPTION: Shows all configured Kafka sources in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SOURCES\n```\n\n----------------------------------------\n\nTITLE: Example of Enabling Buddy Plugin in Manticore Search\nDESCRIPTION: This example demonstrates how to enable the 'show' plugin using its fully qualified name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Enabling_and_disabling_buddy_plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nENABLE BUDDY PLUGIN manticoresoftware/buddy-plugin-show\n```\n\n----------------------------------------\n\nTITLE: Escaped Characters in Word Forms\nDESCRIPTION: Examples of escaping special characters in word forms dictionary entries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\na\\> > abc\n\\>b > bcd\nc\\=\\> => cde\n\\=\\>d => def\n\\=\\>a \\> f \\> => foo\n\\~g => bar\n```\n\n----------------------------------------\n\nTITLE: SphinxSE Query with Field Weights\nDESCRIPTION: Example of a SphinxSE search query that assigns different relevance weights to fields in the Manticore index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n... WHERE query='test;weights=1,2,3;';\n```\n\n----------------------------------------\n\nTITLE: Parsing Manticore Search Table Status Response in Go\nDESCRIPTION: This snippet shows the expected response structure when querying a table's status. It includes various statistics such as indexed documents, memory usage, and query performance metrics. The response is a JSON object with columns, data, error, total, and warning fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"columns\": \n\t[{\n\t\t\"Key\": {\"type\": \"string\"}\n\t},\n    {\n    \t\"Value\": {\"type\": \"string\"}\n    }],\n\t\"data\": \n\t[\n\t\t{\"Key\": \"table_type\", \"Value\": \"rt\"}\n\t    {\"Key\": \"indexed_documents\", \"Value\": \"3\"}\n\t    {\"Key\": \"indexed_bytes\", \"Value\": \"0\"}\n\t    {\"Key\": \"ram_bytes\", \"Value\": \"6678\"}\n\t    {\"Key\": \"disk_bytes\", \"Value\": \"611\"}\n\t    {\"Key\": \"ram_chunk\", \"Value\": \"990\"}\n\t    {\"Key\": \"ram_chunk_segments_count\", \"Value\": \"2\"}\n\t    {\"Key\": \"mem_limit\", \"Value\": \"134217728\"}\n\t    {\"Key\": \"ram_bytes_retired\", \"Value\": \"0\"}\n\t    {\"Key\": \"optimizing\", \"Value\": \"0\"}\n\t    {\"Key\": \"locked\", \"Value\": \"0\"}\n\t    {\"Key\": \"tid\", \"Value\": \"15\"}\n\t    {\"Key\": \"query_time_1min\", \"Value\": \"{\\\"queries\\\":1, \\\"avg_sec\\\":0.001, \\\"min_sec\\\":0.001, \\\"max_sec\\\":0.001, \\\"pct95_sec\\\":0.001, \\\"pct99_sec\\\":0.001}\"}\n\t    {\"Key\": \"query_time_5min\", \"Value\": \"{\\\"queries\\\":1, \\\"avg_sec\\\":0.001, \\\"min_sec\\\":0.001, \\\"max_sec\\\":0.001, \\\"pct95_sec\\\":0.001, \\\"pct99_sec\\\":0.001}\"}\n\t    {\"Key\": \"query_time_15min\", \"Value\": \"{\\\"queries\\\":1, \\\"avg_sec\\\":0.001, \\\"min_sec\\\":0.001, \\\"max_sec\\\":0.001, \\\"pct95_sec\\\":0.001, \\\"pct99_sec\\\":0.001}\"}\n\t    {\"Key\": \"query_time_total\", \"Value\": \"{\\\"queries\\\":1, \\\"avg_sec\\\":0.001, \\\"min_sec\\\":0.001, \\\"max_sec\\\":0.001, \\\"pct95_sec\\\":0.001, \\\"pct99_sec\\\":0.001}\"}\n\t    {\"Key\": \"found_rows_1min\", \"Value\": \"{\\\"queries\\\":1, \\\"avg\\\":3, \\\"min\\\":3, \\\"max\\\":3, \\\"pct95\\\":3, \\\"pct99\\\":3}\"}\n\t    {\"Key\": \"found_rows_5min\", \"Value\": \"{\\\"queries\\\":1, \\\"avg\\\":3, \\\"min\\\":3, \\\"max\\\":3, \\\"pct95\\\":3, \\\"pct99\\\":3}\"}\n\t    {\"Key\": \"found_rows_15min\", \"Value\": \"{\\\"queries\\\":1, \\\"avg\\\":3, \\\"min\\\":3, \\\"max\\\":3, \\\"pct95\\\":3, \\\"pct99\\\":3}\"}\n\t    {\"Key\": \"found_rows_total\", \"Value\": \"{\\\"queries\\\":1, \\\"avg\\\":3, \\\"min\\\":3, \\\"max\\\":3, \\\"pct95\\\":3, \\\"pct99\\\":3}\"}\n\t],\n\t\"error\": \"\",\n\t\"total\": 0,\n\t\"warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using Rust Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Rust client library's `sql` method to create a 'products' table with the `hitless_words` option set to 'all'. The `await` keyword indicates an asynchronous operation. The `Some(true)` parameter might influence result reporting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_97\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) hitless_words = 'all'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Boost Configuration\nDESCRIPTION: Sets up Boost library dependencies with specific version requirements and configuration options\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset ( Boost_USE_MULTITHREADED ON )\nset ( Boost_USE_STATIC_LIBS ON )\nif (CMAKE_CROSSCOMPILING AND CMAKE_SYSTEM_NAME STREQUAL Windows)\n\tset ( Boost_COMPILER vc142 )\nendif ()\nfind_package ( Boost 1.71.0 REQUIRED COMPONENTS context filesystem  )\ntarget_link_libraries ( lextra INTERFACE Boost::boost Boost::context )\n\ntarget_compile_definitions ( lextra INTERFACE BOOST_ALL_NO_LIB=1 )\n```\n\n----------------------------------------\n\nTITLE: Listing Materialized Views\nDESCRIPTION: Displays all configured materialized views in the system.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW MVS\n```\n\n----------------------------------------\n\nTITLE: Sample Highlighted Search Response - ManticoreSearch TypeScript\nDESCRIPTION: This code returns a sample response for the highlighted search query in TypeScript, showing the response shape with the highlighted content, document metadata, and scoring. Returns a single document with 'Text 1' highlighted in the 'content' field. There are no dependencies, and the highlighted text uses the <b> tag. Inputs for the query are not shown; the response assumes a document with the search terms is already indexed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 1</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Table Status with SQL in Manticore Search\nDESCRIPTION: Shows how to use SQL to retrieve detailed status information for a table named 'statistic' in Manticore Search. The query returns various metrics including index type, memory usage, document counts, and query performance statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Table_settings_and_status/SHOW_TABLE_STATUS.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SHOW TABLE statistic STATUS;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Search Implementation\nDESCRIPTION: JavaScript/Node.js implementation using async/await pattern for search with highlighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nres =  await searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\",\"title\"],\"number_of_fragments\":10}});\n```\n\n----------------------------------------\n\nTITLE: Configuring ODBC Data Source for Oracle in Manticore Search\nDESCRIPTION: This snippet shows how to set up an ODBC data source for connecting to an Oracle database. The format of the DSN string depends on the specific ODBC driver being used.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Database_connection.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nodbc_dsn = Driver={Oracle ODBC Driver};Dbq=myDBName;Uid=myUsername;Pwd=myPassword\n```\n\n----------------------------------------\n\nTITLE: Listing Available Manticore Buddy Plugins\nDESCRIPTION: The 'SHOW BUDDY PLUGINS' command displays all available Manticore Buddy plugins, including core and local ones. It requires Manticore Buddy to be installed. The output includes package name, plugin name, version, type, and additional information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Listing_plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW BUDDY PLUGINS;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+------------------------------------------------+-----------------+---------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Package                                        | Plugin          | Version | Type | Info                                                                                                                                                     |\n+------------------------------------------------+-----------------+---------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------+\n| manticoresoftware/buddy-plugin-empty-string    | empty-string    | 2.1.5   | core | Handles empty queries, which can occur when trimming comments or dealing with specific SQL protocol instructions in comments that are not supported      |\n| manticoresoftware/buddy-plugin-backup          | backup          | 2.1.5   | core | BACKUP sql statement                                                                                                                                     |\n| manticoresoftware/buddy-plugin-emulate-elastic | emulate-elastic | 2.1.5   | core | Emulates some Elastic queries and generates responses as if they were made by ES                                                                         |\n| manticoresoftware/buddy-plugin-insert          | insert          | 2.1.5   | core | Auto schema support. When an insert operation is performed and the table does not exist, it creates it with data types auto-detection                    |\n| manticoresoftware/buddy-plugin-alias           | alias           | 2.1.5   | core |                                                                                                                                                          |\n| manticoresoftware/buddy-plugin-select          | select          | 2.1.5   | core | Various SELECTs handlers needed for mysqldump and other software support, mostly aiming to work similarly to MySQL                                       |\n| manticoresoftware/buddy-plugin-show            | show            | 2.1.5   | core | Various \"show\" queries handlers, for example, `show queries`, `show fields`, `show full tables`, etc                                                     |\n| manticoresoftware/buddy-plugin-cli-table       | cli-table       | 2.1.5   | core | /cli endpoint based on /cli_json - outputs query result as a table                                                                                       |\n| manticoresoftware/buddy-plugin-plugin          | plugin          | 2.1.5   | core | Core logic for plugin support and helpers. Also handles `create buddy plugin`, `delete buddy plugin`, and `show buddy plugins`                           |\n| manticoresoftware/buddy-plugin-test            | test            | 2.1.5   | core | Test plugin, used exclusively for tests                                                                                                                  |\n| manticoresoftware/buddy-plugin-insert-mva      | insert-mva      | 2.1.5   | core | Manages the restoration of MVA fields with mysqldump                                                                                                     |\n| manticoresoftware/buddy-plugin-modify-table    | modify-table    | 2.1.5   | core | Assists in standardizing options in create and alter table statements to show option=1 for integers. Also manages the logic for creating sharded tables. |\n| manticoresoftware/buddy-plugin-knn             | knn             | 2.1.5   | core | Enables KNN by document id                                                                                                                               |\n| manticoresoftware/buddy-plugin-replace         | replace         | 2.1.5   | core | Enables partial replaces                                                                                                                                 |\n+------------------------------------------------+-----------------+---------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------+-----+\n```\n\n----------------------------------------\n\nTITLE: Binary Logarithm Calculation with LOG2 in ManticoreSearch SQL - SQL\nDESCRIPTION: Calculates the base-2 logarithm (binary logarithm) of the argument, returning a floating point result. Expects a positive numeric input; zero or negative values are invalid. Used primarily for binary scaling or data structure analysis.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nLOG2(value)\n```\n\n----------------------------------------\n\nTITLE: Controlling Disk Chunk Optimization in Manticore Search\nDESCRIPTION: Using the 'cutoff' option to manually control the number of optimized disk chunks during table optimization.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Compacting_a_table.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nOPTIMIZE TABLE rt OPTION cutoff=4;\n```\n\n----------------------------------------\n\nTITLE: Setting Hit List Read Buffer Size in Manticore Search (INI)\nDESCRIPTION: Specifies the per-keyword read buffer size for hit lists. Default is 256K, minimum 8K. Larger buffers may increase RAM use but decrease I/O time. Can be overridden per-table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_51\n\nLANGUAGE: ini\nCODE:\n```\nread_buffer_hits = 128K\n```\n\n----------------------------------------\n\nTITLE: Disabling Manticore's auto-start using systemd in Linux\nDESCRIPTION: Command to disable Manticore Search from starting automatically at boot time using systemd.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl disable manticore\n```\n\n----------------------------------------\n\nTITLE: Setting RT Table Flush Period\nDESCRIPTION: Configuration example demonstrating how to set the periodic flush interval for RT tables using rt_flush_period directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...    \n    rt_flush_period = 3600 # 1 hour\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Predicted Time Costs in INI Configuration\nDESCRIPTION: The `predicted_time_costs` configuration dictates costs for query time prediction models in nanoseconds. The default values can be adjusted to improve search query execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\npredicted_time_costs = doc=128, hit=96, skip=4096, match=128\n```\n\n----------------------------------------\n\nTITLE: Importing Table Using IMPORT TABLE Statement in SQL\nDESCRIPTION: This snippet demonstrates the syntax for importing a table using the IMPORT TABLE statement in Manticore Search. It specifies the table name and the path to the backup data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Importing_table.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nIMPORT TABLE table_name FROM 'path'\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Batch Size\nDESCRIPTION: Sets the batch size for processing table joins, affecting performance and memory usage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\njoin_batch_size = 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listen Backlog\nDESCRIPTION: Sets the length of TCP listen backlog for incoming connections, particularly important for Windows builds.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nlisten_backlog = 20\n```\n\n----------------------------------------\n\nTITLE: Example Document Query from Filebeat Data\nDESCRIPTION: SQL query example showing the structure and content of an indexed log document in Manticore, including all JSON fields populated by Filebeat.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Filebeat.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SELECT * FROM dpkg_log LIMIT 1\\G\n*************************** 1. row ***************************\nid: 7280000849080753116\n@timestamp: 2023-06-16T09:27:38.792Z\nmessage: 2023-04-12 02:06:08 status half-installed libhogweed5:amd64 3.5.1+really3.5.1-2\ninput: {\"type\":\"filestream\"}\necs: {\"version\":\"1.6.0\"}\nhost: {\"name\":\"logstash-db848f65f-lnlf9\"}\nagent: {\"ephemeral_id\":\"587c2ebc-e7e2-4e27-b772-19c611115996\",\"id\":\"2e3d985b-3610-4b8b-aa3b-2e45804edd2c\",\"name\":\"logstash-db848f65f-lnlf9\",\"type\":\"filebeat\",\"version\":\"7.10.0\",\"hostname\":\"logstash-db848f65f-lnlf9\"}\nlog: {\"offset\":80,\"file\":{\"path\":\"/var/log/dpkg.log\"}}\n```\n\n----------------------------------------\n\nTITLE: Example of Using Search Options in JSON\nDESCRIPTION: An HTTP JSON request example that demonstrates using multiple options including ranker, max_matches, field_weights, and agent_query_timeout. Shows the JSON structure for specifying the same options as in the SQL example.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPOST /search\n{\n    \"table\" : \"test\",\n    \"query\": {\n      \"match\": {\n        \"title\": \"hello\"\n      },\n      \"match\": {\n        \"body\": \"world\"     \n      }\n    },\n    \"options\":   \n    {\n        \"ranker\": \"bm25\",\n        \"max_matches\": 3000,\n        \"field_weights\": {\n            \"title\": 10,\n            \"body\": 3\n        },\n        \"agent_query_timeout\": 10000\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for Preopening Tables\nDESCRIPTION: This snippet sets whether tables should be preopened during startup, which affects performance and resource usage. Recommended to preopen tables by default.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\npreopen_tables = 1\n```\n\n----------------------------------------\n\nTITLE: C# Truncation Response\nDESCRIPTION: Example response from a successful C# truncate operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_16\n\nLANGUAGE: clike\nCODE:\n```\n{total=0, error=\"\", warning=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in Java\nDESCRIPTION: This Java code creates a table 'products' with blended characters configuration using the Manticore Search Java client, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) blend_chars = '+, &, U+23, @->_'\", true);\n```\n\n----------------------------------------\n\nTITLE: Aggregation Response in TypeScript for Manticore Search\nDESCRIPTION: This snippet demonstrates the structure of a search response in TypeScript after performing an aggregation query. It includes aggregation results for 'cat_id' and hit information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"aggregations\":\n\t{\n\t\t\"cat_id\":\n\t\t{\n\t\t\t\"buckets\":\n\t\t\t[{\n\t\t\t\t\"key\":1,\n\t\t\t\t\"doc_count\":1\n\t\t\t}]\n\t\t}\n\t},\n\t\"hits\":\n\t{\n\t\t\"total\":5,\n\t\t\"hits\":[]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Infix Fields\nDESCRIPTION: Setting to specify which full-text fields should have infix indexing enabled in dict=crc mode. By default, all fields are indexed in infix mode.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ninfix_fields = field1[, field2, ...]\n```\n\n----------------------------------------\n\nTITLE: Configuring RT Table Flush Period in Manticore Search (INI)\nDESCRIPTION: Sets the check period for flushing RT tables' RAM chunks. Default is 10 hours. Helps manage disk use and crash recovery time for actively updated RT tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_54\n\nLANGUAGE: ini\nCODE:\n```\nrt_flush_period = 3600 # 1 hour\n```\n\n----------------------------------------\n\nTITLE: Using Expressions with JOINs in Manticore Search\nDESCRIPTION: When using expressions that combine fields from both joined tables, alias the result of the expression for clarity and reference.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Joining.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, (nums2.n + 3) AS x, x * n FROM nums LEFT JOIN nums2 ON nums2.id = nums.num2_id\n```\n\n----------------------------------------\n\nTITLE: Executing RELOAD TABLES Command in SQL for Manticore Search\nDESCRIPTION: This SQL command triggers a rotation of all tables in Manticore Search, similar to a HUP system signal. It actively searches for tables needing rotation and can re-read the configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Rotating_a_table.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nRELOAD TABLES;\n```\n\n----------------------------------------\n\nTITLE: Response Format for SQL Percolate Query Document Matching\nDESCRIPTION: Shows the response format when matching documents to percolate queries using SQL. The documents column indicates which document slot matched each rule.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_51\n\nLANGUAGE: SQL\nCODE:\n```\n+---------------------+-----------+--------------+------+---------------------------+\n| id                  | documents | query        | tags | filters                   |\n+---------------------+-----------+--------------+------+---------------------------+\n| 1657852401006149635 | 1         | @title shoes |      | color IN ('blue, 'green') |\n| 1657852401006149637 | 2         | @title bag   |      |                           |\n+---------------------+-----------+--------------+------+---------------------------+\n```\n\n----------------------------------------\n\nTITLE: Example of FLUSH TABLE command execution in SQL\nDESCRIPTION: This snippet demonstrates the execution of the FLUSH TABLE command on a real-time table named 'rt'. The response shows a successful execution with no rows affected, which is expected as this command doesn't modify data but ensures its persistence on disk.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_RAM_chunk_to_disk.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nFLUSH TABLE rt;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nQuery OK, 0 rows affected (0.05 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (Python-asyncio)\nDESCRIPTION: Asynchronous Python code to create a table with a JSON field that has a secondary index in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, j json secondary_index='1')')\n```\n\n----------------------------------------\n\nTITLE: Declaring File-Based Fields in Manticore Search (INI)\nDESCRIPTION: This snippet shows how to declare a file-based field in Manticore Search. The indexer will interpret the field contents as a file name and process the referred file. Files larger than max_file_field_buffer are skipped, and any errors during file loading are reported as warnings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Processing_fetched_data.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nsql_file_field = field_name\n```\n\n----------------------------------------\n\nTITLE: Comment Usage in Manticore Search Configuration\nDESCRIPTION: Examples of using comments in Manticore Search configuration files. Shows how to use # for comments, escape # character with backslash, and handle # in tokenization settings using UTF-8 code U+23.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Comments.md#2025-04-22_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n# This is a full line comment\n\nindex myindex { # This is an inline comment\n    path = /path/to/index\n}\n\nsource mysql {\n    sql_host = localhost\\#1  # Using escaped # in configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Highlighted Search Query - ManticoreSearch Go\nDESCRIPTION: This Go snippet sets up and sends a search request with match and highlight options enabled using the Go client for ManticoreSearch. It constructs a match clause to search for 'Text 1' or 'Text 9' in any field and adds highlighting. The main dependencies are the manticoreclient Go SDK, a context, and initialized search API client. The result object will contain highlighted fields in the output if a match is found.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1|Text 9\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Cluster Status in PHP\nDESCRIPTION: This PHP code snippet uses the Manticore Search client to retrieve the status of the replication cluster, including cluster name, state, and node information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$params = [\n    'body' => []\n];\n$response = $client->nodes()->status($params);         \n```\n\n----------------------------------------\n\nTITLE: Advanced Word Forms with Comments and Post-morphology\nDESCRIPTION: Advanced word forms configuration showing comments, alternative syntax, and post-morphology processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wordforms.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\ncore 2 duo > c2d\ne6600 > c2d\ncore 2duo => c2d # Some people write '2duo' together...\n~run > walk # Along with stem_en morphology enabled replaces 'run', 'running', 'runs' (and any other words that stem to just 'run') to 'walk'\n```\n\n----------------------------------------\n\nTITLE: Sorting by Aggregation in SQL with Manticore Search\nDESCRIPTION: These SQL queries show how to sort groups by the count of elements and by an average value. The first query sorts by count(*) descending, while the second sorts by average rental rate descending.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT release_year, count(*) FROM films GROUP BY release_year ORDER BY count(*) desc LIMIT 5;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT release_year, AVG(rental_rate) avg FROM films GROUP BY release_year ORDER BY avg desc LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Reindexing with Selective Attribute Preservation in Manticore\nDESCRIPTION: Shows how to reindex a table while preserving only specific attribute values from the existing table. This allows for more fine-grained control over attribute reuse.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer mytable --keep-attrs=/path/to/table/files --keep-attrs-names=update,state\n```\n\n----------------------------------------\n\nTITLE: Manticore Table Schema SQL\nDESCRIPTION: SQL description showing the schema of the created table in Manticore after processing the dpkg.log data through Logstash.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Logstash.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DESCRIBE dpkg_log;\n+------------------+--------+---------------------+\n| Field            | Type   | Properties          |\n+------------------+--------+---------------------+\n| id               | bigint |                     |\n| message          | text   | indexed stored      |\n| @version         | text   | indexed stored      |\n| @timestamp       | text   | indexed stored      |\n| path             | text   | indexed stored      |\n| host             | text   | indexed stored      |\n+------------------+--------+---------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with String Field that is Both Attribute and Indexed in JavaScript\nDESCRIPTION: Uses the JavaScript API to create a table with a 'title' field that is both a string attribute and indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products ( title string attribute indexed )');\n```\n\n----------------------------------------\n\nTITLE: Defining Main SQL Query for Manticore Search Indexing\nDESCRIPTION: This snippet references the sql_query configuration option, which specifies the main query used to fetch data for indexing in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_168/text1.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsql_query\n```\n\n----------------------------------------\n\nTITLE: Configuring Killlist Target for Plain Tables in Manticore Search\nDESCRIPTION: This configuration snippet shows how to set up a killlist_target in a plain table's settings. It specifies which tables the kill-list should be applied to.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Killlist_in_plain_tables.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  killlist_target = main:kl\n\n  path = products\n  source = src_base\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with Python-asyncio in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause through the Python asyncio client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('DROP TABLE IF EXISTS products')\n```\n\n----------------------------------------\n\nTITLE: Verifying Debug Symbols for Manticore Search\nDESCRIPTION: Commands for checking if debug symbols are properly installed for Manticore Search. This helps ensure that crash reports contain meaningful function and variable names for analysis.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfile /usr/bin/searchd\n```\n\nLANGUAGE: bash\nCODE:\n```\nls -la /usr/lib/debug/.build-id/2c/582e9f564ea1fbeb0c68406c271ba27034a6d3*\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Docker with Custom Startup Flags\nDESCRIPTION: Docker command to start Manticore with custom startup flags, including the --nodetach flag.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore --rm manticoresearch/manticore:latest --replay-flags=ignore-trx-errors --nodetach\n```\n\n----------------------------------------\n\nTITLE: Using LAST_INSERT_ID() to retrieve IDs of recently inserted documents in Manticore SQL\nDESCRIPTION: LAST_INSERT_ID() returns the IDs of documents that were inserted or replaced by the last statement in the current session. The same information can also be accessed through the @@session.last_insert_id variable.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Other_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select @@session.last_insert_id;\n+--------------------------+\n| @@session.last_insert_id |\n+--------------------------+\n| 11,32                    |\n+--------------------------+\n1 rows in set\n\nmysql> select LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 25,26,29         |\n+------------------+\n1 rows in set   \n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query via HTTP POST in Manticore Search\nDESCRIPTION: Shows how to send an SQL query to Manticore Search using an HTTP POST request to the /sql endpoint. The response includes search results in JSON format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST /sql\nselect id,subject,author_id  from forum where match('@subject php manticore') group by author_id order by id desc limit 0,5\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 2,\n    \"total_relation\": \"eq\",\n    \"hits\": [\n      {\n        \"_id\": 2,\n        \"_score\": 2356,\n        \"_source\": {\n          \"subject\": \"php manticore\",\n          \"author_id\": 12\n        }\n      },\n      {\n        \"_id\": 1,\n        \"_score\": 2356,\n        \"_source\": {\n          \"subject\": \"php manticore\",\n          \"author_id\": 11\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Secondary Index Statistics in Manticore Search 5.0\nDESCRIPTION: SQL command to show meta information including secondary index statistics in Manticore Search 5.0.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW META\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Highlighted Search Response - ManticoreSearch JSON\nDESCRIPTION: This block provides a sample of the HTTP response for the above JSON search request, showing a matched document and displaying highlight snippets in both the 'title' and 'content' fields. The output is a structured JSON payload returned by the ManticoreSearch server. No client code dependencies are involved as this is the formatted server response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 1,\n    \"hits\": [\n      {\n        \"_id\": 1,\n        \"_score\": 2788,\n        \"_source\": {\n          \"title\": \"Books one\",\n          \"content\": \"They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. \"\n        },\n        \"highlight\": {\n          \"title\": [\n            \"Books <b>one</b>\"\n          ],\n          \"content\": [\n            \"They followed Bander. The <b>robots</b> remained at a polite distance, \",\n            \" three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander\",\n            \" gestured the other <b>robots</b> away and entered itself. The\"\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manticore Docker Compose Configuration\nDESCRIPTION: Docker Compose YAML configuration for running Manticore Search with proper resource limits and volume mounting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\n\nservices:\n  manticore:\n    container_name: manticore\n    image: manticoresearch/manticore\n    restart: always\n    ports:\n      - 127.0.0.1:9306:9306\n      - 127.0.0.1:9308:9308\n    ulimits:\n      nproc: 65535\n      nofile:\n         soft: 65535\n         hard: 65535\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - ./data:/var/lib/manticore\n#      - ./manticore.conf:/etc/manticoresearch/manticore.conf # uncomment if you use a custom config\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Defined Function with SQL\nDESCRIPTION: This snippet demonstrates how to install a user-defined function (UDF) using the CREATE FUNCTION SQL statement. The statement registers a function from a specified shared library file (SONAME) with the database, making it available for subsequent queries. Requires that the shared library is present in the trusted plugin directory set by plugin_dir and that the specified return type matches the UDF's implementation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF/Creating_a_function.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION udf_name\n    RETURNS {INT | INTEGER | BIGINT | FLOAT | STRING}\n    SONAME 'udf_lib_file'\n```\n\n----------------------------------------\n\nTITLE: Viewing Manticore logs using journalctl in Linux\nDESCRIPTION: Command to view Manticore Search startup logs using journalctl, which is part of systemd. This works if systemd logging is enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo journalctl -u manticore\n```\n\n----------------------------------------\n\nTITLE: Basic Query Log Configuration in Manticore\nDESCRIPTION: Basic configuration for enabling query logging in searchd with sphinxql format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Query_logging.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n    query_log = /var/log/query.log\n    query_log_format = sphinxql # default\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Query String Search in Java for Manticore Search\nDESCRIPTION: Illustrates how to execute a query_string search using Java with Manticore Search. It searches for 'find joe fast' within 2 words in the 'comment_text' field of the 'hn_small' table and returns the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nquery = new HashMap<String,Object>();\nquery.put(\"query_string\", \"@comment_text \\\"find joe fast \\\"/2\");\nsearchRequest = new SearchRequest();\nsearchRequest.setIndex(\"hn_small\");\nsearchRequest.setQuery(query);\nsearchRequest.addSourceItem(\"story_author\");\nsearchRequest.addSourceItem(\"comment_author\");\nsearchRequest.limit(1);\nsearchResponse = searchApi.search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Listing Available Locales for Collation Configuration in Bash\nDESCRIPTION: Example of using the 'locale -a' command to list all available locales on a system for configuring collation_libc_locale in Manticore Search. The output shows various locale options including different language variants and UTF-8 encodings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Collations.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ locale -a\nC\nen_AG\nen_AU.utf8\nen_BW.utf8\nen_CA.utf8\nen_DK.utf8\nen_GB.utf8\nen_HK.utf8\nen_IE.utf8\nen_IN\nen_NG\nen_NZ.utf8\nen_PH.utf8\nen_SG.utf8\nen_US.utf8\nen_ZA.utf8\nen_ZW.utf8\nes_ES\nfr_FR\nPOSIX\nru_RU.utf8\nru_UA.utf8\n```\n\n----------------------------------------\n\nTITLE: Running Memcheck with Docker for Manticore Search\nDESCRIPTION: Quick start guide for running memcheck using Docker. This snippet shows how to start the Docker container and run the memcheck script inside it.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /manticore/source/dir\nbash memdocker.sh\n# continue in the started docker shell\nbash memcheck.sh\n```\n\n----------------------------------------\n\nTITLE: XML Stream Format Example for Manticore Search Indexing\nDESCRIPTION: This XML example demonstrates the structure of an xmlpipe2 stream, including schema declaration, document entries, and a kill list. It shows how to define fields, attributes, and document content in the XML format expected by Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_XML_streams.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<sphinx:docset>\n\n<sphinx:schema>\n<sphinx:field name=\"subject\"/>\n<sphinx:field name=\"content\"/>\n<sphinx:attr name=\"published\" type=\"timestamp\"/>\n<sphinx:attr name=\"author_id\" type=\"int\" bits=\"16\" default=\"1\"/>\n</sphinx:schema>\n\n<sphinx:document id=\"1234\">\n<content>this is the main content <![CDATA[and this <cdata> entry\nmust be handled properly by xml parser lib]]></content>\n<published>1012325463</published>\n<subject>note how field/attr tags can be\nin <b> class=\"red\">randomized</b> order</subject>\n<misc>some undeclared element</misc>\n</sphinx:document>\n\n<sphinx:document id=\"1235\">\n<subject>another subject</subject>\n<content>here comes another document, and i am given to understand,\nthat in-document field order must not matter, sir</content>\n<published>1012325467</published>\n</sphinx:document>\n\n<!-- ... even more sphinx:document entries here ... -->\n\n<sphinx:killlist>\n<id>1234</id>\n<id>4567</id>\n</sphinx:killlist>\n\n</sphinx:docset>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Filter Count\nDESCRIPTION: Sets the maximum number of filters allowed per query for internal sanity checks. Default is 256.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nmax_filters = 1024\n```\n\n----------------------------------------\n\nTITLE: Setting Expansion Limit for Wildcard Searches\nDESCRIPTION: Limits the number of expanded keywords for a single wildcard search to prevent performance issues with broad matches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nexpansion_limit = 16\n```\n\n----------------------------------------\n\nTITLE: Filebeat Configuration for Version 8.11+ with Compression Disabled\nDESCRIPTION: Extended Filebeat configuration for versions 8.11 and above, including the required compression_level setting to ensure compatibility with Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Filebeat.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfilebeat.inputs:\n- type: filestream\n  id: example\n  paths:\n\t- /var/log/dpkg.log\n\noutput.elasticsearch:\n  hosts: [\"http://localhost:9308\"]\n  index:  \"dpkg_log\"\n  allow_older_versions: true\n  compression_level: 0\n\nsetup.ilm:\n  enabled: false\n\nsetup.template:\n  name: \"dpkg_log\"\n  pattern: \"dpkg_log\"\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on Ubuntu/Debian\nDESCRIPTION: APT repository setup and package installation commands for Debian-based systems.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.manticoresearch.com/manticore-repo.noarch.deb\nsudo dpkg -i manticore-repo.noarch.deb\nsudo apt update\nsudo apt install manticore manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Setting Query Log Format\nDESCRIPTION: Defines the log format for queries in Manticore. Options are 'plain' or 'sphinxql', with the latter for SQL statements. This setting helps in different logging needs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\nquery_log_format = sphinxql\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in SQL\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option that allows applying new tokenization, morphology, and schema settings in one atomic operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE products with reconfigure;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in Java\nDESCRIPTION: Demonstrates table creation with bigram indexing using the Java client. It executes an SQL command to set up the table with specified bigram configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'both_freq'\", true);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (C#)\nDESCRIPTION: C# code to create a table with a JSON field that has a secondary index in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_26\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, j json secondary_index='1')\");\n```\n\n----------------------------------------\n\nTITLE: Promote to 32-bit Unsigned Integer in SQL\nDESCRIPTION: The UINT() function promotes its argument to a 32-bit unsigned integer type.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Type_casting_functions.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nUINT()\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Log Flush Mode\nDESCRIPTION: Controls how frequently binary log transactions are flushed and synced to disk. Supports three modes (0,1,2) balancing between performance and data safety.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nbinlog_flush = 1 # ultimate safety, low speed\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Table with Mirrored Shards in Manticore Search\nDESCRIPTION: Advanced configuration of a distributed table with redundancy where each shard exists on two servers. Includes support for load balancing strategies like random (default), roundrobin, noerrors, and nodeads for latency-weighted distribution of queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ntable mydist {\n          type  = distributed\n          agent = box1:9312|box5:9312:shard1\n          agent = box2:9312:|box6:9312:shard2\n          agent = box3:9312:|box7:9312:shard3\n          agent = box4:9312:|box8:9312:shard4\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UNIX Socket for MySQL Connection in Manticore Search\nDESCRIPTION: This snippet shows how to set the UNIX socket path for connecting to a local MySQL database server. The actual usage of this setting depends on the sql_host configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Database_connection.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsql_sock = /var/lib/mysql/mysql.sock\n```\n\n----------------------------------------\n\nTITLE: Flushing Log Files with SQL Command - SQL\nDESCRIPTION: This SQL snippet demonstrates the FLUSH LOGS command executed from a MySQL-compatible client, which instructs Manticore Search to close and reopen its log files for query and server events. The command is non-blocking and suitable for scheduled or manual log rotation operations, functioning similarly to sending a USR1 signal. No parameters are required, and the query does not return any data rows.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Rotating_query_and_server_logs.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> FLUSH LOGS;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: C# Search Implementation\nDESCRIPTION: C# implementation using strongly-typed objects for search request and highlighting configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_92\n\nLANGUAGE: clike\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"one|robots\");\nvar highlight = new Highlight();\nhighlight.Fieldnames = new List<string> {\"content\", \"title\"};\nhighlight.NumberOfFragments = 10;\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Setting Disk Chunk Flush Write Timeout\nDESCRIPTION: Configuration for setting the timeout for auto-flushing a RAM chunk if there are no writes to it. This parameter helps ensure data durability by controlling when data is persisted to disk.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\ndiskchunk_flush_write_timeout = 60s\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows Authentication for MS SQL in Manticore Search\nDESCRIPTION: This setting enables the use of the currently logged-in Windows account credentials for authentication when connecting to MS SQL Server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Database_connection.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nmssql_winauth = 1\n```\n\n----------------------------------------\n\nTITLE: Basic Indexer Commands with Rotation\nDESCRIPTION: Example commands showing how to use indexer with rotation and checking options for the mytable index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --rotate --nohup mytable\nsudo -u manticore indextool --rotate --check mytable\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers with RAND in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns a pseudo-random float between 0 and 1, optionally seeded by a constant or attribute integer. The output is deterministic when a seed is supplied, but can yield repeated sequences across distributed or sharded tables. Seed usage can lead to multiple identical random values in distributed environments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nRAND([seed])\n```\n\n----------------------------------------\n\nTITLE: Basic Ranged Query Configuration in Manticore\nDESCRIPTION: Configuration example showing the three essential directives for ranged queries: sql_query_range to define boundaries, sql_range_step to set the chunk size, and sql_query with $start and $end macros.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Ranged_queries.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsql_query_range = SELECT MIN(id),MAX(id) FROM documents\nsql_range_step = 1000\nsql_query = SELECT * FROM documents WHERE id>=$start AND id<=$end\n```\n\n----------------------------------------\n\nTITLE: Setting Agent Query Timeout in Manticore Search INI\nDESCRIPTION: Illustrates how to configure the maximum time to wait for a remote agent to complete a query using the agent_query_timeout directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nagent_query_timeout = 10000 # our query can be long, allow up to 10 sec\n```\n\n----------------------------------------\n\nTITLE: Configuring ManticoreSearch Development Benchmarks\nDESCRIPTION: Sets up optional development benchmarks compilation. Adds a subdirectory for benchmarks if WITH_BENCHES is enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset ( WITH_BENCHES OFF CACHE BOOL \"Build development benches\" )\nif (WITH_BENCHES)\n\tadd_subdirectory ( gbenches )\n\tadd_feature_info ( benches WITH_BENCHES \"development benchmarks\" )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Java Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using Java. The response includes the index name, document ID, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nclass DeleteResponse {\n    index: test\n    _id: 1\n    result: deleted\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Options in Manticore Search INI\nDESCRIPTION: Shows how to specify options for individual agents in the configuration, including high availability strategy, connection type, and retry count.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nagent = address1:table-list[[ha_strategy=value, conn=value, blackhole=value]]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Table Lock State in Manticore Search (SQL)\nDESCRIPTION: This command shows the lock state of a specific table. The 'locked' column displays the number of active locks, with zero indicating an unfrozen table and non-zero values reflecting the number of locks.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Freezing_a_table.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE `foo` STATUS LIKE 'locked';\n```\n\n----------------------------------------\n\nTITLE: Table Truncation via HTTP API\nDESCRIPTION: Example of truncating a table using HTTP API in Manticore Search, sending the SQL command through a POST request.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /cli -d \"TRUNCATE TABLE products\"\n```\n\n----------------------------------------\n\nTITLE: Running Range of Tests\nDESCRIPTION: Command to run a specific range of tests using CTest with start, end, and stride parameters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/TESTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd build\n$ ctest -C Debug -I 1,10,1\n```\n\n----------------------------------------\n\nTITLE: Querying Document Details in Manticore Search 5.0\nDESCRIPTION: SQL-like query to extract all words and hits belonging to a specific document using the indextool utility.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nindextool --docextract\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using PHP in Manticore Search\nDESCRIPTION: This PHP code snippet deletes the replication cluster named 'click_query' using the Manticore Search PHP client. It uses the cluster()->delete() method to remove the cluster from all nodes while keeping the tables intact as local non-replicated tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n    'cluster' => 'click_query',\n    'body' => []\n];\n$response = $client->cluster()->delete($params);\n```\n\n----------------------------------------\n\nTITLE: Configuring Japanese Language Support in Manticore Search\nDESCRIPTION: This snippet shows the configuration for Japanese language support in Manticore Search using ngram-based segmentation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nngram_chars=japanese\nngram_chars=japanese ngram_len=1\n```\n\n----------------------------------------\n\nTITLE: Syntax for index_token_filter in Manticore INI\nDESCRIPTION: Shows the syntax for the `index_token_filter` directive in a Manticore configuration file. This option specifies a plugin for custom token filtering during indexing, allowing modification of tokens before they are added to the index. The format is `library:plugin_name:settings`.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_110\n\nLANGUAGE: ini\nCODE:\n```\nindex_token_filter = my_lib.so:custom_blend:chars=@#&\n```\n\n----------------------------------------\n\nTITLE: Enabling MySQL Compression in Manticore Search Configuration\nDESCRIPTION: This configuration enables compression for MySQL connections. It sets the mysql_connect_flags to 32, which corresponds to the CLIENT_COMPRESS flag in MySQL.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Database_connection.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmysql_connect_flags = 32 # enable compression\n```\n\n----------------------------------------\n\nTITLE: Checking Manticore's auto-start status using systemd in Linux\nDESCRIPTION: Command to check if Manticore Search is set to start automatically at boot time using systemd.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl is-enabled manticore\n```\n\n----------------------------------------\n\nTITLE: Creating System Plugins in Manticore Search (SQL)\nDESCRIPTION: Demonstrates the basic SQL command for creating a system plugin in Manticore Search. You must provide the plugin name, specify its type (e.g., 'ranker', 'index_token_filter', or 'query_token_filter'), and assign the shared library via the SONAME parameter. This command loads the library and enables the plugin if it is not already loaded. Requires appropriate permissions and that the referenced library is present in the plugin directory. Successfully executes without affecting rows, only loading the plugin for immediate or future use.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Creating_a_plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLUGIN plugin_name TYPE 'plugin_type' SONAME 'plugin_library'\n```\n\n----------------------------------------\n\nTITLE: Starting Manticore Search via HomeBrew\nDESCRIPTION: Command to start the Manticore Search service using HomeBrew service manager on MacOS.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/MacOS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start manticoresearch\n```\n\n----------------------------------------\n\nTITLE: Starting and stopping Manticore using service commands in Linux\nDESCRIPTION: Commands to start and stop Manticore Search using the service command. This is an alternative method for systems that use SysV init.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo service manticore start\nsudo service manticore stop\n```\n\n----------------------------------------\n\nTITLE: Using Exact Form Modifier in Manticore Search\nDESCRIPTION: Demonstrates the exact form modifier which requires matches to contain the exact form of the term rather than stemmed/lemmatized variations. Requires index_exact_words option to be enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nraining =cats and =dogs\n=\"exact phrase\"\n```\n\n----------------------------------------\n\nTITLE: PHP Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using PHP. The response includes the index name, document ID, found status, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nArray(\n    [_index] => test\n    [_id] => 100\n    [found] => true\n    [result] => deleted\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Parameters\nDESCRIPTION: Example of setting Galera cluster parameters using SET statement in both SQL and JSON formats.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET CLUSTER click_query GLOBAL 'pc.bootstrap' = 1\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nSET CLUSTER click_query GLOBAL 'pc.bootstrap' = 1\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bigram Frequent Words in Manticore Config File\nDESCRIPTION: Shows how to configure bigram indexing with frequent words in the Manticore Search configuration file. It sets the bigram_index mode to 'first_freq' and defines frequent words for a table named 'products'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_81\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  bigram_freq_words = the, a, you, i\n  bigram_index = first_freq\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SphinxQL Timeout Duration\nDESCRIPTION: Defines maximum wait time between SQL interface requests. Default is 15 minutes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_63\n\nLANGUAGE: ini\nCODE:\n```\nsphinxql_timeout = 15m\n```\n\n----------------------------------------\n\nTITLE: Setting Lemmatizer Base Path in Manticore Search Configuration (INI)\nDESCRIPTION: Specifies the base path for lemmatizer dictionaries. The default path is '/usr/share/manticore'. Lemmatizer dictionaries are required for different languages and can be downloaded from the Manticore website.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Common.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nlemmatizer_base = /usr/share/manticore/\n```\n\n----------------------------------------\n\nTITLE: Suspending Materialized View\nDESCRIPTION: Alters a materialized view to suspend its operation, stopping data consumption from Kafka.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nALTER MATERIALIZED VIEW view_table suspended=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Location in Manticore Search\nDESCRIPTION: Specifies the log file path for searchd runtime events. Can be set to a file path or 'syslog' to use system logging.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nlog = /var/log/searchd.log\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Time in SQL\nDESCRIPTION: This SQL snippet demonstrates how to set a maximum query time to ensure queries do not exceed a specific duration. It is used to optimize query performance and avoid long-running queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nSELECT … OPTION max_query_time\n```\n\n----------------------------------------\n\nTITLE: C# Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example response from a successful C# truncate with RECONFIGURE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_34\n\nLANGUAGE: clike\nCODE:\n```\n{total=0, error=\"\", warning=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Rust Search Response with Highlighted Results\nDESCRIPTION: Shows the structure of a search response in Rust including highlighted matches. The response contains document metadata along with highlighted fragments of text where search terms were found.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 3\n        maxScore: null\n        hits: [{_id=3, _score=1597, _source={title=Book three, content=Trevize whispered, \"It gets infantile pleasure out of display. I`d love to knock it down.\"}, highlight={title=[Book three], content=[, \"It <b>gets</b> infantile pleasure ,  to knock it <b>down</b>.\"]}}, {_id=4, _score=1563, _source={title=Book four, content=Don`t try to compete in childishness, said Bliss.}, highlight={title=[Book four], content=[Don`t <b>try</b> to compete in childishness, <b>said</b> Bliss.]}}, {_id=5, _score=1514, _source={title=Books two, content=A door opened before them, revealing a small room. Bander said, \"Come, half-humans, I want to show you how we live.\"}, highlight={title=[Books two], content=[ a small room. Bander <b>said</b>, \"Come, half-humans, I]}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling In-Place Table Inversion in Manticore Search\nDESCRIPTION: Enables in-place table inversion to reduce disk footprint during indexing. Uses approximately 2 times less disk space while slightly reducing indexing performance to 90-95% of the original speed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_58\n\nLANGUAGE: ini\nCODE:\n```\ninplace_enable = {0|1}\n```\n\n----------------------------------------\n\nTITLE: Starting Manticore Search Manually with searchd Command\nDESCRIPTION: This snippet shows the basic syntax for starting Manticore Search manually using the searchd command. It allows for optional command-line arguments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsearchd [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic JSON Number Conversion in Manticore Search (INI)\nDESCRIPTION: Determines whether to automatically detect and convert JSON strings that represent numbers into numeric attributes. When set to 1, values such as \"1234\" will be indexed as numbers instead of strings. This applies to JSON attributes from all data sources.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Common.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\njson_autoconv_numbers = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring attr_update_reserve in Configuration File\nDESCRIPTION: Demonstrates how to set the attr_update_reserve option in a configuration file for a real-time table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  attr_update_reserve = 1M\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Buddy Plugin in Manticore Search\nDESCRIPTION: This SQL command deactivates an active Buddy plugin, preventing it from processing further requests. It requires the fully qualified package name of the plugin.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Enabling_and_disabling_buddy_plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDISABLE BUDDY PLUGIN <username/package name on https://packagist.org/>\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Component Versions - SQL\nDESCRIPTION: This SQL snippet demonstrates how to execute the SHOW VERSION command to retrieve version details of Manticore Search components. It requires Manticore Buddy to be installed for execution. The command outputs the version information for different components like Daemon, Columnar, and more.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_VERSION.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VERSION\n```\n\n----------------------------------------\n\nTITLE: Querying Threads with Column Width Limit\nDESCRIPTION: Examples showing how to limit the Info column width using the columns option. The option columns=30 restricts the Info column to 30 characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSHOW THREADS OPTION columns=30\\G\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"SHOW THREADS OPTION columns=30\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->nodes()->threads(['body'=>['columns'=>30]]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('SHOW THREADS OPTION columns=30')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('SHOW THREADS OPTION columns=30');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"SHOW THREADS OPTION columns=30\");\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"SHOW THREADS OPTION columns=30\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"SHOW THREADS OPTION columns=30\", Some(true)).await;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql('SHOW THREADS OPTION columns=30');\n```\n\nLANGUAGE: go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"SHOW THREADS OPTION columns=30\").Execute()\n```\n\n----------------------------------------\n\nTITLE: Split-Brain Recovery Command for Manticore Cluster\nDESCRIPTION: Command to restore cluster operations in split-brain scenarios where network partition has caused cluster segmentation. Should only be executed on one group of nodes to prevent creating separate clusters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Cluster_recovery.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET CLUSTER posts GLOBAL 'pc.bootstrap' = 1\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nSET CLUSTER posts GLOBAL 'pc.bootstrap' = 1\n\"\n```\n\n----------------------------------------\n\nTITLE: Example of Reloading Plugins from a DLL in SQL\nDESCRIPTION: This SQL example demonstrates reloading plugins from a DLL file named 'udfexample.dll'. It shows the command execution and the expected output, indicating a successful reload without affecting any rows.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Reloading_plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> RELOAD PLUGINS FROM SONAME 'udfexample.dll';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Performing Search with Highlighting in Rust\nDESCRIPTION: This snippet demonstrates how to perform a search query with highlighting in Rust using the Manticore Search API. It sets up a search query with match filtering and highlight options for specific fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_69\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet highlight_fields [String; 2] = [\"content\".to_string(), \"title\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    no_match_size: Some(NoMatchSize::Variant0),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with RegExp Filter in C#\nDESCRIPTION: Creates a table named 'products' with text and float columns using regexp_filter to map color terms. Uses C# API with boolean flag parameter.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_129\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) regexp_filter = '(blue|red) => color'\", true);\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Cache Status in Manticore Search (SQL)\nDESCRIPTION: This SQL query shows how to inspect the current status of the query cache using the SHOW STATUS command. It displays various cache-related metrics including max bytes, threshold, TTL, cached queries, used bytes, and hits.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Query_cache.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SHOW STATUS LIKE 'qcache%';\n+-----------------------+----------+\n| Counter               | Value    |\n+-----------------------+----------+\n| qcache_max_bytes      | 16777216 |\n| qcache_thresh_msec    | 3000     |\n| qcache_ttl_sec        | 60       |\n| qcache_cached_queries | 0        |\n| qcache_used_bytes     | 0        |\n| qcache_hits           | 0        |\n+-----------------------+----------+\n6 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Using SENTENCE Operator in Manticore Search SQL\nDESCRIPTION: Illustrates the use of the SENTENCE operator, which matches documents where all specified terms are within the same sentence. Requires index_sp to be enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nall SENTENCE words SENTENCE \"in one sentence\"\n```\n\n----------------------------------------\n\nTITLE: Python Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using Python. The response includes the document ID, table name, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n{'deleted': None, 'id': 1, 'table': 'test', 'result': 'deleted'}\n```\n\n----------------------------------------\n\nTITLE: Enabling Buddy Plugin in Manticore Search\nDESCRIPTION: This SQL command reactivates a previously disabled Buddy plugin. It requires the fully qualified package name of the plugin, which can be found using the 'SHOW BUDDY PLUGINS' query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Enabling_and_disabling_buddy_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nENABLE BUDDY PLUGIN <username/package name on https://packagist.org/>\n```\n\n----------------------------------------\n\nTITLE: Rust Truncation Response\nDESCRIPTION: Example response from a successful Rust truncate operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n{total=0, error=\"\", warning=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Primary Component Recovery in Manticore Cluster\nDESCRIPTION: SQL command to bootstrap a primary component when cluster quorum is lost. Used in cases where nodes become unreachable and manual intervention is required to restore cluster functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Cluster_recovery.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET CLUSTER posts GLOBAL 'pc.bootstrap' = 1\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nSET CLUSTER posts GLOBAL 'pc.bootstrap' = 1\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Threads\nDESCRIPTION: Sets number of working threads for the Manticore daemon. Default is number of CPU cores.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_69\n\nLANGUAGE: ini\nCODE:\n```\nthreads = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring SphinxQL State File Location\nDESCRIPTION: Specifies path for SQL state serialization file. Used for maintaining persistent state across server restarts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_62\n\nLANGUAGE: ini\nCODE:\n```\nsphinxql_state = uservars.sql\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Compression Unpack Size in Manticore Search\nDESCRIPTION: This setting defines the maximum size of the buffer used for uncompressing MySQL COMPRESS() data. The default is 16M, but it can be adjusted as needed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Database_connection.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nunpack_mysqlcompress_maxsize = 1M\n```\n\n----------------------------------------\n\nTITLE: Basic Filebeat Configuration for Manticore Search\nDESCRIPTION: Basic Filebeat configuration for monitoring dpkg.log and sending data to Manticore Search. Sets up filestream input and elasticsearch output pointing to Manticore's port 9308.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Filebeat.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilebeat.inputs:\n- type: filestream\n  id: example\n  paths:\n\t- /var/log/dpkg.log\n\noutput.elasticsearch:\n  hosts: [\"http://localhost:9308\"]\n  index:  \"dpkg_log\"\n  allow_older_versions: true\n\nsetup.ilm:\n  enabled: false\n\nsetup.template:\n  name: \"dpkg_log\"\n  pattern: \"dpkg_log\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Chinese Language Support with Jieba in Manticore Search\nDESCRIPTION: This snippet shows the configuration for Chinese language support using Jieba segmentation in Manticore Search. It requires the 'manticore-language-packs' package.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncharset_table=chinese\nmorphology=jieba_chinese\n```\n\n----------------------------------------\n\nTITLE: JSON Replace API\nDESCRIPTION: Replace document using JSON POST endpoint. Supports full document replacement with specified ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /replace\n{\n  \"table\": \"<table name>\",\n  \"id\": <document id>,\n  \"doc\": {\n    \"<field1>\": <value1>,\n    ...\n    \"<fieldN>\": <valueN>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on Debian/Ubuntu/Mint\nDESCRIPTION: Commands to install Manticore Search on Debian-based Linux distributions using apt package manager. Includes downloading and installing the repository, updating apt, and installing both manticore and manticore-extra packages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo.manticoresearch.com/manticore-repo.noarch.deb\nsudo dpkg -i manticore-repo.noarch.deb\nsudo apt update\nsudo apt install manticore manticore-extra\n```\n\n----------------------------------------\n\nTITLE: CALL SNIPPETS Response Example in Manticore Search\nDESCRIPTION: Shows the response format when using CALL SNIPPETS. The output includes the generated snippets with the matched terms highlighted in bold tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_128\n\nLANGUAGE: sql\nCODE:\n```\n+----------------------------------------+\n| snippet                                |\n+----------------------------------------+\n| this <b>is</b> my document <b>text</b> |\n| this <b>is</b> my another <b>text</b>  |\n+----------------------------------------+\n2 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Enabling Coredumps in Manticore Search via Systemd\nDESCRIPTION: Commands for configuring Manticore Search to generate coredumps on crash. This includes setting systemd environment variables and configuring kernel core pattern settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl set-environment _ADDITIONAL_SEARCHD_PARAMS='--coredump'\nsystemctl restart manticore\nps aux|grep searchd\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"/cores/core.%e.%p.%h.%t\" > /proc/sys/kernel/core_pattern\n```\n\n----------------------------------------\n\nTITLE: Enabling Seamless Rotation in Manticore Search (INI)\nDESCRIPTION: Controls seamless rotation to prevent stalls when rotating tables with large precached data. Default is 1 (enabled), 0 on Windows. Affects RAM usage during rotation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_57\n\nLANGUAGE: ini\nCODE:\n```\nseamless_rotate = 1\n```\n\n----------------------------------------\n\nTITLE: Grouping Syntax in SQL for Manticore Search\nDESCRIPTION: This snippet shows the general syntax for grouping search results in SQL, including SELECT expressions, GROUP BY clause, HAVING condition, and WITHIN GROUP ORDER BY clause.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT {* | SELECT_expr [, SELECT_expr ...]}\n...\nGROUP BY {field_name | alias } [, ...]\n[HAVING where_condition]\n[WITHIN GROUP ORDER BY field_name {ASC | DESC} [, ...]]\n...\n\nSELECT_expr: { field_name | function_name(...) }\nwhere_condition: {aggregation expression alias | COUNT(*)}\n```\n\n----------------------------------------\n\nTITLE: Interpreting Percolation PHP Results\nDESCRIPTION: Displays the results obtained from executing a PHP percolation query, including document matches and query insights.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [took] => 23\n    [timed_out] => \n    [hits] => Array\n        (\n            [total] => 2\n            [max_score] => 1\n            [hits] => Array\n                (\n                    [0] => Array\n                        (\n                            [_index] => products\n                            [_type] => doc\n                            [_id] => 2810781492890828819\n                            [_score] => 1\n                            [_source] => Array\n                                (\n                                    [query] => Array\n                                        (\n                                            [match] => Array\n                                                (\n                                                    [title] => bag\n                                                )\n                                        )\n                                )\n                            [fields] => Array\n                                (\n                                    [_percolator_document_slot] => Array\n                                        (\n                                            [0] => 2\n                                        )\n                                )\n                        )\n                    [1] => Array\n                        (\n                            [_index] => products\n                            [_type] => doc\n                            [_id] => 2810781492890828821\n                            [_score] => 1\n                            [_source] => Array\n                                (\n                                    [query] => Array\n                                        (\n                                            [match] => Array\n                                                (\n                                                    [title] => shoes\n                                                )\n                                        )\n                                )\n                            [fields] => Array\n                                (\n                                    [_percolator_document_slot] => Array\n                                        (\n                                            [0] => 1\n                                        )\n                                )\n                        )\n                )\n        )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in JavaScript\nDESCRIPTION: Shows how to create a table with a multi64 field in JavaScript using SQL through the utils API. The multi64 type is used for storing variable-length lists of 64-bit signed integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, values multi64))');\n```\n\n----------------------------------------\n\nTITLE: Syntax for hitless_words in Manticore INI\nDESCRIPTION: Shows the syntax for the `hitless_words` directive in a Manticore configuration file. This option controls whether positional information (hitlists) is stored for words. It can be set to 'all' to disable hitlists for all words in the index, or to a path to a file listing specific words to exclude.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_88\n\nLANGUAGE: ini\nCODE:\n```\nhitless_words = {all|path/to/file}\n```\n\n----------------------------------------\n\nTITLE: Stopping Manticore Search via HomeBrew\nDESCRIPTION: Command to stop the Manticore Search service using HomeBrew service manager on MacOS.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/MacOS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop manticoresearch\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Binary Log Size\nDESCRIPTION: Configuration example showing how to set the maximum size for binary log files using binlog_max_log_size directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...    \n    binlog_max_log_size = 16M\n....\n```\n\n----------------------------------------\n\nTITLE: MySQL Dump Basic Backup Commands\nDESCRIPTION: Basic mysqldump commands for backing up Manticore Search data\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -h0 -P9306 manticore > manticore_backup.sql\nmariadb-dump -h0 -P9306 manticore > manticore_backup.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Common Binary Log File Strategy\nDESCRIPTION: Configuration example showing how to enable using a single binary log file for all tables using binlog_common directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...    \n    binlog_common = 1\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Snippets File Prefix in Manticore Search\nDESCRIPTION: Configures prefix for local file names in snippet generation. Used with load_files options for distributed snippet generation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_61\n\nLANGUAGE: ini\nCODE:\n```\nsnippets_file_prefix = /mnt/common/server1/\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via Rust Client\nDESCRIPTION: Initialize a connection to Manticore Search using the Rust client library and set up API interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::Arc;\nuse manticoresearch::\n    apis::{\n        {configuration::Configuration,IndexApi,IndexApiClient,SearchApi,SearchApiClient,UtilsApi,UtilsApiClient}\n    },\n};\n\nasync fn maticore_connect {\n\tlet configuration = Configuration {\n\t    base_path: \"http://127.0.0.1:9308\".to_owned(),\n\t    ..Default::default(),\n\t};\n    let api_config = Arc::new(configuration);\n    let utils_api = UtilsApiClient::new(api_config.clone());\n    let index_api = IndexApiClient::new(api_config.clone());\n    let search_api = SearchApiClient::new(api_config.clone());\n```\n\n----------------------------------------\n\nTITLE: Using Year and Month Functions in Manticore Search SQL\nDESCRIPTION: Example showing how to use YEAR() and MONTH() functions to extract date components from a timestamp.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, YEAR(date_added) as year, MONTH(date_added) as month FROM myindex;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in PHP (PHP)\nDESCRIPTION: This PHP code uses Manticoresearch's client library to create a table while specifying the minimum word length needed for indexing words.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'min_word_len' => '4'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Result Set Window with max_matches in HTTP JSON for Manticore Search\nDESCRIPTION: Shows how to use the max_matches option in HTTP JSON requests to adjust the result set window. This can be used to increase or decrease the number of documents that can be returned in the result set.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Pagination.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"<table_name>\",\n  \"query\": ...\n  ...\n  \"max_matches\":<value>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Comment Syntax in Manticore\nDESCRIPTION: Example of SQL comment syntax supported by Manticore. C-style comments (/* */) are supported for better compatibility with mysqldump, though MySQL-specific comments are currently ignored.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*! SQL_CALC_FOUND_ROWS */ col1 FROM table1 WHERE ...\n```\n\n----------------------------------------\n\nTITLE: Querying Distributed Table in Manticore Search SQL\nDESCRIPTION: Illustrates how a client query to a distributed table is transformed when sent to remote agents, adjusting the LIMIT clause for proper result merging.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM dist LIMIT 10,10;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM user LIMIT 0,1000\n```\n\n----------------------------------------\n\nTITLE: Example of Unloading a Ranker Plugin in Manticore Search\nDESCRIPTION: Shows a practical example of unloading a ranker plugin named 'myranker' using the DROP PLUGIN command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Deleting_a_plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DROP PLUGIN myranker TYPE 'ranker';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status with SQL in Go\nDESCRIPTION: The Go code uses the `apiClient.UtilsAPI.Sql` method to execute a SQL query for retrieving agent status information similar to the TypeScript example. It's designed to work synchronously and requires Go's context handling for executing API calls.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"SHOW AGENT STATUS LIKE \\\"%5period%msec%\\\"\").Execute()\n```\n\nLANGUAGE: Go\nCODE:\n```\n{\n\t\"columns\":\n\t[{\n\t\t\"Key\": {\"type\": \"string\"}\n\t},\n    {\n    \t\"Value\": {\"type\": \"string\"}\n    }],\n\t\"data\":\n\t[\n\t\t{\"Key\": \"ag_0_5periods_msecsperquery\", \"Value\": \"234.72\"},\n\t\t{\"Key\": \"ag_1_5periods_msecsperquery\", \"Value\": \"233.73\"},\n\t\t{\"Key\": \"ag_2_5periods_msecsperquery\", \"Value\": \"343.81\"}\n\t],\n \t\"error\": \"\",\n \t\"total\": 0,\n \t\"warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Show Create Table Example\nDESCRIPTION: New SQL commands added for table management including SHOW CREATE TABLE and IMPORT TABLE functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE\nIMPORT TABLE\n```\n\n----------------------------------------\n\nTITLE: Modifying Distributed Table Configuration\nDESCRIPTION: SQL command to modify the configuration of a distributed table by changing local or remote nodes. Requires Manticore Buddy for online schema changes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `distr_table_name` [[local='local_table_name'], [agent='host:port:remote_table'] ... ]\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE local_dist local='index1' local='index2' agent='127.0.0.1:9312:remote_table';\n```\n\n----------------------------------------\n\nTITLE: Non-Batched Query Log Output in Manticore Search\nDESCRIPTION: Example log output from non-batched queries for comparison, showing slower per-query execution times without the benefits of multi-query optimizations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Multi-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[Sun Jul 12 15:18:17.062 2009] 0.059 sec [ext/0/rel 747541 (0,20)] [lj] the\n[Sun Jul 12 15:18:17.156 2009] 0.091 sec [ext/0/ext 747541 (0,20)] [lj] the\n[Sun Jul 12 15:18:17.250 2009] 0.092 sec [ext/0/ext 747541 (0,20)] [lj] the\n```\n\n----------------------------------------\n\nTITLE: SQL Advanced Search Configuration\nDESCRIPTION: Examples of advanced configuration options including distinct counts, index weights, field weights, and comments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n... WHERE query='test;groupby=attr:country_id;distinct=site_id';\n... WHERE query='test;indexweights=tbl_exact,2,tbl_stemmed,1;';\n... WHERE query='test;fieldweights=title,10,abstract,3,content,1;';\n... WHERE query='test;comment=marker001;';\n... WHERE query='test;select=2*a+3*** as myexpr;';\n... WHERE query='test;host=sphinx-test.loc;port=7312;';\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in Rust\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using Rust. The method requires creating a DeleteDocumentRequest object with the table name, cluster name, and document ID.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\nlet delete_req = DeleteDocumentRequest {\n    table: \"test\".to_string(),\n    cluster: \"cluster\".to_string(),\n    id: serde_json::json!(1),\n    ..Default::default(),\n};\n\nindex_api.delete(delete_req).await;\n\n```\n\n----------------------------------------\n\nTITLE: Converting All Tables with Index Converter\nDESCRIPTION: Command to convert all tables defined in the configuration file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Migration_from_Sphinx.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n$ index_converter --config /home/myuser/manticore.conf --all\n```\n\n----------------------------------------\n\nTITLE: Binary Log File Structure\nDESCRIPTION: Defines the main structure of binlog.NNNN files containing transactions and cache data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/binary-logging.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ndword magic, = chars[] 'SPBL'\ndword version\n[ transactions ]\n[ index cache transaction ]\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Sysroot Archive\nDESCRIPTION: Bash command to create a compressed tar archive of the Windows sysroot. This command packages the necessary folders and files into a single archive named sysroot_windows_x64.tar.xz.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/sysroot_windows_x64.tar.xz.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - diskc sdk windows-cl.cmake windows.cmake toolchain.cmake | xz -9 > sysroot_windows_x64.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Setting In-Place Hit Gap in Manticore Search\nDESCRIPTION: Fine-tuning option for in-place inversion that controls preallocated hitlist gap size. Only affects the searchd tool, not the indexer.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_60\n\nLANGUAGE: ini\nCODE:\n```\ninplace_hit_gap = size\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Threads Per Query\nDESCRIPTION: Limits the number of CPU threads that can be used by a single operation, allowing better resource distribution for parallel operations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nmax_threads_per_query = 4\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words via JSON API\nDESCRIPTION: Sends a POST request to the Manticore `/cli` endpoint to execute a SQL `CREATE TABLE` statement. This command creates a 'products' table with the `hitless_words` option set to 'all', disabling positional information storage for all terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_90\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) hitless_words = 'all'\"\n```\n\n----------------------------------------\n\nTITLE: Listing Code Revisions for Index Format Version Changes in Manticore Search\nDESCRIPTION: A detailed list of code revisions that affected the INDEX_FORMAT_VERSION in Manticore Search. Each entry includes the version number, commit hash, date, file location, and author of the change.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-format-versions.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nv.1,  6b43c3fa:517,  2006-12-14, sphinx.cpp:1636, shodan\nv.2,  f7594ad0:609,  2007-04-05, sphinx.cpp:1701, shodan\nv.3,  c637af0e:639,  2007-05-27, sphinx.cpp:1988, shodan\nv.4,  be90b19b:673,  2007-06-17, sphinx.cpp:2001, shodan\nv.5,  49ad6143:675,  2007-06-20, sphinx.cpp:2001, shodan\nv.6,  562513a5:679,  2007-06-22, sphinx.cpp:2129, shodan\nv.7,  cee4c7db:825,  2007-09-21, sphinx.cpp:2130, glook\nv.8,  1e3b09cf:850,  2007-10-04, sphinx.cpp:2131, glook\nv.9,  681d33a5:1226, 2008-03-26, sphinx.cpp:1620, glook\nv.10, e63ae60c:1257, 2008-05-06, sphinx.cpp:1629, glook\nv.11, c50c34a9:1289, 2008-05-30, sphinx.cpp:1661, glook\nv.12, bc71e761:1435, 2008-09-10, sphinx.cpp:1702, glook\nv.13, 6a920738:1561, 2008-11-11, sphinx.cpp:1573, shodan\nv.14, c07346eb:1693, 2009-02-13, sphinx.cpp:1522, shodan\nv.15, bbc776e0:1811, 2009-05-22, sphinx.cpp:1522, xale\nv.16, fac1869b:1813, 2009-05-25, sphinx.cpp:1522, shodan\nv.17, d6c1806d:1822, 2009-06-08, sphinx.cpp:1534, shodan\nv.18, ca9094f0:1842, 2009-06-20, sphinx.cpp:1565, xale\nv.19, 46617dbc:1905, 2009-07-13, sphinx.cpp:1477, xale\nv.20, 592748bb:2039, 2009-10-30, sphinx.cpp:1254, klirichek\nv.22, 47fb4a88:2437, 2010-08-12, sphinx.cpp:1380, shodan\nv.23, b61bbd7e:2482, 2010-09-15, sphinx.cpp:1366, tomat\nv.24, 511f1acc:2636, 2011-01-17, sphinx.cpp:1368, shodan\nv.25, aeb94e83:2724, 2011-03-14, sphinx.cpp:1369, shodan\nv.25, aeb94e83:2724, 2011-03-14, sphinx.cpp:1369, shodan\nv.26, 41de7757:2876, 2011-07-08, sphinx.cpp:1381, tomat\n\nv.26, d651fd84:2929, 2011-08-29, sphinxint.h:47, shodan\nv.27, 61a9ed54:3067, 2012-01-20, sphinxint.h:47, shodan\nv.28, 1fc6a75d:3165, 2012-03-24, sphinxint.h:47, shodan\nv.29, 97976aef:3181, 2012-04-10, sphinxint.h:47, glook\nv.30, d70268d7:3182, 2012-04-13, sphinxint.h:47, glook\nv.31, 6a16550d:3259, 2012-06-18, sphinxint.h:47, shodan\nv.32, 5d0a1955bb1f:1417, 2012-06-27, sphinxint.h:47, shodan \nv.33, 36d3ef73faa1:1564, 2012-08-16, sphinxint.h:47, tomat\nv.34, 1c18e86fd4e6:1570, 2012-08-17, sphinxint.h:47, tomat\nv.35, c7c6c05a57de:1906, 2012-08-31, sphinxint.h:47, shodan\n```\n\n----------------------------------------\n\nTITLE: Flushing RAM Chunk to Disk in Manticore Search (SQL)\nDESCRIPTION: The FLUSH RAMCHUNK command creates a new disk chunk in a real-time table. It's useful for debugging and testing purposes when you want to forcibly create a new disk chunk without waiting for the automatic flush based on rt_mem_limit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_RAM_chunk_to_a_new_disk_chunk.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nFLUSH RAMCHUNK rt_table\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode in Manticoresearch (JSON)\nDESCRIPTION: This JSON snippet shows how to configure table creation in Manticoresearch through a CLI command with blend_mode options applied to indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) blend_mode = 'trim_tail, skip_pure' blend_chars = '+, &'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Package Version Locks for Manticore Search\nDESCRIPTION: This snippet lists the version locks for various packages used in Manticore Search. Each line represents a package with its version number, build timestamp, and commit hash. The file is used to maintain consistent dependency versions across the project.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/deps.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbackup 1.9.1+25040420-c6e46da2-dev\nbuddy 3.27.3+25041621-d40ff5f3-dev\nmcl 4.2.1 25032818 aeac3b3\nexecutor 1.3.1 25011510 1856ac9\ntzdata 1.0.1 240904 3ba592a\nload 1.18.0+25031816-ecbb7e88\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with UDF in Manticore Search\nDESCRIPTION: Example SQL query that demonstrates how to use a user-defined function (UDF) in a Manticore search expression, where myudf is a custom function taking multiple arguments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDFs_and_Plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, attr1, myudf (attr2, attr3+attr4) ...\n```\n\n----------------------------------------\n\nTITLE: Integer Division with IDIV in ManticoreSearch SQL - SQL\nDESCRIPTION: Divides the first integer argument by the second and returns the integer quotient. Both arguments must be integers, with division by zero resulting in an error. The result discards the remainder and always yields an integer.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nIDIV(a, b)\n```\n\n----------------------------------------\n\nTITLE: Generating Server Certificate and Key\nDESCRIPTION: Series of commands to generate server certificate request, private key, and final certificate signed by the CA.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/SSL.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -newkey rsa:2048 -days 365 -nodes -keyout server-key.pem -out server-req.pem\nopenssl rsa -in server-key.pem -out server-key.pem\nopenssl x509 -req -in server-req.pem -days 365 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Grouping by MVA in SQL\nDESCRIPTION: Demonstration of grouping by multi-value attribute 'sizes' using GROUPBY() function.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT groupby() gb, count(*) FROM shoes GROUP BY sizes ORDER BY gb asc;\n```\n\n----------------------------------------\n\nTITLE: Match All Query in HTTP JSON\nDESCRIPTION: Demonstrates the match_all query to return all documents without filtering or matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"query\":\n{\n  \"match_all\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Manticore auto-start on RedHat systems\nDESCRIPTION: Command to enable Manticore Search to start automatically at boot time on RedHat-based systems using chkconfig.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nchkconfig manticore on\n```\n\n----------------------------------------\n\nTITLE: CALL KEYWORDS Syntax in SQL\nDESCRIPTION: General syntax for using CALL KEYWORDS to tokenize text and get keyword statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Autocomplete.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCALL KEYWORDS(text, table [, options])\n```\n\n----------------------------------------\n\nTITLE: Generating Charset Headers with CMake for Manticore Search\nDESCRIPTION: Configures the generation of globalaliases.h header file from charset text files. It sets up input file pattern matching and template location, then invokes a custom hsnippetfolder command to generate the header.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/tokenizer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\n# compile globalaliases.h\ninclude ( genheader )\nset ( CHARSET_FILTER \"${MANTICORE_SOURCE_DIR}/src/charsets/*.txt\" )\nset ( CHARSET_TEMPLATE \"${MANTICORE_SOURCE_DIR}/src/charsets/globalaliases.h.in\" )\nhsnippetfolder ( \"${CHARSET_FILTER}\" \"${CHARSET_TEMPLATE}\" )\n```\n\n----------------------------------------\n\nTITLE: Compressing Boost Headers Archive with XZ\nDESCRIPTION: Command to compress the boost_include.tar file using xz compression. The resulting compressed file should be placed in the same directory as the Dockerfile.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/build_cross/boost_include.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxz boost_include.tar\n```\n\n----------------------------------------\n\nTITLE: Embedded File Size Limit Configuration\nDESCRIPTION: Sets the size limit for embedded exceptions, wordforms, or stop words files. Files under this limit are stored directly in the table, while larger files are stored externally. Default is 16K.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_84\n\nLANGUAGE: ini\nCODE:\n```\nembedded_limit = size\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  embedded_limit = 32K\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs for Manticore\nDESCRIPTION: Command to view Manticore Search container logs from the host system using the Docker logs command\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Docker_logging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs manticore\n```\n\n----------------------------------------\n\nTITLE: Enabling Manticore's auto-start using systemd in Linux\nDESCRIPTION: Command to enable Manticore Search to start automatically at boot time using systemd.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable manticore\n```\n\n----------------------------------------\n\nTITLE: Manticore Backup Restore Command\nDESCRIPTION: Command to restore a specific backup using manticore-backup tool\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmanticore-backup --backup-dir=/mnt/backup/ --restore=backup-20221007104044\n```\n\n----------------------------------------\n\nTITLE: Configuring Noerrors Load Balancing Strategy\nDESCRIPTION: Sets up latency-weighted probabilities while excluding mirrors with poor error/success ratios.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Load_balancing.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nha_strategy = noerrors\n```\n\n----------------------------------------\n\nTITLE: Displaying Loaded Plugins and UDFs in Manticore Search\nDESCRIPTION: The 'SHOW PLUGINS' command displays all loaded plugins (except Buddy plugins) and UDFs. It provides information about the plugin type, name, library, number of users, and additional details for UDFs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Listing_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW PLUGINS;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+------+----------+----------------+-------+-------+\n| Type | Name     | Library        | Users | Extra |\n+------+----------+----------------+-------+-------+\n| udf  | sequence | udfexample.dll | 0     | INT   |\n+------+----------+----------------+-------+-------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Resetting custom startup flags for Manticore using systemd in Linux\nDESCRIPTION: Commands to reset custom startup flags for Manticore Search using systemd environment variables. This removes any previously set custom flags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl set-environment _ADDITIONAL_SEARCHD_PARAMS=''\nsystemctl restart manticore\n```\n\n----------------------------------------\n\nTITLE: Using UUID_SHORT() to generate unique identifiers in Manticore SQL\nDESCRIPTION: UUID_SHORT() returns a \"short\" universal identifier as a 63-bit unsigned integer following the same algorithm as for auto-ID generation. Note that using this function increases the counter used for auto-IDs, which may create gaps in auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Other_functions.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select uuid_short();\n+---------------------+\n| uuid_short()        |\n+---------------------+\n| 5839598169280741377 |\n+---------------------+\n1 row in set (0.00 sec)\n\nmysql> select uuid_short();\n+---------------------+\n| uuid_short()        |\n+---------------------+\n| 5839598169280741378 |\n+---------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in PHP\nDESCRIPTION: Demonstrates how to create a table with bigram indexing using the PHP client. It sets the table name, defines fields, and configures bigram indexing options with frequent words.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'bigram_freq_words' => 'the, a, you, i',\n            'bigram_index' => 'first_freq'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Key Name Conversion in Manticore Search (INI)\nDESCRIPTION: Determines if and how to auto-convert key names within JSON attributes. When set to 'lowercase', key names within JSON attributes will be automatically converted to lowercase during indexing. This applies to JSON attributes from all data sources.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Common.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\njson_autoconv_keynames = lowercase\n```\n\n----------------------------------------\n\nTITLE: Configuring LibC Locale for Collation\nDESCRIPTION: Specifies the libc locale for libc-based collations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\ncollation_libc_locale = fr_FR\n```\n\n----------------------------------------\n\nTITLE: Setting Persistent Connections Limit in Manticore Search INI\nDESCRIPTION: Defines the maximum number of simultaneous persistent connections to remote persistent agents. This is an instance-wide setting that must be defined in the searchd configuration section.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\npersistent_connections_limit = 29 # assume that each host of agents has max_connections = 30 (or 29).\n```\n\n----------------------------------------\n\nTITLE: Optimizing Agent Configuration in Manticore Search INI\nDESCRIPTION: Demonstrates the recommended way to configure multiple remote tables on the same server for optimal performance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nagent = remote:9312:idx1,idx2\n```\n\n----------------------------------------\n\nTITLE: SQL Update with Force Index\nDESCRIPTION: Example of using FORCE/IGNORE INDEX hint for SELECT/UPDATE queries to control index usage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nFORCE/IGNORE INDEX(id)\n```\n\n----------------------------------------\n\nTITLE: SQL Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example response from a successful SQL TRUNCATE with RECONFIGURE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Joined Field Data in Manticore Search\nDESCRIPTION: Shows SQL queries to retrieve and search data from an index with a joined field. Includes a simple SELECT, a full-text search demonstrating payload weights, and a complex search query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Processing_fetched_data.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select * from idx;\n+------+------------+------+\n| id   | f          | tag  |\n+------+------------+------+\n|    1 | Nike bag   | nike |\n|    2 | Adidas bag |      |\n|    3 | Reebok bag |      |\n|    4 | Nike belt  | nike |\n+------+------------+------+\n4 rows in set (0.00 sec)\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select *, weight() from idx where match('nike|adidas');\n+------+------------+------+----------+\n| id   | f          | tag  | weight() |\n+------+------------+------+----------+\n|    1 | Nike bag   | nike |    11539 |\n|    4 | Nike belt  | nike |    11539 |\n|    2 | Adidas bag |      |     1597 |\n+------+------------+------+----------+\n3 rows in set (0.01 sec)\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select *, weight() from idx where match('\"nike bag\"|\"adidas bag\"');\n+------+------------+------+----------+\n| id   | f          | tag  | weight() |\n+------+------------+------+----------+\n|    2 | Adidas bag |      |     2565 |\n|    1 | Nike bag   | nike |     2507 |\n+------+------------+------+----------+\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from a Replication Cluster in Javascript\nDESCRIPTION: Shows how to delete a document from a table within a replication cluster using Javascript. The method requires specifying the cluster name, table name, and document ID to be deleted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_15\n\nLANGUAGE: Javascript\nCODE:\n```\nindexApi.delete({\"cluster\":\"cluster_1\",\"table\" : \"test\", \"id\" : 1})\n```\n\n----------------------------------------\n\nTITLE: Specifying MySQL Version String in INI Configuration\nDESCRIPTION: The `mysql_version_string` directive allows Manticore Search to return a specific server version string via the MySQL protocol. This can help in environments where specific MySQL client libraries depend on a particular version format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nmysql_version_string = 5.0.37\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW THREADS via Python Client\nDESCRIPTION: Example of using the Manticore Search Python client to execute the SHOW THREADS command through the UtilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport manticoresearch\nconfig = manticoresearch.Configuration(\n            host = \"http://127.0.0.1:9308\"\n            )\nclient = manticoresearch.ApiClient(config)\nutilsApi = manticoresearch.UtilsApi(client)\nprint(utilsApi.sql('SHOW THREADS'))\n```\n\n----------------------------------------\n\nTITLE: Handling Diverged Cluster Nodes\nDESCRIPTION: Example showing how to promote a node to primary component when cluster nodes have diverged.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSET CLUSTER posts GLOBAL 'pc.bootstrap' = 1\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nSET CLUSTER posts GLOBAL 'pc.bootstrap' = 1\n\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (Python-asyncio)\nDESCRIPTION: Removes a table from a replication cluster using Python asyncio client. The SQL command is executed asynchronously through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('ALTER CLUSTER posts DROP weekly_index')\n```\n\n----------------------------------------\n\nTITLE: Configuring Manticore Search Build with CMake\nDESCRIPTION: Example of configuring a Manticore Search build using CMake with MySQL and RE2 support enabled. This command creates a build directory, changes into it, and runs CMake with specific options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build && cd build\ncmake -DWITH_MYSQL=1 -DWITH_RE2=1 ..\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Query Pre-processing in Manticore Search\nDESCRIPTION: This snippet refers to the sql_query_pre configuration option used to set up initial database connection parameters, such as encoding for MySQL connections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_168/text1.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nsql_query_pre\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Basic N-gram Settings\nDESCRIPTION: Creates a products table with title and price fields using the 'cont' predefined N-gram character set with N-gram length of 1.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_57\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\", true);\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\", true);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  ngram_chars = cont\n  ngram_len = 1\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Store Cache Size\nDESCRIPTION: Sets maximum size of cached document blocks from document storage in memory.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\ndocstore_cache_size = 8m\n```\n\n----------------------------------------\n\nTITLE: Setting Query Log Permissions\nDESCRIPTION: Configures the file permissions for query and searchd log files, allowing non-root users to access logs for monitoring purposes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_49\n\nLANGUAGE: ini\nCODE:\n```\nquery_log_mode  = 666\n```\n\n----------------------------------------\n\nTITLE: Defining Enumerations in C++\nDESCRIPTION: Shows the standard format for declaring regular and typed enumerations with mandatory values and sequential items.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-coding-standard.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nenum Example_e\n{\n\tFIRST\t\t= mandatory_value,\n\tSECOND,\n\tTHIRD,\n\tFOURTH\n};\n\nenum class TypedExample_e\n{\n\tFIRST,\n\tSECOND,\n\tTHIRD,\n\tFOURTH\n};\n```\n\n----------------------------------------\n\nTITLE: Dropping a User-Defined Function via SQL in ManticoreSearch - SQL\nDESCRIPTION: This code snippet demonstrates the syntax for the SQL DROP FUNCTION statement, used to uninstall a user-defined function from ManticoreSearch. To use this, you must have a UDF previously created and proper privileges to alter functions. The key parameter is the function name (\"udf_name\"). Once dropped, the function cannot be used in subsequent queries; ongoing concurrent queries using this UDF will not be interrupted, but library unloading may be delayed until they complete. The command does not produce output unless there is an error.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF/Deleting_a_function.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION udf_name\n\n```\n\n----------------------------------------\n\nTITLE: Highlighting with Python in Manticore Search\nDESCRIPTION: This example demonstrates how to use the search API in Python to perform a search query with highlighting enabled.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nres = searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"try\"}},\"highlight\":{}})\n```\n\n----------------------------------------\n\nTITLE: Configuring index_token_filter in Manticore INI\nDESCRIPTION: Defines a Manticore Search real-time table named 'products' in the configuration file format (`.ini`). It sets the `index_token_filter` option to use a specific plugin (`my_lib.so:custom_blend`) with custom settings (`chars=@#&`) for token processing during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_120\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  index_token_filter = my_lib.so:custom_blend:chars=@#&\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Directory in Manticore Search Configuration (INI)\nDESCRIPTION: Specifies the trusted location for dynamic libraries (UDFs). The default path is '/usr/local/lib/manticore/'. This directive sets the trusted directory from which the UDF libraries can be loaded.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Common.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nplugin_dir = /usr/local/lib/manticore/\n```\n\n----------------------------------------\n\nTITLE: Setting Server Default Collation\nDESCRIPTION: Defines default collation for incoming requests, can be overridden per query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\ncollation_server = utf8_ci\n```\n\n----------------------------------------\n\nTITLE: Using CALL QSUGGEST for Last Word Suggestions in SQL\nDESCRIPTION: Shows how CALL QSUGGEST function focuses on the last word of a multi-word input. It returns suggestions only for the last word in the query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCALL QSUGGEST('bagg with tasel', 'products');\n```\n\nLANGUAGE: sql\nCODE:\n```\n+---------+----------+------+\n| suggest | distance | docs |\n+---------+----------+------+\n| tassel  | 1        | 1    |\n+---------+----------+------+\n```\n\n----------------------------------------\n\nTITLE: Fixing permission issues for Manticore data directory\nDESCRIPTION: This command fixes permission issues when running Manticore container as non-root user by changing ownership of the data directory to user ID 999, which corresponds to the 'manticore' user inside the container.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nchown -R 999:999 data\n```\n\n----------------------------------------\n\nTITLE: Setting In-Place Relocation Factor in Manticore Search\nDESCRIPTION: Controls the size of the relocation buffer within the memory arena used during indexing. Only affects the indexer tool, not the searchd server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_62\n\nLANGUAGE: ini\nCODE:\n```\ninplace_reloc_factor = 0.1\n```\n\n----------------------------------------\n\nTITLE: Example SQL Query Results\nDESCRIPTION: Shows the response format for an SQL query with search options, returning matching documents with their fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n+------+-------+-------+\n| id   | title | body  |\n+------+-------+-------+\n|    1 | hello | world |\n+------+-------+-------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: CJK Unicode Character Mapping Rules\nDESCRIPTION: Character mapping rules for CJK Unicode blocks. Defines mappings between variant forms and standard forms, including Hiragana, Katakana, Hangul, and Han characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/cont.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nU+0E01..U+0E30,\nU+0E32,\nU+0E33,\nU+0E40..U+0E46,\nU+0E50..U+0E59,\nU+1100..U+1159,\nU+1161..U+11A2,\nU+11A8..U+11F9,\nU+2F00->U+4E00,\nU+2F01->U+4E28,\n# [Additional mappings truncated for brevity]\n```\n\n----------------------------------------\n\nTITLE: Go Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using Go. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_46\n\nLANGUAGE: JSON\nCODE:\n```\n{\"items\":[{\"delete\":{\"table\":\"test\",\"deleted\":2}}],\"errors\":false}\n```\n\n----------------------------------------\n\nTITLE: Flushing Attributes in Manticore Search using SQL\nDESCRIPTION: This SQL command flushes all in-memory attribute updates to disk for all active tables in Manticore Search. It returns a tag representing the number of disk attribute saves performed since server startup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nFLUSH ATTRIBUTES\n```\n\n----------------------------------------\n\nTITLE: Removing Old Manticore Packages Before Upgrading to Version 6\nDESCRIPTION: Command to remove old Manticore packages before upgrading to version 6, preserving data and configuration files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Debian_and_Ubuntu.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove manticore*\n```\n\n----------------------------------------\n\nTITLE: Starting Manticore from Command Line\nDESCRIPTION: Command to start Manticore Search directly from the command line. This method is used when Manticore is not installed as a Windows Service. It assumes the binary and configuration file are in the current directory.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Windows.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n.\\bin\\searchd -c manticore.conf\n```\n\n----------------------------------------\n\nTITLE: Backing up specific tables using manticore-backup\nDESCRIPTION: This example shows how to use the manticore-backup tool to create a backup of a specific table (products) in a Manticore Search instance. It specifies the backup directory and the table to be backed up.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmanticore-backup --backup-dir=/mnt/backup/ --tables=products\n```\n\n----------------------------------------\n\nTITLE: Rotating Manticore Indexes in Docker\nDESCRIPTION: Docker command to rotate all indexes in Manticore Search running in a container, ensuring proper file permissions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it manticore gosu manticore indexer --all --rotate\n```\n\n----------------------------------------\n\nTITLE: Unloading Plugins with DROP PLUGIN in Manticore Search\nDESCRIPTION: Marks a plugin for unloading. The unloading is not immediate as concurrent queries may still be using it. When all queries using the plugin finish, it will be unloaded. If all plugins from a library are unloaded, the library itself is also unloaded.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Deleting_a_plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP PLUGIN plugin_name TYPE 'plugin_type'\n```\n\n----------------------------------------\n\nTITLE: Defining Load Balancing Strategy Options\nDESCRIPTION: Configuration directive that specifies the mirror selection strategy for load balancing, with options for random, nodeads, noerrors, or roundrobin distribution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Load_balancing.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nha_strategy = {random|nodeads|noerrors|roundrobin}\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operators in Manticore Search\nDESCRIPTION: Bitwise AND and OR operators that perform bit operations on integer operands only.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Expressions.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n&, |\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in C#\nDESCRIPTION: This C# code creates a table 'products' with blended characters configuration using the Manticore Search C# client, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) blend_chars = '+, &, U+23, @->_'\", true);\n```\n\n----------------------------------------\n\nTITLE: Enabling exact word indexing in Manticore Search\nDESCRIPTION: This snippet demonstrates how to enable indexing of original keywords along with their morphological variants in Manticore Search. It creates a table with exact word indexing enabled and English stemming applied.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Morphology.md#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products(title text, price float) index_exact_words = '1' morphology = 'stem_en'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) index_exact_words = '1' morphology = 'stem_en'\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'index_exact_words' => '1',\n             'morphology' => 'stem_en'\n        ]);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) index_exact_words = \\'1\\' morphology = \\'stem_en\\'')\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) index_exact_words = \\'1\\' morphology = \\'stem_en\\'')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) index_exact_words = \\'1\\' morphology = \\'stem_en\\'');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) index_exact_words = '1' morphology = 'stem_en'\", true);\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) index_exact_words = '1' morphology = 'stem_en'\", true);\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) index_exact_words = '1' morphology = 'stem_en'\", Some(true)).await;\n```\n\nLANGUAGE: INI\nCODE:\n```\ntable products {\n  index_exact_words = 1\n  morphology = stem_en\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search Dependencies on CentOS/RHEL 8\nDESCRIPTION: This Bash script uses yum to install multiple development packages necessary for Manticore Search. It includes database connectors (MariaDB, PostgreSQL), XML parsing (expat), ODBC, memory allocation (jemalloc), SSL support, compression (zstd), and curl libraries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_rhel8.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y \\\n        mariadb-connector-c-devel \\\n        expat-devel \\\n        postgresql-devel \\\n        unixODBC-devel \\\n        jemalloc-devel \\\n        openssl-devel \\\n        libzstd-devel \\\n        libcurl-devel\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in Java (Java)\nDESCRIPTION: Using Java, this snippet performs a SQL call to Manticoresearch for table creation, setting parameters to define the minimum indexed word length.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_43\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) min_word_len = '4'\", true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Indexer with Custom Configuration File in Shell\nDESCRIPTION: Uses the --config option to specify a custom configuration file for the indexer. This is useful in shared environments or when running multiple instances on a single server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --config /home/myuser/manticore.conf mytable\n```\n\n----------------------------------------\n\nTITLE: Joining Clusters with Explicit Node Configuration\nDESCRIPTION: Demonstrates joining a cluster with explicit node specifications, useful for nodes in different network segments or data centers to minimize traffic between nodes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Joining_a_replication_cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nJOIN CLUSTER click_query 'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312' as nodes\n```\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"JOIN CLUSTER click_query 'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312' as nodes\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$params = [\n  'cluster' => 'posts',\n  'body' => [\n      'nodes' => 'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312'\n  ]\n];\n$response = $client->cluster->join($params);\n```\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('JOIN CLUSTER click_query \\'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312\\' as nodes')\n```\n\nLANGUAGE: Javascript\nCODE:\n```\nres = await utilsApi.sql('JOIN CLUSTER click_query \\'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312\\' as nodes');\n```\n\nLANGUAGE: Java\nCODE:\n```\nutilsApi.sql(\"JOIN CLUSTER click_query 'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312' as nodes\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"JOIN CLUSTER click_query 'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312' as nodes\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"JOIN CLUSTER click_query 'clicks_mirror1:9312;clicks_mirror2:9312;clicks_mirror3:9312' as nodes\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Freezing a Table in Manticore Search (SQL)\nDESCRIPTION: The FREEZE command prepares a real-time/plain table for secure backup by deactivating compaction, transferring RAM chunk to disk, flushing attributes, and disabling implicit modifications. It returns a list of table files for backup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Freezing_a_table.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nFREEZE tbl1[, tbl2, ...]\n```\n\nLANGUAGE: sql\nCODE:\n```\nFREEZE t;\n```\n\n----------------------------------------\n\nTITLE: SQL Response for Complex Conditional Deletion in Manticore Search\nDESCRIPTION: Shows the response from Manticore Search after executing a complex conditional DELETE statement in SQL, including the number of affected rows and the remaining records in the table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nQuery OK, 4 rows affected (0.00 sec)\n\n+------+------+-------------+------+\n| id   | gid  | mva1        | mva2 |\n+------+------+-------------+------+\n|  101 | 1001 | 101,202     | 101  |\n|  102 | 1002 | 102,203     | 102  |\n|  104 | 1004 | 104,204,205 | 104  |\n|  105 | 1005 | 105,206     | 105  |\n+------+------+-------------+------+\n6 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: SQL Export Ranking Example\nDESCRIPTION: Example demonstrating the export ranker usage with weight and rank factors display.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *, WEIGHT(), RANKFACTORS()\n    FROM myindex\n    WHERE MATCH('dog')\n    OPTION ranker=export('100*bm25');\n```\n\n----------------------------------------\n\nTITLE: Setting Document Storage Block Size in Manticore Search\nDESCRIPTION: Controls the size of blocks used for document storage. Larger blocks improve compression ratios while smaller blocks provide faster access to document text. Used with stored_fields or stored_only_fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_52\n\nLANGUAGE: ini\nCODE:\n```\ndocstore_block_size = 32k\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Log Path\nDESCRIPTION: Specifies directory path for binary log files used for crash recovery and attribute updates.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nbinlog_path = # disable logging\nbinlog_path = /var/lib/manticore/data # /var/lib/manticore/data/binlog.001 etc will be created\n```\n\n----------------------------------------\n\nTITLE: Generating Self-signed CA Certificate\nDESCRIPTION: Command to create a self-signed CA certificate valid for 365 days using the CA private key.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/SSL.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -x509 -nodes -days 365 -key ca-key.pem -out ca-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Autorun Script\nDESCRIPTION: Execute the MySQL autorun script to prepare the build environment after patching or modifying source files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh BUILD/autorun.sh\n```\n\n----------------------------------------\n\nTITLE: Installing ManticoreSearch using Homebrew - Bash\nDESCRIPTION: This snippet demonstrates how to install the stable version of ManticoreSearch and its extra components on MacOS via the Homebrew package manager. No additional dependencies are required unless integration with external databases is desired. The commands should be run in a terminal with Homebrew already installed. After installation, configuration files are located in the specified default paths.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/MacOS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install manticoresoftware/tap/manticoresearch manticoresoftware/tap/manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Setting Document Storage Compression Level in Manticore Search\nDESCRIPTION: Controls the compression level when using lz4hc compression for document storage. Higher values provide better compression at the cost of compression speed. Only applicable with lz4hc compression.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_54\n\nLANGUAGE: ini\nCODE:\n```\ndocstore_compression_level = 12\n```\n\n----------------------------------------\n\nTITLE: Setting Join Cache Size\nDESCRIPTION: Configures the cache size for storing JOIN query results to improve performance on repeated joins.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\njoin_cache_size = 10M\n```\n\n----------------------------------------\n\nTITLE: PHP Truncation Response\nDESCRIPTION: Example response from a successful PHP truncate operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nArray(\n    [total] => 0\n    [error] => \n    [warning] => \n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Copyright Notice for Bison\nDESCRIPTION: Shows the copyright notice for Bison, which is used during the compilation process of Manticore Search. It includes information about the GNU General Public License and a special exception for parser skeletons.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nA Bison parser, made by GNU Bison 3.8.2.\n\nBison interface for Yacc-like parsers in C\n\nCopyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,\nInc.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.  */\n\nAs a special exception, you may create a larger work that contains\npart or all of the Bison parser skeleton and distribute that work\nunder terms of your choice, so long as that work isn't itself a\nparser generator using the skeleton or a modified version thereof\nas a parser skeleton.  Alternatively, if you modify or redistribute\nthe parser skeleton itself, you may (at your option) remove this\nspecial exception, which will cause the skeleton and the resulting\nBison output files to be licensed under the GNU General Public\nLicense without this special exception.\n\nThis special exception was added by the Free Software Foundation in\nversion 2.2 of Bison.  \n\nDO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,\nespecially those whose name start with YY_ or yy_.  They are\nprivate implementation details that can be changed or removed.\n```\n\n----------------------------------------\n\nTITLE: Merging Tables with Indexer in Manticore Search (Bash)\nDESCRIPTION: Basic command syntax for merging two tables using the indexer tool in Manticore Search. It allows specifying source and destination indexes, with options for rotation and dropping the source index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Merging_tables.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u manticore indexer --merge DSTINDEX SRCINDEX [--rotate] [--drop-src]\n```\n\n----------------------------------------\n\nTITLE: Document Delete Operation\nDESCRIPTION: Example of deleting documents based on a condition using SQL syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Quick_start_guide.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\ndelete from products where price < 10;\n```\n\n----------------------------------------\n\nTITLE: Creating Buddy Plugins using CREATE BUDDY PLUGIN Command (SQL)\nDESCRIPTION: Demonstrates installation of a Buddy plugin with a streamlined SQL command in Manticore Search. This command simplifies the syntax by allowing direct use of CREATE BUDDY PLUGIN to specify the package and version, targeting plugins available via Packagist. The plugin will be downloaded to the plugin directory and enabled automatically. Requires the 'Manticore Buddy' tool and the correct permissions for automatic installation and activation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Creating_a_plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE BUDDY PLUGIN <username/package name on https://packagist.org/> VERSION <package version>\n```\n\n----------------------------------------\n\nTITLE: HTTP API Truncation Response\nDESCRIPTION: Example JSON response from the HTTP API after a successful TRUNCATE operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n{\n\"total\":0,\n\"error\":\"\",\n\"warning\":\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Fibonacci Numbers with FIBONACCI in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns the N-th Fibonacci number for a given integer argument N. Results are computed using 32-bit integer arithmetic, so values for N >= 48 wrap around modulo 2^32. It only accepts non-negative integers and returns potential overflowed results for high N.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nFIBONACCI(n)\n```\n\n----------------------------------------\n\nTITLE: Limiting Persistent Connections in INI Configuration\nDESCRIPTION: This configuration determines the maximum number of persistent connections for distributed tables to remote agents, which can prevent overloading the server. It's advisable to set it according to `max_connections` in the agent's setup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\npersistent_connections_limit = 29 # assume that each host of agents has max_connections = 30 (or 29).\n```\n\n----------------------------------------\n\nTITLE: Comparing Floating-Point Numbers in JSON API\nDESCRIPTION: Shows how to compare floating-point numbers using an expression in the JSON API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_69\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"products\",\n  \"query\": { \"match_all\": {} } },\n  \"expressions\": { \"eps\": \"abs(a-b)\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (SQL)\nDESCRIPTION: This SQL statement creates a table named 'products' with text and float columns, enabling keyword expansion.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) expand_keywords = '1'\n```\n\n----------------------------------------\n\nTITLE: Converting Tables with Custom Output Directory\nDESCRIPTION: Command to convert all tables and save them to a different output directory.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Migration_from_Sphinx.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n$ index_converter --config /home/myuser/manticore.conf --all --output-dir /new/path\n```\n\n----------------------------------------\n\nTITLE: Setting Disk Chunk Flush Write Timeout\nDESCRIPTION: Defines wait time before auto-flushing RAM chunk to disk after last write.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\ndiskchunk_flush_write_timeout = 60s\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Rules\nDESCRIPTION: Character mapping rules defining conversions between Unicode code points, primarily for case folding and normalization. Includes mappings for Latin, Greek and Cyrillic characters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/non_cont.txt#2025-04-22_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\nU+0030..U+0039,\nU+0041..U+005A->U+0061..U+007A,\nU+0061..U+007A,\nU+00AA,\nU+00BA,\nU+00C0->U+0061,\nU+00C1->U+0061,\n[...remaining mappings...]\n```\n\n----------------------------------------\n\nTITLE: UDF Function Structure Pattern\nDESCRIPTION: Standard function pattern for UDFs showing init, main function, and deinit components. Used for implementing the complete lifecycle of a UDF in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF.md#2025-04-22_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ntestfunc_init()    // Called once during query initialization\ntestfunc()        // Called for each eligible row\ntestfunc_deinit() // Called once when query processing ends\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting into Percolate Table Using Bash and SQL - SQL\nDESCRIPTION: This snippet demonstrates how to drop and create a Manticore percolate table, then insert 1 million rules in 1000 batches of 1000 using Bash scripting together with embedded SQL statements. It starts by dropping the table if it exists, creating the new percolate table, measuring start and end times, and using a nested loop to batch-insert rows. The inserted data includes text, JSON, and string fields. A final SQL query counts the number of inserted rows. Requires: MySQL client, Manticore Search running on port 9306. Batch sizes and values are hardcoded and customizable.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nroot@perf3 ~ # mysql -P9306 -h0 -e \"drop table if exists pq; create table pq (f text, f2 text, j json, s string) type='percolate';\"; date; for m in `seq 1 1000`; do (echo -n \"insert into pq (id,query,filters,tags) values \"; for n in `seq 1 1000`; do echo -n \"(0,'@f (cat | ( angry dog ) | (cute mouse)) @f2 def', 'j.json.language=\\\"en\\\"', '{\\\"tag1\\\":\\\"tag1\\\",\\\"tag2\\\":\\\"tag2\\\"}')\"; [ $n != 1000 ] && echo -n \",\"; done; echo \";\")|mysql -P9306 -h0; done; date; mysql -P9306 -h0 -e \"select count(*) from pq\"\n```\n\n----------------------------------------\n\nTITLE: Removing Old Manticore Packages on RHEL-based Systems\nDESCRIPTION: Command to safely remove existing Manticore packages on RHEL-based systems before upgrading to a newer version, avoiding conflicts with the updated package structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum --setopt=tsflags=noscripts remove manticore*\n```\n\n----------------------------------------\n\nTITLE: Installing MariaDB Connector on CentOS Stream 8 (Bash)\nDESCRIPTION: Installs the MariaDB C connector package using `dnf` on CentOS Stream 8. This might be necessary to resolve the `sql_connect: MySQL source wasn't initialized` error when indexing data from a MySQL source.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/RHEL_and_Centos.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndnf install mariadb-connector-c\n```\n\n----------------------------------------\n\nTITLE: Manual Commit Example in Manticore Search\nDESCRIPTION: Shows behavior with autocommit disabled. Insertions are not visible until explicitly committed, even in the same session.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nset autocommit=0;\nQuery OK, 0 rows affected (0.00 sec)\n\ninsert into indexrt (id, content, title, channel_id, published) values (3, 'aa', 'bb', 1, 1);\nQuery OK, 1 row affected (0.00 sec)\n\ninsert into indexrt (id, content, title, channel_id, published) values (4, 'aa', 'bb', 1, 1);\nQuery OK, 1 row affected (0.00 sec)\n\nselect * from indexrt where id=3;\nEmpty set (0.01 sec)\n\nselect * from indexrt where id=4;\nEmpty set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing MySQL\nDESCRIPTION: Compile and install MySQL with the SphinxSE storage engine included.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variable in Manticore Search\nDESCRIPTION: This snippet demonstrates how to set a global variable 'myvar' to the value 'myvalue' using the SET GLOBAL syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Setting_variables_online.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL myvar='myvalue'\n```\n\n----------------------------------------\n\nTITLE: Killing Long-running Query\nDESCRIPTION: SQL command to terminate a long-running SELECT query\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nKILL\n```\n\n----------------------------------------\n\nTITLE: PHP Response Format for Document Deletion in Manticore Search\nDESCRIPTION: Shows the response format when deleting a document in Manticore Search using PHP. The response includes the index name, document ID, found status, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nArray(\n    [_index] => test\n    [_id] => 1\n    [found] => true\n    [result] => deleted\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Expanded Keywords in Manticore Search (Java)\nDESCRIPTION: This Java code creates a table named 'products' with text and float columns, enabling keyword expansion using the Manticore Search Java client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) expand_keywords = '1'\", true);\n```\n\n----------------------------------------\n\nTITLE: Setting Attribute Flush Period in Manticore Search INI\nDESCRIPTION: Configuration setting to control how often document attribute updates are written to disk. The value is specified in seconds and defaults to 0 (disabled).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nattr_flush_period = 900 # persist updates to disk every 15 minutes\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words via JSON API\nDESCRIPTION: Uses the JSON API to create a table with bigram indexing. It sets the same configuration as the SQL example, using 'first_freq' mode and specifying frequent words.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_73\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'first_freq'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with hitless_words using Java Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Java client library's `sql` method (`utilsApi`). This creates the 'products' table with the `hitless_words` option set to 'all'. The boolean `true` likely indicates an option, possibly for returning results or synchronous execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_95\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) hitless_words = 'all'\", true);\n```\n\n----------------------------------------\n\nTITLE: SQL Syntax for DROP TABLE in Manticore Search\nDESCRIPTION: The syntax for the DROP TABLE statement in SQL, showing the optional IF EXISTS clause that can be used to conditionally delete tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE [IF EXISTS] table_name\n```\n\n----------------------------------------\n\nTITLE: Using HISTOGRAM() Function for Price Range Grouping in Manticore SQL\nDESCRIPTION: Illustrates the usage of the HISTOGRAM() function to create price range buckets for grouping and aggregation in a Manticore SQL query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Arrays_and_conditions_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*),\nHISTOGRAM(price, {hist_interval=100}) as price_range\nFROM facets\nGROUP BY price_range ORDER BY price_range ASC;\n```\n\n----------------------------------------\n\nTITLE: Indextool Usage Command\nDESCRIPTION: Command syntax for indextool utility used for table maintenance and debugging\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/References.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nindextool <command> [options]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in Rust\nDESCRIPTION: Uses the Rust API to create a table with a text field that is only indexed. The field will be available for full-text searching but not stored for retrieval.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text indexed)\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Filtering Agent Status with LIKE Pattern in SQL\nDESCRIPTION: Shows how to filter agent status results using SQL LIKE pattern matching. Focuses on retrieving specific metrics matching the pattern.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSHOW AGENT STATUS LIKE '%5period%msec%';\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW THREADS via Python-asyncio\nDESCRIPTION: Example of using the Manticore Search Python client with asyncio to execute the SHOW THREADS command asynchronously.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport manticoresearch\nconfig = manticoresearch.Configuration(\n            host = \"http://127.0.0.1:9308\"\n            )\nclient = manticoresearch.ApiClient(config)\nutilsApi = manticoresearch.UtilsApi(client)\nres = await utilsApi.sql('SHOW THREADS')\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Python-asyncio Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using Python with asyncio. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\n{\n    'error': None,\n    'items': [{u'delete': {u'table': test', u'deleted': 2}}]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Read Buffer Size in Manticore Search (INI)\nDESCRIPTION: Sets the per-keyword read buffer size for document lists. Default is 256K, minimum 8K. Larger buffers may increase RAM use but decrease I/O time. Can be overridden per-table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_50\n\nLANGUAGE: ini\nCODE:\n```\nread_buffer_docs = 128K\n```\n\n----------------------------------------\n\nTITLE: Stack Mock Configuration Function\nDESCRIPTION: Function that configures stack mock settings based on processor type, compiler, and version. Used to set specific compile definitions for different build configurations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (stackmock processors compiler versions config values)\n\tif (NOT CMAKE_SYSTEM_PROCESSOR IN_LIST processors)\n\t\treturn()\n\tendif()\n\n\tif (NOT CMAKE_CXX_COMPILER_ID STREQUAL \"${compiler}\")\n\t\treturn()\n\tendif()\n\n\tif (NOT CMAKE_CXX_COMPILER_VERSION IN_LIST versions)\n\t\treturn()\n\tendif()\n\n\tstring ( TOUPPER ${config} CONFIGUPPER )\n\tdiags ( \"Set ${values} for ${CMAKE_SYSTEM_PROCESSOR}, ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} config ${config}\")\n\tset_source_files_properties ( stackmock.cpp PROPERTIES COMPILE_DEFINITIONS_${CONFIGUPPER} \"${values}\" )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Verifying SphinxSE Installation\nDESCRIPTION: SQL command to check if SphinxSE has been successfully installed in MySQL by displaying all available storage engines.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nmysql> show engines;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Blend Mode using Python Asyncio (Python-asyncio)\nDESCRIPTION: This Python-asyncio example illustrates how to create a table with blend_mode settings using an asynchronous approach in Manticoresearch.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_30\n\nLANGUAGE: Python-asyncio\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) blend_mode = \\'trim_tail, skip_pure\\' blend_chars = \\' +, &\\'')\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Batch Queries Limit\nDESCRIPTION: Defines the maximum number of queries allowed in a single batch operation. Default is 32, set to 0 to disable the limit check.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\nmax_batch_queries = 256\n```\n\n----------------------------------------\n\nTITLE: Setting Expansion Merge Threshold for Hits\nDESCRIPTION: Defines the maximum number of hits in expanded keywords that allows merging for optimization.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nexpansion_merge_threshold_hits = 512\n```\n\n----------------------------------------\n\nTITLE: I/O Operations Limit Configuration\nDESCRIPTION: Setting for maximum I/O operations per second for throttling.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nmax_iops = 40\n```\n\n----------------------------------------\n\nTITLE: Search Query Results\nDESCRIPTION: Multiple search query results showing matched documents with weights, IDs, group IDs and tag values. Includes different query variations and grouping options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/smoke_ref.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nQuery 'is' retrieved 4 of 4 matches.\nQuery stats:\n\t'is' found 4 times in 4 documents\n\nMatches:\n1. doc_id=1, weight=1304, idd=1, group_id=1, tag=(1,3,5,7), tag2=(1,3,5,7), tag64=(1,3,5,7)\n2. doc_id=2, weight=1304, idd=2, group_id=1, tag=(2,4,6), tag2=(2,4,6), tag64=(2,4,6)\n3. doc_id=3, weight=1304, idd=3, group_id=2, tag=(15), tag2=(15), tag64=(15)\n4. doc_id=4, weight=1304, idd=4, group_id=2, tag=(7,40), tag2=(7,40), tag64=(7,40)\n```\n\n----------------------------------------\n\nTITLE: Executing FLUSH ATTRIBUTES Command in Manticore Search SQL\nDESCRIPTION: The FLUSH ATTRIBUTES command is used to flush all in-memory attribute updates in active disk tables to disk. It returns a tag identifying the on-disk state.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_attributes.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nFLUSH ATTRIBUTES\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Source with Schema in Manticore Search\nDESCRIPTION: This configuration example demonstrates how to define an XML source in Manticore Search with the schema specified in the configuration. It declares fields and attributes, including their types and properties.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_XML_streams.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nsource xml_test_2\n{\n    type = xmlpipe2\n    xmlpipe_command = cat /tmp/products_today.xml\n    xmlpipe_field = subject\n    xmlpipe_field = content\n    xmlpipe_attr_timestamp = published\n    xmlpipe_attr_uint = author_id:16\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of FLUSH ATTRIBUTES in Manticore Search SQL\nDESCRIPTION: This example demonstrates updating an attribute and then using FLUSH ATTRIBUTES to save the changes to disk. The command returns a tag number indicating the number of disk attribute saves performed since server startup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_attributes.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> UPDATE testindex SET channel_id=1107025 WHERE id=1;\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> FLUSH ATTRIBUTES;\n+------+\n| tag  |\n+------+\n|    1 |\n+------+\n1 row in set (0.19 sec)\n```\n\n----------------------------------------\n\nTITLE: API Method to Set Maximum Query Time\nDESCRIPTION: This API call sets a maximum query time, analogous to SQL’s OPTION clause, to control query execution duration programmatically.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_42\n\nLANGUAGE: api\nCODE:\n```\nSetMaxQueryTime()\n```\n\n----------------------------------------\n\nTITLE: Java Response for Percolate Query Document Matching\nDESCRIPTION: Shows the Java response format when matching documents to percolate queries. The response is a SearchResponse object with nested hits containing document slot information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_63\n\nLANGUAGE: Java\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 2\n        maxScore: 1\n        hits: [{_index=products, _type=doc, _id=2811045522851234133, _score=1, _source={query={ql=@title bag}}, fields={_percolator_document_slot=[2]}}, {_index=products, _type=doc, _id=2811045522851234135, _score=1, _source={query={ql=@title shoes}}, fields={_percolator_document_slot=[1]}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Attribute\nDESCRIPTION: Configuration for declaring a timestamp attribute. Timestamp attributes are used for storing date and time values for filtering and sorting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\nrt_attr_timestamp = date_added\n```\n\n----------------------------------------\n\nTITLE: Setting Manticore Buddy Path\nDESCRIPTION: Configures path to Manticore Buddy binary, useful for debug mode or custom plugin development.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nbuddy_path = manticore-executor -n /usr/share/manticore/modules/manticore-buddy/src/main.php --debug # use the default Manticore Buddy in Linux, but run it in debug mode\nbuddy_path = manticore-executor -n /opt/homebrew/share/manticore/modules/manticore-buddy/bin/manticore-buddy/src/main.php --debug # use the default Manticore Buddy in MacOS arm64, but run it in debug mode\nbuddy_path = manticore-executor -n /Users/username/manticoresearch-buddy/src/main.php --debug # use Manticore Buddy from a non-default location\nbuddy_path = # disables Manticore Buddy\nbuddy_path = manticore-executor -n /Users/username/manticoresearch-buddy/src/main.php --debugv --skip=manticoresoftware/buddy-plugin-replace # debugv - enables more detailed logging, --skip - skips plugins\n```\n\n----------------------------------------\n\nTITLE: Memory Limit Configuration\nDESCRIPTION: RAM usage limit settings for plain table building with different unit examples.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\nmem_limit = 256M\n# mem_limit = 262144K # same, but in KB\n# mem_limit = 268435456 # same, but in bytes\n```\n\n----------------------------------------\n\nTITLE: Class Declaration Layout in C++\nDESCRIPTION: Illustrates the standard class declaration structure with proper member organization and accessibility sections.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-coding-standard.txt#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nclass SampleClass_c\n{\npublic:\n\t\t\tSampleClass_c ();\n\t\t\t~SampleClass_c ();\n\n\tvoid\tDoThings ();\n\nprotected:\n\tint\t\tm_iLocalState;\n\tbool\tm_bSomeFlag;\n\n\tint\t\tm_iAnotherLogicalBlock;\n\tint\t\tm_iOfMemberVariables;\n\n\tvoid\tHelper1();\n\tvoid\tHelper2();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Indexed-Only Text Field in JavaScript\nDESCRIPTION: Uses the JavaScript API to create a table with a text field that is only indexed. The field can be searched but its content won't be stored for retrieval.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text indexed)');\n```\n\n----------------------------------------\n\nTITLE: Describing Table Schema Changes in Manticore 3.4.2 vs 3.5.0\nDESCRIPTION: Demonstrates the change in field type naming from 'field' to 'text' for full-text fields in table schema descriptions between versions 3.4.2 and 3.5.0.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nmysql> describe t;\n+-------+--------+----------------+\n| Field | Type   | Properties     |\n+-------+--------+----------------+\n| id    | bigint |                |\n| f     | field  | indexed stored |\n+-------+--------+----------------+\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> describe t;\n+-------+--------+----------------+\n| Field | Type   | Properties     |\n+-------+--------+----------------+\n| id    | bigint |                |\n| f     | text   | indexed stored |\n+-------+--------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Pulling Manticore Search Docker Image using Bash\nDESCRIPTION: This command utilizes the Docker Command Line Interface (CLI) to download the latest official Manticore Search image, tagged as `manticoresearch/manticore`, from the Docker Hub repository. Requires Docker to be installed and running. Executing this command fetches the image layers and makes the image available locally for creating and running Manticore Search containers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: Indexer Command Syntax - Manticore Search\nDESCRIPTION: Basic command syntax for the Manticore indexer tool that builds search indices. Accepts multiple index names as arguments along with various options for controlling the indexing process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/References.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nindexer [OPTIONS] [indexname1 [indexname2 [...]]]\n```\n\n----------------------------------------\n\nTITLE: Quiet Indexing with Table Rotation in Manticore\nDESCRIPTION: Demonstrates quiet indexing with table rotation, suppressing output unless there's an error. This is useful for cron jobs or scripted tasks.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --rotate --all --quiet\n```\n\n----------------------------------------\n\nTITLE: Configuring Kibana Connection to Manticore\nDESCRIPTION: Configuration setting in kibana.yml to connect Kibana to Manticore Search instance. Sets the Elasticsearch hosts parameter to point to the Manticore HTTP API endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kibana.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nelasticsearch.hosts: [\"http://localhost:9308\"]\n```\n\n----------------------------------------\n\nTITLE: Setting and Reverting Custom Indexer Arguments in Manticore Search\nDESCRIPTION: Demonstrates how to set custom startup options for the Indexer using systemctl, and how to revert these changes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl set-environment INDEXER_ARGS='--quiet'\nsystemctl restart manticore-indexer\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl set-environment INDEXER_ARGS=''\nsystemctl restart manticore-indexer\n```\n\n----------------------------------------\n\nTITLE: Building Manticore Search Package\nDESCRIPTION: These bash commands show the process of building a Manticore Search package within the Docker container. It involves creating a build directory, running CMake with specific options, and building the package target.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/sources\nmkdir build && cd build\ncmake -DPACK=1 ..\ncmake --build . --target package\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using JSON. The response includes details about the number of documents deleted and the operation status.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"items\":\n   [\n      {\n         \"bulk\":\n         {\n            \"table\":\"test\",\n            \"_id\":0,\n            \"created\":0,\n            \"deleted\":2,\n            \"updated\":0,\n            \"result\":\"created\",\n            \"status\":201\n         }\n      }\n   ],\n   \"errors\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Highlighting in Rust\nDESCRIPTION: Demonstrates how to perform a search query with highlighting in Rust using Manticore Search. Sets up match filters and highlight configuration with custom pre and post tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_64\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default(),\n};\nlet highlight_fields [String; 2] = [\"content\".to_string(), \"title\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    pre_tags: Some(\"before_\".to_string()),\n    post_tags: Some(\"_after\".to_string()),\n    ..Default::default(),\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Performance Statistics in Manticore Search\nDESCRIPTION: SQL command to display detailed query time statistics using SHOW STATUS with stats_ms filter. Shows average, minimum, maximum and percentile values for different query types over various time windows.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATUS LIKE '%stats_ms%';\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Blend Mode via CONFIG File (INI)\nDESCRIPTION: An INI snippet for specifying blend_mode and blend_chars configurations directly in the table definition within a CONFIG file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  blend_mode = trim_tail, skip_pure\n  blend_chars = +, &\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Manticore Backup List Command\nDESCRIPTION: Command to list available backups using manticore-backup tool\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmanticore-backup --backup-dir=/mnt/backup/ --restore\n```\n\n----------------------------------------\n\nTITLE: Sample dpkg.log Data Format\nDESCRIPTION: Example of the raw log data format from Debian package manager (dpkg.log) that will be processed by Logstash.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Logstash.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2023-05-31 10:42:55 status triggers-awaited ca-certificates-java:all 20190405ubuntu1.1\n2023-05-31 10:42:55 trigproc libc-bin:amd64 2.31-0ubuntu9.9 <none>\n2023-05-31 10:42:55 status half-configured libc-bin:amd64 2.31-0ubuntu9.9\n2023-05-31 10:42:55 status installed libc-bin:amd64 2.31-0ubuntu9.9\n2023-05-31 10:42:55 trigproc systemd:amd64 245.4-4ubuntu3.21 <none>\n```\n\n----------------------------------------\n\nTITLE: Rotating Tables in Manticore Search\nDESCRIPTION: Shows how to use the --rotate option for rotating tables, which creates a second table parallel to the first and notifies searchd to switch to the new tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --rotate --all\n```\n\n----------------------------------------\n\nTITLE: Setting Disk Chunk Flush Search Timeout\nDESCRIPTION: Controls timeout for preventing auto-flush of RAM chunk without recent searches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\ndiskchunk_flush_search_timeout = 120s\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with Java in Manticore Search\nDESCRIPTION: This Java snippet demonstrates how to construct and execute a percolate query using the Manticore Search Java client. It creates a PercolateRequest object with nested HashMaps and ArrayLists to represent the query structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_88\n\nLANGUAGE: java\nCODE:\n```\npercolateRequest = new PercolateRequest();\nquery = new HashMap<String,Object>(){{\n    put(\"percolate\",new HashMap<String,Object >(){{\n        put(\"documents\", new ArrayList<Object>(){{\n            add(new HashMap<String,Object >(){{\n                put(\"title\",\"angry test\");\n                put(\"gid\",3);\n            }});\n            add(new HashMap<String,Object >(){{\n                put(\"title\",\"filter test doc2\");\n                put(\"gid\",13);\n            }});\n        }});\n    }});\n}};\npercolateRequest.query(query);\nsearchApi.percolate(\"pq\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: SQL Response for Price Range Faceting\nDESCRIPTION: The response shows both the search results and the facet counts grouped by the defined price ranges. The price_range column indicates which interval each product falls into, with values 0 through 4.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+-------------+\n| id   | price | brand_id | title               | brand_name  | property    | j                                     | categories | price_range |\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+-------------+\n|    1 |   306 |        1 | Product Ten Three   | Brand One   | Six_Ten     | {\"prop1\":66,\"prop2\":91,\"prop3\":\"One\"} | 10,11      |           1 |\n...\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+-------------+\n20 rows in set (0.00 sec)\n\n+-------------+----------+\n| price_range | count(*) |\n+-------------+----------+\n|           0 |     1885 |\n|           3 |     1973 |\n|           4 |     2100 |\n|           2 |     1999 |\n|           1 |     2043 |\n+-------------+----------+\n5 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Distributed PQ Table and Inserting Queries in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a distributed PQ table consisting of two local PQ tables, and how to insert queries into these tables. It sets up the structure for sharded percolate querying.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_93\n\nLANGUAGE: sql\nCODE:\n```\ncreate table products1(title text, color string) type='pq';\ncreate table products2(title text, color string) type='pq';\ncreate table products_distributed type='distributed' local='products1' local='products2';\n\nINSERT INTO products1(query) values('@title bag');\nINSERT INTO products1(query,filters) values('@title shoes', 'color=\\'red\\'');\nINSERT INTO products2(query,filters) values('@title shoes', 'color in (\\'blue\\', \\'green\\')');\n```\n\n----------------------------------------\n\nTITLE: Stopping Manticore using systemd in Linux\nDESCRIPTION: Command to stop the Manticore Search service using systemd. This is the recommended way to stop Manticore on systems that use systemd.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop manticore\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Stack Size\nDESCRIPTION: Configures maximum stack size for job coroutines. Default is 128K.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_70\n\nLANGUAGE: ini\nCODE:\n```\nthread_stack = 8M\n```\n\n----------------------------------------\n\nTITLE: SQL Basic Search Options\nDESCRIPTION: Examples of basic search query options including geo distance, maxmatches, cutoff, query time limits, grouping and sorting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\n... WHERE query='test;floatrange=@geodist,0,1000;';\n... WHERE query='test;maxmatches=2000;';\n... WHERE query='test;cutoff=10000;';\n... WHERE query='test;maxquerytime=1000;';\n... WHERE query='test;groupby=day:published_ts;';\n... WHERE query='test;groupby=attr:group_id;';\n... WHERE query='test;groupsort=@count desc;';\n```\n\n----------------------------------------\n\nTITLE: Configuring Old File Unlinking\nDESCRIPTION: Controls whether to unlink .old table copies after successful rotation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_71\n\nLANGUAGE: ini\nCODE:\n```\nunlink_old = 0\n```\n\n----------------------------------------\n\nTITLE: File Field Buffer Configuration\nDESCRIPTION: Setting for maximum file field adaptive buffer size with default of 8MB.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nmax_file_field_buffer = 128M\n```\n\n----------------------------------------\n\nTITLE: SQL Command Changes\nDESCRIPTION: Updated SQL command syntax changes where ALTER RTINDEX is renamed to ALTER TABLE and TRUNCATE RTINDEX is renamed to TRUNCATE TABLE.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE\nTRUNCATE TABLE\n```\n\n----------------------------------------\n\nTITLE: Querying Threads Info - Basic Usage\nDESCRIPTION: Basic examples of retrieving thread information using SHOW THREADS command across different languages. Returns details about active threads including TID, Name, Protocol, State, and other metadata.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"SHOW THREADS\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"SHOW THREADS\", Some(true)).await;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql('SHOW THREADS');\n```\n\nLANGUAGE: go\nCODE:\n```\napiClient.UtilsAPI.Sql(context.Background()).Body(\"SHOW THREADS\").Execute()\n```\n\n----------------------------------------\n\nTITLE: .NET MySQL Connector String Configuration\nDESCRIPTION: Connection string for .NET MySQL connector with batch operations enabled. The 'Allow Batch=True' option is required for using multistatements like 'SELECT...;SHOW META'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nServer=127.0.0.1;Port=9306;Database=somevalue;Uid=somevalue;Pwd=;Allow Batch=True;\n```\n\n----------------------------------------\n\nTITLE: Executing Percolate Query with C# in Manticore Search\nDESCRIPTION: This C# snippet shows how to use the Manticore Search C# client to perform a percolate query. It constructs the query using dictionaries and lists, then creates a PercolateRequest object to send the query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_89\n\nLANGUAGE: clike\nCODE:\n```\nvar doc1 = new Dictionary<string, Object>();\ndoc1.Add(\"title\",\"angry test\");\ndoc1.Add(\"gid\",3);\nvar doc2 = new Dictionary<string, Object>();\ndoc2.Add(\"title\",\"filter test doc2\");\ndoc2.Add(\"gid\",13);\nvar docs = new List<Object> {doc1, doc2};\nDictionary<string, Object> percolateDoc = new Dictionary<string, Object> {{ \"documents\", docs }}; \nDictionary<string, Object> query = new Dictionary<string, Object> {{ \"percolate\", percolateDoc }}; \nPercolateRequest percolateRequest = new PercolateRequest(query=query);\nsearchApi.Percolate(\"pq\",percolateRequest);\n```\n\n----------------------------------------\n\nTITLE: Filtering SHOW META Output with LIKE in Manticore Search\nDESCRIPTION: Using the LIKE clause with SHOW META to filter metadata variables by pattern, following standard SQL wildcard syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_META.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW META LIKE 'total%';\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Paths and Package Configuration in CMake\nDESCRIPTION: This snippet configures installation paths and rules for different platforms (Windows vs Unix-like systems). It sets up directory structures, file placement rules, and component packaging options for the CPack system.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file ( \"LICENSE\" \"${MANTICORE_BINARY_DIR}/LICENSE\" COPYONLY )\n\n# Common all-packages info\ninclude ( ${MANTICORE_SOURCE_DIR}/sphinxrev.cmake )\ninclude ( CommonInfo )\n\ninclude( builds/VersionDeps )\nmessage(\"EXECUTOR image: manticoresearch/manticore-executor:${EXECUTOR_VERNUM}\")\n\n# set final paths for build\nset ( only_set_paths ON )\ninclude ( SetBuildType )\n\ndiag ( installed )\nif (NOT installed) # GNUInstallDirs wasn't yet included...\n\tinclude ( GNUInstallDirs )\n\tSET ( LOCALDATADIR \"${CMAKE_INSTALL_FULL_LOCALSTATEDIR}\" ) # will be used also in the app\n\tif (WIN32)\n\t\tset ( CMAKE_INSTALL_DOCDIR \"${CMAKE_INSTALL_DATAROOTDIR}/doc\" )\n\t\tSET ( FULL_SHARE_DIR \"${CMAKE_INSTALL_FULL_DATADIR}\" )\n\t\tSET ( CMAKE_INSTALL_FULL_LOCALLIBDIR \"usr/local/lib\" )\n\t\tinstall ( DIRECTORY api doc contrib DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT common )\n\t\tinstall ( FILES example.sql DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT tools )\n\t\tinstall ( DIRECTORY misc/stopwords DESTINATION ${CMAKE_INSTALL_DATADIR} COMPONENT common )\n\t\tinstall ( FILES LICENSE INSTALL manticore.conf.in DESTINATION . COMPONENT common )\n\t\tinstall ( DIRECTORY DESTINATION ${CMAKE_INSTALL_LOCALSTATEDIR}/log COMPONENT searchd )\n\t\tinstall ( DIRECTORY DESTINATION ${CMAKE_INSTALL_LOCALSTATEDIR} COMPONENT common )\n\t\tif (WITH_ICU AND WITH_ICU_FORCE_STATIC)\n\t\t\tinstall_icudata ( ${CMAKE_INSTALL_DATADIR}/icu )\n\t\tendif ()\n\telse ()\n\t\tset ( CMAKE_INSTALL_DOCDIR \"${CMAKE_INSTALL_DATAROOTDIR}/doc/manticore\" )\n\t\tconfigure_config ( lib/manticore )\n\t\tSET ( FULL_SHARE_DIR \"${CMAKE_INSTALL_FULL_DATADIR}/manticore\" )\n\t\tSET ( CMAKE_INSTALL_FULL_LOCALLIBDIR \"${CMAKE_INSTALL_FULL_LIBDIR}\" )\n\t\tinstall ( FILES ${MANTICORE_BINARY_DIR}/manticore.conf DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/manticoresearch COMPONENT common )\n\t\tinstall ( DIRECTORY misc/stopwords DESTINATION ${CMAKE_INSTALL_DATADIR}/manticore COMPONENT common )\n\t\tinstall ( DIRECTORY DESTINATION ${CMAKE_INSTALL_LOCALSTATEDIR}/lib/manticore COMPONENT common )\n\t\tinstall ( DIRECTORY DESTINATION ${CMAKE_INSTALL_RUNSTATEDIR}/manticore COMPONENT searchd )\n\t\tinstall ( DIRECTORY DESTINATION ${CMAKE_INSTALL_LOCALSTATEDIR}/log/manticore COMPONENT searchd )\n\t\tif (WITH_ICU AND WITH_ICU_FORCE_STATIC)\n\t\t\tinstall_icudata ( ${CMAKE_INSTALL_DATADIR}/manticore/icu )\n\t\tendif ()\n\tendif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Using FLOOR Function to Round Down in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns the largest integer not greater than the input argument. Commonly used to round down decimal numbers toward negative infinity, this function expects a numeric parameter and outputs an integer value.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nFLOOR(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Log Flush Strategy\nDESCRIPTION: Configuration example showing how to set the binary log flush strategy for maximum safety using binlog_flush directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...    \n    binlog_flush = 1 # ultimate safety, low write speed\n...\n```\n\n----------------------------------------\n\nTITLE: C# Response for Percolate Query Document Matching\nDESCRIPTION: Shows the C# response format when matching documents to percolate queries. The response is a SearchResponse object with fields containing document slot information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 2\n        maxScore: 1\n        hits: [{_index=products, _type=doc, _id=2811045522851234133, _score=1, _source={query={ql=@title bag}}, fields={_percolator_document_slot=[2]}}, {_index=products, _type=doc, _id=2811045522851234135, _score=1, _source={query={ql=@title shoes}}, fields={_percolator_document_slot=[1]}}]\n        aggregations: null\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Rules for Text Normalization\nDESCRIPTION: Defines character mapping rules in Unicode ranges for text normalization. Includes mappings for Latin, Greek, and Cyrillic characters with their corresponding simpler forms. Each line represents a mapping where characters are transformed into their base form.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/non_cjk.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nU+0030..U+0039,\nU+0041..U+005A->U+0061..U+007A,\nU+0061..U+007A,\nU+00AA,\nU+00BA,\nU+00C0->U+0061,\nU+00C1->U+0061,\nU+00C2->U+0061,\nU+00C3->U+0061,\nU+00C4->U+0061,\nU+00C5->U+0061,\nU+00C6->U+00E6\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Log File Size Limit\nDESCRIPTION: Controls maximum binary log file size, with default of 256MB. New log file created when size limit reached.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nbinlog_max_log_size = 16M\n```\n\n----------------------------------------\n\nTITLE: Library Target Configuration\nDESCRIPTION: Creates and configures the stemmer library target with include directories and debug properties.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libstemmer_c/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library ( stemmer ${snowball_sources} ${snowball_headers} )\ntarget_include_directories ( stemmer PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>$<INSTALL_INTERFACE:include/stemmer> )\n\nset_target_properties ( stemmer PROPERTIES\n\t\tDEBUG_POSTFIX d\n\t\tPDB_NAME stemmer\n\t\tPDB_NAME_DEBUG stemmerd\n\t\tCOMPILE_PDB_NAME stemmer\n\t\tCOMPILE_PDB_NAME_DEBUG stemmerd\n\t\t)\n```\n\n----------------------------------------\n\nTITLE: Document List Entry Format in Manticore's .spd File\nDESCRIPTION: Defines the structure of document list entries stored in the .spd file. Each entry contains information about a document matching a specific keyword, including row ID, optional inline attributes, hitlist offset, fields mask, and hits count.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ndoclist-entry =\n\trow-id : uint32, delta-encoded\n\t[ inline-attrs ]\n\thitlist-offset : offset-type, delta-encoded\n\tfields-mask : int32\n\thits-count : int32\n\ninline-attrs =\n\tattr-rowitems : rowitem-type[], delta-encoded\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Multi64 Data Type in Python\nDESCRIPTION: Shows how to create a table with a multi64 field in Python using SQL through the utils API. The multi64 type allows storing variable-length lists of 64-bit signed integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, values multi64))')\n```\n\n----------------------------------------\n\nTITLE: Debugging Meta Information in Manticore Search 5.0\nDESCRIPTION: SQL command to show additional debugging information including max_matches and pseudo sharding statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nDEBUG META\n```\n\n----------------------------------------\n\nTITLE: Recompiling Manticore Search (Single-Config)\nDESCRIPTION: Commands for recompiling Manticore Search in a single-config environment. This updates the build without changing the source or build paths.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncmake .\ncmake --build . --clean-first --config RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: UDF Return Type Examples in C\nDESCRIPTION: Examples of valid return types for Manticore UDFs. Functions can return INTEGER (sphinx_int64_t), BIGINT (sphinx_int64_t), FLOAT (double), or STRING (char*). For string returns, memory must be allocated using args->fn_malloc.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF.md#2025-04-22_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nsphinx_int64_t  // For INTEGER or BIGINT return type\ndouble          // For FLOAT return type\nchar*           // For STRING return type\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Query Cache Size\nDESCRIPTION: Configures the maximum memory allocation for query result caching. Setting it to zero disables the cache, impacting memory use and caching performance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\nqcache_max_bytes = 16777216\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS SQL Command Syntax\nDESCRIPTION: The SQL syntax for the SHOW THREADS command, which can be used with optional formatting parameters to control the output appearance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW THREADS [ OPTION columns=width[,format=sphinxql][,format=all] ]\n```\n\n----------------------------------------\n\nTITLE: Specifying Visual Studio Generator in CMake on Windows\nDESCRIPTION: Command to explicitly select Visual Studio 2019 as the generator for CMake on Windows systems when multiple Visual Studio versions are installed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncmake -G \"Visual Studio 16 2019\" ....\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Benchmark CMake Build\nDESCRIPTION: Sets up CMake configuration for Google Benchmark testing framework and creates a benchmark executable 'gmanticorebench' with multiple test source files. Includes necessary dependencies and links required libraries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/gbenches/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.11.0 )\n\n# Read docs at https://github.com/google/benchmark\ninclude ( GetGooglebench )\nif (NOT TARGET benchmark::benchmark_main)\n\treturn ()\nendif ()\n\nadd_executable ( gmanticorebench EXCLUDE_FROM_ALL\n\t\tgeodist.cpp\n\t\tfunctions.cpp\n\t\ttext.cpp\n\t\tjson.cpp\n\t\tcJSON_test.c\n\t\tlocators.cpp\n\t\tpopcount.cpp\n\t\tappendf.cpp\n\t\tmisc.cpp\n\t\tstripper.cpp\n\t\ttokenizer.cpp\n\t\texpressions.cpp\n\t\t)\n\ntarget_include_directories ( gmanticorebench PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( gmanticorebench\n\t\tlmanticore\n\t\tlsearchd\n\t\tstub_ssl\n\t\tbenchmark::benchmark )\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search Status\nDESCRIPTION: These commands demonstrate how to query the status of a running Manticore Search instance using the --status option, with and without specifying a configuration file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --status\n$ searchd --config /etc/manticoresearch/manticore.conf --status\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlighting in C# for Manticore Search\nDESCRIPTION: This C# snippet shows how to configure a search request with highlighting for Manticore Search. It includes setting up the query, specifying highlight fields, and configuring fragment size.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_85\n\nLANGUAGE: clike\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"one|robots\");\nvar highlight = new Highlight();\nhighlight.Fieldnames = new List<string> {\"content\", \"title\"};\nhighlight.FragmentSize = 100;\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Selecting with PACKEDFACTORS for Diagnostics or UDF Input (SQL)\nDESCRIPTION: Extracts all calculated weighting factors for each row using the PACKEDFACTORS() function in a SELECT query, enabling visibility into individual ranking features or preparing input for custom user defined functions (UDFs). Requires the 'expr' ranker and non-fullscan queries; returns data in a flat key-value string format. Mainly intended for internal diagnostics or as a UDF integration point.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Searching_and_ranking_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> SELECT id, PACKEDFACTORS() FROM test1\n    -> WHERE MATCH('test one') OPTION ranker=expr('1') \\G\n*************************** 1. row ***************************\n             id: 1\npackedfactors(): bm25=569, bm25a=0.617197, field_mask=2, doc_word_count=2,\n    field1=(lcs=1, hit_count=2, word_count=2, tf_idf=0.152356,\n        min_idf=-0.062982, max_idf=0.215338, sum_idf=0.152356, min_hit_pos=4,\n        min_best_span_pos=4, exact_hit=0, max_window_hits=1, min_gaps=2,\n        exact_order=1, lccs=1, wlccs=0.215338, atc=-0.003974),\n    word0=(tf=1, idf=-0.062982),\n    word1=(tf=1, idf=0.215338)\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Setting phrase_boundary in Manticore Search\nDESCRIPTION: Defines characters that should be treated as phrase boundaries to enable phrase-level searching through proximity queries. This setting works together with phrase_boundary_step to adjust word positions at phrase boundaries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_122\n\nLANGUAGE: ini\nCODE:\n```\nphrase_boundary = ., ?, !, U+2026 # horizontal ellipsis\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) phrase_boundary = '., ?, !, U+2026' phrase_boundary_step = '10'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) phrase_boundary = '., ?, !, U+2026' phrase_boundary_step = '10'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'phrase_boundary' => '., ?, !, U+2026',\n             'phrase_boundary_step' => '10'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) phrase_boundary = \\'., ?, !, U+2026\\' phrase_boundary_step = \\'10\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) phrase_boundary = \\'., ?, !, U+2026\\' phrase_boundary_step = \\'10\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) phrase_boundary = \\'., ?, !, U+2026\\' phrase_boundary_step = \\'10\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) phrase_boundary = '., ?, !, U+2026' phrase_boundary_step = '10'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) phrase_boundary = '., ?, !, U+2026' phrase_boundary_step = '10'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) phrase_boundary = '., ?, !, U+2026' phrase_boundary_step = '10'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  phrase_boundary = ., ?, !, U+2026\n  phrase_boundary_step = 10\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Settings\nDESCRIPTION: Configuration example for setting up replication ports and data directory in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Setting_up_replication.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n  listen   = 9312\n  listen   = 192.168.1.101:9360-9370:replication\n  data_dir = /var/lib/manticore/\n  ...\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search as a Windows Service\nDESCRIPTION: This command installs searchd as a Windows service using the --install option and specifies the configuration file location. Once installed, searchd can be managed through the Microsoft Management Console.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_11\n\nLANGUAGE: bat\nCODE:\n```\nC:\\WINDOWS\\system32> C:\\Manticore\\bin\\searchd.exe --install\n   --config C:\\Manticore\\manticore.conf\n```\n\n----------------------------------------\n\nTITLE: Implementing a Minimal Stateless UDF Function for Manticoresearch in C\nDESCRIPTION: This C snippet defines a minimal, stateless user-defined function called testfunc compatible with Manticoresearch's UDF interface. The function signature matches the plugin requirements, taking pointers to SPH_UDF_INIT, SPH_UDF_ARGS, and an error flag. The example function simply returns a fixed integer value (123). Prerequisites: sphinxudf.h included, appropriate types available, and the function must be thread-safe. Expected behavior: always returns 123 regardless of inputs, serves as a template for writing stateless UDFs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF.md#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nsphinx_int64_t testfunc ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error_flag )\n{\n    return 123;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Query String Search in C# for Manticore Search\nDESCRIPTION: Shows how to perform a query_string search using C# with Manticore Search. It searches for 'find joe fast' within 2 words in the 'comment_text' field of the 'hn_small' table and returns the first result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Basic_usage.md#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nobject query =  new { query_string=\"@comment_text \\\"find joe fast \\\"/2\" };\nvar searchRequest = new SearchRequest(\"hn_small\", query);\nsearchRequest.Source = new List<string> {\"story_author\", \"comment_author\"};\nsearchRequest.Limit = 1;\nSearchResponse searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Matching Documents to Percolate Queries in Python\nDESCRIPTION: Shows how to use the Python client to perform percolate query document matching. The Python implementation uses the percolate method with document configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nsearchApi.percolate('products',{\"query\":{\"percolate\":{\"documents\":[{\"title\":\"nice pair of shoes\",\"color\":\"blue\"},{\"title\":\"beautiful bag\"}]}}})\n```\n\n----------------------------------------\n\nTITLE: Executing Search with Highlighting in PHP\nDESCRIPTION: This PHP code demonstrates how to perform a search with highlighting using the Manticore Search PHP client. It sets up a boolean query, specifies fields for highlighting, and processes the highlighted results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$bool = new \\Manticoresearch\\Query\\BoolQuery();\n$bool->must(new \\Manticoresearch\\Query\\Match(['query' => 'one|robots'], '*'));\n\n$results = $index->search($bool)->highlight(['content','title'],['order'=>\"score\"])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nDocument: 1\ntitle : Books one\ncontent : They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it.\nHighlight for content:\n-  three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander\n-  gestured the other <b>robots</b> away and entered itself. The\n- They followed Bander. The <b>robots</b> remained at a polite distance,\nHighlight for title:\n- Books <b>one</b>\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Timestamp with HOUR() in SQL\nDESCRIPTION: Executes the HOUR() function in SQL to extract the hour part (0-23) from a given timestamp, interpreted according to the current timezone. This example uses NOW() to provide the current timestamp as input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect hour(now());\n```\n\n----------------------------------------\n\nTITLE: Applying Token Filter in SQL Query\nDESCRIPTION: Shows how to use the 'token_filter' option in a Manticore Search query. This example demonstrates applying a custom token filter to modify the tokenization process during the search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM index WHERE MATCH ('yes@no') OPTION token_filter='mylib.so:blend:@'\n```\n\n----------------------------------------\n\nTITLE: Enabling Manticore auto-start on Debian systems\nDESCRIPTION: Command to enable Manticore Search to start automatically at boot time on Debian-based systems (including Ubuntu) using update-rc.d.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nupdate-rc.d manticore defaults\n```\n\n----------------------------------------\n\nTITLE: XMLPipe2 Field Size Configuration\nDESCRIPTION: Maximum allowed field size for XMLpipe2 source type in bytes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nmax_xmlpipe2_field = 8M\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Custom Character Set in Rust\nDESCRIPTION: This snippet demonstrates how to create a table named 'products' with a custom character set table in Rust using the Manticore Search API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) charset_table = '0..9, english, _'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Infix Length\nDESCRIPTION: Setting to determine the minimum length of infix prefix to index and search. Default is 0 (infixes not allowed). Minimum non-zero value is 2.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nmin_infix_len = length\n```\n\n----------------------------------------\n\nTITLE: Indexing Without Progress Display in Manticore\nDESCRIPTION: Shows how to index without displaying progress details, only reporting final status details upon completion. This is the default behavior when not running on a console.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --rotate --all --noprogress\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name and Adding API Smoke Test\nDESCRIPTION: Includes a module to fix test names for newer CMake versions, creates a named test that executes a smoke test script with appropriate parameters, and sets the test properties with an API label.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# since cmake 3.18 names need fixup\ninclude(fixup_test_name)\n\nfixup_test_name ( test \"Perform API smoke test\" )\nadd_test ( NAME ${test} COMMAND ${CMAKE_COMMAND}\n\t\t-D SEARCHD=$<TARGET_FILE:searchd>\n\t\t-D INDEXER=$<TARGET_FILE:indexer>\n\t\t-D CLI=$<TARGET_FILE:testcli>\n\t\t-D SRCDIR=${CMAKE_CURRENT_SOURCE_DIR}\n\t\t-P ${CMAKE_CURRENT_SOURCE_DIR}/smoke.cmake\n\t\tWORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )\nSET_TESTS_PROPERTIES ( ${test} PROPERTIES LABELS API )\n```\n\n----------------------------------------\n\nTITLE: Wordbreaker Command Syntax\nDESCRIPTION: Command for the wordbreaker utility that splits compound words into components\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/References.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwordbreaker [-dict path/to/dictionary_file] {split|test|bench}\n```\n\n----------------------------------------\n\nTITLE: Spelldump Command Syntax\nDESCRIPTION: Command for extracting dictionary contents in ispell or MySpell format\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/References.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nspelldump [options] <dictionary> <affix> [result] [locale-name]\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies on Ubuntu Jammy\nDESCRIPTION: APT command to install required development libraries for building Manticore Search. These packages provide necessary components for database connectivity, XML parsing, memory management, SSL support, compression, and HTTP capabilities.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_jammy.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napt-get install -y \\\n    libmysqlclient-dev \\\n    libexpat-dev \\\n    libpq-dev \\\n    unixodbc-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libzstd-dev \\\n    libcurl4-openssl-dev\n```\n\n----------------------------------------\n\nTITLE: SQL Snippets Generation\nDESCRIPTION: Examples of generating search result snippets using UDF function.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION sphinx_snippets RETURNS STRING SONAME 'sphinx.so';\n\nSELECT sphinx_snippets('hello world doc', 'main', 'world',\n    'sphinx://192.168.1.1/' AS sphinx, true AS exact_phrase,\n    '[**]' AS before_match, '[/**]' AS after_match)\nFROM documents;\n\nSELECT title, sphinx_snippets(text, 'table', 'mysql php') AS text\n    FROM sphinx, documents\n    WHERE query='mysql php' AND sphinx.id=documents.id;\n```\n\n----------------------------------------\n\nTITLE: Index Converter Command Syntax - Manticore Search\nDESCRIPTION: Command syntax for the index_converter tool that converts Sphinx/Manticore Search 2.x tables to 3.x format. Requires either a config file path or directory path containing the tables to be converted.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/References.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nindex_converter {--config /path/to/config|--path}\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Manticore Search on CentOS/RHEL 7\nDESCRIPTION: YUM command to install essential development libraries including MySQL, PostgreSQL, ODBC, SSL, and compression dependencies required for building Manticore Search\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_rhel7.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y \\\n        mysql-devel \\\n        expat-devel \\\n        postgresql-devel \\\n        unixODBC-devel \\\n        jemalloc-devel \\\n        openssl-devel \\\n        libzstd-devel \\\n        libcurl-devel\n```\n\n----------------------------------------\n\nTITLE: Setting Distribution Name in Shell Script for Manticore Search\nDESCRIPTION: This snippet sets the 'distr' variable to the basename of the current working directory. It's used to determine the distribution name in Manticore Search build or deployment scripts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/bionic/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Modifying Thread Stack in SQL SET Statement\nDESCRIPTION: Demonstrates how to alter the thread_stack setting during runtime using the SET statement. Both session-local and daemon-wide variants are available.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET thread_stack = value\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search\nDESCRIPTION: Commands for installing Manticore Search. The first command installs to the default location, while the second allows specifying a custom installation path.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncmake --install . --config RelWithDebInfo\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake --install . --prefix path/to/build --config RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: Copying SphinxSE Files for MySQL 5.1.x\nDESCRIPTION: Copy the SphinxSE source files from Manticore distribution to the MySQL source directory for MySQL 5.1.x.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cp -R /root/builds/sphinx-0.9.7/mysqlse /root/builds/mysql-5.1.14/storage/sphinx\n```\n\n----------------------------------------\n\nTITLE: Single Language Stop Words Configuration\nDESCRIPTION: Examples of configuring stop words using a single language identifier across different programming interfaces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Ignoring_stop-words.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) stopwords = 'it'\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  stopwords = it\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Manticore SQL Reserved Keywords\nDESCRIPTION: List of keywords that cannot be used as identifiers in Manticore SQL syntax\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/References.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nAND, AS, BY, COLUMNARSCAN, DISTINCT, DIV, DOCIDINDEX, EXPLAIN, FACET, FALSE, FORCE, FROM, IGNORE, IN, INDEXES, INNER, IS, JOIN, KNN, LEFT, LIMIT, MOD, NOT, NO_COLUMNARSCAN, NO_DOCIDINDEX, NO_SECONDARYINDEX, NULL, OFFSET, ON, OR, ORDER, RELOAD, SECONDARYINDEX, SELECT, SYSFILTERS, TRUE\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies and Libraries for Manticore Search\nDESCRIPTION: Sets up various dependencies and libraries required for Manticore Search, including Galera, RE2, Libstemmer, ICU, and OpenSSL.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n#check galera, as it is not available on win, to fail early\nif (WIN32)\n\tif (WITH_GALERA)\n\t\tmessage ( FATAL_ERROR \"Galera is not supported on win; reconfigure with WITH_GALERA=FALSE\" )\n\tendif ()\nelse ()\n\tinclude ( GetGALERA )\n\tif (WITH_GALERA)\n\t\tcache_galera_module_name () # write GALERA_SONAME as var to cache\n\tendif ()\n\tdiag ( WITH_GALERA )\n\tbannervar ( WITH_GALERA )\nendif ()\n\n# Check for RE2 build\nset ( WITH_RE2_FORCE_STATIC 1 CACHE BOOL \"force to compile re2 from sources\" )\nwith_get ( re2 \"RE2\" \"a regular expression library\" )\n\n# Check for Libstemmer build\nset ( WITH_STEMMER_FORCE_STATIC 1 CACHE BOOL \"force to compile stemmer from sources\" )\nwith_get ( stemmer \"Stemmer\" \"stemming library (Snowball)\" )\n\nget_dep ( nlohmann_json NLJSON \"JSON for Modern C++ library\" )\nget_dep ( uni-algo UniAlgo \"unicode algorithm implementation for C/C++\" )\n\n# Check for ICU build\nset ( WITH_ICU_FORCE_STATIC 1 CACHE BOOL \"force to compile ICU from sources\" )\nif (STATIC_BINARY)\n\tset ( WITH_ICU_FORCE_STATIC ON CACHE BOOL \"force to compile ICU from sources\" FORCE )\n\tset ( WITH_ICU_FORCE_BUILD ON )\nendif ()\nwith_get ( icu \"ICU\" \"International Components for Unicode\" )\n\ninclude ( GetCCTZ )\ntarget_link_libraries ( lextra INTERFACE cctz::cctz )\n\ninclude ( GetxxHash )\ntarget_link_libraries ( lextra INTERFACE xxHash::xxhash )\n\nwith_get ( jieba \"Jieba\" \"Chinese text segmentation tool\" )\n\n# Support for OpenSSL\nset ( OPENSSL_USE_STATIC_LIBS ON )\ninclude ( GetSSL )\nwith_menu_comp ( OpenSSL SSL \"OpenSSL\" \"for encrypted networking\" )\nwin_install_c ( OpenSSL SSL daemon )\n\ntrace ( OpenSSL::Crypto )\n```\n\n----------------------------------------\n\nTITLE: Displaying Sphinx Search Copyright Notice\nDESCRIPTION: Presents the copyright notice for Sphinx Search, showing the years and the individuals/company holding the copyright.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2001-2016, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc\nAll rights reserved\n```\n\n----------------------------------------\n\nTITLE: Configuring Min Word Length in Manticoresearch (INI)\nDESCRIPTION: This INI snippet configures the min_word_len option in Manticoresearch, determining the minimal length for words to be indexed, with a default of 1.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nmin_word_len = length\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation via Logrotate - INI\nDESCRIPTION: This INI snippet presents a logrotate configuration for managing Manticore Search logs in /var/log/manticore/*.log. It specifies the log files are rotated weekly, up to 10 archived versions are kept, and enables copytruncate (for logs written by daemons), compression, delayed compression, skipping empty logs, and tolerance for missing files. This configuration requires the system's logrotate utility installed and running on a Linux distribution, typically included by default in DEB or RPM installations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Rotating_query_and_server_logs.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n/var/log/manticore/*.log {\n       weekly\n       rotate 10\n       copytruncate\n       delaycompress\n       compress\n       notifempty\n       missingok\n}\n```\n\n----------------------------------------\n\nTITLE: Describing and Querying Tables After Attachment in SQL\nDESCRIPTION: SQL commands to describe the structure of the target real-time table and query it after the attachment process, demonstrating the changes in table structure and content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Attaching_one_table_to_another.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DESC rt;\n+------------+-----------+\n| Field      | Type      |\n+------------+-----------+\n| id         | integer   |\n| title      | field     |\n| content    | field     |\n| group_id   | uint      |\n| date_added | timestamp |\n+------------+-----------+\n5 rows in set (0.00 sec)\n\nmysql> SELECT * FROM rt WHERE MATCH('test');\n+------+--------+----------+------------+\n| id   | weight | group_id | date_added |\n+------+--------+----------+------------+\n|    1 |   1304 |        1 | 1313643256 |\n|    2 |   1304 |        1 | 1313643256 |\n|    3 |   1304 |        1 | 1313643256 |\n|    4 |   1304 |        1 | 1313643256 |\n+------+--------+----------+------------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT * FROM plain WHERE MATCH('test');\nERROR 1064 (42000): no enabled local indexes to search\n```\n\n----------------------------------------\n\nTITLE: Configuring Chinese Language Support with Ngrams in Manticore Search\nDESCRIPTION: This snippet illustrates how to set up Chinese language support using ngrams in Manticore Search. It's faster for indexing but may not provide as good search performance.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Supported_languages.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nngram_chars=chinese\nngram_chars=1\n```\n\n----------------------------------------\n\nTITLE: MySQL Dump Replication Mode\nDESCRIPTION: Mysqldump command for replication mode with direct piping to mysql\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -etc --replace -h0 -P9306 -ucluster manticore cluster:tbl | mysql -P9306 -h0\nmariadb-dump -etc --replace -h0 -P9306 -ucluster manticore cluster:tbl | mysql -P9306 -h0\n```\n\n----------------------------------------\n\nTITLE: Setting Hit List Read Buffer Size in Manticore Search\nDESCRIPTION: Configures buffer size for storing hit lists per keyword. Larger buffers require more memory but may reduce I/O time during query execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_57\n\nLANGUAGE: ini\nCODE:\n```\nread_buffer_hits = 1M\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Directory\nDESCRIPTION: Sets path for storing tables and binary logs in real-time mode.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\ndata_dir = /var/lib/manticore\n```\n\n----------------------------------------\n\nTITLE: SphinxSE Query with Attribute Filters\nDESCRIPTION: Examples of SphinxSE search queries using attribute filters to include or exclude specific values, showing both inclusion and exclusion syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n# only include groups 1, 5 and 19\n... WHERE query='test;filter=group_id,1,5,19;';\n# exclude groups 3 and 11\n... WHERE query='test;!filter=group_id,3,11;';\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Arabic and Other Scripts in Manticore Search\nDESCRIPTION: This configuration defines mappings between Unicode code points, particularly focusing on Arabic presentation forms being mapped to their basic forms. It also includes mappings for other scripts and numeric representations to standardize characters for search and indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/non_cont.txt#2025-04-22_snippet_2\n\nLANGUAGE: config\nCODE:\n```\nU+FECB->U+0639,\nU+FECC..U+FECD->U+0639..U+063A,\nU+FECE->U+063A,\nU+FECF->U+063A,\nU+FED0->U+063A,\nU+FED1->U+0641,\nU+FED2->U+0641,\nU+FED3->U+0641,\nU+FED4..U+FED5->U+0641..U+0642,\nU+FED6->U+0642,\nU+FED7->U+0642,\nU+FED8..U+FED9->U+0642..U+0643,\nU+FEDA->U+0643,\nU+FEDB->U+0643,\nU+FEDC..U+FEDD->U+0643..U+0644,\nU+FEDE->U+0644,\nU+FEDF->U+0644,\nU+FEE0..U+FEE1->U+0644..U+0645,\nU+FEE2->U+0645,\nU+FEE3->U+0645,\nU+FEE4..U+FEE5->U+0645..U+0646,\nU+FEE6->U+0646,\nU+FEE7->U+0646,\nU+FEE8..U+FEE9->U+0646..U+0647,\nU+FEEA->U+0647,\nU+FEEB->U+0647,\nU+FEEC..U+FEED->U+0647..U+0648,\nU+FEEE..U+FEEF->U+0648..U+0649,\nU+FEF0..U+FEF1->U+0649..U+064A,\nU+FEF2->U+064A,\nU+FEF3->U+064A,\nU+FEF4->U+064A,\nU+FEF5->U+0644,\nU+FEF6->U+0644,\nU+FEF7->U+0644,\nU+FEF8->U+0644,\nU+FEF9->U+0644,\nU+FEFA->U+0644,\nU+FEFB->U+0644,\nU+FEFC->U+0644,\nU+FF10..U+FF19->U+0030..U+0039,\nU+FF21..U+FF3A->U+0061..U+007A,\nU+FF41..U+FF5A->U+0061..U+007A,\nU+10000..U+1000B,\nU+1000D..U+10026,\nU+10028..U+1003A,\nU+1003C..U+1003D,\nU+1003F..U+1004D,\nU+10050..U+1005D,\nU+10080..U+100FA,\nU+10107..U+1010F->U+0031..U+0039,\nU+10110..U+10133,\nU+10140..U+10178,\nU+1018A->U+0030,\nU+1018B..U+1018C,\nU+10280..U+1029C,\nU+102A0..U+102D0,\nU+102E1..U+102E9->U+0031..U+0039,\nU+102EA..U+102FB,\nU+10300->U+0061,\nU+10301..U+10308,\nU+10309->U+0069,\nU+1030A..U+1030E,\nU+1030F->U+006F,\nU+10310..U+10315,\nU+10316->U+0075,\nU+10317..U+1031F,\nU+10320->U+0031,\nU+10321->U+0035,\nU+10322..U+10323,\nU+10330..U+1034A,\nU+10380..U+1039D,\nU+103A0..U+103C3,\nU+103C8..U+103CF,\nU+103D1..U+103D5,\nU+10400..U+10427->U+10428..U+1044F,\nU+10428..U+1044F,\nU+10450..U+1047F,\nU+10480..U+1049D,\nU+104A0..U+104A9->U+0030..U+0039,\nU+10800..U+10805,\nU+10808,\nU+1080A..U+10835,\nU+10837..U+10838,\nU+1083C,\nU+1083F,\nU+10840..U+10855,\nU+108E0..U+108F2,\nU+108F4..U+108F5,\nU+108FB->U+0031,\nU+108FC->U+0035,\nU+108FD..U+108FF,\nU+10900..U+10915,\nU+10916->U+0031,\nU+10917..U+10919,\nU+1091A..U+1091B->U+0032..U+0033,\nU+10920..U+10939,\nU+10980..U+1099F,\nU+109A0..U+109B7,\nU+109BC..U+109BF,\nU+109C0..U+109C8->U+0031..U+0039,\nU+109C9..U+109CF,\nU+109D2..U+109FF,\nU+10A00,\nU+10A10..U+10A13,\nU+10A15..U+10A17,\nU+10A19..U+10A33,\nU+10A40..U+10A43->U+0031..U+0034,\nU+10A44..U+10A47,\nU+10A60..U+10A7C,\nU+10A7D->U+0031,\nU+10A7E,\nU+10B00..U+10B35,\nU+10B40..U+10B55,\nU+10B58..U+10B5B->U+0031..U+0034,\nU+10B5C..U+10B5F,\nU+10B60..U+10B72,\nU+10B78..U+10B7B->U+0031..U+0034,\nU+10B7C..U+10B7F,\nU+10C00..U+10C48,\nU+10C80..U+10CB2->U+10CC0..U+10CF2,\nU+10CC0..U+10CF2,\nU+10CFA->U+0031,\nU+10CFB->U+0035,\nU+10CFC..U+10CFF,\nU+10E60..U+10E68->U+0031..U+0039,\nU+10E69..U+10E7A,\nU+11003..U+11037,\nU+11052..U+1105A->U+0031..U+0039,\nU+1105B..U+11065,\nU+11066..U+1106F->U+0030..U+0039,\nU+11083..U+11099,\nU+1109A->U+11099,\nU+1109B,\nU+1109C->U+1109B,\nU+1109D..U+110AA,\nU+110AB->U+110A5,\nU+110AC..U+110AF,\nU+110D0..U+110E8,\nU+110F0..U+110F9->U+0030..U+0039,\nU+11103..U+1110C,\nU+1113D..U+1113F->U+0037..U+0039,\nU+11183..U+111B2,\nU+111C1..U+111C4,\nU+111D0..U+111D9->U+0030..U+0039,\nU+111DA,\nU+111DC,\nU+111E1..U+111E9->U+0031..U+0039,\nU+111EA..U+111F4,\nU+11280..U+11286,\nU+11288,\nU+1128A..U+1128D,\nU+1128F..U+1129D,\nU+1129F..U+112A8,\nU+11680..U+116AA,\nU+116C0..U+116C9->U+0030..U+0039,\nU+11700..U+11719,\nU+11730..U+11739->U+0030..U+0039,\nU+12000..U+12074,\nU+12076..U+12399,\nU+12400..U+1246E,\nU+12480..U+124A0,\nU+124A2..U+12543,\nU+13000..U+1342E,\nU+16800..U+16A38,\nU+16F00..U+16F44,\nU+16F50,\nU+16F93..U+16F9F,\nU+1EE00..U+1EE01->U+0627..U+0628,\nU+1EE02->U+062C,\nU+1EE03->U+062F,\nU+1EE05->U+0648,\nU+1EE06->U+0632,\nU+1EE07->U+062D,\nU+1EE08->U+0637,\nU+1EE09->U+064A,\nU+1EE0A..U+1EE0D->U+0643..U+0646,\nU+1EE0E->U+0633,\nU+1EE0F->U+0639,\nU+1EE10->U+0641,\nU+1EE11->U+0635,\nU+1EE12->U+0642,\nU+1EE13->U+0631,\nU+1EE14->U+0634,\nU+1EE15..U+1EE16->U+062A..U+062B,\nU+1EE17->U+062E,\nU+1EE18->U+0630,\nU+1EE19->U+0636,\nU+1EE1A->U+0638,\nU+1EE1B->U+063A,\nU+1EE1C->U+066E,\nU+1EE1D->U+06BA,\nU+1EE1E->U+06A1,\nU+1EE1F->U+066F,\nU+1EE21->U+0628,\nU+1EE22->U+062C,\nU+1EE24->U+0647,\nU+1EE27->U+062D,\nU+1EE29->U+064A,\nU+1EE2A..U+1EE2D->U+0643..U+0646,\nU+1EE2E->U+0633,\nU+1EE2F->U+0639,\nU+1EE30->U+0641,\nU+1EE31->U+0635,\nU+1EE32->U+0642,\nU+1EE34->U+0634,\nU+1EE35..U+1EE36->U+062A..U+062B,\nU+1EE37->U+062E,\nU+1EE39->U+0636,\nU+1EE3B->U+063A,\nU+1EE42->U+062C,\nU+1EE47->U+062D,\nU+1EE49->U+064A,\nU+1EE4B->U+0644,\nU+1EE4D->U+0646,\nU+1EE4E->U+0633,\nU+1EE4F->U+0639,\nU+1EE51->U+0635,\nU+1EE52->U+0642,\nU+1EE54->U+0634,\nU+1EE57->U+062E,\nU+1EE59->U+0636,\nU+1EE5B->U+063A,\nU+1EE5D->U+06BA,\nU+1EE5F->U+066F,\nU+1EE61->U+0628,\nU+1EE62->U+062C,\nU+1EE64->U+0647,\nU+1EE67->U+062D,\nU+1EE68->U+0637,\nU+1EE69->U+064A,\nU+1EE6A->U+0643,\nU+1EE6C..U+1EE6D->U+0645..U+0646,\nU+1EE6E->U+0633,\nU+1EE6F->U+0639,\nU+1EE70->U+0641,\nU+1EE71->U+0635,\nU+1EE72->U+0642,\nU+1EE74->U+0634,\nU+1EE75..U+1EE76->U+062A..U+062B,\nU+1EE77->U+062E,\nU+1EE79->U+0636,\nU+1EE7A->U+0638,\nU+1EE7B->U+063A,\nU+1EE7C->U+066E,\nU+1EE7E->U+06A1,\nU+1EE80..U+1EE81->U+0627..U+0628,\nU+1EE82->U+062C,\nU+1EE83->U+062F,\nU+1EE84..U+1EE85->U+0647..U+0648,\nU+1EE86->U+0632,\nU+1EE87->U+062D,\nU+1EE88->U+0637,\nU+1EE89->U+064A,\nU+1EE8B..U+1EE8D->U+0644..U+0646,\nU+1EE8E->U+0633,\nU+1EE8F->U+0639,\nU+1EE90->U+0641,\nU+1EE91->U+0635,\nU+1EE92->U+0642,\nU+1EE93->U+0631,\nU+1EE94->U+0634,\nU+1EE95..U+1EE96->U+062A..U+062B,\nU+1EE97->U+062E,\nU+1EE98->U+0630,\nU+1EE99->U+0636,\nU+1EE9A->U+0638,\nU+1EE9B->U+063A,\nU+1EEA1->U+0628,\nU+1EEA2->U+062C,\nU+1EEA3->U+062F,\nU+1EEA5->U+0648,\nU+1EEA6->U+0632,\nU+1EEA7->U+062D,\nU+1EEA8->U+0637,\nU+1EEA9->U+064A,\nU+1EEAB..U+1EEAD->U+0644..U+0646,\nU+1EEAE->U+0633,\nU+1EEAF->U+0639,\nU+1EEB0->U+0641,\nU+1EEB1->U+0635,\nU+1EEB2->U+0642,\nU+1EEB3->U+0631,\nU+1EEB4->U+0634,\nU+1EEB5..U+1EEB6->U+062A..U+062B,\nU+1EEB7->U+062E,\nU+1EEB8->U+0630,\nU+1EEB9->U+0636,\nU+1EEBA->U+0638\n```\n\n----------------------------------------\n\nTITLE: Replacing PQ Rules with SQL\nDESCRIPTION: Example of replacing an existing percolate query rule using SQL's REPLACE command. The example first shows the existing rule, then replaces it with a modified query, and finally displays the updated rule.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_rules_to_a_percolate_table.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select * from pq;\n+---------------------+--------------+------+---------+\n| id                  | query        | tags | filters |\n+---------------------+--------------+------+---------+\n| 2810823411335430148 | @title shoes |      |         |\n+---------------------+--------------+------+---------+\n1 row in set (0.00 sec)\n\nmysql> replace into pq(id,query) values(2810823411335430148,'@title boots');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from pq;\n+---------------------+--------------+------+---------+\n| id                  | query        | tags | filters |\n+---------------------+--------------+------+---------+\n| 2810823411335430148 | @title boots |      |         |\n+---------------------+--------------+------+---------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Full-Text Setting Changes in Manticore Search\nDESCRIPTION: Example showing the effect of changing the charset_table setting on document indexing and searching. Illustrates how existing and new documents are affected differently.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmysql> create table rt(title text) charset_table='a,b,c';\n\nmysql> insert into rt(title) values('abcd');\n\nmysql> select * from rt where match('abcd');\n+---------------------+-------+\n| id                  | title |\n+---------------------+-------+\n| 1514630637682688054 | abcd  |\n+---------------------+-------+\n\nmysql> show meta;\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| total         | 1     |\n| total_found   | 1     |\n| time          | 0.000 |\n| keyword[0]    | abc   |\n| docs[0]       | 1     |\n| hits[0]       | 1     |\n+---------------+-------+\n\nmysql> alter table rt charset_table='a,b,c,d';\nmysql> select * from rt where match('abcd');\n+---------------------+-------+\n| id                  | title |\n+---------------------+-------+\n| 1514630637682688054 | abcd  |\n+---------------------+-------+\n\nmysql> show meta\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| total         | 1     |\n| total_found   | 1     |\n| time          | 0.000 |\n| keyword[0]    | abc   |\n| docs[0]       | 1     |\n| hits[0]       | 1     |\n+---------------+-------+\n\nmysql> insert into rt(title) values('abcd');\nmysql> select * from rt where match('abcd');\n+---------------------+-------+\n| id                  | title |\n+---------------------+-------+\n| 1514630637682688055 | abcd  |\n| 1514630637682688054 | abcd  |\n+---------------------+-------+\n\nmysql> show meta;\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| total         | 2     |\n| total_found   | 2     |\n| time          | 0.000 |\n| keyword[0]    | abc   |\n| docs[0]       | 1     |\n| hits[0]       | 1     |\n| keyword[1]    | abcd  |\n| docs[1]       | 1     |\n| hits[1]       | 1     |\n+---------------+-------+\n```\n\n----------------------------------------\n\nTITLE: I/O Size Limit Configuration\nDESCRIPTION: Setting for maximum allowed I/O operation size in bytes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\nmax_iosize = 1048576\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Place Write Factor in Manticore Search Table\nDESCRIPTION: Example configuration for setting the in-place write factor in a table definition. Used to optimize buffer allocation during in-place indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_65\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  inplace_write_factor = 0.1\n  inplace_enable = 1\n\n  path = products\n  source = src_base\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring phrase_boundary_step in Manticore Search\nDESCRIPTION: Sets the position increment value to be applied at phrase boundaries. By default, it's 0. This setting works in conjunction with phrase_boundary to adjust word positions for enabling phrase-level searching through proximity queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_123\n\nLANGUAGE: ini\nCODE:\n```\nphrase_boundary_step = 100\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) phrase_boundary_step = '100' phrase_boundary = '., ?, !, U+2026'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) phrase_boundary_step = '100' phrase_boundary = '., ?, !, U+2026'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'phrase_boundary_step' => '100',\n             'phrase_boundary' => '., ?, !, U+2026'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) phrase_boundary_step = \\'100\\' phrase_boundary = \\'., ?, !, U+2026\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) phrase_boundary_step = \\'100\\' phrase_boundary = \\'., ?, !, U+2026\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) phrase_boundary_step = \\'100\\' phrase_boundary = \\'., ?, !, U+2026\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) phrase_boundary_step = '100' phrase_boundary = '., ?, !, U+2026'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) phrase_boundary_step = '100' phrase_boundary = '., ?, !, U+2026'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) phrase_boundary_step = '100' phrase_boundary = '., ?, !, U+2026'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  phrase_boundary_step = 100\n  phrase_boundary = ., ?, !, U+2026\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Initial CMake Setup and Policies\nDESCRIPTION: Sets minimum CMake version requirement and applies new policy settings for various CMake policies\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.17 )\n\nFOREACH (policy CMP0054 CMP0057 CMP0042 CMP0074 CMP0110)\n\tIF (POLICY ${policy})\n\t\tCMAKE_POLICY ( SET ${policy} NEW )\n\tENDIF ()\nENDFOREACH ()\n```\n\n----------------------------------------\n\nTITLE: Downloading Boost Source Archive in Bash\nDESCRIPTION: This command downloads the Boost source archive version 1.78.0 using wget. It's a prerequisite for building the sysroots.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring Columnar Attributes with fast_fetch in Configuration File\nDESCRIPTION: Shows how to configure columnar storage attributes and disable fast_fetch for specific columns in a Manticore Search configuration file. This example uses columnar_no_fast_fetch to optimize disk space.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_98\n\nLANGUAGE: ini\nCODE:\n```\nsource min {\n    type = mysql\n    sql_host = localhost\n    sql_user = test\n    sql_pass =\n    sql_db = test\n    sql_query = select 1, 1 a, 1 b\n    sql_attr_uint = a\n    sql_attr_uint = b\n}\n\ntable tbl {\n    path = tbl/col\n    source = min\n    columnar_attrs = *\n    columnar_no_fast_fetch = b\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\n+-------+--------+---------------------+\n| Field | Type   | Properties          |\n+-------+--------+---------------------+\n| id    | bigint | columnar fast_fetch |\n| a     | uint   | columnar fast_fetch |\n| b     | uint   | columnar            |\n+-------+--------+---------------------+\n```\n\n----------------------------------------\n\nTITLE: Columnar and API Version Configuration\nDESCRIPTION: Configures columnar module dependencies and sets API version properties for columnar, secondary, and KNN interfaces\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude ( GetColumnar )\ntarget_link_libraries ( lextra INTERFACE columnar::columnar_api columnar::secondary_api columnar::knn_api )\n\nset_property ( TARGET lextra PROPERTY INTERFACE_COLUMNAR_API_VERSION ${NEED_COLUMNAR_API} )\nset_property ( TARGET lextra APPEND PROPERTY COMPATIBLE_INTERFACE_STRING COLUMNAR_API_VERSION )\n\nset_property ( TARGET lextra PROPERTY INTERFACE_SECONDARY_API_VERSION ${NEED_SECONDARY_API} )\nset_property ( TARGET lextra APPEND PROPERTY COMPATIBLE_INTERFACE_STRING SECONDARY_API_VERSION )\n\nset_property ( TARGET lextra PROPERTY INTERFACE_KNN_API_VERSION ${NEED_KNN_API} )\nset_property ( TARGET lextra APPEND PROPERTY COMPATIBLE_INTERFACE_STRING KNN_API_VERSION )\n```\n\n----------------------------------------\n\nTITLE: Deactivating Read-only Mode\nDESCRIPTION: SQL command to deactivate read-only mode when connected to a VIP socket.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/Read_only.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET ro=0\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW THREADS via PHP Client\nDESCRIPTION: Example of using the Manticore Search PHP client to retrieve thread information through the nodes()->threads() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__ . '/vendor/autoload.php';\n$config = ['host'=>'127.0.0.1','port'=>9308];\n$client = new \\Manticoresearch\\Client($config);\nprint_r($client->nodes()->threads());\n```\n\n----------------------------------------\n\nTITLE: Displaying Copyright Notice for libexpat\nDESCRIPTION: Shows the copyright notice for libexpat, which is used during compilation and may be dynamically loaded at runtime by Manticore Search. It is licensed under the MIT License.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) 1998-2000 Thai Open Source Software Center Ltd and Clark Cooper\nCopyright (c) 2001-2022 Expat maintainers\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Getting Year and Week Code with YEARWEEK() in SQL\nDESCRIPTION: Executes the YEARWEEK() function in SQL to retrieve the year and the code for the first day of the week (range 1969001-2038366) for a given timestamp, interpreted according to the current timezone. This example uses NOW() as the timestamp input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect yearweek(now());\n```\n\n----------------------------------------\n\nTITLE: Python-asyncio Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example response from a successful Python-asyncio truncate with RECONFIGURE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n{u'error': u'', u'total': 0, u'warning': u''}\n```\n\n----------------------------------------\n\nTITLE: LZ4 Copyright Notice\nDESCRIPTION: BSD 2-Clause License copyright notice for the LZ4 compression library used in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (C) 2011-present, Yann Collet.\n\nBSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou can contact the author at :\n - LZ4 homepage : http://www.lz4.org\n - LZ4 source repository : https://github.com/lz4/lz4\n```\n\n----------------------------------------\n\nTITLE: SphinxSE Connection String Syntax\nDESCRIPTION: Syntax for the SphinxSE connection string which specifies the Manticore host, port, and index name to connect to.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCONNECTION=\"sphinx://HOST:PORT/TABLENAME\"\n```\n\n----------------------------------------\n\nTITLE: Configuring sql_column_buffers in Manticore Search\nDESCRIPTION: Demonstrates how to set custom buffer sizes for specific columns when using ODBC or MSSQL source types in Manticore Search. This is useful for optimizing memory usage or handling large columns.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Processing_fetched_data.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nsql_query = SELECT id, mytitle, mycontent FROM documents\nsql_column_buffers = mytitle=64K, mycontent=10M\n```\n\n----------------------------------------\n\nTITLE: Running Memory Check Tests with CTest\nDESCRIPTION: This bash script shows the workflow for running memory checks using CTest. It first builds the daemon without running tests, then prepares stack mocking environment, and finally runs the actual memory checks with Valgrind.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport NO_TESTS=1\nctest -S ../misc/ctest/memcheck.cmake\nsrc/searchd --mockstack | tail -n +6 > stack.txt\nsource stack.txt\nexport NO_TESTS=0\nctest -S ../misc/ctest/memcheck.cmake\n```\n\n----------------------------------------\n\nTITLE: Setting Document List Read Buffer Size in Manticore Search\nDESCRIPTION: Configures buffer size for storing document lists per keyword. Larger buffers require more memory but may reduce I/O time during query execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_56\n\nLANGUAGE: ini\nCODE:\n```\nread_buffer_docs = 1M\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Version and Policies for SPHINXCLIENT Project\nDESCRIPTION: Specifies required CMake version and applies newer policies for project versioning and documentation. Sets default build type to Release if no build configuration is specified.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.12 )\n\nFOREACH ( policy CMP0048 CMP0110 )\n\tIF (POLICY ${policy})\n\t\tCMAKE_POLICY(SET ${policy} NEW)\n\tENDIF ()\nENDFOREACH ()\n\n# Set a default build type for single-configuration CMake generators if no build type is set.\nif (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)\n\tset (CMAKE_BUILD_TYPE Release)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies on Debian Buster\nDESCRIPTION: Installs required development packages including MariaDB, PostgreSQL, UnixODBC, SSL, and compression library dependencies using apt package manager. These packages are necessary for building Manticore Search with full functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_buster.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install -y \\\n    libmariadb-dev-compat \\\n    libexpat-dev \\\n    libpq-dev \\\n    unixodbc-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libzstd-dev \\\n    libcurl4-openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Copyright Notice for libssl\nDESCRIPTION: Shows the copyright notice for libssl (OpenSSL), which is used during compilation and may be dynamically loaded at runtime by Manticore Search. It is licensed under Apache 2.0.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) 1998-2023 The OpenSSL Project Authors\n\nCopyright (c) 1995-1998 Eric A. Young, Tim J. Hudson\n\nAll rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Configuring stopwords_unstemmed in Manticore Search\nDESCRIPTION: Controls whether stop words are applied before or after stemming. Default is 0 (apply after stemming). When set to 1, stop words are applied to original word forms before stemming, which can prevent unexpected token skipping.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Ignoring_stop-words.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nstopwords_unstemmed={0|1}\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) stopwords = 'en' stopwords_unstemmed = '1'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) stopwords = 'en' stopwords_unstemmed = '1'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'stopwords' => 'en, it, ru',\n            'stopwords_unstemmed' => '1'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopwords_unstemmed = \\'1\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopwords_unstemmed = \\'1\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopwords_unstemmed = \\'1\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopwords_unstemmed = \\'1\\'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopwords_unstemmed = \\'1\\'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopwords_unstemmed = \\'1\\'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  stopwords = en\n  stopwords_unstemmed = 1\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Using DEBUG Command in Manticore SQL\nDESCRIPTION: The DEBUG command in Manticore SQL can run various subcommands for debugging purposes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\nDEBUG <subcommand>\n```\n\n----------------------------------------\n\nTITLE: LGPL-2.1+ License Text\nDESCRIPTION: Detailed LGPL-2.1+ license text applicable to the UnixODBC library integration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n.\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n.\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n.\nOn Debian GNU/Linux systems, the complete text of the GNU Lesser General\nPublic License can be found in `/usr/share/common-licenses/LGPL-2.1'.\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Configuration\nDESCRIPTION: Defines Unicode character mappings and ranges for text processing, including CJK ideographs and Hangul syllables. The mappings use the format U+XXXX->U+YYYY for direct character conversions and U+XXXX..U+YYYY for character ranges.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/korean.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nU+1100..U+1159,\nU+1161..U+11A2,\nU+11A8..U+11F9,\nU+2F00->U+4E00,\nU+2F01->U+4E28,\n[...additional mappings...]\nU+31A0..U+31B7,\nU+AC00..U+D7A3,\nU+20000..U+2A6D6,\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Minimum Word Length in Python (Python)\nDESCRIPTION: This Python snippet demonstrates the creation of a table in Manticoresearch with min_word_len specified to ensure only long enough words are indexed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) min_word_len = \\'4\\'')\n```\n\n----------------------------------------\n\nTITLE: TSV Data Format Example\nDESCRIPTION: Sample TSV data format showing how to structure data with document ID, name, and multi-value genre tags. Each field is tab-separated.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_CSV,TSV.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n1   Led Zeppelin    35,23,16\n2   Deep Purple 35,92\n3   Frank Zappa 35,23,16,92,33,24\n```\n\n----------------------------------------\n\nTITLE: Cloning and Checking Out Manticore Source Code - Bash\nDESCRIPTION: This snippet shows how to clone the Manticore Search GitHub repository and check out a specific version branch. It requires git as a dependency and involves checking out a version tag like 'manticore-3.6.0'. Input is the repository URL and the branch name, resulting in a working directory set to the specified version. Ensure git is installed and access to the internet is available.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/manticoresoftware/manticoresearch.git\ncd manticoresearch\ngit checkout manticore-3.6.0\n```\n\n----------------------------------------\n\nTITLE: Activating Read-only Mode\nDESCRIPTION: SQL command to activate read-only mode for the current connection.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/Read_only.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET ro=1\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with global_idf using Rust Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the Rust client library's `sql` method to create a 'products' table with 'title' and 'price' fields, specifying the `global_idf` option. The `await` keyword indicates this is an asynchronous operation. The second parameter `Some(true)` might indicate an option like returning results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_86\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) global_idf = '/usr/local/manticore/var/global.idf'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Installing Development (Nightly) ManticoreSearch Packages using Homebrew - Bash\nDESCRIPTION: This snippet installs the nightly or development version of ManticoreSearch, along with extra and language pack components, by tapping the development Homebrew repo. This series of commands is targeted at users who want the latest features or to help test new releases. It ends by starting the development version of the service. Requires Homebrew and the dev tap to be available.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/MacOS.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap manticoresoftware/tap-dev\nbrew install manticoresoftware/tap-dev/manticoresearch-dev manticoresoftware/tap-dev/manticore-extra-dev manticoresoftware/tap-dev/manticore-language-packs\nbrew services start manticoresearch-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search with Custom Service Name\nDESCRIPTION: This command installs searchd as a Windows service with a custom name specified via the --servicename option. This is useful when deploying multiple instances or in multi-administrator environments for better identification.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_14\n\nLANGUAGE: bat\nCODE:\n```\nC:\\WINDOWS\\system32> C:\\Manticore\\bin\\searchd.exe --install\n   --config C:\\Manticore\\manticore.conf --servicename ManticoreSearch\n```\n\n----------------------------------------\n\nTITLE: CJK Unicode Character Mappings\nDESCRIPTION: Defines mapping rules for CJK Unicode characters, including ranges and individual character transformations. Covers Hangul, Hiragana, Katakana, and Han characters with their corresponding Unicode code points.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/cjk.txt#2025-04-22_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\nU+1100..U+1159,\nU+1161..U+11A2,\nU+11A8..U+11F9,\nU+2F00->U+4E00,\nU+2F01->U+4E28\n[...additional mappings...]\n```\n\n----------------------------------------\n\nTITLE: Executing Percolation Query with JavaScript\nDESCRIPTION: Executes a percolation query using JavaScript, specifying document data in JSON format and processing the results for document matches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.percolate('products',{ \"query\":{ \"percolate\":{ \"documents\":[{\"title\":\"nice pair of shoes\",\"color\":\"blue\"},{\"title\":\"beautiful bag\"}]}}});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Text Field in Java\nDESCRIPTION: Creates a table named 'products' with a 'title' text field using the Java API. The text field will be indexed for full-text search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text)\");\n```\n\n----------------------------------------\n\nTITLE: Extracting Month from Timestamp with MONTH() in SQL\nDESCRIPTION: Executes the MONTH() function in SQL to extract the month part (1-12) from a given timestamp, interpreted according to the current timezone. This example uses NOW() to provide the current timestamp as input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect month(now());\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Agent Status in PHP\nDESCRIPTION: The PHP code utilizes an API client for fetching status data of a specified agent using its IP address. It filters results for data parameters containing '5periodmsec'. This example highlights the associative array handling in PHP for API data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$client->nodes()->agentstatus(\n    ['body'=>\n        ['agent'=>'192.168.0.202:6714'],\n        ['pattern'=>'%5period%msec%']\n    ]\n);\n```\n\nLANGUAGE: PHP\nCODE:\n```\nArray(\n    [agent_15periods_query_timeouts] => 0\n    [agent_15periods_connect_timeouts] => 0\n    [agent_15periods_connect_failures] => 0\n    [agent_15periods_network_errors] => 0\n    [agent_15periods_wrong_replies] => 0\n    [agent_15periods_unexpected_closings] => 0\n    [agent_15periods_warnings] => 0\n    [agent_15periods_succeeded_queries] => 439\n    [agent_15periods_msecsperquery] => 231.73\n)\n```\n\n----------------------------------------\n\nTITLE: Promote to Floating-point Type in SQL\nDESCRIPTION: The DOUBLE() function promotes its argument to a floating-point type, aiding in numeric JSON field evaluation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Type_casting_functions.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDOUBLE()\n```\n\n----------------------------------------\n\nTITLE: Function Call Parentheses Style in C++\nDESCRIPTION: Shows the spacing rules for function calls with various argument patterns and boolean expressions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-coding-standard.txt#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nTypicalCall ( iFirst, sSecond );\nNullArglist();\nShortArglist(i);\nStillShortArglist(iIdx);\nLongEnoughArglist ( iFirst );\niVar = !( iCode & BOOLEAN_EXPRESSION );\nif ( i==1 || ( j==2 && k==3 ) ) { ... }\nif ( i )  {... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Storage Compression in Manticore Search\nDESCRIPTION: Determines the compression algorithm used for document blocks in storage. Options include lz4 (faster), lz4hc (better compression), or none (no compression).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_53\n\nLANGUAGE: ini\nCODE:\n```\ndocstore_compression = lz4hc\n```\n\n----------------------------------------\n\nTITLE: Limiting RT Merge I/O Operations in Manticore Search (INI)\nDESCRIPTION: Sets the maximum number of I/O operations per second for RT chunks merge. Default is 0 (no limit). Helps throttle I/O impact from OPTIMIZE statements.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_55\n\nLANGUAGE: ini\nCODE:\n```\nrt_merge_iops = 40\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on RHEL/CentOS/Alma/Amazon/Oracle Linux\nDESCRIPTION: Commands to install Manticore Search on RHEL-based Linux distributions using yum package manager. Includes installation of the repository and both manticore and manticore-extra packages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install https://repo.manticoresearch.com/manticore-repo.noarch.rpm\nsudo yum install manticore manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Running Memcheck Natively for Manticore Search\nDESCRIPTION: Instructions for running memcheck directly on the host machine without Docker. This method is typically about 10% faster than the dockerized check.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /manticore/source/dir\nbash memcheck.sh\n```\n\n----------------------------------------\n\nTITLE: Displaying libmysqlclient Copyright and License Notice\nDESCRIPTION: Presents the copyright and license notice for libmysqlclient, including GPLv2 and FOSS Exception information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License, version 2.0,\nas published by the Free Software Foundation.\n\nThis program is also distributed with certain software (including\nbut not limited to OpenSSL) that is licensed under separate terms,\nas designated in a particular file or component or in included license\ndocumentation.  The authors of MySQL hereby grant you an additional\npermission to link the program and your derivative works with the\nseparately licensed software that they have included with MySQL.\n\nWithout limiting anything contained in the foregoing, this file,\nwhich is part of C Driver for MySQL (Connector/C), is also subject to the\nUniversal FOSS Exception, version 1.0, a copy of which can be found at\nhttp://oss.oracle.com/licenses/universal-foss-exception.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License, version 2.0, for more details.\n\nYou should have received a copy of the GNU General Public License\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Policies\nDESCRIPTION: Sets the minimum required CMake version and applies new policies for compatibility and feature enablement.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.17 )\n\nFOREACH (policy CMP0054 CMP0057 CMP0042 CMP0074 CMP0110)\n\tIF (POLICY ${policy})\n\t\tCMAKE_POLICY ( SET ${policy} NEW )\n\tENDIF ()\nENDFOREACH ()\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with PHP in Manticore Search\nDESCRIPTION: Demonstrates how to perform a search with highlighting using the PHP client. The code creates a boolean query for 'and first' in the 'content' field, sets a highlighting limit of 50, and iterates through the highlighted results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_113\n\nLANGUAGE: php\nCODE:\n```\n$index->setName('books');\n$bool = new \\Manticoresearch\\Query\\BoolQuery();\n$bool->must(new \\Manticoresearch\\Query\\Match(['query' => 'and first'], 'content'));\n\n$results = $index->search($bool)->highlight(['content'=>['limit'=>50]],['limits_per_field'=>false])->get();\nforeach($results as $doc)\n{\n    echo 'Document: '.$doc->getId().\"\\n\";\n    foreach($doc->getData() as $field=>$value)\n    {\n        echo $field.' : '.$value.\"\\n\";\n    }\n    foreach($doc->getHighlight() as $field=>$snippets)\n    {\n        echo \"Highlight for \".$field.\":\\n\";\n        foreach($snippets as $snippet)\n        {\n            echo \"- \".$snippet.\"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Perfetto Library Build in CMake\nDESCRIPTION: Sets up the build configuration for Google's Perfetto library, including version requirements, conditional compilation, and platform-specific settings. Handles Windows-specific configurations and creates a static library target with appropriate compiler definitions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/perfetto/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\nif (DISABLE_PERFETTO)\n\tmessage (STATUS \"Google perfetto library was explicitly disabled.\")\n\treturn()\nendif()\n\n# Provide valid perfetto library\nif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/perfetto.cc\" AND NOT CMAKE_SYSTEM_NAME STREQUAL FreeBSD)\n\t# Define a static library for Perfetto.\n\tmessage ( STATUS \"Using Google perfetto library\" )\n\tadd_library ( perfetto STATIC perfetto.cc perfetto.h )\n\ttarget_include_directories ( perfetto INTERFACE \"${MANTICORE_CURRENT_SOURCE_DIR}\" )\n\ttarget_compile_definitions ( perfetto PUBLIC PERFETTO )\n\n\tif (WIN32)\n\t\ttarget_compile_definitions ( perfetto PRIVATE NOMINMAX=1 WIN32_LEAN_AND_MEAN=1 PUBLIC _WIN32 )\n\t\ttarget_compile_options ( perfetto PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/bigobj> )\n\t\ttarget_link_libraries ( perfetto PRIVATE WS2_32 )\n\tendif ()\nelse()\n\tmessage ( STATUS \"No Google perfetto library found\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a Table with Multi64 Data Type in Config File\nDESCRIPTION: Shows how to define a table with a multi64 attribute in a Manticore Search configuration file. This example demonstrates the rt_attr_multi_64 directive for creating multi-value 64-bit integer attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_96\n\nLANGUAGE: ini\nCODE:\n```\ntable products\n{\n\ttype = rt\n\tpath = products\n\n\trt_field = title\n\tstored_fields = title\n\n\trt_attr_multi_64 = values\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Rules\nDESCRIPTION: A comprehensive set of Unicode character mapping rules that define transformations between different Unicode code points. Each line represents a mapping rule in the format 'source->target' or a character range definition.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/non_cont.txt#2025-04-22_snippet_1\n\nLANGUAGE: config\nCODE:\n```\nU+04D4->U+00E6,\nU+04D5->U+00E6,\nU+04D6->U+0435,\nU+04D7->U+0435,\nU+04D8->U+04D9,\nU+04D9,\nU+04DA->U+04D9,\nU+04DB->U+04D9,\nU+04DC->U+0436,\nU+04DD..U+04DE->U+0436..U+0437\n```\n\n----------------------------------------\n\nTITLE: ADD_TXN Transaction Payload\nDESCRIPTION: Structure for ADD_TXN (TxnID = 2) transaction type that contains the main binlog data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/binary-logging.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// TxnID = 2 (aka 'ADD_TXN')\n// start of payload\nzint IndexID\nzint TransactionID\ndword uSize\nbyte[uSize] index-specific payload\n// end of transaction\n```\n\n----------------------------------------\n\nTITLE: Converting Tables from Specific Directory\nDESCRIPTION: Command to convert all tables found in a specified directory path.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Migration_from_Sphinx.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n$ index_converter  --path /var/lib/manticoresearch/data --all\n```\n\n----------------------------------------\n\nTITLE: Sample Valgrind Memory Leak Report\nDESCRIPTION: This is a sample Valgrind output showing a memory leak. The report indicates that 104 bytes are definitely lost, which should be automatically flagged as a serious issue in any automation setup.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_10\n\nLANGUAGE: valgrind\nCODE:\n```\n==24721== 104 (56 direct, 48 indirect) bytes in 1 blocks are definitely lost in loss record 10 of 14\n==24721==    at 0x4849FD3: operator new(unsigned long) (in /home/linuxbrew/.linuxbrew/Cellar/valgrind/3.24.0/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\n==24721==    by 0xAA7EAF: TaskManager::ScheduleJob(int, long, std::function<void ()>) (src/searchdtask.cpp:108)\n==24721==    by 0xB93D8D: ScheduleRtFlushDisk() (src/taskflushdisk.cpp:47)\n```\n\n----------------------------------------\n\nTITLE: Computing Final ATC Score\nDESCRIPTION: Formula for computing the final Aggregate Term Closeness (ATC) score by applying logarithmic dampening to the sum of all pair term closenesses.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\natc = log(1+sum(pair_tc))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment and Configuration Files\nDESCRIPTION: Creates a test executable linked against the sphinxclient library and copies necessary test data and configuration files to the build directory.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# testing stuff\nadd_executable (testcli test.c)\ntarget_link_libraries ( testcli sphinxclient )\n\nconfigure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/smoke_data.csv ${CMAKE_CURRENT_BINARY_DIR}/smoke_data.csv COPYONLY )\nconfigure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/smoke_test.conf ${CMAKE_CURRENT_BINARY_DIR}/smoke_test.conf COPYONLY )\n```\n\n----------------------------------------\n\nTITLE: Running Docker Build Environment\nDESCRIPTION: Example command for launching a Docker container for building on Ubuntu Xenial.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbuildxenial\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Source Library\nDESCRIPTION: Conditionally defines and configures the 'source_pgsql' library for PostgreSQL data sources.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (WITH_POSTGRESQL)\n\tadd_library ( source_pgsql source_pgsql.cpp source_pgsql.h )\n\ttarget_link_libraries ( source_pgsql PRIVATE lextra source_sql )\n\n\tif (DL_POSTGRESQL)\n\t\ttarget_link_libraries ( source_pgsql PRIVATE PostgreSQL::PostgreSQL_ld )\n\telse ()\n\t\ttarget_link_libraries ( source_pgsql PRIVATE PostgreSQL::PostgreSQL )\n\tendif ()\n\n\ttarget_link_libraries ( indexer_sources INTERFACE source_pgsql )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Sign in PHP PDO Prepared Statement for Manticore Search\nDESCRIPTION: Shows how to escape the dollar sign character when using PHP PDO prepared statements with Manticore Search. A single backslash is added before the dollar sign.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Escaping.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$statement = $ln_sph->prepare( \"SELECT * FROM index WHERE MATCH(:match)\");\n$match = '\\$manticore';\n$statement->bindParam(':match',$match,PDO::PARAM_STR);\n$results = $statement->execute();\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Static Library for Replication in CMake\nDESCRIPTION: This CMake script sets up a static library named 'repli_stuff' with multiple source files for replication and cluster management. It includes various components such as WSREP, cluster commands, and replication-related functionality. The library is configured with specific include directories and linked against the 'lextra' library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/replication/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\nADD_LIBRARY ( repli_stuff STATIC wsrep_cxx.cpp wsrep_cxx.h wsrep_cxx_int.h\n\t\tapi_command_cluster.h api_command_cluster.cpp\n\t\tcluster_delete.h cluster_delete.cpp\n\t\tcluster_file_reserve.h cluster_file_reserve.cpp\n\t\tcluster_file_send.h cluster_file_send.cpp\n\t\tcluster_get_nodes.h cluster_get_nodes.cpp\n\t\tcluster_index_add_local.h cluster_index_add_local.cpp\n\t\tcluster_synced.h cluster_synced.cpp\n\t\tcluster_update_nodes.h cluster_update_nodes.cpp\n\t\tgrastate.h grastate.cpp\n\t\tcommit_monitor.h commit_monitor.cpp\n\t\tcommon.h\n\t\tconfiguration.cpp\n\t\tnodes.h nodes.cpp\n\t\tportrange.h portrange.cpp\n\t\treceiver_ctx.h receiver_ctx.cpp\n\t\treplicate_index.h replicate_index.cpp\n\t\tserialize.h serialize.cpp\n\t\tsend_files.h send_files.cpp\n\t\tcluster_commands.h\n\t\trecv_state.h recv_state.cpp\n\t\twsrep_v25.cpp\n\t\twsrep_v31.cpp\n)\n\ntarget_include_directories ( repli_stuff PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( repli_stuff PRIVATE lextra )\n```\n\n----------------------------------------\n\nTITLE: Displaying old Ruby client Copyright Notices\nDESCRIPTION: Shows the copyright notices for the old Ruby client, including multiple copyright holders.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nlib/sphinx/client.rb:# Copyright:: Copyright (c) 2006 - 2008 Dmytro Shteflyuk\nspec/fixtures/sphinxapi.php:// Copyright (c) 2001-2016, Andrew Aksyonoff\nspec/fixtures/sphinxapi.php:// Copyright (c) 2008-2016, Sphinx Technologies Inc\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: Command to add current user to docker group for running docker commands without sudo.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/dockerfiles/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker ${USER}\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using C# Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement using the C# client library's `Sql` method (`utilsApi`). This creates the 'products' table specifying a custom `index_token_filter` plugin. The boolean `true` parameter likely influences execution or result handling.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_118\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) index_token_filter = 'my_lib.so:custom_blend:chars=@#&'\", true);\n```\n\n----------------------------------------\n\nTITLE: Debugging Manticore Search Hangs with System Commands\nDESCRIPTION: Commands for collecting diagnostic information when Manticore Search hangs. These commands help gather thread information, file descriptors, and memory dumps for troubleshooting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlsof -p `cat /var/run/manticore/searchd.pid`\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcore `cat /var/run/manticore/searchd.pid`\n```\n\nLANGUAGE: bash\nCODE:\n```\ngdb /usr/bin/searchd `cat /var/run/manticore/searchd.pid`\n```\n\nLANGUAGE: gdb\nCODE:\n```\nset pagination off\ninfo threads\nthread apply all bt\nquit\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching With Asterisk\nDESCRIPTION: Demonstrates exact text pattern matching where 'action*packed' matches to itself, maintaining the asterisk notation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_165/synonyms2.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naction*packed => action*packed\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent-Child Table Inheritance in Manticore Search\nDESCRIPTION: Demonstrates how to set up inheritance between parent and child tables in Manticore Search configuration. The child table inherits all settings from the parent table and can override specific values. The example shows basic path configuration for both parent and child tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Inheritance_of_index_and_source_declarations.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntable parent {\npath = /var/lib/manticore/parent\n...\n}\n\ntable child:parent {\npath = /var/lib/manticore/child\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Manticore Search Build\nDESCRIPTION: This bash command demonstrates how to run the Docker container for building Manticore Search. It sets up volume mounts, environment variables, and specifies the Docker image to use.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n-v $(pwd):/manticore \\\n-v /sysroots/on/host:/sysroots \\\n-e DISTR=bullseye \\\n-e arch=x86_64 \\\n-e SYSROOT_URL=file:///sysroots/ \\\n-e boost=boost_nov22 \\\n-e sysroot=roots_nov22 \\\nexternal_toolchain:clang13_cmake3263 bash\n```\n\n----------------------------------------\n\nTITLE: Setting the Query Log File\nDESCRIPTION: Specifies the file path for logging queries. An empty setting disables query logging. Supports syslog for non-standard paths, requires special build configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\nquery_log = /var/log/query.log\n```\n\n----------------------------------------\n\nTITLE: Python Truncation Response\nDESCRIPTION: Example response from a successful Python truncate operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n{u'error': u'', u'total': 0, u'warning': u''}\n```\n\n----------------------------------------\n\nTITLE: Building Packages with CMake in Docker - Bash\nDESCRIPTION: This snippet demonstrates how to compile and build Manticore Search packages inside a Docker container using CMake. The process includes configuring the environment with necessary variables and executing build commands to package the Manticore application for a specific platform, such as Ubuntu Jammy. Required dependencies include Docker and CMake. Inputs are environment variables like DISTR and SYSROOT_URL, with outputs being compiled binaries or packages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DPACK=1 /path/to/sources\ncmake --build .\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n-e CACHEB=\"../cache\" \\\n-e DIAGNOSTIC=1 \\\n-e PACK_ICUDATA=0 \\\n-e NO_TESTS=1 \\\n-e DISTR=jammy \\\n-e boost=boost_nov22 \\\n-e sysroot=roots_nov22 \\\n-e arch=x86_64 \\\n-e CTEST_CMAKE_GENERATOR=Ninja \\\n-e CTEST_CONFIGURATION_TYPE=RelWithDebInfo \\\n-e WITH_COVERAGE=0 \\\n-e SYSROOT_URL=\"https://repo.manticoresearch.com/repository/sysroots\" \\\n-e HOMEBREW_PREFIX=\"\" \\\n-e PACK_GALERA=0 \\\n-e UNITY_BUILD=1 \\\n-v $(pwd):/manticore_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \\\nmanticoresearch/external_toolchain:vcpkg331_20250114 bash\n\n# following is to be run inside docker shell\ncd /manticore_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/\nmkdir build \\&\\& cd build\ncmake -DPACK=1 ..\nexport CMAKE_TOOLCHAIN_FILE=$(pwd)/dist/build_dockers/cross/linux.cmake\ncmake --build .\n# or if you want to build packages:\n# cmake --build . --target package\n```\n\n----------------------------------------\n\nTITLE: Configuring XMLPipe Source Library\nDESCRIPTION: Conditionally defines and configures the 'source_xmlpipe2' library for XML data sources, with optional iconv support.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (WITH_EXPAT)\n\tadd_library ( source_xmlpipe2 source_xmlpipe2.cpp source_xmlpipe2.h )\n\ttarget_link_libraries ( source_xmlpipe2 PRIVATE lextra )\n\tif (DL_EXPAT)\n\t\ttarget_link_libraries ( source_xmlpipe2 PRIVATE EXPAT::EXPAT_ld )\n\telse ()\n\t\ttarget_link_libraries ( source_xmlpipe2 PRIVATE EXPAT::EXPAT )\n\tendif ()\n\tif (WITH_ICONV)\n\t\tif (DL_ICONV)\n\t\t\ttarget_link_libraries ( source_xmlpipe2 PRIVATE Iconv::Iconv_ld )\n\t\telse ()\n\t\t\ttarget_link_libraries ( source_xmlpipe2 PRIVATE Iconv::Iconv )\n\t\tendif ()\n\tendif ()\n\n\ttarget_link_libraries ( indexer_sources INTERFACE source_xmlpipe2 )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Using CALL QSUGGEST with Result Line Display in SQL\nDESCRIPTION: Shows how to use CALL QSUGGEST with the 'result_line' option to display suggestions in a single row format. This changes the output to show all information in a more compact form.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Spell_correction.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCALL QSUGGEST('bagg with tasel', 'products', 1 as result_line);\n```\n\nLANGUAGE: sql\nCODE:\n```\n+----------+--------+\n| name     | value  |\n+----------+--------+\n| suggests | tassel |\n| distance | 1      |\n| docs     | 1      |\n+----------+--------+\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Ports in Manticore Search\nDESCRIPTION: Demonstrates how to set up HTTP listeners in the Manticore Search configuration file. It shows two equivalent ways to define HTTP ports using the 'listen' directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n   listen = 127.0.0.1:9308\n   listen = 127.0.0.1:9312:http\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing ARM64 Sysroot Archives using XZ\nDESCRIPTION: Bash command to compress all ARM64 sysroot tar archives with maximum compression level (9) using XZ compression. This helps reduce the size of files that will be included in Docker images.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/ubuntu_debian_arm64/some_name_aarc64.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor a in *._aarch64.tar; do xz -9 $a; done\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MySQL Sphinx Plugin in CMake\nDESCRIPTION: Specifies the include directories for the Sphinx plugin, including MySQL source directories and extra libraries like yassl and regex.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/mysqlse/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include\n                    ${CMAKE_SOURCE_DIR}/sql\n                    ${CMAKE_SOURCE_DIR}/extra/yassl/include\n                    ${CMAKE_SOURCE_DIR}/regex)\n```\n\n----------------------------------------\n\nTITLE: Listing Index Format Version Changes in Manticore Search\nDESCRIPTION: A comprehensive list of changes made to the Manticore Search index format across different versions. Each entry includes the version number, date, and a brief description of the change.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-format-versions.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nv.1, 0.9.7-rc2, added versioned index format\n\nv.2, 0.9.8-dev, added bUse64 flag\nv.2, 0.9.8-dev, changed m_tMin.m_iDocID to use 64 bits (was 32)\nv.3, 0.9.8-dev, added separate hitlist storage, .spp file\nv.4, 0.9.8-dev, changed that .spm file is mandatory\nv.5, 0.9.8-dev, added bitfields, changed schema locators accordingly\nv.6, 0.9.8-dev, added m_iMinPrefixLen, prefix indexing vs star syntax, new dict mangling rules\nv.7, 0.9.8-dev, added m_iMinInfixLen, prefix/infix_fields and enable_star, new dict mangling rules\nv.8, 0.9.8-rc1, changed prefix/infix mangling rules again (finalized)\n\nv.9, 0.9.9-dev, added tokenizer and dict settings to header\nv.10, 0.9.9-dev, added m_iKillListSize, kill lists\nv.11, 0.9.9-dev, changed dictionary checkpoint offset to 64 bits (was 32)\nv.12, 0.9.9-dev, added m_bIndexExactWords\nv.13, 0.9.9-rc1, added m_iMinStemmingLen\nv.14, 0.9.9-rc2, changed dictionary checkpoint serializer (2x GetOffset() vs 1x GetBytes() call)\n\nv.15, 1.10-dev, added m_sBlendChars, blended characters\nv.16, 1.10-dev, added m_bPayload column flag, payloads\nv.17, 1.10-dev, added string attributes support, .sps file\nv.18, 1.10-dev, added m_eHitless, hitless keywords\nv.19, 1.10-dev, added m_eHitFormat, single hits inlined in doclist\nv.20, 1.10-beta, added m_uMinMaxIndex, saving block min/max index to .spa\n\nv.21, 2.0.1-dev, added m_bWordDict, dict=keywords\nv.21, 2.0.1-dev, added m_bIndexSP, sentence/paragraph support\nv.21, 2.0.1-dev, changed dictionary checkpoint size from 1024 to 64\nv.22, 2.0.1-dev, added m_sZones, alpha zones support\nv.23, 2.0.1-dev, added m_iBoundaryStep, m_iStopwordStep\nv.24, 2.0.1-dev, added m_sBlendMode\nv.25, 2.0.1-beta, changed m_sZones from a single prefix to a list of masks\nv.26, 2.0.2-beta, added 64-bit MVAs\n\nv.27, 2.1.1-dev, added m_iInfixCodepointBytes, m_iInfixBlocksOffset, infix index to dict=keywords\nv.28, 2.1.1-dev, added support for RE field filters\nv.28, 2.1.1-dev, added m_iOvershortStep\nv.29, 2.1.1-dev, added support for multiple wordforms files\nv.30, 2.1.1-dev, added m_iEmbeddedLimit, embedded synonyms, stopwords, wordforms files\nv.31, 2.1.1-dev, added skiplists (.spe file), changed dictionary entry (added optional skiplist offset)\nv.32, 2.1.1-dev, added bigram indexing, and phrase searching with bigrams (bigram_index, bigram_freq_words directives)\nv.33, 2.1.1-dev, changed m_uMinMaxIndex to 64 bits (was 32 bits, fixes #1274)\nv.34, 2.1.1-dev, added m_iInfixBlocksWordsSize (to fix memory fragmentation)\nv.35, 2.1.1-dev, added average field lengths (in tokens) to header\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with Java in Manticore Search\nDESCRIPTION: Removes a table using the Java client. This executes an SQL query through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nsqlresult = utilsApi.sql(\"DROP TABLE products\", true);\n```\n\n----------------------------------------\n\nTITLE: IDE Source File Grouping for Charset Files in Manticore Search\nDESCRIPTION: Collects charset-related files and organizes them into a source group for better visualization in IDEs. This makes navigation easier by grouping related charset files together.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/tokenizer/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# populate charset files for IDE\nfile ( GLOB CHARSET_FILES \"${CHARSET_FILTER}\" )\nsource_group ( \"Charset sources\" FILES ${CHARSET_FILES} ${CHARSET_TEMPLATE} )\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents into Real-Time Tables using Rust in Manticore Search\nDESCRIPTION: This snippet shows how to insert documents into a real-time table named 'products' using the Rust client for Manticore Search. It demonstrates inserting documents with different fields and using auto-generated IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_documents_to_a_real-time_table.md#2025-04-22_snippet_9\n\nLANGUAGE: Rust\nCODE:\n```\nlet mut doc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"Crossbody Bag with Tassel\"));\ndoc.insert(\"price\".to_string(), serde_json::json!(19.85));\nlet mut insert_req = InsertDocumentRequest {\n    table: serde_json::json!(\"products\"),\n    doc: serde_json::json!(doc),\n    id: serde_json::json!(1),\n    ..Default::default(),\n};\nlet mut insert_res = index_api.insert(insert_req).await;\n\ndoc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"Crossbody Bag with Tassel\"));\ninsert_req = InsertDocumentRequest {\n    table: serde_json::json!(\"products\"),\n    doc: serde_json::json!(doc),\n    id: serde_json::json!(2),\n    ..Default::default(),\n};\ninsert_res = index_api.insert(insert_req).await;\n\ndoc = HashMap::new();\ndoc.insert(\"title\".to_string(), serde_json::json!(\"Tellow bag\"));\ninsert_req = InsertDocumentRequest {\n    table: serde_json::json!(\"products\"),\n    doc: serde_json::json!(doc),\n    id: serde_json::json!(0),\n    ..Default::default(),\n};\ninsert_res = index_api.insert(insert_req).await;\n```\n\n----------------------------------------\n\nTITLE: Using IDF Boost Modifier in Manticore Search\nDESCRIPTION: Shows the boost modifier which raises a word's IDF score by the specified factor in ranking calculations. This affects relevance scoring but not the matching process itself.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nboosted^1.234 boostedfieldend$^1.234\n```\n\n----------------------------------------\n\nTITLE: Getting Current UTC Time with UTC_TIME() in SQL\nDESCRIPTION: Executes the UTC_TIME() function in SQL to get the current time in the Coordinated Universal Time (UTC) timezone. The time is returned as a string in 'hh:ii:ss' format. No parameters are required.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect UTC_TIME();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dictionary Library Build in CMake\nDESCRIPTION: Sets up a dictionary library build with multiple source files and dependencies. Includes configuration for dictionary components, word forms, and optional stemmer support. Links against lextra, lstem, and infix libraries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/dict/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\nadd_library ( dict dict_base.cpp dict_entry.h dict_base.h dict_proxy.h dict_star.cpp dict_star8.cpp dict_exact.cpp\n\t\tdict_crc.cpp crc_engine.h crc_engine_impl.h word_forms.cpp word_forms.h template_dict_traits.h\n\t\ttemplate_dict_traits.cpp dict_crc.h dict_crc_impl.h dict_keywords.cpp bin.h aggregate_hit.h bin.cpp )\n\ntarget_include_directories ( dict PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( dict PRIVATE lextra lstem )\n\nadd_subdirectory ( infix )\ntarget_link_libraries ( dict PUBLIC infix )\n\nif (WITH_STEMMER)\n\ttarget_link_libraries ( dict PRIVATE stemmer::stemmer )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-robin Load Balancing Strategy\nDESCRIPTION: Implements sequential mirror selection in a strict rotating order.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Load_balancing.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nha_strategy = roundrobin\n```\n\n----------------------------------------\n\nTITLE: Using Date Format Function in SQL Select Query\nDESCRIPTION: Shows the usage of the new date_format() select list expression, which exposes the strftime() function for date formatting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT date_format(date_column, format_string) FROM table\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Setup\nDESCRIPTION: Sets up build configuration including compiler flags for different platforms and build types\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libre2/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (MSVC)\n\tSET ( CMAKE_CXX_FLAGS_RELWITHDEBINFO \"/MD /Zi /O2 /D NDEBUG\" )\nelse ()\n\tSET ( CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-Wall -O3 -g -DNDEBUG\" )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Syntax for index_field_lengths in Manticore INI\nDESCRIPTION: Shows the syntax for the `index_field_lengths` directive in a Manticore configuration file. This option controls whether field lengths (in keywords) are computed and stored during indexing. Set to 1 to enable, 0 (default) to disable. Enabling this is required for rankers like BM25A() and BM25F().\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_99\n\nLANGUAGE: ini\nCODE:\n```\nindex_field_lengths = {0|1}\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installations\nDESCRIPTION: Commands to verify Docker and Docker Compose installations by checking their versions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/dockerfiles/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker version\ndocker-compose version\n```\n\n----------------------------------------\n\nTITLE: HTTP API Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example JSON response from the HTTP API after a successful TRUNCATE with RECONFIGURE operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_22\n\nLANGUAGE: http\nCODE:\n```\n{\n\"total\":0,\n\"error\":\"\",\n\"warning\":\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library with Compiler-Specific Options\nDESCRIPTION: Creates a static library target 'sphinxclient' from the source file and applies compiler-specific options based on the compiler being used (special handling for Clang with MSVC frontend).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# our mega-lib\nadd_library ( sphinxclient STATIC sphinxclient.c )\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL \"MSVC\")\n\ttarget_compile_options ( sphinxclient PRIVATE /clang:-Wall )\nelse ()\n\ttarget_compile_options ( sphinxclient PRIVATE -g3 -Wall -O0 )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Hit List Processing Example for Keyword 'chuck'\nDESCRIPTION: Provides a practical example of how a keyword's occurrences across different document fields are encoded in the hit list. Shows the transformation from raw word positions to delta-encoded and VLB-compressed format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nraw-word-positions = 2, 16777224, 16777229\n\nuncompressed-hitlist = 2, 16777222, 5, 0\n\ncompressed-hitlist-bytes = 0x02, 0x88, 0x80, 0x80, 0x06, 0x05, 0x00\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Library Build with CMake\nDESCRIPTION: Sets up CMake build configuration for the schema library component. Specifies minimum CMake version, creates a library target with source files, sets include directories, and links required dependencies.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/schema/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\nadd_library ( schema columninfo.cpp helper.cpp schema.cpp locator.h locator_impl.h columninfo.h ischema.h helper.h\n\t\tschema.h rset.cpp rset.h )\ntarget_include_directories ( schema PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( schema PRIVATE lextra )\n```\n\n----------------------------------------\n\nTITLE: SphinxSE Query with Integer Range Filters\nDESCRIPTION: Examples of SphinxSE search queries using integer range filters to match documents with attribute values within specified ranges.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n# include groups from 3 to 7, inclusive\n... WHERE query='test;range=group_id,3,7;';\n# exclude groups from 5 to 25\n... WHERE query='test;!range=group_id,5,25;';\n```\n\n----------------------------------------\n\nTITLE: Configuring Manticore Standard Library in CMake\nDESCRIPTION: Defines the 'manticore_std' object library with all header and implementation files. The library includes various utility components like containers, memory management, string operations, synchronization primitives, and other common functionality. It sets include directories and links against the 'lextra' library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/std/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\nadd_library ( manticore_std OBJECT\n\t\taccessor.h\n\t\taccessor_impl.h\n\t\tat_scope_exit.h\n\t\tattrstub.h\n\t\tautoevent.h\n\t\tbase64.h\n\t\tbinarysearch.h\n\t\tbinarysearch_impl.h\n\t\tbitcount.h\n\t\tbitcount_impl.h\n\t\tbitvec.h\n\t\tbitvec_impl.h\n\t\tblobs.h\n\t\tblobs_impl.h\n\t\tbuffer.h\n\t\tbuffer_impl.h\n\t\tchecks.h\n\t\tcircular_buffer.h\n\t\tcircular_buffer_impl.h\n\t\tcomma.h\n\t\tcomma_impl.h\n\t\tcomp.h\n\t\tcomp_impl.h\n\t\tcrc32.h\n\t\tcrc32_impl.h\n\t\tdatamove.h\n\t\tdatamove_impl.h\n\t\tdeleter.h\n\t\tdeleter_impl.h\n\t\tenv.h\n\t\tescaped_builder.h\n\t\tescaped_builder_impl.h\n\t\tfastlog.h\n\t\tfastlog_impl.h\n\t\tfatal.h\n\t\tfixedvector.h\n\t\tfixedvector_impl.h\n\t\tfnv64.h\n\t\tformat.h\n\t\tgenerics.h\n\t\thash.h\n\t\thelpers.h\n\t\thelpers_impl.h\n\t\tints.h\n\t\titerations.h\n\t\titerations_impl.h\n\t\tlargebuffer.h\n\t\tlargebuffer_impl.h\n\t\tlog2.h\n\t\tlog2_impl.h\n\t\tlrucache.h\n\t\tmem.h\n\t\tmm.h\n\t\tmutex.h\n\t\tnum_conv.h\n\t\topenhash.h\n\t\topenhash_impl.h\n\t\torderedhash.h\n\t\torderedhash_impl.h\n\t\tqueue.h\n\t\tqueue_impl.h\n\t\trand.h\n\t\trefcounted_mt.h\n\t\trefcounted_mt_impl.h\n\t\trefptr.h\n\t\trelimit.h\n\t\trelimit_impl.h\n\t\trwlock.h\n\t\trwlock_impl.h\n\t\tscoped_comma.h\n\t\tscoped_comma_impl.h\n\t\tscopedlock.h\n\t\tscopedlock_impl.h\n\t\tsharedptr.h\n\t\tsharedptr_impl.h\n\t\tsmaloc.h\n\t\tsmaloc_impl.h\n\t\tsort.h\n\t\tsort_impl.h\n\t\tsphwarn.h\n\t\tspinlock.h\n\t\tstorage.h\n\t\tstrerrorm.h\n\t\tstring.h\n\t\tstring_impl.h\n\t\tstringbuilder.h\n\t\tstringbuilder_impl.h\n\t\tstringhash.h\n\t\tsys.h\n\t\ttdigest.h\n\t\tthread_annotations.h\n\t\tthreadrole.h\n\t\ttimers.h\n\t\ttype_traits.h\n\t\tuniq.h\n\t\tuniq_impl.h\n\t\tunique_lock.h\n\t\tvariant.h\n\t\tvariant_impl.h\n\t\tvector.h\n\t\tvector_impl.h\n\t\tvectraits.h\n\t\tvectraits_impl.h\n\t\tzip.h\n\t\tzip_impl.h\n\n\t\tautoevent.cpp\n\t\tbase64.cpp\n\t\tchecks.cpp\n\t\tcrc32.cpp\n\t\tenv.cpp\n\t\tfastlog.cpp\n\t\tfatal.cpp\n\t\tfnv64.cpp\n\t\tmem.cpp\n\t\tmm.cpp\n\t\tmutex.cpp\n\t\trand.cpp\n\t\trwlock.cpp\n\t\tsmaloc.cpp\n\t\tsphwarn.cpp\n\t\tstring.cpp\n\t\tstringbuilder.cpp\n\t\tstringhash.cpp\n\t\tsys.cpp\n\t\ttdigest.cpp\n\t\ttimers.cpp\n\t\t)\ntarget_include_directories( manticore_std PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( manticore_std PRIVATE lextra )\n```\n\n----------------------------------------\n\nTITLE: Displaying Copyright Notice for libpq\nDESCRIPTION: Shows the copyright notice for libpq (PostgreSQL), which is used during compilation and may be dynamically loaded at runtime by Manticore Search. It includes the PostgreSQL License terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nPostgreSQL Database Management System\n(formerly known as Postgres, then as Postgres95)\n\nPortions Copyright (c) 1996-2024, PostgreSQL Global Development Group\n\nPortions Copyright (c) 1994, The Regents of the University of California\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose, without fee, and without a written agreement\nis hereby granted, provided that the above copyright notice and this\nparagraph and the following two paragraphs appear in all copies.\n\nIN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR\nDIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING\nLOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS\nDOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nTHE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\nON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO\nPROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n```\n\n----------------------------------------\n\nTITLE: Extracting and Sourcing Stack Probe Results for Manticore Search\nDESCRIPTION: Bash commands to extract the stack probe experiment results and source them into the current environment. This allows the daemon to use pre-calculated stack values during memcheck.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsrc/searchd --mockstack | tail -n +6 > stack.txt\nsource stack.txt\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS Python Response\nDESCRIPTION: Sample response from the SHOW THREADS command via Python client, showing thread information as a Python dictionary.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n[{'columns': [{'TID': {'type': 'long'}}, {'Name': {'type': 'string'}}, {'Proto': {'type': 'string'}}, {'State': {'type': 'string'}}, {'Connection from': {'type': 'string'}}, {'ConnID': {'type': 'long long'}}, {'This/prev job time, s': {'type': 'string'}}, {'CPU activity': {'type': 'float'}}, {'Jobs done': {'type': 'long'}}, {'Thread status': {'type': 'string'}}, {'Info': {'type': 'string'}}], 'data': [{'TID': 506958, 'Name': 'work_6', 'Proto': 'http', 'State': 'query', 'Connection from': '127.0.0.1:38600', 'ConnID': 834, 'This/prev job time, s': '206us', 'CPU activity': '91.85%', 'Jobs done': 943, 'Thread status': 'working', 'Info': 'show_threads'}], 'total': 1, 'error': '', 'warning': ''}]\n```\n\n----------------------------------------\n\nTITLE: Setting Columnar Git Repository and Tag in CMake\nDESCRIPTION: Configures the Git repository URL and version tag for the Manticore Columnar library. The AUTO_TAG is automatically replaced with the format 'cX-sY' where X represents the columnar API version and Y represents the secondary API version.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/columnar_src.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGIT_REPOSITORY https://github.com/manticoresoftware/columnar.git GIT_TAG \"${AUTO_TAG}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Optimize Settings in Manticore Search INI\nDESCRIPTION: Configuration settings to control automatic table optimization behavior. Can be disabled (0), enabled (1), or enabled with threshold multiplication (2).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauto_optimize = 0 # disable automatic OPTIMIZE\n```\n\nLANGUAGE: ini\nCODE:\n```\nauto_optimize = 2 # OPTIMIZE starts at 16 chunks (on 4 cpu cores server)\n```\n\n----------------------------------------\n\nTITLE: Setting High Availability Ping Interval\nDESCRIPTION: Defines the interval between agent mirror pings for status tracking in distributed setups.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\nha_ping_interval = 3s\n```\n\n----------------------------------------\n\nTITLE: Downloading Manticore Source Archive - Bash\nDESCRIPTION: This snippet details how to download and extract a specific version of Manticore Search source code from GitHub using wget and tar. It's useful when git is not available or preferred. Dependencies include wget and tar utilities. The input URL corresponds to the desired version, leading to extracted source files ready for build.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget -c https://github.com/manticoresoftware/manticoresearch/archive/refs/tags/3.6.0.tar.gz\ntar -zxf 3.6.0.tar.gz\ncd manticoresearch-3.6.0\n```\n\n----------------------------------------\n\nTITLE: Example Output of Manticore Search Upload Process\nDESCRIPTION: This snippet shows the expected output when running the Manticore Search upload Docker image. It includes prompts for issue information, file upload progress, and the final path to share with developers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n🚀 Welcome to Manticore Search Upload Tool! 🚀\n\n📂 Files to be uploaded:\n  tt (800)\n\n🔗 Please enter the related issue URL/number\n(e.g., https://github.com/manticoresoftware/manticoresearch/issues/123 or just 123):\n123\n\n📤 Starting upload process...\nINFO: Cache file not found or empty, creating/populating it.\nINFO: Compiling list of local files...\nINFO: Running stat() and reading/calculating MD5 values on 23 files, this may take some time...\nINFO: Summary: 23 local files to upload\nupload: './tt/tt.0.spa' -> 's3://write-only/issue-20250219-123/tt/tt.0.spa'  [1 of 23]\n 40 of 40   100% in    2s    15.03 B/s  done\nupload: './tt/tt.0.spd' -> 's3://write-only/issue-20250219-123/tt/tt.0.spd'  [2 of 23]\n 1 of 1   100% in    0s     1.99 B/s  done\nupload: './tt/tt.0.spe' -> 's3://write-only/issue-20250219-123/tt/tt.0.spe'  [3 of 23]\n 1 of 1   100% in    0s     2.02 B/s  done\nupload: './tt/tt.0.sph' -> 's3://write-only/issue-20250219-123/tt/tt.0.sph'  [4 of 23]\n 420 of 420   100% in    0s   895.32 B/s  done\nupload: './tt/tt.0.sphi' -> 's3://write-only/issue-20250219-123/tt/tt.0.sphi'  [5 of 23]\n 66 of 66   100% in    0s   142.67 B/s  done\nupload: './tt/tt.0.spi' -> 's3://write-only/issue-20250219-123/tt/tt.0.spi'  [6 of 23]\n 18 of 18   100% in    0s    39.13 B/s  done\nupload: './tt/tt.0.spidx' -> 's3://write-only/issue-20250219-123/tt/tt.0.spidx'  [7 of 23]\n 145 of 145   100% in    0s   313.38 B/s  done\nupload: './tt/tt.0.spm' -> 's3://write-only/issue-20250219-123/tt/tt.0.spm'  [8 of 23]\n 4 of 4   100% in    0s     8.36 B/s  done\nupload: './tt/tt.0.spp' -> 's3://write-only/issue-20250219-123/tt/tt.0.spp'  [9 of 23]\n 1 of 1   100% in    0s     2.15 B/s  done\nupload: './tt/tt.0.spt' -> 's3://write-only/issue-20250219-123/tt/tt.0.spt'  [10 of 23]\n 36 of 36   100% in    0s    78.35 B/s  done\nupload: './tt/tt.1.spa' -> 's3://write-only/issue-20250219-123/tt/tt.1.spa'  [11 of 23]\n 48 of 48   100% in    0s    81.35 B/s  done\nupload: './tt/tt.1.spd' -> 's3://write-only/issue-20250219-123/tt/tt.1.spd'  [12 of 23]\n 1 of 1   100% in    0s     1.65 B/s  done\nupload: './tt/tt.1.spe' -> 's3://write-only/issue-20250219-123/tt/tt.1.spe'  [13 of 23]\n 1 of 1   100% in    0s     1.95 B/s  done\nupload: './tt/tt.1.sph' -> 's3://write-only/issue-20250219-123/tt/tt.1.sph'  [14 of 23]\n 420 of 420   100% in    0s   891.58 B/s  done\nupload: './tt/tt.1.sphi' -> 's3://write-only/issue-20250219-123/tt/tt.1.sphi'  [15 of 23]\n 82 of 82   100% in    0s   166.42 B/s  done\nupload: './tt/tt.1.spi' -> 's3://write-only/issue-20250219-123/tt/tt.1.spi'  [16 of 23]\n 18 of 18   100% in    0s    39.46 B/s  done\nupload: './tt/tt.1.spidx' -> 's3://write-only/issue-20250219-123/tt/tt.1.spidx'  [17 of 23]\n 183 of 183   100% in    0s   374.04 B/s  done\nupload: './tt/tt.1.spm' -> 's3://write-only/issue-20250219-123/tt/tt.1.spm'  [18 of 23]\n 4 of 4   100% in    0s     8.42 B/s  done\nupload: './tt/tt.1.spp' -> 's3://write-only/issue-20250219-123/tt/tt.1.spp'  [19 of 23]\n 1 of 1   100% in    0s     1.28 B/s  done\nupload: './tt/tt.1.spt' -> 's3://write-only/issue-20250219-123/tt/tt.1.spt'  [20 of 23]\n 50 of 50   100% in    1s    34.60 B/s  done\nupload: './tt/tt.lock' -> 's3://write-only/issue-20250219-123/tt/tt.lock'  [21 of 23]\n 0 of 0     0% in    0s     0.00 B/s  done\nupload: './tt/tt.meta' -> 's3://write-only/issue-20250219-123/tt/tt.meta'  [22 of 23]\n 456 of 456   100% in    0s   923.34 B/s  done\nupload: './tt/tt.settings' -> 's3://write-only/issue-20250219-123/tt/tt.settings'  [23 of 23]\n 3 of 3   100% in    0s     6.41 B/s  done\n\n✅ Upload complete!\n📋 Please share this path with the developers:\nissue-20250219-123\n\n💡 Tip: Make sure to include this path when communicating with the Manticore team\n```\n\n----------------------------------------\n\nTITLE: Cloning Perfetto SDK Repository\nDESCRIPTION: Command to clone the specific version (v43.1) of the Perfetto SDK from Google's Android source repository\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/perfetto/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://android.googlesource.com/platform/external/perfetto -b v43.1\n```\n\n----------------------------------------\n\nTITLE: Executing Percolation Query with Asyncio Python\nDESCRIPTION: Uses Python's asyncio to perform a percolation search in an asynchronous context. Inputs documents in JSON-like format and retrieves document matches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nawait searchApi.percolate('products',{ \"query\":{ \"percolate\":{ \"documents\":[{\"title\":\"nice pair of shoes\",\"color\":\"blue\"},{\"title\":\"beautiful bag\"}]}}})\n```\n\n----------------------------------------\n\nTITLE: Sample Highlighted Search Response - ManticoreSearch Go\nDESCRIPTION: This block presents a typical JSON response returned by a highlighted search query in Go, showing the total hits and which snippet in 'content' was highlighted. The structure aligns with responses from the Go SDK, displaying document data, highlights, and scores. All strings are formatted as one would expect from the HTTP response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_43\n\nLANGUAGE: go\nCODE:\n```\n{\n\t\"took\":0,\n\t\"timed_out\":false,\n\t\"hits\":\n\t{\n\t\t\"total\":1,\n\t\t\"hits\":\n\t\t[{\n\t\t\t\"_id\": 1,\n\t\t\t\"_score\":1480,\n\t\t\t\"_source\":\n\t\t\t{\n\t\t\t\t\"content\":\"Text 1\",\n\t\t\t\t\"name\":\"Doc 1\",\n\t\t\t\t\"cat\":1\n\t\t\t},\n\t\t\t\"highlight\":\n\t\t\t{\n\t\t\t\t\"content\":\n\t\t\t\t[\n\t\t\t\t\t\"<b>Text 1</b>\"\n\t\t\t\t]\n\t\t\t}\n\t\t}]}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via MySQL CLI on Windows\nDESCRIPTION: This batch script connects to the Manticore Search server using the MySQL command line interface. It requires specifying the port and host IP explicitly. Ensure Manticore is started as a service before attempting to connect.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Windows.md#2025-04-22_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\nmysql -P9306 -h127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Month from Timestamp with DAY() in SQL\nDESCRIPTION: Executes the DAY() function in SQL to extract the day of the month (1-31) from a given timestamp, interpreted according to the current timezone. This example uses NOW() to provide the current timestamp as input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect day(now());\n```\n\n----------------------------------------\n\nTITLE: Building Manticore Search Package\nDESCRIPTION: Command to build a package for Manticore Search. This creates a package based on the DISTR_BUILD option, defaulting to a simple archive with binaries and supplementary files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --target package --config RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: Makefile Parser for Source Files\nDESCRIPTION: Parses the original Makefile to extract header and object files, converting them into CMake source lists\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libre2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nFILE ( STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/MakefileOrig\" _CONTENT )\nFOREACH (LINE ${_CONTENT})\n\tIF (\"${LINE}\" MATCHES \"^(INSTALL_HFILES|HFILES|OFILES)=\")\n\t\tSTRING ( REPLACE \";\" \"\" LINE \"${LINE}\" )\n\t\tseparate_arguments ( SRCLIST UNIX_COMMAND \"${LINE}\" )\n\t\tforeach (SRC ${SRCLIST})\n\t\t\tIF (\"${SRC}\" MATCHES \"=\")\n\t\t\t\tSTRING ( REPLACE \"=\" \"\" _NAME \"${SRC}\" )\n\t\t\t\tset ( ${_NAME} )\n\t\t\telse ()\n\t\t\t\tLIST ( APPEND ${_NAME} ${SRC} )\n\t\t\tendif ()\n\t\tendforeach ()\n\tendif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Configuring File Preopen in Manticore Search\nDESCRIPTION: Controls whether searchd opens all table files on startup and keeps them open. Enables faster queries but requires more file descriptors. Helps prevent race conditions during table rotation under high load.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_55\n\nLANGUAGE: ini\nCODE:\n```\npreopen = 1\n```\n\n----------------------------------------\n\nTITLE: Text Redirection Operations\nDESCRIPTION: Demonstrates two examples of text redirection using the > operator. The first line compares 'hello test' to 'hello 3 1 2 all', and the second line compares 'appl' to 'appl fruit'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_115/wf_multi.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhello test > hello 3 1 2 all\n~appl > appl fruit\n```\n\n----------------------------------------\n\nTITLE: Displaying cJSON Copyright and License Notice\nDESCRIPTION: Shows the copyright and license notice for cJSON, including the MIT License terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2009-2017 Dave Gamble and cJSON contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: SQL BACKUP Example for Multiple Tables\nDESCRIPTION: Example of backing up specific tables 'a' and 'b' to a backup directory\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nBACKUP TABLES a, b TO /backup\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Stripper Library in Manticore Search\nDESCRIPTION: Defines and configures the 'stripper' library with source files, include directories, and dependencies. This library is responsible for HTML stripping functionality in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/stripper/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmessage ( STATUS \"Inside directory src/stripper...\" )\n\nadd_library ( stripper html_stripper.cpp html_stripper.h html_stripper_tag.h )\ntarget_include_directories ( stripper PRIVATE \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( stripper PRIVATE lextra )\n```\n\n----------------------------------------\n\nTITLE: Example Query Profile Output in Manticore Search JSON Response\nDESCRIPTION: Shows an example snippet of the JSON response containing query profiling data. When `\"profile\": true` is requested, the response includes a `profile` object with a `query` array. Each element in the array represents a profiled state, detailing its `status`, `duration`, `switches`, and `percent`.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_profile.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n \"profile\": {\n    \"query\": [\n      {\n        \"status\": \"unknown\",\n        \"duration\": 0.000141,\n        \"switches\": 8,\n        \"percent\": 2.17\n      },\n      {\n        \"status\": \"local_df\",\n        \"duration\": 0.000870,\n        \"switches\": 1,\n        \"percent\": 13.40\n      },\n      {\n        \"status\": \"local_search\",\n        \"duration\": 0.001038,\n        \"switches\": 2,\n        \"percent\": 15.99\n      },\n      {\n        \"status\": \"setup_iter\",\n        \"duration\": 0.000154,\n        \"switches\": 14,\n        \"percent\": 2.37\n      },\n      {\n        \"status\": \"dict_setup\",\n        \"duration\": 0.000026,\n        \"switches\": 3,\n        \"percent\": 0.40\n      },\n      {\n        \"status\": \"parse\",\n        \"duration\": 0.000205,\n        \"switches\": 3,\n        \"percent\": 3.15\n      },\n      {\n        \"status\": \"transforms\",\n        \"duration\": 0.000974,\n        \"switches\": 4,\n        \"percent\": 15.01\n      },\n      {\n        \"status\": \"init\",\n        \"duration\": 0.002931,\n        \"switches\": 20,\n        \"percent\": 45.16\n      },\n      {\n        \"status\": \"get_docs\",\n        \"duration\": 0.000007,\n        \"switches\": 7,\n        \"percent\": 0.10\n      },\n      {\n        \"status\": \"rank\",\n        \"duration\": 0.000002,\n        \"switches\": 14,\n        \"percent\": 0.03\n      },\n      {\n        \"status\": \"finalize\",\n        \"duration\": 0.000013,\n        \"switches\": 7,\n        \"percent\": 0.20\n      },\n      {\n        \"status\": \"aggregate\",\n        \"duration\": 0.000128,\n        \"switches\": 1,\n        \"percent\": 1.97\n      },\n      {\n        \"status\": \"total\",\n        \"duration\": 0.006489,\n        \"switches\": 84,\n        \"percent\": 100.00\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Class Member Naming Convention Examples in C++\nDESCRIPTION: Demonstrates proper and improper naming conventions for class members following Hungarian notation and prefix rules.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-coding-standard.txt#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nclass SampleClass_c\n{\n\tint\t\tm_iSomething;\t// right, got both \"m_\" prefix and \"i\" typeid\n\tchar\tiAnotherthing;\t// WRONG, bad typeid char, bad capitalization\n\tlong\tm_AnotherField;\t// WRONG, missing typeid char\n\tchar *\tm_lpszWtf;\t\t// WRONG, typeid must be single char (or \"pp\", \"sz\")\n\t...\n\n\t/// right\n\tvoid SampleCall ( RuleType_e eRule, char cKey, bool bFlag, char * szArg );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Attribute Error Handling in Manticore Search (INI)\nDESCRIPTION: Specifies the action to take if JSON format errors are found. The default value is 'ignore_attr' (ignore errors). Setting this option to 'fail_index' will cause indexing to fail at the first JSON format error. This setting applies only to sql_attr_json attributes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Common.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\non_json_attr_error = ignore_attr\n```\n\n----------------------------------------\n\nTITLE: JSON Log Entry for AND Operator Evaluation\nDESCRIPTION: A server log entry showing the evaluation of an AND operator in JSON format. The log demonstrates the traversal of posting lists for the AND operation with terms 'the', 'me', and 'or'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/stack.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[ 0.001 sec] JSON: request={\"query\":{\"match\":{\"*\":{\"query\":\"the me or\",\"operator\":\"and\"}}}}\n[ 0.001 sec] got token=the\n[ 0.001 sec] got token=me\n[ 0.001 sec] got token=or\n[ 0.001 sec] parsed 'the & me & or'\n[ 0.001 sec] postinglists\n[ 0.001 sec] term=the, docs=2, hits=2\n[ 0.001 sec] term=me, docs=3, hits=3\n[ 0.001 sec] term=or, docs=4, hits=4\n[ 0.001 sec] going to evaluate AND\n[ 0.001 sec] traverse_postinglist: term=the, childpos=0, docs=2\n[ 0.001 sec] traverse_postinglist: term=me, childpos=1, docs=3\n[ 0.001 sec] traverse_postinglist: term=or, childpos=2, docs=4\n[ 0.001 sec] returning docid=3, weight=3000\n[ 0.001 sec] and: childpos=0 done\n[ 0.001 sec] and: childpos=1 done\n[ 0.001 sec] and: childpos=2 done\n[ 0.001 sec] node=1048576, leaf=1\n[ 0.001 sec] weight=3000, sort=1\n[ 0.001 sec] JSON: matched=1, total=1, took=0\n```\n\n----------------------------------------\n\nTITLE: Manticore Search Status Report\nDESCRIPTION: Comprehensive status report showing various system metrics including connection counts, command statistics, query performance metrics, and cache statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/smoke_ref.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nconnections: 18\nmaxed_out: 0\ncommand_search: 17\ncommand_excerpt: 3\ncommand_update: 4\ncommand_keywords: 1\ncommand_persist: 1\ncommand_status: 1\ncommand_flushattrs: 0\ncommand_sphinxql: 0\ncommand_ping: 0\ncommand_delete: 0\ncommand_set: 0\ncommand_insert: 0\ncommand_replace: 0\ncommand_commit: 0\ncommand_suggest: 0\ncommand_json: 0\ncommand_callpq: 0\ncommand_cluster: 0\ncommand_getfield: 0\ninsert_replace_stats_ms_avg: N/A N/A N/A\ninsert_replace_stats_ms_min: N/A N/A N/A\ninsert_replace_stats_ms_max: N/A N/A N/A\ninsert_replace_stats_ms_pct95: N/A N/A N/A\ninsert_replace_stats_ms_pct99: N/A N/A N/A\nsearch_stats_ms_avg: N/A N/A N/A\nsearch_stats_ms_min: N/A N/A N/A\nsearch_stats_ms_max: N/A N/A N/A\nsearch_stats_ms_pct95: N/A N/A N/A\nsearch_stats_ms_pct99: N/A N/A N/A\nupdate_stats_ms_avg: N/A N/A N/A\nupdate_stats_ms_min: N/A N/A N/A\nupdate_stats_ms_max: N/A N/A N/A\nupdate_stats_ms_pct95: N/A N/A N/A\nupdate_stats_ms_pct99: N/A N/A N/A\nagent_connect: 1\nagent_retry: 0\nqueries: 17\ndist_queries: 1\nworkers_clients: 1\nworkers_clients_vip: 0\nworkers_clients_buddy: 0\nwork_queue_length: 3\nag_dist_1_1_connect_failures: 0\nag_dist_1_1_network_errors: 0\nag_dist_1_1_wrong_replies: 0\nag_dist_1_1_unexpected_closings: 0\nag_dist_1_1_warnings: 0\nag_dist_1_1_succeeded_queries: 1\nquery_cpu: OFF\ndist_local: 0.000\nquery_reads: OFF\nquery_readkb: OFF\navg_query_cpu: OFF\navg_dist_local: 0.000\navg_query_reads: OFF\navg_query_readkb: OFF\nqcache_thresh_msec: 3000\nqcache_ttl_sec: 60\nqcache_cached_queries: 0\nqcache_used_bytes: 0\nqcache_hits: 0\n```\n\n----------------------------------------\n\nTITLE: Hit List Entry Format in Manticore's .spp File\nDESCRIPTION: Describes the structure of hit list entries in the .spp file, which store positional information of keywords within documents. Shows how position data is encoded with field ID, last position flag, and position within field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhitlist-entry =\n\tword-position : int32, delta-encoded\n\nstruct word-position\n{\n\tint field_id : 8; // bits 25-31\n\tint is_last : 1; // bit 24\n\tint word_position_in_field : 23; // bits 0-23\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Debug Token in Manticore Search\nDESCRIPTION: SQL query result showing a debug token hash value. This appears to be an authentication token used for debug operations in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n| debug token | aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d |\n+-------------+------------------------------------------+\n1 row in set (0,00 sec)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up installation rules for the RE2 library, including headers, binaries, and CMake configuration files\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libre2/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall ( FILES ${INSTALL_HFILES} DESTINATION include/re2 )\ninstall ( TARGETS re2 EXPORT Re2Export RUNTIME DESTINATION lib LIBRARY DESTINATION lib )\ninstall ( FILES \"$<TARGET_FILE_DIR:re2>/re2$<$<CONFIG:Debug>:d>.pdb\" EXPORT Re2Export DESTINATION lib OPTIONAL )\n\ninstall ( EXPORT Re2Export FILE re2-targets.cmake DESTINATION \"${CMAKE_CMAKE_DIR}\" NAMESPACE re2:: )\n```\n\n----------------------------------------\n\nTITLE: Displaying Manticore Columnar Library Copyright Notice\nDESCRIPTION: Shows the copyright notice for the Manticore Columnar Library, indicating the years and the company holding the copyright.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2020-2025, Manticore Software LTD (https://manticoresearch.com)\nAll rights reserved\n```\n\n----------------------------------------\n\nTITLE: Text Normalization Mapping Rules for Manticore Search\nDESCRIPTION: Defines mapping rules for text normalization. Includes handling of company names (AT&T), military/historical terms, operating systems (OS/2, MS-DOS), common abbreviations (U.S., U.S.A.), and preserves special characters. Each line shows the input pattern and its normalized output format separated by =>.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/gtests/libsphinxtest.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAT&T      => AT&T\n   AT & T => AT & T  \nstandarten fuehrer => Standartenfuehrer\nstandarten   fuhrer  => Standartenfuehrer\nOS/2 => OS/2\nMs-Dos => MS-DOS\nMS DOS => MS-DOS\nfeat. => featuring\nU.S. => US\nU.S.A. => USA\nU.S.B. => USB\nU.S.D. => USD\nU.S.P. => USP\nU.S.A.F. => USAF\nlife:) => life:)\n; => ;\n```\n\n----------------------------------------\n\nTITLE: Verb Tense Normalization Rules\nDESCRIPTION: Pattern rules that normalize different verb forms ('runs', 'running') to their base form ('run'). Used for text normalization in search contexts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_041/wordforms.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nruns > run\nrunning > run\n```\n\n----------------------------------------\n\nTITLE: Configuring Flex Lexer Generation Function\nDESCRIPTION: Function that sets up Flex lexer generation targets. Similar to the Bison function, it handles both cases where Flex is available and when pre-built lexer files should be used.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction ( MY_FLEX LexerName LexerSrc Dependency TargetFlex )\n\tif (NOT FLEX_FOUND)\n\t\tif (EXISTS \"${FLEX_DIR}/flex${LexerSrc}.c\")\n\t\t\tinfomsg ( \"Will use pre-built ${FLEX_DIR}/flex${LexerSrc}.c for lexer ${LexerName}\" )\n\t\t\treturn ()\n\t\telse ()\n\t\t\tmessage ( FATAL_ERROR \"No pre-compiled lexer file flex${LexerSrc}.c for ${LexerSrc}.l exists, and Flex not found. Can't continue\" )\n\t\tendif ()\n\tendif ()\n\n\tLIST ( APPEND ${TargetFlex}_FLEX \"${LexerSrc}.l\" )\n\tset ( ${TargetFlex}_FLEX ${${TargetFlex}_FLEX} PARENT_SCOPE )\n\tFLEX_TARGET ( ${LexerName} \"${CMAKE_CURRENT_SOURCE_DIR}/${LexerSrc}.l\" \"${FLEX_DIR}/flex${LexerSrc}.c\" )\n\tset_property ( SOURCE ${Dependency} APPEND PROPERTY OBJECT_DEPENDS ${FLEX_${LexerName}_OUTPUTS} )\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: File Path Reference in Markdown\nDESCRIPTION: Reference to the storage location of prepared SDK archive on development server.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/bigsur_sdk/MacOSX11.3.sdk.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`/work/docker`\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Table via Configuration File in Manticore Search\nDESCRIPTION: This snippet demonstrates how to define a template table in a Manticore Search configuration file. It sets up a table named 'template' with various NLP settings including morphology, wordforms, exceptions, and stopwords.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Template_table.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntable template {\n  type = template\n  morphology = stem_en\n  wordforms = wordforms.txt\n  exceptions = exceptions.txt\n  stopwords = stopwords.txt\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP Interface with 100 Continue Support in Curl\nDESCRIPTION: Two bash examples demonstrating the difference in HTTP behavior before and after implementing '100 Continue' support. The second example shows improved response time when transferring batches with curl, which now properly handles the Expect: 100-continue header without waiting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ time curl -v -sX POST http://localhost:9318/bulk -H \"Content-Type: application/x-ndjson\" --data '{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Prof. Matt Heaney IV\",\"email\":\"ibergnaum@yahoo.com\",\"description\":\"Tempora ullam eaque consequatur. Vero aut minima ut et ut omnis officiis vel. Molestiae quis voluptatum sint numquam.\",\"age\":15,\"active\":1}}}\n{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Prof. Boyd McKenzie\",\"email\":\"carlotta11@hotmail.com\",\"description\":\"Blanditiis maiores odio corporis eaque illum. Aut et rerum iste. Neque et ullam quisquam officia dignissimos quo cumque.\",\"age\":84,\"active\":1}}}\n{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Mr. Johann Smith\",\"email\":\"stiedemann.tristin@ziemann.com\",\"description\":\"Temporibus amet magnam consequatur omnis consequatur illo fugit. Debitis natus doloremque est tempore deserunt vero. Harum eos corrupti nemo ut.\",\"age\":89,\"active\":1}}}\n{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Hector Pouros\",\"email\":\"hickle.mafalda@hotmail.com\",\"description\":\" as voluptatem inventore sit. Aliquam fugit perferendis est id aut odio et sapiente.\",\"age\":64,\"active\":1}}}'\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 9318 (#0)\n> POST /bulk HTTP/1.1\n> Host: localhost:9318\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/x-ndjson\n> Content-Length: 1025\n> Expect: 100-continue\n>\n* Done waiting for 100-continue\n* We are completely uploaded and fine\n< HTTP/1.1 200 OK\n< Server: 4.2.0 15e927b@211223 release (columnar 1.11.4 327b3d4@211223)\n< Content-Type: application/json; charset=UTF-8\n< Content-Length: 434\n<\n* Connection #0 to host localhost left intact\n{\"items\":[{\"insert\":{\"table\":\"user\",\"_id\":2811798918248005633,\"created\":true,\"result\":\"created\",\"status\":201}},{\"insert\":{\"table\":\"user\",\"_id\":2811798918248005634,\"created\":true,\"result\":\"created\",\"status\":201}},{\"insert\":{\"table\":\"user\",\"_id\":2811798918248005635,\"created\":true,\"result\":\"created\",\"status\":201}},{\"insert\":{\"table\":\"user\",\"_id\":2811798918248005636,\"created\":true,\"result\":\"created\",\"status\":201}}],\"errors\":false}\nreal\t0m1.022s\nuser\t0m0.001s\nsys\t0m0.010s\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ time curl -v -sX POST http://localhost:9318/bulk -H \"Content-Type: application/x-ndjson\" --data '{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Prof. Matt Heaney IV\",\"email\":\"ibergnaum@yahoo.com\",\"description\":\"Tempora ullam eaque consequatur. Vero aut minima ut et ut omnis officiis vel. Molestiae quis voluptatum sint numquam.\",\"age\":15,\"active\":1}}}\n{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Prof. Boyd McKenzie\",\"email\":\"carlotta11@hotmail.com\",\"description\":\"Blanditiis maiores odio corporis eaque illum. Aut et rerum iste. Neque et ullam quisquam officia dignissimos quo cumque.\",\"age\":84,\"active\":1}}}\n{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Mr. Johann Smith\",\"email\":\"stiedemann.tristin@ziemann.com\",\"description\":\"Temporibus amet magnam consequatur omnis consequatur illo fugit. Debitis natus doloremque est tempore deserunt vero. Harum eos corrupti nemo ut.\",\"age\":89,\"active\":1}}}\n{\"insert\": {\"index\": \"user\", \"doc\":  {\"name\":\"Hector Pouros\",\"email\":\"hickle.mafalda@hotmail.com\",\"description\":\" as voluptatem inventore sit. Aliquam fugit perferendis est id aut odio et sapiente.\",\"age\":64,\"active\":1}}}'\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 9318 (#0)\n> POST /bulk HTTP/1.1\n> Host: localhost:9318\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/x-ndjson\n> Content-Length: 1025\n> Expect: 100-continue\n>\n< HTTP/1.1 100 Continue\n< Server: 4.2.1 63e5749@220405 dev\n< Content-Type: application/json; charset=UTF-8\n< Content-Length: 0\n* We are completely uploaded and fine\n< HTTP/1.1 200 OK\n< Server: 4.2.1 63e5749@220405 dev\n< Content-Type: application/json; charset=UTF-8\n< Content-Length: 147\n<\n* Connection #0 to host localhost left intact\n{\"items\":[{\"bulk\":{\"table\":\"user\",\"_id\":2811798919590182916,\"created\":4,\"deleted\":0,\"updated\":0,\"result\":\"created\",\"status\":201}}],\"errors\":false}\nreal\t0m0.015s\nuser\t0m0.005s\nsys\t0m0.004s\n```\n\n----------------------------------------\n\nTITLE: TypeScript Aggregation Response Format\nDESCRIPTION: Shows the response format from a TypeScript aggregation query. The response includes both the search hits and the aggregation results grouped by the calculated expression field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 5,\n    \"hits\": [\n      {\n        \"_id\": 1,\n        \"_score\": 1,\n        \"_source\": {\n          \"content\": \"Text 1\",\n          \"name\": \"Doc 1\",\n          \"cat\": 1,\n          \"cat_range\": 1\n        }\n      },\n ...\n      {\n        \"_id\": 5,\n        \"_score\": 1,\n        \"_source\": {\n          \"content\": \"Text 5\",\n          \"name\": \"Doc 5\",\n          \"cat\": 4,\n          \"cat_range\": 2,\n        }\n      }\n    ]\n  },\n  \"aggregations\": {\n    \"expr_group\": {\n      \"buckets\": [\n        {\n          \"key\": 0,\n          \"doc_count\": 0\n        },\n\t\t{\n          \"key\": 1,\n          \"doc_count\": 3\n        },\n        {\n          \"key\": 2,\n          \"doc_count\": 2\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Restore Commands\nDESCRIPTION: Commands to restore a Manticore Search backup using mysql client\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Backup_and_restore.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h0 -P9306 < manticore_backup.sql\nmariadb -h0 -P9306 < manticore_backup.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Subtree Hits Cache Size\nDESCRIPTION: Defines maximum RAM usage for common subtree hit cache per query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_68\n\nLANGUAGE: ini\nCODE:\n```\nsubtree_hits_cache = 16M\n```\n\n----------------------------------------\n\nTITLE: Delta Encoding Example for Document IDs in Manticore\nDESCRIPTION: Demonstrates how delta encoding works with a monotonically increasing sequence of values, where each value is replaced with its difference from the previous value. Used in Manticore to efficiently store document IDs and other sequential data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsource-sequence = 3, 5, 7, 11, 13, 17, ...\ndelta-encoded = 3, 2, 2, 4, 2, 4, ...\n```\n\n----------------------------------------\n\nTITLE: SQL Command Reference - SHOW META\nDESCRIPTION: Reference to the SHOW META command which was modified to no longer display iterators when sorters use precalculated data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW META\n```\n\n----------------------------------------\n\nTITLE: PHP Value Assignment or Comparison\nDESCRIPTION: A basic PHP expression showing either value assignment or comparison using the arrow operator. Context is insufficient to determine exact intended use.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_025/s25.txt#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n1 => 1\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on MacOS\nDESCRIPTION: Homebrew installation command for MacOS systems.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install manticoresoftware/tap/manticoresearch manticoresoftware/tap/manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Replace\nDESCRIPTION: Replace multiple documents in a single operation using bulk API endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /bulk\n{ \"replace\" : { \"table\" : \"products\", \"id\":1, \"doc\": { \"title\": \"doc one\", \"tag\" : 10 } } }\n{ \"replace\" : { \"table\" : \"products\", \"id\":2, \"doc\": { \"title\": \"doc two\", \"tag\" : 20 } } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Bison Parser Generation Function\nDESCRIPTION: Function that sets up Bison parser generation targets. It handles both cases where Bison is available and when pre-built parser files should be used.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction ( MY_BISON ParserName ParserSrc Dependency TargetBison )\n\tif (NOT BISON_FOUND)\n\t\tif (EXISTS \"${BISON_DIR}/bis${ParserSrc}.c\" AND EXISTS \"${BISON_DIR}/bis${ParserSrc}.h\")\n\t\t\tinfomsg ( \"Will use pre-built ${BISON_DIR}/bis${ParserSrc}.c and ${BISON_DIR}/bis${ParserSrc}.h for grammar parser ${ParserName}\" )\n\t\t\treturn ()\n\t\telse ()\n\t\t\tmessage ( FATAL_ERROR \"No pre-compiled grammar files bis${ParserSrc}.c and bis${ParserSrc}.h for ${ParserSrc}.y exists, and Bison not found. Can't continue\" )\n\t\tendif ()\n\tendif ()\n\n\tLIST ( APPEND ${TargetBison}_BISON \"${ParserSrc}.y\" )\n\tset ( ${TargetBison}_BISON ${${TargetBison}_BISON} PARENT_SCOPE )\n\tBISON_TARGET ( ${ParserName} \"${CMAKE_CURRENT_SOURCE_DIR}/${ParserSrc}.y\" \"${BISON_DIR}/bis${ParserSrc}.c\" COMPILE_FLAGS ${BIS_FLAGS} )\n\tset_source_files_properties ( ${Dependency} PROPERTIES OBJECT_DEPENDS ${BISON_${ParserName}_OUTPUT_SOURCE} SKIP_UNITY_BUILD_INCLUSION ON )\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Test for Indextool in Manticore Search\nDESCRIPTION: This CMake script sets up an automated test for the indextool utility. It configures a test configuration file and adds a test that runs indextool through a separate test.cmake script. The test is conditional and only runs on non-Windows platforms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/indextool/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.17 )\n\nset(PORT 19306)\n\nif (WIN32 OR CYGWIN)\n\tmessage (STATUS \"Skip add indextool test on windows\")\nelse ()\n\tconfigure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/indextool.conf ${MANTICORE_BINARY_DIR}/test/indextool.conf @ONLY )\n\tadd_test ( NAME Perform_indextool COMMAND ${CMAKE_COMMAND}\n\t\t\t-D SEARCHD=$<TARGET_FILE:searchd>\n\t\t\t-D INDEXTOOL=$<TARGET_FILE:indextool>\n\t\t\t-D PORT=${PORT}\n\t\t\t-P ${CMAKE_CURRENT_SOURCE_DIR}/test.cmake\n\t\t\tWORKING_DIRECTORY \"${MANTICORE_BINARY_DIR}/test\" )\n\tSET_TESTS_PROPERTIES ( Perform_indextool PROPERTIES LABELS INDEXTOOL )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via _mapping API\nDESCRIPTION: Creates a real-time table using the Elasticsearch-compatible _mapping API endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nPOST /your_table_name/_mapping -d '\n{\n  \"properties\": {\n    \"price\": {\n        \"type\": \"float\"\n    },\n    \"title\": {\n        \"type\": \"text\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting Manticore using systemd in Linux\nDESCRIPTION: Command to start the Manticore Search service using systemd. This is the recommended way to start Manticore on systems that use systemd.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Linux.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start manticore\n```\n\n----------------------------------------\n\nTITLE: Permanently Removing Plugins with DELETE BUDDY PLUGIN in Manticore Search\nDESCRIPTION: Permanently removes an installed plugin from the plugin_dir using Manticore Buddy. Once removed, the plugin's features will no longer be available. Requires Manticore Buddy to be installed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Deleting_a_plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE BUDDY PLUGIN <username/package name on https://packagist.org/>\n```\n\n----------------------------------------\n\nTITLE: Configuring String Attributes Without Hash in Columnar Storage\nDESCRIPTION: Setting to disable hash generation for string attributes in columnar storage when grouping functionality is not needed, saving storage space.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\ncolumnar_strings_no_hash = attr1, attr2, attr3\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options and Checks for Manticore Search\nDESCRIPTION: Sets up compiler options for different platforms, checks for atomic functions, and configures memory routines and logging options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude ( TestBigEndian ) # fixme! That is deprecated in cmake 3.20 in favor to CMAKE_<LANG>_BYTE_ORDER var\ntest_big_endian ( USE_BIG_ENDIAN )\n\ntarget_compile_options ( lextra INTERFACE $<$<COMPILE_LANG_AND_ID:CXX,MSVC>:-D_CRT_SECURE_NO_WARNINGS -wd4996 -wd4706 -wd4244 -wd4702 -wd4577> )\n\ninclude ( CheckFunctionExists )\ncheck_function_exists ( strnlen HAVE_STRNLEN )\n\n# Checking for atomic function\ninclude ( check_atomic_intrinsics )\n\nset ( DISABLE_MEMROUTINES OFF CACHE BOOL \"If the build is broken because new/delete override, this option will disable the overriding\" )\nmark_as_advanced ( DISABLE_MEMROUTINES )\n\n# Option USE_SYSLOG\ncheck_include_file ( \"syslog.h\" HAVE_SYSLOG_H )\nset ( USE_SYSLOG ${HAVE_SYSLOG_H} CACHE BOOL \"compile with possibility to use syslog for logging\" )\nbannervar ( USE_SYSLOG )\n\n# options for clang/gcc c and c++\ntarget_compile_options ( lextra INTERFACE $<${ONLYGNUCLANGC_CXX}:-D_FILE_OFFSET_BITS=64 -Wall -fno-strict-aliasing> )\ntarget_compile_options ( lextra INTERFACE $<${CLANGWIN}:-fno-strict-aliasing -Wno-format -Wno-uninitialized-const-reference -Wno-unneeded-internal-declaration\n\t\t-Wno-deprecated-declarations -Wno-implicit-const-int-float-conversion -Wno-missing-braces -Wno-unused-function> )\n\n# disable rtti\ntarget_compile_options ( lextra INTERFACE $<${ONLYGNUCLANGCXX}:-fno-rtti>$<${MSCXX}:/GR-> ) # no rtti\n\nif (WIN32)\n\ttarget_compile_definitions ( lextra INTERFACE\n\t\t\t_CRT_SECURE_NO_DEPRECATE=1\n\t\t\t_CRT_NONSTDC_NO_DEPRECATE=1\n\t\t\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Explain Query with DOT Format\nDESCRIPTION: Demonstrates generating a hierarchical DOT format visualization of a query execution tree that can be rendered using tools like GraphvizOnline.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN QUERY tbl 'i me' option format=dot\\G\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in JSON\nDESCRIPTION: This JSON request creates a table 'products' with blended characters configuration using Manticore Search's CLI, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) blend_chars = '+, &, U+23, @->_'\"\n```\n\n----------------------------------------\n\nTITLE: Using Ignore Field Search Operator in Manticore Search\nDESCRIPTION: Shows how to ignore matches from a specific field, excluding results where the terms appear in that field but keeping matches from other fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n@!title hello world\n```\n\n----------------------------------------\n\nTITLE: Basic Table Truncation in SQL\nDESCRIPTION: Example of truncating a table using SQL in Manticore Search. This clears all data from the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE products;\n```\n\n----------------------------------------\n\nTITLE: Text Mapping Rules\nDESCRIPTION: Standardization rules that convert various Windows naming formats and text patterns to consistent forms. Maps 'MS Windows', 'Microsoft Windows', and 'Windows' to just 'Windows', and '4 you' to '4you'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/synonyms.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMS Windows => Windows\nMicrosoft Windows => Windows\nWindows => Windows\n4 you => 4you\n```\n\n----------------------------------------\n\nTITLE: Large Result Set Query on Distributed Index\nDESCRIPTION: Shows a query that retrieves a large result set from a distributed index. This approach can lead to excessive data transfer between nodes and the master.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sub-selects.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM my_dist_index WHERE some_conditions LIMIT 50000;\n```\n\n----------------------------------------\n\nTITLE: Creating Sysroot Archive\nDESCRIPTION: Creates a compressed tarball containing the /usr and /lib directories, which serves as the sysroot for Docker builds.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/freebsd_13/sysroot_fbsd_13.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - /usr /lib | xz -f > /sysroot_fbsd_13.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with DNF on RHEL 9\nDESCRIPTION: This Bash script installs multiple development packages using the DNF package manager on Red Hat Enterprise Linux 9. It includes libraries for database connectors, XML parsing, PostgreSQL, ODBC, memory allocation, SSL, compression, and cURL.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_rhel9.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndnf install -y \\\n        mariadb-connector-c-devel \\\n        expat-devel \\\n        postgresql-devel \\\n        unixODBC-devel \\\n        jemalloc-devel \\\n        openssl-devel \\\n        libzstd-devel \\\n        libcurl-devel\n```\n\n----------------------------------------\n\nTITLE: TypeScript Response Format for Bulk Deletion\nDESCRIPTION: Shows the response format for bulk document deletion operations using TypeScript. The response includes details about the number of documents deleted from each operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_44\n\nLANGUAGE: JSON\nCODE:\n```\n{\"items\":[{\"delete\":{\"table\":\"test\",\"deleted\":2}}],\"errors\":false}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Components and Test Settings in CMake\nDESCRIPTION: This snippet configures CPack packaging options, CTest test settings, and adds subdirectories for different parts of the project. It also defines component groups for installation packages and displays feature summaries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset ( CPACK_RPM_COMPONENT_INSTALL 1 )\nset ( CPACK_DEB_COMPONENT_INSTALL 1 )\nset ( CPACK_ARCHIVE_COMPONENT_INSTALL 1 )\n\nbannervar ( LOCALDATADIR )\nbannervar ( FULL_SHARE_DIR )\n\nset ( CPACK_PROJECT_CONFIG_FILE \"${MANTICORE_BINARY_DIR}/config/CPackOptions.cmake\" )\n\nset ( DEFAULT_CTEST_CONFIGURATION_TYPE \"Debug\" )\ninclude ( CTest )\n\nadd_subdirectory ( src )\n\nif (BUILD_TESTING)\n\tadd_subdirectory ( test )\n\tif (NOT TEST_SPECIAL_EXTERNAL)\n\t\tadd_subdirectory ( api/libsphinxclient )\n\tendif ()\nendif ()\n\n# run setBuildType again, full pass. Select distribution build and install rules for most of the files\nif (installed)\n\tset ( only_set_paths OFF )\n\tinclude ( SetBuildType )\nendif ()\n\ncmake_print_variables ( CMAKE_INSTALL_PREFIX )\nforeach (var BINDIR SBINDIR LIBEXECDIR SYSCONFDIR SHAREDSTATEDIR LOCALSTATEDIR RUNSTATEDIR LIBDIR INCLUDEDIR OLDINCLUDEDIR DATAROOTDIR DATADIR INFODIR LOCALEDIR MANDIR DOCDIR LOCALLIBDIR)\n\tcmake_print_variables ( CMAKE_INSTALL_${var} CMAKE_INSTALL_FULL_${var} )\nendforeach ()\n\nif (NOT CPack_CMake_INCLUDED)\n\tinclude ( CPack )\nendif ()\n\ncpack_add_component ( server GROUP main )\ncpack_add_component ( searchd GROUP main )\ncpack_add_component ( common GROUP main )\ncpack_add_component ( tools GROUP main )\ncpack_add_component ( meta )\ncpack_add_component ( devel GROUP main )\ncpack_add_component ( converter GROUP helpers )\ncpack_add_component_group ( main EXPANDED )\ncpack_add_component_group ( helpers EXPANDED )\n\nif (WITH_ICU)\n\tcpack_add_component ( icudata )\nendif ()\n\n#if (WITH_JIEBA)\n#\tcpack_add_component ( jiebadicts )\n#endif ()\n\nif (WIN32)\n\tcpack_add_component ( runtime GROUP main )\nendif ()\n\n#feature_summary (\n#\t\tINCLUDE_QUIET_PACKAGES\n#\t\tDESCRIPTION \"Enabled Features1:\"\n#\t\tVAR enabledFeaturesText\n#\t\tWHAT ALL)\n#message (STATUS \"${enabledFeaturesText}\")\n\nfeature_summary ( WHAT ENABLED_FEATURES INCLUDE_QUIET_PACKAGES DESCRIPTION \"Enabled features compiled in:\" )\nfeature_summary ( WHAT RUNTIME_PACKAGES_FOUND INCLUDE_QUIET_PACKAGES DESCRIPTION \"Available runtime features:\" )\n\n#feature_summary (WHAT ALL DESCRIPTION \"Enabled ALL features4:\")\n```\n\n----------------------------------------\n\nTITLE: Expected Output from SHOW ENGINES\nDESCRIPTION: Sample output from the SHOW ENGINES command showing SphinxSE successfully installed and available for use.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n+------------+----------+-------------------------------------------------------------+\n| Engine     | Support  | Comment                                                     |\n+------------+----------+-------------------------------------------------------------+\n| MyISAM     | DEFAULT  | Default engine as of MySQL 3.23 with great performance      |\n  ...\n| SPHINX     | YES      | Manticore storage engine                                       |\n  ...\n+------------+----------+-------------------------------------------------------------+\n13 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Manticore Search Persistence Test Results\nDESCRIPTION: Output from persistence testing showing a failed query due to response length bounds and a successful query with highlighted results.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/smoke_ref.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nn=0,\tquery failed: response length out of bounds (len=8388666)\nn=1,\tres=<b>that is</b> no need to worry about   ... \n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Rules\nDESCRIPTION: Defines character mapping rules for CJK characters, including Kangxi radicals (U+2F00-U+2FD5), Hiragana (U+3041-U+3096), Katakana (U+30A1-U+30FA), Bopomofo Extended (U+31A0-U+31B7), and CJK Unified Ideographs Extension B (U+20000-U+2A6D6).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/japanese.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nU+2F00->U+4E00,\nU+2F01->U+4E28,\nU+2F02->U+4E36,\n...\nU+20000..U+2A6D6,\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Name in Shell Script\nDESCRIPTION: This snippet extracts the distribution name from the current working directory using the basename command. It's likely part of a larger build or packaging script for Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/jammy/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Manchester United Team Name Mappings in Plaintext\nDESCRIPTION: Maps variant forms of Manchester United team names to a standardized form 'manunited'. This helps in normalizing search queries or data by ensuring different ways of referring to the same team are treated as equivalent.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_022/wf_multi2.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nuniman > manunited\nman utd > manunited\n```\n\n----------------------------------------\n\nTITLE: SHOW THREADS JavaScript Response\nDESCRIPTION: Sample response from the SHOW THREADS command via JavaScript client, showing thread information as a formatted JSON object.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/SHOW_THREADS.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        \"columns\": [\n            {\n                \"TID\": {\n                    \"type\": \"long\"\n                }\n            },\n            {\n                \"Name\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"Proto\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"State\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"Connection from\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"ConnID\": {\n                    \"type\": \"long long\"\n                }\n            },\n            {\n                \"This/prev job time, s\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"CPU activity\": {\n                    \"type\": \"float\"\n                }\n            },\n            {\n                \"Jobs done\": {\n                    \"type\": \"long\"\n                }\n            },\n            {\n                \"Thread status\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"Info\": {\n                    \"type\": \"string\"\n                }\n            }\n        ],\n        \"data\": [\n            {\n                \"TID\": 506964,\n                \"Name\": \"work_12\",\n                \"Proto\": \"http\",\n                \"State\": \"query\",\n                \"Connection from\": \"127.0.0.1:36656\",\n                \"ConnID\": 2884,\n                \"This/prev job time, s\": \"236us\",\n                \"CPU activity\": \"91.73%\",\n                \"Jobs done\": 3328,\n                \"Thread status\": \"working\",\n                \"Info\": \"show_threads\"\n            }\n        ],\n        \"total\": 1,\n        \"error\": \"\",\n        \"warning\": \"\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Structure in C++\nDESCRIPTION: Demonstrates the proper formatting of switch statements including short statements, multi-line cases, and cases requiring local variables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-coding-standard.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nswitch ( iMyCondition )\n{\n\tcase FIRST:\t\tiShortStatement = 1; break;\n\tcase SECOND:\tiAnotherShortStatement = 2; break;\n\tcase THIRD:\n\t\tiLongerStatement = 3;\n\t\tDoSomething();\n\t\tbreak;\n\tcase FOURTH:\n\t\t{\n\t\t\tint iEvenLongerStatementWithLocals = 4;\n\t\t\tDoSomethingElse();\n\t\t\tbreak;\n\t\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing 'Possibly Lost' Memory Report in Valgrind for Thread Creation\nDESCRIPTION: Example of a Valgrind 'Possibly Lost' report showing memory that might be leaked during thread creation. This type of report occurs when Valgrind cannot determine if memory is truly leaked because pointers may be stored in non-standard ways.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_6\n\nLANGUAGE: valgrind\nCODE:\n```\n==17529== 304 bytes in 1 blocks are possibly lost in loss record 12 of 13\n==17529==    at 0x4850D23: calloc (in /home/linuxbrew/.linuxbrew/Cellar/valgrind/3.24.0/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\n==17529==    by 0x40147D9: calloc (rtld-malloc.h:44)\n==17529==    by 0x40147D9: allocate_dtv (dl-tls.c:375)\n==17529==    by 0x40147D9: _dl_allocate_tls (dl-tls.c:634)\n==17529==    by 0x4C4C7B4: allocate_stack (allocatestack.c:430)\n==17529==    by 0x4C4C7B4: pthread_create@@GLIBC_2.34 (pthread_create.c:647)\n==17529==    by 0xF18EFF: Threads::Create(unsigned long*, std::function<void ()>, bool, char const*, int) (src/threadutils.cpp:1687)\n==17529==    by 0xF48E4E: TinyTimer_c::TinyTimer_c() (src/mini_timer.cpp:192)\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Character/Pattern Mappings using Custom Syntax (Plaintext)\nDESCRIPTION: This configuration snippet defines a series of rules or mappings using a custom syntax specific to Manticore Search. It employs symbols like '\\>', '\\=\\>', '=>', and '\\~' to map input characters or patterns (e.g., 'a\\>', '\\>b', 'c\\=\\>', '\\~g') to corresponding output values (e.g., 'abc', 'bcd', 'cde', 'bar'). The specific interpretation depends on the Manticore Search context where this configuration is applied, potentially for tasks like query rewriting, synonym definition, or character filtering.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_196/wf21.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na\\> > abc\n\\>b > bcd\nc\\=\\> => cde\n\\=\\>d => def\n\\=\\>a \\> f \\> => foo\n\\~g => bar\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up installation rules for the library, headers, and CMake configuration files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libstemmer_c/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall ( DIRECTORY include/ DESTINATION include/stemmer )\ninstall ( TARGETS stemmer EXPORT stemmerexport RUNTIME DESTINATION lib LIBRARY DESTINATION lib )\ninstall ( FILES \"$<TARGET_FILE_DIR:stemmer>/stemmer$<$<CONFIG:Debug>:d>.pdb\" EXPORT stemmerexport DESTINATION lib OPTIONAL )\n\ninstall ( EXPORT stemmerexport FILE stemmer-targets.cmake DESTINATION \"${CMAKE_CMAKE_DIR}\" NAMESPACE stemmer:: )\n```\n\n----------------------------------------\n\nTITLE: Adding Percolate Rules via SQL\nDESCRIPTION: Demonstrates inserting percolate query rules using SQL syntax with explicit IDs. Shows how to specify query text, filters, and tags.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_rules_to_a_percolate_table.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO pq(id, query, filters) VALUES (1, '@title shoes', 'price > 5');\nINSERT INTO pq(id, query, tags) VALUES (2, '@title bag', 'Louis Vuitton');\nSELECT * FROM pq;\n```\n\n----------------------------------------\n\nTITLE: Installing Required FreeBSD Packages\nDESCRIPTION: Commands to fetch and install necessary packages including MariaDB client, PostgreSQL, ODBC, Expat, and Boost libraries on FreeBSD 13.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/sysroot_freebsd13_x86_64.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nportsnap fetch\nportsnap extract\npkg install mariadb105-client postgresql-libpqxx unixODBC expat boost-libs\n```\n\n----------------------------------------\n\nTITLE: Starting Primary Node with New Cluster Option\nDESCRIPTION: Command line options for starting the first node when bootstrapping a cluster after shutdown. The --new-cluster option designates the node as the primary component.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Restarting_a_cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--new-cluster\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine with COS Function in ManticoreSearch SQL - SQL\nDESCRIPTION: Computes the cosine of the argument, which should be expressed in radians, and returns the floating point result. Typically used in trigonometric calculations, it requires a numeric argument. Inputs not provided in radians or non-numeric types may yield incorrect results or errors.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCOS(angle)\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping Rules for Manticore Search Configuration\nDESCRIPTION: This configuration defines mappings between Unicode code points, establishing character equivalence rules for search and text processing. The mappings primarily focus on Arabic script forms, numerical representations across different writing systems, and other specialized Unicode blocks.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/non_cjk.txt#2025-04-22_snippet_1\n\nLANGUAGE: config\nCODE:\n```\nU+FECB->U+0639,\nU+FECC..U+FECD->U+0639..U+063A,\nU+FECE->U+063A,\nU+FECF->U+063A,\nU+FED0->U+063A,\nU+FED1->U+0641,\nU+FED2->U+0641,\nU+FED3->U+0641,\nU+FED4..U+FED5->U+0641..U+0642,\nU+FED6->U+0642,\nU+FED7->U+0642,\nU+FED8..U+FED9->U+0642..U+0643,\nU+FEDA->U+0643,\nU+FEDB->U+0643,\nU+FEDC..U+FEDD->U+0643..U+0644,\nU+FEDE->U+0644,\nU+FEDF->U+0644,\nU+FEE0..U+FEE1->U+0644..U+0645,\nU+FEE2->U+0645,\nU+FEE3->U+0645,\nU+FEE4..U+FEE5->U+0645..U+0646,\nU+FEE6->U+0646,\nU+FEE7->U+0646,\nU+FEE8..U+FEE9->U+0646..U+0647,\nU+FEEA->U+0647,\nU+FEEB->U+0647,\nU+FEEC..U+FEED->U+0647..U+0648,\nU+FEEE..U+FEEF->U+0648..U+0649,\nU+FEF0..U+FEF1->U+0649..U+064A,\nU+FEF2->U+064A,\nU+FEF3->U+064A,\nU+FEF4->U+064A,\nU+FEF5->U+0644,\nU+FEF6->U+0644,\nU+FEF7->U+0644,\nU+FEF8->U+0644,\nU+FEF9->U+0644,\nU+FEFA->U+0644,\nU+FEFB->U+0644,\nU+FEFC->U+0644,\nU+FF10..U+FF19->U+0030..U+0039,\nU+FF21..U+FF3A->U+0061..U+007A,\nU+FF41..U+FF5A->U+0061..U+007A,\nU+10000..U+1000B,\nU+1000D..U+10026,\nU+10028..U+1003A,\nU+1003C..U+1003D,\nU+1003F..U+1004D,\nU+10050..U+1005D,\nU+10080..U+100FA,\nU+10107..U+1010F->U+0031..U+0039,\nU+10110..U+10133,\nU+10140..U+10178,\nU+1018A->U+0030,\nU+1018B..U+1018C,\nU+10280..U+1029C,\nU+102A0..U+102D0,\nU+102E1..U+102E9->U+0031..U+0039,\nU+102EA..U+102FB,\nU+10300->U+0061,\nU+10301..U+10308,\nU+10309->U+0069,\nU+1030A..U+1030E,\nU+1030F->U+006F,\nU+10310..U+10315,\nU+10316->U+0075,\nU+10317..U+1031F,\nU+10320->U+0031,\nU+10321->U+0035,\nU+10322..U+10323,\nU+10330..U+1034A,\nU+10380..U+1039D,\nU+103A0..U+103C3,\nU+103C8..U+103CF,\nU+103D1..U+103D5,\nU+10400..U+10427->U+10428..U+1044F,\nU+10428..U+1044F,\nU+10450..U+1047F,\nU+10480..U+1049D,\nU+104A0..U+104A9->U+0030..U+0039,\nU+10800..U+10805,\nU+10808,\nU+1080A..U+10835,\nU+10837..U+10838,\nU+1083C,\nU+1083F,\nU+10840..U+10855,\nU+108E0..U+108F2,\nU+108F4..U+108F5,\nU+108FB->U+0031,\nU+108FC->U+0035,\nU+108FD..U+108FF,\nU+10900..U+10915,\nU+10916->U+0031,\nU+10917..U+10919,\nU+1091A..U+1091B->U+0032..U+0033,\nU+10920..U+10939,\nU+10980..U+1099F,\nU+109A0..U+109B7,\nU+109BC..U+109BF,\nU+109C0..U+109C8->U+0031..U+0039,\nU+109C9..U+109CF,\nU+109D2..U+109FF,\nU+10A00,\nU+10A10..U+10A13,\nU+10A15..U+10A17,\nU+10A19..U+10A33,\nU+10A40..U+10A43->U+0031..U+0034,\nU+10A44..U+10A47,\nU+10A60..U+10A7C,\nU+10A7D->U+0031,\nU+10A7E,\nU+10B00..U+10B35,\nU+10B40..U+10B55,\nU+10B58..U+10B5B->U+0031..U+0034,\nU+10B5C..U+10B5F,\nU+10B60..U+10B72,\nU+10B78..U+10B7B->U+0031..U+0034,\nU+10B7C..U+10B7F,\nU+10C00..U+10C48,\nU+10C80..U+10CB2->U+10CC0..U+10CF2,\nU+10CC0..U+10CF2,\nU+10CFA->U+0031,\nU+10CFB->U+0035,\nU+10CFC..U+10CFF,\nU+10E60..U+10E68->U+0031..U+0039,\nU+10E69..U+10E7A,\nU+11003..U+11037,\nU+11052..U+1105A->U+0031..U+0039,\nU+1105B..U+11065,\nU+11066..U+1106F->U+0030..U+0039,\nU+11083..U+11099,\nU+1109A->U+11099,\nU+1109B,\nU+1109C->U+1109B,\nU+1109D..U+110AA,\nU+110AB->U+110A5,\nU+110AC..U+110AF,\nU+110D0..U+110E8,\nU+110F0..U+110F9->U+0030..U+0039,\nU+11103..U+1110C,\nU+1113D..U+1113F->U+0037..U+0039,\nU+11183..U+111B2,\nU+111C1..U+111C4,\nU+111D0..U+111D9->U+0030..U+0039,\nU+111DA,\nU+111DC,\nU+111E1..U+111E9->U+0031..U+0039,\nU+111EA..U+111F4,\nU+11280..U+11286,\nU+11288,\nU+1128A..U+1128D,\nU+1128F..U+1129D,\nU+1129F..U+112A8,\nU+11680..U+116AA,\nU+116C0..U+116C9->U+0030..U+0039,\nU+11700..U+11719,\nU+11730..U+11739->U+0030..U+0039,\nU+12000..U+12074,\nU+12076..U+12399,\nU+12400..U+1246E,\nU+12480..U+124A0,\nU+124A2..U+12543,\nU+13000..U+1342E,\nU+16800..U+16A38,\nU+16F00..U+16F44,\nU+16F50,\nU+16F93..U+16F9F,\nU+1EE00..U+1EE01->U+0627..U+0628,\nU+1EE02->U+062C,\nU+1EE03->U+062F,\nU+1EE05->U+0648,\nU+1EE06->U+0632,\nU+1EE07->U+062D,\nU+1EE08->U+0637,\nU+1EE09->U+064A,\nU+1EE0A..U+1EE0D->U+0643..U+0646,\nU+1EE0E->U+0633,\nU+1EE0F->U+0639,\nU+1EE10->U+0641,\nU+1EE11->U+0635,\nU+1EE12->U+0642,\nU+1EE13->U+0631,\nU+1EE14->U+0634,\nU+1EE15..U+1EE16->U+062A..U+062B,\nU+1EE17->U+062E,\nU+1EE18->U+0630,\nU+1EE19->U+0636,\nU+1EE1A->U+0638,\nU+1EE1B->U+063A,\nU+1EE1C->U+066E,\nU+1EE1D->U+06BA,\nU+1EE1E->U+06A1,\nU+1EE1F->U+066F,\nU+1EE21->U+0628,\nU+1EE22->U+062C,\nU+1EE24->U+0647,\nU+1EE27->U+062D,\nU+1EE29->U+064A,\nU+1EE2A..U+1EE2D->U+0643..U+0646,\nU+1EE2E->U+0633,\nU+1EE2F->U+0639,\nU+1EE30->U+0641,\nU+1EE31->U+0635,\nU+1EE32->U+0642,\nU+1EE34->U+0634,\nU+1EE35..U+1EE36->U+062A..U+062B,\nU+1EE37->U+062E,\nU+1EE39->U+0636,\nU+1EE3B->U+063A,\nU+1EE42->U+062C,\nU+1EE47->U+062D,\nU+1EE49->U+064A,\nU+1EE4B->U+0644,\nU+1EE4D->U+0646,\nU+1EE4E->U+0633,\nU+1EE4F->U+0639,\nU+1EE51->U+0635,\nU+1EE52->U+0642,\nU+1EE54->U+0634,\nU+1EE57->U+062E,\nU+1EE59->U+0636,\nU+1EE5B->U+063A,\nU+1EE5D->U+06BA,\nU+1EE5F->U+066F,\nU+1EE61->U+0628,\nU+1EE62->U+062C,\nU+1EE64->U+0647,\nU+1EE67->U+062D,\nU+1EE68->U+0637,\nU+1EE69->U+064A,\nU+1EE6A->U+0643,\nU+1EE6C..U+1EE6D->U+0645..U+0646,\nU+1EE6E->U+0633,\nU+1EE6F->U+0639,\nU+1EE70->U+0641,\nU+1EE71->U+0635,\nU+1EE72->U+0642,\nU+1EE74->U+0634,\nU+1EE75..U+1EE76->U+062A..U+062B,\nU+1EE77->U+062E,\nU+1EE79->U+0636,\nU+1EE7A->U+0638,\nU+1EE7B->U+063A,\nU+1EE7C->U+066E,\nU+1EE7E->U+06A1,\nU+1EE80..U+1EE81->U+0627..U+0628,\nU+1EE82->U+062C,\nU+1EE83->U+062F,\nU+1EE84..U+1EE85->U+0647..U+0648,\nU+1EE86->U+0632,\nU+1EE87->U+062D,\nU+1EE88->U+0637,\nU+1EE89->U+064A,\nU+1EE8B..U+1EE8D->U+0644..U+0646,\nU+1EE8E->U+0633,\nU+1EE8F->U+0639,\nU+1EE90->U+0641,\nU+1EE91->U+0635,\nU+1EE92->U+0642,\nU+1EE93->U+0631,\nU+1EE94->U+0634,\nU+1EE95..U+1EE96->U+062A..U+062B,\nU+1EE97->U+062E,\nU+1EE98->U+0630,\nU+1EE99->U+0636,\nU+1EE9A->U+0638,\nU+1EE9B->U+063A,\nU+1EEA1->U+0628,\nU+1EEA2->U+062C,\nU+1EEA3->U+062F,\nU+1EEA5->U+0648,\nU+1EEA6->U+0632,\nU+1EEA7->U+062D,\nU+1EEA8->U+0637,\nU+1EEA9->U+064A,\nU+1EEAB..U+1EEAD->U+0644..U+0646,\nU+1EEAE->U+0633,\nU+1EEAF->U+0639,\nU+1EEB0->U+0641,\nU+1EEB1->U+0635,\nU+1EEB2->U+0642,\nU+1EEB3->U+0631,\nU+1EEB4->U+0634,\nU+1EEB5..U+1EEB6->U+062A..U+062B,\nU+1EEB7->U+062E,\nU+1EEB8->U+0630,\nU+1EEB9->U+0636,\nU+1EEBA->U+0638\n```\n\n----------------------------------------\n\nTITLE: List of Names in Plain Text\nDESCRIPTION: A list of four female names written in uppercase letters, one per line. This appears to be a data file that could be used for testing or as reference data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/clt-tests/scripts/fnames.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nANNELLE\nANGILA\nALONA\nALLYN\n```\n\n----------------------------------------\n\nTITLE: Configuring Real-time Table with Stored Fields in Manticore Search\nDESCRIPTION: Example of configuring a real-time table with stored fields in Manticore Search configuration file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  stored_fields = title, content # we want to store only \"title\" and \"content\", \"name\" shouldn't be stored\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_field = content\n  rt_field = name\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Explicit ID Field in SQL\nDESCRIPTION: This SQL snippet shows how to create a table with an explicitly defined ID field, which is stored as an unsigned 64-bit integer but exposed as a signed 64-bit integer.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tbl(id bigint, content text);\nDESC tbl;\n```\n\n----------------------------------------\n\nTITLE: JDBC Connector Configuration String\nDESCRIPTION: Configuration string for JDBC Connector 6.x and above when connecting to Manticore Search 2.8.2 or greater. The options set character encoding, max packet size, and timezone.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\njdbc:mysql://IP:PORT/DB/?characterEncoding=utf8&maxAllowedPacket=512000&serverTimezone=XXX\n```\n\n----------------------------------------\n\nTITLE: Percolate Query Implementation in Rust\nDESCRIPTION: Example of executing a percolate query in Rust using HashMaps to structure document data. Demonstrates how to create and send percolate requests with multiple documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_66\n\nLANGUAGE: rust\nCODE:\n```\nlet mut percolate_doc_fields1 = HashMap::new();\npercolate_doc_fields1.insert(\"title\".to_string(), \"nice pair of shoes\");\npercolate_doc_fields1.insert(\"color\".to_string(), \"blue\");\nlet mut percolate_doc_fields2 = HashMap::new();\npercolate_doc_fields2.insert(\"title\".to_string(), \"beautiful bag\");\nlet mut percolate_doc_fields_list: [HashMap; 2] = [percolate_doc_fields1, percolate_doc_fields2];\nlet mut percolate_doc = HashMap::new();\npercolate_doc.insert(\"documents\".to_string(), percolate_doc_fields_list); \nlet percolate_query = PercolateRequestQuery::new(serde_json::json!(percolate_doc));\nlet percolate_req = PercolateRequest::new(percolate_query); \nsearch_api.percolate(\"products\", percolate_req).await;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with JavaScript in Manticore Search\nDESCRIPTION: Removes a table using the JavaScript client. This executes an SQL query through the utilsApi.sql() method with async/await pattern.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nres = await utilsApi.sql('DROP TABLE products');\n```\n\n----------------------------------------\n\nTITLE: Renaming SQL Commands in Manticore Search 5.0\nDESCRIPTION: List of SQL commands that have been renamed to use 'TABLE' instead of 'INDEX' for clarity. The old versions are deprecated but still functional.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nindex <table name> => table <table name>,\nSHOW INDEX STATUS => SHOW TABLE STATUS,\nSHOW INDEX SETTINGS => SHOW TABLE SETTINGS,\nFLUSH RTINDEX => FLUSH TABLE,\nOPTIMIZE INDEX => OPTIMIZE TABLE,\nATTACH TABLE plain TO RTINDEX rt => ATTACH TABLE plain TO TABLE rt,\nRELOAD INDEX => RELOAD TABLE,\nRELOAD INDEXES => RELOAD TABLES.\n```\n\n----------------------------------------\n\nTITLE: Setting Elasticsearch Compatibility\nDESCRIPTION: SQL command to disable Elasticsearch compatibility mode globally\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL ES_COMPAT=off\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Directory Name Using Shell Command\nDESCRIPTION: Uses basename command to extract the final directory name from the current working directory path and assigns it to distr variable. The pwd command gets the current path and basename extracts just the final directory name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/buster/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Configuring Iconv Support for XML Processing in CMake\nDESCRIPTION: This snippet configures Iconv library support which is used for character encoding conversion when processing XML sources. It handles both built-in Iconv and external library cases, and sets platform-specific properties.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# test for ICONV\nif (WITH_EXPAT)\n\twith_menu ( Iconv \"iconv\" \"for support different encodings when indexing xmlpipe sources with indexer\" )\n\tif (Iconv_IS_BUILT_IN)\n\t\tset_target_properties ( Iconv::Iconv PROPERTIES INTERFACE_COMPILE_DEFINITIONS LIBICONV_PLUG )\n\telse ()\n\t\tdl_package ( Iconv \"iconv\" )\n\t\twin_install ( Iconv common )\n\tendif ()\n\tinclude ( check_const_iconv )\n\tdiag ( Iconv_IS_BUILT_IN )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Name from Current Directory in Bash\nDESCRIPTION: This command uses the 'basename' utility to extract the last component of the current working directory path (obtained using 'pwd') and assigns it to the 'distr' variable. This is useful for dynamically determining the distribution name in build or deployment scripts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/centos7/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Example Text Transformation Rules (Plaintext)\nDESCRIPTION: These lines exemplify input-output mapping for text normalization or transformation within Manticore Search. They show how distinct inputs, including English ('amy winehouse') and Russian ('эми уайнхаус'), are converted to the same canonical form ('amy0winehouse'), useful for search indexing and matching across different scripts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_158/wf158.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\namy winehouse => amy0winehouse\\nэми уайнхаус => amy0winehouse\n```\n\n----------------------------------------\n\nTITLE: Using MAYBE Operator in Manticore Search\nDESCRIPTION: The MAYBE operator functions similarly to the OR operator (|), but it does not return documents that match only the right subtree expression.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nhello MAYBE world\n```\n\n----------------------------------------\n\nTITLE: Text Substitution Pattern\nDESCRIPTION: Shows a pattern for replacing a semicolon with a winky face emoticon. This appears to be a simple text transformation rule.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_165/synonyms3.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n; => ;)\n```\n\n----------------------------------------\n\nTITLE: Creating FreeBSD Sysroot Archive\nDESCRIPTION: Command to create a compressed tarball containing /usr and /lib directories along with the toolchain configuration file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/sysroot_freebsd13_x86_64.tar.xz.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - /usr /lib toolchain.cmake | xz -9 > sysroot_freebsd13_x86_64.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Setting Karma Period for Load Balancing\nDESCRIPTION: Defines the time window for collecting agent mirror statistics used in failover and balancing decisions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Load_balancing.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nha_period_karma = 2m\n```\n\n----------------------------------------\n\nTITLE: Setting Watchdog Configuration\nDESCRIPTION: Controls the threaded server watchdog feature for automatic server restart on crashes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_72\n\nLANGUAGE: ini\nCODE:\n```\nwatchdog = 0 # disable watchdog\n```\n\n----------------------------------------\n\nTITLE: Running Stack Probe Experiments for Manticore Search\nDESCRIPTION: Command to run stack probe experiments and output the results. This is used to calculate stack usage for various operations without interfering with Valgrind analysis.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ src/searchd --mockstack\nManticore 7.0.1 DEADBEEF@220512 devmode\nCopyright (c) 2001-2016, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)\nCopyright (c) 2017-2024, Manticore Software LTD (https://manticoresearch.com)\n\nexport MANTICORE_KNOWN_CREATE_SIZE=200\nexport MANTICORE_START_KNOWN_CREATE_SIZE=4568\nexport MANTICORE_KNOWN_EXPR_SIZE=16\nexport MANTICORE_START_KNOWN_EXPR_SIZE=200\nexport MANTICORE_NONE=32\nexport MANTICORE_START_NONE=104\nexport MANTICORE_KNOWN_FILTER_SIZE=224\nexport MANTICORE_START_KNOWN_FILTER_SIZE=11168\nexport MANTICORE_KNOWN_MATCH_SIZE=320\nexport MANTICORE_START_KNOWN_MATCH_SIZE=14568\nexport NO_STACK_CALCULATION=1\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Query Post-processing in Manticore Search\nDESCRIPTION: This snippet refers to the sql_query_post configuration option used to perform cleanup operations after the main indexing query has been executed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_168/text1.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nsql_query_post\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies on Debian Bookworm\nDESCRIPTION: Installs required development packages including MySQL client, Expat, PostgreSQL, ODBC, Jemalloc, OpenSSL, Zstd, and cURL libraries using apt-get package manager.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_bookworm.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install -y \\\n    default-libmysqlclient-dev \\\n    libexpat-dev \\\n    libpq-dev \\\n    unixodbc-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libzstd-dev \\\n    libcurl4-openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Directory Name in Shell\nDESCRIPTION: Uses the basename command to extract the final directory name from the current working directory path (pwd). The result is stored in the 'distr' variable for further use in build or deployment scripts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/stretch/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Filtering Agent Status in JavaScript\nDESCRIPTION: Demonstrates filtering agent status using JavaScript with pattern matching via SQL command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT STATUS LIKE \\\"%5period%msec%\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Executing Basic SQL Query in Manticore Search\nDESCRIPTION: Demonstrates a simple SQL query to select all columns from a table, showing the result format with column headers and row data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM tbl;\n```\n\nLANGUAGE: sql\nCODE:\n```\n+------+------+--------+\n| id   | age  | name   |\n+------+------+--------+\n|    1 |   25 | joe    |\n|    2 |   25 | mary   |\n|    3 |   33 | albert |\n+------+------+--------+\n3 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Blended Characters in PHP\nDESCRIPTION: This PHP code creates a table 'products' with blended characters configuration using the Manticore Search PHP client, allowing special character handling during indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'blend_chars' => '+, &, U+23, @->_'\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length using C# (C#)\nDESCRIPTION: This C# example uses a utility method to create a table with ngram_len, assisting in indexing continuous-script languages in Manticoresearch.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\", true);\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Statistics Tracking in Manticore Search 5.0\nDESCRIPTION: SQL command to enable or disable CPU time tracking globally in Manticore Search 5.0.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nSET GLOBAL CPUSTATS=1/0\n```\n\n----------------------------------------\n\nTITLE: Transaction Record Structure\nDESCRIPTION: Defines the structure of individual transaction records within binary log files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/binary-logging.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ndword magic, = chars[] 'TXN!'\nbyte TxnID\n[ payload ]\ndword checksum, = crc32 of TxnID + payload\n```\n\n----------------------------------------\n\nTITLE: Comparing Floats as Integers in SQL\nDESCRIPTION: Illustrates how to compare floats as integers by using a multiplier factor and ceiling function.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_70\n\nLANGUAGE: SQL\nCODE:\n```\nselect in(ceil(attr*100),200,250,350) from products\n```\n\n----------------------------------------\n\nTITLE: Displaying Manticore Search Copyright Notice\nDESCRIPTION: Shows the copyright notice for Manticore Search, indicating the years and the company holding the copyright.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2017-2025, Manticore Software LTD (https://manticoresearch.com)\nAll rights reserved\n```\n\n----------------------------------------\n\nTITLE: Displaying Sysroot Directory Structure\nDESCRIPTION: Shows the required directory structure for the MacOS sysroot using the tree command.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/sysroot_macos__.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tree -L 3\n.\n└── MacOSX11.3.sdk\n    └── usr\n        ├── include\n        └── lib\n```\n\n----------------------------------------\n\nTITLE: Interpreting Percolation Asyncio Python Results\nDESCRIPTION: Details the results from an asynchronous percolation query in Python, including matches and internal metadata.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n{'hits': {'hits': [{u'_id': u'2811025403043381494', u'table': u'products', u'_score': u'1', u'_source': {u'query': {u'ql': u'@title bag'}}, u'_type': u'doc', u'fields': {u'_percolator_document_slot': [2]}}, {u'_id': u'2811025403043381496', u'table': u'products', u'_score': u'1', u'_source': {u'query': {u'ql': u'@title shoes'}}, u'_type': u'doc', u'fields': {u'_percolator_document_slot': [1]}}], 'total': 2}, 'profile': None, 'timed_out': False, 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Main Library Components Configuration\nDESCRIPTION: Defines and configures the main Manticore library components including core functionality, stemming, and various optional features\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library ( lmanticore STATIC sphinx.cpp sphinxquery.cpp sphinxutils.cpp\n\t\tsphinxsort.cpp sortsetup.cpp sphinxexpr.cpp sphinxfilter.cpp sphinxsearch.cpp sphinxrt.cpp accumulator.cpp\n\t\tsphinxjson.cpp sphinxaot.cpp sphinxplugin.cpp sphinxudf.c sphinxqcache.cpp \n\t\tattribute.cpp secondaryindex.cpp killlist.cpp searchnode.cpp json/cJSON.c sphinxpq.cpp\n\t\tglobal_idf.cpp docstore.cpp lz4/lz4.c lz4/lz4hc.c snippetfunctor.cpp snippetindex.cpp\n\t\tsnippetstream.cpp snippetpassage.cpp threadutils.cpp sphinxversion.cpp indexcheck.cpp datareader.cpp\n\t\tindexformat.cpp indexsettings.cpp fileutils.cpp threads_detached.cpp hazard_pointer.cpp\n\t\ttask_info.cpp mini_timer.cpp fileio.cpp memio.cpp queryprofile.cpp columnarfilter.cpp columnargrouper.cpp\n\t\tcolumnarlib.cpp collation.cpp histogram.cpp)\n\nadd_library ( lstem STATIC sphinxsoundex.cpp sphinxmetaphone.cpp sphinxstemen.cpp sphinxstemru.cpp sphinxstemru.inl\n\t\tsphinxstemcz.cpp sphinxstemar.cpp )\n```\n\n----------------------------------------\n\nTITLE: Extracting Current Directory Name in Shell\nDESCRIPTION: This script uses the pwd command to get the current working directory path, then extracts just the directory name using basename. The result is stored in the 'distr' variable.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/buster/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Configuration File Generation\nDESCRIPTION: Generates and copies configuration files while avoiding unnecessary rebuilds if content hasn't changed\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file ( \"${MANTICORE_SOURCE_DIR}/config/config_cmake.h.in\"\n\t\t\"${MANTICORE_BINARY_DIR}/config/config_.h\" ESCAPE_QUOTES )\nconfigure_file ( \"${MANTICORE_SOURCE_DIR}/config/config_indexer_cmake.h.in\"\n\t\t\"${MANTICORE_BINARY_DIR}/config/config_indexer_.h\" ESCAPE_QUOTES )\n\nexecute_process ( COMMAND ${CMAKE_COMMAND} -E copy_if_different \"${MANTICORE_BINARY_DIR}/config/config_.h\" \"${MANTICORE_BINARY_DIR}/config/config.h\" )\nexecute_process ( COMMAND ${CMAKE_COMMAND} -E copy_if_different \"${MANTICORE_BINARY_DIR}/config/config_indexer_.h\" \"${MANTICORE_BINARY_DIR}/config/config_indexer.h\" )\n```\n\n----------------------------------------\n\nTITLE: Replacing PQ Rules with JSON API\nDESCRIPTION: Example of replacing a percolate query rule using the HTTP JSON interface with the ?refresh=1 parameter. The snippet shows retrieving the current rule, updating it with a new query, and verifying the change.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_documents_to_a_table/Adding_rules_to_a_percolate_table.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nGET /pq/pq/doc/2810823411335430149\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 1,\n    \"hits\": [\n      {\n        \"_id\": 2810823411335430149,\n        \"_score\": 1,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"title\": \"shoes\"\n            }\n          },\n          \"tags\": \"\",\n          \"filters\": \"\"\n        }\n      }\n    ]\n  }\n}\n\nPUT /pq/pq/doc/2810823411335430149?refresh=1 -d '{\n  \"query\": {\n    \"match\": {\n      \"title\": \"boots\"\n    }\n  }\n}'\n\nGET /pq/pq/doc/2810823411335430149\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 1,\n    \"hits\": [\n      {\n        \"_id\": 2810823411335430149,\n        \"_score\": 1,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"title\": \"boots\"\n            }\n          },\n          \"tags\": \"\",\n          \"filters\": \"\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Uber Test Function Definition\nDESCRIPTION: Defines a function to add a single test with specific configuration including labels, prefix, and flags. Handles test name fixup and property setting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (add_ubertest testN tst_name LABELS prefix label flags)\n\tfixup_test_name (_tstn \"${prefix}_${tst_name}\")\n\tadd_test (NAME \"${_tstn}\"\n\t\t\tWORKING_DIRECTORY \"${MANTICORE_BINARY_DIR}/test\"\n\t\t\tCOMMAND php ubertest.php\n\t\t\t--ctest -u test --strict-verbose --no-demo\n\t\t\t${flags}\n\t\t\t${sd_extra} t ${testN})\n\n\tSET (_labels \"${label}\")\n\tforeach (require ${LABELS})\n\t\tLIST (APPEND _labels ${require})\n\tendforeach ()\n\tLIST (APPEND _labels UBER)\n\tSET_TESTS_PROPERTIES (\"${_tstn}\" PROPERTIES LABELS \"${_labels}\")\n\tif (\"HEAVY\" IN_LIST LABELS)\n\t\tSET_TESTS_PROPERTIES (\"${_tstn}\" PROPERTIES TIMEOUT \"1800\")\n\tendif ()\n\n\tif (\"SKIP_DB\" IN_LIST LABELS OR \"SKIP_INDEXER\" IN_LIST LABELS )\n\t\tSET_TESTS_PROPERTIES ( \"${_tstn}\" PROPERTIES RESOURCE_GROUPS \"datadir:1\" )\n\telse()\n\t\tSET_TESTS_PROPERTIES ( \"${_tstn}\" PROPERTIES RESOURCE_GROUPS \"datadir:1,mysql:1\" )\n\tendif ()\n\t_test_prop (\"${_tstn}\")\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with Manticore Search Rust API\nDESCRIPTION: This code snippet demonstrates how to use the Manticore Search Rust API to execute a 'SHOW STATUS' SQL query. The query is executed asynchronously and the 'Some(true)' parameter likely indicates that the result should be returned.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Replication_cluster_status.md#2025-04-22_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\nutils_api.sql(\"SHOW STATUS\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: CRC32 Checksum Calculation in ManticoreSearch SQL - SQL\nDESCRIPTION: Returns the CRC32 checksum as an integer for the given string argument. It is used for data validation, deduplication, or hash-based lookups. Accepts a single string argument and outputs a numeric value corresponding to its CRC32 hash.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Mathematical_functions.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCRC32(string_value)\n```\n\n----------------------------------------\n\nTITLE: Compressing AMD64 Sysroot Archives using XZ\nDESCRIPTION: Bash command to compress all x86_64 tar archives using XZ compression with maximum compression level 9. This is important for optimizing Docker image size.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/ubuntu_debian_amd64/some_name_x86_64.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfor a in *._x86_64.tar; do xz -9 $a; done\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Status in TypeScript\nDESCRIPTION: Shows how to query agent status using TypeScript with the utilsApi. Returns detailed agent statistics including connectivity, performance and error metrics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql(\"SHOW AGENT STATUS\");\n```\n\n----------------------------------------\n\nTITLE: Generating Snippets from Distributed Files using SQL in Manticore Search\nDESCRIPTION: This SQL snippet demonstrates how to use the CALL SNIPPETS function in Manticore Search to generate snippets from distributed files. It specifies two source files, the index name, search terms, and enables the load_files option.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_129\n\nLANGUAGE: SQL\nCODE:\n```\nCALL SNIPPETS(('data/doc1.txt','data/doc2.txt'), 'forum', 'is text', 1 AS load_files);\n```\n\n----------------------------------------\n\nTITLE: Non-Plain Tables Warning Configuration\nDESCRIPTION: Setting to ignore warnings about skipping non-plain tables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nignore_non_plain = 1\n```\n\n----------------------------------------\n\nTITLE: UnixODBC Copyright Notice\nDESCRIPTION: Copyright notice and LGPL license information for the UnixODBC library used in Manticore Search for database connectivity.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n* Created by Nick Gorham\n* (nick@lurcher.org).\n*\n* copyright (c) 1999 Nick Gorham\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n```\n\n----------------------------------------\n\nTITLE: Building Word Frequency List in Manticore\nDESCRIPTION: Shows how to use --buildstops with --buildfreqs to generate a list of the most frequent terms along with their occurrence count in the index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer mytable --buildstops word_freq.txt 1000 --buildfreqs\n```\n\n----------------------------------------\n\nTITLE: Extracting Directory Name in Shell\nDESCRIPTION: Uses basename command to extract the final directory name from the current working directory path (pwd) and assigns it to the distr variable. The nested command substitution first gets the full path then extracts just the directory name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/centos8/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Option in Manticore Indexer\nDESCRIPTION: The --verbose option of the indexer now accepts [debugvv] for printing debug messages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\nindexer --verbose [debugvv]\n```\n\n----------------------------------------\n\nTITLE: Setting VCPKG Overlay Triplets and Source Directory in CMake\nDESCRIPTION: This CMake snippet sets environment variables for VCPKG overlay triplets and the Manticore source directory. These variables are crucial for customizing the build process and ensuring the correct triplets are used.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/triplets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset ( ENV{VCPKG_OVERLAY_TRIPLETS} \"${MANTICORE_SOURCE_DIR}/dist/build_dockers/cross/triplets\" )\nset ( ENV{MANTICORE_SOURCE_DIR} \"${MANTICORE_SOURCE_DIR}\" )\n```\n\n----------------------------------------\n\nTITLE: CMake Test Properties Setup Function\nDESCRIPTION: Defines a function to set common test properties including skip code, fixtures, and environment variables for Manticore Search tests.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (_test_prop test)\n\tSET_TESTS_PROPERTIES (\"${test}\" PROPERTIES SKIP_RETURN_CODE 42 FIXTURES_REQUIRED UBER )\n\n\tSET_TESTS_PROPERTIES (\"${test}\" PROPERTIES ENVIRONMENT \"INDEXER=$<TARGET_FILE:indexer>;SEARCHD=$<TARGET_FILE:searchd>\")\n\t# m.b. append extra properties\n\tif (COMMAND special_ubertest_properties) #cb from outside\n\t\tspecial_ubertest_properties (\"${test}\")\n\tendif ()\nendfunction ()\n```\n\n----------------------------------------\n\nTITLE: Displaying Windows SDK Directory Structure\nDESCRIPTION: Shows the expected directory structure for the Windows SDK using the tree command. This structure includes the Visual C++ tools, Windows Kits, and a symlink for WinSDK.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/sysroot_windows_x64.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tree -L 5\n.\n├── VC\n│   └── Tools\n│       └── MSVC\n│           └── 14.25.28610\n│               ├── include\n│               └── lib\n├── Windows Kits\n│   └── 10\n│       ├── Include\n│       │   └── 10.0.18362.0\n│       │       ├── cppwinrt\n│       │       ├── shared\n│       │       ├── ucrt\n│       │       ├── um\n│       │       └── winrt\n│       └── Lib\n│           └── 10.0.18362.0\n│               ├── ucrt\n│               ├── ucrt_enclave\n│               └── um\n└── WinSDK -> Windows Kits\n```\n\n----------------------------------------\n\nTITLE: Index-Specific Payload Structure\nDESCRIPTION: Defines the structure of index-specific payload within ADD_TXN transactions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/binary-logging.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nbyte PayloadID\n... table specific different blobs.\n```\n\n----------------------------------------\n\nTITLE: Displaying FindMysql.cmake Copyright and License Notices\nDESCRIPTION: Shows the copyright and license notices for FindMysql.cmake, including multiple copyright holders and license information for GPLv2 with FOSS Exception and OSI-approved BSD License.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved.\n\nThe MySQL Connector/C++ is licensed under the terms of the GPLv2\n<http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most\nMySQL Connectors. There are special exceptions to the terms and\nconditions of the GPLv2 as it is applied to this software, see the\nFLOSS License Exception\n<http://www.mysql.com/about/legal/licensing/foss-exception.html>.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published\nby the Free Software Foundation; version 2 of the License.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\nfor more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n=============================================================================\nCopyright 2015 Sphinx Technologies, Inc.\nCopyright 2017-2025, Manticore Software LTD (https://manticoresearch.com)\n\nDistributed under the OSI-approved BSD License (the \"License\");\nsee accompanying file Copyright.txt for details.\n\nThis software is distributed WITHOUT ANY WARRANTY; without even the\nimplied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the License for more information.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Disabled Expanded Keywords in Manticore Search (SQL)\nDESCRIPTION: These SQL queries show search results when expanded keywords are disabled, highlighting the difference in matching and weighting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nmysql> create table t(f text) min_infix_len='2' morphology='stem_en';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> insert into t values(1,'running'),(2,'runs'),(3,'runsy');\nQuery OK, 3 rows affected (0.00 sec)\n\nmysql> select *, weight() from t where match('runs');\n+------+---------+----------+\n| id   | f       | weight() |\n+------+---------+----------+\n|    1 | running |     1500 |\n|    2 | runs    |     1500 |\n+------+---------+----------+\n2 rows in set (0.00 sec)\n\nmysql> drop table t;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> create table t(f text) min_infix_len='2' morphology='stem_en';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> insert into t values(1,'running'),(2,'runs'),(3,'runsy');\nQuery OK, 3 rows affected (0.00 sec)\n\nmysql> select *, weight() from t where match('running');\n+------+---------+----------+\n| id   | f       | weight() |\n+------+---------+----------+\n|    1 | running |     1500 |\n|    2 | runs    |     1500 |\n+------+---------+----------+\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Index in Python\nDESCRIPTION: Uses the Python client to create a table with bigram indexing. It executes an SQL command to set up the table with specified bigram configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) bigram_freq_words = \\'the, a, you, i\\' bigram_index = \\'both_freq\\'')\n```\n\n----------------------------------------\n\nTITLE: Creating Manticore Table with index_token_filter using Javascript Client\nDESCRIPTION: Executes a SQL `CREATE TABLE` statement asynchronously using the Javascript client library's `sql` method (`utilsApi`). This creates the 'products' table specifying a custom `index_token_filter` plugin. The result is assigned to 'res'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) index_token_filter = \\'my_lib.so:custom_blend:chars=@#&\\'');\n```\n\n----------------------------------------\n\nTITLE: Inspecting Coredumps with GDB in Manticore Search\nDESCRIPTION: Commands for using GDB to inspect a coredump after a Manticore Search crash. This helps identify the cause of the crash by examining thread information and backtraces.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngdb /usr/bin/searchd </path/to/coredump>\n```\n\nLANGUAGE: gdb\nCODE:\n```\nset pagination off\ninfo threads\n# find thread number by it's id (e.g. for `LWP 29050` it will be thread number 8\nthread apply all bt\nthread <thread number>\nbt full\ninfo locals\nquit\n```\n\n----------------------------------------\n\nTITLE: Defining SPHINXCLIENT Project with C Language and Metadata\nDESCRIPTION: Declares the SPHINXCLIENT project with C as the programming language, version information, description, and homepage URL.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nPROJECT ( SPHINXCLIENT\n\t\tLANGUAGES C\n\t\tVERSION 0.0.1\n\t\tDESCRIPTION \"Pure C searchd client API library\"\n\t\tHOMEPAGE_URL \"https://manticoresearch.com\"  )\n```\n\n----------------------------------------\n\nTITLE: Building Docker Test Environment\nDESCRIPTION: Command to build Docker images for testing environment using docker-compose.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/dockerfiles/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose-test.yml build\n```\n\n----------------------------------------\n\nTITLE: CMake Copyright Notice\nDESCRIPTION: BSD License copyright notice for CMake build system used in Manticore Search package building.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright 2000-2024 Kitware, Inc. and Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the name of Kitware, Inc. nor the names of Contributors\n  may be used to endorse or promote products derived from this\n  software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Matching PQ Rules with a Document using JSON API in Manticore Search\nDESCRIPTION: Demonstrates using the JSON API to find percolate query rules matching a document with a specific title. The request is sent to the /pq endpoint with the index name and document content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\nPOST /pq/products/_search\n{\n  \"query\": {\n    \"percolate\": {\n      \"document\": {\n        \"title\": \"What a nice bag\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyword Analysis Results\nDESCRIPTION: Output showing keyword analysis with tokenized and normalized forms along with document and hit counts for each term.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/smoke_ref.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1. tokenized=hello, normalized=hello, docs=0, hits=0\n2. tokenized=test, normalized=test, docs=3, hits=5\n3. tokenized=one, normalized=one, docs=1, hits=2\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch-style Replace\nDESCRIPTION: Replace document using Elasticsearch-compatible PUT/POST endpoints. Requires Manticore Buddy.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPUT/POST /<table name>/_doc/<id>\n{\n  \"<field1>\": <value1>,\n  ...\n  \"<fieldN>\": <valueN>\n}\n```\n\n----------------------------------------\n\nTITLE: Using CONNECTION_ID() to retrieve the current connection ID in Manticore SQL\nDESCRIPTION: CONNECTION_ID() returns the current connection ID in Manticore Search. This function requires no parameters and returns a simple numeric identifier for the current database connection.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Other_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select CONNECTION_ID();\n+-----------------+\n| CONNECTION_ID() |\n+-----------------+\n| 6               |\n+-----------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Local Date with CURDATE() in SQL\nDESCRIPTION: Executes the CURDATE() function in SQL to retrieve the current date in the server's local timezone. The date is returned as a string in 'YYYY-MM-DD' format. No parameters are required.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect curdate();\n```\n\n----------------------------------------\n\nTITLE: Executing DEBUG Statement in SQL for Manticore Search (VIP Connection)\nDESCRIPTION: This example shows the output of the DEBUG command for a VIP connection in Manticore Search. VIP connections have access to additional subcommands, including shutdown and crash commands that require a token for execution.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nmysql> debug;\n+-------------------------------------------------------------------------+----------------------------------------------------------------------------------------+\n| command                                                                 | meaning                                                                                |\n+-------------------------------------------------------------------------+----------------------------------------------------------------------------------------+\n| flush logs                                                              | emulate USR1 signal                                                                    |\n| reload indexes                                                          | emulate HUP signal                                                                     |\n| debug shutdown <password>                                               | emulate TERM signal                                                                    |\n| debug crash <password>                                                  | crash daemon (make SIGSEGV action)                                                     |\n| debug token <password>                                                  | calculate token for password                                                           |\n| debug malloc_stats                                                      | perform 'malloc_stats', result in searchd.log                                          |\n| debug malloc_trim                                                       | pefrorm 'malloc_trim' call                                                             |\n| debug procdump                                                          | ask watchdog to dump us                                                                |\n| debug setgdb on|off                                                     | enable or disable potentially dangerous crash dumping with gdb                         |\n| debug setgdb status                                                     | show current mode of gdb dumping                                                       |\n| debug sleep <N>                                                         | sleep for <N> seconds                                                                  |\n| debug tasks                                                             | display global tasks stat (use select from @@system.tasks instead)                     |\n| debug sched                                                             | display task manager schedule (use select from @@system.sched instead)                 |\n| debug merge <TBL> [chunk] <X> [into] [chunk] <Y> [option sync=1,byid=0] | For RT table <TBL> merge disk chunk X into disk chunk Y                                |\n| debug drop [chunk] <X> [from] <TBL> [option sync=1]                     | For RT table <TBL> drop disk chunk X                                                   |\n| debug files <TBL> [option format=all|external]                          | list files belonging to <TBL>. 'all' - including external (wordforms, stopwords, etc.) |\n| debug close                                                             | ask server to close connection from it's side                                          |\n| debug compress <TBL> [chunk] <X> [option sync=1]                        | Compress disk chunk X of RT table <TBL> (wipe out deleted documents)                   |\n| debug split <TBL> [chunk] <X> on @<uservar> [option sync=1]             | Split disk chunk X of RT table <TBL> using set of DocIDs from @uservar                 |\n| debug wait <cluster> [like 'xx'] [option timeout=3]                     | wait <cluster> ready, but no more than 3 secs.                                         |\n| debug wait <cluster> status <N> [like 'xx'] [option timeout=13]         | wait <cluster> commit achieve <N>, but no more than 13 secs                            |\n| debug meta                                                              | Show max_matches/pseudo_shards. Needs set profiling=1                                  |\n| debug trace OFF|'path/to/file' [<N>]                                    | trace flow to file until N bytes written, or 'trace OFF'                               |\n| debug curl <URL>                                                        | request given url via libcurl                                                          |\n+-------------------------------------------------------------------------+----------------------------------------------------------------------------------------+\n24 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Making Build Scripts Executable in Bash\nDESCRIPTION: This command makes all build_*.sh scripts executable, allowing them to be run directly.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x build_*.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search as a Windows Service with I/O Stats\nDESCRIPTION: This command installs searchd as a Windows service with the additional --iostats option enabled. The --iostats option is included in the installation command to ensure it applies every time the service starts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_12\n\nLANGUAGE: bat\nCODE:\n```\nC:\\WINDOWS\\system32> C:\\Manticore\\bin\\searchd.exe --install\n   --config C:\\Manticore\\manticore.conf --iostats\n```\n\n----------------------------------------\n\nTITLE: Extracting Directory Name Using Shell Commands\nDESCRIPTION: Uses pwd to get current directory path and basename to extract just the directory name, storing it in distr variable. Useful for package distribution and build scripts.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/xenial/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: RPM Build Directory Setup\nDESCRIPTION: Commands for setting up the long path directory structure required for RPM debug symbol packages on RedHat/CentOS systems.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nln -s $(pwd) /manticore012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789/src\ncd /manticore012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789/src\n```\n\n----------------------------------------\n\nTITLE: Building Galera Packages with CMake for Manticore Search\nDESCRIPTION: This bash script demonstrates how to set up the environment and initiate a CMake build to package Galera. It requires setting the PACK_GALERA environment variable and configuring CMake with the PACK=1 parameter to trigger the packaging process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/galera_packaging/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# export DISTR=rhel8\n# export arch=x86_64\nexport PACK_GALERA=1\nmkdir build && cd build\ncmake -DPACK=1 /path/to/manticore/sources\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose\nDESCRIPTION: Commands to download and install Docker Compose binary from GitHub releases.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/dockerfiles/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo curl -o /usr/local/bin/docker-compose -L \"https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)\"\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Selecting Database in SQL Query\nDESCRIPTION: Shows the usage of the SELECT DATABASE() command, which always returns 'Manticore'. This is important for compatibility with various MySQL tools.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATABASE()\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Substring Length with Infix Indexing (INI)\nDESCRIPTION: This example demonstrates setting the maximum substring length along with minimum infix length and dictionary type in a Manticore Search table configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  max_substring_len = 12\n  min_infix_len = 3\n  dict = crc\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bigram Frequent Words in C#\nDESCRIPTION: Uses the C# client to create a table with bigram indexing and frequent words. It executes an SQL command to set up the table with the specified bigram configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_79\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) bigram_freq_words = 'the, a, you, i' bigram_index = 'first_freq'\", true);\n```\n\n----------------------------------------\n\nTITLE: Inserting and Replacing PQ Rules in SQL\nDESCRIPTION: This SQL code snippet demonstrates how to insert and replace multiple PQ rules efficiently in a Manticore database. It requires a Manticore SQL database and assumes the availability of network access to perform bulk insert and replace operations. The snippet takes 48 seconds to insert 1 million PQ rules and significantly more to replace 40,000 in batches of 10,000. Inputs are SQL commands for creating, inserting, and replacing data in the 'pq' table, with outputs as execution time statistics.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nroot@perf3 ~ # mysql -P9306 -h0 -e \"drop table if exists pq; create table pq (f text, f2 text, j json, s string) type='percolate';\"; date; for m in `seq 1 1000`; do (echo -n \"insert into pq (id,query,filters,tags) values \"; for n in `seq 1 1000`; do echo -n \"(0,'@f (cat | ( angry dog ) | (cute mouse)) @f2 def', 'j.json.language=\\\"en\\\"', '{\\\"tag1\\\":\\\"tag1\\\",\\\"tag2\\\":\\\"tag2\\\"}')\"; [ $n != 1000 ] && echo -n \",\"; done; echo \";\")|mysql -P9306 -h0; done; date; mysql -P9306 -h0 -e \"select count(*) from pq\"\n\nWed Dec 22 10:24:30 AM CET 2021\nWed Dec 22 10:25:18 AM CET 2021\n+----------+\n| count(*) |\n+----------+\n|  1000000 |\n+----------+\n\nroot@perf3 ~ # date; (echo \"begin;\"; for offset in `seq 0 10000 30000`; do n=0; echo \"replace into pq (id,query,filters,tags) values \"; for id in `mysql -P9306 -h0 -NB -e \"select id from pq limit $offset, 10000 option max_matches=1000000\"`; do echo \"($id,'@f (tiger | ( angry bear ) | (cute panda)) @f2 def', 'j.json.language=\\\"de\\\"', '{\\\"tag1\\\":\\\"tag1\\\",\\\"tag2\\\":\\\"tag2\\\"}')\"; n=$((n+1)); [ $n != 10000 ] && echo -n \",\"; done; echo \";\"; done; echo \"commit;\") > /tmp/replace.sql; date\nWed Dec 22 10:26:23 AM CET 2021\nWed Dec 22 10:26:27 AM CET 2021\nroot@perf3 ~ # time mysql -P9306 -h0 < /tmp/replace.sql\n\nreal\t6m46.195s\nuser\t0m0.035s\nsys\t0m0.008s\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Cache for MySQL in Manticore Search\nDESCRIPTION: This pre-query disables the query cache for the indexer connection in MySQL, optimizing performance for indexing queries that are not frequently re-run.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Execution_of_fetch_queries.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nsql_query_pre = SET SESSION query_cache_type=OFF\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic SQL Source Library\nDESCRIPTION: Defines and configures the 'source_sql' library for generic SQL data sources, with optional ZLIB support.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library ( source_sql source_sql.cpp source_sql.h )\ntarget_link_libraries ( source_sql PRIVATE lextra )\n\nif (WITH_ZLIB)\n\ttarget_link_libraries ( source_sql PRIVATE ZLIB::ZLIB )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in C#\nDESCRIPTION: This snippet creates a 'products' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search C# client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_6\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"create table products(title text, color string) type='pq'\", true);\n\nDictionary<string, Object> doc = new Dictionary<string, Object>(); \ndoc.Add(\"query\", \"@title bag\");\nInsertDocumentRequest newdoc = new InsertDocumentRequest(index: \"products\", doc: doc);\nindexApi.Insert(newdoc);\n\ndoc = new Dictionary<string, Object>(); \ndoc.Add(\"query\", \"@title shoes\");\ndoc.Add(\"filters\", \"color='red'\");\nnewdoc = new InsertDocumentRequest(index: \"products\", doc: doc);\nindexApi.Insert(newdoc);\n\ndoc = new Dictionary<string, Object>(); \ndoc.Add(\"query\", \"@title bag\");\ndoc.Add(\"filters\", \"color IN ('blue', 'green')\");\nnewdoc = new InsertDocumentRequest(index: \"products\", doc: doc);\nindexApi.Insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Displaying old PHP client Copyright and License Notice\nDESCRIPTION: Presents the copyright and license notice for the old PHP client, including multiple copyright holders and LGPL license information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2001-2016, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc\nCopyright (c) 2017-2025, Manticore Software LTD (https://manticoresearch.com)\nAll rights reserved\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU Library General Public License. You should\nhave received a copy of the LGPL license along with this program; if you\ndid not, you can find it at http://www.gnu.org/\n```\n\n----------------------------------------\n\nTITLE: Buddy Plugin Installation Examples (SQL)\nDESCRIPTION: Provides two example commands for installing the 'manticoresoftware/buddy-plugin-show-hostname' Buddy plugin using both CREATE PLUGIN and CREATE BUDDY PLUGIN syntaxes. Specifies the plugin version as 'dev-main'. These commands will retrieve the plugin from the external package repository, place it in the configured plugin directory, and activate it without requiring a server restart. The sample assumes you have 'Manticore Buddy' installed and have internet access for package download.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Creating_a_plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLUGIN manticoresoftware/buddy-plugin-show-hostname TYPE 'buddy' VERSION 'dev-main';\n\nCREATE BUDDY PLUGIN manticoresoftware/buddy-plugin-show-hostname VERSION 'dev-main';\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in MySQL Command Line for Manticore Search\nDESCRIPTION: Shows how to escape special characters that are operators or query constructs in Manticore Search using MySQL command line. Double backslashes are used for escaping.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Escaping.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM your_index WHERE MATCH('r\\\\&b | \\\\(official video\\\\)');\n```\n\n----------------------------------------\n\nTITLE: Table Truncation in C#\nDESCRIPTION: Example of truncating a table using C# client in Manticore Search. Uses the Sql() method with the TRUNCATE TABLE statement.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_15\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"TRUNCATE TABLE products\", true);\n```\n\n----------------------------------------\n\nTITLE: Generating Token for DEBUG Subcommands in Manticore Search\nDESCRIPTION: This example demonstrates how to generate a token for use with privileged DEBUG subcommands like shutdown and crash. The generated token should be added to the shutdown_token parameter in the searchd section of the Manticore Search configuration file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nmysql> debug token hello;\n+-------------+------------------------------------------+\n| command     | result                                   |\n+-------------+------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking MacOS Sysroot Archives\nDESCRIPTION: Commands to create a compressed tar archive of the MacOS sysroot and create a symlink for x86_64 architecture. This process packages the SDK and toolchain file for cross-compilation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/sysroot_macos__.tar.xz.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - MacOSX11.3.sdk toolchain.cmake | xz -9 > sysroot_macos_arm64.tar.xz\nln -s sysroot_macos_arm64.tar.xz sysroot_macos_x86_64.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Creating Compressed Archive of Boost Headers using Bash\nDESCRIPTION: This command creates a compressed tar archive (.tar.xz) of the Boost include directory. It uses tar to create an archive and pipes it to xz for compression with the highest compression level.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/boost_include.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - include | xz -9 -f > boost_include.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Library Build in CMake\nDESCRIPTION: Sets up the ICU library project, including source files, compile definitions, and build options. It also configures installation and package generation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libicu/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.17 )\nPROJECT ( icu CXX )\nSET ( CMAKE_CXX_STANDARD 11 )\nadd_library ( icu\n\t\tsource/common/appendable.cpp\n\t\tsource/common/bmpset.cpp\n\t\t# ... (many more source files)\n\t\tsource/common/wintz.cpp\n\t\tsource/stubdata/stubdata.cpp\n\t\t)\n\n# Set a default build type for single-configuration CMake generators if no build type is set.\nget_property ( isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )\nif (NOT isMultiConfig AND NOT CMAKE_BUILD_TYPE)\n\tset ( CMAKE_BUILD_TYPE RelWithDebInfo )\n\tmessage ( STATUS \"Automatically set build type to RelWithDebInfo since no other provided\" )\nendif ()\n\nOPTION ( STATIC_BUILD \"build without dlopen, pure static\" OFF )\n\ntarget_compile_definitions ( icu PRIVATE U_IMPORT= U_EXPORT= U_EXPORT2= U_COMMON_IMPLEMENTATION )\ntarget_compile_definitions ( icu PRIVATE $<$<CXX_COMPILER_ID:MSVC>:UCONFIG_USE_WINDOWS_LCID_MAPPING_API=0> )\ntarget_compile_options ( icu PRIVATE $<$<CXX_COMPILER_ID:MSVC>:-D_CRT_SECURE_NO_WARNINGS -wd4541 -wd4800 -wd4996> )\ntarget_compile_definitions ( icu PUBLIC U_STATIC_IMPLEMENTATION U_CHARSET_IS_UTF8=1 U_NO_DEFAULT_INCLUDE_UTF_HEADERS=1 )\n\nif (STATIC_BUILD)\n\ttarget_compile_definitions ( icu PRIVATE HAVE_DLOPEN=0 )\nendif ()\n\ntarget_include_directories ( icu PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/source/common>$<INSTALL_INTERFACE:include/icu> )\nset_target_properties ( icu PROPERTIES\n\t\tDEBUG_POSTFIX d\n\t\tPDB_NAME icu\n\t\tPDB_NAME_DEBUG icud\n\t\tCOMPILE_PDB_NAME icu\n\t\tCOMPILE_PDB_NAME_DEBUG icud\n\t\t)\n\n# separate target for icu data\nfile ( GLOB ICU_DATA \"${CMAKE_CURRENT_SOURCE_DIR}/source/data/in/icu*.dat\" )\nget_filename_component ( ICU_DATA ${ICU_DATA} NAME )\n\nadd_library ( icudata INTERFACE )\ntarget_sources ( icudata INTERFACE $<INSTALL_INTERFACE:data/${ICU_DATA}> )\n\n# installation stuff\nset ( CMAKE_CMAKE_DIR \"lib/cmake/icu\" )\n\n# ensure ALL externally required headers and are exported here\ninstall ( DIRECTORY source/common/unicode DESTINATION include/icu FILES_MATCHING PATTERN \"*.h\" )\ninstall ( FILES \"source/data/in/${ICU_DATA}\" DESTINATION data )\ninstall ( TARGETS icu icudata EXPORT icuExport RUNTIME DESTINATION lib LIBRARY DESTINATION lib )\ninstall ( FILES \"$<TARGET_FILE_DIR:icu>/icu$<$<CONFIG:Debug>:d>.pdb\" EXPORT icuExport DESTINATION lib OPTIONAL )\n\ninstall ( EXPORT icuExport FILE icu-targets.cmake DESTINATION \"${CMAKE_CMAKE_DIR}\" NAMESPACE icu:: )\ninclude ( CMakePackageConfigHelpers )\nfile ( WRITE icu-config.cmake.in\n\t\t\"\\@PACKAGE_INIT@\n\nif(NOT TARGET icu::icu)\n    include(\\\"\\${CMAKE_CURRENT_LIST_DIR}/icu-targets.cmake\\\")\n    get_target_property ( configs icu::icu IMPORTED_CONFIGURATIONS )\n    foreach (config DEBUG RELEASE MINSIZEREL)\n        if (NOT \\${config} IN_LIST configs)\n            set_property ( TARGET icu::icu PROPERTY MAP_IMPORTED_CONFIG_\\${config} RelWithDebInfo )\n        endif ()\n    endforeach ()\nendif()\n\" )\n\nconfigure_package_config_file ( icu-config.cmake.in \"${CMAKE_CURRENT_BINARY_DIR}/icu-config.cmake\"\n\t\tINSTALL_DESTINATION \"${CMAKE_CMAKE_DIR}\" )\ninstall ( FILES \"${CMAKE_CURRENT_BINARY_DIR}/icu-config.cmake\" DESTINATION \"${CMAKE_CMAKE_DIR}\" )\n```\n\n----------------------------------------\n\nTITLE: Dictionary Type Configuration in Manticore Search\nDESCRIPTION: Configures the type of keywords dictionary used in Manticore Search. Supports 'keywords' or 'crc' modes, with 'keywords' being the default. Keywords mode enables efficient substring searches while CRC mode uses control sums for compact storage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_82\n\nLANGUAGE: ini\nCODE:\n```\ndict = {keywords|crc}\n```\n\n----------------------------------------\n\nTITLE: Executing Arbitrary Calculations in SQL Select Query\nDESCRIPTION: Demonstrates the new capability to perform multiple calculations and display system variables in a single SELECT query. The 'limit' clause is optional and will be ignored.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect user(), database(), @@version_comment, version(), 1+1 as a limit 10\n```\n\n----------------------------------------\n\nTITLE: Submitting Highlighted Search via Raw JSON API - ManticoreSearch JSON\nDESCRIPTION: This snippet represents a POST request in raw JSON format to the ManticoreSearch /search endpoint. It searches the 'books' table for 'one' or 'robots' in all fields and requests highlights in all possible fields by setting 'highlight' to an empty object. This format requires no SDK dependencies, just a standard HTTP client capable of sending JSON payloads. The output is dictated by the API server and is presented separately.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"books\",\n  \"query\": { \"match\": { \"*\": \"one|robots\" } },\n  \"highlight\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL 5.1.x with SphinxSE\nDESCRIPTION: Configure MySQL build with the SphinxSE storage engine enabled for MySQL 5.1.x, using the plugins system.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure --with-plugins=sphinx\n```\n\n----------------------------------------\n\nTITLE: Removing Old Manticore Packages on Debian-based Systems\nDESCRIPTION: Command to safely remove existing Manticore packages on Debian-based systems before upgrading to Manticore 6, avoiding conflicts with the updated package structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove manticore*\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in JavaScript\nDESCRIPTION: This snippet creates a 'products' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search JavaScript client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('create table products(title text, color string) type=\\'pq\\'');\nres = indexApi.insert({\"table\" : \"products\", \"doc\" : {\"query\" : \"@title bag\" }});\nres = indexApi.insert({\"table\" : \"products\",  \"doc\" : {\"query\" : \"@title shoes\", \"filters\": \"color='red'\" }});\nres = indexApi.insert({\"table\" : \"products\",  \"doc\" : {\"query\" : \"@title shoes\",\"filters\": \"color IN ('blue', 'green')\" }});\n```\n\n----------------------------------------\n\nTITLE: Example JSON Query Results\nDESCRIPTION: Shows the response format for an HTTP JSON query with search options, including the document ID, score, and source fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Options.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 1,\n    \"total_relation\": \"eq\",\n    \"hits\": [\n      {\n        \"_id\": 1,\n        \"_score\": 10500,\n        \"_source\": {\n          \"title\": \"hello\",\n          \"body\": \"world\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secondary Indexes in Manticore Search (INI)\nDESCRIPTION: Enables or disables the use of secondary indexes for search queries. Default is 1 (enabled). Requires Manticore Columnar Library. Can be overridden per query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_58\n\nLANGUAGE: ini\nCODE:\n```\nsecondary_indexes = 1\n```\n\n----------------------------------------\n\nTITLE: Table Truncation in JavaScript\nDESCRIPTION: Example of truncating a table using JavaScript client in Manticore Search. Uses the await keyword with the sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('TRUNCATE TABLE products');\n```\n\n----------------------------------------\n\nTITLE: Executing DROP FUNCTION in MySQL Shell - SQL\nDESCRIPTION: This code snippet illustrates the result of executing the DROP FUNCTION command within a MySQL-compatible shell session in ManticoreSearch. This requires a running ManticoreSearch server and access via a SQL interface. The command removes the specified user-defined function (here, 'avgmva'). The expected output confirms successful execution with 'Query OK, 0 rows affected'. No rows are changed as the DDL operates on the function definition, not data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDF/Deleting_a_function.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DROP FUNCTION avgmva;\nQuery OK, 0 rows affected (0.00 sec)\n\n```\n\n----------------------------------------\n\nTITLE: Compressing Homebrew Subset to XZ Archive in Bash\nDESCRIPTION: This command creates a compressed XZ archive of the Homebrew subset. It targets the 'x86_64' folder, which contains the cleaned-up Homebrew components necessary for Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/bigsur_x64/homebrew_x64.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - x86_64 | xz -f > /homebrew_x64.tar.xz\n```\n\n----------------------------------------\n\nTITLE: ADD_CACHE Transaction Payload\nDESCRIPTION: Structure for ADD_CACHE (TxnID = 3) transaction type that stores index cache information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/binary-logging.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// TxnID = 3 ( aka 'ADD_CACHE')\n// start of payload\nzind NofIndexes\nIndexRec[NofIndexes]\nIndexRec is:\n    zstring indexName\n    zint    minTID\n    zint    maxTID\n    zint    lastFlushedTID\n// end of payload\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Dependencies for Manticore Search Build\nDESCRIPTION: APT command to install required development libraries including MySQL client, Expat, PostgreSQL, UnixODBC, Jemalloc, OpenSSL, Zstd, and cURL development packages. This is used as part of the Debian packaging build process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_focal.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napt-get install -y \\\n    libmysqlclient-dev \\\n    libexpat-dev \\\n    libpq-dev \\\n    unixodbc-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libzstd-dev \\\n    libcurl4-openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Archiving Homebrew Subset for ARM64\nDESCRIPTION: This command creates a compressed tar archive of the 'arm64' folder containing the essential Homebrew packages for Manticore Search. The resulting archive is named 'homebrew_arm64.tar.xz'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/bigsur_arm64/homebrew_arm64.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - arm64 | xz -f > /homebrew_arm64.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via Rust\nDESCRIPTION: Creates a forum table using Rust with async/await syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE forum(title text, price float)\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Sources for Plain Table\nDESCRIPTION: Configuration for specifying the sources from which documents will be obtained during indexing of a plain table. Multiple sources of different types can be specified.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\nsource = srcpart1\nsource = srcpart2\nsource = srcpart3\n```\n\n----------------------------------------\n\nTITLE: Installing Required FreeBSD Packages\nDESCRIPTION: Installs necessary system packages including MariaDB client, PostgreSQL libpq, UnixODBC, Expat, and Boost libraries using the pkg package manager.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/cross/freebsd_13/sysroot_fbsd_13.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nportsnap fetch\nportsnap extract\npkg install mariadb105-client postgresql-libpqxx unixODBC expat boost-libs\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for ManticoreSearch on Debian\nDESCRIPTION: Installs essential development libraries required for building ManticoreSearch on Debian Bullseye, including MySQL client, Expat, PostgreSQL, UnixODBC, JeMalloc, OpenSSL, ZStd, and cURL development packages.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/packages_bullseye.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napt-get install -y \\\n    default-libmysqlclient-dev \\\n    libexpat-dev \\\n    libpq-dev \\\n    unixodbc-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    libzstd-dev \\\n    libcurl4-openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Percolate Index and Inserting Documents in Java\nDESCRIPTION: This snippet creates a 'products' table as a percolate index and inserts three documents with different queries and filters using the Manticore Search Java client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"create table products(title text, color string) type='pq'\", true);\ndoc = new HashMap<String,Object>(){{    put(\"query\", \"@title bag\");\n}};\nnewdoc = new InsertDocumentRequest();\nnewdoc.index(\"products\").setDoc(doc);\nindexApi.insert(newdoc);\n\ndoc = new HashMap<String,Object>(){{    put(\"query\", \"@title shoes\");\n    put(\"filters\", \"color='red'\");\n}};\nnewdoc = new InsertDocumentRequest();\nnewdoc.index(\"products\").setDoc(doc);\nindexApi.insert(newdoc);\n\ndoc = new HashMap<String,Object>(){{    put(\"query\", \"@title shoes\");\n    put(\"filters\", \"color IN ('blue', 'green')\");\n}};\nnewdoc = new InsertDocumentRequest();\nnewdoc.index(\"products\").setDoc(doc);\nindexApi.insert(newdoc);\n```\n\n----------------------------------------\n\nTITLE: Removing a Table from a Replication Cluster (SQL)\nDESCRIPTION: Removes a table from a replication cluster using SQL syntax. The table becomes a local table but its files are not deleted. After removal, write statements must use just the table name without the cluster prefix.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Adding_and_removing_a_table_from_a_replication_cluster.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER CLUSTER posts DROP weekly_index\n```\n\n----------------------------------------\n\nTITLE: Configuring Unhinted Read Size in Manticore Search (INI)\nDESCRIPTION: Sets the size for reads without known size in advance. Default is 32K, minimum 1K. Affects hit list I/O time but not RAM usage. Should not exceed read_buffer size.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_52\n\nLANGUAGE: ini\nCODE:\n```\nread_unhinted = 32K\n```\n\n----------------------------------------\n\nTITLE: Setting Network Timeout in INI Configuration\nDESCRIPTION: This snippet configures the `network_timeout` for network client requests, allowing specification in seconds or special suffixes. Default is 5 seconds, however, it can be altered for finer control over client-server interactions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nnetwork_timeout = 10s\n```\n\n----------------------------------------\n\nTITLE: Installing Minio Client on 64-bit Linux\nDESCRIPTION: This snippet shows how to install the Minio client on a 64-bit Linux system. It downloads the client, sets the appropriate permissions, and adds it to the system PATH.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Reporting_bugs.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://dl.min.io/client/mc/release/linux-amd64/mc \\\n--create-dirs \\\n-o $HOME/minio-binaries/mc\nchmod +x $HOME/minio-binaries/mc\nexport PATH=$PATH:$HOME/minio-binaries/\n```\n\n----------------------------------------\n\nTITLE: HTTP Parser Copyright Notice\nDESCRIPTION: MIT License copyright notice for the HTTP Parser component used in Manticore Search's HTTP functionality.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright Joyent, Inc. and other Node contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runtime Libraries Installation\nDESCRIPTION: Sets up installation of Windows runtime libraries for both final targets and testing. Manages system runtime libraries and copies them to appropriate destinations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n\tset ( CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP TRUE )\n\tinclude ( InstallRequiredSystemLibraries )\n\taddruntime ( \"${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS}\" common )\n\tgetruntime ( libs common )\n\tinstall ( PROGRAMS ${libs} DESTINATION bin COMPONENT common )\n\tunset ( libs )\n\tgetruntime ( libs daemon )\n\tinstall ( PROGRAMS ${libs} DESTINATION bin COMPONENT searchd )\n\tunset ( libs )\n\tgetruntime ( libs indexer )\n\tinstall ( PROGRAMS ${libs} DESTINATION bin COMPONENT tools )\n\tif (BUILD_TESTING)\n\t\tgetruntime ( libs common )\n\t\tgetruntime ( libs daemon )\n\t\tadd_custom_command ( TARGET searchd POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${libs} \"$<TARGET_FILE_DIR:searchd>\" VERBATIM )\n\tendif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: ADD_INDEX Transaction Payload\nDESCRIPTION: Structure for ADD_INDEX (TxnID = 1) transaction type that introduces new index IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/binary-logging.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// TxnID = 1 (aka 'ADD_INDEX')\n// start of payload\nzint IndexID\nzstring indexName // zstring is zint length, followed by char[length] characters\n// end of payload\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Limit for RT Table RAM Chunk\nDESCRIPTION: Configuration for setting the memory limit for a RAM chunk of a real-time table. This controls when data is flushed from memory to disk and affects performance and resource usage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\nrt_mem_limit = 512M\n```\n\n----------------------------------------\n\nTITLE: Altering Killlist Target for Plain Tables in Manticore Search (HTTP)\nDESCRIPTION: This HTTP request shows how to change the killlist_target setting for a table without rebuilding it, using the ALTER command via HTTP interface.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Killlist_in_plain_tables.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /cli -d \"\nALTER TABLE delta KILLLIST_TARGET='new_main_table:kl'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (Typescript)\nDESCRIPTION: Typescript code to create a table with stored fields in Manticore Search using the utils API.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, content text stored indexed, name text indexed, price float)');\n```\n\n----------------------------------------\n\nTITLE: SQL Faceted Search Query\nDESCRIPTION: Demonstrates SQL syntax for faceted search with different ordering and limit options on brand names grouped by brand_id.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM facetdemo\nFACET brand_name BY brand_id ORDER BY FACET() ASC  LIMIT 0,1\nFACET brand_name BY brand_id ORDER BY brand_name ASC LIMIT 2,4\nFACET brand_name BY brand_id order BY COUNT(*) DESC LIMIT 4;\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster and Table in Manticore\nDESCRIPTION: SQL commands to create a table, create a cluster, and add the table to the cluster in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nmysql> CREATE TABLE testrt ( title text, content text, gid integer);\n\nmysql> CREATE CLUSTER posts;\nQuery OK, 0 rows affected (0.24 sec)\n\nmysql> ALTER CLUSTER posts ADD testrt;\nQuery OK, 0 rows affected (0.07 sec)\n```\n\n----------------------------------------\n\nTITLE: Analyzing 'Definitely Lost' Memory Report in Valgrind for Task Scheduling\nDESCRIPTION: Example of a Valgrind 'Definitely Lost' report showing a true memory leak where allocated memory can no longer be accessed. This indicates a serious issue that should be investigated and potentially fixed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_8\n\nLANGUAGE: valgrind\nCODE:\n```\n==1534868== 104 (56 direct, 48 indirect) bytes in 1 blocks are definitely lost in loss record 15 of 23\n==1534868==    at 0x4849FD3: operator new(unsigned long) (in /home/linuxbrew/.linuxbrew/Cellar/valgrind/3.24.0/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\n==1534868==    by 0xAC552F: TaskManager::ScheduleJob(int, long, std::function<void ()>) (src/searchdtask.cpp:108)\n==1534868==    by 0xBB3A2D: ScheduleRtFlushDisk() (src/taskflushdisk.cpp:47)\n```\n\n----------------------------------------\n\nTITLE: Setting Kibana Version String in Manticore Search\nDESCRIPTION: Configuration setting to customize the version string reported to Kibana or OpenSearch Dashboards. Useful for compatibility with different Kibana versions that expect specific server version numbers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\nkibana_version_string = 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Configuring ODBC Source Library\nDESCRIPTION: Conditionally defines and configures the 'source_odbc' library for MSSQL and UnixODBC data sources.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (WITH_ODBC)\n\tadd_library ( source_odbc source_odbc.cpp source_odbc.h )\n\ttarget_link_libraries ( source_odbc PRIVATE lextra source_sql )\n\tif (DL_ODBC)\n\t\ttarget_link_libraries ( source_odbc PRIVATE ODBC::ODBC_ld )\n\telse ()\n\t\ttarget_link_libraries ( source_odbc PRIVATE ODBC::ODBC )\n\tendif ()\n\n\ttarget_link_libraries ( indexer_sources INTERFACE source_odbc )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Packaging Homebrew Subset for macOS\nDESCRIPTION: This command packages the prepared Homebrew subset into a compressed tar archive. The ARCH placeholder should be replaced with 'arm64' for M1 machines or 'x86_64' for Intel processors.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/boost_macos__.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - Cellar include lib opt | xz -9 -f > boost_macos_ARCH.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Extracting Linux Distribution Name Using pwd Command\nDESCRIPTION: Shell command that gets the current working directory path using pwd, extracts the base directory name using basename, and assigns it to the distr variable. Used to determine the Linux distribution name from the directory structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/centos7/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Extracting Current Directory Name in Shell\nDESCRIPTION: Uses basename command to extract the directory name from the current working directory path and assigns it to distr variable. The pwd command gets the current path and basename extracts just the final directory name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/centos8/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Compilation Flags in CMake for MySQL Sphinx Plugin\nDESCRIPTION: Sets debug compilation flags for C++ and C, adding SAFEMALLOC and SAFE_MUTEX definitions. Also adds a global definition for MYSQL_SERVER.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/mysqlse/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -DSAFEMALLOC -DSAFE_MUTEX\")\nSET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -DSAFEMALLOC -DSAFE_MUTEX\")\nADD_DEFINITIONS(-DMYSQL_SERVER)\n```\n\n----------------------------------------\n\nTITLE: Comparing HTTP Bulk Update Performance Between Versions 3.6.0 and 4.0.2\nDESCRIPTION: Demonstrates the performance improvement in HTTP bulk updates between Manticore Search versions 3.6.0 and 4.0.2. The example shows updating a document by ID via the JSON API, with execution time improving from over 43 seconds in 3.6.0 to just 0.006 seconds in 4.0.2.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ntime curl -X POST -d '{\"update\":{\"index\":\"idx\",\"id\":4611686018427387905,\"doc\":{\"mode\":0}}}' -H \"Content-Type: application/x-ndjson\" http://127.0.0.1:6358/json/bulk\n\nreal    0m43.783s\nuser    0m0.008s\nsys     0m0.007s\n```\n\nLANGUAGE: bash\nCODE:\n```\ntime curl -X POST -d '{\"update\":{\"index\":\"idx\",\"id\":4611686018427387905,\"doc\":{\"mode\":0}}}' -H \"Content-Type: application/x-ndjson\" http://127.0.0.1:6358/json/bulk\n\nreal    0m0.006s\nuser    0m0.004s\nsys     0m0.001s\n```\n\n----------------------------------------\n\nTITLE: Python Response for Highlight Request\nDESCRIPTION: Example response from a Python highlight request showing the full response structure including document ID, score, source content, and highlighted snippets with HTML formatting.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_100\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 2788,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u' into the room. <b>One</b> of the <b>robots</b> followed as well'],\n                                   u'title': [u'Books <b>one</b>']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Ranker Plugin in C for Manticore Search\nDESCRIPTION: Implementation of a minimal ranker plugin in C that always returns a constant weight of 123. It includes the required version function and the finalize function that determines the ranking score.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDFs_and_Plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n// gcc -fPIC -shared -o myrank.so myrank.c\n#include \"sphinxudf.h\"\nint myrank_ver() { return SPH_UDF_VERSION; }\nint myrank_finalize(void *u, int w) { return 123; }\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Boost Archive\nDESCRIPTION: Command to package the Boost directory structure into a compressed tar archive using maximum compression\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/boost_windows_x64.tar.xz.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - diskc | xz -9 -f > boost_windows_x64.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Creating Table with JSON Secondary Index in Manticore Search (PHP)\nDESCRIPTION: PHP code to create a table with a JSON field that has a secondary index in Manticore Search using the PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n    'body' => [\n        'columns' => [\n            'title'=>['type'=>'text'],\n            'j'=>['type'=>'json', 'options' => ['secondary_index' => 1]]\n        ]\n    ],\n    'table' => 'products'\n];\n$index = new \\Manticoresearch\\Index($client);\n$index->create($params);\n```\n\n----------------------------------------\n\nTITLE: SQL Multi-level Facet Response Format\nDESCRIPTION: Shows the response format from a SQL facet query with multi-level grouping. The response includes the main query results followed by the faceted results grouped by price range and brand name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+-------------+\n| id   | price | brand_id | title               | brand_name  | property    | j                                     | categories | price_range |\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+-------------+\n|    1 |   306 |        1 | Product Ten Three   | Brand One   | Six_Ten     | {\"prop1\":66,\"prop2\":91,\"prop3\":\"One\"} | 10,11      |           1 |\n...\n+------+-------+----------+---------------------+-------------+-------------+---------------------------------------+------------+-------------+\n20 rows in set (0.00 sec)\n\n+--------------+-------------+----------+\n| fprice_range | brand_name  | count(*) |\n+--------------+-------------+----------+\n|            1 | Brand Eight |      197 |\n|            4 | Brand Eight |      235 |\n|            3 | Brand Eight |      203 |\n|            2 | Brand Eight |      201 |\n|            0 | Brand Eight |      197 |\n|            4 | Brand Five  |      230 |\n|            2 | Brand Five  |      197 |\n|            1 | Brand Five  |      204 |\n|            3 | Brand Five  |      193 |\n|            0 | Brand Five  |      183 |\n|            1 | Brand Four  |      195 |\n...\n```\n\n----------------------------------------\n\nTITLE: Describing and Querying Tables Before Attachment in SQL\nDESCRIPTION: SQL commands to describe the structure of the target real-time table, query it, and query the source plain table before the attachment process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Attaching_one_table_to_another.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> DESC rt;\nEmpty set (0.00 sec)\n\nmysql> SELECT * FROM rt;\n+-----------+---------+\n| Field     | Type    |\n+-----------+---------+\n| id        | integer |\n| testfield | field   |\n| testattr  | uint    |\n+-----------+---------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT * FROM plain WHERE MATCH('test');\n+------+--------+----------+------------+\n| id   | weight | group_id | date_added |\n+------+--------+----------+------------+\n|    1 |   1304 |        1 | 1313643256 |\n|    2 |   1304 |        1 | 1313643256 |\n|    3 |   1304 |        1 | 1313643256 |\n|    4 |   1304 |        1 | 1313643256 |\n+------+--------+----------+------------+\n4 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Setting Subtree Documents Cache Size\nDESCRIPTION: Configures maximum RAM usage for common subtree document cache per query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_67\n\nLANGUAGE: ini\nCODE:\n```\nsubtree_docs_cache = 8M\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Directory Name using Shell Commands\nDESCRIPTION: Uses basename command to extract the final directory name from the current working directory path (pwd) and assigns it to the distr variable. This is commonly used in build or deployment scripts to determine the distribution name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/focal/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Character Mapping Example\nDESCRIPTION: Demonstrates a direct character-to-character mapping where 'life:)' is mapped to itself.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_165/synonyms4.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlife:) => life:)\n```\n\n----------------------------------------\n\nTITLE: CRC Dictionary Format Structure in Manticore v.31\nDESCRIPTION: Defines the binary structure of the dictionary file (.spi) when using the CRC format in Manticore v.31. Shows how keyword information is organized into blocks with delta-encoded values and support for skiplists to accelerate searches.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbyte dummy = 0x01\nkeyword[] keyword_blocks\nkeyword is:\n\tzint wordid_delta\n\tzint doclist_offset_delta\n\tif wordid_delta == 0:\n\t\treturn block_end\n\tzint num_docs\n\tzint num_hits\n\tif ver >= 31 and num_docs > SKIPLIST_BLOCK:\n\t\tzint skiplist_pos\n\t\tzint skiplist_len\n\ncheckpoint[] checkpoints\ncheckpoint is:\n\tqword wordid\n\tqword dict_offset\n```\n\n----------------------------------------\n\nTITLE: Indexer Basic Configuration Structure\nDESCRIPTION: Basic structure of the indexer configuration section in Manticore configuration file.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nindexer {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Running Queries\nDESCRIPTION: SQL command to display currently running queries in the system\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSHOW QUERIES\n```\n\n----------------------------------------\n\nTITLE: Cyrillic Uppercase to Lowercase Character Mapping\nDESCRIPTION: Maps uppercase Cyrillic characters (U+410 to U+42F) to their lowercase equivalents (U+430 to U+44F) and handles the special case of Ё (U+401) to ё (U+451). This mapping ensures consistent text normalization for Cyrillic text processing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/russian.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nU+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451\n```\n\n----------------------------------------\n\nTITLE: Installing Indexer Dependencies (Bash)\nDESCRIPTION: Installs client libraries required by the Manticore `indexer` tool to connect to various external data sources like MySQL, PostgreSQL, and sources requiring ODBC. This command installs libraries for multiple sources; users can customize it to install only the necessary ones (e.g., `mysql-libs` for MySQL). Requires `sudo` privileges.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/RHEL_and_Centos.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install mysql-libs postgresql-libs expat unixODBC\n```\n\n----------------------------------------\n\nTITLE: Go Aggregation Response Format\nDESCRIPTION: Displays the response format from a Go aggregation query. The response includes both search hits and aggregation results, showing documents and their grouping into buckets based on the expression field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 5,\n    \"hits\": [\n      {\n        \"_id\": 1,\n        \"_score\": 1,\n        \"_source\": {\n          \"content\": \"Text 1\",\n          \"name\": \"Doc 1\",\n          \"cat\": 1,\n          \"cat_range\": 1\n        }\n      },\n ...\n      {\n        \"_id\": 5,\n        \"_score\": 1,\n        \"_source\": {\n          \"content\": \"Text 5\",\n          \"name\": \"Doc 5\",\n          \"cat\": 4,\n          \"cat_range\": 2\n        }\n      }\n    ]\n  },\n  \"aggregations\": {\n    \"expr_group\": {\n      \"buckets\": [\n        {\n          \"key\": 0,\n          \"doc_count\": 0\n        },\n\t\t{\n          \"key\": 1,\n          \"doc_count\": 3\n        },\n        {\n          \"key\": 2,\n          \"doc_count\": 2\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Bit Integer Fields\nDESCRIPTION: Demonstrates creating a table with bit-sized integer fields for optimized storage.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Data_types.md#2025-04-22_snippet_62\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, flags bit(3), tags bit(2) );\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, flags bit(3), tags bit(2))\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n    'title'=>['type'=>'text'],\n\t'flags'=>['type'=>'bit(3)'],\n\t'tags'=>['type'=>'bit(2)']\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Prefix Length\nDESCRIPTION: Setting to determine the minimum word prefix length to index and search. Default is 0 (prefixes not allowed). Enables wildcard searching with wordstart* patterns.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Wildcard_searching_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nmin_prefix_len = length\n```\n\n----------------------------------------\n\nTITLE: CMake Installation Command with Custom Prefix\nDESCRIPTION: Command to install Manticore Search with a custom installation prefix path using CMake.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Compiling_from_sources.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmake --install . --prefix /path/to/installation\n```\n\n----------------------------------------\n\nTITLE: Analyzing 'Indirectly Lost' Memory Report in Valgrind for Task Scheduling\nDESCRIPTION: Example of a Valgrind 'Indirectly Lost' report showing memory that is lost because it was referenced by another block that was lost. This typically accompanies a 'Definitely Lost' report.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_7\n\nLANGUAGE: valgrind\nCODE:\n```\n==1534868== 48 bytes in 1 blocks are indirectly lost in loss record 10 of 23\n==1534868==    at 0x4849FD3: operator new(unsigned long) (in /home/linuxbrew/.linuxbrew/Cellar/valgrind/3.24.0/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\n==1534868==    by 0xAC55C2: _M_create<(lambda at /home/alexey/sphinxfrommac/src/searchdtask.cpp:109:35)> (std_function.h:161)\n==1534868==    by 0xAC55C2: _M_init_functor<(lambda at /home/alexey/sphinxfrommac/src/searchdtask.cpp:109:35)> (std_function.h:215)\n==1534868==    by 0xAC55C2: function<(lambda at /home/alexey/sphinxfrommac/src/searchdtask.cpp:109:35), void> (std_function.h:449)\n==1534868==    by 0xAC55C2: TaskManager::ScheduleJob(int, long, std::function<void ()>) (src/searchdtask.cpp:109)\n==1534868==    by 0xBB3A2D: ScheduleRtFlushDisk() (src/taskflushdisk.cpp:47)\n```\n\n----------------------------------------\n\nTITLE: Python Asyncio Response Example for Highlighting in Manticore Search\nDESCRIPTION: Shows the response format when using highlighting with Python's asyncio client. The output includes document details and highlighted content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_118\n\nLANGUAGE: python\nCODE:\n```\n{'aggregations': None,\n 'hits': {'hits': [{u'_id': u'1',\n                    u'_score': 1597,\n                    u'_source': {u'content': u'They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. ',\n                                 u'title': u'Books one'},\n                    u'highlight': {u'content': [u' gestured the other robots away <b>and</b> entered itself. The door closed']}}],\n          'max_score': None,\n          'total': 1},\n 'profile': None,\n 'timed_out': False,\n 'took': 0}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring global_idf in Manticore INI\nDESCRIPTION: Defines a Manticore Search table named 'products' in the configuration file format (`.ini`). It sets the `global_idf` option to specify a path to a global Inverse Document Frequency file. It also defines the table type as 'rt' (real-time), path, and field/attribute types.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_87\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  global_idf = /usr/local/manticore/var/global.idf\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All Tables in Manticore Configuration\nDESCRIPTION: Demonstrates the use of the --all option to update every table listed in the Manticore configuration file. This is useful for small configurations or maintenance jobs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo -u manticore indexer --config /home/myuser/manticore.conf --all\n```\n\n----------------------------------------\n\nTITLE: Using Manticore Search CLI endpoint\nDESCRIPTION: Shows how to use the /cli endpoint for manual interaction with Manticore Search. This endpoint is designed for use with tools like curl or a browser and returns responses in a tabular format.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPOST /cli\ndesc test\n```\n\nLANGUAGE: bash\nCODE:\n```\n+-------+--------+----------------+\n| Field | Type   | Properties     |\n+-------+--------+----------------+\n| id    | bigint |                |\n| body  | text   | indexed stored |\n| title | string |                |\n+-------+--------+----------------+\n3 rows in set (0.001 sec)\n```\n\n----------------------------------------\n\nTITLE: Installing Ukrainian Lemmatizer for Manticore on Debian/Ubuntu\nDESCRIPTION: Series of commands to install Manticore Search, Python 3.9, and the Ukrainian lemmatizer along with its dependencies.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/Debian_and_Ubuntu.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# install Manticore Search and UK lemmatizer from APT repository\ncd ~\nwget https://repo.manticoresearch.com/manticore-repo.noarch.deb\nsudo dpkg -i manticore-repo.noarch.deb\nsudo apt -y update\nsudo apt -y install manticore manticore-lemmatizer-uk\n\n# install packages needed for building Python\nsudo apt -y update\nsudo apt -y install wget build-essential libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev\n\n# download, build and install Python 3.9\ncd ~\nwget https://www.python.org/ftp/python/3.9.4/Python-3.9.4.tgz\ntar xzf Python-3.9.4.tgz\ncd Python-3.9.4\n./configure --enable-optimizations --enable-shared\nsudo make -j8 altinstall\n\n# update linker cache\nsudo ldconfig\n\n# install pymorphy2 and UK dictionary\nsudo LD_LIBRARY_PATH=~/Python-3.9.4 pip3.9 install pymorphy2[fast]\nsudo LD_LIBRARY_PATH=~/Python-3.9.4 pip3.9 install pymorphy2-dicts-uk\n```\n\n----------------------------------------\n\nTITLE: Filtering Agent Status in Java\nDESCRIPTION: Shows how to filter agent status using Java client with SQL pattern matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Node_status.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"SHOW AGENT STATUS LIKE \\\"%5period%msec%\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Keywords Dictionary\nDESCRIPTION: Examples of creating a table with keywords dictionary across different programming languages and APIs. Shows how to set up a products table with text and float columns using the keywords dictionary type.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_83\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) dict = 'keywords'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) dict = 'keywords'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n             'dict' => 'keywords'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) dict = \\'keywords\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) dict = \\'keywords\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) dict = \\'keywords\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) dict = 'keywords'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.Sql(\"CREATE TABLE products(title text, price float) dict = 'keywords'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) dict = 'keywords'\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Timeout in Manticore Search INI\nDESCRIPTION: Sets the maximum waiting time between requests when using persistent connections. The value is expressed in seconds or with a time suffix. The default value is 5 minutes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nclient_timeout = 1h\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping Rules for Chinese Characters\nDESCRIPTION: A comprehensive mapping table that defines character equivalences between various Unicode ranges used for Chinese characters. Includes mappings for Kangxi radicals (U+2F00-U+2FD5), Bopomofo letters (U+3105-U+312C), CJK characters and their compatibility variants.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/charsets/chinese.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nU+2F00->U+4E00,\nU+2F01->U+4E28,\nU+2F02->U+4E36,\n[...trimmed for brevity...]\nU+FA9E->U+7235,\nU+FA9F->U+72AF\n```\n\n----------------------------------------\n\nTITLE: Optimized Large Result Set Query Using Sub-select\nDESCRIPTION: Demonstrates how to optimize a large result set query on a distributed index using sub-select. This approach reduces network traffic and computation time on the master node.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sub-selects.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM\n     (SELECT * FROM my_dist_index WHERE some_conditions LIMIT 10000)\n ORDER by some_attr LIMIT 50000;\n```\n\n----------------------------------------\n\nTITLE: Merging Tables with Destination Range Filter in Manticore Search (Bash)\nDESCRIPTION: Example of merging tables with a filter applied to the destination index. This command merges the 'delta' index into the 'main' index, keeping only records where the 'deleted' attribute is 0 in the destination index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Merging_tables.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u manticore indexer --merge main delta --merge-dst-range deleted 0 0\n```\n\n----------------------------------------\n\nTITLE: Removing Old Manticore Packages for Upgrade (Bash)\nDESCRIPTION: Removes all previously installed Manticore packages using a wildcard. This is recommended before upgrading to Manticore 6 from older versions to prevent conflicts due to package structure changes. User data and configuration files are not removed by this command. Requires `sudo` privileges.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/RHEL_and_Centos.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum remove manticore*\n```\n\n----------------------------------------\n\nTITLE: Creating Table with N-gram Length in Manticoresearch (JSON)\nDESCRIPTION: A JSON-based creation request for a Manticoresearch table specifying ngram_len, aiding continuous-script language indexing.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Low-level_tokenization.md#2025-04-22_snippet_49\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) ngram_chars = 'cont' ngram_len = '1'\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query Plan Output Format in Manticore Search\nDESCRIPTION: Displays the formatted output of a SHOW PLAN query in SQL mode, showing the transformed query tree with OR conditions for keywords 'dog' and 'cat'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n*************************** 1. row ***************************\nVariable: transformed_tree\n   Value: OR(\n  AND(KEYWORD(dog, querypos=1)),\n  AND(KEYWORD(cat, querypos=2)))\n*************************** 2. row ***************************\nVariable: enabled_indexes\n   Value:\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining Path Transformation Rules in Manticoresearch\nDESCRIPTION: This configuration defines path transformation rules where each line maps a source path to a destination path. The rules follow a pattern of 'source > destination' and likely control request routing or data mapping within the Manticoresearch system.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_098/wf3.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nword11-11word11-11 > word11-11word11-11\nword2word2 > word11-11word11-11\nword2word2 word4word4 > word2word2\nword11-11word11-11 word5word5 > word11-11word11-11\n```\n\n----------------------------------------\n\nTITLE: Bulk Updates by Query in Manticore Search using C#\nDESCRIPTION: This C# code shows how to perform bulk updates by query using the Manticore Search C# client. It updates the 'coeff' field based on price ranges in the 'products' table.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nstring   body = \"{ \\\"update\\\" : { \\\"index\\\" : \\\"products\\\", \\\"doc\\\": { \\\"coeff\\\" : 1000 }, \\\"query\\\": { \\\"range\\\": { \\\"price\\\": { \\\"gte\\\": 1000 } } } }} \"+\"\\n\"+\n    \"{ \\\"update\\\" : { \\\"index\\\" : \\\"products\\\", \\\"doc\\\": { \\\"coeff\\\" : 0 }, \\\"query\\\": { \\\"range\\\": { \\\"price\\\": { \\\"lt\\\": 1000 } } } } }\"+\"\\n\";         \nindexApi.Bulk(body);\n```\n\n----------------------------------------\n\nTITLE: Declaring Integer Attributes with Bit Count in Manticore Search (INI)\nDESCRIPTION: This snippet shows how to declare unsigned integer attributes in Manticore Search. It demonstrates specifying a default 32-bit integer and a 9-bit integer for more compact storage. Bit count is appended to the attribute name with a colon.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Processing_fetched_data.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsql_attr_uint = group_id\nsql_attr_uint = forum_id:9 # 9 bits for forum_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirror Ping Interval\nDESCRIPTION: Sets the interval between health check pings sent to agent mirrors for status tracking.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Remote_nodes/Load_balancing.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nha_ping_interval = 3s\n```\n\n----------------------------------------\n\nTITLE: Loading and Using a Custom Ranker Plugin in Manticore Search\nDESCRIPTION: SQL commands for creating a plugin in Manticore and then using it in a search query with OPTION clause. The example demonstrates loading a custom ranker plugin and applying it to a search result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/UDFs_and_Plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmysql> CREATE PLUGIN myrank TYPE 'ranker' SONAME 'myrank.dll';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT id, weight() FROM test1 WHERE MATCH('test') OPTION ranker=myrank('');\n+------+----------+\n| id   | weight() |\n+------+----------+\n|    1 |      123 |\n|    2 |      123 |\n+------+----------+\n2 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Calculating Pair Term Closeness in ATC\nDESCRIPTION: Formula for calculating the pairwise term closeness between keywords in the Aggregate Term Closeness (ATC) ranking factor. The calculation combines inverse document frequency (IDF) of both words with their distance relationship.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Sorting_and_ranking.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\npair_tc = idf(pair_word1) * idf(pair_word2) * pow(pair_distance, -1.75)\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Version String in Manticore\nDESCRIPTION: Configuration to override the MySQL version reported by Manticore Search to clients. This helps with connectivity issues with some MySQL connectors that require an older version.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n   mysql_version_string = 5.0.37\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Replay Flags in Manticore Search\nDESCRIPTION: This command demonstrates how to start Manticore Search with specific replay flags. In this example, it accepts descending transaction timestamps during binary log replay.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ searchd --replay-flags=accept-desc-timestamp\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Log Filename Digits\nDESCRIPTION: Configuration example demonstrating how to set the number of digits in binary log filenames using binlog_filename_digits directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...    \n    binlog_filename_digits = 6\n...\n```\n\n----------------------------------------\n\nTITLE: Profiling JavaScript Search Query in Manticore Search\nDESCRIPTION: This JavaScript snippet shows how to enable profiling for a search query using the JavaScript API. It sets the profile parameter to true and awaits the search result.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nres = await searchApi.search({\"table\":\"forum\",\"query\":{\"query_string\":\"i me\"},\"_source\":{\"excludes\":[\"*\"]},\"limit\":1,\"profile\":true});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"hits\": {\"hits\": [{\"_id\": 100, \"_score\": 2500, \"_source\": {}}],\n          \"total\": 1},\n \"profile\": {\"query\": {\"children\": [{\"children\": [{\"querypos\": 1,\n                                                      \"type\": \"KEYWORD\",\n                                                      \"word\": \"i\"}],\n                                       \"description\": \"AND(KEYWORD(i, querypos=1))\",\n                                       \"type\": \"AND\"},\n                                      {\"children\": [{\"querypos\": 2,\n                                                      \"type\": \"KEYWORD\",\n                                                      \"word\": \"me\"}],\n                                       \"description\": \"AND(KEYWORD(me, querypos=2))\",\n                                       \"type\": \"AND\"}],\n                        \"description\": \"AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2)))\",\n                        \"type\": \"AND\"}},\n \"timed_out\": False,\n \"took\": 0}\n```\n\n----------------------------------------\n\nTITLE: Describing Table Schema\nDESCRIPTION: Shows table structure including column names and their types using the DESCRIBE command. Supports optional LIKE pattern for filtering columns.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Listing_tables.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n{DESC | DESCRIBE} table_name [ LIKE pattern ]\n```\n\n----------------------------------------\n\nTITLE: Go Search Implementation with Highlighting\nDESCRIPTION: Shows how to implement search with highlighting in Go using the Manticore client. Includes setting up match queries and highlight configuration with field specification.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_62\n\nLANGUAGE: go\nCODE:\n```\nmatchClause := map[string]interface{} {\"*\": \"Text 1\"};\nquery := map[string]interface{} {\"match\": matchClause};\nsearchRequest.SetQuery(query);\nhighlight := manticoreclient.NewHighlight()\nhighlightField := manticoreclient.NetHighlightField(\"content\")\nhighlightFields := []interface{} { highlightField } \nhighlight.SetFields(highlightFields)\nqueryMatchClause := map[string]interface{} {\"*\": \"Text\"};\nhighlightQuery := map[string]interface{} {\"match\": queryMatchClause};\nhighlight.SetHighlightQuery(highlightQuery)\nsearchRequest.SetHighlight(highlight)\nres, _, _ := apiClient.SearchAPI.Search(context.Background()).SearchRequest(*searchRequest).Execute()\n```\n\n----------------------------------------\n\nTITLE: Declaring String Attributes as Full-Text Fields in Manticore Search (INI)\nDESCRIPTION: This snippet demonstrates how to declare a combo string attribute and full-text field in Manticore Search. The field will be indexed for full-text search and stored as a string attribute, allowing both searching and sorting/grouping operations.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Processing_fetched_data.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nsql_field_string = name\n```\n\n----------------------------------------\n\nTITLE: PHP Response for Percolate Query Document Matching\nDESCRIPTION: Shows the PHP array response format when matching documents to percolate queries. The _percolator_document_slot field indicates which document (1 or 2) matched each stored query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\nArray\n(\n    [took] => 23\n    [timed_out] =>\n    [hits] => Array\n        (\n            [total] => 2\n            [max_score] => 1\n            [hits] => Array\n                (\n                    [0] => Array\n                        (\n                            [_index] => products\n                            [_type] => doc\n                            [_id] => 2810781492890828819\n                            [_score] => 1\n                            [_source] => Array\n                                (\n                                    [query] => Array\n                                        (\n                                            [match] => Array\n                                                (\n                                                    [title] => bag\n                                                )\n                                        )\n                                )\n                            [fields] => Array\n                                (\n                                    [_percolator_document_slot] => Array\n                                        (\n                                            [0] => 2\n                                        )\n                                )\n                        )\n                    [1] => Array\n                        (\n                            [_index] => products\n                            [_type] => doc\n                            [_id] => 2810781492890828821\n                            [_score] => 1\n                            [_source] => Array\n                                (\n                                    [query] => Array\n                                        (\n                                            [match] => Array\n                                                (\n                                                    [title] => shoes\n                                                )\n                                        )\n                                )\n                            [fields] => Array\n                                (\n                                    [_percolator_document_slot] => Array\n                                        (\n                                            [0] => 1\n                                        )\n                                )\n                        )\n                )\n        )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using Java\nDESCRIPTION: This Java code uses the Manticore Search API to execute an SQL statement that creates a distributed table named 'local_dist'. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE local_dist type='distributed' local='index1' local='index2'\")\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple Clusters with Path Specification\nDESCRIPTION: Shows how to join a cluster while specifying a custom path, which is necessary when working with multiple replication clusters.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Joining_a_replication_cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nJOIN CLUSTER c2 at '127.0.0.1:10201' 'c2' as path\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Manticore Search with Docker\nDESCRIPTION: Docker command to run Manticore Search container, wait for it to start accepting connections, and connect via MySQL client. Container is removed after exit.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore --rm -d manticoresearch/manticore && until docker logs manticore 2>&1 | grep -q \"accepting connections\"; do sleep 1; done && docker exec -it manticore mysql && docker stop manticore\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Year with DAYOFYEAR() in SQL\nDESCRIPTION: Executes the DAYOFYEAR() function in SQL to get the day of the year (1-366) for a given timestamp, interpreted according to the current timezone. This example uses NOW() as the timestamp input. Requires a timestamp argument.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Date_and_time_functions.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect dayofyear(now());\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Logging for Existing Table\nDESCRIPTION: SQL command to enable binary logging for an existing table by setting binlog parameter to 1.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nalter table FOO binlog='1';\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via MySQL Client\nDESCRIPTION: Command to connect to Manticore Search using the standard MySQL client. This connects to port 9306 on localhost.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/MySQL_protocol.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmysql -P9306 -h0\n```\n\n----------------------------------------\n\nTITLE: Removing Manticore Search Windows Service\nDESCRIPTION: This command removes the searchd service from the Windows Management Console using the --delete option. This doesn't uninstall the software or delete tables, but removes the service registration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Manually.md#2025-04-22_snippet_13\n\nLANGUAGE: bat\nCODE:\n```\nC:\\WINDOWS\\system32> C:\\Manticore\\bin\\searchd.exe --delete\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Facet Aggregations in Manticore Search\nDESCRIPTION: This JSON example demonstrates the structure for defining facet aggregations in the HTTP JSON interface. It shows how to specify the field to aggregate, size limit, and sorting options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n     \"aggs\" :\n     {\n        \"group name\" :\n         {\n            \"terms\" :\n             {\n              \"field\":\"attribute name\",\n              \"size\": 1000\n             }\n             \"sort\": [ {\"attribute name\": { \"order\":\"asc\" }} ]\n         }\n     }\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Support in CMake\nDESCRIPTION: This snippet handles PostgreSQL library configuration for Manticore Search, enabling indexing from PostgreSQL data sources when enabled. It sets up the necessary package dependencies and Windows installation options.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# PostgreSQL and it's dynamic linking\nwith_menu ( PostgreSQL \"pgsql\" \"for indexing postgresql sources with indexer\" )\ndl_package ( PostgreSQL \"pgsql\" )\nwin_install ( PostgreSQL indexer )\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML/XML Zone Indexing in Manticore Search\nDESCRIPTION: The index_zones directive specifies HTML/XML zones within a field to be indexed. It requires html_strip to be enabled and allows for nested and overlapping zones. Zones can be used with the ZONE operator for matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Advanced_HTML_tokenization.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nindex_zones = h*, th, title\n```\n\n----------------------------------------\n\nTITLE: Highlighting Search Results with C# in Manticore Search\nDESCRIPTION: Demonstrates how to perform a search with highlighting using the C# client. The code sets up a search request with a match filter and configures highlighting options for the 'title' field.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_122\n\nLANGUAGE: clike\nCODE:\n```\nvar searchRequest = new SearchRequest(\"books\");\nsearchRequest.FulltextFilter = new MatchFilter(\"*\", \"one|robots\");\nvar highlight = new Highlight();\nhighlight.LimitsPerField = 0;\nvar highlightField = new HighlightField(\"title\");\nhighlight.Fields = new List<Object> {highlightField};\nsearchRequest.Highlight = highlight;\nvar searchResponse = searchApi.Search(searchRequest);\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Test Settings in .sphinx\nDESCRIPTION: Configuration file settings for MySQL database connection and lemmatizer path. The file should be created in the home user directory to override default test settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n(\n    \"db-host\"=>\"127.0.0.1\",\n    \"db-user\"=>\"myuser\",\n    \"db-name\"=>\"mydb\",\n    \"db-password\"=>\"mypass\"\n    \"lemmatizer_base\"=>\"path_to_aot_packs\"\n)\n```\n\n----------------------------------------\n\nTITLE: Reloading Plugins from a Library in SQL\nDESCRIPTION: This SQL command reloads all plugins (UDFs, rankers, etc.) from a specified library. The process is transactional, atomic, and seamless, ensuring consistent plugin versions without disrupting concurrent queries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Reloading_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nRELOAD PLUGINS FROM SONAME 'plugin_library'\n```\n\n----------------------------------------\n\nTITLE: Locating MemCheck Log Files for Manticore Search\nDESCRIPTION: Output snippet showing where to find the MemCheck log files after running the memcheck script. The log files are stored in the build directory with unique numbers for each test.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMemCheck log files can be found here: (<#> corresponds to test number)\n/manticore/source/dir/build/Testing/Temporary/MemoryChecker.<#>.log\n```\n\n----------------------------------------\n\nTITLE: Profiling Rust Search Query in Manticore Search\nDESCRIPTION: This Rust snippet demonstrates how to enable profiling for a search query using the Rust API. It sets the profile field to true in the search request and retrieves the profile information from the search response.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Profiling.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet query = SearchQuery {\n     query_string: Some(serde_json::json!(\"i me\").into()),\n    ..Default::default()\n};\nlet search_req = SearchRequest {\n    table: \"forum\".to_string(),\n    query: Some(Box::new(query)),\n    sort: serde_json::json!([\"*\"]),\n    limit: serde_json::json!(1),\n    profile: serde_json::json!(true),\n    ..Default::default(),\n};\nlet search_res = search_api.search(search_req).await;\n```\n\nLANGUAGE: rust\nCODE:\n```\nclass SearchResponse {\n    took: 18\n    timedOut: false\n    hits: class SearchResponseHits {\n        total: 1\n        hits: [{_id=100, _score=2500, _source={}}]\n        aggregations: null\n    }\n    profile: {query={type=AND, description=AND( AND(KEYWORD(i, querypos=1)),  AND(KEYWORD(me, querypos=2))), children=[{type=AND, description=AND(KEYWORD(i, querypos=1)), children=[{type=KEYWORD, word=i, querypos=1}]}, {type=AND, description=AND(KEYWORD(me, querypos=2)), children=[{type=KEYWORD, word=me, querypos=2}]}]}}\n}\n```\n\n----------------------------------------\n\nTITLE: Force Starting Cluster via Systemd\nDESCRIPTION: Systemd command to forcibly initialize a new cluster, equivalent to using the --new-cluster-force option.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Restarting_a_cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmanticore_new_cluster --force\n```\n\n----------------------------------------\n\nTITLE: Copying SphinxSE Files for MySQL 5.0.x\nDESCRIPTION: Copy the SphinxSE source files from Manticore distribution to the MySQL source directory for MySQL 5.0.x.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cp -R /root/builds/sphinx-0.9.7/mysqlse /root/builds/mysql-5.0.24/sql/sphinx\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Place Hit Gap in Manticore Search Table\nDESCRIPTION: Example configuration for setting the in-place hit gap size in a table definition. Used to fine-tune in-place inversion behavior.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_61\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  inplace_hit_gap = 1M\n  inplace_enable = 1\n\n  path = products\n  source = src_base\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Indexer Using Systemctl in Manticore Search\nDESCRIPTION: Shows how to start the indexer tool using systemctl, including how to build a specific table and set custom configurations and arguments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl start --no-block manticore-indexer\n```\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl start --no-block manticore-indexer@specific-table-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl set-environment INDEXER_CONFIG\n```\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl set-environment INDEXER_ARGS\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Ubuntu\nDESCRIPTION: Commands to install Docker Engine on Ubuntu system using apt package manager.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/dockerfiles/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\nsudo add-apt-repository \"deb https://apt.dockerproject.org/repo/  ubuntu-$(lsb_release -cs)  main\"\nsudo apt-get update\nsudo apt-get install docker-engine\n```\n\n----------------------------------------\n\nTITLE: Using REGEX Operator in Manticore Search\nDESCRIPTION: Demonstrates the REGEX operator for pattern matching using RE2 syntax. Requires min_infix_len or min_prefix_len and dict=keywords. Pattern must match the entire token, potentially impacting search time significantly.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Full_text_matching/Operators.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nREGEX(/t.?e/)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with Meta Information in Manticore Search\nDESCRIPTION: Shows how to execute a SQL query with a LIMIT clause and retrieve meta-information using SHOW META, displaying both the result set and meta data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Search_results.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id,story_author,comment_author FROM hn_small WHERE story_author='joe' LIMIT 3; SHOW META;\n```\n\nLANGUAGE: sql\nCODE:\n```\n++--------+--------------+----------------+\n| id     | story_author | comment_author |\n+--------+--------------+----------------+\n| 152841 | joe          | SwellJoe       |\n| 161323 | joe          | samb           |\n| 163735 | joe          | jsjenkins168   |\n+--------+--------------+----------------+\n3 rows in set (0.01 sec)\n\n+----------------+-------+\n| Variable_name  | Value |\n+----------------+-------+\n| total          | 3     |\n| total_found    | 20    |\n| total_relation | gte   |\n| time           | 0.010 |\n+----------------+-------+\n4 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Manticore Search with Short JSON Plan Format\nDESCRIPTION: This snippet illustrates a search query on the 'forum' table with a short JSON plan format. It provides a concise description of the query plan without detailed structure.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Node_info_and_management/Profiling/Query_plan.md#2025-04-22_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /search\n{\n  \"table\": \"forum\",\n  \"query\": {\"query_string\": \"@title way* @content hey\"},\n  \"_source\": { \"excludes\":[\"*\"] },\n  \"limit\": 1,\n  \"plan\": 1\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"took\":33,\n  \"timed_out\":false,\n  \"hits\":\n  {\n    \"total\":105,\n    \"hits\":\n    [\n       {\n          \"_id\": 711651,\n          \"_score\":2539,\n          \"_source\":{}\n       }\n    ]\n  },\n  \"plan\":\n  {\n    \"query\":\n    {\n      \"description\":\"AND( OR( OR( AND(fields=(title), KEYWORD(wayne, querypos=1, expanded)),  OR( AND(fields=(title), KEYWORD(ways, querypos=1, expanded)),  AND(fields=(title), KEYWORD(wayyy, querypos=1, expanded)))),  AND(fields=(title), KEYWORD(way, querypos=1, expanded)),  OR(fields=(title), KEYWORD(way*, querypos=1, expanded))),  AND(fields=(content), KEYWORD(hey, querypos=2)))\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Stored Fields in Manticore Search (PHP)\nDESCRIPTION: PHP code to create a table with stored fields in Manticore Search using the PHP client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$params = [\n    'body' => [\n        'columns' => [\n            'title'=>['type'=>'text'],\n            'content'=>['type'=>'text', 'options' => ['indexed', 'stored']],\n            'name'=>['type'=>'text', 'options' => ['indexed']],\n            'price'=>['type'=>'float']\n        ]\n    ],\n    'table' => 'products'\n];\n$index = new \\Manticoresearch\\Index($client);\n$index->create($params);\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Table in Manticore Search using SQL\nDESCRIPTION: This SQL statement creates a distributed table named 'local_dist' in Manticore Search's RT mode. It sets the table type to 'distributed' and includes two local tables, 'index1' and 'index2'.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Creating_a_local_distributed_table.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE local_dist type='distributed' local='index1' local='index2';\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Windows Boost Package\nDESCRIPTION: Shows the expected directory structure for packaging Boost, OpenSSL, and related dependencies on Windows\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/boost_windows_x64.tar.xz.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n└── diskc\n    ├── boost_1_78_0\n    │   ├── boost -> ../../../cache/common/boost/include/boost\n    │   └── lib64-msvc-14.2\n    ├── OpenSSLConfig.cmake\n    └── OpenSSL-Win64\n        ├── include\n        ├── lib\n        ├── libcrypto-1_1-x64.dll\n        └── libssl-1_1-x64.dll\n```\n\n----------------------------------------\n\nTITLE: SphinxSE Query with Sort Option\nDESCRIPTION: Examples of SphinxSE search queries using the sort option to control result ordering, including attribute-based sorting and extended sorting syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n... WHERE query='test;sort=attr_asc:group_id';\n... WHERE query='test;sort=extended:@weight desc, group_id asc';\n```\n\n----------------------------------------\n\nTITLE: Setting Server Variable in Manticore Search\nDESCRIPTION: This example shows how to set a server variable 'myvar' to the value 'myvalue' using the SET syntax without the GLOBAL keyword.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Setting_variables_online.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET myvar='myvalue'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Manticore via PHP Client\nDESCRIPTION: Initialize a connection to Manticore Search server using the official PHP client library.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__ . '/vendor/autoload.php';\n$config = ['host'=>'127.0.0.1','port'=>9308];\n$client = new \\Manticoresearch\\Client($config);\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in Python-asyncio\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using Python with asyncio in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('TRUNCATE TABLE products WITH RECONFIGURE')\n```\n\n----------------------------------------\n\nTITLE: Configuring Expansion Merge Threshold for Documents\nDESCRIPTION: Sets the maximum number of documents in expanded keywords that allows merging for optimization.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nexpansion_merge_threshold_docs = 1024\n```\n\n----------------------------------------\n\nTITLE: File Field Error Handling Configuration\nDESCRIPTION: Configuration for handling I/O errors in file fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\non_file_field_error = skip_document\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3.9 and Ukrainian Lemmatizer on CentOS 7/8 (Bash)\nDESCRIPTION: A multi-step script to install the Ukrainian lemmatizer for Manticore Search on CentOS 7/8. It first installs Manticore and the lemmatizer package via YUM, installs development tools and prerequisites for building Python, downloads Python 3.9 source, compiles and installs it with shared libraries enabled, updates the linker cache, and finally installs the required `pymorphy2` Python libraries using `pip3.9`. Requires `sudo` privileges for most steps.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Installation/RHEL_and_Centos.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# install Manticore Search and UK lemmatizer from YUM repository\nyum -y install https://repo.manticoresearch.com/manticore-repo.noarch.rpm\nyum -y install manticore manticore-lemmatizer-uk\n\n# install packages needed for building Python\nyum groupinstall \"Development Tools\" -y\nyum install openssl-devel libffi-devel bzip2-devel wget -y\n\n# download, build and install Python 3.9\ncd ~\nwget https://www.python.org/ftp/python/3.9.2/Python-3.9.2.tgz\ntar xvf Python-3.9.2.tgz\ncd Python-3.9*/\n./configure --enable-optimizations --enable-shared\nmake -j8 altinstall\n\n# update linker cache\nldconfig\n\n# install pymorphy2 and UK dictionary\npip3.9 install pymorphy2[fast]\npip3.9 install pymorphy2-dicts-uk\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Place Inversion in Manticore Search\nDESCRIPTION: Example configuration for enabling in-place inversion in a table definition. This reduces disk usage during indexing at a small performance cost.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_59\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  inplace_enable = 1\n\n  path = products\n  source = src_base\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Name from Current Directory in Shell\nDESCRIPTION: This shell command extracts the distribution name by getting the base name of the current working directory. It's used to dynamically set the distribution variable in the Manticore Search setup process.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/bullseye/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Manticore Search\nDESCRIPTION: Comparison operators for use in expressions. These return 1.0 when true and 0.0 when false. Equality comparisons include a small threshold (1e-6 by default).\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Expressions.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n<, > <=, >=, =, <>\n```\n\n----------------------------------------\n\nTITLE: Running Manticore Docker with Custom Configuration\nDESCRIPTION: Docker command to run Manticore with a custom configuration file and volume mounting for data persistence.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name manticore -v $(pwd)/manticore.conf:/etc/manticoresearch/manticore.conf -v $(pwd)/data:/var/lib/manticore/ -p 127.0.0.1:9306:9306 -p 127.0.0.1:9308:9308 -d manticoresearch/manticore\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippets File Prefix in Manticore Search INI\nDESCRIPTION: Sets an optional prefix that can be added to the local file names when generating snippets. The default value is the current working folder.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nsnippets_file_prefix = /mnt/common/server1/\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Secondary Indexes in Manticore Search\nDESCRIPTION: Specifies JSON attributes for which secondary indexes should be generated in Manticore Search. This can improve query performance for JSON fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\njson_secondary_indexes = json_attr\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL without Certificate Authority\nDESCRIPTION: Configuration example showing basic SSL setup without a CA in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Security/SSL.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nssl_cert = server-cert.pem\nssl_key = server-key.pem\n```\n\n----------------------------------------\n\nTITLE: Conditionally Deleting a Table with Python in Manticore Search\nDESCRIPTION: Removes a table only if it exists using the IF EXISTS clause through the Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('DROP TABLE IF EXISTS products')\n```\n\n----------------------------------------\n\nTITLE: Java Truncation Response\nDESCRIPTION: Example response from a successful Java truncate operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n{total=0, error=, warning=}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL 5.0.x with SphinxSE\nDESCRIPTION: Configure MySQL build with the SphinxSE storage engine enabled for MySQL 5.0.x.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure --with-sphinx-storage-engine\n```\n\n----------------------------------------\n\nTITLE: Configuring stopword_step in Manticore Search\nDESCRIPTION: Sets the position_increment for stopwords. Allowed values are 0 and 1, with 1 being the default. This setting affects how token positions are calculated when stopwords are removed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/NLP_and_tokenization/Ignoring_stop-words.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nstopword_step={0|1}\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products(title text, price float) stopwords = 'en' stopword_step = '1'\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"\nCREATE TABLE products(title text, price float) stopwords = 'en' stopword_step = '1'\"\n```\n\nLANGUAGE: php\nCODE:\n```\n$index = new \\Manticoresearch\\Index($client);\n$index->setName('products');\n$index->create([\n            'title'=>['type'=>'text'],\n            'price'=>['type'=>'float']\n        ],[\n            'stopwords' => 'en, it, ru',\n            'stopword_step' => '1'\n        ]);\n```\n\nLANGUAGE: python\nCODE:\n```\nutilsApi.sql('CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopword_step = \\'1\\'')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait utilsApi.sql('CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopword_step = \\'1\\'')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopword_step = \\'1\\'');\n```\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopword_step = \\'1\\'\", true);\n```\n\nLANGUAGE: clike\nCODE:\n```\nutilsApi.sql(\"CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopword_step = \\'1\\'\", true);\n```\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"CREATE TABLE products(title text, price float) stopwords = \\'en\\' stopword_step = \\'1\\'\", Some(true)).await;\n```\n\nLANGUAGE: ini\nCODE:\n```\ntable products {\n  stopwords = en\n  stopword_step = 1\n\n  type = rt\n  path = tbl\n  rt_field = title\n  rt_attr_uint = price\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ManticoreSearch Testing Environment\nDESCRIPTION: Configures the testing environment for ManticoreSearch, including Google Tests, internal tests, and MySQL-based tests. Sets up test targets and their properties.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT BUILD_TESTING)\n\treturn ()\nendif ()\n\nif (CMAKE_VERSION VERSION_GREATER 3.1.0 AND NOT DISABLE_GTESTS AND NOT TEST_SPECIAL_EXTERNAL)\n\tadd_subdirectory ( gtests )\nendif ()\n\nadd_executable ( tests EXCLUDE_FROM_ALL tests.cpp )\ntarget_link_libraries ( tests PUBLIC lmanticore )\n\nif (WITH_MYSQL)\n\thsnippet ( rtestconfig testrt.conf )\n\n\tset ( DATAFLD \"${MANTICORE_BINARY_DIR}/test/data\" )\n\tfile ( MAKE_DIRECTORY ${DATAFLD} )\n\tsource_group ( \"Testing config\" FILES testrt.conf.in )\n\tadd_executable ( testrt testrt.cpp ${MANTICORE_BINARY_DIR}/config/rtestconfig.h )\n\ttarget_compile_definitions ( testrt PRIVATE \"DATAFLD=\\\"${DATAFLD}/\\\"\" )\n\ttarget_link_libraries ( testrt PRIVATE source_mysql PUBLIC lmanticore $<$<PLATFORM_ID:Windows>:psapi.lib> )\n\tif (HAVE_RTESTCONFIG_H)\n\t\ttarget_compile_definitions ( testrt PRIVATE \"-DHAVE_RTESTCONFIG_H\" )\n\tendif ()\nendif (WITH_MYSQL)\n```\n\n----------------------------------------\n\nTITLE: Building Package with System ICU\nDESCRIPTION: Commands for building ManticoreSearch package using system ICU library instead of the embedded version.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build && cd build\ncmake -DPACK=1 -DBUILD_TAG=\"noicu\" -DWITH_ICU_FORCE_STATIC=0 /path/to/sources\ncmake --build . --target package -j4\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Binary Logging in Searchd Configuration\nDESCRIPTION: Configuration example showing how to disable binary logging globally in the searchd configuration by setting an empty binlog_path.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Logging/Binary_logging.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...    \n    binlog_path = # disable logging\n...\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Attribute in SQL\nDESCRIPTION: Example of updating the 'enabled' attribute of a document with ID 10 in the 'products' table using SQL syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/UPDATE.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE products SET enabled=0 WHERE id=10;\n```\n\n----------------------------------------\n\nTITLE: Setting Character Encoding for MySQL in Manticore Search\nDESCRIPTION: These pre-queries set the character encoding for the MySQL connection to UTF-8, ensuring proper handling of text data in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_databases/Execution_of_fetch_queries.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsql_query_pre = SET CHARACTER_SET_RESULTS=utf8\nsql_query_pre = SET NAMES utf8\n```\n\n----------------------------------------\n\nTITLE: Updating Full-Text Settings in Manticore Search RT Mode\nDESCRIPTION: SQL command for modifying full-text settings of a table in RT mode. Affects only new documents and not existing ones.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table ft_setting='value'[, ft_setting2='value']\n```\n\n----------------------------------------\n\nTITLE: SQL Partial Field Replace\nDESCRIPTION: Replace specific fields of a document using SQL SET syntax. Only works with document ID filtering.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO table\n    SET field1=value1[, ..., fieldN=valueN]\n    WHERE id = <id>\n```\n\n----------------------------------------\n\nTITLE: Lemmatizer Cache Configuration\nDESCRIPTION: Configuration setting for lemmatizer cache size with default value of 256K.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nlemmatizer_cache = 256M\n```\n\n----------------------------------------\n\nTITLE: Comparison Filter Test Cases\nDESCRIPTION: Set of test cases showing greater than comparisons with time and test values. Includes a documentation comment.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_143/wordforms_multi_dest.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntried and true > time1 test1\ntripple and true > time2 for test2\ndou true > time3 for test3\n# comment for sure that whole line comment should not produce warning\n```\n\n----------------------------------------\n\nTITLE: Using UINT64 Type Conversion in SQL Query\nDESCRIPTION: Demonstrates the usage of the new UINT64() type conversion function for converting values to unsigned 64-bit integers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT UINT64(column_or_value) FROM table\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore Search on RHEL/CentOS\nDESCRIPTION: YUM repository setup and package installation commands for RHEL-based systems.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install https://repo.manticoresearch.com/manticore-repo.noarch.rpm\nsudo yum install manticore manticore-extra\n```\n\n----------------------------------------\n\nTITLE: Setting Autocommit Mode in Manticore Search\nDESCRIPTION: Controls the autocommit mode in the active session. Default is 1 (autocommit on). Setting to 0 enables manual transaction management.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET AUTOCOMMIT = {0 | 1}\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in Rust\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using Rust client in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\nutils_api.sql(\"TRUNCATE TABLE products WITH RECONFIGURE\", Some(true)).await;\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Support in CMake\nDESCRIPTION: This snippet handles MySQL library configuration for Manticore Search, offering options for static or dynamic linking. It includes special handling for macOS to fix library naming issues (#2997) by matching the proper dynamic library version.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# MYSQL and it's dynamic linking\nset ( WITH_STATIC_MYSQL OFF CACHE BOOL \"link to mysql library statically\" )\nif (WITH_STATIC_MYSQL)\n\tset ( MYSQL_USE_STATIC_LIBS ON )\nendif ()\nwith_menu ( Mysql \"mysql\" \"for indexing mysql sources with indexer\" )\ndl_package ( Mysql \"mysql\" )\n\n# roll-back to 'unversioned' mysql dylib on macos (#2997)\nif (CMAKE_SYSTEM_NAME STREQUAL Darwin)\n\tif (TARGET Mysql::Mysql_ld)\n\t\tif ( DL_MYSQL )\n\t\t\tGET_FILENAME_COMPONENT ( __mysql_21_dylib_name ${MYSQL_LIB} NAME  )\n\t\t\tget_target_property ( _mysql_dylib Mysql::Mysql LOCATION )\n\t\t\tGET_FILENAME_COMPONENT ( __mysql_dylib_name ${_mysql_dylib} NAME )\n\t\t\tif ( NOT __mysql_21_dylib_name STREQUAL ${__mysql_dylib_name} )\n\t\t\t\tGET_FILENAME_COMPONENT ( __mysql_dir ${MYSQL_LIB} DIRECTORY )\n\t\t\t\tset ( MYSQL_LIB \"${__mysql_dir}/${__mysql_dylib_name}\" CACHE FILEPATH \"Library file of Mysql\" FORCE )\n\t\t\t\tinfomsg ( \"Mysql lib name fixed from ${__mysql_21_dylib_name} to ${__mysql_dylib_name} (${MYSQL_LIB})\" )\n\t\t\tendif()\n\t\tendif ()\n\tendif ()\nendif ()\n\nwin_install ( Mysql indexer )\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Tables in Manticore Search\nDESCRIPTION: SQL syntax examples for creating real-time tables with different field configurations and settings.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Plain_and_real-time_table_settings.md#2025-04-22_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products (title text, price float) morphology='stem_en'\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE products (title text indexed, description text stored, author text, price float)\n```\n\n----------------------------------------\n\nTITLE: Configuring VIP Connections for Manticore Search\nDESCRIPTION: Demonstrates how to set up a VIP connection in Manticore Search, which bypasses the thread pool and creates a dedicated thread. This is useful for managing during high load periods.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Connecting_to_the_server/HTTP.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nsearchd {\n...\n   listen = 127.0.0.1:9308\n   listen = 127.0.0.1:9318:_vip\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Storage Engine Build in CMake based on MySQL Version\nDESCRIPTION: Sets up the build configuration for the Sphinx storage engine. For MySQL versions before 5.5.15, it builds a simple library. For newer versions, it uses MYSQL_ADD_PLUGIN to create a dynamic plugin.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/mysqlse/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(SPHINX_SOURCES ha_sphinx.cc snippets_udf.cc)\nIF(MYSQL_VERSION_ID LESS 50515) \nADD_LIBRARY(sphinx ha_sphinx.cc snippets_udf.cc)\nELSE()\nSET(SPHINX_PLUGIN_DYNAMIC \"ha_sphinx\")\nMYSQL_ADD_PLUGIN(sphinx ${SPHINX_SOURCES} STORAGE_ENGINE MODULE_ONLY LINK_LIBRARIES mysys)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Renaming Real-Time Tables in Manticore Search\nDESCRIPTION: SQL command for renaming a real-time table in RT mode. Requires Manticore Buddy to be installed.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table_name RENAME new_table_name;\n```\n\n----------------------------------------\n\nTITLE: Write Buffer Configuration\nDESCRIPTION: Setting for write buffer size used for temporary and final table files.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Plain_tables_creation.md#2025-04-22_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\nwrite_buffer = 4M\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Connection Timeout in Manticore Search INI\nDESCRIPTION: Shows how to set the timeout for connecting to remote agents using the agent_connect_timeout directive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Creating_a_distributed_table/Remote_tables.md#2025-04-22_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nagent_connect_timeout = 300\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table with Python in Manticore Search\nDESCRIPTION: Removes a table using the Python client. This executes an SQL query through the utilsApi.sql() method.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Deleting_a_table.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nutilsApi.sql('DROP TABLE products')\n```\n\n----------------------------------------\n\nTITLE: Creating Real-time Table via HTTP JSON\nDESCRIPTION: Creates a real-time table using HTTP POST request to the CLI endpoint.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_table/Local_tables/Real-time_table.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /cli -d \"CREATE TABLE products(title text, price float)  morphology='stem_en'\"\n```\n\n----------------------------------------\n\nTITLE: Showing Materialized View Details\nDESCRIPTION: Displays detailed configuration of a specific materialized view including its transformation query.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Integration/Kafka.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW MV view_table\n```\n\n----------------------------------------\n\nTITLE: TRUNCATE with RECONFIGURE in JavaScript\nDESCRIPTION: Example of truncating a table with the RECONFIGURE option using JavaScript client in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nres = await utilsApi.sql('TRUNCATE TABLE products WITH RECONFIGURE');\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Manticore Search\nDESCRIPTION: Sets up the CMake project for Manticore Search, including minimum required version, policies, and project name. It also sets the C++ standard to 17 and configures the module path.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.17 )\n\nFOREACH (policy CMP0012 CMP0013 CMP0014 CMP0048 CMP0074 CMP0077 CMP0091 CMP0110)\n\tIF (POLICY ${policy})\n\t\tCMAKE_POLICY ( SET ${policy} NEW )\n\tENDIF ()\nENDFOREACH ()\n\nif (DEFINED ENV{CMAKE_INTERPROCEDURAL_OPTIMIZATION})\n\tset ( CMAKE_INTERPROCEDURAL_OPTIMIZATION $ENV{CMAKE_INTERPROCEDURAL_OPTIMIZATION} )\nendif ()\n\nset ( CMAKE_ENABLE_EXPORTS ON )\n\nset ( _CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} )\n\nPROJECT ( MANTICORE )\n\n# sometimes CMAKE_BUILD_TYPE became set after PROJECT statement, undo it.\nif (NOT _CMAKE_BUILD_TYPE AND CMAKE_BUILD_TYPE)\n\tunset ( CMAKE_BUILD_TYPE CACHE )\nendif ()\n\nSET ( CMAKE_CXX_STANDARD 17 )\nSET ( MANTICORE_CMAKE_DIR \"${MANTICORE_SOURCE_DIR}/cmake\" )\nSET ( CMAKE_MODULE_PATH \"${MANTICORE_SOURCE_DIR}/cmake\" )\nSET ( MANTICORE_MODULE_PATH \"${CMAKE_MODULE_PATH}\" )\n```\n\n----------------------------------------\n\nTITLE: Managing Auto-Schema Settings in Manticore Search INI\nDESCRIPTION: Configuration settings to enable or disable automatic table creation for non-existent tables in INSERT statements.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Searchd.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nauto_schema = 0 # disable automatic table creation\n```\n\nLANGUAGE: ini\nCODE:\n```\nauto_schema = 1 # enable automatic table creation\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Source Document Library\nDESCRIPTION: Defines and configures the 'sourcedoc' library with its dependencies and include directories.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library ( sourcedoc source_document.cpp source_document.h )\ntarget_include_directories ( sourcedoc PUBLIC \"${MANTICORE_SOURCE_DIR}/src\" )\ntarget_link_libraries ( sourcedoc PRIVATE stripper conversion PUBLIC lextra )\n\nadd_library ( indexer_sources INTERFACE )\ntarget_link_libraries ( indexer_sources INTERFACE sourcedoc )\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Query Killlist for Plain Tables in Manticore Search\nDESCRIPTION: This snippet demonstrates how to create a SQL query for generating a kill list in plain tables. It combines updated and deleted document IDs since the last reindex.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Adding_data_to_tables/Killlist_in_plain_tables.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsql_query_killlist = \\\n    SELECT id FROM documents WHERE updated_ts>=@last_reindex UNION \\\n    SELECT id FROM documents_deleted WHERE deleted_ts>=@last_reindex\n```\n\n----------------------------------------\n\nTITLE: PHP Response for TRUNCATE with RECONFIGURE\nDESCRIPTION: Example response from a successful PHP truncate with RECONFIGURE operation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Emptying_a_table.md#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nArray(\n    [total] => 0\n    [error] => \n    [warning] => \n)\n```\n\n----------------------------------------\n\nTITLE: Python Search Implementation\nDESCRIPTION: Synchronous Python implementation of search with highlighting using the Manticore Search Python client.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nres =searchApi.search({\"table\":\"books\",\"query\":{\"match\":{\"*\":\"one|robots\"}},\"highlight\":{\"fields\":[\"content\",\"title\"],\"number_of_fragments\":10}})\n```\n\n----------------------------------------\n\nTITLE: C# Response Format for Cluster Document Deletion\nDESCRIPTION: Shows the response format when deleting a document from a table within a replication cluster using C#. The response includes the index name, document ID, and result of the operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Deleting_documents.md#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nclass DeleteResponse {\n    index: test\n    _id: 1\n    result: deleted\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies in CMake for Manticore Search\nDESCRIPTION: This snippet configures various optional dependencies for Manticore Search including compression libraries (ZLIB, ZSTD), network libraries (CURL), and database connectors (ODBC, MySQL, PostgreSQL). It uses custom CMake functions like with_menu, dl_package, and win_install to handle dependency configuration.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Support for ZLIB\nwith_menu ( ZLIB \"zlib\" \"for compressed data and networking\" )\nwin_install ( ZLIB common )\n\nwith_menu ( ZSTD \"libzstd\" \"for compressed networking\" )\ndl_package ( ZSTD \"zstd\" )\nwin_install ( ZSTD daemon )\n\nwith_menu_libname ( CURL libcurl \"libCURL\" \"for enhanced network communication\" )\ndl_package_comp ( CURL libcurl \"curl\" )\nwin_install_lib ( CURL libcurl daemon )\n\n# ODBC and it's dynamic linking\nwith_menu ( ODBC \"ODBC/UnixODBC/iODBC\" \"for indexing MSSQL (windows) and generic ODBC sources with indexer\" )\ndl_package ( ODBC \"ODBC/UnixODBC/iODBC\" )\n\n# EXPAT and it's dynamic linking\nwith_menu ( EXPAT \"expat\" \"for indexing xmlpipe sources with indexer\" )\ndl_package ( EXPAT \"expat\" )\nwin_install ( EXPAT common )\n```\n\n----------------------------------------\n\nTITLE: Keyed JSON Histogram Response Format\nDESCRIPTION: Displays the response format from a keyed JSON histogram query. The response includes aggregation results with buckets presented as a dictionary with bucket keys rather than an array.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Faceted_search.md#2025-04-22_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"took\": 0,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": 20,\n    \"total_relation\": \"eq\",\n    \"hits\": []\n  },\n  \"aggregations\": {\n    \"price_range\": {\n      \"buckets\": {\n        \"0\": {\n          \"key\": 0,\n          \"doc_count\": 10\n        },\n        \"300\": {\n          \"key\": 300,\n          \"doc_count\": 6\n        },\n        \"600\": {\n          \"key\": 600,\n          \"doc_count\": 3\n        },\n        \"900\": {\n          \"key\": 900,\n          \"doc_count\": 1\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Splitting for ManticoreSearch Executables\nDESCRIPTION: Sets up symbol splitting for debug information if SPLIT_SYMBOLS is enabled. This helps in reducing the size of the executables while maintaining debug capabilities.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (SPLIT_SYMBOLS)\n\tinclude ( split )\n\tsplit_dbg ( indexer )\n\tsplit_dbg ( indextool )\n\tsplit_dbg ( searchd )\n\tsplit_dbg ( spelldump )\n\tsplit_dbg ( wordbreaker )\n\tsplit_dbg ( index_converter )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Executing Sharded Percolate Query in SQL\nDESCRIPTION: This SQL query demonstrates how to perform a sharded percolate query on a distributed table. It sends documents to all agent tables and specifies the 'sharded' mode.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Percolate_query.md#2025-04-22_snippet_94\n\nLANGUAGE: sql\nCODE:\n```\nCALL PQ('products_distributed', ('{\"title\": \"nice pair of shoes\", \"color\": \"blue\"}', '{\"title\": \"beautiful bag\"}'), 'sharded' as mode, 1 as query);\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Policies for HTML Stripper\nDESCRIPTION: Establishes the minimum required CMake version and enforces specific CMake policies to ensure consistent behavior across different environments.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/stripper/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required ( VERSION 3.20 )\n\nFOREACH (policy CMP0054 CMP0057 CMP0042 CMP0074 CMP0110)\n\tIF (POLICY ${policy})\n\t\tCMAKE_POLICY ( SET ${policy} NEW )\n\tENDIF ()\nENDFOREACH ()\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Data in Manticore Docker\nDESCRIPTION: SQL command to load sample data into Manticore Search running in Docker.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Starting_the_server/Docker.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> source /sandbox.sql\n```\n\n----------------------------------------\n\nTITLE: Defining Text Mapping and Line Equivalence Rules - Plain Text\nDESCRIPTION: These snippets define mapping relationships between text lines, establish rules for line equivalence, error identification, and comment parsing as seen in text search or transformation pipelines. The rules showcase the identification of valid and invalid line structures, comment indicators (using the '#' character), mapping of terms to their equivalents, and examples of acceptable and unacceptable comment placements. There are no hard dependencies, but the patterns would typically be consumed by a line parser or processing utility.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_196/wordforms.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsame => line\n~same => line\nerror and #not >\n#thatsok\n# before > shouldnotbe\nbefore #> error1\nbefore ># error2\nbefore >#error3\nbefore and #not >\ntest => success#comment\n~after #> success another comment\n~hash > mapped\t# and this one is too\ndrink drive > multi_before\n~smoke > wordform\nwalked > ran\n~running > halt\n```\n\n----------------------------------------\n\nTITLE: Storing Build Environment Information in CMake\nDESCRIPTION: This snippet captures and stores information about the build environment, including compiler version, host system details, and target system information. It handles cross-compilation scenarios by properly labeling the OS information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Storing compiler version\nset ( COMPILER \"${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\" )\ndiag ( COMPILER )\n\n# Storing system name\nset ( HOST_SYSTEM \"${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_PROCESSOR}\" )\nset ( TARGET_SYSTEM \"${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR}\" )\nset ( HOST_DISTRO \"${HOST_SYSTEM}\" )\nset ( TARGET_DISTRO \"${TARGET_SYSTEM}\" )\nif (DISTR)\n\tset ( HOST_DISTRO \"${HOST_DISTRO} (${DISTR})\" )\n\tset ( TARGET_DISTRO \"${TARGET_DISTRO} (${DISTR})\" )\nendif ()\nif (CMAKE_CROSSCOMPILING)\n\tif (HOST_SYSTEM STREQUAL \"${TARGET_SYSTEM}\")\n\t\tSET ( OS_UNAME \"${HOST_DISTRO} (cross-compiled)\" )\n\telse ()\n\t\tSET ( OS_UNAME \"${HOST_SYSTEM} for ${TARGET_DISTRO}\" )\n\tendif ()\nelse ()\n\tSET ( OS_UNAME \"${HOST_DISTRO}\" )\nendif ()\ndiag ( OS_UNAME )\n```\n\n----------------------------------------\n\nTITLE: Updating Full-Text Settings in Manticore Search Plain Mode\nDESCRIPTION: SQL command for reconfiguring an RT table in plain mode. Forces saving of current RAM chunk as a new disk chunk and adjusts table header for new documents.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Updating_table_schema_and_settings.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE table RECONFIGURE\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Source without Schema in Manticore Search\nDESCRIPTION: This configuration snippet shows how to define an XML source in Manticore Search without specifying the schema in the configuration. It uses the xmlpipe2 type and specifies the command to fetch the XML data.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Adding_data_from_external_storages/Fetching_from_XML_streams.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsource xml_test_1\n{\n    type = xmlpipe2\n    xmlpipe_command = cat /tmp/products_today.xml\n}\n```\n\n----------------------------------------\n\nTITLE: Changing SphinxSE Connection Settings\nDESCRIPTION: SQL command to alter an existing SphinxSE table's connection settings, allowing redirection to a different Manticore server or index.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/SphinxSE.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nmysql> ALTER TABLE t1 CONNECTION=\"sphinx://NEWHOST:NEWPORT/NEWTABLENAME\";\n```\n\n----------------------------------------\n\nTITLE: Configuring TSV/CSV Pipe Source Library\nDESCRIPTION: Defines and configures the 'source_svpipe' library for TSV/CSV pipe data sources.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/indexing_sources/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library ( source_svpipe source_svpipe.cpp source_svpipe.h )\ntarget_link_libraries ( source_svpipe PUBLIC lextra )\ntarget_link_libraries ( indexer_sources INTERFACE source_svpipe )\n```\n\n----------------------------------------\n\nTITLE: XML Zone Tag Example\nDESCRIPTION: A basic XML snippet showing a custom zoneA tag wrapping text content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_148/doc1.txt#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<zoneA>dummy text</zoneA>\n```\n\n----------------------------------------\n\nTITLE: Parsing Source Files from mkinc.mak\nDESCRIPTION: Reads source and header file lists from mkinc.mak file and processes them into CMake variables.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/libstemmer_c/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nFILE ( STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/mkinc.mak\" _CONTENT )\nFOREACH (LINE ${_CONTENT})\n\tIF (\"${LINE}\" MATCHES \"^(snowball_sources|snowball_headers)=\")\n\t\tSTRING ( REPLACE \";\" \"\" LINE \"${LINE}\" )\n\t\tseparate_arguments ( SRCLIST UNIX_COMMAND \"${LINE}\" )\n\t\tforeach (SRC ${SRCLIST})\n\t\t\tIF (\"${SRC}\" MATCHES \"=\")\n\t\t\t\tSTRING ( REPLACE \"=\" \"\" _NAME \"${SRC}\" )\n\t\t\t\tset ( ${_NAME} )\n\t\t\telse ()\n\t\t\t\tLIST ( APPEND ${_NAME} ${SRC} )\n\t\t\tendif ()\n\t\tendforeach ()\n\tendif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Replacing Documents using Bulk API in C#\nDESCRIPTION: This snippet shows how to replace multiple documents using the bulk API in C#. It constructs a string containing multiple JSON objects, each representing a document replacement operation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Data_creation_and_modification/Updating_documents/REPLACE.md#2025-04-22_snippet_10\n\nLANGUAGE: clike\nCODE:\n```\nstring body = \"{\\\"replace\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 1, \\\"doc\\\" : {\\\"title\\\" : \\\"document one\\\"}}}\" +\"\\n\"+\n    \"{\\\"replace\\\": {\\\"index\\\" : \\\"products\\\", \\\"id\\\" : 2, \\\"doc\\\" : {\\\"title\\\" : \\\"document two\\\"}}}\"+ \"\\n\" ;\nindexApi.Bulk(body);\n```\n\nLANGUAGE: clike\nCODE:\n```\nclass BulkResponse {\n    items: [{replace={_index=products, _id=1, created=false, result=updated, status=200}}, {replace={_index=products, _id=2, created=false, result=updated, status=200}}]\n    error: null\n    additionalProperties: {errors=false}\n}\n```\n\n----------------------------------------\n\nTITLE: Manticore Search Query Results\nDESCRIPTION: Shows search results for query 'is' with document details including weights, IDs, group IDs, and tags. Displays 2 matches with their respective attributes and grouping information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/smoke_ref.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nQuery 'is' retrieved 2 of 2 matches.\nQuery stats:\n\t'is' found 4 times in 4 documents\n\nMatches:\n1. doc_id=1, weight=1304, idd=1, group_id=1, tag=(1,3,5,7), tag2=(1,3,5,7), tag64=(1,3,5,7), q=1010, @groupby=1, @count=1\n2. doc_id=2, weight=1304, idd=2, group_id=123, tag=(2,4,6), tag2=(2,4,6), tag64=(2,4,6), q=123020, @groupby=123, @count=3\n```\n\n----------------------------------------\n\nTITLE: Sample Highlighted Search Response (Promise) - ManticoreSearch Javascript\nDESCRIPTION: This code block is a sample of the resolved JavaScript response object for a highlighted search, showing all fields and highlight matches for the 'books' table. It contains the standard metadata plus highlighted values for both 'title' and 'content' in the returned document, formatted as a JSON string.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n{\"took\":0,\"timed_out\":false,\"hits\":{\"total\":1,\"hits\":[{\"_id\": 1,\"_score\":2788,\"_source\":{\"title\":\"Books one\",\"content\":\"They followed Bander. The robots remained at a polite distance, but their presence was a constantly felt threat. Bander ushered all three into the room. One of the robots followed as well. Bander gestured the other robots away and entered itself. The door closed behind it. \"},\"highlight\":{\"title\":[\"Books <b>one</b>\"],\"content\":[\"They followed Bander. The <b>robots</b> remained at a polite distance, \",\" three into the room. <b>One</b> of the <b>robots</b> followed as well. Bander\",\" gestured the other <b>robots</b> away and entered itself. The\"]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Repacking Sysroot Archives with XZ Compression in Bash\nDESCRIPTION: This command repacks the sysroot archives using XZ compression, which provides better compression ratios than ZSTD. It includes the toolchain.cmake file in the archive.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -cf - usr lib toolchain.cmake | xz -9> sysroot_bionic_aarch64.tar.xz\n```\n\n----------------------------------------\n\nTITLE: SQL Keywords Reference\nDESCRIPTION: List of common SQL keywords used for query operations and conditions.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/test/test_145/stopwords.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTO\nWITH\nANY\nAND\nALL\nTO\n```\n\n----------------------------------------\n\nTITLE: Binary Log Meta File Structure\nDESCRIPTION: Defines the structure of binlog.meta file which contains the magic number, version, and file information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/binary-logging.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ndword magic, = chars[] 'SPLI'\ndword version\nbyte digits\nzint files\n    zint filenames[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler and System Checks for Manticore Search\nDESCRIPTION: Performs various compiler and system checks, including thread support, specific headers, and functions. It also sets up compiler options and definitions for different platforms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Looking for threads library\nset ( THREADS_PREFER_PTHREAD_FLAG ON )\nfind_package ( Threads REQUIRED )\ntarget_link_libraries ( lextra INTERFACE Threads::Threads )\n\n# Checking for specific headers\ninclude ( CheckIncludeFile )\n\n# that part is safe on windows, however these libs are absent there, so no reason to spend time on them\nif (NOT WIN32)\n\t# Checking if mincore has unsigned 3-rd param\n\tinclude ( mincore_test )\n\tadd_lib_for ( getaddrinfo_a anl lextra )\n\tadd_lib_for ( setsockopt socket lextra )\n\tadd_lib_for ( getaddrinfo \"nsl;socket;resolv\" lextra )\n\tadd_lib_for ( clock_gettime rt lextra )\n\tadd_lib_for ( logf m lextra )\n\tset ( CMAKE_REQUIRED_LIBRARIES ${CMAKE_THREAD_LIBS_INIT} )\n\tcheck_function_exists ( poll HAVE_POLL )\n\tcheck_function_exists ( pthread_mutex_timedlock HAVE_PTHREAD_MUTEX_TIMEDLOCK )\n\tcheck_function_exists ( pthread_cond_timedwait HAVE_PTHREAD_COND_TIMEDWAIT )\n\tcheck_function_exists ( pread HAVE_PREAD )\n\tcheck_function_exists ( backtrace HAVE_BACKTRACE )\n\tcheck_function_exists ( backtrace_symbols HAVE_BACKTRACE_SYMBOLS )\n\tcheck_function_exists ( mremap HAVE_MREMAP )\n\tcheck_function_exists ( eventfd HAVE_EVENTFD )\n\tcheck_function_exists ( kqueue HAVE_KQUEUE )\n\tcheck_function_exists ( pthread_getname_np HAVE_PTHREAD_GETNAME_NP )\n\tcheck_function_exists ( getrlimit HAVE_GETRLIMIT )\n\tcheck_function_exists ( setrlimit HAVE_SETRLIMIT )\n\tcheck_function_exists ( epoll_ctl HAVE_EPOLL )\n\n\t# Checking for few other flags\n\tinclude ( CheckSymbolExists )\n\tcheck_symbol_exists ( F_SETLKW \"fcntl.h\" HAVE_F_SETLKW )\n\tcheck_symbol_exists ( SO_REUSEPORT \"sys/types.h;sys/socket.h\" HAVE_SO_REUSEPORT )\n\tcheck_symbol_exists ( malloc_trim \"malloc.h\" HAVE_MALLOC_TRIM )\n\tcheck_symbol_exists ( malloc_stats \"malloc.h\" HAVE_MALLOC_STATS )\n\n\t# Checking for PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP flag\n\tinclude ( check_rwlock_prefer_writer )\n\n\t# Check availabiliby of pthread_setname_np and whether it pick 1 or 2 params\n\tinclude ( check_vitable_pthread_setname_np )\n\n\tset ( STATIC_BINARY OFF CACHE BOOL \"Produce statically linked ELF\" )\n\tadd_feature_info ( Static STATIC_BINARY \"make pure static build undependent of any local libraries\" )\nendif ()\nif (STATIC_BINARY)\n\t# options for clang/gcc c and c++\n\ttarget_compile_options ( lextra INTERFACE $<${ONLYGNUCLANGC_CXX}:-static> )\n\tset ( HAVE_DLOPEN 0 CACHE BOOL \"\" FORCE )\n\tset ( HAVE_GETADDRINFO_A 0 CACHE BOOL \"\" FORCE )\n\tset ( WITH_ODBC 0 CACHE BOOL \"\" FORCE )\n\tset ( WITH_MYSQL 0 CACHE BOOL \"\" FORCE )\n\tset ( WITH_POSTGRESQL 0 CACHE BOOL \"\" FORCE )\n\tset ( WITH_GALERA 0 CACHE BOOL \"\" FORCE )\n\tset ( WITH_SSL 0 CACHE BOOL \"\" FORCE )\n\tset ( WITH_ZSTD 0 CACHE BOOL \"\" FORCE )\n\tset ( WITH_CURL 0 CACHE BOOL \"\" FORCE )\n\tSET ( BUILD_TESTING 0 CACHE BOOL \"\" FORCE )\nelseif (NOT WIN32)\n\tif (CMAKE_DL_LIBS) # CMAKE internal, usually '-ldl' on most UNIX machines\n\t\ttarget_link_libraries ( lextra INTERFACE ${CMAKE_DL_LIBS} )\n\tendif ()\n\tset ( CMAKE_REQUIRED_LIBRARIES \"${CMAKE_DL_LIBS}\" )\n\tcheck_symbol_exists ( dlopen \"dlfcn.h\" HAVE_DLOPEN )\nelse ()\n\tset ( HAVE_DLOPEN 1 CACHE BOOL \"Use emulated dlopen\" FORCE )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Keywords Dictionary Format Structure in Manticore v.31\nDESCRIPTION: Details the binary structure of the dictionary file (.spi) when using the 'keywords' format in Manticore v.31. Shows how keywords and their metadata are organized with support for infix lookups, checkpoints, and skiplists.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nbyte dummy = 0x01\nkeyword[] keyword_blocks\nkeyword is:\n\tbyte keyword_editcode\n\tbyte[] keyword_delta\n\tif keyword_editcode == 0:\n\t\tassert keyword_delta = { 0 }\n\t\treturn block_end\n\tzint doclist_offset\n\tzint num_docs\n\tzint num_hits\n\tif num_docs >= DOCLIST_HINT_THRESH:\n\t\tbyte doclist_sizehint\n\tif ver >= 31 and num_docs > SKIPLIST_BLOCK:\n\t\tzint skiplist_pos\n\t\tzint skiplist_len\n\nif min_infix_len > 0:\n\ttag \"infix-entries\"\n\tinfix_entry[] infix_hash_entries\n\ncheckpoint[] checkpoints\ncheckpoint is:\n\tdword keyword_len\n\tbyte[] keyword [ keyword_len ]\n\tqword dict_offset\n\nif min_infix_len > 0:\n\ttag \"infix-blocks\"\n\tinfix_block[] infix_hash_blocks\n\ntag \"dict-header\"\nzint num_checkpoints\nzint checkpoints_offset\nzint infix_codepoint_bytes\nzint infix_blocks_offset\n```\n\n----------------------------------------\n\nTITLE: Configuring Valgrind Options for Manticore Search\nDESCRIPTION: Example configuration for Valgrind options in the ~/.sphinx file. This setup enables comprehensive memory checking for the Manticore Search daemon.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/misc/ctest/memcheck.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n'valgrindoptions'=>'--tool=memcheck --leak-check=full --track-origins=yes --time-stamp=yes --show-leak-kinds=all -s',\n'valgrindsearchd'=>true\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Directory Name in Shell\nDESCRIPTION: Command that gets the current directory name using pwd and extracts the base name using basename command. Stores the result in a distr variable.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/bionic/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Installing ManticoreSearch Components with CMake\nDESCRIPTION: Defines installation rules for ManticoreSearch executables, tools, and development files. Configures component-based installation for different parts of the project.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/src/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL ( TARGETS searchd RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT searchd )\nif (NOT STATIC_BINARY)\n\tINSTALL ( TARGETS indexer indextool spelldump wordbreaker RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT tools )\n\tINSTALL ( TARGETS index_converter RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT converter )\n\tINSTALL ( FILES sphinxudf.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/manticore COMPONENT devel )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Testing Text Excerpts with Highlighting\nDESCRIPTION: Shows excerpted text results with HTML highlighting of matched terms using <b> tags. Includes both standard excerpts and special zone/sentence boundary tests.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/smoke_ref.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nn=1, res=this is my <b>test text</b> to be highlighted,  ... \nn=2, res=another <b>test text</b> to be highlighted, below limit\nn=3, res=test number three, without phrase match\nn=4, res=final <b>test</b>, not only  ... with swapped phrase <b>text test</b> as well\n```\n\n----------------------------------------\n\nTITLE: Executing TRUNCATE with RECONFIGURE in Manticore SQL\nDESCRIPTION: The TRUNCATE command now supports a WITH RECONFIGURE option, allowing for index reconfiguration during truncation.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nTRUNCATE WITH RECONFIGURE\n```\n\n----------------------------------------\n\nTITLE: Example Usage of FLUSH HOSTNAMES Command in Manticore Search\nDESCRIPTION: This example demonstrates the execution of the FLUSH HOSTNAMES command in a MySQL-like interface to Manticore Search. The command affects 5 rows and takes 0.01 seconds to complete.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_hostnames.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmysql> FLUSH HOSTNAMES;\nQuery OK, 5 rows affected (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Displaying libsphinxclient Copyright and License Notice\nDESCRIPTION: Presents the copyright and license notice for libsphinxclient, including multiple copyright holders and LGPL license information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2001-2016, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc\nCopyright (c) 2017-2025, Manticore Software LTD (https://manticoresearch.com)\nAll rights reserved\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU Library General Public License. You should\nhave received a copy of the LGPL license along with this program; if you\ndid not, you can find it at http://www.gnu.org/\n```\n\n----------------------------------------\n\nTITLE: Displaying Copyright Notice for libzstd\nDESCRIPTION: Shows the copyright notice for libzstd, which is used during compilation and may be dynamically loaded at runtime by Manticore Search. It includes the BSD License terms.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nCopyright (c) Meta Platforms, Inc. and affiliates. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook, nor Meta, nor the names of its contributors may\n   be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: VLB Compression Examples in Manticore Index\nDESCRIPTION: Illustrates how Variable Length Byte (VLB) compression encodes fixed-length integers to variable-length byte strings. Each byte uses 7 bits for the value and the 8th bit indicates if more bytes follow, reducing storage requirements for small values.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/doc/internals-index-format.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsource-value = 0x37\nencoded-value = 0x37\n\nsource-value = 0x12345\nencoded-value = 0x84 0xC6 0x45\n\t// 0x84 == ( ( 0x12345>>14 ) & 0x7F ) | 0x80\n\t// 0xC6 == ( ( 0x12345>>7 ) & 0x7F ) | 0x80\n\t// 0x45 == ( ( 0x12345>>0 ) & 0x7F )\n```\n\n----------------------------------------\n\nTITLE: Example of Permanently Removing a Buddy Plugin in Manticore Search\nDESCRIPTION: Shows how to permanently remove a specific buddy plugin using its packagist.org package name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Extensions/UDFs_and_Plugins/Plugins/Deleting_a_plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE BUDDY PLUGIN manticoresoftware/buddy-plugin-show-hostname\n```\n\n----------------------------------------\n\nTITLE: JSON Log Entry for Quorum OR Operator Evaluation\nDESCRIPTION: A server log entry showing the evaluation of a quorum OR operator against posting lists. The log shows the server working with OR QUORUM(2/3) operator, traversing posting lists and finding matching document IDs.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/stack.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[ 0.001 sec] JSON: request={\"query\":{\"match\":{\"*\":{\"query\":\"on on on\",\"operator\":\"or\",\"operator_sp\":\"2\"}}}}\n[ 0.001 sec] got token=on\n[ 0.001 sec] got token=on\n[ 0.001 sec] got token=on\n[ 0.001 sec] parsed 'on | on | on', k=1.000, threshold=2\n[ 0.001 sec] transforming ExtNode to ExtConditional\n[ 0.001 sec] converting to QUORUM operator\n[ 0.001 sec] QUORUM(2/3) operator\n[ 0.001 sec] postinglists\n[ 0.001 sec] term=on, docs=5, hits=10\n[ 0.001 sec] going to evaluate OR\n[ 0.001 sec] going to evaluate OR QUORUM(2/3)\n[ 0.001 sec] first candidate is 1\n[ 0.001 sec] traverse_postinglist: term=on, childpos=0, docs=5\n[ 0.001 sec] quorum: matched=1\n[ 0.001 sec] traverse_postinglist: matched=1\n[ 0.001 sec] traverse_postinglist: term=on, childpos=1, docs=5\n[ 0.001 sec] quorum: matched=2\n[ 0.001 sec] traverse_postinglist: matched=2\n[ 0.001 sec] returning docid=1, weight=2000\n[ 0.001 sec] quorum: childpos=0 done\n[ 0.001 sec] quorum: childpos=1 done\n[ 0.001 sec] quorum: childpos=2 done\n[ 0.001 sec] next candidate is 2\n[ 0.001 sec] traverse_postinglist: term=on, childpos=0, docs=5\n[ 0.001 sec] quorum: matched=1\n[ 0.001 sec] traverse_postinglist: matched=1\n[ 0.001 sec] traverse_postinglist: term=on, childpos=1, docs=5\n[ 0.001 sec] quorum: matched=2\n[ 0.001 sec] traverse_postinglist: matched=2\n[ 0.001 sec] returning docid=2, weight=2000\n[ 0.001 sec] quorum: childpos=0 done\n[ 0.001 sec] quorum: childpos=1 done\n[ 0.001 sec] quorum: childpos=2 done\n[ 0.001 sec] next candidate is 3\n[ 0.001 sec] traverse_postinglist: term=on, childpos=0, docs=5\n[ 0.001 sec] quorum: matched=1\n[ 0.001 sec] traverse_postinglist: matched=1\n[ 0.001 sec] traverse_postinglist: term=on, childpos=1, docs=5\n[ 0.001 sec] quorum: matched=2\n[ 0.001 sec] traverse_postinglist: matched=2\n[ 0.001 sec] returning docid=3, weight=2000\n[ 0.001 sec] quorum: childpos=0 done\n[ 0.001 sec] quorum: childpos=1 done\n[ 0.001 sec] quorum: childpos=2 done\n[ 0.001 sec] next candidate is 4\n[ 0.001 sec] traverse_postinglist: term=on, childpos=0, docs=5\n[ 0.001 sec] quorum: matched=1\n[ 0.001 sec] traverse_postinglist: matched=1\n[ 0.001 sec] traverse_postinglist: term=on, childpos=1, docs=5\n[ 0.001 sec] quorum: matched=2\n[ 0.001 sec] traverse_postinglist: matched=2\n[ 0.001 sec] returning docid=4, weight=2000\n[ 0.001 sec] quorum: childpos=0 done\n[ 0.001 sec] quorum: childpos=1 done\n[ 0.001 sec] quorum: childpos=2 done\n[ 0.001 sec] next candidate is 5\n[ 0.001 sec] traverse_postinglist: term=on, childpos=0, docs=5\n[ 0.001 sec] quorum: matched=1\n[ 0.001 sec] traverse_postinglist: matched=1\n[ 0.001 sec] traverse_postinglist: term=on, childpos=1, docs=5\n[ 0.001 sec] quorum: matched=2\n[ 0.001 sec] traverse_postinglist: matched=2\n[ 0.001 sec] returning docid=5, weight=2000\n[ 0.001 sec] quorum: childpos=0 done\n[ 0.001 sec] quorum: childpos=1 done\n[ 0.001 sec] quorum: childpos=2 done\n[ 0.001 sec] quorum: at over\n[ 0.001 sec] weight=2000, sort=1\n[ 0.001 sec] weight=2000, sort=1\n[ 0.001 sec] weight=2000, sort=1\n[ 0.001 sec] weight=2000, sort=1\n[ 0.001 sec] weight=2000, sort=1\n[ 0.001 sec] JSON: matched=5, total=5, took=0\n```\n\n----------------------------------------\n\nTITLE: SQL Function Reference - PACKEDFACTORS()\nDESCRIPTION: Reference to the PACKEDFACTORS() function that was updated to align with export ranker output.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Changelog.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nPACKEDFACTORS()\n```\n\n----------------------------------------\n\nTITLE: Displaying Copyright Notice for JSON for Modern C++\nDESCRIPTION: Shows the copyright notice for the JSON for Modern C++ library, which is used in the Manticore Search project. The library is used during compilation and becomes part of Manticore Search binaries.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nCopyright © 2013-2022 Niels Lohmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Docker Build Aliases Setup\nDESCRIPTION: Bash aliases configuration for convenient access to different build environments using Docker containers.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nalias buildcentos7='docker run -it --rm -v /manticore/sources:/manticore registry.gitlab.com/manticoresearch/dev/centos7_cmake:320 bash'\nalias buildxenial='docker run -it --rm -v /manticore/sources:/manticore registry.gitlab.com/manticoresearch/dev/xenial_cmake:320 bash'\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Index Variable in Manticore Search\nDESCRIPTION: This snippet illustrates how to set a per-index variable 'myvar' to the value 'myvalue' for the index 'myindex' using the SET INDEX syntax.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Server_settings/Setting_variables_online.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET INDEX myindex myvar='myvalue'\n```\n\n----------------------------------------\n\nTITLE: Assign Directory Name to Distribution Variable in Shell\nDESCRIPTION: Shell command that uses basename to extract the current directory name and assigns it to a 'distr' variable. Uses pwd to get current directory path and basename to extract just the directory name.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/bullseye/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Displaying Complete Sysroot Directory Structure\nDESCRIPTION: Shows the complete directory structure of the sysroot, including both the SDK and additional libraries in the winbundle folder. This structure is essential for understanding the layout of the final sysroot package.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/cross/sysroots/sysroot_windows_x64.tar.xz.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tree -L 3\n.\n├── diskc\n│   └── winbundle\n│       ├── Expat-1.95.8-x64\n│       │   ├── Libs\n│       │   └── Source\n│       ├── EXPATConfig.cmake\n│       ├── IconvConfig.cmake\n│       ├── libiconv-1.9.1-x64\n│       │   ├── include\n│       │   └── lib\n│       ├── MysqlConfig.cmake\n│       ├── mysql-x64\n│       │   ├── include\n│       │   └── lib\n│       ├── pgsql-x64\n│       │   ├── bin\n│       │   ├── include\n│       │   └── lib\n│       ├── zstd-v1.5.2-win64\n│       │   ├── README.md\n│       │   ├── dll\n│       │   └── include\n│       ├── ZSTDConfig.cmake\n│       └── PostgreSQLConfig.cmake\n└── sdk\n    ├── VC\n    │   └── Tools\n    ├── Windows Kits\n    │   └── 10\n    └── WinSDK -> Windows Kits\n```\n\n----------------------------------------\n\nTITLE: Extracting Directory Name in Bash\nDESCRIPTION: Uses the basename command to extract the final directory name from the current working directory path and assigns it to the distr variable. The pwd command gets the current directory path.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/focal/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: xxHash Copyright Notice\nDESCRIPTION: Copyright notice and BSD 2-Clause license information for the xxHash library used for hash computation in Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/component-licenses/README.md#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n * Copyright (C) 2012-2023 Yann Collet\n *\n * BSD 2-Clause License (https://www.opensource.org/licenses/bsd-license.php)\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *    * Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.\n *    * Redistributions in binary form must reproduce the above\n *      copyright notice, this list of conditions and the following disclaimer\n *      in the documentation and/or other materials provided with the\n *      distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * You can contact the author at:\n *   - xxHash homepage: https://www.xxhash.com\n *   - xxHash source repository: https://github.com/Cyan4973/xxHash\n```\n\n----------------------------------------\n\nTITLE: Extracting Distribution Name from Current Directory in Shell\nDESCRIPTION: This command uses the 'basename' utility to extract the last component of the current working directory path. The result is stored in the 'distr' variable, likely representing the distribution name for Manticore Search.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/dist/build_dockers/retired/aarch64/stretch/distr.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndistr=$(basename $(pwd))\n```\n\n----------------------------------------\n\nTITLE: Document Update Operations\nDESCRIPTION: Results of document update operations including both regular updates and MVA (Multi-Value Attribute) updates.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/api/libsphinxclient/smoke_ref.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nupdate success, 1 rows updated\nupdate mva success, 1 rows updated\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test by Regular Expression\nDESCRIPTION: Command to run a specific test using CTest with regular expression pattern matching.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/TESTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd build\n$ ctest -C Debug -R test_101\n```\n\n----------------------------------------\n\nTITLE: Aggregation Response Structure in Rust for Manticore Search\nDESCRIPTION: This code snippet shows the structure of a search response in Rust after performing an aggregation query. It includes aggregation results for 'release_year' and hit information.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Grouping.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nclass SearchResponse {\n    took: 0\n    timedOut: false\n    aggregations: {release_year={buckets=[{key=2009, doc_count=99}, {key=2008, doc_count=102}, {key=2007, doc_count=93}, {key=2006, doc_count=103}, {key=2005, doc_count=93}, {key=2004, doc_count=108}, {key=2003, doc_count=106}, {key=2002, doc_count=108}, {key=2001, doc_count=91}, {key=2000, doc_count=97}]}}\n    hits: class SearchResponseHits {\n        maxScore: null\n        total: 1000\n        hits: []\n    }\n    profile: null\n}\n```\n\n----------------------------------------\n\nTITLE: Promote to 64-bit Signed Integer in SQL\nDESCRIPTION: The INTEGER() function promotes its argument to a 64-bit signed type, ensuring proper evaluation for numeric JSON fields.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Functions/Type_casting_functions.md#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nINTEGER()\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlighting in Rust for Manticore Search\nDESCRIPTION: This snippet demonstrates how to set up a search query with highlighting in Rust for Manticore Search. It includes configuring match filters, highlight fields, and other options like fragment_size.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Searching/Highlighting.md#2025-04-22_snippet_78\n\nLANGUAGE: rust\nCODE:\n```\nlet match_filter = HashMap::new();\nmatch_filter.insert(\"*\".to_string(), \"one|robots\".to_string());\nlet query = SearchQuery {\n    match: Some(serde_json::json!(match_filter).into()),\n    ..Default::default()\n};\nlet highlight_fields [String; 2] = [\"content\".to_string(), \"title\".to_string()]; \nlet highlight = Highlight {\n    fields: Some(serde_json::json!(highlight_fields)),\n    fragment_size: Some(serde_json::json!(100)),\n    ..Default::default()\n};\n\nlet search_req = SearchRequest {\n    table: \"books\".to_string(),\n    query: Some(Box::new(query)),\n    highlight: serde_json::json!(highlight),\n    ..Default::default()\n};\nlet search_res = search_api.search(search_req).await;\n```\n\n----------------------------------------\n\nTITLE: Executing FLUSH RAMCHUNK Command in Manticore Search (SQL)\nDESCRIPTION: This example demonstrates how to execute the FLUSH RAMCHUNK command on a real-time table named 'rt'. The command creates a new disk chunk from the current RAM chunk content.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Securing_and_compacting_a_table/Flushing_RAM_chunk_to_a_new_disk_chunk.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nFLUSH RAMCHUNK rt;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Cluster using Java in Manticore Search\nDESCRIPTION: This Java code snippet deletes the replication cluster named 'click_query' using the Manticore Search Java client. It uses the utilsApi.sql() method to execute the SQL command that removes the cluster from all nodes.\nSOURCE: https://github.com/manticoresoftware/manticoresearch/blob/master/manual/Creating_a_cluster/Setting_up_replication/Deleting_a_replication_cluster.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nutilsApi.sql(\"DELETE CLUSTER click_query\");\n```"
  }
]