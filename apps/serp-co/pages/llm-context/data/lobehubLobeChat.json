[
  {
    "owner": "lobehub",
    "repo": "lobe-chat",
    "content": "TITLE: Starting Docker Compose Services\nDESCRIPTION: Command to start all Docker containers in detached mode.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring ZHIPU AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for ZHIPU AI service integration, which must be obtained from ZHIPU AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n### `ZHIPU_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the ZHIPU AI service\n- Default: -\n- Example: `4582d332441a313f5c2ed9824d1798ca.rC8EcTAhgbOuAuVT`\n```\n\n----------------------------------------\n\nTITLE: OpenRouter Adapter Implementation in TypeScript\nDESCRIPTION: Adapter implementation for OpenRouter API, providing OpenAI-compatible interface with custom headers and base URL configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass LobeOpenRouterAI implements LobeRuntimeAI {\n  client: OpenAI;\n  baseURL: string;\n\n  constructor(options: OpenAICompatibleOptions) {\n    // Initialize OpenRouter client using OpenAI-compatible API\n    this.client = new OpenAI({\n      apiKey: options.apiKey,\n      baseURL: OPENROUTER_BASE_URL,\n      defaultHeaders: {\n        'HTTP-Referer': 'https://github.com/lobehub/lobe-chat',\n        'X-Title': 'LobeChat',\n      },\n    });\n    this.baseURL = OPENROUTER_BASE_URL;\n  }\n\n  // Implement chat functionality\n  async chat(payload: ChatCompletionCreateParamsBase, options?: RequestOptions) {\n    // Convert Lobe Chat request format to OpenRouter format\n    // Handle model mapping, message format, etc.\n    return this.client.chat.completions.create(\n      {\n        ...payload,\n        model: payload.model || 'openai/gpt-4-turbo', // Default model\n      },\n      options,\n    );\n  }\n\n  // Implement other LobeRuntimeAI interface methods\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Server-side Database Environment Variables\nDESCRIPTION: Full set of environment variables needed for server-side database configuration including S3, Clerk, and general settings.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nAPP_URL=https://your-project.com\n\n# Specify the service mode as server\nNEXT_PUBLIC_SERVICE_MODE=server\n\n# Postgres database URL\nDATABASE_URL=\nKEY_VAULTS_SECRET=jgwsK28dspyVQoIf8/M3IIHl1h6LYYceSYNXeLpy6uk=\n\n# Clerk related configurations\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_xxxxxxxxxxx\nCLERK_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxx\nCLERK_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxx\n\n# S3 related configurations\n# S3 keys\nS3_ACCESS_KEY_ID=9998d6757e276cf9f1edbd325b7083a6\nS3_SECRET_ACCESS_KEY=55af75d8eb6b99f189f6a35f855336ea62cd9c4751a5cf4337c53c1d3f497ac2\n\n# Bucket name\nS3_BUCKET=lobechat\n# Bucket request endpoint\nS3_ENDPOINT=https://0b33a03b5c993fd2f453379dc36558e5.r2.cloudflarestorage.com\n# Public access domain for the bucket\nS3_PUBLIC_DOMAIN=https://s3-for-lobechat.your-domain.com\n# Bucket region, such as us-west-1, generally not needed to add, but some service providers may require configuration\n# S3_REGION=us-west-1\n```\n\n----------------------------------------\n\nTITLE: Redeploying LobeChat Docker Container with Configuration\nDESCRIPTION: Command to redeploy the LobeChat container using the newly pulled image with environment variables for API keys, proxy URLs, and access codes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.mdx#2025-04-11_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\ndocker run -d -p 3210:3210 \\\n  -e OPENAI_API_KEY=sk-xxxx \\\n  -e OPENAI_PROXY_URL=https://api-proxy.com/v1 \\\n  -e ACCESS_CODE=lobe66 \\\n  --name lobe-chat \\\n  lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: OpenRouter Adapter Implementation in TypeScript\nDESCRIPTION: This adapter class implements the LobeRuntimeAI interface for OpenRouter, which is a unified API for accessing multiple model providers. It initializes an OpenAI-compatible client and adapts Lobe Chat's request format to OpenRouter's requirements.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// OpenRouter 适配器实现\nclass LobeOpenRouterAI implements LobeRuntimeAI {\n  client: OpenAI;\n  baseURL: string;\n\n  constructor(options: OpenAICompatibleOptions) {\n    // 初始化 OpenRouter 客户端，使用 OpenAI 兼容的 API\n    this.client = new OpenAI({\n      apiKey: options.apiKey,\n      baseURL: OPENROUTER_BASE_URL,\n      defaultHeaders: {\n        'HTTP-Referer': 'https://github.com/lobehub/lobe-chat',\n        'X-Title': 'LobeChat',\n      },\n    });\n    this.baseURL = OPENROUTER_BASE_URL;\n  }\n\n  // 实现聊天功能\n  async chat(payload: ChatCompletionCreateParamsBase, options?: RequestOptions) {\n    // 将 Lobe Chat 的请求格式转换为 OpenRouter 格式\n    // 处理模型映射、消息格式等\n    return this.client.chat.completions.create(\n      {\n        ...payload,\n        model: payload.model || 'openai/gpt-4-turbo', // 默认模型\n      },\n      options,\n    );\n  }\n\n  // 实现其他 LobeRuntimeAI 接口方法\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Proxy URL in LobeChat\nDESCRIPTION: Sets the connection URL for the Ollama service, which is required to enable open-source language models in the model list.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### `OLLAMA_PROXY_URL`\n\n- Type: Required\n- Description: Used to enable the Ollama service, setting this will display optional open-source language models in the language model list and can also specify custom language models\n- Default: -\n- Example: `http://127.0.0.1:11434`\n```\n\n----------------------------------------\n\nTITLE: LobeChat Production Environment Configuration File\nDESCRIPTION: Complete .env file example for a domain-based production deployment of LobeChat with Casdoor authentication, including database credentials, authentication settings, and MinIO S3 configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n# Proxy, if you need it\n# HTTP_PROXY=http://localhost:7890\n# HTTPS_PROXY=http://localhost:7890\n\n\n# Other environment variables, as needed. You can refer to the environment variables configuration for the client version, making sure not to have ACCESS_CODE.\n# OPENAI_API_KEY=sk-xxxx\n# OPENAI_PROXY_URL=https://api.openai.com/v1\n# OPENAI_MODEL_LIST=...\n\n\n# ===========================\n# ====== Preset config ======\n# ===========================\n# if no special requirements, no need to change\nLOBE_PORT=3210\nCASDOOR_PORT=8000\nMINIO_PORT=9000\n\n# Postgres related, which are the necessary environment variables for DB\nLOBE_DB_NAME=lobechat\nPOSTGRES_PASSWORD=uWNZugjBqixf8dxC\n\n# Casdoor secret\nAUTH_CASDOOR_ID=943e627d79d5dd8a22a1\nAUTH_CASDOOR_SECRET=6ec24ac304e92e160ef0d0656ecd86de8cb563f1\n\n# MinIO S3 configuration\nMINIO_ROOT_USER=Joe\nMINIO_ROOT_PASSWORD=Crj1570768\n\n```\n\n----------------------------------------\n\nTITLE: Deploying LobeChat with Docker\nDESCRIPTION: Docker command to deploy LobeChat service. It sets up the container with necessary environment variables like OPENAI_API_KEY and ACCESS_CODE.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker.mdx#2025-04-11_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n$ docker run -d -p 3210:3210 \\\n  -e OPENAI_API_KEY=sk-xxxx \\\n  -e ACCESS_CODE=lobe66 \\\n  --name lobe-chat \\\n  lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Complete S3 Configuration Environment Variables in Shell\nDESCRIPTION: A comprehensive set of environment variables required for configuring an S3-compatible storage service, including optional region setting that may be needed by some service providers.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/s3/cloudflare-r2.mdx#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# S3 Keys\nS3_ACCESS_KEY_ID=9998d6757e276cf9f1edbd325b7083a6\nS3_SECRET_ACCESS_KEY=55af75d8eb6b99f189f6a35f855336ea62cd9c4751a5cf4337c53c1d3f497ac2\n\n# Bucket Name\nS3_BUCKET=lobechat\n# Bucket Request Endpoint\nS3_ENDPOINT=https://0b33a03b5c993fd2f453379dc36558e5.r2.cloudflarestorage.com\n# Public Access Domain for the Bucket\nS3_PUBLIC_DOMAIN=https://s3-dev.your-domain.com\n\n# Bucket Region, such as us-west-1. Generally not required, but some service providers may need it.\n# S3_REGION=us-west-1\n```\n\n----------------------------------------\n\nTITLE: Implementing Zustand Store with Multiple Slices in TypeScript\nDESCRIPTION: Creates a Zustand store that combines multiple slices (agent and session) with the initial state. It implements persistence, subscription with selector, and dev tools for better debugging experience.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PersistOptions, devtools, persist, subscribeWithSelector } from 'zustand/middleware';\nimport { shallow } from 'zustand/shallow';\nimport { devtools } from 'zustand/middleware';\nimport { createWithEqualityFn } from 'zustand/traditional';\n\nimport { SessionStoreState, initialState } from './initialState';\nimport { AgentAction, createAgentSlice } from './slices/agent/action';\nimport { SessionAction, createSessionSlice } from './slices/session/action';\n\n//  ===============  Aggregate createStoreFn ============ //\n\nexport type SessionStore = SessionAction & AgentAction & SessionStoreState;\nconst createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\n  ...initialState,\n  ...createAgentSlice(...parameters),\n  ...createSessionSlice(...parameters),\n});\n\n\n\n//  ===============  Implement useStore ============ //\n\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\n  persist(\n    subscribeWithSelector(\n      devtools(createStore, {\n        name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\n      }),\n    ),\n    persistOptions,\n  ),\n  shallow,\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Feature Flags for LobeChat Functionality\nDESCRIPTION: Controls which features are enabled or disabled in LobeChat. Uses + to enable and - to disable features, with multiple flags separated by commas.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nFEATURE_FLAGS=\"-welcome_suggest\"\n```\n\n----------------------------------------\n\nTITLE: Configuring System Agents with Provider and Model Selection\nDESCRIPTION: Sets provider and model preferences for LobeChat system agents that handle functions like topic generation, translation, and thread management.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nSYSTEM_AGENT=default=ollama/deepseek-v3\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionStore using Zustand in TypeScript\nDESCRIPTION: Implementation of a SessionStore using Zustand with middleware for persistence, subscription, and devtools integration. This example shows how to combine multiple slices into a single store.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PersistOptions, devtools, persist, subscribeWithSelector } from 'zustand/middleware';\nimport { shallow } from 'zustand/shallow';\nimport { devtools } from 'zustand/middleware';\nimport { createWithEqualityFn } from 'zustand/traditional';\n\nimport { SessionStoreState, initialState } from './initialState';\nimport { AgentAction, createAgentSlice } from './slices/agent/action';\nimport { SessionAction, createSessionSlice } from './slices/session/action';\n\n//  ===============  聚合 createStoreFn ============ //\n\nexport type SessionStore = SessionAction & AgentAction & SessionStoreState;\nconst createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\n  ...initialState,\n  ...createAgentSlice(...parameters),\n  ...createSessionSlice(...parameters),\n});\n\n\n\n//  ===============  实装 useStore ============ //\n\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\n  persist(\n    subscribeWithSelector(\n      devtools(createStore, {\n        name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\n      }),\n    ),\n    persistOptions,\n  ),\n  shallow,\n);\n```\n\n----------------------------------------\n\nTITLE: LobeChat Environment Variables Configuration\nDESCRIPTION: Complete set of environment variables required for deploying LobeChat on Dokploy. Includes build configuration, database settings, authentication, S3 storage, and OpenAI API configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.mdx#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Environment variables required for building\nNIXPACKS_PKGS=\"pnpm bun\"\nNIXPACKS_INSTALL_CMD=\"pnpm install\"\nNIXPACKS_BUILD_CMD=\"pnpm run build\"\nNIXPACKS_START_CMD=\"pnpm start\"\n\nAPP_URL=\n\n# Set the service mode to server\nNEXT_PUBLIC_SERVICE_MODE=server\n\n# Configuration related to Postgres database\nDATABASE_DRIVER=node\nDATABASE_URL=\n\n# You can use openssl rand -base64 32 to generate a random 32-character string as a key.\nKEY_VAULTS_SECRET=\n\n# Clerk related configuration\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=\nCLERK_SECRET_KEY=\nCLERK_WEBHOOK_SECRET=\n\n# S3 related configuration\nS3_ACCESS_KEY_ID=\nS3_SECRET_ACCESS_KEY=\nS3_ENDPOINT=\nS3_BUCKET=\nS3_PUBLIC_DOMAIN=\nS3_ENABLE_PATH_STYLE=\n\n# OpenAI related configuration\nOPENAI_API_KEY=\nOPENAI_MODEL_LIST=\nOPENAI_PROXY_URL=\n```\n\n----------------------------------------\n\nTITLE: Setting Next Auth Environment Variables for LobeChat\nDESCRIPTION: Defines the required and optional environment variables for configuring Next Auth in LobeChat. Includes variables for enabling Next Auth, setting encryption keys, specifying callback URLs, and enabling multiple SSO providers.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable           | Type     | Description                                                                                                                                                                                                                                |\n| ------------------------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `NEXT_PUBLIC_ENABLE_NEXT_AUTH` | Required | This is used to enable the NextAuth service. Set it to `1` to enable it; changing this setting requires recompiling the application. Users deploying with the `lobehub/lobe-chat-database` image have this configuration added by default. |\n| `NEXT_AUTH_SECRET`             | Required | The key used to encrypt Auth.js session tokens. You can use the following command: `openssl rand -base64 32`, or visit `https://generate-secret.vercel.app/32` to generate the key.                                                        |\n| `NEXTAUTH_URL`                 | Required | This URL specifies the callback address for Auth.js when performing OAuth verification. Set this only if the default generated redirect address is incorrect. `https://example.com/api/auth`                                               |\n| `NEXT_AUTH_SSO_PROVIDERS`      | Optional | This environment variable is used to enable multiple identity verification sources simultaneously, separated by commas, for example, `auth0,microsoft-entra-id,authentik`.                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Environment Variables for LobeChat\nDESCRIPTION: This code snippet shows the structure and examples of environment variables needed to configure S3 storage for LobeChat. It includes required variables like access keys, endpoint, and bucket name, as well as optional settings for region, ACL, and access mode.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/s3.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nS3_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nS3_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nS3_ENDPOINT=https://cos.ap-chengdu.myqcloud.com\nS3_BUCKET=my-bucket\nS3_REGION=ap-chengdu\nS3_SET_ACL=0\nS3_PUBLIC_DOMAIN=https://files.example.com\nS3_ENABLE_PATH_STYLE=1\nLLM_VISION_IMAGE_USE_BASE64=1\n```\n\n----------------------------------------\n\nTITLE: Deploying LobeChat with Ollama AI Support using Docker\nDESCRIPTION: This Docker command runs LobeChat with Ollama AI support, enabling local LLM conversations. It maps port 3210 and sets the OLLAMA_PROXY_URL environment variable to connect to the Ollama service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/local-llm.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3210:3210 -e OLLAMA_PROXY_URL=http://host.docker.internal:11434/v1 lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Configuring Novita AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Novita AI service integration, which must be obtained from Novita AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n### `NOVITA_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the Novita AI service\n- Default: -\n- Example：`xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Core AI Message Processing with RAG Support\nDESCRIPTION: Implements the core logic for AI message processing, including RAG (Retrieval-Augmented Generation) capabilities. It retrieves relevant chunks for context enhancement, generates AI responses, and handles function calls if needed.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n  // the internal process method of the AI message\n  internal_coreProcessMessage: async (originalMessages, userMessageId, params) => {\n    const { internal_fetchAIChatMessage, triggerToolCalls, refreshMessages, activeTopicId } = get();\n\n    // create a new array to avoid the original messages array change\n    const messages = [...originalMessages];\n\n    const { model, provider } = getAgentConfig();\n\n    let fileChunkIds: string[] | undefined;\n\n    // go into RAG flow if there is ragQuery flag\n    if (params?.ragQuery) {\n      // 1. get the relative chunks from semantic search\n      const chunks = await get().internal_retrieveChunks(\n        userMessageId,\n        params?.ragQuery,\n        // should skip the last content\n        messages.map((m) => m.content).slice(0, messages.length - 1),\n      );\n      console.log('召回 chunks', chunks);\n\n      // 2. build the retrieve context messages\n      const retrieveContext = chainAnswerWithContext(\n        params?.ragQuery,\n        chunks.map((c) => c.text as string),\n      );\n\n      // 3. add the retrieve context messages to the messages history\n      if (retrieveContext.messages && retrieveContext.messages?.length > 0) {\n        // remove the last message due to the query is in the retrieveContext\n        messages.pop();\n        retrieveContext.messages?.forEach((m) => messages.push(m as ChatMessage));\n      }\n\n      fileChunkIds = chunks.map((c) => c.id);\n    }\n\n    // 2. Add an empty message to place the AI response\n    const assistantMessage: CreateMessageParams = {\n      role: 'assistant',\n      content: LOADING_FLAT,\n      fromModel: model,\n      fromProvider: provider,\n\n      parentId: userMessageId,\n      sessionId: get().activeId,\n      topicId: activeTopicId, // if there is activeTopicId，then add it to topicId\n      fileChunkIds,\n      ragQueryId: userMessageId,\n    };\n\n    const assistantId = await get().internal_createMessage(assistantMessage);\n\n    // 3. fetch the AI response\n    const { isFunctionCall } = await internal_fetchAIChatMessage(messages, assistantId, params);\n\n    // 4. if it's the function call message, trigger the function method\n    if (isFunctionCall) {\n      await refreshMessages();\n      await triggerToolCalls(assistantId);\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket Environment Variables in Shell\nDESCRIPTION: Environment variables needed to configure the S3 bucket connection, including the bucket name, endpoint URL, and public domain for access.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/s3/cloudflare-r2.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Bucket name\nS3_BUCKET=lobechat\n# Request endpoint of the bucket (note that the path in this link includes the bucket name, which must be removed, or use the link provided on the page for applying S3 API token)\nS3_ENDPOINT=https://0b33a03b5c993fd2f453379dc36558e5.r2.cloudflarestorage.com\n# Access domain of the bucket\nS3_PUBLIC_DOMAIN=https://s3-for-lobechat.your-domain.com\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for LobeChat Deployment on Netlify\nDESCRIPTION: Examples of required and optional environment variables needed when deploying LobeChat on Netlify. This includes the OpenAI API key, access code for service protection, and optional API proxy URL configurations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/netlify.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=sk-xxxxxx...xxxxxx\nACCESS_CODE=awCT74 or e3@09! or code1,code2,code3\nOPENAI_PROXY_URL=https://aihubmix.com/v1\n```\n\n----------------------------------------\n\nTITLE: Running Ollama Docker Container\nDESCRIPTION: Start an Ollama Docker container with GPU support, volume mounting, and environment variable for cross-origin access.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --gpus=all -v ollama:/root/.ollama -e OLLAMA_ORIGINS=\"*\" -p 11434:11434 --name ollama ollama/ollama\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL for Postgres Connection in LobeChat\nDESCRIPTION: Example format for the DATABASE_URL environment variable used to connect to a Postgres database in LobeChat. This URL includes the username, password, host, port, and database name.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database.mdx#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npostgres://username:password@host:port/database\n```\n\n----------------------------------------\n\nTITLE: Message Fetching and Refreshing in Chat Interface\nDESCRIPTION: Implements SWR-based data fetching for chat messages, enabling efficient loading and refreshing of message history. It manages message state with a map structure keyed by session and topic ID.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n  useFetchMessages: (sessionId, activeTopicId) =>\n    useClientDataSWR<ChatMessage[]>(\n      [SWR_USE_FETCH_MESSAGES, sessionId, activeTopicId],\n      async ([, sessionId, topicId]: [string, string, string | undefined]) =>\n        messageService.getMessages(sessionId, topicId),\n      {\n        onSuccess: (messages, key) => {\n          const nextMap = {\n            ...get().messagesMap,\n            [messageMapKey(sessionId, activeTopicId)]: messages,\n          };\n          // no need to update map if the messages have been init and the map is the same\n          if (get().messagesInit && isEqual(nextMap, get().messagesMap)) return;\n\n          set(\n            { messagesInit: true, messagesMap: nextMap },\n            false,\n            n('useFetchMessages', { messages, queryKey: key }),\n          );\n        },\n      },\n    ),\n  refreshMessages: async () => {\n    await mutate([SWR_USE_FETCH_MESSAGES, get().activeId, get().activeTopicId]);\n  },\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using Yarn. This is a crucial step in setting up the local development environment for LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/setup-development.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd lobe-chat\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Setting Default Agent Configuration with Various Parameters\nDESCRIPTION: Configures the default settings for LobeChat agents including model selection, parameters, and enabled plugins. Supports key-value pairs, nested fields, arrays, and multiple configurations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nDEFAULT_AGENT_CONFIG='model=gpt-4-1106-preview;params.max_tokens=300;plugins=search-engine,lobe-image-designer'\n```\n\n----------------------------------------\n\nTITLE: Setting Ollama Environment Variables on macOS\nDESCRIPTION: These commands use launchctl to set environment variables for Ollama on macOS, allowing access from non-local locations by configuring the host and origins.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/examples/ollama.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlaunchctl setenv OLLAMA_HOST \"0.0.0.0\"\nlaunchctl setenv OLLAMA_ORIGINS \"*\"\n```\n\n----------------------------------------\n\nTITLE: Automated LobeChat Docker Update Script\nDESCRIPTION: Bash script that automates the process of checking for updates, pulling the latest LobeChat image, stopping the old container, and starting a new one with updated configurations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# auto-update-lobe-chat.sh\n\n# Set up proxy (optional)\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n\n# Pull the latest image and store the output in a variable\noutput=$(docker pull lobehub/lobe-chat:latest 2>&1)\n\n# Check if the pull command was executed successfully\nif [ $? -ne 0 ]; then\n  exit 1\nfi\n\n# Check if the output contains a specific string\necho \"$output\" | grep -q \"Image is up to date for lobehub/lobe-chat:latest\"\n\n# If the image is already up to date, do nothing\nif [ $? -eq 0 ]; then\n  exit 0\nfi\n\necho \"Detected lobe-chat update\"\n\n# Remove the old container\necho \"Removed: $(docker rm -f lobe-chat)\"\n\n# Run the new container(Please change the path to the env file)\necho \"Started: $(docker run -d --network=host --env-file /path/to/lobe.env --name=lobe-chat --restart=always lobehub/lobe-chat)\"\n\n# Print the update time and version\necho \"Update time: $(date)\"\necho \"Version: $(docker inspect lobehub/lobe-chat:latest | grep 'org.opencontainers.image.version' | awk -F'\"' '{print $4}')\"\n\n# Clean up unused images\ndocker images | grep 'lobehub/lobe-chat' | grep -v 'lobehub/lobe-chat-database' | grep -v 'latest' | awk '{print $3}' | xargs -r docker rmi > /dev/null 2>&1\necho \"Removed old images.\"\n```\n\n----------------------------------------\n\nTITLE: Chat Message Management Functions\nDESCRIPTION: Contains a collection of utility functions for adding AI messages, copying messages, toggling message editing, stopping message generation, and updating input messages. These functions are core to the chat messaging experience.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n  addAIMessage: async () => {\n    const { internal_createMessage, updateInputMessage, activeTopicId, activeId, inputMessage } =\n      get();\n    if (!activeId) return;\n\n    await internal_createMessage({\n      content: inputMessage,\n      role: 'assistant',\n      sessionId: activeId,\n      // if there is activeTopicId，then add topicId to message\n      topicId: activeTopicId,\n    });\n\n    updateInputMessage('');\n  },\n  copyMessage: async (id, content) => {\n    await copyToClipboard(content);\n\n    get().internal_traceMessage(id, { eventType: TraceEventType.CopyMessage });\n  },\n  toggleMessageEditing: (id, editing) => {\n    set(\n      { messageEditingIds: toggleBooleanList(get().messageEditingIds, id, editing) },\n      false,\n      'toggleMessageEditing',\n    );\n  },\n  stopGenerateMessage: () => {\n    const { abortController, internal_toggleChatLoading } = get();\n    if (!abortController) return;\n\n    abortController.abort('canceled');\n\n    internal_toggleChatLoading(false, undefined, n('stopGenerateMessage') as string);\n  },\n\n  updateInputMessage: (message) => {\n    if (isEqual(message, get().inputMessage)) return;\n\n    set({ inputMessage: message }, false, n('updateInputMessage', message));\n  },\n  modifyMessageContent: async (id, content) => {\n    // tracing the diff of update\n    // due to message content will change, so we need send trace before update,or will get wrong data\n    get().internal_traceMessage(id, {\n      eventType: TraceEventType.ModifyMessage,\n      nextContent: content,\n    });\n\n    await get().internal_updateMessageContent(id, content);\n  },\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd and Restarting Ollama on Linux\nDESCRIPTION: Reload systemd configuration and restart the Ollama service after modifying the service file on Linux.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl restart ollama\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File for Docker\nDESCRIPTION: Example environment variable configuration file (lobe.env) for Docker deployment containing OpenAI API key, proxy URL, access code, and model list.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.zh-CN.mdx#2025-04-11_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=sk-xxxx\nOPENAI_PROXY_URL=https://api-proxy.com/v1\nACCESS_CODE=arthals2333\nOPENAI_MODEL_LIST=-gpt-4,-gpt-4-32k,-gpt-3.5-turbo-16k,gpt-3.5-turbo-1106=gpt-3.5-turbo-16k,gpt-4-0125-preview=gpt-4-turbo,gpt-4-vision-preview=gpt-4-vision\n```\n\n----------------------------------------\n\nTITLE: Enabling Ollama Integration in LobeChat\nDESCRIPTION: Controls whether Ollama is enabled as a model provider, with option to turn it off by setting the value to '0'.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### `ENABLED_OLLAMA`\n\n- Type：Optional\n- Description：Enables Ollama as a model provider by default, turns off the Ollama service when set to `0`\n- Default：`1`\n- Example：`0`\n```\n\n----------------------------------------\n\nTITLE: Customizing Ollama Model List in LobeChat\nDESCRIPTION: Allows specification of custom Ollama language models to be used in the application.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### `OLLAMA_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to specify a custom Ollama language model. Model definition syntax rules see [model-list][model-list]\n- Default: -\n- Example: `llama2:7B`\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Selectors in TypeScript\nDESCRIPTION: This code defines a 'pluginSelectors' object containing various selector functions for retrieving plugin-related data from the store. These selectors handle tasks such as getting custom plugins, installed plugins, manifests, and checking plugin installation status.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-selectors.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pluginSelectors = {\n  getCustomPluginById: (s: PluginState) => (id: string) => s.customPlugins[id],\n  getInstalledPluginById: (s: PluginState) => (id: string) => s.installedPlugins[id],\n  getPluginManifestById: (s: PluginState) => (id: string) => s.pluginManifests[id],\n  getPluginMetaById: (s: PluginState) => (id: string) => s.pluginMetaList[id],\n  getPluginSettingsById: (s: PluginState) => (id: string) => s.pluginSettings[id],\n  installedCustomPluginMetaList: (s: PluginState) => Object.values(s.customPlugins),\n  installedPluginManifestList: (s: PluginState) => Object.values(s.pluginManifests),\n  installedPluginMetaList: (s: PluginState) => Object.values(s.pluginMetaList),\n  installedPlugins: (s: PluginState) => Object.values(s.installedPlugins),\n  isPluginHasUI: (s: PluginState) => (id: string) => !!s.pluginManifests[id]?.ui,\n  isPluginInstalled: (s: PluginState) => (id: string) => !!s.installedPlugins[id],\n  storeAndInstallPluginsIdList: (s: PluginState) => [\n    ...Object.keys(s.installedPlugins),\n    ...Object.keys(s.pluginMetaList),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing API Interaction Flow with Mermaid Sequence Diagram\nDESCRIPTION: A comprehensive sequence diagram illustrating the interaction flow between frontend client, ChatService, backend API, AgentRuntime, Model Provider API, and Plugin Gateway. The diagram shows the complete lifecycle of a chat request, including streaming responses, plugin calling, and preset task scenarios.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.mdx#2025-04-11_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client as Frontend Client\n    participant ChatService as Frontend ChatService\n    participant ChatAPI as Backend Chat API\n    participant AgentRuntime as AgentRuntime\n    participant ModelProvider as Model Provider API\n    participant PluginGateway as Plugin Gateway\n\n    Client->>ChatService: Call createAssistantMessage\n    Note over ChatService: Process messages, tools, and parameters\n\n    ChatService->>ChatService: Call getChatCompletion\n    Note over ChatService: Prepare request parameters\n\n    ChatService->>ChatAPI: Send POST request to /webapi/chat/[provider]\n\n    ChatAPI->>AgentRuntime: Initialize AgentRuntime\n    Note over AgentRuntime: Create runtime with provider and user config\n\n    ChatAPI->>AgentRuntime: Call chat method\n    AgentRuntime->>ModelProvider: Send chat completion request\n\n    ModelProvider-->>AgentRuntime: Return streaming response\n    AgentRuntime-->>ChatAPI: Process response and return stream\n\n    ChatAPI-->>ChatService: Stream back SSE response\n\n    ChatService->>ChatService: Handle streaming response with fetchSSE\n    Note over ChatService: Process event stream with fetchEventSource\n\n    loop For each data chunk\n        ChatService->>ChatService: Handle different event types (text, tool_calls, reasoning, etc.)\n        ChatService-->>Client: Return current chunk via onMessageHandle callback\n    end\n\n    ChatService-->>Client: Return complete result via onFinish callback\n\n    Note over ChatService,ModelProvider: Plugin calling scenario\n    ModelProvider-->>ChatService: Return response with tool_calls\n    ChatService->>ChatService: Parse tool calls\n    ChatService->>ChatService: Call runPluginApi\n    ChatService->>PluginGateway: Send plugin request to gateway\n    PluginGateway-->>ChatService: Return plugin execution result\n    ChatService->>ModelProvider: Return plugin result to model\n    ModelProvider-->>ChatService: Generate final response based on plugin result\n\n    Note over ChatService,ModelProvider: Preset task scenario\n    Client->>ChatService: Trigger preset task (e.g., translation, search)\n    ChatService->>ChatService: Call fetchPresetTaskResult\n    ChatService->>ChatAPI: Send preset task request\n    ChatAPI-->>ChatService: Return task result\n    ChatService-->>Client: Return result via callback function\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest LobeChat Docker Image\nDESCRIPTION: Command to pull the latest LobeChat Docker image from the repository.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\ndocker pull lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Embedding Model via Environment Variable\nDESCRIPTION: This environment variable configuration sets the default embedding model for LobeChat. It allows customization of which model provider and model to use for generating text vector representations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/knowledge-base.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenvironment: DEFAULT_FILES_CONFIG=embedding_model=openai/embedding-text-3-small\n```\n\n----------------------------------------\n\nTITLE: Loading State Management in TypeScript\nDESCRIPTION: Implements loading state management for chat messages and tool calls. Includes functions for toggling loading states and handling abort controllers.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninternal_toggleLoadingArrays: (key, loading, id, action) => {\n    if (loading) {\n      window.addEventListener('beforeunload', preventLeavingFn);\n\n      const abortController = new AbortController();\n      set(\n        {\n          abortController,\n          [key]: toggleBooleanList(get()[key] as string[], id!, loading),\n        },\n        false,\n        action,\n      );\n\n      return abortController;\n    } else {\n      if (!id) {\n        set({ abortController: undefined, [key]: [] }, false, action);\n      } else\n        set(\n          {\n            abortController: undefined,\n            [key]: toggleBooleanList(get()[key] as string[], id, loading),\n          },\n          false,\n          action,\n        );\n\n      window.removeEventListener('beforeunload', preventLeavingFn);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Configuration Files for LobeChat\nDESCRIPTION: Shell commands to download the Docker Compose configuration file and environment variable template for custom LobeChat deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/lobehub/lobe-chat/HEAD/docker-compose/local/docker-compose.yml\ncurl -O https://raw.githubusercontent.com/lobehub/lobe-chat/HEAD/docker-compose/local/.env.example\nmv .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI Configuration in Bash\nDESCRIPTION: Example of setting environment variables for OpenAI configuration in LobeChat. Includes enabling OpenAI, setting the API key, proxy URL, and customizing the model list.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nENABLED_OPENAI=1\nOPENAI_API_KEY=\"sk-xxxxxx...xxxxxx\"\nOPENAI_PROXY_URL=\"https://api.chatanywhere.cn\"\nOPENAI_MODEL_LIST=\"+qwen-7b-chat,+glm-6b,-gpt-3.5-turbo,gpt-4-0125-preview=gpt-4-turbo\"\n```\n\n----------------------------------------\n\nTITLE: Automatic Update Script for LobeChat Docker Container\nDESCRIPTION: Bash script for automatically updating the LobeChat Docker container. The script checks for updates, replaces the old container with the new version, and cleans up unused images.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker-compose.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# auto-update-lobe-chat.sh\n\n# Set proxy (optional)\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n\n# Pull the latest image and store the output in a variable\noutput=$(docker pull lobehub/lobe-chat:latest 2>&1)\n\n# Check if the pull command was executed successfully\nif [ $? -ne 0 ]; then\n  exit 1\nfi\n\n# Check if the output contains a specific string\necho \"$output\" | grep -q \"Image is up to date for lobehub/lobe-chat:latest\"\n\n# If the image is already up to date, do nothing\nif [ $? -eq 0 ]; then\n  exit 0\nfi\n\necho \"Detected Lobe-Chat update\"\n\n# Remove the old container\necho \"Removed: $(docker rm -f Lobe-Chat)\"\n\n# You may need to navigate to the directory where `docker-compose.yml` is located first\n# cd /path/to/docker-compose-folder\n\n# Run the new container\necho \"Started: $(docker-compose up)\"\n\n# Print the update time and version\necho \"Update time: $(date)\"\necho \"Version: $(docker inspect lobehub/lobe-chat:latest | grep 'org.opencontainers.image.version' | awk -F'\"' '{print $4}')\"\n\n# Clean up unused images\ndocker images | grep 'lobehub/lobe-chat' | grep -v 'lobehub/lobe-chat-database' | grep -v 'latest' | awk '{print $3}' | xargs -r docker rmi > /dev/null 2>&1\necho \"Removed old images.\"\n```\n\n----------------------------------------\n\nTITLE: LobeChat Container Success Logs\nDESCRIPTION: Example of successful startup logs from the LobeChat database container showing database migration and server startup.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker.mdx#2025-04-11_snippet_3\n\nLANGUAGE: log\nCODE:\n```\n[Database] Start to migration...\n✅ database migration pass.\n-------------------------------------\n  ▲ Next.js 14.x.x\n  - Local:        http://localhost:3210\n  - Network:      http://0.0.0.0:3210\n\n ✓ Starting...\n ✓ Ready in 95ms\n```\n\n----------------------------------------\n\nTITLE: Message Management Functions in TypeScript\nDESCRIPTION: Collection of internal functions for managing chat messages including creating, updating, and deleting messages. Includes optimistic updates and state management.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninternal_updateMessageContent: async (id, content, toolCalls) => {\n    const { internal_dispatchMessage, refreshMessages, internal_transformToolCalls } = get();\n\n    if (toolCalls) {\n      internal_dispatchMessage({\n        id,\n        type: 'updateMessage',\n        value: { tools: internal_transformToolCalls(toolCalls) },\n      });\n    } else {\n      internal_dispatchMessage({ id, type: 'updateMessage', value: { content } });\n    }\n\n    await messageService.updateMessage(id, {\n      content,\n      tools: toolCalls ? internal_transformToolCalls(toolCalls) : undefined,\n    });\n    await refreshMessages();\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for LobeChat Database Deployment\nDESCRIPTION: Creates a directory for storing configuration and database files, then navigates into it before starting the deployment process.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir lobe-chat-db && cd lobe-chat-db\n```\n\n----------------------------------------\n\nTITLE: LobeRuntimeAI Interface Definition in TypeScript\nDESCRIPTION: This interface defines the core contract that all AI provider adapters must implement. It includes methods for chat stream handling, embeddings, model listing, text-to-image, and text-to-speech functionality.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LobeRuntimeAI {\n  baseURL?: string;\n  chat(payload: ChatStreamPayload, options?: ChatCompetitionOptions): Promise<Response>;\n  embeddings?(payload: EmbeddingsPayload, options?: EmbeddingsOptions): Promise<Embeddings[]>;\n  models?(): Promise<any>;\n  textToImage?: (payload: TextToImagePayload) => Promise<string[]>;\n  textToSpeech?: (\n    payload: TextToSpeechPayload,\n    options?: TextToSpeechOptions,\n  ) => Promise<ArrayBuffer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side API for LobeChat Plugin in TypeScript\nDESCRIPTION: Example of implementing a server-side API for a LobeChat plugin using Vercel's Edge Runtime. The code handles POST requests, processes gender and mood data, and returns clothing recommendations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/plugins/development.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async (req: Request) => {\n  if (req.method !== 'POST') return createErrorResponse(PluginErrorType.MethodNotAllowed);\n\n  const { gender, mood } = (await req.json()) as RequestData;\n\n  const clothes = gender === 'man' ? manClothes : womanClothes;\n\n  const result: ResponseData = {\n    clothes: clothes[mood] || [],\n    mood,\n    today: Date.now(),\n  };\n\n  return new Response(JSON.stringify(result));\n};\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Docker Image\nDESCRIPTION: Use Docker to pull the official Ollama image for containerized deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ollama/ollama\n```\n\n----------------------------------------\n\nTITLE: Customizing Groq AI Model List in LobeChat\nDESCRIPTION: Controls the available model list for Groq AI, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n### `GROQ_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+gemma2-9b-it,+llama-3.1-8b-instant`\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Message Data Structure in TypeScript\nDESCRIPTION: Defines the ChatMessage type in src/types/chat.ts to represent the structure of a chat message, including id, content, timestamp, and sender properties.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development-frontend.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/types/chat.ts\n\nexport type ChatMessage = {\n  id: string;\n  content: string;\n  timestamp: number;\n  sender: 'user' | 'bot';\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Container Logs\nDESCRIPTION: Command to follow the logs of the LobeChat container.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs -f lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Configuring Model List with Extension Capabilities\nDESCRIPTION: This snippet illustrates the syntax for configuring models with extension capabilities. It shows how to specify the maximum token limit and various capabilities such as vision, reasoning, search, function call, file handling, and image output.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/model-list.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nid->deploymentName=displayName<maxToken:vision:reasoning:search:fc:file:imageOutput>\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Model\nDESCRIPTION: Use the Ollama CLI to pull and install a specific language model, such as llama3.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama.mdx#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nollama pull llama3\n```\n\n----------------------------------------\n\nTITLE: Setting KEY_VAULTS_SECRET Environment Variable for Database Encryption\nDESCRIPTION: Example configuration for the KEY_VAULTS_SECRET environment variable used to encrypt sensitive information like API keys stored by users in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nKEY_VAULTS_SECRET=jgwsK28dspyVQoIf8/M3IIHl1h6LYYceSYNXeLpy6uk=\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionGroup Logic in SessionService\nDESCRIPTION: Adds session group-related business logic to the SessionService class.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass SessionService {\n  // ... Omitted session business logic\n\n  // ************************************** //\n  // ***********  SessionGroup  *********** //\n  // ************************************** //\n\n  async createSessionGroup(name: string, sort?: number) {\n    const item = await SessionGroupModel.create(name, sort);\n    if (!item) {\n      throw new Error('session group create Error');\n    }\n\n    return item.id;\n  }\n\n  // ... Other SessionGroup related implementations\n}\n```\n\n----------------------------------------\n\nTITLE: PostHog Analytics Configuration Variables\nDESCRIPTION: Environment variables for configuring PostHog Analytics including project key, host address, and debug mode.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/analytics.mdx#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nPOSTHOG_KEY\n- Type: Required\n- Default: -\n- Example: phc_xxxxxxxx\n\nPOSTHOG_HOST\n- Type: Optional\n- Default: https://app.posthog.com\n- Example: https://example.com\n\nDEBUG_POSTHOG_ANALYTICS\n- Type: Optional\n- Default: -\n- Example: 1\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Authentication Providers (TypeScript)\nDESCRIPTION: This snippet shows how to differentiate between multiple authentication providers in the jwt callback to handle different userId mappings.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/add-new-authentication-providers.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncallbacks: {\n  async jwt({ token, profile, account }) {\n    if (profile && account) {\n      if (account.provider === 'authing')\n        token.userId = account.providerAccountId ?? token.sub;\n      else if (acount.provider === 'auth0')\n        token.userId = profile.sub ?? token.sub;\n      else\n        // other providers\n    }\n    return token;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Gemma Model via Ollama CLI\nDESCRIPTION: Command to pull and install the Google Gemma 7b model using Ollama CLI. This downloads and sets up the model locally for use with LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama/gemma.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nollama pull gemma\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration for Scheduled LobeChat Updates\nDESCRIPTION: Crontab entry to schedule the automatic update script to run every 5 minutes, with output logging for tracking update processes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n*/5 * * * * /path/to/auto-update-lobe-chat.sh >> /path/to/auto-update-lobe-chat.log 2>&1\n```\n\n----------------------------------------\n\nTITLE: Updating ConfigService for Session Group Import in LobeChat\nDESCRIPTION: This code adds session group import functionality to the ConfigService class. It introduces a new importSessionGroups method and modifies the importConfigState method to handle session groups during data import. The implementation ensures session groups are imported before sessions to maintain proper associations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nclass ConfigService {\n  // ... Other code omitted\n\n+ importSessionGroups = async (sessionGroups: SessionGroupItem[]) => {\n+   return sessionService.batchCreateSessionGroups(sessionGroups);\n+ };\n\n  importConfigState = async (config: ConfigFile): Promise<ImportResults | undefined> => {\n    switch (config.exportType) {\n      case 'settings': {\n        await this.importSettings(config.state.settings);\n\n        break;\n      }\n\n      case 'agents': {\n+       const sessionGroups = await this.importSessionGroups(config.state.sessionGroups);\n\n        const data = await this.importSessions(config.state.sessions);\n        return {\n+         sessionGroups: this.mapImportResult(sessionGroups),\n          sessions: this.mapImportResult(data),\n        };\n      }\n\n      case 'all': {\n        await this.importSettings(config.state.settings);\n\n+       const sessionGroups = await this.importSessionGroups(config.state.sessionGroups);\n\n        const [sessions, messages, topics] = await Promise.all([\n          this.importSessions(config.state.sessions),\n          this.importMessages(config.state.messages),\n          this.importTopics(config.state.topics),\n        ]);\n\n        return {\n          messages: this.mapImportResult(messages),\n+         sessionGroups: this.mapImportResult(sessionGroups),\n          sessions: this.mapImportResult(sessions),\n          topics: this.mapImportResult(topics),\n        };\n      }\n\n      case 'sessions': {\n+       const sessionGroups = await this.importSessionGroups(config.state.sessionGroups);\n\n        const [sessions, messages, topics] = await Promise.all([\n          this.importSessions(config.state.sessions),\n          this.importMessages(config.state.messages),\n          this.importTopics(config.state.topics),\n        ]);\n\n        return {\n          messages: this.mapImportResult(messages),\n+         sessionGroups: this.mapImportResult(sessionGroups),\n          sessions: this.mapImportResult(sessions),\n          topics: this.mapImportResult(topics),\n        };\n      }\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting XAI Configuration in Bash\nDESCRIPTION: Example of setting the API key environment variable for XAI configuration in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nXAI_API_KEY=\"xai-xxxxxx...xxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup for LobeChat Database Environment\nDESCRIPTION: Docker Compose configuration that defines the complete LobeChat database environment with PostgreSQL, MinIO S3, Casdoor authentication, and the LobeChat service. The setup includes network configuration, volume mounts, and environment variables.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nname: lobe-chat-database\nservices:\n  network-service:\n    image: alpine\n    container_name: lobe-network\n    ports:\n      - '${MINIO_PORT}:${MINIO_PORT}' # MinIO API\n      - '9001:9001' # MinIO Console\n      - '${CASDOOR_PORT}:${CASDOOR_PORT}' # Casdoor\n      - '${LOBE_PORT}:3210' # LobeChat\n    command: tail -f /dev/null\n    networks:\n      - lobe-network\n\n  postgresql:\n    image: pgvector/pgvector:pg16\n    container_name: lobe-postgres\n    ports:\n      - '5432:5432'\n    volumes:\n      - './data:/var/lib/postgresql/data'\n    environment:\n      - 'POSTGRES_DB=${LOBE_DB_NAME}'\n      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'\n    healthcheck:\n      test: ['CMD-SHELL', 'pg_isready -U postgres']\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    restart: always\n    networks:\n      - lobe-network\n\n  minio:\n    image: minio/minio\n    container_name: lobe-minio\n    network_mode: 'service:network-service'\n    volumes:\n      - './s3_data:/etc/minio/data'\n    environment:\n      - 'MINIO_ROOT_USER=${MINIO_ROOT_USER}'\n      - 'MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}'\n      # - 'MINIO_API_CORS_ALLOW_ORIGIN=http://localhost:${LOBE_PORT}'\n      - 'MINIO_API_CORS_ALLOW_ORIGIN=https://lobe.example.com'\n    restart: always\n    command: >\n      server /etc/minio/data --address \":${MINIO_PORT}\" --console-address \":9001\"\n\n  casdoor:\n    image: casbin/casdoor\n    container_name: lobe-casdoor\n    entrypoint: /bin/sh -c './server --createDatabase=true'\n    network_mode: 'service:network-service'\n    depends_on:\n      postgresql:\n        condition: service_healthy\n    environment:\n      RUNNING_IN_DOCKER: 'true'\n      driverName: 'postgres'\n      dataSourceName: 'user=postgres password=${POSTGRES_PASSWORD} host=postgresql port=5432 sslmode=disable dbname=casdoor'\n      # origin: 'http://localhost:${CASDOOR_PORT}'\n      origin: 'https://auth.example.com'\n      runmode: 'dev'\n    volumes:\n      - ./init_data.json:/init_data.json\n\n  lobe:\n    image: lobehub/lobe-chat-database\n    container_name: lobe-chat-database\n    network_mode: 'service:network-service'\n    depends_on:\n      postgresql:\n        condition: service_healthy\n      network-service:\n        condition: service_started\n      minio:\n        condition: service_started\n      casdoor:\n        condition: service_started\n\n    environment:\n      # - 'APP_URL=http://localhost:3210'\n      - 'APP_URL=https://lobe.example.com'\n\n      - 'NEXT_AUTH_SSO_PROVIDERS=casdoor'\n      - 'KEY_VAULTS_SECRET=Kix2wcUONd4CX51E/ZPAd36BqM4wzJgKjPtz2sGztqQ='\n      - 'NEXT_AUTH_SECRET=NX2kaPE923dt6BL2U8e9oSre5RfoT7hg'\n      # - 'AUTH_URL=http://localhost:${LOBE_PORT}/api/auth'\n      - 'AUTH_URL=https://lobe.example.com/api/auth'\n\n      # - 'AUTH_CASDOOR_ISSUER=http://localhost:${CASDOOR_PORT}'\n      - 'AUTH_CASDOOR_ISSUER=https://auth.example.com'\n\n      - 'DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgresql:5432/${LOBE_DB_NAME}'\n      # - 'S3_ENDPOINT=http://localhost:${MINIO_PORT}'\n      - 'S3_ENDPOINT=https://minio.example.com'\n\n      - 'S3_BUCKET=${MINIO_LOBE_BUCKET}'\n      # - 'S3_PUBLIC_DOMAIN=http://localhost:${MINIO_PORT}'\n      - 'S3_PUBLIC_DOMAIN=https://minio.example.com'\n\n      - 'S3_ENABLE_PATH_STYLE=1'\n      - 'LLM_VISION_IMAGE_USE_BASE64=1'\n    env_file:\n      - .env\n    restart: always\n\nvolumes:\n  data:\n    driver: local\n  s3_data:\n    driver: local\n\nnetworks:\n  lobe-network:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Starting LobeChat Docker Container\nDESCRIPTION: Launches the LobeChat service using Docker Compose in detached mode, running the container in the background.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Bash Script for LobeChat Docker Setup\nDESCRIPTION: A bash command to create a directory for LobeChat database files, which is needed before starting the Docker container.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/README.zh-CN.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir lobe-chat-db && cd lobe-chat-db\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Validation in docker-compose.yml\nDESCRIPTION: Example of how to set the NODE_TLS_REJECT_UNAUTHORIZED environment variable in a docker-compose.yml file.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/faq/proxy-with-unable-to-verify-leaf-signature.mdx#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# In the docker-compose.yml\nenvironment:\n  - NODE_TLS_REJECT_UNAUTHORIZED=0\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Component with Store Actions in React TypeScript\nDESCRIPTION: Implementation of a modal component that uses session store actions to create and update session groups.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst CreateGroupModal = () => {\n  // ... 其他逻辑\n\n  const [updateSessionGroup, addCustomGroup] = useSessionStore((s) => [\n    s.updateSessionGroupId,\n    s.addSessionGroup,\n  ]);\n\n  return (\n    <Modal\n      onOk={async () => {\n        // ... 其他逻辑\n        const groupId = await addCustomGroup(name);\n        await updateSessionGroup(sessionId, groupId);\n      }}\n    >\n      {/* ... */}\n    </Modal>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection for LobeChat\nDESCRIPTION: Docker Compose environment setting for connecting LobeChat to PostgreSQL database with proper credentials.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  lobe:\n    environment:\n      - 'DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgresql:5432/${LOBE_DB_NAME}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic S3 Environment Variables\nDESCRIPTION: Essential environment variables needed for S3 bucket configuration including bucket name, endpoint, and public domain.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Storage bucket name\nS3_BUCKET=lobechat\n# Storage bucket request endpoint (note that the path in this link includes the bucket name, which must be removed, or use the link provided on the S3 API token application page)\nS3_ENDPOINT=https://0b33a03b5c993fd2f453379dc36558e5.r2.cloudflarestorage.com\n# Public access domain for the storage bucket\nS3_PUBLIC_DOMAIN=https://s3-for-lobechat.your-domain.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Avatar Auto-generation with TypeScript\nDESCRIPTION: TypeScript implementation of auto-generating an avatar emoji for an agent. The code uses the fetchPresetTaskResult method to call a preset task that generates an appropriate emoji based on the agent's title, description, and system role.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/features/AgentSetting/store/action.ts\nautoPickEmoji: async () => {\n  const { config, meta, dispatchMeta } = get();\n  const systemRole = config.systemRole;\n\n  chatService.fetchPresetTaskResult({\n    onFinish: async (emoji) => {\n      dispatchMeta({ type: 'update', value: { avatar: emoji } });\n    },\n    onLoadingChange: (loading) => {\n      get().updateLoadingState('avatar', loading);\n    },\n    params: merge(\n      get().internal_getSystemAgentForMeta(),\n      chainPickEmoji([meta.title, meta.description, systemRole].filter(Boolean).join(',')),\n    ),\n    trace: get().getCurrentTracePayload({ traceName: TraceNameMap.EmojiPicker }),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Starting LobeChat with Docker Compose\nDESCRIPTION: A Docker Compose command to start LobeChat services in detached mode, running the containers in the background after setup is complete.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/README.zh-CN.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration Generation Report for LobeChat Deployment\nDESCRIPTION: Example log output showing the initial credentials generated for LobeChat, Casdoor, and Minio services during deployment setup.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_7\n\nLANGUAGE: log\nCODE:\n```\nThe results of the secure key generation are as follows:\nLobeChat:\n  - URL: https://lobe.example.com\n  - Username: user\n  - Password: 837e26\nCasdoor:\n  - URL: https://auth.example.com\n  - Username: admin\n  - Password: 837e26\nMinio:\n  - URL: https://minio.example.com\n  - Username: admin\n  - Password: dbac8440\n```\n\n----------------------------------------\n\nTITLE: Migration Test Cases in TypeScript\nDESCRIPTION: Comprehensive test suite for verifying configuration migration functionality from v1 to v3.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ndescribe('MigrationV2ToV3', () => {\n  let migrations;\n  let versionController: VersionController<any>;\n\n  beforeEach(() => {\n    migrations = [MigrationV2ToV3];\n    versionController = new VersionController(migrations, 3);\n  });\n\n  it('should migrate data correctly through multiple versions', () => {\n    const data: MigrationData = inputV2Data;\n\n    const migratedData = versionController.migrate(data);\n\n    expect(migratedData.version).toEqual(outputV3Data.version);\n    expect(migratedData.state.sessions).toEqual(outputV3Data.state.sessions);\n    expect(migratedData.state.topics).toEqual(outputV3Data.state.topics);\n    expect(migratedData.state.messages).toEqual(outputV3Data.state.messages);\n  });\n\n  it('should work correct from v1 to v3', () => {\n    const data: MigrationData = inputV1Data;\n\n    versionController = new VersionController([MigrationV2ToV3, MigrationV1ToV2], 3);\n\n    const migratedData = versionController.migrate(data);\n\n    expect(migratedData.version).toEqual(outputV3DataFromV1.version);\n    expect(migratedData.state.sessions).toEqual(outputV3DataFromV1.state.sessions);\n    expect(migratedData.state.topics).toEqual(outputV3DataFromV1.state.topics);\n    expect(migratedData.state.messages).toEqual(outputV3DataFromV1.state.messages);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Node Postgres Database in LobeChat\nDESCRIPTION: Required environment variables to configure a Node Postgres database for LobeChat deployment, including DATABASE_URL, driver specification, and service mode settings.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Node Postgres DB Url\nDATABASE_URL=\n\n# Specify Postgres database driver as node\nDATABASE_DRIVER=node\n\n# Specify service mode as server, otherwise it will not enter the server-side database\nNEXT_PUBLIC_SERVICE_MODE=server\n```\n\n----------------------------------------\n\nTITLE: SenseNova Configuration Markdown Documentation\nDESCRIPTION: Markdown documentation detailing the steps to obtain SenseNova API credentials and configure them in LobeChat's settings interface. Includes setup steps, warnings about API key security, and guidance on model selection.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/sensenova.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using SenseNova in LobeChat\ndescription: >\n  Learn how to configure and use SenseNova's API Key in LobeChat to start\n  conversations and interactions.\ntags:\n  - LobeChat\n  - SenseNova\n  - API Key\n  - Web UI\n---\n\n# Using SenseNova in LobeChat\n\n[SenseNova](https://platform.sensenova.cn/home) is a large model system introduced by SenseTime, aimed at promoting the rapid iteration and practical application of artificial intelligence (AI) technology.\n\nThis article will guide you on how to use SenseNova in LobeChat.\n\n```\n\n----------------------------------------\n\nTITLE: Processing AI Responses with RAG and Knowledge Integration\nDESCRIPTION: Implements the core message processing logic that generates AI responses to user messages. Handles RAG (Retrieval-Augmented Generation) queries and file attachments, and manages post-processing operations like topic title summarization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n    // Get the current messages to generate AI response\n    const messages = chatSelectors.currentChats(get());\n    const userFiles = chatSelectors.currentUserFiles(get()).map((f) => f.id);\n\n    await internal_coreProcessMessage(messages, id, {\n      isWelcomeQuestion,\n      // if there is relative files or enabled knowledge, try with ragQuery\n      ragQuery: hasEnabledKnowledge() || userFiles.length > 0 ? message : undefined,\n    });\n\n    set({ isCreatingMessage: false }, false, 'creatingMessage/stop');\n\n    const summaryTitle = async () => {\n      // if autoCreateTopic is false, then stop\n      if (!agentConfig.enableAutoCreateTopic) return;\n\n      // check activeTopic and then auto update topic title\n      if (newTopicId) {\n        const chats = chatSelectors.currentChats(get());\n        await get().summaryTopicTitle(newTopicId, chats);\n        return;\n      }\n\n      const topic = topicSelectors.currentActiveTopic(get());\n\n      if (topic && !topic.title) {\n        const chats = chatSelectors.currentChats(get());\n        await get().summaryTopicTitle(topic.id, chats);\n      }\n    };\n\n    // if there is relative files, then add files to agent\n    // only available in server mode\n    const addFilesToAgent = async () => {\n      if (userFiles.length === 0 || !isServerMode) return;\n\n      await useAgentStore.getState().addFilesToAgent(userFiles, false);\n    };\n\n    await Promise.all([summaryTitle(), addFilesToAgent()]);\n```\n\n----------------------------------------\n\nTITLE: Fetching LobeChat Setup Script\nDESCRIPTION: Downloads and executes the LobeChat deployment setup script with English language setting.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -fsSL https://lobe.li/setup.sh) -l en\n```\n\n----------------------------------------\n\nTITLE: Customizing ZHIPU AI Model List in LobeChat\nDESCRIPTION: Controls the available model list for ZHIPU AI, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n### `ZHIPU_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+glm-4-alltools,+glm-4-plus`\n```\n\n----------------------------------------\n\nTITLE: Responsive Implementation Using Route Groups\nDESCRIPTION: Example of how the welcome page is structured using Next.js Route Groups to separate desktop and mobile implementations while sharing common code. This approach enables responsive design with code organization that maintains clarity and reusability.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/folder-structure.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwelcome\n├── (desktop)               # Desktop implementation\n│   ├── features            # Desktop-specific features\n│   ├── index.tsx           # Main entry file for desktop\n│   └── layout.desktop.tsx  # Desktop layout component\n├── (mobile)                # Mobile implementation\n│   ├── features            # Mobile-specific features\n│   ├── index.tsx           # Main entry file for mobile\n│   └── layout.mobile.tsx   # Mobile layout component\n├── features                # This folder contains features code shared by both desktop and mobile, such as the Banner component\n│   └── Banner\n└── page.tsx                # This is the main entry file for the page, used to load desktop or mobile code based on the device type\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Authentication Environment Variables for LobeChat\nDESCRIPTION: Required environment variables for configuring Clerk authentication service in LobeChat, including public and private keys needed for user authentication.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_xxxxxxxxxxx\nCLERK_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Setting Cloudflare R2 Endpoint in Shell\nDESCRIPTION: Example of setting the S3_ENDPOINT environment variable for Cloudflare R2 storage service. This defines the request endpoint of the storage bucket without including the bucket name.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/s3.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nS3_ENDPOINT=https://0b33a03b5c993fd2f453379dc36558e5.r2.cloudflarestorage.com\n```\n\n----------------------------------------\n\nTITLE: Querying and Grouping Sessions in SessionModel\nDESCRIPTION: Implements a method in the SessionModel class to query and organize session data into groups, including custom groups, default sessions, and pinned sessions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass _SessionModel extends BaseModel {\n  // ... other methods\n\n  /**\n   * Query session data and categorize sessions based on groups.\n   * @returns {Promise<ChatSessionList>} An object containing all sessions and categorized session lists.\n   */\n  async queryWithGroups(): Promise<ChatSessionList> {\n    // Query session group data\n    const groups = await SessionGroupModel.query();\n    // Query custom session groups based on session group IDs\n    const customGroups = await this.queryByGroupIds(groups.map((item) => item.id));\n    // Query default session list\n    const defaultItems = await this.querySessionsByGroupId(SessionDefaultGroup.Default);\n    // Query pinned sessions\n    const pinnedItems = await this.getPinnedSessions();\n\n    // Query all sessions\n    const all = await this.query();\n    // Combine and return all sessions and their group information\n    return {\n      all, // Array containing all sessions\n      customGroup: groups.map((group) => ({ ...group, children: customGroups[group.id] })), // Custom groups\n      default: defaultItems, // Default session list\n      pinned: pinnedItems, // Pinned session list\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on CentOS\nDESCRIPTION: Command to install Docker on CentOS Linux systems using the yum package manager.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker-compose.mdx#2025-04-11_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n$ yum install docker\n```\n\n----------------------------------------\n\nTITLE: Setting OpenRouter AI Configuration in Bash\nDESCRIPTION: Example of setting environment variables for OpenRouter AI configuration in LobeChat. Includes API key and model list customization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nOPENROUTER_API_KEY=\"sk-or-v1-xxxxxx...xxxxxx=\"\nOPENROUTER_MODEL_LIST=\"-all,+01-ai/yi-34b-chat,+huggingfaceh4/zephyr-7b-beta\"\n```\n\n----------------------------------------\n\nTITLE: Updating Server Configuration for Okta (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add Okta-related environment variables to the getAppConfig function in the src/config/server/app.ts file.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/add-new-authentication-providers.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getAppConfig = () => {\n  // ... Other code\n\n  return {\n    // ... Other environment variables\n\n    OKTA_CLIENT_ID: process.env.OKTA_CLIENT_ID || '',\n    OKTA_CLIENT_SECRET: process.env.OKTA_CLIENT_SECRET || '',\n    OKTA_ISSUER: process.env.OKTA_ISSUER || '',\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Starting LobeChat Development Server\nDESCRIPTION: Command to start the development server for LobeChat. After executing this command, the application will be accessible at http://localhost:3010.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/setup-development.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up S3 API Access Keys in Shell\nDESCRIPTION: Environment variables for S3 access credentials that grant the LobeChat server read and write permissions to the S3 storage service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/s3/cloudflare-r2.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nS3_ACCESS_KEY_ID=9998d6757e276cf9f1edbd325b7083a6\nS3_SECRET_ACCESS_KEY=55af75d8eb6b99f189f6a35f855336ea62cd9c4751a5cf4337c53c1d3f497ac2\n```\n\n----------------------------------------\n\nTITLE: Implementing LobeChat Plugin UI Interface with React and TypeScript\nDESCRIPTION: Example of a React component for a LobeChat plugin UI. It uses the fetchPluginMessage function from @lobehub/chat-plugin-sdk to retrieve and display plugin message data.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/plugins/development.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchPluginMessage } from '@lobehub/chat-plugin-sdk';\nimport { memo, useEffect, useState } from 'react';\n\nimport { ResponseData } from '@/type';\n\nconst Render = memo(() => {\n  const [data, setData] = useState<ResponseData>();\n\n  useEffect(() => {\n    // Retrieve the current plugin message from LobeChat\n    fetchPluginMessage().then((e: ResponseData) => {\n      setData(e);\n    });\n  }, []);\n\n  return <>...</>;\n});\n\nexport default Render;\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimax AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Minimax AI service integration, which must be obtained from Minimax AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### `MINIMAX_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the Minimax AI service\n- Default: -\n- Example: `xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Example JSON Format for LobeChat Settings\nDESCRIPTION: Shows a sample JSON object for configuring LobeChat settings, specifically the keyVaults section with OpenAI API key.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/settings-url-share.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keyVaults\": {\n    \"openai\": {\n      \"apiKey\": \"user-key\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Chat Page in Next.js\nDESCRIPTION: Creates a new route for the Chat Messages page by exporting a React component in the src/app/chat/page.tsx file.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development-frontend.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app/chat/page.tsx\nimport ChatPage from './features/chat';\n\nexport default ChatPage;\n```\n\n----------------------------------------\n\nTITLE: Configuration Generation Output\nDESCRIPTION: Example output showing generated credentials for LobeChat, Casdoor, and Minio services.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nThe results of the secure key generation are as follows:\nLobeChat:\n  - URL: http://localhost:3210\n  - Username: user\n  - Password: c66f8c\nCasdoor:\n  - URL: http://localhost:8000\n  - Username: admin\n  - Password: c66f8c\nMinio:\n  - URL: http://localhost:9000\n  - Username: admin\n  - Password: 8c82ea41\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Environment Variables in systemd Service\nDESCRIPTION: This snippet shows the format for adding environment variables to the Ollama systemd service configuration, allowing non-local access.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/examples/ollama.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[Service]\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"\nEnvironment=\"OLLAMA_ORIGINS=*\"\n```\n\n----------------------------------------\n\nTITLE: Provider Runtime Mapping Implementation in TypeScript\nDESCRIPTION: This code defines a mapping between provider names and their corresponding runtime implementation classes. It enables the plugin architecture of AgentRuntime, allowing easy addition of new model providers.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const providerRuntimeMap = {\n  openai: LobeOpenAI,\n  anthropic: LobeAnthropicAI,\n  google: LobeGoogleAI,\n  azure: LobeAzureOpenAI,\n  bedrock: LobeBedrockAI,\n  ollama: LobeOllamaAI,\n  // ...其他40多个模型提供商\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TogetherAI in Bash\nDESCRIPTION: Example of setting environment variables for TogetherAI configuration in LobeChat. Includes API key and model list customization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nTOGETHERAI_API_KEY=\"xxxxxx...xxxxxx\"\nTOGETHERAI_MODEL_LIST=\"-all,+meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo,+meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\"\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Launches all configured Docker containers in detached mode according to the docker-compose.yml configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating LobeChat Plugin Gateway with Edge Runtime\nDESCRIPTION: Implementation of a plugin gateway for LobeChat using the @lobehub/chat-plugins-gateway package. This allows LobeChat to access local plugin services.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/plugins/development.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLobeChatPluginGateway } from '@lobehub/chat-plugins-gateway';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nexport default createLobeChatPluginGateway();\n```\n\n----------------------------------------\n\nTITLE: Configuring DeepSeek AI in Bash\nDESCRIPTION: Example of setting environment variables for DeepSeek AI configuration in LobeChat. Includes proxy URL, API key, and model list customization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nDEEPSEEK_PROXY_URL=\"https://my-deepseek-proxy.com\"\nDEEPSEEK_API_KEY=\"sk-xxxxxx...xxxxxx\"\nDEEPSEEK_MODEL_LIST=\"-all,+deepseek-reasoner\"\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Rules in TypeScript for Web Crawling\nDESCRIPTION: This code snippet demonstrates how to define custom URL rules for the web crawler. It shows the structure for matching URL patterns, transforming URLs, specifying crawling implementations, and configuring content filtering options.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/packages/web-crawler/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: handling specific websites\nconst url = [\n  // ... other URL matching rules\n  {\n    // URL matching pattern, supports regex\n    urlPattern: 'https://example.com/articles/(.*)',\n\n    // Optional: URL transformation, redirects to an easier-to-crawl version\n    urlTransform: 'https://example.com/print/$1',\n\n    // Optional: specify crawling implementation, supports 'naive', 'jina', 'search1api', and 'browserless'\n    impls: ['naive', 'jina', 'search1api', 'browserless'],\n\n    // Optional: content filtering configuration\n    filterOptions: {\n      // Whether to enable Readability algorithm for filtering distracting elements\n      enableReadability: true,\n      // Whether to convert to plain text\n      pureText: false,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Building Custom Docker Image with GitHub Actions for LobeChat\nDESCRIPTION: This YAML workflow configuration demonstrates how to build a custom Docker image that overrides NEXT_PUBLIC environment variables for LobeChat deployment. The workflow uses GitHub Actions to checkout the LobeChat repository, build a custom image with specified environment variables, and push it to GitHub Container Registry.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build Custom Image\n\non:\n  workflow_dispatch: # Manual trigger\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository_owner }}/lobe-chat-database # Name of your image\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          repository: lobehub/lobe-chat\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n          file: Dockerfile.database # Change dockerfile if needed\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          # List all variables you need to overwrite\n          build-args: |\n            NEXT_PUBLIC_BASE_PATH=${{ secrets.NEXT_PUBLIC_BASE_PATH }}\n            NEXT_PUBLIC_SERVICE_MODE=${{ secrets.NEXT_PUBLIC_SERVICE_MODE }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Novita AI Model List in LobeChat\nDESCRIPTION: Controls the available model list for Novita AI, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n### `NOVITA_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+meta-llama/llama-3.1-8b-instruct,+meta-llama/llama-3.1-70b-instruct`\n```\n\n----------------------------------------\n\nTITLE: Configuring Mistral AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Mistral AI service integration, which must be obtained from Mistral AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n### `MISTRAL_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the Mistral AI service\n- Default: -\n- Example: `xxxxxx...xxxxxx=`\n```\n\n----------------------------------------\n\nTITLE: Defining LobeChat Plugin Manifest in JSON\nDESCRIPTION: Example of a LobeChat plugin manifest file. It defines the plugin's API, UI, and other metadata. This manifest describes a plugin that recommends clothes based on mood and gender.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/plugins/development.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api\": [\n    {\n      \"url\": \"http://localhost:3400/api/clothes\",\n      \"name\": \"recommendClothes\",\n      \"description\": \"Recommend clothes to the user based on their mood\",\n      \"parameters\": {\n        \"properties\": {\n          \"mood\": {\n            \"description\": \"The user's current mood, with optional values: happy, sad, anger, fear, surprise, disgust\",\n            \"enums\": [\"happy\", \"sad\", \"anger\", \"fear\", \"surprise\", \"disgust\"],\n            \"type\": \"string\"\n          },\n          \"gender\": {\n            \"type\": \"string\",\n            \"enum\": [\"man\", \"woman\"],\n            \"description\": \"The user's gender, which needs to be asked for from the user to obtain this information\"\n          }\n        },\n        \"required\": [\"mood\", \"gender\"],\n        \"type\": \"object\"\n      }\n    }\n  ],\n  \"gateway\": \"http://localhost:3400/api/gateway\",\n  \"identifier\": \"chat-plugin-template\",\n  \"ui\": {\n    \"url\": \"http://localhost:3400\",\n    \"height\": 200\n  },\n  \"version\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Moonshot AI Setup\nDESCRIPTION: Comprehensive markdown documentation that outlines the process of setting up Moonshot AI integration with LobeChat, including steps for obtaining an API key and configuring the service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/moonshot.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using Moonshot AI API Key in LobeChat\ndescription: >\n  Learn how to integrate Moonshot AI into LobeChat for AI-powered conversations.\n  Follow the steps to get the API key, configure Moonshot AI, and start engaging\n  with AI models.\ntags:\n  - Moonshot AI\n  - Web UI\n  - API Key\n---\n\n# Using Moonshot AI in LobeChat\n\n<Image alt={'Using Moonshot AI in LobeChat'} cover src={'https://github.com/lobehub/lobe-chat/assets/17870709/21b94782-875b-4dee-a572-3c5843f3e1e3'} />\n\nThe Moonshot AI API is now available for everyone to use. This document will guide you on how to use [Moonshot AI](https://www.moonshot.cn/) in LobeChat:\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Configuration in Bash\nDESCRIPTION: Example of setting environment variables for GitHub configuration in LobeChat. Includes personal access token and model list customization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_TOKEN=\"ghp_xxxxxx...xxxxxx=\"\nGITHUB_MODEL_LIST=\"-all,+gpt-4o,+gpt-4o-mini\"\n```\n\n----------------------------------------\n\nTITLE: Styling Casdoor Login Form with CSS\nDESCRIPTION: This CSS code customizes the appearance of the Casdoor login form for LobeChat integration. It styles the login panel with padding, border-radius, and box shadows, customizes the logo sizing, and applies special styling to buttons including transitions and responsive design for mobile devices.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/casdoor.mdx#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .login-panel {\n    padding: 40px 70px 0 70px;\n    border-radius: 10px;\n    background-color: #ffffff;\n    box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;\n  }\n  .panel-logo {\n    width: 64px;\n  }\n  .login-logo-box {\n    margin-top: 20px;\n  }\n\n  #parent-area\n    > main\n    > div\n    > div.login-content\n    > div.login-panel\n    > div.login-form\n    > div\n    > div\n    > button {\n    box-shadow: none !important;\n    border-radius: 10px !important;\n    transition-property: all;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n    border: 1px solid #eee !important;\n  }\n\n  @media (max-width: 640px) {\n    .login-panel {\n      padding: 40px 0 0 0;\n      box-shadow: none;\n    }\n  }\n\n\n\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fireworks AI API Key in LobeChat\nDESCRIPTION: Defines the required API key for Fireworks AI service integration, which must be obtained from Fireworks AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### `FIREWORKSAI_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the Fireworks AI service\n- Default: `-`\n- Example：`xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Webhook Secret for User Lifecycle Notifications\nDESCRIPTION: Configuration for the Clerk webhook secret environment variable which enables the authentication service to notify LobeChat of user lifecycle events (create, update, delete).\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nCLERK_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Setting Google AI Configuration in Bash\nDESCRIPTION: Example of setting environment variables for Google AI configuration in LobeChat. Includes API key, proxy URL, and model list customization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_API_KEY=\"AIraDyDwcw254kwJaGjI9wwaHcdDCS__Vt3xQE\"\nGOOGLE_PROXY_URL=\"https://api.genai.gd.edu.kg/google\"\nGOOGLE_MODEL_LIST=\"-all,+gemini-1.5-flash-latest,+gemini-1.5-pro-latest\"\n```\n\n----------------------------------------\n\nTITLE: Checking Container Logs\nDESCRIPTION: Displays and follows the log output of the LobeChat container to monitor startup progress and detect any issues.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs -f lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Langfuse Observability Configuration Variables\nDESCRIPTION: Environment variables for integrating Langfuse LLM Observability platform including API keys and host configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/analytics.mdx#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nENABLE_LANGFUSE\n- Type: Required\n- Default: 1\n- Example: 1\n\nLANGFUSE_SECRET_KEY\n- Type: Required\n- Default: ``\n- Example: sk-lf-...\n\nLANGFUSE_PUBLIC_KEY\n- Type: Required\n- Default: ``\n- Example: pk-lf-...\n\nLANGFUSE_HOST\n- Type: Required\n- Default: https://cloud.langfuse.com\n- Example: https://cloud.langfuse.com\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionGroupModel in TypeScript\nDESCRIPTION: Defines the SessionGroupModel class for interacting with the sessionGroups table in the database.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '@/database/client/core';\nimport { DB_SessionGroup, DB_SessionGroupSchema } from '@/database/client/schemas/sessionGroup';\nimport { nanoid } from '@/utils/uuid';\n\nclass _SessionGroupModel extends BaseModel {\n  constructor() {\n    super('sessions', DB_SessionGroupSchema);\n  }\n\n  async create(name: string, sort?: number, id = nanoid()) {\n    return this._add({ name, sort }, id);\n  }\n\n  // ... Implementation of other CRUD methods\n}\n\nexport const SessionGroupModel = new _SessionGroupModel();\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen API Key in LobeChat\nDESCRIPTION: Sets the required DashScope API key for Qwen integration, which must be obtained from Alibaba Cloud before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n### `QWEN_API_KEY`\n\n- Type: Required\n- Description: This is the DashScope API key you can obtain from Alibaba Cloud\n- Default: -\n- Example：`sk-xxxxx...xxxxx`\n```\n\n----------------------------------------\n\nTITLE: Importing Okta Provider in Next Auth Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to import the Okta provider and add it to the NextAuth configuration in the src/app/api/auth/next-auth.ts file.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/add-new-authentication-providers.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextAuth } from 'next-auth';\nimport Auth0 from 'next-auth/providers/auth0';\nimport Okta from 'next-auth/providers/okta';\n\n// Import Okta provider\n\n// Import server configuration\nconst { OKTA_CLIENT_ID, OKTA_CLIENT_SECRET, OKTA_ISSUER } = getServerConfig();\n\nconst nextAuth = NextAuth({\n  providers: [\n    // ... Other providers\n\n    Okta({\n      clientId: OKTA_CLIENT_ID,\n      clientSecret: OKTA_CLIENT_SECRET,\n      issuer: OKTA_ISSUER,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fireworks AI Model List in LobeChat\nDESCRIPTION: Specifies how to control the available model list for Fireworks AI, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### `FIREWORKSAI_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+accounts/fireworks/models/firefunction-v2,+accounts/fireworks/models/firefunction-v1`\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Alternative commands to navigate to the project directory and install dependencies using PNPM, which is an auxiliary package manager for LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/setup-development.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd lobe-chat\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Handling S3 Path-Style Access Error in LobeChat\nDESCRIPTION: This code snippet demonstrates an error log that may occur when there are issues with image fetching in LobeChat. It suggests setting the LLM_VISION_IMAGE_USE_BASE64 environment variable to resolve the problem.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/s3.mdx#2025-04-11_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nRoute: [xai] ProviderBizError: Fetching images over plain http:// is not supported.\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for LobeChat\nDESCRIPTION: YAML configuration file for Docker Compose that defines the LobeChat service with essential environment variables like API keys and access codes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker-compose.mdx#2025-04-11_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  lobe-chat:\n    image: lobehub/lobe-chat\n    container_name: lobe-chat\n    restart: always\n    ports:\n      - '3210:3210'\n    environment:\n      OPENAI_API_KEY: sk-xxxx\n      OPENAI_PROXY_URL: https://api-proxy.com/v1\n      ACCESS_CODE: lobe66\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstage AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Upstage AI service integration, which must be obtained from Upstage AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_43\n\nLANGUAGE: markdown\nCODE:\n```\n### `UPSTAGE_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from Upstage AI service\n- Default: -\n- Example: `xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Local Docker Deployment Command\nDESCRIPTION: Complete Docker run command for deploying LobeChat database locally on Mac/Windows with all required environment variables.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker.mdx#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it -d --name lobe-chat-database -p 3210:3210 \\\n  -e DATABASE_URL=postgres://postgres:mysecretpassword@host.docker.internal:5432/postgres \\\n  -e KEY_VAULTS_SECRET=jgwsK28dspyVQoIf8/M3IIHl1h6LYYceSYNXeLpy6uk= \\\n  -e NEXT_AUTH_SECRET=3904039cd41ea1bdf6c93db0db96e250 \\\n  -e NEXT_AUTH_SSO_PROVIDERS=auth0 \\\n  -e AUTH_AUTH0_ID=xxxxxx \\\n  -e AUTH_AUTH0_SECRET=cSX_xxxxx \\\n  -e AUTH_AUTH0_ISSUER=https://lobe-chat-demo.us.auth0.com \\\n  -e APP_URL=http://localhost:3210 \\\n  -e NEXTAUTH_URL=http://localhost:3210/api/auth \\\n  -e S3_ACCESS_KEY_ID=xxxxxxxxxx \\\n  -e S3_SECRET_ACCESS_KEY=xxxxxxxxxx \\\n  -e S3_ENDPOINT=https://xxxxxxxxxx.r2.cloudflarestorage.com \\\n  -e S3_BUCKET=lobechat \\\n  -e S3_PUBLIC_DOMAIN=https://s3-for-lobechat.your-domain.com \\\n  lobehub/lobe-chat-database\n```\n\n----------------------------------------\n\nTITLE: Customizing 01.AI Model List in LobeChat\nDESCRIPTION: Controls the available model list for 01.AI, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n### `ZEROONE_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+yi-large,+yi-large-rag`\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy with Authentication\nDESCRIPTION: Sets up a proxy connection with username and password authentication for secure proxy server connections.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_8\n\nLANGUAGE: env\nCODE:\n```\nPROXY_URL=http://user:password@127.0.0.1:7890\n```\n\n----------------------------------------\n\nTITLE: Creating LobeChat Deployment Directory\nDESCRIPTION: Creates and navigates to a directory for storing LobeChat configuration and database files.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir lobe-chat-db && cd lobe-chat-db\n```\n\n----------------------------------------\n\nTITLE: LobeChat Environment Configuration\nDESCRIPTION: Environment variable configuration for LobeChat database deployment, including authentication, database connection, S3 storage, and other required settings.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Website domain\nAPP_URL=https://your-prod-domain.com\n\n# DB required environment variables\nKEY_VAULTS_SECRET=jgwsK28dspyVQoIf8/M3IIHl1h6LYYceSYNXeLpy6uk=\n# Postgres database connection string\n# Format: postgres://username:password@host:port/dbname; if your pg instance is a Docker container, use the container name\nDATABASE_URL=postgres://postgres:mysecretpassword@my-postgres:5432/postgres\n\n# NEXT_AUTH related, can use auth0, Azure AD, GitHub, Authentik, zitadel, etc. If you have other access requirements, feel free to submit a PR\nNEXT_AUTH_SECRET=3904039cd41ea1bdf6c93db0db96e250\nNEXT_AUTH_SSO_PROVIDERS=auth0\nNEXTAUTH_URL=https://your-prod-domain.com/api/auth\nAUTH_AUTH0_ID=xxxxxx\nAUTH_AUTH0_SECRET=cSX_xxxxx\nAUTH_AUTH0_ISSUER=https://lobe-chat-demo.us.auth0.com\n\n# S3 related\nS3_ACCESS_KEY_ID=xxxxxxxxxx\nS3_SECRET_ACCESS_KEY=xxxxxxxxxx\nS3_ENDPOINT=https://xxxxxxxxxx.r2.cloudflarestorage.com\nS3_BUCKET=lobechat\nS3_PUBLIC_DOMAIN=https://s3-for-lobechat.your-domain.com\n```\n\n----------------------------------------\n\nTITLE: Customizing Volcengine Model List in LobeChat\nDESCRIPTION: Controls the available model list for Volcengine, allowing complex model configuration using specialized syntax including deployment names.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_49\n\nLANGUAGE: markdown\nCODE:\n```\n### `VOLCENGINE_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name->deploymentName=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+deepseek-r1->deepseek-r1-250120,+deepseek-v3->deepseek-v3-250324,+doubao-1.5-pro-256k->doubao-1-5-pro-256k-250115,+doubao-1.5-pro-32k->doubao-1-5-pro-32k-250115,+doubao-1.5-lite-32k->doubao-1-5-lite-32k-250115`\n```\n\n----------------------------------------\n\nTITLE: Configuring 01.AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for 01.AI service integration, which must be obtained from 01.AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n### `ZEROONE_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the 01.AI service\n- Default: -\n- Example：`xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic AI in Bash\nDESCRIPTION: Example of setting environment variables for Anthropic AI configuration in LobeChat. Includes API key and proxy URL.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=\"sk-ant-apixx-xxxxxxxxx-xxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxx\"\nANTHROPIC_PROXY_URL=\"https://my-anthropic-proxy.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Spark AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Spark AI service integration, which must be obtained from Spark AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\n### `SPARK_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from Spark AI service\n- Default: -\n- Example: `xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Service on Linux\nDESCRIPTION: Edit the Ollama systemd service file to set environment variables for cross-origin access and host binding on Linux.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[Service]\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"\nEnvironment=\"OLLAMA_ORIGINS=*\"\n```\n\n----------------------------------------\n\nTITLE: Extended Capabilities Configuration Syntax for LobeChat Models\nDESCRIPTION: Defines the syntax for configuring extended capabilities of models including maximum tokens and special abilities like vision processing, reasoning, search, function calling, file handling, and image output generation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/model-list.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nid->deploymentName=displayName<maxToken:vision:reasoning:search:fc:file:imageOutput>\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Bedrock Configuration in Bash\nDESCRIPTION: Example of setting environment variables for AWS Bedrock configuration in LobeChat. Includes enabling AWS Bedrock, access key ID, secret access key, and region.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nENABLED_AWS_BEDROCK=1\nAWS_ACCESS_KEY_ID=\"AKIA5STVRLFSB4S9HWBR\"\nAWS_SECRET_ACCESS_KEY=\"Th3vXxLYpuKcv2BARktPSTPxx+jbSiFT6/0w7oEC\"\nAWS_REGION=\"us-east-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Volcengine API Key in LobeChat\nDESCRIPTION: Sets the required API key for Volcengine service integration, which must be obtained from Volcengine's console before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\n### `VOLCENGINE_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from Volcengine service, you can check it out [here](https://console.volcengine.com/ark/region:ark+cn-beijing/endpoint)\n- Default: -\n- Example: `ad925b3d-aaaa-bbbb-cccc-51fde2f50547`\n```\n\n----------------------------------------\n\nTITLE: Configuring Wenxin in Bash\nDESCRIPTION: Example of setting the API key environment variable for Baidu Wenxin configuration in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nWENXIN_API_KEY=\"xxxxxx...xxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration for Automatic LobeChat Updates\nDESCRIPTION: Crontab entry to automatically execute the update script every 5 minutes and log the output.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.zh-CN.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n*/5 * * * * /path/to/auto-update-lobe-chat.sh >> /path/to/auto-update-lobe-chat.log 2>&1\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq AI Proxy URL in LobeChat\nDESCRIPTION: Allows overriding the default Groq API base URL with a custom proxy, useful for network restrictions or specific deployment scenarios.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n### `GROQ_PROXY_URL`\n\n- Type: Optional\n- Description: If you manually configure the Groq API proxy, you can use this configuration item to override the default Groq API request base URL\n- Default: `https://api.groq.com/openai/v1`\n- Example: `https://my-groq-proxy.com/v1`\n```\n\n----------------------------------------\n\nTITLE: LobeChat Environment Configuration\nDESCRIPTION: Example of a lobe.env configuration file containing various environment variables for LobeChat deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker.mdx#2025-04-11_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=sk-xxxx\nOPENAI_PROXY_URL=https://api-proxy.com/v1\nACCESS_CODE=arthals2333\nOPENAI_MODEL_LIST=-gpt-4,-gpt-4-32k,-gpt-3.5-turbo-16k,gpt-3.5-turbo-1106=gpt-3.5-turbo-16k,gpt-4-0125-preview=gpt-4-turbo,gpt-4-vision-preview=gpt-4-vision\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeabur Pack for Serverless Deployment\nDESCRIPTION: Configuration file (zbpack.json) required for deploying LobeChat as a serverless function on Zeabur. This configuration disables Dockerfile usage and enables serverless mode.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/zeabur.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignore_dockerfile\": true,\n  \"serverless\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variables setup for LobeChat deployment including proxy settings and database configuration\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n# Proxy, if you need it\n# HTTP_PROXY=http://localhost:7890\n# HTTPS_PROXY=http://localhost:7890\n\n# Other environment variables, as needed. You can refer to the environment variables configuration for the client version, making sure not to have ACCESS_CODE.\n# OPENAI_API_KEY=sk-xxxx\n# OPENAI_PROXY_URL=https://api.openai.com/v1\n# OPENAI_MODEL_LIST=...\n\n# ===========================\n# ====== Preset config ======\n# ===========================\n# if no special requirements, no need to change\nLOBE_PORT=3210\nCASDOOR_PORT=8000\nMINIO_PORT=9000\n\n# Postgres related, which are the necessary environment variables for DB\nLOBE_DB_NAME=lobechat\nPOSTGRES_PASSWORD=uWNZugjBqixf8dxC\n```\n\n----------------------------------------\n\nTITLE: Configuring Perplexity AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Perplexity AI service integration, which must be obtained from Perplexity AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### `PERPLEXITY_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from Perplexity AI\n- Default: -\n- Example: `pplx-xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration for Tongyi Qianwen Guide\nDESCRIPTION: Markdown frontmatter and content structure defining the documentation for integrating Tongyi Qianwen with LobeChat. Includes metadata, tags, and step-by-step instructions with embedded images and callouts.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/qwen.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using Qwen2 API Key in LobeChat\ndescription: >\n  Learn how to integrate and utilize Tongyi Qianwen, a powerful language model\n  by Alibaba Cloud, in LobeChat for various tasks. Follow the steps to activate\n  the service, obtain the API key, and configure Tongyi Qianwen for seamless\n  interaction.\ntags:\n  - Tongyi Qianwen\n  - Alibaba Cloud\n  - DashScope\n  - API key\n  - Web UI\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen API Proxy URL in LobeChat\nDESCRIPTION: Allows overriding the default Qwen API base URL with a custom proxy, useful for network restrictions or specific deployment scenarios.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n### `QWEN_PROXY_URL`\n\n- Type: Optional\n- Description: If you manually configure the Qwen API proxy, you can use this configuration item to override the default Qwen API request base URL\n- Default: `https://dashscope.aliyuncs.com/compatible-mode/v1`\n- Example: `https://my-qwen-proxy.com/v1`\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Database Container with PGVector\nDESCRIPTION: Docker commands to create a Postgres database instance with PGVector plugin on a network named 'pg'.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create pg\n\ndocker run --name my-postgres --network pg -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d pgvector/pgvector:pg16\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration for S3 Bucket\nDESCRIPTION: JSON configuration for Cross-Origin Resource Sharing (CORS) settings to allow access from specific domains.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllowedOrigins\": [\"https://your-project.vercel.app\"],\n    \"AllowedMethods\": [\"GET\", \"PUT\", \"HEAD\", \"POST\", \"DELETE\"],\n    \"AllowedHeaders\": [\"*\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Gitee AI Setup\nDESCRIPTION: Structured markdown documentation that outlines the process of setting up and configuring Gitee AI in LobeChat. The document includes steps for obtaining API keys, configuring the service, and important warnings about API key management and usage costs.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/giteeai.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using Gitee AI in LobeChat\ndescription: >\n  Learn how to configure and use Gitee AI's API Key in LobeChat to start\n  conversations and interactions.\ntags:\n  - LobeChat\n  - Gitee AI\n  - API Key\n  - Web UI\n---\n\n# Using Gitee AI in LobeChat\n\n[Gitee AI](https://ai.gitee.com/) is an open-source platform based on Git code hosting technology, specifically designed for AI application scenarios...\n```\n\n----------------------------------------\n\nTITLE: Configuring Perplexity AI Proxy URL in LobeChat\nDESCRIPTION: Allows overriding the default Perplexity API base URL with a custom proxy, useful for network restrictions or specific deployment scenarios.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### `PERPLEXITY_PROXY_URL`\n\n- Type: Optional\n- Description: If you manually configure the Perplexity API proxy, you can use this configuration item to override the default Perplexity API request base URL\n- Default: `https://api.Perplexity.ai`\n- Example: `https://my-Perplexity-proxy.com`\n```\n\n----------------------------------------\n\nTITLE: Executing Database Seed Command with Encryption Flag\nDESCRIPTION: Command to seed the Logto database with the encrypt-base-role flag, used when standard seeding fails on third-party databases like Neon.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto db seed --encrypt-base-role\n```\n\n----------------------------------------\n\nTITLE: Configuring BAICHUAN API Key in LobeChat\nDESCRIPTION: Sets the required API key for BAICHUAN service integration, which must be obtained from BAICHUAN before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\n### `BAICHUAN_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the BAICHUAN service\n- Default: -\n- Example：`xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Serverless Postgres Database in LobeChat\nDESCRIPTION: Required environment variables to configure a Serverless Postgres database for LobeChat deployment. These include the DATABASE_URL and service mode specifications.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Serverless Postgres DB Url\nDATABASE_URL=\n\n# Specify service mode as server, otherwise it will not enter the server-side database\nNEXT_PUBLIC_SERVICE_MODE=server\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Compose Configuration for Domain-Based Deployment\nDESCRIPTION: YAML configuration snippet for Docker Compose that sets up LobeChat with Casdoor authentication and MinIO storage using domain-based access. It includes CORS configuration and endpoints for production deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n'MINIO_API_CORS_ALLOW_ORIGIN=https://lobe.example.com'\n```\n\nLANGUAGE: yaml\nCODE:\n```\norigin: 'https://auth.example.com'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# - 'APP_URL=http://localhost:3210'\n- 'APP_URL=https://lobe.example.com'\n\n- 'NEXT_AUTH_SSO_PROVIDERS=casdoor'\n- 'KEY_VAULTS_SECRET=Kix2wcUONd4CX51E/ZPAd36BqM4wzJgKjPtz2sGztqQ='\n- 'NEXT_AUTH_SECRET=NX2kaPE923dt6BL2U8e9oSre5RfoT7hg'\n# - 'AUTH_URL=http://localhost:${LOBE_PORT}/api/auth'\n- 'AUTH_URL=https://lobe.example.com/api/auth'\n\n# - 'AUTH_CASDOOR_ISSUER=http://localhost:${CASDOOR_PORT}'\n- 'AUTH_CASDOOR_ISSUER=https://auth.example.com'\n\n- 'DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgresql:5432/${LOBE_DB_NAME}'\n# - 'S3_ENDPOINT=http://localhost:${MINIO_PORT}'\n- 'S3_ENDPOINT=https://minio.example.com'\n\n- 'S3_BUCKET=${MINIO_LOBE_BUCKET}'\n# - 'S3_PUBLIC_DOMAIN=http://localhost:${MINIO_PORT}'\n- 'S3_PUBLIC_DOMAIN=https://minio.example.com'\n\n- 'S3_ENABLE_PATH_STYLE=1'\n- 'LLM_VISION_IMAGE_USE_BASE64=1'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Langfuse Integration with LobeChat\nDESCRIPTION: This code snippet shows the environment variables needed to enable Langfuse integration with LobeChat. It includes enabling the feature, setting the secret and public API keys, and specifying the Langfuse host URL.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/observability/langfuse.mdx#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nENABLE_LANGFUSE = '1'\nLANGFUSE_SECRET_KEY = 'sk-lf...'\nLANGFUSE_PUBLIC_KEY = 'pk-lf...'\nLANGFUSE_HOST = 'https://cloud.langfuse.com'\n```\n\n----------------------------------------\n\nTITLE: Customizing Perplexity AI Model List in LobeChat\nDESCRIPTION: Controls the available model list for Perplexity AI, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### `PERPLEXITY_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see\n- Default: `-`\n- Example: `-all,+llama-3.1-sonar-small-128k-online,+llama-3.1-sonar-small-128k-chat`\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO S3 Bucket Policy\nDESCRIPTION: JSON policy configuration for MinIO S3 bucket to allow avatar storage in Casdoor\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\"*\"]\n      },\n      \"Action\": [\"s3:GetBucketLocation\"],\n      \"Resource\": [\"arn:aws:s3:::casdoor\"]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\"*\"]\n      },\n      \"Action\": [\"s3:ListBucket\"],\n      \"Resource\": [\"arn:aws:s3:::casdoor\"],\n      \"Condition\": {\n        \"StringEquals\": {\n          \"s3:prefix\": [\"files/*\"]\n        }\n      }\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\"*\"]\n      },\n      \"Action\": [\"s3:PutObject\", \"s3:DeleteObject\", \"s3:GetObject\"],\n      \"Resource\": [\"arn:aws:s3:::casdoor/**\"]\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TAICHU API Key in LobeChat\nDESCRIPTION: Sets the required API key for TAICHU service integration, which must be obtained from TAICHU before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\n### `TAICHU_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the TAICHU service\n- Default: -\n- Example：`xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Starting LobeChat Database Docker Container\nDESCRIPTION: Docker commands to start the LobeChat database container and check its logs.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker.mdx#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it -d -p 3210:3210 --network pg --env-file lobe-chat.env --name lobe-chat-database lobehub/lobe-chat-database\n\ndocker logs -f lobe-chat-database\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Secret Key with OpenSSL\nDESCRIPTION: Command to generate a secure random key for encrypting session tokens in Auth.js, using OpenSSL to create a Base64-encoded 32-byte random string.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/auth.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Customizing LobeChat Model List\nDESCRIPTION: Demonstrates the basic syntax for customizing model lists in LobeChat. The format allows specifying model ID, deployment name, display name, and extended capabilities with maxToken and other features separated by colons.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/model-list.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nid->deploymentName=displayName<maxToken:vision:reasoning:search:fc:file:imageOutput>,model2,model3\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Groq AI service integration, which must be obtained from Groq AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n### `GROQ_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from Groq AI\n- Default: -\n- Example: `gsk_xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Configuring 360 AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for 360 AI service integration, which must be obtained from 360 AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\n### `AI360_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the 360 AI service\n- Default: -\n- Example：`xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Checking LobeChat Container Logs for Troubleshooting\nDESCRIPTION: Shell command to view the LobeChat container logs for diagnosing authentication and connection issues.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs -f lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Validation Environment Variable in Dockerfile\nDESCRIPTION: Example of how to set the NODE_TLS_REJECT_UNAUTHORIZED environment variable in a Dockerfile to disable certificate validation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/faq/proxy-with-unable-to-verify-leaf-signature.mdx#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# In the Dockerfile\nENV NODE_TLS_REJECT_UNAUTHORIZED=0\n```\n\n----------------------------------------\n\nTITLE: Setup and Deployment Commands\nDESCRIPTION: Shell commands for installing and configuring the LobeChat deployment\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -fsSL https://raw.githubusercontent.com/lobehub/lobe-chat/HEAD/docker-compose/local/setup.sh) -f -l zh_CN\ndocker compose up -d\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs -f lobe-chat\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose down\nsudo rm -rf ./data\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Stepfun AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Stepfun AI service integration, which must be obtained from Stepfun AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n### `STEPFUN_API_KEY`\n\n- Type: Required\n- Description: This is the DashScope API key you can obtain from Stepfun AI service\n- Default: -\n- Example：`sk-xxxxx...xxxxx`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation and Environment Configuration Scripts\nDESCRIPTION: Shell commands for installing LobeChat with Chinese localization and modifying MinIO credentials in the .env file for security purposes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -fsSL https://lobe.li/setup.sh) -l zh_CN\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Siliconflow API Key in LobeChat\nDESCRIPTION: Sets the required API key for Siliconflow service integration, which must be obtained from Siliconflow before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n### `SILICONCLOUD_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from Siliconflow service\n- Default: -\n- Example: `xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Provider Runtime Mapping Implementation in TypeScript\nDESCRIPTION: Runtime provider mapping configuration that defines the correspondence between provider names and their respective implementation classes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const providerRuntimeMap = {\n  openai: LobeOpenAI,\n  anthropic: LobeAnthropicAI,\n  google: LobeGoogleAI,\n  azure: LobeAzureOpenAI,\n  bedrock: LobeBedrockAI,\n  ollama: LobeOllamaAI,\n  // ...over 40 other model providers\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Callback URL for LobeChat\nDESCRIPTION: URL format for configuring the allowed callback URL in Auth0 application settings. This URL must match the deployed application's domain.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/auth0.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttp(s)://your-domain/api/auth/callback/auth0\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Zhipu AI Integration Guide\nDESCRIPTION: Markdown document structure containing steps for integrating Zhipu AI with LobeChat, including front matter metadata, headers, image references, and step-by-step instructions with callouts.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/zhipu.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using Zhipu ChatGLM API Key in LobeChat\ndescription: >\n  Learn how to integrate and utilize Zhipu AI models in LobeChat for enhanced\n  conversational experiences. Obtain the API key, configure settings, and start\n  engaging with cognitive intelligence.\ntags:\n  - Zhipu AI\n  - ChatGLM\n  - API Key\n  - Web UI\n---\n\n# Using Zhipu ChatGLM in LobeChat\n```\n\n----------------------------------------\n\nTITLE: Customizing HUNYUAN Model List in LobeChat\nDESCRIPTION: Controls the available model list for HUNYUAN, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_47\n\nLANGUAGE: markdown\nCODE:\n```\n### `HUNYUAN_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+hunyuan-lite,+hunyuan-standard`\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Container\nDESCRIPTION: Commands to stop and remove the existing LobeChat Docker container before updating to the latest version.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ndocker stop lobe-chat\ndocker rm lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Configuring Siliconflow Proxy URL in LobeChat\nDESCRIPTION: Allows overriding the default Siliconflow API base URL with a custom proxy, useful for network restrictions or specific deployment scenarios.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\n### `SILICONCLOUD_PROXY_URL`\n\n- Type: Optional\n- Description: If you manually configure the Siliconflow API proxy, you can use this configuration item to override the default Siliconflow API request base URL\n- Default: `https://api.siliconflow.cn/v1`\n- Example: `https://my-siliconflow-proxy.com/v1`\n```\n\n----------------------------------------\n\nTITLE: Successful Startup Log\nDESCRIPTION: Example log output indicating successful startup of the LobeChat service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n[Database] Start to migration...\n✅ database migration pass.\n-------------------------------------\n  ▲ Next.js 14.x.x\n  - Local:        http://localhost:3210\n  - Network:      http://0.0.0.0:3210\n\n ✓ Starting...\n ✓ Ready in 95ms\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Github Authentication in LobeChat\nDESCRIPTION: This snippet outlines the required environment variables for configuring Github authentication in LobeChat. It includes variables for Auth.js session encryption, SSO provider selection, Github App credentials, and OAuth callback URL.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/github.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable      | Type     | Description                                                                                                                                                                                           |\n| ------------------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `NEXT_AUTH_SECRET`        | Required | Key used to encrypt Auth.js session tokens. You can generate the key using the command: `openssl rand -base64 32`                                                                                     |\n| `NEXT_AUTH_SSO_PROVIDERS` | Required | Select the Single Sign-On provider for LobeChat. Use `github` for Github.                                                                                                                             |\n| `AUTH_GITHUB_ID`          | Required | Client ID in the Github App details page.                                                                                                                                                             |\n| `AUTH_GITHUB_SECRET`      | Required | Client Secret in the Github App details page.                                                                                                                                                         |\n| `NEXTAUTH_URL`            | Required | This URL is used to specify the callback address for Auth.js when performing OAuth authentication. Only set it if the default generated redirect address is incorrect. `https://example.com/api/auth` |\n```\n\n----------------------------------------\n\nTITLE: Deploying LobeChat with Ollama Docker Configuration\nDESCRIPTION: Docker command to run LobeChat container with Ollama proxy configuration. Sets up the container on port 3210 and configures the Ollama proxy URL to connect to the local Ollama instance.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/changelog/2024-02-14-ollama.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3210:3210 -e OLLAMA_PROXY_URL=http://host.docker.internal:11434/v1 lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: InfiniAI Section Header in LobeChat Documentation\nDESCRIPTION: Section header for InfiniAI configuration options, though no specific parameters are documented in this section.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_51\n\nLANGUAGE: markdown\nCODE:\n```\n## InfiniAI\n```\n\n----------------------------------------\n\nTITLE: 定义天气查询工具 JSON Schema\nDESCRIPTION: 定义了一个名为 'realtime-weather____fetchCurrentWeather' 的函数，用于获取当前天气情况。该函数接受一个必需的 'city' 参数。\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/tools-calling.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function\": {\n    \"description\": \"获取当前天气情况\",\n    \"name\": \"realtime-weather____fetchCurrentWeather\",\n    \"parameters\": {\n      \"properties\": {\n        \"city\": {\n          \"description\": \"城市名称\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"city\"],\n      \"type\": \"object\"\n    }\n  },\n  \"type\": \"function\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Siliconflow Model List in LobeChat\nDESCRIPTION: Controls the available model list for Siliconflow, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_42\n\nLANGUAGE: markdown\nCODE:\n```\n### `SILICONCLOUD_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+deepseek-ai/DeepSeek-V2.5,+Qwen/Qwen2.5-7B-Instruct`\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for LobeChat Image Generation\nDESCRIPTION: Comprehensive markdown documentation detailing the setup and usage of DALL-E and Midjourney plugins for image generation in LobeChat. Includes configuration steps, API key setup, and plugin installation instructions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/foundation/text2image.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Guide to Using Text-to-Image Models in LobeChat\ndescription: >\n  Learn how to utilize text-to-image generation in LobeChat using DALL-E and\n  Midjourney plugins. Generate images seamlessly with AI assistance.\ntags:\n  - Text-to-Image Models\n  - LobeChat\n  - DALL-E\n  - Midjourney\n  - Plugin Installation\n  - AI Assistance\n---\n\n# Guide to Using Text-to-Image Models in LobeChat\n\nLobeChat supports text-to-image generation through a plugin mechanism. Currently, LobeChat comes with the built-in DALL-E plugin, which allows users to generate images using OpenAI's DALL-E model. Additionally, users can also install the official Midjourney plugin to utilize the Midjourney text-to-image feature.\n\n## DALL-E Model\n\nIf you have configured the OpenAI API, you can enable the DALL-E plugin directly in the assistant interface and input prompts in the conversation for AI to generate images for you.\n\n<Image alt={'DALL-E Plugin'} src={'https://github.com/user-attachments/assets/7b11b795-4dd3-4020-a9ba-a3723d5f1f28'} />\n\nIf the DALL-E plugin is not available, please check if the OpenAI API key has been correctly configured.\n\n## Midjourney Model\n\nLobeChat also offers the Midjourney plugin, which generates images by calling the Midjourney API. Please install the Midjourney plugin in the plugin store beforehand.\n\n<Image alt={'Midjourney Plugin'} src={'https://github.com/user-attachments/assets/5f526846-02cd-4dbc-b6e3-a603fa5ac8e7'} />\n\n<Callout type={'info'}>\n  info For plugin installation, please refer to [Plugin Usage](/docs/usage/plugins/basic-usage)\n</Callout>\n\nWhen using the Midjourney plugin for the first time, you will need to fill in your Midjourney API key in the plugin settings.\n\n<Image alt={'Midjourney Plugin Settings'} src={'https://github.com/user-attachments/assets/a5d7a543-aec5-457e-a36c-aa1f82f7bc8a'} />\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Secret Key for LobeChat\nDESCRIPTION: Command to generate a secure random key using OpenSSL for the NEXT_AUTH_SECRET environment variable, which is required for encrypting Auth.js session tokens.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/zitadel.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeabur for Serverless LobeChat Deployment\nDESCRIPTION: This JSON configuration file (zbpack.json) instructs Zeabur to ignore any existing Dockerfile and deploy LobeChat as a serverless function rather than a container. This configuration should be placed in the root directory of your forked LobeChat repository.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/zeabur.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignore_dockerfile\": true,\n  \"serverless\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Moonshot AI Proxy URL in LobeChat\nDESCRIPTION: Allows overriding the default Moonshot API base URL with a custom proxy, useful for network restrictions or specific deployment scenarios.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### `MOONSHOT_PROXY_URL`\n\n- Type: Optional\n- Description: If you manually configure the Moonshot API proxy, you can use this configuration item to override the default Moonshot API request base URL\n- Default: `https://api.moonshot.cn/v1`\n- Example: `https://my-moonshot-proxy.com/v1`\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Access for LobeChat\nDESCRIPTION: Example URL patterns for accessing LobeChat after deployment, showing both domain name and IP:port access methods.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/btpanel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://demo.lobechat\nhttp://<aaPanelIP>:3210\n```\n\n----------------------------------------\n\nTITLE: Configuring A21 AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for A21 AI service integration, which must be obtained from A21 AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\n### `AI21_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from `AI21_API_KEY` service\n- Default: -\n- Example: `xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Setting SEARXNG_URL Environment Variable in Shell\nDESCRIPTION: This snippet shows how to configure the SearXNG URL environment variable, which is necessary to enable online search functionality in LobeChat. The URL should point to a valid SearXNG instance.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/online-search.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSEARXNG_URL=https://searxng-instance.com\n```\n\n----------------------------------------\n\nTITLE: Styling Casdoor Login Form with CSS\nDESCRIPTION: Custom CSS styles for enhancing the Casdoor login form appearance, including panel styling, logo customization, and mobile responsiveness.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/casdoor.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .login-panel {\n    padding: 40px 70px 0 70px;\n    border-radius: 10px;\n    background-color: #ffffff;\n    box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;\n  }\n  .panel-logo {\n    width: 64px;\n  }\n  .login-logo-box {\n    margin-top: 20px;\n  }\n\n  #parent-area\n    > main\n    > div\n    > div.login-content\n    > div.login-panel\n    > div.login-form\n    > div\n    > div\n    > button {\n    box-shadow: none !important;\n    border-radius: 10px !important;\n    transition-property: all;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n    border: 1px solid #eee !important;\n  }\n\n  @media (max-width: 640px) {\n    .login-panel {\n      padding: 40px 0 0 0;\n      box-shadow: none;\n    }\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Displaying RepoCloud Deployment Button in Markdown\nDESCRIPTION: This snippet shows how to embed a 'Deploy to RepoCloud' button in a Markdown document. It uses an image link that directs users to the RepoCloud deployment page for the LobeChat application.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/repocloud.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to RepoCloud](https://d16t0pc4846x52.cloudfront.net/deploy.svg)](https://repocloud.io/details/?app_id=248)\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy URL for External Service Connections\nDESCRIPTION: Specifies a proxy URL for connecting to external services, which can be useful in environments with restricted internet access or for bypassing regional restrictions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_7\n\nLANGUAGE: env\nCODE:\n```\nPROXY_URL=http://127.0.0.1:7890\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Provider for LobeChat\nDESCRIPTION: YAML configuration for setting up a new OIDC provider in Authelia for LobeChat integration. Includes required fields like client ID, secret, redirect URIs, and scopes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/authelia.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ...\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    - id: lobe-chat\n      description: LobeChat\n      secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n      public: false\n      authorization_policy: two_factor\n      redirect_uris:\n        - https://chat.example.com/api/auth/callback/authelia\n      scopes:\n        - openid\n        - profile\n        - email\n      userinfo_signing_algorithm: none\n```\n\n----------------------------------------\n\nTITLE: Configuring HUNYUAN API Key in LobeChat\nDESCRIPTION: Sets the required API key for HUNYUAN service integration, which must be obtained from HUNYUAN before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\n### `HUNYUAN_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied from HUNYUAN service\n- Default: -\n- Example: `xxxxxx...xxxxxx`\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI in Bash\nDESCRIPTION: Example of setting environment variables for Azure OpenAI configuration in LobeChat. Includes API key, endpoint, API version, and model list customization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_API_KEY=\"c55168be3874490ef0565d9779ecd5a6\"\nAZURE_ENDPOINT=\"https://docs-test-001.openai.azure.com\"\nAZURE_API_VERSION=\"2023-02-01\"\nAZURE_MODEL_LIST=\"gpt-35-turbo->my-deploy=GPT 3.5 Turbo\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for ZITADEL Authentication in LobeChat\nDESCRIPTION: A table listing the required environment variables for setting up ZITADEL authentication in LobeChat, including their types and descriptions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/zitadel.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n| 环境变量                      | 类型 | 描述                                                                                  |\n| ------------------------- | -- | ----------------------------------------------------------------------------------- |\n| `NEXT_AUTH_SECRET`        | 必选 | 用于加密 Auth.js 会话令牌的密钥。您可以使用以下命令生成密钥：`openssl rand -base64 32`                        |\n| `NEXT_AUTH_SSO_PROVIDERS` | 必选 | 为 LobeChat 选择单点登录提供程序。对于 ZITADEL，请填写 `zitadel`。                                     |\n| `AUTH_ZITADEL_ID`         | 必选 | ZITADEL 应用的 Client ID（`ClientId`）。                                                  |\n| `AUTH_ZITADEL_SECRET`     | 必选 | ZITADEL 应用的 Client Secret（`ClientSecret`）。                                          |\n| `AUTH_ZITADEL_ISSUER`     | 必选 | ZITADEL 应用的 OpenID Connect 颁发者（issuer）URL。                                          |\n| `NEXTAUTH_URL`            | 必选 | 该 URL 用于指定 Auth.js 中执行 OAuth 认证的回调地址。仅当默认地址不正确时才需要设置。`https://example.com/api/auth` |\n```\n\n----------------------------------------\n\nTITLE: Generating Secret Key Command for Auth.js\nDESCRIPTION: Command to generate a secure random secret key for encrypting Auth.js session tokens. This is required for the NEXT_AUTH_SECRET environment variable.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Code for LobeChat Security\nDESCRIPTION: Sets a password to protect access to the LobeChat service. Setting a long, complex password is recommended to prevent brute force attacks.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nACCESS_CODE=awCTe)re_r74\n```\n\n----------------------------------------\n\nTITLE: Generating Secret Key for Auth.js Session Token in LobeChat\nDESCRIPTION: Command to generate a secure random key for the NEXT_AUTH_SECRET environment variable which is used to encrypt Auth.js session tokens in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/keycloak.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Google Analytics Configuration Variable\nDESCRIPTION: Environment variable for setting up Google Analytics with measurement ID in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/analytics.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nGOOGLE_ANALYTICS_MEASUREMENT_ID\n- Type: Required\n- Default: -\n- Example: G-63LP2TV03T\n```\n\n----------------------------------------\n\nTITLE: Configuring PPIO in Bash\nDESCRIPTION: Example of setting environment variables for PPIO configuration in LobeChat. Includes API key and model list customization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPPIO_API_KEY=\"sk_xxxxxxxxxx\"\nPPIO_MODEL_LIST=\"-all,+deepseek/deepseek-v3/community,+deepseek/deepseek-r1-distill-llama-70b\"\n```\n\n----------------------------------------\n\nTITLE: Setting Authentik Redirect URL in LobeChat\nDESCRIPTION: The redirect URL pattern to be configured in Authentik provider settings. This URL needs to be set to match your LobeChat deployment domain with the authentication callback path.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/authentik.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://your-domain/api/auth/callback/authentik\n```\n\n----------------------------------------\n\nTITLE: Defining SessionGroup Data Model Schema in TypeScript\nDESCRIPTION: Establishes the data model schema for DB_SessionGroup using Zod for type validation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nexport const DB_SessionGroupSchema = z.object({\n  name: z.string(),\n  sort: z.number().optional(),\n});\n\nexport type DB_SessionGroup = z.infer<typeof DB_SessionGroupSchema>;\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Selection Mode for Multiple Keys\nDESCRIPTION: Controls how LobeChat selects API keys when multiple keys are available. Supports 'random' (default) for selecting a random key or 'turn' for polling keys in sequence.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nAPI_KEY_SELECT_MODE=random\n```\n\n----------------------------------------\n\nTITLE: Core i18n Implementation in TypeScript\nDESCRIPTION: Illustrates the core implementation logic for internationalization in LobeChat using i18next. The code demonstrates language detection, dynamic resource loading, and handling of right-to-left languages by setting document direction.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/internationalization/internationalization-implementation.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport resourcesToBackend from 'i18next-resources-to-backend';\nimport { isRtlLang } from 'rtl-detect';\n\n// Create i18n instance and configure\nconst createI18nInstance = (lang) => {\n  const i18nInstance = i18n\n    .use(LanguageDetector) // Use language detection\n    .use(\n      resourcesToBackend((language, namespace) => {\n        // Dynamically load translation resources for the corresponding language\n        return import(`path/to/locales/${language}/${namespace}.json`);\n      }),\n    );\n\n  // Listen for language change events and dynamically set document direction\n  i18nInstance.on('languageChanged', (language) => {\n    const direction = isRtlLang(language) ? 'rtl' : 'ltr';\n    document.documentElement.dir = direction; // Set HTML document direction\n  });\n\n  // Initialize i18n instance\n  i18nInstance.init({\n    // Relevant configurations\n  });\n\n  return i18nInstance;\n};\n```\n\n----------------------------------------\n\nTITLE: Umami Analytics Configuration Variables\nDESCRIPTION: Environment variables for setting up Umami Analytics with website ID and script URL configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/analytics.mdx#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nUMAMI_WEBSITE_ID\n- Type: Required\n- Default: -\n- Example: E738D82A-EE9E-4806-A81F-0CA3CAE57F65\n\nUMAMI_SCRIPT_URL\n- Type: Optional\n- Default: https://analytics.umami.is/script.js\n- Example: https://umami.your-site.com/script.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Moonshot AI API Key in LobeChat\nDESCRIPTION: Sets the required API key for Moonshot AI service integration, which must be obtained from Moonshot AI before use.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### `MOONSHOT_API_KEY`\n\n- Type: Required\n- Description: This is the API key you applied for in the Moonshot AI service\n- Default: -\n- Example: `Y2xpdGhpMzNhZXNoYjVtdnZjMWc6bXNrLWIxQlk3aDNPaXpBWnc0V1RaMDhSRmRFVlpZUWY=`\n```\n\n----------------------------------------\n\nTITLE: Docker One-Click Upgrade Command for Logto\nDESCRIPTION: Custom command for running in a Docker container to perform a one-click upgrade of Logto, including database seeding, migration, and starting the application.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.zh-CN.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"npm run cli db seed -- --swe --encrypt-base-role\" && npx @logto/cli db alteration deploy $version && npm start\n```\n\n----------------------------------------\n\nTITLE: Using OAuth Session Hook in Frontend (TypeScript)\nDESCRIPTION: This snippet shows how to use the useOAuthSession() hook to get user information in frontend pages.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/add-new-authentication-providers.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useOAuthSession } from '@/hooks/useOAuthSession';\n\nconst { user, isOAuthLoggedIn } = useOAuthSession();\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed Private IP Addresses for SSRF Exceptions\nDESCRIPTION: Defines a list of specific private IP addresses that are allowed when SSRF protection is enabled. Multiple IPs can be specified as a comma-separated list.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nSSRF_ALLOW_IP_ADDRESS_LIST=198.18.1.62,224.0.0.3\n```\n\n----------------------------------------\n\nTITLE: Migration Test Implementation - TypeScript\nDESCRIPTION: Unit tests for migration verification including single version and multi-version migration scenarios\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MigrationData, VersionController } from '@/migrations/VersionController';\n\nimport { MigrationV1ToV2 } from '../FromV1ToV2';\nimport inputV1Data from '../FromV1ToV2/fixtures/input-v1-session.json';\nimport inputV2Data from './fixtures/input-v2-session.json';\nimport outputV3DataFromV1 from './fixtures/output-v3-from-v1.json';\nimport outputV3Data from './fixtures/output-v3.json';\nimport { MigrationV2ToV3 } from './index';\n\ndescribe('MigrationV2ToV3', () => {\n  let migrations;\n  let versionController: VersionController<any>;\n\n  beforeEach(() => {\n    migrations = [MigrationV2ToV3];\n    versionController = new VersionController(migrations, 3);\n  });\n\n  it('should migrate data correctly through multiple versions', () => {\n    const data: MigrationData = inputV2Data;\n\n    const migratedData = versionController.migrate(data);\n\n    expect(migratedData.version).toEqual(outputV3Data.version);\n    expect(migratedData.state.sessions).toEqual(outputV3Data.state.sessions);\n    expect(migratedData.state.topics).toEqual(outputV3Data.state.topics);\n    expect(migratedData.state.messages).toEqual(outputV3Data.state.messages);\n  });\n\n  it('should work correct from v1 to v3', () => {\n    const data: MigrationData = inputV1Data;\n\n    versionController = new VersionController([MigrationV2ToV3, MigrationV1ToV2], 3);\n\n    const migratedData = versionController.migrate(data);\n\n    expect(migratedData.version).toEqual(outputV3DataFromV1.version);\n    expect(migratedData.state.sessions).toEqual(outputV3DataFromV1.state.sessions);\n    expect(migratedData.state.topics).toEqual(outputV3DataFromV1.state.topics);\n    expect(migratedData.state.messages).toEqual(outputV3DataFromV1.state.messages);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI for ZITADEL Authentication in LobeChat\nDESCRIPTION: The redirect URI format to configure in your ZITADEL application settings for LobeChat. Replace the placeholder with your actual domain where LobeChat is deployed.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/zitadel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttp(s)://your-domain/api/auth/callback/zitadel\n```\n\n----------------------------------------\n\nTITLE: Configuring SSRF Protection for Private IP Addresses\nDESCRIPTION: Controls Server-Side Request Forgery protection for private IP addresses. Setting to 1 allows connections to private IPs, which may be needed in trusted environments.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_10\n\nLANGUAGE: env\nCODE:\n```\nSSRF_ALLOW_PRIVATE_IP_ADDRESS=1\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Cloudflare Zero Trust Authentication in LobeChat\nDESCRIPTION: Configuration table listing all required environment variables for enabling Cloudflare Zero Trust authentication in LobeChat, including their descriptions and usage.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/cloudflare-zero-trust.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable                | Type     | Description                                                                                                                                                                                                         |\n| ----------------------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `NEXT_AUTH_SECRET`                  | Required | The secret used to encrypt Auth.js session tokens. You can generate a secret using the following command: `openssl rand -base64 32`                                                                                 |\n| `NEXT_AUTH_SSO_PROVIDERS`           | Required | Select the SSO provider for LoboChat. Use `cloudflare-zero-trust` for Cloudflare Zero Trust.                                                                                                                        |\n| `AUTH_CLOUDFLARE_ZERO_TRUST_ID`     | Required | The Client ID from the Cloudflare Zero Trust application provider details page                                                                                                                                      |\n| `AUTH_CLOUDFLARE_ZERO_TRUST_SECRET` | Required | The Client Secret from the Cloudflare Zero Trust application provider details page                                                                                                                                  |\n| `AUTH_CLOUDFLARE_ZERO_TRUST_ISSUER` | Required | The OpenID Configuration Issuer from the Cloudflare Zero Trust application provider details page                                                                                                                    |\n| `NEXTAUTH_URL`                      | Required | This URL is used to specify the callback address for Auth.js when performing OAuth authentication. It only needs to be set when the default generated redirect address is incorrect. `https://example.com/api/auth` |\n```\n\n----------------------------------------\n\nTITLE: Navigation Path to Plugin Store\nDESCRIPTION: Shows the navigation path to access the LobeChat Plugin Store through the session toolbar.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/plugins/store.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nExtension Tools -> Plugin Store\n```\n\n----------------------------------------\n\nTITLE: Vercel Analytics Configuration Variables\nDESCRIPTION: Environment variables for enabling and debugging Vercel Analytics integration in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/analytics.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nENABLE_VERCEL_ANALYTICS\n- Type: Optional\n- Default: -\n- Example: 1\n\nDEBUG_VERCEL_ANALYTICS\n- Type: Optional\n- Default: -\n- Example: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Important Callout in Markdown\nDESCRIPTION: This snippet creates an important callout using Markdown syntax. It encourages users to participate in the ecosystem and contribute to the development of assistants.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/agent-market.mdx#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Callout type={'important'}>\n  We welcome all users to join this ever-growing ecosystem and participate in the iteration and\n  optimization of assistants. Together, let's create more interesting, practical, and innovative\n  assistants, further enriching the diversity and practicality of assistants.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Importing Settings via URL Format in LobeChat\nDESCRIPTION: Shows the URL format used to import settings parameters from an external URL. The settings are passed as a JSON object in the URL parameter.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/settings-url-share.mdx#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://lobehub.com/?settings=<settings object in JSON format>\nhttps://lobehub.com/?settings={\"keyVaults\":{\"openai\":{\"apiKey\":\"user-key\",\"baseURL\":\"https://your-proxy.com/v1\"}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path for LobeChat Deployment\nDESCRIPTION: Sets a base path for the LobeChat application, useful when deploying behind a proxy or in a subdirectory of a domain.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_BASE_PATH=/test\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command for Logto Version Updates\nDESCRIPTION: Command to deploy database alterations when upgrading Logto to a new version, resolving migration failures during version upgrades.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.zh-CN.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db alteration deploy $version\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests with Vitest for LobeChat\nDESCRIPTION: Example of writing unit tests for a number formatting utility in LobeChat using Vitest. The test cases verify formatting numbers with comma separators and handling numbers less than 1000.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/test.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatNumber } from './formatNumber';\n\ndescribe('formatNumber', () => {\n  it('should format number with comma separator', () => {\n    const result = formatNumber(1000);\n    expect(result).toBe('1,000');\n  });\n\n  it('should return the same number if it is less than 1000', () => {\n    const result = formatNumber(500);\n    expect(result).toBe('500');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example of LobeChat Model List Customization\nDESCRIPTION: Shows a practical example of customizing the model list by adding Qwen and GLM models, removing GPT-3.5-turbo, and renaming GPT-4-0125-preview to GPT-4-turbo for display purposes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/model-list.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n+qwen-7b-chat,+glm-6b,-gpt-3.5-turbo,gpt-4-0125-preview=gpt-4-turbo\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Version Number - diff\nDESCRIPTION: Shows version number update and addition of new migration module in configuration index file\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n// Current latest version number\n- export const CURRENT_CONFIG_VERSION = 2;\n+ export const CURRENT_CONFIG_VERSION = 3;\n\n// Historical version upgrade module\nconst ConfigMigrations = [\n+ /**\n+ * 2024.01.22\n+  * from `group = pinned` to `pinned:true`\n+  */\n+ MigrationV2ToV3,\n  /**\n   * 2023.11.27\n   * Migrate from single key database to dexie-based relational structure\n   */\n  MigrationV1ToV2,\n  /**\n   * 2023.07.11\n   * just the first version, Nothing to do\n   */\n  MigrationV0ToV1,\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling WebRTC Sync with Environment Variable\nDESCRIPTION: Environment variable configuration needed to enable the WebRTC sync feature in a LobeChat deployment instance.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/webrtc.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFEATURE_FLAGS=+webrtc_sync\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in JSX\nDESCRIPTION: JSX code for rendering an image component with specific props including alt text, borderless styling, cover mode, and source URL.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/text-to-image.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt={'Text to Image Generation'}\n  borderless\n  cover\n  src={\n'https://github.com/user-attachments/assets/708274a7-2458-494b-a6ec-b73dfa1fa7c2'\n}/>\n```\n\n----------------------------------------\n\nTITLE: Setting Core Clerk Environment Variables\nDESCRIPTION: Essential environment variables needed to enable Clerk authentication, including public and private keys and NextAuth toggle.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/clerk.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_xxxxxxxxxxx\nCLERK_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxx\nNEXT_PUBLIC_ENABLE_NEXT_AUTH=0\n```\n\n----------------------------------------\n\nTITLE: LobeChat File Structure Overview in Bash\nDESCRIPTION: Displays the directory structure of the locales folder in LobeChat, showing the default source translation files in TypeScript format that serve as the base for all translations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/internationalization/internationalization-implementation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc/locales\n├── create.ts\n├── default\n│   ├── chat.ts\n│   ├── common.ts\n│   ├── error.ts\n│   ├── index.ts\n│   ├── market.ts\n│   ├── migration.ts\n│   ├── plugin.ts\n│   ├── setting.ts\n│   ├── tool.ts\n│   └── welcome.ts\n└── resources.ts\n```\n\n----------------------------------------\n\nTITLE: LobeChat Environment Variables Configuration\nDESCRIPTION: Complete set of environment variables required for deploying LobeChat in server mode on Dokploy, including build settings, database connection, authentication, S3 storage, and OpenAI configurations.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.zh-CN.mdx#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# 构建所必需的环境变量\nNIXPACKS_PKGS=\"pnpm bun\"\nNIXPACKS_INSTALL_CMD=\"pnpm install\"\nNIXPACKS_BUILD_CMD=\"pnpm run build\"\nNIXPACKS_START_CMD=\"pnpm start\"\n\nAPP_URL=\n\n# 指定服务模式为 server\nNEXT_PUBLIC_SERVICE_MODE=server\n\n# Postgres 数据库相关配置\nDATABASE_DRIVER=node\nDATABASE_URL=\n\n# 你可以使用 openssl rand -base64 32 生成一个随机的 32 位字符串作为密钥。\nKEY_VAULTS_SECRET=\n\n# Clerk 相关配置\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=\nCLERK_SECRET_KEY=\nCLERK_WEBHOOK_SECRET=\n\n# S3 相关配置\nS3_ACCESS_KEY_ID=\nS3_SECRET_ACCESS_KEY=\nS3_ENDPOINT=\nS3_BUCKET=\nS3_PUBLIC_DOMAIN=\nS3_ENABLE_PATH_STYLE=\n\n# OpenAI 相关配置\nOPENAI_API_KEY=\nOPENAI_MODEL_LIST=\nOPENAI_PROXY_URL=\n```\n\n----------------------------------------\n\nTITLE: Creating Session Actions Slice for Zustand Store\nDESCRIPTION: Implementation of a session actions slice with TypeScript interfaces. This example shows how to create and type session-related actions that will be added to the global SessionStore.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StateCreator } from 'zustand';\n\nimport { SessionStore } from '@/store/session';\n\nexport interface SessionActions {\n  /**\n   * A custom hook that uses SWR to fetch sessions data.\n   */\n  useFetchSessions: () => SWRResponse<any>;\n}\n\nexport const createSessionSlice: StateCreator<\n  SessionStore,\n  [['zustand/devtools', never]],\n  [],\n  SessionAction\n> = (set, get) => ({\n  useFetchSessions: () => {\n    // ...初始化会话的逻辑\n  },\n  // ...其他动作的实现\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy DNS Resolution\nDESCRIPTION: Controls whether DNS queries are sent to the proxy server. When set to 1, DNS queries go through the proxy; when set to 0 (default), they're resolved locally.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_9\n\nLANGUAGE: env\nCODE:\n```\nENABLE_PROXY_DNS=1\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Ubuntu\nDESCRIPTION: Command to install Docker on Ubuntu systems using the apt package manager.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker.mdx#2025-04-11_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n$ apt install docker.io\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Configuration Files\nDESCRIPTION: Downloads the necessary Docker Compose and environment configuration files from the LobeChat repository to prepare for custom deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/lobehub/lobe-chat/HEAD/docker-compose/local/docker-compose.yml\ncurl -O https://raw.githubusercontent.com/lobehub/lobe-chat/HEAD/docker-compose/local/.env.zh-CN.example\nmv .env.zh-CN.example .env\n```\n\n----------------------------------------\n\nTITLE: Configuration File Migration Implementation in TypeScript\nDESCRIPTION: Migration class implementation for upgrading configuration data from v2 to v3, handling session group and pinned status changes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport class MigrationV2ToV3 implements Migration {\n  // 指定从该版本开始向上升级\n  version = 2;\n\n  migrate(data: MigrationData<V2ConfigState>): MigrationData<V3ConfigState> {\n    const { sessions } = data.state;\n\n    return {\n      ...data,\n      state: {\n        ...data.state,\n        sessions: sessions.map((s) => this.migrateSession(s)),\n      },\n    };\n  }\n\n  migrateSession = (session: V2Session): V3Session => {\n    return {\n      ...session,\n      group: 'default',\n      pinned: session.group === 'pinned',\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Connection URL Format\nDESCRIPTION: Example format of the PostgreSQL database connection URL that will be used to connect LobeChat to the database deployed on Dokploy.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.zh-CN.mdx#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npostgresql://postgres:wAbLxfXSwkxxxxxx@45.577.281.48:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Low Complexity State Management in TypeScript\nDESCRIPTION: A basic directory structure for low complexity state management with 2-5 states and 3-4 actions, using a simple store.ts and initialState.ts pattern.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDataFill/store\n├── index.ts\n└── initialState.ts\n```\n\n----------------------------------------\n\nTITLE: Reloading systemd and Restarting Ollama on Linux\nDESCRIPTION: These commands reload the systemd configuration and restart the Ollama service after making environment variable changes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/examples/ollama.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl restart ollama\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Ubuntu\nDESCRIPTION: Command to install Docker on Ubuntu Linux systems using the apt package manager.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker-compose.mdx#2025-04-11_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n$ apt install docker.io\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Bucket Policy for Casdoor Avatars\nDESCRIPTION: JSON policy configuration for a MinIO bucket named 'casdoor' that allows public access to avatars with appropriate permissions for listing, fetching, uploading and deleting objects.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\"*\"]\n      },\n      \"Action\": [\"s3:GetBucketLocation\"],\n      \"Resource\": [\"arn:aws:s3:::casdoor\"]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\"*\"]\n      },\n      \"Action\": [\"s3:ListBucket\"],\n      \"Resource\": [\"arn:aws:s3:::casdoor\"],\n      \"Condition\": {\n        \"StringEquals\": {\n          \"s3:prefix\": [\"files/*\"]\n        }\n      }\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\"*\"]\n      },\n      \"Action\": [\"s3:PutObject\", \"s3:DeleteObject\", \"s3:GetObject\"],\n      \"Resource\": [\"arn:aws:s3:::casdoor/**\"]\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Mobile Adaptation Documentation\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the mobile device adaptation documentation page, including title, description, and relevant tags.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/mobile.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: LobeChat with Mobile Device Adaptation\ndescription: >\n  Explore the enhanced mobile user experience at LobeChat with optimized designs\n  for smoother interactions. Share your feedback on GitHub!\ntags:\n  - Mobile Device Adaptation\n  - User Experience\n  - Optimized Designs\n  - Feedback\n  - GitHub\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Object Storage for LobeChat\nDESCRIPTION: Environment variable settings for connecting LobeChat to MinIO S3-compatible object storage service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nS3_PUBLIC_DOMAIN=https://minio.example.com\nS3_ENDPOINT=https://minio.example.com\n```\n\n----------------------------------------\n\nTITLE: Binding Zustand Store Functions to UI in React\nDESCRIPTION: Enhances the Chat Page component by adding a button to send new messages, demonstrating how to bind Zustand store functions to UI elements.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development-frontend.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'antd';\n\nconst ChatPage = () => {\n  const messages = useChatStore((state) => state.messages);\n  const addMessage = useChatStore((state) => state.addMessage);\n\n  const handleSend = () => {\n    addMessage({ id: '1', content: 'Hello, world!', timestamp: Date.now(), sender: 'user' });\n  };\n\n  return (\n    <>\n      <List\n        dataSource={messages}\n        renderItem={(message) => (\n          <List.Item>\n            <Typography.Text>{message.content}</Typography.Text>\n          </List.Item>\n        )}\n      />\n      <Button onClick={handleSend}>Send</Button>\n    </>\n  );\n};\n\nexport default ChatPage;\n```\n\n----------------------------------------\n\nTITLE: Redeploying LobeChat Docker Container\nDESCRIPTION: Command to redeploy the LobeChat container with environment variables for API keys, proxy URL, and access code.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\ndocker run -d -p 3210:3210 \\\n  -e OPENAI_API_KEY=sk-xxxx \\\n  -e OPENAI_PROXY_URL=https://api-proxy.com/v1 \\\n  -e ACCESS_CODE=lobe66 \\\n  --name lobe-chat \\\n  lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration for LobeChat Auto-Updates\nDESCRIPTION: Crontab entry to run the automatic update script every 5 minutes and log the output to a file.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker-compose.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n*/5 * * * * /path/to/auto-update-lobe-chat.sh >> /path/to/auto-update-lobe-chat.log 2>&1\n```\n\n----------------------------------------\n\nTITLE: Successful LobeChat Startup Log Example\nDESCRIPTION: Example log output indicating successful database migration and service startup of LobeChat on the configured ports.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_9\n\nLANGUAGE: log\nCODE:\n```\n[Database] Start to migration...\n✅ database migration pass.\n-------------------------------------\n  ▲ Next.js 14.x.x\n  - Local:        https://localhost:3210\n  - Network:      http://0.0.0.0:3210\n  ✓ Starting...\n  ✓ Ready in 95ms\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Medium Complexity State Management with Selectors\nDESCRIPTION: Directory structure for state management with 5-15 states and 5-10 actions, including selectors for derived state calculation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIconPicker/store\n├── index.ts\n├── initialState.ts\n├── selectors.ts\n└── store.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Casdoor Authentication for LobeChat\nDESCRIPTION: Environment variable configurations for connecting LobeChat to Casdoor authentication service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nAUTH_CASDOOR_ISSUER=https://auth.example.com\n```\n\nLANGUAGE: env\nCODE:\n```\norigin=https://auth.example.com\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Selectors in React Component\nDESCRIPTION: This TSX code demonstrates how to use the plugin selectors within a React component. It imports the necessary store and selectors, then uses the 'useToolStore' hook with a specific selector to retrieve the installed plugin metadata list.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-selectors.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useToolStore } from '@/store/tool';\nimport { pluginSelectors } from '@/store/tool/selectors';\n\nconst Render = () => {\n  const list = useToolStore(pluginSelectors.installedPluginMetaList);\n\n  return <> ... </>;\n};\n```\n\n----------------------------------------\n\nTITLE: Running vLLM Commands without Environment Creation in Shell\nDESCRIPTION: Command to run vLLM without creating a dedicated environment by using uv's run feature with the --with flag to specify dependencies.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/vllm.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv run --with vllm vllm --help\n```\n\n----------------------------------------\n\nTITLE: Definition of UserModelProviderConfig Type in LobeChat\nDESCRIPTION: Defines the TypeScript type for user model provider configuration, which maps provider names to their respective ProviderConfig objects.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/settings-url-share.mdx#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport type UserModelProviderConfig = Record<string, ProviderConfig>;\n```\n\n----------------------------------------\n\nTITLE: Installing Dokploy using curl command\nDESCRIPTION: Command to install Dokploy on your system using a shell script. This is the first step in setting up your deployment environment for LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://dokploy.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Defining ChatMessageAction Interface with Message Management Functions\nDESCRIPTION: This snippet defines the ChatMessageAction interface that specifies the contract for message handling in the Lobe Chat application. It includes methods for sending, regenerating, deleting, and modifying messages, as well as internal helper methods for processing and updating messages.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ChatMessageAction extends ChatRAGAction {\n  // create\n  sendMessage: (params: SendMessageParams) => Promise<void>;\n  addAIMessage: () => Promise<void>;\n  /**\n   * regenerate message\n   * trace enabled\n   * @param id\n   */\n  regenerateMessage: (id: string) => Promise<void>;\n\n  // delete\n  /**\n   * clear message on the active session\n   */\n  clearMessage: () => Promise<void>;\n  deleteMessage: (id: string) => Promise<void>;\n  deleteToolMessage: (id: string) => Promise<void>;\n  delAndRegenerateMessage: (id: string) => Promise<void>;\n  clearAllMessages: () => Promise<void>;\n  // update\n  updateInputMessage: (message: string) => void;\n  modifyMessageContent: (id: string, content: string) => Promise<void>;\n  // query\n  useFetchMessages: (sessionId: string, topicId?: string) => SWRResponse<ChatMessage[]>;\n  stopGenerateMessage: () => void;\n  copyMessage: (id: string, content: string) => Promise<void>;\n  refreshMessages: () => Promise<void>;\n  toggleMessageEditing: (id: string, editing: boolean) => void;\n\n  // =========  ↓ Internal Method ↓  ========== //\n  // ========================================== //\n  // ========================================== //\n\n  /**\n   * update message at the frontend point\n   * this method will not update messages to database\n   */\n  internal_dispatchMessage: (payload: MessageDispatch) => void;\n  /**\n   * core process of the AI message (include preprocess and postprocess)\n   */\n  internal_coreProcessMessage: (\n    messages: ChatMessage[],\n    parentId: string,\n    params?: ProcessMessageParams,\n  ) => Promise<void>;\n  /**\n   * the method to fetch the AI message\n   */\n  internal_fetchAIChatMessage: (\n    messages: ChatMessage[],\n    assistantMessageId: string,\n    params?: ProcessMessageParams,\n  ) => Promise<{\n    isFunctionCall: boolean;\n    traceId?: string;\n  }>;\n\n  /**\n   * update the message content with optimistic update\n   * a method used by other action\n   */\n  internal_updateMessageContent: (\n    id: string,\n    content: string,\n    toolCalls?: MessageToolCall[],\n  ) => Promise<void>;\n  /**\n   * update the message error with optimistic update\n   */\n  internal_updateMessageError: (id: string, error: ChatMessageError | null) => Promise<void>;\n  /**\n   * create a message with optimistic update\n   */\n  internal_createMessage: (\n    params: CreateMessageParams,\n    context?: { tempMessageId?: string; skipRefresh?: boolean },\n  ) => Promise<string>;\n  /**\n   * create a temp message for optimistic update\n   * otherwise the message will be too slow to show\n   */\n  internal_createTmpMessage: (params: CreateMessageParams) => string;\n  /**\n   * delete the message content with optimistic update\n   */\n  internal_deleteMessage: (id: string) => Promise<void>;\n  internal_resendMessage: (id: string, traceId?: string) => Promise<void>;\n\n  internal_fetchMessages: () => Promise<void>;\n  internal_traceMessage: (id: string, payload: TraceEventPayloads) => Promise<void>;\n\n  /**\n   * method to toggle message create loading state\n   * the AI message status is creating -> generating\n   * other message role like user and tool , only this method need to be called\n   */\n  internal_toggleMessageLoading: (loading: boolean, id: string) => void;\n  /**\n   * method to toggle ai message generating loading\n   */\n  internal_toggleChatLoading: (\n    loading: boolean,\n    id?: string,\n    action?: string,\n  ) => AbortController | undefined;\n  /**\n   * method to toggle the tool calling loading state\n   */\n  internal_toggleToolCallingStreaming: (id: string, streaming: boolean[] | undefined) => void;\n  /**\n   * helper to toggle the loading state of the array,used by these three toggleXXXLoading\n   */\n  internal_toggleLoadingArrays: (\n    key: keyof ChatStoreState,\n    loading: boolean,\n    id?: string,\n    action?: string,\n  ) => AbortController | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Error Logs from LobeChat\nDESCRIPTION: Example error logs from LobeChat when facing authentication configuration issues, useful for troubleshooting.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_15\n\nLANGUAGE: log\nCODE:\n```\nlobe-chat      | [auth][error] r3: \"response\" is not a conform Authorization Server Metadata response (unexpected HTTP status code)\n```\n\nLANGUAGE: log\nCODE:\n```\nlobe-chat      | [auth][error] TypeError: fetch failed\n```\n\n----------------------------------------\n\nTITLE: Standard Export Data Structure in JSON\nDESCRIPTION: Defines the structure for exported data including sessions, topics, and messages with version control.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.zh-CN.mdx#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exportType\": \"sessions\",\n  \"state\": {\n    \"sessions\": [],\n    \"topics\": [],\n    \"messages\": []\n  },\n  \"version\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Deletion Functions in Zustand Store\nDESCRIPTION: This snippet implements several message deletion methods for the chat store. It includes functions to delete individual messages, tool messages, and to clear all messages from a session. These functions use optimistic updates and persist changes to the database.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const chatMessage: StateCreator<\n  ChatStore,\n  [['zustand/devtools', never]],\n  [],\n  ChatMessageAction\n> = (set, get, ...rest) => ({\n  ...chatRag(set, get, ...rest),\n\n  deleteMessage: async (id) => {\n    const message = chatSelectors.getMessageById(id)(get());\n    if (!message) return;\n\n    let ids = [message.id];\n\n    // if the message is a tool calls, then delete all the related messages\n    if (message.tools) {\n      const toolMessageIds = message.tools.flatMap((tool) => {\n        const messages = chatSelectors\n          .currentChats(get())\n          .filter((m) => m.tool_call_id === tool.id);\n\n        return messages.map((m) => m.id);\n      });\n      ids = ids.concat(toolMessageIds);\n    }\n\n    get().internal_dispatchMessage({ type: 'deleteMessages', ids });\n    await messageService.removeMessages(ids);\n    await get().refreshMessages();\n  },\n\n  deleteToolMessage: async (id) => {\n    const message = chatSelectors.getMessageById(id)(get());\n    if (!message || message.role !== 'tool') return;\n\n    const removeToolInAssistantMessage = async () => {\n      if (!message.parentId) return;\n      await get().internal_removeToolToAssistantMessage(message.parentId, message.tool_call_id);\n    };\n\n    await Promise.all([\n      // 1. remove tool message\n      get().internal_deleteMessage(id),\n      // 2. remove the tool item in the assistant tools\n      removeToolInAssistantMessage(),\n    ]);\n  },\n\n  delAndRegenerateMessage: async (id) => {\n    const traceId = chatSelectors.getTraceIdByMessageId(id)(get());\n    get().internal_resendMessage(id, traceId);\n    get().deleteMessage(id);\n\n    // trace the delete and regenerate message\n    get().internal_traceMessage(id, { eventType: TraceEventType.DeleteAndRegenerateMessage });\n  },\n  regenerateMessage: async (id: string) => {\n    const traceId = chatSelectors.getTraceIdByMessageId(id)(get());\n    await get().internal_resendMessage(id, traceId);\n\n    // trace the delete and regenerate message\n    get().internal_traceMessage(id, { eventType: TraceEventType.RegenerateMessage });\n  },\n  clearMessage: async () => {\n    const { activeId, activeTopicId, refreshMessages, refreshTopic, switchTopic } = get();\n\n    await messageService.removeMessagesByAssistant(activeId, activeTopicId);\n\n    if (activeTopicId) {\n      await topicService.removeTopic(activeTopicId);\n    }\n    await refreshTopic();\n    await refreshMessages();\n\n    // after remove topic , go back to default topic\n    switchTopic();\n  },\n  clearAllMessages: async () => {\n    const { refreshMessages } = get();\n    await messageService.removeAllMessages();\n    await refreshMessages();\n  }\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Container for LobeChat\nDESCRIPTION: Commands to stop and remove a currently running LobeChat container named 'lobe-chat' in preparation for upgrading to a newer version.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.mdx#2025-04-11_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ndocker stop lobe-chat\ndocker rm lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Clerk Authentication Service Environment Variables\nDESCRIPTION: Environment variables needed for setting up Clerk authentication in LobeChat. These include the publishable key, secret key, and webhook secret for user authentication.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.mdx#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_xxxxxxxxxxx\nCLERK_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxx\nCLERK_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Auto-Creating Topics in Chat Sessions\nDESCRIPTION: Implements logic to automatically create a new topic when the message count exceeds a threshold. It creates a temporary message, copies existing messages to the new topic, and updates the message maps accordingly.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (!onlyAddUserMessage && !activeTopicId && agentConfig.enableAutoCreateTopic) {\n      // check activeTopic and then auto create topic\n      const chats = chatSelectors.currentChats(get());\n\n      // we will add two messages (user and assistant), so the finial length should +2\n      const featureLength = chats.length + 2;\n\n      // if there is no activeTopicId and the feature length is greater than the threshold\n      // then create a new topic and active it\n      if (!get().activeTopicId && featureLength >= agentConfig.autoCreateTopicThreshold) {\n        // we need to create a temp message for optimistic update\n        tempMessageId = get().internal_createTmpMessage(newMessage);\n        get().internal_toggleMessageLoading(true, tempMessageId);\n\n        const topicId = await get().createTopic();\n\n        if (topicId) {\n          newTopicId = topicId;\n          newMessage.topicId = topicId;\n\n          // we need to copy the messages to the new topic or the message will disappear\n          const mapKey = chatSelectors.currentChatKey(get());\n          const newMaps = {\n            ...get().messagesMap,\n            [messageMapKey(activeId, topicId)]: get().messagesMap[mapKey],\n          };\n          set({ messagesMap: newMaps }, false, 'internal_copyMessages');\n\n          // get().internal_dispatchMessage({ type: 'deleteMessage', id: tempMessageId });\n          get().internal_toggleMessageLoading(false, tempMessageId);\n\n          // make the topic loading\n          get().internal_updateTopicLoading(topicId, true);\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Configuration\nDESCRIPTION: YAML configuration for Docker Compose deployment with MinIO, Casdoor, and LobeChat services\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n'MINIO_API_CORS_ALLOW_ORIGIN=https://lobe.example.com'\n\norigin: 'https://auth.example.com'\n\n- 'APP_URL=https://lobe.example.com'\n- 'NEXT_AUTH_SSO_PROVIDERS=casdoor'\n- 'KEY_VAULTS_SECRET=Kix2wcUONd4CX51E/ZPAd36BqM4wzJgKjPtz2sGztqQ='\n- 'NEXT_AUTH_SECRET=NX2kaPE923dt6BL2U8e9oSre5RfoT7hg'\n- 'AUTH_URL=https://lobe.example.com/api/auth'\n- 'AUTH_CASDOOR_ISSUER=https://auth.example.com'\n- 'DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgresql:5432/${LOBE_DB_NAME}'\n- 'S3_ENDPOINT=https://minio.example.com'\n- 'S3_BUCKET=${MINIO_LOBE_BUCKET}'\n- 'S3_PUBLIC_DOMAIN=https://minio.example.com'\n- 'S3_ENABLE_PATH_STYLE=1'\n- 'LLM_VISION_IMAGE_USE_BASE64=1'\n```\n\n----------------------------------------\n\nTITLE: Selector and Helper Functions for Accessing Agent Configuration\nDESCRIPTION: This snippet defines several helper functions that retrieve the current agent configuration from the agent store. These functions access the agent state and provide convenient shortcuts to common configuration values needed throughout the message handling logic.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getAgentConfig = () => agentSelectors.currentAgentConfig(useAgentStore.getState());\nconst getAgentChatConfig = () => agentSelectors.currentAgentChatConfig(useAgentStore.getState());\nconst hasEnabledKnowledge = () => agentSelectors.hasEnabledKnowledge(useAgentStore.getState());\n```\n\n----------------------------------------\n\nTITLE: Message Processing and Topic Switching in Chat\nDESCRIPTION: Handles post-message creation operations including session updates, topic switching, and cleanup of temporary message maps. It manages the transition when a new topic is created during message submission.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n//  update assistant update to make it rerank\n    useSessionStore.getState().triggerSessionUpdate(get().activeId);\n\n    const id = await get().internal_createMessage(newMessage, {\n      tempMessageId,\n      skipRefresh: !onlyAddUserMessage,\n    });\n\n    // switch to the new topic if create the new topic\n    if (!!newTopicId) {\n      await get().switchTopic(newTopicId, true);\n      await get().internal_fetchMessages();\n\n      // delete previous messages\n      // remove the temp message map\n      const newMaps = { ...get().messagesMap, [messageMapKey(activeId, null)]: [] };\n      set({ messagesMap: newMaps }, false, 'internal_copyMessages');\n    }\n\n    // if only add user message, then stop\n    if (onlyAddUserMessage) {\n      set({ isCreatingMessage: false }, false, 'creatingMessage/start');\n      return;\n    }\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration File for LobeChat Docker\nDESCRIPTION: Example environment configuration file that sets OpenAI API keys, proxy URLs, access codes, and model configurations for the LobeChat Docker deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.mdx#2025-04-11_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=sk-xxxx\nOPENAI_PROXY_URL=https://api-proxy.com/v1\nACCESS_CODE=arthals2333\nOPENAI_MODEL_LIST=-gpt-4,-gpt-4-32k,-gpt-3.5-turbo-16k,gpt-3.5-turbo-1106=gpt-3.5-turbo-16k,gpt-4-0125-preview=gpt-4-turbo,gpt-4-vision-preview=gpt-4-vision\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Service Environment Variables\nDESCRIPTION: Required environment variables for configuring S3 storage service to store files in the server database version of LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nS3_ACCESS_KEY_ID=\nS3_SECRET_ACCESS_KEY=\nS3_ENDPOINT=\nS3_BUCKET=\nS3_PUBLIC_DOMAIN=\nS3_ENABLE_PATH_STYLE=\n```\n\n----------------------------------------\n\nTITLE: Message Management Utilities for Chat Store\nDESCRIPTION: Provides internal utility functions for message management, including message dispatching, AI chat message fetching, and preprocessing. These functions handle the lower-level operations for message state management.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n  internal_dispatchMessage: (payload) => {\n    const { activeId } = get();\n\n    if (!activeId) return;\n\n    const messages = messagesReducer(chatSelectors.currentChats(get()), payload);\n\n    const nextMap = { ...get().messagesMap, [chatSelectors.currentChatKey(get())]: messages };\n\n    if (isEqual(nextMap, get().messagesMap)) return;\n\n    set({ messagesMap: nextMap }, false, { type: `dispatchMessage/${payload.type}`, payload });\n  },\n  internal_fetchAIChatMessage: async (messages, assistantId, params) => {\n    const {\n      internal_toggleChatLoading,\n      refreshMessages,\n      internal_updateMessageContent,\n      internal_dispatchMessage,\n      internal_toggleToolCallingStreaming,\n    } = get();\n\n    const abortController = internal_toggleChatLoading(\n      true,\n      assistantId,\n      n('generateMessage(start)', { assistantId, messages }) as string,\n    );\n\n    const agentConfig = getAgentConfig();\n    const chatConfig = agentConfig.chatConfig;\n\n    const compiler = template(chatConfig.inputTemplate, { interpolate: /{{([\\S\\s]+?)}}/g });\n\n    // ================================== //\n    //   messages uniformly preprocess    //\n    // ================================== //\n\n    // 1. slice messages with config\n    let preprocessMsgs = chatHelpers.getSlicedMessages(messages, chatConfig);\n\n    // 2. replace inputMessage template\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Casdoor Authentication\nDESCRIPTION: Nginx configuration snippet for properly forwarding OAuth2 requests to Casdoor without intercepting the .well-known path. This ensures proper authentication flow in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /.well-known/openid-configuration {\nproxy_pass http://localhost:8000;  # Forward to localhost:8000\nproxy_set_header Host $host;  # Keep the original host header\nproxy_set_header X-Real-IP $remote_addr;  # Keep the client's real IP\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Keep the forwarded IP\nproxy_set_header X-Forwarded-Proto $scheme;  # Keep the request protocol\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Content with a Focused Prompt in Markdown\nDESCRIPTION: A prompt designed to generate only the opening paragraph of a response to a philosophical question, demonstrating the incremental approach to content generation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/agents/prompt.mdx#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nWrite an opening paragraph to answer the following question:\nIs mathematics an invention or a discovery? Use careful reasoning to explain your answer.\n```\n\n----------------------------------------\n\nTITLE: Extending LocalDB Class with SessionGroups Table in TypeScript\nDESCRIPTION: Updates the LocalDB class to include the new sessionGroups table and its corresponding version upgrade.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class LocalDB extends Dexie {\n  public files: LobeDBTable<'files'>;\n  public sessions: LobeDBTable<'sessions'>;\n  public messages: LobeDBTable<'messages'>;\n  public topics: LobeDBTable<'topics'>;\n  public plugins: LobeDBTable<'plugins'>;\n  public sessionGroups: LobeDBTable<'sessionGroups'>;\n\n  constructor() {\n    super(LOBE_CHAT_LOCAL_DB_NAME);\n    this.version(1).stores(dbSchemaV1);\n    this.version(2).stores(dbSchemaV2);\n    this.version(3).stores(dbSchemaV3);\n    this.version(4).stores(dbSchemaV4);\n\n    this.files = this.table('files');\n    this.sessions = this.table('sessions');\n    this.messages = this.table('messages');\n    this.topics = this.table('topics');\n    this.plugins = this.table('plugins');\n    this.sessionGroups = this.table('sessionGroups');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Model List Customization Syntax\nDESCRIPTION: This snippet demonstrates the basic syntax for customizing the model list in LobeChat. It shows how to add, remove, and modify model names using a comma-separated string format.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/model-list.mdx#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nid->deploymentName=displayName<maxToken:vision:reasoning:search:fc:file:imageOutput>,model2,model3\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Tencent Cloud COS in Lobe Chat\nDESCRIPTION: These environment variables configure the Tencent Cloud COS storage service for Lobe Chat. They specify the bucket name, endpoint URL, region, public domain URL for access, and should be added to your server configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/s3/tencent-cloud.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nS3_BUCKET=lobe-130xxxxxx2\nS3_ENDPOINT=https://cos.ap-chengdu.myqcloud.com\nS3_REGION=ap-chengdu\nS3_PUBLIC_DOMAIN=https://lobe-1251234567.cos.ap-chengdu.myqcloud.com\n```\n\n----------------------------------------\n\nTITLE: Starting and Verifying LobeChat Docker Container\nDESCRIPTION: Shell commands for starting the Docker containers and checking logs to verify successful startup of the LobeChat service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs -f lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Updating Session Selectors in TypeScript\nDESCRIPTION: Revises the session selectors to accommodate the new data structure for session grouping, including selectors for default sessions, pinned sessions, and custom session groups.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultSessions = (s: SessionStore): LobeSessions => s.defaultSessions;\nconst pinnedSessions = (s: SessionStore): LobeSessions => s.pinnedSessions;\nconst customSessionGroups = (s: SessionStore): CustomSessionGroup[] => s.customSessionGroups;\n```\n\n----------------------------------------\n\nTITLE: Pulling Qwen Model with Ollama in Bash\nDESCRIPTION: Command to download and install the Qwen 14b model to your local machine using Ollama. This prepares the model for local usage with LobeChat without requiring cloud API access.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama/qwen.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nollama pull qwen:14b\n```\n\n----------------------------------------\n\nTITLE: Deploying PostgreSQL with PGVector using Docker\nDESCRIPTION: Docker command to deploy PostgreSQL with PGVector extension for vector operations. Sets up a container with PostgreSQL 16 and configures basic authentication.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/knowledge-base.mdx#2025-04-11_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run -p 5432:5432 -d --name pg -e POSTGRES_PASSWORD=mysecretpassword pgvector/pgvector:pg16\n```\n\n----------------------------------------\n\nTITLE: Security Configuration for MinIO Root User\nDESCRIPTION: Environment variable configuration for securing MinIO by setting custom root username and password credentials in the .env file.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# MinIO S3 configuration\nMINIO_ROOT_USER=XXXX\nMINIO_ROOT_PASSWORD=XXXX\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Update Log\nDESCRIPTION: A markdown formatted changelog entry documenting version updates, bug fixes and style changes\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [Version 1.74.2]\n#### What's fixed\n\n- **misc**: CheckModel change clears other configs, update input and output prices, closes [#7086](https://github.com/lobehub/lobe-chat/issues/7086) ([33cc87a](https://github.com/lobehub/lobe-chat/commit/33cc87a))\n```\n\n----------------------------------------\n\nTITLE: Automatic Docker Update Script for LobeChat\nDESCRIPTION: Bash script to automatically check for and apply updates to the LobeChat Docker container, with optional proxy configuration and cleanup of old images.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.zh-CN.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# auto-update-lobe-chat.sh\n\n# 设置代理（可选）\n# export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n\n# 拉取最新的镜像并将输出存储在变量中\noutput=$(docker pull lobehub/lobe-chat:latest 2>&1)\n\n# 检查拉取命令是否成功执行\nif [ $? -ne 0 ]; then\n  exit 1\nfi\n\n# 检查输出中是否包含特定的字符串\necho \"$output\" | grep -q \"Image is up to date for lobehub/lobe-chat:latest\"\n\n# 如果镜像已经是最新的，则不执行任何操作\nif [ $? -eq 0 ]; then\n  exit 0\nfi\n\necho \"Detected lobe-chat update\"\n\n# 删除旧的容器\necho \"Removed: $(docker rm -f lobe-chat)\"\n\n# 运行新的容器(请将env配置文件地址改为你的实际地址)\necho \"Started: $(docker run -d --network=host --env-file path/to/lobe.env --name=lobe-chat --restart=always lobehub/lobe-chat)\"\n\n# 打印更新的时间和版本\necho \"Update time: $(date)\"\necho \"Version: $(docker inspect lobehub/lobe-chat:latest | grep 'org.opencontainers.image.version' | awk -F'\"' '{print $4}')\"\n\n# 清理不再使用的镜像\ndocker images | grep 'lobehub/lobe-chat' | grep -v 'lobehub/lobe-chat-database' | grep -v 'latest' | awk '{print $3}' | xargs -r docker rmi > /dev/null 2>&1\necho \"Removed old images.\"\n```\n\n----------------------------------------\n\nTITLE: Database Migration Implementation - diff\nDESCRIPTION: Database schema update and migration implementation for adding pinned field and updating group field\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nexport class LocalDB extends Dexie {\n  public files: LobeDBTable<'files'>;\n  public sessions: LobeDBTable<'sessions'>;\n  public messages: LobeDBTable<'messages'>;\n  public topics: LobeDBTable<'topics'>;\n  public plugins: LobeDBTable<'plugins'>;\n  public sessionGroups: LobeDBTable<'sessionGroups'>;\n\n  constructor() {\n    super(LOBE_CHAT_LOCAL_DB_NAME);\n    this.version(1).stores(dbSchemaV1);\n    this.version(2).stores(dbSchemaV2);\n    this.version(3).stores(dbSchemaV3);\n    this.version(4)\n      .stores(dbSchemaV4)\n+     .upgrade((trans) => this.upgradeToV4(trans));\n\n    this.files = this.table('files');\n    this.sessions = this.table('sessions');\n    this.messages = this.table('messages');\n    this.topics = this.table('topics');\n    this.plugins = this.table('plugins');\n    this.sessionGroups = this.table('sessionGroups');\n  }\n\n+  /**\n+   * 2024.01.22\n+   *\n+   * DB V3 to V4\n+   * from `group = pinned` to `pinned:true`\n+   */\n+  upgradeToV4 = async (trans: Transaction) => {\n+    const sessions = trans.table('sessions');\n+    await sessions.toCollection().modify((session) => {\n+      session.pinned = session.group === 'pinned' ? 1 : 0;\n      session.group = 'default';\n    });\n+  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a vLLM Server with Qwen Model in Shell\nDESCRIPTION: Command to start a vLLM server running the Qwen2.5-1.5B-Instruct model. By default, this will make the server available at http://localhost:8000 with OpenAI API compatibility.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/vllm.mdx#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvllm serve Qwen/Qwen2.5-1.5B-Instruct\n```\n\n----------------------------------------\n\nTITLE: Enabling Vercel Analytics via Environment Variable\nDESCRIPTION: Sets the environment variable to enable Vercel Analytics integration in LobeChat. This simple configuration allows you to collect web analytics data in your Vercel-deployed LobeChat instance.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/analytics.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_VERCEL_ANALYTICS=1\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Code\nDESCRIPTION: Code reference showing environment variable examples including XAI_PROXY_URL and model list configurations\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n*_MODEL_LIST from env\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Bucket Information\nDESCRIPTION: Sets environment variables for MinIO bucket name and S3 access credentials.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Configure the bucket information of MinIO\nMINIO_LOBE_BUCKET=lobe\nS3_ACCESS_KEY_ID=dB6Uq9CYZPdWSZouPyEd\nS3_SECRET_ACCESS_KEY=aPBW8CVULkh8bw1GatlT0GjLihcXHLNwRml4pieS\n```\n\n----------------------------------------\n\nTITLE: Cloning LobeChat Repository with Git\nDESCRIPTION: Command to clone the LobeChat codebase from GitHub using Git. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/setup-development.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/lobehub/lobe-chat.git\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Ollama on macOS\nDESCRIPTION: Use launchctl to set the OLLAMA_ORIGINS environment variable to allow cross-origin access for Ollama on macOS.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlaunchctl setenv OLLAMA_ORIGINS \"*\"\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Environment Variable Example\nDESCRIPTION: Example showing how to configure the FEATURE_FLAGS environment variable to disable the welcome suggestions feature in LobeChat.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/feature-flags.mdx#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"-welcome_suggest\"\n```\n\n----------------------------------------\n\nTITLE: Exporting LobeChat Conversations in Markdown Format\nDESCRIPTION: Functionality to export chat conversations in Markdown format, making it easy to integrate conversation content into documentation and note-taking applications.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/changelog/2024-11-06-share-text-json.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Conversation Title\n\n## User\nUser message content\n\n## Assistant\nAssistant response content\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Casdoor OAuth2\nDESCRIPTION: Configures an Nginx server block with a location directive to properly handle OpenID Connect discovery endpoint requests without interference from panel software.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /.well-known/openid-configuration {\n  proxy_pass http://localhost:8000;  # 转发到 localhost:8000\n  proxy_set_header Host $host;  # 保留原始主机头\n  proxy_set_header X-Real-IP $remote_addr;  # 保留客户端真实IP\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 保留转发的IP\n  proxy_set_header X-Forwarded-Proto $scheme;  # 保留请求协议\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Views with Query Builder in MySQL\nDESCRIPTION: This snippet shows how to declare views using the query builder syntax in MySQL with Drizzle ORM. It includes the creation of a user table and two views: a general user view and a customers-only view.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { text, mysqlTable, mysqlView, int, timestamp } from \"drizzle-orm/mysql-core\";\n\nexport const user = mysqlTable(\"user\", {\n  id: int(\"id\").primaryKey().autoincrement(),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  password: text(\"password\"),\n  role: text(\"role\").$type<\"admin\" | \"customer\">(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userView = mysqlView(\"user_view\").as((qb) => qb.select().from(user));\nexport const customersView = mysqlView(\"customers_view\").as((qb) => qb.select().from(user).where(eq(user.role, \"customer\")));\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW \"user_view\" AS SELECT * FROM \"user\";\nCREATE VIEW \"customers_view\" AS SELECT * FROM \"user\" WHERE \"role\" = 'customer';\n```\n\n----------------------------------------\n\nTITLE: Rendering Assistant Market Image in Markdown\nDESCRIPTION: This code snippet renders an image of the Assistant Market using Markdown syntax. It includes alt text, styling properties, and a source URL for the image.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/agent-market.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Image\n  alt={'Assistant Market'}\n  borderless\n  cover\n  src={\n'https://github.com/user-attachments/assets/b3ab6e35-4fbc-468d-af10-e3e0c687350f'\n}\n/>\n```\n\n----------------------------------------\n\nTITLE: LobeChat Feature Flags Schema Reference\nDESCRIPTION: Reference to the source code location containing the complete feature flags schema definition in TypeScript.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/feature-flags.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfeatureFlags\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Embedding Model\nDESCRIPTION: Environment configuration for setting the default embedding model provider and model name for vector generation in the file system.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/knowledge-base.mdx#2025-04-11_snippet_1\n\nLANGUAGE: environment\nCODE:\n```\nenvironment: DEFAULT_FILES_CONFIG=embedding_model=openai/embedding-text-3-small\n```\n\n----------------------------------------\n\nTITLE: Updating Internationalization Configuration in .i18nrc.js\nDESCRIPTION: This code snippet shows how to modify the .i18nrc.js configuration file to add a new language code (in this example, Vietnamese 'vi-VN') to the outputLocales array.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/internationalization/add-new-locale.mdx#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // ... Other configurations\n\n  outputLocales: [\n    'zh-TW',\n    'en-US',\n    'ru-RU',\n    'ja-JP',\n    // ...Other languages\n\n    'vi-VN', // Add 'vi-VN' to the array\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Tip Callout in Markdown\nDESCRIPTION: This snippet creates a tip callout using Markdown syntax. It provides information about submitting agents to the platform and highlights the automated internationalization workflow.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/agent-market.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Callout type={'tip'}>\n  By [🤖/🏪 submitting agents](https://github.com/lobehub/lobe-chat-agents), you can easily submit\n  your assistant works to our platform. We particularly emphasize that LobeChat has established a\n  sophisticated automated internationalization (i18n) workflow, which excels in seamlessly\n  converting your assistants into multiple language versions. This means that regardless of the\n  language your users are using, they can seamlessly experience your assistant.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Deploying PostgreSQL with PGVector using Docker\nDESCRIPTION: This Docker command deploys PostgreSQL with the PGVector extension, which is necessary for vector operations in LobeChat's knowledge base. It exposes port 5432 and sets a password for the database.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/knowledge-base.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 5432:5432 -d --name pg -e POSTGRES_PASSWORD=mysecretpassword pgvector/pgvector:pg16\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Repository in Bash\nDESCRIPTION: This command clones the forked Lobe Chat repository to the contributor's local machine. It uses the git clone command with the URL of the forked repository.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YourUsername/lobe-chat.git\n```\n\n----------------------------------------\n\nTITLE: Expanding Content Through Iterative Prompting in Markdown\nDESCRIPTION: A follow-up prompt that builds upon previously generated content, providing context and requesting the next paragraph to incrementally develop a more comprehensive response.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/agents/prompt.mdx#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nI am writing a detailed essay to answer the following prompt:\nIs mathematics an invention or a discovery? Use careful reasoning to explain your answer. Here is my current situation: Philosophers and mathematicians have long debated whether mathematics is an invention or a discovery.\nSome argue that the concepts and principles of mathematics exist independently of human thought, and therefore can be considered discovered rather than invented.\nFor example, the concepts of numbers, ratios, and geometric shapes are observed in the natural world and can be abstracted and systematically studied. Write the next paragraph of my essay.\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration for Automatic Updates\nDESCRIPTION: Crontab entry to schedule the automatic update script for LobeChat Docker container to run every 5 minutes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker.mdx#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n*/5 * * * * /path/to/auto-update-lobe-chat.sh >> /path/to/auto-update-lobe-chat.log 2>&1\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Keycloak Auth\nDESCRIPTION: Required environment variables for setting up Keycloak authentication in LobeChat, including auth secret, SSO providers, client credentials, and callback URLs\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/keycloak.mdx#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nNEXT_AUTH_SECRET: \"generated-secret-key\"\nNEXT_AUTH_SSO_PROVIDERS: \"keycloak\"\nAUTH_KEYCLOAK_ID: \"your-client-id\"\nAUTH_KEYCLOAK_SECRET: \"your-client-secret\"\nAUTH_KEYCLOAK_ISSUER: \"http://keycloak-url/realms/realm-name\"\nNEXTAUTH_URL: \"https://lobe.example.com/api/auth\"\n```\n\n----------------------------------------\n\nTITLE: Adding DeepSeek R1 Model Support in Markdown\nDESCRIPTION: Adds support for the HuggingFace DeepSeek R1 model to the project.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n#### 💄 Styles\n\n- **misc**: Add HuggingFace Model: DeepSeek R1.\n```\n\n----------------------------------------\n\nTITLE: Railway Deployment One-Click Button in Markdown\nDESCRIPTION: Markdown code for a one-click deployment button that allows users to instantly deploy LobeChat on Railway using a pre-configured template.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/railway.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/FB6HrV?referralCode=9bD9mT)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Environment Variables for LobeChat Deployment\nDESCRIPTION: Environment variables needed to configure Azure OpenAI integration when deploying LobeChat. Includes required API keys, endpoints, version settings and optional access control.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/examples/azure-openai.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nAZURE_API_KEY=c55168be3874490ef0565d9779ecd5a6\nAZURE_ENDPOINT=https://docs-test-001.openai.azure.com\nAZURE_API_VERSION=2023-08-01-preview\nAZURE_MODEL_LIST=gpt-35-turbo->my-deploy=GPT 3.5 Turbo\nACCESS_CODE=awCT74\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Github Auth in LobeChat\nDESCRIPTION: This snippet shows the required environment variables for setting up Github authentication in LobeChat. It includes variables for Auth.js encryption, SSO provider selection, Github App credentials, and the NextAuth URL.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/github.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 环境变量                      | 类型 | 描述                                                                                          |\n| ------------------------- | -- | ------------------------------------------------------------------------------------------- |\n| `NEXT_AUTH_SECRET`        | 必选 | 用于加密 Auth.js 会话令牌的密钥。您可以使用以下命令生成秘钥： `openssl rand -base64 32`                               |\n| `NEXT_AUTH_SSO_PROVIDERS` | 必选 | 选择 LoboChat 的单点登录提供商。使用 Github 请填写 `github`。                                                |\n| `AUTH_GITHUB_ID`          | 必选 | Github App 详情页的 客户端 ID                                                                      |\n| `AUTH_GITHUB_SECRET`      | 必选 | Github App 详情页的 客户端 Secret                                                                  |\n| `NEXTAUTH_URL`            | 必选 | 该 URL 用于指定 Auth.js 在执行 OAuth 验证时的回调地址，当默认生成的重定向地址发生不正确时才需要设置。`https://example.com/api/auth` |\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry (v1.19.10)\nDESCRIPTION: Changelog entry detailing style improvements for Qwen2.5 math and coder model support for SiliconCloud provider\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### [Version 1.19.10](https://github.com/lobehub/lobe-chat/compare/v1.19.9...v1.19.10)\n\n<sup>Released on **2024-09-20**</sup>\n\n#### 💄 Styles\n\n- **misc**: Add qwen2.5 math and coder model for siliconcloud provider.\n\n<br/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URL for ZITADEL Application in LobeChat\nDESCRIPTION: The URL pattern to use for the redirect URL when setting up a ZITADEL application for LobeChat authentication. Replace the domain placeholder with your actual LobeChat deployment URL.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/zitadel.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp(s)://your-domain/api/auth/callback/zitadel\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table for Logto Configuration\nDESCRIPTION: Markdown table listing all required and optional environment variables needed to configure Logto authentication with LobeChat, including their descriptions and requirements.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 环境变量                        | 类型 | 描述                                                                                               |\n| --------------------------- | -- | ------------------------------------------------------------------------------------------------ |\n| `NEXT_AUTH_SECRET`          | 必选 | 用于加密 Auth.js 会话令牌的密钥。您可以使用以下命令生成秘钥： `openssl rand -base64 32`                                    |\n| `NEXT_AUTH_SSO_PROVIDERS`   | 必选 | 选择 LoboChat 的单点登录提供商。使用 Logto 请填写 `logto`。                                                       |\n| `AUTH_LOGTO_ID`             | 必选 | Logto App 详情页的 Client ID                                                                         |\n| `AUTH_LOGTO_SECRET`         | 必选 | Logto App 详情页的 Client Secret                                                                     |\n| `AUTH_LOGTO_ISSUER`         | 必选 | Logto 提供程序的 OpenID Connect 颁发者                                                                   |\n| `NEXTAUTH_URL`              | 必选 | 该 URL 用于指定 Auth.js 在执行 OAuth 验证时的回调地址，当默认生成的重定向地址发生不正确时才需要设置。`https://lobe.example.com/api/auth` |\n| `LOGTO_WEBHOOK_SIGNING_KEY` | 可选 | 用于验证 Logto 发送的 Webhook 请求是否合法的密钥。                                                                |\n```\n\n----------------------------------------\n\nTITLE: Markdown Details Section (v1.19.10)\nDESCRIPTION: Expandable details section containing improvements and fixes with a reference to a GitHub issue\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary><kbd>Improvements and Fixes</kbd></summary>\n\n#### Styles\n\n- **misc**: Add qwen2.5 math and coder model for siliconcloud provider, closes [#4043](https://github.com/lobehub/lobe-chat/issues/4043) ([d16578f](https://github.com/lobehub/lobe-chat/commit/d16578f))\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Generating Auth.js Secret Key with OpenSSL in Bash\nDESCRIPTION: Command to generate a secure random secret key used for encrypting Auth.js session tokens. This command produces a 32-byte random value encoded in base64 format.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/wechat.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Alternative System Agent Configuration with Multiple Settings\nDESCRIPTION: Configures specific system agents with different models and providers, allowing granular control over which AI models handle which system functions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nSYSTEM_AGENT=topic=openai/gpt-4,translation=anthropic/claude-1\n```\n\n----------------------------------------\n\nTITLE: Describing Bug Fix\nDESCRIPTION: Lists the bug fix included in this release.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n#### 🐛 Bug Fixes\n\n- **misc**: Fix to send image without text.\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect URI for Microsoft Entra ID Authentication\nDESCRIPTION: The callback URL configuration required for Microsoft Entra ID authentication integration. This URL needs to be set in the Azure Portal application registration and must match the deployed application domain.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/microsoft-entra-id.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://your-domain/api/auth/callback/microsoft-entra-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Settings JSON Structure\nDESCRIPTION: Example JSON structure showing how plugin settings are configured using environment variables. Demonstrates setting SERPAPI_API_KEY for search-engine plugin and multiple key-value pairs for plugin-2.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/basic.mdx#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin-2\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  \"search-engine\": {\n    \"SERPAPI_API_KEY\": \"xxxxx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Auth.js Secret Key Using OpenSSL\nDESCRIPTION: Command to generate a random base64-encoded 32-byte key for encrypting Auth.js session tokens, used for the NEXT_AUTH_SECRET environment variable.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Version Update Commit Details\nDESCRIPTION: Git commit details for recent version updates\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- **misc**: Fix docker image optimization error log ([730aec1](https://github.com/lobehub/lobe-chat/commit/730aec1))\n```\n\n----------------------------------------\n\nTITLE: Generating Auth.js Secret Key with OpenSSL (Bash)\nDESCRIPTION: A command to generate a secure random secret key for Auth.js session token encryption using OpenSSL. This key is required for the NEXT_AUTH_SECRET environment variable.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/cloudflare-zero-trust.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for 360AI Integration Guide\nDESCRIPTION: Markdown documentation structure detailing the steps for integrating 360AI with LobeChat, including metadata, headers, steps, and callouts for configuration instructions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ai360.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using the 360AI in LobeChat\ndescription: Learn how to integrate and utilize 360AI's language model APIs in LobeChat.\ntags:\n  - LobeChat\n  - 360AI\n  - API Key\n  - Web UI\n---\n\n# Using the 360AI in LobeChat\n\n<Image cover src={'https://github.com/user-attachments/assets/e617def1-ce50-4acc-974b-12f5ed592a0e'} />\n\nThe [360AI](https://ai.360.com/) is a cognitive general model independently developed by 360 Company, aimed at providing powerful natural language processing capabilities for enterprises and developers. This model has been upgraded to version 4.0 and supports various application scenarios, including conversational services, image generation, vector database services, and more.\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Alterations During Logto Version Upgrade\nDESCRIPTION: Command to deploy database alterations for a specific Logto version when database migration fails after an upgrade.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db alteration deploy $version\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik Redirect URL\nDESCRIPTION: The redirect URL pattern that needs to be configured in Authentik provider settings. The URL should match your deployed domain where LobeChat is hosted.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/authentik.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://your-domain/api/auth/callback/authentik\n```\n\n----------------------------------------\n\nTITLE: Installing vLLM with Conda in Shell\nDESCRIPTION: Commands to create a Python environment using Conda, activate it, and install vLLM using pip. This is an alternative approach for environment management.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/vllm.mdx#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconda create -n myenv python=3.12 -y\nconda activate myenv\npip install vllm\n```\n\n----------------------------------------\n\nTITLE: Executing One-Click Upgrade Command for Docker Deployment\nDESCRIPTION: Custom command for Docker containers that performs database seeding with encryption, database alterations for version upgrade, and starts the application in one step.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"npm run cli db seed -- --swe --encrypt-base-role\" && npx @logto/cli db alteration deploy $version && npm start\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Secret Key Command\nDESCRIPTION: Command to generate a secure key for Auth.js session token encryption\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/keycloak.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in JSX\nDESCRIPTION: JSX code snippet demonstrating how to render an image component with specific props for the vision recognition feature documentation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/vision.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt={'Model Vision Recognition'}\n  borderless\n  cover\n  src={\n'https://github.com/user-attachments/assets/18574a1f-46c2-4cbc-af2c-35a86e128a07'\n}/>\n```\n\n----------------------------------------\n\nTITLE: Database Seed Command with Encryption for Logto\nDESCRIPTION: Command to seed the Logto database with encryption for the base role, useful when encountering errors on third-party databases like Neon.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/logto.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto db seed --encrypt-base-role\n```\n\n----------------------------------------\n\nTITLE: Enabling Vercel Analytics Environment Variable Configuration\nDESCRIPTION: Environment variable configuration to enable Vercel Analytics integration in LobeChat. Setting this variable to 1 activates analytics collection for monitoring website traffic, sources, and device usage data.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/analytics.mdx#2025-04-11_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nENABLE_VERCEL_ANALYTICS=1\n```\n\n----------------------------------------\n\nTITLE: Displaying Text to Image Feature Banner in Markdown\nDESCRIPTION: Code snippet showing how to display the Text to Image feature banner image using the Image component in markdown. The image is hosted on GitHub attachments and displayed with specific properties like borderless and cover set to true.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/text-to-image.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Image\n  alt={'Text to Image 文生图'}\n  borderless\n  cover\n  src={\n'https://github.com/user-attachments/assets/708274a7-2458-494b-a6ec-b73dfa1fa7c2'\n}\n/>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for LobeChat Authentication\nDESCRIPTION: Required environment variables for configuring Microsoft Entra ID authentication in LobeChat deployment, including auth secrets, provider settings, client credentials, and tenant information.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/microsoft-entra-id.mdx#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_AUTH_SECRET                  # Key used to encrypt Auth.js session tokens\nNEXT_AUTH_SSO_PROVIDERS           # Single sign-on provider selection\nAUTH_MICROSOFT_ENTRA_ID_ID        # Client ID of the Microsoft Entra ID application\nAUTH_MICROSOFT_ENTRA_ID_SECRET    # Client Secret of the Microsoft Entra ID application\nAUTH_MICROSOFT_ENTRA_ID_TENANT_ID # Tenant ID of the Microsoft Entra ID application\nNEXTAUTH_URL                      # Callback address for Auth.js OAuth authentication\n```\n\n----------------------------------------\n\nTITLE: Deploying WebRTC Signaling Server with Zeabur\nDESCRIPTION: Command to deploy a WebRTC signaling server using the Zeabur platform with a one-click deployment button.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/webrtc.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy on Zeabur](https://zeabur.com/button.svg)](https://zeabur.com/templates/MY0JZG?referralCode=arvinxx)\n```\n\n----------------------------------------\n\nTITLE: Resource Links in Markdown\nDESCRIPTION: Links to key plugin system resources and repositories, including the plugin index, template, SDK, and gateway.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/features/plugin-system.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[chat-plugin-sdk]: https://github.com/lobehub/chat-plugin-sdk\n[chat-plugin-template]: https://github.com/lobehub/chat-plugin-template\n[chat-plugins-gateway]: https://github.com/lobehub/chat-plugins-gateway\n[lobe-chat-plugins]: https://github.com/lobehub/lobe-chat-plugins\n```\n\n----------------------------------------\n\nTITLE: Generating Auth.js Session Secret with OpenSSL\nDESCRIPTION: Command to generate a secure random secret for encrypting Auth.js session tokens using OpenSSL.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/cloudflare-zero-trust.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up LobeChat Plugin Template in Bash\nDESCRIPTION: Commands to clone the LobeChat plugin template repository, install dependencies, and start the development server. This sets up the local environment for plugin development.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/plugins/development.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/lobehub/chat-plugin-template.git\n$ cd chat-plugin-template\n$ npm i\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed Structured Prompts for Comprehensive AI Responses in Markdown\nDESCRIPTION: An improved prompt structure that specifies format (paper) and content requirements (introduction, body, conclusion), which helps generate more detailed and structured AI responses.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/agents/prompt.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nWrite a highly detailed paper, including an introduction, body, and conclusion, to answer the following questions:\nWhat are the most urgent environmental issues facing our planet,\nand what actions can individuals take to help address these issues?\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Provider for LobeChat\nDESCRIPTION: YAML configuration for setting up an OpenID Connect identity provider in Authelia for LobeChat integration. Includes essential settings like client ID, secret, redirect URIs, and required scopes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/authelia.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ...\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    - id: lobe-chat\n      description: LobeChat\n      secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n      public: false\n      authorization_policy: two_factor\n      redirect_uris:\n        - https://chat.example.com/api/auth/callback/authelia\n      scopes:\n        - openid\n        - profile\n        - email\n      userinfo_signing_algorithm: none\n```\n\n----------------------------------------\n\nTITLE: Adding LobeChat Plugin Shield to Markdown\nDESCRIPTION: Markdown code for adding a LobeChat Plugin shield to a project's README or documentation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/plugins/development.mdx#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[![lobe-chat-plugin](https://img.shields.io/badge/%F0%9F%A4%AF%20%26%20%F0%9F%A7%A9%20LobeHub-Plugin-95f3d9?labelColor=black&style=flat-square)](https://github.com/lobehub/lobe-chat-plugins)\n```\n\n----------------------------------------\n\nTITLE: Example of Expanded Content Through Iterative Prompting in Markdown\nDESCRIPTION: The result of using iterative prompting to develop content, showing how the initial paragraph has been expanded into a more comprehensive discussion with multiple viewpoints.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/agents/prompt.mdx#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nPhilosophers and mathematicians have long debated whether mathematics is invented or discovered.\nSome argue that the concepts and principles of mathematics exist independently of human thought, and therefore can be considered to be discovered rather than invented.\nFor example, the concepts of numbers, ratios, and geometric shapes are observed in the natural world and can be abstracted and systematically studied.\nOn the other hand, some believe that mathematics is largely an invention of human thought.\nMathematical principles are based on logical reasoning, which is a characteristic of human thought.\nFor instance, Euclidean geometry is based on abstract axioms and premises, accepted as true without the need for proof.\nTherefore, geometry can be considered an invention of human thought rather than a discovery.\nSimilarly, mathematical formulas and equations are used to model and predict physical phenomena, which are the result of human reasoning.\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Webhook Secret\nDESCRIPTION: Environment variable for the Clerk webhook secret that enables secure communication for user lifecycle events.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/clerk.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCLERK_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Novita AI Integration Guide\nDESCRIPTION: Markdown documentation describing the process of integrating Novita AI with LobeChat, including registration steps, API key setup, and configuration instructions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/novita.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using Novita AI API Key in LobeChat\ndescription: >\n  Learn how to integrate Novita AI's language model APIs into LobeChat. Follow\n  the steps to register, create an Novita AI API key, configure settings, and\n  chat with our various AI models.\ntags:\n  - Novita AI\n  - Llama3\n  - Mistral\n  - uncensored\n  - API key\n  - Web UI\n---\n\n# Using Novita AI in LobeChat\n\n[Novita AI](https://novita.ai/) is an AI API platform that provides a variety of LLM and image generation APIs, supporting Llama3 (8B, 70B), Mistral, and many other cutting-edge models.\n\nThis document will guide you on how to integrate Novita AI in LobeChat:\n```\n\n----------------------------------------\n\nTITLE: Exporting LobeChat Conversations in OpenAI JSON Format\nDESCRIPTION: The feature allows exporting chat conversations in OpenAI-compliant JSON format, including Tools Calling data. This format is suitable for API debugging and model training purposes.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/changelog/2024-11-06-share-text-json.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [...],\n  \"tools_calling\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple SSO Providers in LobeChat\nDESCRIPTION: Demonstrates how to configure multiple Single Sign-On (SSO) providers in LobeChat using the NEXT_AUTH_SSO_PROVIDERS environment variable. Includes a table of supported SSO providers and their corresponding values.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| SSO Provider          | Value                   |\n| --------------------- | ----------------------- |\n| Auth0                 | `auth0`                 |\n| Authenlia             | `authenlia`             |\n| Authentik             | `authentik`             |\n| Casdoor               | `casdoor`               |\n| Cloudflare Zero Trust | `cloudflare-zero-trust` |\n| Github                | `github`                |\n| Logto                 | `logto`                 |\n| Microsoft Entra ID    | `microsoft-entra-id`    |\n| ZITADEL               | `zitadel`               |\n| Keycloak              | `keycloak`              |\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama on Linux\nDESCRIPTION: Use curl to download and execute the Ollama installation script on Linux systems.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/ollama.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://ollama.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Output in SearXNG Settings File\nDESCRIPTION: This snippet shows how to modify the SearXNG configuration file to enable JSON output format, which is required for LobeChat integration. Without JSON output enabled, the API calls from LobeChat will result in errors.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/online-search.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vi searxng/settings.yml\n...\nsearch:\n  formats:\n    - html\n    - json\n```\n\n----------------------------------------\n\nTITLE: Deploying LobeChat with Ollama Integration using Docker\nDESCRIPTION: This Docker command runs LobeChat with Ollama integration, exposing it on port 3210 and configuring it to communicate with a local Ollama instance on port 11434. The OLLAMA_PROXY_URL environment variable points to the Ollama API endpoint.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/changelog/2024-02-14-ollama.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3210:3210 -e OLLAMA_PROXY_URL=http://host.docker.internal:11434/v1 lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Rules for S3 Bucket in JSON\nDESCRIPTION: JSON configuration for Cross-Origin Resource Sharing (CORS) that allows requests from your specific domain to the S3 bucket. This enables front-end applications to directly interact with stored resources.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/s3/cloudflare-r2.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllowedOrigins\": [\"https://your-project.vercel.app\"],\n    \"AllowedMethods\": [\"GET\", \"PUT\", \"HEAD\", \"POST\", \"DELETE\"],\n    \"AllowedHeaders\": [\"*\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying LobeChat Folder Structure in Bash\nDESCRIPTION: This snippet shows the folder directory structure of LobeChat, outlining the main directories and their purposes within the src folder.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/start.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc\n├── app        # Code related to the main logic and state management of the application\n├── components # Reusable UI components\n├── config     # Application configuration files, including client and server environment variables\n├── const      # Used to define constants, such as action types, route names, etc.\n├── features   # Business-related feature modules, such as Agent settings, plugin development pop-ups, etc.\n├── hooks      # Custom utility Hooks reusable across the application\n├── layout     # Application layout components, such as navigation bars, sidebars, etc.\n├── locales    # Language files for internationalization\n├── services   # Encapsulated backend service interfaces, such as HTTP requests\n├── store      # Zustand store for state management\n├── types      # TypeScript type definition files\n└── utils      # General utility functions\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Version Badge in Markdown\nDESCRIPTION: Shows how to create a badge linking back to the top of the README using Markdown image syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)\n```\n\n----------------------------------------\n\nTITLE: Exporting Settings to URL in LobeChat\nDESCRIPTION: Demonstrates how to generate a settings URL for LobeChat by creating a settings object, converting it to JSON, and appending it to the URL. The example includes OpenAI API key and baseURL configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/settings-url-share.mdx#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Generate settings to export to URL\nconst settings = {\n  keyVaults: {\n    openai: {\n      apiKey: 'user-key',\n      baseURL: 'https://your-proxy.com/v1',\n    },\n  },\n};\n// Convert settings to a JSON formatted string\nconst url = `/?settings=${JSON.stringify(settings)}`;\nconsole.log(url);\n// /?settings={\"keyVaults\":{\"openai\":{\"apiKey\":\"user-key\",\"baseURL\":\"https://your-proxy.com/v1\"}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for LobeChat Database\nDESCRIPTION: Environment variables for Casdoor authentication, MinIO S3 storage, and bucket configuration. These credentials are used in the Docker Compose setup for the LobeChat database.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.mdx#2025-04-11_snippet_20\n\nLANGUAGE: env\nCODE:\n```\n# Casdoor secret\nAUTH_CASDOOR_ID=943e627d79d5dd8a22a1\nAUTH_CASDOOR_SECRET=6ec24ac304e92e160ef0d0656ecd86de8cb563f1\n\n# MinIO S3 configuration\nMINIO_ROOT_USER=Joe\nMINIO_ROOT_PASSWORD=Crj1570768\n\n# Configure the bucket information of MinIO\nMINIO_LOBE_BUCKET=lobe\nS3_ACCESS_KEY_ID=dB6Uq9CYZPdWSZouPyEd\nS3_SECRET_ACCESS_KEY=aPBW8CVULkh8bw1GatlT0GjLihcXHLNwRml4pieS\n```\n\n----------------------------------------\n\nTITLE: Initializing LobeChat Infrastructure with Setup Script\nDESCRIPTION: Downloads and runs the LobeChat setup script to initialize the infrastructure for Docker deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -fsSL https://lobe.li/setup.sh)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 3\nDESCRIPTION: Changelog entry documenting bug fix for fetch error in changelog modal\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n#### 🐛 Bug Fixes\n\n- **misc**: Fix fetch error in changelog modal, closes [#5194](https://github.com/lobehub/lobe-chat/issues/5194) ([e9433be](https://github.com/lobehub/lobe-chat/commit/e9433be))\n```\n\n----------------------------------------\n\nTITLE: Automatic Update Script for LobeChat Docker Container\nDESCRIPTION: Bash script for automatically updating the LobeChat Docker container. It checks for updates, removes the old container, and starts a new one with the latest image.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# auto-update-lobe-chat.sh\n\n# Set up proxy (optional)\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n\n# Pull the latest image and store the output in a variable\noutput=$(docker pull lobehub/lobe-chat:latest 2>&1)\n\n# Check if the pull command was executed successfully\nif [ $? -ne 0 ]; then\n  exit 1\nfi\n\n# Check if the output contains a specific string\necho \"$output\" | grep -q \"Image is up to date for lobehub/lobe-chat:latest\"\n\n# If the image is already up to date, do nothing\nif [ $? -eq 0 ]; then\n  exit 0\nfi\n\necho \"Detected Lobe-Chat update\"\n\n# Remove the old container\necho \"Removed: $(docker rm -f Lobe-Chat)\"\n\n# Run the new container\necho \"Started: $(docker run -d --network=host --env-file /path/to/lobe.env --name=Lobe-Chat --restart=always lobehub/lobe-chat)\"\n\n# Print the update time and version\necho \"Update time: $(date)\"\necho \"Version: $(docker inspect lobehub/lobe-chat:latest | grep 'org.opencontainers.image.version' | awk -F'\"' '{print $4}')\"\n\n# Clean up unused images\ndocker images | grep 'lobehub/lobe-chat' | grep -v 'lobehub/lobe-chat-database' | grep -v 'latest' | awk '{print $3}' | xargs -r docker rmi > /dev/null 2>&1\necho \"Removed old images.\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up LobeChat Project (Fish Shell)\nDESCRIPTION: Commands for cloning the LobeChat repository, navigating to the project directory, installing dependencies, and starting the development server using the Fish shell.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n$ git clone https://github.com/lobehub/lobe-chat.git\n$ cd lobe-chat\n$ pnpm install\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Git Commit References\nDESCRIPTION: Markdown formatting for Git commit hashes and descriptions\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n([4476a5e](https://github.com/lobehub/lobe-chat/commit/4476a5e))\n```\n\n----------------------------------------\n\nTITLE: Deploying LobeChat with Proxy Configuration\nDESCRIPTION: Docker command to deploy LobeChat service with a proxy configuration. It includes the OPENAI_PROXY_URL environment variable for API proxy settings.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker.mdx#2025-04-11_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n$ docker run -d -p 3210:3210 \\\n  -e OPENAI_API_KEY=sk-xxxx \\\n  -e OPENAI_PROXY_URL=https://api-proxy.com/v1 \\\n  -e ACCESS_CODE=lobe66 \\\n  --name lobe-chat \\\n  lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Writing Changelog Entries in Markdown\nDESCRIPTION: Structured markdown entries documenting version changes, bug fixes, and improvements to the Lobe Chat project with Git commit references and issue links.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### [Version 0.110.5](https://github.com/lobehub/lobe-chat/compare/v0.110.4...v0.110.5)\n\n<sup>Released on **2023-12-10**</sup>\n\n#### 🐛 Bug Fixes\n\n- **misc**: Fix setting plugin i18n.\n\n<br />\n\n<details>\n  <summary><kbd>Improvements and Fixes</kbd></summary>\n\n#### What's fixed\n\n- **misc**: Fix setting plugin i18n, closes [#606](https://github.com/lobehub/lobe-chat/issues/606) ([4e18ebf](https://github.com/lobehub/lobe-chat/commit/4e18ebf))\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Running Linter with pnpm\nDESCRIPTION: This command runs the project's linter using pnpm. It checks if the code adheres to the project's coding style guidelines.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Main Directory Structure of LobeChat\nDESCRIPTION: Overview of the top-level directories in the LobeChat src folder, showing the organization of code into functional areas like app logic, components, configuration, constants, features, and utilities.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/folder-structure.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc\n├── app        # Main logic and state management related code for the application\n├── components # Reusable UI components\n├── config     # Application configuration files, including client-side and server-side environment variables\n├── const      # Used to define constants, such as action types, route names, etc.\n├── features   # Function modules related to business functions, such as agent settings, plugin development pop-ups, etc.\n├── hooks      # Custom utility hooks reused throughout the application\n├── layout     # Application layout components, such as navigation bars, sidebars, etc.\n├── locales    # Internationalization language files\n├── services   # Encapsulated backend service interfaces, such as HTTP requests\n├── store      # Zustand store for state management\n├── types      # TypeScript type definition files\n└── utils      # Common utility functions\n```\n\n----------------------------------------\n\nTITLE: Running LobeChat with Docker Compose\nDESCRIPTION: Command to start the LobeChat service using Docker Compose in detached mode.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker-compose.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Inserting Deployment Button Image in Markdown\nDESCRIPTION: This snippet defines a reference-style link for the deployment button image in Markdown. It uses a TencentCloud CDN URL for the image source.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/tencentcloud-lighthouse.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[deploy-button-image]: https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/d65fb782-4fb0-4348-ad85-f2943d6bee8f.svg\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Translation in TypeScript\nDESCRIPTION: TypeScript implementation of the message translation feature. The code demonstrates both language detection and translation processes using fetchPresetTaskResult. It handles intermediate updates to display translation progress and manages the final state update upon completion.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/store/chat/slices/translate/action.ts\ntranslateMessage: async (id, targetLang) => {\n  // ...omitted code...\n\n  // Detect language\n  chatService.fetchPresetTaskResult({\n    onFinish: async (data) => {\n      if (data && supportLocales.includes(data)) from = data;\n      await updateMessageTranslate(id, { content, from, to: targetLang });\n    },\n    params: merge(translationSetting, chainLangDetect(message.content)),\n    trace: get().getCurrentTracePayload({ traceName: TraceNameMap.LanguageDetect }),\n  });\n\n  // Perform translation\n  chatService.fetchPresetTaskResult({\n    onMessageHandle: (chunk) => {\n      if (chunk.type === 'text') {\n        content = chunk.text;\n        internal_dispatchMessage({\n          id,\n          type: 'updateMessageTranslate',\n          value: { content, from, to: targetLang },\n        });\n      }\n    },\n    onFinish: async () => {\n      await updateMessageTranslate(id, { content, from, to: targetLang });\n      internal_toggleChatLoading(false, id, n('translateMessage(end)', { id }) as string);\n    },\n    params: merge(translationSetting, chainTranslate(message.content, targetLang)),\n    trace: get().getCurrentTracePayload({ traceName: TraceNameMap.Translation }),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Running LobeChat Docker Container with Ollama Integration\nDESCRIPTION: This command runs LobeChat as a Docker container on port 3210 while connecting to a local Ollama service running on port 11434.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/examples/ollama.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3210:3210 -e OLLAMA_PROXY_URL=http://host.docker.internal:11434 lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Wechat Auth\nDESCRIPTION: Required environment variables that need to be configured for enabling Wechat authentication in LobeChat. Includes variables for Auth.js session encryption, SSO provider selection, Wechat credentials, and callback URL configuration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/auth/next-auth/wechat.mdx#2025-04-11_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nNEXT_AUTH_SECRET        # Key for Auth.js session token encryption\nNEXT_AUTH_SSO_PROVIDERS  # SSO provider selection ('github' for Github)\nWECHAT_CLIENT_ID        # Wechat application Client ID\nWECHAT_CLIENT_SECRET    # Wechat application Client Secret\nNEXTAUTH_URL            # OAuth callback URL (e.g., https://example.com/api/auth)\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Link in Markdown\nDESCRIPTION: This snippet defines a reference-style link for the deployment process. It includes various parameters for the TencentCloud Lighthouse deployment, such as blueprint type, region, and bundle ID.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/tencentcloud-lighthouse.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[deploy-link]: https://buy.tencentcloud.com/lighthouse?blueprintType=APP_OS&blueprintOfficialId=lhbp-6u0ti132&regionId=9&zone=ap-singapore-3&bundleId=bundle_starter_nmc_lin_med2_01&loginSet=AUTO&rule=true&from=lobechat\n```\n\n----------------------------------------\n\nTITLE: LobeRuntimeAI Interface Definition in TypeScript\nDESCRIPTION: Base interface definition for AI runtime implementations, specifying required and optional methods for chat, embeddings, models, text-to-image, and text-to-speech capabilities.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LobeRuntimeAI {\n  baseURL?: string;\n  chat(payload: ChatStreamPayload, options?: ChatCompetitionOptions): Promise<Response>;\n  embeddings?(payload: EmbeddingsPayload, options?: EmbeddingsOptions): Promise<Embeddings[]>;\n  models?(): Promise<any>;\n  textToImage?: (payload: TextToImagePayload) => Promise<string[]>;\n  textToSpeech?: (\n    payload: TextToSpeechPayload,\n    options?: TextToSpeechOptions,\n  ) => Promise<ArrayBuffer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Bypassing Node.js Certificate Validation with Environment Variable\nDESCRIPTION: Command to start the application with certificate validation disabled using the NODE_TLS_REJECT_UNAUTHORIZED environment variable.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/faq/proxy-with-unable-to-verify-leaf-signature.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNODE_TLS_REJECT_UNAUTHORIZED=0 npm run start\n```\n\n----------------------------------------\n\nTITLE: Markdown Feature Documentation Structure\nDESCRIPTION: Structured markdown documentation showing the feature overview of LobeChat, including navigation cards and image references for both 2023 and 2024 features.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/start.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Get started with LobeChat\ndescription: >\n  Explore the exciting features in LobeChat, including Vision Model, TTS & STT,\n  Local LLMs, and Multi AI Providers. Discover more about Agent Market, Plugin\n  System, and Personalization.\ntags:\n  - Feature Overview\n  - Vision Model\n  - TTS & STT\n  - Local LLMs\n  - Multi AI Providers\n  - Agent Market\n  - Plugin System\n---\n\n# ✨ Feature Overview\n\n## 2024 Overview\n\n<Image alt={'LobeChat 2024 Overview'} src={'https://github.com/user-attachments/assets/2428a136-38bf-488c-8033-d9f261d67f3d'} />\n\n<Cards>\n  <Card href=\"/docs/usage/features/cot\" title=\"Chain of Thought\" />\n  <Card href=\"/docs/usage/features/branching-conversations\" title=\"Branching Conversations\" />\n  <Card href=\"/docs/usage/features/artifacts\" title=\"Artifacts\" />\n  <Card href=\"/docs/usage/features/knowledge-base\" title=\"File Upload / Knowledge Base\" />\n  <Card href=\"/docs/usage/features/database\" title=\"Local / Remote Database\" />\n  <Card href=\"/docs/usage/features/auth\" title=\"Multi-User Management\" />\n</Cards>\n\n<br />\n\n## 2023 Overview\n\n<Image alt={'LobeChat 2023 Overview'} src={'https://github.com/user-attachments/assets/625cf558-4c32-4489-970a-2723ebadbc23'} />\n\n<Cards>\n  <Card href=\"/docs/usage/features/multi-ai-providers\" title=\"Multi AI Providers\" />\n  <Card href=\"/docs/usage/features/local-llm\" title=\"Local LLM Support\" />\n  <Card href=\"/docs/usage/features/vision\" title=\"Vision Recognition\" />\n  <Card href=\"/docs/usage/features/tts\" title=\"TTS & STT\" />\n  <Card href=\"/docs/usage/features/text-to-image\" title=\"Text to Image Creation\" />\n  <Card href=\"/docs/usage/features/plugin-system\" title=\"Tool Calling / Plugin System\" />\n  <Card href=\"/docs/usage/features/agent-market\" title=\"Assistant Market\" />\n  <Card href=\"/docs/usage/features/pwa\" title=\"Progressive Web App\" />\n  <Card href=\"/docs/usage/features/mobile\" title=\"Mobile Device Adaptation\" />\n  <Card href=\"/docs/usage/features/theme\" title=\"Custom Themes\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Google Gemini Adapter Implementation in TypeScript\nDESCRIPTION: Adapter implementation for Google's Gemini AI models, including chat functionality with support for multimodal inputs and streaming responses.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Gemini adapter implementation\nclass LobeGoogleAI implements LobeRuntimeAI {\n  client: GoogleGenerativeAI;\n  baseURL: string;\n  apiKey: string;\n\n  constructor(options: GoogleAIOptions) {\n    // Initialize Google Generative AI client\n    this.client = new GoogleGenerativeAI(options.apiKey);\n    this.apiKey = options.apiKey;\n    this.baseURL = options.baseURL || GOOGLE_AI_BASE_URL;\n  }\n\n  // Implement chat functionality\n  async chat(payload: ChatCompletionCreateParamsBase, options?: RequestOptions) {\n    // Select appropriate model (supports Gemini Pro, Gemini Flash, etc.)\n    const modelName = payload.model || 'gemini-pro';\n    const model = this.client.getGenerativeModel({ model: modelName });\n\n    // Process multimodal inputs (e.g., images)\n    const contents = this.processMessages(payload.messages);\n\n    // Set generation parameters\n    const generationConfig = {\n      temperature: payload.temperature,\n      topK: payload.top_k,\n      topP: payload.top_p,\n      maxOutputTokens: payload.max_tokens,\n    };\n\n    // Create chat session and get response\n    const chat = model.startChat({\n      generationConfig,\n      history: contents.slice(0, -1),\n      safetySettings: this.getSafetySettings(payload),\n    });\n\n    // Handle streaming response\n    return this.handleStreamResponse(chat, contents, options?.signal);\n  }\n\n  // Implement other processing methods\n  private processMessages(messages) {\n    /* ... */\n  }\n  private getSafetySettings(payload) {\n    /* ... */\n  }\n  private handleStreamResponse(chat, contents, signal) {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LobeChat in Bash\nDESCRIPTION: These commands navigate to the project directory and install the required dependencies using either Bun or PNPM package managers.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/start.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd lobe-chat\n# If you use Bun\nbun install\n# If you use PNPM\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Refreshing Materialized Views with Drizzle ORM\nDESCRIPTION: Shows different methods to refresh materialized views in PostgreSQL using Drizzle ORM. Includes standard refresh, concurrent refresh, and refresh with no data options.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nawait db.refreshMaterializedView(newYorkers);\n\nawait db.refreshMaterializedView(newYorkers).concurrently();\n\nawait db.refreshMaterializedView(newYorkers).withNoData();\n```\n\n----------------------------------------\n\nTITLE: Google Gemini Adapter Implementation in TypeScript\nDESCRIPTION: This adapter implements the LobeRuntimeAI interface for Google's Gemini models. It initializes a GoogleGenerativeAI client and provides methods to handle multi-modal inputs, model selection, and streaming responses.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/chat-api.zh-CN.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Gemini 适配器实现\nclass LobeGoogleAI implements LobeRuntimeAI {\n  client: GoogleGenerativeAI;\n  baseURL: string;\n  apiKey: string;\n\n  constructor(options: GoogleAIOptions) {\n    // 初始化 Google Generative AI 客户端\n    this.client = new GoogleGenerativeAI(options.apiKey);\n    this.apiKey = options.apiKey;\n    this.baseURL = options.baseURL || GOOGLE_AI_BASE_URL;\n  }\n\n  // 实现聊天功能\n  async chat(payload: ChatCompletionCreateParamsBase, options?: RequestOptions) {\n    // 选择合适的模型（支持 Gemini Pro、Gemini Flash 等）\n    const modelName = payload.model || 'gemini-pro';\n    const model = this.client.getGenerativeModel({ model: modelName });\n\n    // 处理多模态输入（如图像）\n    const contents = this.processMessages(payload.messages);\n\n    // 设置生成参数\n    const generationConfig = {\n      temperature: payload.temperature,\n      topK: payload.top_k,\n      topP: payload.top_p,\n      maxOutputTokens: payload.max_tokens,\n    };\n\n    // 创建聊天会话并获取响应\n    const chat = model.startChat({\n      generationConfig,\n      history: contents.slice(0, -1),\n      safetySettings: this.getSafetySettings(payload),\n    });\n\n    // 处理流式响应\n    return this.handleStreamResponse(chat, contents, options?.signal);\n  }\n\n  // 实现其他处理方法\n  private processMessages(messages) {\n    /* ... */\n  }\n  private getSafetySettings(payload) {\n    /* ... */\n  }\n  private handleStreamResponse(chat, contents, signal) {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running LobeChat Development Server with Bun\nDESCRIPTION: This command starts the local development server for LobeChat using Bun, allowing developers to begin their development work.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/start.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Start the development server with Bun\nbun run dev\n# Visit http://localhost:3010 to view the application\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry documenting version updates, bug fixes and improvements including OAuth support, Azure API fixes, and UI improvements.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n#### What's fixed\n\n- **misc**: The back button on the chat setting page can correctly return to the configured Agent chat page, closes [#1272](https://github.com/lobehub/lobe-chat/issues/1272) ([4cc1ad5](https://github.com/lobehub/lobe-chat/commit/4cc1ad5))\n\n</details>\n\n<div align=\"right\">\n  [![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring Views with Subset of Columns\nDESCRIPTION: This snippet shows how to declare a view with a subset of columns using the .select() method in the query builder. It creates a customers view with only id, name, and email columns.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const customersView = pgView(\"customers_view\").as((qb) => {\n  return qb\n    .select({\n      id: user.id,\n      name: user.name,\n      email: user.email,\n    })\n    .from(user);\n});\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW \"customers_view\" AS SELECT \"id\", \"name\", \"email\" FROM \"user\" WHERE \"role\" = 'customer';\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT and Session Callbacks (TypeScript)\nDESCRIPTION: This snippet demonstrates how to customize the jwt and session callbacks to handle user information and add custom fields to the session.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/add-new-authentication-providers.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncallbacks: {\n  async jwt({ token, profile, account }) {\n    if (profile && account) {\n      token.userId = account.providerAccountId;\n      token.avatar = profile.picture;\n    }\n    return token;\n  },\n  async session({ session, token }) {\n    if (session.user) {\n      session.user.id = token.userId ?? session.user.id;\n      session.user.avatar = token.avatar;\n    }\n    return session;\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Prompt Structure for AI Responses in Markdown\nDESCRIPTION: A simple prompt structure that instructs the AI to answer specific questions. It demonstrates the basic format for a directive prompt that might generate inconsistent or brief responses.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/agents/prompt.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAnswer the following questions:\nWhat are the most urgent environmental issues facing our planet, and what actions can individuals take to help address these issues?\n```\n\n----------------------------------------\n\nTITLE: Customizing Qwen Model List in LobeChat\nDESCRIPTION: Controls the available model list for Qwen, allowing addition, hiding, or customization of model display names using special syntax.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n### `QWEN_MODEL_LIST`\n\n- Type: Optional\n- Description: Used to control the model list, use `+` to add a model, use `-` to hide a model, use `model_name=display_name` to customize the display name of a model, separated by commas. Definition syntax rules see [model-list][model-list]\n- Default: `-`\n- Example: `-all,+qwen-turbo-latest,+qwen-plus-latest`\n```\n\n----------------------------------------\n\nTITLE: Updating Database Schema for SessionGroups in TypeScript\nDESCRIPTION: Adds the sessionGroups table to the database schema and modifies the sessions table definition.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dbSchemaV4 = {\n  ...dbSchemaV3,\n  sessionGroups: '&id, name, sort, createdAt, updatedAt',\n  sessions: '&id, type, group, pinned, meta.title, meta.description, meta.tags, createdAt, updatedAt',\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Mistral AI Setup\nDESCRIPTION: Structured markdown documentation that outlines the process of integrating Mistral AI with LobeChat, including obtaining an API key and configuring the service within the application interface.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/mistral.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using Mistral AI API Key in LobeChat\ndescription: >\n  Learn how to integrate Mistral AI into LobeChat for enhanced conversational\n  experiences. Follow the steps to configure Mistral AI and start using its\n  models.\ntags:\n  - Mistral AI\n  - Web UI\n  - API key\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Random Secret Key for LobeChat Database Encryption\nDESCRIPTION: Command to generate a random 32-character string using OpenSSL, which can be used as the value for the KEY_VAULTS_SECRET environment variable to encrypt sensitive information in the LobeChat database.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Configuring Volcengine Proxy URL in LobeChat\nDESCRIPTION: Allows overriding the default Volcengine API base URL with a custom proxy, useful for network restrictions or specific deployment scenarios.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/environment-variables/model-provider.mdx#2025-04-11_snippet_50\n\nLANGUAGE: markdown\nCODE:\n```\n### `VOLCENGINE_PROXY_URL`\n\n- Type: Optional\n- Description: If you manually configure the Volcengine API proxy, you can use this configuration item to override the default Volcengine API request base URL\n- Default: `https://ark.cn-beijing.volces.com/api/v3`\n- Example: `https://my-volcengine-proxy.com/v1`\n```\n\n----------------------------------------\n\nTITLE: Defining SessionGroupAction Interface in TypeScript\nDESCRIPTION: Specifies the interface for session group actions in the frontend data flow store.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SessionGroupAction {\n  // Add session group\n  addSessionGroup: (name: string) => Promise<string>;\n  // Remove session group\n  removeSessionGroup: (id: string) => Promise<void>;\n  // Update session group ID for a session\n  updateSessionGroupId: (sessionId: string, groupId: string) => Promise<void>;\n  // Update session group name\n  updateSessionGroupName: (id: string, name: string) => Promise<void>;\n  // Update session group sorting\n  updateSessionGroupSort: (items: SessionGroupItem[]) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing vLLM with uv Package Manager in Shell\nDESCRIPTION: Commands to create a Python virtual environment using uv, activate it, and install vLLM. This is the recommended approach for setting up vLLM on systems with NVIDIA GPUs.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/providers/vllm.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv venv myenv --python 3.12 --seed\nsource myenv/bin/activate\nuv pip install vllm\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Access Key Environment Variables\nDESCRIPTION: S3 access key credentials required for authentication with the S3 service.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nS3_ACCESS_KEY_ID=9998d6757e276cf9f1edbd325b7083a6\nS3_SECRET_ACCESS_KEY=55af75d8eb6b99f189f6a35f855336ea62cd9c4751a5cf4337c53c1d3f497ac2\n```\n\n----------------------------------------\n\nTITLE: Implementing addSessionGroup Action in TypeScript\nDESCRIPTION: Demonstrates the implementation of the addSessionGroup action in the frontend data flow store.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createSessionGroupSlice: StateCreator<\n  SessionStore,\n  [['zustand/devtools', never]],\n  [],\n  SessionGroupAction\n> = (set, get) => ({\n  // Implement the logic for adding a session group\n  addSessionGroup: async (name) => {\n    // Call the createSessionGroup method in the service layer and pass in the session group name\n    const id = await sessionService.createSessionGroup(name);\n    // Call the get method to get the current Store state and execute the refreshSessions method to refresh the session data\n    await get().refreshSessions();\n    // Return the ID of the newly created session group\n    return id;\n  },\n  // ... Other action implementations\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw Tools Calling Output for Mixtral 8x7B Text-to-Image Generation in YAML\nDESCRIPTION: This code snippet shows the raw output from a Tools Calling operation using the Mixtral 8x7B model for text-to-image generation. It includes details such as the model used, token usage, and the function call for image generation with multiple prompts.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/tools-calling/groq.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n[no stream response] 2024-7-9 12:6:38.11\n\n{\"id\":\"chatcmpl-a90069f3-b119-41b9-b8d7-c7f97373529e\",\"object\":\"chat.completion\",\"created\":1720497998,\"model\":\"mixtral-8x7b-32768\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"tool_calls\":[{\"id\":\"call_hw8t\",\"type\":\"function\",\"function\":{\"name\":\"lobe-image-designer____text2image____builtin\",\"arguments\":\"{\\\"prompts\\\":[\\\"A colorful and playful illustration of a friendly small dog, looking directly at the viewer with a wagging tail and bright, expressive eyes. The dog's fur is glossy and well-groomed, with a mix of black, white, and brown colors. The background is a lush, green park with a clear blue sky and a few fluffy clouds.\\\",\\\"An oil painting of a small, energetic dog in a sunlit park, chasing a frisbee. The dog is a mix of black and white fur, with a distinct brown spot above its left eye. The park features tall trees, providing dappled shade across the grassy landscape. The frisbee is bright orange and stands out against the natural surroundings.\\\",\\\"A realistic watercolor painting of a small, fluffy white dog curled up next to a warm fireplace during a cozy winter evening. The dog's eyes are closed in contentment, and a single red bow is tied around its neck. The background includes a plush armchair, a stack of books, and a softly lit room.\\\",\\\"A fun and engaging cartoon of a small dog sitting at a café table, enjoying a cup of coffee and a croissant. The dog has a expressive face and a blue scarf around its neck. The café has a vintage, 1920's style and a red awning, with a bustling city background.\\\"],\\\"quality\\\":\\\"standard\\\",\\\"size\\\":\\\"1024x1024\\\",\\\"style\\\":\\\"vivid\\\"}\"}}]}},\"logprobs\":null,\"finish_reason\":\"tool_calls\"}],\"usage\":{\"prompt_tokens\":2920,\"prompt_time\":0.228639219,\"completion_tokens\":465,\"completion_time\":0.755757988,\"total_tokens\":3385,\"total_time\":0.984397207},\"system_fingerprint\":\"fp_c5f20b5bb1\",\"x_groq\":{\"id\":\"req_01j2atr155f0nv8rmfk448e2at\"}}\n\nPOST /api/chat/groq 200 in 6216ms\n```\n\n----------------------------------------\n\nTITLE: Complete S3 Environment Variables Configuration\nDESCRIPTION: Comprehensive set of S3 environment variables including keys, bucket configuration, and optional region setting.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/vercel.mdx#2025-04-11_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# S3 Keys\nS3_ACCESS_KEY_ID=9998d6757e276cf9f1edbd325b7083a6\nS3_SECRET_ACCESS_KEY=55af75d8eb6b99f189f6a35f855336ea62cd9c4751a5cf4337c53c1d3f497ac2\n\n# Bucket name\nS3_BUCKET=lobechat\n# Bucket request endpoint\nS3_ENDPOINT=https://0b33a03b5c993fd2f453379dc36558e5.r2.cloudflarestorage.com\n# Public domain for bucket access\nS3_PUBLIC_DOMAIN=https://s3-dev.your-domain.com\n\n# Bucket region, such as us-west-1, generally not required, but some providers may need to configure\n# S3_REGION=us-west-1\n```\n\n----------------------------------------\n\nTITLE: Fetching Sessions with Zustand and SWR in TypeScript\nDESCRIPTION: Defines a method for fetching sessions using SWR and updating the Zustand store. It retrieves grouped session data and updates various session-related states.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createSessionSlice: StateCreator<\n  SessionStore,\n  [['zustand/devtools', never]],\n  [],\n  SessionAction\n> = (set, get) => ({\n  // ... other methods\n  useFetchSessions: () =>\n    useSWR<ChatSessionList>(FETCH_SESSIONS_KEY, sessionService.getGroupedSessions, {\n      onSuccess: (data) => {\n        set(\n          {\n            customSessionGroups: data.customGroup,\n            defaultSessions: data.default,\n            isSessionsFirstFetchFinished: true,\n            pinnedSessions: data.pinned,\n            sessions: data.all,\n          },\n          false,\n          n('useFetchSessions/onSuccess', data),\n        );\n      },\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Image Generation Tool Schema Definition in JSON\nDESCRIPTION: JSON schema definition for text-to-image generation tool that specifies parameters including prompts, quality, seeds, size, and style options. The schema is modeled after ChatGPT Plus's implementation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/usage/tools-calling.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function\": {\n    \"description\": \"Create images from a text-only prompt.\",\n    \"name\": \"lobe-image-designer____text2image____builtin\",\n    \"parameters\": {\n      \"properties\": {\n        \"prompts\": {\n          \"description\": \"The user's original image description, potentially modified to abide by the lobe-image-designer policies. If the user does not suggest a number of captions to create, create four of them. If creating multiple captions, make them as diverse as possible. If the user requested modifications to previous images, the captions should not simply be longer, but rather it should be refactored to integrate the suggestions into each of the captions. Generate no more than 4 images, even if the user requests more.\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"maxItems\": 4,\n          \"minItems\": 1,\n          \"type\": \"array\"\n        },\n        \"quality\": {\n          \"default\": \"standard\",\n          \"description\": \"The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image.\",\n          \"enum\": [\"standard\", \"hd\"],\n          \"type\": \"string\"\n        },\n        \"seeds\": {\n          \"description\": \"A list of seeds to use for each prompt. If the user asks to modify a previous image, populate this field with the seed used to generate that image from the image lobe-image-designer metadata.\",\n          \"items\": {\n            \"type\": \"integer\"\n          },\n          \"type\": \"array\"\n        },\n        \"size\": {\n          \"default\": \"1024x1024\",\n          \"description\": \"The resolution of the requested image, which can be wide, square, or tall. Use 1024x1024 (square) as the default unless the prompt suggests a wide image, 1792x1024, or a full-body portrait, in which case 1024x1792 (tall) should be used instead. Always include this parameter in the request.\",\n          \"enum\": [\"1792x1024\", \"1024x1024\", \"1024x1792\"],\n          \"type\": \"string\"\n        },\n        \"style\": {\n          \"default\": \"vivid\",\n          \"description\": \"The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.\",\n          \"enum\": [\"vivid\", \"natural\"],\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"prompts\"],\n      \"type\": \"object\"\n    }\n  },\n  \"type\": \"function\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running LobeChat Setup Script\nDESCRIPTION: A command that downloads and executes the setup script for LobeChat with Chinese language option, preparing the environment for deployment.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/README.zh-CN.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -fsSL https://lobe.li/setup.sh) -l zh_CN\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.6.0\nDESCRIPTION: Changelog entry documenting version 0.6.0 release with code refactoring and feature improvements\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n## [Version 0.6.0](https://github.com/lobehub/lobe-chat/compare/v0.5.0...v0.6.0)\n\n<sup>Released on **2023-07-22**</sup>\n\n#### ♻ Code Refactoring\n\n- **misc**: 重构 selector 文件组织.\n\n#### ✨ Features\n\n- **misc**: 补充 token 详情.\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Service Environment Variables\nDESCRIPTION: Environment variables required for configuring S3 storage service in LobeChat. These variables are needed to store files in the server-side database implementation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nS3_ACCESS_KEY_ID=\nS3_SECRET_ACCESS_KEY=\nS3_ENDPOINT=\nS3_BUCKET=\nS3_PUBLIC_DOMAIN=\nS3_ENABLE_PATH_STYLE=\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grouped Sessions in SessionService\nDESCRIPTION: Implements a method in the SessionService class to retrieve grouped sessions by calling the SessionModel's queryWithGroups method.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass SessionService {\n  // ... other SessionGroup related implementations\n\n  async getGroupedSessions(): Promise<ChatSessionList> {\n    return SessionModel.queryWithGroups();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Example of Regular and Materialized Views with Configuration Options\nDESCRIPTION: Comprehensive example showing how to create both regular and materialized views with advanced configuration options. Demonstrates using WITH clauses, joins, and various PostgreSQL-specific settings.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// regular view\nconst newYorkers = pgView('new_yorkers')\n  .with({\n    checkOption: 'cascaded',\n    securityBarrier: true,\n    securityInvoker: true,\n  })\n  .as((qb) => {\n    const sq = qb\n      .$with('sq')\n      .as(\n        qb.select({ userId: users.id, cityId: cities.id })\n          .from(users)\n          .leftJoin(cities, eq(cities.id, users.homeCity))\n          .where(sql`${users.age1} > 18`),\n      );\n    return qb.with(sq).select().from(sq).where(sql`${users.homeCity} = 1`);\n  });\n\n// materialized view\nconst newYorkers2 = pgMaterializedView('new_yorkers')\n  .using('btree')\n  .with({\n    fillfactor: 90,\n    toast_tuple_target: 0.5,\n    autovacuum_enabled: true,\n    ...\n  })\n  .tablespace('custom_tablespace')\n  .withNoData()\n  .as((qb) => {\n    const sq = qb\n      .$with('sq')\n      .as(\n        qb.select({ userId: users.id, cityId: cities.id })\n          .from(users)\n          .leftJoin(cities, eq(cities.id, users.homeCity))\n          .where(sql`${users.age1} > 18`),\n      );\n    return qb.with(sq).select().from(sq).where(sql`${users.homeCity} = 1`);\n  });\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Release Information in Markdown\nDESCRIPTION: Shows the version number, comparison link to previous version, and release date for this LobeChat release.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n## [Version 0.47.0](https://github.com/lobehub/lobe-chat/compare/v0.46.1...v0.47.0)\n\n<sup>Released on **2023-08-15**</sup>\n```\n\n----------------------------------------\n\nTITLE: Model Card Update Reference\nDESCRIPTION: Code reference showing the update to GPT-3.5-turbo model card documentation, related to issue #1449\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**misc**: Update gpt-3.5-turbo model card, closes [#1449](https://github.com/lobehub/lobe-chat/issues/1449) ([d0be0c7](https://github.com/lobehub/lobe-chat/commit/d0be0c7))\n```\n\n----------------------------------------\n\nTITLE: Plugin/Tool Slice Refactoring Reference\nDESCRIPTION: Code reference showing the refactoring of plugin and tool slices in the application, as part of issue #1438 improvements\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**misc**: Refactor the plugin and tool slice, closes [#1438](https://github.com/lobehub/lobe-chat/issues/1438)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Connection String Example\nDESCRIPTION: Example of a PostgreSQL connection string for the pgvector database. This string contains the database credentials and connection details needed for LobeChat to connect to the database.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.mdx#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npostgresql://postgres:wAbLxfXSwkxxxxxx@45.577.281.48:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateGroupModal in React TSX\nDESCRIPTION: Creates a modal component for creating new session groups, demonstrating how to bind store actions to UI components for interactive functionality.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst CreateGroupModal = () => {\n  // ... Other logic\n\n  const [updateSessionGroup, addCustomGroup] = useSessionStore((s) => [\n    s.updateSessionGroupId,\n    s.addSessionGroup,\n  ]);\n\n  return (\n    <Modal\n      onOk={async () => {\n        // ... Other logic\n        const groupId = await addCustomGroup(name);\n        await updateSessionGroup(sessionId, groupId);\n      }}\n    >\n      {/* ... */}\n    </Modal>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PostgreSQL Materialized View with Drizzle ORM\nDESCRIPTION: Demonstrates how to create a basic materialized view in PostgreSQL using Drizzle ORM. The example creates a view called 'new_yorkers' that selects all users where the cityId equals 1.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst newYorkers = pgMaterializedView('new_yorkers').as((qb) => qb.select().from(users).where(eq(users.cityId, 1)));\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE MATERIALIZED VIEW \"new_yorkers\" AS SELECT * FROM \"users\";\n```\n\n----------------------------------------\n\nTITLE: SessionStore EqualFn Refactoring - JavaScript/TypeScript\nDESCRIPTION: Changed the default equalFn to shallow for sessionStore and settingStore to optimize performance of store comparisons.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Change made in commit 5c1b8d7\nsetEqualFn(sessionStore, shallow);\n\n// Change made in commit 1e72308\nsetEqualFn(settingStore, shallow);\n```\n\n----------------------------------------\n\nTITLE: Change Details Section\nDESCRIPTION: Collapsible section showing detailed changes with issue references\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n  <summary><kbd>Improvements and Fixes</kbd></summary>\n\n#### Code refactoring\n\n- **misc**: Refactor the plugin and tool slice, closes [#1437](https://github.com/lobehub/lobe-chat/issues/1437) ([003e230](https://github.com/lobehub/lobe-chat/commit/003e230))\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Services for LobeChat\nDESCRIPTION: Configures Docker services for LobeChat, including network, PostgreSQL, MinIO, Casdoor, and the main LobeChat application. Sets up volumes, environment variables, and network connections.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nname: lobe-chat-database\nservices:\n  network-service:\n    image: alpine\n    container_name: lobe-network\n    ports:\n      - '${MINIO_PORT}:${MINIO_PORT}' # MinIO API\n      - '9001:9001' # MinIO Console\n      - '${CASDOOR_PORT}:${CASDOOR_PORT}' # Casdoor\n      - '${LOBE_PORT}:3210' # LobeChat\n    command: tail -f /dev/null\n    networks:\n      - lobe-network\n\n  postgresql:\n    image: pgvector/pgvector:pg16\n    container_name: lobe-postgres\n    ports:\n      - '5432:5432'\n    volumes:\n      - './data:/var/lib/postgresql/data'\n    environment:\n      - 'POSTGRES_DB=${LOBE_DB_NAME}'\n      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'\n    healthcheck:\n      test: ['CMD-SHELL', 'pg_isready -U postgres']\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    restart: always\n    networks:\n      - lobe-network\n\n  minio:\n    image: minio/minio\n    container_name: lobe-minio\n    network_mode: 'service:network-service'\n    volumes:\n      - './s3_data:/etc/minio/data'\n    environment:\n      - 'MINIO_ROOT_USER=${MINIO_ROOT_USER}'\n      - 'MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}'\n      # - 'MINIO_API_CORS_ALLOW_ORIGIN=http://localhost:${LOBE_PORT}'\n      - 'MINIO_API_CORS_ALLOW_ORIGIN=https://lobe.example.com'\n    restart: always\n    command: >\n      server /etc/minio/data --address \":${MINIO_PORT}\" --console-address \":9001\"\n\n\n  casdoor:\n    image: casbin/casdoor\n    container_name: lobe-casdoor\n    entrypoint: /bin/sh -c './server --createDatabase=true'\n    network_mode: 'service:network-service'\n    depends_on:\n      postgresql:\n        condition: service_healthy\n    environment:\n      RUNNING_IN_DOCKER: 'true'\n      driverName: 'postgres'\n      dataSourceName: 'user=postgres password=${POSTGRES_PASSWORD} host=postgresql port=5432 sslmode=disable dbname=casdoor'\n      # origin: 'http://localhost:${CASDOOR_PORT}'\n      origin: 'https://auth.example.com'\n      runmode: 'dev'\n    volumes:\n      - ./init_data.json:/init_data.json\n\n  lobe:\n    image: lobehub/lobe-chat-database\n    container_name: lobe-chat-database\n    network_mode: 'service:network-service'\n    depends_on:\n      postgresql:\n        condition: service_healthy\n      network-service:\n        condition: service_started\n      minio:\n        condition: service_started\n      casdoor:\n        condition: service_started\n\n    environment:\n      # - 'APP_URL=http://localhost:3210'\n      - 'APP_URL=https://lobe.example.com'\n\n      - 'NEXT_AUTH_SSO_PROVIDERS=casdoor'\n      - 'KEY_VAULTS_SECRET=Kix2wcUONd4CX51E/ZPAd36BqM4wzJgKjPtz2sGztqQ='\n      - 'NEXT_AUTH_SECRET=NX2kaPE923dt6BL2U8e9oSre5RfoT7hg'\n      # - 'AUTH_URL=http://localhost:${LOBE_PORT}/api/auth'\n      - 'AUTH_URL=https://lobe.example.com/api/auth'\n\n      # - 'AUTH_CASDOOR_ISSUER=http://localhost:${CASDOOR_PORT}'\n      - 'AUTH_CASDOOR_ISSUER=https://auth.example.com'\n\n      - 'DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgresql:5432/${LOBE_DB_NAME}'\n      # - 'S3_ENDPOINT=http://localhost:${MINIO_PORT}'\n      - 'S3_ENDPOINT=https://minio.example.com'\n\n      - 'S3_BUCKET=${MINIO_LOBE_BUCKET}'\n      # - 'S3_PUBLIC_DOMAIN=http://localhost:${MINIO_PORT}'\n      - 'S3_PUBLIC_DOMAIN=https://minio.example.com'\n\n      - 'S3_ENABLE_PATH_STYLE=1'\n      - 'LLM_VISION_IMAGE_USE_BASE64=1'\n    env_file:\n      - .env\n    restart: always\n\nvolumes:\n  data:\n    driver: local\n  s3_data:\n    driver: local\n\nnetworks:\n  lobe-network:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Configuration Migration Implementation - TypeScript\nDESCRIPTION: Implementation of MigrationV2ToV3 class handling migration from version 2 to 3 with session data transformation\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MigrationV2ToV3 implements Migration {\n  version = 2;\n\n  migrate(data: MigrationData<V2ConfigState>): MigrationData<V3ConfigState> {\n    const { sessions } = data.state;\n\n    return {\n      ...data,\n      state: {\n        ...data.state,\n        sessions: sessions.map((s) => this.migrateSession(s)),\n      },\n    };\n  }\n\n  migrateSession = (session: V2Session): V3Session => {\n    return {\n      ...session,\n      group: 'default',\n      pinned: session.group === 'pinned',\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Views with Raw SQL\nDESCRIPTION: This snippet shows how to declare views using raw SQL in Drizzle ORM. It demonstrates creating both a regular view and a materialized view with explicit column schema definitions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// regular view\nconst newYorkers = pgView('new_yorkers', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull(),\n  cityId: integer('city_id').notNull(),\n}).as(sql`select * from ${users} where ${eq(users.cityId, 1)}`);\n\n// materialized view\nconst newYorkers = pgMaterializedView('new_yorkers', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull(),\n  cityId: integer('city_id').notNull(),\n}).as(sql`select * from ${users} where ${eq(users.cityId, 1)}`);\n```\n\n----------------------------------------\n\nTITLE: Editing Ollama systemd Service on Linux\nDESCRIPTION: This command opens the systemd service file for Ollama on Linux systems to add environment variables.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/examples/ollama.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl edit ollama.service\n```\n\n----------------------------------------\n\nTITLE: Database Management Commands for LobeChat\nDESCRIPTION: Shell commands for monitoring LobeChat logs, and forcibly removing the database container to reset it in case of problems during schema migration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker logs -f lobe-chat\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose down  # 停止服务\nsudo rm -rf ./data   # 移除挂载的数据库数据\ndocker compose up -d # 重新启动\n```\n\n----------------------------------------\n\nTITLE: Data Export Structure - JSON\nDESCRIPTION: Standard JSON structure for exported data including version and state information\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exportType\": \"sessions\",\n  \"state\": {\n    \"sessions\": [],\n    \"topics\": [],\n    \"messages\": []\n  },\n  \"version\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Views with Query Builder in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to declare views using the query builder syntax in PostgreSQL with Drizzle ORM. It shows the creation of a user table and two views: a general user view and a customers-only view.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pgTable, pgView, serial, text, timestamp } from \"drizzle-orm/pg-core\";\n\nexport const user = pgTable(\"user\", {\n  id: serial(\"id\"),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  password: text(\"password\"),\n  role: text(\"role\").$type<\"admin\" | \"customer\">(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userView = pgView(\"user_view\").as((qb) => qb.select().from(user));\nexport const customersView = pgView(\"customers_view\").as((qb) => qb.select().from(user).where(eq(user.role, \"customer\")));\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW \"user_view\" AS SELECT * FROM \"user\";\nCREATE VIEW \"customers_view\" AS SELECT * FROM \"user\" WHERE \"role\" = 'customer';\n```\n\n----------------------------------------\n\nTITLE: Topic Persistence Implementation - JavaScript/TypeScript\nDESCRIPTION: Added functionality to persist hidden Topic state and optimized first hydration logic.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Added in commit 9ea2778\n// Implemented topic persistence\n\n// Optimized in commit fefae61\n// First hydration logic improvements\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest LobeChat Docker Image\nDESCRIPTION: Command to pull the latest Docker image for LobeChat from the Docker registry to update the application.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/advanced/upstream-sync.mdx#2025-04-11_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\ndocker pull lobehub/lobe-chat\n```\n\n----------------------------------------\n\nTITLE: Installing Dokploy via Shell Script\nDESCRIPTION: A shell command to install Dokploy on your system using the official installation script.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://dokploy.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Creating Zustand Store for Chat Messages\nDESCRIPTION: Implements a Zustand store in src/store/chatStore.ts to manage the state of chat messages, including a function to add new messages.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development-frontend.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/store/chatStore.ts\nimport create from 'zustand';\n\ntype ChatState = {\n  messages: ChatMessage[];\n  addMessage: (message: ChatMessage) => void;\n};\n\nexport const useChatStore = create<ChatState>((set) => ({\n  messages: [],\n  addMessage: (message) => set((state) => ({ messages: [...state.messages, message] })),\n}));\n```\n\n----------------------------------------\n\nTITLE: Deploying Lobe Chat Database Version on Sealos\nDESCRIPTION: A button that links to the Sealos template for deploying the Lobe Chat database version. This is the main application being set up in this guide.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/sealos.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://raw.githubusercontent.com/labring-actions/templates/main/Deploy-on-Sealos.svg)](https://template.usw.sealos.io/deploy?templateName=lobe-chat-db)\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Directory for Docker Deployment\nDESCRIPTION: Creates a directory to store LobeChat files before deploying with Docker.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n$ mkdir lobe-chat-db && cd lobe-chat-db\n```\n\n----------------------------------------\n\nTITLE: Defining Default Agent Config with Environment Variable in LobeHub\nDESCRIPTION: Support defining default agent configuration using the DEFAULT_AGENT_CONFIG environment variable.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\nSupport define default agent config with `DEFAULT_AGENT_CONFIG` ENV\n```\n\n----------------------------------------\n\nTITLE: Clerk Authentication Service Environment Variables\nDESCRIPTION: Required environment variables for configuring Clerk authentication service in LobeChat, including publishable key, secret key, and webhook secret.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/dokploy.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_xxxxxxxxxxx\nCLERK_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxx\nCLERK_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Page Component with Ant Design in React\nDESCRIPTION: Builds a React component for the Chat Page in src/features/chat/index.tsx, using Ant Design's List component to display chat messages from the Zustand store.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development-frontend.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// src/features/chat/index.tsx\nimport { List, Typography } from 'antd';\nimport { useChatStore } from 'src/store/chatStore';\n\nconst ChatPage = () => {\n  const messages = useChatStore((state) => state.messages);\n\n  return (\n    <List\n      dataSource={messages}\n      renderItem={(message) => (\n        <List.Item>\n          <Typography.Text>{message.content}</Typography.Text>\n        </List.Item>\n      )}\n    />\n  );\n};\n\nexport default ChatPage;\n```\n\n----------------------------------------\n\nTITLE: Writing Gitmoji Commit Messages for LobeChat\nDESCRIPTION: An example of how to format commit messages using gitmoji to clearly communicate the purpose of code changes. This pattern helps contributors quickly understand the content and intent of submissions while maintaining consistent documentation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/contributing-guidelines.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n📝 Update README with contribution guidelines\n\n- Added section about code style preferences\n- Included instructions for running tests\n- Corrected typos and improved formatting\n```\n\n----------------------------------------\n\nTITLE: Listing New Features in Markdown\nDESCRIPTION: Summarizes the new features added in this version using a Markdown bullet point.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n#### ✨ Features\n\n- **misc**: Add and update UI elements and agent configuration.\n```\n\n----------------------------------------\n\nTITLE: Supporting Ollama AI Provider for Local LLM in LobeHub\nDESCRIPTION: Added support for Ollama AI Provider to enable local language model usage.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\nSupport Ollama AI Provider for local LLM\n```\n\n----------------------------------------\n\nTITLE: Version Header Formatting\nDESCRIPTION: Markdown formatting for version release headers with links to compare changes\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### [Version 0.130.5](https://github.com/lobehub/lobe-chat/compare/v0.130.4...v0.130.5)\n```\n\n----------------------------------------\n\nTITLE: Deploying Logto Service on Sealos\nDESCRIPTION: A button that links to the Sealos template for deploying the Logto service. Logto is used for authentication in the Lobe Chat setup.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/sealos.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://raw.githubusercontent.com/labring-actions/templates/main/Deploy-on-Sealos.svg)](https://template.usw.sealos.io/deploy?templateName=logto)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with npm for LobeChat\nDESCRIPTION: Command to run all unit tests in the LobeChat project. This command executes all unit tests and generates a test report.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/test.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Creating New Branch in Git\nDESCRIPTION: This command creates and switches to a new branch in the local Git repository. It uses the git checkout command with the -b flag to create a new branch.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Adding Base Path Support for Subdirectories in LobeHub\nDESCRIPTION: Added basePath configuration to support deployment in subdirectories.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\nAdd basePath to support subdirectory\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on CentOS\nDESCRIPTION: Command to install Docker on CentOS systems using the yum package manager.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/platform/docker.mdx#2025-04-11_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n$ yum install docker\n```\n\n----------------------------------------\n\nTITLE: Executing LobeChat Setup Script\nDESCRIPTION: Downloads and executes the LobeChat setup script with Chinese language option, which handles the configuration process interactively.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database/docker-compose.zh-CN.mdx#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbash <(curl -fsSL https://lobe.li/setup.sh) -l zh_CN\n```\n\n----------------------------------------\n\nTITLE: Cloning LobeChat Repository in Bash\nDESCRIPTION: This command clones the LobeChat code repository to the local environment using Git.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/start.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/lobehub/lobe-chat.git\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: These commands stage all changes and create a new commit in Git. They use git add to stage changes and git commit to create a commit with a message.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Your meaningful commit message\"\n```\n\n----------------------------------------\n\nTITLE: Error Message Example When Using Proxy with LobeChat\nDESCRIPTION: Sample error output showing the UNABLE_TO_VERIFY_LEAF_SIGNATURE error that occurs when Node.js can't verify a certificate in the proxy chain.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/faq/proxy-with-unable-to-verify-leaf-signature.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[TypeError: fetch failed] {\n  cause: [Error: unable to verify the first certificate] {\n    code: 'UNABLE_TO_VERIFY_LEAF_SIGNATURE'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Slice for Zustand State Management\nDESCRIPTION: Defines a SessionActions interface and implements the createSessionSlice function that provides session-related functionality. This slice gets combined with other slices to form the complete SessionStore.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StateCreator } from 'zustand';\n\nimport { SessionStore } from '@/store/session';\n\nexport interface SessionActions {\n  /**\n   * A custom hook that uses SWR to fetch sessions data.\n   */\n  useFetchSessions: () => SWRResponse<any>;\n}\n\nexport const createSessionSlice: StateCreator<\n  SessionStore,\n  [['zustand/devtools', never]],\n  [],\n  SessionAction\n> = (set, get) => ({\n  useFetchSessions: () => {\n    // ...logic for initializing sessions\n  },\n  // ...implementation of other actions\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork with Upstream Repository in Git\nDESCRIPTION: These commands add the original repository as a remote, fetch its changes, and merge them into the local main branch. This keeps the fork up-to-date with the latest changes from the original repository.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/lobehub/lobe-chat.git\ngit fetch upstream\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: JSON Format Error Response from OpenAI API\nDESCRIPTION: Alternative error message in JSON format showing the UNABLE_TO_VERIFY_LEAF_SIGNATURE error when making requests to OpenAI's API through a proxy with certificate issues.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/faq/proxy-with-unable-to-verify-leaf-signature.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"https://api.openai.com/v1\",\n  \"error\": {\n    \"cause\": {\n      \"code\": \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Medium Complexity State Management with Reducers\nDESCRIPTION: Directory structure for state management with reducers to simplify data transformation logic, commonly used for manageable data flow.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSortableList/store\n├── index.ts\n├── initialState.ts\n├── listDataReducer.ts\n└── store.ts\n```\n\n----------------------------------------\n\nTITLE: Release Details Formatting\nDESCRIPTION: Markdown formatting for release date and type information\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<sup>Released on **2024-03-01**</sup>\n\n#### 💄 Styles\n```\n\n----------------------------------------\n\nTITLE: Enabling Umami Analytics in LobeHub\nDESCRIPTION: Added support for Umami analytics integration.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\nSupport umami analytics\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Validation Environment Variable in Docker Run Command\nDESCRIPTION: Example Docker run command that includes the NODE_TLS_REJECT_UNAUTHORIZED environment variable to disable certificate validation.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/faq/proxy-with-unable-to-verify-leaf-signature.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e NODE_TLS_REJECT_UNAUTHORIZED=0 <other parameters> <image name>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Higher Complexity with Multiple Slices\nDESCRIPTION: Directory structure for state management with 15-30 states and 10-20 actions, using multiple slices to manage different aspects of the state.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSortableTree/store\n├── index.ts\n├── initialState.ts\n├── selectors.ts\n├── slices\n├── crudSlice.ts\n├── dndSlice.ts\n└── selectionSlice.ts\n├── store.ts\n└── treeDataReducer.ts\n```\n\n----------------------------------------\n\nTITLE: Version Update Links\nDESCRIPTION: Reference links for comparing versions\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n[Version 0.96.5](https://github.com/lobehub/lobe-chat/compare/v0.96.4...v0.96.5)\n```\n\n----------------------------------------\n\nTITLE: 生成环境变量密钥的Bash命令\nDESCRIPTION: 使用OpenSSL生成一个随机的32位Base64编码字符串，用作KEY_VAULTS_SECRET环境变量的值，用于加密存储在数据库中的API密钥和其他敏感信息。\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/self-hosting/server-database.zh-CN.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Directory Structure for High Complexity SessionStore\nDESCRIPTION: A detailed directory structure for a high complexity SessionStore with multiple slices, each containing its own state, actions, reducers, and selectors for better modularity.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLobeChat SessionStore\n├── index.ts\n├── initialState.ts\n├── selectors.ts\n├── slices\n│ ├── agentConfig\n│ │ ├── action.ts\n│ │ ├── index.ts\n│ │ ├── initialState.ts\n│ │ └── selectors.ts\n│ ├── chat\n│ │ ├── actions\n│ │ │ ├── index.ts\n│ │ │ ├── message.ts\n│ │ │ └── topic.ts\n│ │ ├── index.ts\n│ │ ├── initialState.ts\n│ │ ├── reducers\n│ │ │ ├── message.ts\n│ │ │ └── topic.ts\n│ │ ├── selectors\n│ │ │ ├── chat.ts\n│ │ │ ├── index.ts\n│ │ │ ├── token.ts\n│ │ │ ├── topic.ts\n│ │ │ └── utils.ts\n│ │ └── utils.ts\n│ └── session\n│ ├── action.ts\n│ ├── index.ts\n│ ├── initialState.ts\n│ ├── reducers\n│ │ └── session.ts\n│ └── selectors\n│ ├── export.ts\n│ ├── index.ts\n│ └── list.ts\n└── store.ts\n```\n\n----------------------------------------\n\nTITLE: Version Summary Information\nDESCRIPTION: Release date and change type headers\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n<sup>Released on **2023-10-29**</sup>\n\n#### 🐛 Bug Fixes\n```\n\n----------------------------------------\n\nTITLE: Recommended Directory Structure for LobeChat SessionStore\nDESCRIPTION: Best practice directory structure for LobeChat SessionStore, demonstrating organization of files with clear responsibilities for better maintenance and scalability.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-intro.zh-CN.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsrc/store/session\n├── index.ts                           # SessionStore 的聚合导出文件\n├── initialState.ts                    # 聚合了所有 slice 的 initialState\n├── selectors.ts                       # 从各个 slices 导出的 selector\n├── store.ts                           # SessionStore 的创建和使用\n├── helpers.ts                         # 辅助函数\n└── slices                             # 各个独立的功能切片\n    ├── agent                          # 助理 Slice\n    │   ├── action.ts\n    │   ├── index.ts\n    │   └── selectors.ts\n    └── session                        # 会话 Slice\n        ├── action.ts\n        ├── helpers.ts\n        ├── initialState.ts\n        └── selectors\n            ├── export.ts\n            ├── list.ts\n            └── index.ts\n```\n\n----------------------------------------\n\nTITLE: Ollama Model Fix Reference\nDESCRIPTION: Code reference showing fixes for duplicate Llama model and addition of Llama2 Chinese models, related to issue #1579\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**ollama**: Fix duplicate llama model and add llama2-chinese models, closes [#1579](https://github.com/lobehub/lobe-chat/issues/1579) ([6b9b5c8](https://github.com/lobehub/lobe-chat/commit/6b9b5c8))\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Selectors in TypeScript\nDESCRIPTION: This snippet shows the implementation of two selector functions: pluginList and displayPluginList. The pluginList selector combines standard and custom plugin lists, while displayPluginList transforms this data for UI display by mapping plugin properties.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-selectors.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst pluginList = (s: PluginStoreState) => [...s.pluginList, ...s.customPluginList];\n\nconst displayPluginList = (s: PluginStoreState) =>\n  pluginList(s).map((p) => ({\n    author: p.author,\n    avatar: p.meta?.avatar,\n    createAt: p.createAt,\n    desc: pluginHelpers.getPluginDesc(p.meta),\n    homepage: p.homepage,\n    identifier: p.identifier,\n    title: pluginHelpers.getPluginTitle(p.meta),\n  }));\n```\n\n----------------------------------------\n\nTITLE: Settings Store Code Restructuring - JavaScript/TypeScript\nDESCRIPTION: Refactored the settings store code structure to improve maintainability and organization.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Refactored in commit 4b6f917\n// Settings store code restructuring\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Selectors in React Components\nDESCRIPTION: This snippet demonstrates how to consume selectors in React components. It shows importing the usePluginStore hook and pluginSelectors, then using the displayPluginList selector to retrieve the processed plugin list for rendering.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/state-management/state-management-selectors.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePluginStore } from '@/store/plugin';\nimport { pluginSelectors } from '@/store/plugin/selectors';\n\nconst Render = ({ plugins }) => {\n  const list = usePluginStore(pluginSelectors.displayPluginList);\n\n  return <> ... </>;\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.5.0\nDESCRIPTION: Changelog entry documenting version 0.5.0 release with new features and bug fixes\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/changelog/CHANGELOG.v0.md#2025-04-11_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n## [Version 0.5.0](https://github.com/lobehub/lobe-chat/compare/v0.4.3...v0.5.0)\n\n<sup>Released on **2023-07-22**</sup>\n\n#### ✨ Features\n\n- **misc**: 支持选择 Emoji.\n\n#### 🐛 Bug Fixes\n\n- **misc**: 修正 total token 计算不正确的问题.\n```\n\n----------------------------------------\n\nTITLE: Generated Locales Structure in Bash\nDESCRIPTION: Shows the structure of the generated localization files created by lobe-i18n, organized by language code with corresponding JSON translation files for each module.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/internationalization/internationalization-implementation.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlocales\n├── ar\n│   ├── chat.json\n│   ├── common.json\n│   ├── error.json\n│   └── ... (other translation files)\n├── de-DE\n│   ├── chat.json\n│   ├── common.json\n│   ├── error.json\n│   └── ... (other translation files)\n├── en-US\n├── ... (other language directories)\n├── zh-CN\n└── zh-TW\n```\n\n----------------------------------------\n\nTITLE: Formatting Release Version Header in Markdown\nDESCRIPTION: Demonstrates how to format a release version header with a link to compare changes between versions.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### [Version 1.70.9](https://github.com/lobehub/lobe-chat/compare/v1.70.8...v1.70.9)\n```\n\n----------------------------------------\n\nTITLE: Running Automatic Translation Command for Language Files\nDESCRIPTION: This bash command runs the i18n script that utilizes the lobe-i18n tool to automatically translate and generate language files for the newly added locale without requiring manual updates.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/internationalization/add-new-locale.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run i18n\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1\nDESCRIPTION: Changelog entry documenting improvements in WeChat authentication and discover assistant white list support\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#### What's improved\n\n- **auth**: Add WeChat authentication support, closes [#5195](https://github.com/lobehub/lobe-chat/issues/5195) ([95153a4](https://github.com/lobehub/lobe-chat/commit/95153a4))\n- **misc**: Support white list for discover assistant, closes [#5216](https://github.com/lobehub/lobe-chat/issues/5216) ([90bb20d](https://github.com/lobehub/lobe-chat/commit/90bb20d))\n```\n\n----------------------------------------\n\nTITLE: Centered Logo Images HTML Layout\nDESCRIPTION: HTML markup for displaying centered project logos with specific height constraints and image sources from npm registry and Alipay gateway.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/wiki/HOME.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n\n<img height=\"120\" src=\"https://registry.npmmirror.com/@lobehub/assets-logo/1.0.0/files/assets/logo-3d.webp\">\n<img height=\"120\" src=\"https://gw.alipayobjects.com/zos/kitchen/qJ3l3EPsdW/split.svg\">\n<img height=\"120\" src=\"https://registry.npmmirror.com/@lobehub/assets-emoji/1.3.0/files/assets/robot.webp\">\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Git Commit References\nDESCRIPTION: Git commit hashes and issue references used in release notes\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[3b2cd88](https://github.com/lobehub/lobe-chat/commit/3b2cd88)\n[f1cb0af](https://github.com/lobehub/lobe-chat/commit/f1cb0af)\n[22480a9](https://github.com/lobehub/lobe-chat/commit/22480a9)\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Rules in TypeScript for LobeChat Web Crawler\nDESCRIPTION: Demonstrates how to configure URL matching rules for the web crawler. The configuration includes URL pattern matching using regex, optional URL transformation, implementation selection, and content filtering options. This code shows how to handle specific website crawling patterns.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/packages/web-crawler/README.zh-CN.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = [\n  // ... 其他 url 匹配规则\n  {\n    // URL 匹配模式，仅支持正则表达式\n    urlPattern: 'https://example.com/articles/(.*)',\n\n    // 可选：URL 转换，用于重定向到更易抓取的版本\n    urlTransform: 'https://example.com/print/$1',\n\n    // 可选：指定抓取实现方式，支持 'naive'、'jina'、'search1api' 和 'browserless' 四种\n    impls: ['naive', 'jina', 'search1api', 'browserless'],\n\n    // 可选：内容过滤配置\n    filterOptions: {\n      // 是否启用 Readability 算法，用于过滤干扰元素\n      enableReadability: true,\n      // 是否转换为纯文本\n      pureText: false,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Release Notes Formatting in Markdown\nDESCRIPTION: Standard markdown formatting for LobeHub Chat release notes showing version numbers, dates, improvements and fixes with links to issues and commits.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### [Version 1.21.1](https://github.com/lobehub/lobe-chat/compare/v1.21.0...v1.21.1)\n\n<sup>Released on **2024-09-30**</sup>\n\n<br/>\n\n<details>\n<summary><kbd>Improvements and Fixes</kbd></summary>\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Message Preprocessing and Stream Handling in TypeScript\nDESCRIPTION: Implements message preprocessing and streaming functionality for chat messages with support for system roles, max tokens, and vision models. Handles message streaming, tool calls, and error cases.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\npreprocessMsgs = !chatConfig.inputTemplate\n      ? preprocessMsgs\n      : preprocessMsgs.map((m) => {\n          if (m.role === 'user') {\n            try {\n              return { ...m, content: compiler({ text: m.content }) };\n            } catch (error) {\n              console.error(error);\n\n              return m;\n            }\n          }\n\n          return m;\n        });\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Release Date\nDESCRIPTION: Shows the version number and release date for this update.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n### [Version 1.0.14](https://github.com/lobehub/lobe-chat/compare/v1.0.13...v1.0.14)\n\n<sup>Released on **2024-06-20**</sup>\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Entry for Version Updates\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, bug fixes, and improvements to the codebase across multiple releases.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### [Version 1.47.5]\n\n<sup>Released on **2025-01-20**</sup>\n\n#### ♻ Code Refactoring\n\n- **misc**: Improve ai provider code.\n\n<br/>\n\n<details>\n<summary><kbd>Improvements and Fixes</kbd></summary>\n```\n\n----------------------------------------\n\nTITLE: Declaring Views with Query Builder in SQLite\nDESCRIPTION: This snippet illustrates how to declare views using the query builder syntax in SQLite with Drizzle ORM. It demonstrates the creation of a user table and two views: a general user view and a customers-only view.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { integer, text, sqliteView, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nexport const user = sqliteTable(\"user\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  password: text(\"password\"),\n  role: text(\"role\").$type<\"admin\" | \"customer\">(),\n  createdAt: integer(\"created_at\"),\n  updatedAt: integer(\"updated_at\"),\n});\n\nexport const userView = sqliteView(\"user_view\").as((qb) => qb.select().from(user));\nexport const customersView = sqliteView(\"customers_view\").as((qb) => qb.select().from(user).where(eq(user.role, \"customer\")));\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW \"user_view\" AS SELECT * FROM \"user\";\nCREATE VIEW \"customers_view\" AS SELECT * FROM \"user\" WHERE \"role\" = 'customer';\n```\n\n----------------------------------------\n\nTITLE: Providing Additional Details\nDESCRIPTION: Includes more details about the changes in a collapsible section.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n<details>\n<summary><kbd>Improvements and Fixes</kbd></summary>\n\n#### What's fixed\n\n- **misc**: Fix to send image without text, closes [#2946](https://github.com/lobehub/lobe-chat/issues/2946) ([44fb78a](https://github.com/lobehub/lobe-chat/commit/44fb78a))\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 2\nDESCRIPTION: Changelog entry for styles update related to deepseek V3 model\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#### 💄 Styles\n\n- **misc**: Update deepseek V3 model, closes [#5199](https://github.com/lobehub/lobe-chat/issues/5199) ([868f556](https://github.com/lobehub/lobe-chat/commit/868f556))\n```\n\n----------------------------------------\n\nTITLE: Declaring Views with Standalone Query Builder in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to declare views using a standalone query builder in PostgreSQL with Drizzle ORM. It creates a user table and two views: a general user view and a customers-only view.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pgTable, pgView, serial, text, timestamp, QueryBuilder} from \"drizzle-orm/pg-core\";\n\nconst qb = new QueryBuilder();\n\nexport const user = pgTable(\"user\", {\n  id: serial(\"id\"),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  password: text(\"password\"),\n  role: text(\"role\").$type<\"admin\" | \"customer\">(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userView = pgView(\"user_view\").as(qb.select().from(user));\nexport const customersView = pgView(\"customers_view\").as(qb.select().from(user).where(eq(user.role, \"customer\")));\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW \"user_view\" AS SELECT * FROM \"user\";\nCREATE VIEW \"customers_view\" AS SELECT * FROM \"user\" WHERE \"role\" = 'customer';\n```\n\n----------------------------------------\n\nTITLE: Version Reference Links in Markdown\nDESCRIPTION: Markdown links showing version comparisons between releases\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n[Version 1.2.12](https://github.com/lobehub/lobe-chat/compare/v1.2.11...v1.2.12)\n```\n\n----------------------------------------\n\nTITLE: Declaring Existing Views in Drizzle ORM\nDESCRIPTION: This snippet demonstrates how to declare existing views in Drizzle ORM. It shows the declaration of a user table and an existing view 'trimmed_user' with a subset of columns.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/markdown/__tests__/demo.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const user = pgTable(\"user\", {\n  id: serial(\"id\"),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  password: text(\"password\"),\n  role: text(\"role\").$type<\"admin\" | \"customer\">(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\n// regular view\nexport const trimmedUser = pgView(\"trimmed_user\", {\n  id: serial(\"id\"),\n  name: text(\"name\"),\n  email: text(\"email\"),\n}).existing();\n\n// materialized view won't make any difference, yet you can use it for consistency\nexport const trimmedUser = pgMaterializedView(\"trimmed_user\", {\n  id: serial(\"id\"),\n  name: text(\"name\"),\n  email: text(\"email\"),\n}).existing();\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue References\nDESCRIPTION: Markdown links referencing GitHub issues and pull requests\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n[#2693](https://github.com/lobehub/lobe-chat/issues/2693)\n```\n\n----------------------------------------\n\nTITLE: Back to Top Navigation\nDESCRIPTION: Markdown badge link for navigating back to top of page\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/CHANGELOG.md#2025-04-11_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://img.shields.io/badge/-BACK_TO_TOP-151515?style=flat-square)](#readme-top)\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Message Functionality in Lobe Chat\nDESCRIPTION: This snippet shows the beginning of the sendMessage implementation in the chat store. It handles sending messages with optional files, manages message creation state, and prepares new message parameters for processing. The code includes logic for handling file attachments and message content.\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/src/libs/langchain/loaders/code/__tests__/long.txt#2025-04-11_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n  sendMessage: async ({ message, files, onlyAddUserMessage, isWelcomeQuestion }) => {\n    const { internal_coreProcessMessage, activeTopicId, activeId } = get();\n    if (!activeId) return;\n\n    const fileIdList = files?.map((f) => f.id);\n\n    const hasFile = !!fileIdList && fileIdList.length > 0;\n\n    // if message is empty or no files, then stop\n    if (!message && !hasFile) return;\n\n    set({ isCreatingMessage: true }, false, 'creatingMessage/start');\n\n    const newMessage: CreateMessageParams = {\n      content: message,\n      // if message has attached with files, then add files to message and the agent\n      files: fileIdList,\n      role: 'user',\n      sessionId: activeId,\n      // if there is activeTopicId，then add topicId to message\n      topicId: activeTopicId,\n    };\n\n    const agentConfig = getAgentChatConfig();\n\n    let tempMessageId: string | undefined = undefined;\n    let newTopicId: string | undefined = undefined;\n```\n\n----------------------------------------\n\nTITLE: Export Service Implementation Update - diff\nDESCRIPTION: Modification of export service to include session groups in exported data\nSOURCE: https://github.com/lobehub/lobe-chat/blob/main/docs/development/basic/feature-development.mdx#2025-04-11_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nclass ConfigService {\n  // ... Other code omitted\n\n  exportSessions = async () => {\n    const sessions = await sessionService.getAllSessions();\n+   const sessionGroups = await sessionService.getSessionGroups();\n    const messages = await messageService.getAllMessages();\n    const topics = await topicService.getAllTopics();\n\n-   const config = createConfigFile('sessions', { messages, sessions, topics });\n+   const config = createConfigFile('sessions', { messages, sessionGroups, sessions, topics });\n\n    exportConfigFile(config, 'sessions');\n  };\n}\n```"
  }
]