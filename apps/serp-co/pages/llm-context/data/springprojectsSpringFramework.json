[
  {
    "owner": "spring-projects",
    "repo": "spring-framework",
    "content": "TITLE: Dependency Injection in Spring using Constructor Injection\nDESCRIPTION: This code snippet illustrates dependency injection in Spring using constructor injection. It shows how to define a bean with dependencies and how Spring automatically resolves and injects these dependencies.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/test/resources/org/springframework/core/io/support/test-resources/resource2.txt#2025-04-13_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyService {\n    private final MyRepository repository;\n\n    @Autowired\n    public MyService(MyRepository repository) {\n        this.repository = repository;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Scanning in Spring\nDESCRIPTION: This snippet shows how to configure component scanning in Spring. It uses the @ComponentScan annotation to automatically detect and register beans defined in the specified package and its sub-packages.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/test/resources/org/springframework/core/io/support/test-resources/resource2.txt#2025-04-13_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@ComponentScan(basePackages = \"com.example.myapp\")\npublic class AppConfig {\n    // Configuration code\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Retrieving Beans in Spring Java Configuration\nDESCRIPTION: This snippet demonstrates how to define a bean using Java configuration in Spring and retrieve it from the application context. It shows the use of @Configuration and @Bean annotations for bean definition.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/test/resources/org/springframework/core/io/support/test-resources/resource2.txt#2025-04-13_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\npublic class AppConfig {\n    @Bean\n    public MyBean myBean() {\n        return new MyBean();\n    }\n}\n\nApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\nMyBean bean = context.getBean(MyBean.class);\n```\n\n----------------------------------------\n\nTITLE: Creating Java-based Configuration Class in Spring Framework\nDESCRIPTION: This snippet shows how to create a Java-based configuration class in Spring Framework. It uses the @Configuration annotation to define a configuration class and @Bean annotations to declare beans.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/test/resources/org/springframework/core/io/support/test-resources/resource1.txt#2025-04-13_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class AppConfig {\n\n    @Bean\n    public MyBean myBean() {\n        return new MyBean(\"Spring\");\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Component Scanning with Annotations in Spring Framework\nDESCRIPTION: This snippet demonstrates how to use component scanning with annotations in Spring Framework. It shows the usage of @ComponentScan annotation to automatically detect and register beans in the application context.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/test/resources/org/springframework/core/io/support/test-resources/resource1.txt#2025-04-13_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(basePackages = \"com.example\")\npublic class AppConfig {\n    // Configuration code\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ApplicationContext with XML in Spring Framework\nDESCRIPTION: This snippet demonstrates how to configure an ApplicationContext using XML in Spring Framework. It shows the basic structure of a Spring XML configuration file, including bean definitions and property settings.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/test/resources/org/springframework/core/io/support/test-resources/resource1.txt#2025-04-13_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"myBean\" class=\"com.example.MyBean\">\n        <property name=\"name\" value=\"Spring\"/>\n    </bean>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring KubernetesClient Bean in Spring Boot Application\nDESCRIPTION: Shows how to define a KubernetesClient bean in a Spring Boot application. The client will be automatically configured with appropriate settings based on the environment.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/test/resources/org/springframework/web/servlet/view/script/empty.txt#2025-04-13_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic KubernetesClient kubernetesClient() {\n\treturn new DefaultKubernetesClient();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kubernetes Dependencies to Maven Configuration\nDESCRIPTION: Maven dependency configuration for adding Kubernetes client libraries to a Spring Boot project, using the Fabric8 Kubernetes client implementation.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/test/resources/org/springframework/web/servlet/view/script/empty.txt#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>io.fabric8</groupId>\n\t<artifactId>kubernetes-client</artifactId>\n\t<version>${fabric8.kubernetes-client.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting up Multi-platform Docker Container Configuration\nDESCRIPTION: Docker configuration properties for setting up a multi-platform container with Testcontainers. This configuration demonstrates how to specify platform-specific images for testing environments.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/test/resources/org/springframework/web/servlet/view/script/empty.txt#2025-04-13_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nspring.docker.compose.file=path/to/my-docker-compose.yaml\nspring.testcontainers.beans.mysql.image=mysql:8.0.35\nspring.testcontainers.beans.redis.image=redis:7.2.4\nspring.docker.compose.skip.in-tests=false\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiRelease JAR Support in Spring Framework Build\nDESCRIPTION: Configuration for enabling and customizing MultiRelease JAR support with specified Java release versions. Creates dedicated tasks and source sets for each Java variant.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/buildSrc/README.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'org.springframework.build.multiReleaseJar'\n}\n\nmultiRelease {\n\treleaseVersions 21, 24\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Java Preview Features in Spring Framework Build\nDESCRIPTION: DSL extension configuration to enable Java preview features for compiling and testing sources in a Spring Framework module.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/buildSrc/README.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nspringFramework {\n\tenableJavaPreviewFeatures = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RuntimeHints Java Agent in Spring Framework Build\nDESCRIPTION: Configuration for the RuntimeHintsAgent plugin to customize package instrumentation. The plugin creates dedicated test tasks for tests tagged with 'RuntimeHintsTests'.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/buildSrc/README.md#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n// this applies the `RuntimeHintsAgentPlugin` to the project\nplugins {\n\tid 'org.springframework.build.runtimehints-agent'\n}\n\n// You can configure the agent to include and exclude packages from the instrumentation process.\nruntimeHintsAgent {\n\tincludedPackages = [\"org.springframework\", \"io.spring\"]\n\texcludedPackages = [\"org.example\"]\n}\n\ndependencies {\n    // to use the test infrastructure, the project should also depend on the \"spring-core-test\" module\n\ttestImplementation(project(\":spring-core-test\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining module version in Gradle using platform dependency\nDESCRIPTION: Demonstrates how to use Gradle's platform feature to define and maintain consistent module versions across a project.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/test/resources/org/springframework/web/context/support/resource.txt#2025-04-13_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation platform(\"org.springframework:spring-framework-bom:5.3.0\")\n    implementation \"org.springframework:spring-context\"\n    implementation \"org.springframework:spring-web\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining module versions in Gradle build script\nDESCRIPTION: Shows how to specify module versions using a 'springVersion' variable in a Gradle build script. This approach allows for consistent version referencing across modules.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/test/resources/org/springframework/web/context/support/resource.txt#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    compile(\"org.springframework:spring-core:${springVersion}\")\n    compile(\"org.springframework:spring-beans:${springVersion}\")\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Maven dependency with BOM pattern\nDESCRIPTION: Shows how to use the Maven Bill of Materials (BOM) pattern to consistently reference module versions without repeating the version number.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/test/resources/org/springframework/web/context/support/resource.txt#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-framework-bom</artifactId>\n            <version>4.3.13.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n    </dependency>\n<dependencies>\n```\n\n----------------------------------------\n\nTITLE: Setting up Maven dependency with fixed version\nDESCRIPTION: Demonstrates how to set up a Maven dependency with a fixed version, which would need manual updates when the version changes.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/test/resources/org/springframework/web/context/support/resource.txt#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-core</artifactId>\n    <version>4.3.13.RELEASE</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring source compatibility with deprecation options in Java\nDESCRIPTION: Shows how to configure Java compiler options to maintain source compatibility when handling deprecated API elements.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/test/resources/org/springframework/web/context/support/resource.txt#2025-04-13_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/**\n * This class is marked as deprecated in Java 9/11 but\n * is intended to be used with JDK 8 as well.\n * @deprecated as of Java 9...\n */\n@Deprecated  // declaring as deprecated for JDK 8 as well\n@SuppressWarnings(\"removal\")  // not an error when compiled with JDK 9+\npublic class MyLegacyClass {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JVM Options for IntelliJ IDEA JUnit Tests\nDESCRIPTION: VM options to configure when running JUnit tests from IntelliJ IDEA to avoid out of memory errors. These settings increase the maximum permutation space, maximum heap size, and maximum heap size to 2048MB each.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/import-into-idea.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-XX:MaxPermSize=2048m -Xmx2048m -XX:MaxHeapSize=2048m\n```\n\n----------------------------------------\n\nTITLE: Precompiling Spring-OXM Module Command\nDESCRIPTION: Gradle command to precompile the spring-oxm module's test Java files, which is required before importing the project into IntelliJ IDEA due to repackaged dependencies.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/import-into-idea.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :spring-oxm:compileTestJava\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with Javadoc Link\nDESCRIPTION: Simple markdown header with an embedded HTML link to the Javadoc API documentation in a new tab.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/framework-docs/src/docs/api/dokka-overview.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# All Modules\n_See also the <a href=\"../javadoc-api/\" target=\"_blank\">Java API documentation (Javadoc)</a>._\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice for applying the Apache License 2.0 to a project. This template shows where to insert copyright year and owner information, and includes the required license notice and link to the full license text.\nSOURCE: https://github.com/spring-projects/spring-framework/blob/main/LICENSE.txt#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]